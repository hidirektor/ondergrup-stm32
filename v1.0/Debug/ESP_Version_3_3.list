
ESP_Version_3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bae0  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c9c  0800bcd0  0800bcd0  0000ccd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c96c  0800c96c  0000e044  2**0
                  CONTENTS
  4 .ARM          00000000  0800c96c  0800c96c  0000e044  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c96c  0800c96c  0000e044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c96c  0800c96c  0000d96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c970  0800c970  0000d970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  0800c974  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a8  20000044  0800c9b8  0000e044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011ec  0800c9b8  0000e1ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ef2  00000000  00000000  0000e06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000326a  00000000  00000000  00024f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  000281d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000111a  00000000  00000000  00029788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b50b  00000000  00000000  0002a8a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1b0  00000000  00000000  00045dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a63a3  00000000  00000000  0005ff5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106300  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cd0  00000000  00000000  00106344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0010c014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000044 	.word	0x20000044
 800020c:	00000000 	.word	0x00000000
 8000210:	0800bcb8 	.word	0x0800bcb8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000048 	.word	0x20000048
 800022c:	0800bcb8 	.word	0x0800bcb8

08000230 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	4a06      	ldr	r2, [pc, #24]	@ (8000258 <vApplicationGetIdleTaskMemory+0x28>)
 8000240:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	4a05      	ldr	r2, [pc, #20]	@ (800025c <vApplicationGetIdleTaskMemory+0x2c>)
 8000246:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2280      	movs	r2, #128	@ 0x80
 800024c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800024e:	bf00      	nop
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	20000060 	.word	0x20000060
 800025c:	200000b4 	.word	0x200000b4

08000260 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af02      	add	r7, sp, #8
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	f023 030f 	bic.w	r3, r3, #15
 8000270:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	011b      	lsls	r3, r3, #4
 8000276:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000278:	7b7b      	ldrb	r3, [r7, #13]
 800027a:	f043 030c 	orr.w	r3, r3, #12
 800027e:	b2db      	uxtb	r3, r3
 8000280:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000282:	7b7b      	ldrb	r3, [r7, #13]
 8000284:	f043 0308 	orr.w	r3, r3, #8
 8000288:	b2db      	uxtb	r3, r3
 800028a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800028c:	7b3b      	ldrb	r3, [r7, #12]
 800028e:	f043 030c 	orr.w	r3, r3, #12
 8000292:	b2db      	uxtb	r3, r3
 8000294:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000296:	7b3b      	ldrb	r3, [r7, #12]
 8000298:	f043 0308 	orr.w	r3, r3, #8
 800029c:	b2db      	uxtb	r3, r3
 800029e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80002a0:	bf00      	nop
 80002a2:	4825      	ldr	r0, [pc, #148]	@ (8000338 <lcd_send_cmd+0xd8>)
 80002a4:	f008 f8f5 	bl	8008492 <HAL_I2C_GetError>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b04      	cmp	r3, #4
 80002ac:	d0f9      	beq.n	80002a2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80002ae:	bf00      	nop
 80002b0:	4821      	ldr	r0, [pc, #132]	@ (8000338 <lcd_send_cmd+0xd8>)
 80002b2:	f008 f8e1 	bl	8008478 <HAL_I2C_GetState>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b20      	cmp	r3, #32
 80002ba:	d1f9      	bne.n	80002b0 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80002bc:	4b1f      	ldr	r3, [pc, #124]	@ (800033c <lcd_send_cmd+0xdc>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d116      	bne.n	80002f2 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80002c4:	2300      	movs	r3, #0
 80002c6:	73fb      	strb	r3, [r7, #15]
 80002c8:	e00f      	b.n	80002ea <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80002ca:	7bfb      	ldrb	r3, [r7, #15]
 80002cc:	3310      	adds	r3, #16
 80002ce:	443b      	add	r3, r7
 80002d0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80002d4:	7bfb      	ldrb	r3, [r7, #15]
 80002d6:	f022 0208 	bic.w	r2, r2, #8
 80002da:	b2d2      	uxtb	r2, r2
 80002dc:	3310      	adds	r3, #16
 80002de:	443b      	add	r3, r7
 80002e0:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002e4:	7bfb      	ldrb	r3, [r7, #15]
 80002e6:	3301      	adds	r3, #1
 80002e8:	73fb      	strb	r3, [r7, #15]
 80002ea:	7bfb      	ldrb	r3, [r7, #15]
 80002ec:	2b03      	cmp	r3, #3
 80002ee:	d9ec      	bls.n	80002ca <lcd_send_cmd+0x6a>
 80002f0:	e015      	b.n	800031e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80002f2:	2300      	movs	r3, #0
 80002f4:	73bb      	strb	r3, [r7, #14]
 80002f6:	e00f      	b.n	8000318 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80002f8:	7bbb      	ldrb	r3, [r7, #14]
 80002fa:	3310      	adds	r3, #16
 80002fc:	443b      	add	r3, r7
 80002fe:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000302:	7bbb      	ldrb	r3, [r7, #14]
 8000304:	f042 0208 	orr.w	r2, r2, #8
 8000308:	b2d2      	uxtb	r2, r2
 800030a:	3310      	adds	r3, #16
 800030c:	443b      	add	r3, r7
 800030e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000312:	7bbb      	ldrb	r3, [r7, #14]
 8000314:	3301      	adds	r3, #1
 8000316:	73bb      	strb	r3, [r7, #14]
 8000318:	7bbb      	ldrb	r3, [r7, #14]
 800031a:	2b03      	cmp	r3, #3
 800031c:	d9ec      	bls.n	80002f8 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800031e:	f107 0208 	add.w	r2, r7, #8
 8000322:	2364      	movs	r3, #100	@ 0x64
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	2304      	movs	r3, #4
 8000328:	214e      	movs	r1, #78	@ 0x4e
 800032a:	4803      	ldr	r0, [pc, #12]	@ (8000338 <lcd_send_cmd+0xd8>)
 800032c:	f007 fc44 	bl	8007bb8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000330:	bf00      	nop
 8000332:	3710      	adds	r7, #16
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	200003b4 	.word	0x200003b4
 800033c:	200002b4 	.word	0x200002b4

08000340 <lcd_send_data>:

void lcd_send_data (char data) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b086      	sub	sp, #24
 8000344:	af02      	add	r7, sp, #8
 8000346:	4603      	mov	r3, r0
 8000348:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	f023 030f 	bic.w	r3, r3, #15
 8000350:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	011b      	lsls	r3, r3, #4
 8000356:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000358:	7b7b      	ldrb	r3, [r7, #13]
 800035a:	f043 030d 	orr.w	r3, r3, #13
 800035e:	b2db      	uxtb	r3, r3
 8000360:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000362:	7b7b      	ldrb	r3, [r7, #13]
 8000364:	f043 0309 	orr.w	r3, r3, #9
 8000368:	b2db      	uxtb	r3, r3
 800036a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800036c:	7b3b      	ldrb	r3, [r7, #12]
 800036e:	f043 030d 	orr.w	r3, r3, #13
 8000372:	b2db      	uxtb	r3, r3
 8000374:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000376:	7b3b      	ldrb	r3, [r7, #12]
 8000378:	f043 0309 	orr.w	r3, r3, #9
 800037c:	b2db      	uxtb	r3, r3
 800037e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000380:	bf00      	nop
 8000382:	4825      	ldr	r0, [pc, #148]	@ (8000418 <lcd_send_data+0xd8>)
 8000384:	f008 f885 	bl	8008492 <HAL_I2C_GetError>
 8000388:	4603      	mov	r3, r0
 800038a:	2b04      	cmp	r3, #4
 800038c:	d0f9      	beq.n	8000382 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800038e:	bf00      	nop
 8000390:	4821      	ldr	r0, [pc, #132]	@ (8000418 <lcd_send_data+0xd8>)
 8000392:	f008 f871 	bl	8008478 <HAL_I2C_GetState>
 8000396:	4603      	mov	r3, r0
 8000398:	2b20      	cmp	r3, #32
 800039a:	d1f9      	bne.n	8000390 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 800039c:	4b1f      	ldr	r3, [pc, #124]	@ (800041c <lcd_send_data+0xdc>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d116      	bne.n	80003d2 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80003a4:	2300      	movs	r3, #0
 80003a6:	73fb      	strb	r3, [r7, #15]
 80003a8:	e00f      	b.n	80003ca <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
 80003ac:	3310      	adds	r3, #16
 80003ae:	443b      	add	r3, r7
 80003b0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003b4:	7bfb      	ldrb	r3, [r7, #15]
 80003b6:	f022 0208 	bic.w	r2, r2, #8
 80003ba:	b2d2      	uxtb	r2, r2
 80003bc:	3310      	adds	r3, #16
 80003be:	443b      	add	r3, r7
 80003c0:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003c4:	7bfb      	ldrb	r3, [r7, #15]
 80003c6:	3301      	adds	r3, #1
 80003c8:	73fb      	strb	r3, [r7, #15]
 80003ca:	7bfb      	ldrb	r3, [r7, #15]
 80003cc:	2b03      	cmp	r3, #3
 80003ce:	d9ec      	bls.n	80003aa <lcd_send_data+0x6a>
 80003d0:	e015      	b.n	80003fe <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003d2:	2300      	movs	r3, #0
 80003d4:	73bb      	strb	r3, [r7, #14]
 80003d6:	e00f      	b.n	80003f8 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80003d8:	7bbb      	ldrb	r3, [r7, #14]
 80003da:	3310      	adds	r3, #16
 80003dc:	443b      	add	r3, r7
 80003de:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003e2:	7bbb      	ldrb	r3, [r7, #14]
 80003e4:	f042 0208 	orr.w	r2, r2, #8
 80003e8:	b2d2      	uxtb	r2, r2
 80003ea:	3310      	adds	r3, #16
 80003ec:	443b      	add	r3, r7
 80003ee:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003f2:	7bbb      	ldrb	r3, [r7, #14]
 80003f4:	3301      	adds	r3, #1
 80003f6:	73bb      	strb	r3, [r7, #14]
 80003f8:	7bbb      	ldrb	r3, [r7, #14]
 80003fa:	2b03      	cmp	r3, #3
 80003fc:	d9ec      	bls.n	80003d8 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003fe:	f107 0208 	add.w	r2, r7, #8
 8000402:	2364      	movs	r3, #100	@ 0x64
 8000404:	9300      	str	r3, [sp, #0]
 8000406:	2304      	movs	r3, #4
 8000408:	214e      	movs	r1, #78	@ 0x4e
 800040a:	4803      	ldr	r0, [pc, #12]	@ (8000418 <lcd_send_data+0xd8>)
 800040c:	f007 fbd4 	bl	8007bb8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	200003b4 	.word	0x200003b4
 800041c:	200002b4 	.word	0x200002b4

08000420 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000428:	e006      	b.n	8000438 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	1c5a      	adds	r2, r3, #1
 800042e:	607a      	str	r2, [r7, #4]
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff ff84 	bl	8000340 <lcd_send_data>
	while (*str) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d1f4      	bne.n	800042a <lcd_send_string+0xa>
	}
}
 8000440:	bf00      	nop
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <lcd_init>:

void lcd_init (void) {
 800044a:	b580      	push	{r7, lr}
 800044c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 800044e:	2002      	movs	r0, #2
 8000450:	f7ff ff06 	bl	8000260 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8000454:	2028      	movs	r0, #40	@ 0x28
 8000456:	f7ff ff03 	bl	8000260 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 800045a:	200c      	movs	r0, #12
 800045c:	f7ff ff00 	bl	8000260 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000460:	2080      	movs	r0, #128	@ 0x80
 8000462:	f7ff fefd 	bl	8000260 <lcd_send_cmd>
	lcd_backlight(1);
 8000466:	2001      	movs	r0, #1
 8000468:	f000 f840 	bl	80004ec <lcd_backlight>
}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}

08000470 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	460a      	mov	r2, r1
 800047a:	71fb      	strb	r3, [r7, #7]
 800047c:	4613      	mov	r3, r2
 800047e:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d106      	bne.n	8000494 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000486:	79bb      	ldrb	r3, [r7, #6]
 8000488:	337f      	adds	r3, #127	@ 0x7f
 800048a:	b2db      	uxtb	r3, r3
 800048c:	4618      	mov	r0, r3
 800048e:	f7ff fee7 	bl	8000260 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8000492:	e008      	b.n	80004a6 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	2b02      	cmp	r3, #2
 8000498:	d105      	bne.n	80004a6 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 800049a:	79bb      	ldrb	r3, [r7, #6]
 800049c:	3b41      	subs	r3, #65	@ 0x41
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff fedd 	bl	8000260 <lcd_send_cmd>
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b082      	sub	sp, #8
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	4603      	mov	r3, r0
 80004b6:	603a      	str	r2, [r7, #0]
 80004b8:	71fb      	strb	r3, [r7, #7]
 80004ba:	460b      	mov	r3, r1
 80004bc:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80004be:	79ba      	ldrb	r2, [r7, #6]
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	4611      	mov	r1, r2
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ffd3 	bl	8000470 <lcd_gotoxy>
	lcd_send_string(str);
 80004ca:	6838      	ldr	r0, [r7, #0]
 80004cc:	f7ff ffa8 	bl	8000420 <lcd_send_string>
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <lcd_clear>:

void lcd_clear(void) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80004dc:	2001      	movs	r0, #1
 80004de:	f7ff febf 	bl	8000260 <lcd_send_cmd>
    HAL_Delay(2);
 80004e2:	2002      	movs	r0, #2
 80004e4:	f006 fd1e 	bl	8006f24 <HAL_Delay>

}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}

080004ec <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 80004f6:	4a05      	ldr	r2, [pc, #20]	@ (800050c <lcd_backlight+0x20>)
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff feaf 	bl	8000260 <lcd_send_cmd>
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	200002b4 	.word	0x200002b4

08000510 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000514:	f3bf 8f4f 	dsb	sy
}
 8000518:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800051a:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <__NVIC_SystemReset+0x24>)
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000522:	4904      	ldr	r1, [pc, #16]	@ (8000534 <__NVIC_SystemReset+0x24>)
 8000524:	4b04      	ldr	r3, [pc, #16]	@ (8000538 <__NVIC_SystemReset+0x28>)
 8000526:	4313      	orrs	r3, r2
 8000528:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800052a:	f3bf 8f4f 	dsb	sy
}
 800052e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <__NVIC_SystemReset+0x20>
 8000534:	e000ed00 	.word	0xe000ed00
 8000538:	05fa0004 	.word	0x05fa0004

0800053c <menu>:
bool HataMakineCalisiyortabla = 0;
bool EmnCerHataMakYukariCalis = 0;
bool EmnStopVar = 0;
char *deneme;

void menu(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000540:	2101      	movs	r1, #1
 8000542:	488f      	ldr	r0, [pc, #572]	@ (8000780 <menu+0x244>)
 8000544:	f007 f97c 	bl	8007840 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	2b01      	cmp	r3, #1
 800054c:	f040 808e 	bne.w	800066c <menu+0x130>
 8000550:	4b8c      	ldr	r3, [pc, #560]	@ (8000784 <menu+0x248>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	f083 0301 	eor.w	r3, r3, #1
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b00      	cmp	r3, #0
 800055c:	f000 8086 	beq.w	800066c <menu+0x130>
		menuSayac = menuSayac+1;
 8000560:	4b89      	ldr	r3, [pc, #548]	@ (8000788 <menu+0x24c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	b2da      	uxtb	r2, r3
 8000568:	4b87      	ldr	r3, [pc, #540]	@ (8000788 <menu+0x24c>)
 800056a:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 32) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 800056c:	4b86      	ldr	r3, [pc, #536]	@ (8000788 <menu+0x24c>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b20      	cmp	r3, #32
 8000572:	d102      	bne.n	800057a <menu+0x3e>
			menuSayac = 1;
 8000574:	4b84      	ldr	r3, [pc, #528]	@ (8000788 <menu+0x24c>)
 8000576:	2201      	movs	r2, #1
 8000578:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 800057a:	4b83      	ldr	r3, [pc, #524]	@ (8000788 <menu+0x24c>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b12      	cmp	r3, #18
 8000580:	d106      	bne.n	8000590 <menu+0x54>
 8000582:	4b82      	ldr	r3, [pc, #520]	@ (800078c <menu+0x250>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d102      	bne.n	8000590 <menu+0x54>
			menuSayac = 21;
 800058a:	4b7f      	ldr	r3, [pc, #508]	@ (8000788 <menu+0x24c>)
 800058c:	2215      	movs	r2, #21
 800058e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8000590:	4b7d      	ldr	r3, [pc, #500]	@ (8000788 <menu+0x24c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b08      	cmp	r3, #8
 8000596:	d106      	bne.n	80005a6 <menu+0x6a>
 8000598:	4b7d      	ldr	r3, [pc, #500]	@ (8000790 <menu+0x254>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d102      	bne.n	80005a6 <menu+0x6a>
			menuSayac = 16;
 80005a0:	4b79      	ldr	r3, [pc, #484]	@ (8000788 <menu+0x24c>)
 80005a2:	2210      	movs	r2, #16
 80005a4:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80005a6:	4b78      	ldr	r3, [pc, #480]	@ (8000788 <menu+0x24c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b0d      	cmp	r3, #13
 80005ac:	d106      	bne.n	80005bc <menu+0x80>
 80005ae:	4b78      	ldr	r3, [pc, #480]	@ (8000790 <menu+0x254>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d102      	bne.n	80005bc <menu+0x80>
			menuSayac = 16;
 80005b6:	4b74      	ldr	r3, [pc, #464]	@ (8000788 <menu+0x24c>)
 80005b8:	2210      	movs	r2, #16
 80005ba:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80005bc:	4b72      	ldr	r3, [pc, #456]	@ (8000788 <menu+0x24c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b09      	cmp	r3, #9
 80005c2:	d106      	bne.n	80005d2 <menu+0x96>
 80005c4:	4b72      	ldr	r3, [pc, #456]	@ (8000790 <menu+0x254>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d102      	bne.n	80005d2 <menu+0x96>
			menuSayac = 13;
 80005cc:	4b6e      	ldr	r3, [pc, #440]	@ (8000788 <menu+0x24c>)
 80005ce:	220d      	movs	r2, #13
 80005d0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80005d2:	4b6d      	ldr	r3, [pc, #436]	@ (8000788 <menu+0x24c>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b0a      	cmp	r3, #10
 80005d8:	d10a      	bne.n	80005f0 <menu+0xb4>
 80005da:	4b6e      	ldr	r3, [pc, #440]	@ (8000794 <menu+0x258>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d003      	beq.n	80005ea <menu+0xae>
 80005e2:	4b6c      	ldr	r3, [pc, #432]	@ (8000794 <menu+0x258>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d102      	bne.n	80005f0 <menu+0xb4>
			menuSayac = 11;
 80005ea:	4b67      	ldr	r3, [pc, #412]	@ (8000788 <menu+0x24c>)
 80005ec:	220b      	movs	r2, #11
 80005ee:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80005f0:	4b65      	ldr	r3, [pc, #404]	@ (8000788 <menu+0x24c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b0c      	cmp	r3, #12
 80005f6:	d10e      	bne.n	8000616 <menu+0xda>
 80005f8:	4b67      	ldr	r3, [pc, #412]	@ (8000798 <menu+0x25c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d003      	beq.n	8000608 <menu+0xcc>
 8000600:	4b65      	ldr	r3, [pc, #404]	@ (8000798 <menu+0x25c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b02      	cmp	r3, #2
 8000606:	d106      	bne.n	8000616 <menu+0xda>
 8000608:	4b61      	ldr	r3, [pc, #388]	@ (8000790 <menu+0x254>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d102      	bne.n	8000616 <menu+0xda>
			menuSayac = 16;
 8000610:	4b5d      	ldr	r3, [pc, #372]	@ (8000788 <menu+0x24c>)
 8000612:	2210      	movs	r2, #16
 8000614:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8000616:	4b5c      	ldr	r3, [pc, #368]	@ (8000788 <menu+0x24c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b0c      	cmp	r3, #12
 800061c:	d10e      	bne.n	800063c <menu+0x100>
 800061e:	4b5e      	ldr	r3, [pc, #376]	@ (8000798 <menu+0x25c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d003      	beq.n	800062e <menu+0xf2>
 8000626:	4b5c      	ldr	r3, [pc, #368]	@ (8000798 <menu+0x25c>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b02      	cmp	r3, #2
 800062c:	d106      	bne.n	800063c <menu+0x100>
 800062e:	4b58      	ldr	r3, [pc, #352]	@ (8000790 <menu+0x254>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b03      	cmp	r3, #3
 8000634:	d102      	bne.n	800063c <menu+0x100>
			menuSayac = 13;
 8000636:	4b54      	ldr	r3, [pc, #336]	@ (8000788 <menu+0x24c>)
 8000638:	220d      	movs	r2, #13
 800063a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800063c:	4b52      	ldr	r3, [pc, #328]	@ (8000788 <menu+0x24c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b0f      	cmp	r3, #15
 8000642:	d106      	bne.n	8000652 <menu+0x116>
 8000644:	4b55      	ldr	r3, [pc, #340]	@ (800079c <menu+0x260>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d102      	bne.n	8000652 <menu+0x116>
			menuSayac = 16;
 800064c:	4b4e      	ldr	r3, [pc, #312]	@ (8000788 <menu+0x24c>)
 800064e:	2210      	movs	r2, #16
 8000650:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8000652:	4b4d      	ldr	r3, [pc, #308]	@ (8000788 <menu+0x24c>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b18      	cmp	r3, #24
 8000658:	d106      	bne.n	8000668 <menu+0x12c>
 800065a:	4b4c      	ldr	r3, [pc, #304]	@ (800078c <menu+0x250>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d102      	bne.n	8000668 <menu+0x12c>
			menuSayac = 26;
 8000662:	4b49      	ldr	r3, [pc, #292]	@ (8000788 <menu+0x24c>)
 8000664:	221a      	movs	r2, #26
 8000666:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8000668:	f003 f906 	bl	8003878 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 800066c:	2108      	movs	r1, #8
 800066e:	484c      	ldr	r0, [pc, #304]	@ (80007a0 <menu+0x264>)
 8000670:	f007 f8e6 	bl	8007840 <HAL_GPIO_ReadPin>
 8000674:	4603      	mov	r3, r0
 8000676:	2b01      	cmp	r3, #1
 8000678:	d175      	bne.n	8000766 <menu+0x22a>
 800067a:	4b42      	ldr	r3, [pc, #264]	@ (8000784 <menu+0x248>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	f083 0301 	eor.w	r3, r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d06e      	beq.n	8000766 <menu+0x22a>
		if (menuSayac <= 1) {
 8000688:	4b3f      	ldr	r3, [pc, #252]	@ (8000788 <menu+0x24c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d802      	bhi.n	8000696 <menu+0x15a>
			menuSayac = 32;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8000690:	4b3d      	ldr	r3, [pc, #244]	@ (8000788 <menu+0x24c>)
 8000692:	2220      	movs	r2, #32
 8000694:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8000696:	4b3c      	ldr	r3, [pc, #240]	@ (8000788 <menu+0x24c>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	3b01      	subs	r3, #1
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4b3a      	ldr	r3, [pc, #232]	@ (8000788 <menu+0x24c>)
 80006a0:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80006a2:	4b39      	ldr	r3, [pc, #228]	@ (8000788 <menu+0x24c>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b14      	cmp	r3, #20
 80006a8:	d106      	bne.n	80006b8 <menu+0x17c>
 80006aa:	4b38      	ldr	r3, [pc, #224]	@ (800078c <menu+0x250>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d102      	bne.n	80006b8 <menu+0x17c>
			menuSayac = 17;
 80006b2:	4b35      	ldr	r3, [pc, #212]	@ (8000788 <menu+0x24c>)
 80006b4:	2211      	movs	r2, #17
 80006b6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80006b8:	4b33      	ldr	r3, [pc, #204]	@ (8000788 <menu+0x24c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b0f      	cmp	r3, #15
 80006be:	d106      	bne.n	80006ce <menu+0x192>
 80006c0:	4b33      	ldr	r3, [pc, #204]	@ (8000790 <menu+0x254>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d102      	bne.n	80006ce <menu+0x192>
			menuSayac = 7;
 80006c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000788 <menu+0x24c>)
 80006ca:	2207      	movs	r2, #7
 80006cc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80006ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000788 <menu+0x24c>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b0f      	cmp	r3, #15
 80006d4:	d106      	bne.n	80006e4 <menu+0x1a8>
 80006d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000790 <menu+0x254>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d102      	bne.n	80006e4 <menu+0x1a8>
			menuSayac = 12;
 80006de:	4b2a      	ldr	r3, [pc, #168]	@ (8000788 <menu+0x24c>)
 80006e0:	220c      	movs	r2, #12
 80006e2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80006e4:	4b28      	ldr	r3, [pc, #160]	@ (8000788 <menu+0x24c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b0c      	cmp	r3, #12
 80006ea:	d106      	bne.n	80006fa <menu+0x1be>
 80006ec:	4b28      	ldr	r3, [pc, #160]	@ (8000790 <menu+0x254>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d102      	bne.n	80006fa <menu+0x1be>
			menuSayac = 8;
 80006f4:	4b24      	ldr	r3, [pc, #144]	@ (8000788 <menu+0x24c>)
 80006f6:	2208      	movs	r2, #8
 80006f8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80006fa:	4b23      	ldr	r3, [pc, #140]	@ (8000788 <menu+0x24c>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b0a      	cmp	r3, #10
 8000700:	d10a      	bne.n	8000718 <menu+0x1dc>
 8000702:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <menu+0x258>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d003      	beq.n	8000712 <menu+0x1d6>
 800070a:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <menu+0x258>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b02      	cmp	r3, #2
 8000710:	d102      	bne.n	8000718 <menu+0x1dc>
			menuSayac = 9;
 8000712:	4b1d      	ldr	r3, [pc, #116]	@ (8000788 <menu+0x24c>)
 8000714:	2209      	movs	r2, #9
 8000716:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8000718:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <menu+0x24c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b0c      	cmp	r3, #12
 800071e:	d10a      	bne.n	8000736 <menu+0x1fa>
 8000720:	4b1d      	ldr	r3, [pc, #116]	@ (8000798 <menu+0x25c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d003      	beq.n	8000730 <menu+0x1f4>
 8000728:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <menu+0x25c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b02      	cmp	r3, #2
 800072e:	d102      	bne.n	8000736 <menu+0x1fa>
			menuSayac = 11;
 8000730:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <menu+0x24c>)
 8000732:	220b      	movs	r2, #11
 8000734:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000736:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <menu+0x24c>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b0f      	cmp	r3, #15
 800073c:	d106      	bne.n	800074c <menu+0x210>
 800073e:	4b17      	ldr	r3, [pc, #92]	@ (800079c <menu+0x260>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d102      	bne.n	800074c <menu+0x210>
			menuSayac = 14;
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <menu+0x24c>)
 8000748:	220e      	movs	r2, #14
 800074a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <menu+0x24c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b19      	cmp	r3, #25
 8000752:	d106      	bne.n	8000762 <menu+0x226>
 8000754:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <menu+0x250>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d102      	bne.n	8000762 <menu+0x226>
			menuSayac = 23;
 800075c:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <menu+0x24c>)
 800075e:	2217      	movs	r2, #23
 8000760:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8000762:	f003 f889 	bl	8003878 <bekle>
	}

	if (menuSayac == 0) {
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <menu+0x24c>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d134      	bne.n	80007d8 <menu+0x29c>
		if(dilSecim == 0) {
 800076e:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <menu+0x268>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d122      	bne.n	80007bc <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8000776:	4a0c      	ldr	r2, [pc, #48]	@ (80007a8 <menu+0x26c>)
 8000778:	2101      	movs	r1, #1
 800077a:	2001      	movs	r0, #1
 800077c:	e016      	b.n	80007ac <menu+0x270>
 800077e:	bf00      	nop
 8000780:	40010800 	.word	0x40010800
 8000784:	20000352 	.word	0x20000352
 8000788:	20000324 	.word	0x20000324
 800078c:	20000333 	.word	0x20000333
 8000790:	2000032c 	.word	0x2000032c
 8000794:	2000032d 	.word	0x2000032d
 8000798:	2000032e 	.word	0x2000032e
 800079c:	2000032f 	.word	0x2000032f
 80007a0:	40011000 	.word	0x40011000
 80007a4:	20000344 	.word	0x20000344
 80007a8:	0800bcd0 	.word	0x0800bcd0
 80007ac:	f7ff fe7f 	bl	80004ae <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80007b0:	4a94      	ldr	r2, [pc, #592]	@ (8000a04 <menu+0x4c8>)
 80007b2:	2101      	movs	r1, #1
 80007b4:	2002      	movs	r0, #2
 80007b6:	f7ff fe7a 	bl	80004ae <lcd_print>
 80007ba:	e00d      	b.n	80007d8 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 80007bc:	4b92      	ldr	r3, [pc, #584]	@ (8000a08 <menu+0x4cc>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d109      	bne.n	80007d8 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 80007c4:	4a91      	ldr	r2, [pc, #580]	@ (8000a0c <menu+0x4d0>)
 80007c6:	2101      	movs	r1, #1
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff fe70 	bl	80004ae <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 80007ce:	4a90      	ldr	r2, [pc, #576]	@ (8000a10 <menu+0x4d4>)
 80007d0:	2101      	movs	r1, #1
 80007d2:	2002      	movs	r0, #2
 80007d4:	f7ff fe6b 	bl	80004ae <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80007d8:	4b8e      	ldr	r3, [pc, #568]	@ (8000a14 <menu+0x4d8>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	f040 828b 	bne.w	8000cf8 <menu+0x7bc>
		if(dilSecim == 0) {
 80007e2:	4b89      	ldr	r3, [pc, #548]	@ (8000a08 <menu+0x4cc>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d105      	bne.n	80007f6 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80007ea:	4a8b      	ldr	r2, [pc, #556]	@ (8000a18 <menu+0x4dc>)
 80007ec:	2101      	movs	r1, #1
 80007ee:	2001      	movs	r0, #1
 80007f0:	f7ff fe5d 	bl	80004ae <lcd_print>
 80007f4:	e008      	b.n	8000808 <menu+0x2cc>
		} else if(dilSecim == 1) {
 80007f6:	4b84      	ldr	r3, [pc, #528]	@ (8000a08 <menu+0x4cc>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d104      	bne.n	8000808 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80007fe:	4a87      	ldr	r2, [pc, #540]	@ (8000a1c <menu+0x4e0>)
 8000800:	2101      	movs	r1, #1
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff fe53 	bl	80004ae <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8000808:	4b85      	ldr	r3, [pc, #532]	@ (8000a20 <menu+0x4e4>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d123      	bne.n	8000858 <menu+0x31c>
			if(dilSecim == 0) {
 8000810:	4b7d      	ldr	r3, [pc, #500]	@ (8000a08 <menu+0x4cc>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d105      	bne.n	8000824 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8000818:	4a82      	ldr	r2, [pc, #520]	@ (8000a24 <menu+0x4e8>)
 800081a:	2101      	movs	r1, #1
 800081c:	2002      	movs	r0, #2
 800081e:	f7ff fe46 	bl	80004ae <lcd_print>
 8000822:	e008      	b.n	8000836 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8000824:	4b78      	ldr	r3, [pc, #480]	@ (8000a08 <menu+0x4cc>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d104      	bne.n	8000836 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 800082c:	4a7e      	ldr	r2, [pc, #504]	@ (8000a28 <menu+0x4ec>)
 800082e:	2101      	movs	r1, #1
 8000830:	2002      	movs	r0, #2
 8000832:	f7ff fe3c 	bl	80004ae <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8000836:	4a7d      	ldr	r2, [pc, #500]	@ (8000a2c <menu+0x4f0>)
 8000838:	210f      	movs	r1, #15
 800083a:	2002      	movs	r0, #2
 800083c:	f7ff fe37 	bl	80004ae <lcd_print>
			itoa(hataKayit1, snum, 10);
 8000840:	4b7b      	ldr	r3, [pc, #492]	@ (8000a30 <menu+0x4f4>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	220a      	movs	r2, #10
 8000846:	497b      	ldr	r1, [pc, #492]	@ (8000a34 <menu+0x4f8>)
 8000848:	4618      	mov	r0, r3
 800084a:	f00b f9b7 	bl	800bbbc <itoa>
			lcd_print(2, 14, snum);
 800084e:	4a79      	ldr	r2, [pc, #484]	@ (8000a34 <menu+0x4f8>)
 8000850:	210e      	movs	r1, #14
 8000852:	2002      	movs	r0, #2
 8000854:	f7ff fe2b 	bl	80004ae <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8000858:	4b71      	ldr	r3, [pc, #452]	@ (8000a20 <menu+0x4e4>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d123      	bne.n	80008a8 <menu+0x36c>
			if(dilSecim == 0) {
 8000860:	4b69      	ldr	r3, [pc, #420]	@ (8000a08 <menu+0x4cc>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d105      	bne.n	8000874 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8000868:	4a73      	ldr	r2, [pc, #460]	@ (8000a38 <menu+0x4fc>)
 800086a:	2101      	movs	r1, #1
 800086c:	2002      	movs	r0, #2
 800086e:	f7ff fe1e 	bl	80004ae <lcd_print>
 8000872:	e008      	b.n	8000886 <menu+0x34a>
			} else if(dilSecim == 1) {
 8000874:	4b64      	ldr	r3, [pc, #400]	@ (8000a08 <menu+0x4cc>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d104      	bne.n	8000886 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 800087c:	4a6f      	ldr	r2, [pc, #444]	@ (8000a3c <menu+0x500>)
 800087e:	2101      	movs	r1, #1
 8000880:	2002      	movs	r0, #2
 8000882:	f7ff fe14 	bl	80004ae <lcd_print>

			}
			lcd_print(2, 15, "  ");
 8000886:	4a6e      	ldr	r2, [pc, #440]	@ (8000a40 <menu+0x504>)
 8000888:	210f      	movs	r1, #15
 800088a:	2002      	movs	r0, #2
 800088c:	f7ff fe0f 	bl	80004ae <lcd_print>
			itoa(hataKayit2, snum, 10);
 8000890:	4b6c      	ldr	r3, [pc, #432]	@ (8000a44 <menu+0x508>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	220a      	movs	r2, #10
 8000896:	4967      	ldr	r1, [pc, #412]	@ (8000a34 <menu+0x4f8>)
 8000898:	4618      	mov	r0, r3
 800089a:	f00b f98f 	bl	800bbbc <itoa>
			lcd_print(2, 14, snum);
 800089e:	4a65      	ldr	r2, [pc, #404]	@ (8000a34 <menu+0x4f8>)
 80008a0:	210e      	movs	r1, #14
 80008a2:	2002      	movs	r0, #2
 80008a4:	f7ff fe03 	bl	80004ae <lcd_print>
		}

		if(hataGostermeSirasi == 2){
 80008a8:	4b5d      	ldr	r3, [pc, #372]	@ (8000a20 <menu+0x4e4>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d123      	bne.n	80008f8 <menu+0x3bc>
			if(dilSecim == 0) {
 80008b0:	4b55      	ldr	r3, [pc, #340]	@ (8000a08 <menu+0x4cc>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d105      	bne.n	80008c4 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80008b8:	4a63      	ldr	r2, [pc, #396]	@ (8000a48 <menu+0x50c>)
 80008ba:	2101      	movs	r1, #1
 80008bc:	2002      	movs	r0, #2
 80008be:	f7ff fdf6 	bl	80004ae <lcd_print>
 80008c2:	e008      	b.n	80008d6 <menu+0x39a>
			} else if(dilSecim == 1) {
 80008c4:	4b50      	ldr	r3, [pc, #320]	@ (8000a08 <menu+0x4cc>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d104      	bne.n	80008d6 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 80008cc:	4a5f      	ldr	r2, [pc, #380]	@ (8000a4c <menu+0x510>)
 80008ce:	2101      	movs	r1, #1
 80008d0:	2002      	movs	r0, #2
 80008d2:	f7ff fdec 	bl	80004ae <lcd_print>

			}
			lcd_print(2, 15, "  ");
 80008d6:	4a5a      	ldr	r2, [pc, #360]	@ (8000a40 <menu+0x504>)
 80008d8:	210f      	movs	r1, #15
 80008da:	2002      	movs	r0, #2
 80008dc:	f7ff fde7 	bl	80004ae <lcd_print>
			itoa(hataKayit3, snum, 10);
 80008e0:	4b5b      	ldr	r3, [pc, #364]	@ (8000a50 <menu+0x514>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	220a      	movs	r2, #10
 80008e6:	4953      	ldr	r1, [pc, #332]	@ (8000a34 <menu+0x4f8>)
 80008e8:	4618      	mov	r0, r3
 80008ea:	f00b f967 	bl	800bbbc <itoa>
			lcd_print(2, 14, snum);
 80008ee:	4a51      	ldr	r2, [pc, #324]	@ (8000a34 <menu+0x4f8>)
 80008f0:	210e      	movs	r1, #14
 80008f2:	2002      	movs	r0, #2
 80008f4:	f7ff fddb 	bl	80004ae <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80008f8:	4b49      	ldr	r3, [pc, #292]	@ (8000a20 <menu+0x4e4>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d123      	bne.n	8000948 <menu+0x40c>
			if(dilSecim == 0) {
 8000900:	4b41      	ldr	r3, [pc, #260]	@ (8000a08 <menu+0x4cc>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d105      	bne.n	8000914 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8000908:	4a52      	ldr	r2, [pc, #328]	@ (8000a54 <menu+0x518>)
 800090a:	2101      	movs	r1, #1
 800090c:	2002      	movs	r0, #2
 800090e:	f7ff fdce 	bl	80004ae <lcd_print>
 8000912:	e008      	b.n	8000926 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8000914:	4b3c      	ldr	r3, [pc, #240]	@ (8000a08 <menu+0x4cc>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d104      	bne.n	8000926 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 800091c:	4a4e      	ldr	r2, [pc, #312]	@ (8000a58 <menu+0x51c>)
 800091e:	2101      	movs	r1, #1
 8000920:	2002      	movs	r0, #2
 8000922:	f7ff fdc4 	bl	80004ae <lcd_print>

			}
			lcd_print(2, 15, "  ");
 8000926:	4a46      	ldr	r2, [pc, #280]	@ (8000a40 <menu+0x504>)
 8000928:	210f      	movs	r1, #15
 800092a:	2002      	movs	r0, #2
 800092c:	f7ff fdbf 	bl	80004ae <lcd_print>
			itoa(hataKayit4, snum, 10);
 8000930:	4b4a      	ldr	r3, [pc, #296]	@ (8000a5c <menu+0x520>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	220a      	movs	r2, #10
 8000936:	493f      	ldr	r1, [pc, #252]	@ (8000a34 <menu+0x4f8>)
 8000938:	4618      	mov	r0, r3
 800093a:	f00b f93f 	bl	800bbbc <itoa>
			lcd_print(2, 14, snum);
 800093e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a34 <menu+0x4f8>)
 8000940:	210e      	movs	r1, #14
 8000942:	2002      	movs	r0, #2
 8000944:	f7ff fdb3 	bl	80004ae <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8000948:	4b35      	ldr	r3, [pc, #212]	@ (8000a20 <menu+0x4e4>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b04      	cmp	r3, #4
 800094e:	d123      	bne.n	8000998 <menu+0x45c>
			if(dilSecim == 0) {
 8000950:	4b2d      	ldr	r3, [pc, #180]	@ (8000a08 <menu+0x4cc>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d105      	bne.n	8000964 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8000958:	4a41      	ldr	r2, [pc, #260]	@ (8000a60 <menu+0x524>)
 800095a:	2101      	movs	r1, #1
 800095c:	2002      	movs	r0, #2
 800095e:	f7ff fda6 	bl	80004ae <lcd_print>
 8000962:	e008      	b.n	8000976 <menu+0x43a>
			} else if(dilSecim == 1) {
 8000964:	4b28      	ldr	r3, [pc, #160]	@ (8000a08 <menu+0x4cc>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d104      	bne.n	8000976 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 800096c:	4a3d      	ldr	r2, [pc, #244]	@ (8000a64 <menu+0x528>)
 800096e:	2101      	movs	r1, #1
 8000970:	2002      	movs	r0, #2
 8000972:	f7ff fd9c 	bl	80004ae <lcd_print>

			}
			lcd_print(2, 15, "  ");
 8000976:	4a32      	ldr	r2, [pc, #200]	@ (8000a40 <menu+0x504>)
 8000978:	210f      	movs	r1, #15
 800097a:	2002      	movs	r0, #2
 800097c:	f7ff fd97 	bl	80004ae <lcd_print>
			itoa(hataKayit5, snum, 10);
 8000980:	4b39      	ldr	r3, [pc, #228]	@ (8000a68 <menu+0x52c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	220a      	movs	r2, #10
 8000986:	492b      	ldr	r1, [pc, #172]	@ (8000a34 <menu+0x4f8>)
 8000988:	4618      	mov	r0, r3
 800098a:	f00b f917 	bl	800bbbc <itoa>
			lcd_print(2, 14, snum);
 800098e:	4a29      	ldr	r2, [pc, #164]	@ (8000a34 <menu+0x4f8>)
 8000990:	210e      	movs	r1, #14
 8000992:	2002      	movs	r0, #2
 8000994:	f7ff fd8b 	bl	80004ae <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8000998:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <menu+0x4e4>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b05      	cmp	r3, #5
 800099e:	d123      	bne.n	80009e8 <menu+0x4ac>
			if(dilSecim == 0) {
 80009a0:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <menu+0x4cc>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d105      	bne.n	80009b4 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80009a8:	4a30      	ldr	r2, [pc, #192]	@ (8000a6c <menu+0x530>)
 80009aa:	2101      	movs	r1, #1
 80009ac:	2002      	movs	r0, #2
 80009ae:	f7ff fd7e 	bl	80004ae <lcd_print>
 80009b2:	e008      	b.n	80009c6 <menu+0x48a>
			} else if(dilSecim == 1) {
 80009b4:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <menu+0x4cc>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d104      	bne.n	80009c6 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 80009bc:	4a2c      	ldr	r2, [pc, #176]	@ (8000a70 <menu+0x534>)
 80009be:	2101      	movs	r1, #1
 80009c0:	2002      	movs	r0, #2
 80009c2:	f7ff fd74 	bl	80004ae <lcd_print>

			}
			lcd_print(2, 15, "  ");
 80009c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a40 <menu+0x504>)
 80009c8:	210f      	movs	r1, #15
 80009ca:	2002      	movs	r0, #2
 80009cc:	f7ff fd6f 	bl	80004ae <lcd_print>
			itoa(hataKayit6, snum, 10);
 80009d0:	4b28      	ldr	r3, [pc, #160]	@ (8000a74 <menu+0x538>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	220a      	movs	r2, #10
 80009d6:	4917      	ldr	r1, [pc, #92]	@ (8000a34 <menu+0x4f8>)
 80009d8:	4618      	mov	r0, r3
 80009da:	f00b f8ef 	bl	800bbbc <itoa>
			lcd_print(2, 14, snum);
 80009de:	4a15      	ldr	r2, [pc, #84]	@ (8000a34 <menu+0x4f8>)
 80009e0:	210e      	movs	r1, #14
 80009e2:	2002      	movs	r0, #2
 80009e4:	f7ff fd63 	bl	80004ae <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80009e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a20 <menu+0x4e4>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b06      	cmp	r3, #6
 80009ee:	d15f      	bne.n	8000ab0 <menu+0x574>
			if(dilSecim == 0) {
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <menu+0x4cc>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d141      	bne.n	8000a7c <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80009f8:	4a1f      	ldr	r2, [pc, #124]	@ (8000a78 <menu+0x53c>)
 80009fa:	2101      	movs	r1, #1
 80009fc:	2002      	movs	r0, #2
 80009fe:	f7ff fd56 	bl	80004ae <lcd_print>
 8000a02:	e044      	b.n	8000a8e <menu+0x552>
 8000a04:	0800bce4 	.word	0x0800bce4
 8000a08:	20000344 	.word	0x20000344
 8000a0c:	0800bcf8 	.word	0x0800bcf8
 8000a10:	0800bd0c 	.word	0x0800bd0c
 8000a14:	20000324 	.word	0x20000324
 8000a18:	0800bd20 	.word	0x0800bd20
 8000a1c:	0800bd34 	.word	0x0800bd34
 8000a20:	20000326 	.word	0x20000326
 8000a24:	0800bd48 	.word	0x0800bd48
 8000a28:	0800bd58 	.word	0x0800bd58
 8000a2c:	0800bd68 	.word	0x0800bd68
 8000a30:	20000345 	.word	0x20000345
 8000a34:	200002f8 	.word	0x200002f8
 8000a38:	0800bd6c 	.word	0x0800bd6c
 8000a3c:	0800bd7c 	.word	0x0800bd7c
 8000a40:	0800bd8c 	.word	0x0800bd8c
 8000a44:	20000346 	.word	0x20000346
 8000a48:	0800bd90 	.word	0x0800bd90
 8000a4c:	0800bda0 	.word	0x0800bda0
 8000a50:	20000347 	.word	0x20000347
 8000a54:	0800bdb0 	.word	0x0800bdb0
 8000a58:	0800bdc0 	.word	0x0800bdc0
 8000a5c:	20000348 	.word	0x20000348
 8000a60:	0800bdd0 	.word	0x0800bdd0
 8000a64:	0800bde0 	.word	0x0800bde0
 8000a68:	20000349 	.word	0x20000349
 8000a6c:	0800bdf0 	.word	0x0800bdf0
 8000a70:	0800be00 	.word	0x0800be00
 8000a74:	2000034a 	.word	0x2000034a
 8000a78:	0800be10 	.word	0x0800be10
			} else if(dilSecim == 1) {
 8000a7c:	4ba6      	ldr	r3, [pc, #664]	@ (8000d18 <menu+0x7dc>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d104      	bne.n	8000a8e <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8000a84:	4aa5      	ldr	r2, [pc, #660]	@ (8000d1c <menu+0x7e0>)
 8000a86:	2101      	movs	r1, #1
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f7ff fd10 	bl	80004ae <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000a8e:	4aa4      	ldr	r2, [pc, #656]	@ (8000d20 <menu+0x7e4>)
 8000a90:	210f      	movs	r1, #15
 8000a92:	2002      	movs	r0, #2
 8000a94:	f7ff fd0b 	bl	80004ae <lcd_print>
			itoa(hataKayit7, snum, 10);
 8000a98:	4ba2      	ldr	r3, [pc, #648]	@ (8000d24 <menu+0x7e8>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	220a      	movs	r2, #10
 8000a9e:	49a2      	ldr	r1, [pc, #648]	@ (8000d28 <menu+0x7ec>)
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f00b f88b 	bl	800bbbc <itoa>
			lcd_print(2, 14, snum);
 8000aa6:	4aa0      	ldr	r2, [pc, #640]	@ (8000d28 <menu+0x7ec>)
 8000aa8:	210e      	movs	r1, #14
 8000aaa:	2002      	movs	r0, #2
 8000aac:	f7ff fcff 	bl	80004ae <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8000ab0:	4b9e      	ldr	r3, [pc, #632]	@ (8000d2c <menu+0x7f0>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b07      	cmp	r3, #7
 8000ab6:	d123      	bne.n	8000b00 <menu+0x5c4>
			if(dilSecim == 0) {
 8000ab8:	4b97      	ldr	r3, [pc, #604]	@ (8000d18 <menu+0x7dc>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d105      	bne.n	8000acc <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8000ac0:	4a9b      	ldr	r2, [pc, #620]	@ (8000d30 <menu+0x7f4>)
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f7ff fcf2 	bl	80004ae <lcd_print>
 8000aca:	e008      	b.n	8000ade <menu+0x5a2>
			} else if(dilSecim == 1) {
 8000acc:	4b92      	ldr	r3, [pc, #584]	@ (8000d18 <menu+0x7dc>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d104      	bne.n	8000ade <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8000ad4:	4a97      	ldr	r2, [pc, #604]	@ (8000d34 <menu+0x7f8>)
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	2002      	movs	r0, #2
 8000ada:	f7ff fce8 	bl	80004ae <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000ade:	4a90      	ldr	r2, [pc, #576]	@ (8000d20 <menu+0x7e4>)
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	f7ff fce3 	bl	80004ae <lcd_print>
			itoa(hataKayit8, snum, 10);
 8000ae8:	4b93      	ldr	r3, [pc, #588]	@ (8000d38 <menu+0x7fc>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	220a      	movs	r2, #10
 8000aee:	498e      	ldr	r1, [pc, #568]	@ (8000d28 <menu+0x7ec>)
 8000af0:	4618      	mov	r0, r3
 8000af2:	f00b f863 	bl	800bbbc <itoa>
			lcd_print(2, 14, snum);
 8000af6:	4a8c      	ldr	r2, [pc, #560]	@ (8000d28 <menu+0x7ec>)
 8000af8:	210e      	movs	r1, #14
 8000afa:	2002      	movs	r0, #2
 8000afc:	f7ff fcd7 	bl	80004ae <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8000b00:	4b8a      	ldr	r3, [pc, #552]	@ (8000d2c <menu+0x7f0>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b08      	cmp	r3, #8
 8000b06:	d123      	bne.n	8000b50 <menu+0x614>
			if(dilSecim == 0) {
 8000b08:	4b83      	ldr	r3, [pc, #524]	@ (8000d18 <menu+0x7dc>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d105      	bne.n	8000b1c <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8000b10:	4a8a      	ldr	r2, [pc, #552]	@ (8000d3c <menu+0x800>)
 8000b12:	2101      	movs	r1, #1
 8000b14:	2002      	movs	r0, #2
 8000b16:	f7ff fcca 	bl	80004ae <lcd_print>
 8000b1a:	e008      	b.n	8000b2e <menu+0x5f2>
			} else if(dilSecim == 1) {
 8000b1c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d18 <menu+0x7dc>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d104      	bne.n	8000b2e <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8000b24:	4a86      	ldr	r2, [pc, #536]	@ (8000d40 <menu+0x804>)
 8000b26:	2101      	movs	r1, #1
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f7ff fcc0 	bl	80004ae <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000b2e:	4a7c      	ldr	r2, [pc, #496]	@ (8000d20 <menu+0x7e4>)
 8000b30:	210f      	movs	r1, #15
 8000b32:	2002      	movs	r0, #2
 8000b34:	f7ff fcbb 	bl	80004ae <lcd_print>
			itoa(hataKayit9, snum, 10);
 8000b38:	4b82      	ldr	r3, [pc, #520]	@ (8000d44 <menu+0x808>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	220a      	movs	r2, #10
 8000b3e:	497a      	ldr	r1, [pc, #488]	@ (8000d28 <menu+0x7ec>)
 8000b40:	4618      	mov	r0, r3
 8000b42:	f00b f83b 	bl	800bbbc <itoa>
			lcd_print(2, 14, snum);
 8000b46:	4a78      	ldr	r2, [pc, #480]	@ (8000d28 <menu+0x7ec>)
 8000b48:	210e      	movs	r1, #14
 8000b4a:	2002      	movs	r0, #2
 8000b4c:	f7ff fcaf 	bl	80004ae <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8000b50:	4b76      	ldr	r3, [pc, #472]	@ (8000d2c <menu+0x7f0>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b09      	cmp	r3, #9
 8000b56:	d123      	bne.n	8000ba0 <menu+0x664>
			if(dilSecim == 0) {
 8000b58:	4b6f      	ldr	r3, [pc, #444]	@ (8000d18 <menu+0x7dc>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d105      	bne.n	8000b6c <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8000b60:	4a79      	ldr	r2, [pc, #484]	@ (8000d48 <menu+0x80c>)
 8000b62:	2101      	movs	r1, #1
 8000b64:	2002      	movs	r0, #2
 8000b66:	f7ff fca2 	bl	80004ae <lcd_print>
 8000b6a:	e008      	b.n	8000b7e <menu+0x642>
			} else if(dilSecim == 1) {
 8000b6c:	4b6a      	ldr	r3, [pc, #424]	@ (8000d18 <menu+0x7dc>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d104      	bne.n	8000b7e <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8000b74:	4a75      	ldr	r2, [pc, #468]	@ (8000d4c <menu+0x810>)
 8000b76:	2101      	movs	r1, #1
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f7ff fc98 	bl	80004ae <lcd_print>

			}
			lcd_print(2, 16, " ");
 8000b7e:	4a74      	ldr	r2, [pc, #464]	@ (8000d50 <menu+0x814>)
 8000b80:	2110      	movs	r1, #16
 8000b82:	2002      	movs	r0, #2
 8000b84:	f7ff fc93 	bl	80004ae <lcd_print>
			itoa(hataKayit10, snum, 10);
 8000b88:	4b72      	ldr	r3, [pc, #456]	@ (8000d54 <menu+0x818>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	220a      	movs	r2, #10
 8000b8e:	4966      	ldr	r1, [pc, #408]	@ (8000d28 <menu+0x7ec>)
 8000b90:	4618      	mov	r0, r3
 8000b92:	f00b f813 	bl	800bbbc <itoa>
			lcd_print(2, 15, snum);
 8000b96:	4a64      	ldr	r2, [pc, #400]	@ (8000d28 <menu+0x7ec>)
 8000b98:	210f      	movs	r1, #15
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	f7ff fc87 	bl	80004ae <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8000ba0:	4b62      	ldr	r3, [pc, #392]	@ (8000d2c <menu+0x7f0>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b0a      	cmp	r3, #10
 8000ba6:	d112      	bne.n	8000bce <menu+0x692>
			if(dilSecim == 0) {
 8000ba8:	4b5b      	ldr	r3, [pc, #364]	@ (8000d18 <menu+0x7dc>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d105      	bne.n	8000bbc <menu+0x680>
				lcd_print(2, 1, "Silmek icin ent.");
 8000bb0:	4a69      	ldr	r2, [pc, #420]	@ (8000d58 <menu+0x81c>)
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	f7ff fc7a 	bl	80004ae <lcd_print>
 8000bba:	e008      	b.n	8000bce <menu+0x692>
			} else if(dilSecim == 1) {
 8000bbc:	4b56      	ldr	r3, [pc, #344]	@ (8000d18 <menu+0x7dc>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d104      	bne.n	8000bce <menu+0x692>
				lcd_print(2, 1, "Del. press enter");
 8000bc4:	4a65      	ldr	r2, [pc, #404]	@ (8000d5c <menu+0x820>)
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	2002      	movs	r0, #2
 8000bca:	f7ff fc70 	bl	80004ae <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8000bce:	2102      	movs	r1, #2
 8000bd0:	4863      	ldr	r0, [pc, #396]	@ (8000d60 <menu+0x824>)
 8000bd2:	f006 fe35 	bl	8007840 <HAL_GPIO_ReadPin>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d115      	bne.n	8000c08 <menu+0x6cc>
 8000bdc:	4b61      	ldr	r3, [pc, #388]	@ (8000d64 <menu+0x828>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	f083 0301 	eor.w	r3, r3, #1
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d00e      	beq.n	8000c08 <menu+0x6cc>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8000bea:	4b50      	ldr	r3, [pc, #320]	@ (8000d2c <menu+0x7f0>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b4e      	ldr	r3, [pc, #312]	@ (8000d2c <menu+0x7f0>)
 8000bf4:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8000bf6:	4b4d      	ldr	r3, [pc, #308]	@ (8000d2c <menu+0x7f0>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b0a      	cmp	r3, #10
 8000bfc:	d902      	bls.n	8000c04 <menu+0x6c8>
				hataGostermeSirasi = 0;
 8000bfe:	4b4b      	ldr	r3, [pc, #300]	@ (8000d2c <menu+0x7f0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000c04:	f002 fe38 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8000c08:	2104      	movs	r1, #4
 8000c0a:	4855      	ldr	r0, [pc, #340]	@ (8000d60 <menu+0x824>)
 8000c0c:	f006 fe18 	bl	8007840 <HAL_GPIO_ReadPin>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d115      	bne.n	8000c42 <menu+0x706>
 8000c16:	4b53      	ldr	r3, [pc, #332]	@ (8000d64 <menu+0x828>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	f083 0301 	eor.w	r3, r3, #1
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00e      	beq.n	8000c42 <menu+0x706>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8000c24:	4b41      	ldr	r3, [pc, #260]	@ (8000d2c <menu+0x7f0>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d2c <menu+0x7f0>)
 8000c2e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8000c30:	4b3e      	ldr	r3, [pc, #248]	@ (8000d2c <menu+0x7f0>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b0b      	cmp	r3, #11
 8000c36:	d902      	bls.n	8000c3e <menu+0x702>
	    		hataGostermeSirasi = 10;
 8000c38:	4b3c      	ldr	r3, [pc, #240]	@ (8000d2c <menu+0x7f0>)
 8000c3a:	220a      	movs	r2, #10
 8000c3c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000c3e:	f002 fe1b 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8000c42:	2108      	movs	r1, #8
 8000c44:	4846      	ldr	r0, [pc, #280]	@ (8000d60 <menu+0x824>)
 8000c46:	f006 fdfb 	bl	8007840 <HAL_GPIO_ReadPin>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d153      	bne.n	8000cf8 <menu+0x7bc>
 8000c50:	4b44      	ldr	r3, [pc, #272]	@ (8000d64 <menu+0x828>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	f083 0301 	eor.w	r3, r3, #1
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d04c      	beq.n	8000cf8 <menu+0x7bc>
 8000c5e:	4b33      	ldr	r3, [pc, #204]	@ (8000d2c <menu+0x7f0>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b0a      	cmp	r3, #10
 8000c64:	d148      	bne.n	8000cf8 <menu+0x7bc>
			hataKayit1 = 0; eepromData[37] = 0;
 8000c66:	4b40      	ldr	r3, [pc, #256]	@ (8000d68 <menu+0x82c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d6c <menu+0x830>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8000c74:	4b3e      	ldr	r3, [pc, #248]	@ (8000d70 <menu+0x834>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d6c <menu+0x830>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8000c82:	4b3c      	ldr	r3, [pc, #240]	@ (8000d74 <menu+0x838>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
 8000c88:	4b38      	ldr	r3, [pc, #224]	@ (8000d6c <menu+0x830>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8000c90:	4b39      	ldr	r3, [pc, #228]	@ (8000d78 <menu+0x83c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
 8000c96:	4b35      	ldr	r3, [pc, #212]	@ (8000d6c <menu+0x830>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8000c9e:	4b37      	ldr	r3, [pc, #220]	@ (8000d7c <menu+0x840>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	4b31      	ldr	r3, [pc, #196]	@ (8000d6c <menu+0x830>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8000cac:	4b34      	ldr	r3, [pc, #208]	@ (8000d80 <menu+0x844>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d6c <menu+0x830>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	@ (8000d24 <menu+0x7e8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
 8000cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d6c <menu+0x830>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d38 <menu+0x7fc>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	4b27      	ldr	r3, [pc, #156]	@ (8000d6c <menu+0x830>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d44 <menu+0x808>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	4b23      	ldr	r3, [pc, #140]	@ (8000d6c <menu+0x830>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d54 <menu+0x818>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	4b20      	ldr	r3, [pc, #128]	@ (8000d6c <menu+0x830>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8000cf2:	4b24      	ldr	r3, [pc, #144]	@ (8000d84 <menu+0x848>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8000cf8:	4b23      	ldr	r3, [pc, #140]	@ (8000d88 <menu+0x84c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	f040 8103 	bne.w	8000f08 <menu+0x9cc>
		if(dilSecim == 0) {
 8000d02:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <menu+0x7dc>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d142      	bne.n	8000d90 <menu+0x854>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8000d0a:	4a20      	ldr	r2, [pc, #128]	@ (8000d8c <menu+0x850>)
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f7ff fbcd 	bl	80004ae <lcd_print>
 8000d14:	e045      	b.n	8000da2 <menu+0x866>
 8000d16:	bf00      	nop
 8000d18:	20000344 	.word	0x20000344
 8000d1c:	0800be20 	.word	0x0800be20
 8000d20:	0800bd8c 	.word	0x0800bd8c
 8000d24:	2000034b 	.word	0x2000034b
 8000d28:	200002f8 	.word	0x200002f8
 8000d2c:	20000326 	.word	0x20000326
 8000d30:	0800be30 	.word	0x0800be30
 8000d34:	0800be40 	.word	0x0800be40
 8000d38:	2000034c 	.word	0x2000034c
 8000d3c:	0800be50 	.word	0x0800be50
 8000d40:	0800be60 	.word	0x0800be60
 8000d44:	2000034d 	.word	0x2000034d
 8000d48:	0800be70 	.word	0x0800be70
 8000d4c:	0800be80 	.word	0x0800be80
 8000d50:	0800be90 	.word	0x0800be90
 8000d54:	2000034e 	.word	0x2000034e
 8000d58:	0800be94 	.word	0x0800be94
 8000d5c:	0800bea8 	.word	0x0800bea8
 8000d60:	40010800 	.word	0x40010800
 8000d64:	20000352 	.word	0x20000352
 8000d68:	20000345 	.word	0x20000345
 8000d6c:	200002b8 	.word	0x200002b8
 8000d70:	20000346 	.word	0x20000346
 8000d74:	20000347 	.word	0x20000347
 8000d78:	20000348 	.word	0x20000348
 8000d7c:	20000349 	.word	0x20000349
 8000d80:	2000034a 	.word	0x2000034a
 8000d84:	2000034f 	.word	0x2000034f
 8000d88:	20000324 	.word	0x20000324
 8000d8c:	0800bebc 	.word	0x0800bebc
		} else if(dilSecim == 1) {
 8000d90:	4b75      	ldr	r3, [pc, #468]	@ (8000f68 <menu+0xa2c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d104      	bne.n	8000da2 <menu+0x866>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8000d98:	4a74      	ldr	r2, [pc, #464]	@ (8000f6c <menu+0xa30>)
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f7ff fb86 	bl	80004ae <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8000da2:	4b73      	ldr	r3, [pc, #460]	@ (8000f70 <menu+0xa34>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d003      	beq.n	8000db2 <menu+0x876>
 8000daa:	4b71      	ldr	r3, [pc, #452]	@ (8000f70 <menu+0xa34>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d112      	bne.n	8000dd8 <menu+0x89c>
			if(dilSecim == 0) {
 8000db2:	4b6d      	ldr	r3, [pc, #436]	@ (8000f68 <menu+0xa2c>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d105      	bne.n	8000dc6 <menu+0x88a>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8000dba:	4a6e      	ldr	r2, [pc, #440]	@ (8000f74 <menu+0xa38>)
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f7ff fb75 	bl	80004ae <lcd_print>
 8000dc4:	e008      	b.n	8000dd8 <menu+0x89c>
			} else if(dilSecim == 1) {
 8000dc6:	4b68      	ldr	r3, [pc, #416]	@ (8000f68 <menu+0xa2c>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d104      	bne.n	8000dd8 <menu+0x89c>
				lcd_print(2, 1, "Tppng Mobil slct");
 8000dce:	4a6a      	ldr	r2, [pc, #424]	@ (8000f78 <menu+0xa3c>)
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f7ff fb6b 	bl	80004ae <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8000dd8:	4b68      	ldr	r3, [pc, #416]	@ (8000f7c <menu+0xa40>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d116      	bne.n	8000e0e <menu+0x8d2>
 8000de0:	4b63      	ldr	r3, [pc, #396]	@ (8000f70 <menu+0xa34>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d112      	bne.n	8000e0e <menu+0x8d2>
			if(dilSecim == 0) {
 8000de8:	4b5f      	ldr	r3, [pc, #380]	@ (8000f68 <menu+0xa2c>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d105      	bne.n	8000dfc <menu+0x8c0>
				lcd_print(2, 1, "Bastikca cal.  ");
 8000df0:	4a63      	ldr	r2, [pc, #396]	@ (8000f80 <menu+0xa44>)
 8000df2:	2101      	movs	r1, #1
 8000df4:	2002      	movs	r0, #2
 8000df6:	f7ff fb5a 	bl	80004ae <lcd_print>
 8000dfa:	e008      	b.n	8000e0e <menu+0x8d2>
			} else if(dilSecim == 1) {
 8000dfc:	4b5a      	ldr	r3, [pc, #360]	@ (8000f68 <menu+0xa2c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d104      	bne.n	8000e0e <menu+0x8d2>
				lcd_print(2, 1, "Deadman Control");
 8000e04:	4a5f      	ldr	r2, [pc, #380]	@ (8000f84 <menu+0xa48>)
 8000e06:	2101      	movs	r1, #1
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f7ff fb50 	bl	80004ae <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8000e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8000f7c <menu+0xa40>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d116      	bne.n	8000e44 <menu+0x908>
 8000e16:	4b56      	ldr	r3, [pc, #344]	@ (8000f70 <menu+0xa34>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d112      	bne.n	8000e44 <menu+0x908>
			if(dilSecim == 0) {
 8000e1e:	4b52      	ldr	r3, [pc, #328]	@ (8000f68 <menu+0xa2c>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d105      	bne.n	8000e32 <menu+0x8f6>
				lcd_print(2, 1, "Bas gonder     ");
 8000e26:	4a58      	ldr	r2, [pc, #352]	@ (8000f88 <menu+0xa4c>)
 8000e28:	2101      	movs	r1, #1
 8000e2a:	2002      	movs	r0, #2
 8000e2c:	f7ff fb3f 	bl	80004ae <lcd_print>
 8000e30:	e008      	b.n	8000e44 <menu+0x908>
			} else if(dilSecim == 1) {
 8000e32:	4b4d      	ldr	r3, [pc, #308]	@ (8000f68 <menu+0xa2c>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d104      	bne.n	8000e44 <menu+0x908>
				lcd_print(2, 1, "Call & Send    ");
 8000e3a:	4a54      	ldr	r2, [pc, #336]	@ (8000f8c <menu+0xa50>)
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f7ff fb35 	bl	80004ae <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000e44:	2102      	movs	r1, #2
 8000e46:	4852      	ldr	r0, [pc, #328]	@ (8000f90 <menu+0xa54>)
 8000e48:	f006 fcfa 	bl	8007840 <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d119      	bne.n	8000e86 <menu+0x94a>
 8000e52:	4b50      	ldr	r3, [pc, #320]	@ (8000f94 <menu+0xa58>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	f083 0301 	eor.w	r3, r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d012      	beq.n	8000e86 <menu+0x94a>
 8000e60:	4b43      	ldr	r3, [pc, #268]	@ (8000f70 <menu+0xa34>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10e      	bne.n	8000e86 <menu+0x94a>
			calismaSekli = calismaSekli + 1;
 8000e68:	4b44      	ldr	r3, [pc, #272]	@ (8000f7c <menu+0xa40>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b42      	ldr	r3, [pc, #264]	@ (8000f7c <menu+0xa40>)
 8000e72:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8000e74:	4b41      	ldr	r3, [pc, #260]	@ (8000f7c <menu+0xa40>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d902      	bls.n	8000e82 <menu+0x946>
				calismaSekli = 0;
 8000e7c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f7c <menu+0xa40>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000e82:	f002 fcf9 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000e86:	2104      	movs	r1, #4
 8000e88:	4841      	ldr	r0, [pc, #260]	@ (8000f90 <menu+0xa54>)
 8000e8a:	f006 fcd9 	bl	8007840 <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d119      	bne.n	8000ec8 <menu+0x98c>
 8000e94:	4b3f      	ldr	r3, [pc, #252]	@ (8000f94 <menu+0xa58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	f083 0301 	eor.w	r3, r3, #1
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d012      	beq.n	8000ec8 <menu+0x98c>
 8000ea2:	4b33      	ldr	r3, [pc, #204]	@ (8000f70 <menu+0xa34>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10e      	bne.n	8000ec8 <menu+0x98c>
			calismaSekli = calismaSekli - 1;
 8000eaa:	4b34      	ldr	r3, [pc, #208]	@ (8000f7c <menu+0xa40>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b32      	ldr	r3, [pc, #200]	@ (8000f7c <menu+0xa40>)
 8000eb4:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8000eb6:	4b31      	ldr	r3, [pc, #196]	@ (8000f7c <menu+0xa40>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <menu+0x988>
	    		calismaSekli = 1;
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8000f7c <menu+0xa40>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000ec4:	f002 fcd8 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8000ec8:	2108      	movs	r1, #8
 8000eca:	4831      	ldr	r0, [pc, #196]	@ (8000f90 <menu+0xa54>)
 8000ecc:	f006 fcb8 	bl	8007840 <HAL_GPIO_ReadPin>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d118      	bne.n	8000f08 <menu+0x9cc>
 8000ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f94 <menu+0xa58>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	f083 0301 	eor.w	r3, r3, #1
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d011      	beq.n	8000f08 <menu+0x9cc>
			eepromData[1] = calismaSekli;
 8000ee4:	4b25      	ldr	r3, [pc, #148]	@ (8000f7c <menu+0xa40>)
 8000ee6:	781a      	ldrb	r2, [r3, #0]
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f98 <menu+0xa5c>)
 8000eea:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8000eec:	4b23      	ldr	r3, [pc, #140]	@ (8000f7c <menu+0xa40>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d106      	bne.n	8000f02 <menu+0x9c6>
				altLimit = 1;
 8000ef4:	4b29      	ldr	r3, [pc, #164]	@ (8000f9c <menu+0xa60>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8000efa:	4b28      	ldr	r3, [pc, #160]	@ (8000f9c <menu+0xa60>)
 8000efc:	781a      	ldrb	r2, [r3, #0]
 8000efe:	4b26      	ldr	r3, [pc, #152]	@ (8000f98 <menu+0xa5c>)
 8000f00:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8000f02:	4b27      	ldr	r3, [pc, #156]	@ (8000fa0 <menu+0xa64>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8000f08:	4b26      	ldr	r3, [pc, #152]	@ (8000fa4 <menu+0xa68>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	f040 80ad 	bne.w	800106c <menu+0xb30>
		if(dilSecim == 0) {
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <menu+0xa2c>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d105      	bne.n	8000f26 <menu+0x9ea>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8000f1a:	4a23      	ldr	r2, [pc, #140]	@ (8000fa8 <menu+0xa6c>)
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f7ff fac5 	bl	80004ae <lcd_print>
 8000f24:	e008      	b.n	8000f38 <menu+0x9fc>
		} else if(dilSecim == 1) {
 8000f26:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <menu+0xa2c>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d104      	bne.n	8000f38 <menu+0x9fc>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8000f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8000fac <menu+0xa70>)
 8000f30:	2101      	movs	r1, #1
 8000f32:	2001      	movs	r0, #1
 8000f34:	f7ff fabb 	bl	80004ae <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8000f38:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <menu+0xa74>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d13d      	bne.n	8000fbc <menu+0xa80>
			if(dilSecim == 0) {
 8000f40:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <menu+0xa2c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d105      	bne.n	8000f54 <menu+0xa18>
				lcd_print(2, 1, "Pasif           ");
 8000f48:	4a1a      	ldr	r2, [pc, #104]	@ (8000fb4 <menu+0xa78>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	2002      	movs	r0, #2
 8000f4e:	f7ff faae 	bl	80004ae <lcd_print>
 8000f52:	e03c      	b.n	8000fce <menu+0xa92>
			} else if(dilSecim == 1) {
 8000f54:	4b04      	ldr	r3, [pc, #16]	@ (8000f68 <menu+0xa2c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d138      	bne.n	8000fce <menu+0xa92>
				lcd_print(2, 1, "Passive         ");
 8000f5c:	4a16      	ldr	r2, [pc, #88]	@ (8000fb8 <menu+0xa7c>)
 8000f5e:	2101      	movs	r1, #1
 8000f60:	2002      	movs	r0, #2
 8000f62:	f7ff faa4 	bl	80004ae <lcd_print>
 8000f66:	e032      	b.n	8000fce <menu+0xa92>
 8000f68:	20000344 	.word	0x20000344
 8000f6c:	0800bed0 	.word	0x0800bed0
 8000f70:	20000333 	.word	0x20000333
 8000f74:	0800bee4 	.word	0x0800bee4
 8000f78:	0800bef8 	.word	0x0800bef8
 8000f7c:	20000325 	.word	0x20000325
 8000f80:	0800bf0c 	.word	0x0800bf0c
 8000f84:	0800bf1c 	.word	0x0800bf1c
 8000f88:	0800bf2c 	.word	0x0800bf2c
 8000f8c:	0800bf3c 	.word	0x0800bf3c
 8000f90:	40010800 	.word	0x40010800
 8000f94:	20000352 	.word	0x20000352
 8000f98:	200002b8 	.word	0x200002b8
 8000f9c:	2000032a 	.word	0x2000032a
 8000fa0:	2000034f 	.word	0x2000034f
 8000fa4:	20000324 	.word	0x20000324
 8000fa8:	0800bf4c 	.word	0x0800bf4c
 8000fac:	0800bf60 	.word	0x0800bf60
 8000fb0:	20000328 	.word	0x20000328
 8000fb4:	0800bf74 	.word	0x0800bf74
 8000fb8:	0800bf88 	.word	0x0800bf88
			}
		} else if(emniyetCercevesi == 1) {
 8000fbc:	4b95      	ldr	r3, [pc, #596]	@ (8001214 <menu+0xcd8>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d104      	bne.n	8000fce <menu+0xa92>
			lcd_print(2, 1, "OND Safety     ");
 8000fc4:	4a94      	ldr	r2, [pc, #592]	@ (8001218 <menu+0xcdc>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	2002      	movs	r0, #2
 8000fca:	f7ff fa70 	bl	80004ae <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8000fce:	2102      	movs	r1, #2
 8000fd0:	4892      	ldr	r0, [pc, #584]	@ (800121c <menu+0xce0>)
 8000fd2:	f006 fc35 	bl	8007840 <HAL_GPIO_ReadPin>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d115      	bne.n	8001008 <menu+0xacc>
 8000fdc:	4b90      	ldr	r3, [pc, #576]	@ (8001220 <menu+0xce4>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	f083 0301 	eor.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00e      	beq.n	8001008 <menu+0xacc>
			emniyetCercevesi = emniyetCercevesi + 1;
 8000fea:	4b8a      	ldr	r3, [pc, #552]	@ (8001214 <menu+0xcd8>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b88      	ldr	r3, [pc, #544]	@ (8001214 <menu+0xcd8>)
 8000ff4:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8000ff6:	4b87      	ldr	r3, [pc, #540]	@ (8001214 <menu+0xcd8>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d902      	bls.n	8001004 <menu+0xac8>
				emniyetCercevesi = 0;
 8000ffe:	4b85      	ldr	r3, [pc, #532]	@ (8001214 <menu+0xcd8>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001004:	f002 fc38 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001008:	2104      	movs	r1, #4
 800100a:	4884      	ldr	r0, [pc, #528]	@ (800121c <menu+0xce0>)
 800100c:	f006 fc18 	bl	8007840 <HAL_GPIO_ReadPin>
 8001010:	4603      	mov	r3, r0
 8001012:	2b01      	cmp	r3, #1
 8001014:	d115      	bne.n	8001042 <menu+0xb06>
 8001016:	4b82      	ldr	r3, [pc, #520]	@ (8001220 <menu+0xce4>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	f083 0301 	eor.w	r3, r3, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00e      	beq.n	8001042 <menu+0xb06>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001024:	4b7b      	ldr	r3, [pc, #492]	@ (8001214 <menu+0xcd8>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	3b01      	subs	r3, #1
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b79      	ldr	r3, [pc, #484]	@ (8001214 <menu+0xcd8>)
 800102e:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001030:	4b78      	ldr	r3, [pc, #480]	@ (8001214 <menu+0xcd8>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <menu+0xb02>
		   		emniyetCercevesi = 1;
 8001038:	4b76      	ldr	r3, [pc, #472]	@ (8001214 <menu+0xcd8>)
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800103e:	f002 fc1b 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001042:	2108      	movs	r1, #8
 8001044:	4875      	ldr	r0, [pc, #468]	@ (800121c <menu+0xce0>)
 8001046:	f006 fbfb 	bl	8007840 <HAL_GPIO_ReadPin>
 800104a:	4603      	mov	r3, r0
 800104c:	2b01      	cmp	r3, #1
 800104e:	d10d      	bne.n	800106c <menu+0xb30>
 8001050:	4b73      	ldr	r3, [pc, #460]	@ (8001220 <menu+0xce4>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	f083 0301 	eor.w	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d006      	beq.n	800106c <menu+0xb30>
			eepromData[2] = emniyetCercevesi;
 800105e:	4b6d      	ldr	r3, [pc, #436]	@ (8001214 <menu+0xcd8>)
 8001060:	781a      	ldrb	r2, [r3, #0]
 8001062:	4b70      	ldr	r3, [pc, #448]	@ (8001224 <menu+0xce8>)
 8001064:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001066:	4b70      	ldr	r3, [pc, #448]	@ (8001228 <menu+0xcec>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 800106c:	4b6f      	ldr	r3, [pc, #444]	@ (800122c <menu+0xcf0>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b04      	cmp	r3, #4
 8001072:	f040 8091 	bne.w	8001198 <menu+0xc5c>
		if(dilSecim == 0) {
 8001076:	4b6e      	ldr	r3, [pc, #440]	@ (8001230 <menu+0xcf4>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d105      	bne.n	800108a <menu+0xb4e>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 800107e:	4a6d      	ldr	r2, [pc, #436]	@ (8001234 <menu+0xcf8>)
 8001080:	2101      	movs	r1, #1
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff fa13 	bl	80004ae <lcd_print>
 8001088:	e008      	b.n	800109c <menu+0xb60>
		} else if(dilSecim == 1) {
 800108a:	4b69      	ldr	r3, [pc, #420]	@ (8001230 <menu+0xcf4>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d104      	bne.n	800109c <menu+0xb60>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001092:	4a69      	ldr	r2, [pc, #420]	@ (8001238 <menu+0xcfc>)
 8001094:	2101      	movs	r1, #1
 8001096:	2001      	movs	r0, #1
 8001098:	f7ff fa09 	bl	80004ae <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 800109c:	4b67      	ldr	r3, [pc, #412]	@ (800123c <menu+0xd00>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d113      	bne.n	80010cc <menu+0xb90>
			if(dilSecim == 0) {
 80010a4:	4b62      	ldr	r3, [pc, #392]	@ (8001230 <menu+0xcf4>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d105      	bne.n	80010b8 <menu+0xb7c>
				lcd_print(2, 1, "Pasif           ");
 80010ac:	4a64      	ldr	r2, [pc, #400]	@ (8001240 <menu+0xd04>)
 80010ae:	2101      	movs	r1, #1
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff f9fc 	bl	80004ae <lcd_print>
 80010b6:	e020      	b.n	80010fa <menu+0xbbe>
			} else if(dilSecim == 1) {
 80010b8:	4b5d      	ldr	r3, [pc, #372]	@ (8001230 <menu+0xcf4>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d11c      	bne.n	80010fa <menu+0xbbe>
				lcd_print(2, 1, "Passive         ");
 80010c0:	4a60      	ldr	r2, [pc, #384]	@ (8001244 <menu+0xd08>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	2002      	movs	r0, #2
 80010c6:	f7ff f9f2 	bl	80004ae <lcd_print>
 80010ca:	e016      	b.n	80010fa <menu+0xbbe>
			}
		} else if(yavaslamaLimit == 1) {
 80010cc:	4b5b      	ldr	r3, [pc, #364]	@ (800123c <menu+0xd00>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d112      	bne.n	80010fa <menu+0xbbe>
			if(dilSecim == 0) {
 80010d4:	4b56      	ldr	r3, [pc, #344]	@ (8001230 <menu+0xcf4>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d105      	bne.n	80010e8 <menu+0xbac>
				lcd_print(2, 1, "Aktif           ");
 80010dc:	4a5a      	ldr	r2, [pc, #360]	@ (8001248 <menu+0xd0c>)
 80010de:	2101      	movs	r1, #1
 80010e0:	2002      	movs	r0, #2
 80010e2:	f7ff f9e4 	bl	80004ae <lcd_print>
 80010e6:	e008      	b.n	80010fa <menu+0xbbe>
			} else if(dilSecim == 1) {
 80010e8:	4b51      	ldr	r3, [pc, #324]	@ (8001230 <menu+0xcf4>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d104      	bne.n	80010fa <menu+0xbbe>
				lcd_print(2, 1, "Active          ");
 80010f0:	4a56      	ldr	r2, [pc, #344]	@ (800124c <menu+0xd10>)
 80010f2:	2101      	movs	r1, #1
 80010f4:	2002      	movs	r0, #2
 80010f6:	f7ff f9da 	bl	80004ae <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80010fa:	2102      	movs	r1, #2
 80010fc:	4847      	ldr	r0, [pc, #284]	@ (800121c <menu+0xce0>)
 80010fe:	f006 fb9f 	bl	8007840 <HAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
 8001104:	2b01      	cmp	r3, #1
 8001106:	d115      	bne.n	8001134 <menu+0xbf8>
 8001108:	4b45      	ldr	r3, [pc, #276]	@ (8001220 <menu+0xce4>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	f083 0301 	eor.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00e      	beq.n	8001134 <menu+0xbf8>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001116:	4b49      	ldr	r3, [pc, #292]	@ (800123c <menu+0xd00>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b47      	ldr	r3, [pc, #284]	@ (800123c <menu+0xd00>)
 8001120:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001122:	4b46      	ldr	r3, [pc, #280]	@ (800123c <menu+0xd00>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d902      	bls.n	8001130 <menu+0xbf4>
				yavaslamaLimit = 0;
 800112a:	4b44      	ldr	r3, [pc, #272]	@ (800123c <menu+0xd00>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001130:	f002 fba2 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001134:	2104      	movs	r1, #4
 8001136:	4839      	ldr	r0, [pc, #228]	@ (800121c <menu+0xce0>)
 8001138:	f006 fb82 	bl	8007840 <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	d115      	bne.n	800116e <menu+0xc32>
 8001142:	4b37      	ldr	r3, [pc, #220]	@ (8001220 <menu+0xce4>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	f083 0301 	eor.w	r3, r3, #1
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00e      	beq.n	800116e <menu+0xc32>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001150:	4b3a      	ldr	r3, [pc, #232]	@ (800123c <menu+0xd00>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	3b01      	subs	r3, #1
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b38      	ldr	r3, [pc, #224]	@ (800123c <menu+0xd00>)
 800115a:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 800115c:	4b37      	ldr	r3, [pc, #220]	@ (800123c <menu+0xd00>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <menu+0xc2e>
		   		yavaslamaLimit = 1;
 8001164:	4b35      	ldr	r3, [pc, #212]	@ (800123c <menu+0xd00>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800116a:	f002 fb85 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800116e:	2108      	movs	r1, #8
 8001170:	482a      	ldr	r0, [pc, #168]	@ (800121c <menu+0xce0>)
 8001172:	f006 fb65 	bl	8007840 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b01      	cmp	r3, #1
 800117a:	d10d      	bne.n	8001198 <menu+0xc5c>
 800117c:	4b28      	ldr	r3, [pc, #160]	@ (8001220 <menu+0xce4>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	f083 0301 	eor.w	r3, r3, #1
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d006      	beq.n	8001198 <menu+0xc5c>
			eepromData[4] = yavaslamaLimit;
 800118a:	4b2c      	ldr	r3, [pc, #176]	@ (800123c <menu+0xd00>)
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	4b25      	ldr	r3, [pc, #148]	@ (8001224 <menu+0xce8>)
 8001190:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001192:	4b25      	ldr	r3, [pc, #148]	@ (8001228 <menu+0xcec>)
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001198:	4b24      	ldr	r3, [pc, #144]	@ (800122c <menu+0xcf0>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b05      	cmp	r3, #5
 800119e:	f040 80dd 	bne.w	800135c <menu+0xe20>
		if(dilSecim == 0) {
 80011a2:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <menu+0xcf4>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d105      	bne.n	80011b6 <menu+0xc7a>
			lcd_print(1, 1, "ALT LIMIT       ");
 80011aa:	4a29      	ldr	r2, [pc, #164]	@ (8001250 <menu+0xd14>)
 80011ac:	2101      	movs	r1, #1
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff f97d 	bl	80004ae <lcd_print>
 80011b4:	e008      	b.n	80011c8 <menu+0xc8c>
		} else if(dilSecim == 1) {
 80011b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <menu+0xcf4>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d104      	bne.n	80011c8 <menu+0xc8c>
			lcd_print(1, 1, "DOWN LIMIT      ");
 80011be:	4a25      	ldr	r2, [pc, #148]	@ (8001254 <menu+0xd18>)
 80011c0:	2101      	movs	r1, #1
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff f973 	bl	80004ae <lcd_print>
		}

		if(altLimit == 0) {
 80011c8:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <menu+0xd1c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d113      	bne.n	80011f8 <menu+0xcbc>
			if(dilSecim == 0) {
 80011d0:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <menu+0xcf4>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d105      	bne.n	80011e4 <menu+0xca8>
				lcd_print(2, 1, "Pasif           ");
 80011d8:	4a19      	ldr	r2, [pc, #100]	@ (8001240 <menu+0xd04>)
 80011da:	2101      	movs	r1, #1
 80011dc:	2002      	movs	r0, #2
 80011de:	f7ff f966 	bl	80004ae <lcd_print>
 80011e2:	e044      	b.n	800126e <menu+0xd32>
			} else if(dilSecim == 1) {
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <menu+0xcf4>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d140      	bne.n	800126e <menu+0xd32>
				lcd_print(2, 1, "Passive         ");
 80011ec:	4a15      	ldr	r2, [pc, #84]	@ (8001244 <menu+0xd08>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	2002      	movs	r0, #2
 80011f2:	f7ff f95c 	bl	80004ae <lcd_print>
 80011f6:	e03a      	b.n	800126e <menu+0xd32>
			}
		} else if(altLimit == 1) {
 80011f8:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <menu+0xd1c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d136      	bne.n	800126e <menu+0xd32>
			if(dilSecim == 0){
 8001200:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <menu+0xcf4>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d129      	bne.n	800125c <menu+0xd20>
				lcd_print(2, 1, "Aktif           ");
 8001208:	4a0f      	ldr	r2, [pc, #60]	@ (8001248 <menu+0xd0c>)
 800120a:	2101      	movs	r1, #1
 800120c:	2002      	movs	r0, #2
 800120e:	f7ff f94e 	bl	80004ae <lcd_print>
 8001212:	e02c      	b.n	800126e <menu+0xd32>
 8001214:	20000328 	.word	0x20000328
 8001218:	0800bf9c 	.word	0x0800bf9c
 800121c:	40010800 	.word	0x40010800
 8001220:	20000352 	.word	0x20000352
 8001224:	200002b8 	.word	0x200002b8
 8001228:	2000034f 	.word	0x2000034f
 800122c:	20000324 	.word	0x20000324
 8001230:	20000344 	.word	0x20000344
 8001234:	0800bfac 	.word	0x0800bfac
 8001238:	0800bfc0 	.word	0x0800bfc0
 800123c:	20000329 	.word	0x20000329
 8001240:	0800bf74 	.word	0x0800bf74
 8001244:	0800bf88 	.word	0x0800bf88
 8001248:	0800bfd4 	.word	0x0800bfd4
 800124c:	0800bfe8 	.word	0x0800bfe8
 8001250:	0800bffc 	.word	0x0800bffc
 8001254:	0800c010 	.word	0x0800c010
 8001258:	2000032a 	.word	0x2000032a
			} else if(dilSecim == 1){
 800125c:	4b92      	ldr	r3, [pc, #584]	@ (80014a8 <menu+0xf6c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d104      	bne.n	800126e <menu+0xd32>
				lcd_print(2, 1, "Active          ");
 8001264:	4a91      	ldr	r2, [pc, #580]	@ (80014ac <menu+0xf70>)
 8001266:	2101      	movs	r1, #1
 8001268:	2002      	movs	r0, #2
 800126a:	f7ff f920 	bl	80004ae <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 800126e:	2102      	movs	r1, #2
 8001270:	488f      	ldr	r0, [pc, #572]	@ (80014b0 <menu+0xf74>)
 8001272:	f006 fae5 	bl	8007840 <HAL_GPIO_ReadPin>
 8001276:	4603      	mov	r3, r0
 8001278:	2b01      	cmp	r3, #1
 800127a:	d119      	bne.n	80012b0 <menu+0xd74>
 800127c:	4b8d      	ldr	r3, [pc, #564]	@ (80014b4 <menu+0xf78>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	f083 0301 	eor.w	r3, r3, #1
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d012      	beq.n	80012b0 <menu+0xd74>
 800128a:	4b8b      	ldr	r3, [pc, #556]	@ (80014b8 <menu+0xf7c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <menu+0xd74>
			altLimit = altLimit + 1;
 8001292:	4b8a      	ldr	r3, [pc, #552]	@ (80014bc <menu+0xf80>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4b88      	ldr	r3, [pc, #544]	@ (80014bc <menu+0xf80>)
 800129c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800129e:	4b87      	ldr	r3, [pc, #540]	@ (80014bc <menu+0xf80>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d902      	bls.n	80012ac <menu+0xd70>
				altLimit = 0;
 80012a6:	4b85      	ldr	r3, [pc, #532]	@ (80014bc <menu+0xf80>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80012ac:	f002 fae4 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80012b0:	2104      	movs	r1, #4
 80012b2:	487f      	ldr	r0, [pc, #508]	@ (80014b0 <menu+0xf74>)
 80012b4:	f006 fac4 	bl	8007840 <HAL_GPIO_ReadPin>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d119      	bne.n	80012f2 <menu+0xdb6>
 80012be:	4b7d      	ldr	r3, [pc, #500]	@ (80014b4 <menu+0xf78>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	f083 0301 	eor.w	r3, r3, #1
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d012      	beq.n	80012f2 <menu+0xdb6>
 80012cc:	4b7a      	ldr	r3, [pc, #488]	@ (80014b8 <menu+0xf7c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10e      	bne.n	80012f2 <menu+0xdb6>
			altLimit = altLimit - 1;
 80012d4:	4b79      	ldr	r3, [pc, #484]	@ (80014bc <menu+0xf80>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	3b01      	subs	r3, #1
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b77      	ldr	r3, [pc, #476]	@ (80014bc <menu+0xf80>)
 80012de:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80012e0:	4b76      	ldr	r3, [pc, #472]	@ (80014bc <menu+0xf80>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <menu+0xdb2>
		   		altLimit = 1;
 80012e8:	4b74      	ldr	r3, [pc, #464]	@ (80014bc <menu+0xf80>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80012ee:	f002 fac3 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80012f2:	2108      	movs	r1, #8
 80012f4:	486e      	ldr	r0, [pc, #440]	@ (80014b0 <menu+0xf74>)
 80012f6:	f006 faa3 	bl	8007840 <HAL_GPIO_ReadPin>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d12d      	bne.n	800135c <menu+0xe20>
 8001300:	4b6c      	ldr	r3, [pc, #432]	@ (80014b4 <menu+0xf78>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	f083 0301 	eor.w	r3, r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d026      	beq.n	800135c <menu+0xe20>
			eepromData[5] = altLimit;
 800130e:	4b6b      	ldr	r3, [pc, #428]	@ (80014bc <menu+0xf80>)
 8001310:	781a      	ldrb	r2, [r3, #0]
 8001312:	4b6b      	ldr	r3, [pc, #428]	@ (80014c0 <menu+0xf84>)
 8001314:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001316:	4b69      	ldr	r3, [pc, #420]	@ (80014bc <menu+0xf80>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d110      	bne.n	8001340 <menu+0xe04>
 800131e:	4b69      	ldr	r3, [pc, #420]	@ (80014c4 <menu+0xf88>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <menu+0xdf2>
 8001326:	4b67      	ldr	r3, [pc, #412]	@ (80014c4 <menu+0xf88>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d108      	bne.n	8001340 <menu+0xe04>
				kapiTablaAcKonum = 3;
 800132e:	4b65      	ldr	r3, [pc, #404]	@ (80014c4 <menu+0xf88>)
 8001330:	2203      	movs	r2, #3
 8001332:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001334:	4b63      	ldr	r3, [pc, #396]	@ (80014c4 <menu+0xf88>)
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	4b61      	ldr	r3, [pc, #388]	@ (80014c0 <menu+0xf84>)
 800133a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800133e:	e00a      	b.n	8001356 <menu+0xe1a>
			} else if(altLimit == 0) {
 8001340:	4b5e      	ldr	r3, [pc, #376]	@ (80014bc <menu+0xf80>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d106      	bne.n	8001356 <menu+0xe1a>
				platformSilindirTipi = 0;
 8001348:	4b5f      	ldr	r3, [pc, #380]	@ (80014c8 <menu+0xf8c>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800134e:	4b5e      	ldr	r3, [pc, #376]	@ (80014c8 <menu+0xf8c>)
 8001350:	781a      	ldrb	r2, [r3, #0]
 8001352:	4b5b      	ldr	r3, [pc, #364]	@ (80014c0 <menu+0xf84>)
 8001354:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001356:	4b5d      	ldr	r3, [pc, #372]	@ (80014cc <menu+0xf90>)
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 800135c:	4b5c      	ldr	r3, [pc, #368]	@ (80014d0 <menu+0xf94>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b06      	cmp	r3, #6
 8001362:	f040 8091 	bne.w	8001488 <menu+0xf4c>
		if(dilSecim == 0) {
 8001366:	4b50      	ldr	r3, [pc, #320]	@ (80014a8 <menu+0xf6c>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d105      	bne.n	800137a <menu+0xe3e>
			lcd_print(1, 1, "BASINC SALTERI ");
 800136e:	4a59      	ldr	r2, [pc, #356]	@ (80014d4 <menu+0xf98>)
 8001370:	2101      	movs	r1, #1
 8001372:	2001      	movs	r0, #1
 8001374:	f7ff f89b 	bl	80004ae <lcd_print>
 8001378:	e008      	b.n	800138c <menu+0xe50>
		} else if(dilSecim == 1){
 800137a:	4b4b      	ldr	r3, [pc, #300]	@ (80014a8 <menu+0xf6c>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d104      	bne.n	800138c <menu+0xe50>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8001382:	4a55      	ldr	r2, [pc, #340]	@ (80014d8 <menu+0xf9c>)
 8001384:	2101      	movs	r1, #1
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff f891 	bl	80004ae <lcd_print>
		}
		if(basincSalteri == 0){
 800138c:	4b53      	ldr	r3, [pc, #332]	@ (80014dc <menu+0xfa0>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d113      	bne.n	80013bc <menu+0xe80>
			if(dilSecim == 0) {
 8001394:	4b44      	ldr	r3, [pc, #272]	@ (80014a8 <menu+0xf6c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d105      	bne.n	80013a8 <menu+0xe6c>
				lcd_print(2, 1, "Pasif           ");
 800139c:	4a50      	ldr	r2, [pc, #320]	@ (80014e0 <menu+0xfa4>)
 800139e:	2101      	movs	r1, #1
 80013a0:	2002      	movs	r0, #2
 80013a2:	f7ff f884 	bl	80004ae <lcd_print>
 80013a6:	e020      	b.n	80013ea <menu+0xeae>
			} else if(dilSecim == 1){
 80013a8:	4b3f      	ldr	r3, [pc, #252]	@ (80014a8 <menu+0xf6c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d11c      	bne.n	80013ea <menu+0xeae>
				lcd_print(2, 1, "Passive         ");
 80013b0:	4a4c      	ldr	r2, [pc, #304]	@ (80014e4 <menu+0xfa8>)
 80013b2:	2101      	movs	r1, #1
 80013b4:	2002      	movs	r0, #2
 80013b6:	f7ff f87a 	bl	80004ae <lcd_print>
 80013ba:	e016      	b.n	80013ea <menu+0xeae>
			}
		} else if(basincSalteri == 1) {
 80013bc:	4b47      	ldr	r3, [pc, #284]	@ (80014dc <menu+0xfa0>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d112      	bne.n	80013ea <menu+0xeae>
			if(dilSecim == 0) {
 80013c4:	4b38      	ldr	r3, [pc, #224]	@ (80014a8 <menu+0xf6c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d105      	bne.n	80013d8 <menu+0xe9c>
				lcd_print(2, 1, "Aktif           ");
 80013cc:	4a46      	ldr	r2, [pc, #280]	@ (80014e8 <menu+0xfac>)
 80013ce:	2101      	movs	r1, #1
 80013d0:	2002      	movs	r0, #2
 80013d2:	f7ff f86c 	bl	80004ae <lcd_print>
 80013d6:	e008      	b.n	80013ea <menu+0xeae>
			} else if(dilSecim == 1) {
 80013d8:	4b33      	ldr	r3, [pc, #204]	@ (80014a8 <menu+0xf6c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d104      	bne.n	80013ea <menu+0xeae>
				lcd_print(2, 1, "Active          ");
 80013e0:	4a32      	ldr	r2, [pc, #200]	@ (80014ac <menu+0xf70>)
 80013e2:	2101      	movs	r1, #1
 80013e4:	2002      	movs	r0, #2
 80013e6:	f7ff f862 	bl	80004ae <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80013ea:	2102      	movs	r1, #2
 80013ec:	4830      	ldr	r0, [pc, #192]	@ (80014b0 <menu+0xf74>)
 80013ee:	f006 fa27 	bl	8007840 <HAL_GPIO_ReadPin>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d115      	bne.n	8001424 <menu+0xee8>
 80013f8:	4b2e      	ldr	r3, [pc, #184]	@ (80014b4 <menu+0xf78>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	f083 0301 	eor.w	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00e      	beq.n	8001424 <menu+0xee8>
			basincSalteri = basincSalteri + 1;
 8001406:	4b35      	ldr	r3, [pc, #212]	@ (80014dc <menu+0xfa0>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b33      	ldr	r3, [pc, #204]	@ (80014dc <menu+0xfa0>)
 8001410:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001412:	4b32      	ldr	r3, [pc, #200]	@ (80014dc <menu+0xfa0>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d902      	bls.n	8001420 <menu+0xee4>
				basincSalteri = 0;
 800141a:	4b30      	ldr	r3, [pc, #192]	@ (80014dc <menu+0xfa0>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001420:	f002 fa2a 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001424:	2104      	movs	r1, #4
 8001426:	4822      	ldr	r0, [pc, #136]	@ (80014b0 <menu+0xf74>)
 8001428:	f006 fa0a 	bl	8007840 <HAL_GPIO_ReadPin>
 800142c:	4603      	mov	r3, r0
 800142e:	2b01      	cmp	r3, #1
 8001430:	d115      	bne.n	800145e <menu+0xf22>
 8001432:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <menu+0xf78>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	f083 0301 	eor.w	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00e      	beq.n	800145e <menu+0xf22>
			basincSalteri = basincSalteri - 1;
 8001440:	4b26      	ldr	r3, [pc, #152]	@ (80014dc <menu+0xfa0>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	3b01      	subs	r3, #1
 8001446:	b2da      	uxtb	r2, r3
 8001448:	4b24      	ldr	r3, [pc, #144]	@ (80014dc <menu+0xfa0>)
 800144a:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800144c:	4b23      	ldr	r3, [pc, #140]	@ (80014dc <menu+0xfa0>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <menu+0xf1e>
		   		basincSalteri = 1;
 8001454:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <menu+0xfa0>)
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800145a:	f002 fa0d 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800145e:	2108      	movs	r1, #8
 8001460:	4813      	ldr	r0, [pc, #76]	@ (80014b0 <menu+0xf74>)
 8001462:	f006 f9ed 	bl	8007840 <HAL_GPIO_ReadPin>
 8001466:	4603      	mov	r3, r0
 8001468:	2b01      	cmp	r3, #1
 800146a:	d10d      	bne.n	8001488 <menu+0xf4c>
 800146c:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <menu+0xf78>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	f083 0301 	eor.w	r3, r3, #1
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d006      	beq.n	8001488 <menu+0xf4c>
			eepromData[6] = basincSalteri;
 800147a:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <menu+0xfa0>)
 800147c:	781a      	ldrb	r2, [r3, #0]
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <menu+0xf84>)
 8001480:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001482:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <menu+0xf90>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001488:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <menu+0xf94>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b07      	cmp	r3, #7
 800148e:	f040 80f1 	bne.w	8001674 <menu+0x1138>
		if(dilSecim == 0) {
 8001492:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <menu+0xf6c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d12a      	bne.n	80014f0 <menu+0xfb4>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800149a:	4a14      	ldr	r2, [pc, #80]	@ (80014ec <menu+0xfb0>)
 800149c:	2101      	movs	r1, #1
 800149e:	2001      	movs	r0, #1
 80014a0:	f7ff f805 	bl	80004ae <lcd_print>
 80014a4:	e02d      	b.n	8001502 <menu+0xfc6>
 80014a6:	bf00      	nop
 80014a8:	20000344 	.word	0x20000344
 80014ac:	0800bfe8 	.word	0x0800bfe8
 80014b0:	40010800 	.word	0x40010800
 80014b4:	20000352 	.word	0x20000352
 80014b8:	20000325 	.word	0x20000325
 80014bc:	2000032a 	.word	0x2000032a
 80014c0:	200002b8 	.word	0x200002b8
 80014c4:	20000331 	.word	0x20000331
 80014c8:	20000337 	.word	0x20000337
 80014cc:	2000034f 	.word	0x2000034f
 80014d0:	20000324 	.word	0x20000324
 80014d4:	0800c024 	.word	0x0800c024
 80014d8:	0800c034 	.word	0x0800c034
 80014dc:	2000032b 	.word	0x2000032b
 80014e0:	0800bf74 	.word	0x0800bf74
 80014e4:	0800bf88 	.word	0x0800bf88
 80014e8:	0800bfd4 	.word	0x0800bfd4
 80014ec:	0800c044 	.word	0x0800c044
		} else if(dilSecim == 1){
 80014f0:	4b7f      	ldr	r3, [pc, #508]	@ (80016f0 <menu+0x11b4>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d104      	bne.n	8001502 <menu+0xfc6>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80014f8:	4a7e      	ldr	r2, [pc, #504]	@ (80016f4 <menu+0x11b8>)
 80014fa:	2101      	movs	r1, #1
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7fe ffd6 	bl	80004ae <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8001502:	4b7d      	ldr	r3, [pc, #500]	@ (80016f8 <menu+0x11bc>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d113      	bne.n	8001532 <menu+0xff6>
			if(dilSecim == 0) {
 800150a:	4b79      	ldr	r3, [pc, #484]	@ (80016f0 <menu+0x11b4>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d105      	bne.n	800151e <menu+0xfe2>
				lcd_print(2, 1, "Pasif           ");
 8001512:	4a7a      	ldr	r2, [pc, #488]	@ (80016fc <menu+0x11c0>)
 8001514:	2101      	movs	r1, #1
 8001516:	2002      	movs	r0, #2
 8001518:	f7fe ffc9 	bl	80004ae <lcd_print>
 800151c:	e050      	b.n	80015c0 <menu+0x1084>
			} else if(dilSecim == 1){
 800151e:	4b74      	ldr	r3, [pc, #464]	@ (80016f0 <menu+0x11b4>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d14c      	bne.n	80015c0 <menu+0x1084>
				lcd_print(2, 1, "Passive         ");
 8001526:	4a76      	ldr	r2, [pc, #472]	@ (8001700 <menu+0x11c4>)
 8001528:	2101      	movs	r1, #1
 800152a:	2002      	movs	r0, #2
 800152c:	f7fe ffbf 	bl	80004ae <lcd_print>
 8001530:	e046      	b.n	80015c0 <menu+0x1084>
			}
		} else if(kapiSecimleri == 1) {
 8001532:	4b71      	ldr	r3, [pc, #452]	@ (80016f8 <menu+0x11bc>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d113      	bne.n	8001562 <menu+0x1026>
			if(dilSecim == 0) {
 800153a:	4b6d      	ldr	r3, [pc, #436]	@ (80016f0 <menu+0x11b4>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d105      	bne.n	800154e <menu+0x1012>
				lcd_print(2, 1, "Kat kapisi aktif");
 8001542:	4a70      	ldr	r2, [pc, #448]	@ (8001704 <menu+0x11c8>)
 8001544:	2101      	movs	r1, #1
 8001546:	2002      	movs	r0, #2
 8001548:	f7fe ffb1 	bl	80004ae <lcd_print>
 800154c:	e038      	b.n	80015c0 <menu+0x1084>
			} else if(dilSecim == 1) {
 800154e:	4b68      	ldr	r3, [pc, #416]	@ (80016f0 <menu+0x11b4>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d134      	bne.n	80015c0 <menu+0x1084>
				lcd_print(2, 1, "Floor door act  ");
 8001556:	4a6c      	ldr	r2, [pc, #432]	@ (8001708 <menu+0x11cc>)
 8001558:	2101      	movs	r1, #1
 800155a:	2002      	movs	r0, #2
 800155c:	f7fe ffa7 	bl	80004ae <lcd_print>
 8001560:	e02e      	b.n	80015c0 <menu+0x1084>
			}
		} else if(kapiSecimleri == 2){
 8001562:	4b65      	ldr	r3, [pc, #404]	@ (80016f8 <menu+0x11bc>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d113      	bne.n	8001592 <menu+0x1056>
			if(dilSecim == 0) {
 800156a:	4b61      	ldr	r3, [pc, #388]	@ (80016f0 <menu+0x11b4>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d105      	bne.n	800157e <menu+0x1042>
				lcd_print(2, 1, "Tabla kapi aktif");
 8001572:	4a66      	ldr	r2, [pc, #408]	@ (800170c <menu+0x11d0>)
 8001574:	2101      	movs	r1, #1
 8001576:	2002      	movs	r0, #2
 8001578:	f7fe ff99 	bl	80004ae <lcd_print>
 800157c:	e020      	b.n	80015c0 <menu+0x1084>
			} else if(dilSecim == 1) {
 800157e:	4b5c      	ldr	r3, [pc, #368]	@ (80016f0 <menu+0x11b4>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d11c      	bne.n	80015c0 <menu+0x1084>
				lcd_print(2, 1, "Pltfrm door act ");
 8001586:	4a62      	ldr	r2, [pc, #392]	@ (8001710 <menu+0x11d4>)
 8001588:	2101      	movs	r1, #1
 800158a:	2002      	movs	r0, #2
 800158c:	f7fe ff8f 	bl	80004ae <lcd_print>
 8001590:	e016      	b.n	80015c0 <menu+0x1084>
			}
		} else if(kapiSecimleri == 3){
 8001592:	4b59      	ldr	r3, [pc, #356]	@ (80016f8 <menu+0x11bc>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d112      	bne.n	80015c0 <menu+0x1084>
			if(dilSecim == 0) {
 800159a:	4b55      	ldr	r3, [pc, #340]	@ (80016f0 <menu+0x11b4>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d105      	bne.n	80015ae <menu+0x1072>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80015a2:	4a5c      	ldr	r2, [pc, #368]	@ (8001714 <menu+0x11d8>)
 80015a4:	2101      	movs	r1, #1
 80015a6:	2002      	movs	r0, #2
 80015a8:	f7fe ff81 	bl	80004ae <lcd_print>
 80015ac:	e008      	b.n	80015c0 <menu+0x1084>
			} else if(dilSecim == 1){
 80015ae:	4b50      	ldr	r3, [pc, #320]	@ (80016f0 <menu+0x11b4>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d104      	bne.n	80015c0 <menu+0x1084>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80015b6:	4a58      	ldr	r2, [pc, #352]	@ (8001718 <menu+0x11dc>)
 80015b8:	2101      	movs	r1, #1
 80015ba:	2002      	movs	r0, #2
 80015bc:	f7fe ff77 	bl	80004ae <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80015c0:	2102      	movs	r1, #2
 80015c2:	4856      	ldr	r0, [pc, #344]	@ (800171c <menu+0x11e0>)
 80015c4:	f006 f93c 	bl	8007840 <HAL_GPIO_ReadPin>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d115      	bne.n	80015fa <menu+0x10be>
 80015ce:	4b54      	ldr	r3, [pc, #336]	@ (8001720 <menu+0x11e4>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	f083 0301 	eor.w	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00e      	beq.n	80015fa <menu+0x10be>
			kapiSecimleri = kapiSecimleri + 1;
 80015dc:	4b46      	ldr	r3, [pc, #280]	@ (80016f8 <menu+0x11bc>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b44      	ldr	r3, [pc, #272]	@ (80016f8 <menu+0x11bc>)
 80015e6:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80015e8:	4b43      	ldr	r3, [pc, #268]	@ (80016f8 <menu+0x11bc>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	d902      	bls.n	80015f6 <menu+0x10ba>
				kapiSecimleri = 0;
 80015f0:	4b41      	ldr	r3, [pc, #260]	@ (80016f8 <menu+0x11bc>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80015f6:	f002 f93f 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80015fa:	2104      	movs	r1, #4
 80015fc:	4847      	ldr	r0, [pc, #284]	@ (800171c <menu+0x11e0>)
 80015fe:	f006 f91f 	bl	8007840 <HAL_GPIO_ReadPin>
 8001602:	4603      	mov	r3, r0
 8001604:	2b01      	cmp	r3, #1
 8001606:	d115      	bne.n	8001634 <menu+0x10f8>
 8001608:	4b45      	ldr	r3, [pc, #276]	@ (8001720 <menu+0x11e4>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	f083 0301 	eor.w	r3, r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00e      	beq.n	8001634 <menu+0x10f8>
			kapiSecimleri = kapiSecimleri - 1;
 8001616:	4b38      	ldr	r3, [pc, #224]	@ (80016f8 <menu+0x11bc>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	3b01      	subs	r3, #1
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4b36      	ldr	r3, [pc, #216]	@ (80016f8 <menu+0x11bc>)
 8001620:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8001622:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <menu+0x11bc>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b04      	cmp	r3, #4
 8001628:	d902      	bls.n	8001630 <menu+0x10f4>
		   		kapiSecimleri = 3;
 800162a:	4b33      	ldr	r3, [pc, #204]	@ (80016f8 <menu+0x11bc>)
 800162c:	2203      	movs	r2, #3
 800162e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001630:	f002 f922 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001634:	2108      	movs	r1, #8
 8001636:	4839      	ldr	r0, [pc, #228]	@ (800171c <menu+0x11e0>)
 8001638:	f006 f902 	bl	8007840 <HAL_GPIO_ReadPin>
 800163c:	4603      	mov	r3, r0
 800163e:	2b01      	cmp	r3, #1
 8001640:	d118      	bne.n	8001674 <menu+0x1138>
 8001642:	4b37      	ldr	r3, [pc, #220]	@ (8001720 <menu+0x11e4>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	f083 0301 	eor.w	r3, r3, #1
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d011      	beq.n	8001674 <menu+0x1138>
			eepromData[7] = kapiSecimleri;
 8001650:	4b29      	ldr	r3, [pc, #164]	@ (80016f8 <menu+0x11bc>)
 8001652:	781a      	ldrb	r2, [r3, #0]
 8001654:	4b33      	ldr	r3, [pc, #204]	@ (8001724 <menu+0x11e8>)
 8001656:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8001658:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <menu+0x11bc>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d006      	beq.n	800166e <menu+0x1132>
				altLimit = 1;
 8001660:	4b31      	ldr	r3, [pc, #196]	@ (8001728 <menu+0x11ec>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001666:	4b30      	ldr	r3, [pc, #192]	@ (8001728 <menu+0x11ec>)
 8001668:	781a      	ldrb	r2, [r3, #0]
 800166a:	4b2e      	ldr	r3, [pc, #184]	@ (8001724 <menu+0x11e8>)
 800166c:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800166e:	4b2f      	ldr	r3, [pc, #188]	@ (800172c <menu+0x11f0>)
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001674:	4b2e      	ldr	r3, [pc, #184]	@ (8001730 <menu+0x11f4>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b08      	cmp	r3, #8
 800167a:	f040 80c0 	bne.w	80017fe <menu+0x12c2>
		if(dilSecim == 0) {
 800167e:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <menu+0x11b4>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d105      	bne.n	8001692 <menu+0x1156>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8001686:	4a2b      	ldr	r2, [pc, #172]	@ (8001734 <menu+0x11f8>)
 8001688:	2101      	movs	r1, #1
 800168a:	2001      	movs	r0, #1
 800168c:	f7fe ff0f 	bl	80004ae <lcd_print>
 8001690:	e008      	b.n	80016a4 <menu+0x1168>
		} else if(dilSecim == 1) {
 8001692:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <menu+0x11b4>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d104      	bne.n	80016a4 <menu+0x1168>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800169a:	4a27      	ldr	r2, [pc, #156]	@ (8001738 <menu+0x11fc>)
 800169c:	2101      	movs	r1, #1
 800169e:	2001      	movs	r0, #1
 80016a0:	f7fe ff05 	bl	80004ae <lcd_print>
		}

		if(kapiAcTipi == 0){
 80016a4:	4b25      	ldr	r3, [pc, #148]	@ (800173c <menu+0x1200>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d113      	bne.n	80016d4 <menu+0x1198>
			if(dilSecim == 0) {
 80016ac:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <menu+0x11b4>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d105      	bne.n	80016c0 <menu+0x1184>
				lcd_print(2, 1, "Kapi butonu ESP");
 80016b4:	4a22      	ldr	r2, [pc, #136]	@ (8001740 <menu+0x1204>)
 80016b6:	2101      	movs	r1, #1
 80016b8:	2002      	movs	r0, #2
 80016ba:	f7fe fef8 	bl	80004ae <lcd_print>
 80016be:	e04e      	b.n	800175e <menu+0x1222>
			} else if(dilSecim == 1) {
 80016c0:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <menu+0x11b4>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d14a      	bne.n	800175e <menu+0x1222>
				lcd_print(2, 1, "Door Button ESP");
 80016c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001744 <menu+0x1208>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	2002      	movs	r0, #2
 80016ce:	f7fe feee 	bl	80004ae <lcd_print>
 80016d2:	e044      	b.n	800175e <menu+0x1222>
			}
		} else if(kapiAcTipi == 1){
 80016d4:	4b19      	ldr	r3, [pc, #100]	@ (800173c <menu+0x1200>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d140      	bne.n	800175e <menu+0x1222>
			if(dilSecim == 0){
 80016dc:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <menu+0x11b4>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d133      	bne.n	800174c <menu+0x1210>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80016e4:	4a18      	ldr	r2, [pc, #96]	@ (8001748 <menu+0x120c>)
 80016e6:	2101      	movs	r1, #1
 80016e8:	2002      	movs	r0, #2
 80016ea:	f7fe fee0 	bl	80004ae <lcd_print>
 80016ee:	e036      	b.n	800175e <menu+0x1222>
 80016f0:	20000344 	.word	0x20000344
 80016f4:	0800c058 	.word	0x0800c058
 80016f8:	2000032c 	.word	0x2000032c
 80016fc:	0800bf74 	.word	0x0800bf74
 8001700:	0800bf88 	.word	0x0800bf88
 8001704:	0800c06c 	.word	0x0800c06c
 8001708:	0800c080 	.word	0x0800c080
 800170c:	0800c094 	.word	0x0800c094
 8001710:	0800c0a8 	.word	0x0800c0a8
 8001714:	0800c0bc 	.word	0x0800c0bc
 8001718:	0800c0d0 	.word	0x0800c0d0
 800171c:	40010800 	.word	0x40010800
 8001720:	20000352 	.word	0x20000352
 8001724:	200002b8 	.word	0x200002b8
 8001728:	2000032a 	.word	0x2000032a
 800172c:	2000034f 	.word	0x2000034f
 8001730:	20000324 	.word	0x20000324
 8001734:	0800c0e4 	.word	0x0800c0e4
 8001738:	0800c0f8 	.word	0x0800c0f8
 800173c:	20000330 	.word	0x20000330
 8001740:	0800c10c 	.word	0x0800c10c
 8001744:	0800c11c 	.word	0x0800c11c
 8001748:	0800c12c 	.word	0x0800c12c
			} else if(dilSecim == 1){
 800174c:	4b7f      	ldr	r3, [pc, #508]	@ (800194c <menu+0x1410>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d104      	bne.n	800175e <menu+0x1222>
				lcd_print(2, 1, "Floor button EXT");
 8001754:	4a7e      	ldr	r2, [pc, #504]	@ (8001950 <menu+0x1414>)
 8001756:	2101      	movs	r1, #1
 8001758:	2002      	movs	r0, #2
 800175a:	f7fe fea8 	bl	80004ae <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800175e:	2102      	movs	r1, #2
 8001760:	487c      	ldr	r0, [pc, #496]	@ (8001954 <menu+0x1418>)
 8001762:	f006 f86d 	bl	8007840 <HAL_GPIO_ReadPin>
 8001766:	4603      	mov	r3, r0
 8001768:	2b01      	cmp	r3, #1
 800176a:	d115      	bne.n	8001798 <menu+0x125c>
 800176c:	4b7a      	ldr	r3, [pc, #488]	@ (8001958 <menu+0x141c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	f083 0301 	eor.w	r3, r3, #1
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00e      	beq.n	8001798 <menu+0x125c>
			kapiAcTipi = kapiAcTipi + 1;
 800177a:	4b78      	ldr	r3, [pc, #480]	@ (800195c <menu+0x1420>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b76      	ldr	r3, [pc, #472]	@ (800195c <menu+0x1420>)
 8001784:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8001786:	4b75      	ldr	r3, [pc, #468]	@ (800195c <menu+0x1420>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d902      	bls.n	8001794 <menu+0x1258>
				kapiAcTipi = 0;
 800178e:	4b73      	ldr	r3, [pc, #460]	@ (800195c <menu+0x1420>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001794:	f002 f870 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001798:	2104      	movs	r1, #4
 800179a:	486e      	ldr	r0, [pc, #440]	@ (8001954 <menu+0x1418>)
 800179c:	f006 f850 	bl	8007840 <HAL_GPIO_ReadPin>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d115      	bne.n	80017d2 <menu+0x1296>
 80017a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001958 <menu+0x141c>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	f083 0301 	eor.w	r3, r3, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00e      	beq.n	80017d2 <menu+0x1296>
			kapiAcTipi = kapiAcTipi - 1;
 80017b4:	4b69      	ldr	r3, [pc, #420]	@ (800195c <menu+0x1420>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b67      	ldr	r3, [pc, #412]	@ (800195c <menu+0x1420>)
 80017be:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80017c0:	4b66      	ldr	r3, [pc, #408]	@ (800195c <menu+0x1420>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <menu+0x1292>
		   		kapiAcTipi = 1;
 80017c8:	4b64      	ldr	r3, [pc, #400]	@ (800195c <menu+0x1420>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80017ce:	f002 f853 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80017d2:	2108      	movs	r1, #8
 80017d4:	485f      	ldr	r0, [pc, #380]	@ (8001954 <menu+0x1418>)
 80017d6:	f006 f833 	bl	8007840 <HAL_GPIO_ReadPin>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d10e      	bne.n	80017fe <menu+0x12c2>
 80017e0:	4b5d      	ldr	r3, [pc, #372]	@ (8001958 <menu+0x141c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	f083 0301 	eor.w	r3, r3, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <menu+0x12c2>
			eepromData[36] = kapiAcTipi;
 80017ee:	4b5b      	ldr	r3, [pc, #364]	@ (800195c <menu+0x1420>)
 80017f0:	781a      	ldrb	r2, [r3, #0]
 80017f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001960 <menu+0x1424>)
 80017f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 80017f8:	4b5a      	ldr	r3, [pc, #360]	@ (8001964 <menu+0x1428>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80017fe:	4b5a      	ldr	r3, [pc, #360]	@ (8001968 <menu+0x142c>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b09      	cmp	r3, #9
 8001804:	f040 808d 	bne.w	8001922 <menu+0x13e6>
		if(dilSecim == 0){
 8001808:	4b50      	ldr	r3, [pc, #320]	@ (800194c <menu+0x1410>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d105      	bne.n	800181c <menu+0x12e0>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8001810:	4a56      	ldr	r2, [pc, #344]	@ (800196c <menu+0x1430>)
 8001812:	2101      	movs	r1, #1
 8001814:	2001      	movs	r0, #1
 8001816:	f7fe fe4a 	bl	80004ae <lcd_print>
 800181a:	e008      	b.n	800182e <menu+0x12f2>
		} else if(dilSecim == 1) {
 800181c:	4b4b      	ldr	r3, [pc, #300]	@ (800194c <menu+0x1410>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d104      	bne.n	800182e <menu+0x12f2>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8001824:	4a52      	ldr	r2, [pc, #328]	@ (8001970 <menu+0x1434>)
 8001826:	2101      	movs	r1, #1
 8001828:	2001      	movs	r0, #1
 800182a:	f7fe fe40 	bl	80004ae <lcd_print>
		}

		if(kapi1Tip == 0) {
 800182e:	4b51      	ldr	r3, [pc, #324]	@ (8001974 <menu+0x1438>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d105      	bne.n	8001842 <menu+0x1306>
			lcd_print(2, 1, "Prudhome        ");
 8001836:	4a50      	ldr	r2, [pc, #320]	@ (8001978 <menu+0x143c>)
 8001838:	2101      	movs	r1, #1
 800183a:	2002      	movs	r0, #2
 800183c:	f7fe fe37 	bl	80004ae <lcd_print>
 8001840:	e020      	b.n	8001884 <menu+0x1348>
		} else if(kapi1Tip == 1) {
 8001842:	4b4c      	ldr	r3, [pc, #304]	@ (8001974 <menu+0x1438>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d113      	bne.n	8001872 <menu+0x1336>
			if(dilSecim == 0){
 800184a:	4b40      	ldr	r3, [pc, #256]	@ (800194c <menu+0x1410>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d105      	bne.n	800185e <menu+0x1322>
				lcd_print(2, 1, "Buton kontrollu ");
 8001852:	4a4a      	ldr	r2, [pc, #296]	@ (800197c <menu+0x1440>)
 8001854:	2101      	movs	r1, #1
 8001856:	2002      	movs	r0, #2
 8001858:	f7fe fe29 	bl	80004ae <lcd_print>
 800185c:	e012      	b.n	8001884 <menu+0x1348>
			} else if(dilSecim == 1) {
 800185e:	4b3b      	ldr	r3, [pc, #236]	@ (800194c <menu+0x1410>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d10e      	bne.n	8001884 <menu+0x1348>
				lcd_print(2, 1, "Button cntrolled");
 8001866:	4a46      	ldr	r2, [pc, #280]	@ (8001980 <menu+0x1444>)
 8001868:	2101      	movs	r1, #1
 800186a:	2002      	movs	r0, #2
 800186c:	f7fe fe1f 	bl	80004ae <lcd_print>
 8001870:	e008      	b.n	8001884 <menu+0x1348>
			}
		} else if(kapi1Tip == 2) {
 8001872:	4b40      	ldr	r3, [pc, #256]	@ (8001974 <menu+0x1438>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d104      	bne.n	8001884 <menu+0x1348>
			lcd_print(2, 1, "Pizzato        ");
 800187a:	4a42      	ldr	r2, [pc, #264]	@ (8001984 <menu+0x1448>)
 800187c:	2101      	movs	r1, #1
 800187e:	2002      	movs	r0, #2
 8001880:	f7fe fe15 	bl	80004ae <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001884:	2102      	movs	r1, #2
 8001886:	4833      	ldr	r0, [pc, #204]	@ (8001954 <menu+0x1418>)
 8001888:	f005 ffda 	bl	8007840 <HAL_GPIO_ReadPin>
 800188c:	4603      	mov	r3, r0
 800188e:	2b01      	cmp	r3, #1
 8001890:	d115      	bne.n	80018be <menu+0x1382>
 8001892:	4b31      	ldr	r3, [pc, #196]	@ (8001958 <menu+0x141c>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	f083 0301 	eor.w	r3, r3, #1
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00e      	beq.n	80018be <menu+0x1382>
			kapi1Tip = kapi1Tip + 1;
 80018a0:	4b34      	ldr	r3, [pc, #208]	@ (8001974 <menu+0x1438>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b32      	ldr	r3, [pc, #200]	@ (8001974 <menu+0x1438>)
 80018aa:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80018ac:	4b31      	ldr	r3, [pc, #196]	@ (8001974 <menu+0x1438>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d902      	bls.n	80018ba <menu+0x137e>
				kapi1Tip = 0;
 80018b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001974 <menu+0x1438>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80018ba:	f001 ffdd 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80018be:	2104      	movs	r1, #4
 80018c0:	4824      	ldr	r0, [pc, #144]	@ (8001954 <menu+0x1418>)
 80018c2:	f005 ffbd 	bl	8007840 <HAL_GPIO_ReadPin>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d115      	bne.n	80018f8 <menu+0x13bc>
 80018cc:	4b22      	ldr	r3, [pc, #136]	@ (8001958 <menu+0x141c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	f083 0301 	eor.w	r3, r3, #1
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00e      	beq.n	80018f8 <menu+0x13bc>
			kapi1Tip = kapi1Tip - 1;
 80018da:	4b26      	ldr	r3, [pc, #152]	@ (8001974 <menu+0x1438>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	3b01      	subs	r3, #1
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4b24      	ldr	r3, [pc, #144]	@ (8001974 <menu+0x1438>)
 80018e4:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80018e6:	4b23      	ldr	r3, [pc, #140]	@ (8001974 <menu+0x1438>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d902      	bls.n	80018f4 <menu+0x13b8>
		   		kapi1Tip = 2;
 80018ee:	4b21      	ldr	r3, [pc, #132]	@ (8001974 <menu+0x1438>)
 80018f0:	2202      	movs	r2, #2
 80018f2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80018f4:	f001 ffc0 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80018f8:	2108      	movs	r1, #8
 80018fa:	4816      	ldr	r0, [pc, #88]	@ (8001954 <menu+0x1418>)
 80018fc:	f005 ffa0 	bl	8007840 <HAL_GPIO_ReadPin>
 8001900:	4603      	mov	r3, r0
 8001902:	2b01      	cmp	r3, #1
 8001904:	d10d      	bne.n	8001922 <menu+0x13e6>
 8001906:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <menu+0x141c>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	f083 0301 	eor.w	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <menu+0x13e6>
			eepromData[8] = kapi1Tip;
 8001914:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <menu+0x1438>)
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <menu+0x1424>)
 800191a:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800191c:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <menu+0x1428>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8001922:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <menu+0x142c>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b0a      	cmp	r3, #10
 8001928:	f040 80a3 	bne.w	8001a72 <menu+0x1536>
		if(dilSecim == 0) {
 800192c:	4b07      	ldr	r3, [pc, #28]	@ (800194c <menu+0x1410>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d12d      	bne.n	8001990 <menu+0x1454>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8001934:	4a14      	ldr	r2, [pc, #80]	@ (8001988 <menu+0x144c>)
 8001936:	2101      	movs	r1, #1
 8001938:	2001      	movs	r0, #1
 800193a:	f7fe fdb8 	bl	80004ae <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800193e:	4a13      	ldr	r2, [pc, #76]	@ (800198c <menu+0x1450>)
 8001940:	2101      	movs	r1, #1
 8001942:	2002      	movs	r0, #2
 8001944:	f7fe fdb3 	bl	80004ae <lcd_print>
 8001948:	e030      	b.n	80019ac <menu+0x1470>
 800194a:	bf00      	nop
 800194c:	20000344 	.word	0x20000344
 8001950:	0800c140 	.word	0x0800c140
 8001954:	40010800 	.word	0x40010800
 8001958:	20000352 	.word	0x20000352
 800195c:	20000330 	.word	0x20000330
 8001960:	200002b8 	.word	0x200002b8
 8001964:	2000034f 	.word	0x2000034f
 8001968:	20000324 	.word	0x20000324
 800196c:	0800c154 	.word	0x0800c154
 8001970:	0800c168 	.word	0x0800c168
 8001974:	2000032d 	.word	0x2000032d
 8001978:	0800c17c 	.word	0x0800c17c
 800197c:	0800c190 	.word	0x0800c190
 8001980:	0800c1a4 	.word	0x0800c1a4
 8001984:	0800c1b8 	.word	0x0800c1b8
 8001988:	0800c1c8 	.word	0x0800c1c8
 800198c:	0800c1dc 	.word	0x0800c1dc
		} else if(dilSecim == 1) {
 8001990:	4b8b      	ldr	r3, [pc, #556]	@ (8001bc0 <menu+0x1684>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d109      	bne.n	80019ac <menu+0x1470>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8001998:	4a8a      	ldr	r2, [pc, #552]	@ (8001bc4 <menu+0x1688>)
 800199a:	2101      	movs	r1, #1
 800199c:	2001      	movs	r0, #1
 800199e:	f7fe fd86 	bl	80004ae <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80019a2:	4a89      	ldr	r2, [pc, #548]	@ (8001bc8 <menu+0x168c>)
 80019a4:	2101      	movs	r1, #1
 80019a6:	2002      	movs	r0, #2
 80019a8:	f7fe fd81 	bl	80004ae <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80019ac:	4b87      	ldr	r3, [pc, #540]	@ (8001bcc <menu+0x1690>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	220a      	movs	r2, #10
 80019b2:	4987      	ldr	r1, [pc, #540]	@ (8001bd0 <menu+0x1694>)
 80019b4:	4618      	mov	r0, r3
 80019b6:	f00a f901 	bl	800bbbc <itoa>
		lcd_print(2,16,snum);
 80019ba:	4a85      	ldr	r2, [pc, #532]	@ (8001bd0 <menu+0x1694>)
 80019bc:	2110      	movs	r1, #16
 80019be:	2002      	movs	r0, #2
 80019c0:	f7fe fd75 	bl	80004ae <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80019c4:	2102      	movs	r1, #2
 80019c6:	4883      	ldr	r0, [pc, #524]	@ (8001bd4 <menu+0x1698>)
 80019c8:	f005 ff3a 	bl	8007840 <HAL_GPIO_ReadPin>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d119      	bne.n	8001a06 <menu+0x14ca>
 80019d2:	4b81      	ldr	r3, [pc, #516]	@ (8001bd8 <menu+0x169c>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	f083 0301 	eor.w	r3, r3, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d012      	beq.n	8001a06 <menu+0x14ca>
 80019e0:	4b7e      	ldr	r3, [pc, #504]	@ (8001bdc <menu+0x16a0>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10e      	bne.n	8001a06 <menu+0x14ca>
			kapi1AcSure = kapi1AcSure + 1;
 80019e8:	4b78      	ldr	r3, [pc, #480]	@ (8001bcc <menu+0x1690>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	3301      	adds	r3, #1
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	4b76      	ldr	r3, [pc, #472]	@ (8001bcc <menu+0x1690>)
 80019f2:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80019f4:	4b75      	ldr	r3, [pc, #468]	@ (8001bcc <menu+0x1690>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d902      	bls.n	8001a02 <menu+0x14c6>
				kapi1AcSure = 0;
 80019fc:	4b73      	ldr	r3, [pc, #460]	@ (8001bcc <menu+0x1690>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a02:	f001 ff39 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001a06:	2104      	movs	r1, #4
 8001a08:	4872      	ldr	r0, [pc, #456]	@ (8001bd4 <menu+0x1698>)
 8001a0a:	f005 ff19 	bl	8007840 <HAL_GPIO_ReadPin>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d119      	bne.n	8001a48 <menu+0x150c>
 8001a14:	4b70      	ldr	r3, [pc, #448]	@ (8001bd8 <menu+0x169c>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	f083 0301 	eor.w	r3, r3, #1
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d012      	beq.n	8001a48 <menu+0x150c>
 8001a22:	4b6e      	ldr	r3, [pc, #440]	@ (8001bdc <menu+0x16a0>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10e      	bne.n	8001a48 <menu+0x150c>
			kapi1AcSure = kapi1AcSure - 1;
 8001a2a:	4b68      	ldr	r3, [pc, #416]	@ (8001bcc <menu+0x1690>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b66      	ldr	r3, [pc, #408]	@ (8001bcc <menu+0x1690>)
 8001a34:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8001a36:	4b65      	ldr	r3, [pc, #404]	@ (8001bcc <menu+0x1690>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d902      	bls.n	8001a44 <menu+0x1508>
		   		kapi1AcSure = 5;
 8001a3e:	4b63      	ldr	r3, [pc, #396]	@ (8001bcc <menu+0x1690>)
 8001a40:	2205      	movs	r2, #5
 8001a42:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001a44:	f001 ff18 	bl	8003878 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a48:	2108      	movs	r1, #8
 8001a4a:	4862      	ldr	r0, [pc, #392]	@ (8001bd4 <menu+0x1698>)
 8001a4c:	f005 fef8 	bl	8007840 <HAL_GPIO_ReadPin>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d10d      	bne.n	8001a72 <menu+0x1536>
 8001a56:	4b60      	ldr	r3, [pc, #384]	@ (8001bd8 <menu+0x169c>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	f083 0301 	eor.w	r3, r3, #1
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <menu+0x1536>
			eepromData[9] = kapi1AcSure;
 8001a64:	4b59      	ldr	r3, [pc, #356]	@ (8001bcc <menu+0x1690>)
 8001a66:	781a      	ldrb	r2, [r3, #0]
 8001a68:	4b5d      	ldr	r3, [pc, #372]	@ (8001be0 <menu+0x16a4>)
 8001a6a:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8001a6c:	4b5d      	ldr	r3, [pc, #372]	@ (8001be4 <menu+0x16a8>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8001a72:	4b5d      	ldr	r3, [pc, #372]	@ (8001be8 <menu+0x16ac>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b0b      	cmp	r3, #11
 8001a78:	f040 808d 	bne.w	8001b96 <menu+0x165a>
		if(dilSecim == 0) {
 8001a7c:	4b50      	ldr	r3, [pc, #320]	@ (8001bc0 <menu+0x1684>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d105      	bne.n	8001a90 <menu+0x1554>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8001a84:	4a59      	ldr	r2, [pc, #356]	@ (8001bec <menu+0x16b0>)
 8001a86:	2101      	movs	r1, #1
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f7fe fd10 	bl	80004ae <lcd_print>
 8001a8e:	e008      	b.n	8001aa2 <menu+0x1566>
		} else if(dilSecim == 1) {
 8001a90:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc0 <menu+0x1684>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d104      	bne.n	8001aa2 <menu+0x1566>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8001a98:	4a55      	ldr	r2, [pc, #340]	@ (8001bf0 <menu+0x16b4>)
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f7fe fd06 	bl	80004ae <lcd_print>
		}

		if(kapi2Tip == 0) {
 8001aa2:	4b54      	ldr	r3, [pc, #336]	@ (8001bf4 <menu+0x16b8>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d105      	bne.n	8001ab6 <menu+0x157a>
			lcd_print(2, 1, "Prudhome        ");
 8001aaa:	4a53      	ldr	r2, [pc, #332]	@ (8001bf8 <menu+0x16bc>)
 8001aac:	2101      	movs	r1, #1
 8001aae:	2002      	movs	r0, #2
 8001ab0:	f7fe fcfd 	bl	80004ae <lcd_print>
 8001ab4:	e020      	b.n	8001af8 <menu+0x15bc>
		} else if(kapi2Tip == 1) {
 8001ab6:	4b4f      	ldr	r3, [pc, #316]	@ (8001bf4 <menu+0x16b8>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d113      	bne.n	8001ae6 <menu+0x15aa>
			if(dilSecim == 0) {
 8001abe:	4b40      	ldr	r3, [pc, #256]	@ (8001bc0 <menu+0x1684>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d105      	bne.n	8001ad2 <menu+0x1596>
				lcd_print(2, 1, "Buton kontrollu ");
 8001ac6:	4a4d      	ldr	r2, [pc, #308]	@ (8001bfc <menu+0x16c0>)
 8001ac8:	2101      	movs	r1, #1
 8001aca:	2002      	movs	r0, #2
 8001acc:	f7fe fcef 	bl	80004ae <lcd_print>
 8001ad0:	e012      	b.n	8001af8 <menu+0x15bc>
			} else if(dilSecim == 1) {
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc0 <menu+0x1684>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d10e      	bne.n	8001af8 <menu+0x15bc>
				lcd_print(2, 1, "Button cntrolled");
 8001ada:	4a49      	ldr	r2, [pc, #292]	@ (8001c00 <menu+0x16c4>)
 8001adc:	2101      	movs	r1, #1
 8001ade:	2002      	movs	r0, #2
 8001ae0:	f7fe fce5 	bl	80004ae <lcd_print>
 8001ae4:	e008      	b.n	8001af8 <menu+0x15bc>
			}
		} else if(kapi2Tip == 2) {
 8001ae6:	4b43      	ldr	r3, [pc, #268]	@ (8001bf4 <menu+0x16b8>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d104      	bne.n	8001af8 <menu+0x15bc>
			lcd_print(2, 1, "Pizzato        ");
 8001aee:	4a45      	ldr	r2, [pc, #276]	@ (8001c04 <menu+0x16c8>)
 8001af0:	2101      	movs	r1, #1
 8001af2:	2002      	movs	r0, #2
 8001af4:	f7fe fcdb 	bl	80004ae <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001af8:	2102      	movs	r1, #2
 8001afa:	4836      	ldr	r0, [pc, #216]	@ (8001bd4 <menu+0x1698>)
 8001afc:	f005 fea0 	bl	8007840 <HAL_GPIO_ReadPin>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d115      	bne.n	8001b32 <menu+0x15f6>
 8001b06:	4b34      	ldr	r3, [pc, #208]	@ (8001bd8 <menu+0x169c>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	f083 0301 	eor.w	r3, r3, #1
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00e      	beq.n	8001b32 <menu+0x15f6>
			kapi2Tip = kapi2Tip + 1;
 8001b14:	4b37      	ldr	r3, [pc, #220]	@ (8001bf4 <menu+0x16b8>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	4b35      	ldr	r3, [pc, #212]	@ (8001bf4 <menu+0x16b8>)
 8001b1e:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8001b20:	4b34      	ldr	r3, [pc, #208]	@ (8001bf4 <menu+0x16b8>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d902      	bls.n	8001b2e <menu+0x15f2>
				kapi2Tip = 0;
 8001b28:	4b32      	ldr	r3, [pc, #200]	@ (8001bf4 <menu+0x16b8>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b2e:	f001 fea3 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b32:	2104      	movs	r1, #4
 8001b34:	4827      	ldr	r0, [pc, #156]	@ (8001bd4 <menu+0x1698>)
 8001b36:	f005 fe83 	bl	8007840 <HAL_GPIO_ReadPin>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d115      	bne.n	8001b6c <menu+0x1630>
 8001b40:	4b25      	ldr	r3, [pc, #148]	@ (8001bd8 <menu+0x169c>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	f083 0301 	eor.w	r3, r3, #1
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00e      	beq.n	8001b6c <menu+0x1630>
			kapi2Tip = kapi2Tip - 1;
 8001b4e:	4b29      	ldr	r3, [pc, #164]	@ (8001bf4 <menu+0x16b8>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b27      	ldr	r3, [pc, #156]	@ (8001bf4 <menu+0x16b8>)
 8001b58:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8001b5a:	4b26      	ldr	r3, [pc, #152]	@ (8001bf4 <menu+0x16b8>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d902      	bls.n	8001b68 <menu+0x162c>
		   		kapi2Tip = 2;
 8001b62:	4b24      	ldr	r3, [pc, #144]	@ (8001bf4 <menu+0x16b8>)
 8001b64:	2202      	movs	r2, #2
 8001b66:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b68:	f001 fe86 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b6c:	2108      	movs	r1, #8
 8001b6e:	4819      	ldr	r0, [pc, #100]	@ (8001bd4 <menu+0x1698>)
 8001b70:	f005 fe66 	bl	8007840 <HAL_GPIO_ReadPin>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d10d      	bne.n	8001b96 <menu+0x165a>
 8001b7a:	4b17      	ldr	r3, [pc, #92]	@ (8001bd8 <menu+0x169c>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	f083 0301 	eor.w	r3, r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <menu+0x165a>
			eepromData[10] = kapi2Tip;
 8001b88:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <menu+0x16b8>)
 8001b8a:	781a      	ldrb	r2, [r3, #0]
 8001b8c:	4b14      	ldr	r3, [pc, #80]	@ (8001be0 <menu+0x16a4>)
 8001b8e:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8001b90:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <menu+0x16a8>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8001b96:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <menu+0x16ac>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b0c      	cmp	r3, #12
 8001b9c:	f040 80a9 	bne.w	8001cf2 <menu+0x17b6>
		if(dilSecim == 0) {
 8001ba0:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <menu+0x1684>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d133      	bne.n	8001c10 <menu+0x16d4>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8001ba8:	4a17      	ldr	r2, [pc, #92]	@ (8001c08 <menu+0x16cc>)
 8001baa:	2101      	movs	r1, #1
 8001bac:	2001      	movs	r0, #1
 8001bae:	f7fe fc7e 	bl	80004ae <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001bb2:	4a16      	ldr	r2, [pc, #88]	@ (8001c0c <menu+0x16d0>)
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	f7fe fc79 	bl	80004ae <lcd_print>
 8001bbc:	e036      	b.n	8001c2c <menu+0x16f0>
 8001bbe:	bf00      	nop
 8001bc0:	20000344 	.word	0x20000344
 8001bc4:	0800c1ec 	.word	0x0800c1ec
 8001bc8:	0800c200 	.word	0x0800c200
 8001bcc:	2000033d 	.word	0x2000033d
 8001bd0:	200002f8 	.word	0x200002f8
 8001bd4:	40010800 	.word	0x40010800
 8001bd8:	20000352 	.word	0x20000352
 8001bdc:	2000032d 	.word	0x2000032d
 8001be0:	200002b8 	.word	0x200002b8
 8001be4:	2000034f 	.word	0x2000034f
 8001be8:	20000324 	.word	0x20000324
 8001bec:	0800c210 	.word	0x0800c210
 8001bf0:	0800c224 	.word	0x0800c224
 8001bf4:	2000032e 	.word	0x2000032e
 8001bf8:	0800c17c 	.word	0x0800c17c
 8001bfc:	0800c190 	.word	0x0800c190
 8001c00:	0800c1a4 	.word	0x0800c1a4
 8001c04:	0800c1b8 	.word	0x0800c1b8
 8001c08:	0800c238 	.word	0x0800c238
 8001c0c:	0800c1dc 	.word	0x0800c1dc
		} else if(dilSecim == 1) {
 8001c10:	4b99      	ldr	r3, [pc, #612]	@ (8001e78 <menu+0x193c>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d109      	bne.n	8001c2c <menu+0x16f0>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8001c18:	4a98      	ldr	r2, [pc, #608]	@ (8001e7c <menu+0x1940>)
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7fe fc46 	bl	80004ae <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001c22:	4a97      	ldr	r2, [pc, #604]	@ (8001e80 <menu+0x1944>)
 8001c24:	2101      	movs	r1, #1
 8001c26:	2002      	movs	r0, #2
 8001c28:	f7fe fc41 	bl	80004ae <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8001c2c:	4b95      	ldr	r3, [pc, #596]	@ (8001e84 <menu+0x1948>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	220a      	movs	r2, #10
 8001c32:	4995      	ldr	r1, [pc, #596]	@ (8001e88 <menu+0x194c>)
 8001c34:	4618      	mov	r0, r3
 8001c36:	f009 ffc1 	bl	800bbbc <itoa>
		lcd_print(2,16,snum);
 8001c3a:	4a93      	ldr	r2, [pc, #588]	@ (8001e88 <menu+0x194c>)
 8001c3c:	2110      	movs	r1, #16
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f7fe fc35 	bl	80004ae <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001c44:	2102      	movs	r1, #2
 8001c46:	4891      	ldr	r0, [pc, #580]	@ (8001e8c <menu+0x1950>)
 8001c48:	f005 fdfa 	bl	8007840 <HAL_GPIO_ReadPin>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d119      	bne.n	8001c86 <menu+0x174a>
 8001c52:	4b8f      	ldr	r3, [pc, #572]	@ (8001e90 <menu+0x1954>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	f083 0301 	eor.w	r3, r3, #1
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d012      	beq.n	8001c86 <menu+0x174a>
 8001c60:	4b8c      	ldr	r3, [pc, #560]	@ (8001e94 <menu+0x1958>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10e      	bne.n	8001c86 <menu+0x174a>
			kapi2AcSure = kapi2AcSure + 1;
 8001c68:	4b86      	ldr	r3, [pc, #536]	@ (8001e84 <menu+0x1948>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	4b84      	ldr	r3, [pc, #528]	@ (8001e84 <menu+0x1948>)
 8001c72:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8001c74:	4b83      	ldr	r3, [pc, #524]	@ (8001e84 <menu+0x1948>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b05      	cmp	r3, #5
 8001c7a:	d902      	bls.n	8001c82 <menu+0x1746>
				kapi2AcSure = 0;
 8001c7c:	4b81      	ldr	r3, [pc, #516]	@ (8001e84 <menu+0x1948>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c82:	f001 fdf9 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001c86:	2104      	movs	r1, #4
 8001c88:	4880      	ldr	r0, [pc, #512]	@ (8001e8c <menu+0x1950>)
 8001c8a:	f005 fdd9 	bl	8007840 <HAL_GPIO_ReadPin>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d119      	bne.n	8001cc8 <menu+0x178c>
 8001c94:	4b7e      	ldr	r3, [pc, #504]	@ (8001e90 <menu+0x1954>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	f083 0301 	eor.w	r3, r3, #1
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d012      	beq.n	8001cc8 <menu+0x178c>
 8001ca2:	4b7c      	ldr	r3, [pc, #496]	@ (8001e94 <menu+0x1958>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10e      	bne.n	8001cc8 <menu+0x178c>
			kapi2AcSure = kapi2AcSure - 1;
 8001caa:	4b76      	ldr	r3, [pc, #472]	@ (8001e84 <menu+0x1948>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4b74      	ldr	r3, [pc, #464]	@ (8001e84 <menu+0x1948>)
 8001cb4:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8001cb6:	4b73      	ldr	r3, [pc, #460]	@ (8001e84 <menu+0x1948>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d902      	bls.n	8001cc4 <menu+0x1788>
		   		kapi2AcSure = 5;
 8001cbe:	4b71      	ldr	r3, [pc, #452]	@ (8001e84 <menu+0x1948>)
 8001cc0:	2205      	movs	r2, #5
 8001cc2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001cc4:	f001 fdd8 	bl	8003878 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cc8:	2108      	movs	r1, #8
 8001cca:	4870      	ldr	r0, [pc, #448]	@ (8001e8c <menu+0x1950>)
 8001ccc:	f005 fdb8 	bl	8007840 <HAL_GPIO_ReadPin>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d10d      	bne.n	8001cf2 <menu+0x17b6>
 8001cd6:	4b6e      	ldr	r3, [pc, #440]	@ (8001e90 <menu+0x1954>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	f083 0301 	eor.w	r3, r3, #1
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <menu+0x17b6>
			eepromData[11] = kapi2AcSure;
 8001ce4:	4b67      	ldr	r3, [pc, #412]	@ (8001e84 <menu+0x1948>)
 8001ce6:	781a      	ldrb	r2, [r3, #0]
 8001ce8:	4b6b      	ldr	r3, [pc, #428]	@ (8001e98 <menu+0x195c>)
 8001cea:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8001cec:	4b6b      	ldr	r3, [pc, #428]	@ (8001e9c <menu+0x1960>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8001cf2:	4b6b      	ldr	r3, [pc, #428]	@ (8001ea0 <menu+0x1964>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b0d      	cmp	r3, #13
 8001cf8:	f040 808d 	bne.w	8001e16 <menu+0x18da>
		if(dilSecim == 0) {
 8001cfc:	4b5e      	ldr	r3, [pc, #376]	@ (8001e78 <menu+0x193c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d105      	bne.n	8001d10 <menu+0x17d4>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8001d04:	4a67      	ldr	r2, [pc, #412]	@ (8001ea4 <menu+0x1968>)
 8001d06:	2101      	movs	r1, #1
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f7fe fbd0 	bl	80004ae <lcd_print>
 8001d0e:	e008      	b.n	8001d22 <menu+0x17e6>
		} else if(dilSecim == 1){
 8001d10:	4b59      	ldr	r3, [pc, #356]	@ (8001e78 <menu+0x193c>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d104      	bne.n	8001d22 <menu+0x17e6>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8001d18:	4a63      	ldr	r2, [pc, #396]	@ (8001ea8 <menu+0x196c>)
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	f7fe fbc6 	bl	80004ae <lcd_print>
		}

		if(kapitablaTip == 0) {
 8001d22:	4b62      	ldr	r3, [pc, #392]	@ (8001eac <menu+0x1970>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d105      	bne.n	8001d36 <menu+0x17fa>
			lcd_print(2, 1, "Prudhome        ");
 8001d2a:	4a61      	ldr	r2, [pc, #388]	@ (8001eb0 <menu+0x1974>)
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	2002      	movs	r0, #2
 8001d30:	f7fe fbbd 	bl	80004ae <lcd_print>
 8001d34:	e020      	b.n	8001d78 <menu+0x183c>
		} else if(kapitablaTip == 1) {
 8001d36:	4b5d      	ldr	r3, [pc, #372]	@ (8001eac <menu+0x1970>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d113      	bne.n	8001d66 <menu+0x182a>
			if(dilSecim == 0) {
 8001d3e:	4b4e      	ldr	r3, [pc, #312]	@ (8001e78 <menu+0x193c>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d105      	bne.n	8001d52 <menu+0x1816>
				lcd_print(2, 1, "Buton kontrollu ");
 8001d46:	4a5b      	ldr	r2, [pc, #364]	@ (8001eb4 <menu+0x1978>)
 8001d48:	2101      	movs	r1, #1
 8001d4a:	2002      	movs	r0, #2
 8001d4c:	f7fe fbaf 	bl	80004ae <lcd_print>
 8001d50:	e012      	b.n	8001d78 <menu+0x183c>
			} else if(dilSecim == 1) {
 8001d52:	4b49      	ldr	r3, [pc, #292]	@ (8001e78 <menu+0x193c>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d10e      	bne.n	8001d78 <menu+0x183c>
				lcd_print(2, 1, "Button cntrolled");
 8001d5a:	4a57      	ldr	r2, [pc, #348]	@ (8001eb8 <menu+0x197c>)
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	2002      	movs	r0, #2
 8001d60:	f7fe fba5 	bl	80004ae <lcd_print>
 8001d64:	e008      	b.n	8001d78 <menu+0x183c>
			}
		} else if(kapitablaTip == 2) {
 8001d66:	4b51      	ldr	r3, [pc, #324]	@ (8001eac <menu+0x1970>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d104      	bne.n	8001d78 <menu+0x183c>
			lcd_print(2, 1, "Pizzato        ");
 8001d6e:	4a53      	ldr	r2, [pc, #332]	@ (8001ebc <menu+0x1980>)
 8001d70:	2101      	movs	r1, #1
 8001d72:	2002      	movs	r0, #2
 8001d74:	f7fe fb9b 	bl	80004ae <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d78:	2102      	movs	r1, #2
 8001d7a:	4844      	ldr	r0, [pc, #272]	@ (8001e8c <menu+0x1950>)
 8001d7c:	f005 fd60 	bl	8007840 <HAL_GPIO_ReadPin>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d115      	bne.n	8001db2 <menu+0x1876>
 8001d86:	4b42      	ldr	r3, [pc, #264]	@ (8001e90 <menu+0x1954>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	f083 0301 	eor.w	r3, r3, #1
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00e      	beq.n	8001db2 <menu+0x1876>
			kapitablaTip = kapitablaTip + 1;
 8001d94:	4b45      	ldr	r3, [pc, #276]	@ (8001eac <menu+0x1970>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	4b43      	ldr	r3, [pc, #268]	@ (8001eac <menu+0x1970>)
 8001d9e:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8001da0:	4b42      	ldr	r3, [pc, #264]	@ (8001eac <menu+0x1970>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d902      	bls.n	8001dae <menu+0x1872>
				kapitablaTip = 0;
 8001da8:	4b40      	ldr	r3, [pc, #256]	@ (8001eac <menu+0x1970>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dae:	f001 fd63 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001db2:	2104      	movs	r1, #4
 8001db4:	4835      	ldr	r0, [pc, #212]	@ (8001e8c <menu+0x1950>)
 8001db6:	f005 fd43 	bl	8007840 <HAL_GPIO_ReadPin>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d115      	bne.n	8001dec <menu+0x18b0>
 8001dc0:	4b33      	ldr	r3, [pc, #204]	@ (8001e90 <menu+0x1954>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	f083 0301 	eor.w	r3, r3, #1
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00e      	beq.n	8001dec <menu+0x18b0>
			kapitablaTip = kapitablaTip - 1;
 8001dce:	4b37      	ldr	r3, [pc, #220]	@ (8001eac <menu+0x1970>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4b35      	ldr	r3, [pc, #212]	@ (8001eac <menu+0x1970>)
 8001dd8:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8001dda:	4b34      	ldr	r3, [pc, #208]	@ (8001eac <menu+0x1970>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d902      	bls.n	8001de8 <menu+0x18ac>
		   		kapitablaTip = 2;
 8001de2:	4b32      	ldr	r3, [pc, #200]	@ (8001eac <menu+0x1970>)
 8001de4:	2202      	movs	r2, #2
 8001de6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001de8:	f001 fd46 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dec:	2108      	movs	r1, #8
 8001dee:	4827      	ldr	r0, [pc, #156]	@ (8001e8c <menu+0x1950>)
 8001df0:	f005 fd26 	bl	8007840 <HAL_GPIO_ReadPin>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d10d      	bne.n	8001e16 <menu+0x18da>
 8001dfa:	4b25      	ldr	r3, [pc, #148]	@ (8001e90 <menu+0x1954>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	f083 0301 	eor.w	r3, r3, #1
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <menu+0x18da>
			eepromData[12] = kapitablaTip;
 8001e08:	4b28      	ldr	r3, [pc, #160]	@ (8001eac <menu+0x1970>)
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	4b22      	ldr	r3, [pc, #136]	@ (8001e98 <menu+0x195c>)
 8001e0e:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8001e10:	4b22      	ldr	r3, [pc, #136]	@ (8001e9c <menu+0x1960>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8001e16:	4b22      	ldr	r3, [pc, #136]	@ (8001ea0 <menu+0x1964>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b0e      	cmp	r3, #14
 8001e1c:	f040 80fe 	bne.w	800201c <menu+0x1ae0>
		if(dilSecim == 0) {
 8001e20:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <menu+0x193c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d105      	bne.n	8001e34 <menu+0x18f8>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8001e28:	4a25      	ldr	r2, [pc, #148]	@ (8001ec0 <menu+0x1984>)
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f7fe fb3e 	bl	80004ae <lcd_print>
 8001e32:	e008      	b.n	8001e46 <menu+0x190a>
		} else if(dilSecim == 1) {
 8001e34:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <menu+0x193c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d104      	bne.n	8001e46 <menu+0x190a>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8001e3c:	4a21      	ldr	r2, [pc, #132]	@ (8001ec4 <menu+0x1988>)
 8001e3e:	2101      	movs	r1, #1
 8001e40:	2001      	movs	r0, #1
 8001e42:	f7fe fb34 	bl	80004ae <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8001e46:	4b20      	ldr	r3, [pc, #128]	@ (8001ec8 <menu+0x198c>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d142      	bne.n	8001ed4 <menu+0x1998>
			if(dilSecim == 0){
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <menu+0x193c>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d105      	bne.n	8001e62 <menu+0x1926>
				lcd_print(2, 1, "1. Katta ac    ");
 8001e56:	4a1d      	ldr	r2, [pc, #116]	@ (8001ecc <menu+0x1990>)
 8001e58:	2101      	movs	r1, #1
 8001e5a:	2002      	movs	r0, #2
 8001e5c:	f7fe fb27 	bl	80004ae <lcd_print>
 8001e60:	e07d      	b.n	8001f5e <menu+0x1a22>
			} else if(dilSecim == 1) {
 8001e62:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <menu+0x193c>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d179      	bne.n	8001f5e <menu+0x1a22>
				lcd_print(2, 1, "1. Floor open  ");
 8001e6a:	4a19      	ldr	r2, [pc, #100]	@ (8001ed0 <menu+0x1994>)
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	2002      	movs	r0, #2
 8001e70:	f7fe fb1d 	bl	80004ae <lcd_print>
 8001e74:	e073      	b.n	8001f5e <menu+0x1a22>
 8001e76:	bf00      	nop
 8001e78:	20000344 	.word	0x20000344
 8001e7c:	0800c24c 	.word	0x0800c24c
 8001e80:	0800c200 	.word	0x0800c200
 8001e84:	2000033e 	.word	0x2000033e
 8001e88:	200002f8 	.word	0x200002f8
 8001e8c:	40010800 	.word	0x40010800
 8001e90:	20000352 	.word	0x20000352
 8001e94:	2000032e 	.word	0x2000032e
 8001e98:	200002b8 	.word	0x200002b8
 8001e9c:	2000034f 	.word	0x2000034f
 8001ea0:	20000324 	.word	0x20000324
 8001ea4:	0800c260 	.word	0x0800c260
 8001ea8:	0800c274 	.word	0x0800c274
 8001eac:	2000032f 	.word	0x2000032f
 8001eb0:	0800c17c 	.word	0x0800c17c
 8001eb4:	0800c190 	.word	0x0800c190
 8001eb8:	0800c1a4 	.word	0x0800c1a4
 8001ebc:	0800c1b8 	.word	0x0800c1b8
 8001ec0:	0800c288 	.word	0x0800c288
 8001ec4:	0800c29c 	.word	0x0800c29c
 8001ec8:	20000331 	.word	0x20000331
 8001ecc:	0800c2b0 	.word	0x0800c2b0
 8001ed0:	0800c2c0 	.word	0x0800c2c0
			}
		} else if(kapiTablaAcKonum == 1) {
 8001ed4:	4b9b      	ldr	r3, [pc, #620]	@ (8002144 <menu+0x1c08>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d112      	bne.n	8001f02 <menu+0x19c6>
			if(dilSecim == 0){
 8001edc:	4b9a      	ldr	r3, [pc, #616]	@ (8002148 <menu+0x1c0c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d104      	bne.n	8001eee <menu+0x19b2>
				lcd_print(2, 1, "2. Katta ac    ");
 8001ee4:	4a99      	ldr	r2, [pc, #612]	@ (800214c <menu+0x1c10>)
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	2002      	movs	r0, #2
 8001eea:	f7fe fae0 	bl	80004ae <lcd_print>
			}
			if(dilSecim == 1){
 8001eee:	4b96      	ldr	r3, [pc, #600]	@ (8002148 <menu+0x1c0c>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d133      	bne.n	8001f5e <menu+0x1a22>
				lcd_print(2, 1, "2. Floor open  ");
 8001ef6:	4a96      	ldr	r2, [pc, #600]	@ (8002150 <menu+0x1c14>)
 8001ef8:	2101      	movs	r1, #1
 8001efa:	2002      	movs	r0, #2
 8001efc:	f7fe fad7 	bl	80004ae <lcd_print>
 8001f00:	e02d      	b.n	8001f5e <menu+0x1a22>
			}
		} else if(kapiTablaAcKonum == 2) {
 8001f02:	4b90      	ldr	r3, [pc, #576]	@ (8002144 <menu+0x1c08>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d113      	bne.n	8001f32 <menu+0x19f6>
			if(dilSecim == 0){
 8001f0a:	4b8f      	ldr	r3, [pc, #572]	@ (8002148 <menu+0x1c0c>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d105      	bne.n	8001f1e <menu+0x19e2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8001f12:	4a90      	ldr	r2, [pc, #576]	@ (8002154 <menu+0x1c18>)
 8001f14:	2101      	movs	r1, #1
 8001f16:	2002      	movs	r0, #2
 8001f18:	f7fe fac9 	bl	80004ae <lcd_print>
 8001f1c:	e01f      	b.n	8001f5e <menu+0x1a22>
			} else if(dilSecim == 1) {
 8001f1e:	4b8a      	ldr	r3, [pc, #552]	@ (8002148 <menu+0x1c0c>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d11b      	bne.n	8001f5e <menu+0x1a22>
				lcd_print(2, 1, "1.+2. Floor open");
 8001f26:	4a8c      	ldr	r2, [pc, #560]	@ (8002158 <menu+0x1c1c>)
 8001f28:	2101      	movs	r1, #1
 8001f2a:	2002      	movs	r0, #2
 8001f2c:	f7fe fabf 	bl	80004ae <lcd_print>
 8001f30:	e015      	b.n	8001f5e <menu+0x1a22>
			}
		} else if(kapiTablaAcKonum == 3) {
 8001f32:	4b84      	ldr	r3, [pc, #528]	@ (8002144 <menu+0x1c08>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d111      	bne.n	8001f5e <menu+0x1a22>
			if(dilSecim == 0) {
 8001f3a:	4b83      	ldr	r3, [pc, #524]	@ (8002148 <menu+0x1c0c>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d104      	bne.n	8001f4c <menu+0x1a10>
				lcd_print(2, 1, "Pasif           ");
 8001f42:	4a86      	ldr	r2, [pc, #536]	@ (800215c <menu+0x1c20>)
 8001f44:	2101      	movs	r1, #1
 8001f46:	2002      	movs	r0, #2
 8001f48:	f7fe fab1 	bl	80004ae <lcd_print>
			}
			if(dilSecim == 1) {
 8001f4c:	4b7e      	ldr	r3, [pc, #504]	@ (8002148 <menu+0x1c0c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d104      	bne.n	8001f5e <menu+0x1a22>
				lcd_print(2, 1, "Passive         ");
 8001f54:	4a82      	ldr	r2, [pc, #520]	@ (8002160 <menu+0x1c24>)
 8001f56:	2101      	movs	r1, #1
 8001f58:	2002      	movs	r0, #2
 8001f5a:	f7fe faa8 	bl	80004ae <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f5e:	2102      	movs	r1, #2
 8001f60:	4880      	ldr	r0, [pc, #512]	@ (8002164 <menu+0x1c28>)
 8001f62:	f005 fc6d 	bl	8007840 <HAL_GPIO_ReadPin>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d115      	bne.n	8001f98 <menu+0x1a5c>
 8001f6c:	4b7e      	ldr	r3, [pc, #504]	@ (8002168 <menu+0x1c2c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	f083 0301 	eor.w	r3, r3, #1
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00e      	beq.n	8001f98 <menu+0x1a5c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8001f7a:	4b72      	ldr	r3, [pc, #456]	@ (8002144 <menu+0x1c08>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4b70      	ldr	r3, [pc, #448]	@ (8002144 <menu+0x1c08>)
 8001f84:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8001f86:	4b6f      	ldr	r3, [pc, #444]	@ (8002144 <menu+0x1c08>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d902      	bls.n	8001f94 <menu+0x1a58>
				kapiTablaAcKonum = 0;
 8001f8e:	4b6d      	ldr	r3, [pc, #436]	@ (8002144 <menu+0x1c08>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f94:	f001 fc70 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f98:	2104      	movs	r1, #4
 8001f9a:	4872      	ldr	r0, [pc, #456]	@ (8002164 <menu+0x1c28>)
 8001f9c:	f005 fc50 	bl	8007840 <HAL_GPIO_ReadPin>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d115      	bne.n	8001fd2 <menu+0x1a96>
 8001fa6:	4b70      	ldr	r3, [pc, #448]	@ (8002168 <menu+0x1c2c>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	f083 0301 	eor.w	r3, r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00e      	beq.n	8001fd2 <menu+0x1a96>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8001fb4:	4b63      	ldr	r3, [pc, #396]	@ (8002144 <menu+0x1c08>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b61      	ldr	r3, [pc, #388]	@ (8002144 <menu+0x1c08>)
 8001fbe:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8001fc0:	4b60      	ldr	r3, [pc, #384]	@ (8002144 <menu+0x1c08>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d902      	bls.n	8001fce <menu+0x1a92>
		   		kapiTablaAcKonum = 2;
 8001fc8:	4b5e      	ldr	r3, [pc, #376]	@ (8002144 <menu+0x1c08>)
 8001fca:	2202      	movs	r2, #2
 8001fcc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fce:	f001 fc53 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fd2:	2108      	movs	r1, #8
 8001fd4:	4863      	ldr	r0, [pc, #396]	@ (8002164 <menu+0x1c28>)
 8001fd6:	f005 fc33 	bl	8007840 <HAL_GPIO_ReadPin>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d11d      	bne.n	800201c <menu+0x1ae0>
 8001fe0:	4b61      	ldr	r3, [pc, #388]	@ (8002168 <menu+0x1c2c>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	f083 0301 	eor.w	r3, r3, #1
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d016      	beq.n	800201c <menu+0x1ae0>
			eepromData[34] = kapiTablaAcKonum;
 8001fee:	4b55      	ldr	r3, [pc, #340]	@ (8002144 <menu+0x1c08>)
 8001ff0:	781a      	ldrb	r2, [r3, #0]
 8001ff2:	4b5e      	ldr	r3, [pc, #376]	@ (800216c <menu+0x1c30>)
 8001ff4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8001ff8:	4b52      	ldr	r3, [pc, #328]	@ (8002144 <menu+0x1c08>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <menu+0x1acc>
 8002000:	4b50      	ldr	r3, [pc, #320]	@ (8002144 <menu+0x1c08>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d106      	bne.n	8002016 <menu+0x1ada>
				altLimit = 1;
 8002008:	4b59      	ldr	r3, [pc, #356]	@ (8002170 <menu+0x1c34>)
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800200e:	4b58      	ldr	r3, [pc, #352]	@ (8002170 <menu+0x1c34>)
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	4b56      	ldr	r3, [pc, #344]	@ (800216c <menu+0x1c30>)
 8002014:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002016:	4b57      	ldr	r3, [pc, #348]	@ (8002174 <menu+0x1c38>)
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 800201c:	4b56      	ldr	r3, [pc, #344]	@ (8002178 <menu+0x1c3c>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b0f      	cmp	r3, #15
 8002022:	d17f      	bne.n	8002124 <menu+0x1be8>
		if(dilSecim == 0) {
 8002024:	4b48      	ldr	r3, [pc, #288]	@ (8002148 <menu+0x1c0c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10a      	bne.n	8002042 <menu+0x1b06>
			lcd_print(1, 1, "TABLA KP AC SURE");
 800202c:	4a53      	ldr	r2, [pc, #332]	@ (800217c <menu+0x1c40>)
 800202e:	2101      	movs	r1, #1
 8002030:	2001      	movs	r0, #1
 8002032:	f7fe fa3c 	bl	80004ae <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002036:	4a52      	ldr	r2, [pc, #328]	@ (8002180 <menu+0x1c44>)
 8002038:	2101      	movs	r1, #1
 800203a:	2002      	movs	r0, #2
 800203c:	f7fe fa37 	bl	80004ae <lcd_print>
 8002040:	e00d      	b.n	800205e <menu+0x1b22>
		} else if(dilSecim == 1) {
 8002042:	4b41      	ldr	r3, [pc, #260]	@ (8002148 <menu+0x1c0c>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d109      	bne.n	800205e <menu+0x1b22>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 800204a:	4a4e      	ldr	r2, [pc, #312]	@ (8002184 <menu+0x1c48>)
 800204c:	2101      	movs	r1, #1
 800204e:	2001      	movs	r0, #1
 8002050:	f7fe fa2d 	bl	80004ae <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002054:	4a4c      	ldr	r2, [pc, #304]	@ (8002188 <menu+0x1c4c>)
 8002056:	2101      	movs	r1, #1
 8002058:	2002      	movs	r0, #2
 800205a:	f7fe fa28 	bl	80004ae <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 800205e:	4b4b      	ldr	r3, [pc, #300]	@ (800218c <menu+0x1c50>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	220a      	movs	r2, #10
 8002064:	494a      	ldr	r1, [pc, #296]	@ (8002190 <menu+0x1c54>)
 8002066:	4618      	mov	r0, r3
 8002068:	f009 fda8 	bl	800bbbc <itoa>
		lcd_print(2,16,snum);
 800206c:	4a48      	ldr	r2, [pc, #288]	@ (8002190 <menu+0x1c54>)
 800206e:	2110      	movs	r1, #16
 8002070:	2002      	movs	r0, #2
 8002072:	f7fe fa1c 	bl	80004ae <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002076:	2102      	movs	r1, #2
 8002078:	483a      	ldr	r0, [pc, #232]	@ (8002164 <menu+0x1c28>)
 800207a:	f005 fbe1 	bl	8007840 <HAL_GPIO_ReadPin>
 800207e:	4603      	mov	r3, r0
 8002080:	2b01      	cmp	r3, #1
 8002082:	d119      	bne.n	80020b8 <menu+0x1b7c>
 8002084:	4b38      	ldr	r3, [pc, #224]	@ (8002168 <menu+0x1c2c>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	f083 0301 	eor.w	r3, r3, #1
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d012      	beq.n	80020b8 <menu+0x1b7c>
 8002092:	4b40      	ldr	r3, [pc, #256]	@ (8002194 <menu+0x1c58>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10e      	bne.n	80020b8 <menu+0x1b7c>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 800209a:	4b3c      	ldr	r3, [pc, #240]	@ (800218c <menu+0x1c50>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	3301      	adds	r3, #1
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b3a      	ldr	r3, [pc, #232]	@ (800218c <menu+0x1c50>)
 80020a4:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80020a6:	4b39      	ldr	r3, [pc, #228]	@ (800218c <menu+0x1c50>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b05      	cmp	r3, #5
 80020ac:	d902      	bls.n	80020b4 <menu+0x1b78>
				kapiTablaAcSure = 0;
 80020ae:	4b37      	ldr	r3, [pc, #220]	@ (800218c <menu+0x1c50>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020b4:	f001 fbe0 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80020b8:	2104      	movs	r1, #4
 80020ba:	482a      	ldr	r0, [pc, #168]	@ (8002164 <menu+0x1c28>)
 80020bc:	f005 fbc0 	bl	8007840 <HAL_GPIO_ReadPin>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d119      	bne.n	80020fa <menu+0x1bbe>
 80020c6:	4b28      	ldr	r3, [pc, #160]	@ (8002168 <menu+0x1c2c>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	f083 0301 	eor.w	r3, r3, #1
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d012      	beq.n	80020fa <menu+0x1bbe>
 80020d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002194 <menu+0x1c58>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10e      	bne.n	80020fa <menu+0x1bbe>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80020dc:	4b2b      	ldr	r3, [pc, #172]	@ (800218c <menu+0x1c50>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	4b29      	ldr	r3, [pc, #164]	@ (800218c <menu+0x1c50>)
 80020e6:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80020e8:	4b28      	ldr	r3, [pc, #160]	@ (800218c <menu+0x1c50>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b06      	cmp	r3, #6
 80020ee:	d902      	bls.n	80020f6 <menu+0x1bba>
		   		kapiTablaAcSure = 5;
 80020f0:	4b26      	ldr	r3, [pc, #152]	@ (800218c <menu+0x1c50>)
 80020f2:	2205      	movs	r2, #5
 80020f4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80020f6:	f001 fbbf 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020fa:	2108      	movs	r1, #8
 80020fc:	4819      	ldr	r0, [pc, #100]	@ (8002164 <menu+0x1c28>)
 80020fe:	f005 fb9f 	bl	8007840 <HAL_GPIO_ReadPin>
 8002102:	4603      	mov	r3, r0
 8002104:	2b01      	cmp	r3, #1
 8002106:	d10d      	bne.n	8002124 <menu+0x1be8>
 8002108:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <menu+0x1c2c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	f083 0301 	eor.w	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d006      	beq.n	8002124 <menu+0x1be8>
			eepromData[13] = kapiTablaAcSure;
 8002116:	4b1d      	ldr	r3, [pc, #116]	@ (800218c <menu+0x1c50>)
 8002118:	781a      	ldrb	r2, [r3, #0]
 800211a:	4b14      	ldr	r3, [pc, #80]	@ (800216c <menu+0x1c30>)
 800211c:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 800211e:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <menu+0x1c38>)
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002124:	4b14      	ldr	r3, [pc, #80]	@ (8002178 <menu+0x1c3c>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b10      	cmp	r3, #16
 800212a:	f040 80be 	bne.w	80022aa <menu+0x1d6e>
		if(dilSecim == 0) {
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <menu+0x1c0c>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d132      	bne.n	800219c <menu+0x1c60>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002136:	4a18      	ldr	r2, [pc, #96]	@ (8002198 <menu+0x1c5c>)
 8002138:	2101      	movs	r1, #1
 800213a:	2001      	movs	r0, #1
 800213c:	f7fe f9b7 	bl	80004ae <lcd_print>
 8002140:	e035      	b.n	80021ae <menu+0x1c72>
 8002142:	bf00      	nop
 8002144:	20000331 	.word	0x20000331
 8002148:	20000344 	.word	0x20000344
 800214c:	0800c2d0 	.word	0x0800c2d0
 8002150:	0800c2e0 	.word	0x0800c2e0
 8002154:	0800c2f0 	.word	0x0800c2f0
 8002158:	0800c304 	.word	0x0800c304
 800215c:	0800bf74 	.word	0x0800bf74
 8002160:	0800bf88 	.word	0x0800bf88
 8002164:	40010800 	.word	0x40010800
 8002168:	20000352 	.word	0x20000352
 800216c:	200002b8 	.word	0x200002b8
 8002170:	2000032a 	.word	0x2000032a
 8002174:	2000034f 	.word	0x2000034f
 8002178:	20000324 	.word	0x20000324
 800217c:	0800c318 	.word	0x0800c318
 8002180:	0800c1dc 	.word	0x0800c1dc
 8002184:	0800c32c 	.word	0x0800c32c
 8002188:	0800c200 	.word	0x0800c200
 800218c:	2000033f 	.word	0x2000033f
 8002190:	200002f8 	.word	0x200002f8
 8002194:	2000032f 	.word	0x2000032f
 8002198:	0800c340 	.word	0x0800c340
		} else if(dilSecim == 1) {
 800219c:	4b6e      	ldr	r3, [pc, #440]	@ (8002358 <menu+0x1e1c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d104      	bne.n	80021ae <menu+0x1c72>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80021a4:	4a6d      	ldr	r2, [pc, #436]	@ (800235c <menu+0x1e20>)
 80021a6:	2101      	movs	r1, #1
 80021a8:	2001      	movs	r0, #1
 80021aa:	f7fe f980 	bl	80004ae <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80021ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002360 <menu+0x1e24>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d113      	bne.n	80021de <menu+0x1ca2>
			if(dilSecim == 0) {
 80021b6:	4b68      	ldr	r3, [pc, #416]	@ (8002358 <menu+0x1e1c>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d105      	bne.n	80021ca <menu+0x1c8e>
				lcd_print(2, 1, "Pasif           ");
 80021be:	4a69      	ldr	r2, [pc, #420]	@ (8002364 <menu+0x1e28>)
 80021c0:	2101      	movs	r1, #1
 80021c2:	2002      	movs	r0, #2
 80021c4:	f7fe f973 	bl	80004ae <lcd_print>
 80021c8:	e020      	b.n	800220c <menu+0x1cd0>
			} else if(dilSecim == 1) {
 80021ca:	4b63      	ldr	r3, [pc, #396]	@ (8002358 <menu+0x1e1c>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d11c      	bne.n	800220c <menu+0x1cd0>
				lcd_print(2, 1, "Passive         ");
 80021d2:	4a65      	ldr	r2, [pc, #404]	@ (8002368 <menu+0x1e2c>)
 80021d4:	2101      	movs	r1, #1
 80021d6:	2002      	movs	r0, #2
 80021d8:	f7fe f969 	bl	80004ae <lcd_print>
 80021dc:	e016      	b.n	800220c <menu+0x1cd0>
			}
		} else if(yukariYavasLimit == 1) {
 80021de:	4b60      	ldr	r3, [pc, #384]	@ (8002360 <menu+0x1e24>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d112      	bne.n	800220c <menu+0x1cd0>
			if(dilSecim == 0) {
 80021e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002358 <menu+0x1e1c>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d105      	bne.n	80021fa <menu+0x1cbe>
				lcd_print(2, 1, "Aktif           ");
 80021ee:	4a5f      	ldr	r2, [pc, #380]	@ (800236c <menu+0x1e30>)
 80021f0:	2101      	movs	r1, #1
 80021f2:	2002      	movs	r0, #2
 80021f4:	f7fe f95b 	bl	80004ae <lcd_print>
 80021f8:	e008      	b.n	800220c <menu+0x1cd0>
			} else if(dilSecim == 1) {
 80021fa:	4b57      	ldr	r3, [pc, #348]	@ (8002358 <menu+0x1e1c>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d104      	bne.n	800220c <menu+0x1cd0>
				lcd_print(2, 1, "Active          ");
 8002202:	4a5b      	ldr	r2, [pc, #364]	@ (8002370 <menu+0x1e34>)
 8002204:	2101      	movs	r1, #1
 8002206:	2002      	movs	r0, #2
 8002208:	f7fe f951 	bl	80004ae <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800220c:	2102      	movs	r1, #2
 800220e:	4859      	ldr	r0, [pc, #356]	@ (8002374 <menu+0x1e38>)
 8002210:	f005 fb16 	bl	8007840 <HAL_GPIO_ReadPin>
 8002214:	4603      	mov	r3, r0
 8002216:	2b01      	cmp	r3, #1
 8002218:	d115      	bne.n	8002246 <menu+0x1d0a>
 800221a:	4b57      	ldr	r3, [pc, #348]	@ (8002378 <menu+0x1e3c>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	f083 0301 	eor.w	r3, r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00e      	beq.n	8002246 <menu+0x1d0a>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002228:	4b4d      	ldr	r3, [pc, #308]	@ (8002360 <menu+0x1e24>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	3301      	adds	r3, #1
 800222e:	b2da      	uxtb	r2, r3
 8002230:	4b4b      	ldr	r3, [pc, #300]	@ (8002360 <menu+0x1e24>)
 8002232:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002234:	4b4a      	ldr	r3, [pc, #296]	@ (8002360 <menu+0x1e24>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d902      	bls.n	8002242 <menu+0x1d06>
				yukariYavasLimit = 0;
 800223c:	4b48      	ldr	r3, [pc, #288]	@ (8002360 <menu+0x1e24>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002242:	f001 fb19 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002246:	2104      	movs	r1, #4
 8002248:	484a      	ldr	r0, [pc, #296]	@ (8002374 <menu+0x1e38>)
 800224a:	f005 faf9 	bl	8007840 <HAL_GPIO_ReadPin>
 800224e:	4603      	mov	r3, r0
 8002250:	2b01      	cmp	r3, #1
 8002252:	d115      	bne.n	8002280 <menu+0x1d44>
 8002254:	4b48      	ldr	r3, [pc, #288]	@ (8002378 <menu+0x1e3c>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	f083 0301 	eor.w	r3, r3, #1
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00e      	beq.n	8002280 <menu+0x1d44>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002262:	4b3f      	ldr	r3, [pc, #252]	@ (8002360 <menu+0x1e24>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	3b01      	subs	r3, #1
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b3d      	ldr	r3, [pc, #244]	@ (8002360 <menu+0x1e24>)
 800226c:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 800226e:	4b3c      	ldr	r3, [pc, #240]	@ (8002360 <menu+0x1e24>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <menu+0x1d40>
		   		yukariYavasLimit = 1;
 8002276:	4b3a      	ldr	r3, [pc, #232]	@ (8002360 <menu+0x1e24>)
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800227c:	f001 fafc 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002280:	2108      	movs	r1, #8
 8002282:	483c      	ldr	r0, [pc, #240]	@ (8002374 <menu+0x1e38>)
 8002284:	f005 fadc 	bl	8007840 <HAL_GPIO_ReadPin>
 8002288:	4603      	mov	r3, r0
 800228a:	2b01      	cmp	r3, #1
 800228c:	d10d      	bne.n	80022aa <menu+0x1d6e>
 800228e:	4b3a      	ldr	r3, [pc, #232]	@ (8002378 <menu+0x1e3c>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	f083 0301 	eor.w	r3, r3, #1
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d006      	beq.n	80022aa <menu+0x1d6e>
			eepromData[14] = yukariYavasLimit;
 800229c:	4b30      	ldr	r3, [pc, #192]	@ (8002360 <menu+0x1e24>)
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	4b36      	ldr	r3, [pc, #216]	@ (800237c <menu+0x1e40>)
 80022a2:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80022a4:	4b36      	ldr	r3, [pc, #216]	@ (8002380 <menu+0x1e44>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80022aa:	4b36      	ldr	r3, [pc, #216]	@ (8002384 <menu+0x1e48>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b11      	cmp	r3, #17
 80022b0:	f040 80ea 	bne.w	8002488 <menu+0x1f4c>
		if(dilSecim == 0) {
 80022b4:	4b28      	ldr	r3, [pc, #160]	@ (8002358 <menu+0x1e1c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d105      	bne.n	80022c8 <menu+0x1d8c>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80022bc:	4a32      	ldr	r2, [pc, #200]	@ (8002388 <menu+0x1e4c>)
 80022be:	2101      	movs	r1, #1
 80022c0:	2001      	movs	r0, #1
 80022c2:	f7fe f8f4 	bl	80004ae <lcd_print>
 80022c6:	e008      	b.n	80022da <menu+0x1d9e>
		} else if(dilSecim == 1) {
 80022c8:	4b23      	ldr	r3, [pc, #140]	@ (8002358 <menu+0x1e1c>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d104      	bne.n	80022da <menu+0x1d9e>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80022d0:	4a2e      	ldr	r2, [pc, #184]	@ (800238c <menu+0x1e50>)
 80022d2:	2101      	movs	r1, #1
 80022d4:	2001      	movs	r0, #1
 80022d6:	f7fe f8ea 	bl	80004ae <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80022da:	4b2d      	ldr	r3, [pc, #180]	@ (8002390 <menu+0x1e54>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d113      	bne.n	800230a <menu+0x1dce>
			if(dilSecim == 0){
 80022e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002358 <menu+0x1e1c>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d105      	bne.n	80022f6 <menu+0x1dba>
				lcd_print(2, 1, "Devirme aktif  ");
 80022ea:	4a2a      	ldr	r2, [pc, #168]	@ (8002394 <menu+0x1e58>)
 80022ec:	2101      	movs	r1, #1
 80022ee:	2002      	movs	r0, #2
 80022f0:	f7fe f8dd 	bl	80004ae <lcd_print>
 80022f4:	e05f      	b.n	80023b6 <menu+0x1e7a>
			} else if(dilSecim == 1){
 80022f6:	4b18      	ldr	r3, [pc, #96]	@ (8002358 <menu+0x1e1c>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d15b      	bne.n	80023b6 <menu+0x1e7a>
				lcd_print(2, 1, "Tipping active ");
 80022fe:	4a26      	ldr	r2, [pc, #152]	@ (8002398 <menu+0x1e5c>)
 8002300:	2101      	movs	r1, #1
 8002302:	2002      	movs	r0, #2
 8002304:	f7fe f8d3 	bl	80004ae <lcd_print>
 8002308:	e055      	b.n	80023b6 <menu+0x1e7a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800230a:	4b21      	ldr	r3, [pc, #132]	@ (8002390 <menu+0x1e54>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d113      	bne.n	800233a <menu+0x1dfe>
			if(dilSecim == 0){
 8002312:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <menu+0x1e1c>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d105      	bne.n	8002326 <menu+0x1dea>
				lcd_print(2, 1, "Yuruyus aktif  ");
 800231a:	4a20      	ldr	r2, [pc, #128]	@ (800239c <menu+0x1e60>)
 800231c:	2101      	movs	r1, #1
 800231e:	2002      	movs	r0, #2
 8002320:	f7fe f8c5 	bl	80004ae <lcd_print>
 8002324:	e047      	b.n	80023b6 <menu+0x1e7a>
			} else if(dilSecim == 1) {
 8002326:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <menu+0x1e1c>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d143      	bne.n	80023b6 <menu+0x1e7a>
				lcd_print(2, 1, "Drive active   ");
 800232e:	4a1c      	ldr	r2, [pc, #112]	@ (80023a0 <menu+0x1e64>)
 8002330:	2101      	movs	r1, #1
 8002332:	2002      	movs	r0, #2
 8002334:	f7fe f8bb 	bl	80004ae <lcd_print>
 8002338:	e03d      	b.n	80023b6 <menu+0x1e7a>
			}
		} else if(devirmeYuruyusSecim == 0) {
 800233a:	4b15      	ldr	r3, [pc, #84]	@ (8002390 <menu+0x1e54>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d139      	bne.n	80023b6 <menu+0x1e7a>
			if(dilSecim == 0) {
 8002342:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <menu+0x1e1c>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d12c      	bne.n	80023a4 <menu+0x1e68>
				lcd_print(2, 1, "Pasif           ");
 800234a:	4a06      	ldr	r2, [pc, #24]	@ (8002364 <menu+0x1e28>)
 800234c:	2101      	movs	r1, #1
 800234e:	2002      	movs	r0, #2
 8002350:	f7fe f8ad 	bl	80004ae <lcd_print>
 8002354:	e02f      	b.n	80023b6 <menu+0x1e7a>
 8002356:	bf00      	nop
 8002358:	20000344 	.word	0x20000344
 800235c:	0800c354 	.word	0x0800c354
 8002360:	20000332 	.word	0x20000332
 8002364:	0800bf74 	.word	0x0800bf74
 8002368:	0800bf88 	.word	0x0800bf88
 800236c:	0800bfd4 	.word	0x0800bfd4
 8002370:	0800bfe8 	.word	0x0800bfe8
 8002374:	40010800 	.word	0x40010800
 8002378:	20000352 	.word	0x20000352
 800237c:	200002b8 	.word	0x200002b8
 8002380:	2000034f 	.word	0x2000034f
 8002384:	20000324 	.word	0x20000324
 8002388:	0800c368 	.word	0x0800c368
 800238c:	0800c37c 	.word	0x0800c37c
 8002390:	20000333 	.word	0x20000333
 8002394:	0800c390 	.word	0x0800c390
 8002398:	0800c3a0 	.word	0x0800c3a0
 800239c:	0800c3b0 	.word	0x0800c3b0
 80023a0:	0800c3c0 	.word	0x0800c3c0
			} else if(dilSecim == 1) {
 80023a4:	4b9a      	ldr	r3, [pc, #616]	@ (8002610 <menu+0x20d4>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d104      	bne.n	80023b6 <menu+0x1e7a>
				lcd_print(2, 1, "Passive         ");
 80023ac:	4a99      	ldr	r2, [pc, #612]	@ (8002614 <menu+0x20d8>)
 80023ae:	2101      	movs	r1, #1
 80023b0:	2002      	movs	r0, #2
 80023b2:	f7fe f87c 	bl	80004ae <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023b6:	2102      	movs	r1, #2
 80023b8:	4897      	ldr	r0, [pc, #604]	@ (8002618 <menu+0x20dc>)
 80023ba:	f005 fa41 	bl	8007840 <HAL_GPIO_ReadPin>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d115      	bne.n	80023f0 <menu+0x1eb4>
 80023c4:	4b95      	ldr	r3, [pc, #596]	@ (800261c <menu+0x20e0>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	f083 0301 	eor.w	r3, r3, #1
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00e      	beq.n	80023f0 <menu+0x1eb4>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80023d2:	4b93      	ldr	r3, [pc, #588]	@ (8002620 <menu+0x20e4>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	3301      	adds	r3, #1
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b91      	ldr	r3, [pc, #580]	@ (8002620 <menu+0x20e4>)
 80023dc:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80023de:	4b90      	ldr	r3, [pc, #576]	@ (8002620 <menu+0x20e4>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d902      	bls.n	80023ec <menu+0x1eb0>
				devirmeYuruyusSecim = 0;
 80023e6:	4b8e      	ldr	r3, [pc, #568]	@ (8002620 <menu+0x20e4>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023ec:	f001 fa44 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023f0:	2104      	movs	r1, #4
 80023f2:	4889      	ldr	r0, [pc, #548]	@ (8002618 <menu+0x20dc>)
 80023f4:	f005 fa24 	bl	8007840 <HAL_GPIO_ReadPin>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d115      	bne.n	800242a <menu+0x1eee>
 80023fe:	4b87      	ldr	r3, [pc, #540]	@ (800261c <menu+0x20e0>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	f083 0301 	eor.w	r3, r3, #1
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00e      	beq.n	800242a <menu+0x1eee>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 800240c:	4b84      	ldr	r3, [pc, #528]	@ (8002620 <menu+0x20e4>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	3b01      	subs	r3, #1
 8002412:	b2da      	uxtb	r2, r3
 8002414:	4b82      	ldr	r3, [pc, #520]	@ (8002620 <menu+0x20e4>)
 8002416:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002418:	4b81      	ldr	r3, [pc, #516]	@ (8002620 <menu+0x20e4>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d902      	bls.n	8002426 <menu+0x1eea>
		   		devirmeYuruyusSecim = 2;
 8002420:	4b7f      	ldr	r3, [pc, #508]	@ (8002620 <menu+0x20e4>)
 8002422:	2202      	movs	r2, #2
 8002424:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002426:	f001 fa27 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800242a:	2108      	movs	r1, #8
 800242c:	487a      	ldr	r0, [pc, #488]	@ (8002618 <menu+0x20dc>)
 800242e:	f005 fa07 	bl	8007840 <HAL_GPIO_ReadPin>
 8002432:	4603      	mov	r3, r0
 8002434:	2b01      	cmp	r3, #1
 8002436:	d127      	bne.n	8002488 <menu+0x1f4c>
 8002438:	4b78      	ldr	r3, [pc, #480]	@ (800261c <menu+0x20e0>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	f083 0301 	eor.w	r3, r3, #1
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d020      	beq.n	8002488 <menu+0x1f4c>
			eepromData[15] = devirmeYuruyusSecim;
 8002446:	4b76      	ldr	r3, [pc, #472]	@ (8002620 <menu+0x20e4>)
 8002448:	781a      	ldrb	r2, [r3, #0]
 800244a:	4b76      	ldr	r3, [pc, #472]	@ (8002624 <menu+0x20e8>)
 800244c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800244e:	4b74      	ldr	r3, [pc, #464]	@ (8002620 <menu+0x20e4>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d003      	beq.n	800245e <menu+0x1f22>
 8002456:	4b72      	ldr	r3, [pc, #456]	@ (8002620 <menu+0x20e4>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d106      	bne.n	800246c <menu+0x1f30>
				calismaSekli = 0;
 800245e:	4b72      	ldr	r3, [pc, #456]	@ (8002628 <menu+0x20ec>)
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002464:	4b70      	ldr	r3, [pc, #448]	@ (8002628 <menu+0x20ec>)
 8002466:	781a      	ldrb	r2, [r3, #0]
 8002468:	4b6e      	ldr	r3, [pc, #440]	@ (8002624 <menu+0x20e8>)
 800246a:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 800246c:	4b6c      	ldr	r3, [pc, #432]	@ (8002620 <menu+0x20e4>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d106      	bne.n	8002482 <menu+0x1f46>
				devirmeSilindirTipi = 1;
 8002474:	4b6d      	ldr	r3, [pc, #436]	@ (800262c <menu+0x20f0>)
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800247a:	4b6c      	ldr	r3, [pc, #432]	@ (800262c <menu+0x20f0>)
 800247c:	781a      	ldrb	r2, [r3, #0]
 800247e:	4b69      	ldr	r3, [pc, #420]	@ (8002624 <menu+0x20e8>)
 8002480:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002482:	4b6b      	ldr	r3, [pc, #428]	@ (8002630 <menu+0x20f4>)
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002488:	4b6a      	ldr	r3, [pc, #424]	@ (8002634 <menu+0x20f8>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b12      	cmp	r3, #18
 800248e:	f040 80ac 	bne.w	80025ea <menu+0x20ae>
		if(devirmeYuruyusSecim == 2) {
 8002492:	4b63      	ldr	r3, [pc, #396]	@ (8002620 <menu+0x20e4>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d113      	bne.n	80024c2 <menu+0x1f86>
			if(dilSecim == 0) {
 800249a:	4b5d      	ldr	r3, [pc, #372]	@ (8002610 <menu+0x20d4>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d105      	bne.n	80024ae <menu+0x1f72>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80024a2:	4a65      	ldr	r2, [pc, #404]	@ (8002638 <menu+0x20fc>)
 80024a4:	2101      	movs	r1, #1
 80024a6:	2001      	movs	r0, #1
 80024a8:	f7fe f801 	bl	80004ae <lcd_print>
 80024ac:	e01f      	b.n	80024ee <menu+0x1fb2>
			} else if(dilSecim == 1) {
 80024ae:	4b58      	ldr	r3, [pc, #352]	@ (8002610 <menu+0x20d4>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d11b      	bne.n	80024ee <menu+0x1fb2>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80024b6:	4a61      	ldr	r2, [pc, #388]	@ (800263c <menu+0x2100>)
 80024b8:	2101      	movs	r1, #1
 80024ba:	2001      	movs	r0, #1
 80024bc:	f7fd fff7 	bl	80004ae <lcd_print>
 80024c0:	e015      	b.n	80024ee <menu+0x1fb2>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80024c2:	4b57      	ldr	r3, [pc, #348]	@ (8002620 <menu+0x20e4>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d111      	bne.n	80024ee <menu+0x1fb2>
			if(dilSecim == 0){
 80024ca:	4b51      	ldr	r3, [pc, #324]	@ (8002610 <menu+0x20d4>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d104      	bne.n	80024dc <menu+0x1fa0>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80024d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002640 <menu+0x2104>)
 80024d4:	2101      	movs	r1, #1
 80024d6:	2001      	movs	r0, #1
 80024d8:	f7fd ffe9 	bl	80004ae <lcd_print>
			}
			if(dilSecim == 1){
 80024dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002610 <menu+0x20d4>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d104      	bne.n	80024ee <menu+0x1fb2>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80024e4:	4a57      	ldr	r2, [pc, #348]	@ (8002644 <menu+0x2108>)
 80024e6:	2101      	movs	r1, #1
 80024e8:	2001      	movs	r0, #1
 80024ea:	f7fd ffe0 	bl	80004ae <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80024ee:	4b56      	ldr	r3, [pc, #344]	@ (8002648 <menu+0x210c>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d113      	bne.n	800251e <menu+0x1fe2>
			if(dilSecim == 0) {
 80024f6:	4b46      	ldr	r3, [pc, #280]	@ (8002610 <menu+0x20d4>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d105      	bne.n	800250a <menu+0x1fce>
				lcd_print(2, 1, "Pasif           ");
 80024fe:	4a53      	ldr	r2, [pc, #332]	@ (800264c <menu+0x2110>)
 8002500:	2101      	movs	r1, #1
 8002502:	2002      	movs	r0, #2
 8002504:	f7fd ffd3 	bl	80004ae <lcd_print>
 8002508:	e020      	b.n	800254c <menu+0x2010>
			} else if(dilSecim == 1){
 800250a:	4b41      	ldr	r3, [pc, #260]	@ (8002610 <menu+0x20d4>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d11c      	bne.n	800254c <menu+0x2010>
				lcd_print(2, 1, "Passive         ");
 8002512:	4a40      	ldr	r2, [pc, #256]	@ (8002614 <menu+0x20d8>)
 8002514:	2101      	movs	r1, #1
 8002516:	2002      	movs	r0, #2
 8002518:	f7fd ffc9 	bl	80004ae <lcd_print>
 800251c:	e016      	b.n	800254c <menu+0x2010>
			}
		} else if(devirmeYukariIleriLimit == 1){
 800251e:	4b4a      	ldr	r3, [pc, #296]	@ (8002648 <menu+0x210c>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d112      	bne.n	800254c <menu+0x2010>
			if(dilSecim == 0){
 8002526:	4b3a      	ldr	r3, [pc, #232]	@ (8002610 <menu+0x20d4>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d105      	bne.n	800253a <menu+0x1ffe>
				lcd_print(2, 1, "Aktif           ");
 800252e:	4a48      	ldr	r2, [pc, #288]	@ (8002650 <menu+0x2114>)
 8002530:	2101      	movs	r1, #1
 8002532:	2002      	movs	r0, #2
 8002534:	f7fd ffbb 	bl	80004ae <lcd_print>
 8002538:	e008      	b.n	800254c <menu+0x2010>
			} else if(dilSecim == 1){
 800253a:	4b35      	ldr	r3, [pc, #212]	@ (8002610 <menu+0x20d4>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d104      	bne.n	800254c <menu+0x2010>
				lcd_print(2, 1, "Active          ");
 8002542:	4a44      	ldr	r2, [pc, #272]	@ (8002654 <menu+0x2118>)
 8002544:	2101      	movs	r1, #1
 8002546:	2002      	movs	r0, #2
 8002548:	f7fd ffb1 	bl	80004ae <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800254c:	2102      	movs	r1, #2
 800254e:	4832      	ldr	r0, [pc, #200]	@ (8002618 <menu+0x20dc>)
 8002550:	f005 f976 	bl	8007840 <HAL_GPIO_ReadPin>
 8002554:	4603      	mov	r3, r0
 8002556:	2b01      	cmp	r3, #1
 8002558:	d115      	bne.n	8002586 <menu+0x204a>
 800255a:	4b30      	ldr	r3, [pc, #192]	@ (800261c <menu+0x20e0>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	f083 0301 	eor.w	r3, r3, #1
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00e      	beq.n	8002586 <menu+0x204a>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002568:	4b37      	ldr	r3, [pc, #220]	@ (8002648 <menu+0x210c>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	b2da      	uxtb	r2, r3
 8002570:	4b35      	ldr	r3, [pc, #212]	@ (8002648 <menu+0x210c>)
 8002572:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002574:	4b34      	ldr	r3, [pc, #208]	@ (8002648 <menu+0x210c>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d902      	bls.n	8002582 <menu+0x2046>
				devirmeYukariIleriLimit = 0;
 800257c:	4b32      	ldr	r3, [pc, #200]	@ (8002648 <menu+0x210c>)
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002582:	f001 f979 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002586:	2104      	movs	r1, #4
 8002588:	4823      	ldr	r0, [pc, #140]	@ (8002618 <menu+0x20dc>)
 800258a:	f005 f959 	bl	8007840 <HAL_GPIO_ReadPin>
 800258e:	4603      	mov	r3, r0
 8002590:	2b01      	cmp	r3, #1
 8002592:	d115      	bne.n	80025c0 <menu+0x2084>
 8002594:	4b21      	ldr	r3, [pc, #132]	@ (800261c <menu+0x20e0>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	f083 0301 	eor.w	r3, r3, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00e      	beq.n	80025c0 <menu+0x2084>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80025a2:	4b29      	ldr	r3, [pc, #164]	@ (8002648 <menu+0x210c>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b27      	ldr	r3, [pc, #156]	@ (8002648 <menu+0x210c>)
 80025ac:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80025ae:	4b26      	ldr	r3, [pc, #152]	@ (8002648 <menu+0x210c>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <menu+0x2080>
		   		devirmeYukariIleriLimit = 1;
 80025b6:	4b24      	ldr	r3, [pc, #144]	@ (8002648 <menu+0x210c>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025bc:	f001 f95c 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c0:	2108      	movs	r1, #8
 80025c2:	4815      	ldr	r0, [pc, #84]	@ (8002618 <menu+0x20dc>)
 80025c4:	f005 f93c 	bl	8007840 <HAL_GPIO_ReadPin>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d10d      	bne.n	80025ea <menu+0x20ae>
 80025ce:	4b13      	ldr	r3, [pc, #76]	@ (800261c <menu+0x20e0>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	f083 0301 	eor.w	r3, r3, #1
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d006      	beq.n	80025ea <menu+0x20ae>
			eepromData[16] = devirmeYukariIleriLimit;
 80025dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002648 <menu+0x210c>)
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <menu+0x20e8>)
 80025e2:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80025e4:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <menu+0x20f4>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80025ea:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <menu+0x20f8>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b13      	cmp	r3, #19
 80025f0:	f040 80d2 	bne.w	8002798 <menu+0x225c>
		if(devirmeYuruyusSecim == 2) {
 80025f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002620 <menu+0x20e4>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d139      	bne.n	8002670 <menu+0x2134>
			if(dilSecim == 0) {
 80025fc:	4b04      	ldr	r3, [pc, #16]	@ (8002610 <menu+0x20d4>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d12b      	bne.n	800265c <menu+0x2120>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8002604:	4a14      	ldr	r2, [pc, #80]	@ (8002658 <menu+0x211c>)
 8002606:	2101      	movs	r1, #1
 8002608:	2001      	movs	r0, #1
 800260a:	f7fd ff50 	bl	80004ae <lcd_print>
 800260e:	e045      	b.n	800269c <menu+0x2160>
 8002610:	20000344 	.word	0x20000344
 8002614:	0800bf88 	.word	0x0800bf88
 8002618:	40010800 	.word	0x40010800
 800261c:	20000352 	.word	0x20000352
 8002620:	20000333 	.word	0x20000333
 8002624:	200002b8 	.word	0x200002b8
 8002628:	20000325 	.word	0x20000325
 800262c:	20000336 	.word	0x20000336
 8002630:	2000034f 	.word	0x2000034f
 8002634:	20000324 	.word	0x20000324
 8002638:	0800c3d0 	.word	0x0800c3d0
 800263c:	0800c3e4 	.word	0x0800c3e4
 8002640:	0800c3f4 	.word	0x0800c3f4
 8002644:	0800c408 	.word	0x0800c408
 8002648:	20000334 	.word	0x20000334
 800264c:	0800bf74 	.word	0x0800bf74
 8002650:	0800bfd4 	.word	0x0800bfd4
 8002654:	0800bfe8 	.word	0x0800bfe8
 8002658:	0800c41c 	.word	0x0800c41c
			} else if(dilSecim == 1) {
 800265c:	4b7b      	ldr	r3, [pc, #492]	@ (800284c <menu+0x2310>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d11b      	bne.n	800269c <menu+0x2160>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8002664:	4a7a      	ldr	r2, [pc, #488]	@ (8002850 <menu+0x2314>)
 8002666:	2101      	movs	r1, #1
 8002668:	2001      	movs	r0, #1
 800266a:	f7fd ff20 	bl	80004ae <lcd_print>
 800266e:	e015      	b.n	800269c <menu+0x2160>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002670:	4b78      	ldr	r3, [pc, #480]	@ (8002854 <menu+0x2318>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d111      	bne.n	800269c <menu+0x2160>
			if(dilSecim == 0) {
 8002678:	4b74      	ldr	r3, [pc, #464]	@ (800284c <menu+0x2310>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d104      	bne.n	800268a <menu+0x214e>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8002680:	4a75      	ldr	r2, [pc, #468]	@ (8002858 <menu+0x231c>)
 8002682:	2101      	movs	r1, #1
 8002684:	2001      	movs	r0, #1
 8002686:	f7fd ff12 	bl	80004ae <lcd_print>
			}
			if(dilSecim == 1) {
 800268a:	4b70      	ldr	r3, [pc, #448]	@ (800284c <menu+0x2310>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d104      	bne.n	800269c <menu+0x2160>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <menu+0x2320>)
 8002694:	2101      	movs	r1, #1
 8002696:	2001      	movs	r0, #1
 8002698:	f7fd ff09 	bl	80004ae <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800269c:	4b70      	ldr	r3, [pc, #448]	@ (8002860 <menu+0x2324>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d113      	bne.n	80026cc <menu+0x2190>
			if(dilSecim == 0) {
 80026a4:	4b69      	ldr	r3, [pc, #420]	@ (800284c <menu+0x2310>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d105      	bne.n	80026b8 <menu+0x217c>
				lcd_print(2, 1, "Pasif           ");
 80026ac:	4a6d      	ldr	r2, [pc, #436]	@ (8002864 <menu+0x2328>)
 80026ae:	2101      	movs	r1, #1
 80026b0:	2002      	movs	r0, #2
 80026b2:	f7fd fefc 	bl	80004ae <lcd_print>
 80026b6:	e020      	b.n	80026fa <menu+0x21be>
			} else if(dilSecim == 1) {
 80026b8:	4b64      	ldr	r3, [pc, #400]	@ (800284c <menu+0x2310>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d11c      	bne.n	80026fa <menu+0x21be>
				lcd_print(2, 1, "Passive         ");
 80026c0:	4a69      	ldr	r2, [pc, #420]	@ (8002868 <menu+0x232c>)
 80026c2:	2101      	movs	r1, #1
 80026c4:	2002      	movs	r0, #2
 80026c6:	f7fd fef2 	bl	80004ae <lcd_print>
 80026ca:	e016      	b.n	80026fa <menu+0x21be>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80026cc:	4b64      	ldr	r3, [pc, #400]	@ (8002860 <menu+0x2324>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d112      	bne.n	80026fa <menu+0x21be>
			if(dilSecim == 0) {
 80026d4:	4b5d      	ldr	r3, [pc, #372]	@ (800284c <menu+0x2310>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d105      	bne.n	80026e8 <menu+0x21ac>
				lcd_print(2, 1, "Aktif           ");
 80026dc:	4a63      	ldr	r2, [pc, #396]	@ (800286c <menu+0x2330>)
 80026de:	2101      	movs	r1, #1
 80026e0:	2002      	movs	r0, #2
 80026e2:	f7fd fee4 	bl	80004ae <lcd_print>
 80026e6:	e008      	b.n	80026fa <menu+0x21be>
			} else if(dilSecim == 1) {
 80026e8:	4b58      	ldr	r3, [pc, #352]	@ (800284c <menu+0x2310>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d104      	bne.n	80026fa <menu+0x21be>
				lcd_print(2, 1, "Active          ");
 80026f0:	4a5f      	ldr	r2, [pc, #380]	@ (8002870 <menu+0x2334>)
 80026f2:	2101      	movs	r1, #1
 80026f4:	2002      	movs	r0, #2
 80026f6:	f7fd feda 	bl	80004ae <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026fa:	2102      	movs	r1, #2
 80026fc:	485d      	ldr	r0, [pc, #372]	@ (8002874 <menu+0x2338>)
 80026fe:	f005 f89f 	bl	8007840 <HAL_GPIO_ReadPin>
 8002702:	4603      	mov	r3, r0
 8002704:	2b01      	cmp	r3, #1
 8002706:	d115      	bne.n	8002734 <menu+0x21f8>
 8002708:	4b5b      	ldr	r3, [pc, #364]	@ (8002878 <menu+0x233c>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	f083 0301 	eor.w	r3, r3, #1
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00e      	beq.n	8002734 <menu+0x21f8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002716:	4b52      	ldr	r3, [pc, #328]	@ (8002860 <menu+0x2324>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	3301      	adds	r3, #1
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4b50      	ldr	r3, [pc, #320]	@ (8002860 <menu+0x2324>)
 8002720:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002722:	4b4f      	ldr	r3, [pc, #316]	@ (8002860 <menu+0x2324>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d902      	bls.n	8002730 <menu+0x21f4>
				devirmeAsagiGeriLimit = 0;
 800272a:	4b4d      	ldr	r3, [pc, #308]	@ (8002860 <menu+0x2324>)
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002730:	f001 f8a2 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002734:	2104      	movs	r1, #4
 8002736:	484f      	ldr	r0, [pc, #316]	@ (8002874 <menu+0x2338>)
 8002738:	f005 f882 	bl	8007840 <HAL_GPIO_ReadPin>
 800273c:	4603      	mov	r3, r0
 800273e:	2b01      	cmp	r3, #1
 8002740:	d115      	bne.n	800276e <menu+0x2232>
 8002742:	4b4d      	ldr	r3, [pc, #308]	@ (8002878 <menu+0x233c>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	f083 0301 	eor.w	r3, r3, #1
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00e      	beq.n	800276e <menu+0x2232>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002750:	4b43      	ldr	r3, [pc, #268]	@ (8002860 <menu+0x2324>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	3b01      	subs	r3, #1
 8002756:	b2da      	uxtb	r2, r3
 8002758:	4b41      	ldr	r3, [pc, #260]	@ (8002860 <menu+0x2324>)
 800275a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800275c:	4b40      	ldr	r3, [pc, #256]	@ (8002860 <menu+0x2324>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <menu+0x222e>
		   		devirmeAsagiGeriLimit = 1;
 8002764:	4b3e      	ldr	r3, [pc, #248]	@ (8002860 <menu+0x2324>)
 8002766:	2201      	movs	r2, #1
 8002768:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800276a:	f001 f885 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800276e:	2108      	movs	r1, #8
 8002770:	4840      	ldr	r0, [pc, #256]	@ (8002874 <menu+0x2338>)
 8002772:	f005 f865 	bl	8007840 <HAL_GPIO_ReadPin>
 8002776:	4603      	mov	r3, r0
 8002778:	2b01      	cmp	r3, #1
 800277a:	d10d      	bne.n	8002798 <menu+0x225c>
 800277c:	4b3e      	ldr	r3, [pc, #248]	@ (8002878 <menu+0x233c>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	f083 0301 	eor.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d006      	beq.n	8002798 <menu+0x225c>
			eepromData[17] = devirmeAsagiGeriLimit;
 800278a:	4b35      	ldr	r3, [pc, #212]	@ (8002860 <menu+0x2324>)
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	4b3b      	ldr	r3, [pc, #236]	@ (800287c <menu+0x2340>)
 8002790:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002792:	4b3b      	ldr	r3, [pc, #236]	@ (8002880 <menu+0x2344>)
 8002794:	2201      	movs	r2, #1
 8002796:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002798:	4b3a      	ldr	r3, [pc, #232]	@ (8002884 <menu+0x2348>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b14      	cmp	r3, #20
 800279e:	f040 80e3 	bne.w	8002968 <menu+0x242c>
		if(devirmeYuruyusSecim == 1) {
 80027a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002854 <menu+0x2318>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d113      	bne.n	80027d2 <menu+0x2296>
			if(dilSecim == 0) {
 80027aa:	4b28      	ldr	r3, [pc, #160]	@ (800284c <menu+0x2310>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d105      	bne.n	80027be <menu+0x2282>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80027b2:	4a35      	ldr	r2, [pc, #212]	@ (8002888 <menu+0x234c>)
 80027b4:	2101      	movs	r1, #1
 80027b6:	2001      	movs	r0, #1
 80027b8:	f7fd fe79 	bl	80004ae <lcd_print>
 80027bc:	e020      	b.n	8002800 <menu+0x22c4>
			} else if(dilSecim == 1) {
 80027be:	4b23      	ldr	r3, [pc, #140]	@ (800284c <menu+0x2310>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d11c      	bne.n	8002800 <menu+0x22c4>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80027c6:	4a31      	ldr	r2, [pc, #196]	@ (800288c <menu+0x2350>)
 80027c8:	2101      	movs	r1, #1
 80027ca:	2001      	movs	r0, #1
 80027cc:	f7fd fe6f 	bl	80004ae <lcd_print>
 80027d0:	e016      	b.n	8002800 <menu+0x22c4>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80027d2:	4b20      	ldr	r3, [pc, #128]	@ (8002854 <menu+0x2318>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d112      	bne.n	8002800 <menu+0x22c4>
			if(dilSecim == 0) {
 80027da:	4b1c      	ldr	r3, [pc, #112]	@ (800284c <menu+0x2310>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <menu+0x22b2>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80027e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002890 <menu+0x2354>)
 80027e4:	2101      	movs	r1, #1
 80027e6:	2001      	movs	r0, #1
 80027e8:	f7fd fe61 	bl	80004ae <lcd_print>
 80027ec:	e008      	b.n	8002800 <menu+0x22c4>
			} else if(dilSecim == 1) {
 80027ee:	4b17      	ldr	r3, [pc, #92]	@ (800284c <menu+0x2310>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d104      	bne.n	8002800 <menu+0x22c4>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80027f6:	4a27      	ldr	r2, [pc, #156]	@ (8002894 <menu+0x2358>)
 80027f8:	2101      	movs	r1, #1
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7fd fe57 	bl	80004ae <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8002800:	4b25      	ldr	r3, [pc, #148]	@ (8002898 <menu+0x235c>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d113      	bne.n	8002830 <menu+0x22f4>
			if(dilSecim == 0) {
 8002808:	4b10      	ldr	r3, [pc, #64]	@ (800284c <menu+0x2310>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d105      	bne.n	800281c <menu+0x22e0>
				lcd_print(2, 1, "Tek tesir       ");
 8002810:	4a22      	ldr	r2, [pc, #136]	@ (800289c <menu+0x2360>)
 8002812:	2101      	movs	r1, #1
 8002814:	2002      	movs	r0, #2
 8002816:	f7fd fe4a 	bl	80004ae <lcd_print>
 800281a:	e04e      	b.n	80028ba <menu+0x237e>
			} else if(dilSecim == 1) {
 800281c:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <menu+0x2310>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d14a      	bne.n	80028ba <menu+0x237e>
				lcd_print(2, 1, "Single acting  ");
 8002824:	4a1e      	ldr	r2, [pc, #120]	@ (80028a0 <menu+0x2364>)
 8002826:	2101      	movs	r1, #1
 8002828:	2002      	movs	r0, #2
 800282a:	f7fd fe40 	bl	80004ae <lcd_print>
 800282e:	e044      	b.n	80028ba <menu+0x237e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8002830:	4b19      	ldr	r3, [pc, #100]	@ (8002898 <menu+0x235c>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d140      	bne.n	80028ba <menu+0x237e>
			if(dilSecim == 0) {
 8002838:	4b04      	ldr	r3, [pc, #16]	@ (800284c <menu+0x2310>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d133      	bne.n	80028a8 <menu+0x236c>
				lcd_print(2, 1, "Cift tesir      ");
 8002840:	4a18      	ldr	r2, [pc, #96]	@ (80028a4 <menu+0x2368>)
 8002842:	2101      	movs	r1, #1
 8002844:	2002      	movs	r0, #2
 8002846:	f7fd fe32 	bl	80004ae <lcd_print>
 800284a:	e036      	b.n	80028ba <menu+0x237e>
 800284c:	20000344 	.word	0x20000344
 8002850:	0800c430 	.word	0x0800c430
 8002854:	20000333 	.word	0x20000333
 8002858:	0800c444 	.word	0x0800c444
 800285c:	0800c458 	.word	0x0800c458
 8002860:	20000335 	.word	0x20000335
 8002864:	0800bf74 	.word	0x0800bf74
 8002868:	0800bf88 	.word	0x0800bf88
 800286c:	0800bfd4 	.word	0x0800bfd4
 8002870:	0800bfe8 	.word	0x0800bfe8
 8002874:	40010800 	.word	0x40010800
 8002878:	20000352 	.word	0x20000352
 800287c:	200002b8 	.word	0x200002b8
 8002880:	2000034f 	.word	0x2000034f
 8002884:	20000324 	.word	0x20000324
 8002888:	0800c46c 	.word	0x0800c46c
 800288c:	0800c480 	.word	0x0800c480
 8002890:	0800c494 	.word	0x0800c494
 8002894:	0800c4a8 	.word	0x0800c4a8
 8002898:	20000336 	.word	0x20000336
 800289c:	0800c4bc 	.word	0x0800c4bc
 80028a0:	0800c4d0 	.word	0x0800c4d0
 80028a4:	0800c4e0 	.word	0x0800c4e0
			} else if(dilSecim == 1) {
 80028a8:	4b90      	ldr	r3, [pc, #576]	@ (8002aec <menu+0x25b0>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d104      	bne.n	80028ba <menu+0x237e>
				lcd_print(2, 1, "Double acting  ");
 80028b0:	4a8f      	ldr	r2, [pc, #572]	@ (8002af0 <menu+0x25b4>)
 80028b2:	2101      	movs	r1, #1
 80028b4:	2002      	movs	r0, #2
 80028b6:	f7fd fdfa 	bl	80004ae <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80028ba:	2102      	movs	r1, #2
 80028bc:	488d      	ldr	r0, [pc, #564]	@ (8002af4 <menu+0x25b8>)
 80028be:	f004 ffbf 	bl	8007840 <HAL_GPIO_ReadPin>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d119      	bne.n	80028fc <menu+0x23c0>
 80028c8:	4b8b      	ldr	r3, [pc, #556]	@ (8002af8 <menu+0x25bc>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	f083 0301 	eor.w	r3, r3, #1
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d012      	beq.n	80028fc <menu+0x23c0>
 80028d6:	4b89      	ldr	r3, [pc, #548]	@ (8002afc <menu+0x25c0>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d10e      	bne.n	80028fc <menu+0x23c0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80028de:	4b88      	ldr	r3, [pc, #544]	@ (8002b00 <menu+0x25c4>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	3301      	adds	r3, #1
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4b86      	ldr	r3, [pc, #536]	@ (8002b00 <menu+0x25c4>)
 80028e8:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80028ea:	4b85      	ldr	r3, [pc, #532]	@ (8002b00 <menu+0x25c4>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d902      	bls.n	80028f8 <menu+0x23bc>
				devirmeSilindirTipi = 0;
 80028f2:	4b83      	ldr	r3, [pc, #524]	@ (8002b00 <menu+0x25c4>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028f8:	f000 ffbe 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80028fc:	2104      	movs	r1, #4
 80028fe:	487d      	ldr	r0, [pc, #500]	@ (8002af4 <menu+0x25b8>)
 8002900:	f004 ff9e 	bl	8007840 <HAL_GPIO_ReadPin>
 8002904:	4603      	mov	r3, r0
 8002906:	2b01      	cmp	r3, #1
 8002908:	d119      	bne.n	800293e <menu+0x2402>
 800290a:	4b7b      	ldr	r3, [pc, #492]	@ (8002af8 <menu+0x25bc>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	f083 0301 	eor.w	r3, r3, #1
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d012      	beq.n	800293e <menu+0x2402>
 8002918:	4b78      	ldr	r3, [pc, #480]	@ (8002afc <menu+0x25c0>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d10e      	bne.n	800293e <menu+0x2402>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002920:	4b77      	ldr	r3, [pc, #476]	@ (8002b00 <menu+0x25c4>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	3b01      	subs	r3, #1
 8002926:	b2da      	uxtb	r2, r3
 8002928:	4b75      	ldr	r3, [pc, #468]	@ (8002b00 <menu+0x25c4>)
 800292a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 800292c:	4b74      	ldr	r3, [pc, #464]	@ (8002b00 <menu+0x25c4>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <menu+0x23fe>
		   		devirmeSilindirTipi = 1;
 8002934:	4b72      	ldr	r3, [pc, #456]	@ (8002b00 <menu+0x25c4>)
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800293a:	f000 ff9d 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800293e:	2108      	movs	r1, #8
 8002940:	486c      	ldr	r0, [pc, #432]	@ (8002af4 <menu+0x25b8>)
 8002942:	f004 ff7d 	bl	8007840 <HAL_GPIO_ReadPin>
 8002946:	4603      	mov	r3, r0
 8002948:	2b01      	cmp	r3, #1
 800294a:	d10d      	bne.n	8002968 <menu+0x242c>
 800294c:	4b6a      	ldr	r3, [pc, #424]	@ (8002af8 <menu+0x25bc>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	f083 0301 	eor.w	r3, r3, #1
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d006      	beq.n	8002968 <menu+0x242c>
			eepromData[18] = devirmeSilindirTipi;
 800295a:	4b69      	ldr	r3, [pc, #420]	@ (8002b00 <menu+0x25c4>)
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	4b69      	ldr	r3, [pc, #420]	@ (8002b04 <menu+0x25c8>)
 8002960:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002962:	4b69      	ldr	r3, [pc, #420]	@ (8002b08 <menu+0x25cc>)
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002968:	4b68      	ldr	r3, [pc, #416]	@ (8002b0c <menu+0x25d0>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b15      	cmp	r3, #21
 800296e:	f040 809b 	bne.w	8002aa8 <menu+0x256c>
		if(dilSecim == 0) {
 8002972:	4b5e      	ldr	r3, [pc, #376]	@ (8002aec <menu+0x25b0>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d105      	bne.n	8002986 <menu+0x244a>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800297a:	4a65      	ldr	r2, [pc, #404]	@ (8002b10 <menu+0x25d4>)
 800297c:	2101      	movs	r1, #1
 800297e:	2001      	movs	r0, #1
 8002980:	f7fd fd95 	bl	80004ae <lcd_print>
 8002984:	e008      	b.n	8002998 <menu+0x245c>
		} else if(dilSecim == 1) {
 8002986:	4b59      	ldr	r3, [pc, #356]	@ (8002aec <menu+0x25b0>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d104      	bne.n	8002998 <menu+0x245c>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 800298e:	4a61      	ldr	r2, [pc, #388]	@ (8002b14 <menu+0x25d8>)
 8002990:	2101      	movs	r1, #1
 8002992:	2001      	movs	r0, #1
 8002994:	f7fd fd8b 	bl	80004ae <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8002998:	4b5f      	ldr	r3, [pc, #380]	@ (8002b18 <menu+0x25dc>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d112      	bne.n	80029c6 <menu+0x248a>
			if(dilSecim == 0) {
 80029a0:	4b52      	ldr	r3, [pc, #328]	@ (8002aec <menu+0x25b0>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d104      	bne.n	80029b2 <menu+0x2476>
				lcd_print(2, 1, "Tek tesir       ");
 80029a8:	4a5c      	ldr	r2, [pc, #368]	@ (8002b1c <menu+0x25e0>)
 80029aa:	2101      	movs	r1, #1
 80029ac:	2002      	movs	r0, #2
 80029ae:	f7fd fd7e 	bl	80004ae <lcd_print>
			}
			if(dilSecim == 1) {
 80029b2:	4b4e      	ldr	r3, [pc, #312]	@ (8002aec <menu+0x25b0>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d11c      	bne.n	80029f4 <menu+0x24b8>
				lcd_print(2, 1, "Single acting  ");
 80029ba:	4a59      	ldr	r2, [pc, #356]	@ (8002b20 <menu+0x25e4>)
 80029bc:	2101      	movs	r1, #1
 80029be:	2002      	movs	r0, #2
 80029c0:	f7fd fd75 	bl	80004ae <lcd_print>
 80029c4:	e016      	b.n	80029f4 <menu+0x24b8>
			}
		} else if(platformSilindirTipi == 1) {
 80029c6:	4b54      	ldr	r3, [pc, #336]	@ (8002b18 <menu+0x25dc>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d112      	bne.n	80029f4 <menu+0x24b8>
			if(dilSecim == 0) {
 80029ce:	4b47      	ldr	r3, [pc, #284]	@ (8002aec <menu+0x25b0>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <menu+0x24a6>
				lcd_print(2, 1, "Cift tesir      ");
 80029d6:	4a53      	ldr	r2, [pc, #332]	@ (8002b24 <menu+0x25e8>)
 80029d8:	2101      	movs	r1, #1
 80029da:	2002      	movs	r0, #2
 80029dc:	f7fd fd67 	bl	80004ae <lcd_print>
 80029e0:	e008      	b.n	80029f4 <menu+0x24b8>
			} else if(dilSecim == 1) {
 80029e2:	4b42      	ldr	r3, [pc, #264]	@ (8002aec <menu+0x25b0>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d104      	bne.n	80029f4 <menu+0x24b8>
				lcd_print(2, 1, "Double acting  ");
 80029ea:	4a41      	ldr	r2, [pc, #260]	@ (8002af0 <menu+0x25b4>)
 80029ec:	2101      	movs	r1, #1
 80029ee:	2002      	movs	r0, #2
 80029f0:	f7fd fd5d 	bl	80004ae <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029f4:	2102      	movs	r1, #2
 80029f6:	483f      	ldr	r0, [pc, #252]	@ (8002af4 <menu+0x25b8>)
 80029f8:	f004 ff22 	bl	8007840 <HAL_GPIO_ReadPin>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d115      	bne.n	8002a2e <menu+0x24f2>
 8002a02:	4b3d      	ldr	r3, [pc, #244]	@ (8002af8 <menu+0x25bc>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	f083 0301 	eor.w	r3, r3, #1
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00e      	beq.n	8002a2e <menu+0x24f2>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002a10:	4b41      	ldr	r3, [pc, #260]	@ (8002b18 <menu+0x25dc>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	3301      	adds	r3, #1
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	4b3f      	ldr	r3, [pc, #252]	@ (8002b18 <menu+0x25dc>)
 8002a1a:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002a1c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b18 <menu+0x25dc>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d902      	bls.n	8002a2a <menu+0x24ee>
				platformSilindirTipi = 0;
 8002a24:	4b3c      	ldr	r3, [pc, #240]	@ (8002b18 <menu+0x25dc>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a2a:	f000 ff25 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a2e:	2104      	movs	r1, #4
 8002a30:	4830      	ldr	r0, [pc, #192]	@ (8002af4 <menu+0x25b8>)
 8002a32:	f004 ff05 	bl	8007840 <HAL_GPIO_ReadPin>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d115      	bne.n	8002a68 <menu+0x252c>
 8002a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002af8 <menu+0x25bc>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	f083 0301 	eor.w	r3, r3, #1
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00e      	beq.n	8002a68 <menu+0x252c>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002a4a:	4b33      	ldr	r3, [pc, #204]	@ (8002b18 <menu+0x25dc>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4b31      	ldr	r3, [pc, #196]	@ (8002b18 <menu+0x25dc>)
 8002a54:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002a56:	4b30      	ldr	r3, [pc, #192]	@ (8002b18 <menu+0x25dc>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <menu+0x2528>
		   		platformSilindirTipi = 1;
 8002a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b18 <menu+0x25dc>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a64:	f000 ff08 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a68:	2108      	movs	r1, #8
 8002a6a:	4822      	ldr	r0, [pc, #136]	@ (8002af4 <menu+0x25b8>)
 8002a6c:	f004 fee8 	bl	8007840 <HAL_GPIO_ReadPin>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d118      	bne.n	8002aa8 <menu+0x256c>
 8002a76:	4b20      	ldr	r3, [pc, #128]	@ (8002af8 <menu+0x25bc>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	f083 0301 	eor.w	r3, r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d011      	beq.n	8002aa8 <menu+0x256c>
			eepromData[19] = platformSilindirTipi;
 8002a84:	4b24      	ldr	r3, [pc, #144]	@ (8002b18 <menu+0x25dc>)
 8002a86:	781a      	ldrb	r2, [r3, #0]
 8002a88:	4b1e      	ldr	r3, [pc, #120]	@ (8002b04 <menu+0x25c8>)
 8002a8a:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002a8c:	4b22      	ldr	r3, [pc, #136]	@ (8002b18 <menu+0x25dc>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d106      	bne.n	8002aa2 <menu+0x2566>
				altLimit = 1;
 8002a94:	4b24      	ldr	r3, [pc, #144]	@ (8002b28 <menu+0x25ec>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002a9a:	4b23      	ldr	r3, [pc, #140]	@ (8002b28 <menu+0x25ec>)
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	4b19      	ldr	r3, [pc, #100]	@ (8002b04 <menu+0x25c8>)
 8002aa0:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002aa2:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <menu+0x25cc>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002aa8:	4b18      	ldr	r3, [pc, #96]	@ (8002b0c <menu+0x25d0>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b16      	cmp	r3, #22
 8002aae:	f040 80a7 	bne.w	8002c00 <menu+0x26c4>
		if(dilSecim == 0) {
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8002aec <menu+0x25b0>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d105      	bne.n	8002ac6 <menu+0x258a>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8002aba:	4a1c      	ldr	r2, [pc, #112]	@ (8002b2c <menu+0x25f0>)
 8002abc:	2101      	movs	r1, #1
 8002abe:	2001      	movs	r0, #1
 8002ac0:	f7fd fcf5 	bl	80004ae <lcd_print>
 8002ac4:	e008      	b.n	8002ad8 <menu+0x259c>
		} else if(dilSecim == 1) {
 8002ac6:	4b09      	ldr	r3, [pc, #36]	@ (8002aec <menu+0x25b0>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d104      	bne.n	8002ad8 <menu+0x259c>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8002ace:	4a18      	ldr	r2, [pc, #96]	@ (8002b30 <menu+0x25f4>)
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	f7fd fceb 	bl	80004ae <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8002ad8:	4b04      	ldr	r3, [pc, #16]	@ (8002aec <menu+0x25b0>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d12b      	bne.n	8002b38 <menu+0x25fc>
				lcd_print(2, 1, "Kac Saniye     ");
 8002ae0:	4a14      	ldr	r2, [pc, #80]	@ (8002b34 <menu+0x25f8>)
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	2002      	movs	r0, #2
 8002ae6:	f7fd fce2 	bl	80004ae <lcd_print>
 8002aea:	e02e      	b.n	8002b4a <menu+0x260e>
 8002aec:	20000344 	.word	0x20000344
 8002af0:	0800c4f4 	.word	0x0800c4f4
 8002af4:	40010800 	.word	0x40010800
 8002af8:	20000352 	.word	0x20000352
 8002afc:	20000333 	.word	0x20000333
 8002b00:	20000336 	.word	0x20000336
 8002b04:	200002b8 	.word	0x200002b8
 8002b08:	2000034f 	.word	0x2000034f
 8002b0c:	20000324 	.word	0x20000324
 8002b10:	0800c504 	.word	0x0800c504
 8002b14:	0800c518 	.word	0x0800c518
 8002b18:	20000337 	.word	0x20000337
 8002b1c:	0800c4bc 	.word	0x0800c4bc
 8002b20:	0800c4d0 	.word	0x0800c4d0
 8002b24:	0800c4e0 	.word	0x0800c4e0
 8002b28:	2000032a 	.word	0x2000032a
 8002b2c:	0800c528 	.word	0x0800c528
 8002b30:	0800c53c 	.word	0x0800c53c
 8002b34:	0800c1dc 	.word	0x0800c1dc
			} else if(dilSecim == 1){
 8002b38:	4b93      	ldr	r3, [pc, #588]	@ (8002d88 <menu+0x284c>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d104      	bne.n	8002b4a <menu+0x260e>
				lcd_print(2, 1, "Second         ");
 8002b40:	4a92      	ldr	r2, [pc, #584]	@ (8002d8c <menu+0x2850>)
 8002b42:	2101      	movs	r1, #1
 8002b44:	2002      	movs	r0, #2
 8002b46:	f7fd fcb2 	bl	80004ae <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8002b4a:	4b91      	ldr	r3, [pc, #580]	@ (8002d90 <menu+0x2854>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	220a      	movs	r2, #10
 8002b50:	4990      	ldr	r1, [pc, #576]	@ (8002d94 <menu+0x2858>)
 8002b52:	4618      	mov	r0, r3
 8002b54:	f009 f832 	bl	800bbbc <itoa>
		lcd_print(2,16,snum);
 8002b58:	4a8e      	ldr	r2, [pc, #568]	@ (8002d94 <menu+0x2858>)
 8002b5a:	2110      	movs	r1, #16
 8002b5c:	2002      	movs	r0, #2
 8002b5e:	f7fd fca6 	bl	80004ae <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b62:	2102      	movs	r1, #2
 8002b64:	488c      	ldr	r0, [pc, #560]	@ (8002d98 <menu+0x285c>)
 8002b66:	f004 fe6b 	bl	8007840 <HAL_GPIO_ReadPin>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d115      	bne.n	8002b9c <menu+0x2660>
 8002b70:	4b8a      	ldr	r3, [pc, #552]	@ (8002d9c <menu+0x2860>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	f083 0301 	eor.w	r3, r3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00e      	beq.n	8002b9c <menu+0x2660>
			yukariValfTmr = yukariValfTmr + 1;
 8002b7e:	4b84      	ldr	r3, [pc, #528]	@ (8002d90 <menu+0x2854>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	3301      	adds	r3, #1
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4b82      	ldr	r3, [pc, #520]	@ (8002d90 <menu+0x2854>)
 8002b88:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002b8a:	4b81      	ldr	r3, [pc, #516]	@ (8002d90 <menu+0x2854>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b05      	cmp	r3, #5
 8002b90:	d902      	bls.n	8002b98 <menu+0x265c>
				yukariValfTmr = 0;
 8002b92:	4b7f      	ldr	r3, [pc, #508]	@ (8002d90 <menu+0x2854>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b98:	f000 fe6e 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b9c:	2104      	movs	r1, #4
 8002b9e:	487e      	ldr	r0, [pc, #504]	@ (8002d98 <menu+0x285c>)
 8002ba0:	f004 fe4e 	bl	8007840 <HAL_GPIO_ReadPin>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d115      	bne.n	8002bd6 <menu+0x269a>
 8002baa:	4b7c      	ldr	r3, [pc, #496]	@ (8002d9c <menu+0x2860>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	f083 0301 	eor.w	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00e      	beq.n	8002bd6 <menu+0x269a>
			yukariValfTmr = yukariValfTmr - 1;
 8002bb8:	4b75      	ldr	r3, [pc, #468]	@ (8002d90 <menu+0x2854>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	4b73      	ldr	r3, [pc, #460]	@ (8002d90 <menu+0x2854>)
 8002bc2:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002bc4:	4b72      	ldr	r3, [pc, #456]	@ (8002d90 <menu+0x2854>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b06      	cmp	r3, #6
 8002bca:	d902      	bls.n	8002bd2 <menu+0x2696>
		   		yukariValfTmr = 5;
 8002bcc:	4b70      	ldr	r3, [pc, #448]	@ (8002d90 <menu+0x2854>)
 8002bce:	2205      	movs	r2, #5
 8002bd0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bd2:	f000 fe51 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bd6:	2108      	movs	r1, #8
 8002bd8:	486f      	ldr	r0, [pc, #444]	@ (8002d98 <menu+0x285c>)
 8002bda:	f004 fe31 	bl	8007840 <HAL_GPIO_ReadPin>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d10d      	bne.n	8002c00 <menu+0x26c4>
 8002be4:	4b6d      	ldr	r3, [pc, #436]	@ (8002d9c <menu+0x2860>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	f083 0301 	eor.w	r3, r3, #1
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d006      	beq.n	8002c00 <menu+0x26c4>
			eepromData[20] = yukariValfTmr;
 8002bf2:	4b67      	ldr	r3, [pc, #412]	@ (8002d90 <menu+0x2854>)
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8002da0 <menu+0x2864>)
 8002bf8:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002bfa:	4b6a      	ldr	r3, [pc, #424]	@ (8002da4 <menu+0x2868>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002c00:	4b69      	ldr	r3, [pc, #420]	@ (8002da8 <menu+0x286c>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b17      	cmp	r3, #23
 8002c06:	f040 8081 	bne.w	8002d0c <menu+0x27d0>
		if(dilSecim == 0) {
 8002c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8002d88 <menu+0x284c>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d105      	bne.n	8002c1e <menu+0x26e2>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8002c12:	4a66      	ldr	r2, [pc, #408]	@ (8002dac <menu+0x2870>)
 8002c14:	2101      	movs	r1, #1
 8002c16:	2001      	movs	r0, #1
 8002c18:	f7fd fc49 	bl	80004ae <lcd_print>
 8002c1c:	e008      	b.n	8002c30 <menu+0x26f4>
		} else if(dilSecim == 1) {
 8002c1e:	4b5a      	ldr	r3, [pc, #360]	@ (8002d88 <menu+0x284c>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d104      	bne.n	8002c30 <menu+0x26f4>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8002c26:	4a62      	ldr	r2, [pc, #392]	@ (8002db0 <menu+0x2874>)
 8002c28:	2101      	movs	r1, #1
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	f7fd fc3f 	bl	80004ae <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8002c30:	4b55      	ldr	r3, [pc, #340]	@ (8002d88 <menu+0x284c>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d105      	bne.n	8002c44 <menu+0x2708>
				lcd_print(2, 1, "Kac Saniye     ");
 8002c38:	4a5e      	ldr	r2, [pc, #376]	@ (8002db4 <menu+0x2878>)
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	2002      	movs	r0, #2
 8002c3e:	f7fd fc36 	bl	80004ae <lcd_print>
 8002c42:	e008      	b.n	8002c56 <menu+0x271a>
			} else if(dilSecim == 1) {
 8002c44:	4b50      	ldr	r3, [pc, #320]	@ (8002d88 <menu+0x284c>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d104      	bne.n	8002c56 <menu+0x271a>
				lcd_print(2, 1, "Second         ");
 8002c4c:	4a4f      	ldr	r2, [pc, #316]	@ (8002d8c <menu+0x2850>)
 8002c4e:	2101      	movs	r1, #1
 8002c50:	2002      	movs	r0, #2
 8002c52:	f7fd fc2c 	bl	80004ae <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8002c56:	4b58      	ldr	r3, [pc, #352]	@ (8002db8 <menu+0x287c>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	220a      	movs	r2, #10
 8002c5c:	494d      	ldr	r1, [pc, #308]	@ (8002d94 <menu+0x2858>)
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f008 ffac 	bl	800bbbc <itoa>
		lcd_print(2,16,snum);
 8002c64:	4a4b      	ldr	r2, [pc, #300]	@ (8002d94 <menu+0x2858>)
 8002c66:	2110      	movs	r1, #16
 8002c68:	2002      	movs	r0, #2
 8002c6a:	f7fd fc20 	bl	80004ae <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c6e:	2102      	movs	r1, #2
 8002c70:	4849      	ldr	r0, [pc, #292]	@ (8002d98 <menu+0x285c>)
 8002c72:	f004 fde5 	bl	8007840 <HAL_GPIO_ReadPin>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d115      	bne.n	8002ca8 <menu+0x276c>
 8002c7c:	4b47      	ldr	r3, [pc, #284]	@ (8002d9c <menu+0x2860>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	f083 0301 	eor.w	r3, r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00e      	beq.n	8002ca8 <menu+0x276c>
			asagiValfTmr = asagiValfTmr + 1;
 8002c8a:	4b4b      	ldr	r3, [pc, #300]	@ (8002db8 <menu+0x287c>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4b49      	ldr	r3, [pc, #292]	@ (8002db8 <menu+0x287c>)
 8002c94:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002c96:	4b48      	ldr	r3, [pc, #288]	@ (8002db8 <menu+0x287c>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b05      	cmp	r3, #5
 8002c9c:	d902      	bls.n	8002ca4 <menu+0x2768>
				asagiValfTmr = 0;
 8002c9e:	4b46      	ldr	r3, [pc, #280]	@ (8002db8 <menu+0x287c>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ca4:	f000 fde8 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ca8:	2104      	movs	r1, #4
 8002caa:	483b      	ldr	r0, [pc, #236]	@ (8002d98 <menu+0x285c>)
 8002cac:	f004 fdc8 	bl	8007840 <HAL_GPIO_ReadPin>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d115      	bne.n	8002ce2 <menu+0x27a6>
 8002cb6:	4b39      	ldr	r3, [pc, #228]	@ (8002d9c <menu+0x2860>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	f083 0301 	eor.w	r3, r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00e      	beq.n	8002ce2 <menu+0x27a6>
			asagiValfTmr = asagiValfTmr - 1;
 8002cc4:	4b3c      	ldr	r3, [pc, #240]	@ (8002db8 <menu+0x287c>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8002db8 <menu+0x287c>)
 8002cce:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002cd0:	4b39      	ldr	r3, [pc, #228]	@ (8002db8 <menu+0x287c>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b06      	cmp	r3, #6
 8002cd6:	d902      	bls.n	8002cde <menu+0x27a2>
		   		asagiValfTmr = 5;
 8002cd8:	4b37      	ldr	r3, [pc, #220]	@ (8002db8 <menu+0x287c>)
 8002cda:	2205      	movs	r2, #5
 8002cdc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002cde:	f000 fdcb 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ce2:	2108      	movs	r1, #8
 8002ce4:	482c      	ldr	r0, [pc, #176]	@ (8002d98 <menu+0x285c>)
 8002ce6:	f004 fdab 	bl	8007840 <HAL_GPIO_ReadPin>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d10d      	bne.n	8002d0c <menu+0x27d0>
 8002cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d9c <menu+0x2860>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	f083 0301 	eor.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d006      	beq.n	8002d0c <menu+0x27d0>
			eepromData[21] = asagiValfTmr;
 8002cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8002db8 <menu+0x287c>)
 8002d00:	781a      	ldrb	r2, [r3, #0]
 8002d02:	4b27      	ldr	r3, [pc, #156]	@ (8002da0 <menu+0x2864>)
 8002d04:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002d06:	4b27      	ldr	r3, [pc, #156]	@ (8002da4 <menu+0x2868>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002d0c:	4b26      	ldr	r3, [pc, #152]	@ (8002da8 <menu+0x286c>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b18      	cmp	r3, #24
 8002d12:	f040 80c1 	bne.w	8002e98 <menu+0x295c>
		if(devirmeYuruyusSecim == 2) {
 8002d16:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <menu+0x2880>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d113      	bne.n	8002d46 <menu+0x280a>
			if(dilSecim == 0) {
 8002d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d88 <menu+0x284c>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d105      	bne.n	8002d32 <menu+0x27f6>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8002d26:	4a26      	ldr	r2, [pc, #152]	@ (8002dc0 <menu+0x2884>)
 8002d28:	2101      	movs	r1, #1
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	f7fd fbbf 	bl	80004ae <lcd_print>
 8002d30:	e020      	b.n	8002d74 <menu+0x2838>
			} else if(dilSecim == 1) {
 8002d32:	4b15      	ldr	r3, [pc, #84]	@ (8002d88 <menu+0x284c>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d11c      	bne.n	8002d74 <menu+0x2838>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8002d3a:	4a22      	ldr	r2, [pc, #136]	@ (8002dc4 <menu+0x2888>)
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	2001      	movs	r0, #1
 8002d40:	f7fd fbb5 	bl	80004ae <lcd_print>
 8002d44:	e016      	b.n	8002d74 <menu+0x2838>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002d46:	4b1d      	ldr	r3, [pc, #116]	@ (8002dbc <menu+0x2880>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d112      	bne.n	8002d74 <menu+0x2838>
			if(dilSecim == 0) {
 8002d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d88 <menu+0x284c>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d105      	bne.n	8002d62 <menu+0x2826>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8002d56:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc8 <menu+0x288c>)
 8002d58:	2101      	movs	r1, #1
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	f7fd fba7 	bl	80004ae <lcd_print>
 8002d60:	e008      	b.n	8002d74 <menu+0x2838>
			} else if(dilSecim == 1) {
 8002d62:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <menu+0x284c>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d104      	bne.n	8002d74 <menu+0x2838>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8002d6a:	4a18      	ldr	r2, [pc, #96]	@ (8002dcc <menu+0x2890>)
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	2001      	movs	r0, #1
 8002d70:	f7fd fb9d 	bl	80004ae <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8002d74:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <menu+0x284c>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d129      	bne.n	8002dd0 <menu+0x2894>
				lcd_print(2, 1, "Kac Saniye     ");
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002db4 <menu+0x2878>)
 8002d7e:	2101      	movs	r1, #1
 8002d80:	2002      	movs	r0, #2
 8002d82:	f7fd fb94 	bl	80004ae <lcd_print>
 8002d86:	e02c      	b.n	8002de2 <menu+0x28a6>
 8002d88:	20000344 	.word	0x20000344
 8002d8c:	0800c550 	.word	0x0800c550
 8002d90:	20000338 	.word	0x20000338
 8002d94:	200002f8 	.word	0x200002f8
 8002d98:	40010800 	.word	0x40010800
 8002d9c:	20000352 	.word	0x20000352
 8002da0:	200002b8 	.word	0x200002b8
 8002da4:	2000034f 	.word	0x2000034f
 8002da8:	20000324 	.word	0x20000324
 8002dac:	0800c560 	.word	0x0800c560
 8002db0:	0800c574 	.word	0x0800c574
 8002db4:	0800c1dc 	.word	0x0800c1dc
 8002db8:	20000339 	.word	0x20000339
 8002dbc:	20000333 	.word	0x20000333
 8002dc0:	0800c588 	.word	0x0800c588
 8002dc4:	0800c59c 	.word	0x0800c59c
 8002dc8:	0800c5b0 	.word	0x0800c5b0
 8002dcc:	0800c5c4 	.word	0x0800c5c4
			} else if(dilSecim == 1) {
 8002dd0:	4ba0      	ldr	r3, [pc, #640]	@ (8003054 <menu+0x2b18>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d104      	bne.n	8002de2 <menu+0x28a6>
				lcd_print(2, 1, "Second         ");
 8002dd8:	4a9f      	ldr	r2, [pc, #636]	@ (8003058 <menu+0x2b1c>)
 8002dda:	2101      	movs	r1, #1
 8002ddc:	2002      	movs	r0, #2
 8002dde:	f7fd fb66 	bl	80004ae <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8002de2:	4b9e      	ldr	r3, [pc, #632]	@ (800305c <menu+0x2b20>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	220a      	movs	r2, #10
 8002de8:	499d      	ldr	r1, [pc, #628]	@ (8003060 <menu+0x2b24>)
 8002dea:	4618      	mov	r0, r3
 8002dec:	f008 fee6 	bl	800bbbc <itoa>
		lcd_print(2, 16, snum);
 8002df0:	4a9b      	ldr	r2, [pc, #620]	@ (8003060 <menu+0x2b24>)
 8002df2:	2110      	movs	r1, #16
 8002df4:	2002      	movs	r0, #2
 8002df6:	f7fd fb5a 	bl	80004ae <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	4899      	ldr	r0, [pc, #612]	@ (8003064 <menu+0x2b28>)
 8002dfe:	f004 fd1f 	bl	8007840 <HAL_GPIO_ReadPin>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d115      	bne.n	8002e34 <menu+0x28f8>
 8002e08:	4b97      	ldr	r3, [pc, #604]	@ (8003068 <menu+0x2b2c>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	f083 0301 	eor.w	r3, r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00e      	beq.n	8002e34 <menu+0x28f8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8002e16:	4b91      	ldr	r3, [pc, #580]	@ (800305c <menu+0x2b20>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4b8f      	ldr	r3, [pc, #572]	@ (800305c <menu+0x2b20>)
 8002e20:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8002e22:	4b8e      	ldr	r3, [pc, #568]	@ (800305c <menu+0x2b20>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b05      	cmp	r3, #5
 8002e28:	d902      	bls.n	8002e30 <menu+0x28f4>
				devirmeYukariIleriTmr = 0;
 8002e2a:	4b8c      	ldr	r3, [pc, #560]	@ (800305c <menu+0x2b20>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e30:	f000 fd22 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e34:	2104      	movs	r1, #4
 8002e36:	488b      	ldr	r0, [pc, #556]	@ (8003064 <menu+0x2b28>)
 8002e38:	f004 fd02 	bl	8007840 <HAL_GPIO_ReadPin>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d115      	bne.n	8002e6e <menu+0x2932>
 8002e42:	4b89      	ldr	r3, [pc, #548]	@ (8003068 <menu+0x2b2c>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	f083 0301 	eor.w	r3, r3, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00e      	beq.n	8002e6e <menu+0x2932>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8002e50:	4b82      	ldr	r3, [pc, #520]	@ (800305c <menu+0x2b20>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	4b80      	ldr	r3, [pc, #512]	@ (800305c <menu+0x2b20>)
 8002e5a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8002e5c:	4b7f      	ldr	r3, [pc, #508]	@ (800305c <menu+0x2b20>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b06      	cmp	r3, #6
 8002e62:	d902      	bls.n	8002e6a <menu+0x292e>
		   		devirmeYukariIleriTmr = 5;
 8002e64:	4b7d      	ldr	r3, [pc, #500]	@ (800305c <menu+0x2b20>)
 8002e66:	2205      	movs	r2, #5
 8002e68:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e6a:	f000 fd05 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e6e:	2108      	movs	r1, #8
 8002e70:	487c      	ldr	r0, [pc, #496]	@ (8003064 <menu+0x2b28>)
 8002e72:	f004 fce5 	bl	8007840 <HAL_GPIO_ReadPin>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d10d      	bne.n	8002e98 <menu+0x295c>
 8002e7c:	4b7a      	ldr	r3, [pc, #488]	@ (8003068 <menu+0x2b2c>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	f083 0301 	eor.w	r3, r3, #1
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d006      	beq.n	8002e98 <menu+0x295c>
			eepromData[22] = devirmeYukariIleriTmr;
 8002e8a:	4b74      	ldr	r3, [pc, #464]	@ (800305c <menu+0x2b20>)
 8002e8c:	781a      	ldrb	r2, [r3, #0]
 8002e8e:	4b77      	ldr	r3, [pc, #476]	@ (800306c <menu+0x2b30>)
 8002e90:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8002e92:	4b77      	ldr	r3, [pc, #476]	@ (8003070 <menu+0x2b34>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8002e98:	4b76      	ldr	r3, [pc, #472]	@ (8003074 <menu+0x2b38>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b19      	cmp	r3, #25
 8002e9e:	f040 809d 	bne.w	8002fdc <menu+0x2aa0>
		if(devirmeYuruyusSecim == 2) {
 8002ea2:	4b75      	ldr	r3, [pc, #468]	@ (8003078 <menu+0x2b3c>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d113      	bne.n	8002ed2 <menu+0x2996>
			if(dilSecim == 0) {
 8002eaa:	4b6a      	ldr	r3, [pc, #424]	@ (8003054 <menu+0x2b18>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d105      	bne.n	8002ebe <menu+0x2982>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8002eb2:	4a72      	ldr	r2, [pc, #456]	@ (800307c <menu+0x2b40>)
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	f7fd faf9 	bl	80004ae <lcd_print>
 8002ebc:	e020      	b.n	8002f00 <menu+0x29c4>
			} else if(dilSecim == 1) {
 8002ebe:	4b65      	ldr	r3, [pc, #404]	@ (8003054 <menu+0x2b18>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d11c      	bne.n	8002f00 <menu+0x29c4>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8002ec6:	4a6e      	ldr	r2, [pc, #440]	@ (8003080 <menu+0x2b44>)
 8002ec8:	2101      	movs	r1, #1
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f7fd faef 	bl	80004ae <lcd_print>
 8002ed0:	e016      	b.n	8002f00 <menu+0x29c4>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002ed2:	4b69      	ldr	r3, [pc, #420]	@ (8003078 <menu+0x2b3c>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d112      	bne.n	8002f00 <menu+0x29c4>
			if(dilSecim == 0) {
 8002eda:	4b5e      	ldr	r3, [pc, #376]	@ (8003054 <menu+0x2b18>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d105      	bne.n	8002eee <menu+0x29b2>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8002ee2:	4a68      	ldr	r2, [pc, #416]	@ (8003084 <menu+0x2b48>)
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	f7fd fae1 	bl	80004ae <lcd_print>
 8002eec:	e008      	b.n	8002f00 <menu+0x29c4>
			} else if(dilSecim == 1) {
 8002eee:	4b59      	ldr	r3, [pc, #356]	@ (8003054 <menu+0x2b18>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d104      	bne.n	8002f00 <menu+0x29c4>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8002ef6:	4a64      	ldr	r2, [pc, #400]	@ (8003088 <menu+0x2b4c>)
 8002ef8:	2101      	movs	r1, #1
 8002efa:	2001      	movs	r0, #1
 8002efc:	f7fd fad7 	bl	80004ae <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8002f00:	4b54      	ldr	r3, [pc, #336]	@ (8003054 <menu+0x2b18>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d105      	bne.n	8002f14 <menu+0x29d8>
				lcd_print(2, 1, "Kac Saniye     ");
 8002f08:	4a60      	ldr	r2, [pc, #384]	@ (800308c <menu+0x2b50>)
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	2002      	movs	r0, #2
 8002f0e:	f7fd face 	bl	80004ae <lcd_print>
 8002f12:	e008      	b.n	8002f26 <menu+0x29ea>
			} else if(dilSecim == 1) {
 8002f14:	4b4f      	ldr	r3, [pc, #316]	@ (8003054 <menu+0x2b18>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d104      	bne.n	8002f26 <menu+0x29ea>
				lcd_print(2, 1, "Second         ");
 8002f1c:	4a4e      	ldr	r2, [pc, #312]	@ (8003058 <menu+0x2b1c>)
 8002f1e:	2101      	movs	r1, #1
 8002f20:	2002      	movs	r0, #2
 8002f22:	f7fd fac4 	bl	80004ae <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8002f26:	4b5a      	ldr	r3, [pc, #360]	@ (8003090 <menu+0x2b54>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	220a      	movs	r2, #10
 8002f2c:	494c      	ldr	r1, [pc, #304]	@ (8003060 <menu+0x2b24>)
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f008 fe44 	bl	800bbbc <itoa>
		lcd_print(2,16,snum);
 8002f34:	4a4a      	ldr	r2, [pc, #296]	@ (8003060 <menu+0x2b24>)
 8002f36:	2110      	movs	r1, #16
 8002f38:	2002      	movs	r0, #2
 8002f3a:	f7fd fab8 	bl	80004ae <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f3e:	2102      	movs	r1, #2
 8002f40:	4848      	ldr	r0, [pc, #288]	@ (8003064 <menu+0x2b28>)
 8002f42:	f004 fc7d 	bl	8007840 <HAL_GPIO_ReadPin>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d115      	bne.n	8002f78 <menu+0x2a3c>
 8002f4c:	4b46      	ldr	r3, [pc, #280]	@ (8003068 <menu+0x2b2c>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	f083 0301 	eor.w	r3, r3, #1
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00e      	beq.n	8002f78 <menu+0x2a3c>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8002f5a:	4b4d      	ldr	r3, [pc, #308]	@ (8003090 <menu+0x2b54>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	4b4b      	ldr	r3, [pc, #300]	@ (8003090 <menu+0x2b54>)
 8002f64:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8002f66:	4b4a      	ldr	r3, [pc, #296]	@ (8003090 <menu+0x2b54>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b05      	cmp	r3, #5
 8002f6c:	d902      	bls.n	8002f74 <menu+0x2a38>
				devirmeAsagiGeriTmr = 0;
 8002f6e:	4b48      	ldr	r3, [pc, #288]	@ (8003090 <menu+0x2b54>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f74:	f000 fc80 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f78:	2104      	movs	r1, #4
 8002f7a:	483a      	ldr	r0, [pc, #232]	@ (8003064 <menu+0x2b28>)
 8002f7c:	f004 fc60 	bl	8007840 <HAL_GPIO_ReadPin>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d115      	bne.n	8002fb2 <menu+0x2a76>
 8002f86:	4b38      	ldr	r3, [pc, #224]	@ (8003068 <menu+0x2b2c>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	f083 0301 	eor.w	r3, r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00e      	beq.n	8002fb2 <menu+0x2a76>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8002f94:	4b3e      	ldr	r3, [pc, #248]	@ (8003090 <menu+0x2b54>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8003090 <menu+0x2b54>)
 8002f9e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8002fa0:	4b3b      	ldr	r3, [pc, #236]	@ (8003090 <menu+0x2b54>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b06      	cmp	r3, #6
 8002fa6:	d902      	bls.n	8002fae <menu+0x2a72>
		   		devirmeAsagiGeriTmr = 5;
 8002fa8:	4b39      	ldr	r3, [pc, #228]	@ (8003090 <menu+0x2b54>)
 8002faa:	2205      	movs	r2, #5
 8002fac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fae:	f000 fc63 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fb2:	2108      	movs	r1, #8
 8002fb4:	482b      	ldr	r0, [pc, #172]	@ (8003064 <menu+0x2b28>)
 8002fb6:	f004 fc43 	bl	8007840 <HAL_GPIO_ReadPin>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d10d      	bne.n	8002fdc <menu+0x2aa0>
 8002fc0:	4b29      	ldr	r3, [pc, #164]	@ (8003068 <menu+0x2b2c>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	f083 0301 	eor.w	r3, r3, #1
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d006      	beq.n	8002fdc <menu+0x2aa0>
			eepromData[23] = devirmeAsagiGeriTmr;
 8002fce:	4b30      	ldr	r3, [pc, #192]	@ (8003090 <menu+0x2b54>)
 8002fd0:	781a      	ldrb	r2, [r3, #0]
 8002fd2:	4b26      	ldr	r3, [pc, #152]	@ (800306c <menu+0x2b30>)
 8002fd4:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8002fd6:	4b26      	ldr	r3, [pc, #152]	@ (8003070 <menu+0x2b34>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8002fdc:	4b25      	ldr	r3, [pc, #148]	@ (8003074 <menu+0x2b38>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b1a      	cmp	r3, #26
 8002fe2:	f040 80f7 	bne.w	80031d4 <menu+0x2c98>
		if(dilSecim == 0) {
 8002fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8003054 <menu+0x2b18>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d105      	bne.n	8002ffa <menu+0x2abe>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8002fee:	4a29      	ldr	r2, [pc, #164]	@ (8003094 <menu+0x2b58>)
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	2001      	movs	r0, #1
 8002ff4:	f7fd fa5b 	bl	80004ae <lcd_print>
 8002ff8:	e008      	b.n	800300c <menu+0x2ad0>
		} else if(dilSecim == 1) {
 8002ffa:	4b16      	ldr	r3, [pc, #88]	@ (8003054 <menu+0x2b18>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d104      	bne.n	800300c <menu+0x2ad0>
			lcd_print(1, 1, "WORKING TIME    ");
 8003002:	4a25      	ldr	r2, [pc, #148]	@ (8003098 <menu+0x2b5c>)
 8003004:	2101      	movs	r1, #1
 8003006:	2001      	movs	r0, #1
 8003008:	f7fd fa51 	bl	80004ae <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 800300c:	4b23      	ldr	r3, [pc, #140]	@ (800309c <menu+0x2b60>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b63      	cmp	r3, #99	@ 0x63
 8003012:	d945      	bls.n	80030a0 <menu+0x2b64>
			if(dilSecim == 0) {
 8003014:	4b0f      	ldr	r3, [pc, #60]	@ (8003054 <menu+0x2b18>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d104      	bne.n	8003026 <menu+0x2aea>
				lcd_print(2, 1, "Kac Saniye     ");
 800301c:	4a1b      	ldr	r2, [pc, #108]	@ (800308c <menu+0x2b50>)
 800301e:	2101      	movs	r1, #1
 8003020:	2002      	movs	r0, #2
 8003022:	f7fd fa44 	bl	80004ae <lcd_print>
			}
			if(dilSecim == 1) {
 8003026:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <menu+0x2b18>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d104      	bne.n	8003038 <menu+0x2afc>
				lcd_print(2, 1, "Second         ");
 800302e:	4a0a      	ldr	r2, [pc, #40]	@ (8003058 <menu+0x2b1c>)
 8003030:	2101      	movs	r1, #1
 8003032:	2002      	movs	r0, #2
 8003034:	f7fd fa3b 	bl	80004ae <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003038:	4b18      	ldr	r3, [pc, #96]	@ (800309c <menu+0x2b60>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	220a      	movs	r2, #10
 800303e:	4908      	ldr	r1, [pc, #32]	@ (8003060 <menu+0x2b24>)
 8003040:	4618      	mov	r0, r3
 8003042:	f008 fdbb 	bl	800bbbc <itoa>
			lcd_print(2,14,snum);
 8003046:	4a06      	ldr	r2, [pc, #24]	@ (8003060 <menu+0x2b24>)
 8003048:	210e      	movs	r1, #14
 800304a:	2002      	movs	r0, #2
 800304c:	f7fd fa2f 	bl	80004ae <lcd_print>
 8003050:	e071      	b.n	8003136 <menu+0x2bfa>
 8003052:	bf00      	nop
 8003054:	20000344 	.word	0x20000344
 8003058:	0800c550 	.word	0x0800c550
 800305c:	2000033a 	.word	0x2000033a
 8003060:	200002f8 	.word	0x200002f8
 8003064:	40010800 	.word	0x40010800
 8003068:	20000352 	.word	0x20000352
 800306c:	200002b8 	.word	0x200002b8
 8003070:	2000034f 	.word	0x2000034f
 8003074:	20000324 	.word	0x20000324
 8003078:	20000333 	.word	0x20000333
 800307c:	0800c5d8 	.word	0x0800c5d8
 8003080:	0800c5ec 	.word	0x0800c5ec
 8003084:	0800c600 	.word	0x0800c600
 8003088:	0800c614 	.word	0x0800c614
 800308c:	0800c1dc 	.word	0x0800c1dc
 8003090:	2000033b 	.word	0x2000033b
 8003094:	0800c628 	.word	0x0800c628
 8003098:	0800c63c 	.word	0x0800c63c
 800309c:	2000033c 	.word	0x2000033c

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80030a0:	4b9e      	ldr	r3, [pc, #632]	@ (800331c <menu+0x2de0>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b09      	cmp	r3, #9
 80030a6:	d923      	bls.n	80030f0 <menu+0x2bb4>
 80030a8:	4b9c      	ldr	r3, [pc, #624]	@ (800331c <menu+0x2de0>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b63      	cmp	r3, #99	@ 0x63
 80030ae:	d81f      	bhi.n	80030f0 <menu+0x2bb4>
			if(dilSecim == 0) {
 80030b0:	4b9b      	ldr	r3, [pc, #620]	@ (8003320 <menu+0x2de4>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d105      	bne.n	80030c4 <menu+0x2b88>
				lcd_print(2, 1, "Kac Saniye     ");
 80030b8:	4a9a      	ldr	r2, [pc, #616]	@ (8003324 <menu+0x2de8>)
 80030ba:	2101      	movs	r1, #1
 80030bc:	2002      	movs	r0, #2
 80030be:	f7fd f9f6 	bl	80004ae <lcd_print>
 80030c2:	e008      	b.n	80030d6 <menu+0x2b9a>
			} else if(dilSecim == 1) {
 80030c4:	4b96      	ldr	r3, [pc, #600]	@ (8003320 <menu+0x2de4>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d104      	bne.n	80030d6 <menu+0x2b9a>
				lcd_print(2, 1, "Second         ");
 80030cc:	4a96      	ldr	r2, [pc, #600]	@ (8003328 <menu+0x2dec>)
 80030ce:	2101      	movs	r1, #1
 80030d0:	2002      	movs	r0, #2
 80030d2:	f7fd f9ec 	bl	80004ae <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80030d6:	4b91      	ldr	r3, [pc, #580]	@ (800331c <menu+0x2de0>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	220a      	movs	r2, #10
 80030dc:	4993      	ldr	r1, [pc, #588]	@ (800332c <menu+0x2df0>)
 80030de:	4618      	mov	r0, r3
 80030e0:	f008 fd6c 	bl	800bbbc <itoa>
			lcd_print(2, 15, snum);
 80030e4:	4a91      	ldr	r2, [pc, #580]	@ (800332c <menu+0x2df0>)
 80030e6:	210f      	movs	r1, #15
 80030e8:	2002      	movs	r0, #2
 80030ea:	f7fd f9e0 	bl	80004ae <lcd_print>
		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80030ee:	e022      	b.n	8003136 <menu+0x2bfa>
		} else if(makineCalismaTmr <=  9) {
 80030f0:	4b8a      	ldr	r3, [pc, #552]	@ (800331c <menu+0x2de0>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b09      	cmp	r3, #9
 80030f6:	d81e      	bhi.n	8003136 <menu+0x2bfa>
			if(dilSecim == 0) {
 80030f8:	4b89      	ldr	r3, [pc, #548]	@ (8003320 <menu+0x2de4>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d105      	bne.n	800310c <menu+0x2bd0>
				lcd_print(2, 1, "Kac Saniye     ");
 8003100:	4a88      	ldr	r2, [pc, #544]	@ (8003324 <menu+0x2de8>)
 8003102:	2101      	movs	r1, #1
 8003104:	2002      	movs	r0, #2
 8003106:	f7fd f9d2 	bl	80004ae <lcd_print>
 800310a:	e008      	b.n	800311e <menu+0x2be2>
			} else if(dilSecim == 1) {
 800310c:	4b84      	ldr	r3, [pc, #528]	@ (8003320 <menu+0x2de4>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d104      	bne.n	800311e <menu+0x2be2>
				lcd_print(2, 1, "Second         ");
 8003114:	4a84      	ldr	r2, [pc, #528]	@ (8003328 <menu+0x2dec>)
 8003116:	2101      	movs	r1, #1
 8003118:	2002      	movs	r0, #2
 800311a:	f7fd f9c8 	bl	80004ae <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800311e:	4b7f      	ldr	r3, [pc, #508]	@ (800331c <menu+0x2de0>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	220a      	movs	r2, #10
 8003124:	4981      	ldr	r1, [pc, #516]	@ (800332c <menu+0x2df0>)
 8003126:	4618      	mov	r0, r3
 8003128:	f008 fd48 	bl	800bbbc <itoa>
			lcd_print(2, 16, snum);
 800312c:	4a7f      	ldr	r2, [pc, #508]	@ (800332c <menu+0x2df0>)
 800312e:	2110      	movs	r1, #16
 8003130:	2002      	movs	r0, #2
 8003132:	f7fd f9bc 	bl	80004ae <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003136:	2102      	movs	r1, #2
 8003138:	487d      	ldr	r0, [pc, #500]	@ (8003330 <menu+0x2df4>)
 800313a:	f004 fb81 	bl	8007840 <HAL_GPIO_ReadPin>
 800313e:	4603      	mov	r3, r0
 8003140:	2b01      	cmp	r3, #1
 8003142:	d115      	bne.n	8003170 <menu+0x2c34>
 8003144:	4b7b      	ldr	r3, [pc, #492]	@ (8003334 <menu+0x2df8>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	f083 0301 	eor.w	r3, r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00e      	beq.n	8003170 <menu+0x2c34>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003152:	4b72      	ldr	r3, [pc, #456]	@ (800331c <menu+0x2de0>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	3301      	adds	r3, #1
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4b70      	ldr	r3, [pc, #448]	@ (800331c <menu+0x2de0>)
 800315c:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800315e:	4b6f      	ldr	r3, [pc, #444]	@ (800331c <menu+0x2de0>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2bb4      	cmp	r3, #180	@ 0xb4
 8003164:	d902      	bls.n	800316c <menu+0x2c30>
				makineCalismaTmr = 0;
 8003166:	4b6d      	ldr	r3, [pc, #436]	@ (800331c <menu+0x2de0>)
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800316c:	f000 fb84 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003170:	2104      	movs	r1, #4
 8003172:	486f      	ldr	r0, [pc, #444]	@ (8003330 <menu+0x2df4>)
 8003174:	f004 fb64 	bl	8007840 <HAL_GPIO_ReadPin>
 8003178:	4603      	mov	r3, r0
 800317a:	2b01      	cmp	r3, #1
 800317c:	d115      	bne.n	80031aa <menu+0x2c6e>
 800317e:	4b6d      	ldr	r3, [pc, #436]	@ (8003334 <menu+0x2df8>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	f083 0301 	eor.w	r3, r3, #1
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00e      	beq.n	80031aa <menu+0x2c6e>
			makineCalismaTmr = makineCalismaTmr - 1;
 800318c:	4b63      	ldr	r3, [pc, #396]	@ (800331c <menu+0x2de0>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	3b01      	subs	r3, #1
 8003192:	b2da      	uxtb	r2, r3
 8003194:	4b61      	ldr	r3, [pc, #388]	@ (800331c <menu+0x2de0>)
 8003196:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003198:	4b60      	ldr	r3, [pc, #384]	@ (800331c <menu+0x2de0>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2bb5      	cmp	r3, #181	@ 0xb5
 800319e:	d902      	bls.n	80031a6 <menu+0x2c6a>
		   		makineCalismaTmr = 180;
 80031a0:	4b5e      	ldr	r3, [pc, #376]	@ (800331c <menu+0x2de0>)
 80031a2:	22b4      	movs	r2, #180	@ 0xb4
 80031a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031a6:	f000 fb67 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031aa:	2108      	movs	r1, #8
 80031ac:	4860      	ldr	r0, [pc, #384]	@ (8003330 <menu+0x2df4>)
 80031ae:	f004 fb47 	bl	8007840 <HAL_GPIO_ReadPin>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d10d      	bne.n	80031d4 <menu+0x2c98>
 80031b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003334 <menu+0x2df8>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	f083 0301 	eor.w	r3, r3, #1
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d006      	beq.n	80031d4 <menu+0x2c98>
			eepromData[24] = makineCalismaTmr;
 80031c6:	4b55      	ldr	r3, [pc, #340]	@ (800331c <menu+0x2de0>)
 80031c8:	781a      	ldrb	r2, [r3, #0]
 80031ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003338 <menu+0x2dfc>)
 80031cc:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80031ce:	4b5b      	ldr	r3, [pc, #364]	@ (800333c <menu+0x2e00>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80031d4:	4b5a      	ldr	r3, [pc, #360]	@ (8003340 <menu+0x2e04>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b1b      	cmp	r3, #27
 80031da:	f040 8083 	bne.w	80032e4 <menu+0x2da8>
		lcd_print(1, 1, "BUZZER          ");
 80031de:	4a59      	ldr	r2, [pc, #356]	@ (8003344 <menu+0x2e08>)
 80031e0:	2101      	movs	r1, #1
 80031e2:	2001      	movs	r0, #1
 80031e4:	f7fd f963 	bl	80004ae <lcd_print>

		if(buzzer == 0) {
 80031e8:	4b57      	ldr	r3, [pc, #348]	@ (8003348 <menu+0x2e0c>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d113      	bne.n	8003218 <menu+0x2cdc>
			if(dilSecim == 0) {
 80031f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003320 <menu+0x2de4>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <menu+0x2cc8>
				lcd_print(2, 1, "Pasif           ");
 80031f8:	4a54      	ldr	r2, [pc, #336]	@ (800334c <menu+0x2e10>)
 80031fa:	2101      	movs	r1, #1
 80031fc:	2002      	movs	r0, #2
 80031fe:	f7fd f956 	bl	80004ae <lcd_print>
 8003202:	e020      	b.n	8003246 <menu+0x2d0a>
			} else if(dilSecim == 1) {
 8003204:	4b46      	ldr	r3, [pc, #280]	@ (8003320 <menu+0x2de4>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d11c      	bne.n	8003246 <menu+0x2d0a>
				lcd_print(2, 1, "Passive         ");
 800320c:	4a50      	ldr	r2, [pc, #320]	@ (8003350 <menu+0x2e14>)
 800320e:	2101      	movs	r1, #1
 8003210:	2002      	movs	r0, #2
 8003212:	f7fd f94c 	bl	80004ae <lcd_print>
 8003216:	e016      	b.n	8003246 <menu+0x2d0a>
			}
		} else if(buzzer == 1) {
 8003218:	4b4b      	ldr	r3, [pc, #300]	@ (8003348 <menu+0x2e0c>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d112      	bne.n	8003246 <menu+0x2d0a>
			if(dilSecim == 0) {
 8003220:	4b3f      	ldr	r3, [pc, #252]	@ (8003320 <menu+0x2de4>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d105      	bne.n	8003234 <menu+0x2cf8>
				lcd_print(2, 1, "Aktif           ");
 8003228:	4a4a      	ldr	r2, [pc, #296]	@ (8003354 <menu+0x2e18>)
 800322a:	2101      	movs	r1, #1
 800322c:	2002      	movs	r0, #2
 800322e:	f7fd f93e 	bl	80004ae <lcd_print>
 8003232:	e008      	b.n	8003246 <menu+0x2d0a>
			} else if(dilSecim == 1) {
 8003234:	4b3a      	ldr	r3, [pc, #232]	@ (8003320 <menu+0x2de4>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d104      	bne.n	8003246 <menu+0x2d0a>
				lcd_print(2, 1, "Active          ");
 800323c:	4a46      	ldr	r2, [pc, #280]	@ (8003358 <menu+0x2e1c>)
 800323e:	2101      	movs	r1, #1
 8003240:	2002      	movs	r0, #2
 8003242:	f7fd f934 	bl	80004ae <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003246:	2102      	movs	r1, #2
 8003248:	4839      	ldr	r0, [pc, #228]	@ (8003330 <menu+0x2df4>)
 800324a:	f004 faf9 	bl	8007840 <HAL_GPIO_ReadPin>
 800324e:	4603      	mov	r3, r0
 8003250:	2b01      	cmp	r3, #1
 8003252:	d115      	bne.n	8003280 <menu+0x2d44>
 8003254:	4b37      	ldr	r3, [pc, #220]	@ (8003334 <menu+0x2df8>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	f083 0301 	eor.w	r3, r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00e      	beq.n	8003280 <menu+0x2d44>
			buzzer = buzzer + 1;
 8003262:	4b39      	ldr	r3, [pc, #228]	@ (8003348 <menu+0x2e0c>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	b2da      	uxtb	r2, r3
 800326a:	4b37      	ldr	r3, [pc, #220]	@ (8003348 <menu+0x2e0c>)
 800326c:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800326e:	4b36      	ldr	r3, [pc, #216]	@ (8003348 <menu+0x2e0c>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d902      	bls.n	800327c <menu+0x2d40>
				buzzer = 0;
 8003276:	4b34      	ldr	r3, [pc, #208]	@ (8003348 <menu+0x2e0c>)
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800327c:	f000 fafc 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003280:	2104      	movs	r1, #4
 8003282:	482b      	ldr	r0, [pc, #172]	@ (8003330 <menu+0x2df4>)
 8003284:	f004 fadc 	bl	8007840 <HAL_GPIO_ReadPin>
 8003288:	4603      	mov	r3, r0
 800328a:	2b01      	cmp	r3, #1
 800328c:	d115      	bne.n	80032ba <menu+0x2d7e>
 800328e:	4b29      	ldr	r3, [pc, #164]	@ (8003334 <menu+0x2df8>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	f083 0301 	eor.w	r3, r3, #1
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00e      	beq.n	80032ba <menu+0x2d7e>
			buzzer = buzzer - 1;
 800329c:	4b2a      	ldr	r3, [pc, #168]	@ (8003348 <menu+0x2e0c>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4b28      	ldr	r3, [pc, #160]	@ (8003348 <menu+0x2e0c>)
 80032a6:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80032a8:	4b27      	ldr	r3, [pc, #156]	@ (8003348 <menu+0x2e0c>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <menu+0x2d7a>
		   		buzzer = 1;
 80032b0:	4b25      	ldr	r3, [pc, #148]	@ (8003348 <menu+0x2e0c>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032b6:	f000 fadf 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ba:	2108      	movs	r1, #8
 80032bc:	481c      	ldr	r0, [pc, #112]	@ (8003330 <menu+0x2df4>)
 80032be:	f004 fabf 	bl	8007840 <HAL_GPIO_ReadPin>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d10d      	bne.n	80032e4 <menu+0x2da8>
 80032c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003334 <menu+0x2df8>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	f083 0301 	eor.w	r3, r3, #1
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d006      	beq.n	80032e4 <menu+0x2da8>
			eepromData[25] = buzzer;
 80032d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003348 <menu+0x2e0c>)
 80032d8:	781a      	ldrb	r2, [r3, #0]
 80032da:	4b17      	ldr	r3, [pc, #92]	@ (8003338 <menu+0x2dfc>)
 80032dc:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80032de:	4b17      	ldr	r3, [pc, #92]	@ (800333c <menu+0x2e00>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80032e4:	4b16      	ldr	r3, [pc, #88]	@ (8003340 <menu+0x2e04>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b1c      	cmp	r3, #28
 80032ea:	f040 80ad 	bne.w	8003448 <menu+0x2f0c>
		calismaSayModu = 0;
 80032ee:	4b1b      	ldr	r3, [pc, #108]	@ (800335c <menu+0x2e20>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 80032f4:	4a1a      	ldr	r2, [pc, #104]	@ (8003360 <menu+0x2e24>)
 80032f6:	2101      	movs	r1, #1
 80032f8:	2001      	movs	r0, #1
 80032fa:	f7fd f8d8 	bl	80004ae <lcd_print>

		if(demoMode == 0) {
 80032fe:	4b19      	ldr	r3, [pc, #100]	@ (8003364 <menu+0x2e28>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d13a      	bne.n	800337c <menu+0x2e40>
			if(dilSecim == 0) {
 8003306:	4b06      	ldr	r3, [pc, #24]	@ (8003320 <menu+0x2de4>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d12c      	bne.n	8003368 <menu+0x2e2c>
				lcd_print(2, 1, "Pasif           ");
 800330e:	4a0f      	ldr	r2, [pc, #60]	@ (800334c <menu+0x2e10>)
 8003310:	2101      	movs	r1, #1
 8003312:	2002      	movs	r0, #2
 8003314:	f7fd f8cb 	bl	80004ae <lcd_print>
 8003318:	e047      	b.n	80033aa <menu+0x2e6e>
 800331a:	bf00      	nop
 800331c:	2000033c 	.word	0x2000033c
 8003320:	20000344 	.word	0x20000344
 8003324:	0800c1dc 	.word	0x0800c1dc
 8003328:	0800c550 	.word	0x0800c550
 800332c:	200002f8 	.word	0x200002f8
 8003330:	40010800 	.word	0x40010800
 8003334:	20000352 	.word	0x20000352
 8003338:	200002b8 	.word	0x200002b8
 800333c:	2000034f 	.word	0x2000034f
 8003340:	20000324 	.word	0x20000324
 8003344:	0800c650 	.word	0x0800c650
 8003348:	20000340 	.word	0x20000340
 800334c:	0800bf74 	.word	0x0800bf74
 8003350:	0800bf88 	.word	0x0800bf88
 8003354:	0800bfd4 	.word	0x0800bfd4
 8003358:	0800bfe8 	.word	0x0800bfe8
 800335c:	20000343 	.word	0x20000343
 8003360:	0800c664 	.word	0x0800c664
 8003364:	20000342 	.word	0x20000342
			} else if(dilSecim == 1) {
 8003368:	4b7d      	ldr	r3, [pc, #500]	@ (8003560 <menu+0x3024>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d11c      	bne.n	80033aa <menu+0x2e6e>
				lcd_print(2, 1, "Passive         ");
 8003370:	4a7c      	ldr	r2, [pc, #496]	@ (8003564 <menu+0x3028>)
 8003372:	2101      	movs	r1, #1
 8003374:	2002      	movs	r0, #2
 8003376:	f7fd f89a 	bl	80004ae <lcd_print>
 800337a:	e016      	b.n	80033aa <menu+0x2e6e>
			}
		} else if(demoMode == 1) {
 800337c:	4b7a      	ldr	r3, [pc, #488]	@ (8003568 <menu+0x302c>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d112      	bne.n	80033aa <menu+0x2e6e>
			if(dilSecim == 0){
 8003384:	4b76      	ldr	r3, [pc, #472]	@ (8003560 <menu+0x3024>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <menu+0x2e5c>
				lcd_print(2, 1, "Aktif           ");
 800338c:	4a77      	ldr	r2, [pc, #476]	@ (800356c <menu+0x3030>)
 800338e:	2101      	movs	r1, #1
 8003390:	2002      	movs	r0, #2
 8003392:	f7fd f88c 	bl	80004ae <lcd_print>
 8003396:	e008      	b.n	80033aa <menu+0x2e6e>
			} else if(dilSecim == 1) {
 8003398:	4b71      	ldr	r3, [pc, #452]	@ (8003560 <menu+0x3024>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d104      	bne.n	80033aa <menu+0x2e6e>
				lcd_print(2, 1, "Active          ");
 80033a0:	4a73      	ldr	r2, [pc, #460]	@ (8003570 <menu+0x3034>)
 80033a2:	2101      	movs	r1, #1
 80033a4:	2002      	movs	r0, #2
 80033a6:	f7fd f882 	bl	80004ae <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033aa:	2102      	movs	r1, #2
 80033ac:	4871      	ldr	r0, [pc, #452]	@ (8003574 <menu+0x3038>)
 80033ae:	f004 fa47 	bl	8007840 <HAL_GPIO_ReadPin>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d115      	bne.n	80033e4 <menu+0x2ea8>
 80033b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003578 <menu+0x303c>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	f083 0301 	eor.w	r3, r3, #1
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00e      	beq.n	80033e4 <menu+0x2ea8>
			demoMode = demoMode + 1;
 80033c6:	4b68      	ldr	r3, [pc, #416]	@ (8003568 <menu+0x302c>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	3301      	adds	r3, #1
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	4b66      	ldr	r3, [pc, #408]	@ (8003568 <menu+0x302c>)
 80033d0:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80033d2:	4b65      	ldr	r3, [pc, #404]	@ (8003568 <menu+0x302c>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d902      	bls.n	80033e0 <menu+0x2ea4>
				demoMode = 0;
 80033da:	4b63      	ldr	r3, [pc, #396]	@ (8003568 <menu+0x302c>)
 80033dc:	2200      	movs	r2, #0
 80033de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033e0:	f000 fa4a 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033e4:	2104      	movs	r1, #4
 80033e6:	4863      	ldr	r0, [pc, #396]	@ (8003574 <menu+0x3038>)
 80033e8:	f004 fa2a 	bl	8007840 <HAL_GPIO_ReadPin>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d115      	bne.n	800341e <menu+0x2ee2>
 80033f2:	4b61      	ldr	r3, [pc, #388]	@ (8003578 <menu+0x303c>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	f083 0301 	eor.w	r3, r3, #1
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00e      	beq.n	800341e <menu+0x2ee2>
			demoMode = demoMode - 1;
 8003400:	4b59      	ldr	r3, [pc, #356]	@ (8003568 <menu+0x302c>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	3b01      	subs	r3, #1
 8003406:	b2da      	uxtb	r2, r3
 8003408:	4b57      	ldr	r3, [pc, #348]	@ (8003568 <menu+0x302c>)
 800340a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800340c:	4b56      	ldr	r3, [pc, #344]	@ (8003568 <menu+0x302c>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <menu+0x2ede>
		   		demoMode = 1;
 8003414:	4b54      	ldr	r3, [pc, #336]	@ (8003568 <menu+0x302c>)
 8003416:	2201      	movs	r2, #1
 8003418:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800341a:	f000 fa2d 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800341e:	2108      	movs	r1, #8
 8003420:	4854      	ldr	r0, [pc, #336]	@ (8003574 <menu+0x3038>)
 8003422:	f004 fa0d 	bl	8007840 <HAL_GPIO_ReadPin>
 8003426:	4603      	mov	r3, r0
 8003428:	2b01      	cmp	r3, #1
 800342a:	d10d      	bne.n	8003448 <menu+0x2f0c>
 800342c:	4b52      	ldr	r3, [pc, #328]	@ (8003578 <menu+0x303c>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	f083 0301 	eor.w	r3, r3, #1
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d006      	beq.n	8003448 <menu+0x2f0c>
			eepromData[26] = demoMode;
 800343a:	4b4b      	ldr	r3, [pc, #300]	@ (8003568 <menu+0x302c>)
 800343c:	781a      	ldrb	r2, [r3, #0]
 800343e:	4b4f      	ldr	r3, [pc, #316]	@ (800357c <menu+0x3040>)
 8003440:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003442:	4b4f      	ldr	r3, [pc, #316]	@ (8003580 <menu+0x3044>)
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003448:	4b4e      	ldr	r3, [pc, #312]	@ (8003584 <menu+0x3048>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b1d      	cmp	r3, #29
 800344e:	f040 813a 	bne.w	80036c6 <menu+0x318a>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8003452:	4b4d      	ldr	r3, [pc, #308]	@ (8003588 <menu+0x304c>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d113      	bne.n	8003482 <menu+0x2f46>
 800345a:	4b4c      	ldr	r3, [pc, #304]	@ (800358c <menu+0x3050>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10f      	bne.n	8003482 <menu+0x2f46>
 8003462:	4b4b      	ldr	r3, [pc, #300]	@ (8003590 <menu+0x3054>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10b      	bne.n	8003482 <menu+0x2f46>
 800346a:	4b4a      	ldr	r3, [pc, #296]	@ (8003594 <menu+0x3058>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d107      	bne.n	8003482 <menu+0x2f46>
 8003472:	4b49      	ldr	r3, [pc, #292]	@ (8003598 <menu+0x305c>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d103      	bne.n	8003482 <menu+0x2f46>
			calismaSayisiYar = 0;
 800347a:	4b48      	ldr	r3, [pc, #288]	@ (800359c <menu+0x3060>)
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
 8003480:	e002      	b.n	8003488 <menu+0x2f4c>
		} else {
			calismaSayisiYar = 1;
 8003482:	4b46      	ldr	r3, [pc, #280]	@ (800359c <menu+0x3060>)
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8003488:	4b45      	ldr	r3, [pc, #276]	@ (80035a0 <menu+0x3064>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d154      	bne.n	800353a <menu+0x2ffe>
			if(dilSecim == 0) {
 8003490:	4b33      	ldr	r3, [pc, #204]	@ (8003560 <menu+0x3024>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d105      	bne.n	80034a4 <menu+0x2f68>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8003498:	4a42      	ldr	r2, [pc, #264]	@ (80035a4 <menu+0x3068>)
 800349a:	2101      	movs	r1, #1
 800349c:	2001      	movs	r0, #1
 800349e:	f7fd f806 	bl	80004ae <lcd_print>
 80034a2:	e008      	b.n	80034b6 <menu+0x2f7a>
			} else if(dilSecim == 1) {
 80034a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003560 <menu+0x3024>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d104      	bne.n	80034b6 <menu+0x2f7a>
				lcd_print(1, 1, "Working Cycle   ");
 80034ac:	4a3e      	ldr	r2, [pc, #248]	@ (80035a8 <menu+0x306c>)
 80034ae:	2101      	movs	r1, #1
 80034b0:	2001      	movs	r0, #1
 80034b2:	f7fc fffc 	bl	80004ae <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80034b6:	4b38      	ldr	r3, [pc, #224]	@ (8003598 <menu+0x305c>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	220a      	movs	r2, #10
 80034bc:	493b      	ldr	r1, [pc, #236]	@ (80035ac <menu+0x3070>)
 80034be:	4618      	mov	r0, r3
 80034c0:	f008 fb7c 	bl	800bbbc <itoa>
			lcd_print(2, 12, snum);
 80034c4:	4a39      	ldr	r2, [pc, #228]	@ (80035ac <menu+0x3070>)
 80034c6:	210c      	movs	r1, #12
 80034c8:	2002      	movs	r0, #2
 80034ca:	f7fc fff0 	bl	80004ae <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80034ce:	4b31      	ldr	r3, [pc, #196]	@ (8003594 <menu+0x3058>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	220a      	movs	r2, #10
 80034d4:	4935      	ldr	r1, [pc, #212]	@ (80035ac <menu+0x3070>)
 80034d6:	4618      	mov	r0, r3
 80034d8:	f008 fb70 	bl	800bbbc <itoa>
			lcd_print(2, 13, snum);
 80034dc:	4a33      	ldr	r2, [pc, #204]	@ (80035ac <menu+0x3070>)
 80034de:	210d      	movs	r1, #13
 80034e0:	2002      	movs	r0, #2
 80034e2:	f7fc ffe4 	bl	80004ae <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80034e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003590 <menu+0x3054>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	220a      	movs	r2, #10
 80034ec:	492f      	ldr	r1, [pc, #188]	@ (80035ac <menu+0x3070>)
 80034ee:	4618      	mov	r0, r3
 80034f0:	f008 fb64 	bl	800bbbc <itoa>
			lcd_print(2, 14, snum);
 80034f4:	4a2d      	ldr	r2, [pc, #180]	@ (80035ac <menu+0x3070>)
 80034f6:	210e      	movs	r1, #14
 80034f8:	2002      	movs	r0, #2
 80034fa:	f7fc ffd8 	bl	80004ae <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80034fe:	4b23      	ldr	r3, [pc, #140]	@ (800358c <menu+0x3050>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	220a      	movs	r2, #10
 8003504:	4929      	ldr	r1, [pc, #164]	@ (80035ac <menu+0x3070>)
 8003506:	4618      	mov	r0, r3
 8003508:	f008 fb58 	bl	800bbbc <itoa>
			lcd_print(2, 15, snum);
 800350c:	4a27      	ldr	r2, [pc, #156]	@ (80035ac <menu+0x3070>)
 800350e:	210f      	movs	r1, #15
 8003510:	2002      	movs	r0, #2
 8003512:	f7fc ffcc 	bl	80004ae <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8003516:	4b1c      	ldr	r3, [pc, #112]	@ (8003588 <menu+0x304c>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	220a      	movs	r2, #10
 800351c:	4923      	ldr	r1, [pc, #140]	@ (80035ac <menu+0x3070>)
 800351e:	4618      	mov	r0, r3
 8003520:	f008 fb4c 	bl	800bbbc <itoa>
			lcd_print(2, 16, snum);
 8003524:	4a21      	ldr	r2, [pc, #132]	@ (80035ac <menu+0x3070>)
 8003526:	2110      	movs	r1, #16
 8003528:	2002      	movs	r0, #2
 800352a:	f7fc ffc0 	bl	80004ae <lcd_print>

			lcd_print(2, 1, "           ");
 800352e:	4a20      	ldr	r2, [pc, #128]	@ (80035b0 <menu+0x3074>)
 8003530:	2101      	movs	r1, #1
 8003532:	2002      	movs	r0, #2
 8003534:	f7fc ffbb 	bl	80004ae <lcd_print>
 8003538:	e04c      	b.n	80035d4 <menu+0x3098>
		} else if(calismaSayModu == 1) {
 800353a:	4b19      	ldr	r3, [pc, #100]	@ (80035a0 <menu+0x3064>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d148      	bne.n	80035d4 <menu+0x3098>
			if(dilSecim == 0) {
 8003542:	4b07      	ldr	r3, [pc, #28]	@ (8003560 <menu+0x3024>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d136      	bne.n	80035b8 <menu+0x307c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800354a:	4a16      	ldr	r2, [pc, #88]	@ (80035a4 <menu+0x3068>)
 800354c:	2101      	movs	r1, #1
 800354e:	2001      	movs	r0, #1
 8003550:	f7fc ffad 	bl	80004ae <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8003554:	4a17      	ldr	r2, [pc, #92]	@ (80035b4 <menu+0x3078>)
 8003556:	2101      	movs	r1, #1
 8003558:	2002      	movs	r0, #2
 800355a:	f7fc ffa8 	bl	80004ae <lcd_print>
 800355e:	e039      	b.n	80035d4 <menu+0x3098>
 8003560:	20000344 	.word	0x20000344
 8003564:	0800bf88 	.word	0x0800bf88
 8003568:	20000342 	.word	0x20000342
 800356c:	0800bfd4 	.word	0x0800bfd4
 8003570:	0800bfe8 	.word	0x0800bfe8
 8003574:	40010800 	.word	0x40010800
 8003578:	20000352 	.word	0x20000352
 800357c:	200002b8 	.word	0x200002b8
 8003580:	2000034f 	.word	0x2000034f
 8003584:	20000324 	.word	0x20000324
 8003588:	20000321 	.word	0x20000321
 800358c:	20000322 	.word	0x20000322
 8003590:	20000031 	.word	0x20000031
 8003594:	20000032 	.word	0x20000032
 8003598:	20000323 	.word	0x20000323
 800359c:	20000364 	.word	0x20000364
 80035a0:	20000343 	.word	0x20000343
 80035a4:	0800c674 	.word	0x0800c674
 80035a8:	0800c688 	.word	0x0800c688
 80035ac:	200002f8 	.word	0x200002f8
 80035b0:	0800c69c 	.word	0x0800c69c
 80035b4:	0800c6a8 	.word	0x0800c6a8
			} else if(dilSecim == 1) {
 80035b8:	4b97      	ldr	r3, [pc, #604]	@ (8003818 <menu+0x32dc>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d109      	bne.n	80035d4 <menu+0x3098>
				lcd_print(1, 1, "Working Cycle   ");
 80035c0:	4a96      	ldr	r2, [pc, #600]	@ (800381c <menu+0x32e0>)
 80035c2:	2101      	movs	r1, #1
 80035c4:	2001      	movs	r0, #1
 80035c6:	f7fc ff72 	bl	80004ae <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80035ca:	4a95      	ldr	r2, [pc, #596]	@ (8003820 <menu+0x32e4>)
 80035cc:	2101      	movs	r1, #1
 80035ce:	2002      	movs	r0, #2
 80035d0:	f7fc ff6d 	bl	80004ae <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80035d4:	2102      	movs	r1, #2
 80035d6:	4893      	ldr	r0, [pc, #588]	@ (8003824 <menu+0x32e8>)
 80035d8:	f004 f932 	bl	8007840 <HAL_GPIO_ReadPin>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d119      	bne.n	8003616 <menu+0x30da>
 80035e2:	4b91      	ldr	r3, [pc, #580]	@ (8003828 <menu+0x32ec>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	f083 0301 	eor.w	r3, r3, #1
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d012      	beq.n	8003616 <menu+0x30da>
 80035f0:	4b8e      	ldr	r3, [pc, #568]	@ (800382c <menu+0x32f0>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00e      	beq.n	8003616 <menu+0x30da>
			calismaSayModu = calismaSayModu + 1;
 80035f8:	4b8d      	ldr	r3, [pc, #564]	@ (8003830 <menu+0x32f4>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	3301      	adds	r3, #1
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	4b8b      	ldr	r3, [pc, #556]	@ (8003830 <menu+0x32f4>)
 8003602:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003604:	4b8a      	ldr	r3, [pc, #552]	@ (8003830 <menu+0x32f4>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d902      	bls.n	8003612 <menu+0x30d6>
				calismaSayModu = 0;
 800360c:	4b88      	ldr	r3, [pc, #544]	@ (8003830 <menu+0x32f4>)
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003612:	f000 f931 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003616:	2104      	movs	r1, #4
 8003618:	4882      	ldr	r0, [pc, #520]	@ (8003824 <menu+0x32e8>)
 800361a:	f004 f911 	bl	8007840 <HAL_GPIO_ReadPin>
 800361e:	4603      	mov	r3, r0
 8003620:	2b01      	cmp	r3, #1
 8003622:	d119      	bne.n	8003658 <menu+0x311c>
 8003624:	4b80      	ldr	r3, [pc, #512]	@ (8003828 <menu+0x32ec>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	f083 0301 	eor.w	r3, r3, #1
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d012      	beq.n	8003658 <menu+0x311c>
 8003632:	4b7e      	ldr	r3, [pc, #504]	@ (800382c <menu+0x32f0>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00e      	beq.n	8003658 <menu+0x311c>
			calismaSayModu = calismaSayModu - 1;
 800363a:	4b7d      	ldr	r3, [pc, #500]	@ (8003830 <menu+0x32f4>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	3b01      	subs	r3, #1
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4b7b      	ldr	r3, [pc, #492]	@ (8003830 <menu+0x32f4>)
 8003644:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003646:	4b7a      	ldr	r3, [pc, #488]	@ (8003830 <menu+0x32f4>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <menu+0x3118>
		   		calismaSayModu = 1;
 800364e:	4b78      	ldr	r3, [pc, #480]	@ (8003830 <menu+0x32f4>)
 8003650:	2201      	movs	r2, #1
 8003652:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003654:	f000 f910 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)&&(calismaSayModu==1)) {
 8003658:	2108      	movs	r1, #8
 800365a:	4872      	ldr	r0, [pc, #456]	@ (8003824 <menu+0x32e8>)
 800365c:	f004 f8f0 	bl	8007840 <HAL_GPIO_ReadPin>
 8003660:	4603      	mov	r3, r0
 8003662:	2b01      	cmp	r3, #1
 8003664:	d12f      	bne.n	80036c6 <menu+0x318a>
 8003666:	4b70      	ldr	r3, [pc, #448]	@ (8003828 <menu+0x32ec>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	f083 0301 	eor.w	r3, r3, #1
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d028      	beq.n	80036c6 <menu+0x318a>
 8003674:	4b6e      	ldr	r3, [pc, #440]	@ (8003830 <menu+0x32f4>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d124      	bne.n	80036c6 <menu+0x318a>
			eepromData[32] = 0;
 800367c:	4b6d      	ldr	r3, [pc, #436]	@ (8003834 <menu+0x32f8>)
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8003684:	4b6b      	ldr	r3, [pc, #428]	@ (8003834 <menu+0x32f8>)
 8003686:	2200      	movs	r2, #0
 8003688:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800368a:	4b6a      	ldr	r3, [pc, #424]	@ (8003834 <menu+0x32f8>)
 800368c:	2200      	movs	r2, #0
 800368e:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8003690:	4b68      	ldr	r3, [pc, #416]	@ (8003834 <menu+0x32f8>)
 8003692:	2200      	movs	r2, #0
 8003694:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8003696:	4b67      	ldr	r3, [pc, #412]	@ (8003834 <menu+0x32f8>)
 8003698:	2200      	movs	r2, #0
 800369a:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 800369c:	4b66      	ldr	r3, [pc, #408]	@ (8003838 <menu+0x32fc>)
 800369e:	2200      	movs	r2, #0
 80036a0:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80036a2:	4b66      	ldr	r3, [pc, #408]	@ (800383c <menu+0x3300>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80036a8:	4b65      	ldr	r3, [pc, #404]	@ (8003840 <menu+0x3304>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80036ae:	4b65      	ldr	r3, [pc, #404]	@ (8003844 <menu+0x3308>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80036b4:	4b64      	ldr	r3, [pc, #400]	@ (8003848 <menu+0x330c>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80036ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003830 <menu+0x32f4>)
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80036c0:	4b62      	ldr	r3, [pc, #392]	@ (800384c <menu+0x3310>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80036c6:	4b62      	ldr	r3, [pc, #392]	@ (8003850 <menu+0x3314>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b1e      	cmp	r3, #30
 80036cc:	d16f      	bne.n	80037ae <menu+0x3272>
		calismaSayModu = 0;
 80036ce:	4b58      	ldr	r3, [pc, #352]	@ (8003830 <menu+0x32f4>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80036d4:	4b50      	ldr	r3, [pc, #320]	@ (8003818 <menu+0x32dc>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10a      	bne.n	80036f2 <menu+0x31b6>
			lcd_print(1, 1, "DIL SECIMI      ");
 80036dc:	4a5d      	ldr	r2, [pc, #372]	@ (8003854 <menu+0x3318>)
 80036de:	2101      	movs	r1, #1
 80036e0:	2001      	movs	r0, #1
 80036e2:	f7fc fee4 	bl	80004ae <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80036e6:	4a5c      	ldr	r2, [pc, #368]	@ (8003858 <menu+0x331c>)
 80036e8:	2101      	movs	r1, #1
 80036ea:	2002      	movs	r0, #2
 80036ec:	f7fc fedf 	bl	80004ae <lcd_print>
 80036f0:	e00d      	b.n	800370e <menu+0x31d2>
		} else if(dilSecim == 1) {
 80036f2:	4b49      	ldr	r3, [pc, #292]	@ (8003818 <menu+0x32dc>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d109      	bne.n	800370e <menu+0x31d2>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80036fa:	4a58      	ldr	r2, [pc, #352]	@ (800385c <menu+0x3320>)
 80036fc:	2101      	movs	r1, #1
 80036fe:	2001      	movs	r0, #1
 8003700:	f7fc fed5 	bl	80004ae <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8003704:	4a56      	ldr	r2, [pc, #344]	@ (8003860 <menu+0x3324>)
 8003706:	2101      	movs	r1, #1
 8003708:	2002      	movs	r0, #2
 800370a:	f7fc fed0 	bl	80004ae <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800370e:	2102      	movs	r1, #2
 8003710:	4844      	ldr	r0, [pc, #272]	@ (8003824 <menu+0x32e8>)
 8003712:	f004 f895 	bl	8007840 <HAL_GPIO_ReadPin>
 8003716:	4603      	mov	r3, r0
 8003718:	2b01      	cmp	r3, #1
 800371a:	d115      	bne.n	8003748 <menu+0x320c>
 800371c:	4b42      	ldr	r3, [pc, #264]	@ (8003828 <menu+0x32ec>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	f083 0301 	eor.w	r3, r3, #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00e      	beq.n	8003748 <menu+0x320c>
			dilSecim = dilSecim + 1;
 800372a:	4b3b      	ldr	r3, [pc, #236]	@ (8003818 <menu+0x32dc>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	3301      	adds	r3, #1
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4b39      	ldr	r3, [pc, #228]	@ (8003818 <menu+0x32dc>)
 8003734:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003736:	4b38      	ldr	r3, [pc, #224]	@ (8003818 <menu+0x32dc>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d902      	bls.n	8003744 <menu+0x3208>
				dilSecim = 0;
 800373e:	4b36      	ldr	r3, [pc, #216]	@ (8003818 <menu+0x32dc>)
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003744:	f000 f898 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003748:	2104      	movs	r1, #4
 800374a:	4836      	ldr	r0, [pc, #216]	@ (8003824 <menu+0x32e8>)
 800374c:	f004 f878 	bl	8007840 <HAL_GPIO_ReadPin>
 8003750:	4603      	mov	r3, r0
 8003752:	2b01      	cmp	r3, #1
 8003754:	d115      	bne.n	8003782 <menu+0x3246>
 8003756:	4b34      	ldr	r3, [pc, #208]	@ (8003828 <menu+0x32ec>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	f083 0301 	eor.w	r3, r3, #1
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00e      	beq.n	8003782 <menu+0x3246>
			dilSecim = dilSecim - 1;
 8003764:	4b2c      	ldr	r3, [pc, #176]	@ (8003818 <menu+0x32dc>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	3b01      	subs	r3, #1
 800376a:	b2da      	uxtb	r2, r3
 800376c:	4b2a      	ldr	r3, [pc, #168]	@ (8003818 <menu+0x32dc>)
 800376e:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003770:	4b29      	ldr	r3, [pc, #164]	@ (8003818 <menu+0x32dc>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <menu+0x3242>
		   		dilSecim = 1;
 8003778:	4b27      	ldr	r3, [pc, #156]	@ (8003818 <menu+0x32dc>)
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800377e:	f000 f87b 	bl	8003878 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003782:	2108      	movs	r1, #8
 8003784:	4827      	ldr	r0, [pc, #156]	@ (8003824 <menu+0x32e8>)
 8003786:	f004 f85b 	bl	8007840 <HAL_GPIO_ReadPin>
 800378a:	4603      	mov	r3, r0
 800378c:	2b01      	cmp	r3, #1
 800378e:	d10e      	bne.n	80037ae <menu+0x3272>
 8003790:	4b25      	ldr	r3, [pc, #148]	@ (8003828 <menu+0x32ec>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	f083 0301 	eor.w	r3, r3, #1
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <menu+0x3272>
			eepromData[33] = dilSecim;
 800379e:	4b1e      	ldr	r3, [pc, #120]	@ (8003818 <menu+0x32dc>)
 80037a0:	781a      	ldrb	r2, [r3, #0]
 80037a2:	4b24      	ldr	r3, [pc, #144]	@ (8003834 <menu+0x32f8>)
 80037a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 80037a8:	4b28      	ldr	r3, [pc, #160]	@ (800384c <menu+0x3310>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80037ae:	4b28      	ldr	r3, [pc, #160]	@ (8003850 <menu+0x3314>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b1f      	cmp	r3, #31
 80037b4:	d12e      	bne.n	8003814 <menu+0x32d8>
		if(dilSecim == 0) {
 80037b6:	4b18      	ldr	r3, [pc, #96]	@ (8003818 <menu+0x32dc>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10a      	bne.n	80037d4 <menu+0x3298>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 80037be:	4a29      	ldr	r2, [pc, #164]	@ (8003864 <menu+0x3328>)
 80037c0:	2101      	movs	r1, #1
 80037c2:	2001      	movs	r0, #1
 80037c4:	f7fc fe73 	bl	80004ae <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 80037c8:	4a27      	ldr	r2, [pc, #156]	@ (8003868 <menu+0x332c>)
 80037ca:	2101      	movs	r1, #1
 80037cc:	2002      	movs	r0, #2
 80037ce:	f7fc fe6e 	bl	80004ae <lcd_print>
 80037d2:	e00d      	b.n	80037f0 <menu+0x32b4>
		} else if(dilSecim == 1) {
 80037d4:	4b10      	ldr	r3, [pc, #64]	@ (8003818 <menu+0x32dc>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d109      	bne.n	80037f0 <menu+0x32b4>
			lcd_print(1, 1, " EXIT THE MENU  ");
 80037dc:	4a23      	ldr	r2, [pc, #140]	@ (800386c <menu+0x3330>)
 80037de:	2101      	movs	r1, #1
 80037e0:	2001      	movs	r0, #1
 80037e2:	f7fc fe64 	bl	80004ae <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 80037e6:	4a22      	ldr	r2, [pc, #136]	@ (8003870 <menu+0x3334>)
 80037e8:	2101      	movs	r1, #1
 80037ea:	2002      	movs	r0, #2
 80037ec:	f7fc fe5f 	bl	80004ae <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80037f0:	2108      	movs	r1, #8
 80037f2:	480c      	ldr	r0, [pc, #48]	@ (8003824 <menu+0x32e8>)
 80037f4:	f004 f824 	bl	8007840 <HAL_GPIO_ReadPin>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d10a      	bne.n	8003814 <menu+0x32d8>
			menuGiris = 0;
 80037fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003874 <menu+0x3338>)
 8003800:	2200      	movs	r2, #0
 8003802:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8003804:	f7fc fe68 	bl	80004d8 <lcd_clear>
			HAL_Delay(500);
 8003808:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800380c:	f003 fb8a 	bl	8006f24 <HAL_Delay>
			NVIC_SystemReset();
 8003810:	f7fc fe7e 	bl	8000510 <__NVIC_SystemReset>
		}
	}
}
 8003814:	bf00      	nop
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20000344 	.word	0x20000344
 800381c:	0800c688 	.word	0x0800c688
 8003820:	0800c6bc 	.word	0x0800c6bc
 8003824:	40010800 	.word	0x40010800
 8003828:	20000352 	.word	0x20000352
 800382c:	20000364 	.word	0x20000364
 8003830:	20000343 	.word	0x20000343
 8003834:	200002b8 	.word	0x200002b8
 8003838:	20000323 	.word	0x20000323
 800383c:	20000032 	.word	0x20000032
 8003840:	20000031 	.word	0x20000031
 8003844:	20000322 	.word	0x20000322
 8003848:	20000321 	.word	0x20000321
 800384c:	2000034f 	.word	0x2000034f
 8003850:	20000324 	.word	0x20000324
 8003854:	0800c6d0 	.word	0x0800c6d0
 8003858:	0800c6e4 	.word	0x0800c6e4
 800385c:	0800c6f8 	.word	0x0800c6f8
 8003860:	0800c70c 	.word	0x0800c70c
 8003864:	0800c720 	.word	0x0800c720
 8003868:	0800c734 	.word	0x0800c734
 800386c:	0800c748 	.word	0x0800c748
 8003870:	0800c75c 	.word	0x0800c75c
 8003874:	20000341 	.word	0x20000341

08003878 <bekle>:
void eepromKontrol(void);
void hata2EEPROM(uint8_t);
void eepromDataFillWithEmpty(void);
uint8_t buttonCheck(void);
/* USER CODE BEGIN PFP */
void bekle(void) {
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
	timer1=millis;
 800387c:	4b47      	ldr	r3, [pc, #284]	@ (800399c <bekle+0x124>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a47      	ldr	r2, [pc, #284]	@ (80039a0 <bekle+0x128>)
 8003882:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003884:	e002      	b.n	800388c <bekle+0x14>
    	butonKontrol = 1;
 8003886:	4b47      	ldr	r3, [pc, #284]	@ (80039a4 <bekle+0x12c>)
 8003888:	2201      	movs	r2, #1
 800388a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800388c:	2101      	movs	r1, #1
 800388e:	4846      	ldr	r0, [pc, #280]	@ (80039a8 <bekle+0x130>)
 8003890:	f003 ffd6 	bl	8007840 <HAL_GPIO_ReadPin>
 8003894:	4603      	mov	r3, r0
 8003896:	2b01      	cmp	r3, #1
 8003898:	d109      	bne.n	80038ae <bekle+0x36>
 800389a:	4b40      	ldr	r3, [pc, #256]	@ (800399c <bekle+0x124>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4b40      	ldr	r3, [pc, #256]	@ (80039a0 <bekle+0x128>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d0ef      	beq.n	8003886 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80038a6:	e002      	b.n	80038ae <bekle+0x36>
    	butonKontrol = 1;
 80038a8:	4b3e      	ldr	r3, [pc, #248]	@ (80039a4 <bekle+0x12c>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80038ae:	2108      	movs	r1, #8
 80038b0:	483e      	ldr	r0, [pc, #248]	@ (80039ac <bekle+0x134>)
 80038b2:	f003 ffc5 	bl	8007840 <HAL_GPIO_ReadPin>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d109      	bne.n	80038d0 <bekle+0x58>
 80038bc:	4b37      	ldr	r3, [pc, #220]	@ (800399c <bekle+0x124>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	4b37      	ldr	r3, [pc, #220]	@ (80039a0 <bekle+0x128>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d0ef      	beq.n	80038a8 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80038c8:	e002      	b.n	80038d0 <bekle+0x58>
    	butonKontrol = 1;
 80038ca:	4b36      	ldr	r3, [pc, #216]	@ (80039a4 <bekle+0x12c>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80038d0:	2102      	movs	r1, #2
 80038d2:	4835      	ldr	r0, [pc, #212]	@ (80039a8 <bekle+0x130>)
 80038d4:	f003 ffb4 	bl	8007840 <HAL_GPIO_ReadPin>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d109      	bne.n	80038f2 <bekle+0x7a>
 80038de:	4b2f      	ldr	r3, [pc, #188]	@ (800399c <bekle+0x124>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4b2f      	ldr	r3, [pc, #188]	@ (80039a0 <bekle+0x128>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d0ef      	beq.n	80038ca <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80038ea:	e002      	b.n	80038f2 <bekle+0x7a>
    	butonKontrol = 1;
 80038ec:	4b2d      	ldr	r3, [pc, #180]	@ (80039a4 <bekle+0x12c>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80038f2:	2104      	movs	r1, #4
 80038f4:	482c      	ldr	r0, [pc, #176]	@ (80039a8 <bekle+0x130>)
 80038f6:	f003 ffa3 	bl	8007840 <HAL_GPIO_ReadPin>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d109      	bne.n	8003914 <bekle+0x9c>
 8003900:	4b26      	ldr	r3, [pc, #152]	@ (800399c <bekle+0x124>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4b26      	ldr	r3, [pc, #152]	@ (80039a0 <bekle+0x128>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d0ef      	beq.n	80038ec <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800390c:	e002      	b.n	8003914 <bekle+0x9c>
    	butonKontrol = 1;
 800390e:	4b25      	ldr	r3, [pc, #148]	@ (80039a4 <bekle+0x12c>)
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003914:	2108      	movs	r1, #8
 8003916:	4824      	ldr	r0, [pc, #144]	@ (80039a8 <bekle+0x130>)
 8003918:	f003 ff92 	bl	8007840 <HAL_GPIO_ReadPin>
 800391c:	4603      	mov	r3, r0
 800391e:	2b01      	cmp	r3, #1
 8003920:	d109      	bne.n	8003936 <bekle+0xbe>
 8003922:	4b1e      	ldr	r3, [pc, #120]	@ (800399c <bekle+0x124>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4b1e      	ldr	r3, [pc, #120]	@ (80039a0 <bekle+0x128>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d0ef      	beq.n	800390e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800392e:	e002      	b.n	8003936 <bekle+0xbe>
    	butonKontrol = 1;
 8003930:	4b1c      	ldr	r3, [pc, #112]	@ (80039a4 <bekle+0x12c>)
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003936:	2180      	movs	r1, #128	@ 0x80
 8003938:	481c      	ldr	r0, [pc, #112]	@ (80039ac <bekle+0x134>)
 800393a:	f003 ff81 	bl	8007840 <HAL_GPIO_ReadPin>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <bekle+0xe0>
 8003944:	4b15      	ldr	r3, [pc, #84]	@ (800399c <bekle+0x124>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	4b15      	ldr	r3, [pc, #84]	@ (80039a0 <bekle+0x128>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d0ef      	beq.n	8003930 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003950:	e002      	b.n	8003958 <bekle+0xe0>
    	butonKontrol = 1;
 8003952:	4b14      	ldr	r3, [pc, #80]	@ (80039a4 <bekle+0x12c>)
 8003954:	2201      	movs	r2, #1
 8003956:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003958:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800395c:	4813      	ldr	r0, [pc, #76]	@ (80039ac <bekle+0x134>)
 800395e:	f003 ff6f 	bl	8007840 <HAL_GPIO_ReadPin>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d109      	bne.n	800397c <bekle+0x104>
 8003968:	4b0c      	ldr	r3, [pc, #48]	@ (800399c <bekle+0x124>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b0c      	ldr	r3, [pc, #48]	@ (80039a0 <bekle+0x128>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d0ee      	beq.n	8003952 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003974:	e002      	b.n	800397c <bekle+0x104>
    	butonKontrol = 1;
 8003976:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <bekle+0x12c>)
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800397c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003980:	480a      	ldr	r0, [pc, #40]	@ (80039ac <bekle+0x134>)
 8003982:	f003 ff5d 	bl	8007840 <HAL_GPIO_ReadPin>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d105      	bne.n	8003998 <bekle+0x120>
 800398c:	4b03      	ldr	r3, [pc, #12]	@ (800399c <bekle+0x124>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4b03      	ldr	r3, [pc, #12]	@ (80039a0 <bekle+0x128>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d0ee      	beq.n	8003976 <bekle+0xfe>
    }

}
 8003998:	bf00      	nop
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20000300 	.word	0x20000300
 80039a0:	20000308 	.word	0x20000308
 80039a4:	20000352 	.word	0x20000352
 80039a8:	40010800 	.word	0x40010800
 80039ac:	40011000 	.word	0x40011000

080039b0 <lcdUpdate>:

void lcdUpdate(uint8_t y) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d105      	bne.n	80039cc <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80039c0:	4a22      	ldr	r2, [pc, #136]	@ (8003a4c <lcdUpdate+0x9c>)
 80039c2:	2101      	movs	r1, #1
 80039c4:	2002      	movs	r0, #2
 80039c6:	f7fc fd72 	bl	80004ae <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "     ESP-XL     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 80039ca:	e03b      	b.n	8003a44 <lcdUpdate+0x94>
	} else if(y==2) {
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d105      	bne.n	80039de <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80039d2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a4c <lcdUpdate+0x9c>)
 80039d4:	2102      	movs	r1, #2
 80039d6:	2002      	movs	r0, #2
 80039d8:	f7fc fd69 	bl	80004ae <lcd_print>
}
 80039dc:	e032      	b.n	8003a44 <lcdUpdate+0x94>
	} else if(y==3) {
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d105      	bne.n	80039f0 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80039e4:	4a19      	ldr	r2, [pc, #100]	@ (8003a4c <lcdUpdate+0x9c>)
 80039e6:	2103      	movs	r1, #3
 80039e8:	2002      	movs	r0, #2
 80039ea:	f7fc fd60 	bl	80004ae <lcd_print>
}
 80039ee:	e029      	b.n	8003a44 <lcdUpdate+0x94>
	} else if(y==4) {
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d105      	bne.n	8003a02 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80039f6:	4a15      	ldr	r2, [pc, #84]	@ (8003a4c <lcdUpdate+0x9c>)
 80039f8:	2104      	movs	r1, #4
 80039fa:	2002      	movs	r0, #2
 80039fc:	f7fc fd57 	bl	80004ae <lcd_print>
}
 8003a00:	e020      	b.n	8003a44 <lcdUpdate+0x94>
	} else if(y==5) {
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	2b05      	cmp	r3, #5
 8003a06:	d105      	bne.n	8003a14 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003a08:	4a10      	ldr	r2, [pc, #64]	@ (8003a4c <lcdUpdate+0x9c>)
 8003a0a:	2105      	movs	r1, #5
 8003a0c:	2002      	movs	r0, #2
 8003a0e:	f7fc fd4e 	bl	80004ae <lcd_print>
}
 8003a12:	e017      	b.n	8003a44 <lcdUpdate+0x94>
	} else if(y==6) {
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	2b06      	cmp	r3, #6
 8003a18:	d105      	bne.n	8003a26 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a4c <lcdUpdate+0x9c>)
 8003a1c:	2106      	movs	r1, #6
 8003a1e:	2002      	movs	r0, #2
 8003a20:	f7fc fd45 	bl	80004ae <lcd_print>
}
 8003a24:	e00e      	b.n	8003a44 <lcdUpdate+0x94>
	} else if (y==7) {
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	2b07      	cmp	r3, #7
 8003a2a:	d10b      	bne.n	8003a44 <lcdUpdate+0x94>
		lcd_clear();
 8003a2c:	f7fc fd54 	bl	80004d8 <lcd_clear>
		lcd_print(1, 1, "     ESP-XL     ");
 8003a30:	4a07      	ldr	r2, [pc, #28]	@ (8003a50 <lcdUpdate+0xa0>)
 8003a32:	2101      	movs	r1, #1
 8003a34:	2001      	movs	r0, #1
 8003a36:	f7fc fd3a 	bl	80004ae <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8003a3a:	4a06      	ldr	r2, [pc, #24]	@ (8003a54 <lcdUpdate+0xa4>)
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	2002      	movs	r0, #2
 8003a40:	f7fc fd35 	bl	80004ae <lcd_print>
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	0800be90 	.word	0x0800be90
 8003a50:	0800c770 	.word	0x0800c770
 8003a54:	0800c784 	.word	0x0800c784

08003a58 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8003a62:	2200      	movs	r2, #0
 8003a64:	2102      	movs	r1, #2
 8003a66:	4880      	ldr	r0, [pc, #512]	@ (8003c68 <hataKoduLcdGoster+0x210>)
 8003a68:	f003 ff01 	bl	800786e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2101      	movs	r1, #1
 8003a70:	487d      	ldr	r0, [pc, #500]	@ (8003c68 <hataKoduLcdGoster+0x210>)
 8003a72:	f003 fefc 	bl	800786e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8003a76:	2200      	movs	r2, #0
 8003a78:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003a7c:	487a      	ldr	r0, [pc, #488]	@ (8003c68 <hataKoduLcdGoster+0x210>)
 8003a7e:	f003 fef6 	bl	800786e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8003a82:	2200      	movs	r2, #0
 8003a84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003a88:	4877      	ldr	r0, [pc, #476]	@ (8003c68 <hataKoduLcdGoster+0x210>)
 8003a8a:	f003 fef0 	bl	800786e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2104      	movs	r1, #4
 8003a92:	4875      	ldr	r0, [pc, #468]	@ (8003c68 <hataKoduLcdGoster+0x210>)
 8003a94:	f003 feeb 	bl	800786e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2120      	movs	r1, #32
 8003a9c:	4873      	ldr	r0, [pc, #460]	@ (8003c6c <hataKoduLcdGoster+0x214>)
 8003a9e:	f003 fee6 	bl	800786e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2110      	movs	r1, #16
 8003aa6:	4871      	ldr	r0, [pc, #452]	@ (8003c6c <hataKoduLcdGoster+0x214>)
 8003aa8:	f003 fee1 	bl	800786e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8003aac:	2200      	movs	r2, #0
 8003aae:	2180      	movs	r1, #128	@ 0x80
 8003ab0:	486f      	ldr	r0, [pc, #444]	@ (8003c70 <hataKoduLcdGoster+0x218>)
 8003ab2:	f003 fedc 	bl	800786e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2140      	movs	r1, #64	@ 0x40
 8003aba:	486d      	ldr	r0, [pc, #436]	@ (8003c70 <hataKoduLcdGoster+0x218>)
 8003abc:	f003 fed7 	bl	800786e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2120      	movs	r1, #32
 8003ac4:	486a      	ldr	r0, [pc, #424]	@ (8003c70 <hataKoduLcdGoster+0x218>)
 8003ac6:	f003 fed2 	bl	800786e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8003aca:	2200      	movs	r2, #0
 8003acc:	2110      	movs	r1, #16
 8003ace:	4868      	ldr	r0, [pc, #416]	@ (8003c70 <hataKoduLcdGoster+0x218>)
 8003ad0:	f003 fecd 	bl	800786e <HAL_GPIO_WritePin>

	if(x==1) {
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d11d      	bne.n	8003b16 <hataKoduLcdGoster+0xbe>
		if(dilSecim==0) {
 8003ada:	4b66      	ldr	r3, [pc, #408]	@ (8003c74 <hataKoduLcdGoster+0x21c>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d105      	bne.n	8003aee <hataKoduLcdGoster+0x96>
			lcd_print(1, 1, "   HATA KODU    ");
 8003ae2:	4a65      	ldr	r2, [pc, #404]	@ (8003c78 <hataKoduLcdGoster+0x220>)
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	f7fc fce1 	bl	80004ae <lcd_print>
 8003aec:	e008      	b.n	8003b00 <hataKoduLcdGoster+0xa8>
		} else if(dilSecim==1) {
 8003aee:	4b61      	ldr	r3, [pc, #388]	@ (8003c74 <hataKoduLcdGoster+0x21c>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d104      	bne.n	8003b00 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   ERROR CODE   ");
 8003af6:	4a61      	ldr	r2, [pc, #388]	@ (8003c7c <hataKoduLcdGoster+0x224>)
 8003af8:	2101      	movs	r1, #1
 8003afa:	2001      	movs	r0, #1
 8003afc:	f7fc fcd7 	bl	80004ae <lcd_print>
		}
		lcd_print(2, 1, "1");
 8003b00:	4a5f      	ldr	r2, [pc, #380]	@ (8003c80 <hataKoduLcdGoster+0x228>)
 8003b02:	2101      	movs	r1, #1
 8003b04:	2002      	movs	r0, #2
 8003b06:	f7fc fcd2 	bl	80004ae <lcd_print>
		lcd_print(2, 7, "          ");
 8003b0a:	4a5e      	ldr	r2, [pc, #376]	@ (8003c84 <hataKoduLcdGoster+0x22c>)
 8003b0c:	2107      	movs	r1, #7
 8003b0e:	2002      	movs	r0, #2
 8003b10:	f7fc fccd 	bl	80004ae <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8003b14:	e0a3      	b.n	8003c5e <hataKoduLcdGoster+0x206>
	} else if(x==2){
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d11d      	bne.n	8003b58 <hataKoduLcdGoster+0x100>
		if(dilSecim==0){
 8003b1c:	4b55      	ldr	r3, [pc, #340]	@ (8003c74 <hataKoduLcdGoster+0x21c>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d105      	bne.n	8003b30 <hataKoduLcdGoster+0xd8>
			lcd_print(1, 1, "   HATA KODU    ");
 8003b24:	4a54      	ldr	r2, [pc, #336]	@ (8003c78 <hataKoduLcdGoster+0x220>)
 8003b26:	2101      	movs	r1, #1
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f7fc fcc0 	bl	80004ae <lcd_print>
 8003b2e:	e008      	b.n	8003b42 <hataKoduLcdGoster+0xea>
		} else if(dilSecim==1) {
 8003b30:	4b50      	ldr	r3, [pc, #320]	@ (8003c74 <hataKoduLcdGoster+0x21c>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d104      	bne.n	8003b42 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   ERROR CODE   ");
 8003b38:	4a50      	ldr	r2, [pc, #320]	@ (8003c7c <hataKoduLcdGoster+0x224>)
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	f7fc fcb6 	bl	80004ae <lcd_print>
		lcd_print(2, 2, "2");
 8003b42:	4a51      	ldr	r2, [pc, #324]	@ (8003c88 <hataKoduLcdGoster+0x230>)
 8003b44:	2102      	movs	r1, #2
 8003b46:	2002      	movs	r0, #2
 8003b48:	f7fc fcb1 	bl	80004ae <lcd_print>
		lcd_print(2, 7, "          ");
 8003b4c:	4a4d      	ldr	r2, [pc, #308]	@ (8003c84 <hataKoduLcdGoster+0x22c>)
 8003b4e:	2107      	movs	r1, #7
 8003b50:	2002      	movs	r0, #2
 8003b52:	f7fc fcac 	bl	80004ae <lcd_print>
}
 8003b56:	e082      	b.n	8003c5e <hataKoduLcdGoster+0x206>
	} else if(x==3) {
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d11d      	bne.n	8003b9a <hataKoduLcdGoster+0x142>
		if(dilSecim==0) {
 8003b5e:	4b45      	ldr	r3, [pc, #276]	@ (8003c74 <hataKoduLcdGoster+0x21c>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d105      	bne.n	8003b72 <hataKoduLcdGoster+0x11a>
			lcd_print(1, 1, "   HATA KODU    ");
 8003b66:	4a44      	ldr	r2, [pc, #272]	@ (8003c78 <hataKoduLcdGoster+0x220>)
 8003b68:	2101      	movs	r1, #1
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f7fc fc9f 	bl	80004ae <lcd_print>
 8003b70:	e008      	b.n	8003b84 <hataKoduLcdGoster+0x12c>
		} else if(dilSecim==1) {
 8003b72:	4b40      	ldr	r3, [pc, #256]	@ (8003c74 <hataKoduLcdGoster+0x21c>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d104      	bne.n	8003b84 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   ERROR CODE   ");
 8003b7a:	4a40      	ldr	r2, [pc, #256]	@ (8003c7c <hataKoduLcdGoster+0x224>)
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	2001      	movs	r0, #1
 8003b80:	f7fc fc95 	bl	80004ae <lcd_print>
		lcd_print(2, 3, "3");
 8003b84:	4a41      	ldr	r2, [pc, #260]	@ (8003c8c <hataKoduLcdGoster+0x234>)
 8003b86:	2103      	movs	r1, #3
 8003b88:	2002      	movs	r0, #2
 8003b8a:	f7fc fc90 	bl	80004ae <lcd_print>
		lcd_print(2, 7, "          ");
 8003b8e:	4a3d      	ldr	r2, [pc, #244]	@ (8003c84 <hataKoduLcdGoster+0x22c>)
 8003b90:	2107      	movs	r1, #7
 8003b92:	2002      	movs	r0, #2
 8003b94:	f7fc fc8b 	bl	80004ae <lcd_print>
}
 8003b98:	e061      	b.n	8003c5e <hataKoduLcdGoster+0x206>
	} else if(x==4){
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d11d      	bne.n	8003bdc <hataKoduLcdGoster+0x184>
		if(dilSecim==0) {
 8003ba0:	4b34      	ldr	r3, [pc, #208]	@ (8003c74 <hataKoduLcdGoster+0x21c>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <hataKoduLcdGoster+0x15c>
			lcd_print(1, 1, "   HATA KODU    ");
 8003ba8:	4a33      	ldr	r2, [pc, #204]	@ (8003c78 <hataKoduLcdGoster+0x220>)
 8003baa:	2101      	movs	r1, #1
 8003bac:	2001      	movs	r0, #1
 8003bae:	f7fc fc7e 	bl	80004ae <lcd_print>
 8003bb2:	e008      	b.n	8003bc6 <hataKoduLcdGoster+0x16e>
		} else if(dilSecim==1) {
 8003bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8003c74 <hataKoduLcdGoster+0x21c>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d104      	bne.n	8003bc6 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8003bbc:	4a2f      	ldr	r2, [pc, #188]	@ (8003c7c <hataKoduLcdGoster+0x224>)
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f7fc fc74 	bl	80004ae <lcd_print>
		lcd_print(2, 4, "4");
 8003bc6:	4a32      	ldr	r2, [pc, #200]	@ (8003c90 <hataKoduLcdGoster+0x238>)
 8003bc8:	2104      	movs	r1, #4
 8003bca:	2002      	movs	r0, #2
 8003bcc:	f7fc fc6f 	bl	80004ae <lcd_print>
		lcd_print(2, 7, "          ");
 8003bd0:	4a2c      	ldr	r2, [pc, #176]	@ (8003c84 <hataKoduLcdGoster+0x22c>)
 8003bd2:	2107      	movs	r1, #7
 8003bd4:	2002      	movs	r0, #2
 8003bd6:	f7fc fc6a 	bl	80004ae <lcd_print>
}
 8003bda:	e040      	b.n	8003c5e <hataKoduLcdGoster+0x206>
	} else if(x==5) {
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d11d      	bne.n	8003c1e <hataKoduLcdGoster+0x1c6>
		if(dilSecim==0) {
 8003be2:	4b24      	ldr	r3, [pc, #144]	@ (8003c74 <hataKoduLcdGoster+0x21c>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d105      	bne.n	8003bf6 <hataKoduLcdGoster+0x19e>
			lcd_print(1, 1, "   HATA KODU    ");
 8003bea:	4a23      	ldr	r2, [pc, #140]	@ (8003c78 <hataKoduLcdGoster+0x220>)
 8003bec:	2101      	movs	r1, #1
 8003bee:	2001      	movs	r0, #1
 8003bf0:	f7fc fc5d 	bl	80004ae <lcd_print>
 8003bf4:	e008      	b.n	8003c08 <hataKoduLcdGoster+0x1b0>
		} else if(dilSecim==1) {
 8003bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8003c74 <hataKoduLcdGoster+0x21c>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d104      	bne.n	8003c08 <hataKoduLcdGoster+0x1b0>
			lcd_print(1, 1, "   ERROR CODE   ");
 8003bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8003c7c <hataKoduLcdGoster+0x224>)
 8003c00:	2101      	movs	r1, #1
 8003c02:	2001      	movs	r0, #1
 8003c04:	f7fc fc53 	bl	80004ae <lcd_print>
		lcd_print(2, 5, "5");
 8003c08:	4a22      	ldr	r2, [pc, #136]	@ (8003c94 <hataKoduLcdGoster+0x23c>)
 8003c0a:	2105      	movs	r1, #5
 8003c0c:	2002      	movs	r0, #2
 8003c0e:	f7fc fc4e 	bl	80004ae <lcd_print>
		lcd_print(2, 7, "          ");
 8003c12:	4a1c      	ldr	r2, [pc, #112]	@ (8003c84 <hataKoduLcdGoster+0x22c>)
 8003c14:	2107      	movs	r1, #7
 8003c16:	2002      	movs	r0, #2
 8003c18:	f7fc fc49 	bl	80004ae <lcd_print>
}
 8003c1c:	e01f      	b.n	8003c5e <hataKoduLcdGoster+0x206>
	} else if(x==6) {
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	2b06      	cmp	r3, #6
 8003c22:	d11c      	bne.n	8003c5e <hataKoduLcdGoster+0x206>
		if(dilSecim==0) {
 8003c24:	4b13      	ldr	r3, [pc, #76]	@ (8003c74 <hataKoduLcdGoster+0x21c>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <hataKoduLcdGoster+0x1e0>
			lcd_print(1, 1, "   HATA KODU    ");
 8003c2c:	4a12      	ldr	r2, [pc, #72]	@ (8003c78 <hataKoduLcdGoster+0x220>)
 8003c2e:	2101      	movs	r1, #1
 8003c30:	2001      	movs	r0, #1
 8003c32:	f7fc fc3c 	bl	80004ae <lcd_print>
 8003c36:	e008      	b.n	8003c4a <hataKoduLcdGoster+0x1f2>
		} else if(dilSecim==1) {
 8003c38:	4b0e      	ldr	r3, [pc, #56]	@ (8003c74 <hataKoduLcdGoster+0x21c>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d104      	bne.n	8003c4a <hataKoduLcdGoster+0x1f2>
			lcd_print(1, 1, "   ERROR CODE   ");
 8003c40:	4a0e      	ldr	r2, [pc, #56]	@ (8003c7c <hataKoduLcdGoster+0x224>)
 8003c42:	2101      	movs	r1, #1
 8003c44:	2001      	movs	r0, #1
 8003c46:	f7fc fc32 	bl	80004ae <lcd_print>
		lcd_print(2, 6, "6");
 8003c4a:	4a13      	ldr	r2, [pc, #76]	@ (8003c98 <hataKoduLcdGoster+0x240>)
 8003c4c:	2106      	movs	r1, #6
 8003c4e:	2002      	movs	r0, #2
 8003c50:	f7fc fc2d 	bl	80004ae <lcd_print>
		lcd_print(2, 7, "          ");
 8003c54:	4a0b      	ldr	r2, [pc, #44]	@ (8003c84 <hataKoduLcdGoster+0x22c>)
 8003c56:	2107      	movs	r1, #7
 8003c58:	2002      	movs	r0, #2
 8003c5a:	f7fc fc28 	bl	80004ae <lcd_print>
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40010c00 	.word	0x40010c00
 8003c6c:	40011000 	.word	0x40011000
 8003c70:	40010800 	.word	0x40010800
 8003c74:	20000344 	.word	0x20000344
 8003c78:	0800c798 	.word	0x0800c798
 8003c7c:	0800c7ac 	.word	0x0800c7ac
 8003c80:	0800c7c0 	.word	0x0800c7c0
 8003c84:	0800c7c4 	.word	0x0800c7c4
 8003c88:	0800c7d0 	.word	0x0800c7d0
 8003c8c:	0800c7d4 	.word	0x0800c7d4
 8003c90:	0800c7d8 	.word	0x0800c7d8
 8003c94:	0800c7dc 	.word	0x0800c7dc
 8003c98:	0800c7e0 	.word	0x0800c7e0

08003c9c <eepromKontrol>:

void eepromKontrol(void) {
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8003ca2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003ca6:	9302      	str	r3, [sp, #8]
 8003ca8:	233f      	movs	r3, #63	@ 0x3f
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	4b9a      	ldr	r3, [pc, #616]	@ (8003f18 <eepromKontrol+0x27c>)
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	233f      	movs	r3, #63	@ 0x3f
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	21a0      	movs	r1, #160	@ 0xa0
 8003cb6:	4899      	ldr	r0, [pc, #612]	@ (8003f1c <eepromKontrol+0x280>)
 8003cb8:	f004 f976 	bl	8007fa8 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8003cbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003cc0:	f003 f930 	bl	8006f24 <HAL_Delay>
	kaydedilenDeger = eepromData[3];
 8003cc4:	4b94      	ldr	r3, [pc, #592]	@ (8003f18 <eepromKontrol+0x27c>)
 8003cc6:	78da      	ldrb	r2, [r3, #3]
 8003cc8:	4b95      	ldr	r3, [pc, #596]	@ (8003f20 <eepromKontrol+0x284>)
 8003cca:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8003ccc:	4b92      	ldr	r3, [pc, #584]	@ (8003f18 <eepromKontrol+0x27c>)
 8003cce:	785a      	ldrb	r2, [r3, #1]
 8003cd0:	4b94      	ldr	r3, [pc, #592]	@ (8003f24 <eepromKontrol+0x288>)
 8003cd2:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8003cd4:	4b90      	ldr	r3, [pc, #576]	@ (8003f18 <eepromKontrol+0x27c>)
 8003cd6:	789a      	ldrb	r2, [r3, #2]
 8003cd8:	4b93      	ldr	r3, [pc, #588]	@ (8003f28 <eepromKontrol+0x28c>)
 8003cda:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8003cdc:	4b8e      	ldr	r3, [pc, #568]	@ (8003f18 <eepromKontrol+0x27c>)
 8003cde:	791a      	ldrb	r2, [r3, #4]
 8003ce0:	4b92      	ldr	r3, [pc, #584]	@ (8003f2c <eepromKontrol+0x290>)
 8003ce2:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8003ce4:	4b8c      	ldr	r3, [pc, #560]	@ (8003f18 <eepromKontrol+0x27c>)
 8003ce6:	795a      	ldrb	r2, [r3, #5]
 8003ce8:	4b91      	ldr	r3, [pc, #580]	@ (8003f30 <eepromKontrol+0x294>)
 8003cea:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8003cec:	4b8a      	ldr	r3, [pc, #552]	@ (8003f18 <eepromKontrol+0x27c>)
 8003cee:	799a      	ldrb	r2, [r3, #6]
 8003cf0:	4b90      	ldr	r3, [pc, #576]	@ (8003f34 <eepromKontrol+0x298>)
 8003cf2:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8003cf4:	4b88      	ldr	r3, [pc, #544]	@ (8003f18 <eepromKontrol+0x27c>)
 8003cf6:	79da      	ldrb	r2, [r3, #7]
 8003cf8:	4b8f      	ldr	r3, [pc, #572]	@ (8003f38 <eepromKontrol+0x29c>)
 8003cfa:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8003cfc:	4b86      	ldr	r3, [pc, #536]	@ (8003f18 <eepromKontrol+0x27c>)
 8003cfe:	7a1a      	ldrb	r2, [r3, #8]
 8003d00:	4b8e      	ldr	r3, [pc, #568]	@ (8003f3c <eepromKontrol+0x2a0>)
 8003d02:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8003d04:	4b84      	ldr	r3, [pc, #528]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d06:	7a5a      	ldrb	r2, [r3, #9]
 8003d08:	4b8d      	ldr	r3, [pc, #564]	@ (8003f40 <eepromKontrol+0x2a4>)
 8003d0a:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8003d0c:	4b82      	ldr	r3, [pc, #520]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d0e:	7a9a      	ldrb	r2, [r3, #10]
 8003d10:	4b8c      	ldr	r3, [pc, #560]	@ (8003f44 <eepromKontrol+0x2a8>)
 8003d12:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8003d14:	4b80      	ldr	r3, [pc, #512]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d16:	7ada      	ldrb	r2, [r3, #11]
 8003d18:	4b8b      	ldr	r3, [pc, #556]	@ (8003f48 <eepromKontrol+0x2ac>)
 8003d1a:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8003d1c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d1e:	7b1a      	ldrb	r2, [r3, #12]
 8003d20:	4b8a      	ldr	r3, [pc, #552]	@ (8003f4c <eepromKontrol+0x2b0>)
 8003d22:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8003d24:	4b7c      	ldr	r3, [pc, #496]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d26:	7b5a      	ldrb	r2, [r3, #13]
 8003d28:	4b89      	ldr	r3, [pc, #548]	@ (8003f50 <eepromKontrol+0x2b4>)
 8003d2a:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8003d2c:	4b7a      	ldr	r3, [pc, #488]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d2e:	7b9a      	ldrb	r2, [r3, #14]
 8003d30:	4b88      	ldr	r3, [pc, #544]	@ (8003f54 <eepromKontrol+0x2b8>)
 8003d32:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8003d34:	4b78      	ldr	r3, [pc, #480]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d36:	7bda      	ldrb	r2, [r3, #15]
 8003d38:	4b87      	ldr	r3, [pc, #540]	@ (8003f58 <eepromKontrol+0x2bc>)
 8003d3a:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8003d3c:	4b76      	ldr	r3, [pc, #472]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d3e:	7c1a      	ldrb	r2, [r3, #16]
 8003d40:	4b86      	ldr	r3, [pc, #536]	@ (8003f5c <eepromKontrol+0x2c0>)
 8003d42:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8003d44:	4b74      	ldr	r3, [pc, #464]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d46:	7c5a      	ldrb	r2, [r3, #17]
 8003d48:	4b85      	ldr	r3, [pc, #532]	@ (8003f60 <eepromKontrol+0x2c4>)
 8003d4a:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8003d4c:	4b72      	ldr	r3, [pc, #456]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d4e:	7c9a      	ldrb	r2, [r3, #18]
 8003d50:	4b84      	ldr	r3, [pc, #528]	@ (8003f64 <eepromKontrol+0x2c8>)
 8003d52:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8003d54:	4b70      	ldr	r3, [pc, #448]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d56:	7cda      	ldrb	r2, [r3, #19]
 8003d58:	4b83      	ldr	r3, [pc, #524]	@ (8003f68 <eepromKontrol+0x2cc>)
 8003d5a:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8003d5c:	4b6e      	ldr	r3, [pc, #440]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d5e:	7d1a      	ldrb	r2, [r3, #20]
 8003d60:	4b82      	ldr	r3, [pc, #520]	@ (8003f6c <eepromKontrol+0x2d0>)
 8003d62:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8003d64:	4b6c      	ldr	r3, [pc, #432]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d66:	7d5a      	ldrb	r2, [r3, #21]
 8003d68:	4b81      	ldr	r3, [pc, #516]	@ (8003f70 <eepromKontrol+0x2d4>)
 8003d6a:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8003d6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d6e:	7d9a      	ldrb	r2, [r3, #22]
 8003d70:	4b80      	ldr	r3, [pc, #512]	@ (8003f74 <eepromKontrol+0x2d8>)
 8003d72:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8003d74:	4b68      	ldr	r3, [pc, #416]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d76:	7dda      	ldrb	r2, [r3, #23]
 8003d78:	4b7f      	ldr	r3, [pc, #508]	@ (8003f78 <eepromKontrol+0x2dc>)
 8003d7a:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8003d7c:	4b66      	ldr	r3, [pc, #408]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d7e:	7e1a      	ldrb	r2, [r3, #24]
 8003d80:	4b7e      	ldr	r3, [pc, #504]	@ (8003f7c <eepromKontrol+0x2e0>)
 8003d82:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8003d84:	4b64      	ldr	r3, [pc, #400]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d86:	7e5a      	ldrb	r2, [r3, #25]
 8003d88:	4b7d      	ldr	r3, [pc, #500]	@ (8003f80 <eepromKontrol+0x2e4>)
 8003d8a:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8003d8c:	4b62      	ldr	r3, [pc, #392]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d8e:	7e9a      	ldrb	r2, [r3, #26]
 8003d90:	4b7c      	ldr	r3, [pc, #496]	@ (8003f84 <eepromKontrol+0x2e8>)
 8003d92:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8003d94:	4b60      	ldr	r3, [pc, #384]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d96:	7eda      	ldrb	r2, [r3, #27]
 8003d98:	4b7b      	ldr	r3, [pc, #492]	@ (8003f88 <eepromKontrol+0x2ec>)
 8003d9a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8003d9c:	4b5e      	ldr	r3, [pc, #376]	@ (8003f18 <eepromKontrol+0x27c>)
 8003d9e:	7f1a      	ldrb	r2, [r3, #28]
 8003da0:	4b7a      	ldr	r3, [pc, #488]	@ (8003f8c <eepromKontrol+0x2f0>)
 8003da2:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8003da4:	4b5c      	ldr	r3, [pc, #368]	@ (8003f18 <eepromKontrol+0x27c>)
 8003da6:	7f5a      	ldrb	r2, [r3, #29]
 8003da8:	4b79      	ldr	r3, [pc, #484]	@ (8003f90 <eepromKontrol+0x2f4>)
 8003daa:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8003dac:	4b5a      	ldr	r3, [pc, #360]	@ (8003f18 <eepromKontrol+0x27c>)
 8003dae:	7f9a      	ldrb	r2, [r3, #30]
 8003db0:	4b78      	ldr	r3, [pc, #480]	@ (8003f94 <eepromKontrol+0x2f8>)
 8003db2:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8003db4:	4b58      	ldr	r3, [pc, #352]	@ (8003f18 <eepromKontrol+0x27c>)
 8003db6:	7fda      	ldrb	r2, [r3, #31]
 8003db8:	4b77      	ldr	r3, [pc, #476]	@ (8003f98 <eepromKontrol+0x2fc>)
 8003dba:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8003dbc:	4b56      	ldr	r3, [pc, #344]	@ (8003f18 <eepromKontrol+0x27c>)
 8003dbe:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003dc2:	4b76      	ldr	r3, [pc, #472]	@ (8003f9c <eepromKontrol+0x300>)
 8003dc4:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8003dc6:	4b54      	ldr	r3, [pc, #336]	@ (8003f18 <eepromKontrol+0x27c>)
 8003dc8:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8003dcc:	4b74      	ldr	r3, [pc, #464]	@ (8003fa0 <eepromKontrol+0x304>)
 8003dce:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8003dd0:	4b51      	ldr	r3, [pc, #324]	@ (8003f18 <eepromKontrol+0x27c>)
 8003dd2:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8003dd6:	4b73      	ldr	r3, [pc, #460]	@ (8003fa4 <eepromKontrol+0x308>)
 8003dd8:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8003dda:	4b4f      	ldr	r3, [pc, #316]	@ (8003f18 <eepromKontrol+0x27c>)
 8003ddc:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8003de0:	4b71      	ldr	r3, [pc, #452]	@ (8003fa8 <eepromKontrol+0x30c>)
 8003de2:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8003de4:	4b4c      	ldr	r3, [pc, #304]	@ (8003f18 <eepromKontrol+0x27c>)
 8003de6:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8003dea:	4b70      	ldr	r3, [pc, #448]	@ (8003fac <eepromKontrol+0x310>)
 8003dec:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[37];
 8003dee:	4b4a      	ldr	r3, [pc, #296]	@ (8003f18 <eepromKontrol+0x27c>)
 8003df0:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8003df4:	4b6e      	ldr	r3, [pc, #440]	@ (8003fb0 <eepromKontrol+0x314>)
 8003df6:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[38];
 8003df8:	4b47      	ldr	r3, [pc, #284]	@ (8003f18 <eepromKontrol+0x27c>)
 8003dfa:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8003dfe:	4b6d      	ldr	r3, [pc, #436]	@ (8003fb4 <eepromKontrol+0x318>)
 8003e00:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[39];
 8003e02:	4b45      	ldr	r3, [pc, #276]	@ (8003f18 <eepromKontrol+0x27c>)
 8003e04:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8003e08:	4b6b      	ldr	r3, [pc, #428]	@ (8003fb8 <eepromKontrol+0x31c>)
 8003e0a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[40];
 8003e0c:	4b42      	ldr	r3, [pc, #264]	@ (8003f18 <eepromKontrol+0x27c>)
 8003e0e:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8003e12:	4b6a      	ldr	r3, [pc, #424]	@ (8003fbc <eepromKontrol+0x320>)
 8003e14:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[41];
 8003e16:	4b40      	ldr	r3, [pc, #256]	@ (8003f18 <eepromKontrol+0x27c>)
 8003e18:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8003e1c:	4b68      	ldr	r3, [pc, #416]	@ (8003fc0 <eepromKontrol+0x324>)
 8003e1e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[42];
 8003e20:	4b3d      	ldr	r3, [pc, #244]	@ (8003f18 <eepromKontrol+0x27c>)
 8003e22:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8003e26:	4b67      	ldr	r3, [pc, #412]	@ (8003fc4 <eepromKontrol+0x328>)
 8003e28:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[43];
 8003e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f18 <eepromKontrol+0x27c>)
 8003e2c:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8003e30:	4b65      	ldr	r3, [pc, #404]	@ (8003fc8 <eepromKontrol+0x32c>)
 8003e32:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[44];
 8003e34:	4b38      	ldr	r3, [pc, #224]	@ (8003f18 <eepromKontrol+0x27c>)
 8003e36:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003e3a:	4b64      	ldr	r3, [pc, #400]	@ (8003fcc <eepromKontrol+0x330>)
 8003e3c:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[45];
 8003e3e:	4b36      	ldr	r3, [pc, #216]	@ (8003f18 <eepromKontrol+0x27c>)
 8003e40:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8003e44:	4b62      	ldr	r3, [pc, #392]	@ (8003fd0 <eepromKontrol+0x334>)
 8003e46:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[46];
 8003e48:	4b33      	ldr	r3, [pc, #204]	@ (8003f18 <eepromKontrol+0x27c>)
 8003e4a:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8003e4e:	4b61      	ldr	r3, [pc, #388]	@ (8003fd4 <eepromKontrol+0x338>)
 8003e50:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 8003e52:	4b52      	ldr	r3, [pc, #328]	@ (8003f9c <eepromKontrol+0x300>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b09      	cmp	r3, #9
 8003e58:	d902      	bls.n	8003e60 <eepromKontrol+0x1c4>
	    calismaSayisi10000=0;
 8003e5a:	4b50      	ldr	r3, [pc, #320]	@ (8003f9c <eepromKontrol+0x300>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8003e60:	4b4d      	ldr	r3, [pc, #308]	@ (8003f98 <eepromKontrol+0x2fc>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b09      	cmp	r3, #9
 8003e66:	d902      	bls.n	8003e6e <eepromKontrol+0x1d2>
	    calismaSayisi1000=0;
 8003e68:	4b4b      	ldr	r3, [pc, #300]	@ (8003f98 <eepromKontrol+0x2fc>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8003e6e:	4b49      	ldr	r3, [pc, #292]	@ (8003f94 <eepromKontrol+0x2f8>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b09      	cmp	r3, #9
 8003e74:	d902      	bls.n	8003e7c <eepromKontrol+0x1e0>
	    calismaSayisi100=0;
 8003e76:	4b47      	ldr	r3, [pc, #284]	@ (8003f94 <eepromKontrol+0x2f8>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8003e7c:	4b44      	ldr	r3, [pc, #272]	@ (8003f90 <eepromKontrol+0x2f4>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b09      	cmp	r3, #9
 8003e82:	d902      	bls.n	8003e8a <eepromKontrol+0x1ee>
	    calismaSayisi10=0;
 8003e84:	4b42      	ldr	r3, [pc, #264]	@ (8003f90 <eepromKontrol+0x2f4>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8003e8a:	4b40      	ldr	r3, [pc, #256]	@ (8003f8c <eepromKontrol+0x2f0>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b09      	cmp	r3, #9
 8003e90:	d902      	bls.n	8003e98 <eepromKontrol+0x1fc>
	    calismaSayisi1=0;
 8003e92:	4b3e      	ldr	r3, [pc, #248]	@ (8003f8c <eepromKontrol+0x2f0>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]
/*
	if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8003e98:	4b22      	ldr	r3, [pc, #136]	@ (8003f24 <eepromKontrol+0x288>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d902      	bls.n	8003ea6 <eepromKontrol+0x20a>
	    calismaSekli=0;
 8003ea0:	4b20      	ldr	r3, [pc, #128]	@ (8003f24 <eepromKontrol+0x288>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8003ea6:	4b20      	ldr	r3, [pc, #128]	@ (8003f28 <eepromKontrol+0x28c>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d902      	bls.n	8003eb4 <eepromKontrol+0x218>
	    emniyetCercevesi=1;
 8003eae:	4b1e      	ldr	r3, [pc, #120]	@ (8003f28 <eepromKontrol+0x28c>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8003eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f2c <eepromKontrol+0x290>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d902      	bls.n	8003ec2 <eepromKontrol+0x226>
	    yavaslamaLimit=0;
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f2c <eepromKontrol+0x290>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8003ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f30 <eepromKontrol+0x294>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d902      	bls.n	8003ed0 <eepromKontrol+0x234>
	    altLimit=1;
 8003eca:	4b19      	ldr	r3, [pc, #100]	@ (8003f30 <eepromKontrol+0x294>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8003ed0:	4b18      	ldr	r3, [pc, #96]	@ (8003f34 <eepromKontrol+0x298>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d902      	bls.n	8003ede <eepromKontrol+0x242>
	    basincSalteri=1;
 8003ed8:	4b16      	ldr	r3, [pc, #88]	@ (8003f34 <eepromKontrol+0x298>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8003ede:	4b16      	ldr	r3, [pc, #88]	@ (8003f38 <eepromKontrol+0x29c>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	d902      	bls.n	8003eec <eepromKontrol+0x250>
	    kapiSecimleri=3;
 8003ee6:	4b14      	ldr	r3, [pc, #80]	@ (8003f38 <eepromKontrol+0x29c>)
 8003ee8:	2203      	movs	r2, #3
 8003eea:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8003eec:	4b2f      	ldr	r3, [pc, #188]	@ (8003fac <eepromKontrol+0x310>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d902      	bls.n	8003efa <eepromKontrol+0x25e>
	    kapiAcTipi=0;
 8003ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8003fac <eepromKontrol+0x310>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8003efa:	4b10      	ldr	r3, [pc, #64]	@ (8003f3c <eepromKontrol+0x2a0>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d902      	bls.n	8003f08 <eepromKontrol+0x26c>
	    kapi1Tip=1;
 8003f02:	4b0e      	ldr	r3, [pc, #56]	@ (8003f3c <eepromKontrol+0x2a0>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8003f08:	4b0d      	ldr	r3, [pc, #52]	@ (8003f40 <eepromKontrol+0x2a4>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b05      	cmp	r3, #5
 8003f0e:	d963      	bls.n	8003fd8 <eepromKontrol+0x33c>
	    kapi1AcSure=5;
 8003f10:	4b0b      	ldr	r3, [pc, #44]	@ (8003f40 <eepromKontrol+0x2a4>)
 8003f12:	2205      	movs	r2, #5
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	e05f      	b.n	8003fd8 <eepromKontrol+0x33c>
 8003f18:	200002b8 	.word	0x200002b8
 8003f1c:	200003b4 	.word	0x200003b4
 8003f20:	200002f7 	.word	0x200002f7
 8003f24:	20000325 	.word	0x20000325
 8003f28:	20000328 	.word	0x20000328
 8003f2c:	20000329 	.word	0x20000329
 8003f30:	2000032a 	.word	0x2000032a
 8003f34:	2000032b 	.word	0x2000032b
 8003f38:	2000032c 	.word	0x2000032c
 8003f3c:	2000032d 	.word	0x2000032d
 8003f40:	2000033d 	.word	0x2000033d
 8003f44:	2000032e 	.word	0x2000032e
 8003f48:	2000033e 	.word	0x2000033e
 8003f4c:	2000032f 	.word	0x2000032f
 8003f50:	2000033f 	.word	0x2000033f
 8003f54:	20000332 	.word	0x20000332
 8003f58:	20000333 	.word	0x20000333
 8003f5c:	20000334 	.word	0x20000334
 8003f60:	20000335 	.word	0x20000335
 8003f64:	20000336 	.word	0x20000336
 8003f68:	20000337 	.word	0x20000337
 8003f6c:	20000338 	.word	0x20000338
 8003f70:	20000339 	.word	0x20000339
 8003f74:	2000033a 	.word	0x2000033a
 8003f78:	2000033b 	.word	0x2000033b
 8003f7c:	2000033c 	.word	0x2000033c
 8003f80:	20000340 	.word	0x20000340
 8003f84:	20000342 	.word	0x20000342
 8003f88:	20000320 	.word	0x20000320
 8003f8c:	20000321 	.word	0x20000321
 8003f90:	20000322 	.word	0x20000322
 8003f94:	20000031 	.word	0x20000031
 8003f98:	20000032 	.word	0x20000032
 8003f9c:	20000323 	.word	0x20000323
 8003fa0:	20000344 	.word	0x20000344
 8003fa4:	20000331 	.word	0x20000331
 8003fa8:	20000343 	.word	0x20000343
 8003fac:	20000330 	.word	0x20000330
 8003fb0:	20000345 	.word	0x20000345
 8003fb4:	20000346 	.word	0x20000346
 8003fb8:	20000347 	.word	0x20000347
 8003fbc:	20000348 	.word	0x20000348
 8003fc0:	20000349 	.word	0x20000349
 8003fc4:	2000034a 	.word	0x2000034a
 8003fc8:	2000034b 	.word	0x2000034b
 8003fcc:	2000034c 	.word	0x2000034c
 8003fd0:	2000034d 	.word	0x2000034d
 8003fd4:	2000034e 	.word	0x2000034e
	}

	if(kapi2Tip>2) {
 8003fd8:	4b49      	ldr	r3, [pc, #292]	@ (8004100 <eepromKontrol+0x464>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d902      	bls.n	8003fe6 <eepromKontrol+0x34a>
	    kapi2Tip=1;
 8003fe0:	4b47      	ldr	r3, [pc, #284]	@ (8004100 <eepromKontrol+0x464>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8003fe6:	4b47      	ldr	r3, [pc, #284]	@ (8004104 <eepromKontrol+0x468>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b05      	cmp	r3, #5
 8003fec:	d902      	bls.n	8003ff4 <eepromKontrol+0x358>
	    kapi2AcSure=5;
 8003fee:	4b45      	ldr	r3, [pc, #276]	@ (8004104 <eepromKontrol+0x468>)
 8003ff0:	2205      	movs	r2, #5
 8003ff2:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8003ff4:	4b44      	ldr	r3, [pc, #272]	@ (8004108 <eepromKontrol+0x46c>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d902      	bls.n	8004002 <eepromKontrol+0x366>
	    kapitablaTip=1;
 8003ffc:	4b42      	ldr	r3, [pc, #264]	@ (8004108 <eepromKontrol+0x46c>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>3) {
 8004002:	4b42      	ldr	r3, [pc, #264]	@ (800410c <eepromKontrol+0x470>)
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b03      	cmp	r3, #3
 8004008:	d902      	bls.n	8004010 <eepromKontrol+0x374>
	    kapiTablaAcKonum=3;
 800400a:	4b40      	ldr	r3, [pc, #256]	@ (800410c <eepromKontrol+0x470>)
 800400c:	2203      	movs	r2, #3
 800400e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8004010:	4b3f      	ldr	r3, [pc, #252]	@ (8004110 <eepromKontrol+0x474>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b05      	cmp	r3, #5
 8004016:	d902      	bls.n	800401e <eepromKontrol+0x382>
	    kapiTablaAcSure=5;
 8004018:	4b3d      	ldr	r3, [pc, #244]	@ (8004110 <eepromKontrol+0x474>)
 800401a:	2205      	movs	r2, #5
 800401c:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 800401e:	4b3d      	ldr	r3, [pc, #244]	@ (8004114 <eepromKontrol+0x478>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d902      	bls.n	800402c <eepromKontrol+0x390>
	    yukariYavasLimit=0;
 8004026:	4b3b      	ldr	r3, [pc, #236]	@ (8004114 <eepromKontrol+0x478>)
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 800402c:	4b3a      	ldr	r3, [pc, #232]	@ (8004118 <eepromKontrol+0x47c>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b02      	cmp	r3, #2
 8004032:	d902      	bls.n	800403a <eepromKontrol+0x39e>
	    devirmeYuruyusSecim=0;
 8004034:	4b38      	ldr	r3, [pc, #224]	@ (8004118 <eepromKontrol+0x47c>)
 8004036:	2200      	movs	r2, #0
 8004038:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 800403a:	4b38      	ldr	r3, [pc, #224]	@ (800411c <eepromKontrol+0x480>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d902      	bls.n	8004048 <eepromKontrol+0x3ac>
	    devirmeYukariIleriLimit=1;
 8004042:	4b36      	ldr	r3, [pc, #216]	@ (800411c <eepromKontrol+0x480>)
 8004044:	2201      	movs	r2, #1
 8004046:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8004048:	4b35      	ldr	r3, [pc, #212]	@ (8004120 <eepromKontrol+0x484>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d902      	bls.n	8004056 <eepromKontrol+0x3ba>
	    devirmeAsagiGeriLimit=1;
 8004050:	4b33      	ldr	r3, [pc, #204]	@ (8004120 <eepromKontrol+0x484>)
 8004052:	2201      	movs	r2, #1
 8004054:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8004056:	4b33      	ldr	r3, [pc, #204]	@ (8004124 <eepromKontrol+0x488>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d902      	bls.n	8004064 <eepromKontrol+0x3c8>
	    devirmeSilindirTipi=0;
 800405e:	4b31      	ldr	r3, [pc, #196]	@ (8004124 <eepromKontrol+0x488>)
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8004064:	4b30      	ldr	r3, [pc, #192]	@ (8004128 <eepromKontrol+0x48c>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d902      	bls.n	8004072 <eepromKontrol+0x3d6>
	    platformSilindirTipi=0;
 800406c:	4b2e      	ldr	r3, [pc, #184]	@ (8004128 <eepromKontrol+0x48c>)
 800406e:	2200      	movs	r2, #0
 8004070:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8004072:	4b2e      	ldr	r3, [pc, #184]	@ (800412c <eepromKontrol+0x490>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b05      	cmp	r3, #5
 8004078:	d902      	bls.n	8004080 <eepromKontrol+0x3e4>
	    yukariValfTmr=0;
 800407a:	4b2c      	ldr	r3, [pc, #176]	@ (800412c <eepromKontrol+0x490>)
 800407c:	2200      	movs	r2, #0
 800407e:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8004080:	4b2b      	ldr	r3, [pc, #172]	@ (8004130 <eepromKontrol+0x494>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b05      	cmp	r3, #5
 8004086:	d902      	bls.n	800408e <eepromKontrol+0x3f2>
	    asagiValfTmr=0;
 8004088:	4b29      	ldr	r3, [pc, #164]	@ (8004130 <eepromKontrol+0x494>)
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 800408e:	4b29      	ldr	r3, [pc, #164]	@ (8004134 <eepromKontrol+0x498>)
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b05      	cmp	r3, #5
 8004094:	d902      	bls.n	800409c <eepromKontrol+0x400>
	    devirmeYukariIleriTmr=0;
 8004096:	4b27      	ldr	r3, [pc, #156]	@ (8004134 <eepromKontrol+0x498>)
 8004098:	2200      	movs	r2, #0
 800409a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 800409c:	4b26      	ldr	r3, [pc, #152]	@ (8004138 <eepromKontrol+0x49c>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2b05      	cmp	r3, #5
 80040a2:	d902      	bls.n	80040aa <eepromKontrol+0x40e>
	    devirmeAsagiGeriTmr=0;
 80040a4:	4b24      	ldr	r3, [pc, #144]	@ (8004138 <eepromKontrol+0x49c>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80040aa:	4b24      	ldr	r3, [pc, #144]	@ (800413c <eepromKontrol+0x4a0>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2bb4      	cmp	r3, #180	@ 0xb4
 80040b0:	d902      	bls.n	80040b8 <eepromKontrol+0x41c>
	    makineCalismaTmr=60;
 80040b2:	4b22      	ldr	r3, [pc, #136]	@ (800413c <eepromKontrol+0x4a0>)
 80040b4:	223c      	movs	r2, #60	@ 0x3c
 80040b6:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80040b8:	4b21      	ldr	r3, [pc, #132]	@ (8004140 <eepromKontrol+0x4a4>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d902      	bls.n	80040c6 <eepromKontrol+0x42a>
	    buzzer=0;
 80040c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004140 <eepromKontrol+0x4a4>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 80040c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004144 <eepromKontrol+0x4a8>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d902      	bls.n	80040d4 <eepromKontrol+0x438>
	    demoMode=0;
 80040ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004144 <eepromKontrol+0x4a8>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 80040d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004148 <eepromKontrol+0x4ac>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d902      	bls.n	80040e2 <eepromKontrol+0x446>
	    calismaSayModu=0;
 80040dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004148 <eepromKontrol+0x4ac>)
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 80040e2:	4b1a      	ldr	r3, [pc, #104]	@ (800414c <eepromKontrol+0x4b0>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d902      	bls.n	80040f0 <eepromKontrol+0x454>
	    dilSecim=0;
 80040ea:	4b18      	ldr	r3, [pc, #96]	@ (800414c <eepromKontrol+0x4b0>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 80040f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80040f4:	f002 ff16 	bl	8006f24 <HAL_Delay>
}
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	2000032e 	.word	0x2000032e
 8004104:	2000033e 	.word	0x2000033e
 8004108:	2000032f 	.word	0x2000032f
 800410c:	20000331 	.word	0x20000331
 8004110:	2000033f 	.word	0x2000033f
 8004114:	20000332 	.word	0x20000332
 8004118:	20000333 	.word	0x20000333
 800411c:	20000334 	.word	0x20000334
 8004120:	20000335 	.word	0x20000335
 8004124:	20000336 	.word	0x20000336
 8004128:	20000337 	.word	0x20000337
 800412c:	20000338 	.word	0x20000338
 8004130:	20000339 	.word	0x20000339
 8004134:	2000033a 	.word	0x2000033a
 8004138:	2000033b 	.word	0x2000033b
 800413c:	2000033c 	.word	0x2000033c
 8004140:	20000340 	.word	0x20000340
 8004144:	20000342 	.word	0x20000342
 8004148:	20000343 	.word	0x20000343
 800414c:	20000344 	.word	0x20000344

08004150 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b089      	sub	sp, #36	@ 0x24
 8004154:	af04      	add	r7, sp, #16
 8004156:	4603      	mov	r3, r0
 8004158:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 800415a:	4b25      	ldr	r3, [pc, #148]	@ (80041f0 <hata2EEPROM+0xa0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	1e5a      	subs	r2, r3, #1
 8004160:	4b24      	ldr	r3, [pc, #144]	@ (80041f4 <hata2EEPROM+0xa4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4413      	add	r3, r2
 8004166:	4a24      	ldr	r2, [pc, #144]	@ (80041f8 <hata2EEPROM+0xa8>)
 8004168:	5cd3      	ldrb	r3, [r2, r3]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 800416e:	f000 f847 	bl	8004200 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8004172:	e000      	b.n	8004176 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8004174:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	e012      	b.n	80041a2 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 800417c:	4b1d      	ldr	r3, [pc, #116]	@ (80041f4 <hata2EEPROM+0xa4>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	4a1c      	ldr	r2, [pc, #112]	@ (80041f8 <hata2EEPROM+0xa8>)
 8004186:	5cd3      	ldrb	r3, [r2, r3]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d107      	bne.n	800419c <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 800418c:	4b19      	ldr	r3, [pc, #100]	@ (80041f4 <hata2EEPROM+0xa4>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	4918      	ldr	r1, [pc, #96]	@ (80041f8 <hata2EEPROM+0xa8>)
 8004196:	79fa      	ldrb	r2, [r7, #7]
 8004198:	54ca      	strb	r2, [r1, r3]
					break;
 800419a:	e007      	b.n	80041ac <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3301      	adds	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	4b13      	ldr	r3, [pc, #76]	@ (80041f0 <hata2EEPROM+0xa0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	dbe7      	blt.n	800417c <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 80041ac:	4b11      	ldr	r3, [pc, #68]	@ (80041f4 <hata2EEPROM+0xa4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	b299      	uxth	r1, r3
 80041b2:	4b0f      	ldr	r3, [pc, #60]	@ (80041f0 <hata2EEPROM+0xa0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	b298      	uxth	r0, r3
 80041b8:	4b0e      	ldr	r3, [pc, #56]	@ (80041f4 <hata2EEPROM+0xa4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a0e      	ldr	r2, [pc, #56]	@ (80041f8 <hata2EEPROM+0xa8>)
 80041be:	4413      	add	r3, r2
 80041c0:	4a0b      	ldr	r2, [pc, #44]	@ (80041f0 <hata2EEPROM+0xa0>)
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	b292      	uxth	r2, r2
 80041c6:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 80041ca:	9402      	str	r4, [sp, #8]
 80041cc:	9201      	str	r2, [sp, #4]
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	4603      	mov	r3, r0
 80041d2:	460a      	mov	r2, r1
 80041d4:	21a0      	movs	r1, #160	@ 0xa0
 80041d6:	4809      	ldr	r0, [pc, #36]	@ (80041fc <hata2EEPROM+0xac>)
 80041d8:	f003 fdec 	bl	8007db4 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80041dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80041e0:	f002 fea0 	bl	8006f24 <HAL_Delay>
	eepromKontrol();
 80041e4:	f7ff fd5a 	bl	8003c9c <eepromKontrol>
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd90      	pop	{r4, r7, pc}
 80041f0:	20000028 	.word	0x20000028
 80041f4:	2000002c 	.word	0x2000002c
 80041f8:	200002b8 	.word	0x200002b8
 80041fc:	200003b4 	.word	0x200003b4

08004200 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8004206:	2300      	movs	r3, #0
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	e009      	b.n	8004220 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 800420c:	4a0a      	ldr	r2, [pc, #40]	@ (8004238 <eepromDataFillWithEmpty+0x38>)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004214:	4a09      	ldr	r2, [pc, #36]	@ (800423c <eepromDataFillWithEmpty+0x3c>)
 8004216:	2100      	movs	r1, #0
 8004218:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3301      	adds	r3, #1
 800421e:	607b      	str	r3, [r7, #4]
 8004220:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <eepromDataFillWithEmpty+0x40>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	429a      	cmp	r2, r3
 8004228:	dbf0      	blt.n	800420c <eepromDataFillWithEmpty+0xc>
	}
}
 800422a:	bf00      	nop
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	20000000 	.word	0x20000000
 800423c:	200002b8 	.word	0x200002b8
 8004240:	20000028 	.word	0x20000028

08004244 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 800424c:	4b04      	ldr	r3, [pc, #16]	@ (8004260 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3301      	adds	r3, #1
 8004252:	4a03      	ldr	r2, [pc, #12]	@ (8004260 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8004254:	6013      	str	r3, [r2, #0]
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr
 8004260:	20000300 	.word	0x20000300

08004264 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8004264:	b5b0      	push	{r4, r5, r7, lr}
 8004266:	b08a      	sub	sp, #40	@ 0x28
 8004268:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800426a:	f002 fdf9 	bl	8006e60 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 800426e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004272:	f002 fe57 	bl	8006f24 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004276:	f002 fa63 	bl	8006740 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800427a:	f002 fb85 	bl	8006988 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800427e:	f002 fb59 	bl	8006934 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8004282:	f002 faa3 	bl	80067cc <MX_CAN_Init>
  MX_I2C1_Init();
 8004286:	f002 fad5 	bl	8006834 <MX_I2C1_Init>
  MX_TIM1_Init();
 800428a:	f002 fb01 	bl	8006890 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800428e:	2201      	movs	r2, #1
 8004290:	2140      	movs	r1, #64	@ 0x40
 8004292:	484e      	ldr	r0, [pc, #312]	@ (80043cc <main+0x168>)
 8004294:	f003 faeb 	bl	800786e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004298:	2201      	movs	r2, #1
 800429a:	2180      	movs	r1, #128	@ 0x80
 800429c:	484b      	ldr	r0, [pc, #300]	@ (80043cc <main+0x168>)
 800429e:	f003 fae6 	bl	800786e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80042a2:	200a      	movs	r0, #10
 80042a4:	f002 fe3e 	bl	8006f24 <HAL_Delay>
  lcd_init();
 80042a8:	f7fc f8cf 	bl	800044a <lcd_init>
  HAL_Delay(10);
 80042ac:	200a      	movs	r0, #10
 80042ae:	f002 fe39 	bl	8006f24 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 80042b2:	4847      	ldr	r0, [pc, #284]	@ (80043d0 <main+0x16c>)
 80042b4:	f005 f93e 	bl	8009534 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80042b8:	bf00      	nop
 80042ba:	4846      	ldr	r0, [pc, #280]	@ (80043d4 <main+0x170>)
 80042bc:	f004 f8e9 	bl	8008492 <HAL_I2C_GetError>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d0f9      	beq.n	80042ba <main+0x56>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80042c6:	bf00      	nop
 80042c8:	4842      	ldr	r0, [pc, #264]	@ (80043d4 <main+0x170>)
 80042ca:	f004 f8d5 	bl	8008478 <HAL_I2C_GetState>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d1f9      	bne.n	80042c8 <main+0x64>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80042d4:	2200      	movs	r2, #0
 80042d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80042da:	483c      	ldr	r0, [pc, #240]	@ (80043cc <main+0x168>)
 80042dc:	f003 fac7 	bl	800786e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80042e0:	2200      	movs	r2, #0
 80042e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80042e6:	4839      	ldr	r0, [pc, #228]	@ (80043cc <main+0x168>)
 80042e8:	f003 fac1 	bl	800786e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80042ec:	2200      	movs	r2, #0
 80042ee:	2104      	movs	r1, #4
 80042f0:	4836      	ldr	r0, [pc, #216]	@ (80043cc <main+0x168>)
 80042f2:	f003 fabc 	bl	800786e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80042f6:	2200      	movs	r2, #0
 80042f8:	2102      	movs	r1, #2
 80042fa:	4834      	ldr	r0, [pc, #208]	@ (80043cc <main+0x168>)
 80042fc:	f003 fab7 	bl	800786e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004300:	2200      	movs	r2, #0
 8004302:	2101      	movs	r1, #1
 8004304:	4831      	ldr	r0, [pc, #196]	@ (80043cc <main+0x168>)
 8004306:	f003 fab2 	bl	800786e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800430a:	2200      	movs	r2, #0
 800430c:	2120      	movs	r1, #32
 800430e:	4832      	ldr	r0, [pc, #200]	@ (80043d8 <main+0x174>)
 8004310:	f003 faad 	bl	800786e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004314:	2200      	movs	r2, #0
 8004316:	2110      	movs	r1, #16
 8004318:	482f      	ldr	r0, [pc, #188]	@ (80043d8 <main+0x174>)
 800431a:	f003 faa8 	bl	800786e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800431e:	2200      	movs	r2, #0
 8004320:	2180      	movs	r1, #128	@ 0x80
 8004322:	482e      	ldr	r0, [pc, #184]	@ (80043dc <main+0x178>)
 8004324:	f003 faa3 	bl	800786e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004328:	2200      	movs	r2, #0
 800432a:	2140      	movs	r1, #64	@ 0x40
 800432c:	482b      	ldr	r0, [pc, #172]	@ (80043dc <main+0x178>)
 800432e:	f003 fa9e 	bl	800786e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8004332:	2200      	movs	r2, #0
 8004334:	2120      	movs	r1, #32
 8004336:	4829      	ldr	r0, [pc, #164]	@ (80043dc <main+0x178>)
 8004338:	f003 fa99 	bl	800786e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800433c:	2200      	movs	r2, #0
 800433e:	2110      	movs	r1, #16
 8004340:	4826      	ldr	r0, [pc, #152]	@ (80043dc <main+0x178>)
 8004342:	f003 fa94 	bl	800786e <HAL_GPIO_WritePin>

  //HAL_UART_Receive_IT(&huart1, &RxByte, 1);

  i2cTest();
 8004346:	f000 f85d 	bl	8004404 <i2cTest>
  HAL_Delay(100);
 800434a:	2064      	movs	r0, #100	@ 0x64
 800434c:	f002 fdea 	bl	8006f24 <HAL_Delay>
  lcd_print(1,1,"   ESP-XL-V1    ");
 8004350:	4a23      	ldr	r2, [pc, #140]	@ (80043e0 <main+0x17c>)
 8004352:	2101      	movs	r1, #1
 8004354:	2001      	movs	r0, #1
 8004356:	f7fc f8aa 	bl	80004ae <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 800435a:	4a22      	ldr	r2, [pc, #136]	@ (80043e4 <main+0x180>)
 800435c:	2101      	movs	r1, #1
 800435e:	2002      	movs	r0, #2
 8004360:	f7fc f8a5 	bl	80004ae <lcd_print>
  HAL_Delay(1000);
 8004364:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004368:	f002 fddc 	bl	8006f24 <HAL_Delay>
  lcd_clear();
 800436c:	f7fc f8b4 	bl	80004d8 <lcd_clear>

  eepromKontrol();
 8004370:	f7ff fc94 	bl	8003c9c <eepromKontrol>

  backLightTimer = millis;
 8004374:	4b1c      	ldr	r3, [pc, #112]	@ (80043e8 <main+0x184>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1c      	ldr	r2, [pc, #112]	@ (80043ec <main+0x188>)
 800437a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800437c:	4b1c      	ldr	r3, [pc, #112]	@ (80043f0 <main+0x18c>)
 800437e:	1d3c      	adds	r4, r7, #4
 8004380:	461d      	mov	r5, r3
 8004382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004386:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800438a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800438e:	1d3b      	adds	r3, r7, #4
 8004390:	2100      	movs	r1, #0
 8004392:	4618      	mov	r0, r3
 8004394:	f005 fda6 	bl	8009ee4 <osThreadCreate>
 8004398:	4603      	mov	r3, r0
 800439a:	4a16      	ldr	r2, [pc, #88]	@ (80043f4 <main+0x190>)
 800439c:	6013      	str	r3, [r2, #0]

  uartMutex = xSemaphoreCreateMutex();
 800439e:	2001      	movs	r0, #1
 80043a0:	f005 ff92 	bl	800a2c8 <xQueueCreateMutex>
 80043a4:	4603      	mov	r3, r0
 80043a6:	4a14      	ldr	r2, [pc, #80]	@ (80043f8 <main+0x194>)
 80043a8:	6013      	str	r3, [r2, #0]
  xTaskCreate(mainTask, "mainTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 80043aa:	2300      	movs	r3, #0
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	2301      	movs	r3, #1
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	2300      	movs	r3, #0
 80043b4:	2280      	movs	r2, #128	@ 0x80
 80043b6:	4911      	ldr	r1, [pc, #68]	@ (80043fc <main+0x198>)
 80043b8:	4811      	ldr	r0, [pc, #68]	@ (8004400 <main+0x19c>)
 80043ba:	f006 f9d2 	bl	800a762 <xTaskCreate>

  vTaskStartScheduler();
 80043be:	f006 fb35 	bl	800aa2c <vTaskStartScheduler>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80043c2:	f005 fd88 	bl	8009ed6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 80043c6:	bf00      	nop
 80043c8:	e7fd      	b.n	80043c6 <main+0x162>
 80043ca:	bf00      	nop
 80043cc:	40010c00 	.word	0x40010c00
 80043d0:	20000450 	.word	0x20000450
 80043d4:	200003b4 	.word	0x200003b4
 80043d8:	40011000 	.word	0x40011000
 80043dc:	40010800 	.word	0x40010800
 80043e0:	0800c7e4 	.word	0x0800c7e4
 80043e4:	0800c7f8 	.word	0x0800c7f8
 80043e8:	20000300 	.word	0x20000300
 80043ec:	2000031c 	.word	0x2000031c
 80043f0:	0800c824 	.word	0x0800c824
 80043f4:	20000498 	.word	0x20000498
 80043f8:	2000044c 	.word	0x2000044c
 80043fc:	0800c80c 	.word	0x0800c80c
 8004400:	08004561 	.word	0x08004561

08004404 <i2cTest>:

  }
  /* USER CODE END 3 */
}

void i2cTest(void) {
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 800440a:	463b      	mov	r3, r7
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	609a      	str	r2, [r3, #8]
 8004414:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8004416:	4b50      	ldr	r3, [pc, #320]	@ (8004558 <i2cTest+0x154>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	4b4e      	ldr	r3, [pc, #312]	@ (8004558 <i2cTest+0x154>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8004426:	484c      	ldr	r0, [pc, #304]	@ (8004558 <i2cTest+0x154>)
 8004428:	f003 fb96 	bl	8007b58 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800442c:	23c0      	movs	r3, #192	@ 0xc0
 800442e:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8004430:	2311      	movs	r3, #17
 8004432:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8004434:	2301      	movs	r3, #1
 8004436:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8004438:	2303      	movs	r3, #3
 800443a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800443c:	463b      	mov	r3, r7
 800443e:	4619      	mov	r1, r3
 8004440:	4846      	ldr	r0, [pc, #280]	@ (800455c <i2cTest+0x158>)
 8004442:	f002 ff9d 	bl	8007380 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004446:	2201      	movs	r2, #1
 8004448:	2140      	movs	r1, #64	@ 0x40
 800444a:	4844      	ldr	r0, [pc, #272]	@ (800455c <i2cTest+0x158>)
 800444c:	f003 fa0f 	bl	800786e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004450:	2201      	movs	r2, #1
 8004452:	2180      	movs	r1, #128	@ 0x80
 8004454:	4841      	ldr	r0, [pc, #260]	@ (800455c <i2cTest+0x158>)
 8004456:	f003 fa0a 	bl	800786e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 800445a:	200a      	movs	r0, #10
 800445c:	f002 fd62 	bl	8006f24 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8004460:	bf00      	nop
 8004462:	2140      	movs	r1, #64	@ 0x40
 8004464:	483d      	ldr	r0, [pc, #244]	@ (800455c <i2cTest+0x158>)
 8004466:	f003 f9eb 	bl	8007840 <HAL_GPIO_ReadPin>
 800446a:	4603      	mov	r3, r0
 800446c:	2b01      	cmp	r3, #1
 800446e:	d006      	beq.n	800447e <i2cTest+0x7a>
 8004470:	2180      	movs	r1, #128	@ 0x80
 8004472:	483a      	ldr	r0, [pc, #232]	@ (800455c <i2cTest+0x158>)
 8004474:	f003 f9e4 	bl	8007840 <HAL_GPIO_ReadPin>
 8004478:	4603      	mov	r3, r0
 800447a:	2b01      	cmp	r3, #1
 800447c:	d1f1      	bne.n	8004462 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800447e:	2200      	movs	r2, #0
 8004480:	2180      	movs	r1, #128	@ 0x80
 8004482:	4836      	ldr	r0, [pc, #216]	@ (800455c <i2cTest+0x158>)
 8004484:	f003 f9f3 	bl	800786e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8004488:	200a      	movs	r0, #10
 800448a:	f002 fd4b 	bl	8006f24 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800448e:	bf00      	nop
 8004490:	2180      	movs	r1, #128	@ 0x80
 8004492:	4832      	ldr	r0, [pc, #200]	@ (800455c <i2cTest+0x158>)
 8004494:	f003 f9d4 	bl	8007840 <HAL_GPIO_ReadPin>
 8004498:	4603      	mov	r3, r0
 800449a:	2b01      	cmp	r3, #1
 800449c:	d0f8      	beq.n	8004490 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800449e:	2200      	movs	r2, #0
 80044a0:	2140      	movs	r1, #64	@ 0x40
 80044a2:	482e      	ldr	r0, [pc, #184]	@ (800455c <i2cTest+0x158>)
 80044a4:	f003 f9e3 	bl	800786e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80044a8:	200a      	movs	r0, #10
 80044aa:	f002 fd3b 	bl	8006f24 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 80044ae:	bf00      	nop
 80044b0:	2140      	movs	r1, #64	@ 0x40
 80044b2:	482a      	ldr	r0, [pc, #168]	@ (800455c <i2cTest+0x158>)
 80044b4:	f003 f9c4 	bl	8007840 <HAL_GPIO_ReadPin>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d0f8      	beq.n	80044b0 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80044be:	2201      	movs	r2, #1
 80044c0:	2140      	movs	r1, #64	@ 0x40
 80044c2:	4826      	ldr	r0, [pc, #152]	@ (800455c <i2cTest+0x158>)
 80044c4:	f003 f9d3 	bl	800786e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80044c8:	200a      	movs	r0, #10
 80044ca:	f002 fd2b 	bl	8006f24 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80044ce:	bf00      	nop
 80044d0:	2140      	movs	r1, #64	@ 0x40
 80044d2:	4822      	ldr	r0, [pc, #136]	@ (800455c <i2cTest+0x158>)
 80044d4:	f003 f9b4 	bl	8007840 <HAL_GPIO_ReadPin>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d1f8      	bne.n	80044d0 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80044de:	2201      	movs	r2, #1
 80044e0:	2180      	movs	r1, #128	@ 0x80
 80044e2:	481e      	ldr	r0, [pc, #120]	@ (800455c <i2cTest+0x158>)
 80044e4:	f003 f9c3 	bl	800786e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80044e8:	200a      	movs	r0, #10
 80044ea:	f002 fd1b 	bl	8006f24 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80044ee:	bf00      	nop
 80044f0:	2180      	movs	r1, #128	@ 0x80
 80044f2:	481a      	ldr	r0, [pc, #104]	@ (800455c <i2cTest+0x158>)
 80044f4:	f003 f9a4 	bl	8007840 <HAL_GPIO_ReadPin>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d1f8      	bne.n	80044f0 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044fe:	23c0      	movs	r3, #192	@ 0xc0
 8004500:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8004502:	2312      	movs	r3, #18
 8004504:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8004506:	2301      	movs	r3, #1
 8004508:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 800450a:	2303      	movs	r3, #3
 800450c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800450e:	463b      	mov	r3, r7
 8004510:	4619      	mov	r1, r3
 8004512:	4812      	ldr	r0, [pc, #72]	@ (800455c <i2cTest+0x158>)
 8004514:	f002 ff34 	bl	8007380 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8004518:	4b0f      	ldr	r3, [pc, #60]	@ (8004558 <i2cTest+0x154>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4b0e      	ldr	r3, [pc, #56]	@ (8004558 <i2cTest+0x154>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004526:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8004528:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <i2cTest+0x154>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b0a      	ldr	r3, [pc, #40]	@ (8004558 <i2cTest+0x154>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004536:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8004538:	4b07      	ldr	r3, [pc, #28]	@ (8004558 <i2cTest+0x154>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	4b06      	ldr	r3, [pc, #24]	@ (8004558 <i2cTest+0x154>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8004548:	4803      	ldr	r0, [pc, #12]	@ (8004558 <i2cTest+0x154>)
 800454a:	f003 f9c1 	bl	80078d0 <HAL_I2C_Init>
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	200003b4 	.word	0x200003b4
 800455c:	40010c00 	.word	0x40010c00

08004560 <mainTask>:

void mainTask(void *pvParameters) {
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af04      	add	r7, sp, #16
 8004566:	6078      	str	r0, [r7, #4]
	while(1) {
		//WiFi_Connect();
		if(millis - backLightTimer >= lcdBacklightSure) {
 8004568:	4b7b      	ldr	r3, [pc, #492]	@ (8004758 <mainTask+0x1f8>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4b7b      	ldr	r3, [pc, #492]	@ (800475c <mainTask+0x1fc>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	4a7b      	ldr	r2, [pc, #492]	@ (8004760 <mainTask+0x200>)
 8004574:	7812      	ldrb	r2, [r2, #0]
 8004576:	4293      	cmp	r3, r2
 8004578:	d303      	bcc.n	8004582 <mainTask+0x22>
			lcd_backlight(0);
 800457a:	2000      	movs	r0, #0
 800457c:	f7fb ffb6 	bl	80004ec <lcd_backlight>
 8004580:	e002      	b.n	8004588 <mainTask+0x28>
		} else {
			lcd_backlight(1);
 8004582:	2001      	movs	r0, #1
 8004584:	f7fb ffb2 	bl	80004ec <lcd_backlight>
		}

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8004588:	2101      	movs	r1, #1
 800458a:	4876      	ldr	r0, [pc, #472]	@ (8004764 <mainTask+0x204>)
 800458c:	f003 f958 	bl	8007840 <HAL_GPIO_ReadPin>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d136      	bne.n	8004604 <mainTask+0xa4>
 8004596:	2108      	movs	r1, #8
 8004598:	4873      	ldr	r0, [pc, #460]	@ (8004768 <mainTask+0x208>)
 800459a:	f003 f951 	bl	8007840 <HAL_GPIO_ReadPin>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d12f      	bne.n	8004604 <mainTask+0xa4>
 80045a4:	2102      	movs	r1, #2
 80045a6:	486f      	ldr	r0, [pc, #444]	@ (8004764 <mainTask+0x204>)
 80045a8:	f003 f94a 	bl	8007840 <HAL_GPIO_ReadPin>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d128      	bne.n	8004604 <mainTask+0xa4>
 80045b2:	2104      	movs	r1, #4
 80045b4:	486b      	ldr	r0, [pc, #428]	@ (8004764 <mainTask+0x204>)
 80045b6:	f003 f943 	bl	8007840 <HAL_GPIO_ReadPin>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d121      	bne.n	8004604 <mainTask+0xa4>
 80045c0:	2108      	movs	r1, #8
 80045c2:	4868      	ldr	r0, [pc, #416]	@ (8004764 <mainTask+0x204>)
 80045c4:	f003 f93c 	bl	8007840 <HAL_GPIO_ReadPin>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d11a      	bne.n	8004604 <mainTask+0xa4>
 80045ce:	2180      	movs	r1, #128	@ 0x80
 80045d0:	4865      	ldr	r0, [pc, #404]	@ (8004768 <mainTask+0x208>)
 80045d2:	f003 f935 	bl	8007840 <HAL_GPIO_ReadPin>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d113      	bne.n	8004604 <mainTask+0xa4>
 80045dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80045e0:	4861      	ldr	r0, [pc, #388]	@ (8004768 <mainTask+0x208>)
 80045e2:	f003 f92d 	bl	8007840 <HAL_GPIO_ReadPin>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d10b      	bne.n	8004604 <mainTask+0xa4>
 80045ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045f0:	485d      	ldr	r0, [pc, #372]	@ (8004768 <mainTask+0x208>)
 80045f2:	f003 f925 	bl	8007840 <HAL_GPIO_ReadPin>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d103      	bne.n	8004604 <mainTask+0xa4>
			butonKontrol=0;
 80045fc:	4b5b      	ldr	r3, [pc, #364]	@ (800476c <mainTask+0x20c>)
 80045fe:	2200      	movs	r2, #0
 8004600:	701a      	strb	r2, [r3, #0]
 8004602:	e003      	b.n	800460c <mainTask+0xac>
		} else {
			backLightTimer = millis;
 8004604:	4b54      	ldr	r3, [pc, #336]	@ (8004758 <mainTask+0x1f8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a54      	ldr	r2, [pc, #336]	@ (800475c <mainTask+0x1fc>)
 800460a:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 800460c:	4b58      	ldr	r3, [pc, #352]	@ (8004770 <mainTask+0x210>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d03c      	beq.n	800468e <mainTask+0x12e>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004614:	bf00      	nop
 8004616:	4857      	ldr	r0, [pc, #348]	@ (8004774 <mainTask+0x214>)
 8004618:	f003 ff3b 	bl	8008492 <HAL_I2C_GetError>
 800461c:	4603      	mov	r3, r0
 800461e:	2b04      	cmp	r3, #4
 8004620:	d0f9      	beq.n	8004616 <mainTask+0xb6>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004622:	bf00      	nop
 8004624:	4853      	ldr	r0, [pc, #332]	@ (8004774 <mainTask+0x214>)
 8004626:	f003 ff27 	bl	8008478 <HAL_I2C_GetState>
 800462a:	4603      	mov	r3, r0
 800462c:	2b20      	cmp	r3, #32
 800462e:	d1f9      	bne.n	8004624 <mainTask+0xc4>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8004630:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004634:	9302      	str	r3, [sp, #8]
 8004636:	233f      	movs	r3, #63	@ 0x3f
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	4b4f      	ldr	r3, [pc, #316]	@ (8004778 <mainTask+0x218>)
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	233f      	movs	r3, #63	@ 0x3f
 8004640:	2200      	movs	r2, #0
 8004642:	21a0      	movs	r1, #160	@ 0xa0
 8004644:	484b      	ldr	r0, [pc, #300]	@ (8004774 <mainTask+0x214>)
 8004646:	f003 fbb5 	bl	8007db4 <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 800464a:	2005      	movs	r0, #5
 800464c:	f002 fc6a 	bl	8006f24 <HAL_Delay>

		  hafizaYaz=0;
 8004650:	4b47      	ldr	r3, [pc, #284]	@ (8004770 <mainTask+0x210>)
 8004652:	2200      	movs	r2, #0
 8004654:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8004656:	4b49      	ldr	r3, [pc, #292]	@ (800477c <mainTask+0x21c>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d105      	bne.n	800466a <mainTask+0x10a>
			  lcd_print(2,1,"Data yazildi    ");
 800465e:	4a48      	ldr	r2, [pc, #288]	@ (8004780 <mainTask+0x220>)
 8004660:	2101      	movs	r1, #1
 8004662:	2002      	movs	r0, #2
 8004664:	f7fb ff23 	bl	80004ae <lcd_print>
 8004668:	e008      	b.n	800467c <mainTask+0x11c>
		  } else if(dilSecim==1) {
 800466a:	4b44      	ldr	r3, [pc, #272]	@ (800477c <mainTask+0x21c>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d104      	bne.n	800467c <mainTask+0x11c>
			  lcd_print(2,1,"Data Wrote      ");
 8004672:	4a44      	ldr	r2, [pc, #272]	@ (8004784 <mainTask+0x224>)
 8004674:	2101      	movs	r1, #1
 8004676:	2002      	movs	r0, #2
 8004678:	f7fb ff19 	bl	80004ae <lcd_print>
		  }

		  HAL_Delay(1000);
 800467c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004680:	f002 fc50 	bl	8006f24 <HAL_Delay>
		  lcd_clear();
 8004684:	f7fb ff28 	bl	80004d8 <lcd_clear>
		  mesajYazildi=0;
 8004688:	4b3f      	ldr	r3, [pc, #252]	@ (8004788 <mainTask+0x228>)
 800468a:	2200      	movs	r2, #0
 800468c:	701a      	strb	r2, [r3, #0]
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800468e:	4b3f      	ldr	r3, [pc, #252]	@ (800478c <mainTask+0x22c>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	f083 0301 	eor.w	r3, r3, #1
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8097 	beq.w	80047cc <mainTask+0x26c>
 800469e:	4835      	ldr	r0, [pc, #212]	@ (8004774 <mainTask+0x214>)
 80046a0:	f003 feea 	bl	8008478 <HAL_I2C_GetState>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	f040 8090 	bne.w	80047cc <mainTask+0x26c>
		  if(ilkOkuma==0) {
 80046ac:	4b38      	ldr	r3, [pc, #224]	@ (8004790 <mainTask+0x230>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	f083 0301 	eor.w	r3, r3, #1
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d044      	beq.n	8004744 <mainTask+0x1e4>
			  lcd_print(1,1,"   **EEPROM**   ");
 80046ba:	4a36      	ldr	r2, [pc, #216]	@ (8004794 <mainTask+0x234>)
 80046bc:	2101      	movs	r1, #1
 80046be:	2001      	movs	r0, #1
 80046c0:	f7fb fef5 	bl	80004ae <lcd_print>
			  if(dilSecim==0) {
 80046c4:	4b2d      	ldr	r3, [pc, #180]	@ (800477c <mainTask+0x21c>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d105      	bne.n	80046d8 <mainTask+0x178>
				  lcd_print(2,1,"Data Okunuyor...");
 80046cc:	4a32      	ldr	r2, [pc, #200]	@ (8004798 <mainTask+0x238>)
 80046ce:	2101      	movs	r1, #1
 80046d0:	2002      	movs	r0, #2
 80046d2:	f7fb feec 	bl	80004ae <lcd_print>
 80046d6:	e008      	b.n	80046ea <mainTask+0x18a>
			  } else if(dilSecim==1) {
 80046d8:	4b28      	ldr	r3, [pc, #160]	@ (800477c <mainTask+0x21c>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d104      	bne.n	80046ea <mainTask+0x18a>
				  lcd_print(2,1,"Data Reading... ");
 80046e0:	4a2e      	ldr	r2, [pc, #184]	@ (800479c <mainTask+0x23c>)
 80046e2:	2101      	movs	r1, #1
 80046e4:	2002      	movs	r0, #2
 80046e6:	f7fb fee2 	bl	80004ae <lcd_print>
			  }
			  HAL_Delay(1000);
 80046ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80046ee:	f002 fc19 	bl	8006f24 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80046f2:	bf00      	nop
 80046f4:	481f      	ldr	r0, [pc, #124]	@ (8004774 <mainTask+0x214>)
 80046f6:	f003 fecc 	bl	8008492 <HAL_I2C_GetError>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d0f9      	beq.n	80046f4 <mainTask+0x194>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8004700:	e003      	b.n	800470a <mainTask+0x1aa>
				  HAL_Delay(1000);
 8004702:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004706:	f002 fc0d 	bl	8006f24 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800470a:	481a      	ldr	r0, [pc, #104]	@ (8004774 <mainTask+0x214>)
 800470c:	f003 feb4 	bl	8008478 <HAL_I2C_GetState>
 8004710:	4603      	mov	r3, r0
 8004712:	2b20      	cmp	r3, #32
 8004714:	d1f5      	bne.n	8004702 <mainTask+0x1a2>
			  }

			  if(dilSecim==0) {
 8004716:	4b19      	ldr	r3, [pc, #100]	@ (800477c <mainTask+0x21c>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d105      	bne.n	800472a <mainTask+0x1ca>
				  lcd_print(2,1,"Data Okundu.    ");
 800471e:	4a20      	ldr	r2, [pc, #128]	@ (80047a0 <mainTask+0x240>)
 8004720:	2101      	movs	r1, #1
 8004722:	2002      	movs	r0, #2
 8004724:	f7fb fec3 	bl	80004ae <lcd_print>
 8004728:	e008      	b.n	800473c <mainTask+0x1dc>
			  } else if(dilSecim==1) {
 800472a:	4b14      	ldr	r3, [pc, #80]	@ (800477c <mainTask+0x21c>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d104      	bne.n	800473c <mainTask+0x1dc>
				  lcd_print(2,1,"Data Read.      ");
 8004732:	4a1c      	ldr	r2, [pc, #112]	@ (80047a4 <mainTask+0x244>)
 8004734:	2101      	movs	r1, #1
 8004736:	2002      	movs	r0, #2
 8004738:	f7fb feb9 	bl	80004ae <lcd_print>
			  }

			  ilkOkuma=1;
 800473c:	4b14      	ldr	r3, [pc, #80]	@ (8004790 <mainTask+0x230>)
 800473e:	2201      	movs	r2, #1
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	e03e      	b.n	80047c2 <mainTask+0x262>
		  } else {
			  if(dilSecim==0) {
 8004744:	4b0d      	ldr	r3, [pc, #52]	@ (800477c <mainTask+0x21c>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d12f      	bne.n	80047ac <mainTask+0x24c>
				  lcd_print(2,1,"Deger Kaydedildi");
 800474c:	4a16      	ldr	r2, [pc, #88]	@ (80047a8 <mainTask+0x248>)
 800474e:	2101      	movs	r1, #1
 8004750:	2002      	movs	r0, #2
 8004752:	f7fb feac 	bl	80004ae <lcd_print>
 8004756:	e032      	b.n	80047be <mainTask+0x25e>
 8004758:	20000300 	.word	0x20000300
 800475c:	2000031c 	.word	0x2000031c
 8004760:	20000030 	.word	0x20000030
 8004764:	40010800 	.word	0x40010800
 8004768:	40011000 	.word	0x40011000
 800476c:	20000352 	.word	0x20000352
 8004770:	2000034f 	.word	0x2000034f
 8004774:	200003b4 	.word	0x200003b4
 8004778:	200002b8 	.word	0x200002b8
 800477c:	20000344 	.word	0x20000344
 8004780:	0800c840 	.word	0x0800c840
 8004784:	0800c854 	.word	0x0800c854
 8004788:	20000357 	.word	0x20000357
 800478c:	20000350 	.word	0x20000350
 8004790:	20000351 	.word	0x20000351
 8004794:	0800c868 	.word	0x0800c868
 8004798:	0800c87c 	.word	0x0800c87c
 800479c:	0800c890 	.word	0x0800c890
 80047a0:	0800c8a4 	.word	0x0800c8a4
 80047a4:	0800c8b8 	.word	0x0800c8b8
 80047a8:	0800c8cc 	.word	0x0800c8cc
			  } else if(dilSecim==1) {
 80047ac:	4b88      	ldr	r3, [pc, #544]	@ (80049d0 <mainTask+0x470>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d104      	bne.n	80047be <mainTask+0x25e>
				  lcd_print(2,1,"Value Saved     ");
 80047b4:	4a87      	ldr	r2, [pc, #540]	@ (80049d4 <mainTask+0x474>)
 80047b6:	2101      	movs	r1, #1
 80047b8:	2002      	movs	r0, #2
 80047ba:	f7fb fe78 	bl	80004ae <lcd_print>
			  }
			  lcd_clear();
 80047be:	f7fb fe8b 	bl	80004d8 <lcd_clear>
		  }

		  eepromKontrol();
 80047c2:	f7ff fa6b 	bl	8003c9c <eepromKontrol>
		  hafizaOku=1;
 80047c6:	4b84      	ldr	r3, [pc, #528]	@ (80049d8 <mainTask+0x478>)
 80047c8:	2201      	movs	r2, #1
 80047ca:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 80047cc:	4b83      	ldr	r3, [pc, #524]	@ (80049dc <mainTask+0x47c>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d112      	bne.n	80047fa <mainTask+0x29a>
 80047d4:	2102      	movs	r1, #2
 80047d6:	4882      	ldr	r0, [pc, #520]	@ (80049e0 <mainTask+0x480>)
 80047d8:	f003 f832 	bl	8007840 <HAL_GPIO_ReadPin>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d10b      	bne.n	80047fa <mainTask+0x29a>
 80047e2:	2104      	movs	r1, #4
 80047e4:	487e      	ldr	r0, [pc, #504]	@ (80049e0 <mainTask+0x480>)
 80047e6:	f003 f82b 	bl	8007840 <HAL_GPIO_ReadPin>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d104      	bne.n	80047fa <mainTask+0x29a>
			menuGiris=1;
 80047f0:	4b7a      	ldr	r3, [pc, #488]	@ (80049dc <mainTask+0x47c>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80047f6:	f7fb fe6f 	bl	80004d8 <lcd_clear>
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80047fa:	4b78      	ldr	r3, [pc, #480]	@ (80049dc <mainTask+0x47c>)
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d119      	bne.n	8004836 <mainTask+0x2d6>
 8004802:	4b78      	ldr	r3, [pc, #480]	@ (80049e4 <mainTask+0x484>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d115      	bne.n	8004836 <mainTask+0x2d6>
 800480a:	4b77      	ldr	r3, [pc, #476]	@ (80049e8 <mainTask+0x488>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d111      	bne.n	8004836 <mainTask+0x2d6>
					lcd_clear();
 8004812:	f7fb fe61 	bl	80004d8 <lcd_clear>
					HAL_Delay(10);
 8004816:	200a      	movs	r0, #10
 8004818:	f002 fb84 	bl	8006f24 <HAL_Delay>
					lcd_print(1, 1, "     ESP-XL     ");
 800481c:	4a73      	ldr	r2, [pc, #460]	@ (80049ec <mainTask+0x48c>)
 800481e:	2101      	movs	r1, #1
 8004820:	2001      	movs	r0, #1
 8004822:	f7fb fe44 	bl	80004ae <lcd_print>
					lcd_print(2, 1, "      RUN       ");
 8004826:	4a72      	ldr	r2, [pc, #456]	@ (80049f0 <mainTask+0x490>)
 8004828:	2101      	movs	r1, #1
 800482a:	2002      	movs	r0, #2
 800482c:	f7fb fe3f 	bl	80004ae <lcd_print>

					mesajYazildi=1;
 8004830:	4b6c      	ldr	r3, [pc, #432]	@ (80049e4 <mainTask+0x484>)
 8004832:	2201      	movs	r2, #1
 8004834:	701a      	strb	r2, [r3, #0]
				}

		if(menuGiris==1) {
 8004836:	4b69      	ldr	r3, [pc, #420]	@ (80049dc <mainTask+0x47c>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <mainTask+0x2e2>
			menu();
 800483e:	f7fb fe7d 	bl	800053c <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8004842:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004846:	486b      	ldr	r0, [pc, #428]	@ (80049f4 <mainTask+0x494>)
 8004848:	f003 f829 	bl	800789e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 800484c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004850:	4869      	ldr	r0, [pc, #420]	@ (80049f8 <mainTask+0x498>)
 8004852:	f002 fff5 	bl	8007840 <HAL_GPIO_ReadPin>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <mainTask+0x312>
 800485c:	4b67      	ldr	r3, [pc, #412]	@ (80049fc <mainTask+0x49c>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	f083 0301 	eor.w	r3, r3, #1
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <mainTask+0x312>
			stopVar=1;
 800486a:	4b65      	ldr	r3, [pc, #404]	@ (8004a00 <mainTask+0x4a0>)
 800486c:	2201      	movs	r2, #1
 800486e:	701a      	strb	r2, [r3, #0]
 8004870:	e002      	b.n	8004878 <mainTask+0x318>
		} else {
			stopVar=0;
 8004872:	4b63      	ldr	r3, [pc, #396]	@ (8004a00 <mainTask+0x4a0>)
 8004874:	2200      	movs	r2, #0
 8004876:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 8004878:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800487c:	485e      	ldr	r0, [pc, #376]	@ (80049f8 <mainTask+0x498>)
 800487e:	f002 ffdf 	bl	8007840 <HAL_GPIO_ReadPin>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d107      	bne.n	8004898 <mainTask+0x338>
 8004888:	4b5e      	ldr	r3, [pc, #376]	@ (8004a04 <mainTask+0x4a4>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <mainTask+0x338>
					EmnStopVar=1;
 8004890:	4b5d      	ldr	r3, [pc, #372]	@ (8004a08 <mainTask+0x4a8>)
 8004892:	2201      	movs	r2, #1
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	e002      	b.n	800489e <mainTask+0x33e>
				} else {
					EmnStopVar=0;
 8004898:	4b5b      	ldr	r3, [pc, #364]	@ (8004a08 <mainTask+0x4a8>)
 800489a:	2200      	movs	r2, #0
 800489c:	701a      	strb	r2, [r3, #0]
				}

		/****************************************  BASINC SALTERI ********************************************/
		if(basincSalteri==0) {
 800489e:	4b5b      	ldr	r3, [pc, #364]	@ (8004a0c <mainTask+0x4ac>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d102      	bne.n	80048ac <mainTask+0x34c>
			basincVar=1;
 80048a6:	4b5a      	ldr	r3, [pc, #360]	@ (8004a10 <mainTask+0x4b0>)
 80048a8:	2201      	movs	r2, #1
 80048aa:	701a      	strb	r2, [r3, #0]
		}

		if(basincSalteri==1) {
 80048ac:	4b57      	ldr	r3, [pc, #348]	@ (8004a0c <mainTask+0x4ac>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d119      	bne.n	80048e8 <mainTask+0x388>
			if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80048b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80048b8:	484e      	ldr	r0, [pc, #312]	@ (80049f4 <mainTask+0x494>)
 80048ba:	f002 ffc1 	bl	8007840 <HAL_GPIO_ReadPin>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <mainTask+0x37a>
				if(millis-timer5>=3) {
 80048c4:	4b53      	ldr	r3, [pc, #332]	@ (8004a14 <mainTask+0x4b4>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4b53      	ldr	r3, [pc, #332]	@ (8004a18 <mainTask+0x4b8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d90a      	bls.n	80048e8 <mainTask+0x388>
					basincVar=1;
 80048d2:	4b4f      	ldr	r3, [pc, #316]	@ (8004a10 <mainTask+0x4b0>)
 80048d4:	2201      	movs	r2, #1
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	e006      	b.n	80048e8 <mainTask+0x388>
				}
			} else {
				timer5=millis;
 80048da:	4b4e      	ldr	r3, [pc, #312]	@ (8004a14 <mainTask+0x4b4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a4e      	ldr	r2, [pc, #312]	@ (8004a18 <mainTask+0x4b8>)
 80048e0:	6013      	str	r3, [r2, #0]
				basincVar=0;
 80048e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004a10 <mainTask+0x4b0>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	701a      	strb	r2, [r3, #0]
			}
		}

		/******** Bas gönder ***********/
		if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80048e8:	4b4c      	ldr	r3, [pc, #304]	@ (8004a1c <mainTask+0x4bc>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d10b      	bne.n	8004908 <mainTask+0x3a8>
 80048f0:	4b4b      	ldr	r3, [pc, #300]	@ (8004a20 <mainTask+0x4c0>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d107      	bne.n	8004908 <mainTask+0x3a8>
 80048f8:	4b4a      	ldr	r3, [pc, #296]	@ (8004a24 <mainTask+0x4c4>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d103      	bne.n	8004908 <mainTask+0x3a8>
			basgondercalisyukari=1;
 8004900:	4b49      	ldr	r3, [pc, #292]	@ (8004a28 <mainTask+0x4c8>)
 8004902:	2201      	movs	r2, #1
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	e006      	b.n	8004916 <mainTask+0x3b6>
		} else if(yukarimotorcalisiyor==0) {
 8004908:	4b45      	ldr	r3, [pc, #276]	@ (8004a20 <mainTask+0x4c0>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <mainTask+0x3b6>
			basgondercalisyukari=0;
 8004910:	4b45      	ldr	r3, [pc, #276]	@ (8004a28 <mainTask+0x4c8>)
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]
		}

		if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004916:	4b41      	ldr	r3, [pc, #260]	@ (8004a1c <mainTask+0x4bc>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d10b      	bne.n	8004936 <mainTask+0x3d6>
 800491e:	4b43      	ldr	r3, [pc, #268]	@ (8004a2c <mainTask+0x4cc>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d107      	bne.n	8004936 <mainTask+0x3d6>
 8004926:	4b3f      	ldr	r3, [pc, #252]	@ (8004a24 <mainTask+0x4c4>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d103      	bne.n	8004936 <mainTask+0x3d6>
			basgondercalisasagi=1;
 800492e:	4b40      	ldr	r3, [pc, #256]	@ (8004a30 <mainTask+0x4d0>)
 8004930:	2201      	movs	r2, #1
 8004932:	701a      	strb	r2, [r3, #0]
 8004934:	e006      	b.n	8004944 <mainTask+0x3e4>
		} else if(asagivalfcalisiyor==0) {
 8004936:	4b3d      	ldr	r3, [pc, #244]	@ (8004a2c <mainTask+0x4cc>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d102      	bne.n	8004944 <mainTask+0x3e4>
			basgondercalisasagi=0;
 800493e:	4b3c      	ldr	r3, [pc, #240]	@ (8004a30 <mainTask+0x4d0>)
 8004940:	2200      	movs	r2, #0
 8004942:	701a      	strb	r2, [r3, #0]
		}

		/******** Kapı Secimleri ***********/

		if(kapiSecimleri==0) {
 8004944:	4b3b      	ldr	r3, [pc, #236]	@ (8004a34 <mainTask+0x4d4>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d102      	bne.n	8004952 <mainTask+0x3f2>
			kapiSivicVar=1;
 800494c:	4b3a      	ldr	r3, [pc, #232]	@ (8004a38 <mainTask+0x4d8>)
 800494e:	2201      	movs	r2, #1
 8004950:	701a      	strb	r2, [r3, #0]
		}

		if(kapiSecimleri==1) {
 8004952:	4b38      	ldr	r3, [pc, #224]	@ (8004a34 <mainTask+0x4d4>)
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d10e      	bne.n	8004978 <mainTask+0x418>
			if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800495a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800495e:	4820      	ldr	r0, [pc, #128]	@ (80049e0 <mainTask+0x480>)
 8004960:	f002 ff6e 	bl	8007840 <HAL_GPIO_ReadPin>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d103      	bne.n	8004972 <mainTask+0x412>
				kapiSivicVar=1;
 800496a:	4b33      	ldr	r3, [pc, #204]	@ (8004a38 <mainTask+0x4d8>)
 800496c:	2201      	movs	r2, #1
 800496e:	701a      	strb	r2, [r3, #0]
 8004970:	e002      	b.n	8004978 <mainTask+0x418>
			} else {
				kapiSivicVar=0;
 8004972:	4b31      	ldr	r3, [pc, #196]	@ (8004a38 <mainTask+0x4d8>)
 8004974:	2200      	movs	r2, #0
 8004976:	701a      	strb	r2, [r3, #0]
			}
		}

		if(kapiSecimleri==2){
 8004978:	4b2e      	ldr	r3, [pc, #184]	@ (8004a34 <mainTask+0x4d4>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d10e      	bne.n	800499e <mainTask+0x43e>
			if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004980:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004984:	4816      	ldr	r0, [pc, #88]	@ (80049e0 <mainTask+0x480>)
 8004986:	f002 ff5b 	bl	8007840 <HAL_GPIO_ReadPin>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d103      	bne.n	8004998 <mainTask+0x438>
				kapiSivicVar=1;
 8004990:	4b29      	ldr	r3, [pc, #164]	@ (8004a38 <mainTask+0x4d8>)
 8004992:	2201      	movs	r2, #1
 8004994:	701a      	strb	r2, [r3, #0]
 8004996:	e002      	b.n	800499e <mainTask+0x43e>
			} else {
				kapiSivicVar=0;
 8004998:	4b27      	ldr	r3, [pc, #156]	@ (8004a38 <mainTask+0x4d8>)
 800499a:	2200      	movs	r2, #0
 800499c:	701a      	strb	r2, [r3, #0]
			}
		}

		if(kapiSecimleri==3) {
 800499e:	4b25      	ldr	r3, [pc, #148]	@ (8004a34 <mainTask+0x4d4>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d14d      	bne.n	8004a42 <mainTask+0x4e2>
			if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80049a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049aa:	480d      	ldr	r0, [pc, #52]	@ (80049e0 <mainTask+0x480>)
 80049ac:	f002 ff48 	bl	8007840 <HAL_GPIO_ReadPin>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d142      	bne.n	8004a3c <mainTask+0x4dc>
 80049b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80049ba:	4809      	ldr	r0, [pc, #36]	@ (80049e0 <mainTask+0x480>)
 80049bc:	f002 ff40 	bl	8007840 <HAL_GPIO_ReadPin>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d13a      	bne.n	8004a3c <mainTask+0x4dc>
				kapiSivicVar=1;
 80049c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a38 <mainTask+0x4d8>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	701a      	strb	r2, [r3, #0]
 80049cc:	e039      	b.n	8004a42 <mainTask+0x4e2>
 80049ce:	bf00      	nop
 80049d0:	20000344 	.word	0x20000344
 80049d4:	0800c8e0 	.word	0x0800c8e0
 80049d8:	20000350 	.word	0x20000350
 80049dc:	20000341 	.word	0x20000341
 80049e0:	40010800 	.word	0x40010800
 80049e4:	20000357 	.word	0x20000357
 80049e8:	20000342 	.word	0x20000342
 80049ec:	0800c770 	.word	0x0800c770
 80049f0:	0800c784 	.word	0x0800c784
 80049f4:	40011000 	.word	0x40011000
 80049f8:	40010c00 	.word	0x40010c00
 80049fc:	20000378 	.word	0x20000378
 8004a00:	20000375 	.word	0x20000375
 8004a04:	20000387 	.word	0x20000387
 8004a08:	20000388 	.word	0x20000388
 8004a0c:	2000032b 	.word	0x2000032b
 8004a10:	20000327 	.word	0x20000327
 8004a14:	20000300 	.word	0x20000300
 8004a18:	20000318 	.word	0x20000318
 8004a1c:	20000325 	.word	0x20000325
 8004a20:	20000358 	.word	0x20000358
 8004a24:	20000333 	.word	0x20000333
 8004a28:	2000035f 	.word	0x2000035f
 8004a2c:	2000035b 	.word	0x2000035b
 8004a30:	20000360 	.word	0x20000360
 8004a34:	2000032c 	.word	0x2000032c
 8004a38:	20000376 	.word	0x20000376
			} else {
				kapiSivicVar=0;
 8004a3c:	4b66      	ldr	r3, [pc, #408]	@ (8004bd8 <mainTask+0x678>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	701a      	strb	r2, [r3, #0]

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/

		/*MOTOR CALISIYOR*/

		if(demoMode==0 && menuGiris==0) {
 8004a42:	4b66      	ldr	r3, [pc, #408]	@ (8004bdc <mainTask+0x67c>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f041 83aa 	bne.w	80061a0 <mainTask+0x1c40>
 8004a4c:	4b64      	ldr	r3, [pc, #400]	@ (8004be0 <mainTask+0x680>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f041 83a5 	bne.w	80061a0 <mainTask+0x1c40>
			if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8004a56:	4b63      	ldr	r3, [pc, #396]	@ (8004be4 <mainTask+0x684>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d11a      	bne.n	8004a94 <mainTask+0x534>
 8004a5e:	4b62      	ldr	r3, [pc, #392]	@ (8004be8 <mainTask+0x688>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d116      	bne.n	8004a94 <mainTask+0x534>
 8004a66:	4b61      	ldr	r3, [pc, #388]	@ (8004bec <mainTask+0x68c>)
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <mainTask+0x524>
 8004a6e:	4b60      	ldr	r3, [pc, #384]	@ (8004bf0 <mainTask+0x690>)
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	f083 0301 	eor.w	r3, r3, #1
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <mainTask+0x524>
 8004a7c:	4b5d      	ldr	r3, [pc, #372]	@ (8004bf4 <mainTask+0x694>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d007      	beq.n	8004a94 <mainTask+0x534>
					||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8004a84:	4b5c      	ldr	r3, [pc, #368]	@ (8004bf8 <mainTask+0x698>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01c      	beq.n	8004ac6 <mainTask+0x566>
 8004a8c:	4b5b      	ldr	r3, [pc, #364]	@ (8004bfc <mainTask+0x69c>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d118      	bne.n	8004ac6 <mainTask+0x566>
 8004a94:	4b5a      	ldr	r3, [pc, #360]	@ (8004c00 <mainTask+0x6a0>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d103      	bne.n	8004aa4 <mainTask+0x544>
 8004a9c:	4b59      	ldr	r3, [pc, #356]	@ (8004c04 <mainTask+0x6a4>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d010      	beq.n	8004ac6 <mainTask+0x566>
 8004aa4:	4b4c      	ldr	r3, [pc, #304]	@ (8004bd8 <mainTask+0x678>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00c      	beq.n	8004ac6 <mainTask+0x566>

				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004aac:	2201      	movs	r2, #1
 8004aae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004ab2:	4855      	ldr	r0, [pc, #340]	@ (8004c08 <mainTask+0x6a8>)
 8004ab4:	f002 fedb 	bl	800786e <HAL_GPIO_WritePin>
				motorcalisiyor=1;
 8004ab8:	4b54      	ldr	r3, [pc, #336]	@ (8004c0c <mainTask+0x6ac>)
 8004aba:	2201      	movs	r2, #1
 8004abc:	701a      	strb	r2, [r3, #0]
				CalismaSayisiYukari=1;
 8004abe:	4b54      	ldr	r3, [pc, #336]	@ (8004c10 <mainTask+0x6b0>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	e008      	b.n	8004ad8 <mainTask+0x578>
			} else {
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004acc:	484e      	ldr	r0, [pc, #312]	@ (8004c08 <mainTask+0x6a8>)
 8004ace:	f002 fece 	bl	800786e <HAL_GPIO_WritePin>
				motorcalisiyor=0;
 8004ad2:	4b4e      	ldr	r3, [pc, #312]	@ (8004c0c <mainTask+0x6ac>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	701a      	strb	r2, [r3, #0]
			}

			/*YUKARI ÇALISMA*/

			if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8004ad8:	4b41      	ldr	r3, [pc, #260]	@ (8004be0 <mainTask+0x680>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d161      	bne.n	8004ba4 <mainTask+0x644>
 8004ae0:	4b48      	ldr	r3, [pc, #288]	@ (8004c04 <mainTask+0x6a4>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d103      	bne.n	8004af0 <mainTask+0x590>
 8004ae8:	4b45      	ldr	r3, [pc, #276]	@ (8004c00 <mainTask+0x6a0>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d059      	beq.n	8004ba4 <mainTask+0x644>
 8004af0:	4b39      	ldr	r3, [pc, #228]	@ (8004bd8 <mainTask+0x678>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d055      	beq.n	8004ba4 <mainTask+0x644>
						&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004af8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004afc:	4842      	ldr	r0, [pc, #264]	@ (8004c08 <mainTask+0x6a8>)
 8004afe:	f002 fe9f 	bl	8007840 <HAL_GPIO_ReadPin>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <mainTask+0x5b0>
 8004b08:	4b42      	ldr	r3, [pc, #264]	@ (8004c14 <mainTask+0x6b4>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d049      	beq.n	8004ba4 <mainTask+0x644>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004b10:	2102      	movs	r1, #2
 8004b12:	4841      	ldr	r0, [pc, #260]	@ (8004c18 <mainTask+0x6b8>)
 8004b14:	f002 fe94 	bl	8007840 <HAL_GPIO_ReadPin>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d142      	bne.n	8004ba4 <mainTask+0x644>
						&& (basincVar)
 8004b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c1c <mainTask+0x6bc>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d03e      	beq.n	8004ba4 <mainTask+0x644>
						&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004b26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b2a:	4837      	ldr	r0, [pc, #220]	@ (8004c08 <mainTask+0x6a8>)
 8004b2c:	f002 fe88 	bl	8007840 <HAL_GPIO_ReadPin>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d10e      	bne.n	8004b54 <mainTask+0x5f4>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004b36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b3a:	4833      	ldr	r0, [pc, #204]	@ (8004c08 <mainTask+0x6a8>)
 8004b3c:	f002 fe80 	bl	8007840 <HAL_GPIO_ReadPin>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d106      	bne.n	8004b54 <mainTask+0x5f4>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004b46:	2140      	movs	r1, #64	@ 0x40
 8004b48:	4833      	ldr	r0, [pc, #204]	@ (8004c18 <mainTask+0x6b8>)
 8004b4a:	f002 fe79 	bl	8007840 <HAL_GPIO_ReadPin>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d003      	beq.n	8004b5c <mainTask+0x5fc>
 8004b54:	4b23      	ldr	r3, [pc, #140]	@ (8004be4 <mainTask+0x684>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d023      	beq.n	8004ba4 <mainTask+0x644>
						&& (asagivalfcalisiyor==0)
 8004b5c:	4b23      	ldr	r3, [pc, #140]	@ (8004bec <mainTask+0x68c>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d11f      	bne.n	8004ba4 <mainTask+0x644>
						&& (devmotoryukaricalisiyor==0)
 8004b64:	4b20      	ldr	r3, [pc, #128]	@ (8004be8 <mainTask+0x688>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	f083 0301 	eor.w	r3, r3, #1
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d018      	beq.n	8004ba4 <mainTask+0x644>
						&& (devmotorasagicalisiyor==0)
 8004b72:	4b21      	ldr	r3, [pc, #132]	@ (8004bf8 <mainTask+0x698>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	f083 0301 	eor.w	r3, r3, #1
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d011      	beq.n	8004ba4 <mainTask+0x644>
						&&(devyukarivalfcalisiyor==0)
 8004b80:	4b27      	ldr	r3, [pc, #156]	@ (8004c20 <mainTask+0x6c0>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	f083 0301 	eor.w	r3, r3, #1
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <mainTask+0x644>
						&&(devasagivalfcalisiyor==0)) {
 8004b8e:	4b25      	ldr	r3, [pc, #148]	@ (8004c24 <mainTask+0x6c4>)
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	f083 0301 	eor.w	r3, r3, #1
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <mainTask+0x644>
				yukarimotorcalisiyor=1;
 8004b9c:	4b11      	ldr	r3, [pc, #68]	@ (8004be4 <mainTask+0x684>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	701a      	strb	r2, [r3, #0]
 8004ba2:	e002      	b.n	8004baa <mainTask+0x64a>
			} else {
				yukarimotorcalisiyor=0;
 8004ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8004be4 <mainTask+0x684>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	701a      	strb	r2, [r3, #0]
			}

			if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004baa:	4b0e      	ldr	r3, [pc, #56]	@ (8004be4 <mainTask+0x684>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d13c      	bne.n	8004c2c <mainTask+0x6cc>
 8004bb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004bb6:	4818      	ldr	r0, [pc, #96]	@ (8004c18 <mainTask+0x6b8>)
 8004bb8:	f002 fe42 	bl	8007840 <HAL_GPIO_ReadPin>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d134      	bne.n	8004c2c <mainTask+0x6cc>
 8004bc2:	4b19      	ldr	r3, [pc, #100]	@ (8004c28 <mainTask+0x6c8>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d030      	beq.n	8004c2c <mainTask+0x6cc>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004bd0:	480d      	ldr	r0, [pc, #52]	@ (8004c08 <mainTask+0x6a8>)
 8004bd2:	f002 fe4c 	bl	800786e <HAL_GPIO_WritePin>
 8004bd6:	e02f      	b.n	8004c38 <mainTask+0x6d8>
 8004bd8:	20000376 	.word	0x20000376
 8004bdc:	20000342 	.word	0x20000342
 8004be0:	20000341 	.word	0x20000341
 8004be4:	20000358 	.word	0x20000358
 8004be8:	20000359 	.word	0x20000359
 8004bec:	2000035b 	.word	0x2000035b
 8004bf0:	20000353 	.word	0x20000353
 8004bf4:	20000337 	.word	0x20000337
 8004bf8:	2000035a 	.word	0x2000035a
 8004bfc:	20000336 	.word	0x20000336
 8004c00:	20000375 	.word	0x20000375
 8004c04:	20000388 	.word	0x20000388
 8004c08:	40010c00 	.word	0x40010c00
 8004c0c:	20000377 	.word	0x20000377
 8004c10:	20000362 	.word	0x20000362
 8004c14:	2000035f 	.word	0x2000035f
 8004c18:	40011000 	.word	0x40011000
 8004c1c:	20000327 	.word	0x20000327
 8004c20:	2000035d 	.word	0x2000035d
 8004c24:	2000035e 	.word	0x2000035e
 8004c28:	20000332 	.word	0x20000332
			} else {
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004c32:	4865      	ldr	r0, [pc, #404]	@ (8004dc8 <mainTask+0x868>)
 8004c34:	f002 fe1b 	bl	800786e <HAL_GPIO_WritePin>
			}

			if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004c38:	4b64      	ldr	r3, [pc, #400]	@ (8004dcc <mainTask+0x86c>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d013      	beq.n	8004c68 <mainTask+0x708>
 8004c40:	4b63      	ldr	r3, [pc, #396]	@ (8004dd0 <mainTask+0x870>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d007      	beq.n	8004c58 <mainTask+0x6f8>
 8004c48:	4b61      	ldr	r3, [pc, #388]	@ (8004dd0 <mainTask+0x870>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d003      	beq.n	8004c58 <mainTask+0x6f8>
 8004c50:	4b60      	ldr	r3, [pc, #384]	@ (8004dd4 <mainTask+0x874>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d107      	bne.n	8004c68 <mainTask+0x708>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004c58:	2201      	movs	r2, #1
 8004c5a:	2104      	movs	r1, #4
 8004c5c:	485a      	ldr	r0, [pc, #360]	@ (8004dc8 <mainTask+0x868>)
 8004c5e:	f002 fe06 	bl	800786e <HAL_GPIO_WritePin>
				yukarivalfcalisiyor=1;
 8004c62:	4b5d      	ldr	r3, [pc, #372]	@ (8004dd8 <mainTask+0x878>)
 8004c64:	2201      	movs	r2, #1
 8004c66:	701a      	strb	r2, [r3, #0]
			}

			// yukari valf timer calisması

			if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004c68:	4b5b      	ldr	r3, [pc, #364]	@ (8004dd8 <mainTask+0x878>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d033      	beq.n	8004cd8 <mainTask+0x778>
 8004c70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004c74:	4854      	ldr	r0, [pc, #336]	@ (8004dc8 <mainTask+0x868>)
 8004c76:	f002 fde3 	bl	8007840 <HAL_GPIO_ReadPin>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d106      	bne.n	8004c8e <mainTask+0x72e>
 8004c80:	4b56      	ldr	r3, [pc, #344]	@ (8004ddc <mainTask+0x87c>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	f083 0301 	eor.w	r3, r3, #1
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <mainTask+0x73c>
 8004c8e:	2102      	movs	r1, #2
 8004c90:	4853      	ldr	r0, [pc, #332]	@ (8004de0 <mainTask+0x880>)
 8004c92:	f002 fdd5 	bl	8007840 <HAL_GPIO_ReadPin>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d11d      	bne.n	8004cd8 <mainTask+0x778>
 8004c9c:	4b51      	ldr	r3, [pc, #324]	@ (8004de4 <mainTask+0x884>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d103      	bne.n	8004cac <mainTask+0x74c>
 8004ca4:	4b50      	ldr	r3, [pc, #320]	@ (8004de8 <mainTask+0x888>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d015      	beq.n	8004cd8 <mainTask+0x778>
 8004cac:	4b4f      	ldr	r3, [pc, #316]	@ (8004dec <mainTask+0x88c>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d011      	beq.n	8004cd8 <mainTask+0x778>
 8004cb4:	4b4e      	ldr	r3, [pc, #312]	@ (8004df0 <mainTask+0x890>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00d      	beq.n	8004cd8 <mainTask+0x778>
 8004cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8004df4 <mainTask+0x894>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	f083 0301 	eor.w	r3, r3, #1
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d006      	beq.n	8004cd8 <mainTask+0x778>
				timer2=millis;
 8004cca:	4b4b      	ldr	r3, [pc, #300]	@ (8004df8 <mainTask+0x898>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a4b      	ldr	r2, [pc, #300]	@ (8004dfc <mainTask+0x89c>)
 8004cd0:	6013      	str	r3, [r2, #0]
				butonKontrol3=1;
 8004cd2:	4b48      	ldr	r3, [pc, #288]	@ (8004df4 <mainTask+0x894>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	701a      	strb	r2, [r3, #0]
			}

			if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8004cd8:	4b47      	ldr	r3, [pc, #284]	@ (8004df8 <mainTask+0x898>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	4b47      	ldr	r3, [pc, #284]	@ (8004dfc <mainTask+0x89c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	4a47      	ldr	r2, [pc, #284]	@ (8004e00 <mainTask+0x8a0>)
 8004ce4:	7812      	ldrb	r2, [r2, #0]
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d303      	bcc.n	8004cf2 <mainTask+0x792>
 8004cea:	4b42      	ldr	r3, [pc, #264]	@ (8004df4 <mainTask+0x894>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d118      	bne.n	8004d24 <mainTask+0x7c4>
 8004cf2:	4b3c      	ldr	r3, [pc, #240]	@ (8004de4 <mainTask+0x884>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	f083 0301 	eor.w	r3, r3, #1
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d006      	beq.n	8004d0e <mainTask+0x7ae>
 8004d00:	4b39      	ldr	r3, [pc, #228]	@ (8004de8 <mainTask+0x888>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	f083 0301 	eor.w	r3, r3, #1
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10a      	bne.n	8004d24 <mainTask+0x7c4>
 8004d0e:	4b37      	ldr	r3, [pc, #220]	@ (8004dec <mainTask+0x88c>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	f083 0301 	eor.w	r3, r3, #1
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d103      	bne.n	8004d24 <mainTask+0x7c4>
 8004d1c:	4b34      	ldr	r3, [pc, #208]	@ (8004df0 <mainTask+0x890>)
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10a      	bne.n	8004d3a <mainTask+0x7da>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004d24:	2200      	movs	r2, #0
 8004d26:	2104      	movs	r1, #4
 8004d28:	4827      	ldr	r0, [pc, #156]	@ (8004dc8 <mainTask+0x868>)
 8004d2a:	f002 fda0 	bl	800786e <HAL_GPIO_WritePin>
				yukarivalfcalisiyor=0;
 8004d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd8 <mainTask+0x878>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
				butonKontrol3=0;
 8004d34:	4b2f      	ldr	r3, [pc, #188]	@ (8004df4 <mainTask+0x894>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	701a      	strb	r2, [r3, #0]
			}

			//Ond safety

			if(emniyetCercevesi==0) {
 8004d3a:	4b32      	ldr	r3, [pc, #200]	@ (8004e04 <mainTask+0x8a4>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d102      	bne.n	8004d48 <mainTask+0x7e8>
				cerceveVar=1;
 8004d42:	4b31      	ldr	r3, [pc, #196]	@ (8004e08 <mainTask+0x8a8>)
 8004d44:	2201      	movs	r2, #1
 8004d46:	701a      	strb	r2, [r3, #0]
			}

			if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004d48:	4b2e      	ldr	r3, [pc, #184]	@ (8004e04 <mainTask+0x8a4>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d116      	bne.n	8004d7e <mainTask+0x81e>
 8004d50:	4b2e      	ldr	r3, [pc, #184]	@ (8004e0c <mainTask+0x8ac>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d112      	bne.n	8004d7e <mainTask+0x81e>
 8004d58:	2101      	movs	r1, #1
 8004d5a:	4821      	ldr	r0, [pc, #132]	@ (8004de0 <mainTask+0x880>)
 8004d5c:	f002 fd70 	bl	8007840 <HAL_GPIO_ReadPin>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10b      	bne.n	8004d7e <mainTask+0x81e>
 8004d66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004d6a:	4817      	ldr	r0, [pc, #92]	@ (8004dc8 <mainTask+0x868>)
 8004d6c:	f002 fd68 	bl	8007840 <HAL_GPIO_ReadPin>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d103      	bne.n	8004d7e <mainTask+0x81e>
				cerceveVar=1;
 8004d76:	4b24      	ldr	r3, [pc, #144]	@ (8004e08 <mainTask+0x8a8>)
 8004d78:	2201      	movs	r2, #1
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	e011      	b.n	8004da2 <mainTask+0x842>
			} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004d7e:	4b21      	ldr	r3, [pc, #132]	@ (8004e04 <mainTask+0x8a4>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d10d      	bne.n	8004da2 <mainTask+0x842>
 8004d86:	2101      	movs	r1, #1
 8004d88:	4815      	ldr	r0, [pc, #84]	@ (8004de0 <mainTask+0x880>)
 8004d8a:	f002 fd59 	bl	8007840 <HAL_GPIO_ReadPin>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d106      	bne.n	8004da2 <mainTask+0x842>
 8004d94:	4b1d      	ldr	r3, [pc, #116]	@ (8004e0c <mainTask+0x8ac>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <mainTask+0x842>
				cerceveVar=0;
 8004d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8004e08 <mainTask+0x8a8>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	701a      	strb	r2, [r3, #0]
			}

			if (emniyetCercevesi==1 && calismaSekli==1) {
 8004da2:	4b18      	ldr	r3, [pc, #96]	@ (8004e04 <mainTask+0x8a4>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d135      	bne.n	8004e16 <mainTask+0x8b6>
 8004daa:	4b18      	ldr	r3, [pc, #96]	@ (8004e0c <mainTask+0x8ac>)
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d131      	bne.n	8004e16 <mainTask+0x8b6>
				if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004db2:	2101      	movs	r1, #1
 8004db4:	480a      	ldr	r0, [pc, #40]	@ (8004de0 <mainTask+0x880>)
 8004db6:	f002 fd43 	bl	8007840 <HAL_GPIO_ReadPin>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d127      	bne.n	8004e10 <mainTask+0x8b0>
					cerceveVar=1;
 8004dc0:	4b11      	ldr	r3, [pc, #68]	@ (8004e08 <mainTask+0x8a8>)
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	e026      	b.n	8004e16 <mainTask+0x8b6>
 8004dc8:	40010c00 	.word	0x40010c00
 8004dcc:	20000358 	.word	0x20000358
 8004dd0:	20000333 	.word	0x20000333
 8004dd4:	20000337 	.word	0x20000337
 8004dd8:	2000035c 	.word	0x2000035c
 8004ddc:	2000035f 	.word	0x2000035f
 8004de0:	40011000 	.word	0x40011000
 8004de4:	20000375 	.word	0x20000375
 8004de8:	20000388 	.word	0x20000388
 8004dec:	20000376 	.word	0x20000376
 8004df0:	20000327 	.word	0x20000327
 8004df4:	20000354 	.word	0x20000354
 8004df8:	20000300 	.word	0x20000300
 8004dfc:	2000030c 	.word	0x2000030c
 8004e00:	20000338 	.word	0x20000338
 8004e04:	20000328 	.word	0x20000328
 8004e08:	2000037a 	.word	0x2000037a
 8004e0c:	20000325 	.word	0x20000325
				} else {
					cerceveVar=0;
 8004e10:	4b7d      	ldr	r3, [pc, #500]	@ (8005008 <mainTask+0xaa8>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	701a      	strb	r2, [r3, #0]
				}
			}

			//Asagi calisma
			if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004e16:	4b7d      	ldr	r3, [pc, #500]	@ (800500c <mainTask+0xaac>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d179      	bne.n	8004f12 <mainTask+0x9b2>
 8004e1e:	4b7c      	ldr	r3, [pc, #496]	@ (8005010 <mainTask+0xab0>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d075      	beq.n	8004f12 <mainTask+0x9b2>
 8004e26:	4b7b      	ldr	r3, [pc, #492]	@ (8005014 <mainTask+0xab4>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d071      	beq.n	8004f12 <mainTask+0x9b2>
					&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004e2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004e32:	4879      	ldr	r0, [pc, #484]	@ (8005018 <mainTask+0xab8>)
 8004e34:	f002 fd04 	bl	8007840 <HAL_GPIO_ReadPin>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <mainTask+0x8e6>
 8004e3e:	4b77      	ldr	r3, [pc, #476]	@ (800501c <mainTask+0xabc>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d065      	beq.n	8004f12 <mainTask+0x9b2>
					&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004e46:	4b70      	ldr	r3, [pc, #448]	@ (8005008 <mainTask+0xaa8>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d061      	beq.n	8004f12 <mainTask+0x9b2>
 8004e4e:	4b74      	ldr	r3, [pc, #464]	@ (8005020 <mainTask+0xac0>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	f083 0301 	eor.w	r3, r3, #1
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d05a      	beq.n	8004f12 <mainTask+0x9b2>
					&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004e5c:	2104      	movs	r1, #4
 8004e5e:	4871      	ldr	r0, [pc, #452]	@ (8005024 <mainTask+0xac4>)
 8004e60:	f002 fcee 	bl	8007840 <HAL_GPIO_ReadPin>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <mainTask+0x912>
 8004e6a:	4b6f      	ldr	r3, [pc, #444]	@ (8005028 <mainTask+0xac8>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d14f      	bne.n	8004f12 <mainTask+0x9b2>
					&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004e72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004e76:	4868      	ldr	r0, [pc, #416]	@ (8005018 <mainTask+0xab8>)
 8004e78:	f002 fce2 	bl	8007840 <HAL_GPIO_ReadPin>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d10e      	bne.n	8004ea0 <mainTask+0x940>
					&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004e82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e86:	4864      	ldr	r0, [pc, #400]	@ (8005018 <mainTask+0xab8>)
 8004e88:	f002 fcda 	bl	8007840 <HAL_GPIO_ReadPin>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d106      	bne.n	8004ea0 <mainTask+0x940>
					&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004e92:	2140      	movs	r1, #64	@ 0x40
 8004e94:	4863      	ldr	r0, [pc, #396]	@ (8005024 <mainTask+0xac4>)
 8004e96:	f002 fcd3 	bl	8007840 <HAL_GPIO_ReadPin>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d003      	beq.n	8004ea8 <mainTask+0x948>
 8004ea0:	4b62      	ldr	r3, [pc, #392]	@ (800502c <mainTask+0xacc>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d034      	beq.n	8004f12 <mainTask+0x9b2>
					&& (yukarimotorcalisiyor==0)
 8004ea8:	4b61      	ldr	r3, [pc, #388]	@ (8005030 <mainTask+0xad0>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d130      	bne.n	8004f12 <mainTask+0x9b2>
					&& (yukarivalfcalisiyor==0)
 8004eb0:	4b60      	ldr	r3, [pc, #384]	@ (8005034 <mainTask+0xad4>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	f083 0301 	eor.w	r3, r3, #1
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d029      	beq.n	8004f12 <mainTask+0x9b2>
			  	  	&& (devmotoryukaricalisiyor==0)
 8004ebe:	4b5e      	ldr	r3, [pc, #376]	@ (8005038 <mainTask+0xad8>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	f083 0301 	eor.w	r3, r3, #1
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d022      	beq.n	8004f12 <mainTask+0x9b2>
					&& (devmotorasagicalisiyor==0)
 8004ecc:	4b5b      	ldr	r3, [pc, #364]	@ (800503c <mainTask+0xadc>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	f083 0301 	eor.w	r3, r3, #1
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d01b      	beq.n	8004f12 <mainTask+0x9b2>
					&& (devyukarivalfcalisiyor==0)
 8004eda:	4b59      	ldr	r3, [pc, #356]	@ (8005040 <mainTask+0xae0>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	f083 0301 	eor.w	r3, r3, #1
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d014      	beq.n	8004f12 <mainTask+0x9b2>
					&& (devasagivalfcalisiyor==0)) {
 8004ee8:	4b56      	ldr	r3, [pc, #344]	@ (8005044 <mainTask+0xae4>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	f083 0301 	eor.w	r3, r3, #1
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00d      	beq.n	8004f12 <mainTask+0x9b2>

				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	2102      	movs	r1, #2
 8004efa:	4847      	ldr	r0, [pc, #284]	@ (8005018 <mainTask+0xab8>)
 8004efc:	f002 fcb7 	bl	800786e <HAL_GPIO_WritePin>
				asagivalfcalisiyor=1;
 8004f00:	4b4a      	ldr	r3, [pc, #296]	@ (800502c <mainTask+0xacc>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	701a      	strb	r2, [r3, #0]
				CalismaSayisiAsagi=1;
 8004f06:	4b50      	ldr	r3, [pc, #320]	@ (8005048 <mainTask+0xae8>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	701a      	strb	r2, [r3, #0]
				cercevesasagicalisma=1;
 8004f0c:	4b4f      	ldr	r3, [pc, #316]	@ (800504c <mainTask+0xaec>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	701a      	strb	r2, [r3, #0]
			}

			// asagi valf timer calisması

			if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004f12:	4b46      	ldr	r3, [pc, #280]	@ (800502c <mainTask+0xacc>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d133      	bne.n	8004f82 <mainTask+0xa22>
 8004f1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004f1e:	483e      	ldr	r0, [pc, #248]	@ (8005018 <mainTask+0xab8>)
 8004f20:	f002 fc8e 	bl	8007840 <HAL_GPIO_ReadPin>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d106      	bne.n	8004f38 <mainTask+0x9d8>
 8004f2a:	4b3c      	ldr	r3, [pc, #240]	@ (800501c <mainTask+0xabc>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	f083 0301 	eor.w	r3, r3, #1
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10a      	bne.n	8004f4e <mainTask+0x9ee>
 8004f38:	2104      	movs	r1, #4
 8004f3a:	483a      	ldr	r0, [pc, #232]	@ (8005024 <mainTask+0xac4>)
 8004f3c:	f002 fc80 	bl	8007840 <HAL_GPIO_ReadPin>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d11d      	bne.n	8004f82 <mainTask+0xa22>
 8004f46:	4b38      	ldr	r3, [pc, #224]	@ (8005028 <mainTask+0xac8>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d019      	beq.n	8004f82 <mainTask+0xa22>
 8004f4e:	4b30      	ldr	r3, [pc, #192]	@ (8005010 <mainTask+0xab0>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d015      	beq.n	8004f82 <mainTask+0xa22>
 8004f56:	4b2f      	ldr	r3, [pc, #188]	@ (8005014 <mainTask+0xab4>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d011      	beq.n	8004f82 <mainTask+0xa22>
 8004f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8005008 <mainTask+0xaa8>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00d      	beq.n	8004f82 <mainTask+0xa22>
 8004f66:	4b3a      	ldr	r3, [pc, #232]	@ (8005050 <mainTask+0xaf0>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	f083 0301 	eor.w	r3, r3, #1
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d006      	beq.n	8004f82 <mainTask+0xa22>
				timer2=millis;
 8004f74:	4b37      	ldr	r3, [pc, #220]	@ (8005054 <mainTask+0xaf4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a37      	ldr	r2, [pc, #220]	@ (8005058 <mainTask+0xaf8>)
 8004f7a:	6013      	str	r3, [r2, #0]
				butonKontrol2=1;
 8004f7c:	4b34      	ldr	r3, [pc, #208]	@ (8005050 <mainTask+0xaf0>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	701a      	strb	r2, [r3, #0]
			}

			if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8004f82:	4b34      	ldr	r3, [pc, #208]	@ (8005054 <mainTask+0xaf4>)
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	4b34      	ldr	r3, [pc, #208]	@ (8005058 <mainTask+0xaf8>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	4a33      	ldr	r2, [pc, #204]	@ (800505c <mainTask+0xafc>)
 8004f8e:	7812      	ldrb	r2, [r2, #0]
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d303      	bcc.n	8004f9c <mainTask+0xa3c>
 8004f94:	4b2e      	ldr	r3, [pc, #184]	@ (8005050 <mainTask+0xaf0>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d114      	bne.n	8004fc6 <mainTask+0xa66>
 8004f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8005010 <mainTask+0xab0>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	f083 0301 	eor.w	r3, r3, #1
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10d      	bne.n	8004fc6 <mainTask+0xa66>
 8004faa:	4b1a      	ldr	r3, [pc, #104]	@ (8005014 <mainTask+0xab4>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	f083 0301 	eor.w	r3, r3, #1
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d106      	bne.n	8004fc6 <mainTask+0xa66>
 8004fb8:	4b13      	ldr	r3, [pc, #76]	@ (8005008 <mainTask+0xaa8>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	f083 0301 	eor.w	r3, r3, #1
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <mainTask+0xa7c>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2102      	movs	r1, #2
 8004fca:	4813      	ldr	r0, [pc, #76]	@ (8005018 <mainTask+0xab8>)
 8004fcc:	f002 fc4f 	bl	800786e <HAL_GPIO_WritePin>
				asagivalfcalisiyor=0;
 8004fd0:	4b16      	ldr	r3, [pc, #88]	@ (800502c <mainTask+0xacc>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	701a      	strb	r2, [r3, #0]
				butonKontrol2=0;
 8004fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8005050 <mainTask+0xaf0>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]
			}

			//yavaslama valf

			if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8004fdc:	4b13      	ldr	r3, [pc, #76]	@ (800502c <mainTask+0xacc>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d13f      	bne.n	8005064 <mainTask+0xb04>
 8004fe4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004fe8:	480e      	ldr	r0, [pc, #56]	@ (8005024 <mainTask+0xac4>)
 8004fea:	f002 fc29 	bl	8007840 <HAL_GPIO_ReadPin>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d137      	bne.n	8005064 <mainTask+0xb04>
 8004ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8005060 <mainTask+0xb00>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d033      	beq.n	8005064 <mainTask+0xb04>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	2101      	movs	r1, #1
 8005000:	4805      	ldr	r0, [pc, #20]	@ (8005018 <mainTask+0xab8>)
 8005002:	f002 fc34 	bl	800786e <HAL_GPIO_WritePin>
 8005006:	e032      	b.n	800506e <mainTask+0xb0e>
 8005008:	2000037a 	.word	0x2000037a
 800500c:	20000341 	.word	0x20000341
 8005010:	20000375 	.word	0x20000375
 8005014:	20000376 	.word	0x20000376
 8005018:	40010c00 	.word	0x40010c00
 800501c:	20000360 	.word	0x20000360
 8005020:	20000374 	.word	0x20000374
 8005024:	40011000 	.word	0x40011000
 8005028:	2000032a 	.word	0x2000032a
 800502c:	2000035b 	.word	0x2000035b
 8005030:	20000358 	.word	0x20000358
 8005034:	2000035c 	.word	0x2000035c
 8005038:	20000359 	.word	0x20000359
 800503c:	2000035a 	.word	0x2000035a
 8005040:	2000035d 	.word	0x2000035d
 8005044:	2000035e 	.word	0x2000035e
 8005048:	20000363 	.word	0x20000363
 800504c:	20000384 	.word	0x20000384
 8005050:	20000353 	.word	0x20000353
 8005054:	20000300 	.word	0x20000300
 8005058:	2000030c 	.word	0x2000030c
 800505c:	20000339 	.word	0x20000339
 8005060:	20000329 	.word	0x20000329
			} else {
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005064:	2200      	movs	r2, #0
 8005066:	2101      	movs	r1, #1
 8005068:	4895      	ldr	r0, [pc, #596]	@ (80052c0 <mainTask+0xd60>)
 800506a:	f002 fc00 	bl	800786e <HAL_GPIO_WritePin>
			}

			/*DEVIRME veya YURUYUS Baslangic*/

			// Devirme Yukari veya yuruyus ileri calisma
			if((menuGiris==0)
 800506e:	4b95      	ldr	r3, [pc, #596]	@ (80052c4 <mainTask+0xd64>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d15f      	bne.n	8005136 <mainTask+0xbd6>
					&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005076:	4b94      	ldr	r3, [pc, #592]	@ (80052c8 <mainTask+0xd68>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d003      	beq.n	8005086 <mainTask+0xb26>
 800507e:	4b92      	ldr	r3, [pc, #584]	@ (80052c8 <mainTask+0xd68>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d157      	bne.n	8005136 <mainTask+0xbd6>
					&& (stopVar) && (kapiSivicVar)
 8005086:	4b91      	ldr	r3, [pc, #580]	@ (80052cc <mainTask+0xd6c>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d053      	beq.n	8005136 <mainTask+0xbd6>
 800508e:	4b90      	ldr	r3, [pc, #576]	@ (80052d0 <mainTask+0xd70>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d04f      	beq.n	8005136 <mainTask+0xbd6>
					&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005096:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800509a:	4889      	ldr	r0, [pc, #548]	@ (80052c0 <mainTask+0xd60>)
 800509c:	f002 fbd0 	bl	8007840 <HAL_GPIO_ReadPin>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d147      	bne.n	8005136 <mainTask+0xbd6>
					&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80050a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80050aa:	488a      	ldr	r0, [pc, #552]	@ (80052d4 <mainTask+0xd74>)
 80050ac:	f002 fbc8 	bl	8007840 <HAL_GPIO_ReadPin>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <mainTask+0xb5e>
 80050b6:	4b88      	ldr	r3, [pc, #544]	@ (80052d8 <mainTask+0xd78>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d13b      	bne.n	8005136 <mainTask+0xbd6>
					&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80050be:	2140      	movs	r1, #64	@ 0x40
 80050c0:	4884      	ldr	r0, [pc, #528]	@ (80052d4 <mainTask+0xd74>)
 80050c2:	f002 fbbd 	bl	8007840 <HAL_GPIO_ReadPin>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d10f      	bne.n	80050ec <mainTask+0xb8c>
					&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80050cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80050d0:	487b      	ldr	r0, [pc, #492]	@ (80052c0 <mainTask+0xd60>)
 80050d2:	f002 fbb5 	bl	8007840 <HAL_GPIO_ReadPin>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d107      	bne.n	80050ec <mainTask+0xb8c>
					&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80050dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80050e0:	4877      	ldr	r0, [pc, #476]	@ (80052c0 <mainTask+0xd60>)
 80050e2:	f002 fbad 	bl	8007840 <HAL_GPIO_ReadPin>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d003      	beq.n	80050f4 <mainTask+0xb94>
 80050ec:	4b7b      	ldr	r3, [pc, #492]	@ (80052dc <mainTask+0xd7c>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d020      	beq.n	8005136 <mainTask+0xbd6>
					&& (yukarimotorcalisiyor==0)
 80050f4:	4b7a      	ldr	r3, [pc, #488]	@ (80052e0 <mainTask+0xd80>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d11c      	bne.n	8005136 <mainTask+0xbd6>
					&& (yukarivalfcalisiyor==0)
 80050fc:	4b79      	ldr	r3, [pc, #484]	@ (80052e4 <mainTask+0xd84>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	f083 0301 	eor.w	r3, r3, #1
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d015      	beq.n	8005136 <mainTask+0xbd6>
					&& (asagivalfcalisiyor==0)
 800510a:	4b77      	ldr	r3, [pc, #476]	@ (80052e8 <mainTask+0xd88>)
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d111      	bne.n	8005136 <mainTask+0xbd6>
					&& (devmotorasagicalisiyor==0)
 8005112:	4b76      	ldr	r3, [pc, #472]	@ (80052ec <mainTask+0xd8c>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	f083 0301 	eor.w	r3, r3, #1
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <mainTask+0xbd6>
					&&(devasagivalfcalisiyor==0)) {
 8005120:	4b73      	ldr	r3, [pc, #460]	@ (80052f0 <mainTask+0xd90>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	f083 0301 	eor.w	r3, r3, #1
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <mainTask+0xbd6>

				devmotoryukaricalisiyor=1;
 800512e:	4b6b      	ldr	r3, [pc, #428]	@ (80052dc <mainTask+0xd7c>)
 8005130:	2201      	movs	r2, #1
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	e002      	b.n	800513c <mainTask+0xbdc>
			} else {
				devmotoryukaricalisiyor=0;
 8005136:	4b69      	ldr	r3, [pc, #420]	@ (80052dc <mainTask+0xd7c>)
 8005138:	2200      	movs	r2, #0
 800513a:	701a      	strb	r2, [r3, #0]
			}

			if(devmotoryukaricalisiyor==1) {
 800513c:	4b67      	ldr	r3, [pc, #412]	@ (80052dc <mainTask+0xd7c>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d007      	beq.n	8005154 <mainTask+0xbf4>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005144:	2201      	movs	r2, #1
 8005146:	2120      	movs	r1, #32
 8005148:	4862      	ldr	r0, [pc, #392]	@ (80052d4 <mainTask+0xd74>)
 800514a:	f002 fb90 	bl	800786e <HAL_GPIO_WritePin>
				devyukarivalfcalisiyor=1;
 800514e:	4b69      	ldr	r3, [pc, #420]	@ (80052f4 <mainTask+0xd94>)
 8005150:	2201      	movs	r2, #1
 8005152:	701a      	strb	r2, [r3, #0]
			}
			// devirme yukari + yuruyus ileri valf timer calismasi

			if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005154:	4b67      	ldr	r3, [pc, #412]	@ (80052f4 <mainTask+0xd94>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d025      	beq.n	80051a8 <mainTask+0xc48>
 800515c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005160:	4857      	ldr	r0, [pc, #348]	@ (80052c0 <mainTask+0xd60>)
 8005162:	f002 fb6d 	bl	8007840 <HAL_GPIO_ReadPin>
 8005166:	4603      	mov	r3, r0
 8005168:	2b01      	cmp	r3, #1
 800516a:	d007      	beq.n	800517c <mainTask+0xc1c>
 800516c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005170:	4858      	ldr	r0, [pc, #352]	@ (80052d4 <mainTask+0xd74>)
 8005172:	f002 fb65 	bl	8007840 <HAL_GPIO_ReadPin>
 8005176:	4603      	mov	r3, r0
 8005178:	2b01      	cmp	r3, #1
 800517a:	d115      	bne.n	80051a8 <mainTask+0xc48>
 800517c:	4b53      	ldr	r3, [pc, #332]	@ (80052cc <mainTask+0xd6c>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d011      	beq.n	80051a8 <mainTask+0xc48>
 8005184:	4b52      	ldr	r3, [pc, #328]	@ (80052d0 <mainTask+0xd70>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00d      	beq.n	80051a8 <mainTask+0xc48>
 800518c:	4b5a      	ldr	r3, [pc, #360]	@ (80052f8 <mainTask+0xd98>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	f083 0301 	eor.w	r3, r3, #1
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d006      	beq.n	80051a8 <mainTask+0xc48>
				timer2=millis;
 800519a:	4b58      	ldr	r3, [pc, #352]	@ (80052fc <mainTask+0xd9c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a58      	ldr	r2, [pc, #352]	@ (8005300 <mainTask+0xda0>)
 80051a0:	6013      	str	r3, [r2, #0]
				butonKontrol4=1;
 80051a2:	4b55      	ldr	r3, [pc, #340]	@ (80052f8 <mainTask+0xd98>)
 80051a4:	2201      	movs	r2, #1
 80051a6:	701a      	strb	r2, [r3, #0]
			}

			if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80051a8:	4b54      	ldr	r3, [pc, #336]	@ (80052fc <mainTask+0xd9c>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	4b54      	ldr	r3, [pc, #336]	@ (8005300 <mainTask+0xda0>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	4a54      	ldr	r2, [pc, #336]	@ (8005304 <mainTask+0xda4>)
 80051b4:	7812      	ldrb	r2, [r2, #0]
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d303      	bcc.n	80051c2 <mainTask+0xc62>
 80051ba:	4b4f      	ldr	r3, [pc, #316]	@ (80052f8 <mainTask+0xd98>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10d      	bne.n	80051de <mainTask+0xc7e>
 80051c2:	4b42      	ldr	r3, [pc, #264]	@ (80052cc <mainTask+0xd6c>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	f083 0301 	eor.w	r3, r3, #1
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d106      	bne.n	80051de <mainTask+0xc7e>
 80051d0:	4b3f      	ldr	r3, [pc, #252]	@ (80052d0 <mainTask+0xd70>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	f083 0301 	eor.w	r3, r3, #1
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <mainTask+0xc94>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80051de:	2200      	movs	r2, #0
 80051e0:	2120      	movs	r1, #32
 80051e2:	483c      	ldr	r0, [pc, #240]	@ (80052d4 <mainTask+0xd74>)
 80051e4:	f002 fb43 	bl	800786e <HAL_GPIO_WritePin>
				devyukarivalfcalisiyor=0;
 80051e8:	4b42      	ldr	r3, [pc, #264]	@ (80052f4 <mainTask+0xd94>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	701a      	strb	r2, [r3, #0]
				butonKontrol4=0;
 80051ee:	4b42      	ldr	r3, [pc, #264]	@ (80052f8 <mainTask+0xd98>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	701a      	strb	r2, [r3, #0]
			}

			// Devirme Asagi veya yuruyus geri calisma

			if((menuGiris==0)
 80051f4:	4b33      	ldr	r3, [pc, #204]	@ (80052c4 <mainTask+0xd64>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f040 8087 	bne.w	800530c <mainTask+0xdac>
					&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80051fe:	4b32      	ldr	r3, [pc, #200]	@ (80052c8 <mainTask+0xd68>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d003      	beq.n	800520e <mainTask+0xcae>
 8005206:	4b30      	ldr	r3, [pc, #192]	@ (80052c8 <mainTask+0xd68>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d17e      	bne.n	800530c <mainTask+0xdac>
					&& (stopVar) && (kapiSivicVar)
 800520e:	4b2f      	ldr	r3, [pc, #188]	@ (80052cc <mainTask+0xd6c>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d07a      	beq.n	800530c <mainTask+0xdac>
 8005216:	4b2e      	ldr	r3, [pc, #184]	@ (80052d0 <mainTask+0xd70>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d076      	beq.n	800530c <mainTask+0xdac>
					&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 800521e:	2140      	movs	r1, #64	@ 0x40
 8005220:	482c      	ldr	r0, [pc, #176]	@ (80052d4 <mainTask+0xd74>)
 8005222:	f002 fb0d 	bl	8007840 <HAL_GPIO_ReadPin>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d16f      	bne.n	800530c <mainTask+0xdac>
					&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800522c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005230:	4828      	ldr	r0, [pc, #160]	@ (80052d4 <mainTask+0xd74>)
 8005232:	f002 fb05 	bl	8007840 <HAL_GPIO_ReadPin>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <mainTask+0xce4>
 800523c:	4b32      	ldr	r3, [pc, #200]	@ (8005308 <mainTask+0xda8>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d163      	bne.n	800530c <mainTask+0xdac>
					&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005244:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005248:	481d      	ldr	r0, [pc, #116]	@ (80052c0 <mainTask+0xd60>)
 800524a:	f002 faf9 	bl	8007840 <HAL_GPIO_ReadPin>
 800524e:	4603      	mov	r3, r0
 8005250:	2b01      	cmp	r3, #1
 8005252:	d10f      	bne.n	8005274 <mainTask+0xd14>
					&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005254:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005258:	4819      	ldr	r0, [pc, #100]	@ (80052c0 <mainTask+0xd60>)
 800525a:	f002 faf1 	bl	8007840 <HAL_GPIO_ReadPin>
 800525e:	4603      	mov	r3, r0
 8005260:	2b01      	cmp	r3, #1
 8005262:	d107      	bne.n	8005274 <mainTask+0xd14>
					&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005264:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005268:	4815      	ldr	r0, [pc, #84]	@ (80052c0 <mainTask+0xd60>)
 800526a:	f002 fae9 	bl	8007840 <HAL_GPIO_ReadPin>
 800526e:	4603      	mov	r3, r0
 8005270:	2b01      	cmp	r3, #1
 8005272:	d003      	beq.n	800527c <mainTask+0xd1c>
 8005274:	4b1d      	ldr	r3, [pc, #116]	@ (80052ec <mainTask+0xd8c>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d047      	beq.n	800530c <mainTask+0xdac>
					&& (yukarimotorcalisiyor==0)
 800527c:	4b18      	ldr	r3, [pc, #96]	@ (80052e0 <mainTask+0xd80>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d143      	bne.n	800530c <mainTask+0xdac>
					&& (yukarivalfcalisiyor==0)
 8005284:	4b17      	ldr	r3, [pc, #92]	@ (80052e4 <mainTask+0xd84>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	f083 0301 	eor.w	r3, r3, #1
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d03c      	beq.n	800530c <mainTask+0xdac>
					&& (asagivalfcalisiyor==0)
 8005292:	4b15      	ldr	r3, [pc, #84]	@ (80052e8 <mainTask+0xd88>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d138      	bne.n	800530c <mainTask+0xdac>
					&& (devyukarivalfcalisiyor==0)
 800529a:	4b16      	ldr	r3, [pc, #88]	@ (80052f4 <mainTask+0xd94>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	f083 0301 	eor.w	r3, r3, #1
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d031      	beq.n	800530c <mainTask+0xdac>
					&& (devmotoryukaricalisiyor==0)) {
 80052a8:	4b0c      	ldr	r3, [pc, #48]	@ (80052dc <mainTask+0xd7c>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	f083 0301 	eor.w	r3, r3, #1
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d02a      	beq.n	800530c <mainTask+0xdac>

				devmotorasagicalisiyor=1;
 80052b6:	4b0d      	ldr	r3, [pc, #52]	@ (80052ec <mainTask+0xd8c>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	701a      	strb	r2, [r3, #0]
 80052bc:	e029      	b.n	8005312 <mainTask+0xdb2>
 80052be:	bf00      	nop
 80052c0:	40010c00 	.word	0x40010c00
 80052c4:	20000341 	.word	0x20000341
 80052c8:	20000333 	.word	0x20000333
 80052cc:	20000375 	.word	0x20000375
 80052d0:	20000376 	.word	0x20000376
 80052d4:	40011000 	.word	0x40011000
 80052d8:	20000334 	.word	0x20000334
 80052dc:	20000359 	.word	0x20000359
 80052e0:	20000358 	.word	0x20000358
 80052e4:	2000035c 	.word	0x2000035c
 80052e8:	2000035b 	.word	0x2000035b
 80052ec:	2000035a 	.word	0x2000035a
 80052f0:	2000035e 	.word	0x2000035e
 80052f4:	2000035d 	.word	0x2000035d
 80052f8:	20000355 	.word	0x20000355
 80052fc:	20000300 	.word	0x20000300
 8005300:	2000030c 	.word	0x2000030c
 8005304:	2000033a 	.word	0x2000033a
 8005308:	20000335 	.word	0x20000335
			} else {
				devmotorasagicalisiyor=0;
 800530c:	4b96      	ldr	r3, [pc, #600]	@ (8005568 <mainTask+0x1008>)
 800530e:	2200      	movs	r2, #0
 8005310:	701a      	strb	r2, [r3, #0]
			}

			if(devmotorasagicalisiyor==1) {
 8005312:	4b95      	ldr	r3, [pc, #596]	@ (8005568 <mainTask+0x1008>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d007      	beq.n	800532a <mainTask+0xdca>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800531a:	2201      	movs	r2, #1
 800531c:	2110      	movs	r1, #16
 800531e:	4893      	ldr	r0, [pc, #588]	@ (800556c <mainTask+0x100c>)
 8005320:	f002 faa5 	bl	800786e <HAL_GPIO_WritePin>
				devasagivalfcalisiyor=1;
 8005324:	4b92      	ldr	r3, [pc, #584]	@ (8005570 <mainTask+0x1010>)
 8005326:	2201      	movs	r2, #1
 8005328:	701a      	strb	r2, [r3, #0]
			}

			//devirme asagi + geri valf timer calismasi

			if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800532a:	4b91      	ldr	r3, [pc, #580]	@ (8005570 <mainTask+0x1010>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d024      	beq.n	800537c <mainTask+0xe1c>
 8005332:	2140      	movs	r1, #64	@ 0x40
 8005334:	488d      	ldr	r0, [pc, #564]	@ (800556c <mainTask+0x100c>)
 8005336:	f002 fa83 	bl	8007840 <HAL_GPIO_ReadPin>
 800533a:	4603      	mov	r3, r0
 800533c:	2b01      	cmp	r3, #1
 800533e:	d007      	beq.n	8005350 <mainTask+0xdf0>
 8005340:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005344:	4889      	ldr	r0, [pc, #548]	@ (800556c <mainTask+0x100c>)
 8005346:	f002 fa7b 	bl	8007840 <HAL_GPIO_ReadPin>
 800534a:	4603      	mov	r3, r0
 800534c:	2b01      	cmp	r3, #1
 800534e:	d115      	bne.n	800537c <mainTask+0xe1c>
 8005350:	4b88      	ldr	r3, [pc, #544]	@ (8005574 <mainTask+0x1014>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d011      	beq.n	800537c <mainTask+0xe1c>
 8005358:	4b87      	ldr	r3, [pc, #540]	@ (8005578 <mainTask+0x1018>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00d      	beq.n	800537c <mainTask+0xe1c>
 8005360:	4b86      	ldr	r3, [pc, #536]	@ (800557c <mainTask+0x101c>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	f083 0301 	eor.w	r3, r3, #1
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d006      	beq.n	800537c <mainTask+0xe1c>
				timer2=millis;
 800536e:	4b84      	ldr	r3, [pc, #528]	@ (8005580 <mainTask+0x1020>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a84      	ldr	r2, [pc, #528]	@ (8005584 <mainTask+0x1024>)
 8005374:	6013      	str	r3, [r2, #0]
				butonKontrol5=1;
 8005376:	4b81      	ldr	r3, [pc, #516]	@ (800557c <mainTask+0x101c>)
 8005378:	2201      	movs	r2, #1
 800537a:	701a      	strb	r2, [r3, #0]
			}

			if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800537c:	4b80      	ldr	r3, [pc, #512]	@ (8005580 <mainTask+0x1020>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	4b80      	ldr	r3, [pc, #512]	@ (8005584 <mainTask+0x1024>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	4a80      	ldr	r2, [pc, #512]	@ (8005588 <mainTask+0x1028>)
 8005388:	7812      	ldrb	r2, [r2, #0]
 800538a:	4293      	cmp	r3, r2
 800538c:	d303      	bcc.n	8005396 <mainTask+0xe36>
 800538e:	4b7b      	ldr	r3, [pc, #492]	@ (800557c <mainTask+0x101c>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10d      	bne.n	80053b2 <mainTask+0xe52>
 8005396:	4b77      	ldr	r3, [pc, #476]	@ (8005574 <mainTask+0x1014>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	f083 0301 	eor.w	r3, r3, #1
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <mainTask+0xe52>
 80053a4:	4b74      	ldr	r3, [pc, #464]	@ (8005578 <mainTask+0x1018>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	f083 0301 	eor.w	r3, r3, #1
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <mainTask+0xe68>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80053b2:	2200      	movs	r2, #0
 80053b4:	2110      	movs	r1, #16
 80053b6:	486d      	ldr	r0, [pc, #436]	@ (800556c <mainTask+0x100c>)
 80053b8:	f002 fa59 	bl	800786e <HAL_GPIO_WritePin>
				devasagivalfcalisiyor=0;
 80053bc:	4b6c      	ldr	r3, [pc, #432]	@ (8005570 <mainTask+0x1010>)
 80053be:	2200      	movs	r2, #0
 80053c0:	701a      	strb	r2, [r3, #0]
				butonKontrol5=0;
 80053c2:	4b6e      	ldr	r3, [pc, #440]	@ (800557c <mainTask+0x101c>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
			}

			// makine durum kontrolü

			if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80053c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80053cc:	486f      	ldr	r0, [pc, #444]	@ (800558c <mainTask+0x102c>)
 80053ce:	f002 fa37 	bl	8007840 <HAL_GPIO_ReadPin>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d120      	bne.n	800541a <mainTask+0xeba>
					&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80053d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80053dc:	486b      	ldr	r0, [pc, #428]	@ (800558c <mainTask+0x102c>)
 80053de:	f002 fa2f 	bl	8007840 <HAL_GPIO_ReadPin>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d118      	bne.n	800541a <mainTask+0xeba>
					&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80053e8:	2104      	movs	r1, #4
 80053ea:	4868      	ldr	r0, [pc, #416]	@ (800558c <mainTask+0x102c>)
 80053ec:	f002 fa28 	bl	8007840 <HAL_GPIO_ReadPin>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d111      	bne.n	800541a <mainTask+0xeba>
					&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80053f6:	2102      	movs	r1, #2
 80053f8:	4864      	ldr	r0, [pc, #400]	@ (800558c <mainTask+0x102c>)
 80053fa:	f002 fa21 	bl	8007840 <HAL_GPIO_ReadPin>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10a      	bne.n	800541a <mainTask+0xeba>
					&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005404:	2101      	movs	r1, #1
 8005406:	4861      	ldr	r0, [pc, #388]	@ (800558c <mainTask+0x102c>)
 8005408:	f002 fa1a 	bl	8007840 <HAL_GPIO_ReadPin>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d103      	bne.n	800541a <mainTask+0xeba>
				makineStop=1;
 8005412:	4b5f      	ldr	r3, [pc, #380]	@ (8005590 <mainTask+0x1030>)
 8005414:	2201      	movs	r2, #1
 8005416:	701a      	strb	r2, [r3, #0]
 8005418:	e002      	b.n	8005420 <mainTask+0xec0>
			} else {
				makineStop=0;
 800541a:	4b5d      	ldr	r3, [pc, #372]	@ (8005590 <mainTask+0x1030>)
 800541c:	2200      	movs	r2, #0
 800541e:	701a      	strb	r2, [r3, #0]
			}

			//kapi 1 kontrol

			// kapi 1 prudhome
			if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005420:	4b5c      	ldr	r3, [pc, #368]	@ (8005594 <mainTask+0x1034>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d144      	bne.n	80054b2 <mainTask+0xf52>
 8005428:	4b5b      	ldr	r3, [pc, #364]	@ (8005598 <mainTask+0x1038>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d003      	beq.n	8005438 <mainTask+0xed8>
 8005430:	4b59      	ldr	r3, [pc, #356]	@ (8005598 <mainTask+0x1038>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b03      	cmp	r3, #3
 8005436:	d13c      	bne.n	80054b2 <mainTask+0xf52>
					&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005438:	2180      	movs	r1, #128	@ 0x80
 800543a:	484c      	ldr	r0, [pc, #304]	@ (800556c <mainTask+0x100c>)
 800543c:	f002 fa00 	bl	8007840 <HAL_GPIO_ReadPin>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d103      	bne.n	800544e <mainTask+0xeee>
 8005446:	4b55      	ldr	r3, [pc, #340]	@ (800559c <mainTask+0x103c>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00b      	beq.n	8005466 <mainTask+0xf06>
 800544e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005452:	484e      	ldr	r0, [pc, #312]	@ (800558c <mainTask+0x102c>)
 8005454:	f002 f9f4 	bl	8007840 <HAL_GPIO_ReadPin>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d129      	bne.n	80054b2 <mainTask+0xf52>
 800545e:	4b4f      	ldr	r3, [pc, #316]	@ (800559c <mainTask+0x103c>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d125      	bne.n	80054b2 <mainTask+0xf52>
					&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005466:	2104      	movs	r1, #4
 8005468:	4840      	ldr	r0, [pc, #256]	@ (800556c <mainTask+0x100c>)
 800546a:	f002 f9e9 	bl	8007840 <HAL_GPIO_ReadPin>
 800546e:	4603      	mov	r3, r0
 8005470:	2b01      	cmp	r3, #1
 8005472:	d003      	beq.n	800547c <mainTask+0xf1c>
 8005474:	4b4a      	ldr	r3, [pc, #296]	@ (80055a0 <mainTask+0x1040>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d11a      	bne.n	80054b2 <mainTask+0xf52>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800547c:	2102      	movs	r1, #2
 800547e:	483b      	ldr	r0, [pc, #236]	@ (800556c <mainTask+0x100c>)
 8005480:	f002 f9de 	bl	8007840 <HAL_GPIO_ReadPin>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d113      	bne.n	80054b2 <mainTask+0xf52>
					&&(butonKontrol==0)
 800548a:	4b46      	ldr	r3, [pc, #280]	@ (80055a4 <mainTask+0x1044>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	f083 0301 	eor.w	r3, r3, #1
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00c      	beq.n	80054b2 <mainTask+0xf52>
					&&(makineStop==1)) {
 8005498:	4b3d      	ldr	r3, [pc, #244]	@ (8005590 <mainTask+0x1030>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <mainTask+0xf52>

				kapi1prudhome=1;
 80054a0:	4b41      	ldr	r3, [pc, #260]	@ (80055a8 <mainTask+0x1048>)
 80054a2:	2201      	movs	r2, #1
 80054a4:	701a      	strb	r2, [r3, #0]
				timer = millis;
 80054a6:	4b36      	ldr	r3, [pc, #216]	@ (8005580 <mainTask+0x1020>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a40      	ldr	r2, [pc, #256]	@ (80055ac <mainTask+0x104c>)
 80054ac:	6013      	str	r3, [r2, #0]
				bekle();
 80054ae:	f7fe f9e3 	bl	8003878 <bekle>
			}

			if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80054b2:	4b33      	ldr	r3, [pc, #204]	@ (8005580 <mainTask+0x1020>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	4b3d      	ldr	r3, [pc, #244]	@ (80055ac <mainTask+0x104c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	4a3c      	ldr	r2, [pc, #240]	@ (80055b0 <mainTask+0x1050>)
 80054be:	7812      	ldrb	r2, [r2, #0]
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d211      	bcs.n	80054e8 <mainTask+0xf88>
 80054c4:	2104      	movs	r1, #4
 80054c6:	4829      	ldr	r0, [pc, #164]	@ (800556c <mainTask+0x100c>)
 80054c8:	f002 f9ba 	bl	8007840 <HAL_GPIO_ReadPin>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <mainTask+0xf88>
 80054d2:	4b33      	ldr	r3, [pc, #204]	@ (80055a0 <mainTask+0x1040>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d006      	beq.n	80054e8 <mainTask+0xf88>
 80054da:	4b2d      	ldr	r3, [pc, #180]	@ (8005590 <mainTask+0x1030>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	f083 0301 	eor.w	r3, r3, #1
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <mainTask+0xf8e>
				kapi1prudhome=0;
 80054e8:	4b2f      	ldr	r3, [pc, #188]	@ (80055a8 <mainTask+0x1048>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	701a      	strb	r2, [r3, #0]
			}

			// kapi 1 buton kontrol

			if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80054ee:	4b29      	ldr	r3, [pc, #164]	@ (8005594 <mainTask+0x1034>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d160      	bne.n	80055b8 <mainTask+0x1058>
 80054f6:	4b28      	ldr	r3, [pc, #160]	@ (8005598 <mainTask+0x1038>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d003      	beq.n	8005506 <mainTask+0xfa6>
 80054fe:	4b26      	ldr	r3, [pc, #152]	@ (8005598 <mainTask+0x1038>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b03      	cmp	r3, #3
 8005504:	d158      	bne.n	80055b8 <mainTask+0x1058>

					&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005506:	2104      	movs	r1, #4
 8005508:	4818      	ldr	r0, [pc, #96]	@ (800556c <mainTask+0x100c>)
 800550a:	f002 f999 	bl	8007840 <HAL_GPIO_ReadPin>
 800550e:	4603      	mov	r3, r0
 8005510:	2b01      	cmp	r3, #1
 8005512:	d003      	beq.n	800551c <mainTask+0xfbc>
 8005514:	4b22      	ldr	r3, [pc, #136]	@ (80055a0 <mainTask+0x1040>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d14d      	bne.n	80055b8 <mainTask+0x1058>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800551c:	2102      	movs	r1, #2
 800551e:	4813      	ldr	r0, [pc, #76]	@ (800556c <mainTask+0x100c>)
 8005520:	f002 f98e 	bl	8007840 <HAL_GPIO_ReadPin>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d146      	bne.n	80055b8 <mainTask+0x1058>
					&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800552a:	2180      	movs	r1, #128	@ 0x80
 800552c:	480f      	ldr	r0, [pc, #60]	@ (800556c <mainTask+0x100c>)
 800552e:	f002 f987 	bl	8007840 <HAL_GPIO_ReadPin>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d103      	bne.n	8005540 <mainTask+0xfe0>
 8005538:	4b18      	ldr	r3, [pc, #96]	@ (800559c <mainTask+0x103c>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00b      	beq.n	8005558 <mainTask+0xff8>
 8005540:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005544:	4811      	ldr	r0, [pc, #68]	@ (800558c <mainTask+0x102c>)
 8005546:	f002 f97b 	bl	8007840 <HAL_GPIO_ReadPin>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d133      	bne.n	80055b8 <mainTask+0x1058>
 8005550:	4b12      	ldr	r3, [pc, #72]	@ (800559c <mainTask+0x103c>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d12f      	bne.n	80055b8 <mainTask+0x1058>
					&&(makineStop==1)) {
 8005558:	4b0d      	ldr	r3, [pc, #52]	@ (8005590 <mainTask+0x1030>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d02b      	beq.n	80055b8 <mainTask+0x1058>

				kapi1butonkontrol=1;
 8005560:	4b14      	ldr	r3, [pc, #80]	@ (80055b4 <mainTask+0x1054>)
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	e02a      	b.n	80055be <mainTask+0x105e>
 8005568:	2000035a 	.word	0x2000035a
 800556c:	40011000 	.word	0x40011000
 8005570:	2000035e 	.word	0x2000035e
 8005574:	20000375 	.word	0x20000375
 8005578:	20000376 	.word	0x20000376
 800557c:	20000356 	.word	0x20000356
 8005580:	20000300 	.word	0x20000300
 8005584:	2000030c 	.word	0x2000030c
 8005588:	2000033a 	.word	0x2000033a
 800558c:	40010c00 	.word	0x40010c00
 8005590:	20000365 	.word	0x20000365
 8005594:	2000032d 	.word	0x2000032d
 8005598:	2000032c 	.word	0x2000032c
 800559c:	20000330 	.word	0x20000330
 80055a0:	2000032a 	.word	0x2000032a
 80055a4:	20000352 	.word	0x20000352
 80055a8:	20000366 	.word	0x20000366
 80055ac:	20000304 	.word	0x20000304
 80055b0:	2000033d 	.word	0x2000033d
 80055b4:	20000367 	.word	0x20000367
			} else {
				kapi1butonkontrol=0;
 80055b8:	4b8b      	ldr	r3, [pc, #556]	@ (80057e8 <mainTask+0x1288>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	701a      	strb	r2, [r3, #0]
			}

			// kapi 1 pizzato

			if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80055be:	4b8b      	ldr	r3, [pc, #556]	@ (80057ec <mainTask+0x128c>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d121      	bne.n	800560a <mainTask+0x10aa>
 80055c6:	4b8a      	ldr	r3, [pc, #552]	@ (80057f0 <mainTask+0x1290>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d003      	beq.n	80055d6 <mainTask+0x1076>
 80055ce:	4b88      	ldr	r3, [pc, #544]	@ (80057f0 <mainTask+0x1290>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d119      	bne.n	800560a <mainTask+0x10aa>

					&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80055d6:	2104      	movs	r1, #4
 80055d8:	4886      	ldr	r0, [pc, #536]	@ (80057f4 <mainTask+0x1294>)
 80055da:	f002 f931 	bl	8007840 <HAL_GPIO_ReadPin>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d003      	beq.n	80055ec <mainTask+0x108c>
 80055e4:	4b84      	ldr	r3, [pc, #528]	@ (80057f8 <mainTask+0x1298>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10e      	bne.n	800560a <mainTask+0x10aa>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80055ec:	2102      	movs	r1, #2
 80055ee:	4881      	ldr	r0, [pc, #516]	@ (80057f4 <mainTask+0x1294>)
 80055f0:	f002 f926 	bl	8007840 <HAL_GPIO_ReadPin>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d107      	bne.n	800560a <mainTask+0x10aa>
					&&(makineStop==1)) {
 80055fa:	4b80      	ldr	r3, [pc, #512]	@ (80057fc <mainTask+0x129c>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <mainTask+0x10aa>

				kapi1pizzato=1;
 8005602:	4b7f      	ldr	r3, [pc, #508]	@ (8005800 <mainTask+0x12a0>)
 8005604:	2201      	movs	r2, #1
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	e002      	b.n	8005610 <mainTask+0x10b0>
			} else {
				kapi1pizzato=0;
 800560a:	4b7d      	ldr	r3, [pc, #500]	@ (8005800 <mainTask+0x12a0>)
 800560c:	2200      	movs	r2, #0
 800560e:	701a      	strb	r2, [r3, #0]
			}

			// kapi 1 çıkış

			if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005610:	4b75      	ldr	r3, [pc, #468]	@ (80057e8 <mainTask+0x1288>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d107      	bne.n	8005628 <mainTask+0x10c8>
 8005618:	4b79      	ldr	r3, [pc, #484]	@ (8005800 <mainTask+0x12a0>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <mainTask+0x10c8>
 8005620:	4b78      	ldr	r3, [pc, #480]	@ (8005804 <mainTask+0x12a4>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <mainTask+0x10d4>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005628:	2201      	movs	r2, #1
 800562a:	2180      	movs	r1, #128	@ 0x80
 800562c:	4876      	ldr	r0, [pc, #472]	@ (8005808 <mainTask+0x12a8>)
 800562e:	f002 f91e 	bl	800786e <HAL_GPIO_WritePin>
 8005632:	e004      	b.n	800563e <mainTask+0x10de>
			} else {
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005634:	2200      	movs	r2, #0
 8005636:	2180      	movs	r1, #128	@ 0x80
 8005638:	4873      	ldr	r0, [pc, #460]	@ (8005808 <mainTask+0x12a8>)
 800563a:	f002 f918 	bl	800786e <HAL_GPIO_WritePin>

			//kapi2 kontrol

			// kapi 2 prudhome

			if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800563e:	4b73      	ldr	r3, [pc, #460]	@ (800580c <mainTask+0x12ac>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d141      	bne.n	80056ca <mainTask+0x116a>
 8005646:	4b6a      	ldr	r3, [pc, #424]	@ (80057f0 <mainTask+0x1290>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d003      	beq.n	8005656 <mainTask+0x10f6>
 800564e:	4b68      	ldr	r3, [pc, #416]	@ (80057f0 <mainTask+0x1290>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b03      	cmp	r3, #3
 8005654:	d139      	bne.n	80056ca <mainTask+0x116a>
					&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005656:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800565a:	4866      	ldr	r0, [pc, #408]	@ (80057f4 <mainTask+0x1294>)
 800565c:	f002 f8f0 	bl	8007840 <HAL_GPIO_ReadPin>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d103      	bne.n	800566e <mainTask+0x110e>
 8005666:	4b6a      	ldr	r3, [pc, #424]	@ (8005810 <mainTask+0x12b0>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00b      	beq.n	8005686 <mainTask+0x1126>
 800566e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005672:	4868      	ldr	r0, [pc, #416]	@ (8005814 <mainTask+0x12b4>)
 8005674:	f002 f8e4 	bl	8007840 <HAL_GPIO_ReadPin>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d125      	bne.n	80056ca <mainTask+0x116a>
 800567e:	4b64      	ldr	r3, [pc, #400]	@ (8005810 <mainTask+0x12b0>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d121      	bne.n	80056ca <mainTask+0x116a>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005686:	2102      	movs	r1, #2
 8005688:	485a      	ldr	r0, [pc, #360]	@ (80057f4 <mainTask+0x1294>)
 800568a:	f002 f8d9 	bl	8007840 <HAL_GPIO_ReadPin>
 800568e:	4603      	mov	r3, r0
 8005690:	2b01      	cmp	r3, #1
 8005692:	d11a      	bne.n	80056ca <mainTask+0x116a>
					&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005694:	2104      	movs	r1, #4
 8005696:	4857      	ldr	r0, [pc, #348]	@ (80057f4 <mainTask+0x1294>)
 8005698:	f002 f8d2 	bl	8007840 <HAL_GPIO_ReadPin>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d113      	bne.n	80056ca <mainTask+0x116a>
					&&(makineStop==1)
 80056a2:	4b56      	ldr	r3, [pc, #344]	@ (80057fc <mainTask+0x129c>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00f      	beq.n	80056ca <mainTask+0x116a>
					&&(butonKontrol==0)) {
 80056aa:	4b5b      	ldr	r3, [pc, #364]	@ (8005818 <mainTask+0x12b8>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	f083 0301 	eor.w	r3, r3, #1
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d008      	beq.n	80056ca <mainTask+0x116a>

				kapi2prudhome=1;
 80056b8:	4b58      	ldr	r3, [pc, #352]	@ (800581c <mainTask+0x12bc>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	701a      	strb	r2, [r3, #0]
				timer = millis;
 80056be:	4b58      	ldr	r3, [pc, #352]	@ (8005820 <mainTask+0x12c0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a58      	ldr	r2, [pc, #352]	@ (8005824 <mainTask+0x12c4>)
 80056c4:	6013      	str	r3, [r2, #0]
				bekle();
 80056c6:	f7fe f8d7 	bl	8003878 <bekle>
			}

			if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80056ca:	4b55      	ldr	r3, [pc, #340]	@ (8005820 <mainTask+0x12c0>)
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	4b55      	ldr	r3, [pc, #340]	@ (8005824 <mainTask+0x12c4>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	4a54      	ldr	r2, [pc, #336]	@ (8005828 <mainTask+0x12c8>)
 80056d6:	7812      	ldrb	r2, [r2, #0]
 80056d8:	4293      	cmp	r3, r2
 80056da:	d20d      	bcs.n	80056f8 <mainTask+0x1198>
 80056dc:	2102      	movs	r1, #2
 80056de:	4845      	ldr	r0, [pc, #276]	@ (80057f4 <mainTask+0x1294>)
 80056e0:	f002 f8ae 	bl	8007840 <HAL_GPIO_ReadPin>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d006      	beq.n	80056f8 <mainTask+0x1198>
 80056ea:	4b44      	ldr	r3, [pc, #272]	@ (80057fc <mainTask+0x129c>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	f083 0301 	eor.w	r3, r3, #1
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <mainTask+0x119e>
				kapi2prudhome=0;
 80056f8:	4b48      	ldr	r3, [pc, #288]	@ (800581c <mainTask+0x12bc>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	701a      	strb	r2, [r3, #0]
			}

			// kapi 2 buton kontrol

			if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80056fe:	4b43      	ldr	r3, [pc, #268]	@ (800580c <mainTask+0x12ac>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d135      	bne.n	8005772 <mainTask+0x1212>
 8005706:	4b3a      	ldr	r3, [pc, #232]	@ (80057f0 <mainTask+0x1290>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d003      	beq.n	8005716 <mainTask+0x11b6>
 800570e:	4b38      	ldr	r3, [pc, #224]	@ (80057f0 <mainTask+0x1290>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b03      	cmp	r3, #3
 8005714:	d12d      	bne.n	8005772 <mainTask+0x1212>

					&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005716:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800571a:	4836      	ldr	r0, [pc, #216]	@ (80057f4 <mainTask+0x1294>)
 800571c:	f002 f890 	bl	8007840 <HAL_GPIO_ReadPin>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d103      	bne.n	800572e <mainTask+0x11ce>
 8005726:	4b3a      	ldr	r3, [pc, #232]	@ (8005810 <mainTask+0x12b0>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00b      	beq.n	8005746 <mainTask+0x11e6>
 800572e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005732:	4838      	ldr	r0, [pc, #224]	@ (8005814 <mainTask+0x12b4>)
 8005734:	f002 f884 	bl	8007840 <HAL_GPIO_ReadPin>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d119      	bne.n	8005772 <mainTask+0x1212>
 800573e:	4b34      	ldr	r3, [pc, #208]	@ (8005810 <mainTask+0x12b0>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d115      	bne.n	8005772 <mainTask+0x1212>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005746:	2102      	movs	r1, #2
 8005748:	482a      	ldr	r0, [pc, #168]	@ (80057f4 <mainTask+0x1294>)
 800574a:	f002 f879 	bl	8007840 <HAL_GPIO_ReadPin>
 800574e:	4603      	mov	r3, r0
 8005750:	2b01      	cmp	r3, #1
 8005752:	d10e      	bne.n	8005772 <mainTask+0x1212>
					&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005754:	2104      	movs	r1, #4
 8005756:	4827      	ldr	r0, [pc, #156]	@ (80057f4 <mainTask+0x1294>)
 8005758:	f002 f872 	bl	8007840 <HAL_GPIO_ReadPin>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d107      	bne.n	8005772 <mainTask+0x1212>
					&&(makineStop==1)) {
 8005762:	4b26      	ldr	r3, [pc, #152]	@ (80057fc <mainTask+0x129c>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <mainTask+0x1212>

				kapi2butonkontrol=1;
 800576a:	4b30      	ldr	r3, [pc, #192]	@ (800582c <mainTask+0x12cc>)
 800576c:	2201      	movs	r2, #1
 800576e:	701a      	strb	r2, [r3, #0]
 8005770:	e002      	b.n	8005778 <mainTask+0x1218>
			} else {
				kapi2butonkontrol=0;
 8005772:	4b2e      	ldr	r3, [pc, #184]	@ (800582c <mainTask+0x12cc>)
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]
			}

			// kapi 2 pizzato

			if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005778:	4b24      	ldr	r3, [pc, #144]	@ (800580c <mainTask+0x12ac>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b02      	cmp	r3, #2
 800577e:	d11d      	bne.n	80057bc <mainTask+0x125c>
 8005780:	4b1b      	ldr	r3, [pc, #108]	@ (80057f0 <mainTask+0x1290>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d003      	beq.n	8005790 <mainTask+0x1230>
 8005788:	4b19      	ldr	r3, [pc, #100]	@ (80057f0 <mainTask+0x1290>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b03      	cmp	r3, #3
 800578e:	d115      	bne.n	80057bc <mainTask+0x125c>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005790:	2102      	movs	r1, #2
 8005792:	4818      	ldr	r0, [pc, #96]	@ (80057f4 <mainTask+0x1294>)
 8005794:	f002 f854 	bl	8007840 <HAL_GPIO_ReadPin>
 8005798:	4603      	mov	r3, r0
 800579a:	2b01      	cmp	r3, #1
 800579c:	d10e      	bne.n	80057bc <mainTask+0x125c>
					&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800579e:	2104      	movs	r1, #4
 80057a0:	4814      	ldr	r0, [pc, #80]	@ (80057f4 <mainTask+0x1294>)
 80057a2:	f002 f84d 	bl	8007840 <HAL_GPIO_ReadPin>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d107      	bne.n	80057bc <mainTask+0x125c>
					&&(makineStop==1)) {
 80057ac:	4b13      	ldr	r3, [pc, #76]	@ (80057fc <mainTask+0x129c>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <mainTask+0x125c>

				kapi2pizzato=1;
 80057b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005830 <mainTask+0x12d0>)
 80057b6:	2201      	movs	r2, #1
 80057b8:	701a      	strb	r2, [r3, #0]
 80057ba:	e002      	b.n	80057c2 <mainTask+0x1262>
			} else {
				kapi2pizzato=0;
 80057bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005830 <mainTask+0x12d0>)
 80057be:	2200      	movs	r2, #0
 80057c0:	701a      	strb	r2, [r3, #0]
			}

			// kapi 2 çıkış

			if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80057c2:	4b1a      	ldr	r3, [pc, #104]	@ (800582c <mainTask+0x12cc>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d107      	bne.n	80057da <mainTask+0x127a>
 80057ca:	4b19      	ldr	r3, [pc, #100]	@ (8005830 <mainTask+0x12d0>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d103      	bne.n	80057da <mainTask+0x127a>
 80057d2:	4b12      	ldr	r3, [pc, #72]	@ (800581c <mainTask+0x12bc>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d02c      	beq.n	8005834 <mainTask+0x12d4>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80057da:	2201      	movs	r2, #1
 80057dc:	2140      	movs	r1, #64	@ 0x40
 80057de:	480a      	ldr	r0, [pc, #40]	@ (8005808 <mainTask+0x12a8>)
 80057e0:	f002 f845 	bl	800786e <HAL_GPIO_WritePin>
 80057e4:	e02b      	b.n	800583e <mainTask+0x12de>
 80057e6:	bf00      	nop
 80057e8:	20000367 	.word	0x20000367
 80057ec:	2000032d 	.word	0x2000032d
 80057f0:	2000032c 	.word	0x2000032c
 80057f4:	40011000 	.word	0x40011000
 80057f8:	2000032a 	.word	0x2000032a
 80057fc:	20000365 	.word	0x20000365
 8005800:	20000368 	.word	0x20000368
 8005804:	20000366 	.word	0x20000366
 8005808:	40010800 	.word	0x40010800
 800580c:	2000032e 	.word	0x2000032e
 8005810:	20000330 	.word	0x20000330
 8005814:	40010c00 	.word	0x40010c00
 8005818:	20000352 	.word	0x20000352
 800581c:	20000369 	.word	0x20000369
 8005820:	20000300 	.word	0x20000300
 8005824:	20000304 	.word	0x20000304
 8005828:	2000033e 	.word	0x2000033e
 800582c:	2000036a 	.word	0x2000036a
 8005830:	2000036b 	.word	0x2000036b
			} else {
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005834:	2200      	movs	r2, #0
 8005836:	2140      	movs	r1, #64	@ 0x40
 8005838:	4835      	ldr	r0, [pc, #212]	@ (8005910 <mainTask+0x13b0>)
 800583a:	f002 f818 	bl	800786e <HAL_GPIO_WritePin>
			}

			//   kapi tabla kontrol ***

			if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 800583e:	4b35      	ldr	r3, [pc, #212]	@ (8005914 <mainTask+0x13b4>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <mainTask+0x12ee>
 8005846:	4b33      	ldr	r3, [pc, #204]	@ (8005914 <mainTask+0x13b4>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d115      	bne.n	800587a <mainTask+0x131a>
					&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800584e:	2104      	movs	r1, #4
 8005850:	4831      	ldr	r0, [pc, #196]	@ (8005918 <mainTask+0x13b8>)
 8005852:	f001 fff5 	bl	8007840 <HAL_GPIO_ReadPin>
 8005856:	4603      	mov	r3, r0
 8005858:	2b01      	cmp	r3, #1
 800585a:	d003      	beq.n	8005864 <mainTask+0x1304>
 800585c:	4b2f      	ldr	r3, [pc, #188]	@ (800591c <mainTask+0x13bc>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <mainTask+0x131a>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005864:	2102      	movs	r1, #2
 8005866:	482c      	ldr	r0, [pc, #176]	@ (8005918 <mainTask+0x13b8>)
 8005868:	f001 ffea 	bl	8007840 <HAL_GPIO_ReadPin>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d103      	bne.n	800587a <mainTask+0x131a>

				kapiTablaAcKonumKat1=1;
 8005872:	4b2b      	ldr	r3, [pc, #172]	@ (8005920 <mainTask+0x13c0>)
 8005874:	2201      	movs	r2, #1
 8005876:	701a      	strb	r2, [r3, #0]
 8005878:	e002      	b.n	8005880 <mainTask+0x1320>
			} else {
				kapiTablaAcKonumKat1=0;
 800587a:	4b29      	ldr	r3, [pc, #164]	@ (8005920 <mainTask+0x13c0>)
 800587c:	2200      	movs	r2, #0
 800587e:	701a      	strb	r2, [r3, #0]
			}

			if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005880:	4b24      	ldr	r3, [pc, #144]	@ (8005914 <mainTask+0x13b4>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d003      	beq.n	8005890 <mainTask+0x1330>
 8005888:	4b22      	ldr	r3, [pc, #136]	@ (8005914 <mainTask+0x13b4>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d111      	bne.n	80058b4 <mainTask+0x1354>
					&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005890:	2102      	movs	r1, #2
 8005892:	4821      	ldr	r0, [pc, #132]	@ (8005918 <mainTask+0x13b8>)
 8005894:	f001 ffd4 	bl	8007840 <HAL_GPIO_ReadPin>
 8005898:	4603      	mov	r3, r0
 800589a:	2b01      	cmp	r3, #1
 800589c:	d10a      	bne.n	80058b4 <mainTask+0x1354>
					&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 800589e:	2104      	movs	r1, #4
 80058a0:	481d      	ldr	r0, [pc, #116]	@ (8005918 <mainTask+0x13b8>)
 80058a2:	f001 ffcd 	bl	8007840 <HAL_GPIO_ReadPin>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d103      	bne.n	80058b4 <mainTask+0x1354>

				kapiTablaAcKonumKat2=1;
 80058ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005924 <mainTask+0x13c4>)
 80058ae:	2201      	movs	r2, #1
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	e002      	b.n	80058ba <mainTask+0x135a>
			} else {
				kapiTablaAcKonumKat2=0;
 80058b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005924 <mainTask+0x13c4>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	701a      	strb	r2, [r3, #0]
			}

			if(kapiTablaAcKonumKat1==1
 80058ba:	4b19      	ldr	r3, [pc, #100]	@ (8005920 <mainTask+0x13c0>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00f      	beq.n	80058e2 <mainTask+0x1382>
					&& kapiAcTipi==1
 80058c2:	4b19      	ldr	r3, [pc, #100]	@ (8005928 <mainTask+0x13c8>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d10b      	bne.n	80058e2 <mainTask+0x1382>
					&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80058ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80058ce:	4817      	ldr	r0, [pc, #92]	@ (800592c <mainTask+0x13cc>)
 80058d0:	f001 ffb6 	bl	8007840 <HAL_GPIO_ReadPin>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d103      	bne.n	80058e2 <mainTask+0x1382>

				kapiactablaesp1=1;
 80058da:	4b15      	ldr	r3, [pc, #84]	@ (8005930 <mainTask+0x13d0>)
 80058dc:	2201      	movs	r2, #1
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	e002      	b.n	80058e8 <mainTask+0x1388>
			} else {
				kapiactablaesp1=0;
 80058e2:	4b13      	ldr	r3, [pc, #76]	@ (8005930 <mainTask+0x13d0>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	701a      	strb	r2, [r3, #0]
			}

			if(kapiTablaAcKonumKat2==1
 80058e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005924 <mainTask+0x13c4>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d023      	beq.n	8005938 <mainTask+0x13d8>
					&& kapiAcTipi==1
 80058f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005928 <mainTask+0x13c8>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d11f      	bne.n	8005938 <mainTask+0x13d8>
					&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80058f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80058fc:	480b      	ldr	r0, [pc, #44]	@ (800592c <mainTask+0x13cc>)
 80058fe:	f001 ff9f 	bl	8007840 <HAL_GPIO_ReadPin>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d117      	bne.n	8005938 <mainTask+0x13d8>

				kapiactablaesp2=1;
 8005908:	4b0a      	ldr	r3, [pc, #40]	@ (8005934 <mainTask+0x13d4>)
 800590a:	2201      	movs	r2, #1
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	e016      	b.n	800593e <mainTask+0x13de>
 8005910:	40010800 	.word	0x40010800
 8005914:	20000331 	.word	0x20000331
 8005918:	40011000 	.word	0x40011000
 800591c:	2000032a 	.word	0x2000032a
 8005920:	2000036f 	.word	0x2000036f
 8005924:	20000370 	.word	0x20000370
 8005928:	20000330 	.word	0x20000330
 800592c:	40010c00 	.word	0x40010c00
 8005930:	2000037f 	.word	0x2000037f
 8005934:	20000380 	.word	0x20000380
			} else {
				kapiactablaesp2=0;
 8005938:	4b7e      	ldr	r3, [pc, #504]	@ (8005b34 <mainTask+0x15d4>)
 800593a:	2200      	movs	r2, #0
 800593c:	701a      	strb	r2, [r3, #0]
			}

			// tabla kapısı prudhome

			if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800593e:	4b7e      	ldr	r3, [pc, #504]	@ (8005b38 <mainTask+0x15d8>)
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d154      	bne.n	80059f0 <mainTask+0x1490>
 8005946:	4b7d      	ldr	r3, [pc, #500]	@ (8005b3c <mainTask+0x15dc>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d003      	beq.n	8005956 <mainTask+0x13f6>
 800594e:	4b7b      	ldr	r3, [pc, #492]	@ (8005b3c <mainTask+0x15dc>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b03      	cmp	r3, #3
 8005954:	d14c      	bne.n	80059f0 <mainTask+0x1490>
					&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005956:	4b7a      	ldr	r3, [pc, #488]	@ (8005b40 <mainTask+0x15e0>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d103      	bne.n	8005966 <mainTask+0x1406>
 800595e:	4b79      	ldr	r3, [pc, #484]	@ (8005b44 <mainTask+0x15e4>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d044      	beq.n	80059f0 <mainTask+0x1490>
					&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8005966:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800596a:	4877      	ldr	r0, [pc, #476]	@ (8005b48 <mainTask+0x15e8>)
 800596c:	f001 ff68 	bl	8007840 <HAL_GPIO_ReadPin>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d01c      	beq.n	80059b0 <mainTask+0x1450>
							||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8005976:	2180      	movs	r1, #128	@ 0x80
 8005978:	4873      	ldr	r0, [pc, #460]	@ (8005b48 <mainTask+0x15e8>)
 800597a:	f001 ff61 	bl	8007840 <HAL_GPIO_ReadPin>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d106      	bne.n	8005992 <mainTask+0x1432>
							&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005984:	2104      	movs	r1, #4
 8005986:	4870      	ldr	r0, [pc, #448]	@ (8005b48 <mainTask+0x15e8>)
 8005988:	f001 ff5a 	bl	8007840 <HAL_GPIO_ReadPin>
 800598c:	4603      	mov	r3, r0
 800598e:	2b01      	cmp	r3, #1
 8005990:	d00e      	beq.n	80059b0 <mainTask+0x1450>
							||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005992:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005996:	486c      	ldr	r0, [pc, #432]	@ (8005b48 <mainTask+0x15e8>)
 8005998:	f001 ff52 	bl	8007840 <HAL_GPIO_ReadPin>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10a      	bne.n	80059b8 <mainTask+0x1458>
							&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 80059a2:	2102      	movs	r1, #2
 80059a4:	4868      	ldr	r0, [pc, #416]	@ (8005b48 <mainTask+0x15e8>)
 80059a6:	f001 ff4b 	bl	8007840 <HAL_GPIO_ReadPin>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d103      	bne.n	80059b8 <mainTask+0x1458>
					&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80059b0:	4b66      	ldr	r3, [pc, #408]	@ (8005b4c <mainTask+0x15ec>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <mainTask+0x1468>
 80059b8:	4b65      	ldr	r3, [pc, #404]	@ (8005b50 <mainTask+0x15f0>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d103      	bne.n	80059c8 <mainTask+0x1468>
 80059c0:	4b5c      	ldr	r3, [pc, #368]	@ (8005b34 <mainTask+0x15d4>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d013      	beq.n	80059f0 <mainTask+0x1490>
					&&(makineStop==1)
 80059c8:	4b62      	ldr	r3, [pc, #392]	@ (8005b54 <mainTask+0x15f4>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00f      	beq.n	80059f0 <mainTask+0x1490>
					&&(butonKontrol==0)) {
 80059d0:	4b61      	ldr	r3, [pc, #388]	@ (8005b58 <mainTask+0x15f8>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	f083 0301 	eor.w	r3, r3, #1
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d008      	beq.n	80059f0 <mainTask+0x1490>

				kapiTablaprudhome=1;
 80059de:	4b5f      	ldr	r3, [pc, #380]	@ (8005b5c <mainTask+0x15fc>)
 80059e0:	2201      	movs	r2, #1
 80059e2:	701a      	strb	r2, [r3, #0]
				timer = millis;
 80059e4:	4b5e      	ldr	r3, [pc, #376]	@ (8005b60 <mainTask+0x1600>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a5e      	ldr	r2, [pc, #376]	@ (8005b64 <mainTask+0x1604>)
 80059ea:	6013      	str	r3, [r2, #0]
				bekle();
 80059ec:	f7fd ff44 	bl	8003878 <bekle>
			}

			if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80059f0:	4b5b      	ldr	r3, [pc, #364]	@ (8005b60 <mainTask+0x1600>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	4b5b      	ldr	r3, [pc, #364]	@ (8005b64 <mainTask+0x1604>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	4a5b      	ldr	r2, [pc, #364]	@ (8005b68 <mainTask+0x1608>)
 80059fc:	7812      	ldrb	r2, [r2, #0]
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d214      	bcs.n	8005a2c <mainTask+0x14cc>
 8005a02:	4b4f      	ldr	r3, [pc, #316]	@ (8005b40 <mainTask+0x15e0>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	f083 0301 	eor.w	r3, r3, #1
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d006      	beq.n	8005a1e <mainTask+0x14be>
 8005a10:	4b4c      	ldr	r3, [pc, #304]	@ (8005b44 <mainTask+0x15e4>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	f083 0301 	eor.w	r3, r3, #1
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <mainTask+0x14cc>
 8005a1e:	4b4d      	ldr	r3, [pc, #308]	@ (8005b54 <mainTask+0x15f4>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	f083 0301 	eor.w	r3, r3, #1
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <mainTask+0x14d2>
				kapiTablaprudhome=0;
 8005a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8005b5c <mainTask+0x15fc>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	701a      	strb	r2, [r3, #0]
			}

			// tabla kapı buton kontrol

			if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005a32:	4b41      	ldr	r3, [pc, #260]	@ (8005b38 <mainTask+0x15d8>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d148      	bne.n	8005acc <mainTask+0x156c>
 8005a3a:	4b40      	ldr	r3, [pc, #256]	@ (8005b3c <mainTask+0x15dc>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d003      	beq.n	8005a4a <mainTask+0x14ea>
 8005a42:	4b3e      	ldr	r3, [pc, #248]	@ (8005b3c <mainTask+0x15dc>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d140      	bne.n	8005acc <mainTask+0x156c>

					&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8005b40 <mainTask+0x15e0>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d103      	bne.n	8005a5a <mainTask+0x14fa>
 8005a52:	4b3c      	ldr	r3, [pc, #240]	@ (8005b44 <mainTask+0x15e4>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d038      	beq.n	8005acc <mainTask+0x156c>
					&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8005a5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a5e:	483a      	ldr	r0, [pc, #232]	@ (8005b48 <mainTask+0x15e8>)
 8005a60:	f001 feee 	bl	8007840 <HAL_GPIO_ReadPin>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d01c      	beq.n	8005aa4 <mainTask+0x1544>
							||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8005a6a:	2180      	movs	r1, #128	@ 0x80
 8005a6c:	4836      	ldr	r0, [pc, #216]	@ (8005b48 <mainTask+0x15e8>)
 8005a6e:	f001 fee7 	bl	8007840 <HAL_GPIO_ReadPin>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d106      	bne.n	8005a86 <mainTask+0x1526>
							&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005a78:	2104      	movs	r1, #4
 8005a7a:	4833      	ldr	r0, [pc, #204]	@ (8005b48 <mainTask+0x15e8>)
 8005a7c:	f001 fee0 	bl	8007840 <HAL_GPIO_ReadPin>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d00e      	beq.n	8005aa4 <mainTask+0x1544>
							||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005a86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a8a:	482f      	ldr	r0, [pc, #188]	@ (8005b48 <mainTask+0x15e8>)
 8005a8c:	f001 fed8 	bl	8007840 <HAL_GPIO_ReadPin>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <mainTask+0x154c>
							&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005a96:	2102      	movs	r1, #2
 8005a98:	482b      	ldr	r0, [pc, #172]	@ (8005b48 <mainTask+0x15e8>)
 8005a9a:	f001 fed1 	bl	8007840 <HAL_GPIO_ReadPin>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d103      	bne.n	8005aac <mainTask+0x154c>
							&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005aa4:	4b29      	ldr	r3, [pc, #164]	@ (8005b4c <mainTask+0x15ec>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d007      	beq.n	8005abc <mainTask+0x155c>
 8005aac:	4b28      	ldr	r3, [pc, #160]	@ (8005b50 <mainTask+0x15f0>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d103      	bne.n	8005abc <mainTask+0x155c>
 8005ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8005b34 <mainTask+0x15d4>)
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <mainTask+0x156c>
					&&(makineStop==1)) {
 8005abc:	4b25      	ldr	r3, [pc, #148]	@ (8005b54 <mainTask+0x15f4>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <mainTask+0x156c>

				kapiTablabutonkontrol=1;
 8005ac4:	4b29      	ldr	r3, [pc, #164]	@ (8005b6c <mainTask+0x160c>)
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	e002      	b.n	8005ad2 <mainTask+0x1572>
			} else {
				kapiTablabutonkontrol=0;
 8005acc:	4b27      	ldr	r3, [pc, #156]	@ (8005b6c <mainTask+0x160c>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	701a      	strb	r2, [r3, #0]
			}

			// tabla kapı pizzato

			if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005ad2:	4b19      	ldr	r3, [pc, #100]	@ (8005b38 <mainTask+0x15d8>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d117      	bne.n	8005b0a <mainTask+0x15aa>
 8005ada:	4b18      	ldr	r3, [pc, #96]	@ (8005b3c <mainTask+0x15dc>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d003      	beq.n	8005aea <mainTask+0x158a>
 8005ae2:	4b16      	ldr	r3, [pc, #88]	@ (8005b3c <mainTask+0x15dc>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d10f      	bne.n	8005b0a <mainTask+0x15aa>
					&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005aea:	4b15      	ldr	r3, [pc, #84]	@ (8005b40 <mainTask+0x15e0>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d103      	bne.n	8005afa <mainTask+0x159a>
 8005af2:	4b14      	ldr	r3, [pc, #80]	@ (8005b44 <mainTask+0x15e4>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d007      	beq.n	8005b0a <mainTask+0x15aa>
					&&(makineStop==1)) {
 8005afa:	4b16      	ldr	r3, [pc, #88]	@ (8005b54 <mainTask+0x15f4>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <mainTask+0x15aa>

				kapiTablapizzato=1;
 8005b02:	4b1b      	ldr	r3, [pc, #108]	@ (8005b70 <mainTask+0x1610>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	e002      	b.n	8005b10 <mainTask+0x15b0>
			} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
				kapiTablapizzato=0;
 8005b0a:	4b19      	ldr	r3, [pc, #100]	@ (8005b70 <mainTask+0x1610>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	701a      	strb	r2, [r3, #0]
			}

			// kapi Tabla çıkış

			if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005b10:	4b16      	ldr	r3, [pc, #88]	@ (8005b6c <mainTask+0x160c>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d107      	bne.n	8005b28 <mainTask+0x15c8>
 8005b18:	4b10      	ldr	r3, [pc, #64]	@ (8005b5c <mainTask+0x15fc>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d103      	bne.n	8005b28 <mainTask+0x15c8>
 8005b20:	4b13      	ldr	r3, [pc, #76]	@ (8005b70 <mainTask+0x1610>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d027      	beq.n	8005b78 <mainTask+0x1618>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005b28:	2201      	movs	r2, #1
 8005b2a:	2120      	movs	r1, #32
 8005b2c:	4811      	ldr	r0, [pc, #68]	@ (8005b74 <mainTask+0x1614>)
 8005b2e:	f001 fe9e 	bl	800786e <HAL_GPIO_WritePin>
 8005b32:	e026      	b.n	8005b82 <mainTask+0x1622>
 8005b34:	20000380 	.word	0x20000380
 8005b38:	2000032f 	.word	0x2000032f
 8005b3c:	2000032c 	.word	0x2000032c
 8005b40:	2000036f 	.word	0x2000036f
 8005b44:	20000370 	.word	0x20000370
 8005b48:	40011000 	.word	0x40011000
 8005b4c:	20000330 	.word	0x20000330
 8005b50:	2000037f 	.word	0x2000037f
 8005b54:	20000365 	.word	0x20000365
 8005b58:	20000352 	.word	0x20000352
 8005b5c:	2000036c 	.word	0x2000036c
 8005b60:	20000300 	.word	0x20000300
 8005b64:	20000304 	.word	0x20000304
 8005b68:	2000033f 	.word	0x2000033f
 8005b6c:	2000036d 	.word	0x2000036d
 8005b70:	2000036e 	.word	0x2000036e
 8005b74:	40010800 	.word	0x40010800
			} else {
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2120      	movs	r1, #32
 8005b7c:	4881      	ldr	r0, [pc, #516]	@ (8005d84 <mainTask+0x1824>)
 8005b7e:	f001 fe76 	bl	800786e <HAL_GPIO_WritePin>
			}

			/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

			if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005b82:	4b81      	ldr	r3, [pc, #516]	@ (8005d88 <mainTask+0x1828>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00e      	beq.n	8005ba8 <mainTask+0x1648>
 8005b8a:	2102      	movs	r1, #2
 8005b8c:	487f      	ldr	r0, [pc, #508]	@ (8005d8c <mainTask+0x182c>)
 8005b8e:	f001 fe57 	bl	8007840 <HAL_GPIO_ReadPin>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d107      	bne.n	8005ba8 <mainTask+0x1648>
 8005b98:	4b7d      	ldr	r3, [pc, #500]	@ (8005d90 <mainTask+0x1830>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d103      	bne.n	8005ba8 <mainTask+0x1648>
 8005ba0:	4b7c      	ldr	r3, [pc, #496]	@ (8005d94 <mainTask+0x1834>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d112      	bne.n	8005bce <mainTask+0x166e>
					||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005ba8:	4b7b      	ldr	r3, [pc, #492]	@ (8005d98 <mainTask+0x1838>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d066      	beq.n	8005c7e <mainTask+0x171e>
 8005bb0:	2104      	movs	r1, #4
 8005bb2:	4876      	ldr	r0, [pc, #472]	@ (8005d8c <mainTask+0x182c>)
 8005bb4:	f001 fe44 	bl	8007840 <HAL_GPIO_ReadPin>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d15f      	bne.n	8005c7e <mainTask+0x171e>
 8005bbe:	4b74      	ldr	r3, [pc, #464]	@ (8005d90 <mainTask+0x1830>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d05b      	beq.n	8005c7e <mainTask+0x171e>
 8005bc6:	4b73      	ldr	r3, [pc, #460]	@ (8005d94 <mainTask+0x1834>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d057      	beq.n	8005c7e <mainTask+0x171e>



				calismaSayisi1=calismaSayisi1+1;
 8005bce:	4b73      	ldr	r3, [pc, #460]	@ (8005d9c <mainTask+0x183c>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	4b71      	ldr	r3, [pc, #452]	@ (8005d9c <mainTask+0x183c>)
 8005bd8:	701a      	strb	r2, [r3, #0]
				if(calismaSayisi1>9) {
 8005bda:	4b70      	ldr	r3, [pc, #448]	@ (8005d9c <mainTask+0x183c>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b09      	cmp	r3, #9
 8005be0:	d908      	bls.n	8005bf4 <mainTask+0x1694>
				  	calismaSayisi1=0;
 8005be2:	4b6e      	ldr	r3, [pc, #440]	@ (8005d9c <mainTask+0x183c>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	701a      	strb	r2, [r3, #0]
				  	calismaSayisi10=calismaSayisi10+1;
 8005be8:	4b6d      	ldr	r3, [pc, #436]	@ (8005da0 <mainTask+0x1840>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	3301      	adds	r3, #1
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	4b6b      	ldr	r3, [pc, #428]	@ (8005da0 <mainTask+0x1840>)
 8005bf2:	701a      	strb	r2, [r3, #0]
				}
				if(calismaSayisi10>9) {
 8005bf4:	4b6a      	ldr	r3, [pc, #424]	@ (8005da0 <mainTask+0x1840>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b09      	cmp	r3, #9
 8005bfa:	d908      	bls.n	8005c0e <mainTask+0x16ae>
				  	calismaSayisi10=0;
 8005bfc:	4b68      	ldr	r3, [pc, #416]	@ (8005da0 <mainTask+0x1840>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	701a      	strb	r2, [r3, #0]
				  	calismaSayisi100=calismaSayisi100+1;
 8005c02:	4b68      	ldr	r3, [pc, #416]	@ (8005da4 <mainTask+0x1844>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	3301      	adds	r3, #1
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	4b66      	ldr	r3, [pc, #408]	@ (8005da4 <mainTask+0x1844>)
 8005c0c:	701a      	strb	r2, [r3, #0]
				}
				if(calismaSayisi100>9) {
 8005c0e:	4b65      	ldr	r3, [pc, #404]	@ (8005da4 <mainTask+0x1844>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b09      	cmp	r3, #9
 8005c14:	d908      	bls.n	8005c28 <mainTask+0x16c8>
				  	calismaSayisi100=0;
 8005c16:	4b63      	ldr	r3, [pc, #396]	@ (8005da4 <mainTask+0x1844>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	701a      	strb	r2, [r3, #0]
				  	calismaSayisi1000=calismaSayisi1000+1;
 8005c1c:	4b62      	ldr	r3, [pc, #392]	@ (8005da8 <mainTask+0x1848>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	3301      	adds	r3, #1
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	4b60      	ldr	r3, [pc, #384]	@ (8005da8 <mainTask+0x1848>)
 8005c26:	701a      	strb	r2, [r3, #0]
				}
				if(calismaSayisi1000>9) {
 8005c28:	4b5f      	ldr	r3, [pc, #380]	@ (8005da8 <mainTask+0x1848>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b09      	cmp	r3, #9
 8005c2e:	d908      	bls.n	8005c42 <mainTask+0x16e2>
				  	calismaSayisi1000=0;
 8005c30:	4b5d      	ldr	r3, [pc, #372]	@ (8005da8 <mainTask+0x1848>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	701a      	strb	r2, [r3, #0]
				  	calismaSayisi10000=calismaSayisi10000+1;
 8005c36:	4b5d      	ldr	r3, [pc, #372]	@ (8005dac <mainTask+0x184c>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	4b5b      	ldr	r3, [pc, #364]	@ (8005dac <mainTask+0x184c>)
 8005c40:	701a      	strb	r2, [r3, #0]
				}
				eepromData[32]=calismaSayisi10000;
 8005c42:	4b5a      	ldr	r3, [pc, #360]	@ (8005dac <mainTask+0x184c>)
 8005c44:	781a      	ldrb	r2, [r3, #0]
 8005c46:	4b5a      	ldr	r3, [pc, #360]	@ (8005db0 <mainTask+0x1850>)
 8005c48:	f883 2020 	strb.w	r2, [r3, #32]
				eepromData[31]=calismaSayisi1000;
 8005c4c:	4b56      	ldr	r3, [pc, #344]	@ (8005da8 <mainTask+0x1848>)
 8005c4e:	781a      	ldrb	r2, [r3, #0]
 8005c50:	4b57      	ldr	r3, [pc, #348]	@ (8005db0 <mainTask+0x1850>)
 8005c52:	77da      	strb	r2, [r3, #31]
				eepromData[30]=calismaSayisi100;
 8005c54:	4b53      	ldr	r3, [pc, #332]	@ (8005da4 <mainTask+0x1844>)
 8005c56:	781a      	ldrb	r2, [r3, #0]
 8005c58:	4b55      	ldr	r3, [pc, #340]	@ (8005db0 <mainTask+0x1850>)
 8005c5a:	779a      	strb	r2, [r3, #30]
				eepromData[29]=calismaSayisi10;
 8005c5c:	4b50      	ldr	r3, [pc, #320]	@ (8005da0 <mainTask+0x1840>)
 8005c5e:	781a      	ldrb	r2, [r3, #0]
 8005c60:	4b53      	ldr	r3, [pc, #332]	@ (8005db0 <mainTask+0x1850>)
 8005c62:	775a      	strb	r2, [r3, #29]
				eepromData[28]=calismaSayisi1;
 8005c64:	4b4d      	ldr	r3, [pc, #308]	@ (8005d9c <mainTask+0x183c>)
 8005c66:	781a      	ldrb	r2, [r3, #0]
 8005c68:	4b51      	ldr	r3, [pc, #324]	@ (8005db0 <mainTask+0x1850>)
 8005c6a:	771a      	strb	r2, [r3, #28]

				hafizaYaz=1;
 8005c6c:	4b51      	ldr	r3, [pc, #324]	@ (8005db4 <mainTask+0x1854>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	701a      	strb	r2, [r3, #0]

				CalismaSayisiYukari=0;
 8005c72:	4b45      	ldr	r3, [pc, #276]	@ (8005d88 <mainTask+0x1828>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	701a      	strb	r2, [r3, #0]
				CalismaSayisiAsagi=0;
 8005c78:	4b47      	ldr	r3, [pc, #284]	@ (8005d98 <mainTask+0x1838>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	701a      	strb	r2, [r3, #0]
			}

			/******************************************* HATA BASLIYOR *******************************************/

			/************************************ ACİL STOP HATA BASLANGICI **************************************************/
			if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005c7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005c82:	484d      	ldr	r0, [pc, #308]	@ (8005db8 <mainTask+0x1858>)
 8005c84:	f001 fddc 	bl	8007840 <HAL_GPIO_ReadPin>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d016      	beq.n	8005cbc <mainTask+0x175c>
				  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005c8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005c92:	4849      	ldr	r0, [pc, #292]	@ (8005db8 <mainTask+0x1858>)
 8005c94:	f001 fdd4 	bl	8007840 <HAL_GPIO_ReadPin>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00e      	beq.n	8005cbc <mainTask+0x175c>
				  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005c9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ca2:	4845      	ldr	r0, [pc, #276]	@ (8005db8 <mainTask+0x1858>)
 8005ca4:	f001 fdcc 	bl	8007840 <HAL_GPIO_ReadPin>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d006      	beq.n	8005cbc <mainTask+0x175c>
				  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005cae:	2140      	movs	r1, #64	@ 0x40
 8005cb0:	4836      	ldr	r0, [pc, #216]	@ (8005d8c <mainTask+0x182c>)
 8005cb2:	f001 fdc5 	bl	8007840 <HAL_GPIO_ReadPin>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d103      	bne.n	8005cc4 <mainTask+0x1764>

				startBasili=1;
 8005cbc:	4b3f      	ldr	r3, [pc, #252]	@ (8005dbc <mainTask+0x185c>)
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	701a      	strb	r2, [r3, #0]
 8005cc2:	e002      	b.n	8005cca <mainTask+0x176a>
			} else {
				startBasili=0;
 8005cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8005dbc <mainTask+0x185c>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]
			}


			if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005cca:	4b3c      	ldr	r3, [pc, #240]	@ (8005dbc <mainTask+0x185c>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d014      	beq.n	8005cfc <mainTask+0x179c>
 8005cd2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005cd6:	4838      	ldr	r0, [pc, #224]	@ (8005db8 <mainTask+0x1858>)
 8005cd8:	f001 fdb2 	bl	8007840 <HAL_GPIO_ReadPin>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d10c      	bne.n	8005cfc <mainTask+0x179c>

				hataVar=1;
 8005ce2:	4b37      	ldr	r3, [pc, #220]	@ (8005dc0 <mainTask+0x1860>)
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	701a      	strb	r2, [r3, #0]
				hataKoduLcdGoster(1);
 8005ce8:	2001      	movs	r0, #1
 8005cea:	f7fd feb5 	bl	8003a58 <hataKoduLcdGoster>
				hata2EEPROM(1);
 8005cee:	2001      	movs	r0, #1
 8005cf0:	f7fe fa2e 	bl	8004150 <hata2EEPROM>
				acilstophatasi=1;
 8005cf4:	4b33      	ldr	r3, [pc, #204]	@ (8005dc4 <mainTask+0x1864>)
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	701a      	strb	r2, [r3, #0]
 8005cfa:	e018      	b.n	8005d2e <mainTask+0x17ce>
			} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005cfc:	4b31      	ldr	r3, [pc, #196]	@ (8005dc4 <mainTask+0x1864>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d014      	beq.n	8005d2e <mainTask+0x17ce>
 8005d04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005d08:	482b      	ldr	r0, [pc, #172]	@ (8005db8 <mainTask+0x1858>)
 8005d0a:	f001 fd99 	bl	8007840 <HAL_GPIO_ReadPin>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10c      	bne.n	8005d2e <mainTask+0x17ce>
 8005d14:	4b29      	ldr	r3, [pc, #164]	@ (8005dbc <mainTask+0x185c>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	f083 0301 	eor.w	r3, r3, #1
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d005      	beq.n	8005d2e <mainTask+0x17ce>
				acilstophatasi=0;
 8005d22:	4b28      	ldr	r3, [pc, #160]	@ (8005dc4 <mainTask+0x1864>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	701a      	strb	r2, [r3, #0]
				lcdUpdate(1);
 8005d28:	2001      	movs	r0, #1
 8005d2a:	f7fd fe41 	bl	80039b0 <lcdUpdate>
			}

			/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

			if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 8005d2e:	4b26      	ldr	r3, [pc, #152]	@ (8005dc8 <mainTask+0x1868>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	f083 0301 	eor.w	r3, r3, #1
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d04d      	beq.n	8005dd8 <mainTask+0x1878>
 8005d3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005d40:	481d      	ldr	r0, [pc, #116]	@ (8005db8 <mainTask+0x1858>)
 8005d42:	f001 fd7d 	bl	8007840 <HAL_GPIO_ReadPin>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <mainTask+0x17f4>
 8005d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8005dcc <mainTask+0x186c>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d041      	beq.n	8005dd8 <mainTask+0x1878>
 8005d54:	4b1e      	ldr	r3, [pc, #120]	@ (8005dd0 <mainTask+0x1870>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d13d      	bne.n	8005dd8 <mainTask+0x1878>
 8005d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd4 <mainTask+0x1874>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	f083 0301 	eor.w	r3, r3, #1
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d036      	beq.n	8005dd8 <mainTask+0x1878>
				hataVar=1;
 8005d6a:	4b15      	ldr	r3, [pc, #84]	@ (8005dc0 <mainTask+0x1860>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	701a      	strb	r2, [r3, #0]
				hataKoduLcdGoster(2);
 8005d70:	2002      	movs	r0, #2
 8005d72:	f7fd fe71 	bl	8003a58 <hataKoduLcdGoster>
				hata2EEPROM(2);
 8005d76:	2002      	movs	r0, #2
 8005d78:	f7fe f9ea 	bl	8004150 <hata2EEPROM>
				emniyetCercevesihatasi=1;
 8005d7c:	4b15      	ldr	r3, [pc, #84]	@ (8005dd4 <mainTask+0x1874>)
 8005d7e:	2201      	movs	r2, #1
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	e03e      	b.n	8005e02 <mainTask+0x18a2>
 8005d84:	40010800 	.word	0x40010800
 8005d88:	20000362 	.word	0x20000362
 8005d8c:	40011000 	.word	0x40011000
 8005d90:	2000032a 	.word	0x2000032a
 8005d94:	20000365 	.word	0x20000365
 8005d98:	20000363 	.word	0x20000363
 8005d9c:	20000321 	.word	0x20000321
 8005da0:	20000322 	.word	0x20000322
 8005da4:	20000031 	.word	0x20000031
 8005da8:	20000032 	.word	0x20000032
 8005dac:	20000323 	.word	0x20000323
 8005db0:	200002b8 	.word	0x200002b8
 8005db4:	2000034f 	.word	0x2000034f
 8005db8:	40010c00 	.word	0x40010c00
 8005dbc:	20000371 	.word	0x20000371
 8005dc0:	20000378 	.word	0x20000378
 8005dc4:	20000373 	.word	0x20000373
 8005dc8:	2000037a 	.word	0x2000037a
 8005dcc:	20000384 	.word	0x20000384
 8005dd0:	20000328 	.word	0x20000328
 8005dd4:	20000374 	.word	0x20000374
			} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005dd8:	4b65      	ldr	r3, [pc, #404]	@ (8005f70 <mainTask+0x1a10>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d010      	beq.n	8005e02 <mainTask+0x18a2>
 8005de0:	4b64      	ldr	r3, [pc, #400]	@ (8005f74 <mainTask+0x1a14>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00c      	beq.n	8005e02 <mainTask+0x18a2>
 8005de8:	4b63      	ldr	r3, [pc, #396]	@ (8005f78 <mainTask+0x1a18>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d108      	bne.n	8005e02 <mainTask+0x18a2>
				emniyetCercevesihatasi=0;
 8005df0:	4b5f      	ldr	r3, [pc, #380]	@ (8005f70 <mainTask+0x1a10>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	701a      	strb	r2, [r3, #0]
				cercevesasagicalisma=0;
 8005df6:	4b61      	ldr	r3, [pc, #388]	@ (8005f7c <mainTask+0x1a1c>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	701a      	strb	r2, [r3, #0]
				lcdUpdate(2);
 8005dfc:	2002      	movs	r0, #2
 8005dfe:	f7fd fdd7 	bl	80039b0 <lcdUpdate>
			}

			/************************************ BASINC ASIRI YUK HATASI **************************************************/

			if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 8005e02:	4b5f      	ldr	r3, [pc, #380]	@ (8005f80 <mainTask+0x1a20>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d123      	bne.n	8005e52 <mainTask+0x18f2>
 8005e0a:	4b5e      	ldr	r3, [pc, #376]	@ (8005f84 <mainTask+0x1a24>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d11f      	bne.n	8005e52 <mainTask+0x18f2>
 8005e12:	4b5d      	ldr	r3, [pc, #372]	@ (8005f88 <mainTask+0x1a28>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d01b      	beq.n	8005e52 <mainTask+0x18f2>
 8005e1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e1e:	485b      	ldr	r0, [pc, #364]	@ (8005f8c <mainTask+0x1a2c>)
 8005e20:	f001 fd0e 	bl	8007840 <HAL_GPIO_ReadPin>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d113      	bne.n	8005e52 <mainTask+0x18f2>
 8005e2a:	4b59      	ldr	r3, [pc, #356]	@ (8005f90 <mainTask+0x1a30>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	f083 0301 	eor.w	r3, r3, #1
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00c      	beq.n	8005e52 <mainTask+0x18f2>
				hataVar=1;
 8005e38:	4b56      	ldr	r3, [pc, #344]	@ (8005f94 <mainTask+0x1a34>)
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	701a      	strb	r2, [r3, #0]
				hataKoduLcdGoster(3);
 8005e3e:	2003      	movs	r0, #3
 8005e40:	f7fd fe0a 	bl	8003a58 <hataKoduLcdGoster>
				hata2EEPROM(3);
 8005e44:	2003      	movs	r0, #3
 8005e46:	f7fe f983 	bl	8004150 <hata2EEPROM>
				basinchatasi=1;
 8005e4a:	4b51      	ldr	r3, [pc, #324]	@ (8005f90 <mainTask+0x1a30>)
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	701a      	strb	r2, [r3, #0]
 8005e50:	e015      	b.n	8005e7e <mainTask+0x191e>
			} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005e52:	4b4f      	ldr	r3, [pc, #316]	@ (8005f90 <mainTask+0x1a30>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d011      	beq.n	8005e7e <mainTask+0x191e>
 8005e5a:	4b49      	ldr	r3, [pc, #292]	@ (8005f80 <mainTask+0x1a20>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d10d      	bne.n	8005e7e <mainTask+0x191e>
 8005e62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005e66:	484c      	ldr	r0, [pc, #304]	@ (8005f98 <mainTask+0x1a38>)
 8005e68:	f001 fcea 	bl	8007840 <HAL_GPIO_ReadPin>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d105      	bne.n	8005e7e <mainTask+0x191e>
				basinchatasi=0;
 8005e72:	4b47      	ldr	r3, [pc, #284]	@ (8005f90 <mainTask+0x1a30>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	701a      	strb	r2, [r3, #0]
				lcdUpdate(3);
 8005e78:	2003      	movs	r0, #3
 8005e7a:	f7fd fd99 	bl	80039b0 <lcdUpdate>
			}

			/************************************ KAPI SİVİÇ HATASI **************************************************/
			if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8005e7e:	4b47      	ldr	r3, [pc, #284]	@ (8005f9c <mainTask+0x1a3c>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d103      	bne.n	8005e8e <mainTask+0x192e>
 8005e86:	4b46      	ldr	r3, [pc, #280]	@ (8005fa0 <mainTask+0x1a40>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d023      	beq.n	8005ed6 <mainTask+0x1976>
 8005e8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e92:	4844      	ldr	r0, [pc, #272]	@ (8005fa4 <mainTask+0x1a44>)
 8005e94:	f001 fcd4 	bl	8007840 <HAL_GPIO_ReadPin>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d11b      	bne.n	8005ed6 <mainTask+0x1976>
 8005e9e:	4b42      	ldr	r3, [pc, #264]	@ (8005fa8 <mainTask+0x1a48>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d003      	beq.n	8005eae <mainTask+0x194e>
 8005ea6:	4b40      	ldr	r3, [pc, #256]	@ (8005fa8 <mainTask+0x1a48>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d113      	bne.n	8005ed6 <mainTask+0x1976>
 8005eae:	4b3f      	ldr	r3, [pc, #252]	@ (8005fac <mainTask+0x1a4c>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	f083 0301 	eor.w	r3, r3, #1
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00c      	beq.n	8005ed6 <mainTask+0x1976>
				hataVar=1;
 8005ebc:	4b35      	ldr	r3, [pc, #212]	@ (8005f94 <mainTask+0x1a34>)
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	701a      	strb	r2, [r3, #0]
				hataKoduLcdGoster(4);
 8005ec2:	2004      	movs	r0, #4
 8005ec4:	f7fd fdc8 	bl	8003a58 <hataKoduLcdGoster>
				hata2EEPROM(4);
 8005ec8:	2004      	movs	r0, #4
 8005eca:	f7fe f941 	bl	8004150 <hata2EEPROM>
				katkapisivicihatasi=1;
 8005ece:	4b37      	ldr	r3, [pc, #220]	@ (8005fac <mainTask+0x1a4c>)
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	701a      	strb	r2, [r3, #0]
 8005ed4:	e01f      	b.n	8005f16 <mainTask+0x19b6>
			} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005ed6:	4b35      	ldr	r3, [pc, #212]	@ (8005fac <mainTask+0x1a4c>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d01b      	beq.n	8005f16 <mainTask+0x19b6>
 8005ede:	4b34      	ldr	r3, [pc, #208]	@ (8005fb0 <mainTask+0x1a50>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d017      	beq.n	8005f16 <mainTask+0x19b6>
 8005ee6:	4b2d      	ldr	r3, [pc, #180]	@ (8005f9c <mainTask+0x1a3c>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	f083 0301 	eor.w	r3, r3, #1
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d010      	beq.n	8005f16 <mainTask+0x19b6>
 8005ef4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ef8:	482a      	ldr	r0, [pc, #168]	@ (8005fa4 <mainTask+0x1a44>)
 8005efa:	f001 fca1 	bl	8007840 <HAL_GPIO_ReadPin>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d108      	bne.n	8005f16 <mainTask+0x19b6>

				katkapisivicihatasi=0;
 8005f04:	4b29      	ldr	r3, [pc, #164]	@ (8005fac <mainTask+0x1a4c>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	701a      	strb	r2, [r3, #0]
				HataMakineCalisiyorkapi=0;
 8005f0a:	4b25      	ldr	r3, [pc, #148]	@ (8005fa0 <mainTask+0x1a40>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	701a      	strb	r2, [r3, #0]
				lcdUpdate(4);
 8005f10:	2004      	movs	r0, #4
 8005f12:	f7fd fd4d 	bl	80039b0 <lcdUpdate>
			}

			/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

			if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8005f16:	4b21      	ldr	r3, [pc, #132]	@ (8005f9c <mainTask+0x1a3c>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d103      	bne.n	8005f26 <mainTask+0x19c6>
 8005f1e:	4b25      	ldr	r3, [pc, #148]	@ (8005fb4 <mainTask+0x1a54>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d04a      	beq.n	8005fbc <mainTask+0x1a5c>
 8005f26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005f2a:	481e      	ldr	r0, [pc, #120]	@ (8005fa4 <mainTask+0x1a44>)
 8005f2c:	f001 fc88 	bl	8007840 <HAL_GPIO_ReadPin>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d142      	bne.n	8005fbc <mainTask+0x1a5c>
 8005f36:	4b1c      	ldr	r3, [pc, #112]	@ (8005fa8 <mainTask+0x1a48>)
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d003      	beq.n	8005f46 <mainTask+0x19e6>
 8005f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005fa8 <mainTask+0x1a48>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d13a      	bne.n	8005fbc <mainTask+0x1a5c>
 8005f46:	4b1c      	ldr	r3, [pc, #112]	@ (8005fb8 <mainTask+0x1a58>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	f083 0301 	eor.w	r3, r3, #1
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d033      	beq.n	8005fbc <mainTask+0x1a5c>

				hataVar=1;
 8005f54:	4b0f      	ldr	r3, [pc, #60]	@ (8005f94 <mainTask+0x1a34>)
 8005f56:	2201      	movs	r2, #1
 8005f58:	701a      	strb	r2, [r3, #0]
				hataKoduLcdGoster(5);
 8005f5a:	2005      	movs	r0, #5
 8005f5c:	f7fd fd7c 	bl	8003a58 <hataKoduLcdGoster>
				hata2EEPROM(5);
 8005f60:	2005      	movs	r0, #5
 8005f62:	f7fe f8f5 	bl	8004150 <hata2EEPROM>
				tablakapisivicihatasi=1;
 8005f66:	4b14      	ldr	r3, [pc, #80]	@ (8005fb8 <mainTask+0x1a58>)
 8005f68:	2201      	movs	r2, #1
 8005f6a:	701a      	strb	r2, [r3, #0]
 8005f6c:	e04a      	b.n	8006004 <mainTask+0x1aa4>
 8005f6e:	bf00      	nop
 8005f70:	20000374 	.word	0x20000374
 8005f74:	2000037a 	.word	0x2000037a
 8005f78:	2000035b 	.word	0x2000035b
 8005f7c:	20000384 	.word	0x20000384
 8005f80:	20000327 	.word	0x20000327
 8005f84:	2000032b 	.word	0x2000032b
 8005f88:	20000377 	.word	0x20000377
 8005f8c:	40011000 	.word	0x40011000
 8005f90:	20000381 	.word	0x20000381
 8005f94:	20000378 	.word	0x20000378
 8005f98:	40010c00 	.word	0x40010c00
 8005f9c:	20000371 	.word	0x20000371
 8005fa0:	20000385 	.word	0x20000385
 8005fa4:	40010800 	.word	0x40010800
 8005fa8:	2000032c 	.word	0x2000032c
 8005fac:	20000382 	.word	0x20000382
 8005fb0:	20000365 	.word	0x20000365
 8005fb4:	20000386 	.word	0x20000386
 8005fb8:	20000383 	.word	0x20000383
			} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005fbc:	4b92      	ldr	r3, [pc, #584]	@ (8006208 <mainTask+0x1ca8>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01f      	beq.n	8006004 <mainTask+0x1aa4>
 8005fc4:	4b91      	ldr	r3, [pc, #580]	@ (800620c <mainTask+0x1cac>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01b      	beq.n	8006004 <mainTask+0x1aa4>
 8005fcc:	4b90      	ldr	r3, [pc, #576]	@ (8006210 <mainTask+0x1cb0>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	f083 0301 	eor.w	r3, r3, #1
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d014      	beq.n	8006004 <mainTask+0x1aa4>
 8005fda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005fde:	488d      	ldr	r0, [pc, #564]	@ (8006214 <mainTask+0x1cb4>)
 8005fe0:	f001 fc2e 	bl	8007840 <HAL_GPIO_ReadPin>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10c      	bne.n	8006004 <mainTask+0x1aa4>
 8005fea:	4b88      	ldr	r3, [pc, #544]	@ (800620c <mainTask+0x1cac>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d008      	beq.n	8006004 <mainTask+0x1aa4>
				tablakapisivicihatasi=0;
 8005ff2:	4b85      	ldr	r3, [pc, #532]	@ (8006208 <mainTask+0x1ca8>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	701a      	strb	r2, [r3, #0]
				HataMakineCalisiyortabla=0;
 8005ff8:	4b87      	ldr	r3, [pc, #540]	@ (8006218 <mainTask+0x1cb8>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	701a      	strb	r2, [r3, #0]
				lcdUpdate(5);
 8005ffe:	2005      	movs	r0, #5
 8006000:	f7fd fcd6 	bl	80039b0 <lcdUpdate>
			}

			/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

			if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8006004:	4b85      	ldr	r3, [pc, #532]	@ (800621c <mainTask+0x1cbc>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d107      	bne.n	800601c <mainTask+0x1abc>
 800600c:	4b84      	ldr	r3, [pc, #528]	@ (8006220 <mainTask+0x1cc0>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d103      	bne.n	800601c <mainTask+0x1abc>
 8006014:	4b83      	ldr	r3, [pc, #524]	@ (8006224 <mainTask+0x1cc4>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01b      	beq.n	8006054 <mainTask+0x1af4>
 800601c:	4b82      	ldr	r3, [pc, #520]	@ (8006228 <mainTask+0x1cc8>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	f083 0301 	eor.w	r3, r3, #1
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d014      	beq.n	8006054 <mainTask+0x1af4>
			    if(millis-timer4>=makineCalismaTmr) {
 800602a:	4b80      	ldr	r3, [pc, #512]	@ (800622c <mainTask+0x1ccc>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	4b80      	ldr	r3, [pc, #512]	@ (8006230 <mainTask+0x1cd0>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	4a7f      	ldr	r2, [pc, #508]	@ (8006234 <mainTask+0x1cd4>)
 8006036:	7812      	ldrb	r2, [r2, #0]
 8006038:	4293      	cmp	r3, r2
 800603a:	d30b      	bcc.n	8006054 <mainTask+0x1af4>
				  	hataVar=1;
 800603c:	4b7e      	ldr	r3, [pc, #504]	@ (8006238 <mainTask+0x1cd8>)
 800603e:	2201      	movs	r2, #1
 8006040:	701a      	strb	r2, [r3, #0]
				  	hataKoduLcdGoster(6);
 8006042:	2006      	movs	r0, #6
 8006044:	f7fd fd08 	bl	8003a58 <hataKoduLcdGoster>
				  	hata2EEPROM(6);
 8006048:	2006      	movs	r0, #6
 800604a:	f7fe f881 	bl	8004150 <hata2EEPROM>
				  	maksimumcalismahatasi=1;
 800604e:	4b76      	ldr	r3, [pc, #472]	@ (8006228 <mainTask+0x1cc8>)
 8006050:	2201      	movs	r2, #1
 8006052:	701a      	strb	r2, [r3, #0]
				  }
			}

			if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006054:	4b74      	ldr	r3, [pc, #464]	@ (8006228 <mainTask+0x1cc8>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d013      	beq.n	8006084 <mainTask+0x1b24>
 800605c:	2108      	movs	r1, #8
 800605e:	486d      	ldr	r0, [pc, #436]	@ (8006214 <mainTask+0x1cb4>)
 8006060:	f001 fbee 	bl	8007840 <HAL_GPIO_ReadPin>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00c      	beq.n	8006084 <mainTask+0x1b24>
 800606a:	4b69      	ldr	r3, [pc, #420]	@ (8006210 <mainTask+0x1cb0>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	f083 0301 	eor.w	r3, r3, #1
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d005      	beq.n	8006084 <mainTask+0x1b24>
				maksimumcalismahatasi=0;
 8006078:	4b6b      	ldr	r3, [pc, #428]	@ (8006228 <mainTask+0x1cc8>)
 800607a:	2200      	movs	r2, #0
 800607c:	701a      	strb	r2, [r3, #0]
				lcdUpdate(6);
 800607e:	2006      	movs	r0, #6
 8006080:	f7fd fc96 	bl	80039b0 <lcdUpdate>
			}

			if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006084:	4b6d      	ldr	r3, [pc, #436]	@ (800623c <mainTask+0x1cdc>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d00b      	beq.n	80060a4 <mainTask+0x1b44>
 800608c:	4b64      	ldr	r3, [pc, #400]	@ (8006220 <mainTask+0x1cc0>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d007      	beq.n	80060a4 <mainTask+0x1b44>
 8006094:	4b6a      	ldr	r3, [pc, #424]	@ (8006240 <mainTask+0x1ce0>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d103      	bne.n	80060a4 <mainTask+0x1b44>
 800609c:	4b61      	ldr	r3, [pc, #388]	@ (8006224 <mainTask+0x1cc4>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d009      	beq.n	80060b8 <mainTask+0x1b58>
				makineCalisiyor=0;
 80060a4:	4b67      	ldr	r3, [pc, #412]	@ (8006244 <mainTask+0x1ce4>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]
				HataMakineCalisiyorkapi=1;
 80060aa:	4b67      	ldr	r3, [pc, #412]	@ (8006248 <mainTask+0x1ce8>)
 80060ac:	2201      	movs	r2, #1
 80060ae:	701a      	strb	r2, [r3, #0]
				HataMakineCalisiyortabla=1;
 80060b0:	4b59      	ldr	r3, [pc, #356]	@ (8006218 <mainTask+0x1cb8>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	e006      	b.n	80060c6 <mainTask+0x1b66>
			} else {
				makineCalisiyor=1;
 80060b8:	4b62      	ldr	r3, [pc, #392]	@ (8006244 <mainTask+0x1ce4>)
 80060ba:	2201      	movs	r2, #1
 80060bc:	701a      	strb	r2, [r3, #0]
				timer4=millis;
 80060be:	4b5b      	ldr	r3, [pc, #364]	@ (800622c <mainTask+0x1ccc>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a5b      	ldr	r2, [pc, #364]	@ (8006230 <mainTask+0x1cd0>)
 80060c4:	6013      	str	r3, [r2, #0]
			}

			/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
			if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80060c6:	4b5c      	ldr	r3, [pc, #368]	@ (8006238 <mainTask+0x1cd8>)
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d02f      	beq.n	800612e <mainTask+0x1bce>
 80060ce:	4b5f      	ldr	r3, [pc, #380]	@ (800624c <mainTask+0x1cec>)
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	f083 0301 	eor.w	r3, r3, #1
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d028      	beq.n	800612e <mainTask+0x1bce>
 80060dc:	4b5c      	ldr	r3, [pc, #368]	@ (8006250 <mainTask+0x1cf0>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	f083 0301 	eor.w	r3, r3, #1
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d021      	beq.n	800612e <mainTask+0x1bce>
 80060ea:	4b5a      	ldr	r3, [pc, #360]	@ (8006254 <mainTask+0x1cf4>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	f083 0301 	eor.w	r3, r3, #1
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d01a      	beq.n	800612e <mainTask+0x1bce>
					&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80060f8:	4b57      	ldr	r3, [pc, #348]	@ (8006258 <mainTask+0x1cf8>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	f083 0301 	eor.w	r3, r3, #1
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d013      	beq.n	800612e <mainTask+0x1bce>
 8006106:	4b40      	ldr	r3, [pc, #256]	@ (8006208 <mainTask+0x1ca8>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	f083 0301 	eor.w	r3, r3, #1
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00c      	beq.n	800612e <mainTask+0x1bce>
 8006114:	4b44      	ldr	r3, [pc, #272]	@ (8006228 <mainTask+0x1cc8>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	f083 0301 	eor.w	r3, r3, #1
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d005      	beq.n	800612e <mainTask+0x1bce>

				hataVar=0;
 8006122:	4b45      	ldr	r3, [pc, #276]	@ (8006238 <mainTask+0x1cd8>)
 8006124:	2200      	movs	r2, #0
 8006126:	701a      	strb	r2, [r3, #0]
				lcdUpdate(7);
 8006128:	2007      	movs	r0, #7
 800612a:	f7fd fc41 	bl	80039b0 <lcdUpdate>
			}

			if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 800612e:	4b42      	ldr	r3, [pc, #264]	@ (8006238 <mainTask+0x1cd8>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d02a      	beq.n	800618c <mainTask+0x1c2c>
 8006136:	4b45      	ldr	r3, [pc, #276]	@ (800624c <mainTask+0x1cec>)
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	f083 0301 	eor.w	r3, r3, #1
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d023      	beq.n	800618c <mainTask+0x1c2c>
 8006144:	4b42      	ldr	r3, [pc, #264]	@ (8006250 <mainTask+0x1cf0>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01f      	beq.n	800618c <mainTask+0x1c2c>
 800614c:	4b41      	ldr	r3, [pc, #260]	@ (8006254 <mainTask+0x1cf4>)
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	f083 0301 	eor.w	r3, r3, #1
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d018      	beq.n	800618c <mainTask+0x1c2c>
					&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 800615a:	4b3f      	ldr	r3, [pc, #252]	@ (8006258 <mainTask+0x1cf8>)
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	f083 0301 	eor.w	r3, r3, #1
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d011      	beq.n	800618c <mainTask+0x1c2c>
 8006168:	4b27      	ldr	r3, [pc, #156]	@ (8006208 <mainTask+0x1ca8>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	f083 0301 	eor.w	r3, r3, #1
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <mainTask+0x1c2c>
 8006176:	4b2c      	ldr	r3, [pc, #176]	@ (8006228 <mainTask+0x1cc8>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	f083 0301 	eor.w	r3, r3, #1
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <mainTask+0x1c2c>
			{
				EmnCerHataMakYukariCalis=1;
 8006184:	4b35      	ldr	r3, [pc, #212]	@ (800625c <mainTask+0x1cfc>)
 8006186:	2201      	movs	r2, #1
 8006188:	701a      	strb	r2, [r3, #0]
 800618a:	e009      	b.n	80061a0 <mainTask+0x1c40>
			}
			else if(emniyetCercevesihatasi==0)
 800618c:	4b30      	ldr	r3, [pc, #192]	@ (8006250 <mainTask+0x1cf0>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	f083 0301 	eor.w	r3, r3, #1
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <mainTask+0x1c40>
			{
				EmnCerHataMakYukariCalis=0;
 800619a:	4b30      	ldr	r3, [pc, #192]	@ (800625c <mainTask+0x1cfc>)
 800619c:	2200      	movs	r2, #0
 800619e:	701a      	strb	r2, [r3, #0]

		// DEMO MOD BASLIYOR

		// DEMO YUKARI CALISMA

		if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80061a0:	4b2f      	ldr	r3, [pc, #188]	@ (8006260 <mainTask+0x1d00>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	f040 8261 	bne.w	800666c <mainTask+0x210c>
 80061aa:	4b2e      	ldr	r3, [pc, #184]	@ (8006264 <mainTask+0x1d04>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 825c 	beq.w	800666c <mainTask+0x210c>
 80061b4:	4b2c      	ldr	r3, [pc, #176]	@ (8006268 <mainTask+0x1d08>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f040 8257 	bne.w	800666c <mainTask+0x210c>
			if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80061be:	2102      	movs	r1, #2
 80061c0:	482a      	ldr	r0, [pc, #168]	@ (800626c <mainTask+0x1d0c>)
 80061c2:	f001 fb3d 	bl	8007840 <HAL_GPIO_ReadPin>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d15b      	bne.n	8006284 <mainTask+0x1d24>
					&& (demoAsagiCalis==0)
 80061cc:	4b28      	ldr	r3, [pc, #160]	@ (8006270 <mainTask+0x1d10>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	f083 0301 	eor.w	r3, r3, #1
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d054      	beq.n	8006284 <mainTask+0x1d24>
					&& (demoDevYukari==0)
 80061da:	4b26      	ldr	r3, [pc, #152]	@ (8006274 <mainTask+0x1d14>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	f083 0301 	eor.w	r3, r3, #1
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d04d      	beq.n	8006284 <mainTask+0x1d24>
					&& (demoDevAsagi==0)) {
 80061e8:	4b23      	ldr	r3, [pc, #140]	@ (8006278 <mainTask+0x1d18>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	f083 0301 	eor.w	r3, r3, #1
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d046      	beq.n	8006284 <mainTask+0x1d24>

				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80061f6:	2201      	movs	r2, #1
 80061f8:	2104      	movs	r1, #4
 80061fa:	4820      	ldr	r0, [pc, #128]	@ (800627c <mainTask+0x1d1c>)
 80061fc:	f001 fb37 	bl	800786e <HAL_GPIO_WritePin>
				demoYukariCalis=1;
 8006200:	4b1f      	ldr	r3, [pc, #124]	@ (8006280 <mainTask+0x1d20>)
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	e04c      	b.n	80062a2 <mainTask+0x1d42>
 8006208:	20000383 	.word	0x20000383
 800620c:	20000365 	.word	0x20000365
 8006210:	20000371 	.word	0x20000371
 8006214:	40010800 	.word	0x40010800
 8006218:	20000386 	.word	0x20000386
 800621c:	20000377 	.word	0x20000377
 8006220:	2000035b 	.word	0x2000035b
 8006224:	2000035a 	.word	0x2000035a
 8006228:	20000372 	.word	0x20000372
 800622c:	20000300 	.word	0x20000300
 8006230:	20000314 	.word	0x20000314
 8006234:	2000033c 	.word	0x2000033c
 8006238:	20000378 	.word	0x20000378
 800623c:	20000358 	.word	0x20000358
 8006240:	20000359 	.word	0x20000359
 8006244:	20000379 	.word	0x20000379
 8006248:	20000385 	.word	0x20000385
 800624c:	20000373 	.word	0x20000373
 8006250:	20000374 	.word	0x20000374
 8006254:	20000381 	.word	0x20000381
 8006258:	20000382 	.word	0x20000382
 800625c:	20000387 	.word	0x20000387
 8006260:	20000342 	.word	0x20000342
 8006264:	20000375 	.word	0x20000375
 8006268:	20000341 	.word	0x20000341
 800626c:	40011000 	.word	0x40011000
 8006270:	2000037c 	.word	0x2000037c
 8006274:	2000037d 	.word	0x2000037d
 8006278:	2000037e 	.word	0x2000037e
 800627c:	40010c00 	.word	0x40010c00
 8006280:	2000037b 	.word	0x2000037b
			} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006284:	2102      	movs	r1, #2
 8006286:	4871      	ldr	r0, [pc, #452]	@ (800644c <mainTask+0x1eec>)
 8006288:	f001 fada 	bl	8007840 <HAL_GPIO_ReadPin>
 800628c:	4603      	mov	r3, r0
 800628e:	2b01      	cmp	r3, #1
 8006290:	d107      	bne.n	80062a2 <mainTask+0x1d42>

				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006292:	2200      	movs	r2, #0
 8006294:	2104      	movs	r1, #4
 8006296:	486e      	ldr	r0, [pc, #440]	@ (8006450 <mainTask+0x1ef0>)
 8006298:	f001 fae9 	bl	800786e <HAL_GPIO_WritePin>
				demoYukariCalis=0;
 800629c:	4b6d      	ldr	r3, [pc, #436]	@ (8006454 <mainTask+0x1ef4>)
 800629e:	2200      	movs	r2, #0
 80062a0:	701a      	strb	r2, [r3, #0]
			}

			// DEMO MOTOR CALISMASI

			if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80062a2:	4b6c      	ldr	r3, [pc, #432]	@ (8006454 <mainTask+0x1ef4>)
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10b      	bne.n	80062c2 <mainTask+0x1d62>
 80062aa:	4b6b      	ldr	r3, [pc, #428]	@ (8006458 <mainTask+0x1ef8>)
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d107      	bne.n	80062c2 <mainTask+0x1d62>
 80062b2:	4b6a      	ldr	r3, [pc, #424]	@ (800645c <mainTask+0x1efc>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d103      	bne.n	80062c2 <mainTask+0x1d62>
 80062ba:	4b69      	ldr	r3, [pc, #420]	@ (8006460 <mainTask+0x1f00>)
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00c      	beq.n	80062dc <mainTask+0x1d7c>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80062c2:	2201      	movs	r2, #1
 80062c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80062c8:	4861      	ldr	r0, [pc, #388]	@ (8006450 <mainTask+0x1ef0>)
 80062ca:	f001 fad0 	bl	800786e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80062ce:	2201      	movs	r2, #1
 80062d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80062d4:	485e      	ldr	r0, [pc, #376]	@ (8006450 <mainTask+0x1ef0>)
 80062d6:	f001 faca 	bl	800786e <HAL_GPIO_WritePin>
 80062da:	e00b      	b.n	80062f4 <mainTask+0x1d94>
			} else {
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80062dc:	2200      	movs	r2, #0
 80062de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80062e2:	485b      	ldr	r0, [pc, #364]	@ (8006450 <mainTask+0x1ef0>)
 80062e4:	f001 fac3 	bl	800786e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80062e8:	2200      	movs	r2, #0
 80062ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80062ee:	4858      	ldr	r0, [pc, #352]	@ (8006450 <mainTask+0x1ef0>)
 80062f0:	f001 fabd 	bl	800786e <HAL_GPIO_WritePin>
			}

			if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80062f4:	2102      	movs	r1, #2
 80062f6:	4855      	ldr	r0, [pc, #340]	@ (800644c <mainTask+0x1eec>)
 80062f8:	f001 faa2 	bl	8007840 <HAL_GPIO_ReadPin>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d10d      	bne.n	800631e <mainTask+0x1dbe>
					&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006302:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006306:	4851      	ldr	r0, [pc, #324]	@ (800644c <mainTask+0x1eec>)
 8006308:	f001 fa9a 	bl	8007840 <HAL_GPIO_ReadPin>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d105      	bne.n	800631e <mainTask+0x1dbe>
					&& (demoYukariCalis==0)
 8006312:	4b50      	ldr	r3, [pc, #320]	@ (8006454 <mainTask+0x1ef4>)
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	f083 0301 	eor.w	r3, r3, #1
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b00      	cmp	r3, #0
					&& (demoAsagiCalis==0)) {
				//bos burası
			}

			//DEVİRME YUKARI CALIS
			if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800631e:	2102      	movs	r1, #2
 8006320:	484a      	ldr	r0, [pc, #296]	@ (800644c <mainTask+0x1eec>)
 8006322:	f001 fa8d 	bl	8007840 <HAL_GPIO_ReadPin>
 8006326:	4603      	mov	r3, r0
 8006328:	2b01      	cmp	r3, #1
 800632a:	d125      	bne.n	8006378 <mainTask+0x1e18>
					&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800632c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006330:	4846      	ldr	r0, [pc, #280]	@ (800644c <mainTask+0x1eec>)
 8006332:	f001 fa85 	bl	8007840 <HAL_GPIO_ReadPin>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d11d      	bne.n	8006378 <mainTask+0x1e18>
					&&(demoYukariCalis==0)
 800633c:	4b45      	ldr	r3, [pc, #276]	@ (8006454 <mainTask+0x1ef4>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	f083 0301 	eor.w	r3, r3, #1
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d016      	beq.n	8006378 <mainTask+0x1e18>
					&&(demoAsagiCalis==0)
 800634a:	4b45      	ldr	r3, [pc, #276]	@ (8006460 <mainTask+0x1f00>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	f083 0301 	eor.w	r3, r3, #1
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00f      	beq.n	8006378 <mainTask+0x1e18>
					&& (demoDevAsagi==0)) {
 8006358:	4b40      	ldr	r3, [pc, #256]	@ (800645c <mainTask+0x1efc>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	f083 0301 	eor.w	r3, r3, #1
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d008      	beq.n	8006378 <mainTask+0x1e18>

				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006366:	2201      	movs	r2, #1
 8006368:	2120      	movs	r1, #32
 800636a:	4838      	ldr	r0, [pc, #224]	@ (800644c <mainTask+0x1eec>)
 800636c:	f001 fa7f 	bl	800786e <HAL_GPIO_WritePin>
				demoDevYukari=1;
 8006370:	4b39      	ldr	r3, [pc, #228]	@ (8006458 <mainTask+0x1ef8>)
 8006372:	2201      	movs	r2, #1
 8006374:	701a      	strb	r2, [r3, #0]
 8006376:	e007      	b.n	8006388 <mainTask+0x1e28>
			} else {
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006378:	2200      	movs	r2, #0
 800637a:	2120      	movs	r1, #32
 800637c:	4833      	ldr	r0, [pc, #204]	@ (800644c <mainTask+0x1eec>)
 800637e:	f001 fa76 	bl	800786e <HAL_GPIO_WritePin>
				demoDevYukari=0;
 8006382:	4b35      	ldr	r3, [pc, #212]	@ (8006458 <mainTask+0x1ef8>)
 8006384:	2200      	movs	r2, #0
 8006386:	701a      	strb	r2, [r3, #0]
			}

			// DEVIRME ASAGI CALIS

			if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006388:	2102      	movs	r1, #2
 800638a:	4830      	ldr	r0, [pc, #192]	@ (800644c <mainTask+0x1eec>)
 800638c:	f001 fa58 	bl	8007840 <HAL_GPIO_ReadPin>
 8006390:	4603      	mov	r3, r0
 8006392:	2b01      	cmp	r3, #1
 8006394:	d125      	bne.n	80063e2 <mainTask+0x1e82>
					&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006396:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800639a:	482c      	ldr	r0, [pc, #176]	@ (800644c <mainTask+0x1eec>)
 800639c:	f001 fa50 	bl	8007840 <HAL_GPIO_ReadPin>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d11d      	bne.n	80063e2 <mainTask+0x1e82>
					&&(demoYukariCalis==0)
 80063a6:	4b2b      	ldr	r3, [pc, #172]	@ (8006454 <mainTask+0x1ef4>)
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	f083 0301 	eor.w	r3, r3, #1
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d016      	beq.n	80063e2 <mainTask+0x1e82>
					&&(demoDevYukari==0)
 80063b4:	4b28      	ldr	r3, [pc, #160]	@ (8006458 <mainTask+0x1ef8>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	f083 0301 	eor.w	r3, r3, #1
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00f      	beq.n	80063e2 <mainTask+0x1e82>
					&& (demoAsagiCalis==0)) {
 80063c2:	4b27      	ldr	r3, [pc, #156]	@ (8006460 <mainTask+0x1f00>)
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	f083 0301 	eor.w	r3, r3, #1
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d008      	beq.n	80063e2 <mainTask+0x1e82>

				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80063d0:	2201      	movs	r2, #1
 80063d2:	2110      	movs	r1, #16
 80063d4:	481d      	ldr	r0, [pc, #116]	@ (800644c <mainTask+0x1eec>)
 80063d6:	f001 fa4a 	bl	800786e <HAL_GPIO_WritePin>
				demoDevAsagi=1;
 80063da:	4b20      	ldr	r3, [pc, #128]	@ (800645c <mainTask+0x1efc>)
 80063dc:	2201      	movs	r2, #1
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	e007      	b.n	80063f2 <mainTask+0x1e92>
			} else {
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80063e2:	2200      	movs	r2, #0
 80063e4:	2110      	movs	r1, #16
 80063e6:	4819      	ldr	r0, [pc, #100]	@ (800644c <mainTask+0x1eec>)
 80063e8:	f001 fa41 	bl	800786e <HAL_GPIO_WritePin>
				demoDevAsagi=0;
 80063ec:	4b1b      	ldr	r3, [pc, #108]	@ (800645c <mainTask+0x1efc>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	701a      	strb	r2, [r3, #0]
			}

			// DEMO ASAGI CALISMA

			if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80063f2:	2104      	movs	r1, #4
 80063f4:	4815      	ldr	r0, [pc, #84]	@ (800644c <mainTask+0x1eec>)
 80063f6:	f001 fa23 	bl	8007840 <HAL_GPIO_ReadPin>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d133      	bne.n	8006468 <mainTask+0x1f08>
					&& (demoYukariCalis==0)
 8006400:	4b14      	ldr	r3, [pc, #80]	@ (8006454 <mainTask+0x1ef4>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	f083 0301 	eor.w	r3, r3, #1
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d02c      	beq.n	8006468 <mainTask+0x1f08>
					&& (demoDevAsagi==0)
 800640e:	4b13      	ldr	r3, [pc, #76]	@ (800645c <mainTask+0x1efc>)
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	f083 0301 	eor.w	r3, r3, #1
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d025      	beq.n	8006468 <mainTask+0x1f08>
					&& (demoDevYukari==0)) {
 800641c:	4b0e      	ldr	r3, [pc, #56]	@ (8006458 <mainTask+0x1ef8>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	f083 0301 	eor.w	r3, r3, #1
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d01e      	beq.n	8006468 <mainTask+0x1f08>

				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800642a:	2201      	movs	r2, #1
 800642c:	2102      	movs	r1, #2
 800642e:	4808      	ldr	r0, [pc, #32]	@ (8006450 <mainTask+0x1ef0>)
 8006430:	f001 fa1d 	bl	800786e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006434:	2201      	movs	r2, #1
 8006436:	2101      	movs	r1, #1
 8006438:	4805      	ldr	r0, [pc, #20]	@ (8006450 <mainTask+0x1ef0>)
 800643a:	f001 fa18 	bl	800786e <HAL_GPIO_WritePin>
				demoAsagiCalis=1;
 800643e:	4b08      	ldr	r3, [pc, #32]	@ (8006460 <mainTask+0x1f00>)
 8006440:	2201      	movs	r2, #1
 8006442:	701a      	strb	r2, [r3, #0]
				demoCalismaSayisiYar=1;
 8006444:	4b07      	ldr	r3, [pc, #28]	@ (8006464 <mainTask+0x1f04>)
 8006446:	2201      	movs	r2, #1
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	e021      	b.n	8006490 <mainTask+0x1f30>
 800644c:	40011000 	.word	0x40011000
 8006450:	40010c00 	.word	0x40010c00
 8006454:	2000037b 	.word	0x2000037b
 8006458:	2000037d 	.word	0x2000037d
 800645c:	2000037e 	.word	0x2000037e
 8006460:	2000037c 	.word	0x2000037c
 8006464:	20000361 	.word	0x20000361
			} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006468:	2104      	movs	r1, #4
 800646a:	48a0      	ldr	r0, [pc, #640]	@ (80066ec <mainTask+0x218c>)
 800646c:	f001 f9e8 	bl	8007840 <HAL_GPIO_ReadPin>
 8006470:	4603      	mov	r3, r0
 8006472:	2b01      	cmp	r3, #1
 8006474:	d10c      	bne.n	8006490 <mainTask+0x1f30>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006476:	2200      	movs	r2, #0
 8006478:	2102      	movs	r1, #2
 800647a:	489d      	ldr	r0, [pc, #628]	@ (80066f0 <mainTask+0x2190>)
 800647c:	f001 f9f7 	bl	800786e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006480:	2200      	movs	r2, #0
 8006482:	2101      	movs	r1, #1
 8006484:	489a      	ldr	r0, [pc, #616]	@ (80066f0 <mainTask+0x2190>)
 8006486:	f001 f9f2 	bl	800786e <HAL_GPIO_WritePin>
				demoAsagiCalis=0;
 800648a:	4b9a      	ldr	r3, [pc, #616]	@ (80066f4 <mainTask+0x2194>)
 800648c:	2200      	movs	r2, #0
 800648e:	701a      	strb	r2, [r3, #0]
			}

			if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006490:	2104      	movs	r1, #4
 8006492:	4896      	ldr	r0, [pc, #600]	@ (80066ec <mainTask+0x218c>)
 8006494:	f001 f9d4 	bl	8007840 <HAL_GPIO_ReadPin>
 8006498:	4603      	mov	r3, r0
 800649a:	2b01      	cmp	r3, #1
 800649c:	d10d      	bne.n	80064ba <mainTask+0x1f5a>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800649e:	2201      	movs	r2, #1
 80064a0:	2180      	movs	r1, #128	@ 0x80
 80064a2:	4895      	ldr	r0, [pc, #596]	@ (80066f8 <mainTask+0x2198>)
 80064a4:	f001 f9e3 	bl	800786e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80064a8:	2201      	movs	r2, #1
 80064aa:	2120      	movs	r1, #32
 80064ac:	4892      	ldr	r0, [pc, #584]	@ (80066f8 <mainTask+0x2198>)
 80064ae:	f001 f9de 	bl	800786e <HAL_GPIO_WritePin>
				timer3 = millis;
 80064b2:	4b92      	ldr	r3, [pc, #584]	@ (80066fc <mainTask+0x219c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a92      	ldr	r2, [pc, #584]	@ (8006700 <mainTask+0x21a0>)
 80064b8:	6013      	str	r3, [r2, #0]
			}

			if(millis-timer3 >= 5) {
 80064ba:	4b90      	ldr	r3, [pc, #576]	@ (80066fc <mainTask+0x219c>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	4b90      	ldr	r3, [pc, #576]	@ (8006700 <mainTask+0x21a0>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d909      	bls.n	80064dc <mainTask+0x1f7c>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80064c8:	2200      	movs	r2, #0
 80064ca:	2180      	movs	r1, #128	@ 0x80
 80064cc:	488a      	ldr	r0, [pc, #552]	@ (80066f8 <mainTask+0x2198>)
 80064ce:	f001 f9ce 	bl	800786e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80064d2:	2200      	movs	r2, #0
 80064d4:	2120      	movs	r1, #32
 80064d6:	4888      	ldr	r0, [pc, #544]	@ (80066f8 <mainTask+0x2198>)
 80064d8:	f001 f9c9 	bl	800786e <HAL_GPIO_WritePin>
			}

			if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80064dc:	2102      	movs	r1, #2
 80064de:	4883      	ldr	r0, [pc, #524]	@ (80066ec <mainTask+0x218c>)
 80064e0:	f001 f9ae 	bl	8007840 <HAL_GPIO_ReadPin>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d108      	bne.n	80064fc <mainTask+0x1f9c>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80064ea:	2201      	movs	r2, #1
 80064ec:	2140      	movs	r1, #64	@ 0x40
 80064ee:	4882      	ldr	r0, [pc, #520]	@ (80066f8 <mainTask+0x2198>)
 80064f0:	f001 f9bd 	bl	800786e <HAL_GPIO_WritePin>
				timer3 = millis;
 80064f4:	4b81      	ldr	r3, [pc, #516]	@ (80066fc <mainTask+0x219c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a81      	ldr	r2, [pc, #516]	@ (8006700 <mainTask+0x21a0>)
 80064fa:	6013      	str	r3, [r2, #0]
			}

			if(millis-timer3 >= 5) {
 80064fc:	4b7f      	ldr	r3, [pc, #508]	@ (80066fc <mainTask+0x219c>)
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	4b7f      	ldr	r3, [pc, #508]	@ (8006700 <mainTask+0x21a0>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b04      	cmp	r3, #4
 8006508:	d904      	bls.n	8006514 <mainTask+0x1fb4>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800650a:	2200      	movs	r2, #0
 800650c:	2140      	movs	r1, #64	@ 0x40
 800650e:	487a      	ldr	r0, [pc, #488]	@ (80066f8 <mainTask+0x2198>)
 8006510:	f001 f9ad 	bl	800786e <HAL_GPIO_WritePin>
			}

			if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006514:	4b7b      	ldr	r3, [pc, #492]	@ (8006704 <mainTask+0x21a4>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d058      	beq.n	80065ce <mainTask+0x206e>
 800651c:	4b7a      	ldr	r3, [pc, #488]	@ (8006708 <mainTask+0x21a8>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d054      	beq.n	80065ce <mainTask+0x206e>
				//mesajYazildi=0;
				calismaSayisi1=calismaSayisi1+1;
 8006524:	4b79      	ldr	r3, [pc, #484]	@ (800670c <mainTask+0x21ac>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	3301      	adds	r3, #1
 800652a:	b2da      	uxtb	r2, r3
 800652c:	4b77      	ldr	r3, [pc, #476]	@ (800670c <mainTask+0x21ac>)
 800652e:	701a      	strb	r2, [r3, #0]

				if(calismaSayisi1>9) {
 8006530:	4b76      	ldr	r3, [pc, #472]	@ (800670c <mainTask+0x21ac>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b09      	cmp	r3, #9
 8006536:	d908      	bls.n	800654a <mainTask+0x1fea>
					calismaSayisi1=0;
 8006538:	4b74      	ldr	r3, [pc, #464]	@ (800670c <mainTask+0x21ac>)
 800653a:	2200      	movs	r2, #0
 800653c:	701a      	strb	r2, [r3, #0]
					calismaSayisi10=calismaSayisi10+1;
 800653e:	4b74      	ldr	r3, [pc, #464]	@ (8006710 <mainTask+0x21b0>)
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	3301      	adds	r3, #1
 8006544:	b2da      	uxtb	r2, r3
 8006546:	4b72      	ldr	r3, [pc, #456]	@ (8006710 <mainTask+0x21b0>)
 8006548:	701a      	strb	r2, [r3, #0]
				}

				if(calismaSayisi10>9) {
 800654a:	4b71      	ldr	r3, [pc, #452]	@ (8006710 <mainTask+0x21b0>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b09      	cmp	r3, #9
 8006550:	d908      	bls.n	8006564 <mainTask+0x2004>
					calismaSayisi10=0;
 8006552:	4b6f      	ldr	r3, [pc, #444]	@ (8006710 <mainTask+0x21b0>)
 8006554:	2200      	movs	r2, #0
 8006556:	701a      	strb	r2, [r3, #0]
					calismaSayisi100=calismaSayisi100+1;
 8006558:	4b6e      	ldr	r3, [pc, #440]	@ (8006714 <mainTask+0x21b4>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	3301      	adds	r3, #1
 800655e:	b2da      	uxtb	r2, r3
 8006560:	4b6c      	ldr	r3, [pc, #432]	@ (8006714 <mainTask+0x21b4>)
 8006562:	701a      	strb	r2, [r3, #0]
				}

				if(calismaSayisi100>9) {
 8006564:	4b6b      	ldr	r3, [pc, #428]	@ (8006714 <mainTask+0x21b4>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b09      	cmp	r3, #9
 800656a:	d908      	bls.n	800657e <mainTask+0x201e>
					calismaSayisi100=0;
 800656c:	4b69      	ldr	r3, [pc, #420]	@ (8006714 <mainTask+0x21b4>)
 800656e:	2200      	movs	r2, #0
 8006570:	701a      	strb	r2, [r3, #0]
					calismaSayisi1000=calismaSayisi1000+1;
 8006572:	4b69      	ldr	r3, [pc, #420]	@ (8006718 <mainTask+0x21b8>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	3301      	adds	r3, #1
 8006578:	b2da      	uxtb	r2, r3
 800657a:	4b67      	ldr	r3, [pc, #412]	@ (8006718 <mainTask+0x21b8>)
 800657c:	701a      	strb	r2, [r3, #0]
				}

				if(calismaSayisi1000>9) {
 800657e:	4b66      	ldr	r3, [pc, #408]	@ (8006718 <mainTask+0x21b8>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	2b09      	cmp	r3, #9
 8006584:	d908      	bls.n	8006598 <mainTask+0x2038>
					calismaSayisi1000=0;
 8006586:	4b64      	ldr	r3, [pc, #400]	@ (8006718 <mainTask+0x21b8>)
 8006588:	2200      	movs	r2, #0
 800658a:	701a      	strb	r2, [r3, #0]
					calismaSayisi10000=calismaSayisi10000+1;
 800658c:	4b63      	ldr	r3, [pc, #396]	@ (800671c <mainTask+0x21bc>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	3301      	adds	r3, #1
 8006592:	b2da      	uxtb	r2, r3
 8006594:	4b61      	ldr	r3, [pc, #388]	@ (800671c <mainTask+0x21bc>)
 8006596:	701a      	strb	r2, [r3, #0]
				}
				eepromData[32]=calismaSayisi10000;
 8006598:	4b60      	ldr	r3, [pc, #384]	@ (800671c <mainTask+0x21bc>)
 800659a:	781a      	ldrb	r2, [r3, #0]
 800659c:	4b60      	ldr	r3, [pc, #384]	@ (8006720 <mainTask+0x21c0>)
 800659e:	f883 2020 	strb.w	r2, [r3, #32]
				eepromData[31]=calismaSayisi1000;
 80065a2:	4b5d      	ldr	r3, [pc, #372]	@ (8006718 <mainTask+0x21b8>)
 80065a4:	781a      	ldrb	r2, [r3, #0]
 80065a6:	4b5e      	ldr	r3, [pc, #376]	@ (8006720 <mainTask+0x21c0>)
 80065a8:	77da      	strb	r2, [r3, #31]
				eepromData[30]=calismaSayisi100;
 80065aa:	4b5a      	ldr	r3, [pc, #360]	@ (8006714 <mainTask+0x21b4>)
 80065ac:	781a      	ldrb	r2, [r3, #0]
 80065ae:	4b5c      	ldr	r3, [pc, #368]	@ (8006720 <mainTask+0x21c0>)
 80065b0:	779a      	strb	r2, [r3, #30]
				eepromData[29]=calismaSayisi10;
 80065b2:	4b57      	ldr	r3, [pc, #348]	@ (8006710 <mainTask+0x21b0>)
 80065b4:	781a      	ldrb	r2, [r3, #0]
 80065b6:	4b5a      	ldr	r3, [pc, #360]	@ (8006720 <mainTask+0x21c0>)
 80065b8:	775a      	strb	r2, [r3, #29]
				eepromData[28]=calismaSayisi1;
 80065ba:	4b54      	ldr	r3, [pc, #336]	@ (800670c <mainTask+0x21ac>)
 80065bc:	781a      	ldrb	r2, [r3, #0]
 80065be:	4b58      	ldr	r3, [pc, #352]	@ (8006720 <mainTask+0x21c0>)
 80065c0:	771a      	strb	r2, [r3, #28]
				hafizaYaz=1;
 80065c2:	4b58      	ldr	r3, [pc, #352]	@ (8006724 <mainTask+0x21c4>)
 80065c4:	2201      	movs	r2, #1
 80065c6:	701a      	strb	r2, [r3, #0]
		   		//mesajYazildi=0;
				demoCalismaSayisiYar=0;
 80065c8:	4b4f      	ldr	r3, [pc, #316]	@ (8006708 <mainTask+0x21a8>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	701a      	strb	r2, [r3, #0]
			}

			if (menuGiris==0) {
 80065ce:	4b56      	ldr	r3, [pc, #344]	@ (8006728 <mainTask+0x21c8>)
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f040 8087 	bne.w	80066e6 <mainTask+0x2186>
				lcd_print(2,1,"Cycle      ");
 80065d8:	4a54      	ldr	r2, [pc, #336]	@ (800672c <mainTask+0x21cc>)
 80065da:	2101      	movs	r1, #1
 80065dc:	2002      	movs	r0, #2
 80065de:	f7f9 ff66 	bl	80004ae <lcd_print>
				lcd_print(1,1, "    DEMO MODE   ");
 80065e2:	4a53      	ldr	r2, [pc, #332]	@ (8006730 <mainTask+0x21d0>)
 80065e4:	2101      	movs	r1, #1
 80065e6:	2001      	movs	r0, #1
 80065e8:	f7f9 ff61 	bl	80004ae <lcd_print>
				itoa(calismaSayisi10000, snum, 10);
 80065ec:	4b4b      	ldr	r3, [pc, #300]	@ (800671c <mainTask+0x21bc>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	220a      	movs	r2, #10
 80065f2:	4950      	ldr	r1, [pc, #320]	@ (8006734 <mainTask+0x21d4>)
 80065f4:	4618      	mov	r0, r3
 80065f6:	f005 fae1 	bl	800bbbc <itoa>
				lcd_print(2,12,snum);
 80065fa:	4a4e      	ldr	r2, [pc, #312]	@ (8006734 <mainTask+0x21d4>)
 80065fc:	210c      	movs	r1, #12
 80065fe:	2002      	movs	r0, #2
 8006600:	f7f9 ff55 	bl	80004ae <lcd_print>
				itoa(calismaSayisi1000, snum, 10);
 8006604:	4b44      	ldr	r3, [pc, #272]	@ (8006718 <mainTask+0x21b8>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	220a      	movs	r2, #10
 800660a:	494a      	ldr	r1, [pc, #296]	@ (8006734 <mainTask+0x21d4>)
 800660c:	4618      	mov	r0, r3
 800660e:	f005 fad5 	bl	800bbbc <itoa>
				lcd_print(2,13,snum);
 8006612:	4a48      	ldr	r2, [pc, #288]	@ (8006734 <mainTask+0x21d4>)
 8006614:	210d      	movs	r1, #13
 8006616:	2002      	movs	r0, #2
 8006618:	f7f9 ff49 	bl	80004ae <lcd_print>
				itoa(calismaSayisi100, snum, 10);
 800661c:	4b3d      	ldr	r3, [pc, #244]	@ (8006714 <mainTask+0x21b4>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	220a      	movs	r2, #10
 8006622:	4944      	ldr	r1, [pc, #272]	@ (8006734 <mainTask+0x21d4>)
 8006624:	4618      	mov	r0, r3
 8006626:	f005 fac9 	bl	800bbbc <itoa>
				lcd_print(2,14,snum);
 800662a:	4a42      	ldr	r2, [pc, #264]	@ (8006734 <mainTask+0x21d4>)
 800662c:	210e      	movs	r1, #14
 800662e:	2002      	movs	r0, #2
 8006630:	f7f9 ff3d 	bl	80004ae <lcd_print>
				itoa(calismaSayisi10, snum, 10);
 8006634:	4b36      	ldr	r3, [pc, #216]	@ (8006710 <mainTask+0x21b0>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	220a      	movs	r2, #10
 800663a:	493e      	ldr	r1, [pc, #248]	@ (8006734 <mainTask+0x21d4>)
 800663c:	4618      	mov	r0, r3
 800663e:	f005 fabd 	bl	800bbbc <itoa>
				lcd_print(2,15,snum);
 8006642:	4a3c      	ldr	r2, [pc, #240]	@ (8006734 <mainTask+0x21d4>)
 8006644:	210f      	movs	r1, #15
 8006646:	2002      	movs	r0, #2
 8006648:	f7f9 ff31 	bl	80004ae <lcd_print>
				itoa(calismaSayisi1, snum, 10);
 800664c:	4b2f      	ldr	r3, [pc, #188]	@ (800670c <mainTask+0x21ac>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	220a      	movs	r2, #10
 8006652:	4938      	ldr	r1, [pc, #224]	@ (8006734 <mainTask+0x21d4>)
 8006654:	4618      	mov	r0, r3
 8006656:	f005 fab1 	bl	800bbbc <itoa>
				lcd_print(2,16,snum);
 800665a:	4a36      	ldr	r2, [pc, #216]	@ (8006734 <mainTask+0x21d4>)
 800665c:	2110      	movs	r1, #16
 800665e:	2002      	movs	r0, #2
 8006660:	f7f9 ff25 	bl	80004ae <lcd_print>
				mesajYazildi=1;
 8006664:	4b34      	ldr	r3, [pc, #208]	@ (8006738 <mainTask+0x21d8>)
 8006666:	2201      	movs	r2, #1
 8006668:	701a      	strb	r2, [r3, #0]
			if (menuGiris==0) {
 800666a:	e03c      	b.n	80066e6 <mainTask+0x2186>
			}
		} else if(demoMode==1 || menuGiris==1) {
 800666c:	4b33      	ldr	r3, [pc, #204]	@ (800673c <mainTask+0x21dc>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d004      	beq.n	800667e <mainTask+0x211e>
 8006674:	4b2c      	ldr	r3, [pc, #176]	@ (8006728 <mainTask+0x21c8>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b01      	cmp	r3, #1
 800667a:	f47d af75 	bne.w	8004568 <mainTask+0x8>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800667e:	2200      	movs	r2, #0
 8006680:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006684:	481a      	ldr	r0, [pc, #104]	@ (80066f0 <mainTask+0x2190>)
 8006686:	f001 f8f2 	bl	800786e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800668a:	2200      	movs	r2, #0
 800668c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006690:	4817      	ldr	r0, [pc, #92]	@ (80066f0 <mainTask+0x2190>)
 8006692:	f001 f8ec 	bl	800786e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006696:	2200      	movs	r2, #0
 8006698:	2104      	movs	r1, #4
 800669a:	4815      	ldr	r0, [pc, #84]	@ (80066f0 <mainTask+0x2190>)
 800669c:	f001 f8e7 	bl	800786e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80066a0:	2200      	movs	r2, #0
 80066a2:	2102      	movs	r1, #2
 80066a4:	4812      	ldr	r0, [pc, #72]	@ (80066f0 <mainTask+0x2190>)
 80066a6:	f001 f8e2 	bl	800786e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80066aa:	2200      	movs	r2, #0
 80066ac:	2101      	movs	r1, #1
 80066ae:	4810      	ldr	r0, [pc, #64]	@ (80066f0 <mainTask+0x2190>)
 80066b0:	f001 f8dd 	bl	800786e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80066b4:	2200      	movs	r2, #0
 80066b6:	2120      	movs	r1, #32
 80066b8:	480c      	ldr	r0, [pc, #48]	@ (80066ec <mainTask+0x218c>)
 80066ba:	f001 f8d8 	bl	800786e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80066be:	2200      	movs	r2, #0
 80066c0:	2110      	movs	r1, #16
 80066c2:	480a      	ldr	r0, [pc, #40]	@ (80066ec <mainTask+0x218c>)
 80066c4:	f001 f8d3 	bl	800786e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80066c8:	2200      	movs	r2, #0
 80066ca:	2180      	movs	r1, #128	@ 0x80
 80066cc:	480a      	ldr	r0, [pc, #40]	@ (80066f8 <mainTask+0x2198>)
 80066ce:	f001 f8ce 	bl	800786e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80066d2:	2200      	movs	r2, #0
 80066d4:	2140      	movs	r1, #64	@ 0x40
 80066d6:	4808      	ldr	r0, [pc, #32]	@ (80066f8 <mainTask+0x2198>)
 80066d8:	f001 f8c9 	bl	800786e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80066dc:	2200      	movs	r2, #0
 80066de:	2120      	movs	r1, #32
 80066e0:	4805      	ldr	r0, [pc, #20]	@ (80066f8 <mainTask+0x2198>)
 80066e2:	f001 f8c4 	bl	800786e <HAL_GPIO_WritePin>
		if(millis - backLightTimer >= lcdBacklightSure) {
 80066e6:	f7fd bf3f 	b.w	8004568 <mainTask+0x8>
 80066ea:	bf00      	nop
 80066ec:	40011000 	.word	0x40011000
 80066f0:	40010c00 	.word	0x40010c00
 80066f4:	2000037c 	.word	0x2000037c
 80066f8:	40010800 	.word	0x40010800
 80066fc:	20000300 	.word	0x20000300
 8006700:	20000310 	.word	0x20000310
 8006704:	2000037b 	.word	0x2000037b
 8006708:	20000361 	.word	0x20000361
 800670c:	20000321 	.word	0x20000321
 8006710:	20000322 	.word	0x20000322
 8006714:	20000031 	.word	0x20000031
 8006718:	20000032 	.word	0x20000032
 800671c:	20000323 	.word	0x20000323
 8006720:	200002b8 	.word	0x200002b8
 8006724:	2000034f 	.word	0x2000034f
 8006728:	20000341 	.word	0x20000341
 800672c:	0800c8f4 	.word	0x0800c8f4
 8006730:	0800c900 	.word	0x0800c900
 8006734:	200002f8 	.word	0x200002f8
 8006738:	20000357 	.word	0x20000357
 800673c:	20000342 	.word	0x20000342

08006740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b090      	sub	sp, #64	@ 0x40
 8006744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006746:	f107 0318 	add.w	r3, r7, #24
 800674a:	2228      	movs	r2, #40	@ 0x28
 800674c:	2100      	movs	r1, #0
 800674e:	4618      	mov	r0, r3
 8006750:	f005 fa78 	bl	800bc44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006754:	1d3b      	adds	r3, r7, #4
 8006756:	2200      	movs	r2, #0
 8006758:	601a      	str	r2, [r3, #0]
 800675a:	605a      	str	r2, [r3, #4]
 800675c:	609a      	str	r2, [r3, #8]
 800675e:	60da      	str	r2, [r3, #12]
 8006760:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006762:	2301      	movs	r3, #1
 8006764:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006766:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800676a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800676c:	2300      	movs	r3, #0
 800676e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006770:	2301      	movs	r3, #1
 8006772:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006774:	2302      	movs	r3, #2
 8006776:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006778:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800677c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800677e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8006782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006784:	f107 0318 	add.w	r3, r7, #24
 8006788:	4618      	mov	r0, r3
 800678a:	f002 fa69 	bl	8008c60 <HAL_RCC_OscConfig>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8006794:	f000 f9aa 	bl	8006aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006798:	230f      	movs	r3, #15
 800679a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800679c:	2302      	movs	r3, #2
 800679e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80067a0:	2300      	movs	r3, #0
 80067a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80067a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80067aa:	2300      	movs	r3, #0
 80067ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80067ae:	1d3b      	adds	r3, r7, #4
 80067b0:	2102      	movs	r1, #2
 80067b2:	4618      	mov	r0, r3
 80067b4:	f002 fcd6 	bl	8009164 <HAL_RCC_ClockConfig>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80067be:	f000 f995 	bl	8006aec <Error_Handler>
  }
}
 80067c2:	bf00      	nop
 80067c4:	3740      	adds	r7, #64	@ 0x40
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80067d0:	4b16      	ldr	r3, [pc, #88]	@ (800682c <MX_CAN_Init+0x60>)
 80067d2:	4a17      	ldr	r2, [pc, #92]	@ (8006830 <MX_CAN_Init+0x64>)
 80067d4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80067d6:	4b15      	ldr	r3, [pc, #84]	@ (800682c <MX_CAN_Init+0x60>)
 80067d8:	2210      	movs	r2, #16
 80067da:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80067dc:	4b13      	ldr	r3, [pc, #76]	@ (800682c <MX_CAN_Init+0x60>)
 80067de:	2200      	movs	r2, #0
 80067e0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80067e2:	4b12      	ldr	r3, [pc, #72]	@ (800682c <MX_CAN_Init+0x60>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80067e8:	4b10      	ldr	r3, [pc, #64]	@ (800682c <MX_CAN_Init+0x60>)
 80067ea:	2200      	movs	r2, #0
 80067ec:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80067ee:	4b0f      	ldr	r3, [pc, #60]	@ (800682c <MX_CAN_Init+0x60>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80067f4:	4b0d      	ldr	r3, [pc, #52]	@ (800682c <MX_CAN_Init+0x60>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80067fa:	4b0c      	ldr	r3, [pc, #48]	@ (800682c <MX_CAN_Init+0x60>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8006800:	4b0a      	ldr	r3, [pc, #40]	@ (800682c <MX_CAN_Init+0x60>)
 8006802:	2200      	movs	r2, #0
 8006804:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8006806:	4b09      	ldr	r3, [pc, #36]	@ (800682c <MX_CAN_Init+0x60>)
 8006808:	2200      	movs	r2, #0
 800680a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800680c:	4b07      	ldr	r3, [pc, #28]	@ (800682c <MX_CAN_Init+0x60>)
 800680e:	2200      	movs	r2, #0
 8006810:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8006812:	4b06      	ldr	r3, [pc, #24]	@ (800682c <MX_CAN_Init+0x60>)
 8006814:	2200      	movs	r2, #0
 8006816:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8006818:	4804      	ldr	r0, [pc, #16]	@ (800682c <MX_CAN_Init+0x60>)
 800681a:	f000 fba7 	bl	8006f6c <HAL_CAN_Init>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8006824:	f000 f962 	bl	8006aec <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8006828:	bf00      	nop
 800682a:	bd80      	pop	{r7, pc}
 800682c:	2000038c 	.word	0x2000038c
 8006830:	40006400 	.word	0x40006400

08006834 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006838:	4b12      	ldr	r3, [pc, #72]	@ (8006884 <MX_I2C1_Init+0x50>)
 800683a:	4a13      	ldr	r2, [pc, #76]	@ (8006888 <MX_I2C1_Init+0x54>)
 800683c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800683e:	4b11      	ldr	r3, [pc, #68]	@ (8006884 <MX_I2C1_Init+0x50>)
 8006840:	4a12      	ldr	r2, [pc, #72]	@ (800688c <MX_I2C1_Init+0x58>)
 8006842:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006844:	4b0f      	ldr	r3, [pc, #60]	@ (8006884 <MX_I2C1_Init+0x50>)
 8006846:	2200      	movs	r2, #0
 8006848:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800684a:	4b0e      	ldr	r3, [pc, #56]	@ (8006884 <MX_I2C1_Init+0x50>)
 800684c:	2200      	movs	r2, #0
 800684e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006850:	4b0c      	ldr	r3, [pc, #48]	@ (8006884 <MX_I2C1_Init+0x50>)
 8006852:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006856:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006858:	4b0a      	ldr	r3, [pc, #40]	@ (8006884 <MX_I2C1_Init+0x50>)
 800685a:	2200      	movs	r2, #0
 800685c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800685e:	4b09      	ldr	r3, [pc, #36]	@ (8006884 <MX_I2C1_Init+0x50>)
 8006860:	2200      	movs	r2, #0
 8006862:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006864:	4b07      	ldr	r3, [pc, #28]	@ (8006884 <MX_I2C1_Init+0x50>)
 8006866:	2200      	movs	r2, #0
 8006868:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800686a:	4b06      	ldr	r3, [pc, #24]	@ (8006884 <MX_I2C1_Init+0x50>)
 800686c:	2200      	movs	r2, #0
 800686e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006870:	4804      	ldr	r0, [pc, #16]	@ (8006884 <MX_I2C1_Init+0x50>)
 8006872:	f001 f82d 	bl	80078d0 <HAL_I2C_Init>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800687c:	f000 f936 	bl	8006aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8006880:	bf00      	nop
 8006882:	bd80      	pop	{r7, pc}
 8006884:	200003b4 	.word	0x200003b4
 8006888:	40005400 	.word	0x40005400
 800688c:	00061a80 	.word	0x00061a80

08006890 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006896:	f107 0308 	add.w	r3, r7, #8
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	605a      	str	r2, [r3, #4]
 80068a0:	609a      	str	r2, [r3, #8]
 80068a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068a4:	463b      	mov	r3, r7
 80068a6:	2200      	movs	r2, #0
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80068ac:	4b1f      	ldr	r3, [pc, #124]	@ (800692c <MX_TIM1_Init+0x9c>)
 80068ae:	4a20      	ldr	r2, [pc, #128]	@ (8006930 <MX_TIM1_Init+0xa0>)
 80068b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80068b2:	4b1e      	ldr	r3, [pc, #120]	@ (800692c <MX_TIM1_Init+0x9c>)
 80068b4:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80068b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068ba:	4b1c      	ldr	r3, [pc, #112]	@ (800692c <MX_TIM1_Init+0x9c>)
 80068bc:	2200      	movs	r2, #0
 80068be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80068c0:	4b1a      	ldr	r3, [pc, #104]	@ (800692c <MX_TIM1_Init+0x9c>)
 80068c2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80068c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068c8:	4b18      	ldr	r3, [pc, #96]	@ (800692c <MX_TIM1_Init+0x9c>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80068ce:	4b17      	ldr	r3, [pc, #92]	@ (800692c <MX_TIM1_Init+0x9c>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068d4:	4b15      	ldr	r3, [pc, #84]	@ (800692c <MX_TIM1_Init+0x9c>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80068da:	4814      	ldr	r0, [pc, #80]	@ (800692c <MX_TIM1_Init+0x9c>)
 80068dc:	f002 fdda 	bl	8009494 <HAL_TIM_Base_Init>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80068e6:	f000 f901 	bl	8006aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80068ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80068ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80068f0:	f107 0308 	add.w	r3, r7, #8
 80068f4:	4619      	mov	r1, r3
 80068f6:	480d      	ldr	r0, [pc, #52]	@ (800692c <MX_TIM1_Init+0x9c>)
 80068f8:	f002 ff84 	bl	8009804 <HAL_TIM_ConfigClockSource>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8006902:	f000 f8f3 	bl	8006aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006906:	2300      	movs	r3, #0
 8006908:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800690a:	2300      	movs	r3, #0
 800690c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800690e:	463b      	mov	r3, r7
 8006910:	4619      	mov	r1, r3
 8006912:	4806      	ldr	r0, [pc, #24]	@ (800692c <MX_TIM1_Init+0x9c>)
 8006914:	f003 f96e 	bl	8009bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800691e:	f000 f8e5 	bl	8006aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006922:	bf00      	nop
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	20000450 	.word	0x20000450
 8006930:	40012c00 	.word	0x40012c00

08006934 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006938:	4b11      	ldr	r3, [pc, #68]	@ (8006980 <MX_USART1_UART_Init+0x4c>)
 800693a:	4a12      	ldr	r2, [pc, #72]	@ (8006984 <MX_USART1_UART_Init+0x50>)
 800693c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800693e:	4b10      	ldr	r3, [pc, #64]	@ (8006980 <MX_USART1_UART_Init+0x4c>)
 8006940:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006944:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006946:	4b0e      	ldr	r3, [pc, #56]	@ (8006980 <MX_USART1_UART_Init+0x4c>)
 8006948:	2200      	movs	r2, #0
 800694a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800694c:	4b0c      	ldr	r3, [pc, #48]	@ (8006980 <MX_USART1_UART_Init+0x4c>)
 800694e:	2200      	movs	r2, #0
 8006950:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006952:	4b0b      	ldr	r3, [pc, #44]	@ (8006980 <MX_USART1_UART_Init+0x4c>)
 8006954:	2200      	movs	r2, #0
 8006956:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006958:	4b09      	ldr	r3, [pc, #36]	@ (8006980 <MX_USART1_UART_Init+0x4c>)
 800695a:	220c      	movs	r2, #12
 800695c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800695e:	4b08      	ldr	r3, [pc, #32]	@ (8006980 <MX_USART1_UART_Init+0x4c>)
 8006960:	2200      	movs	r2, #0
 8006962:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006964:	4b06      	ldr	r3, [pc, #24]	@ (8006980 <MX_USART1_UART_Init+0x4c>)
 8006966:	2200      	movs	r2, #0
 8006968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800696a:	4805      	ldr	r0, [pc, #20]	@ (8006980 <MX_USART1_UART_Init+0x4c>)
 800696c:	f003 f9c0 	bl	8009cf0 <HAL_UART_Init>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006976:	f000 f8b9 	bl	8006aec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800697a:	bf00      	nop
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20000408 	.word	0x20000408
 8006984:	40013800 	.word	0x40013800

08006988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b088      	sub	sp, #32
 800698c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800698e:	f107 0310 	add.w	r3, r7, #16
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	605a      	str	r2, [r3, #4]
 8006998:	609a      	str	r2, [r3, #8]
 800699a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800699c:	4b4b      	ldr	r3, [pc, #300]	@ (8006acc <MX_GPIO_Init+0x144>)
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	4a4a      	ldr	r2, [pc, #296]	@ (8006acc <MX_GPIO_Init+0x144>)
 80069a2:	f043 0310 	orr.w	r3, r3, #16
 80069a6:	6193      	str	r3, [r2, #24]
 80069a8:	4b48      	ldr	r3, [pc, #288]	@ (8006acc <MX_GPIO_Init+0x144>)
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	f003 0310 	and.w	r3, r3, #16
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80069b4:	4b45      	ldr	r3, [pc, #276]	@ (8006acc <MX_GPIO_Init+0x144>)
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	4a44      	ldr	r2, [pc, #272]	@ (8006acc <MX_GPIO_Init+0x144>)
 80069ba:	f043 0320 	orr.w	r3, r3, #32
 80069be:	6193      	str	r3, [r2, #24]
 80069c0:	4b42      	ldr	r3, [pc, #264]	@ (8006acc <MX_GPIO_Init+0x144>)
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	60bb      	str	r3, [r7, #8]
 80069ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80069cc:	4b3f      	ldr	r3, [pc, #252]	@ (8006acc <MX_GPIO_Init+0x144>)
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	4a3e      	ldr	r2, [pc, #248]	@ (8006acc <MX_GPIO_Init+0x144>)
 80069d2:	f043 0304 	orr.w	r3, r3, #4
 80069d6:	6193      	str	r3, [r2, #24]
 80069d8:	4b3c      	ldr	r3, [pc, #240]	@ (8006acc <MX_GPIO_Init+0x144>)
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	607b      	str	r3, [r7, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80069e4:	4b39      	ldr	r3, [pc, #228]	@ (8006acc <MX_GPIO_Init+0x144>)
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	4a38      	ldr	r2, [pc, #224]	@ (8006acc <MX_GPIO_Init+0x144>)
 80069ea:	f043 0308 	orr.w	r3, r3, #8
 80069ee:	6193      	str	r3, [r2, #24]
 80069f0:	4b36      	ldr	r3, [pc, #216]	@ (8006acc <MX_GPIO_Init+0x144>)
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	f003 0308 	and.w	r3, r3, #8
 80069f8:	603b      	str	r3, [r7, #0]
 80069fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80069fc:	2200      	movs	r2, #0
 80069fe:	21f0      	movs	r1, #240	@ 0xf0
 8006a00:	4833      	ldr	r0, [pc, #204]	@ (8006ad0 <MX_GPIO_Init+0x148>)
 8006a02:	f000 ff34 	bl	800786e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8006a06:	2200      	movs	r2, #0
 8006a08:	f241 0130 	movw	r1, #4144	@ 0x1030
 8006a0c:	4831      	ldr	r0, [pc, #196]	@ (8006ad4 <MX_GPIO_Init+0x14c>)
 8006a0e:	f000 ff2e 	bl	800786e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8006a12:	2200      	movs	r2, #0
 8006a14:	f640 4107 	movw	r1, #3079	@ 0xc07
 8006a18:	482f      	ldr	r0, [pc, #188]	@ (8006ad8 <MX_GPIO_Init+0x150>)
 8006a1a:	f000 ff28 	bl	800786e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8006a1e:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8006a22:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a24:	2300      	movs	r3, #0
 8006a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a2c:	f107 0310 	add.w	r3, r7, #16
 8006a30:	4619      	mov	r1, r3
 8006a32:	4828      	ldr	r0, [pc, #160]	@ (8006ad4 <MX_GPIO_Init+0x14c>)
 8006a34:	f000 fca4 	bl	8007380 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8006a38:	f248 130f 	movw	r3, #33039	@ 0x810f
 8006a3c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a42:	2300      	movs	r3, #0
 8006a44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a46:	f107 0310 	add.w	r3, r7, #16
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4820      	ldr	r0, [pc, #128]	@ (8006ad0 <MX_GPIO_Init+0x148>)
 8006a4e:	f000 fc97 	bl	8007380 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8006a52:	23f0      	movs	r3, #240	@ 0xf0
 8006a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a56:	2301      	movs	r3, #1
 8006a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a5e:	2302      	movs	r3, #2
 8006a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a62:	f107 0310 	add.w	r3, r7, #16
 8006a66:	4619      	mov	r1, r3
 8006a68:	4819      	ldr	r0, [pc, #100]	@ (8006ad0 <MX_GPIO_Init+0x148>)
 8006a6a:	f000 fc89 	bl	8007380 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8006a6e:	f241 0330 	movw	r3, #4144	@ 0x1030
 8006a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a74:	2301      	movs	r3, #1
 8006a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a80:	f107 0310 	add.w	r3, r7, #16
 8006a84:	4619      	mov	r1, r3
 8006a86:	4813      	ldr	r0, [pc, #76]	@ (8006ad4 <MX_GPIO_Init+0x14c>)
 8006a88:	f000 fc7a 	bl	8007380 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8006a8c:	f640 4307 	movw	r3, #3079	@ 0xc07
 8006a90:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a92:	2301      	movs	r3, #1
 8006a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a9e:	f107 0310 	add.w	r3, r7, #16
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	480c      	ldr	r0, [pc, #48]	@ (8006ad8 <MX_GPIO_Init+0x150>)
 8006aa6:	f000 fc6b 	bl	8007380 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8006aaa:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8006aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ab8:	f107 0310 	add.w	r3, r7, #16
 8006abc:	4619      	mov	r1, r3
 8006abe:	4806      	ldr	r0, [pc, #24]	@ (8006ad8 <MX_GPIO_Init+0x150>)
 8006ac0:	f000 fc5e 	bl	8007380 <HAL_GPIO_Init>

}
 8006ac4:	bf00      	nop
 8006ac6:	3720      	adds	r7, #32
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	40010800 	.word	0x40010800
 8006ad4:	40011000 	.word	0x40011000
 8006ad8:	40010c00 	.word	0x40010c00

08006adc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	f003 fa49 	bl	8009f7c <osDelay>
 8006aea:	e7fb      	b.n	8006ae4 <StartDefaultTask+0x8>

08006aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8006af0:	bf00      	nop
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr

08006af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006afe:	4b18      	ldr	r3, [pc, #96]	@ (8006b60 <HAL_MspInit+0x68>)
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	4a17      	ldr	r2, [pc, #92]	@ (8006b60 <HAL_MspInit+0x68>)
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	6193      	str	r3, [r2, #24]
 8006b0a:	4b15      	ldr	r3, [pc, #84]	@ (8006b60 <HAL_MspInit+0x68>)
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	60bb      	str	r3, [r7, #8]
 8006b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b16:	4b12      	ldr	r3, [pc, #72]	@ (8006b60 <HAL_MspInit+0x68>)
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	4a11      	ldr	r2, [pc, #68]	@ (8006b60 <HAL_MspInit+0x68>)
 8006b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b20:	61d3      	str	r3, [r2, #28]
 8006b22:	4b0f      	ldr	r3, [pc, #60]	@ (8006b60 <HAL_MspInit+0x68>)
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b2a:	607b      	str	r3, [r7, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006b2e:	2200      	movs	r2, #0
 8006b30:	210f      	movs	r1, #15
 8006b32:	f06f 0001 	mvn.w	r0, #1
 8006b36:	f000 fbec 	bl	8007312 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b64 <HAL_MspInit+0x6c>)
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	4a04      	ldr	r2, [pc, #16]	@ (8006b64 <HAL_MspInit+0x6c>)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b56:	bf00      	nop
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	40021000 	.word	0x40021000
 8006b64:	40010000 	.word	0x40010000

08006b68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b70:	f107 0310 	add.w	r3, r7, #16
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	605a      	str	r2, [r3, #4]
 8006b7a:	609a      	str	r2, [r3, #8]
 8006b7c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a1c      	ldr	r2, [pc, #112]	@ (8006bf4 <HAL_CAN_MspInit+0x8c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d131      	bne.n	8006bec <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006b88:	4b1b      	ldr	r3, [pc, #108]	@ (8006bf8 <HAL_CAN_MspInit+0x90>)
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	4a1a      	ldr	r2, [pc, #104]	@ (8006bf8 <HAL_CAN_MspInit+0x90>)
 8006b8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006b92:	61d3      	str	r3, [r2, #28]
 8006b94:	4b18      	ldr	r3, [pc, #96]	@ (8006bf8 <HAL_CAN_MspInit+0x90>)
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b9c:	60fb      	str	r3, [r7, #12]
 8006b9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ba0:	4b15      	ldr	r3, [pc, #84]	@ (8006bf8 <HAL_CAN_MspInit+0x90>)
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	4a14      	ldr	r2, [pc, #80]	@ (8006bf8 <HAL_CAN_MspInit+0x90>)
 8006ba6:	f043 0304 	orr.w	r3, r3, #4
 8006baa:	6193      	str	r3, [r2, #24]
 8006bac:	4b12      	ldr	r3, [pc, #72]	@ (8006bf8 <HAL_CAN_MspInit+0x90>)
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	60bb      	str	r3, [r7, #8]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006bb8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006bbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bc6:	f107 0310 	add.w	r3, r7, #16
 8006bca:	4619      	mov	r1, r3
 8006bcc:	480b      	ldr	r0, [pc, #44]	@ (8006bfc <HAL_CAN_MspInit+0x94>)
 8006bce:	f000 fbd7 	bl	8007380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006bd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006bd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bd8:	2302      	movs	r3, #2
 8006bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006be0:	f107 0310 	add.w	r3, r7, #16
 8006be4:	4619      	mov	r1, r3
 8006be6:	4805      	ldr	r0, [pc, #20]	@ (8006bfc <HAL_CAN_MspInit+0x94>)
 8006be8:	f000 fbca 	bl	8007380 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8006bec:	bf00      	nop
 8006bee:	3720      	adds	r7, #32
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40006400 	.word	0x40006400
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	40010800 	.word	0x40010800

08006c00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b088      	sub	sp, #32
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c08:	f107 0310 	add.w	r3, r7, #16
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	605a      	str	r2, [r3, #4]
 8006c12:	609a      	str	r2, [r3, #8]
 8006c14:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a15      	ldr	r2, [pc, #84]	@ (8006c70 <HAL_I2C_MspInit+0x70>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d123      	bne.n	8006c68 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c20:	4b14      	ldr	r3, [pc, #80]	@ (8006c74 <HAL_I2C_MspInit+0x74>)
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	4a13      	ldr	r2, [pc, #76]	@ (8006c74 <HAL_I2C_MspInit+0x74>)
 8006c26:	f043 0308 	orr.w	r3, r3, #8
 8006c2a:	6193      	str	r3, [r2, #24]
 8006c2c:	4b11      	ldr	r3, [pc, #68]	@ (8006c74 <HAL_I2C_MspInit+0x74>)
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	60fb      	str	r3, [r7, #12]
 8006c36:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006c38:	23c0      	movs	r3, #192	@ 0xc0
 8006c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c3c:	2312      	movs	r3, #18
 8006c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c40:	2303      	movs	r3, #3
 8006c42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c44:	f107 0310 	add.w	r3, r7, #16
 8006c48:	4619      	mov	r1, r3
 8006c4a:	480b      	ldr	r0, [pc, #44]	@ (8006c78 <HAL_I2C_MspInit+0x78>)
 8006c4c:	f000 fb98 	bl	8007380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c50:	4b08      	ldr	r3, [pc, #32]	@ (8006c74 <HAL_I2C_MspInit+0x74>)
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	4a07      	ldr	r2, [pc, #28]	@ (8006c74 <HAL_I2C_MspInit+0x74>)
 8006c56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006c5a:	61d3      	str	r3, [r2, #28]
 8006c5c:	4b05      	ldr	r3, [pc, #20]	@ (8006c74 <HAL_I2C_MspInit+0x74>)
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c64:	60bb      	str	r3, [r7, #8]
 8006c66:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006c68:	bf00      	nop
 8006c6a:	3720      	adds	r7, #32
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	40005400 	.word	0x40005400
 8006c74:	40021000 	.word	0x40021000
 8006c78:	40010c00 	.word	0x40010c00

08006c7c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a0a      	ldr	r2, [pc, #40]	@ (8006cb4 <HAL_I2C_MspDeInit+0x38>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d10d      	bne.n	8006caa <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb8 <HAL_I2C_MspDeInit+0x3c>)
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	4a09      	ldr	r2, [pc, #36]	@ (8006cb8 <HAL_I2C_MspDeInit+0x3c>)
 8006c94:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c98:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8006c9a:	2140      	movs	r1, #64	@ 0x40
 8006c9c:	4807      	ldr	r0, [pc, #28]	@ (8006cbc <HAL_I2C_MspDeInit+0x40>)
 8006c9e:	f000 fd03 	bl	80076a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8006ca2:	2180      	movs	r1, #128	@ 0x80
 8006ca4:	4805      	ldr	r0, [pc, #20]	@ (8006cbc <HAL_I2C_MspDeInit+0x40>)
 8006ca6:	f000 fcff 	bl	80076a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	40005400 	.word	0x40005400
 8006cb8:	40021000 	.word	0x40021000
 8006cbc:	40010c00 	.word	0x40010c00

08006cc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8006d04 <HAL_TIM_Base_MspInit+0x44>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d113      	bne.n	8006cfa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d08 <HAL_TIM_Base_MspInit+0x48>)
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8006d08 <HAL_TIM_Base_MspInit+0x48>)
 8006cd8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006cdc:	6193      	str	r3, [r2, #24]
 8006cde:	4b0a      	ldr	r3, [pc, #40]	@ (8006d08 <HAL_TIM_Base_MspInit+0x48>)
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8006cea:	2200      	movs	r2, #0
 8006cec:	2105      	movs	r1, #5
 8006cee:	2019      	movs	r0, #25
 8006cf0:	f000 fb0f 	bl	8007312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8006cf4:	2019      	movs	r0, #25
 8006cf6:	f000 fb28 	bl	800734a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8006cfa:	bf00      	nop
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40012c00 	.word	0x40012c00
 8006d08:	40021000 	.word	0x40021000

08006d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d14:	f107 0310 	add.w	r3, r7, #16
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	605a      	str	r2, [r3, #4]
 8006d1e:	609a      	str	r2, [r3, #8]
 8006d20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a1c      	ldr	r2, [pc, #112]	@ (8006d98 <HAL_UART_MspInit+0x8c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d131      	bne.n	8006d90 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8006d9c <HAL_UART_MspInit+0x90>)
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	4a1a      	ldr	r2, [pc, #104]	@ (8006d9c <HAL_UART_MspInit+0x90>)
 8006d32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d36:	6193      	str	r3, [r2, #24]
 8006d38:	4b18      	ldr	r3, [pc, #96]	@ (8006d9c <HAL_UART_MspInit+0x90>)
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d44:	4b15      	ldr	r3, [pc, #84]	@ (8006d9c <HAL_UART_MspInit+0x90>)
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	4a14      	ldr	r2, [pc, #80]	@ (8006d9c <HAL_UART_MspInit+0x90>)
 8006d4a:	f043 0304 	orr.w	r3, r3, #4
 8006d4e:	6193      	str	r3, [r2, #24]
 8006d50:	4b12      	ldr	r3, [pc, #72]	@ (8006d9c <HAL_UART_MspInit+0x90>)
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	60bb      	str	r3, [r7, #8]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006d5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d62:	2302      	movs	r3, #2
 8006d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006d66:	2303      	movs	r3, #3
 8006d68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d6a:	f107 0310 	add.w	r3, r7, #16
 8006d6e:	4619      	mov	r1, r3
 8006d70:	480b      	ldr	r0, [pc, #44]	@ (8006da0 <HAL_UART_MspInit+0x94>)
 8006d72:	f000 fb05 	bl	8007380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006d76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d80:	2300      	movs	r3, #0
 8006d82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d84:	f107 0310 	add.w	r3, r7, #16
 8006d88:	4619      	mov	r1, r3
 8006d8a:	4805      	ldr	r0, [pc, #20]	@ (8006da0 <HAL_UART_MspInit+0x94>)
 8006d8c:	f000 faf8 	bl	8007380 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006d90:	bf00      	nop
 8006d92:	3720      	adds	r7, #32
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	40013800 	.word	0x40013800
 8006d9c:	40021000 	.word	0x40021000
 8006da0:	40010800 	.word	0x40010800

08006da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006da4:	b480      	push	{r7}
 8006da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006da8:	bf00      	nop
 8006daa:	e7fd      	b.n	8006da8 <NMI_Handler+0x4>

08006dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006db0:	bf00      	nop
 8006db2:	e7fd      	b.n	8006db0 <HardFault_Handler+0x4>

08006db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006db8:	bf00      	nop
 8006dba:	e7fd      	b.n	8006db8 <MemManage_Handler+0x4>

08006dbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006dc0:	bf00      	nop
 8006dc2:	e7fd      	b.n	8006dc0 <BusFault_Handler+0x4>

08006dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006dc8:	bf00      	nop
 8006dca:	e7fd      	b.n	8006dc8 <UsageFault_Handler+0x4>

08006dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006dd0:	bf00      	nop
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bc80      	pop	{r7}
 8006dd6:	4770      	bx	lr

08006dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006ddc:	f000 f886 	bl	8006eec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006de0:	f004 fa36 	bl	800b250 <xTaskGetSchedulerState>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d001      	beq.n	8006dee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006dea:	f004 fcad 	bl	800b748 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006dee:	bf00      	nop
 8006df0:	bd80      	pop	{r7, pc}
	...

08006df4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006df8:	4802      	ldr	r0, [pc, #8]	@ (8006e04 <TIM1_UP_IRQHandler+0x10>)
 8006dfa:	f002 fbfb 	bl	80095f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8006dfe:	bf00      	nop
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20000450 	.word	0x20000450

08006e08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006e0c:	bf00      	nop
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr

08006e14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006e14:	480c      	ldr	r0, [pc, #48]	@ (8006e48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006e16:	490d      	ldr	r1, [pc, #52]	@ (8006e4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006e18:	4a0d      	ldr	r2, [pc, #52]	@ (8006e50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e1c:	e002      	b.n	8006e24 <LoopCopyDataInit>

08006e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006e22:	3304      	adds	r3, #4

08006e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006e28:	d3f9      	bcc.n	8006e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8006e54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006e2c:	4c0a      	ldr	r4, [pc, #40]	@ (8006e58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006e30:	e001      	b.n	8006e36 <LoopFillZerobss>

08006e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006e34:	3204      	adds	r2, #4

08006e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006e38:	d3fb      	bcc.n	8006e32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006e3a:	f7ff ffe5 	bl	8006e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006e3e:	f004 ff09 	bl	800bc54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006e42:	f7fd fa0f 	bl	8004264 <main>
  bx lr
 8006e46:	4770      	bx	lr
  ldr r0, =_sdata
 8006e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e4c:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8006e50:	0800c974 	.word	0x0800c974
  ldr r2, =_sbss
 8006e54:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8006e58:	200011ec 	.word	0x200011ec

08006e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006e5c:	e7fe      	b.n	8006e5c <ADC1_2_IRQHandler>
	...

08006e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006e64:	4b08      	ldr	r3, [pc, #32]	@ (8006e88 <HAL_Init+0x28>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a07      	ldr	r2, [pc, #28]	@ (8006e88 <HAL_Init+0x28>)
 8006e6a:	f043 0310 	orr.w	r3, r3, #16
 8006e6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e70:	2003      	movs	r0, #3
 8006e72:	f000 fa43 	bl	80072fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006e76:	200f      	movs	r0, #15
 8006e78:	f000 f808 	bl	8006e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006e7c:	f7ff fe3c 	bl	8006af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	40022000 	.word	0x40022000

08006e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006e94:	4b12      	ldr	r3, [pc, #72]	@ (8006ee0 <HAL_InitTick+0x54>)
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	4b12      	ldr	r3, [pc, #72]	@ (8006ee4 <HAL_InitTick+0x58>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fa5b 	bl	8007366 <HAL_SYSTICK_Config>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e00e      	b.n	8006ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b0f      	cmp	r3, #15
 8006ebe:	d80a      	bhi.n	8006ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	6879      	ldr	r1, [r7, #4]
 8006ec4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ec8:	f000 fa23 	bl	8007312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ecc:	4a06      	ldr	r2, [pc, #24]	@ (8006ee8 <HAL_InitTick+0x5c>)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	e000      	b.n	8006ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20000034 	.word	0x20000034
 8006ee4:	2000003c 	.word	0x2000003c
 8006ee8:	20000038 	.word	0x20000038

08006eec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ef0:	4b05      	ldr	r3, [pc, #20]	@ (8006f08 <HAL_IncTick+0x1c>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	4b05      	ldr	r3, [pc, #20]	@ (8006f0c <HAL_IncTick+0x20>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4413      	add	r3, r2
 8006efc:	4a03      	ldr	r2, [pc, #12]	@ (8006f0c <HAL_IncTick+0x20>)
 8006efe:	6013      	str	r3, [r2, #0]
}
 8006f00:	bf00      	nop
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bc80      	pop	{r7}
 8006f06:	4770      	bx	lr
 8006f08:	2000003c 	.word	0x2000003c
 8006f0c:	2000049c 	.word	0x2000049c

08006f10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f10:	b480      	push	{r7}
 8006f12:	af00      	add	r7, sp, #0
  return uwTick;
 8006f14:	4b02      	ldr	r3, [pc, #8]	@ (8006f20 <HAL_GetTick+0x10>)
 8006f16:	681b      	ldr	r3, [r3, #0]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bc80      	pop	{r7}
 8006f1e:	4770      	bx	lr
 8006f20:	2000049c 	.word	0x2000049c

08006f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f2c:	f7ff fff0 	bl	8006f10 <HAL_GetTick>
 8006f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f3c:	d005      	beq.n	8006f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f68 <HAL_Delay+0x44>)
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006f4a:	bf00      	nop
 8006f4c:	f7ff ffe0 	bl	8006f10 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d8f7      	bhi.n	8006f4c <HAL_Delay+0x28>
  {
  }
}
 8006f5c:	bf00      	nop
 8006f5e:	bf00      	nop
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	2000003c 	.word	0x2000003c

08006f6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e0ed      	b.n	800715a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d102      	bne.n	8006f90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7ff fdec 	bl	8006b68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0201 	orr.w	r2, r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fa0:	f7ff ffb6 	bl	8006f10 <HAL_GetTick>
 8006fa4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006fa6:	e012      	b.n	8006fce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006fa8:	f7ff ffb2 	bl	8006f10 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b0a      	cmp	r3, #10
 8006fb4:	d90b      	bls.n	8006fce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2205      	movs	r2, #5
 8006fc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e0c5      	b.n	800715a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d0e5      	beq.n	8006fa8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0202 	bic.w	r2, r2, #2
 8006fea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fec:	f7ff ff90 	bl	8006f10 <HAL_GetTick>
 8006ff0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006ff2:	e012      	b.n	800701a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006ff4:	f7ff ff8c 	bl	8006f10 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	2b0a      	cmp	r3, #10
 8007000:	d90b      	bls.n	800701a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007006:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2205      	movs	r2, #5
 8007012:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e09f      	b.n	800715a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e5      	bne.n	8006ff4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	7e1b      	ldrb	r3, [r3, #24]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d108      	bne.n	8007042 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	e007      	b.n	8007052 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007050:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	7e5b      	ldrb	r3, [r3, #25]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d108      	bne.n	800706c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	e007      	b.n	800707c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800707a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	7e9b      	ldrb	r3, [r3, #26]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d108      	bne.n	8007096 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f042 0220 	orr.w	r2, r2, #32
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	e007      	b.n	80070a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0220 	bic.w	r2, r2, #32
 80070a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	7edb      	ldrb	r3, [r3, #27]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d108      	bne.n	80070c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0210 	bic.w	r2, r2, #16
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	e007      	b.n	80070d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0210 	orr.w	r2, r2, #16
 80070ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	7f1b      	ldrb	r3, [r3, #28]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d108      	bne.n	80070ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f042 0208 	orr.w	r2, r2, #8
 80070e6:	601a      	str	r2, [r3, #0]
 80070e8:	e007      	b.n	80070fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 0208 	bic.w	r2, r2, #8
 80070f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	7f5b      	ldrb	r3, [r3, #29]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d108      	bne.n	8007114 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f042 0204 	orr.w	r2, r2, #4
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	e007      	b.n	8007124 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 0204 	bic.w	r2, r2, #4
 8007122:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	431a      	orrs	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	431a      	orrs	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	ea42 0103 	orr.w	r1, r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	1e5a      	subs	r2, r3, #1
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
	...

08007164 <__NVIC_SetPriorityGrouping>:
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f003 0307 	and.w	r3, r3, #7
 8007172:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007174:	4b0c      	ldr	r3, [pc, #48]	@ (80071a8 <__NVIC_SetPriorityGrouping+0x44>)
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007180:	4013      	ands	r3, r2
 8007182:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800718c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007196:	4a04      	ldr	r2, [pc, #16]	@ (80071a8 <__NVIC_SetPriorityGrouping+0x44>)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	60d3      	str	r3, [r2, #12]
}
 800719c:	bf00      	nop
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	e000ed00 	.word	0xe000ed00

080071ac <__NVIC_GetPriorityGrouping>:
{
 80071ac:	b480      	push	{r7}
 80071ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071b0:	4b04      	ldr	r3, [pc, #16]	@ (80071c4 <__NVIC_GetPriorityGrouping+0x18>)
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	0a1b      	lsrs	r3, r3, #8
 80071b6:	f003 0307 	and.w	r3, r3, #7
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	46bd      	mov	sp, r7
 80071be:	bc80      	pop	{r7}
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	e000ed00 	.word	0xe000ed00

080071c8 <__NVIC_EnableIRQ>:
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	4603      	mov	r3, r0
 80071d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	db0b      	blt.n	80071f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	f003 021f 	and.w	r2, r3, #31
 80071e0:	4906      	ldr	r1, [pc, #24]	@ (80071fc <__NVIC_EnableIRQ+0x34>)
 80071e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071e6:	095b      	lsrs	r3, r3, #5
 80071e8:	2001      	movs	r0, #1
 80071ea:	fa00 f202 	lsl.w	r2, r0, r2
 80071ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80071f2:	bf00      	nop
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bc80      	pop	{r7}
 80071fa:	4770      	bx	lr
 80071fc:	e000e100 	.word	0xe000e100

08007200 <__NVIC_SetPriority>:
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	4603      	mov	r3, r0
 8007208:	6039      	str	r1, [r7, #0]
 800720a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800720c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007210:	2b00      	cmp	r3, #0
 8007212:	db0a      	blt.n	800722a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	b2da      	uxtb	r2, r3
 8007218:	490c      	ldr	r1, [pc, #48]	@ (800724c <__NVIC_SetPriority+0x4c>)
 800721a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800721e:	0112      	lsls	r2, r2, #4
 8007220:	b2d2      	uxtb	r2, r2
 8007222:	440b      	add	r3, r1
 8007224:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007228:	e00a      	b.n	8007240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	b2da      	uxtb	r2, r3
 800722e:	4908      	ldr	r1, [pc, #32]	@ (8007250 <__NVIC_SetPriority+0x50>)
 8007230:	79fb      	ldrb	r3, [r7, #7]
 8007232:	f003 030f 	and.w	r3, r3, #15
 8007236:	3b04      	subs	r3, #4
 8007238:	0112      	lsls	r2, r2, #4
 800723a:	b2d2      	uxtb	r2, r2
 800723c:	440b      	add	r3, r1
 800723e:	761a      	strb	r2, [r3, #24]
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	bc80      	pop	{r7}
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	e000e100 	.word	0xe000e100
 8007250:	e000ed00 	.word	0xe000ed00

08007254 <NVIC_EncodePriority>:
{
 8007254:	b480      	push	{r7}
 8007256:	b089      	sub	sp, #36	@ 0x24
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	f1c3 0307 	rsb	r3, r3, #7
 800726e:	2b04      	cmp	r3, #4
 8007270:	bf28      	it	cs
 8007272:	2304      	movcs	r3, #4
 8007274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	3304      	adds	r3, #4
 800727a:	2b06      	cmp	r3, #6
 800727c:	d902      	bls.n	8007284 <NVIC_EncodePriority+0x30>
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	3b03      	subs	r3, #3
 8007282:	e000      	b.n	8007286 <NVIC_EncodePriority+0x32>
 8007284:	2300      	movs	r3, #0
 8007286:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007288:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	fa02 f303 	lsl.w	r3, r2, r3
 8007292:	43da      	mvns	r2, r3
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	401a      	ands	r2, r3
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800729c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	fa01 f303 	lsl.w	r3, r1, r3
 80072a6:	43d9      	mvns	r1, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072ac:	4313      	orrs	r3, r2
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3724      	adds	r7, #36	@ 0x24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bc80      	pop	{r7}
 80072b6:	4770      	bx	lr

080072b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072c8:	d301      	bcc.n	80072ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80072ca:	2301      	movs	r3, #1
 80072cc:	e00f      	b.n	80072ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072ce:	4a0a      	ldr	r2, [pc, #40]	@ (80072f8 <SysTick_Config+0x40>)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072d6:	210f      	movs	r1, #15
 80072d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072dc:	f7ff ff90 	bl	8007200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072e0:	4b05      	ldr	r3, [pc, #20]	@ (80072f8 <SysTick_Config+0x40>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072e6:	4b04      	ldr	r3, [pc, #16]	@ (80072f8 <SysTick_Config+0x40>)
 80072e8:	2207      	movs	r2, #7
 80072ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3708      	adds	r7, #8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	e000e010 	.word	0xe000e010

080072fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7ff ff2d 	bl	8007164 <__NVIC_SetPriorityGrouping>
}
 800730a:	bf00      	nop
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007312:	b580      	push	{r7, lr}
 8007314:	b086      	sub	sp, #24
 8007316:	af00      	add	r7, sp, #0
 8007318:	4603      	mov	r3, r0
 800731a:	60b9      	str	r1, [r7, #8]
 800731c:	607a      	str	r2, [r7, #4]
 800731e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007320:	2300      	movs	r3, #0
 8007322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007324:	f7ff ff42 	bl	80071ac <__NVIC_GetPriorityGrouping>
 8007328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	68b9      	ldr	r1, [r7, #8]
 800732e:	6978      	ldr	r0, [r7, #20]
 8007330:	f7ff ff90 	bl	8007254 <NVIC_EncodePriority>
 8007334:	4602      	mov	r2, r0
 8007336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800733a:	4611      	mov	r1, r2
 800733c:	4618      	mov	r0, r3
 800733e:	f7ff ff5f 	bl	8007200 <__NVIC_SetPriority>
}
 8007342:	bf00      	nop
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	4603      	mov	r3, r0
 8007352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007358:	4618      	mov	r0, r3
 800735a:	f7ff ff35 	bl	80071c8 <__NVIC_EnableIRQ>
}
 800735e:	bf00      	nop
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b082      	sub	sp, #8
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff ffa2 	bl	80072b8 <SysTick_Config>
 8007374:	4603      	mov	r3, r0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007380:	b480      	push	{r7}
 8007382:	b08b      	sub	sp, #44	@ 0x2c
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800738a:	2300      	movs	r3, #0
 800738c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800738e:	2300      	movs	r3, #0
 8007390:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007392:	e179      	b.n	8007688 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007394:	2201      	movs	r2, #1
 8007396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69fa      	ldr	r2, [r7, #28]
 80073a4:	4013      	ands	r3, r2
 80073a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	f040 8168 	bne.w	8007682 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	4a96      	ldr	r2, [pc, #600]	@ (8007610 <HAL_GPIO_Init+0x290>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d05e      	beq.n	800747a <HAL_GPIO_Init+0xfa>
 80073bc:	4a94      	ldr	r2, [pc, #592]	@ (8007610 <HAL_GPIO_Init+0x290>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d875      	bhi.n	80074ae <HAL_GPIO_Init+0x12e>
 80073c2:	4a94      	ldr	r2, [pc, #592]	@ (8007614 <HAL_GPIO_Init+0x294>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d058      	beq.n	800747a <HAL_GPIO_Init+0xfa>
 80073c8:	4a92      	ldr	r2, [pc, #584]	@ (8007614 <HAL_GPIO_Init+0x294>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d86f      	bhi.n	80074ae <HAL_GPIO_Init+0x12e>
 80073ce:	4a92      	ldr	r2, [pc, #584]	@ (8007618 <HAL_GPIO_Init+0x298>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d052      	beq.n	800747a <HAL_GPIO_Init+0xfa>
 80073d4:	4a90      	ldr	r2, [pc, #576]	@ (8007618 <HAL_GPIO_Init+0x298>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d869      	bhi.n	80074ae <HAL_GPIO_Init+0x12e>
 80073da:	4a90      	ldr	r2, [pc, #576]	@ (800761c <HAL_GPIO_Init+0x29c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d04c      	beq.n	800747a <HAL_GPIO_Init+0xfa>
 80073e0:	4a8e      	ldr	r2, [pc, #568]	@ (800761c <HAL_GPIO_Init+0x29c>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d863      	bhi.n	80074ae <HAL_GPIO_Init+0x12e>
 80073e6:	4a8e      	ldr	r2, [pc, #568]	@ (8007620 <HAL_GPIO_Init+0x2a0>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d046      	beq.n	800747a <HAL_GPIO_Init+0xfa>
 80073ec:	4a8c      	ldr	r2, [pc, #560]	@ (8007620 <HAL_GPIO_Init+0x2a0>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d85d      	bhi.n	80074ae <HAL_GPIO_Init+0x12e>
 80073f2:	2b12      	cmp	r3, #18
 80073f4:	d82a      	bhi.n	800744c <HAL_GPIO_Init+0xcc>
 80073f6:	2b12      	cmp	r3, #18
 80073f8:	d859      	bhi.n	80074ae <HAL_GPIO_Init+0x12e>
 80073fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007400 <HAL_GPIO_Init+0x80>)
 80073fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007400:	0800747b 	.word	0x0800747b
 8007404:	08007455 	.word	0x08007455
 8007408:	08007467 	.word	0x08007467
 800740c:	080074a9 	.word	0x080074a9
 8007410:	080074af 	.word	0x080074af
 8007414:	080074af 	.word	0x080074af
 8007418:	080074af 	.word	0x080074af
 800741c:	080074af 	.word	0x080074af
 8007420:	080074af 	.word	0x080074af
 8007424:	080074af 	.word	0x080074af
 8007428:	080074af 	.word	0x080074af
 800742c:	080074af 	.word	0x080074af
 8007430:	080074af 	.word	0x080074af
 8007434:	080074af 	.word	0x080074af
 8007438:	080074af 	.word	0x080074af
 800743c:	080074af 	.word	0x080074af
 8007440:	080074af 	.word	0x080074af
 8007444:	0800745d 	.word	0x0800745d
 8007448:	08007471 	.word	0x08007471
 800744c:	4a75      	ldr	r2, [pc, #468]	@ (8007624 <HAL_GPIO_Init+0x2a4>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d013      	beq.n	800747a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007452:	e02c      	b.n	80074ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	623b      	str	r3, [r7, #32]
          break;
 800745a:	e029      	b.n	80074b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	3304      	adds	r3, #4
 8007462:	623b      	str	r3, [r7, #32]
          break;
 8007464:	e024      	b.n	80074b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	3308      	adds	r3, #8
 800746c:	623b      	str	r3, [r7, #32]
          break;
 800746e:	e01f      	b.n	80074b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	330c      	adds	r3, #12
 8007476:	623b      	str	r3, [r7, #32]
          break;
 8007478:	e01a      	b.n	80074b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d102      	bne.n	8007488 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007482:	2304      	movs	r3, #4
 8007484:	623b      	str	r3, [r7, #32]
          break;
 8007486:	e013      	b.n	80074b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d105      	bne.n	800749c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007490:	2308      	movs	r3, #8
 8007492:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	69fa      	ldr	r2, [r7, #28]
 8007498:	611a      	str	r2, [r3, #16]
          break;
 800749a:	e009      	b.n	80074b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800749c:	2308      	movs	r3, #8
 800749e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	69fa      	ldr	r2, [r7, #28]
 80074a4:	615a      	str	r2, [r3, #20]
          break;
 80074a6:	e003      	b.n	80074b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80074a8:	2300      	movs	r3, #0
 80074aa:	623b      	str	r3, [r7, #32]
          break;
 80074ac:	e000      	b.n	80074b0 <HAL_GPIO_Init+0x130>
          break;
 80074ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	2bff      	cmp	r3, #255	@ 0xff
 80074b4:	d801      	bhi.n	80074ba <HAL_GPIO_Init+0x13a>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	e001      	b.n	80074be <HAL_GPIO_Init+0x13e>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	3304      	adds	r3, #4
 80074be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	2bff      	cmp	r3, #255	@ 0xff
 80074c4:	d802      	bhi.n	80074cc <HAL_GPIO_Init+0x14c>
 80074c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	e002      	b.n	80074d2 <HAL_GPIO_Init+0x152>
 80074cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ce:	3b08      	subs	r3, #8
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	210f      	movs	r1, #15
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	fa01 f303 	lsl.w	r3, r1, r3
 80074e0:	43db      	mvns	r3, r3
 80074e2:	401a      	ands	r2, r3
 80074e4:	6a39      	ldr	r1, [r7, #32]
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	fa01 f303 	lsl.w	r3, r1, r3
 80074ec:	431a      	orrs	r2, r3
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 80c1 	beq.w	8007682 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007500:	4b49      	ldr	r3, [pc, #292]	@ (8007628 <HAL_GPIO_Init+0x2a8>)
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	4a48      	ldr	r2, [pc, #288]	@ (8007628 <HAL_GPIO_Init+0x2a8>)
 8007506:	f043 0301 	orr.w	r3, r3, #1
 800750a:	6193      	str	r3, [r2, #24]
 800750c:	4b46      	ldr	r3, [pc, #280]	@ (8007628 <HAL_GPIO_Init+0x2a8>)
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	60bb      	str	r3, [r7, #8]
 8007516:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007518:	4a44      	ldr	r2, [pc, #272]	@ (800762c <HAL_GPIO_Init+0x2ac>)
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751c:	089b      	lsrs	r3, r3, #2
 800751e:	3302      	adds	r3, #2
 8007520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007524:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007528:	f003 0303 	and.w	r3, r3, #3
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	220f      	movs	r2, #15
 8007530:	fa02 f303 	lsl.w	r3, r2, r3
 8007534:	43db      	mvns	r3, r3
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	4013      	ands	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a3c      	ldr	r2, [pc, #240]	@ (8007630 <HAL_GPIO_Init+0x2b0>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d01f      	beq.n	8007584 <HAL_GPIO_Init+0x204>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a3b      	ldr	r2, [pc, #236]	@ (8007634 <HAL_GPIO_Init+0x2b4>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d019      	beq.n	8007580 <HAL_GPIO_Init+0x200>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a3a      	ldr	r2, [pc, #232]	@ (8007638 <HAL_GPIO_Init+0x2b8>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d013      	beq.n	800757c <HAL_GPIO_Init+0x1fc>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a39      	ldr	r2, [pc, #228]	@ (800763c <HAL_GPIO_Init+0x2bc>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d00d      	beq.n	8007578 <HAL_GPIO_Init+0x1f8>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a38      	ldr	r2, [pc, #224]	@ (8007640 <HAL_GPIO_Init+0x2c0>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d007      	beq.n	8007574 <HAL_GPIO_Init+0x1f4>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a37      	ldr	r2, [pc, #220]	@ (8007644 <HAL_GPIO_Init+0x2c4>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d101      	bne.n	8007570 <HAL_GPIO_Init+0x1f0>
 800756c:	2305      	movs	r3, #5
 800756e:	e00a      	b.n	8007586 <HAL_GPIO_Init+0x206>
 8007570:	2306      	movs	r3, #6
 8007572:	e008      	b.n	8007586 <HAL_GPIO_Init+0x206>
 8007574:	2304      	movs	r3, #4
 8007576:	e006      	b.n	8007586 <HAL_GPIO_Init+0x206>
 8007578:	2303      	movs	r3, #3
 800757a:	e004      	b.n	8007586 <HAL_GPIO_Init+0x206>
 800757c:	2302      	movs	r3, #2
 800757e:	e002      	b.n	8007586 <HAL_GPIO_Init+0x206>
 8007580:	2301      	movs	r3, #1
 8007582:	e000      	b.n	8007586 <HAL_GPIO_Init+0x206>
 8007584:	2300      	movs	r3, #0
 8007586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007588:	f002 0203 	and.w	r2, r2, #3
 800758c:	0092      	lsls	r2, r2, #2
 800758e:	4093      	lsls	r3, r2
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007596:	4925      	ldr	r1, [pc, #148]	@ (800762c <HAL_GPIO_Init+0x2ac>)
 8007598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759a:	089b      	lsrs	r3, r3, #2
 800759c:	3302      	adds	r3, #2
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d006      	beq.n	80075be <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80075b0:	4b25      	ldr	r3, [pc, #148]	@ (8007648 <HAL_GPIO_Init+0x2c8>)
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	4924      	ldr	r1, [pc, #144]	@ (8007648 <HAL_GPIO_Init+0x2c8>)
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	600b      	str	r3, [r1, #0]
 80075bc:	e006      	b.n	80075cc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80075be:	4b22      	ldr	r3, [pc, #136]	@ (8007648 <HAL_GPIO_Init+0x2c8>)
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	43db      	mvns	r3, r3
 80075c6:	4920      	ldr	r1, [pc, #128]	@ (8007648 <HAL_GPIO_Init+0x2c8>)
 80075c8:	4013      	ands	r3, r2
 80075ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d006      	beq.n	80075e6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80075d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007648 <HAL_GPIO_Init+0x2c8>)
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	491a      	ldr	r1, [pc, #104]	@ (8007648 <HAL_GPIO_Init+0x2c8>)
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	604b      	str	r3, [r1, #4]
 80075e4:	e006      	b.n	80075f4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80075e6:	4b18      	ldr	r3, [pc, #96]	@ (8007648 <HAL_GPIO_Init+0x2c8>)
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	43db      	mvns	r3, r3
 80075ee:	4916      	ldr	r1, [pc, #88]	@ (8007648 <HAL_GPIO_Init+0x2c8>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d025      	beq.n	800764c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007600:	4b11      	ldr	r3, [pc, #68]	@ (8007648 <HAL_GPIO_Init+0x2c8>)
 8007602:	689a      	ldr	r2, [r3, #8]
 8007604:	4910      	ldr	r1, [pc, #64]	@ (8007648 <HAL_GPIO_Init+0x2c8>)
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	4313      	orrs	r3, r2
 800760a:	608b      	str	r3, [r1, #8]
 800760c:	e025      	b.n	800765a <HAL_GPIO_Init+0x2da>
 800760e:	bf00      	nop
 8007610:	10320000 	.word	0x10320000
 8007614:	10310000 	.word	0x10310000
 8007618:	10220000 	.word	0x10220000
 800761c:	10210000 	.word	0x10210000
 8007620:	10120000 	.word	0x10120000
 8007624:	10110000 	.word	0x10110000
 8007628:	40021000 	.word	0x40021000
 800762c:	40010000 	.word	0x40010000
 8007630:	40010800 	.word	0x40010800
 8007634:	40010c00 	.word	0x40010c00
 8007638:	40011000 	.word	0x40011000
 800763c:	40011400 	.word	0x40011400
 8007640:	40011800 	.word	0x40011800
 8007644:	40011c00 	.word	0x40011c00
 8007648:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800764c:	4b15      	ldr	r3, [pc, #84]	@ (80076a4 <HAL_GPIO_Init+0x324>)
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	43db      	mvns	r3, r3
 8007654:	4913      	ldr	r1, [pc, #76]	@ (80076a4 <HAL_GPIO_Init+0x324>)
 8007656:	4013      	ands	r3, r2
 8007658:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d006      	beq.n	8007674 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007666:	4b0f      	ldr	r3, [pc, #60]	@ (80076a4 <HAL_GPIO_Init+0x324>)
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	490e      	ldr	r1, [pc, #56]	@ (80076a4 <HAL_GPIO_Init+0x324>)
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	4313      	orrs	r3, r2
 8007670:	60cb      	str	r3, [r1, #12]
 8007672:	e006      	b.n	8007682 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007674:	4b0b      	ldr	r3, [pc, #44]	@ (80076a4 <HAL_GPIO_Init+0x324>)
 8007676:	68da      	ldr	r2, [r3, #12]
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	43db      	mvns	r3, r3
 800767c:	4909      	ldr	r1, [pc, #36]	@ (80076a4 <HAL_GPIO_Init+0x324>)
 800767e:	4013      	ands	r3, r2
 8007680:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007684:	3301      	adds	r3, #1
 8007686:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768e:	fa22 f303 	lsr.w	r3, r2, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	f47f ae7e 	bne.w	8007394 <HAL_GPIO_Init+0x14>
  }
}
 8007698:	bf00      	nop
 800769a:	bf00      	nop
 800769c:	372c      	adds	r7, #44	@ 0x2c
 800769e:	46bd      	mov	sp, r7
 80076a0:	bc80      	pop	{r7}
 80076a2:	4770      	bx	lr
 80076a4:	40010400 	.word	0x40010400

080076a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b089      	sub	sp, #36	@ 0x24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80076b2:	2300      	movs	r3, #0
 80076b4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80076b6:	e0a6      	b.n	8007806 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80076b8:	2201      	movs	r2, #1
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	fa02 f303 	lsl.w	r3, r2, r3
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	4013      	ands	r3, r2
 80076c4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 8099 	beq.w	8007800 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80076ce:	4a54      	ldr	r2, [pc, #336]	@ (8007820 <HAL_GPIO_DeInit+0x178>)
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	089b      	lsrs	r3, r3, #2
 80076d4:	3302      	adds	r3, #2
 80076d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076da:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	220f      	movs	r2, #15
 80076e6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	4013      	ands	r3, r2
 80076ee:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a4c      	ldr	r2, [pc, #304]	@ (8007824 <HAL_GPIO_DeInit+0x17c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d01f      	beq.n	8007738 <HAL_GPIO_DeInit+0x90>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a4b      	ldr	r2, [pc, #300]	@ (8007828 <HAL_GPIO_DeInit+0x180>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d019      	beq.n	8007734 <HAL_GPIO_DeInit+0x8c>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a4a      	ldr	r2, [pc, #296]	@ (800782c <HAL_GPIO_DeInit+0x184>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d013      	beq.n	8007730 <HAL_GPIO_DeInit+0x88>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a49      	ldr	r2, [pc, #292]	@ (8007830 <HAL_GPIO_DeInit+0x188>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d00d      	beq.n	800772c <HAL_GPIO_DeInit+0x84>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a48      	ldr	r2, [pc, #288]	@ (8007834 <HAL_GPIO_DeInit+0x18c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d007      	beq.n	8007728 <HAL_GPIO_DeInit+0x80>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a47      	ldr	r2, [pc, #284]	@ (8007838 <HAL_GPIO_DeInit+0x190>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d101      	bne.n	8007724 <HAL_GPIO_DeInit+0x7c>
 8007720:	2305      	movs	r3, #5
 8007722:	e00a      	b.n	800773a <HAL_GPIO_DeInit+0x92>
 8007724:	2306      	movs	r3, #6
 8007726:	e008      	b.n	800773a <HAL_GPIO_DeInit+0x92>
 8007728:	2304      	movs	r3, #4
 800772a:	e006      	b.n	800773a <HAL_GPIO_DeInit+0x92>
 800772c:	2303      	movs	r3, #3
 800772e:	e004      	b.n	800773a <HAL_GPIO_DeInit+0x92>
 8007730:	2302      	movs	r3, #2
 8007732:	e002      	b.n	800773a <HAL_GPIO_DeInit+0x92>
 8007734:	2301      	movs	r3, #1
 8007736:	e000      	b.n	800773a <HAL_GPIO_DeInit+0x92>
 8007738:	2300      	movs	r3, #0
 800773a:	69fa      	ldr	r2, [r7, #28]
 800773c:	f002 0203 	and.w	r2, r2, #3
 8007740:	0092      	lsls	r2, r2, #2
 8007742:	4093      	lsls	r3, r2
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	429a      	cmp	r2, r3
 8007748:	d132      	bne.n	80077b0 <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	f003 0303 	and.w	r3, r3, #3
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	220f      	movs	r2, #15
 8007754:	fa02 f303 	lsl.w	r3, r2, r3
 8007758:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800775a:	4a31      	ldr	r2, [pc, #196]	@ (8007820 <HAL_GPIO_DeInit+0x178>)
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	089b      	lsrs	r3, r3, #2
 8007760:	3302      	adds	r3, #2
 8007762:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	43da      	mvns	r2, r3
 800776a:	482d      	ldr	r0, [pc, #180]	@ (8007820 <HAL_GPIO_DeInit+0x178>)
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	089b      	lsrs	r3, r3, #2
 8007770:	400a      	ands	r2, r1
 8007772:	3302      	adds	r3, #2
 8007774:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8007778:	4b30      	ldr	r3, [pc, #192]	@ (800783c <HAL_GPIO_DeInit+0x194>)
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	43db      	mvns	r3, r3
 8007780:	492e      	ldr	r1, [pc, #184]	@ (800783c <HAL_GPIO_DeInit+0x194>)
 8007782:	4013      	ands	r3, r2
 8007784:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8007786:	4b2d      	ldr	r3, [pc, #180]	@ (800783c <HAL_GPIO_DeInit+0x194>)
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	43db      	mvns	r3, r3
 800778e:	492b      	ldr	r1, [pc, #172]	@ (800783c <HAL_GPIO_DeInit+0x194>)
 8007790:	4013      	ands	r3, r2
 8007792:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8007794:	4b29      	ldr	r3, [pc, #164]	@ (800783c <HAL_GPIO_DeInit+0x194>)
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	43db      	mvns	r3, r3
 800779c:	4927      	ldr	r1, [pc, #156]	@ (800783c <HAL_GPIO_DeInit+0x194>)
 800779e:	4013      	ands	r3, r2
 80077a0:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80077a2:	4b26      	ldr	r3, [pc, #152]	@ (800783c <HAL_GPIO_DeInit+0x194>)
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	43db      	mvns	r3, r3
 80077aa:	4924      	ldr	r1, [pc, #144]	@ (800783c <HAL_GPIO_DeInit+0x194>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	2bff      	cmp	r3, #255	@ 0xff
 80077b4:	d801      	bhi.n	80077ba <HAL_GPIO_DeInit+0x112>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	e001      	b.n	80077be <HAL_GPIO_DeInit+0x116>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	3304      	adds	r3, #4
 80077be:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	2bff      	cmp	r3, #255	@ 0xff
 80077c4:	d802      	bhi.n	80077cc <HAL_GPIO_DeInit+0x124>
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	e002      	b.n	80077d2 <HAL_GPIO_DeInit+0x12a>
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	3b08      	subs	r3, #8
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	210f      	movs	r1, #15
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	fa01 f303 	lsl.w	r3, r1, r3
 80077e0:	43db      	mvns	r3, r3
 80077e2:	401a      	ands	r2, r3
 80077e4:	2104      	movs	r1, #4
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	fa01 f303 	lsl.w	r3, r1, r3
 80077ec:	431a      	orrs	r2, r3
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	43db      	mvns	r3, r3
 80077fa:	401a      	ands	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	60da      	str	r2, [r3, #12]
    }

    position++;
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	3301      	adds	r3, #1
 8007804:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	fa22 f303 	lsr.w	r3, r2, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	f47f af52 	bne.w	80076b8 <HAL_GPIO_DeInit+0x10>
  }
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop
 8007818:	3724      	adds	r7, #36	@ 0x24
 800781a:	46bd      	mov	sp, r7
 800781c:	bc80      	pop	{r7}
 800781e:	4770      	bx	lr
 8007820:	40010000 	.word	0x40010000
 8007824:	40010800 	.word	0x40010800
 8007828:	40010c00 	.word	0x40010c00
 800782c:	40011000 	.word	0x40011000
 8007830:	40011400 	.word	0x40011400
 8007834:	40011800 	.word	0x40011800
 8007838:	40011c00 	.word	0x40011c00
 800783c:	40010400 	.word	0x40010400

08007840 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	887b      	ldrh	r3, [r7, #2]
 8007852:	4013      	ands	r3, r2
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007858:	2301      	movs	r3, #1
 800785a:	73fb      	strb	r3, [r7, #15]
 800785c:	e001      	b.n	8007862 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800785e:	2300      	movs	r3, #0
 8007860:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	bc80      	pop	{r7}
 800786c:	4770      	bx	lr

0800786e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	807b      	strh	r3, [r7, #2]
 800787a:	4613      	mov	r3, r2
 800787c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800787e:	787b      	ldrb	r3, [r7, #1]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d003      	beq.n	800788c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007884:	887a      	ldrh	r2, [r7, #2]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800788a:	e003      	b.n	8007894 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800788c:	887b      	ldrh	r3, [r7, #2]
 800788e:	041a      	lsls	r2, r3, #16
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	611a      	str	r2, [r3, #16]
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	bc80      	pop	{r7}
 800789c:	4770      	bx	lr

0800789e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800789e:	b480      	push	{r7}
 80078a0:	b085      	sub	sp, #20
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	460b      	mov	r3, r1
 80078a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80078b0:	887a      	ldrh	r2, [r7, #2]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	4013      	ands	r3, r2
 80078b6:	041a      	lsls	r2, r3, #16
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	43d9      	mvns	r1, r3
 80078bc:	887b      	ldrh	r3, [r7, #2]
 80078be:	400b      	ands	r3, r1
 80078c0:	431a      	orrs	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	611a      	str	r2, [r3, #16]
}
 80078c6:	bf00      	nop
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bc80      	pop	{r7}
 80078ce:	4770      	bx	lr

080078d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e12b      	b.n	8007b3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d106      	bne.n	80078fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff f982 	bl	8006c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2224      	movs	r2, #36	@ 0x24
 8007900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0201 	bic.w	r2, r2, #1
 8007912:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007922:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007932:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007934:	f001 fd68 	bl	8009408 <HAL_RCC_GetPCLK1Freq>
 8007938:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	4a81      	ldr	r2, [pc, #516]	@ (8007b44 <HAL_I2C_Init+0x274>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d807      	bhi.n	8007954 <HAL_I2C_Init+0x84>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4a80      	ldr	r2, [pc, #512]	@ (8007b48 <HAL_I2C_Init+0x278>)
 8007948:	4293      	cmp	r3, r2
 800794a:	bf94      	ite	ls
 800794c:	2301      	movls	r3, #1
 800794e:	2300      	movhi	r3, #0
 8007950:	b2db      	uxtb	r3, r3
 8007952:	e006      	b.n	8007962 <HAL_I2C_Init+0x92>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4a7d      	ldr	r2, [pc, #500]	@ (8007b4c <HAL_I2C_Init+0x27c>)
 8007958:	4293      	cmp	r3, r2
 800795a:	bf94      	ite	ls
 800795c:	2301      	movls	r3, #1
 800795e:	2300      	movhi	r3, #0
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e0e7      	b.n	8007b3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	4a78      	ldr	r2, [pc, #480]	@ (8007b50 <HAL_I2C_Init+0x280>)
 800796e:	fba2 2303 	umull	r2, r3, r2, r3
 8007972:	0c9b      	lsrs	r3, r3, #18
 8007974:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	430a      	orrs	r2, r1
 8007988:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	4a6a      	ldr	r2, [pc, #424]	@ (8007b44 <HAL_I2C_Init+0x274>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d802      	bhi.n	80079a4 <HAL_I2C_Init+0xd4>
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	3301      	adds	r3, #1
 80079a2:	e009      	b.n	80079b8 <HAL_I2C_Init+0xe8>
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80079aa:	fb02 f303 	mul.w	r3, r2, r3
 80079ae:	4a69      	ldr	r2, [pc, #420]	@ (8007b54 <HAL_I2C_Init+0x284>)
 80079b0:	fba2 2303 	umull	r2, r3, r2, r3
 80079b4:	099b      	lsrs	r3, r3, #6
 80079b6:	3301      	adds	r3, #1
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	6812      	ldr	r2, [r2, #0]
 80079bc:	430b      	orrs	r3, r1
 80079be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80079ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	495c      	ldr	r1, [pc, #368]	@ (8007b44 <HAL_I2C_Init+0x274>)
 80079d4:	428b      	cmp	r3, r1
 80079d6:	d819      	bhi.n	8007a0c <HAL_I2C_Init+0x13c>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	1e59      	subs	r1, r3, #1
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80079e6:	1c59      	adds	r1, r3, #1
 80079e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80079ec:	400b      	ands	r3, r1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00a      	beq.n	8007a08 <HAL_I2C_Init+0x138>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	1e59      	subs	r1, r3, #1
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a00:	3301      	adds	r3, #1
 8007a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a06:	e051      	b.n	8007aac <HAL_I2C_Init+0x1dc>
 8007a08:	2304      	movs	r3, #4
 8007a0a:	e04f      	b.n	8007aac <HAL_I2C_Init+0x1dc>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d111      	bne.n	8007a38 <HAL_I2C_Init+0x168>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	1e58      	subs	r0, r3, #1
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6859      	ldr	r1, [r3, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	005b      	lsls	r3, r3, #1
 8007a20:	440b      	add	r3, r1
 8007a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a26:	3301      	adds	r3, #1
 8007a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	bf0c      	ite	eq
 8007a30:	2301      	moveq	r3, #1
 8007a32:	2300      	movne	r3, #0
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	e012      	b.n	8007a5e <HAL_I2C_Init+0x18e>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	1e58      	subs	r0, r3, #1
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6859      	ldr	r1, [r3, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	440b      	add	r3, r1
 8007a46:	0099      	lsls	r1, r3, #2
 8007a48:	440b      	add	r3, r1
 8007a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a4e:	3301      	adds	r3, #1
 8007a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	bf0c      	ite	eq
 8007a58:	2301      	moveq	r3, #1
 8007a5a:	2300      	movne	r3, #0
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <HAL_I2C_Init+0x196>
 8007a62:	2301      	movs	r3, #1
 8007a64:	e022      	b.n	8007aac <HAL_I2C_Init+0x1dc>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10e      	bne.n	8007a8c <HAL_I2C_Init+0x1bc>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	1e58      	subs	r0, r3, #1
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6859      	ldr	r1, [r3, #4]
 8007a76:	460b      	mov	r3, r1
 8007a78:	005b      	lsls	r3, r3, #1
 8007a7a:	440b      	add	r3, r1
 8007a7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a80:	3301      	adds	r3, #1
 8007a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a8a:	e00f      	b.n	8007aac <HAL_I2C_Init+0x1dc>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	1e58      	subs	r0, r3, #1
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6859      	ldr	r1, [r3, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	440b      	add	r3, r1
 8007a9a:	0099      	lsls	r1, r3, #2
 8007a9c:	440b      	add	r3, r1
 8007a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007aa8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007aac:	6879      	ldr	r1, [r7, #4]
 8007aae:	6809      	ldr	r1, [r1, #0]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	69da      	ldr	r2, [r3, #28]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007ada:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	6911      	ldr	r1, [r2, #16]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	68d2      	ldr	r2, [r2, #12]
 8007ae6:	4311      	orrs	r1, r2
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	6812      	ldr	r2, [r2, #0]
 8007aec:	430b      	orrs	r3, r1
 8007aee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	695a      	ldr	r2, [r3, #20]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f042 0201 	orr.w	r2, r2, #1
 8007b1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	000186a0 	.word	0x000186a0
 8007b48:	001e847f 	.word	0x001e847f
 8007b4c:	003d08ff 	.word	0x003d08ff
 8007b50:	431bde83 	.word	0x431bde83
 8007b54:	10624dd3 	.word	0x10624dd3

08007b58 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e021      	b.n	8007bae <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2224      	movs	r2, #36	@ 0x24
 8007b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f022 0201 	bic.w	r2, r2, #1
 8007b80:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7ff f87a 	bl	8006c7c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b088      	sub	sp, #32
 8007bbc:	af02      	add	r7, sp, #8
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	607a      	str	r2, [r7, #4]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	817b      	strh	r3, [r7, #10]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007bcc:	f7ff f9a0 	bl	8006f10 <HAL_GetTick>
 8007bd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	f040 80e0 	bne.w	8007da0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	2319      	movs	r3, #25
 8007be6:	2201      	movs	r2, #1
 8007be8:	4970      	ldr	r1, [pc, #448]	@ (8007dac <HAL_I2C_Master_Transmit+0x1f4>)
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 fe5c 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	e0d3      	b.n	8007da2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d101      	bne.n	8007c08 <HAL_I2C_Master_Transmit+0x50>
 8007c04:	2302      	movs	r3, #2
 8007c06:	e0cc      	b.n	8007da2 <HAL_I2C_Master_Transmit+0x1ea>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d007      	beq.n	8007c2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f042 0201 	orr.w	r2, r2, #1
 8007c2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2221      	movs	r2, #33	@ 0x21
 8007c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2210      	movs	r2, #16
 8007c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	893a      	ldrh	r2, [r7, #8]
 8007c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4a50      	ldr	r2, [pc, #320]	@ (8007db0 <HAL_I2C_Master_Transmit+0x1f8>)
 8007c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007c70:	8979      	ldrh	r1, [r7, #10]
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	6a3a      	ldr	r2, [r7, #32]
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f000 fc16 	bl	80084a8 <I2C_MasterRequestWrite>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e08d      	b.n	8007da2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c86:	2300      	movs	r3, #0
 8007c88:	613b      	str	r3, [r7, #16]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	613b      	str	r3, [r7, #16]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	613b      	str	r3, [r7, #16]
 8007c9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007c9c:	e066      	b.n	8007d6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	6a39      	ldr	r1, [r7, #32]
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 fed6 	bl	8008a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00d      	beq.n	8007cca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb2:	2b04      	cmp	r3, #4
 8007cb4:	d107      	bne.n	8007cc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e06b      	b.n	8007da2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cce:	781a      	ldrb	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cda:	1c5a      	adds	r2, r3, #1
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	f003 0304 	and.w	r3, r3, #4
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d11b      	bne.n	8007d40 <HAL_I2C_Master_Transmit+0x188>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d017      	beq.n	8007d40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d14:	781a      	ldrb	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d20:	1c5a      	adds	r2, r3, #1
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	6a39      	ldr	r1, [r7, #32]
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f000 fec6 	bl	8008ad6 <I2C_WaitOnBTFFlagUntilTimeout>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00d      	beq.n	8007d6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d107      	bne.n	8007d68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e01a      	b.n	8007da2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d194      	bne.n	8007c9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	e000      	b.n	8007da2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007da0:	2302      	movs	r3, #2
  }
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	00100002 	.word	0x00100002
 8007db0:	ffff0000 	.word	0xffff0000

08007db4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b088      	sub	sp, #32
 8007db8:	af02      	add	r7, sp, #8
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	4608      	mov	r0, r1
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	817b      	strh	r3, [r7, #10]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	813b      	strh	r3, [r7, #8]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007dce:	f7ff f89f 	bl	8006f10 <HAL_GetTick>
 8007dd2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b20      	cmp	r3, #32
 8007dde:	f040 80d9 	bne.w	8007f94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	2319      	movs	r3, #25
 8007de8:	2201      	movs	r2, #1
 8007dea:	496d      	ldr	r1, [pc, #436]	@ (8007fa0 <HAL_I2C_Mem_Write+0x1ec>)
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 fd5b 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d001      	beq.n	8007dfc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007df8:	2302      	movs	r3, #2
 8007dfa:	e0cc      	b.n	8007f96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d101      	bne.n	8007e0a <HAL_I2C_Mem_Write+0x56>
 8007e06:	2302      	movs	r3, #2
 8007e08:	e0c5      	b.n	8007f96 <HAL_I2C_Mem_Write+0x1e2>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d007      	beq.n	8007e30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0201 	orr.w	r2, r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2221      	movs	r2, #33	@ 0x21
 8007e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2240      	movs	r2, #64	@ 0x40
 8007e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6a3a      	ldr	r2, [r7, #32]
 8007e5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4a4d      	ldr	r2, [pc, #308]	@ (8007fa4 <HAL_I2C_Mem_Write+0x1f0>)
 8007e70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e72:	88f8      	ldrh	r0, [r7, #6]
 8007e74:	893a      	ldrh	r2, [r7, #8]
 8007e76:	8979      	ldrh	r1, [r7, #10]
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	9301      	str	r3, [sp, #4]
 8007e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	4603      	mov	r3, r0
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 fb92 	bl	80085ac <I2C_RequestMemoryWrite>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d052      	beq.n	8007f34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e081      	b.n	8007f96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 fddc 	bl	8008a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00d      	beq.n	8007ebe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea6:	2b04      	cmp	r3, #4
 8007ea8:	d107      	bne.n	8007eba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007eb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e06b      	b.n	8007f96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec2:	781a      	ldrb	r2, [r3, #0]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	f003 0304 	and.w	r3, r3, #4
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	d11b      	bne.n	8007f34 <HAL_I2C_Mem_Write+0x180>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d017      	beq.n	8007f34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f08:	781a      	ldrb	r2, [r3, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f14:	1c5a      	adds	r2, r3, #1
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1aa      	bne.n	8007e92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 fdc8 	bl	8008ad6 <I2C_WaitOnBTFFlagUntilTimeout>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00d      	beq.n	8007f68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d107      	bne.n	8007f64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e016      	b.n	8007f96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	e000      	b.n	8007f96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007f94:	2302      	movs	r3, #2
  }
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3718      	adds	r7, #24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	00100002 	.word	0x00100002
 8007fa4:	ffff0000 	.word	0xffff0000

08007fa8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08c      	sub	sp, #48	@ 0x30
 8007fac:	af02      	add	r7, sp, #8
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	4608      	mov	r0, r1
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	817b      	strh	r3, [r7, #10]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	813b      	strh	r3, [r7, #8]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007fc6:	f7fe ffa3 	bl	8006f10 <HAL_GetTick>
 8007fca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2b20      	cmp	r3, #32
 8007fd6:	f040 8244 	bne.w	8008462 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	2319      	movs	r3, #25
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	4982      	ldr	r1, [pc, #520]	@ (80081ec <HAL_I2C_Mem_Read+0x244>)
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 fc5f 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d001      	beq.n	8007ff4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	e237      	b.n	8008464 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d101      	bne.n	8008002 <HAL_I2C_Mem_Read+0x5a>
 8007ffe:	2302      	movs	r3, #2
 8008000:	e230      	b.n	8008464 <HAL_I2C_Mem_Read+0x4bc>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b01      	cmp	r3, #1
 8008016:	d007      	beq.n	8008028 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f042 0201 	orr.w	r2, r2, #1
 8008026:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008036:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2222      	movs	r2, #34	@ 0x22
 800803c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2240      	movs	r2, #64	@ 0x40
 8008044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008052:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008058:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800805e:	b29a      	uxth	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4a62      	ldr	r2, [pc, #392]	@ (80081f0 <HAL_I2C_Mem_Read+0x248>)
 8008068:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800806a:	88f8      	ldrh	r0, [r7, #6]
 800806c:	893a      	ldrh	r2, [r7, #8]
 800806e:	8979      	ldrh	r1, [r7, #10]
 8008070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008072:	9301      	str	r3, [sp, #4]
 8008074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	4603      	mov	r3, r0
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 fb2c 	bl	80086d8 <I2C_RequestMemoryRead>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e1ec      	b.n	8008464 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800808e:	2b00      	cmp	r3, #0
 8008090:	d113      	bne.n	80080ba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008092:	2300      	movs	r3, #0
 8008094:	61fb      	str	r3, [r7, #28]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	61fb      	str	r3, [r7, #28]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	61fb      	str	r3, [r7, #28]
 80080a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	e1c0      	b.n	800843c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d11e      	bne.n	8008100 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80080d2:	b672      	cpsid	i
}
 80080d4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080d6:	2300      	movs	r3, #0
 80080d8:	61bb      	str	r3, [r7, #24]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	61bb      	str	r3, [r7, #24]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	61bb      	str	r3, [r7, #24]
 80080ea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80080fc:	b662      	cpsie	i
}
 80080fe:	e035      	b.n	800816c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008104:	2b02      	cmp	r3, #2
 8008106:	d11e      	bne.n	8008146 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008116:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008118:	b672      	cpsid	i
}
 800811a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800811c:	2300      	movs	r3, #0
 800811e:	617b      	str	r3, [r7, #20]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	617b      	str	r3, [r7, #20]
 8008130:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008140:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008142:	b662      	cpsie	i
}
 8008144:	e012      	b.n	800816c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008154:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008156:	2300      	movs	r3, #0
 8008158:	613b      	str	r3, [r7, #16]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	613b      	str	r3, [r7, #16]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	613b      	str	r3, [r7, #16]
 800816a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800816c:	e166      	b.n	800843c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008172:	2b03      	cmp	r3, #3
 8008174:	f200 811f 	bhi.w	80083b6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800817c:	2b01      	cmp	r3, #1
 800817e:	d123      	bne.n	80081c8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008182:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 fce7 	bl	8008b58 <I2C_WaitOnRXNEFlagUntilTimeout>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d001      	beq.n	8008194 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e167      	b.n	8008464 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	691a      	ldr	r2, [r3, #16]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800819e:	b2d2      	uxtb	r2, r2
 80081a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081a6:	1c5a      	adds	r2, r3, #1
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081b0:	3b01      	subs	r3, #1
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081bc:	b29b      	uxth	r3, r3
 80081be:	3b01      	subs	r3, #1
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80081c6:	e139      	b.n	800843c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d152      	bne.n	8008276 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d6:	2200      	movs	r2, #0
 80081d8:	4906      	ldr	r1, [pc, #24]	@ (80081f4 <HAL_I2C_Mem_Read+0x24c>)
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 fb64 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d008      	beq.n	80081f8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e13c      	b.n	8008464 <HAL_I2C_Mem_Read+0x4bc>
 80081ea:	bf00      	nop
 80081ec:	00100002 	.word	0x00100002
 80081f0:	ffff0000 	.word	0xffff0000
 80081f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80081f8:	b672      	cpsid	i
}
 80081fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800820a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	691a      	ldr	r2, [r3, #16]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008216:	b2d2      	uxtb	r2, r2
 8008218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008228:	3b01      	subs	r3, #1
 800822a:	b29a      	uxth	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008234:	b29b      	uxth	r3, r3
 8008236:	3b01      	subs	r3, #1
 8008238:	b29a      	uxth	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800823e:	b662      	cpsie	i
}
 8008240:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	691a      	ldr	r2, [r3, #16]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800824c:	b2d2      	uxtb	r2, r2
 800824e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008254:	1c5a      	adds	r2, r3, #1
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800825e:	3b01      	subs	r3, #1
 8008260:	b29a      	uxth	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800826a:	b29b      	uxth	r3, r3
 800826c:	3b01      	subs	r3, #1
 800826e:	b29a      	uxth	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008274:	e0e2      	b.n	800843c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827c:	2200      	movs	r2, #0
 800827e:	497b      	ldr	r1, [pc, #492]	@ (800846c <HAL_I2C_Mem_Read+0x4c4>)
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 fb11 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e0e9      	b.n	8008464 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800829e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80082a0:	b672      	cpsid	i
}
 80082a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	691a      	ldr	r2, [r3, #16]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ae:	b2d2      	uxtb	r2, r2
 80082b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b6:	1c5a      	adds	r2, r3, #1
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082c0:	3b01      	subs	r3, #1
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	3b01      	subs	r3, #1
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80082d6:	4b66      	ldr	r3, [pc, #408]	@ (8008470 <HAL_I2C_Mem_Read+0x4c8>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	08db      	lsrs	r3, r3, #3
 80082dc:	4a65      	ldr	r2, [pc, #404]	@ (8008474 <HAL_I2C_Mem_Read+0x4cc>)
 80082de:	fba2 2303 	umull	r2, r3, r2, r3
 80082e2:	0a1a      	lsrs	r2, r3, #8
 80082e4:	4613      	mov	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	00da      	lsls	r2, r3, #3
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	3b01      	subs	r3, #1
 80082f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80082f6:	6a3b      	ldr	r3, [r7, #32]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d118      	bne.n	800832e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2220      	movs	r2, #32
 8008306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008316:	f043 0220 	orr.w	r2, r3, #32
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800831e:	b662      	cpsie	i
}
 8008320:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e09a      	b.n	8008464 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	695b      	ldr	r3, [r3, #20]
 8008334:	f003 0304 	and.w	r3, r3, #4
 8008338:	2b04      	cmp	r3, #4
 800833a:	d1d9      	bne.n	80082f0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800834a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	691a      	ldr	r2, [r3, #16]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008356:	b2d2      	uxtb	r2, r2
 8008358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008368:	3b01      	subs	r3, #1
 800836a:	b29a      	uxth	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008374:	b29b      	uxth	r3, r3
 8008376:	3b01      	subs	r3, #1
 8008378:	b29a      	uxth	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800837e:	b662      	cpsie	i
}
 8008380:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	691a      	ldr	r2, [r3, #16]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838c:	b2d2      	uxtb	r2, r2
 800838e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800839e:	3b01      	subs	r3, #1
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	3b01      	subs	r3, #1
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80083b4:	e042      	b.n	800843c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f000 fbcc 	bl	8008b58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e04c      	b.n	8008464 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	691a      	ldr	r2, [r3, #16]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d4:	b2d2      	uxtb	r2, r2
 80083d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083dc:	1c5a      	adds	r2, r3, #1
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083e6:	3b01      	subs	r3, #1
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	3b01      	subs	r3, #1
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	f003 0304 	and.w	r3, r3, #4
 8008406:	2b04      	cmp	r3, #4
 8008408:	d118      	bne.n	800843c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	691a      	ldr	r2, [r3, #16]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008414:	b2d2      	uxtb	r2, r2
 8008416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841c:	1c5a      	adds	r2, r3, #1
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008426:	3b01      	subs	r3, #1
 8008428:	b29a      	uxth	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008432:	b29b      	uxth	r3, r3
 8008434:	3b01      	subs	r3, #1
 8008436:	b29a      	uxth	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008440:	2b00      	cmp	r3, #0
 8008442:	f47f ae94 	bne.w	800816e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2220      	movs	r2, #32
 800844a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	e000      	b.n	8008464 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8008462:	2302      	movs	r3, #2
  }
}
 8008464:	4618      	mov	r0, r3
 8008466:	3728      	adds	r7, #40	@ 0x28
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	00010004 	.word	0x00010004
 8008470:	20000034 	.word	0x20000034
 8008474:	14f8b589 	.word	0x14f8b589

08008478 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008486:	b2db      	uxtb	r3, r3
}
 8008488:	4618      	mov	r0, r3
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	bc80      	pop	{r7}
 8008490:	4770      	bx	lr

08008492 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bc80      	pop	{r7}
 80084a6:	4770      	bx	lr

080084a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b088      	sub	sp, #32
 80084ac:	af02      	add	r7, sp, #8
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	607a      	str	r2, [r7, #4]
 80084b2:	603b      	str	r3, [r7, #0]
 80084b4:	460b      	mov	r3, r1
 80084b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	d006      	beq.n	80084d2 <I2C_MasterRequestWrite+0x2a>
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d003      	beq.n	80084d2 <I2C_MasterRequestWrite+0x2a>
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80084d0:	d108      	bne.n	80084e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	e00b      	b.n	80084fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e8:	2b12      	cmp	r3, #18
 80084ea:	d107      	bne.n	80084fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80084fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f000 f9cd 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00d      	beq.n	8008530 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800851e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008522:	d103      	bne.n	800852c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800852a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e035      	b.n	800859c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008538:	d108      	bne.n	800854c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800853a:	897b      	ldrh	r3, [r7, #10]
 800853c:	b2db      	uxtb	r3, r3
 800853e:	461a      	mov	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008548:	611a      	str	r2, [r3, #16]
 800854a:	e01b      	b.n	8008584 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800854c:	897b      	ldrh	r3, [r7, #10]
 800854e:	11db      	asrs	r3, r3, #7
 8008550:	b2db      	uxtb	r3, r3
 8008552:	f003 0306 	and.w	r3, r3, #6
 8008556:	b2db      	uxtb	r3, r3
 8008558:	f063 030f 	orn	r3, r3, #15
 800855c:	b2da      	uxtb	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	490e      	ldr	r1, [pc, #56]	@ (80085a4 <I2C_MasterRequestWrite+0xfc>)
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 f9f3 	bl	8008956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e010      	b.n	800859c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800857a:	897b      	ldrh	r3, [r7, #10]
 800857c:	b2da      	uxtb	r2, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	4907      	ldr	r1, [pc, #28]	@ (80085a8 <I2C_MasterRequestWrite+0x100>)
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 f9e3 	bl	8008956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e000      	b.n	800859c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	00010008 	.word	0x00010008
 80085a8:	00010002 	.word	0x00010002

080085ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af02      	add	r7, sp, #8
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	4608      	mov	r0, r1
 80085b6:	4611      	mov	r1, r2
 80085b8:	461a      	mov	r2, r3
 80085ba:	4603      	mov	r3, r0
 80085bc:	817b      	strh	r3, [r7, #10]
 80085be:	460b      	mov	r3, r1
 80085c0:	813b      	strh	r3, [r7, #8]
 80085c2:	4613      	mov	r3, r2
 80085c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	2200      	movs	r2, #0
 80085de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f000 f960 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00d      	beq.n	800860a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085fc:	d103      	bne.n	8008606 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008604:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e05f      	b.n	80086ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800860a:	897b      	ldrh	r3, [r7, #10]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	461a      	mov	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008618:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800861a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861c:	6a3a      	ldr	r2, [r7, #32]
 800861e:	492d      	ldr	r1, [pc, #180]	@ (80086d4 <I2C_RequestMemoryWrite+0x128>)
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 f998 	bl	8008956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d001      	beq.n	8008630 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e04c      	b.n	80086ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008630:	2300      	movs	r3, #0
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	617b      	str	r3, [r7, #20]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	617b      	str	r3, [r7, #20]
 8008644:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008648:	6a39      	ldr	r1, [r7, #32]
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 fa02 	bl	8008a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00d      	beq.n	8008672 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800865a:	2b04      	cmp	r3, #4
 800865c:	d107      	bne.n	800866e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800866c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e02b      	b.n	80086ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008672:	88fb      	ldrh	r3, [r7, #6]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d105      	bne.n	8008684 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008678:	893b      	ldrh	r3, [r7, #8]
 800867a:	b2da      	uxtb	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	611a      	str	r2, [r3, #16]
 8008682:	e021      	b.n	80086c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008684:	893b      	ldrh	r3, [r7, #8]
 8008686:	0a1b      	lsrs	r3, r3, #8
 8008688:	b29b      	uxth	r3, r3
 800868a:	b2da      	uxtb	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008694:	6a39      	ldr	r1, [r7, #32]
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f000 f9dc 	bl	8008a54 <I2C_WaitOnTXEFlagUntilTimeout>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00d      	beq.n	80086be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a6:	2b04      	cmp	r3, #4
 80086a8:	d107      	bne.n	80086ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e005      	b.n	80086ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086be:	893b      	ldrh	r3, [r7, #8]
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	00010002 	.word	0x00010002

080086d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af02      	add	r7, sp, #8
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	4608      	mov	r0, r1
 80086e2:	4611      	mov	r1, r2
 80086e4:	461a      	mov	r2, r3
 80086e6:	4603      	mov	r3, r0
 80086e8:	817b      	strh	r3, [r7, #10]
 80086ea:	460b      	mov	r3, r1
 80086ec:	813b      	strh	r3, [r7, #8]
 80086ee:	4613      	mov	r3, r2
 80086f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008700:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008710:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	2200      	movs	r2, #0
 800871a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f000 f8c2 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00d      	beq.n	8008746 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008734:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008738:	d103      	bne.n	8008742 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008740:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e0aa      	b.n	800889c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008746:	897b      	ldrh	r3, [r7, #10]
 8008748:	b2db      	uxtb	r3, r3
 800874a:	461a      	mov	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008754:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008758:	6a3a      	ldr	r2, [r7, #32]
 800875a:	4952      	ldr	r1, [pc, #328]	@ (80088a4 <I2C_RequestMemoryRead+0x1cc>)
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 f8fa 	bl	8008956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e097      	b.n	800889c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800876c:	2300      	movs	r3, #0
 800876e:	617b      	str	r3, [r7, #20]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	617b      	str	r3, [r7, #20]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	617b      	str	r3, [r7, #20]
 8008780:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008784:	6a39      	ldr	r1, [r7, #32]
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 f964 	bl	8008a54 <I2C_WaitOnTXEFlagUntilTimeout>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00d      	beq.n	80087ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008796:	2b04      	cmp	r3, #4
 8008798:	d107      	bne.n	80087aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e076      	b.n	800889c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80087ae:	88fb      	ldrh	r3, [r7, #6]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d105      	bne.n	80087c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80087b4:	893b      	ldrh	r3, [r7, #8]
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	611a      	str	r2, [r3, #16]
 80087be:	e021      	b.n	8008804 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80087c0:	893b      	ldrh	r3, [r7, #8]
 80087c2:	0a1b      	lsrs	r3, r3, #8
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087d0:	6a39      	ldr	r1, [r7, #32]
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 f93e 	bl	8008a54 <I2C_WaitOnTXEFlagUntilTimeout>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00d      	beq.n	80087fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e2:	2b04      	cmp	r3, #4
 80087e4:	d107      	bne.n	80087f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e050      	b.n	800889c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80087fa:	893b      	ldrh	r3, [r7, #8]
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008806:	6a39      	ldr	r1, [r7, #32]
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f000 f923 	bl	8008a54 <I2C_WaitOnTXEFlagUntilTimeout>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00d      	beq.n	8008830 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008818:	2b04      	cmp	r3, #4
 800881a:	d107      	bne.n	800882c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800882a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e035      	b.n	800889c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800883e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	6a3b      	ldr	r3, [r7, #32]
 8008846:	2200      	movs	r2, #0
 8008848:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f000 f82b 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00d      	beq.n	8008874 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008866:	d103      	bne.n	8008870 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800886e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e013      	b.n	800889c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008874:	897b      	ldrh	r3, [r7, #10]
 8008876:	b2db      	uxtb	r3, r3
 8008878:	f043 0301 	orr.w	r3, r3, #1
 800887c:	b2da      	uxtb	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008886:	6a3a      	ldr	r2, [r7, #32]
 8008888:	4906      	ldr	r1, [pc, #24]	@ (80088a4 <I2C_RequestMemoryRead+0x1cc>)
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f000 f863 	bl	8008956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e000      	b.n	800889c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3718      	adds	r7, #24
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	00010002 	.word	0x00010002

080088a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	603b      	str	r3, [r7, #0]
 80088b4:	4613      	mov	r3, r2
 80088b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088b8:	e025      	b.n	8008906 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088c0:	d021      	beq.n	8008906 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088c2:	f7fe fb25 	bl	8006f10 <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d302      	bcc.n	80088d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d116      	bne.n	8008906 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f2:	f043 0220 	orr.w	r2, r3, #32
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e023      	b.n	800894e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	0c1b      	lsrs	r3, r3, #16
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b01      	cmp	r3, #1
 800890e:	d10d      	bne.n	800892c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	43da      	mvns	r2, r3
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	4013      	ands	r3, r2
 800891c:	b29b      	uxth	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	bf0c      	ite	eq
 8008922:	2301      	moveq	r3, #1
 8008924:	2300      	movne	r3, #0
 8008926:	b2db      	uxtb	r3, r3
 8008928:	461a      	mov	r2, r3
 800892a:	e00c      	b.n	8008946 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	43da      	mvns	r2, r3
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	4013      	ands	r3, r2
 8008938:	b29b      	uxth	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	bf0c      	ite	eq
 800893e:	2301      	moveq	r3, #1
 8008940:	2300      	movne	r3, #0
 8008942:	b2db      	uxtb	r3, r3
 8008944:	461a      	mov	r2, r3
 8008946:	79fb      	ldrb	r3, [r7, #7]
 8008948:	429a      	cmp	r2, r3
 800894a:	d0b6      	beq.n	80088ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	60f8      	str	r0, [r7, #12]
 800895e:	60b9      	str	r1, [r7, #8]
 8008960:	607a      	str	r2, [r7, #4]
 8008962:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008964:	e051      	b.n	8008a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	695b      	ldr	r3, [r3, #20]
 800896c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008974:	d123      	bne.n	80089be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008984:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800898e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2220      	movs	r2, #32
 800899a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089aa:	f043 0204 	orr.w	r2, r3, #4
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e046      	b.n	8008a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089c4:	d021      	beq.n	8008a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089c6:	f7fe faa3 	bl	8006f10 <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d302      	bcc.n	80089dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d116      	bne.n	8008a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2220      	movs	r2, #32
 80089e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f6:	f043 0220 	orr.w	r2, r3, #32
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e020      	b.n	8008a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	0c1b      	lsrs	r3, r3, #16
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d10c      	bne.n	8008a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	43da      	mvns	r2, r3
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	4013      	ands	r3, r2
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	bf14      	ite	ne
 8008a26:	2301      	movne	r3, #1
 8008a28:	2300      	moveq	r3, #0
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	e00b      	b.n	8008a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	43da      	mvns	r2, r3
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	4013      	ands	r3, r2
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	bf14      	ite	ne
 8008a40:	2301      	movne	r3, #1
 8008a42:	2300      	moveq	r3, #0
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d18d      	bne.n	8008966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a60:	e02d      	b.n	8008abe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f000 f8ce 	bl	8008c04 <I2C_IsAcknowledgeFailed>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e02d      	b.n	8008ace <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a78:	d021      	beq.n	8008abe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a7a:	f7fe fa49 	bl	8006f10 <HAL_GetTick>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d302      	bcc.n	8008a90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d116      	bne.n	8008abe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aaa:	f043 0220 	orr.w	r2, r3, #32
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e007      	b.n	8008ace <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ac8:	2b80      	cmp	r3, #128	@ 0x80
 8008aca:	d1ca      	bne.n	8008a62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	60f8      	str	r0, [r7, #12]
 8008ade:	60b9      	str	r1, [r7, #8]
 8008ae0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ae2:	e02d      	b.n	8008b40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 f88d 	bl	8008c04 <I2C_IsAcknowledgeFailed>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e02d      	b.n	8008b50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008afa:	d021      	beq.n	8008b40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008afc:	f7fe fa08 	bl	8006f10 <HAL_GetTick>
 8008b00:	4602      	mov	r2, r0
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d302      	bcc.n	8008b12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d116      	bne.n	8008b40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b2c:	f043 0220 	orr.w	r2, r3, #32
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e007      	b.n	8008b50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	f003 0304 	and.w	r3, r3, #4
 8008b4a:	2b04      	cmp	r3, #4
 8008b4c:	d1ca      	bne.n	8008ae4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b64:	e042      	b.n	8008bec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	695b      	ldr	r3, [r3, #20]
 8008b6c:	f003 0310 	and.w	r3, r3, #16
 8008b70:	2b10      	cmp	r3, #16
 8008b72:	d119      	bne.n	8008ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f06f 0210 	mvn.w	r2, #16
 8008b7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2220      	movs	r2, #32
 8008b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e029      	b.n	8008bfc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ba8:	f7fe f9b2 	bl	8006f10 <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d302      	bcc.n	8008bbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d116      	bne.n	8008bec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2220      	movs	r2, #32
 8008bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd8:	f043 0220 	orr.w	r2, r3, #32
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e007      	b.n	8008bfc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bf6:	2b40      	cmp	r3, #64	@ 0x40
 8008bf8:	d1b5      	bne.n	8008b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c1a:	d11b      	bne.n	8008c54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008c24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2220      	movs	r2, #32
 8008c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c40:	f043 0204 	orr.w	r2, r3, #4
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e000      	b.n	8008c56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bc80      	pop	{r7}
 8008c5e:	4770      	bx	lr

08008c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e272      	b.n	8009158 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 8087 	beq.w	8008d8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008c80:	4b92      	ldr	r3, [pc, #584]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f003 030c 	and.w	r3, r3, #12
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	d00c      	beq.n	8008ca6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008c8c:	4b8f      	ldr	r3, [pc, #572]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f003 030c 	and.w	r3, r3, #12
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	d112      	bne.n	8008cbe <HAL_RCC_OscConfig+0x5e>
 8008c98:	4b8c      	ldr	r3, [pc, #560]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ca4:	d10b      	bne.n	8008cbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ca6:	4b89      	ldr	r3, [pc, #548]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d06c      	beq.n	8008d8c <HAL_RCC_OscConfig+0x12c>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d168      	bne.n	8008d8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e24c      	b.n	8009158 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cc6:	d106      	bne.n	8008cd6 <HAL_RCC_OscConfig+0x76>
 8008cc8:	4b80      	ldr	r3, [pc, #512]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a7f      	ldr	r2, [pc, #508]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008cce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008cd2:	6013      	str	r3, [r2, #0]
 8008cd4:	e02e      	b.n	8008d34 <HAL_RCC_OscConfig+0xd4>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10c      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x98>
 8008cde:	4b7b      	ldr	r3, [pc, #492]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a7a      	ldr	r2, [pc, #488]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008ce4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ce8:	6013      	str	r3, [r2, #0]
 8008cea:	4b78      	ldr	r3, [pc, #480]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a77      	ldr	r2, [pc, #476]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008cf0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008cf4:	6013      	str	r3, [r2, #0]
 8008cf6:	e01d      	b.n	8008d34 <HAL_RCC_OscConfig+0xd4>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d00:	d10c      	bne.n	8008d1c <HAL_RCC_OscConfig+0xbc>
 8008d02:	4b72      	ldr	r3, [pc, #456]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a71      	ldr	r2, [pc, #452]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008d0c:	6013      	str	r3, [r2, #0]
 8008d0e:	4b6f      	ldr	r3, [pc, #444]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a6e      	ldr	r2, [pc, #440]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	e00b      	b.n	8008d34 <HAL_RCC_OscConfig+0xd4>
 8008d1c:	4b6b      	ldr	r3, [pc, #428]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a6a      	ldr	r2, [pc, #424]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	4b68      	ldr	r3, [pc, #416]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a67      	ldr	r2, [pc, #412]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d013      	beq.n	8008d64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d3c:	f7fe f8e8 	bl	8006f10 <HAL_GetTick>
 8008d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d42:	e008      	b.n	8008d56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d44:	f7fe f8e4 	bl	8006f10 <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	2b64      	cmp	r3, #100	@ 0x64
 8008d50:	d901      	bls.n	8008d56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e200      	b.n	8009158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d56:	4b5d      	ldr	r3, [pc, #372]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0f0      	beq.n	8008d44 <HAL_RCC_OscConfig+0xe4>
 8008d62:	e014      	b.n	8008d8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d64:	f7fe f8d4 	bl	8006f10 <HAL_GetTick>
 8008d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d6a:	e008      	b.n	8008d7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d6c:	f7fe f8d0 	bl	8006f10 <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	2b64      	cmp	r3, #100	@ 0x64
 8008d78:	d901      	bls.n	8008d7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e1ec      	b.n	8009158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d7e:	4b53      	ldr	r3, [pc, #332]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f0      	bne.n	8008d6c <HAL_RCC_OscConfig+0x10c>
 8008d8a:	e000      	b.n	8008d8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d063      	beq.n	8008e62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d9a:	4b4c      	ldr	r3, [pc, #304]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	f003 030c 	and.w	r3, r3, #12
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00b      	beq.n	8008dbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008da6:	4b49      	ldr	r3, [pc, #292]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	f003 030c 	and.w	r3, r3, #12
 8008dae:	2b08      	cmp	r3, #8
 8008db0:	d11c      	bne.n	8008dec <HAL_RCC_OscConfig+0x18c>
 8008db2:	4b46      	ldr	r3, [pc, #280]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d116      	bne.n	8008dec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008dbe:	4b43      	ldr	r3, [pc, #268]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 0302 	and.w	r3, r3, #2
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d005      	beq.n	8008dd6 <HAL_RCC_OscConfig+0x176>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d001      	beq.n	8008dd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e1c0      	b.n	8009158 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	4939      	ldr	r1, [pc, #228]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008dea:	e03a      	b.n	8008e62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d020      	beq.n	8008e36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008df4:	4b36      	ldr	r3, [pc, #216]	@ (8008ed0 <HAL_RCC_OscConfig+0x270>)
 8008df6:	2201      	movs	r2, #1
 8008df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dfa:	f7fe f889 	bl	8006f10 <HAL_GetTick>
 8008dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e00:	e008      	b.n	8008e14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e02:	f7fe f885 	bl	8006f10 <HAL_GetTick>
 8008e06:	4602      	mov	r2, r0
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	1ad3      	subs	r3, r2, r3
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d901      	bls.n	8008e14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e1a1      	b.n	8009158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e14:	4b2d      	ldr	r3, [pc, #180]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d0f0      	beq.n	8008e02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e20:	4b2a      	ldr	r3, [pc, #168]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	695b      	ldr	r3, [r3, #20]
 8008e2c:	00db      	lsls	r3, r3, #3
 8008e2e:	4927      	ldr	r1, [pc, #156]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008e30:	4313      	orrs	r3, r2
 8008e32:	600b      	str	r3, [r1, #0]
 8008e34:	e015      	b.n	8008e62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e36:	4b26      	ldr	r3, [pc, #152]	@ (8008ed0 <HAL_RCC_OscConfig+0x270>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e3c:	f7fe f868 	bl	8006f10 <HAL_GetTick>
 8008e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e42:	e008      	b.n	8008e56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e44:	f7fe f864 	bl	8006f10 <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d901      	bls.n	8008e56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e180      	b.n	8009158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e56:	4b1d      	ldr	r3, [pc, #116]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 0302 	and.w	r3, r3, #2
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1f0      	bne.n	8008e44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 0308 	and.w	r3, r3, #8
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d03a      	beq.n	8008ee4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d019      	beq.n	8008eaa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e76:	4b17      	ldr	r3, [pc, #92]	@ (8008ed4 <HAL_RCC_OscConfig+0x274>)
 8008e78:	2201      	movs	r2, #1
 8008e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e7c:	f7fe f848 	bl	8006f10 <HAL_GetTick>
 8008e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e82:	e008      	b.n	8008e96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e84:	f7fe f844 	bl	8006f10 <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d901      	bls.n	8008e96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e160      	b.n	8009158 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e96:	4b0d      	ldr	r3, [pc, #52]	@ (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9a:	f003 0302 	and.w	r3, r3, #2
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d0f0      	beq.n	8008e84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008ea2:	2001      	movs	r0, #1
 8008ea4:	f000 fad8 	bl	8009458 <RCC_Delay>
 8008ea8:	e01c      	b.n	8008ee4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8008ed4 <HAL_RCC_OscConfig+0x274>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008eb0:	f7fe f82e 	bl	8006f10 <HAL_GetTick>
 8008eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008eb6:	e00f      	b.n	8008ed8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008eb8:	f7fe f82a 	bl	8006f10 <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d908      	bls.n	8008ed8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e146      	b.n	8009158 <HAL_RCC_OscConfig+0x4f8>
 8008eca:	bf00      	nop
 8008ecc:	40021000 	.word	0x40021000
 8008ed0:	42420000 	.word	0x42420000
 8008ed4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ed8:	4b92      	ldr	r3, [pc, #584]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008edc:	f003 0302 	and.w	r3, r3, #2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1e9      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0304 	and.w	r3, r3, #4
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 80a6 	beq.w	800903e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ef6:	4b8b      	ldr	r3, [pc, #556]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10d      	bne.n	8008f1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f02:	4b88      	ldr	r3, [pc, #544]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008f04:	69db      	ldr	r3, [r3, #28]
 8008f06:	4a87      	ldr	r2, [pc, #540]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f0c:	61d3      	str	r3, [r2, #28]
 8008f0e:	4b85      	ldr	r3, [pc, #532]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f16:	60bb      	str	r3, [r7, #8]
 8008f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f1e:	4b82      	ldr	r3, [pc, #520]	@ (8009128 <HAL_RCC_OscConfig+0x4c8>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d118      	bne.n	8008f5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f2a:	4b7f      	ldr	r3, [pc, #508]	@ (8009128 <HAL_RCC_OscConfig+0x4c8>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a7e      	ldr	r2, [pc, #504]	@ (8009128 <HAL_RCC_OscConfig+0x4c8>)
 8008f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f36:	f7fd ffeb 	bl	8006f10 <HAL_GetTick>
 8008f3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f3c:	e008      	b.n	8008f50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f3e:	f7fd ffe7 	bl	8006f10 <HAL_GetTick>
 8008f42:	4602      	mov	r2, r0
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	2b64      	cmp	r3, #100	@ 0x64
 8008f4a:	d901      	bls.n	8008f50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e103      	b.n	8009158 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f50:	4b75      	ldr	r3, [pc, #468]	@ (8009128 <HAL_RCC_OscConfig+0x4c8>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d0f0      	beq.n	8008f3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d106      	bne.n	8008f72 <HAL_RCC_OscConfig+0x312>
 8008f64:	4b6f      	ldr	r3, [pc, #444]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008f66:	6a1b      	ldr	r3, [r3, #32]
 8008f68:	4a6e      	ldr	r2, [pc, #440]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008f6a:	f043 0301 	orr.w	r3, r3, #1
 8008f6e:	6213      	str	r3, [r2, #32]
 8008f70:	e02d      	b.n	8008fce <HAL_RCC_OscConfig+0x36e>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d10c      	bne.n	8008f94 <HAL_RCC_OscConfig+0x334>
 8008f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	4a69      	ldr	r2, [pc, #420]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008f80:	f023 0301 	bic.w	r3, r3, #1
 8008f84:	6213      	str	r3, [r2, #32]
 8008f86:	4b67      	ldr	r3, [pc, #412]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	4a66      	ldr	r2, [pc, #408]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008f8c:	f023 0304 	bic.w	r3, r3, #4
 8008f90:	6213      	str	r3, [r2, #32]
 8008f92:	e01c      	b.n	8008fce <HAL_RCC_OscConfig+0x36e>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	2b05      	cmp	r3, #5
 8008f9a:	d10c      	bne.n	8008fb6 <HAL_RCC_OscConfig+0x356>
 8008f9c:	4b61      	ldr	r3, [pc, #388]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008f9e:	6a1b      	ldr	r3, [r3, #32]
 8008fa0:	4a60      	ldr	r2, [pc, #384]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008fa2:	f043 0304 	orr.w	r3, r3, #4
 8008fa6:	6213      	str	r3, [r2, #32]
 8008fa8:	4b5e      	ldr	r3, [pc, #376]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008faa:	6a1b      	ldr	r3, [r3, #32]
 8008fac:	4a5d      	ldr	r2, [pc, #372]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008fae:	f043 0301 	orr.w	r3, r3, #1
 8008fb2:	6213      	str	r3, [r2, #32]
 8008fb4:	e00b      	b.n	8008fce <HAL_RCC_OscConfig+0x36e>
 8008fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008fb8:	6a1b      	ldr	r3, [r3, #32]
 8008fba:	4a5a      	ldr	r2, [pc, #360]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008fbc:	f023 0301 	bic.w	r3, r3, #1
 8008fc0:	6213      	str	r3, [r2, #32]
 8008fc2:	4b58      	ldr	r3, [pc, #352]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	4a57      	ldr	r2, [pc, #348]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008fc8:	f023 0304 	bic.w	r3, r3, #4
 8008fcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d015      	beq.n	8009002 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008fd6:	f7fd ff9b 	bl	8006f10 <HAL_GetTick>
 8008fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fdc:	e00a      	b.n	8008ff4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fde:	f7fd ff97 	bl	8006f10 <HAL_GetTick>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d901      	bls.n	8008ff4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e0b1      	b.n	8009158 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8008ff6:	6a1b      	ldr	r3, [r3, #32]
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d0ee      	beq.n	8008fde <HAL_RCC_OscConfig+0x37e>
 8009000:	e014      	b.n	800902c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009002:	f7fd ff85 	bl	8006f10 <HAL_GetTick>
 8009006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009008:	e00a      	b.n	8009020 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800900a:	f7fd ff81 	bl	8006f10 <HAL_GetTick>
 800900e:	4602      	mov	r2, r0
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009018:	4293      	cmp	r3, r2
 800901a:	d901      	bls.n	8009020 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e09b      	b.n	8009158 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009020:	4b40      	ldr	r3, [pc, #256]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8009022:	6a1b      	ldr	r3, [r3, #32]
 8009024:	f003 0302 	and.w	r3, r3, #2
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1ee      	bne.n	800900a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800902c:	7dfb      	ldrb	r3, [r7, #23]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d105      	bne.n	800903e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009032:	4b3c      	ldr	r3, [pc, #240]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	4a3b      	ldr	r2, [pc, #236]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8009038:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800903c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	69db      	ldr	r3, [r3, #28]
 8009042:	2b00      	cmp	r3, #0
 8009044:	f000 8087 	beq.w	8009156 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009048:	4b36      	ldr	r3, [pc, #216]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f003 030c 	and.w	r3, r3, #12
 8009050:	2b08      	cmp	r3, #8
 8009052:	d061      	beq.n	8009118 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	2b02      	cmp	r3, #2
 800905a:	d146      	bne.n	80090ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800905c:	4b33      	ldr	r3, [pc, #204]	@ (800912c <HAL_RCC_OscConfig+0x4cc>)
 800905e:	2200      	movs	r2, #0
 8009060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009062:	f7fd ff55 	bl	8006f10 <HAL_GetTick>
 8009066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009068:	e008      	b.n	800907c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800906a:	f7fd ff51 	bl	8006f10 <HAL_GetTick>
 800906e:	4602      	mov	r2, r0
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	1ad3      	subs	r3, r2, r3
 8009074:	2b02      	cmp	r3, #2
 8009076:	d901      	bls.n	800907c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009078:	2303      	movs	r3, #3
 800907a:	e06d      	b.n	8009158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800907c:	4b29      	ldr	r3, [pc, #164]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1f0      	bne.n	800906a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009090:	d108      	bne.n	80090a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009092:	4b24      	ldr	r3, [pc, #144]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	4921      	ldr	r1, [pc, #132]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 80090a0:	4313      	orrs	r3, r2
 80090a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80090a4:	4b1f      	ldr	r3, [pc, #124]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a19      	ldr	r1, [r3, #32]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b4:	430b      	orrs	r3, r1
 80090b6:	491b      	ldr	r1, [pc, #108]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090bc:	4b1b      	ldr	r3, [pc, #108]	@ (800912c <HAL_RCC_OscConfig+0x4cc>)
 80090be:	2201      	movs	r2, #1
 80090c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090c2:	f7fd ff25 	bl	8006f10 <HAL_GetTick>
 80090c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80090c8:	e008      	b.n	80090dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090ca:	f7fd ff21 	bl	8006f10 <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d901      	bls.n	80090dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e03d      	b.n	8009158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80090dc:	4b11      	ldr	r3, [pc, #68]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d0f0      	beq.n	80090ca <HAL_RCC_OscConfig+0x46a>
 80090e8:	e035      	b.n	8009156 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090ea:	4b10      	ldr	r3, [pc, #64]	@ (800912c <HAL_RCC_OscConfig+0x4cc>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090f0:	f7fd ff0e 	bl	8006f10 <HAL_GetTick>
 80090f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80090f6:	e008      	b.n	800910a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090f8:	f7fd ff0a 	bl	8006f10 <HAL_GetTick>
 80090fc:	4602      	mov	r2, r0
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	2b02      	cmp	r3, #2
 8009104:	d901      	bls.n	800910a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e026      	b.n	8009158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800910a:	4b06      	ldr	r3, [pc, #24]	@ (8009124 <HAL_RCC_OscConfig+0x4c4>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1f0      	bne.n	80090f8 <HAL_RCC_OscConfig+0x498>
 8009116:	e01e      	b.n	8009156 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	69db      	ldr	r3, [r3, #28]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d107      	bne.n	8009130 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e019      	b.n	8009158 <HAL_RCC_OscConfig+0x4f8>
 8009124:	40021000 	.word	0x40021000
 8009128:	40007000 	.word	0x40007000
 800912c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009130:	4b0b      	ldr	r3, [pc, #44]	@ (8009160 <HAL_RCC_OscConfig+0x500>)
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	429a      	cmp	r2, r3
 8009142:	d106      	bne.n	8009152 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800914e:	429a      	cmp	r2, r3
 8009150:	d001      	beq.n	8009156 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e000      	b.n	8009158 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	40021000 	.word	0x40021000

08009164 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d101      	bne.n	8009178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e0d0      	b.n	800931a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009178:	4b6a      	ldr	r3, [pc, #424]	@ (8009324 <HAL_RCC_ClockConfig+0x1c0>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0307 	and.w	r3, r3, #7
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	429a      	cmp	r2, r3
 8009184:	d910      	bls.n	80091a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009186:	4b67      	ldr	r3, [pc, #412]	@ (8009324 <HAL_RCC_ClockConfig+0x1c0>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f023 0207 	bic.w	r2, r3, #7
 800918e:	4965      	ldr	r1, [pc, #404]	@ (8009324 <HAL_RCC_ClockConfig+0x1c0>)
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	4313      	orrs	r3, r2
 8009194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009196:	4b63      	ldr	r3, [pc, #396]	@ (8009324 <HAL_RCC_ClockConfig+0x1c0>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0307 	and.w	r3, r3, #7
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d001      	beq.n	80091a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e0b8      	b.n	800931a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 0302 	and.w	r3, r3, #2
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d020      	beq.n	80091f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 0304 	and.w	r3, r3, #4
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d005      	beq.n	80091cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091c0:	4b59      	ldr	r3, [pc, #356]	@ (8009328 <HAL_RCC_ClockConfig+0x1c4>)
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	4a58      	ldr	r2, [pc, #352]	@ (8009328 <HAL_RCC_ClockConfig+0x1c4>)
 80091c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80091ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 0308 	and.w	r3, r3, #8
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d005      	beq.n	80091e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80091d8:	4b53      	ldr	r3, [pc, #332]	@ (8009328 <HAL_RCC_ClockConfig+0x1c4>)
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	4a52      	ldr	r2, [pc, #328]	@ (8009328 <HAL_RCC_ClockConfig+0x1c4>)
 80091de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80091e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091e4:	4b50      	ldr	r3, [pc, #320]	@ (8009328 <HAL_RCC_ClockConfig+0x1c4>)
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	494d      	ldr	r1, [pc, #308]	@ (8009328 <HAL_RCC_ClockConfig+0x1c4>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d040      	beq.n	8009284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d107      	bne.n	800921a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800920a:	4b47      	ldr	r3, [pc, #284]	@ (8009328 <HAL_RCC_ClockConfig+0x1c4>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009212:	2b00      	cmp	r3, #0
 8009214:	d115      	bne.n	8009242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e07f      	b.n	800931a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	2b02      	cmp	r3, #2
 8009220:	d107      	bne.n	8009232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009222:	4b41      	ldr	r3, [pc, #260]	@ (8009328 <HAL_RCC_ClockConfig+0x1c4>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d109      	bne.n	8009242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e073      	b.n	800931a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009232:	4b3d      	ldr	r3, [pc, #244]	@ (8009328 <HAL_RCC_ClockConfig+0x1c4>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 0302 	and.w	r3, r3, #2
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e06b      	b.n	800931a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009242:	4b39      	ldr	r3, [pc, #228]	@ (8009328 <HAL_RCC_ClockConfig+0x1c4>)
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f023 0203 	bic.w	r2, r3, #3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	4936      	ldr	r1, [pc, #216]	@ (8009328 <HAL_RCC_ClockConfig+0x1c4>)
 8009250:	4313      	orrs	r3, r2
 8009252:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009254:	f7fd fe5c 	bl	8006f10 <HAL_GetTick>
 8009258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800925a:	e00a      	b.n	8009272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800925c:	f7fd fe58 	bl	8006f10 <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800926a:	4293      	cmp	r3, r2
 800926c:	d901      	bls.n	8009272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800926e:	2303      	movs	r3, #3
 8009270:	e053      	b.n	800931a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009272:	4b2d      	ldr	r3, [pc, #180]	@ (8009328 <HAL_RCC_ClockConfig+0x1c4>)
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	f003 020c 	and.w	r2, r3, #12
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	429a      	cmp	r2, r3
 8009282:	d1eb      	bne.n	800925c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009284:	4b27      	ldr	r3, [pc, #156]	@ (8009324 <HAL_RCC_ClockConfig+0x1c0>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 0307 	and.w	r3, r3, #7
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	429a      	cmp	r2, r3
 8009290:	d210      	bcs.n	80092b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009292:	4b24      	ldr	r3, [pc, #144]	@ (8009324 <HAL_RCC_ClockConfig+0x1c0>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f023 0207 	bic.w	r2, r3, #7
 800929a:	4922      	ldr	r1, [pc, #136]	@ (8009324 <HAL_RCC_ClockConfig+0x1c0>)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	4313      	orrs	r3, r2
 80092a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092a2:	4b20      	ldr	r3, [pc, #128]	@ (8009324 <HAL_RCC_ClockConfig+0x1c0>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 0307 	and.w	r3, r3, #7
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d001      	beq.n	80092b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e032      	b.n	800931a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d008      	beq.n	80092d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092c0:	4b19      	ldr	r3, [pc, #100]	@ (8009328 <HAL_RCC_ClockConfig+0x1c4>)
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	4916      	ldr	r1, [pc, #88]	@ (8009328 <HAL_RCC_ClockConfig+0x1c4>)
 80092ce:	4313      	orrs	r3, r2
 80092d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0308 	and.w	r3, r3, #8
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d009      	beq.n	80092f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80092de:	4b12      	ldr	r3, [pc, #72]	@ (8009328 <HAL_RCC_ClockConfig+0x1c4>)
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	00db      	lsls	r3, r3, #3
 80092ec:	490e      	ldr	r1, [pc, #56]	@ (8009328 <HAL_RCC_ClockConfig+0x1c4>)
 80092ee:	4313      	orrs	r3, r2
 80092f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80092f2:	f000 f821 	bl	8009338 <HAL_RCC_GetSysClockFreq>
 80092f6:	4602      	mov	r2, r0
 80092f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009328 <HAL_RCC_ClockConfig+0x1c4>)
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	091b      	lsrs	r3, r3, #4
 80092fe:	f003 030f 	and.w	r3, r3, #15
 8009302:	490a      	ldr	r1, [pc, #40]	@ (800932c <HAL_RCC_ClockConfig+0x1c8>)
 8009304:	5ccb      	ldrb	r3, [r1, r3]
 8009306:	fa22 f303 	lsr.w	r3, r2, r3
 800930a:	4a09      	ldr	r2, [pc, #36]	@ (8009330 <HAL_RCC_ClockConfig+0x1cc>)
 800930c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800930e:	4b09      	ldr	r3, [pc, #36]	@ (8009334 <HAL_RCC_ClockConfig+0x1d0>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4618      	mov	r0, r3
 8009314:	f7fd fdba 	bl	8006e8c <HAL_InitTick>

  return HAL_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	40022000 	.word	0x40022000
 8009328:	40021000 	.word	0x40021000
 800932c:	0800c92c 	.word	0x0800c92c
 8009330:	20000034 	.word	0x20000034
 8009334:	20000038 	.word	0x20000038

08009338 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009338:	b490      	push	{r4, r7}
 800933a:	b08a      	sub	sp, #40	@ 0x28
 800933c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800933e:	4b29      	ldr	r3, [pc, #164]	@ (80093e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8009340:	1d3c      	adds	r4, r7, #4
 8009342:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009344:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009348:	f240 2301 	movw	r3, #513	@ 0x201
 800934c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	61fb      	str	r3, [r7, #28]
 8009352:	2300      	movs	r3, #0
 8009354:	61bb      	str	r3, [r7, #24]
 8009356:	2300      	movs	r3, #0
 8009358:	627b      	str	r3, [r7, #36]	@ 0x24
 800935a:	2300      	movs	r3, #0
 800935c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800935e:	2300      	movs	r3, #0
 8009360:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009362:	4b21      	ldr	r3, [pc, #132]	@ (80093e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	f003 030c 	and.w	r3, r3, #12
 800936e:	2b04      	cmp	r3, #4
 8009370:	d002      	beq.n	8009378 <HAL_RCC_GetSysClockFreq+0x40>
 8009372:	2b08      	cmp	r3, #8
 8009374:	d003      	beq.n	800937e <HAL_RCC_GetSysClockFreq+0x46>
 8009376:	e02b      	b.n	80093d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009378:	4b1c      	ldr	r3, [pc, #112]	@ (80093ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800937a:	623b      	str	r3, [r7, #32]
      break;
 800937c:	e02b      	b.n	80093d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	0c9b      	lsrs	r3, r3, #18
 8009382:	f003 030f 	and.w	r3, r3, #15
 8009386:	3328      	adds	r3, #40	@ 0x28
 8009388:	443b      	add	r3, r7
 800938a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800938e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d012      	beq.n	80093c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800939a:	4b13      	ldr	r3, [pc, #76]	@ (80093e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	0c5b      	lsrs	r3, r3, #17
 80093a0:	f003 0301 	and.w	r3, r3, #1
 80093a4:	3328      	adds	r3, #40	@ 0x28
 80093a6:	443b      	add	r3, r7
 80093a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80093ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	4a0e      	ldr	r2, [pc, #56]	@ (80093ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80093b2:	fb03 f202 	mul.w	r2, r3, r2
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80093be:	e004      	b.n	80093ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	4a0b      	ldr	r2, [pc, #44]	@ (80093f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80093c4:	fb02 f303 	mul.w	r3, r2, r3
 80093c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 80093ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093cc:	623b      	str	r3, [r7, #32]
      break;
 80093ce:	e002      	b.n	80093d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80093d0:	4b06      	ldr	r3, [pc, #24]	@ (80093ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80093d2:	623b      	str	r3, [r7, #32]
      break;
 80093d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80093d6:	6a3b      	ldr	r3, [r7, #32]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3728      	adds	r7, #40	@ 0x28
 80093dc:	46bd      	mov	sp, r7
 80093de:	bc90      	pop	{r4, r7}
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	0800c914 	.word	0x0800c914
 80093e8:	40021000 	.word	0x40021000
 80093ec:	007a1200 	.word	0x007a1200
 80093f0:	003d0900 	.word	0x003d0900

080093f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093f4:	b480      	push	{r7}
 80093f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093f8:	4b02      	ldr	r3, [pc, #8]	@ (8009404 <HAL_RCC_GetHCLKFreq+0x10>)
 80093fa:	681b      	ldr	r3, [r3, #0]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	46bd      	mov	sp, r7
 8009400:	bc80      	pop	{r7}
 8009402:	4770      	bx	lr
 8009404:	20000034 	.word	0x20000034

08009408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800940c:	f7ff fff2 	bl	80093f4 <HAL_RCC_GetHCLKFreq>
 8009410:	4602      	mov	r2, r0
 8009412:	4b05      	ldr	r3, [pc, #20]	@ (8009428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	0a1b      	lsrs	r3, r3, #8
 8009418:	f003 0307 	and.w	r3, r3, #7
 800941c:	4903      	ldr	r1, [pc, #12]	@ (800942c <HAL_RCC_GetPCLK1Freq+0x24>)
 800941e:	5ccb      	ldrb	r3, [r1, r3]
 8009420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009424:	4618      	mov	r0, r3
 8009426:	bd80      	pop	{r7, pc}
 8009428:	40021000 	.word	0x40021000
 800942c:	0800c93c 	.word	0x0800c93c

08009430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009434:	f7ff ffde 	bl	80093f4 <HAL_RCC_GetHCLKFreq>
 8009438:	4602      	mov	r2, r0
 800943a:	4b05      	ldr	r3, [pc, #20]	@ (8009450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	0adb      	lsrs	r3, r3, #11
 8009440:	f003 0307 	and.w	r3, r3, #7
 8009444:	4903      	ldr	r1, [pc, #12]	@ (8009454 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009446:	5ccb      	ldrb	r3, [r1, r3]
 8009448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800944c:	4618      	mov	r0, r3
 800944e:	bd80      	pop	{r7, pc}
 8009450:	40021000 	.word	0x40021000
 8009454:	0800c93c 	.word	0x0800c93c

08009458 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009460:	4b0a      	ldr	r3, [pc, #40]	@ (800948c <RCC_Delay+0x34>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a0a      	ldr	r2, [pc, #40]	@ (8009490 <RCC_Delay+0x38>)
 8009466:	fba2 2303 	umull	r2, r3, r2, r3
 800946a:	0a5b      	lsrs	r3, r3, #9
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	fb02 f303 	mul.w	r3, r2, r3
 8009472:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009474:	bf00      	nop
  }
  while (Delay --);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	1e5a      	subs	r2, r3, #1
 800947a:	60fa      	str	r2, [r7, #12]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1f9      	bne.n	8009474 <RCC_Delay+0x1c>
}
 8009480:	bf00      	nop
 8009482:	bf00      	nop
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	bc80      	pop	{r7}
 800948a:	4770      	bx	lr
 800948c:	20000034 	.word	0x20000034
 8009490:	10624dd3 	.word	0x10624dd3

08009494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d101      	bne.n	80094a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e041      	b.n	800952a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d106      	bne.n	80094c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7fd fc00 	bl	8006cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	3304      	adds	r3, #4
 80094d0:	4619      	mov	r1, r3
 80094d2:	4610      	mov	r0, r2
 80094d4:	f000 fa7e 	bl	80099d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
	...

08009534 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009542:	b2db      	uxtb	r3, r3
 8009544:	2b01      	cmp	r3, #1
 8009546:	d001      	beq.n	800954c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e044      	b.n	80095d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2202      	movs	r2, #2
 8009550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68da      	ldr	r2, [r3, #12]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f042 0201 	orr.w	r2, r2, #1
 8009562:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a1d      	ldr	r2, [pc, #116]	@ (80095e0 <HAL_TIM_Base_Start_IT+0xac>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d018      	beq.n	80095a0 <HAL_TIM_Base_Start_IT+0x6c>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a1c      	ldr	r2, [pc, #112]	@ (80095e4 <HAL_TIM_Base_Start_IT+0xb0>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d013      	beq.n	80095a0 <HAL_TIM_Base_Start_IT+0x6c>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009580:	d00e      	beq.n	80095a0 <HAL_TIM_Base_Start_IT+0x6c>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a18      	ldr	r2, [pc, #96]	@ (80095e8 <HAL_TIM_Base_Start_IT+0xb4>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d009      	beq.n	80095a0 <HAL_TIM_Base_Start_IT+0x6c>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a16      	ldr	r2, [pc, #88]	@ (80095ec <HAL_TIM_Base_Start_IT+0xb8>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d004      	beq.n	80095a0 <HAL_TIM_Base_Start_IT+0x6c>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a15      	ldr	r2, [pc, #84]	@ (80095f0 <HAL_TIM_Base_Start_IT+0xbc>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d111      	bne.n	80095c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f003 0307 	and.w	r3, r3, #7
 80095aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2b06      	cmp	r3, #6
 80095b0:	d010      	beq.n	80095d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f042 0201 	orr.w	r2, r2, #1
 80095c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095c2:	e007      	b.n	80095d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f042 0201 	orr.w	r2, r2, #1
 80095d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	bc80      	pop	{r7}
 80095de:	4770      	bx	lr
 80095e0:	40012c00 	.word	0x40012c00
 80095e4:	40013400 	.word	0x40013400
 80095e8:	40000400 	.word	0x40000400
 80095ec:	40000800 	.word	0x40000800
 80095f0:	40000c00 	.word	0x40000c00

080095f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	f003 0302 	and.w	r3, r3, #2
 8009606:	2b02      	cmp	r3, #2
 8009608:	d122      	bne.n	8009650 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	f003 0302 	and.w	r3, r3, #2
 8009614:	2b02      	cmp	r3, #2
 8009616:	d11b      	bne.n	8009650 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f06f 0202 	mvn.w	r2, #2
 8009620:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	f003 0303 	and.w	r3, r3, #3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f9b1 	bl	800999e <HAL_TIM_IC_CaptureCallback>
 800963c:	e005      	b.n	800964a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f9a4 	bl	800998c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f9b3 	bl	80099b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	f003 0304 	and.w	r3, r3, #4
 800965a:	2b04      	cmp	r3, #4
 800965c:	d122      	bne.n	80096a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	f003 0304 	and.w	r3, r3, #4
 8009668:	2b04      	cmp	r3, #4
 800966a:	d11b      	bne.n	80096a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f06f 0204 	mvn.w	r2, #4
 8009674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2202      	movs	r2, #2
 800967a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009686:	2b00      	cmp	r3, #0
 8009688:	d003      	beq.n	8009692 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f987 	bl	800999e <HAL_TIM_IC_CaptureCallback>
 8009690:	e005      	b.n	800969e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f97a 	bl	800998c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f989 	bl	80099b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	f003 0308 	and.w	r3, r3, #8
 80096ae:	2b08      	cmp	r3, #8
 80096b0:	d122      	bne.n	80096f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	f003 0308 	and.w	r3, r3, #8
 80096bc:	2b08      	cmp	r3, #8
 80096be:	d11b      	bne.n	80096f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f06f 0208 	mvn.w	r2, #8
 80096c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2204      	movs	r2, #4
 80096ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	69db      	ldr	r3, [r3, #28]
 80096d6:	f003 0303 	and.w	r3, r3, #3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d003      	beq.n	80096e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f95d 	bl	800999e <HAL_TIM_IC_CaptureCallback>
 80096e4:	e005      	b.n	80096f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f950 	bl	800998c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f95f 	bl	80099b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	691b      	ldr	r3, [r3, #16]
 80096fe:	f003 0310 	and.w	r3, r3, #16
 8009702:	2b10      	cmp	r3, #16
 8009704:	d122      	bne.n	800974c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	f003 0310 	and.w	r3, r3, #16
 8009710:	2b10      	cmp	r3, #16
 8009712:	d11b      	bne.n	800974c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f06f 0210 	mvn.w	r2, #16
 800971c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2208      	movs	r2, #8
 8009722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800972e:	2b00      	cmp	r3, #0
 8009730:	d003      	beq.n	800973a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f933 	bl	800999e <HAL_TIM_IC_CaptureCallback>
 8009738:	e005      	b.n	8009746 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f926 	bl	800998c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f935 	bl	80099b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	f003 0301 	and.w	r3, r3, #1
 8009756:	2b01      	cmp	r3, #1
 8009758:	d10e      	bne.n	8009778 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	2b01      	cmp	r3, #1
 8009766:	d107      	bne.n	8009778 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f06f 0201 	mvn.w	r2, #1
 8009770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7fa fd66 	bl	8004244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009782:	2b80      	cmp	r3, #128	@ 0x80
 8009784:	d10e      	bne.n	80097a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009790:	2b80      	cmp	r3, #128	@ 0x80
 8009792:	d107      	bne.n	80097a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800979c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fa9d 	bl	8009cde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097ae:	2b40      	cmp	r3, #64	@ 0x40
 80097b0:	d10e      	bne.n	80097d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097bc:	2b40      	cmp	r3, #64	@ 0x40
 80097be:	d107      	bne.n	80097d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80097c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f8f9 	bl	80099c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	f003 0320 	and.w	r3, r3, #32
 80097da:	2b20      	cmp	r3, #32
 80097dc:	d10e      	bne.n	80097fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	f003 0320 	and.w	r3, r3, #32
 80097e8:	2b20      	cmp	r3, #32
 80097ea:	d107      	bne.n	80097fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f06f 0220 	mvn.w	r2, #32
 80097f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fa68 	bl	8009ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80097fc:	bf00      	nop
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009814:	2b01      	cmp	r3, #1
 8009816:	d101      	bne.n	800981c <HAL_TIM_ConfigClockSource+0x18>
 8009818:	2302      	movs	r3, #2
 800981a:	e0b3      	b.n	8009984 <HAL_TIM_ConfigClockSource+0x180>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2202      	movs	r2, #2
 8009828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800983a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009842:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009854:	d03e      	beq.n	80098d4 <HAL_TIM_ConfigClockSource+0xd0>
 8009856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800985a:	f200 8087 	bhi.w	800996c <HAL_TIM_ConfigClockSource+0x168>
 800985e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009862:	f000 8085 	beq.w	8009970 <HAL_TIM_ConfigClockSource+0x16c>
 8009866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800986a:	d87f      	bhi.n	800996c <HAL_TIM_ConfigClockSource+0x168>
 800986c:	2b70      	cmp	r3, #112	@ 0x70
 800986e:	d01a      	beq.n	80098a6 <HAL_TIM_ConfigClockSource+0xa2>
 8009870:	2b70      	cmp	r3, #112	@ 0x70
 8009872:	d87b      	bhi.n	800996c <HAL_TIM_ConfigClockSource+0x168>
 8009874:	2b60      	cmp	r3, #96	@ 0x60
 8009876:	d050      	beq.n	800991a <HAL_TIM_ConfigClockSource+0x116>
 8009878:	2b60      	cmp	r3, #96	@ 0x60
 800987a:	d877      	bhi.n	800996c <HAL_TIM_ConfigClockSource+0x168>
 800987c:	2b50      	cmp	r3, #80	@ 0x50
 800987e:	d03c      	beq.n	80098fa <HAL_TIM_ConfigClockSource+0xf6>
 8009880:	2b50      	cmp	r3, #80	@ 0x50
 8009882:	d873      	bhi.n	800996c <HAL_TIM_ConfigClockSource+0x168>
 8009884:	2b40      	cmp	r3, #64	@ 0x40
 8009886:	d058      	beq.n	800993a <HAL_TIM_ConfigClockSource+0x136>
 8009888:	2b40      	cmp	r3, #64	@ 0x40
 800988a:	d86f      	bhi.n	800996c <HAL_TIM_ConfigClockSource+0x168>
 800988c:	2b30      	cmp	r3, #48	@ 0x30
 800988e:	d064      	beq.n	800995a <HAL_TIM_ConfigClockSource+0x156>
 8009890:	2b30      	cmp	r3, #48	@ 0x30
 8009892:	d86b      	bhi.n	800996c <HAL_TIM_ConfigClockSource+0x168>
 8009894:	2b20      	cmp	r3, #32
 8009896:	d060      	beq.n	800995a <HAL_TIM_ConfigClockSource+0x156>
 8009898:	2b20      	cmp	r3, #32
 800989a:	d867      	bhi.n	800996c <HAL_TIM_ConfigClockSource+0x168>
 800989c:	2b00      	cmp	r3, #0
 800989e:	d05c      	beq.n	800995a <HAL_TIM_ConfigClockSource+0x156>
 80098a0:	2b10      	cmp	r3, #16
 80098a2:	d05a      	beq.n	800995a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80098a4:	e062      	b.n	800996c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6818      	ldr	r0, [r3, #0]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	6899      	ldr	r1, [r3, #8]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	685a      	ldr	r2, [r3, #4]
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	f000 f97e 	bl	8009bb6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80098c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68fa      	ldr	r2, [r7, #12]
 80098d0:	609a      	str	r2, [r3, #8]
      break;
 80098d2:	e04e      	b.n	8009972 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6818      	ldr	r0, [r3, #0]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	6899      	ldr	r1, [r3, #8]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	685a      	ldr	r2, [r3, #4]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	f000 f967 	bl	8009bb6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	689a      	ldr	r2, [r3, #8]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80098f6:	609a      	str	r2, [r3, #8]
      break;
 80098f8:	e03b      	b.n	8009972 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6818      	ldr	r0, [r3, #0]
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	6859      	ldr	r1, [r3, #4]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	461a      	mov	r2, r3
 8009908:	f000 f8de 	bl	8009ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2150      	movs	r1, #80	@ 0x50
 8009912:	4618      	mov	r0, r3
 8009914:	f000 f935 	bl	8009b82 <TIM_ITRx_SetConfig>
      break;
 8009918:	e02b      	b.n	8009972 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6818      	ldr	r0, [r3, #0]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	6859      	ldr	r1, [r3, #4]
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	461a      	mov	r2, r3
 8009928:	f000 f8fc 	bl	8009b24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2160      	movs	r1, #96	@ 0x60
 8009932:	4618      	mov	r0, r3
 8009934:	f000 f925 	bl	8009b82 <TIM_ITRx_SetConfig>
      break;
 8009938:	e01b      	b.n	8009972 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6818      	ldr	r0, [r3, #0]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	6859      	ldr	r1, [r3, #4]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	461a      	mov	r2, r3
 8009948:	f000 f8be 	bl	8009ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2140      	movs	r1, #64	@ 0x40
 8009952:	4618      	mov	r0, r3
 8009954:	f000 f915 	bl	8009b82 <TIM_ITRx_SetConfig>
      break;
 8009958:	e00b      	b.n	8009972 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4619      	mov	r1, r3
 8009964:	4610      	mov	r0, r2
 8009966:	f000 f90c 	bl	8009b82 <TIM_ITRx_SetConfig>
        break;
 800996a:	e002      	b.n	8009972 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800996c:	bf00      	nop
 800996e:	e000      	b.n	8009972 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009970:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	bc80      	pop	{r7}
 800999c:	4770      	bx	lr

0800999e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800999e:	b480      	push	{r7}
 80099a0:	b083      	sub	sp, #12
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80099a6:	bf00      	nop
 80099a8:	370c      	adds	r7, #12
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bc80      	pop	{r7}
 80099ae:	4770      	bx	lr

080099b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	bc80      	pop	{r7}
 80099c0:	4770      	bx	lr

080099c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099c2:	b480      	push	{r7}
 80099c4:	b083      	sub	sp, #12
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099ca:	bf00      	nop
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bc80      	pop	{r7}
 80099d2:	4770      	bx	lr

080099d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a33      	ldr	r2, [pc, #204]	@ (8009ab4 <TIM_Base_SetConfig+0xe0>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d013      	beq.n	8009a14 <TIM_Base_SetConfig+0x40>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a32      	ldr	r2, [pc, #200]	@ (8009ab8 <TIM_Base_SetConfig+0xe4>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d00f      	beq.n	8009a14 <TIM_Base_SetConfig+0x40>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099fa:	d00b      	beq.n	8009a14 <TIM_Base_SetConfig+0x40>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a2f      	ldr	r2, [pc, #188]	@ (8009abc <TIM_Base_SetConfig+0xe8>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d007      	beq.n	8009a14 <TIM_Base_SetConfig+0x40>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a2e      	ldr	r2, [pc, #184]	@ (8009ac0 <TIM_Base_SetConfig+0xec>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d003      	beq.n	8009a14 <TIM_Base_SetConfig+0x40>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a2d      	ldr	r2, [pc, #180]	@ (8009ac4 <TIM_Base_SetConfig+0xf0>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d108      	bne.n	8009a26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a22      	ldr	r2, [pc, #136]	@ (8009ab4 <TIM_Base_SetConfig+0xe0>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d013      	beq.n	8009a56 <TIM_Base_SetConfig+0x82>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a21      	ldr	r2, [pc, #132]	@ (8009ab8 <TIM_Base_SetConfig+0xe4>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d00f      	beq.n	8009a56 <TIM_Base_SetConfig+0x82>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a3c:	d00b      	beq.n	8009a56 <TIM_Base_SetConfig+0x82>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a1e      	ldr	r2, [pc, #120]	@ (8009abc <TIM_Base_SetConfig+0xe8>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d007      	beq.n	8009a56 <TIM_Base_SetConfig+0x82>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a1d      	ldr	r2, [pc, #116]	@ (8009ac0 <TIM_Base_SetConfig+0xec>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d003      	beq.n	8009a56 <TIM_Base_SetConfig+0x82>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a1c      	ldr	r2, [pc, #112]	@ (8009ac4 <TIM_Base_SetConfig+0xf0>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d108      	bne.n	8009a68 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	689a      	ldr	r2, [r3, #8]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a09      	ldr	r2, [pc, #36]	@ (8009ab4 <TIM_Base_SetConfig+0xe0>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d003      	beq.n	8009a9c <TIM_Base_SetConfig+0xc8>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a08      	ldr	r2, [pc, #32]	@ (8009ab8 <TIM_Base_SetConfig+0xe4>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d103      	bne.n	8009aa4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	691a      	ldr	r2, [r3, #16]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	615a      	str	r2, [r3, #20]
}
 8009aaa:	bf00      	nop
 8009aac:	3714      	adds	r7, #20
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bc80      	pop	{r7}
 8009ab2:	4770      	bx	lr
 8009ab4:	40012c00 	.word	0x40012c00
 8009ab8:	40013400 	.word	0x40013400
 8009abc:	40000400 	.word	0x40000400
 8009ac0:	40000800 	.word	0x40000800
 8009ac4:	40000c00 	.word	0x40000c00

08009ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b087      	sub	sp, #28
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6a1b      	ldr	r3, [r3, #32]
 8009ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	f023 0201 	bic.w	r2, r3, #1
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	699b      	ldr	r3, [r3, #24]
 8009aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	011b      	lsls	r3, r3, #4
 8009af8:	693a      	ldr	r2, [r7, #16]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f023 030a 	bic.w	r3, r3, #10
 8009b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	621a      	str	r2, [r3, #32]
}
 8009b1a:	bf00      	nop
 8009b1c:	371c      	adds	r7, #28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bc80      	pop	{r7}
 8009b22:	4770      	bx	lr

08009b24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b087      	sub	sp, #28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6a1b      	ldr	r3, [r3, #32]
 8009b34:	f023 0210 	bic.w	r2, r3, #16
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6a1b      	ldr	r3, [r3, #32]
 8009b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	031b      	lsls	r3, r3, #12
 8009b54:	697a      	ldr	r2, [r7, #20]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009b60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	011b      	lsls	r3, r3, #4
 8009b66:	693a      	ldr	r2, [r7, #16]
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	697a      	ldr	r2, [r7, #20]
 8009b70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	621a      	str	r2, [r3, #32]
}
 8009b78:	bf00      	nop
 8009b7a:	371c      	adds	r7, #28
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bc80      	pop	{r7}
 8009b80:	4770      	bx	lr

08009b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b82:	b480      	push	{r7}
 8009b84:	b085      	sub	sp, #20
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	f043 0307 	orr.w	r3, r3, #7
 8009ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	609a      	str	r2, [r3, #8]
}
 8009bac:	bf00      	nop
 8009bae:	3714      	adds	r7, #20
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bc80      	pop	{r7}
 8009bb4:	4770      	bx	lr

08009bb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b087      	sub	sp, #28
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	60f8      	str	r0, [r7, #12]
 8009bbe:	60b9      	str	r1, [r7, #8]
 8009bc0:	607a      	str	r2, [r7, #4]
 8009bc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009bd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	021a      	lsls	r2, r3, #8
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	431a      	orrs	r2, r3
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	609a      	str	r2, [r3, #8]
}
 8009bea:	bf00      	nop
 8009bec:	371c      	adds	r7, #28
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bc80      	pop	{r7}
 8009bf2:	4770      	bx	lr

08009bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d101      	bne.n	8009c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c08:	2302      	movs	r3, #2
 8009c0a:	e050      	b.n	8009cae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2202      	movs	r2, #2
 8009c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8009cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d018      	beq.n	8009c82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a19      	ldr	r2, [pc, #100]	@ (8009cbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d013      	beq.n	8009c82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c62:	d00e      	beq.n	8009c82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a15      	ldr	r2, [pc, #84]	@ (8009cc0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d009      	beq.n	8009c82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a14      	ldr	r2, [pc, #80]	@ (8009cc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d004      	beq.n	8009c82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a12      	ldr	r2, [pc, #72]	@ (8009cc8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d10c      	bne.n	8009c9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bc80      	pop	{r7}
 8009cb6:	4770      	bx	lr
 8009cb8:	40012c00 	.word	0x40012c00
 8009cbc:	40013400 	.word	0x40013400
 8009cc0:	40000400 	.word	0x40000400
 8009cc4:	40000800 	.word	0x40000800
 8009cc8:	40000c00 	.word	0x40000c00

08009ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bc80      	pop	{r7}
 8009cdc:	4770      	bx	lr

08009cde <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b083      	sub	sp, #12
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ce6:	bf00      	nop
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bc80      	pop	{r7}
 8009cee:	4770      	bx	lr

08009cf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d101      	bne.n	8009d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e03f      	b.n	8009d82 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d106      	bne.n	8009d1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7fc fff8 	bl	8006d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2224      	movs	r2, #36	@ 0x24
 8009d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68da      	ldr	r2, [r3, #12]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009d32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f829 	bl	8009d8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	691a      	ldr	r2, [r3, #16]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009d48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	695a      	ldr	r2, [r3, #20]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009d58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68da      	ldr	r2, [r3, #12]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009d68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2220      	movs	r2, #32
 8009d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2220      	movs	r2, #32
 8009d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
	...

08009d8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	68da      	ldr	r2, [r3, #12]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	430a      	orrs	r2, r1
 8009da8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	689a      	ldr	r2, [r3, #8]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	431a      	orrs	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	695b      	ldr	r3, [r3, #20]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009dc6:	f023 030c 	bic.w	r3, r3, #12
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	6812      	ldr	r2, [r2, #0]
 8009dce:	68b9      	ldr	r1, [r7, #8]
 8009dd0:	430b      	orrs	r3, r1
 8009dd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	695b      	ldr	r3, [r3, #20]
 8009dda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	699a      	ldr	r2, [r3, #24]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	430a      	orrs	r2, r1
 8009de8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a2c      	ldr	r2, [pc, #176]	@ (8009ea0 <UART_SetConfig+0x114>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d103      	bne.n	8009dfc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009df4:	f7ff fb1c 	bl	8009430 <HAL_RCC_GetPCLK2Freq>
 8009df8:	60f8      	str	r0, [r7, #12]
 8009dfa:	e002      	b.n	8009e02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009dfc:	f7ff fb04 	bl	8009408 <HAL_RCC_GetPCLK1Freq>
 8009e00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	4613      	mov	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	009a      	lsls	r2, r3, #2
 8009e0c:	441a      	add	r2, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e18:	4a22      	ldr	r2, [pc, #136]	@ (8009ea4 <UART_SetConfig+0x118>)
 8009e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e1e:	095b      	lsrs	r3, r3, #5
 8009e20:	0119      	lsls	r1, r3, #4
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	4613      	mov	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	009a      	lsls	r2, r3, #2
 8009e2c:	441a      	add	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e38:	4b1a      	ldr	r3, [pc, #104]	@ (8009ea4 <UART_SetConfig+0x118>)
 8009e3a:	fba3 0302 	umull	r0, r3, r3, r2
 8009e3e:	095b      	lsrs	r3, r3, #5
 8009e40:	2064      	movs	r0, #100	@ 0x64
 8009e42:	fb00 f303 	mul.w	r3, r0, r3
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	011b      	lsls	r3, r3, #4
 8009e4a:	3332      	adds	r3, #50	@ 0x32
 8009e4c:	4a15      	ldr	r2, [pc, #84]	@ (8009ea4 <UART_SetConfig+0x118>)
 8009e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e52:	095b      	lsrs	r3, r3, #5
 8009e54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e58:	4419      	add	r1, r3
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	4413      	add	r3, r2
 8009e62:	009a      	lsls	r2, r3, #2
 8009e64:	441a      	add	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e70:	4b0c      	ldr	r3, [pc, #48]	@ (8009ea4 <UART_SetConfig+0x118>)
 8009e72:	fba3 0302 	umull	r0, r3, r3, r2
 8009e76:	095b      	lsrs	r3, r3, #5
 8009e78:	2064      	movs	r0, #100	@ 0x64
 8009e7a:	fb00 f303 	mul.w	r3, r0, r3
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	011b      	lsls	r3, r3, #4
 8009e82:	3332      	adds	r3, #50	@ 0x32
 8009e84:	4a07      	ldr	r2, [pc, #28]	@ (8009ea4 <UART_SetConfig+0x118>)
 8009e86:	fba2 2303 	umull	r2, r3, r2, r3
 8009e8a:	095b      	lsrs	r3, r3, #5
 8009e8c:	f003 020f 	and.w	r2, r3, #15
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	440a      	add	r2, r1
 8009e96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009e98:	bf00      	nop
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	40013800 	.word	0x40013800
 8009ea4:	51eb851f 	.word	0x51eb851f

08009ea8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	4603      	mov	r3, r0
 8009eb0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009eba:	2b84      	cmp	r3, #132	@ 0x84
 8009ebc:	d005      	beq.n	8009eca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009ebe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	3303      	adds	r3, #3
 8009ec8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009eca:	68fb      	ldr	r3, [r7, #12]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3714      	adds	r7, #20
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bc80      	pop	{r7}
 8009ed4:	4770      	bx	lr

08009ed6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009eda:	f000 fda7 	bl	800aa2c <vTaskStartScheduler>
  
  return osOK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ee6:	b089      	sub	sp, #36	@ 0x24
 8009ee8:	af04      	add	r7, sp, #16
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d020      	beq.n	8009f38 <osThreadCreate+0x54>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d01c      	beq.n	8009f38 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	685c      	ldr	r4, [r3, #4]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	691e      	ldr	r6, [r3, #16]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7ff ffc9 	bl	8009ea8 <makeFreeRtosPriority>
 8009f16:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	695b      	ldr	r3, [r3, #20]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f20:	9202      	str	r2, [sp, #8]
 8009f22:	9301      	str	r3, [sp, #4]
 8009f24:	9100      	str	r1, [sp, #0]
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	4632      	mov	r2, r6
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	f000 fbb9 	bl	800a6a4 <xTaskCreateStatic>
 8009f32:	4603      	mov	r3, r0
 8009f34:	60fb      	str	r3, [r7, #12]
 8009f36:	e01c      	b.n	8009f72 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685c      	ldr	r4, [r3, #4]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f44:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7ff ffab 	bl	8009ea8 <makeFreeRtosPriority>
 8009f52:	4602      	mov	r2, r0
 8009f54:	f107 030c 	add.w	r3, r7, #12
 8009f58:	9301      	str	r3, [sp, #4]
 8009f5a:	9200      	str	r2, [sp, #0]
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	4632      	mov	r2, r6
 8009f60:	4629      	mov	r1, r5
 8009f62:	4620      	mov	r0, r4
 8009f64:	f000 fbfd 	bl	800a762 <xTaskCreate>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d001      	beq.n	8009f72 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	e000      	b.n	8009f74 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009f72:	68fb      	ldr	r3, [r7, #12]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f7c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <osDelay+0x16>
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	e000      	b.n	8009f94 <osDelay+0x18>
 8009f92:	2301      	movs	r3, #1
 8009f94:	4618      	mov	r0, r3
 8009f96:	f000 fd13 	bl	800a9c0 <vTaskDelay>
  
  return osOK;
 8009f9a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f103 0208 	add.w	r2, r3, #8
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009fbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f103 0208 	add.w	r2, r3, #8
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f103 0208 	add.w	r2, r3, #8
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bc80      	pop	{r7}
 8009fe0:	4770      	bx	lr

08009fe2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b083      	sub	sp, #12
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bc80      	pop	{r7}
 8009ff8:	4770      	bx	lr

08009ffa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ffa:	b480      	push	{r7}
 8009ffc:	b085      	sub	sp, #20
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	689a      	ldr	r2, [r3, #8]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	1c5a      	adds	r2, r3, #1
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	601a      	str	r2, [r3, #0]
}
 800a036:	bf00      	nop
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bc80      	pop	{r7}
 800a03e:	4770      	bx	lr

0800a040 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a056:	d103      	bne.n	800a060 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	691b      	ldr	r3, [r3, #16]
 800a05c:	60fb      	str	r3, [r7, #12]
 800a05e:	e00c      	b.n	800a07a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	3308      	adds	r3, #8
 800a064:	60fb      	str	r3, [r7, #12]
 800a066:	e002      	b.n	800a06e <vListInsert+0x2e>
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	60fb      	str	r3, [r7, #12]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	429a      	cmp	r2, r3
 800a078:	d2f6      	bcs.n	800a068 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	685a      	ldr	r2, [r3, #4]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	1c5a      	adds	r2, r3, #1
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	601a      	str	r2, [r3, #0]
}
 800a0a6:	bf00      	nop
 800a0a8:	3714      	adds	r7, #20
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bc80      	pop	{r7}
 800a0ae:	4770      	bx	lr

0800a0b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	6892      	ldr	r2, [r2, #8]
 800a0c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	6852      	ldr	r2, [r2, #4]
 800a0d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d103      	bne.n	800a0e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	689a      	ldr	r2, [r3, #8]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	1e5a      	subs	r2, r3, #1
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3714      	adds	r7, #20
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bc80      	pop	{r7}
 800a100:	4770      	bx	lr
	...

0800a104 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10b      	bne.n	800a130 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a12a:	bf00      	nop
 800a12c:	bf00      	nop
 800a12e:	e7fd      	b.n	800a12c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a130:	f001 fa8c 	bl	800b64c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a13c:	68f9      	ldr	r1, [r7, #12]
 800a13e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a140:	fb01 f303 	mul.w	r3, r1, r3
 800a144:	441a      	add	r2, r3
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2200      	movs	r2, #0
 800a14e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a160:	3b01      	subs	r3, #1
 800a162:	68f9      	ldr	r1, [r7, #12]
 800a164:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a166:	fb01 f303 	mul.w	r3, r1, r3
 800a16a:	441a      	add	r2, r3
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	22ff      	movs	r2, #255	@ 0xff
 800a174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	22ff      	movs	r2, #255	@ 0xff
 800a17c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d114      	bne.n	800a1b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d01a      	beq.n	800a1c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	3310      	adds	r3, #16
 800a192:	4618      	mov	r0, r3
 800a194:	f000 fe98 	bl	800aec8 <xTaskRemoveFromEventList>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d012      	beq.n	800a1c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a19e:	4b0d      	ldr	r3, [pc, #52]	@ (800a1d4 <xQueueGenericReset+0xd0>)
 800a1a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1a4:	601a      	str	r2, [r3, #0]
 800a1a6:	f3bf 8f4f 	dsb	sy
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	e009      	b.n	800a1c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	3310      	adds	r3, #16
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7ff fef5 	bl	8009fa4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	3324      	adds	r3, #36	@ 0x24
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7ff fef0 	bl	8009fa4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a1c4:	f001 fa72 	bl	800b6ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a1c8:	2301      	movs	r3, #1
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	e000ed04 	.word	0xe000ed04

0800a1d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b08a      	sub	sp, #40	@ 0x28
 800a1dc:	af02      	add	r7, sp, #8
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d10b      	bne.n	800a204 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a1ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1f0:	f383 8811 	msr	BASEPRI, r3
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	613b      	str	r3, [r7, #16]
}
 800a1fe:	bf00      	nop
 800a200:	bf00      	nop
 800a202:	e7fd      	b.n	800a200 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d102      	bne.n	800a210 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	61fb      	str	r3, [r7, #28]
 800a20e:	e004      	b.n	800a21a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	fb02 f303 	mul.w	r3, r2, r3
 800a218:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	3348      	adds	r3, #72	@ 0x48
 800a21e:	4618      	mov	r0, r3
 800a220:	f001 fad6 	bl	800b7d0 <pvPortMalloc>
 800a224:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00f      	beq.n	800a24c <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	3348      	adds	r3, #72	@ 0x48
 800a230:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	2200      	movs	r2, #0
 800a236:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a23a:	79fa      	ldrb	r2, [r7, #7]
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	4613      	mov	r3, r2
 800a242:	697a      	ldr	r2, [r7, #20]
 800a244:	68b9      	ldr	r1, [r7, #8]
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f000 f805 	bl	800a256 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a24c:	69bb      	ldr	r3, [r7, #24]
	}
 800a24e:	4618      	mov	r0, r3
 800a250:	3720      	adds	r7, #32
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b084      	sub	sp, #16
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	60f8      	str	r0, [r7, #12]
 800a25e:	60b9      	str	r1, [r7, #8]
 800a260:	607a      	str	r2, [r7, #4]
 800a262:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d103      	bne.n	800a272 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	69ba      	ldr	r2, [r7, #24]
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	e002      	b.n	800a278 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a284:	2101      	movs	r1, #1
 800a286:	69b8      	ldr	r0, [r7, #24]
 800a288:	f7ff ff3c 	bl	800a104 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a28c:	bf00      	nop
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00e      	beq.n	800a2c0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f81c 	bl	800a2f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a2c0:	bf00      	nop
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	617b      	str	r3, [r7, #20]
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a2da:	79fb      	ldrb	r3, [r7, #7]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	6939      	ldr	r1, [r7, #16]
 800a2e0:	6978      	ldr	r0, [r7, #20]
 800a2e2:	f7ff ff79 	bl	800a1d8 <xQueueGenericCreate>
 800a2e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f7ff ffd3 	bl	800a294 <prvInitialiseMutex>

		return pxNewQueue;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
	}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3718      	adds	r7, #24
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b08e      	sub	sp, #56	@ 0x38
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
 800a304:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a306:	2300      	movs	r3, #0
 800a308:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10b      	bne.n	800a32c <xQueueGenericSend+0x34>
	__asm volatile
 800a314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a326:	bf00      	nop
 800a328:	bf00      	nop
 800a32a:	e7fd      	b.n	800a328 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d103      	bne.n	800a33a <xQueueGenericSend+0x42>
 800a332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <xQueueGenericSend+0x46>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e000      	b.n	800a340 <xQueueGenericSend+0x48>
 800a33e:	2300      	movs	r3, #0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10b      	bne.n	800a35c <xQueueGenericSend+0x64>
	__asm volatile
 800a344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a356:	bf00      	nop
 800a358:	bf00      	nop
 800a35a:	e7fd      	b.n	800a358 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d103      	bne.n	800a36a <xQueueGenericSend+0x72>
 800a362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a366:	2b01      	cmp	r3, #1
 800a368:	d101      	bne.n	800a36e <xQueueGenericSend+0x76>
 800a36a:	2301      	movs	r3, #1
 800a36c:	e000      	b.n	800a370 <xQueueGenericSend+0x78>
 800a36e:	2300      	movs	r3, #0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10b      	bne.n	800a38c <xQueueGenericSend+0x94>
	__asm volatile
 800a374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	623b      	str	r3, [r7, #32]
}
 800a386:	bf00      	nop
 800a388:	bf00      	nop
 800a38a:	e7fd      	b.n	800a388 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a38c:	f000 ff60 	bl	800b250 <xTaskGetSchedulerState>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d102      	bne.n	800a39c <xQueueGenericSend+0xa4>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d101      	bne.n	800a3a0 <xQueueGenericSend+0xa8>
 800a39c:	2301      	movs	r3, #1
 800a39e:	e000      	b.n	800a3a2 <xQueueGenericSend+0xaa>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d10b      	bne.n	800a3be <xQueueGenericSend+0xc6>
	__asm volatile
 800a3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3aa:	f383 8811 	msr	BASEPRI, r3
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	61fb      	str	r3, [r7, #28]
}
 800a3b8:	bf00      	nop
 800a3ba:	bf00      	nop
 800a3bc:	e7fd      	b.n	800a3ba <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3be:	f001 f945 	bl	800b64c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d302      	bcc.n	800a3d4 <xQueueGenericSend+0xdc>
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d129      	bne.n	800a428 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	68b9      	ldr	r1, [r7, #8]
 800a3d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3da:	f000 f88f 	bl	800a4fc <prvCopyDataToQueue>
 800a3de:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d010      	beq.n	800a40a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ea:	3324      	adds	r3, #36	@ 0x24
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f000 fd6b 	bl	800aec8 <xTaskRemoveFromEventList>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d013      	beq.n	800a420 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a3f8:	4b3f      	ldr	r3, [pc, #252]	@ (800a4f8 <xQueueGenericSend+0x200>)
 800a3fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3fe:	601a      	str	r2, [r3, #0]
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	e00a      	b.n	800a420 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d007      	beq.n	800a420 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a410:	4b39      	ldr	r3, [pc, #228]	@ (800a4f8 <xQueueGenericSend+0x200>)
 800a412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a420:	f001 f944 	bl	800b6ac <vPortExitCritical>
				return pdPASS;
 800a424:	2301      	movs	r3, #1
 800a426:	e063      	b.n	800a4f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d103      	bne.n	800a436 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a42e:	f001 f93d 	bl	800b6ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a432:	2300      	movs	r3, #0
 800a434:	e05c      	b.n	800a4f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d106      	bne.n	800a44a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a43c:	f107 0314 	add.w	r3, r7, #20
 800a440:	4618      	mov	r0, r3
 800a442:	f000 fda5 	bl	800af90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a446:	2301      	movs	r3, #1
 800a448:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a44a:	f001 f92f 	bl	800b6ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a44e:	f000 fb4f 	bl	800aaf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a452:	f001 f8fb 	bl	800b64c <vPortEnterCritical>
 800a456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a458:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a45c:	b25b      	sxtb	r3, r3
 800a45e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a462:	d103      	bne.n	800a46c <xQueueGenericSend+0x174>
 800a464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a466:	2200      	movs	r2, #0
 800a468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a472:	b25b      	sxtb	r3, r3
 800a474:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a478:	d103      	bne.n	800a482 <xQueueGenericSend+0x18a>
 800a47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a482:	f001 f913 	bl	800b6ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a486:	1d3a      	adds	r2, r7, #4
 800a488:	f107 0314 	add.w	r3, r7, #20
 800a48c:	4611      	mov	r1, r2
 800a48e:	4618      	mov	r0, r3
 800a490:	f000 fd94 	bl	800afbc <xTaskCheckForTimeOut>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d124      	bne.n	800a4e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a49a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a49c:	f000 f8ea 	bl	800a674 <prvIsQueueFull>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d018      	beq.n	800a4d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a8:	3310      	adds	r3, #16
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	4611      	mov	r1, r2
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f000 fce4 	bl	800ae7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a4b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4b6:	f000 f88b 	bl	800a5d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a4ba:	f000 fb27 	bl	800ab0c <xTaskResumeAll>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f47f af7c 	bne.w	800a3be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a4c6:	4b0c      	ldr	r3, [pc, #48]	@ (800a4f8 <xQueueGenericSend+0x200>)
 800a4c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4cc:	601a      	str	r2, [r3, #0]
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	e772      	b.n	800a3be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4da:	f000 f879 	bl	800a5d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4de:	f000 fb15 	bl	800ab0c <xTaskResumeAll>
 800a4e2:	e76c      	b.n	800a3be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a4e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4e6:	f000 f873 	bl	800a5d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4ea:	f000 fb0f 	bl	800ab0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a4ee:	2300      	movs	r3, #0
		}
	}
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3738      	adds	r7, #56	@ 0x38
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	e000ed04 	.word	0xe000ed04

0800a4fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a508:	2300      	movs	r3, #0
 800a50a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a510:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10d      	bne.n	800a536 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d14d      	bne.n	800a5be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	4618      	mov	r0, r3
 800a528:	f000 feb0 	bl	800b28c <xTaskPriorityDisinherit>
 800a52c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	605a      	str	r2, [r3, #4]
 800a534:	e043      	b.n	800a5be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d119      	bne.n	800a570 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6898      	ldr	r0, [r3, #8]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a544:	461a      	mov	r2, r3
 800a546:	68b9      	ldr	r1, [r7, #8]
 800a548:	f001 fba8 	bl	800bc9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	689a      	ldr	r2, [r3, #8]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a554:	441a      	add	r2, r3
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	689a      	ldr	r2, [r3, #8]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	429a      	cmp	r2, r3
 800a564:	d32b      	bcc.n	800a5be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	609a      	str	r2, [r3, #8]
 800a56e:	e026      	b.n	800a5be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	68d8      	ldr	r0, [r3, #12]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a578:	461a      	mov	r2, r3
 800a57a:	68b9      	ldr	r1, [r7, #8]
 800a57c:	f001 fb8e 	bl	800bc9c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	68da      	ldr	r2, [r3, #12]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a588:	425b      	negs	r3, r3
 800a58a:	441a      	add	r2, r3
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	68da      	ldr	r2, [r3, #12]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d207      	bcs.n	800a5ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5a4:	425b      	negs	r3, r3
 800a5a6:	441a      	add	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d105      	bne.n	800a5be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d002      	beq.n	800a5be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	1c5a      	adds	r2, r3, #1
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a5c6:	697b      	ldr	r3, [r7, #20]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3718      	adds	r7, #24
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a5d8:	f001 f838 	bl	800b64c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a5e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a5e4:	e011      	b.n	800a60a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d012      	beq.n	800a614 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	3324      	adds	r3, #36	@ 0x24
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f000 fc68 	bl	800aec8 <xTaskRemoveFromEventList>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a5fe:	f000 fd41 	bl	800b084 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a602:	7bfb      	ldrb	r3, [r7, #15]
 800a604:	3b01      	subs	r3, #1
 800a606:	b2db      	uxtb	r3, r3
 800a608:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a60a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	dce9      	bgt.n	800a5e6 <prvUnlockQueue+0x16>
 800a612:	e000      	b.n	800a616 <prvUnlockQueue+0x46>
					break;
 800a614:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	22ff      	movs	r2, #255	@ 0xff
 800a61a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a61e:	f001 f845 	bl	800b6ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a622:	f001 f813 	bl	800b64c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a62c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a62e:	e011      	b.n	800a654 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d012      	beq.n	800a65e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	3310      	adds	r3, #16
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 fc43 	bl	800aec8 <xTaskRemoveFromEventList>
 800a642:	4603      	mov	r3, r0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d001      	beq.n	800a64c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a648:	f000 fd1c 	bl	800b084 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a64c:	7bbb      	ldrb	r3, [r7, #14]
 800a64e:	3b01      	subs	r3, #1
 800a650:	b2db      	uxtb	r3, r3
 800a652:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a654:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	dce9      	bgt.n	800a630 <prvUnlockQueue+0x60>
 800a65c:	e000      	b.n	800a660 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a65e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	22ff      	movs	r2, #255	@ 0xff
 800a664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a668:	f001 f820 	bl	800b6ac <vPortExitCritical>
}
 800a66c:	bf00      	nop
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a67c:	f000 ffe6 	bl	800b64c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a688:	429a      	cmp	r2, r3
 800a68a:	d102      	bne.n	800a692 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a68c:	2301      	movs	r3, #1
 800a68e:	60fb      	str	r3, [r7, #12]
 800a690:	e001      	b.n	800a696 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a692:	2300      	movs	r3, #0
 800a694:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a696:	f001 f809 	bl	800b6ac <vPortExitCritical>

	return xReturn;
 800a69a:	68fb      	ldr	r3, [r7, #12]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b08e      	sub	sp, #56	@ 0x38
 800a6a8:	af04      	add	r7, sp, #16
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
 800a6b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a6b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d10b      	bne.n	800a6d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6bc:	f383 8811 	msr	BASEPRI, r3
 800a6c0:	f3bf 8f6f 	isb	sy
 800a6c4:	f3bf 8f4f 	dsb	sy
 800a6c8:	623b      	str	r3, [r7, #32]
}
 800a6ca:	bf00      	nop
 800a6cc:	bf00      	nop
 800a6ce:	e7fd      	b.n	800a6cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10b      	bne.n	800a6ee <xTaskCreateStatic+0x4a>
	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6da:	f383 8811 	msr	BASEPRI, r3
 800a6de:	f3bf 8f6f 	isb	sy
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	61fb      	str	r3, [r7, #28]
}
 800a6e8:	bf00      	nop
 800a6ea:	bf00      	nop
 800a6ec:	e7fd      	b.n	800a6ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a6ee:	2354      	movs	r3, #84	@ 0x54
 800a6f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	2b54      	cmp	r3, #84	@ 0x54
 800a6f6:	d00b      	beq.n	800a710 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6fc:	f383 8811 	msr	BASEPRI, r3
 800a700:	f3bf 8f6f 	isb	sy
 800a704:	f3bf 8f4f 	dsb	sy
 800a708:	61bb      	str	r3, [r7, #24]
}
 800a70a:	bf00      	nop
 800a70c:	bf00      	nop
 800a70e:	e7fd      	b.n	800a70c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a712:	2b00      	cmp	r3, #0
 800a714:	d01e      	beq.n	800a754 <xTaskCreateStatic+0xb0>
 800a716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d01b      	beq.n	800a754 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a71e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a722:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a724:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a728:	2202      	movs	r2, #2
 800a72a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a72e:	2300      	movs	r3, #0
 800a730:	9303      	str	r3, [sp, #12]
 800a732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a734:	9302      	str	r3, [sp, #8]
 800a736:	f107 0314 	add.w	r3, r7, #20
 800a73a:	9301      	str	r3, [sp, #4]
 800a73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	68b9      	ldr	r1, [r7, #8]
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f000 f850 	bl	800a7ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a74c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a74e:	f000 f8cd 	bl	800a8ec <prvAddNewTaskToReadyList>
 800a752:	e001      	b.n	800a758 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800a754:	2300      	movs	r3, #0
 800a756:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a758:	697b      	ldr	r3, [r7, #20]
	}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3728      	adds	r7, #40	@ 0x28
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a762:	b580      	push	{r7, lr}
 800a764:	b08c      	sub	sp, #48	@ 0x30
 800a766:	af04      	add	r7, sp, #16
 800a768:	60f8      	str	r0, [r7, #12]
 800a76a:	60b9      	str	r1, [r7, #8]
 800a76c:	603b      	str	r3, [r7, #0]
 800a76e:	4613      	mov	r3, r2
 800a770:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a772:	88fb      	ldrh	r3, [r7, #6]
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4618      	mov	r0, r3
 800a778:	f001 f82a 	bl	800b7d0 <pvPortMalloc>
 800a77c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00e      	beq.n	800a7a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a784:	2054      	movs	r0, #84	@ 0x54
 800a786:	f001 f823 	bl	800b7d0 <pvPortMalloc>
 800a78a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d003      	beq.n	800a79a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	697a      	ldr	r2, [r7, #20]
 800a796:	631a      	str	r2, [r3, #48]	@ 0x30
 800a798:	e005      	b.n	800a7a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a79a:	6978      	ldr	r0, [r7, #20]
 800a79c:	f001 f8e0 	bl	800b960 <vPortFree>
 800a7a0:	e001      	b.n	800a7a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a7a6:	69fb      	ldr	r3, [r7, #28]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d017      	beq.n	800a7dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a7b4:	88fa      	ldrh	r2, [r7, #6]
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	9303      	str	r3, [sp, #12]
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	9302      	str	r3, [sp, #8]
 800a7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c0:	9301      	str	r3, [sp, #4]
 800a7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	68b9      	ldr	r1, [r7, #8]
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f000 f80e 	bl	800a7ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7d0:	69f8      	ldr	r0, [r7, #28]
 800a7d2:	f000 f88b 	bl	800a8ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	61bb      	str	r3, [r7, #24]
 800a7da:	e002      	b.n	800a7e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a7dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a7e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a7e2:	69bb      	ldr	r3, [r7, #24]
	}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3720      	adds	r7, #32
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b088      	sub	sp, #32
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
 800a7f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a804:	3b01      	subs	r3, #1
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4413      	add	r3, r2
 800a80a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	f023 0307 	bic.w	r3, r3, #7
 800a812:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	f003 0307 	and.w	r3, r3, #7
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00b      	beq.n	800a836 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800a81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	617b      	str	r3, [r7, #20]
}
 800a830:	bf00      	nop
 800a832:	bf00      	nop
 800a834:	e7fd      	b.n	800a832 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a836:	2300      	movs	r3, #0
 800a838:	61fb      	str	r3, [r7, #28]
 800a83a:	e012      	b.n	800a862 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	4413      	add	r3, r2
 800a842:	7819      	ldrb	r1, [r3, #0]
 800a844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	4413      	add	r3, r2
 800a84a:	3334      	adds	r3, #52	@ 0x34
 800a84c:	460a      	mov	r2, r1
 800a84e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	4413      	add	r3, r2
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d006      	beq.n	800a86a <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	3301      	adds	r3, #1
 800a860:	61fb      	str	r3, [r7, #28]
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	2b0f      	cmp	r3, #15
 800a866:	d9e9      	bls.n	800a83c <prvInitialiseNewTask+0x50>
 800a868:	e000      	b.n	800a86c <prvInitialiseNewTask+0x80>
		{
			break;
 800a86a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a876:	2b06      	cmp	r3, #6
 800a878:	d901      	bls.n	800a87e <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a87a:	2306      	movs	r3, #6
 800a87c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a880:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a882:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a886:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a888:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88c:	2200      	movs	r2, #0
 800a88e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a892:	3304      	adds	r3, #4
 800a894:	4618      	mov	r0, r3
 800a896:	f7ff fba4 	bl	8009fe2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89c:	3318      	adds	r3, #24
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7ff fb9f 	bl	8009fe2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ac:	f1c3 0207 	rsb	r2, r3, #7
 800a8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8b8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8bc:	2200      	movs	r2, #0
 800a8be:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a8c8:	683a      	ldr	r2, [r7, #0]
 800a8ca:	68f9      	ldr	r1, [r7, #12]
 800a8cc:	69b8      	ldr	r0, [r7, #24]
 800a8ce:	f000 fdcb 	bl	800b468 <pxPortInitialiseStack>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d002      	beq.n	800a8e4 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8e4:	bf00      	nop
 800a8e6:	3720      	adds	r7, #32
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a8f4:	f000 feaa 	bl	800b64c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a8f8:	4b2a      	ldr	r3, [pc, #168]	@ (800a9a4 <prvAddNewTaskToReadyList+0xb8>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	4a29      	ldr	r2, [pc, #164]	@ (800a9a4 <prvAddNewTaskToReadyList+0xb8>)
 800a900:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a902:	4b29      	ldr	r3, [pc, #164]	@ (800a9a8 <prvAddNewTaskToReadyList+0xbc>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d109      	bne.n	800a91e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a90a:	4a27      	ldr	r2, [pc, #156]	@ (800a9a8 <prvAddNewTaskToReadyList+0xbc>)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a910:	4b24      	ldr	r3, [pc, #144]	@ (800a9a4 <prvAddNewTaskToReadyList+0xb8>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b01      	cmp	r3, #1
 800a916:	d110      	bne.n	800a93a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a918:	f000 fbd8 	bl	800b0cc <prvInitialiseTaskLists>
 800a91c:	e00d      	b.n	800a93a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a91e:	4b23      	ldr	r3, [pc, #140]	@ (800a9ac <prvAddNewTaskToReadyList+0xc0>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d109      	bne.n	800a93a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a926:	4b20      	ldr	r3, [pc, #128]	@ (800a9a8 <prvAddNewTaskToReadyList+0xbc>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a930:	429a      	cmp	r2, r3
 800a932:	d802      	bhi.n	800a93a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a934:	4a1c      	ldr	r2, [pc, #112]	@ (800a9a8 <prvAddNewTaskToReadyList+0xbc>)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a93a:	4b1d      	ldr	r3, [pc, #116]	@ (800a9b0 <prvAddNewTaskToReadyList+0xc4>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3301      	adds	r3, #1
 800a940:	4a1b      	ldr	r2, [pc, #108]	@ (800a9b0 <prvAddNewTaskToReadyList+0xc4>)
 800a942:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a948:	2201      	movs	r2, #1
 800a94a:	409a      	lsls	r2, r3
 800a94c:	4b19      	ldr	r3, [pc, #100]	@ (800a9b4 <prvAddNewTaskToReadyList+0xc8>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4313      	orrs	r3, r2
 800a952:	4a18      	ldr	r2, [pc, #96]	@ (800a9b4 <prvAddNewTaskToReadyList+0xc8>)
 800a954:	6013      	str	r3, [r2, #0]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a95a:	4613      	mov	r3, r2
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	4413      	add	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4a15      	ldr	r2, [pc, #84]	@ (800a9b8 <prvAddNewTaskToReadyList+0xcc>)
 800a964:	441a      	add	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	3304      	adds	r3, #4
 800a96a:	4619      	mov	r1, r3
 800a96c:	4610      	mov	r0, r2
 800a96e:	f7ff fb44 	bl	8009ffa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a972:	f000 fe9b 	bl	800b6ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a976:	4b0d      	ldr	r3, [pc, #52]	@ (800a9ac <prvAddNewTaskToReadyList+0xc0>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00e      	beq.n	800a99c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a97e:	4b0a      	ldr	r3, [pc, #40]	@ (800a9a8 <prvAddNewTaskToReadyList+0xbc>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a988:	429a      	cmp	r2, r3
 800a98a:	d207      	bcs.n	800a99c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a98c:	4b0b      	ldr	r3, [pc, #44]	@ (800a9bc <prvAddNewTaskToReadyList+0xd0>)
 800a98e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a99c:	bf00      	nop
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	200005a0 	.word	0x200005a0
 800a9a8:	200004a0 	.word	0x200004a0
 800a9ac:	200005ac 	.word	0x200005ac
 800a9b0:	200005bc 	.word	0x200005bc
 800a9b4:	200005a8 	.word	0x200005a8
 800a9b8:	200004a4 	.word	0x200004a4
 800a9bc:	e000ed04 	.word	0xe000ed04

0800a9c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d018      	beq.n	800aa04 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a9d2:	4b14      	ldr	r3, [pc, #80]	@ (800aa24 <vTaskDelay+0x64>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00b      	beq.n	800a9f2 <vTaskDelay+0x32>
	__asm volatile
 800a9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9de:	f383 8811 	msr	BASEPRI, r3
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	60bb      	str	r3, [r7, #8]
}
 800a9ec:	bf00      	nop
 800a9ee:	bf00      	nop
 800a9f0:	e7fd      	b.n	800a9ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a9f2:	f000 f87d 	bl	800aaf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fccf 	bl	800b39c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a9fe:	f000 f885 	bl	800ab0c <xTaskResumeAll>
 800aa02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d107      	bne.n	800aa1a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800aa0a:	4b07      	ldr	r3, [pc, #28]	@ (800aa28 <vTaskDelay+0x68>)
 800aa0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa10:	601a      	str	r2, [r3, #0]
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aa1a:	bf00      	nop
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	200005c8 	.word	0x200005c8
 800aa28:	e000ed04 	.word	0xe000ed04

0800aa2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b08a      	sub	sp, #40	@ 0x28
 800aa30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aa32:	2300      	movs	r3, #0
 800aa34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aa36:	2300      	movs	r3, #0
 800aa38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aa3a:	463a      	mov	r2, r7
 800aa3c:	1d39      	adds	r1, r7, #4
 800aa3e:	f107 0308 	add.w	r3, r7, #8
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7f5 fbf4 	bl	8000230 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aa48:	6839      	ldr	r1, [r7, #0]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	9202      	str	r2, [sp, #8]
 800aa50:	9301      	str	r3, [sp, #4]
 800aa52:	2300      	movs	r3, #0
 800aa54:	9300      	str	r3, [sp, #0]
 800aa56:	2300      	movs	r3, #0
 800aa58:	460a      	mov	r2, r1
 800aa5a:	491f      	ldr	r1, [pc, #124]	@ (800aad8 <vTaskStartScheduler+0xac>)
 800aa5c:	481f      	ldr	r0, [pc, #124]	@ (800aadc <vTaskStartScheduler+0xb0>)
 800aa5e:	f7ff fe21 	bl	800a6a4 <xTaskCreateStatic>
 800aa62:	4603      	mov	r3, r0
 800aa64:	4a1e      	ldr	r2, [pc, #120]	@ (800aae0 <vTaskStartScheduler+0xb4>)
 800aa66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aa68:	4b1d      	ldr	r3, [pc, #116]	@ (800aae0 <vTaskStartScheduler+0xb4>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d002      	beq.n	800aa76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aa70:	2301      	movs	r3, #1
 800aa72:	617b      	str	r3, [r7, #20]
 800aa74:	e001      	b.n	800aa7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aa76:	2300      	movs	r3, #0
 800aa78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d116      	bne.n	800aaae <vTaskStartScheduler+0x82>
	__asm volatile
 800aa80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa84:	f383 8811 	msr	BASEPRI, r3
 800aa88:	f3bf 8f6f 	isb	sy
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	613b      	str	r3, [r7, #16]
}
 800aa92:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa94:	4b13      	ldr	r3, [pc, #76]	@ (800aae4 <vTaskStartScheduler+0xb8>)
 800aa96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa9c:	4b12      	ldr	r3, [pc, #72]	@ (800aae8 <vTaskStartScheduler+0xbc>)
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800aaa2:	4b12      	ldr	r3, [pc, #72]	@ (800aaec <vTaskStartScheduler+0xc0>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aaa8:	f000 fd5e 	bl	800b568 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aaac:	e00f      	b.n	800aace <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aab4:	d10b      	bne.n	800aace <vTaskStartScheduler+0xa2>
	__asm volatile
 800aab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaba:	f383 8811 	msr	BASEPRI, r3
 800aabe:	f3bf 8f6f 	isb	sy
 800aac2:	f3bf 8f4f 	dsb	sy
 800aac6:	60fb      	str	r3, [r7, #12]
}
 800aac8:	bf00      	nop
 800aaca:	bf00      	nop
 800aacc:	e7fd      	b.n	800aaca <vTaskStartScheduler+0x9e>
}
 800aace:	bf00      	nop
 800aad0:	3718      	adds	r7, #24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	0800c924 	.word	0x0800c924
 800aadc:	0800b09d 	.word	0x0800b09d
 800aae0:	200005c4 	.word	0x200005c4
 800aae4:	200005c0 	.word	0x200005c0
 800aae8:	200005ac 	.word	0x200005ac
 800aaec:	200005a4 	.word	0x200005a4

0800aaf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800aaf4:	4b04      	ldr	r3, [pc, #16]	@ (800ab08 <vTaskSuspendAll+0x18>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	4a03      	ldr	r2, [pc, #12]	@ (800ab08 <vTaskSuspendAll+0x18>)
 800aafc:	6013      	str	r3, [r2, #0]
}
 800aafe:	bf00      	nop
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bc80      	pop	{r7}
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	200005c8 	.word	0x200005c8

0800ab0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ab12:	2300      	movs	r3, #0
 800ab14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ab16:	2300      	movs	r3, #0
 800ab18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ab1a:	4b42      	ldr	r3, [pc, #264]	@ (800ac24 <xTaskResumeAll+0x118>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10b      	bne.n	800ab3a <xTaskResumeAll+0x2e>
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	603b      	str	r3, [r7, #0]
}
 800ab34:	bf00      	nop
 800ab36:	bf00      	nop
 800ab38:	e7fd      	b.n	800ab36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ab3a:	f000 fd87 	bl	800b64c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ab3e:	4b39      	ldr	r3, [pc, #228]	@ (800ac24 <xTaskResumeAll+0x118>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	3b01      	subs	r3, #1
 800ab44:	4a37      	ldr	r2, [pc, #220]	@ (800ac24 <xTaskResumeAll+0x118>)
 800ab46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab48:	4b36      	ldr	r3, [pc, #216]	@ (800ac24 <xTaskResumeAll+0x118>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d161      	bne.n	800ac14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ab50:	4b35      	ldr	r3, [pc, #212]	@ (800ac28 <xTaskResumeAll+0x11c>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d05d      	beq.n	800ac14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab58:	e02e      	b.n	800abb8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ab5a:	4b34      	ldr	r3, [pc, #208]	@ (800ac2c <xTaskResumeAll+0x120>)
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	3318      	adds	r3, #24
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7ff faa2 	bl	800a0b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	3304      	adds	r3, #4
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7ff fa9d 	bl	800a0b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	409a      	lsls	r2, r3
 800ab7e:	4b2c      	ldr	r3, [pc, #176]	@ (800ac30 <xTaskResumeAll+0x124>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	4a2a      	ldr	r2, [pc, #168]	@ (800ac30 <xTaskResumeAll+0x124>)
 800ab86:	6013      	str	r3, [r2, #0]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	4413      	add	r3, r2
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	4a27      	ldr	r2, [pc, #156]	@ (800ac34 <xTaskResumeAll+0x128>)
 800ab96:	441a      	add	r2, r3
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	3304      	adds	r3, #4
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	4610      	mov	r0, r2
 800aba0:	f7ff fa2b 	bl	8009ffa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aba8:	4b23      	ldr	r3, [pc, #140]	@ (800ac38 <xTaskResumeAll+0x12c>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abae:	429a      	cmp	r2, r3
 800abb0:	d302      	bcc.n	800abb8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800abb2:	4b22      	ldr	r3, [pc, #136]	@ (800ac3c <xTaskResumeAll+0x130>)
 800abb4:	2201      	movs	r2, #1
 800abb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800abb8:	4b1c      	ldr	r3, [pc, #112]	@ (800ac2c <xTaskResumeAll+0x120>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d1cc      	bne.n	800ab5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d001      	beq.n	800abca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800abc6:	f000 fb1f 	bl	800b208 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800abca:	4b1d      	ldr	r3, [pc, #116]	@ (800ac40 <xTaskResumeAll+0x134>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d010      	beq.n	800abf8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800abd6:	f000 f837 	bl	800ac48 <xTaskIncrementTick>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800abe0:	4b16      	ldr	r3, [pc, #88]	@ (800ac3c <xTaskResumeAll+0x130>)
 800abe2:	2201      	movs	r2, #1
 800abe4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	3b01      	subs	r3, #1
 800abea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1f1      	bne.n	800abd6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800abf2:	4b13      	ldr	r3, [pc, #76]	@ (800ac40 <xTaskResumeAll+0x134>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800abf8:	4b10      	ldr	r3, [pc, #64]	@ (800ac3c <xTaskResumeAll+0x130>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d009      	beq.n	800ac14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ac00:	2301      	movs	r3, #1
 800ac02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ac04:	4b0f      	ldr	r3, [pc, #60]	@ (800ac44 <xTaskResumeAll+0x138>)
 800ac06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac0a:	601a      	str	r2, [r3, #0]
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac14:	f000 fd4a 	bl	800b6ac <vPortExitCritical>

	return xAlreadyYielded;
 800ac18:	68bb      	ldr	r3, [r7, #8]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	200005c8 	.word	0x200005c8
 800ac28:	200005a0 	.word	0x200005a0
 800ac2c:	20000560 	.word	0x20000560
 800ac30:	200005a8 	.word	0x200005a8
 800ac34:	200004a4 	.word	0x200004a4
 800ac38:	200004a0 	.word	0x200004a0
 800ac3c:	200005b4 	.word	0x200005b4
 800ac40:	200005b0 	.word	0x200005b0
 800ac44:	e000ed04 	.word	0xe000ed04

0800ac48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac52:	4b51      	ldr	r3, [pc, #324]	@ (800ad98 <xTaskIncrementTick+0x150>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f040 808e 	bne.w	800ad78 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac5c:	4b4f      	ldr	r3, [pc, #316]	@ (800ad9c <xTaskIncrementTick+0x154>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	3301      	adds	r3, #1
 800ac62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac64:	4a4d      	ldr	r2, [pc, #308]	@ (800ad9c <xTaskIncrementTick+0x154>)
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d121      	bne.n	800acb4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac70:	4b4b      	ldr	r3, [pc, #300]	@ (800ada0 <xTaskIncrementTick+0x158>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00b      	beq.n	800ac92 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ac7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	603b      	str	r3, [r7, #0]
}
 800ac8c:	bf00      	nop
 800ac8e:	bf00      	nop
 800ac90:	e7fd      	b.n	800ac8e <xTaskIncrementTick+0x46>
 800ac92:	4b43      	ldr	r3, [pc, #268]	@ (800ada0 <xTaskIncrementTick+0x158>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	60fb      	str	r3, [r7, #12]
 800ac98:	4b42      	ldr	r3, [pc, #264]	@ (800ada4 <xTaskIncrementTick+0x15c>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a40      	ldr	r2, [pc, #256]	@ (800ada0 <xTaskIncrementTick+0x158>)
 800ac9e:	6013      	str	r3, [r2, #0]
 800aca0:	4a40      	ldr	r2, [pc, #256]	@ (800ada4 <xTaskIncrementTick+0x15c>)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	6013      	str	r3, [r2, #0]
 800aca6:	4b40      	ldr	r3, [pc, #256]	@ (800ada8 <xTaskIncrementTick+0x160>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	3301      	adds	r3, #1
 800acac:	4a3e      	ldr	r2, [pc, #248]	@ (800ada8 <xTaskIncrementTick+0x160>)
 800acae:	6013      	str	r3, [r2, #0]
 800acb0:	f000 faaa 	bl	800b208 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800acb4:	4b3d      	ldr	r3, [pc, #244]	@ (800adac <xTaskIncrementTick+0x164>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	693a      	ldr	r2, [r7, #16]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d34d      	bcc.n	800ad5a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acbe:	4b38      	ldr	r3, [pc, #224]	@ (800ada0 <xTaskIncrementTick+0x158>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d101      	bne.n	800accc <xTaskIncrementTick+0x84>
 800acc8:	2301      	movs	r3, #1
 800acca:	e000      	b.n	800acce <xTaskIncrementTick+0x86>
 800accc:	2300      	movs	r3, #0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d004      	beq.n	800acdc <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acd2:	4b36      	ldr	r3, [pc, #216]	@ (800adac <xTaskIncrementTick+0x164>)
 800acd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800acd8:	601a      	str	r2, [r3, #0]
					break;
 800acda:	e03e      	b.n	800ad5a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800acdc:	4b30      	ldr	r3, [pc, #192]	@ (800ada0 <xTaskIncrementTick+0x158>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d203      	bcs.n	800acfc <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800acf4:	4a2d      	ldr	r2, [pc, #180]	@ (800adac <xTaskIncrementTick+0x164>)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6013      	str	r3, [r2, #0]
						break;
 800acfa:	e02e      	b.n	800ad5a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	3304      	adds	r3, #4
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7ff f9d5 	bl	800a0b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d004      	beq.n	800ad18 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	3318      	adds	r3, #24
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7ff f9cc 	bl	800a0b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	409a      	lsls	r2, r3
 800ad20:	4b23      	ldr	r3, [pc, #140]	@ (800adb0 <xTaskIncrementTick+0x168>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	4a22      	ldr	r2, [pc, #136]	@ (800adb0 <xTaskIncrementTick+0x168>)
 800ad28:	6013      	str	r3, [r2, #0]
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad2e:	4613      	mov	r3, r2
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4413      	add	r3, r2
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	4a1f      	ldr	r2, [pc, #124]	@ (800adb4 <xTaskIncrementTick+0x16c>)
 800ad38:	441a      	add	r2, r3
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	3304      	adds	r3, #4
 800ad3e:	4619      	mov	r1, r3
 800ad40:	4610      	mov	r0, r2
 800ad42:	f7ff f95a 	bl	8009ffa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad4a:	4b1b      	ldr	r3, [pc, #108]	@ (800adb8 <xTaskIncrementTick+0x170>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d3b4      	bcc.n	800acbe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ad54:	2301      	movs	r3, #1
 800ad56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad58:	e7b1      	b.n	800acbe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad5a:	4b17      	ldr	r3, [pc, #92]	@ (800adb8 <xTaskIncrementTick+0x170>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad60:	4914      	ldr	r1, [pc, #80]	@ (800adb4 <xTaskIncrementTick+0x16c>)
 800ad62:	4613      	mov	r3, r2
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	4413      	add	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	440b      	add	r3, r1
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d907      	bls.n	800ad82 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ad72:	2301      	movs	r3, #1
 800ad74:	617b      	str	r3, [r7, #20]
 800ad76:	e004      	b.n	800ad82 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ad78:	4b10      	ldr	r3, [pc, #64]	@ (800adbc <xTaskIncrementTick+0x174>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	4a0f      	ldr	r2, [pc, #60]	@ (800adbc <xTaskIncrementTick+0x174>)
 800ad80:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ad82:	4b0f      	ldr	r3, [pc, #60]	@ (800adc0 <xTaskIncrementTick+0x178>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ad8e:	697b      	ldr	r3, [r7, #20]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3718      	adds	r7, #24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	200005c8 	.word	0x200005c8
 800ad9c:	200005a4 	.word	0x200005a4
 800ada0:	20000558 	.word	0x20000558
 800ada4:	2000055c 	.word	0x2000055c
 800ada8:	200005b8 	.word	0x200005b8
 800adac:	200005c0 	.word	0x200005c0
 800adb0:	200005a8 	.word	0x200005a8
 800adb4:	200004a4 	.word	0x200004a4
 800adb8:	200004a0 	.word	0x200004a0
 800adbc:	200005b0 	.word	0x200005b0
 800adc0:	200005b4 	.word	0x200005b4

0800adc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800adc4:	b480      	push	{r7}
 800adc6:	b087      	sub	sp, #28
 800adc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800adca:	4b27      	ldr	r3, [pc, #156]	@ (800ae68 <vTaskSwitchContext+0xa4>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d003      	beq.n	800adda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800add2:	4b26      	ldr	r3, [pc, #152]	@ (800ae6c <vTaskSwitchContext+0xa8>)
 800add4:	2201      	movs	r2, #1
 800add6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800add8:	e040      	b.n	800ae5c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800adda:	4b24      	ldr	r3, [pc, #144]	@ (800ae6c <vTaskSwitchContext+0xa8>)
 800addc:	2200      	movs	r2, #0
 800adde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ade0:	4b23      	ldr	r3, [pc, #140]	@ (800ae70 <vTaskSwitchContext+0xac>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	fab3 f383 	clz	r3, r3
 800adec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800adee:	7afb      	ldrb	r3, [r7, #11]
 800adf0:	f1c3 031f 	rsb	r3, r3, #31
 800adf4:	617b      	str	r3, [r7, #20]
 800adf6:	491f      	ldr	r1, [pc, #124]	@ (800ae74 <vTaskSwitchContext+0xb0>)
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	4613      	mov	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4413      	add	r3, r2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	440b      	add	r3, r1
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10b      	bne.n	800ae22 <vTaskSwitchContext+0x5e>
	__asm volatile
 800ae0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	607b      	str	r3, [r7, #4]
}
 800ae1c:	bf00      	nop
 800ae1e:	bf00      	nop
 800ae20:	e7fd      	b.n	800ae1e <vTaskSwitchContext+0x5a>
 800ae22:	697a      	ldr	r2, [r7, #20]
 800ae24:	4613      	mov	r3, r2
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	4413      	add	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4a11      	ldr	r2, [pc, #68]	@ (800ae74 <vTaskSwitchContext+0xb0>)
 800ae2e:	4413      	add	r3, r2
 800ae30:	613b      	str	r3, [r7, #16]
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	685a      	ldr	r2, [r3, #4]
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	605a      	str	r2, [r3, #4]
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	685a      	ldr	r2, [r3, #4]
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	3308      	adds	r3, #8
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d104      	bne.n	800ae52 <vTaskSwitchContext+0x8e>
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	685a      	ldr	r2, [r3, #4]
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	605a      	str	r2, [r3, #4]
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	4a07      	ldr	r2, [pc, #28]	@ (800ae78 <vTaskSwitchContext+0xb4>)
 800ae5a:	6013      	str	r3, [r2, #0]
}
 800ae5c:	bf00      	nop
 800ae5e:	371c      	adds	r7, #28
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bc80      	pop	{r7}
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	200005c8 	.word	0x200005c8
 800ae6c:	200005b4 	.word	0x200005b4
 800ae70:	200005a8 	.word	0x200005a8
 800ae74:	200004a4 	.word	0x200004a4
 800ae78:	200004a0 	.word	0x200004a0

0800ae7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10b      	bne.n	800aea4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ae8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	60fb      	str	r3, [r7, #12]
}
 800ae9e:	bf00      	nop
 800aea0:	bf00      	nop
 800aea2:	e7fd      	b.n	800aea0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aea4:	4b07      	ldr	r3, [pc, #28]	@ (800aec4 <vTaskPlaceOnEventList+0x48>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	3318      	adds	r3, #24
 800aeaa:	4619      	mov	r1, r3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7ff f8c7 	bl	800a040 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aeb2:	2101      	movs	r1, #1
 800aeb4:	6838      	ldr	r0, [r7, #0]
 800aeb6:	f000 fa71 	bl	800b39c <prvAddCurrentTaskToDelayedList>
}
 800aeba:	bf00      	nop
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	200004a0 	.word	0x200004a0

0800aec8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d10b      	bne.n	800aef6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee2:	f383 8811 	msr	BASEPRI, r3
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	60fb      	str	r3, [r7, #12]
}
 800aef0:	bf00      	nop
 800aef2:	bf00      	nop
 800aef4:	e7fd      	b.n	800aef2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	3318      	adds	r3, #24
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7ff f8d8 	bl	800a0b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af00:	4b1d      	ldr	r3, [pc, #116]	@ (800af78 <xTaskRemoveFromEventList+0xb0>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d11c      	bne.n	800af42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	3304      	adds	r3, #4
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7ff f8cf 	bl	800a0b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af16:	2201      	movs	r2, #1
 800af18:	409a      	lsls	r2, r3
 800af1a:	4b18      	ldr	r3, [pc, #96]	@ (800af7c <xTaskRemoveFromEventList+0xb4>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4313      	orrs	r3, r2
 800af20:	4a16      	ldr	r2, [pc, #88]	@ (800af7c <xTaskRemoveFromEventList+0xb4>)
 800af22:	6013      	str	r3, [r2, #0]
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af28:	4613      	mov	r3, r2
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	4413      	add	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4a13      	ldr	r2, [pc, #76]	@ (800af80 <xTaskRemoveFromEventList+0xb8>)
 800af32:	441a      	add	r2, r3
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	3304      	adds	r3, #4
 800af38:	4619      	mov	r1, r3
 800af3a:	4610      	mov	r0, r2
 800af3c:	f7ff f85d 	bl	8009ffa <vListInsertEnd>
 800af40:	e005      	b.n	800af4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	3318      	adds	r3, #24
 800af46:	4619      	mov	r1, r3
 800af48:	480e      	ldr	r0, [pc, #56]	@ (800af84 <xTaskRemoveFromEventList+0xbc>)
 800af4a:	f7ff f856 	bl	8009ffa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af52:	4b0d      	ldr	r3, [pc, #52]	@ (800af88 <xTaskRemoveFromEventList+0xc0>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af58:	429a      	cmp	r2, r3
 800af5a:	d905      	bls.n	800af68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af5c:	2301      	movs	r3, #1
 800af5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af60:	4b0a      	ldr	r3, [pc, #40]	@ (800af8c <xTaskRemoveFromEventList+0xc4>)
 800af62:	2201      	movs	r2, #1
 800af64:	601a      	str	r2, [r3, #0]
 800af66:	e001      	b.n	800af6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800af68:	2300      	movs	r3, #0
 800af6a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800af6c:	697b      	ldr	r3, [r7, #20]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	200005c8 	.word	0x200005c8
 800af7c:	200005a8 	.word	0x200005a8
 800af80:	200004a4 	.word	0x200004a4
 800af84:	20000560 	.word	0x20000560
 800af88:	200004a0 	.word	0x200004a0
 800af8c:	200005b4 	.word	0x200005b4

0800af90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af98:	4b06      	ldr	r3, [pc, #24]	@ (800afb4 <vTaskInternalSetTimeOutState+0x24>)
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800afa0:	4b05      	ldr	r3, [pc, #20]	@ (800afb8 <vTaskInternalSetTimeOutState+0x28>)
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	605a      	str	r2, [r3, #4]
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	bc80      	pop	{r7}
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	200005b8 	.word	0x200005b8
 800afb8:	200005a4 	.word	0x200005a4

0800afbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b088      	sub	sp, #32
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10b      	bne.n	800afe4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800afcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd0:	f383 8811 	msr	BASEPRI, r3
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	613b      	str	r3, [r7, #16]
}
 800afde:	bf00      	nop
 800afe0:	bf00      	nop
 800afe2:	e7fd      	b.n	800afe0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d10b      	bne.n	800b002 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800afea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afee:	f383 8811 	msr	BASEPRI, r3
 800aff2:	f3bf 8f6f 	isb	sy
 800aff6:	f3bf 8f4f 	dsb	sy
 800affa:	60fb      	str	r3, [r7, #12]
}
 800affc:	bf00      	nop
 800affe:	bf00      	nop
 800b000:	e7fd      	b.n	800affe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b002:	f000 fb23 	bl	800b64c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b006:	4b1d      	ldr	r3, [pc, #116]	@ (800b07c <xTaskCheckForTimeOut+0xc0>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	69ba      	ldr	r2, [r7, #24]
 800b012:	1ad3      	subs	r3, r2, r3
 800b014:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b01e:	d102      	bne.n	800b026 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b020:	2300      	movs	r3, #0
 800b022:	61fb      	str	r3, [r7, #28]
 800b024:	e023      	b.n	800b06e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	4b15      	ldr	r3, [pc, #84]	@ (800b080 <xTaskCheckForTimeOut+0xc4>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d007      	beq.n	800b042 <xTaskCheckForTimeOut+0x86>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	69ba      	ldr	r2, [r7, #24]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d302      	bcc.n	800b042 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b03c:	2301      	movs	r3, #1
 800b03e:	61fb      	str	r3, [r7, #28]
 800b040:	e015      	b.n	800b06e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	697a      	ldr	r2, [r7, #20]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d20b      	bcs.n	800b064 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	1ad2      	subs	r2, r2, r3
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f7ff ff99 	bl	800af90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b05e:	2300      	movs	r3, #0
 800b060:	61fb      	str	r3, [r7, #28]
 800b062:	e004      	b.n	800b06e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	2200      	movs	r2, #0
 800b068:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b06a:	2301      	movs	r3, #1
 800b06c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b06e:	f000 fb1d 	bl	800b6ac <vPortExitCritical>

	return xReturn;
 800b072:	69fb      	ldr	r3, [r7, #28]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3720      	adds	r7, #32
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	200005a4 	.word	0x200005a4
 800b080:	200005b8 	.word	0x200005b8

0800b084 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b084:	b480      	push	{r7}
 800b086:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b088:	4b03      	ldr	r3, [pc, #12]	@ (800b098 <vTaskMissedYield+0x14>)
 800b08a:	2201      	movs	r2, #1
 800b08c:	601a      	str	r2, [r3, #0]
}
 800b08e:	bf00      	nop
 800b090:	46bd      	mov	sp, r7
 800b092:	bc80      	pop	{r7}
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	200005b4 	.word	0x200005b4

0800b09c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b0a4:	f000 f852 	bl	800b14c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b0a8:	4b06      	ldr	r3, [pc, #24]	@ (800b0c4 <prvIdleTask+0x28>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d9f9      	bls.n	800b0a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b0b0:	4b05      	ldr	r3, [pc, #20]	@ (800b0c8 <prvIdleTask+0x2c>)
 800b0b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0b6:	601a      	str	r2, [r3, #0]
 800b0b8:	f3bf 8f4f 	dsb	sy
 800b0bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b0c0:	e7f0      	b.n	800b0a4 <prvIdleTask+0x8>
 800b0c2:	bf00      	nop
 800b0c4:	200004a4 	.word	0x200004a4
 800b0c8:	e000ed04 	.word	0xe000ed04

0800b0cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	607b      	str	r3, [r7, #4]
 800b0d6:	e00c      	b.n	800b0f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4a12      	ldr	r2, [pc, #72]	@ (800b12c <prvInitialiseTaskLists+0x60>)
 800b0e4:	4413      	add	r3, r2
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fe ff5c 	bl	8009fa4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	607b      	str	r3, [r7, #4]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2b06      	cmp	r3, #6
 800b0f6:	d9ef      	bls.n	800b0d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b0f8:	480d      	ldr	r0, [pc, #52]	@ (800b130 <prvInitialiseTaskLists+0x64>)
 800b0fa:	f7fe ff53 	bl	8009fa4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b0fe:	480d      	ldr	r0, [pc, #52]	@ (800b134 <prvInitialiseTaskLists+0x68>)
 800b100:	f7fe ff50 	bl	8009fa4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b104:	480c      	ldr	r0, [pc, #48]	@ (800b138 <prvInitialiseTaskLists+0x6c>)
 800b106:	f7fe ff4d 	bl	8009fa4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b10a:	480c      	ldr	r0, [pc, #48]	@ (800b13c <prvInitialiseTaskLists+0x70>)
 800b10c:	f7fe ff4a 	bl	8009fa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b110:	480b      	ldr	r0, [pc, #44]	@ (800b140 <prvInitialiseTaskLists+0x74>)
 800b112:	f7fe ff47 	bl	8009fa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b116:	4b0b      	ldr	r3, [pc, #44]	@ (800b144 <prvInitialiseTaskLists+0x78>)
 800b118:	4a05      	ldr	r2, [pc, #20]	@ (800b130 <prvInitialiseTaskLists+0x64>)
 800b11a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b11c:	4b0a      	ldr	r3, [pc, #40]	@ (800b148 <prvInitialiseTaskLists+0x7c>)
 800b11e:	4a05      	ldr	r2, [pc, #20]	@ (800b134 <prvInitialiseTaskLists+0x68>)
 800b120:	601a      	str	r2, [r3, #0]
}
 800b122:	bf00      	nop
 800b124:	3708      	adds	r7, #8
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	200004a4 	.word	0x200004a4
 800b130:	20000530 	.word	0x20000530
 800b134:	20000544 	.word	0x20000544
 800b138:	20000560 	.word	0x20000560
 800b13c:	20000574 	.word	0x20000574
 800b140:	2000058c 	.word	0x2000058c
 800b144:	20000558 	.word	0x20000558
 800b148:	2000055c 	.word	0x2000055c

0800b14c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b152:	e019      	b.n	800b188 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b154:	f000 fa7a 	bl	800b64c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b158:	4b10      	ldr	r3, [pc, #64]	@ (800b19c <prvCheckTasksWaitingTermination+0x50>)
 800b15a:	68db      	ldr	r3, [r3, #12]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	3304      	adds	r3, #4
 800b164:	4618      	mov	r0, r3
 800b166:	f7fe ffa3 	bl	800a0b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b16a:	4b0d      	ldr	r3, [pc, #52]	@ (800b1a0 <prvCheckTasksWaitingTermination+0x54>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	3b01      	subs	r3, #1
 800b170:	4a0b      	ldr	r2, [pc, #44]	@ (800b1a0 <prvCheckTasksWaitingTermination+0x54>)
 800b172:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b174:	4b0b      	ldr	r3, [pc, #44]	@ (800b1a4 <prvCheckTasksWaitingTermination+0x58>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	3b01      	subs	r3, #1
 800b17a:	4a0a      	ldr	r2, [pc, #40]	@ (800b1a4 <prvCheckTasksWaitingTermination+0x58>)
 800b17c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b17e:	f000 fa95 	bl	800b6ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 f810 	bl	800b1a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b188:	4b06      	ldr	r3, [pc, #24]	@ (800b1a4 <prvCheckTasksWaitingTermination+0x58>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1e1      	bne.n	800b154 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b190:	bf00      	nop
 800b192:	bf00      	nop
 800b194:	3708      	adds	r7, #8
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	20000574 	.word	0x20000574
 800b1a0:	200005a0 	.word	0x200005a0
 800b1a4:	20000588 	.word	0x20000588

0800b1a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d108      	bne.n	800b1cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f000 fbce 	bl	800b960 <vPortFree>
				vPortFree( pxTCB );
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 fbcb 	bl	800b960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b1ca:	e019      	b.n	800b200 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d103      	bne.n	800b1de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fbc2 	bl	800b960 <vPortFree>
	}
 800b1dc:	e010      	b.n	800b200 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d00b      	beq.n	800b200 <prvDeleteTCB+0x58>
	__asm volatile
 800b1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ec:	f383 8811 	msr	BASEPRI, r3
 800b1f0:	f3bf 8f6f 	isb	sy
 800b1f4:	f3bf 8f4f 	dsb	sy
 800b1f8:	60fb      	str	r3, [r7, #12]
}
 800b1fa:	bf00      	nop
 800b1fc:	bf00      	nop
 800b1fe:	e7fd      	b.n	800b1fc <prvDeleteTCB+0x54>
	}
 800b200:	bf00      	nop
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b20e:	4b0e      	ldr	r3, [pc, #56]	@ (800b248 <prvResetNextTaskUnblockTime+0x40>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d101      	bne.n	800b21c <prvResetNextTaskUnblockTime+0x14>
 800b218:	2301      	movs	r3, #1
 800b21a:	e000      	b.n	800b21e <prvResetNextTaskUnblockTime+0x16>
 800b21c:	2300      	movs	r3, #0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d004      	beq.n	800b22c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b222:	4b0a      	ldr	r3, [pc, #40]	@ (800b24c <prvResetNextTaskUnblockTime+0x44>)
 800b224:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b228:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b22a:	e008      	b.n	800b23e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b22c:	4b06      	ldr	r3, [pc, #24]	@ (800b248 <prvResetNextTaskUnblockTime+0x40>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	4a04      	ldr	r2, [pc, #16]	@ (800b24c <prvResetNextTaskUnblockTime+0x44>)
 800b23c:	6013      	str	r3, [r2, #0]
}
 800b23e:	bf00      	nop
 800b240:	370c      	adds	r7, #12
 800b242:	46bd      	mov	sp, r7
 800b244:	bc80      	pop	{r7}
 800b246:	4770      	bx	lr
 800b248:	20000558 	.word	0x20000558
 800b24c:	200005c0 	.word	0x200005c0

0800b250 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b256:	4b0b      	ldr	r3, [pc, #44]	@ (800b284 <xTaskGetSchedulerState+0x34>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d102      	bne.n	800b264 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b25e:	2301      	movs	r3, #1
 800b260:	607b      	str	r3, [r7, #4]
 800b262:	e008      	b.n	800b276 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b264:	4b08      	ldr	r3, [pc, #32]	@ (800b288 <xTaskGetSchedulerState+0x38>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d102      	bne.n	800b272 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b26c:	2302      	movs	r3, #2
 800b26e:	607b      	str	r3, [r7, #4]
 800b270:	e001      	b.n	800b276 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b272:	2300      	movs	r3, #0
 800b274:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b276:	687b      	ldr	r3, [r7, #4]
	}
 800b278:	4618      	mov	r0, r3
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bc80      	pop	{r7}
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	200005ac 	.word	0x200005ac
 800b288:	200005c8 	.word	0x200005c8

0800b28c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b086      	sub	sp, #24
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b298:	2300      	movs	r3, #0
 800b29a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d070      	beq.n	800b384 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b2a2:	4b3b      	ldr	r3, [pc, #236]	@ (800b390 <xTaskPriorityDisinherit+0x104>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	693a      	ldr	r2, [r7, #16]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d00b      	beq.n	800b2c4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b0:	f383 8811 	msr	BASEPRI, r3
 800b2b4:	f3bf 8f6f 	isb	sy
 800b2b8:	f3bf 8f4f 	dsb	sy
 800b2bc:	60fb      	str	r3, [r7, #12]
}
 800b2be:	bf00      	nop
 800b2c0:	bf00      	nop
 800b2c2:	e7fd      	b.n	800b2c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d10b      	bne.n	800b2e4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d0:	f383 8811 	msr	BASEPRI, r3
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	60bb      	str	r3, [r7, #8]
}
 800b2de:	bf00      	nop
 800b2e0:	bf00      	nop
 800b2e2:	e7fd      	b.n	800b2e0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2e8:	1e5a      	subs	r2, r3, #1
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d044      	beq.n	800b384 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d140      	bne.n	800b384 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	3304      	adds	r3, #4
 800b306:	4618      	mov	r0, r3
 800b308:	f7fe fed2 	bl	800a0b0 <uxListRemove>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d115      	bne.n	800b33e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b316:	491f      	ldr	r1, [pc, #124]	@ (800b394 <xTaskPriorityDisinherit+0x108>)
 800b318:	4613      	mov	r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4413      	add	r3, r2
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	440b      	add	r3, r1
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10a      	bne.n	800b33e <xTaskPriorityDisinherit+0xb2>
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b32c:	2201      	movs	r2, #1
 800b32e:	fa02 f303 	lsl.w	r3, r2, r3
 800b332:	43da      	mvns	r2, r3
 800b334:	4b18      	ldr	r3, [pc, #96]	@ (800b398 <xTaskPriorityDisinherit+0x10c>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4013      	ands	r3, r2
 800b33a:	4a17      	ldr	r2, [pc, #92]	@ (800b398 <xTaskPriorityDisinherit+0x10c>)
 800b33c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b34a:	f1c3 0207 	rsb	r2, r3, #7
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b356:	2201      	movs	r2, #1
 800b358:	409a      	lsls	r2, r3
 800b35a:	4b0f      	ldr	r3, [pc, #60]	@ (800b398 <xTaskPriorityDisinherit+0x10c>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4313      	orrs	r3, r2
 800b360:	4a0d      	ldr	r2, [pc, #52]	@ (800b398 <xTaskPriorityDisinherit+0x10c>)
 800b362:	6013      	str	r3, [r2, #0]
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b368:	4613      	mov	r3, r2
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	4413      	add	r3, r2
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4a08      	ldr	r2, [pc, #32]	@ (800b394 <xTaskPriorityDisinherit+0x108>)
 800b372:	441a      	add	r2, r3
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	3304      	adds	r3, #4
 800b378:	4619      	mov	r1, r3
 800b37a:	4610      	mov	r0, r2
 800b37c:	f7fe fe3d 	bl	8009ffa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b380:	2301      	movs	r3, #1
 800b382:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b384:	697b      	ldr	r3, [r7, #20]
	}
 800b386:	4618      	mov	r0, r3
 800b388:	3718      	adds	r7, #24
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	200004a0 	.word	0x200004a0
 800b394:	200004a4 	.word	0x200004a4
 800b398:	200005a8 	.word	0x200005a8

0800b39c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b3a6:	4b29      	ldr	r3, [pc, #164]	@ (800b44c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3ac:	4b28      	ldr	r3, [pc, #160]	@ (800b450 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	3304      	adds	r3, #4
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7fe fe7c 	bl	800a0b0 <uxListRemove>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10b      	bne.n	800b3d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b3be:	4b24      	ldr	r3, [pc, #144]	@ (800b450 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ca:	43da      	mvns	r2, r3
 800b3cc:	4b21      	ldr	r3, [pc, #132]	@ (800b454 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4013      	ands	r3, r2
 800b3d2:	4a20      	ldr	r2, [pc, #128]	@ (800b454 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b3d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3dc:	d10a      	bne.n	800b3f4 <prvAddCurrentTaskToDelayedList+0x58>
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d007      	beq.n	800b3f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3e4:	4b1a      	ldr	r3, [pc, #104]	@ (800b450 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3304      	adds	r3, #4
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	481a      	ldr	r0, [pc, #104]	@ (800b458 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b3ee:	f7fe fe04 	bl	8009ffa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b3f2:	e026      	b.n	800b442 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b3fc:	4b14      	ldr	r3, [pc, #80]	@ (800b450 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	68ba      	ldr	r2, [r7, #8]
 800b402:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b404:	68ba      	ldr	r2, [r7, #8]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	429a      	cmp	r2, r3
 800b40a:	d209      	bcs.n	800b420 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b40c:	4b13      	ldr	r3, [pc, #76]	@ (800b45c <prvAddCurrentTaskToDelayedList+0xc0>)
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	4b0f      	ldr	r3, [pc, #60]	@ (800b450 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	3304      	adds	r3, #4
 800b416:	4619      	mov	r1, r3
 800b418:	4610      	mov	r0, r2
 800b41a:	f7fe fe11 	bl	800a040 <vListInsert>
}
 800b41e:	e010      	b.n	800b442 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b420:	4b0f      	ldr	r3, [pc, #60]	@ (800b460 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	4b0a      	ldr	r3, [pc, #40]	@ (800b450 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3304      	adds	r3, #4
 800b42a:	4619      	mov	r1, r3
 800b42c:	4610      	mov	r0, r2
 800b42e:	f7fe fe07 	bl	800a040 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b432:	4b0c      	ldr	r3, [pc, #48]	@ (800b464 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68ba      	ldr	r2, [r7, #8]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d202      	bcs.n	800b442 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b43c:	4a09      	ldr	r2, [pc, #36]	@ (800b464 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	6013      	str	r3, [r2, #0]
}
 800b442:	bf00      	nop
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	200005a4 	.word	0x200005a4
 800b450:	200004a0 	.word	0x200004a0
 800b454:	200005a8 	.word	0x200005a8
 800b458:	2000058c 	.word	0x2000058c
 800b45c:	2000055c 	.word	0x2000055c
 800b460:	20000558 	.word	0x20000558
 800b464:	200005c0 	.word	0x200005c0

0800b468 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	3b04      	subs	r3, #4
 800b478:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b480:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	3b04      	subs	r3, #4
 800b486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	f023 0201 	bic.w	r2, r3, #1
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	3b04      	subs	r3, #4
 800b496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b498:	4a08      	ldr	r2, [pc, #32]	@ (800b4bc <pxPortInitialiseStack+0x54>)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	3b14      	subs	r3, #20
 800b4a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	3b20      	subs	r3, #32
 800b4ae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3714      	adds	r7, #20
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bc80      	pop	{r7}
 800b4ba:	4770      	bx	lr
 800b4bc:	0800b4c1 	.word	0x0800b4c1

0800b4c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b4ca:	4b12      	ldr	r3, [pc, #72]	@ (800b514 <prvTaskExitError+0x54>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4d2:	d00b      	beq.n	800b4ec <prvTaskExitError+0x2c>
	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	60fb      	str	r3, [r7, #12]
}
 800b4e6:	bf00      	nop
 800b4e8:	bf00      	nop
 800b4ea:	e7fd      	b.n	800b4e8 <prvTaskExitError+0x28>
	__asm volatile
 800b4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f0:	f383 8811 	msr	BASEPRI, r3
 800b4f4:	f3bf 8f6f 	isb	sy
 800b4f8:	f3bf 8f4f 	dsb	sy
 800b4fc:	60bb      	str	r3, [r7, #8]
}
 800b4fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b500:	bf00      	nop
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d0fc      	beq.n	800b502 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b508:	bf00      	nop
 800b50a:	bf00      	nop
 800b50c:	3714      	adds	r7, #20
 800b50e:	46bd      	mov	sp, r7
 800b510:	bc80      	pop	{r7}
 800b512:	4770      	bx	lr
 800b514:	20000040 	.word	0x20000040
	...

0800b520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b520:	4b07      	ldr	r3, [pc, #28]	@ (800b540 <pxCurrentTCBConst2>)
 800b522:	6819      	ldr	r1, [r3, #0]
 800b524:	6808      	ldr	r0, [r1, #0]
 800b526:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b52a:	f380 8809 	msr	PSP, r0
 800b52e:	f3bf 8f6f 	isb	sy
 800b532:	f04f 0000 	mov.w	r0, #0
 800b536:	f380 8811 	msr	BASEPRI, r0
 800b53a:	f04e 0e0d 	orr.w	lr, lr, #13
 800b53e:	4770      	bx	lr

0800b540 <pxCurrentTCBConst2>:
 800b540:	200004a0 	.word	0x200004a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b544:	bf00      	nop
 800b546:	bf00      	nop

0800b548 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b548:	4806      	ldr	r0, [pc, #24]	@ (800b564 <prvPortStartFirstTask+0x1c>)
 800b54a:	6800      	ldr	r0, [r0, #0]
 800b54c:	6800      	ldr	r0, [r0, #0]
 800b54e:	f380 8808 	msr	MSP, r0
 800b552:	b662      	cpsie	i
 800b554:	b661      	cpsie	f
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	f3bf 8f6f 	isb	sy
 800b55e:	df00      	svc	0
 800b560:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b562:	bf00      	nop
 800b564:	e000ed08 	.word	0xe000ed08

0800b568 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b56e:	4b32      	ldr	r3, [pc, #200]	@ (800b638 <xPortStartScheduler+0xd0>)
 800b570:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	b2db      	uxtb	r3, r3
 800b578:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	22ff      	movs	r2, #255	@ 0xff
 800b57e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	b2db      	uxtb	r3, r3
 800b586:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b588:	78fb      	ldrb	r3, [r7, #3]
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b590:	b2da      	uxtb	r2, r3
 800b592:	4b2a      	ldr	r3, [pc, #168]	@ (800b63c <xPortStartScheduler+0xd4>)
 800b594:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b596:	4b2a      	ldr	r3, [pc, #168]	@ (800b640 <xPortStartScheduler+0xd8>)
 800b598:	2207      	movs	r2, #7
 800b59a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b59c:	e009      	b.n	800b5b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b59e:	4b28      	ldr	r3, [pc, #160]	@ (800b640 <xPortStartScheduler+0xd8>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	3b01      	subs	r3, #1
 800b5a4:	4a26      	ldr	r2, [pc, #152]	@ (800b640 <xPortStartScheduler+0xd8>)
 800b5a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b5a8:	78fb      	ldrb	r3, [r7, #3]
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	005b      	lsls	r3, r3, #1
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5b2:	78fb      	ldrb	r3, [r7, #3]
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5ba:	2b80      	cmp	r3, #128	@ 0x80
 800b5bc:	d0ef      	beq.n	800b59e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b5be:	4b20      	ldr	r3, [pc, #128]	@ (800b640 <xPortStartScheduler+0xd8>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f1c3 0307 	rsb	r3, r3, #7
 800b5c6:	2b04      	cmp	r3, #4
 800b5c8:	d00b      	beq.n	800b5e2 <xPortStartScheduler+0x7a>
	__asm volatile
 800b5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ce:	f383 8811 	msr	BASEPRI, r3
 800b5d2:	f3bf 8f6f 	isb	sy
 800b5d6:	f3bf 8f4f 	dsb	sy
 800b5da:	60bb      	str	r3, [r7, #8]
}
 800b5dc:	bf00      	nop
 800b5de:	bf00      	nop
 800b5e0:	e7fd      	b.n	800b5de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b5e2:	4b17      	ldr	r3, [pc, #92]	@ (800b640 <xPortStartScheduler+0xd8>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	021b      	lsls	r3, r3, #8
 800b5e8:	4a15      	ldr	r2, [pc, #84]	@ (800b640 <xPortStartScheduler+0xd8>)
 800b5ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b5ec:	4b14      	ldr	r3, [pc, #80]	@ (800b640 <xPortStartScheduler+0xd8>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b5f4:	4a12      	ldr	r2, [pc, #72]	@ (800b640 <xPortStartScheduler+0xd8>)
 800b5f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	b2da      	uxtb	r2, r3
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b600:	4b10      	ldr	r3, [pc, #64]	@ (800b644 <xPortStartScheduler+0xdc>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a0f      	ldr	r2, [pc, #60]	@ (800b644 <xPortStartScheduler+0xdc>)
 800b606:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b60a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b60c:	4b0d      	ldr	r3, [pc, #52]	@ (800b644 <xPortStartScheduler+0xdc>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a0c      	ldr	r2, [pc, #48]	@ (800b644 <xPortStartScheduler+0xdc>)
 800b612:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b616:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b618:	f000 f8b8 	bl	800b78c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b61c:	4b0a      	ldr	r3, [pc, #40]	@ (800b648 <xPortStartScheduler+0xe0>)
 800b61e:	2200      	movs	r2, #0
 800b620:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b622:	f7ff ff91 	bl	800b548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b626:	f7ff fbcd 	bl	800adc4 <vTaskSwitchContext>
	prvTaskExitError();
 800b62a:	f7ff ff49 	bl	800b4c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b62e:	2300      	movs	r3, #0
}
 800b630:	4618      	mov	r0, r3
 800b632:	3710      	adds	r7, #16
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	e000e400 	.word	0xe000e400
 800b63c:	200005cc 	.word	0x200005cc
 800b640:	200005d0 	.word	0x200005d0
 800b644:	e000ed20 	.word	0xe000ed20
 800b648:	20000040 	.word	0x20000040

0800b64c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
	__asm volatile
 800b652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	607b      	str	r3, [r7, #4]
}
 800b664:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b666:	4b0f      	ldr	r3, [pc, #60]	@ (800b6a4 <vPortEnterCritical+0x58>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	3301      	adds	r3, #1
 800b66c:	4a0d      	ldr	r2, [pc, #52]	@ (800b6a4 <vPortEnterCritical+0x58>)
 800b66e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b670:	4b0c      	ldr	r3, [pc, #48]	@ (800b6a4 <vPortEnterCritical+0x58>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d110      	bne.n	800b69a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b678:	4b0b      	ldr	r3, [pc, #44]	@ (800b6a8 <vPortEnterCritical+0x5c>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00b      	beq.n	800b69a <vPortEnterCritical+0x4e>
	__asm volatile
 800b682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b686:	f383 8811 	msr	BASEPRI, r3
 800b68a:	f3bf 8f6f 	isb	sy
 800b68e:	f3bf 8f4f 	dsb	sy
 800b692:	603b      	str	r3, [r7, #0]
}
 800b694:	bf00      	nop
 800b696:	bf00      	nop
 800b698:	e7fd      	b.n	800b696 <vPortEnterCritical+0x4a>
	}
}
 800b69a:	bf00      	nop
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bc80      	pop	{r7}
 800b6a2:	4770      	bx	lr
 800b6a4:	20000040 	.word	0x20000040
 800b6a8:	e000ed04 	.word	0xe000ed04

0800b6ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b6b2:	4b12      	ldr	r3, [pc, #72]	@ (800b6fc <vPortExitCritical+0x50>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d10b      	bne.n	800b6d2 <vPortExitCritical+0x26>
	__asm volatile
 800b6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6be:	f383 8811 	msr	BASEPRI, r3
 800b6c2:	f3bf 8f6f 	isb	sy
 800b6c6:	f3bf 8f4f 	dsb	sy
 800b6ca:	607b      	str	r3, [r7, #4]
}
 800b6cc:	bf00      	nop
 800b6ce:	bf00      	nop
 800b6d0:	e7fd      	b.n	800b6ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b6d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b6fc <vPortExitCritical+0x50>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	4a08      	ldr	r2, [pc, #32]	@ (800b6fc <vPortExitCritical+0x50>)
 800b6da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6dc:	4b07      	ldr	r3, [pc, #28]	@ (800b6fc <vPortExitCritical+0x50>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d105      	bne.n	800b6f0 <vPortExitCritical+0x44>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b6ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b6f0:	bf00      	nop
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bc80      	pop	{r7}
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	20000040 	.word	0x20000040

0800b700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b700:	f3ef 8009 	mrs	r0, PSP
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	4b0d      	ldr	r3, [pc, #52]	@ (800b740 <pxCurrentTCBConst>)
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b710:	6010      	str	r0, [r2, #0]
 800b712:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b716:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b71a:	f380 8811 	msr	BASEPRI, r0
 800b71e:	f7ff fb51 	bl	800adc4 <vTaskSwitchContext>
 800b722:	f04f 0000 	mov.w	r0, #0
 800b726:	f380 8811 	msr	BASEPRI, r0
 800b72a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b72e:	6819      	ldr	r1, [r3, #0]
 800b730:	6808      	ldr	r0, [r1, #0]
 800b732:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b736:	f380 8809 	msr	PSP, r0
 800b73a:	f3bf 8f6f 	isb	sy
 800b73e:	4770      	bx	lr

0800b740 <pxCurrentTCBConst>:
 800b740:	200004a0 	.word	0x200004a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b744:	bf00      	nop
 800b746:	bf00      	nop

0800b748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
	__asm volatile
 800b74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	607b      	str	r3, [r7, #4]
}
 800b760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b762:	f7ff fa71 	bl	800ac48 <xTaskIncrementTick>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d003      	beq.n	800b774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b76c:	4b06      	ldr	r3, [pc, #24]	@ (800b788 <xPortSysTickHandler+0x40>)
 800b76e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b772:	601a      	str	r2, [r3, #0]
 800b774:	2300      	movs	r3, #0
 800b776:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	f383 8811 	msr	BASEPRI, r3
}
 800b77e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b780:	bf00      	nop
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	e000ed04 	.word	0xe000ed04

0800b78c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b78c:	b480      	push	{r7}
 800b78e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b790:	4b0a      	ldr	r3, [pc, #40]	@ (800b7bc <vPortSetupTimerInterrupt+0x30>)
 800b792:	2200      	movs	r2, #0
 800b794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b796:	4b0a      	ldr	r3, [pc, #40]	@ (800b7c0 <vPortSetupTimerInterrupt+0x34>)
 800b798:	2200      	movs	r2, #0
 800b79a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b79c:	4b09      	ldr	r3, [pc, #36]	@ (800b7c4 <vPortSetupTimerInterrupt+0x38>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a09      	ldr	r2, [pc, #36]	@ (800b7c8 <vPortSetupTimerInterrupt+0x3c>)
 800b7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7a6:	099b      	lsrs	r3, r3, #6
 800b7a8:	4a08      	ldr	r2, [pc, #32]	@ (800b7cc <vPortSetupTimerInterrupt+0x40>)
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b7ae:	4b03      	ldr	r3, [pc, #12]	@ (800b7bc <vPortSetupTimerInterrupt+0x30>)
 800b7b0:	2207      	movs	r2, #7
 800b7b2:	601a      	str	r2, [r3, #0]
}
 800b7b4:	bf00      	nop
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bc80      	pop	{r7}
 800b7ba:	4770      	bx	lr
 800b7bc:	e000e010 	.word	0xe000e010
 800b7c0:	e000e018 	.word	0xe000e018
 800b7c4:	20000034 	.word	0x20000034
 800b7c8:	10624dd3 	.word	0x10624dd3
 800b7cc:	e000e014 	.word	0xe000e014

0800b7d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b08a      	sub	sp, #40	@ 0x28
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b7dc:	f7ff f988 	bl	800aaf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b7e0:	4b5a      	ldr	r3, [pc, #360]	@ (800b94c <pvPortMalloc+0x17c>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d101      	bne.n	800b7ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b7e8:	f000 f916 	bl	800ba18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b7ec:	4b58      	ldr	r3, [pc, #352]	@ (800b950 <pvPortMalloc+0x180>)
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4013      	ands	r3, r2
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	f040 8090 	bne.w	800b91a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d01e      	beq.n	800b83e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b800:	2208      	movs	r2, #8
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4413      	add	r3, r2
 800b806:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f003 0307 	and.w	r3, r3, #7
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d015      	beq.n	800b83e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f023 0307 	bic.w	r3, r3, #7
 800b818:	3308      	adds	r3, #8
 800b81a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f003 0307 	and.w	r3, r3, #7
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00b      	beq.n	800b83e <pvPortMalloc+0x6e>
	__asm volatile
 800b826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b82a:	f383 8811 	msr	BASEPRI, r3
 800b82e:	f3bf 8f6f 	isb	sy
 800b832:	f3bf 8f4f 	dsb	sy
 800b836:	617b      	str	r3, [r7, #20]
}
 800b838:	bf00      	nop
 800b83a:	bf00      	nop
 800b83c:	e7fd      	b.n	800b83a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d06a      	beq.n	800b91a <pvPortMalloc+0x14a>
 800b844:	4b43      	ldr	r3, [pc, #268]	@ (800b954 <pvPortMalloc+0x184>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d865      	bhi.n	800b91a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b84e:	4b42      	ldr	r3, [pc, #264]	@ (800b958 <pvPortMalloc+0x188>)
 800b850:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b852:	4b41      	ldr	r3, [pc, #260]	@ (800b958 <pvPortMalloc+0x188>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b858:	e004      	b.n	800b864 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d903      	bls.n	800b876 <pvPortMalloc+0xa6>
 800b86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1f1      	bne.n	800b85a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b876:	4b35      	ldr	r3, [pc, #212]	@ (800b94c <pvPortMalloc+0x17c>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d04c      	beq.n	800b91a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b880:	6a3b      	ldr	r3, [r7, #32]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2208      	movs	r2, #8
 800b886:	4413      	add	r3, r2
 800b888:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	6a3b      	ldr	r3, [r7, #32]
 800b890:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b894:	685a      	ldr	r2, [r3, #4]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	1ad2      	subs	r2, r2, r3
 800b89a:	2308      	movs	r3, #8
 800b89c:	005b      	lsls	r3, r3, #1
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d920      	bls.n	800b8e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b8a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8aa:	69bb      	ldr	r3, [r7, #24]
 800b8ac:	f003 0307 	and.w	r3, r3, #7
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00b      	beq.n	800b8cc <pvPortMalloc+0xfc>
	__asm volatile
 800b8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b8:	f383 8811 	msr	BASEPRI, r3
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	613b      	str	r3, [r7, #16]
}
 800b8c6:	bf00      	nop
 800b8c8:	bf00      	nop
 800b8ca:	e7fd      	b.n	800b8c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ce:	685a      	ldr	r2, [r3, #4]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	1ad2      	subs	r2, r2, r3
 800b8d4:	69bb      	ldr	r3, [r7, #24]
 800b8d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b8de:	69b8      	ldr	r0, [r7, #24]
 800b8e0:	f000 f8fc 	bl	800badc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b8e4:	4b1b      	ldr	r3, [pc, #108]	@ (800b954 <pvPortMalloc+0x184>)
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	1ad3      	subs	r3, r2, r3
 800b8ee:	4a19      	ldr	r2, [pc, #100]	@ (800b954 <pvPortMalloc+0x184>)
 800b8f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b8f2:	4b18      	ldr	r3, [pc, #96]	@ (800b954 <pvPortMalloc+0x184>)
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	4b19      	ldr	r3, [pc, #100]	@ (800b95c <pvPortMalloc+0x18c>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d203      	bcs.n	800b906 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b8fe:	4b15      	ldr	r3, [pc, #84]	@ (800b954 <pvPortMalloc+0x184>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a16      	ldr	r2, [pc, #88]	@ (800b95c <pvPortMalloc+0x18c>)
 800b904:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b908:	685a      	ldr	r2, [r3, #4]
 800b90a:	4b11      	ldr	r3, [pc, #68]	@ (800b950 <pvPortMalloc+0x180>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	431a      	orrs	r2, r3
 800b910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b912:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b916:	2200      	movs	r2, #0
 800b918:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b91a:	f7ff f8f7 	bl	800ab0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	f003 0307 	and.w	r3, r3, #7
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00b      	beq.n	800b940 <pvPortMalloc+0x170>
	__asm volatile
 800b928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b92c:	f383 8811 	msr	BASEPRI, r3
 800b930:	f3bf 8f6f 	isb	sy
 800b934:	f3bf 8f4f 	dsb	sy
 800b938:	60fb      	str	r3, [r7, #12]
}
 800b93a:	bf00      	nop
 800b93c:	bf00      	nop
 800b93e:	e7fd      	b.n	800b93c <pvPortMalloc+0x16c>
	return pvReturn;
 800b940:	69fb      	ldr	r3, [r7, #28]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3728      	adds	r7, #40	@ 0x28
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	200011dc 	.word	0x200011dc
 800b950:	200011e8 	.word	0x200011e8
 800b954:	200011e0 	.word	0x200011e0
 800b958:	200011d4 	.word	0x200011d4
 800b95c:	200011e4 	.word	0x200011e4

0800b960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b086      	sub	sp, #24
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d04a      	beq.n	800ba08 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b972:	2308      	movs	r3, #8
 800b974:	425b      	negs	r3, r3
 800b976:	697a      	ldr	r2, [r7, #20]
 800b978:	4413      	add	r3, r2
 800b97a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	685a      	ldr	r2, [r3, #4]
 800b984:	4b22      	ldr	r3, [pc, #136]	@ (800ba10 <vPortFree+0xb0>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4013      	ands	r3, r2
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10b      	bne.n	800b9a6 <vPortFree+0x46>
	__asm volatile
 800b98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b992:	f383 8811 	msr	BASEPRI, r3
 800b996:	f3bf 8f6f 	isb	sy
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	60fb      	str	r3, [r7, #12]
}
 800b9a0:	bf00      	nop
 800b9a2:	bf00      	nop
 800b9a4:	e7fd      	b.n	800b9a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00b      	beq.n	800b9c6 <vPortFree+0x66>
	__asm volatile
 800b9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b2:	f383 8811 	msr	BASEPRI, r3
 800b9b6:	f3bf 8f6f 	isb	sy
 800b9ba:	f3bf 8f4f 	dsb	sy
 800b9be:	60bb      	str	r3, [r7, #8]
}
 800b9c0:	bf00      	nop
 800b9c2:	bf00      	nop
 800b9c4:	e7fd      	b.n	800b9c2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	685a      	ldr	r2, [r3, #4]
 800b9ca:	4b11      	ldr	r3, [pc, #68]	@ (800ba10 <vPortFree+0xb0>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4013      	ands	r3, r2
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d019      	beq.n	800ba08 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d115      	bne.n	800ba08 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	685a      	ldr	r2, [r3, #4]
 800b9e0:	4b0b      	ldr	r3, [pc, #44]	@ (800ba10 <vPortFree+0xb0>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	43db      	mvns	r3, r3
 800b9e6:	401a      	ands	r2, r3
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b9ec:	f7ff f880 	bl	800aaf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	685a      	ldr	r2, [r3, #4]
 800b9f4:	4b07      	ldr	r3, [pc, #28]	@ (800ba14 <vPortFree+0xb4>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	4a06      	ldr	r2, [pc, #24]	@ (800ba14 <vPortFree+0xb4>)
 800b9fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b9fe:	6938      	ldr	r0, [r7, #16]
 800ba00:	f000 f86c 	bl	800badc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ba04:	f7ff f882 	bl	800ab0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ba08:	bf00      	nop
 800ba0a:	3718      	adds	r7, #24
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	200011e8 	.word	0x200011e8
 800ba14:	200011e0 	.word	0x200011e0

0800ba18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba1e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800ba22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba24:	4b27      	ldr	r3, [pc, #156]	@ (800bac4 <prvHeapInit+0xac>)
 800ba26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f003 0307 	and.w	r3, r3, #7
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00c      	beq.n	800ba4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	3307      	adds	r3, #7
 800ba36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f023 0307 	bic.w	r3, r3, #7
 800ba3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	1ad3      	subs	r3, r2, r3
 800ba46:	4a1f      	ldr	r2, [pc, #124]	@ (800bac4 <prvHeapInit+0xac>)
 800ba48:	4413      	add	r3, r2
 800ba4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba50:	4a1d      	ldr	r2, [pc, #116]	@ (800bac8 <prvHeapInit+0xb0>)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba56:	4b1c      	ldr	r3, [pc, #112]	@ (800bac8 <prvHeapInit+0xb0>)
 800ba58:	2200      	movs	r2, #0
 800ba5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	68ba      	ldr	r2, [r7, #8]
 800ba60:	4413      	add	r3, r2
 800ba62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba64:	2208      	movs	r2, #8
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	1a9b      	subs	r3, r3, r2
 800ba6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f023 0307 	bic.w	r3, r3, #7
 800ba72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	4a15      	ldr	r2, [pc, #84]	@ (800bacc <prvHeapInit+0xb4>)
 800ba78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba7a:	4b14      	ldr	r3, [pc, #80]	@ (800bacc <prvHeapInit+0xb4>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba82:	4b12      	ldr	r3, [pc, #72]	@ (800bacc <prvHeapInit+0xb4>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2200      	movs	r2, #0
 800ba88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	68fa      	ldr	r2, [r7, #12]
 800ba92:	1ad2      	subs	r2, r2, r3
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba98:	4b0c      	ldr	r3, [pc, #48]	@ (800bacc <prvHeapInit+0xb4>)
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	4a0a      	ldr	r2, [pc, #40]	@ (800bad0 <prvHeapInit+0xb8>)
 800baa6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	4a09      	ldr	r2, [pc, #36]	@ (800bad4 <prvHeapInit+0xbc>)
 800baae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bab0:	4b09      	ldr	r3, [pc, #36]	@ (800bad8 <prvHeapInit+0xc0>)
 800bab2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bab6:	601a      	str	r2, [r3, #0]
}
 800bab8:	bf00      	nop
 800baba:	3714      	adds	r7, #20
 800babc:	46bd      	mov	sp, r7
 800babe:	bc80      	pop	{r7}
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	200005d4 	.word	0x200005d4
 800bac8:	200011d4 	.word	0x200011d4
 800bacc:	200011dc 	.word	0x200011dc
 800bad0:	200011e4 	.word	0x200011e4
 800bad4:	200011e0 	.word	0x200011e0
 800bad8:	200011e8 	.word	0x200011e8

0800badc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800badc:	b480      	push	{r7}
 800bade:	b085      	sub	sp, #20
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bae4:	4b27      	ldr	r3, [pc, #156]	@ (800bb84 <prvInsertBlockIntoFreeList+0xa8>)
 800bae6:	60fb      	str	r3, [r7, #12]
 800bae8:	e002      	b.n	800baf0 <prvInsertBlockIntoFreeList+0x14>
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	60fb      	str	r3, [r7, #12]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d8f7      	bhi.n	800baea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	68ba      	ldr	r2, [r7, #8]
 800bb04:	4413      	add	r3, r2
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d108      	bne.n	800bb1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	685a      	ldr	r2, [r3, #4]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	441a      	add	r2, r3
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	441a      	add	r2, r3
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d118      	bne.n	800bb64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	4b14      	ldr	r3, [pc, #80]	@ (800bb88 <prvInsertBlockIntoFreeList+0xac>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d00d      	beq.n	800bb5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	685a      	ldr	r2, [r3, #4]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	441a      	add	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	601a      	str	r2, [r3, #0]
 800bb58:	e008      	b.n	800bb6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb5a:	4b0b      	ldr	r3, [pc, #44]	@ (800bb88 <prvInsertBlockIntoFreeList+0xac>)
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	601a      	str	r2, [r3, #0]
 800bb62:	e003      	b.n	800bb6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d002      	beq.n	800bb7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb7a:	bf00      	nop
 800bb7c:	3714      	adds	r7, #20
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bc80      	pop	{r7}
 800bb82:	4770      	bx	lr
 800bb84:	200011d4 	.word	0x200011d4
 800bb88:	200011dc 	.word	0x200011dc

0800bb8c <__itoa>:
 800bb8c:	1e93      	subs	r3, r2, #2
 800bb8e:	2b22      	cmp	r3, #34	@ 0x22
 800bb90:	b510      	push	{r4, lr}
 800bb92:	460c      	mov	r4, r1
 800bb94:	d904      	bls.n	800bba0 <__itoa+0x14>
 800bb96:	2300      	movs	r3, #0
 800bb98:	461c      	mov	r4, r3
 800bb9a:	700b      	strb	r3, [r1, #0]
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	bd10      	pop	{r4, pc}
 800bba0:	2a0a      	cmp	r2, #10
 800bba2:	d109      	bne.n	800bbb8 <__itoa+0x2c>
 800bba4:	2800      	cmp	r0, #0
 800bba6:	da07      	bge.n	800bbb8 <__itoa+0x2c>
 800bba8:	232d      	movs	r3, #45	@ 0x2d
 800bbaa:	700b      	strb	r3, [r1, #0]
 800bbac:	2101      	movs	r1, #1
 800bbae:	4240      	negs	r0, r0
 800bbb0:	4421      	add	r1, r4
 800bbb2:	f000 f805 	bl	800bbc0 <__utoa>
 800bbb6:	e7f1      	b.n	800bb9c <__itoa+0x10>
 800bbb8:	2100      	movs	r1, #0
 800bbba:	e7f9      	b.n	800bbb0 <__itoa+0x24>

0800bbbc <itoa>:
 800bbbc:	f7ff bfe6 	b.w	800bb8c <__itoa>

0800bbc0 <__utoa>:
 800bbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbc2:	b08b      	sub	sp, #44	@ 0x2c
 800bbc4:	4605      	mov	r5, r0
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	466e      	mov	r6, sp
 800bbca:	4c1d      	ldr	r4, [pc, #116]	@ (800bc40 <__utoa+0x80>)
 800bbcc:	f104 0c20 	add.w	ip, r4, #32
 800bbd0:	4637      	mov	r7, r6
 800bbd2:	6820      	ldr	r0, [r4, #0]
 800bbd4:	6861      	ldr	r1, [r4, #4]
 800bbd6:	3408      	adds	r4, #8
 800bbd8:	c703      	stmia	r7!, {r0, r1}
 800bbda:	4564      	cmp	r4, ip
 800bbdc:	463e      	mov	r6, r7
 800bbde:	d1f7      	bne.n	800bbd0 <__utoa+0x10>
 800bbe0:	7921      	ldrb	r1, [r4, #4]
 800bbe2:	6820      	ldr	r0, [r4, #0]
 800bbe4:	7139      	strb	r1, [r7, #4]
 800bbe6:	1e91      	subs	r1, r2, #2
 800bbe8:	2922      	cmp	r1, #34	@ 0x22
 800bbea:	6038      	str	r0, [r7, #0]
 800bbec:	f04f 0100 	mov.w	r1, #0
 800bbf0:	d904      	bls.n	800bbfc <__utoa+0x3c>
 800bbf2:	7019      	strb	r1, [r3, #0]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	b00b      	add	sp, #44	@ 0x2c
 800bbfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbfc:	1e58      	subs	r0, r3, #1
 800bbfe:	4684      	mov	ip, r0
 800bc00:	fbb5 f7f2 	udiv	r7, r5, r2
 800bc04:	fb02 5617 	mls	r6, r2, r7, r5
 800bc08:	3628      	adds	r6, #40	@ 0x28
 800bc0a:	446e      	add	r6, sp
 800bc0c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bc10:	460c      	mov	r4, r1
 800bc12:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bc16:	462e      	mov	r6, r5
 800bc18:	42b2      	cmp	r2, r6
 800bc1a:	463d      	mov	r5, r7
 800bc1c:	f101 0101 	add.w	r1, r1, #1
 800bc20:	d9ee      	bls.n	800bc00 <__utoa+0x40>
 800bc22:	2200      	movs	r2, #0
 800bc24:	545a      	strb	r2, [r3, r1]
 800bc26:	1919      	adds	r1, r3, r4
 800bc28:	1aa5      	subs	r5, r4, r2
 800bc2a:	42aa      	cmp	r2, r5
 800bc2c:	dae3      	bge.n	800bbf6 <__utoa+0x36>
 800bc2e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800bc32:	780e      	ldrb	r6, [r1, #0]
 800bc34:	3201      	adds	r2, #1
 800bc36:	7006      	strb	r6, [r0, #0]
 800bc38:	f801 5901 	strb.w	r5, [r1], #-1
 800bc3c:	e7f4      	b.n	800bc28 <__utoa+0x68>
 800bc3e:	bf00      	nop
 800bc40:	0800c944 	.word	0x0800c944

0800bc44 <memset>:
 800bc44:	4603      	mov	r3, r0
 800bc46:	4402      	add	r2, r0
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d100      	bne.n	800bc4e <memset+0xa>
 800bc4c:	4770      	bx	lr
 800bc4e:	f803 1b01 	strb.w	r1, [r3], #1
 800bc52:	e7f9      	b.n	800bc48 <memset+0x4>

0800bc54 <__libc_init_array>:
 800bc54:	b570      	push	{r4, r5, r6, lr}
 800bc56:	2600      	movs	r6, #0
 800bc58:	4d0c      	ldr	r5, [pc, #48]	@ (800bc8c <__libc_init_array+0x38>)
 800bc5a:	4c0d      	ldr	r4, [pc, #52]	@ (800bc90 <__libc_init_array+0x3c>)
 800bc5c:	1b64      	subs	r4, r4, r5
 800bc5e:	10a4      	asrs	r4, r4, #2
 800bc60:	42a6      	cmp	r6, r4
 800bc62:	d109      	bne.n	800bc78 <__libc_init_array+0x24>
 800bc64:	f000 f828 	bl	800bcb8 <_init>
 800bc68:	2600      	movs	r6, #0
 800bc6a:	4d0a      	ldr	r5, [pc, #40]	@ (800bc94 <__libc_init_array+0x40>)
 800bc6c:	4c0a      	ldr	r4, [pc, #40]	@ (800bc98 <__libc_init_array+0x44>)
 800bc6e:	1b64      	subs	r4, r4, r5
 800bc70:	10a4      	asrs	r4, r4, #2
 800bc72:	42a6      	cmp	r6, r4
 800bc74:	d105      	bne.n	800bc82 <__libc_init_array+0x2e>
 800bc76:	bd70      	pop	{r4, r5, r6, pc}
 800bc78:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc7c:	4798      	blx	r3
 800bc7e:	3601      	adds	r6, #1
 800bc80:	e7ee      	b.n	800bc60 <__libc_init_array+0xc>
 800bc82:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc86:	4798      	blx	r3
 800bc88:	3601      	adds	r6, #1
 800bc8a:	e7f2      	b.n	800bc72 <__libc_init_array+0x1e>
 800bc8c:	0800c96c 	.word	0x0800c96c
 800bc90:	0800c96c 	.word	0x0800c96c
 800bc94:	0800c96c 	.word	0x0800c96c
 800bc98:	0800c970 	.word	0x0800c970

0800bc9c <memcpy>:
 800bc9c:	440a      	add	r2, r1
 800bc9e:	4291      	cmp	r1, r2
 800bca0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bca4:	d100      	bne.n	800bca8 <memcpy+0xc>
 800bca6:	4770      	bx	lr
 800bca8:	b510      	push	{r4, lr}
 800bcaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcae:	4291      	cmp	r1, r2
 800bcb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcb4:	d1f9      	bne.n	800bcaa <memcpy+0xe>
 800bcb6:	bd10      	pop	{r4, pc}

0800bcb8 <_init>:
 800bcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcba:	bf00      	nop
 800bcbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcbe:	bc08      	pop	{r3}
 800bcc0:	469e      	mov	lr, r3
 800bcc2:	4770      	bx	lr

0800bcc4 <_fini>:
 800bcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcc6:	bf00      	nop
 800bcc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcca:	bc08      	pop	{r3}
 800bccc:	469e      	mov	lr, r3
 800bcce:	4770      	bx	lr
