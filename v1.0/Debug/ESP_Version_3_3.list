
ESP_Version_3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c21c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800c400  0800c400  0000d400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4cc  0800c4cc  0000ece4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4cc  0800c4cc  0000d4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4d4  0800c4d4  0000ece4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4d4  0800c4d4  0000d4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4d8  0800c4d8  0000d4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ce4  20000000  0800c4dc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000810  20000ce4  0800d1c0  0000ece4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014f4  0800d1c0  0000f4f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000ece4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160de  00000000  00000000  0000ed0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd9  00000000  00000000  00024deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00027bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7d  00000000  00000000  00028d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b9b1  00000000  00000000  00029ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a13f  00000000  00000000  00045466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f920  00000000  00000000  0005f5a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000feec5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004808  00000000  00000000  000fef08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00103710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000ce4 	.word	0x20000ce4
 8000200:	00000000 	.word	0x00000000
 8000204:	0800c3e8 	.word	0x0800c3e8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000ce8 	.word	0x20000ce8
 8000220:	0800c3e8 	.word	0x0800c3e8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	//HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
	//HAL_Delay(1500);

	EEPROM_Read(0, 0, eepromData, 110);
 8000238:	236e      	movs	r3, #110	@ 0x6e
 800023a:	4a9a      	ldr	r2, [pc, #616]	@ (80004a4 <eepromKontrol+0x270>)
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f000 faaa 	bl	8000798 <EEPROM_Read>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	setupCompleted = eepromData[0];
 8000244:	4b97      	ldr	r3, [pc, #604]	@ (80004a4 <eepromKontrol+0x270>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	4b97      	ldr	r3, [pc, #604]	@ (80004a8 <eepromKontrol+0x274>)
 800024a:	701a      	strb	r2, [r3, #0]
	kaydedilenDeger = eepromData[3];
 800024c:	4b95      	ldr	r3, [pc, #596]	@ (80004a4 <eepromKontrol+0x270>)
 800024e:	78da      	ldrb	r2, [r3, #3]
 8000250:	4b96      	ldr	r3, [pc, #600]	@ (80004ac <eepromKontrol+0x278>)
 8000252:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000254:	4b93      	ldr	r3, [pc, #588]	@ (80004a4 <eepromKontrol+0x270>)
 8000256:	785a      	ldrb	r2, [r3, #1]
 8000258:	4b95      	ldr	r3, [pc, #596]	@ (80004b0 <eepromKontrol+0x27c>)
 800025a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800025c:	4b91      	ldr	r3, [pc, #580]	@ (80004a4 <eepromKontrol+0x270>)
 800025e:	789a      	ldrb	r2, [r3, #2]
 8000260:	4b94      	ldr	r3, [pc, #592]	@ (80004b4 <eepromKontrol+0x280>)
 8000262:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000264:	4b8f      	ldr	r3, [pc, #572]	@ (80004a4 <eepromKontrol+0x270>)
 8000266:	791a      	ldrb	r2, [r3, #4]
 8000268:	4b93      	ldr	r3, [pc, #588]	@ (80004b8 <eepromKontrol+0x284>)
 800026a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800026c:	4b8d      	ldr	r3, [pc, #564]	@ (80004a4 <eepromKontrol+0x270>)
 800026e:	795a      	ldrb	r2, [r3, #5]
 8000270:	4b92      	ldr	r3, [pc, #584]	@ (80004bc <eepromKontrol+0x288>)
 8000272:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000274:	4b8b      	ldr	r3, [pc, #556]	@ (80004a4 <eepromKontrol+0x270>)
 8000276:	799a      	ldrb	r2, [r3, #6]
 8000278:	4b91      	ldr	r3, [pc, #580]	@ (80004c0 <eepromKontrol+0x28c>)
 800027a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800027c:	4b89      	ldr	r3, [pc, #548]	@ (80004a4 <eepromKontrol+0x270>)
 800027e:	79da      	ldrb	r2, [r3, #7]
 8000280:	4b90      	ldr	r3, [pc, #576]	@ (80004c4 <eepromKontrol+0x290>)
 8000282:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000284:	4b87      	ldr	r3, [pc, #540]	@ (80004a4 <eepromKontrol+0x270>)
 8000286:	7a1a      	ldrb	r2, [r3, #8]
 8000288:	4b8f      	ldr	r3, [pc, #572]	@ (80004c8 <eepromKontrol+0x294>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800028c:	4b85      	ldr	r3, [pc, #532]	@ (80004a4 <eepromKontrol+0x270>)
 800028e:	7a5a      	ldrb	r2, [r3, #9]
 8000290:	4b8e      	ldr	r3, [pc, #568]	@ (80004cc <eepromKontrol+0x298>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8000294:	4b83      	ldr	r3, [pc, #524]	@ (80004a4 <eepromKontrol+0x270>)
 8000296:	7a9a      	ldrb	r2, [r3, #10]
 8000298:	4b8d      	ldr	r3, [pc, #564]	@ (80004d0 <eepromKontrol+0x29c>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 800029c:	4b81      	ldr	r3, [pc, #516]	@ (80004a4 <eepromKontrol+0x270>)
 800029e:	7ada      	ldrb	r2, [r3, #11]
 80002a0:	4b8c      	ldr	r3, [pc, #560]	@ (80004d4 <eepromKontrol+0x2a0>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002a4:	4b7f      	ldr	r3, [pc, #508]	@ (80004a4 <eepromKontrol+0x270>)
 80002a6:	7b1a      	ldrb	r2, [r3, #12]
 80002a8:	4b8b      	ldr	r3, [pc, #556]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002ac:	4b7d      	ldr	r3, [pc, #500]	@ (80004a4 <eepromKontrol+0x270>)
 80002ae:	7b5a      	ldrb	r2, [r3, #13]
 80002b0:	4b8a      	ldr	r3, [pc, #552]	@ (80004dc <eepromKontrol+0x2a8>)
 80002b2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002b4:	4b7b      	ldr	r3, [pc, #492]	@ (80004a4 <eepromKontrol+0x270>)
 80002b6:	7b9a      	ldrb	r2, [r3, #14]
 80002b8:	4b89      	ldr	r3, [pc, #548]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002ba:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002bc:	4b79      	ldr	r3, [pc, #484]	@ (80004a4 <eepromKontrol+0x270>)
 80002be:	7bda      	ldrb	r2, [r3, #15]
 80002c0:	4b88      	ldr	r3, [pc, #544]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002c2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002c4:	4b77      	ldr	r3, [pc, #476]	@ (80004a4 <eepromKontrol+0x270>)
 80002c6:	7c1a      	ldrb	r2, [r3, #16]
 80002c8:	4b87      	ldr	r3, [pc, #540]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002cc:	4b75      	ldr	r3, [pc, #468]	@ (80004a4 <eepromKontrol+0x270>)
 80002ce:	7c5a      	ldrb	r2, [r3, #17]
 80002d0:	4b86      	ldr	r3, [pc, #536]	@ (80004ec <eepromKontrol+0x2b8>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002d4:	4b73      	ldr	r3, [pc, #460]	@ (80004a4 <eepromKontrol+0x270>)
 80002d6:	7c9a      	ldrb	r2, [r3, #18]
 80002d8:	4b85      	ldr	r3, [pc, #532]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002da:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002dc:	4b71      	ldr	r3, [pc, #452]	@ (80004a4 <eepromKontrol+0x270>)
 80002de:	7cda      	ldrb	r2, [r3, #19]
 80002e0:	4b84      	ldr	r3, [pc, #528]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002e2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002e4:	4b6f      	ldr	r3, [pc, #444]	@ (80004a4 <eepromKontrol+0x270>)
 80002e6:	7d1a      	ldrb	r2, [r3, #20]
 80002e8:	4b83      	ldr	r3, [pc, #524]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002ea:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002ec:	4b6d      	ldr	r3, [pc, #436]	@ (80004a4 <eepromKontrol+0x270>)
 80002ee:	7d5a      	ldrb	r2, [r3, #21]
 80002f0:	4b82      	ldr	r3, [pc, #520]	@ (80004fc <eepromKontrol+0x2c8>)
 80002f2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80002f4:	4b6b      	ldr	r3, [pc, #428]	@ (80004a4 <eepromKontrol+0x270>)
 80002f6:	7d9a      	ldrb	r2, [r3, #22]
 80002f8:	4b81      	ldr	r3, [pc, #516]	@ (8000500 <eepromKontrol+0x2cc>)
 80002fa:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 80002fc:	4b69      	ldr	r3, [pc, #420]	@ (80004a4 <eepromKontrol+0x270>)
 80002fe:	7dda      	ldrb	r2, [r3, #23]
 8000300:	4b80      	ldr	r3, [pc, #512]	@ (8000504 <eepromKontrol+0x2d0>)
 8000302:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000304:	4b67      	ldr	r3, [pc, #412]	@ (80004a4 <eepromKontrol+0x270>)
 8000306:	7e1a      	ldrb	r2, [r3, #24]
 8000308:	4b7f      	ldr	r3, [pc, #508]	@ (8000508 <eepromKontrol+0x2d4>)
 800030a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800030c:	4b65      	ldr	r3, [pc, #404]	@ (80004a4 <eepromKontrol+0x270>)
 800030e:	7e5a      	ldrb	r2, [r3, #25]
 8000310:	4b7e      	ldr	r3, [pc, #504]	@ (800050c <eepromKontrol+0x2d8>)
 8000312:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000314:	4b63      	ldr	r3, [pc, #396]	@ (80004a4 <eepromKontrol+0x270>)
 8000316:	7e9a      	ldrb	r2, [r3, #26]
 8000318:	4b7d      	ldr	r3, [pc, #500]	@ (8000510 <eepromKontrol+0x2dc>)
 800031a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800031c:	4b61      	ldr	r3, [pc, #388]	@ (80004a4 <eepromKontrol+0x270>)
 800031e:	7eda      	ldrb	r2, [r3, #27]
 8000320:	4b7c      	ldr	r3, [pc, #496]	@ (8000514 <eepromKontrol+0x2e0>)
 8000322:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 8000324:	4b5f      	ldr	r3, [pc, #380]	@ (80004a4 <eepromKontrol+0x270>)
 8000326:	7f1a      	ldrb	r2, [r3, #28]
 8000328:	4b7b      	ldr	r3, [pc, #492]	@ (8000518 <eepromKontrol+0x2e4>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 800032c:	4b5d      	ldr	r3, [pc, #372]	@ (80004a4 <eepromKontrol+0x270>)
 800032e:	7f5a      	ldrb	r2, [r3, #29]
 8000330:	4b7a      	ldr	r3, [pc, #488]	@ (800051c <eepromKontrol+0x2e8>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 8000334:	4b5b      	ldr	r3, [pc, #364]	@ (80004a4 <eepromKontrol+0x270>)
 8000336:	7f9a      	ldrb	r2, [r3, #30]
 8000338:	4b79      	ldr	r3, [pc, #484]	@ (8000520 <eepromKontrol+0x2ec>)
 800033a:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800033c:	4b59      	ldr	r3, [pc, #356]	@ (80004a4 <eepromKontrol+0x270>)
 800033e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000342:	4b78      	ldr	r3, [pc, #480]	@ (8000524 <eepromKontrol+0x2f0>)
 8000344:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000346:	4b57      	ldr	r3, [pc, #348]	@ (80004a4 <eepromKontrol+0x270>)
 8000348:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800034c:	4b76      	ldr	r3, [pc, #472]	@ (8000528 <eepromKontrol+0x2f4>)
 800034e:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8000350:	4b54      	ldr	r3, [pc, #336]	@ (80004a4 <eepromKontrol+0x270>)
 8000352:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000356:	4b75      	ldr	r3, [pc, #468]	@ (800052c <eepromKontrol+0x2f8>)
 8000358:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 800035a:	4b52      	ldr	r3, [pc, #328]	@ (80004a4 <eepromKontrol+0x270>)
 800035c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000360:	4b73      	ldr	r3, [pc, #460]	@ (8000530 <eepromKontrol+0x2fc>)
 8000362:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000364:	4b4f      	ldr	r3, [pc, #316]	@ (80004a4 <eepromKontrol+0x270>)
 8000366:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800036a:	4b72      	ldr	r3, [pc, #456]	@ (8000534 <eepromKontrol+0x300>)
 800036c:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800036e:	4b4d      	ldr	r3, [pc, #308]	@ (80004a4 <eepromKontrol+0x270>)
 8000370:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8000374:	4b70      	ldr	r3, [pc, #448]	@ (8000538 <eepromKontrol+0x304>)
 8000376:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8000378:	4b4a      	ldr	r3, [pc, #296]	@ (80004a4 <eepromKontrol+0x270>)
 800037a:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 800037e:	4b6f      	ldr	r3, [pc, #444]	@ (800053c <eepromKontrol+0x308>)
 8000380:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8000382:	4b48      	ldr	r3, [pc, #288]	@ (80004a4 <eepromKontrol+0x270>)
 8000384:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8000388:	4b6d      	ldr	r3, [pc, #436]	@ (8000540 <eepromKontrol+0x30c>)
 800038a:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 800038c:	4b45      	ldr	r3, [pc, #276]	@ (80004a4 <eepromKontrol+0x270>)
 800038e:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8000392:	4b6c      	ldr	r3, [pc, #432]	@ (8000544 <eepromKontrol+0x310>)
 8000394:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8000396:	4b43      	ldr	r3, [pc, #268]	@ (80004a4 <eepromKontrol+0x270>)
 8000398:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 800039c:	4b6a      	ldr	r3, [pc, #424]	@ (8000548 <eepromKontrol+0x314>)
 800039e:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003a0:	4b40      	ldr	r3, [pc, #256]	@ (80004a4 <eepromKontrol+0x270>)
 80003a2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003a6:	4b69      	ldr	r3, [pc, #420]	@ (800054c <eepromKontrol+0x318>)
 80003a8:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003aa:	4b3e      	ldr	r3, [pc, #248]	@ (80004a4 <eepromKontrol+0x270>)
 80003ac:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003b0:	4b67      	ldr	r3, [pc, #412]	@ (8000550 <eepromKontrol+0x31c>)
 80003b2:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003b4:	4b3b      	ldr	r3, [pc, #236]	@ (80004a4 <eepromKontrol+0x270>)
 80003b6:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003ba:	4b66      	ldr	r3, [pc, #408]	@ (8000554 <eepromKontrol+0x320>)
 80003bc:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003be:	4b39      	ldr	r3, [pc, #228]	@ (80004a4 <eepromKontrol+0x270>)
 80003c0:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003c4:	4b64      	ldr	r3, [pc, #400]	@ (8000558 <eepromKontrol+0x324>)
 80003c6:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003c8:	4b39      	ldr	r3, [pc, #228]	@ (80004b0 <eepromKontrol+0x27c>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d902      	bls.n	80003d6 <eepromKontrol+0x1a2>
	    calismaSekli=0;
 80003d0:	4b37      	ldr	r3, [pc, #220]	@ (80004b0 <eepromKontrol+0x27c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003d6:	4b37      	ldr	r3, [pc, #220]	@ (80004b4 <eepromKontrol+0x280>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d902      	bls.n	80003e4 <eepromKontrol+0x1b0>
	    emniyetCercevesi=1;
 80003de:	4b35      	ldr	r3, [pc, #212]	@ (80004b4 <eepromKontrol+0x280>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80003e4:	4b34      	ldr	r3, [pc, #208]	@ (80004b8 <eepromKontrol+0x284>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d902      	bls.n	80003f2 <eepromKontrol+0x1be>
	    yavaslamaLimit=0;
 80003ec:	4b32      	ldr	r3, [pc, #200]	@ (80004b8 <eepromKontrol+0x284>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80003f2:	4b32      	ldr	r3, [pc, #200]	@ (80004bc <eepromKontrol+0x288>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d902      	bls.n	8000400 <eepromKontrol+0x1cc>
	    altLimit=1;
 80003fa:	4b30      	ldr	r3, [pc, #192]	@ (80004bc <eepromKontrol+0x288>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8000400:	4b2f      	ldr	r3, [pc, #188]	@ (80004c0 <eepromKontrol+0x28c>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b01      	cmp	r3, #1
 8000406:	d902      	bls.n	800040e <eepromKontrol+0x1da>
	    basincSalteri=1;
 8000408:	4b2d      	ldr	r3, [pc, #180]	@ (80004c0 <eepromKontrol+0x28c>)
 800040a:	2201      	movs	r2, #1
 800040c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800040e:	4b2d      	ldr	r3, [pc, #180]	@ (80004c4 <eepromKontrol+0x290>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2b03      	cmp	r3, #3
 8000414:	d902      	bls.n	800041c <eepromKontrol+0x1e8>
	    kapiSecimleri=3;
 8000416:	4b2b      	ldr	r3, [pc, #172]	@ (80004c4 <eepromKontrol+0x290>)
 8000418:	2203      	movs	r2, #3
 800041a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 800041c:	4b44      	ldr	r3, [pc, #272]	@ (8000530 <eepromKontrol+0x2fc>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d902      	bls.n	800042a <eepromKontrol+0x1f6>
	    kapiAcTipi=0;
 8000424:	4b42      	ldr	r3, [pc, #264]	@ (8000530 <eepromKontrol+0x2fc>)
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 800042a:	4b27      	ldr	r3, [pc, #156]	@ (80004c8 <eepromKontrol+0x294>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b02      	cmp	r3, #2
 8000430:	d902      	bls.n	8000438 <eepromKontrol+0x204>
	    kapi1Tip=1;
 8000432:	4b25      	ldr	r3, [pc, #148]	@ (80004c8 <eepromKontrol+0x294>)
 8000434:	2201      	movs	r2, #1
 8000436:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8000438:	4b24      	ldr	r3, [pc, #144]	@ (80004cc <eepromKontrol+0x298>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b05      	cmp	r3, #5
 800043e:	d902      	bls.n	8000446 <eepromKontrol+0x212>
	    kapi1AcSure=5;
 8000440:	4b22      	ldr	r3, [pc, #136]	@ (80004cc <eepromKontrol+0x298>)
 8000442:	2205      	movs	r2, #5
 8000444:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8000446:	4b22      	ldr	r3, [pc, #136]	@ (80004d0 <eepromKontrol+0x29c>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b02      	cmp	r3, #2
 800044c:	d902      	bls.n	8000454 <eepromKontrol+0x220>
	    kapi2Tip=1;
 800044e:	4b20      	ldr	r3, [pc, #128]	@ (80004d0 <eepromKontrol+0x29c>)
 8000450:	2201      	movs	r2, #1
 8000452:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8000454:	4b1f      	ldr	r3, [pc, #124]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b05      	cmp	r3, #5
 800045a:	d902      	bls.n	8000462 <eepromKontrol+0x22e>
	    kapi2AcSure=5;
 800045c:	4b1d      	ldr	r3, [pc, #116]	@ (80004d4 <eepromKontrol+0x2a0>)
 800045e:	2205      	movs	r2, #5
 8000460:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8000462:	4b1d      	ldr	r3, [pc, #116]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b02      	cmp	r3, #2
 8000468:	d902      	bls.n	8000470 <eepromKontrol+0x23c>
	    kapitablaTip=1;
 800046a:	4b1b      	ldr	r3, [pc, #108]	@ (80004d8 <eepromKontrol+0x2a4>)
 800046c:	2201      	movs	r2, #1
 800046e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8000470:	4b2d      	ldr	r3, [pc, #180]	@ (8000528 <eepromKontrol+0x2f4>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b02      	cmp	r3, #2
 8000476:	d902      	bls.n	800047e <eepromKontrol+0x24a>
	    kapiTablaAcKonum=2;
 8000478:	4b2b      	ldr	r3, [pc, #172]	@ (8000528 <eepromKontrol+0x2f4>)
 800047a:	2202      	movs	r2, #2
 800047c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 800047e:	4b17      	ldr	r3, [pc, #92]	@ (80004dc <eepromKontrol+0x2a8>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b05      	cmp	r3, #5
 8000484:	d902      	bls.n	800048c <eepromKontrol+0x258>
	    kapiTablaAcSure=5;
 8000486:	4b15      	ldr	r3, [pc, #84]	@ (80004dc <eepromKontrol+0x2a8>)
 8000488:	2205      	movs	r2, #5
 800048a:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 800048c:	4b14      	ldr	r3, [pc, #80]	@ (80004e0 <eepromKontrol+0x2ac>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d902      	bls.n	800049a <eepromKontrol+0x266>
	    yukariYavasLimit=0;
 8000494:	4b12      	ldr	r3, [pc, #72]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000496:	2200      	movs	r2, #0
 8000498:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 800049a:	4b12      	ldr	r3, [pc, #72]	@ (80004e4 <eepromKontrol+0x2b0>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b02      	cmp	r3, #2
 80004a0:	e05c      	b.n	800055c <eepromKontrol+0x328>
 80004a2:	bf00      	nop
 80004a4:	20000d00 	.word	0x20000d00
 80004a8:	20000d75 	.word	0x20000d75
 80004ac:	20000d76 	.word	0x20000d76
 80004b0:	20000da1 	.word	0x20000da1
 80004b4:	20000da4 	.word	0x20000da4
 80004b8:	20000da5 	.word	0x20000da5
 80004bc:	20000da6 	.word	0x20000da6
 80004c0:	20000da7 	.word	0x20000da7
 80004c4:	20000da8 	.word	0x20000da8
 80004c8:	20000da9 	.word	0x20000da9
 80004cc:	20000db9 	.word	0x20000db9
 80004d0:	20000daa 	.word	0x20000daa
 80004d4:	20000dba 	.word	0x20000dba
 80004d8:	20000dab 	.word	0x20000dab
 80004dc:	20000dbb 	.word	0x20000dbb
 80004e0:	20000dae 	.word	0x20000dae
 80004e4:	20000daf 	.word	0x20000daf
 80004e8:	20000db0 	.word	0x20000db0
 80004ec:	20000db1 	.word	0x20000db1
 80004f0:	20000db2 	.word	0x20000db2
 80004f4:	20000db3 	.word	0x20000db3
 80004f8:	20000db4 	.word	0x20000db4
 80004fc:	20000db5 	.word	0x20000db5
 8000500:	20000db6 	.word	0x20000db6
 8000504:	20000db7 	.word	0x20000db7
 8000508:	20000db8 	.word	0x20000db8
 800050c:	20000dbc 	.word	0x20000dbc
 8000510:	20000dbe 	.word	0x20000dbe
 8000514:	20000d98 	.word	0x20000d98
 8000518:	20000d99 	.word	0x20000d99
 800051c:	20000d9a 	.word	0x20000d9a
 8000520:	20000d9b 	.word	0x20000d9b
 8000524:	20000dc1 	.word	0x20000dc1
 8000528:	20000dad 	.word	0x20000dad
 800052c:	20000dc0 	.word	0x20000dc0
 8000530:	20000dac 	.word	0x20000dac
 8000534:	20000dc2 	.word	0x20000dc2
 8000538:	20000dc3 	.word	0x20000dc3
 800053c:	20000dc4 	.word	0x20000dc4
 8000540:	20000dc5 	.word	0x20000dc5
 8000544:	20000dc6 	.word	0x20000dc6
 8000548:	20000dc7 	.word	0x20000dc7
 800054c:	20000dc8 	.word	0x20000dc8
 8000550:	20000dc9 	.word	0x20000dc9
 8000554:	20000dca 	.word	0x20000dca
 8000558:	20000dcb 	.word	0x20000dcb
 800055c:	d902      	bls.n	8000564 <eepromKontrol+0x330>
	    devirmeYuruyusSecim=0;
 800055e:	4b36      	ldr	r3, [pc, #216]	@ (8000638 <eepromKontrol+0x404>)
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000564:	4b35      	ldr	r3, [pc, #212]	@ (800063c <eepromKontrol+0x408>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d902      	bls.n	8000572 <eepromKontrol+0x33e>
	    devirmeYukariIleriLimit=1;
 800056c:	4b33      	ldr	r3, [pc, #204]	@ (800063c <eepromKontrol+0x408>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8000572:	4b33      	ldr	r3, [pc, #204]	@ (8000640 <eepromKontrol+0x40c>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d902      	bls.n	8000580 <eepromKontrol+0x34c>
	    devirmeAsagiGeriLimit=1;
 800057a:	4b31      	ldr	r3, [pc, #196]	@ (8000640 <eepromKontrol+0x40c>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8000580:	4b30      	ldr	r3, [pc, #192]	@ (8000644 <eepromKontrol+0x410>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    devirmeSilindirTipi=0;
 8000588:	4b2e      	ldr	r3, [pc, #184]	@ (8000644 <eepromKontrol+0x410>)
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800058e:	4b2e      	ldr	r3, [pc, #184]	@ (8000648 <eepromKontrol+0x414>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    platformSilindirTipi=0;
 8000596:	4b2c      	ldr	r3, [pc, #176]	@ (8000648 <eepromKontrol+0x414>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 800059c:	4b2b      	ldr	r3, [pc, #172]	@ (800064c <eepromKontrol+0x418>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    yukariValfTmr=0;
 80005a4:	4b29      	ldr	r3, [pc, #164]	@ (800064c <eepromKontrol+0x418>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005aa:	4b29      	ldr	r3, [pc, #164]	@ (8000650 <eepromKontrol+0x41c>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b05      	cmp	r3, #5
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    asagiValfTmr=0;
 80005b2:	4b27      	ldr	r3, [pc, #156]	@ (8000650 <eepromKontrol+0x41c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005b8:	4b26      	ldr	r3, [pc, #152]	@ (8000654 <eepromKontrol+0x420>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b05      	cmp	r3, #5
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    devirmeYukariIleriTmr=0;
 80005c0:	4b24      	ldr	r3, [pc, #144]	@ (8000654 <eepromKontrol+0x420>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005c6:	4b24      	ldr	r3, [pc, #144]	@ (8000658 <eepromKontrol+0x424>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    devirmeAsagiGeriTmr=0;
 80005ce:	4b22      	ldr	r3, [pc, #136]	@ (8000658 <eepromKontrol+0x424>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80005d4:	4b21      	ldr	r3, [pc, #132]	@ (800065c <eepromKontrol+0x428>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2bb4      	cmp	r3, #180	@ 0xb4
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    makineCalismaTmr=60;
 80005dc:	4b1f      	ldr	r3, [pc, #124]	@ (800065c <eepromKontrol+0x428>)
 80005de:	223c      	movs	r2, #60	@ 0x3c
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80005e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <eepromKontrol+0x42c>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    buzzer=0;
 80005ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000660 <eepromKontrol+0x42c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 80005f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000664 <eepromKontrol+0x430>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    demoMode=0;
 80005f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000664 <eepromKontrol+0x430>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 80005fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000668 <eepromKontrol+0x434>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    calismaSayModu=0;
 8000606:	4b18      	ldr	r3, [pc, #96]	@ (8000668 <eepromKontrol+0x434>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 800060c:	4b17      	ldr	r3, [pc, #92]	@ (800066c <eepromKontrol+0x438>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    dilSecim=0;
 8000614:	4b15      	ldr	r3, [pc, #84]	@ (800066c <eepromKontrol+0x438>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 800061a:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <eepromKontrol+0x43c>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
		iotMode=0;
 8000622:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <eepromKontrol+0x43c>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	loadMenuTexts(dilSecim);
 8000628:	4b10      	ldr	r3, [pc, #64]	@ (800066c <eepromKontrol+0x438>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f006 fb99 	bl	8006d64 <loadMenuTexts>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000daf 	.word	0x20000daf
 800063c:	20000db0 	.word	0x20000db0
 8000640:	20000db1 	.word	0x20000db1
 8000644:	20000db2 	.word	0x20000db2
 8000648:	20000db3 	.word	0x20000db3
 800064c:	20000db4 	.word	0x20000db4
 8000650:	20000db5 	.word	0x20000db5
 8000654:	20000db6 	.word	0x20000db6
 8000658:	20000db7 	.word	0x20000db7
 800065c:	20000db8 	.word	0x20000db8
 8000660:	20000dbc 	.word	0x20000dbc
 8000664:	20000dbe 	.word	0x20000dbe
 8000668:	20000dc0 	.word	0x20000dc0
 800066c:	20000dc1 	.word	0x20000dc1
 8000670:	20000dbf 	.word	0x20000dbf

08000674 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM(int resultText) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	EEPROM_Write(0, 0, eepromData, 110);
 800067c:	236e      	movs	r3, #110	@ 0x6e
 800067e:	4a0b      	ldr	r2, [pc, #44]	@ (80006ac <saveEEPROM+0x38>)
 8000680:	2100      	movs	r1, #0
 8000682:	2000      	movs	r0, #0
 8000684:	f000 f816 	bl	80006b4 <EEPROM_Write>

    if(resultText == 1) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d104      	bne.n	8000698 <saveEEPROM+0x24>
    	lcd_print(2, 1, dataYazildiText);
 800068e:	4a08      	ldr	r2, [pc, #32]	@ (80006b0 <saveEEPROM+0x3c>)
 8000690:	2101      	movs	r1, #1
 8000692:	2002      	movs	r0, #2
 8000694:	f008 f93b 	bl	800890e <lcd_print>
    }

    // Ekranı temizle
    HAL_Delay(500);
 8000698:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800069c:	f008 fe04 	bl	80092a8 <HAL_Delay>
    lcd_clear();
 80006a0:	f008 f94a 	bl	8008938 <lcd_clear>
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000d00 	.word	0x20000d00
 80006b0:	20001380 	.word	0x20001380

080006b4 <EEPROM_Write>:

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08e      	sub	sp, #56	@ 0x38
 80006b8:	af04      	add	r7, sp, #16
 80006ba:	60ba      	str	r2, [r7, #8]
 80006bc:	461a      	mov	r2, r3
 80006be:	4603      	mov	r3, r0
 80006c0:	81fb      	strh	r3, [r7, #14]
 80006c2:	460b      	mov	r3, r1
 80006c4:	81bb      	strh	r3, [r7, #12]
 80006c6:	4613      	mov	r3, r2
 80006c8:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80006ca:	2306      	movs	r3, #6
 80006cc:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80006d2:	88fa      	ldrh	r2, [r7, #6]
 80006d4:	89bb      	ldrh	r3, [r7, #12]
 80006d6:	4413      	add	r3, r2
 80006d8:	2b00      	cmp	r3, #0
 80006da:	da00      	bge.n	80006de <EEPROM_Write+0x2a>
 80006dc:	333f      	adds	r3, #63	@ 0x3f
 80006de:	119b      	asrs	r3, r3, #6
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	89fb      	ldrh	r3, [r7, #14]
 80006e4:	4413      	add	r3, r2
 80006e6:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 80006e8:	8afa      	ldrh	r2, [r7, #22]
 80006ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	3301      	adds	r3, #1
 80006f2:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	623b      	str	r3, [r7, #32]
 80006fc:	e041      	b.n	8000782 <EEPROM_Write+0xce>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 80006fe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	b21a      	sxth	r2, r3
 8000708:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800070c:	4313      	orrs	r3, r2
 800070e:	b21b      	sxth	r3, r3
 8000710:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000712:	89bb      	ldrh	r3, [r7, #12]
 8000714:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000718:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800071a:	8bfa      	ldrh	r2, [r7, #30]
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	429a      	cmp	r2, r3
 8000720:	d901      	bls.n	8000726 <EEPROM_Write+0x72>
            bytesremaining = size;
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 8000726:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000728:	68ba      	ldr	r2, [r7, #8]
 800072a:	4413      	add	r3, r2
 800072c:	8a79      	ldrh	r1, [r7, #18]
 800072e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000732:	9202      	str	r2, [sp, #8]
 8000734:	8bfa      	ldrh	r2, [r7, #30]
 8000736:	9201      	str	r2, [sp, #4]
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2310      	movs	r3, #16
 800073c:	460a      	mov	r2, r1
 800073e:	21a0      	movs	r1, #160	@ 0xa0
 8000740:	4813      	ldr	r0, [pc, #76]	@ (8000790 <EEPROM_Write+0xdc>)
 8000742:	f009 fcf9 	bl	800a138 <HAL_I2C_Mem_Write>
 8000746:	4603      	mov	r3, r0
 8000748:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800074a:	7c7b      	ldrb	r3, [r7, #17]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d005      	beq.n	800075c <EEPROM_Write+0xa8>
            lcd_print(2, 1, "Hata: EEPROM    ");
 8000750:	4a10      	ldr	r2, [pc, #64]	@ (8000794 <EEPROM_Write+0xe0>)
 8000752:	2101      	movs	r1, #1
 8000754:	2002      	movs	r0, #2
 8000756:	f008 f8da 	bl	800890e <lcd_print>
            return;
 800075a:	e016      	b.n	800078a <EEPROM_Write+0xd6>
        }

        startPage += 1;
 800075c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800075e:	3301      	adds	r3, #1
 8000760:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 8000766:	88fa      	ldrh	r2, [r7, #6]
 8000768:	8bfb      	ldrh	r3, [r7, #30]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 800076e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000770:	8bfb      	ldrh	r3, [r7, #30]
 8000772:	4413      	add	r3, r2
 8000774:	84bb      	strh	r3, [r7, #36]	@ 0x24

        HAL_Delay(5);
 8000776:	2005      	movs	r0, #5
 8000778:	f008 fd96 	bl	80092a8 <HAL_Delay>
    for (int i = 0; i < numofpages; i++) {
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	3301      	adds	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	8abb      	ldrh	r3, [r7, #20]
 8000784:	6a3a      	ldr	r2, [r7, #32]
 8000786:	429a      	cmp	r2, r3
 8000788:	dbb9      	blt.n	80006fe <EEPROM_Write+0x4a>
    }
}
 800078a:	3728      	adds	r7, #40	@ 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2000140c 	.word	0x2000140c
 8000794:	0800c400 	.word	0x0800c400

08000798 <EEPROM_Read>:

void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b08e      	sub	sp, #56	@ 0x38
 800079c:	af04      	add	r7, sp, #16
 800079e:	60ba      	str	r2, [r7, #8]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4603      	mov	r3, r0
 80007a4:	81fb      	strh	r3, [r7, #14]
 80007a6:	460b      	mov	r3, r1
 80007a8:	81bb      	strh	r3, [r7, #12]
 80007aa:	4613      	mov	r3, r2
 80007ac:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80007ae:	2306      	movs	r3, #6
 80007b0:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80007b2:	89fb      	ldrh	r3, [r7, #14]
 80007b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80007b6:	88fa      	ldrh	r2, [r7, #6]
 80007b8:	89bb      	ldrh	r3, [r7, #12]
 80007ba:	4413      	add	r3, r2
 80007bc:	2b00      	cmp	r3, #0
 80007be:	da00      	bge.n	80007c2 <EEPROM_Read+0x2a>
 80007c0:	333f      	adds	r3, #63	@ 0x3f
 80007c2:	119b      	asrs	r3, r3, #6
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	89fb      	ldrh	r3, [r7, #14]
 80007c8:	4413      	add	r3, r2
 80007ca:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 80007cc:	8afa      	ldrh	r2, [r7, #22]
 80007ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	3301      	adds	r3, #1
 80007d6:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
 80007e0:	e03e      	b.n	8000860 <EEPROM_Read+0xc8>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 80007e2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	b21a      	sxth	r2, r3
 80007ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 80007f6:	89bb      	ldrh	r3, [r7, #12]
 80007f8:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80007fc:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 80007fe:	8bfa      	ldrh	r2, [r7, #30]
 8000800:	88fb      	ldrh	r3, [r7, #6]
 8000802:	429a      	cmp	r2, r3
 8000804:	d901      	bls.n	800080a <EEPROM_Read+0x72>
            bytesremaining = size;
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 800080a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800080c:	68ba      	ldr	r2, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	8a79      	ldrh	r1, [r7, #18]
 8000812:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000816:	9202      	str	r2, [sp, #8]
 8000818:	8bfa      	ldrh	r2, [r7, #30]
 800081a:	9201      	str	r2, [sp, #4]
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2310      	movs	r3, #16
 8000820:	460a      	mov	r2, r1
 8000822:	21a0      	movs	r1, #160	@ 0xa0
 8000824:	4812      	ldr	r0, [pc, #72]	@ (8000870 <EEPROM_Read+0xd8>)
 8000826:	f009 fd81 	bl	800a32c <HAL_I2C_Mem_Read>
 800082a:	4603      	mov	r3, r0
 800082c:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800082e:	7c7b      	ldrb	r3, [r7, #17]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d005      	beq.n	8000840 <EEPROM_Read+0xa8>
            lcd_print(2, 1, "Hata: EEPROM OKU");
 8000834:	4a0f      	ldr	r2, [pc, #60]	@ (8000874 <EEPROM_Read+0xdc>)
 8000836:	2101      	movs	r1, #1
 8000838:	2002      	movs	r0, #2
 800083a:	f008 f868 	bl	800890e <lcd_print>
            return;
 800083e:	e013      	b.n	8000868 <EEPROM_Read+0xd0>
        }

        startPage += 1;
 8000840:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000842:	3301      	adds	r3, #1
 8000844:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 800084a:	88fa      	ldrh	r2, [r7, #6]
 800084c:	8bfb      	ldrh	r3, [r7, #30]
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 8000852:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000854:	8bfb      	ldrh	r3, [r7, #30]
 8000856:	4413      	add	r3, r2
 8000858:	84bb      	strh	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < numofpages; i++) {
 800085a:	6a3b      	ldr	r3, [r7, #32]
 800085c:	3301      	adds	r3, #1
 800085e:	623b      	str	r3, [r7, #32]
 8000860:	8abb      	ldrh	r3, [r7, #20]
 8000862:	6a3a      	ldr	r2, [r7, #32]
 8000864:	429a      	cmp	r2, r3
 8000866:	dbbc      	blt.n	80007e2 <EEPROM_Read+0x4a>
    }
}
 8000868:	3728      	adds	r7, #40	@ 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000140c 	.word	0x2000140c
 8000874:	0800c414 	.word	0x0800c414

08000878 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b089      	sub	sp, #36	@ 0x24
 800087c:	af04      	add	r7, sp, #16
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000882:	4b25      	ldr	r3, [pc, #148]	@ (8000918 <hata2EEPROM+0xa0>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	1e5a      	subs	r2, r3, #1
 8000888:	4b24      	ldr	r3, [pc, #144]	@ (800091c <hata2EEPROM+0xa4>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4413      	add	r3, r2
 800088e:	4a24      	ldr	r2, [pc, #144]	@ (8000920 <hata2EEPROM+0xa8>)
 8000890:	5cd3      	ldrb	r3, [r2, r3]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d002      	beq.n	800089c <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000896:	f000 f8d1 	bl	8000a3c <eepromDataFillWithEmpty>
		goto veriEkleme;
 800089a:	e000      	b.n	800089e <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 800089c:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	e012      	b.n	80008ca <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80008a4:	4b1d      	ldr	r3, [pc, #116]	@ (800091c <hata2EEPROM+0xa4>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4413      	add	r3, r2
 80008ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000920 <hata2EEPROM+0xa8>)
 80008ae:	5cd3      	ldrb	r3, [r2, r3]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d107      	bne.n	80008c4 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80008b4:	4b19      	ldr	r3, [pc, #100]	@ (800091c <hata2EEPROM+0xa4>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4413      	add	r3, r2
 80008bc:	4918      	ldr	r1, [pc, #96]	@ (8000920 <hata2EEPROM+0xa8>)
 80008be:	79fa      	ldrb	r2, [r7, #7]
 80008c0:	54ca      	strb	r2, [r1, r3]
					break;
 80008c2:	e007      	b.n	80008d4 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	3301      	adds	r3, #1
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <hata2EEPROM+0xa0>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	dbe7      	blt.n	80008a4 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80008d4:	4b11      	ldr	r3, [pc, #68]	@ (800091c <hata2EEPROM+0xa4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	b299      	uxth	r1, r3
 80008da:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <hata2EEPROM+0xa0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	b298      	uxth	r0, r3
 80008e0:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <hata2EEPROM+0xa4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000920 <hata2EEPROM+0xa8>)
 80008e6:	4413      	add	r3, r2
 80008e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000918 <hata2EEPROM+0xa0>)
 80008ea:	6812      	ldr	r2, [r2, #0]
 80008ec:	b292      	uxth	r2, r2
 80008ee:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 80008f2:	9402      	str	r4, [sp, #8]
 80008f4:	9201      	str	r2, [sp, #4]
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	4603      	mov	r3, r0
 80008fa:	460a      	mov	r2, r1
 80008fc:	21a0      	movs	r1, #160	@ 0xa0
 80008fe:	4809      	ldr	r0, [pc, #36]	@ (8000924 <hata2EEPROM+0xac>)
 8000900:	f009 fc1a 	bl	800a138 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000904:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000908:	f008 fcce 	bl	80092a8 <HAL_Delay>
	eepromKontrol();
 800090c:	f7ff fc92 	bl	8000234 <eepromKontrol>
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	bd90      	pop	{r4, r7, pc}
 8000918:	20000028 	.word	0x20000028
 800091c:	2000002c 	.word	0x2000002c
 8000920:	20000d00 	.word	0x20000d00
 8000924:	2000140c 	.word	0x2000140c

08000928 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d10f      	bne.n	8000958 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000938:	4a38      	ldr	r2, [pc, #224]	@ (8000a1c <hataKoduLcdGoster+0xf4>)
 800093a:	2101      	movs	r1, #1
 800093c:	2001      	movs	r0, #1
 800093e:	f007 ffe6 	bl	800890e <lcd_print>
		lcd_print(2, 1, "1");
 8000942:	4a37      	ldr	r2, [pc, #220]	@ (8000a20 <hataKoduLcdGoster+0xf8>)
 8000944:	2101      	movs	r1, #1
 8000946:	2002      	movs	r0, #2
 8000948:	f007 ffe1 	bl	800890e <lcd_print>
		lcd_print(2, 7, "          ");
 800094c:	4a35      	ldr	r2, [pc, #212]	@ (8000a24 <hataKoduLcdGoster+0xfc>)
 800094e:	2107      	movs	r1, #7
 8000950:	2002      	movs	r0, #2
 8000952:	f007 ffdc 	bl	800890e <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000956:	e05d      	b.n	8000a14 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	2b02      	cmp	r3, #2
 800095c:	d10f      	bne.n	800097e <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 800095e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a1c <hataKoduLcdGoster+0xf4>)
 8000960:	2101      	movs	r1, #1
 8000962:	2001      	movs	r0, #1
 8000964:	f007 ffd3 	bl	800890e <lcd_print>
		lcd_print(2, 2, "2");
 8000968:	4a2f      	ldr	r2, [pc, #188]	@ (8000a28 <hataKoduLcdGoster+0x100>)
 800096a:	2102      	movs	r1, #2
 800096c:	2002      	movs	r0, #2
 800096e:	f007 ffce 	bl	800890e <lcd_print>
		lcd_print(2, 7, "          ");
 8000972:	4a2c      	ldr	r2, [pc, #176]	@ (8000a24 <hataKoduLcdGoster+0xfc>)
 8000974:	2107      	movs	r1, #7
 8000976:	2002      	movs	r0, #2
 8000978:	f007 ffc9 	bl	800890e <lcd_print>
}
 800097c:	e04a      	b.n	8000a14 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b03      	cmp	r3, #3
 8000982:	d10f      	bne.n	80009a4 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000984:	4a25      	ldr	r2, [pc, #148]	@ (8000a1c <hataKoduLcdGoster+0xf4>)
 8000986:	2101      	movs	r1, #1
 8000988:	2001      	movs	r0, #1
 800098a:	f007 ffc0 	bl	800890e <lcd_print>
		lcd_print(2, 3, "3");
 800098e:	4a27      	ldr	r2, [pc, #156]	@ (8000a2c <hataKoduLcdGoster+0x104>)
 8000990:	2103      	movs	r1, #3
 8000992:	2002      	movs	r0, #2
 8000994:	f007 ffbb 	bl	800890e <lcd_print>
		lcd_print(2, 7, "          ");
 8000998:	4a22      	ldr	r2, [pc, #136]	@ (8000a24 <hataKoduLcdGoster+0xfc>)
 800099a:	2107      	movs	r1, #7
 800099c:	2002      	movs	r0, #2
 800099e:	f007 ffb6 	bl	800890e <lcd_print>
}
 80009a2:	e037      	b.n	8000a14 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	d10f      	bne.n	80009ca <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 80009aa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a1c <hataKoduLcdGoster+0xf4>)
 80009ac:	2101      	movs	r1, #1
 80009ae:	2001      	movs	r0, #1
 80009b0:	f007 ffad 	bl	800890e <lcd_print>
		lcd_print(2, 4, "4");
 80009b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000a30 <hataKoduLcdGoster+0x108>)
 80009b6:	2104      	movs	r1, #4
 80009b8:	2002      	movs	r0, #2
 80009ba:	f007 ffa8 	bl	800890e <lcd_print>
		lcd_print(2, 7, "          ");
 80009be:	4a19      	ldr	r2, [pc, #100]	@ (8000a24 <hataKoduLcdGoster+0xfc>)
 80009c0:	2107      	movs	r1, #7
 80009c2:	2002      	movs	r0, #2
 80009c4:	f007 ffa3 	bl	800890e <lcd_print>
}
 80009c8:	e024      	b.n	8000a14 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b05      	cmp	r3, #5
 80009ce:	d10f      	bne.n	80009f0 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 80009d0:	4a12      	ldr	r2, [pc, #72]	@ (8000a1c <hataKoduLcdGoster+0xf4>)
 80009d2:	2101      	movs	r1, #1
 80009d4:	2001      	movs	r0, #1
 80009d6:	f007 ff9a 	bl	800890e <lcd_print>
		lcd_print(2, 5, "5");
 80009da:	4a16      	ldr	r2, [pc, #88]	@ (8000a34 <hataKoduLcdGoster+0x10c>)
 80009dc:	2105      	movs	r1, #5
 80009de:	2002      	movs	r0, #2
 80009e0:	f007 ff95 	bl	800890e <lcd_print>
		lcd_print(2, 7, "          ");
 80009e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000a24 <hataKoduLcdGoster+0xfc>)
 80009e6:	2107      	movs	r1, #7
 80009e8:	2002      	movs	r0, #2
 80009ea:	f007 ff90 	bl	800890e <lcd_print>
}
 80009ee:	e011      	b.n	8000a14 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	2b06      	cmp	r3, #6
 80009f4:	d10e      	bne.n	8000a14 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 80009f6:	4a09      	ldr	r2, [pc, #36]	@ (8000a1c <hataKoduLcdGoster+0xf4>)
 80009f8:	2101      	movs	r1, #1
 80009fa:	2001      	movs	r0, #1
 80009fc:	f007 ff87 	bl	800890e <lcd_print>
		lcd_print(2, 6, "6");
 8000a00:	4a0d      	ldr	r2, [pc, #52]	@ (8000a38 <hataKoduLcdGoster+0x110>)
 8000a02:	2106      	movs	r1, #6
 8000a04:	2002      	movs	r0, #2
 8000a06:	f007 ff82 	bl	800890e <lcd_print>
		lcd_print(2, 7, "          ");
 8000a0a:	4a06      	ldr	r2, [pc, #24]	@ (8000a24 <hataKoduLcdGoster+0xfc>)
 8000a0c:	2107      	movs	r1, #7
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f007 ff7d 	bl	800890e <lcd_print>
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200013d0 	.word	0x200013d0
 8000a20:	0800c428 	.word	0x0800c428
 8000a24:	0800c42c 	.word	0x0800c42c
 8000a28:	0800c438 	.word	0x0800c438
 8000a2c:	0800c43c 	.word	0x0800c43c
 8000a30:	0800c440 	.word	0x0800c440
 8000a34:	0800c444 	.word	0x0800c444
 8000a38:	0800c448 	.word	0x0800c448

08000a3c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	e009      	b.n	8000a5c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000a48:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <eepromDataFillWithEmpty+0x38>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a50:	4a09      	ldr	r2, [pc, #36]	@ (8000a78 <eepromDataFillWithEmpty+0x3c>)
 8000a52:	2100      	movs	r1, #0
 8000a54:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <eepromDataFillWithEmpty+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	dbf0      	blt.n	8000a48 <eepromDataFillWithEmpty+0xc>
	}
}
 8000a66:	bf00      	nop
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000d00 	.word	0x20000d00
 8000a7c:	20000028 	.word	0x20000028

08000a80 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000a86:	463b      	mov	r3, r7
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000a92:	4b50      	ldr	r3, [pc, #320]	@ (8000bd4 <i2cTest+0x154>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b4e      	ldr	r3, [pc, #312]	@ (8000bd4 <i2cTest+0x154>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f022 0201 	bic.w	r2, r2, #1
 8000aa0:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000aa2:	484c      	ldr	r0, [pc, #304]	@ (8000bd4 <i2cTest+0x154>)
 8000aa4:	f009 fa1a 	bl	8009edc <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aa8:	23c0      	movs	r3, #192	@ 0xc0
 8000aaa:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000aac:	2311      	movs	r3, #17
 8000aae:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4619      	mov	r1, r3
 8000abc:	4846      	ldr	r0, [pc, #280]	@ (8000bd8 <i2cTest+0x158>)
 8000abe:	f008 fe21 	bl	8009704 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2140      	movs	r1, #64	@ 0x40
 8000ac6:	4844      	ldr	r0, [pc, #272]	@ (8000bd8 <i2cTest+0x158>)
 8000ac8:	f009 f893 	bl	8009bf2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2180      	movs	r1, #128	@ 0x80
 8000ad0:	4841      	ldr	r0, [pc, #260]	@ (8000bd8 <i2cTest+0x158>)
 8000ad2:	f009 f88e 	bl	8009bf2 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000ad6:	200a      	movs	r0, #10
 8000ad8:	f008 fbe6 	bl	80092a8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000adc:	bf00      	nop
 8000ade:	2140      	movs	r1, #64	@ 0x40
 8000ae0:	483d      	ldr	r0, [pc, #244]	@ (8000bd8 <i2cTest+0x158>)
 8000ae2:	f009 f86f 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d006      	beq.n	8000afa <i2cTest+0x7a>
 8000aec:	2180      	movs	r1, #128	@ 0x80
 8000aee:	483a      	ldr	r0, [pc, #232]	@ (8000bd8 <i2cTest+0x158>)
 8000af0:	f009 f868 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d1f1      	bne.n	8000ade <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2180      	movs	r1, #128	@ 0x80
 8000afe:	4836      	ldr	r0, [pc, #216]	@ (8000bd8 <i2cTest+0x158>)
 8000b00:	f009 f877 	bl	8009bf2 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000b04:	200a      	movs	r0, #10
 8000b06:	f008 fbcf 	bl	80092a8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000b0a:	bf00      	nop
 8000b0c:	2180      	movs	r1, #128	@ 0x80
 8000b0e:	4832      	ldr	r0, [pc, #200]	@ (8000bd8 <i2cTest+0x158>)
 8000b10:	f009 f858 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d0f8      	beq.n	8000b0c <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2140      	movs	r1, #64	@ 0x40
 8000b1e:	482e      	ldr	r0, [pc, #184]	@ (8000bd8 <i2cTest+0x158>)
 8000b20:	f009 f867 	bl	8009bf2 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000b24:	200a      	movs	r0, #10
 8000b26:	f008 fbbf 	bl	80092a8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000b2a:	bf00      	nop
 8000b2c:	2140      	movs	r1, #64	@ 0x40
 8000b2e:	482a      	ldr	r0, [pc, #168]	@ (8000bd8 <i2cTest+0x158>)
 8000b30:	f009 f848 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d0f8      	beq.n	8000b2c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2140      	movs	r1, #64	@ 0x40
 8000b3e:	4826      	ldr	r0, [pc, #152]	@ (8000bd8 <i2cTest+0x158>)
 8000b40:	f009 f857 	bl	8009bf2 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000b44:	200a      	movs	r0, #10
 8000b46:	f008 fbaf 	bl	80092a8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000b4a:	bf00      	nop
 8000b4c:	2140      	movs	r1, #64	@ 0x40
 8000b4e:	4822      	ldr	r0, [pc, #136]	@ (8000bd8 <i2cTest+0x158>)
 8000b50:	f009 f838 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d1f8      	bne.n	8000b4c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2180      	movs	r1, #128	@ 0x80
 8000b5e:	481e      	ldr	r0, [pc, #120]	@ (8000bd8 <i2cTest+0x158>)
 8000b60:	f009 f847 	bl	8009bf2 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000b64:	200a      	movs	r0, #10
 8000b66:	f008 fb9f 	bl	80092a8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000b6a:	bf00      	nop
 8000b6c:	2180      	movs	r1, #128	@ 0x80
 8000b6e:	481a      	ldr	r0, [pc, #104]	@ (8000bd8 <i2cTest+0x158>)
 8000b70:	f009 f828 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d1f8      	bne.n	8000b6c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b7a:	23c0      	movs	r3, #192	@ 0xc0
 8000b7c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000b7e:	2312      	movs	r3, #18
 8000b80:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4812      	ldr	r0, [pc, #72]	@ (8000bd8 <i2cTest+0x158>)
 8000b90:	f008 fdb8 	bl	8009704 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <i2cTest+0x154>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <i2cTest+0x154>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000ba2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <i2cTest+0x154>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <i2cTest+0x154>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000bb2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <i2cTest+0x154>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <i2cTest+0x154>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f042 0201 	orr.w	r2, r2, #1
 8000bc2:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000bc4:	4803      	ldr	r0, [pc, #12]	@ (8000bd4 <i2cTest+0x154>)
 8000bc6:	f009 f845 	bl	8009c54 <HAL_I2C_Init>
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000140c 	.word	0x2000140c
 8000bd8:	40010c00 	.word	0x40010c00

08000bdc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000be0:	f3bf 8f4f 	dsb	sy
}
 8000be4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <__NVIC_SystemReset+0x24>)
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000bee:	4904      	ldr	r1, [pc, #16]	@ (8000c00 <__NVIC_SystemReset+0x24>)
 8000bf0:	4b04      	ldr	r3, [pc, #16]	@ (8000c04 <__NVIC_SystemReset+0x28>)
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bf6:	f3bf 8f4f 	dsb	sy
}
 8000bfa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <__NVIC_SystemReset+0x20>
 8000c00:	e000ed00 	.word	0xe000ed00
 8000c04:	05fa0004 	.word	0x05fa0004

08000c08 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000c0e:	2101      	movs	r1, #1
 8000c10:	4890      	ldr	r0, [pc, #576]	@ (8000e54 <menu+0x24c>)
 8000c12:	f008 ffd7 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	f040 808e 	bne.w	8000d3a <menu+0x132>
 8000c1e:	4b8e      	ldr	r3, [pc, #568]	@ (8000e58 <menu+0x250>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	f083 0301 	eor.w	r3, r3, #1
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f000 8086 	beq.w	8000d3a <menu+0x132>
		menuSayac = menuSayac+1;
 8000c2e:	4b8b      	ldr	r3, [pc, #556]	@ (8000e5c <menu+0x254>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b89      	ldr	r3, [pc, #548]	@ (8000e5c <menu+0x254>)
 8000c38:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 32) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8000c3a:	4b88      	ldr	r3, [pc, #544]	@ (8000e5c <menu+0x254>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b20      	cmp	r3, #32
 8000c40:	d102      	bne.n	8000c48 <menu+0x40>
			menuSayac = 1;
 8000c42:	4b86      	ldr	r3, [pc, #536]	@ (8000e5c <menu+0x254>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8000c48:	4b84      	ldr	r3, [pc, #528]	@ (8000e5c <menu+0x254>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b12      	cmp	r3, #18
 8000c4e:	d106      	bne.n	8000c5e <menu+0x56>
 8000c50:	4b83      	ldr	r3, [pc, #524]	@ (8000e60 <menu+0x258>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <menu+0x56>
			menuSayac = 21;
 8000c58:	4b80      	ldr	r3, [pc, #512]	@ (8000e5c <menu+0x254>)
 8000c5a:	2215      	movs	r2, #21
 8000c5c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8000c5e:	4b7f      	ldr	r3, [pc, #508]	@ (8000e5c <menu+0x254>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b08      	cmp	r3, #8
 8000c64:	d106      	bne.n	8000c74 <menu+0x6c>
 8000c66:	4b7f      	ldr	r3, [pc, #508]	@ (8000e64 <menu+0x25c>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d102      	bne.n	8000c74 <menu+0x6c>
			menuSayac = 16;
 8000c6e:	4b7b      	ldr	r3, [pc, #492]	@ (8000e5c <menu+0x254>)
 8000c70:	2210      	movs	r2, #16
 8000c72:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8000c74:	4b79      	ldr	r3, [pc, #484]	@ (8000e5c <menu+0x254>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b0d      	cmp	r3, #13
 8000c7a:	d106      	bne.n	8000c8a <menu+0x82>
 8000c7c:	4b79      	ldr	r3, [pc, #484]	@ (8000e64 <menu+0x25c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d102      	bne.n	8000c8a <menu+0x82>
			menuSayac = 16;
 8000c84:	4b75      	ldr	r3, [pc, #468]	@ (8000e5c <menu+0x254>)
 8000c86:	2210      	movs	r2, #16
 8000c88:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000c8a:	4b74      	ldr	r3, [pc, #464]	@ (8000e5c <menu+0x254>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b09      	cmp	r3, #9
 8000c90:	d106      	bne.n	8000ca0 <menu+0x98>
 8000c92:	4b74      	ldr	r3, [pc, #464]	@ (8000e64 <menu+0x25c>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d102      	bne.n	8000ca0 <menu+0x98>
			menuSayac = 13;
 8000c9a:	4b70      	ldr	r3, [pc, #448]	@ (8000e5c <menu+0x254>)
 8000c9c:	220d      	movs	r2, #13
 8000c9e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000ca0:	4b6e      	ldr	r3, [pc, #440]	@ (8000e5c <menu+0x254>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b0a      	cmp	r3, #10
 8000ca6:	d10a      	bne.n	8000cbe <menu+0xb6>
 8000ca8:	4b6f      	ldr	r3, [pc, #444]	@ (8000e68 <menu+0x260>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d003      	beq.n	8000cb8 <menu+0xb0>
 8000cb0:	4b6d      	ldr	r3, [pc, #436]	@ (8000e68 <menu+0x260>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d102      	bne.n	8000cbe <menu+0xb6>
			menuSayac = 11;
 8000cb8:	4b68      	ldr	r3, [pc, #416]	@ (8000e5c <menu+0x254>)
 8000cba:	220b      	movs	r2, #11
 8000cbc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8000cbe:	4b67      	ldr	r3, [pc, #412]	@ (8000e5c <menu+0x254>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b0c      	cmp	r3, #12
 8000cc4:	d10e      	bne.n	8000ce4 <menu+0xdc>
 8000cc6:	4b69      	ldr	r3, [pc, #420]	@ (8000e6c <menu+0x264>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d003      	beq.n	8000cd6 <menu+0xce>
 8000cce:	4b67      	ldr	r3, [pc, #412]	@ (8000e6c <menu+0x264>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d106      	bne.n	8000ce4 <menu+0xdc>
 8000cd6:	4b63      	ldr	r3, [pc, #396]	@ (8000e64 <menu+0x25c>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d102      	bne.n	8000ce4 <menu+0xdc>
			menuSayac = 16;
 8000cde:	4b5f      	ldr	r3, [pc, #380]	@ (8000e5c <menu+0x254>)
 8000ce0:	2210      	movs	r2, #16
 8000ce2:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8000ce4:	4b5d      	ldr	r3, [pc, #372]	@ (8000e5c <menu+0x254>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b0c      	cmp	r3, #12
 8000cea:	d10e      	bne.n	8000d0a <menu+0x102>
 8000cec:	4b5f      	ldr	r3, [pc, #380]	@ (8000e6c <menu+0x264>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d003      	beq.n	8000cfc <menu+0xf4>
 8000cf4:	4b5d      	ldr	r3, [pc, #372]	@ (8000e6c <menu+0x264>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d106      	bne.n	8000d0a <menu+0x102>
 8000cfc:	4b59      	ldr	r3, [pc, #356]	@ (8000e64 <menu+0x25c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	d102      	bne.n	8000d0a <menu+0x102>
			menuSayac = 13;
 8000d04:	4b55      	ldr	r3, [pc, #340]	@ (8000e5c <menu+0x254>)
 8000d06:	220d      	movs	r2, #13
 8000d08:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000d0a:	4b54      	ldr	r3, [pc, #336]	@ (8000e5c <menu+0x254>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b0f      	cmp	r3, #15
 8000d10:	d106      	bne.n	8000d20 <menu+0x118>
 8000d12:	4b57      	ldr	r3, [pc, #348]	@ (8000e70 <menu+0x268>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d102      	bne.n	8000d20 <menu+0x118>
			menuSayac = 16;
 8000d1a:	4b50      	ldr	r3, [pc, #320]	@ (8000e5c <menu+0x254>)
 8000d1c:	2210      	movs	r2, #16
 8000d1e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8000d20:	4b4e      	ldr	r3, [pc, #312]	@ (8000e5c <menu+0x254>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b18      	cmp	r3, #24
 8000d26:	d106      	bne.n	8000d36 <menu+0x12e>
 8000d28:	4b4d      	ldr	r3, [pc, #308]	@ (8000e60 <menu+0x258>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <menu+0x12e>
			menuSayac = 26;
 8000d30:	4b4a      	ldr	r3, [pc, #296]	@ (8000e5c <menu+0x254>)
 8000d32:	221a      	movs	r2, #26
 8000d34:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8000d36:	f002 fb6b 	bl	8003410 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000d3a:	2108      	movs	r1, #8
 8000d3c:	484d      	ldr	r0, [pc, #308]	@ (8000e74 <menu+0x26c>)
 8000d3e:	f008 ff41 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d175      	bne.n	8000e34 <menu+0x22c>
 8000d48:	4b43      	ldr	r3, [pc, #268]	@ (8000e58 <menu+0x250>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	f083 0301 	eor.w	r3, r3, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d06e      	beq.n	8000e34 <menu+0x22c>
		if (menuSayac <= 1) {
 8000d56:	4b41      	ldr	r3, [pc, #260]	@ (8000e5c <menu+0x254>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d802      	bhi.n	8000d64 <menu+0x15c>
			menuSayac = 32;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8000d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8000e5c <menu+0x254>)
 8000d60:	2220      	movs	r2, #32
 8000d62:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8000d64:	4b3d      	ldr	r3, [pc, #244]	@ (8000e5c <menu+0x254>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8000e5c <menu+0x254>)
 8000d6e:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8000d70:	4b3a      	ldr	r3, [pc, #232]	@ (8000e5c <menu+0x254>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b14      	cmp	r3, #20
 8000d76:	d106      	bne.n	8000d86 <menu+0x17e>
 8000d78:	4b39      	ldr	r3, [pc, #228]	@ (8000e60 <menu+0x258>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <menu+0x17e>
			menuSayac = 17;
 8000d80:	4b36      	ldr	r3, [pc, #216]	@ (8000e5c <menu+0x254>)
 8000d82:	2211      	movs	r2, #17
 8000d84:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8000d86:	4b35      	ldr	r3, [pc, #212]	@ (8000e5c <menu+0x254>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b0f      	cmp	r3, #15
 8000d8c:	d106      	bne.n	8000d9c <menu+0x194>
 8000d8e:	4b35      	ldr	r3, [pc, #212]	@ (8000e64 <menu+0x25c>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d102      	bne.n	8000d9c <menu+0x194>
			menuSayac = 7;
 8000d96:	4b31      	ldr	r3, [pc, #196]	@ (8000e5c <menu+0x254>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8000d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e5c <menu+0x254>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d106      	bne.n	8000db2 <menu+0x1aa>
 8000da4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e64 <menu+0x25c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d102      	bne.n	8000db2 <menu+0x1aa>
			menuSayac = 12;
 8000dac:	4b2b      	ldr	r3, [pc, #172]	@ (8000e5c <menu+0x254>)
 8000dae:	220c      	movs	r2, #12
 8000db0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8000db2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e5c <menu+0x254>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b0c      	cmp	r3, #12
 8000db8:	d106      	bne.n	8000dc8 <menu+0x1c0>
 8000dba:	4b2a      	ldr	r3, [pc, #168]	@ (8000e64 <menu+0x25c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d102      	bne.n	8000dc8 <menu+0x1c0>
			menuSayac = 8;
 8000dc2:	4b26      	ldr	r3, [pc, #152]	@ (8000e5c <menu+0x254>)
 8000dc4:	2208      	movs	r2, #8
 8000dc6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000dc8:	4b24      	ldr	r3, [pc, #144]	@ (8000e5c <menu+0x254>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b0a      	cmp	r3, #10
 8000dce:	d10a      	bne.n	8000de6 <menu+0x1de>
 8000dd0:	4b25      	ldr	r3, [pc, #148]	@ (8000e68 <menu+0x260>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d003      	beq.n	8000de0 <menu+0x1d8>
 8000dd8:	4b23      	ldr	r3, [pc, #140]	@ (8000e68 <menu+0x260>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d102      	bne.n	8000de6 <menu+0x1de>
			menuSayac = 9;
 8000de0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e5c <menu+0x254>)
 8000de2:	2209      	movs	r2, #9
 8000de4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8000de6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <menu+0x254>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b0c      	cmp	r3, #12
 8000dec:	d10a      	bne.n	8000e04 <menu+0x1fc>
 8000dee:	4b1f      	ldr	r3, [pc, #124]	@ (8000e6c <menu+0x264>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d003      	beq.n	8000dfe <menu+0x1f6>
 8000df6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e6c <menu+0x264>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d102      	bne.n	8000e04 <menu+0x1fc>
			menuSayac = 11;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <menu+0x254>)
 8000e00:	220b      	movs	r2, #11
 8000e02:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000e04:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <menu+0x254>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d106      	bne.n	8000e1a <menu+0x212>
 8000e0c:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <menu+0x268>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d102      	bne.n	8000e1a <menu+0x212>
			menuSayac = 14;
 8000e14:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <menu+0x254>)
 8000e16:	220e      	movs	r2, #14
 8000e18:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8000e1a:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <menu+0x254>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b19      	cmp	r3, #25
 8000e20:	d106      	bne.n	8000e30 <menu+0x228>
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <menu+0x258>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d102      	bne.n	8000e30 <menu+0x228>
			menuSayac = 23;
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <menu+0x254>)
 8000e2c:	2217      	movs	r2, #23
 8000e2e:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8000e30:	f002 faee 	bl	8003410 <bekle>
	}

	if (menuSayac == 0) {
 8000e34:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <menu+0x254>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d121      	bne.n	8000e80 <menu+0x278>
		lcd_print(1, 1, menuyeGirildiText);
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e78 <menu+0x270>)
 8000e3e:	2101      	movs	r1, #1
 8000e40:	2001      	movs	r0, #1
 8000e42:	f007 fd64 	bl	800890e <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8000e46:	4a0d      	ldr	r2, [pc, #52]	@ (8000e7c <menu+0x274>)
 8000e48:	2101      	movs	r1, #1
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	f007 fd5f 	bl	800890e <lcd_print>
 8000e50:	e016      	b.n	8000e80 <menu+0x278>
 8000e52:	bf00      	nop
 8000e54:	40010800 	.word	0x40010800
 8000e58:	20000dcf 	.word	0x20000dcf
 8000e5c:	20000da0 	.word	0x20000da0
 8000e60:	20000daf 	.word	0x20000daf
 8000e64:	20000da8 	.word	0x20000da8
 8000e68:	20000da9 	.word	0x20000da9
 8000e6c:	20000daa 	.word	0x20000daa
 8000e70:	20000dab 	.word	0x20000dab
 8000e74:	40011000 	.word	0x40011000
 8000e78:	20000e08 	.word	0x20000e08
 8000e7c:	20000e1c 	.word	0x20000e1c
	}

	if (menuSayac == 1) {
 8000e80:	4bb0      	ldr	r3, [pc, #704]	@ (8001144 <menu+0x53c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	f040 81ef 	bne.w	8001268 <menu+0x660>
		lcd_print(1, 1, hataKayitListText);
 8000e8a:	4aaf      	ldr	r2, [pc, #700]	@ (8001148 <menu+0x540>)
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f007 fd3d 	bl	800890e <lcd_print>

		if(hataGostermeSirasi == 0) {
 8000e94:	4bad      	ldr	r3, [pc, #692]	@ (800114c <menu+0x544>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d115      	bne.n	8000ec8 <menu+0x2c0>
			lcd_print(2, 1, birHataKoduText);
 8000e9c:	4aac      	ldr	r2, [pc, #688]	@ (8001150 <menu+0x548>)
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f007 fd34 	bl	800890e <lcd_print>
			lcd_print(2, 15, "   ");
 8000ea6:	4aab      	ldr	r2, [pc, #684]	@ (8001154 <menu+0x54c>)
 8000ea8:	210f      	movs	r1, #15
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f007 fd2f 	bl	800890e <lcd_print>
			itoa(hataKayit1, snum, 10);
 8000eb0:	4ba9      	ldr	r3, [pc, #676]	@ (8001158 <menu+0x550>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	220a      	movs	r2, #10
 8000eb6:	49a9      	ldr	r1, [pc, #676]	@ (800115c <menu+0x554>)
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f00b fa25 	bl	800c308 <itoa>
			lcd_print(2, 14, snum);
 8000ebe:	4aa7      	ldr	r2, [pc, #668]	@ (800115c <menu+0x554>)
 8000ec0:	210e      	movs	r1, #14
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	f007 fd23 	bl	800890e <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8000ec8:	4ba0      	ldr	r3, [pc, #640]	@ (800114c <menu+0x544>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d115      	bne.n	8000efc <menu+0x2f4>
			lcd_print(2, 1, ikiHataKoduText);
 8000ed0:	4aa3      	ldr	r2, [pc, #652]	@ (8001160 <menu+0x558>)
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	2002      	movs	r0, #2
 8000ed6:	f007 fd1a 	bl	800890e <lcd_print>
			lcd_print(2, 15, "  ");
 8000eda:	4aa2      	ldr	r2, [pc, #648]	@ (8001164 <menu+0x55c>)
 8000edc:	210f      	movs	r1, #15
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f007 fd15 	bl	800890e <lcd_print>
			itoa(hataKayit2, snum, 10);
 8000ee4:	4ba0      	ldr	r3, [pc, #640]	@ (8001168 <menu+0x560>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	220a      	movs	r2, #10
 8000eea:	499c      	ldr	r1, [pc, #624]	@ (800115c <menu+0x554>)
 8000eec:	4618      	mov	r0, r3
 8000eee:	f00b fa0b 	bl	800c308 <itoa>
			lcd_print(2, 14, snum);
 8000ef2:	4a9a      	ldr	r2, [pc, #616]	@ (800115c <menu+0x554>)
 8000ef4:	210e      	movs	r1, #14
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	f007 fd09 	bl	800890e <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8000efc:	4b93      	ldr	r3, [pc, #588]	@ (800114c <menu+0x544>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d115      	bne.n	8000f30 <menu+0x328>
			lcd_print(2, 1, ucHataKoduText);
 8000f04:	4a99      	ldr	r2, [pc, #612]	@ (800116c <menu+0x564>)
 8000f06:	2101      	movs	r1, #1
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f007 fd00 	bl	800890e <lcd_print>
			lcd_print(2, 15, "  ");
 8000f0e:	4a95      	ldr	r2, [pc, #596]	@ (8001164 <menu+0x55c>)
 8000f10:	210f      	movs	r1, #15
 8000f12:	2002      	movs	r0, #2
 8000f14:	f007 fcfb 	bl	800890e <lcd_print>
			itoa(hataKayit3, snum, 10);
 8000f18:	4b95      	ldr	r3, [pc, #596]	@ (8001170 <menu+0x568>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	220a      	movs	r2, #10
 8000f1e:	498f      	ldr	r1, [pc, #572]	@ (800115c <menu+0x554>)
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00b f9f1 	bl	800c308 <itoa>
			lcd_print(2, 14, snum);
 8000f26:	4a8d      	ldr	r2, [pc, #564]	@ (800115c <menu+0x554>)
 8000f28:	210e      	movs	r1, #14
 8000f2a:	2002      	movs	r0, #2
 8000f2c:	f007 fcef 	bl	800890e <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8000f30:	4b86      	ldr	r3, [pc, #536]	@ (800114c <menu+0x544>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d115      	bne.n	8000f64 <menu+0x35c>
			lcd_print(2, 1, dortHataKoduText);
 8000f38:	4a8e      	ldr	r2, [pc, #568]	@ (8001174 <menu+0x56c>)
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	2002      	movs	r0, #2
 8000f3e:	f007 fce6 	bl	800890e <lcd_print>
			lcd_print(2, 15, "  ");
 8000f42:	4a88      	ldr	r2, [pc, #544]	@ (8001164 <menu+0x55c>)
 8000f44:	210f      	movs	r1, #15
 8000f46:	2002      	movs	r0, #2
 8000f48:	f007 fce1 	bl	800890e <lcd_print>
			itoa(hataKayit4, snum, 10);
 8000f4c:	4b8a      	ldr	r3, [pc, #552]	@ (8001178 <menu+0x570>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	220a      	movs	r2, #10
 8000f52:	4982      	ldr	r1, [pc, #520]	@ (800115c <menu+0x554>)
 8000f54:	4618      	mov	r0, r3
 8000f56:	f00b f9d7 	bl	800c308 <itoa>
			lcd_print(2, 14, snum);
 8000f5a:	4a80      	ldr	r2, [pc, #512]	@ (800115c <menu+0x554>)
 8000f5c:	210e      	movs	r1, #14
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f007 fcd5 	bl	800890e <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8000f64:	4b79      	ldr	r3, [pc, #484]	@ (800114c <menu+0x544>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d115      	bne.n	8000f98 <menu+0x390>
			lcd_print(2, 1, besHataKoduText);
 8000f6c:	4a83      	ldr	r2, [pc, #524]	@ (800117c <menu+0x574>)
 8000f6e:	2101      	movs	r1, #1
 8000f70:	2002      	movs	r0, #2
 8000f72:	f007 fccc 	bl	800890e <lcd_print>
			lcd_print(2, 15, "  ");
 8000f76:	4a7b      	ldr	r2, [pc, #492]	@ (8001164 <menu+0x55c>)
 8000f78:	210f      	movs	r1, #15
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	f007 fcc7 	bl	800890e <lcd_print>
			itoa(hataKayit5, snum, 10);
 8000f80:	4b7f      	ldr	r3, [pc, #508]	@ (8001180 <menu+0x578>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	220a      	movs	r2, #10
 8000f86:	4975      	ldr	r1, [pc, #468]	@ (800115c <menu+0x554>)
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f00b f9bd 	bl	800c308 <itoa>
			lcd_print(2, 14, snum);
 8000f8e:	4a73      	ldr	r2, [pc, #460]	@ (800115c <menu+0x554>)
 8000f90:	210e      	movs	r1, #14
 8000f92:	2002      	movs	r0, #2
 8000f94:	f007 fcbb 	bl	800890e <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8000f98:	4b6c      	ldr	r3, [pc, #432]	@ (800114c <menu+0x544>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b05      	cmp	r3, #5
 8000f9e:	d115      	bne.n	8000fcc <menu+0x3c4>
			lcd_print(2, 1, altiHataKoduText);
 8000fa0:	4a78      	ldr	r2, [pc, #480]	@ (8001184 <menu+0x57c>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	f007 fcb2 	bl	800890e <lcd_print>
			lcd_print(2, 15, "  ");
 8000faa:	4a6e      	ldr	r2, [pc, #440]	@ (8001164 <menu+0x55c>)
 8000fac:	210f      	movs	r1, #15
 8000fae:	2002      	movs	r0, #2
 8000fb0:	f007 fcad 	bl	800890e <lcd_print>
			itoa(hataKayit6, snum, 10);
 8000fb4:	4b74      	ldr	r3, [pc, #464]	@ (8001188 <menu+0x580>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	220a      	movs	r2, #10
 8000fba:	4968      	ldr	r1, [pc, #416]	@ (800115c <menu+0x554>)
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f00b f9a3 	bl	800c308 <itoa>
			lcd_print(2, 14, snum);
 8000fc2:	4a66      	ldr	r2, [pc, #408]	@ (800115c <menu+0x554>)
 8000fc4:	210e      	movs	r1, #14
 8000fc6:	2002      	movs	r0, #2
 8000fc8:	f007 fca1 	bl	800890e <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8000fcc:	4b5f      	ldr	r3, [pc, #380]	@ (800114c <menu+0x544>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b06      	cmp	r3, #6
 8000fd2:	d115      	bne.n	8001000 <menu+0x3f8>
			lcd_print(2, 1, yediHataKoduText);
 8000fd4:	4a6d      	ldr	r2, [pc, #436]	@ (800118c <menu+0x584>)
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	2002      	movs	r0, #2
 8000fda:	f007 fc98 	bl	800890e <lcd_print>
			lcd_print(2, 15, "  ");
 8000fde:	4a61      	ldr	r2, [pc, #388]	@ (8001164 <menu+0x55c>)
 8000fe0:	210f      	movs	r1, #15
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f007 fc93 	bl	800890e <lcd_print>
			itoa(hataKayit7, snum, 10);
 8000fe8:	4b69      	ldr	r3, [pc, #420]	@ (8001190 <menu+0x588>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	220a      	movs	r2, #10
 8000fee:	495b      	ldr	r1, [pc, #364]	@ (800115c <menu+0x554>)
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00b f989 	bl	800c308 <itoa>
			lcd_print(2, 14, snum);
 8000ff6:	4a59      	ldr	r2, [pc, #356]	@ (800115c <menu+0x554>)
 8000ff8:	210e      	movs	r1, #14
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f007 fc87 	bl	800890e <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001000:	4b52      	ldr	r3, [pc, #328]	@ (800114c <menu+0x544>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b07      	cmp	r3, #7
 8001006:	d115      	bne.n	8001034 <menu+0x42c>
			lcd_print(2, 1, sekizHataKoduText);
 8001008:	4a62      	ldr	r2, [pc, #392]	@ (8001194 <menu+0x58c>)
 800100a:	2101      	movs	r1, #1
 800100c:	2002      	movs	r0, #2
 800100e:	f007 fc7e 	bl	800890e <lcd_print>
			lcd_print(2, 15, "  ");
 8001012:	4a54      	ldr	r2, [pc, #336]	@ (8001164 <menu+0x55c>)
 8001014:	210f      	movs	r1, #15
 8001016:	2002      	movs	r0, #2
 8001018:	f007 fc79 	bl	800890e <lcd_print>
			itoa(hataKayit8, snum, 10);
 800101c:	4b5e      	ldr	r3, [pc, #376]	@ (8001198 <menu+0x590>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	220a      	movs	r2, #10
 8001022:	494e      	ldr	r1, [pc, #312]	@ (800115c <menu+0x554>)
 8001024:	4618      	mov	r0, r3
 8001026:	f00b f96f 	bl	800c308 <itoa>
			lcd_print(2, 14, snum);
 800102a:	4a4c      	ldr	r2, [pc, #304]	@ (800115c <menu+0x554>)
 800102c:	210e      	movs	r1, #14
 800102e:	2002      	movs	r0, #2
 8001030:	f007 fc6d 	bl	800890e <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001034:	4b45      	ldr	r3, [pc, #276]	@ (800114c <menu+0x544>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b08      	cmp	r3, #8
 800103a:	d115      	bne.n	8001068 <menu+0x460>
			lcd_print(2, 1, dokuzHataKoduText);
 800103c:	4a57      	ldr	r2, [pc, #348]	@ (800119c <menu+0x594>)
 800103e:	2101      	movs	r1, #1
 8001040:	2002      	movs	r0, #2
 8001042:	f007 fc64 	bl	800890e <lcd_print>
			lcd_print(2, 15, "  ");
 8001046:	4a47      	ldr	r2, [pc, #284]	@ (8001164 <menu+0x55c>)
 8001048:	210f      	movs	r1, #15
 800104a:	2002      	movs	r0, #2
 800104c:	f007 fc5f 	bl	800890e <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001050:	4b53      	ldr	r3, [pc, #332]	@ (80011a0 <menu+0x598>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	220a      	movs	r2, #10
 8001056:	4941      	ldr	r1, [pc, #260]	@ (800115c <menu+0x554>)
 8001058:	4618      	mov	r0, r3
 800105a:	f00b f955 	bl	800c308 <itoa>
			lcd_print(2, 14, snum);
 800105e:	4a3f      	ldr	r2, [pc, #252]	@ (800115c <menu+0x554>)
 8001060:	210e      	movs	r1, #14
 8001062:	2002      	movs	r0, #2
 8001064:	f007 fc53 	bl	800890e <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001068:	4b38      	ldr	r3, [pc, #224]	@ (800114c <menu+0x544>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b09      	cmp	r3, #9
 800106e:	d115      	bne.n	800109c <menu+0x494>
			lcd_print(2, 1, onHataKoduText);
 8001070:	4a4c      	ldr	r2, [pc, #304]	@ (80011a4 <menu+0x59c>)
 8001072:	2101      	movs	r1, #1
 8001074:	2002      	movs	r0, #2
 8001076:	f007 fc4a 	bl	800890e <lcd_print>
			lcd_print(2, 16, " ");
 800107a:	4a4b      	ldr	r2, [pc, #300]	@ (80011a8 <menu+0x5a0>)
 800107c:	2110      	movs	r1, #16
 800107e:	2002      	movs	r0, #2
 8001080:	f007 fc45 	bl	800890e <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001084:	4b49      	ldr	r3, [pc, #292]	@ (80011ac <menu+0x5a4>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	220a      	movs	r2, #10
 800108a:	4934      	ldr	r1, [pc, #208]	@ (800115c <menu+0x554>)
 800108c:	4618      	mov	r0, r3
 800108e:	f00b f93b 	bl	800c308 <itoa>
			lcd_print(2, 15, snum);
 8001092:	4a32      	ldr	r2, [pc, #200]	@ (800115c <menu+0x554>)
 8001094:	210f      	movs	r1, #15
 8001096:	2002      	movs	r0, #2
 8001098:	f007 fc39 	bl	800890e <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 800109c:	4b2b      	ldr	r3, [pc, #172]	@ (800114c <menu+0x544>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b0a      	cmp	r3, #10
 80010a2:	d104      	bne.n	80010ae <menu+0x4a6>
			lcd_print(2, 1, silmekIcinText);
 80010a4:	4a42      	ldr	r2, [pc, #264]	@ (80011b0 <menu+0x5a8>)
 80010a6:	2101      	movs	r1, #1
 80010a8:	2002      	movs	r0, #2
 80010aa:	f007 fc30 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80010ae:	2102      	movs	r1, #2
 80010b0:	4840      	ldr	r0, [pc, #256]	@ (80011b4 <menu+0x5ac>)
 80010b2:	f008 fd87 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d119      	bne.n	80010f0 <menu+0x4e8>
 80010bc:	4b3e      	ldr	r3, [pc, #248]	@ (80011b8 <menu+0x5b0>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	f083 0301 	eor.w	r3, r3, #1
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d012      	beq.n	80010f0 <menu+0x4e8>
 80010ca:	4b3c      	ldr	r3, [pc, #240]	@ (80011bc <menu+0x5b4>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10e      	bne.n	80010f0 <menu+0x4e8>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 80010d2:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <menu+0x544>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	3301      	adds	r3, #1
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <menu+0x544>)
 80010dc:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 80010de:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <menu+0x544>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b0a      	cmp	r3, #10
 80010e4:	d902      	bls.n	80010ec <menu+0x4e4>
				hataGostermeSirasi = 0;
 80010e6:	4b19      	ldr	r3, [pc, #100]	@ (800114c <menu+0x544>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80010ec:	f002 f990 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80010f0:	2104      	movs	r1, #4
 80010f2:	4830      	ldr	r0, [pc, #192]	@ (80011b4 <menu+0x5ac>)
 80010f4:	f008 fd66 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d119      	bne.n	8001132 <menu+0x52a>
 80010fe:	4b2e      	ldr	r3, [pc, #184]	@ (80011b8 <menu+0x5b0>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	f083 0301 	eor.w	r3, r3, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d012      	beq.n	8001132 <menu+0x52a>
 800110c:	4b2b      	ldr	r3, [pc, #172]	@ (80011bc <menu+0x5b4>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10e      	bne.n	8001132 <menu+0x52a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001114:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <menu+0x544>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	3b01      	subs	r3, #1
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <menu+0x544>)
 800111e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001120:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <menu+0x544>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b0b      	cmp	r3, #11
 8001126:	d902      	bls.n	800112e <menu+0x526>
	    		hataGostermeSirasi = 10;
 8001128:	4b08      	ldr	r3, [pc, #32]	@ (800114c <menu+0x544>)
 800112a:	220a      	movs	r2, #10
 800112c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800112e:	f002 f96f 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001132:	2108      	movs	r1, #8
 8001134:	481f      	ldr	r0, [pc, #124]	@ (80011b4 <menu+0x5ac>)
 8001136:	f008 fd45 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b01      	cmp	r3, #1
 800113e:	f040 8093 	bne.w	8001268 <menu+0x660>
 8001142:	e03d      	b.n	80011c0 <menu+0x5b8>
 8001144:	20000da0 	.word	0x20000da0
 8001148:	20000e30 	.word	0x20000e30
 800114c:	20000da2 	.word	0x20000da2
 8001150:	20000e44 	.word	0x20000e44
 8001154:	0800c44c 	.word	0x0800c44c
 8001158:	20000dc2 	.word	0x20000dc2
 800115c:	20000d70 	.word	0x20000d70
 8001160:	20000e58 	.word	0x20000e58
 8001164:	0800c450 	.word	0x0800c450
 8001168:	20000dc3 	.word	0x20000dc3
 800116c:	20000e6c 	.word	0x20000e6c
 8001170:	20000dc4 	.word	0x20000dc4
 8001174:	20000e80 	.word	0x20000e80
 8001178:	20000dc5 	.word	0x20000dc5
 800117c:	20000e94 	.word	0x20000e94
 8001180:	20000dc6 	.word	0x20000dc6
 8001184:	20000ea8 	.word	0x20000ea8
 8001188:	20000dc7 	.word	0x20000dc7
 800118c:	20000ebc 	.word	0x20000ebc
 8001190:	20000dc8 	.word	0x20000dc8
 8001194:	20000ed0 	.word	0x20000ed0
 8001198:	20000dc9 	.word	0x20000dc9
 800119c:	20000ee4 	.word	0x20000ee4
 80011a0:	20000dca 	.word	0x20000dca
 80011a4:	20000ef8 	.word	0x20000ef8
 80011a8:	0800c454 	.word	0x0800c454
 80011ac:	20000dcb 	.word	0x20000dcb
 80011b0:	20000f0c 	.word	0x20000f0c
 80011b4:	40010800 	.word	0x40010800
 80011b8:	20000dcf 	.word	0x20000dcf
 80011bc:	20000daf 	.word	0x20000daf
 80011c0:	4b7d      	ldr	r3, [pc, #500]	@ (80013b8 <menu+0x7b0>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	f083 0301 	eor.w	r3, r3, #1
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d04c      	beq.n	8001268 <menu+0x660>
 80011ce:	4b7b      	ldr	r3, [pc, #492]	@ (80013bc <menu+0x7b4>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b0a      	cmp	r3, #10
 80011d4:	d148      	bne.n	8001268 <menu+0x660>
			hataKayit1 = 0; eepromData[37] = 0;
 80011d6:	4b7a      	ldr	r3, [pc, #488]	@ (80013c0 <menu+0x7b8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	4b79      	ldr	r3, [pc, #484]	@ (80013c4 <menu+0x7bc>)
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 80011e4:	4b78      	ldr	r3, [pc, #480]	@ (80013c8 <menu+0x7c0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	4b76      	ldr	r3, [pc, #472]	@ (80013c4 <menu+0x7bc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 80011f2:	4b76      	ldr	r3, [pc, #472]	@ (80013cc <menu+0x7c4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
 80011f8:	4b72      	ldr	r3, [pc, #456]	@ (80013c4 <menu+0x7bc>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001200:	4b73      	ldr	r3, [pc, #460]	@ (80013d0 <menu+0x7c8>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	4b6f      	ldr	r3, [pc, #444]	@ (80013c4 <menu+0x7bc>)
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 800120e:	4b71      	ldr	r3, [pc, #452]	@ (80013d4 <menu+0x7cc>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
 8001214:	4b6b      	ldr	r3, [pc, #428]	@ (80013c4 <menu+0x7bc>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 800121c:	4b6e      	ldr	r3, [pc, #440]	@ (80013d8 <menu+0x7d0>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	4b68      	ldr	r3, [pc, #416]	@ (80013c4 <menu+0x7bc>)
 8001224:	2200      	movs	r2, #0
 8001226:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 800122a:	4b6c      	ldr	r3, [pc, #432]	@ (80013dc <menu+0x7d4>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
 8001230:	4b64      	ldr	r3, [pc, #400]	@ (80013c4 <menu+0x7bc>)
 8001232:	2200      	movs	r2, #0
 8001234:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001238:	4b69      	ldr	r3, [pc, #420]	@ (80013e0 <menu+0x7d8>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
 800123e:	4b61      	ldr	r3, [pc, #388]	@ (80013c4 <menu+0x7bc>)
 8001240:	2200      	movs	r2, #0
 8001242:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001246:	4b67      	ldr	r3, [pc, #412]	@ (80013e4 <menu+0x7dc>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
 800124c:	4b5d      	ldr	r3, [pc, #372]	@ (80013c4 <menu+0x7bc>)
 800124e:	2200      	movs	r2, #0
 8001250:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001254:	4b64      	ldr	r3, [pc, #400]	@ (80013e8 <menu+0x7e0>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
 800125a:	4b5a      	ldr	r3, [pc, #360]	@ (80013c4 <menu+0x7bc>)
 800125c:	2200      	movs	r2, #0
 800125e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001262:	4b62      	ldr	r3, [pc, #392]	@ (80013ec <menu+0x7e4>)
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001268:	4b61      	ldr	r3, [pc, #388]	@ (80013f0 <menu+0x7e8>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b02      	cmp	r3, #2
 800126e:	f040 808e 	bne.w	800138e <menu+0x786>
		lcd_print(1, 1, calismaSekliText);
 8001272:	4a60      	ldr	r2, [pc, #384]	@ (80013f4 <menu+0x7ec>)
 8001274:	2101      	movs	r1, #1
 8001276:	2001      	movs	r0, #1
 8001278:	f007 fb49 	bl	800890e <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 800127c:	4b5e      	ldr	r3, [pc, #376]	@ (80013f8 <menu+0x7f0>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d003      	beq.n	800128c <menu+0x684>
 8001284:	4b5c      	ldr	r3, [pc, #368]	@ (80013f8 <menu+0x7f0>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d104      	bne.n	8001296 <menu+0x68e>
			lcd_print(2, 1, devirmeYuruyusText);
 800128c:	4a5b      	ldr	r2, [pc, #364]	@ (80013fc <menu+0x7f4>)
 800128e:	2101      	movs	r1, #1
 8001290:	2002      	movs	r0, #2
 8001292:	f007 fb3c 	bl	800890e <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001296:	4b5a      	ldr	r3, [pc, #360]	@ (8001400 <menu+0x7f8>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d108      	bne.n	80012b0 <menu+0x6a8>
 800129e:	4b56      	ldr	r3, [pc, #344]	@ (80013f8 <menu+0x7f0>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d104      	bne.n	80012b0 <menu+0x6a8>
			lcd_print(2, 1, bastikcaCalisanText);
 80012a6:	4a57      	ldr	r2, [pc, #348]	@ (8001404 <menu+0x7fc>)
 80012a8:	2101      	movs	r1, #1
 80012aa:	2002      	movs	r0, #2
 80012ac:	f007 fb2f 	bl	800890e <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 80012b0:	4b53      	ldr	r3, [pc, #332]	@ (8001400 <menu+0x7f8>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d108      	bne.n	80012ca <menu+0x6c2>
 80012b8:	4b4f      	ldr	r3, [pc, #316]	@ (80013f8 <menu+0x7f0>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d104      	bne.n	80012ca <menu+0x6c2>
			lcd_print(2, 1, basGonderText);
 80012c0:	4a51      	ldr	r2, [pc, #324]	@ (8001408 <menu+0x800>)
 80012c2:	2101      	movs	r1, #1
 80012c4:	2002      	movs	r0, #2
 80012c6:	f007 fb22 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80012ca:	2102      	movs	r1, #2
 80012cc:	484f      	ldr	r0, [pc, #316]	@ (800140c <menu+0x804>)
 80012ce:	f008 fc79 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d119      	bne.n	800130c <menu+0x704>
 80012d8:	4b37      	ldr	r3, [pc, #220]	@ (80013b8 <menu+0x7b0>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	f083 0301 	eor.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d012      	beq.n	800130c <menu+0x704>
 80012e6:	4b44      	ldr	r3, [pc, #272]	@ (80013f8 <menu+0x7f0>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10e      	bne.n	800130c <menu+0x704>
			calismaSekli = calismaSekli + 1;
 80012ee:	4b44      	ldr	r3, [pc, #272]	@ (8001400 <menu+0x7f8>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	3301      	adds	r3, #1
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b42      	ldr	r3, [pc, #264]	@ (8001400 <menu+0x7f8>)
 80012f8:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 80012fa:	4b41      	ldr	r3, [pc, #260]	@ (8001400 <menu+0x7f8>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d902      	bls.n	8001308 <menu+0x700>
				calismaSekli = 0;
 8001302:	4b3f      	ldr	r3, [pc, #252]	@ (8001400 <menu+0x7f8>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001308:	f002 f882 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800130c:	2104      	movs	r1, #4
 800130e:	483f      	ldr	r0, [pc, #252]	@ (800140c <menu+0x804>)
 8001310:	f008 fc58 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001314:	4603      	mov	r3, r0
 8001316:	2b01      	cmp	r3, #1
 8001318:	d119      	bne.n	800134e <menu+0x746>
 800131a:	4b27      	ldr	r3, [pc, #156]	@ (80013b8 <menu+0x7b0>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	f083 0301 	eor.w	r3, r3, #1
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d012      	beq.n	800134e <menu+0x746>
 8001328:	4b33      	ldr	r3, [pc, #204]	@ (80013f8 <menu+0x7f0>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10e      	bne.n	800134e <menu+0x746>
			calismaSekli = calismaSekli - 1;
 8001330:	4b33      	ldr	r3, [pc, #204]	@ (8001400 <menu+0x7f8>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	3b01      	subs	r3, #1
 8001336:	b2da      	uxtb	r2, r3
 8001338:	4b31      	ldr	r3, [pc, #196]	@ (8001400 <menu+0x7f8>)
 800133a:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 800133c:	4b30      	ldr	r3, [pc, #192]	@ (8001400 <menu+0x7f8>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <menu+0x742>
	    		calismaSekli = 1;
 8001344:	4b2e      	ldr	r3, [pc, #184]	@ (8001400 <menu+0x7f8>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800134a:	f002 f861 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800134e:	2108      	movs	r1, #8
 8001350:	482e      	ldr	r0, [pc, #184]	@ (800140c <menu+0x804>)
 8001352:	f008 fc37 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001356:	4603      	mov	r3, r0
 8001358:	2b01      	cmp	r3, #1
 800135a:	d118      	bne.n	800138e <menu+0x786>
 800135c:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <menu+0x7b0>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	f083 0301 	eor.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d011      	beq.n	800138e <menu+0x786>
			eepromData[1] = calismaSekli;
 800136a:	4b25      	ldr	r3, [pc, #148]	@ (8001400 <menu+0x7f8>)
 800136c:	781a      	ldrb	r2, [r3, #0]
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <menu+0x7bc>)
 8001370:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001372:	4b23      	ldr	r3, [pc, #140]	@ (8001400 <menu+0x7f8>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d106      	bne.n	8001388 <menu+0x780>
				altLimit = 1;
 800137a:	4b25      	ldr	r3, [pc, #148]	@ (8001410 <menu+0x808>)
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001380:	4b23      	ldr	r3, [pc, #140]	@ (8001410 <menu+0x808>)
 8001382:	781a      	ldrb	r2, [r3, #0]
 8001384:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <menu+0x7bc>)
 8001386:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001388:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <menu+0x7e4>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 800138e:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <menu+0x7e8>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b03      	cmp	r3, #3
 8001394:	f040 809c 	bne.w	80014d0 <menu+0x8c8>
		lcd_print(1, 1, emniyetCercevesiText);
 8001398:	4a1e      	ldr	r2, [pc, #120]	@ (8001414 <menu+0x80c>)
 800139a:	2101      	movs	r1, #1
 800139c:	2001      	movs	r0, #1
 800139e:	f007 fab6 	bl	800890e <lcd_print>

		if(emniyetCercevesi == 0) {
 80013a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <menu+0x810>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d13a      	bne.n	8001420 <menu+0x818>
			lcd_print(2, 1, pasifText);
 80013aa:	4a1c      	ldr	r2, [pc, #112]	@ (800141c <menu+0x814>)
 80013ac:	2101      	movs	r1, #1
 80013ae:	2002      	movs	r0, #2
 80013b0:	f007 faad 	bl	800890e <lcd_print>
 80013b4:	e03d      	b.n	8001432 <menu+0x82a>
 80013b6:	bf00      	nop
 80013b8:	20000dcf 	.word	0x20000dcf
 80013bc:	20000da2 	.word	0x20000da2
 80013c0:	20000dc2 	.word	0x20000dc2
 80013c4:	20000d00 	.word	0x20000d00
 80013c8:	20000dc3 	.word	0x20000dc3
 80013cc:	20000dc4 	.word	0x20000dc4
 80013d0:	20000dc5 	.word	0x20000dc5
 80013d4:	20000dc6 	.word	0x20000dc6
 80013d8:	20000dc7 	.word	0x20000dc7
 80013dc:	20000dc8 	.word	0x20000dc8
 80013e0:	20000dc9 	.word	0x20000dc9
 80013e4:	20000dca 	.word	0x20000dca
 80013e8:	20000dcb 	.word	0x20000dcb
 80013ec:	20000dcc 	.word	0x20000dcc
 80013f0:	20000da0 	.word	0x20000da0
 80013f4:	20000f20 	.word	0x20000f20
 80013f8:	20000daf 	.word	0x20000daf
 80013fc:	20000f34 	.word	0x20000f34
 8001400:	20000da1 	.word	0x20000da1
 8001404:	20000f48 	.word	0x20000f48
 8001408:	20000f5c 	.word	0x20000f5c
 800140c:	40010800 	.word	0x40010800
 8001410:	20000da6 	.word	0x20000da6
 8001414:	20000f70 	.word	0x20000f70
 8001418:	20000da4 	.word	0x20000da4
 800141c:	20000f84 	.word	0x20000f84
		} else if(emniyetCercevesi == 1) {
 8001420:	4b6b      	ldr	r3, [pc, #428]	@ (80015d0 <menu+0x9c8>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d104      	bne.n	8001432 <menu+0x82a>
			lcd_print(2, 1, ondSafetyTextGN);
 8001428:	4a6a      	ldr	r2, [pc, #424]	@ (80015d4 <menu+0x9cc>)
 800142a:	2101      	movs	r1, #1
 800142c:	2002      	movs	r0, #2
 800142e:	f007 fa6e 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001432:	2102      	movs	r1, #2
 8001434:	4868      	ldr	r0, [pc, #416]	@ (80015d8 <menu+0x9d0>)
 8001436:	f008 fbc5 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b01      	cmp	r3, #1
 800143e:	d115      	bne.n	800146c <menu+0x864>
 8001440:	4b66      	ldr	r3, [pc, #408]	@ (80015dc <menu+0x9d4>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	f083 0301 	eor.w	r3, r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00e      	beq.n	800146c <menu+0x864>
			emniyetCercevesi = emniyetCercevesi + 1;
 800144e:	4b60      	ldr	r3, [pc, #384]	@ (80015d0 <menu+0x9c8>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b5e      	ldr	r3, [pc, #376]	@ (80015d0 <menu+0x9c8>)
 8001458:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 800145a:	4b5d      	ldr	r3, [pc, #372]	@ (80015d0 <menu+0x9c8>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d902      	bls.n	8001468 <menu+0x860>
				emniyetCercevesi = 0;
 8001462:	4b5b      	ldr	r3, [pc, #364]	@ (80015d0 <menu+0x9c8>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001468:	f001 ffd2 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800146c:	2104      	movs	r1, #4
 800146e:	485a      	ldr	r0, [pc, #360]	@ (80015d8 <menu+0x9d0>)
 8001470:	f008 fba8 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001474:	4603      	mov	r3, r0
 8001476:	2b01      	cmp	r3, #1
 8001478:	d115      	bne.n	80014a6 <menu+0x89e>
 800147a:	4b58      	ldr	r3, [pc, #352]	@ (80015dc <menu+0x9d4>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	f083 0301 	eor.w	r3, r3, #1
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00e      	beq.n	80014a6 <menu+0x89e>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001488:	4b51      	ldr	r3, [pc, #324]	@ (80015d0 <menu+0x9c8>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	3b01      	subs	r3, #1
 800148e:	b2da      	uxtb	r2, r3
 8001490:	4b4f      	ldr	r3, [pc, #316]	@ (80015d0 <menu+0x9c8>)
 8001492:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001494:	4b4e      	ldr	r3, [pc, #312]	@ (80015d0 <menu+0x9c8>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <menu+0x89a>
		   		emniyetCercevesi = 1;
 800149c:	4b4c      	ldr	r3, [pc, #304]	@ (80015d0 <menu+0x9c8>)
 800149e:	2201      	movs	r2, #1
 80014a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80014a2:	f001 ffb5 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80014a6:	2108      	movs	r1, #8
 80014a8:	484b      	ldr	r0, [pc, #300]	@ (80015d8 <menu+0x9d0>)
 80014aa:	f008 fb8b 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d10d      	bne.n	80014d0 <menu+0x8c8>
 80014b4:	4b49      	ldr	r3, [pc, #292]	@ (80015dc <menu+0x9d4>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	f083 0301 	eor.w	r3, r3, #1
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <menu+0x8c8>
			eepromData[2] = emniyetCercevesi;
 80014c2:	4b43      	ldr	r3, [pc, #268]	@ (80015d0 <menu+0x9c8>)
 80014c4:	781a      	ldrb	r2, [r3, #0]
 80014c6:	4b46      	ldr	r3, [pc, #280]	@ (80015e0 <menu+0x9d8>)
 80014c8:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 80014ca:	4b46      	ldr	r3, [pc, #280]	@ (80015e4 <menu+0x9dc>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80014d0:	4b45      	ldr	r3, [pc, #276]	@ (80015e8 <menu+0x9e0>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d166      	bne.n	80015a6 <menu+0x99e>
		lcd_print(1, 1, yavaslamaLimitText);
 80014d8:	4a44      	ldr	r2, [pc, #272]	@ (80015ec <menu+0x9e4>)
 80014da:	2101      	movs	r1, #1
 80014dc:	2001      	movs	r0, #1
 80014de:	f007 fa16 	bl	800890e <lcd_print>

		if(yavaslamaLimit == 0) {
 80014e2:	4b43      	ldr	r3, [pc, #268]	@ (80015f0 <menu+0x9e8>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d105      	bne.n	80014f6 <menu+0x8ee>
			lcd_print(2, 1, pasifText);
 80014ea:	4a42      	ldr	r2, [pc, #264]	@ (80015f4 <menu+0x9ec>)
 80014ec:	2101      	movs	r1, #1
 80014ee:	2002      	movs	r0, #2
 80014f0:	f007 fa0d 	bl	800890e <lcd_print>
 80014f4:	e008      	b.n	8001508 <menu+0x900>
		} else if(yavaslamaLimit == 1) {
 80014f6:	4b3e      	ldr	r3, [pc, #248]	@ (80015f0 <menu+0x9e8>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d104      	bne.n	8001508 <menu+0x900>
			lcd_print(2, 1, aktifText);
 80014fe:	4a3e      	ldr	r2, [pc, #248]	@ (80015f8 <menu+0x9f0>)
 8001500:	2101      	movs	r1, #1
 8001502:	2002      	movs	r0, #2
 8001504:	f007 fa03 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001508:	2102      	movs	r1, #2
 800150a:	4833      	ldr	r0, [pc, #204]	@ (80015d8 <menu+0x9d0>)
 800150c:	f008 fb5a 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001510:	4603      	mov	r3, r0
 8001512:	2b01      	cmp	r3, #1
 8001514:	d115      	bne.n	8001542 <menu+0x93a>
 8001516:	4b31      	ldr	r3, [pc, #196]	@ (80015dc <menu+0x9d4>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	f083 0301 	eor.w	r3, r3, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00e      	beq.n	8001542 <menu+0x93a>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001524:	4b32      	ldr	r3, [pc, #200]	@ (80015f0 <menu+0x9e8>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	b2da      	uxtb	r2, r3
 800152c:	4b30      	ldr	r3, [pc, #192]	@ (80015f0 <menu+0x9e8>)
 800152e:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001530:	4b2f      	ldr	r3, [pc, #188]	@ (80015f0 <menu+0x9e8>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d902      	bls.n	800153e <menu+0x936>
				yavaslamaLimit = 0;
 8001538:	4b2d      	ldr	r3, [pc, #180]	@ (80015f0 <menu+0x9e8>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800153e:	f001 ff67 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001542:	2104      	movs	r1, #4
 8001544:	4824      	ldr	r0, [pc, #144]	@ (80015d8 <menu+0x9d0>)
 8001546:	f008 fb3d 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800154a:	4603      	mov	r3, r0
 800154c:	2b01      	cmp	r3, #1
 800154e:	d115      	bne.n	800157c <menu+0x974>
 8001550:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <menu+0x9d4>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	f083 0301 	eor.w	r3, r3, #1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00e      	beq.n	800157c <menu+0x974>
			yavaslamaLimit = yavaslamaLimit - 1;
 800155e:	4b24      	ldr	r3, [pc, #144]	@ (80015f0 <menu+0x9e8>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	3b01      	subs	r3, #1
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4b22      	ldr	r3, [pc, #136]	@ (80015f0 <menu+0x9e8>)
 8001568:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 800156a:	4b21      	ldr	r3, [pc, #132]	@ (80015f0 <menu+0x9e8>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d002      	beq.n	8001578 <menu+0x970>
		   		yavaslamaLimit = 1;
 8001572:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <menu+0x9e8>)
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001578:	f001 ff4a 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800157c:	2108      	movs	r1, #8
 800157e:	4816      	ldr	r0, [pc, #88]	@ (80015d8 <menu+0x9d0>)
 8001580:	f008 fb20 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001584:	4603      	mov	r3, r0
 8001586:	2b01      	cmp	r3, #1
 8001588:	d10d      	bne.n	80015a6 <menu+0x99e>
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <menu+0x9d4>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	f083 0301 	eor.w	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <menu+0x99e>
			eepromData[4] = yavaslamaLimit;
 8001598:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <menu+0x9e8>)
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <menu+0x9d8>)
 800159e:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80015a0:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <menu+0x9dc>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <menu+0x9e0>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	f040 80aa 	bne.w	8001704 <menu+0xafc>
		lcd_print(1, 1, altLimitText);
 80015b0:	4a12      	ldr	r2, [pc, #72]	@ (80015fc <menu+0x9f4>)
 80015b2:	2101      	movs	r1, #1
 80015b4:	2001      	movs	r0, #1
 80015b6:	f007 f9aa 	bl	800890e <lcd_print>

		if(altLimit == 0) {
 80015ba:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <menu+0x9f8>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d120      	bne.n	8001604 <menu+0x9fc>
			lcd_print(2, 1, pasifText);
 80015c2:	4a0c      	ldr	r2, [pc, #48]	@ (80015f4 <menu+0x9ec>)
 80015c4:	2101      	movs	r1, #1
 80015c6:	2002      	movs	r0, #2
 80015c8:	f007 f9a1 	bl	800890e <lcd_print>
 80015cc:	e023      	b.n	8001616 <menu+0xa0e>
 80015ce:	bf00      	nop
 80015d0:	20000da4 	.word	0x20000da4
 80015d4:	20000080 	.word	0x20000080
 80015d8:	40010800 	.word	0x40010800
 80015dc:	20000dcf 	.word	0x20000dcf
 80015e0:	20000d00 	.word	0x20000d00
 80015e4:	20000dcc 	.word	0x20000dcc
 80015e8:	20000da0 	.word	0x20000da0
 80015ec:	20000fac 	.word	0x20000fac
 80015f0:	20000da5 	.word	0x20000da5
 80015f4:	20000f84 	.word	0x20000f84
 80015f8:	20000f98 	.word	0x20000f98
 80015fc:	20000fc0 	.word	0x20000fc0
 8001600:	20000da6 	.word	0x20000da6
		} else if(altLimit == 1) {
 8001604:	4b89      	ldr	r3, [pc, #548]	@ (800182c <menu+0xc24>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d104      	bne.n	8001616 <menu+0xa0e>
			lcd_print(2, 1, aktifText);
 800160c:	4a88      	ldr	r2, [pc, #544]	@ (8001830 <menu+0xc28>)
 800160e:	2101      	movs	r1, #1
 8001610:	2002      	movs	r0, #2
 8001612:	f007 f97c 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001616:	2102      	movs	r1, #2
 8001618:	4886      	ldr	r0, [pc, #536]	@ (8001834 <menu+0xc2c>)
 800161a:	f008 fad3 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800161e:	4603      	mov	r3, r0
 8001620:	2b01      	cmp	r3, #1
 8001622:	d119      	bne.n	8001658 <menu+0xa50>
 8001624:	4b84      	ldr	r3, [pc, #528]	@ (8001838 <menu+0xc30>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	f083 0301 	eor.w	r3, r3, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d012      	beq.n	8001658 <menu+0xa50>
 8001632:	4b82      	ldr	r3, [pc, #520]	@ (800183c <menu+0xc34>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10e      	bne.n	8001658 <menu+0xa50>
			altLimit = altLimit + 1;
 800163a:	4b7c      	ldr	r3, [pc, #496]	@ (800182c <menu+0xc24>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4b7a      	ldr	r3, [pc, #488]	@ (800182c <menu+0xc24>)
 8001644:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001646:	4b79      	ldr	r3, [pc, #484]	@ (800182c <menu+0xc24>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d902      	bls.n	8001654 <menu+0xa4c>
				altLimit = 0;
 800164e:	4b77      	ldr	r3, [pc, #476]	@ (800182c <menu+0xc24>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001654:	f001 fedc 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001658:	2104      	movs	r1, #4
 800165a:	4876      	ldr	r0, [pc, #472]	@ (8001834 <menu+0xc2c>)
 800165c:	f008 fab2 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001660:	4603      	mov	r3, r0
 8001662:	2b01      	cmp	r3, #1
 8001664:	d119      	bne.n	800169a <menu+0xa92>
 8001666:	4b74      	ldr	r3, [pc, #464]	@ (8001838 <menu+0xc30>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	f083 0301 	eor.w	r3, r3, #1
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d012      	beq.n	800169a <menu+0xa92>
 8001674:	4b71      	ldr	r3, [pc, #452]	@ (800183c <menu+0xc34>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10e      	bne.n	800169a <menu+0xa92>
			altLimit = altLimit - 1;
 800167c:	4b6b      	ldr	r3, [pc, #428]	@ (800182c <menu+0xc24>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	3b01      	subs	r3, #1
 8001682:	b2da      	uxtb	r2, r3
 8001684:	4b69      	ldr	r3, [pc, #420]	@ (800182c <menu+0xc24>)
 8001686:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001688:	4b68      	ldr	r3, [pc, #416]	@ (800182c <menu+0xc24>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <menu+0xa8e>
		   		altLimit = 1;
 8001690:	4b66      	ldr	r3, [pc, #408]	@ (800182c <menu+0xc24>)
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001696:	f001 febb 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800169a:	2108      	movs	r1, #8
 800169c:	4865      	ldr	r0, [pc, #404]	@ (8001834 <menu+0xc2c>)
 800169e:	f008 fa91 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d12d      	bne.n	8001704 <menu+0xafc>
 80016a8:	4b63      	ldr	r3, [pc, #396]	@ (8001838 <menu+0xc30>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	f083 0301 	eor.w	r3, r3, #1
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d026      	beq.n	8001704 <menu+0xafc>
			eepromData[5] = altLimit;
 80016b6:	4b5d      	ldr	r3, [pc, #372]	@ (800182c <menu+0xc24>)
 80016b8:	781a      	ldrb	r2, [r3, #0]
 80016ba:	4b61      	ldr	r3, [pc, #388]	@ (8001840 <menu+0xc38>)
 80016bc:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80016be:	4b5b      	ldr	r3, [pc, #364]	@ (800182c <menu+0xc24>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d110      	bne.n	80016e8 <menu+0xae0>
 80016c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001844 <menu+0xc3c>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <menu+0xace>
 80016ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001844 <menu+0xc3c>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d108      	bne.n	80016e8 <menu+0xae0>
				kapiTablaAcKonum = 3;
 80016d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001844 <menu+0xc3c>)
 80016d8:	2203      	movs	r2, #3
 80016da:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80016dc:	4b59      	ldr	r3, [pc, #356]	@ (8001844 <menu+0xc3c>)
 80016de:	781a      	ldrb	r2, [r3, #0]
 80016e0:	4b57      	ldr	r3, [pc, #348]	@ (8001840 <menu+0xc38>)
 80016e2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80016e6:	e00a      	b.n	80016fe <menu+0xaf6>
			} else if(altLimit == 0) {
 80016e8:	4b50      	ldr	r3, [pc, #320]	@ (800182c <menu+0xc24>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d106      	bne.n	80016fe <menu+0xaf6>
				platformSilindirTipi = 0;
 80016f0:	4b55      	ldr	r3, [pc, #340]	@ (8001848 <menu+0xc40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80016f6:	4b54      	ldr	r3, [pc, #336]	@ (8001848 <menu+0xc40>)
 80016f8:	781a      	ldrb	r2, [r3, #0]
 80016fa:	4b51      	ldr	r3, [pc, #324]	@ (8001840 <menu+0xc38>)
 80016fc:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80016fe:	4b53      	ldr	r3, [pc, #332]	@ (800184c <menu+0xc44>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001704:	4b52      	ldr	r3, [pc, #328]	@ (8001850 <menu+0xc48>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b06      	cmp	r3, #6
 800170a:	d166      	bne.n	80017da <menu+0xbd2>
		lcd_print(1, 1, basincSalteriText);
 800170c:	4a51      	ldr	r2, [pc, #324]	@ (8001854 <menu+0xc4c>)
 800170e:	2101      	movs	r1, #1
 8001710:	2001      	movs	r0, #1
 8001712:	f007 f8fc 	bl	800890e <lcd_print>

		if(basincSalteri == 0) {
 8001716:	4b50      	ldr	r3, [pc, #320]	@ (8001858 <menu+0xc50>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d105      	bne.n	800172a <menu+0xb22>
			lcd_print(2, 1, pasifText);
 800171e:	4a4f      	ldr	r2, [pc, #316]	@ (800185c <menu+0xc54>)
 8001720:	2101      	movs	r1, #1
 8001722:	2002      	movs	r0, #2
 8001724:	f007 f8f3 	bl	800890e <lcd_print>
 8001728:	e008      	b.n	800173c <menu+0xb34>
		} else if(basincSalteri == 1) {
 800172a:	4b4b      	ldr	r3, [pc, #300]	@ (8001858 <menu+0xc50>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d104      	bne.n	800173c <menu+0xb34>
			lcd_print(2, 1, aktifText);
 8001732:	4a3f      	ldr	r2, [pc, #252]	@ (8001830 <menu+0xc28>)
 8001734:	2101      	movs	r1, #1
 8001736:	2002      	movs	r0, #2
 8001738:	f007 f8e9 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800173c:	2102      	movs	r1, #2
 800173e:	483d      	ldr	r0, [pc, #244]	@ (8001834 <menu+0xc2c>)
 8001740:	f008 fa40 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001744:	4603      	mov	r3, r0
 8001746:	2b01      	cmp	r3, #1
 8001748:	d115      	bne.n	8001776 <menu+0xb6e>
 800174a:	4b3b      	ldr	r3, [pc, #236]	@ (8001838 <menu+0xc30>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	f083 0301 	eor.w	r3, r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00e      	beq.n	8001776 <menu+0xb6e>
			basincSalteri = basincSalteri + 1;
 8001758:	4b3f      	ldr	r3, [pc, #252]	@ (8001858 <menu+0xc50>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	b2da      	uxtb	r2, r3
 8001760:	4b3d      	ldr	r3, [pc, #244]	@ (8001858 <menu+0xc50>)
 8001762:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001764:	4b3c      	ldr	r3, [pc, #240]	@ (8001858 <menu+0xc50>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d902      	bls.n	8001772 <menu+0xb6a>
				basincSalteri = 0;
 800176c:	4b3a      	ldr	r3, [pc, #232]	@ (8001858 <menu+0xc50>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001772:	f001 fe4d 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001776:	2104      	movs	r1, #4
 8001778:	482e      	ldr	r0, [pc, #184]	@ (8001834 <menu+0xc2c>)
 800177a:	f008 fa23 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800177e:	4603      	mov	r3, r0
 8001780:	2b01      	cmp	r3, #1
 8001782:	d115      	bne.n	80017b0 <menu+0xba8>
 8001784:	4b2c      	ldr	r3, [pc, #176]	@ (8001838 <menu+0xc30>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	f083 0301 	eor.w	r3, r3, #1
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00e      	beq.n	80017b0 <menu+0xba8>
			basincSalteri = basincSalteri - 1;
 8001792:	4b31      	ldr	r3, [pc, #196]	@ (8001858 <menu+0xc50>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	3b01      	subs	r3, #1
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b2f      	ldr	r3, [pc, #188]	@ (8001858 <menu+0xc50>)
 800179c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800179e:	4b2e      	ldr	r3, [pc, #184]	@ (8001858 <menu+0xc50>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <menu+0xba4>
		   		basincSalteri = 1;
 80017a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001858 <menu+0xc50>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80017ac:	f001 fe30 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80017b0:	2108      	movs	r1, #8
 80017b2:	4820      	ldr	r0, [pc, #128]	@ (8001834 <menu+0xc2c>)
 80017b4:	f008 fa06 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d10d      	bne.n	80017da <menu+0xbd2>
 80017be:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <menu+0xc30>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	f083 0301 	eor.w	r3, r3, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <menu+0xbd2>
			eepromData[6] = basincSalteri;
 80017cc:	4b22      	ldr	r3, [pc, #136]	@ (8001858 <menu+0xc50>)
 80017ce:	781a      	ldrb	r2, [r3, #0]
 80017d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001840 <menu+0xc38>)
 80017d2:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80017d4:	4b1d      	ldr	r3, [pc, #116]	@ (800184c <menu+0xc44>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80017da:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <menu+0xc48>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b07      	cmp	r3, #7
 80017e0:	f040 80a9 	bne.w	8001936 <menu+0xd2e>
		lcd_print(1, 1, kapiSecimleriText);
 80017e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001860 <menu+0xc58>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	2001      	movs	r0, #1
 80017ea:	f007 f890 	bl	800890e <lcd_print>

		if(kapiSecimleri == 0) {
 80017ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001864 <menu+0xc5c>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d105      	bne.n	8001802 <menu+0xbfa>
			lcd_print(2, 1, pasifText);
 80017f6:	4a19      	ldr	r2, [pc, #100]	@ (800185c <menu+0xc54>)
 80017f8:	2101      	movs	r1, #1
 80017fa:	2002      	movs	r0, #2
 80017fc:	f007 f887 	bl	800890e <lcd_print>
 8001800:	e03f      	b.n	8001882 <menu+0xc7a>
		} else if(kapiSecimleri == 1) {
 8001802:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <menu+0xc5c>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d105      	bne.n	8001816 <menu+0xc0e>
			lcd_print(2, 1, katKapisiAktifText);
 800180a:	4a17      	ldr	r2, [pc, #92]	@ (8001868 <menu+0xc60>)
 800180c:	2101      	movs	r1, #1
 800180e:	2002      	movs	r0, #2
 8001810:	f007 f87d 	bl	800890e <lcd_print>
 8001814:	e035      	b.n	8001882 <menu+0xc7a>
		} else if(kapiSecimleri == 2) {
 8001816:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <menu+0xc5c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d128      	bne.n	8001870 <menu+0xc68>
			lcd_print(2, 1, tablaKapiAktifText);
 800181e:	4a13      	ldr	r2, [pc, #76]	@ (800186c <menu+0xc64>)
 8001820:	2101      	movs	r1, #1
 8001822:	2002      	movs	r0, #2
 8001824:	f007 f873 	bl	800890e <lcd_print>
 8001828:	e02b      	b.n	8001882 <menu+0xc7a>
 800182a:	bf00      	nop
 800182c:	20000da6 	.word	0x20000da6
 8001830:	20000f98 	.word	0x20000f98
 8001834:	40010800 	.word	0x40010800
 8001838:	20000dcf 	.word	0x20000dcf
 800183c:	20000da1 	.word	0x20000da1
 8001840:	20000d00 	.word	0x20000d00
 8001844:	20000dad 	.word	0x20000dad
 8001848:	20000db3 	.word	0x20000db3
 800184c:	20000dcc 	.word	0x20000dcc
 8001850:	20000da0 	.word	0x20000da0
 8001854:	20000fd4 	.word	0x20000fd4
 8001858:	20000da7 	.word	0x20000da7
 800185c:	20000f84 	.word	0x20000f84
 8001860:	20000fe8 	.word	0x20000fe8
 8001864:	20000da8 	.word	0x20000da8
 8001868:	20000ffc 	.word	0x20000ffc
 800186c:	20001010 	.word	0x20001010
		} else if(kapiSecimleri == 3) {
 8001870:	4b76      	ldr	r3, [pc, #472]	@ (8001a4c <menu+0xe44>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d104      	bne.n	8001882 <menu+0xc7a>
			lcd_print(2, 1, katArtiTablaAktifText);
 8001878:	4a75      	ldr	r2, [pc, #468]	@ (8001a50 <menu+0xe48>)
 800187a:	2101      	movs	r1, #1
 800187c:	2002      	movs	r0, #2
 800187e:	f007 f846 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001882:	2102      	movs	r1, #2
 8001884:	4873      	ldr	r0, [pc, #460]	@ (8001a54 <menu+0xe4c>)
 8001886:	f008 f99d 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800188a:	4603      	mov	r3, r0
 800188c:	2b01      	cmp	r3, #1
 800188e:	d115      	bne.n	80018bc <menu+0xcb4>
 8001890:	4b71      	ldr	r3, [pc, #452]	@ (8001a58 <menu+0xe50>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	f083 0301 	eor.w	r3, r3, #1
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00e      	beq.n	80018bc <menu+0xcb4>
			kapiSecimleri = kapiSecimleri + 1;
 800189e:	4b6b      	ldr	r3, [pc, #428]	@ (8001a4c <menu+0xe44>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	3301      	adds	r3, #1
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b69      	ldr	r3, [pc, #420]	@ (8001a4c <menu+0xe44>)
 80018a8:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80018aa:	4b68      	ldr	r3, [pc, #416]	@ (8001a4c <menu+0xe44>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d902      	bls.n	80018b8 <menu+0xcb0>
				kapiSecimleri = 0;
 80018b2:	4b66      	ldr	r3, [pc, #408]	@ (8001a4c <menu+0xe44>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80018b8:	f001 fdaa 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80018bc:	2104      	movs	r1, #4
 80018be:	4865      	ldr	r0, [pc, #404]	@ (8001a54 <menu+0xe4c>)
 80018c0:	f008 f980 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d115      	bne.n	80018f6 <menu+0xcee>
 80018ca:	4b63      	ldr	r3, [pc, #396]	@ (8001a58 <menu+0xe50>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	f083 0301 	eor.w	r3, r3, #1
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00e      	beq.n	80018f6 <menu+0xcee>
			kapiSecimleri = kapiSecimleri - 1;
 80018d8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a4c <menu+0xe44>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	3b01      	subs	r3, #1
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	4b5a      	ldr	r3, [pc, #360]	@ (8001a4c <menu+0xe44>)
 80018e2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80018e4:	4b59      	ldr	r3, [pc, #356]	@ (8001a4c <menu+0xe44>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d902      	bls.n	80018f2 <menu+0xcea>
		   		kapiSecimleri = 3;
 80018ec:	4b57      	ldr	r3, [pc, #348]	@ (8001a4c <menu+0xe44>)
 80018ee:	2203      	movs	r2, #3
 80018f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80018f2:	f001 fd8d 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80018f6:	2108      	movs	r1, #8
 80018f8:	4856      	ldr	r0, [pc, #344]	@ (8001a54 <menu+0xe4c>)
 80018fa:	f008 f963 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b01      	cmp	r3, #1
 8001902:	d118      	bne.n	8001936 <menu+0xd2e>
 8001904:	4b54      	ldr	r3, [pc, #336]	@ (8001a58 <menu+0xe50>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	f083 0301 	eor.w	r3, r3, #1
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d011      	beq.n	8001936 <menu+0xd2e>
			eepromData[7] = kapiSecimleri;
 8001912:	4b4e      	ldr	r3, [pc, #312]	@ (8001a4c <menu+0xe44>)
 8001914:	781a      	ldrb	r2, [r3, #0]
 8001916:	4b51      	ldr	r3, [pc, #324]	@ (8001a5c <menu+0xe54>)
 8001918:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800191a:	4b4c      	ldr	r3, [pc, #304]	@ (8001a4c <menu+0xe44>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d006      	beq.n	8001930 <menu+0xd28>
				altLimit = 1;
 8001922:	4b4f      	ldr	r3, [pc, #316]	@ (8001a60 <menu+0xe58>)
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001928:	4b4d      	ldr	r3, [pc, #308]	@ (8001a60 <menu+0xe58>)
 800192a:	781a      	ldrb	r2, [r3, #0]
 800192c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a5c <menu+0xe54>)
 800192e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001930:	4b4c      	ldr	r3, [pc, #304]	@ (8001a64 <menu+0xe5c>)
 8001932:	2201      	movs	r2, #1
 8001934:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001936:	4b4c      	ldr	r3, [pc, #304]	@ (8001a68 <menu+0xe60>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b08      	cmp	r3, #8
 800193c:	d167      	bne.n	8001a0e <menu+0xe06>
		lcd_print(1, 1, kapiAcmaTipiText);
 800193e:	4a4b      	ldr	r2, [pc, #300]	@ (8001a6c <menu+0xe64>)
 8001940:	2101      	movs	r1, #1
 8001942:	2001      	movs	r0, #1
 8001944:	f006 ffe3 	bl	800890e <lcd_print>

		if(kapiAcTipi == 0) {
 8001948:	4b49      	ldr	r3, [pc, #292]	@ (8001a70 <menu+0xe68>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d105      	bne.n	800195c <menu+0xd54>
			lcd_print(2, 1, kapiButonuESPText);
 8001950:	4a48      	ldr	r2, [pc, #288]	@ (8001a74 <menu+0xe6c>)
 8001952:	2101      	movs	r1, #1
 8001954:	2002      	movs	r0, #2
 8001956:	f006 ffda 	bl	800890e <lcd_print>
 800195a:	e008      	b.n	800196e <menu+0xd66>
		} else if(kapiAcTipi == 1){
 800195c:	4b44      	ldr	r3, [pc, #272]	@ (8001a70 <menu+0xe68>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d104      	bne.n	800196e <menu+0xd66>
			lcd_print(2, 1, katButonuEXTText);
 8001964:	4a44      	ldr	r2, [pc, #272]	@ (8001a78 <menu+0xe70>)
 8001966:	2101      	movs	r1, #1
 8001968:	2002      	movs	r0, #2
 800196a:	f006 ffd0 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800196e:	2102      	movs	r1, #2
 8001970:	4838      	ldr	r0, [pc, #224]	@ (8001a54 <menu+0xe4c>)
 8001972:	f008 f927 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001976:	4603      	mov	r3, r0
 8001978:	2b01      	cmp	r3, #1
 800197a:	d115      	bne.n	80019a8 <menu+0xda0>
 800197c:	4b36      	ldr	r3, [pc, #216]	@ (8001a58 <menu+0xe50>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	f083 0301 	eor.w	r3, r3, #1
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00e      	beq.n	80019a8 <menu+0xda0>
			kapiAcTipi = kapiAcTipi + 1;
 800198a:	4b39      	ldr	r3, [pc, #228]	@ (8001a70 <menu+0xe68>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	3301      	adds	r3, #1
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4b37      	ldr	r3, [pc, #220]	@ (8001a70 <menu+0xe68>)
 8001994:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8001996:	4b36      	ldr	r3, [pc, #216]	@ (8001a70 <menu+0xe68>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d902      	bls.n	80019a4 <menu+0xd9c>
				kapiAcTipi = 0;
 800199e:	4b34      	ldr	r3, [pc, #208]	@ (8001a70 <menu+0xe68>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80019a4:	f001 fd34 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80019a8:	2104      	movs	r1, #4
 80019aa:	482a      	ldr	r0, [pc, #168]	@ (8001a54 <menu+0xe4c>)
 80019ac:	f008 f90a 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d115      	bne.n	80019e2 <menu+0xdda>
 80019b6:	4b28      	ldr	r3, [pc, #160]	@ (8001a58 <menu+0xe50>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	f083 0301 	eor.w	r3, r3, #1
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00e      	beq.n	80019e2 <menu+0xdda>
			kapiAcTipi = kapiAcTipi - 1;
 80019c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a70 <menu+0xe68>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	4b28      	ldr	r3, [pc, #160]	@ (8001a70 <menu+0xe68>)
 80019ce:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80019d0:	4b27      	ldr	r3, [pc, #156]	@ (8001a70 <menu+0xe68>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d002      	beq.n	80019de <menu+0xdd6>
		   		kapiAcTipi = 1;
 80019d8:	4b25      	ldr	r3, [pc, #148]	@ (8001a70 <menu+0xe68>)
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80019de:	f001 fd17 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80019e2:	2108      	movs	r1, #8
 80019e4:	481b      	ldr	r0, [pc, #108]	@ (8001a54 <menu+0xe4c>)
 80019e6:	f008 f8ed 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d10e      	bne.n	8001a0e <menu+0xe06>
 80019f0:	4b19      	ldr	r3, [pc, #100]	@ (8001a58 <menu+0xe50>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	f083 0301 	eor.w	r3, r3, #1
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d007      	beq.n	8001a0e <menu+0xe06>
			eepromData[36] = kapiAcTipi;
 80019fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001a70 <menu+0xe68>)
 8001a00:	781a      	ldrb	r2, [r3, #0]
 8001a02:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <menu+0xe54>)
 8001a04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 8001a08:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <menu+0xe5c>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8001a0e:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <menu+0xe60>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b09      	cmp	r3, #9
 8001a14:	f040 8092 	bne.w	8001b3c <menu+0xf34>
		lcd_print(1, 1, birKatKapiTipiText);
 8001a18:	4a18      	ldr	r2, [pc, #96]	@ (8001a7c <menu+0xe74>)
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f006 ff76 	bl	800890e <lcd_print>

		if(kapi1Tip == 0) {
 8001a22:	4b17      	ldr	r3, [pc, #92]	@ (8001a80 <menu+0xe78>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d105      	bne.n	8001a36 <menu+0xe2e>
			lcd_print(2, 1, prudhomeTextGN);
 8001a2a:	4a16      	ldr	r2, [pc, #88]	@ (8001a84 <menu+0xe7c>)
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	2002      	movs	r0, #2
 8001a30:	f006 ff6d 	bl	800890e <lcd_print>
 8001a34:	e033      	b.n	8001a9e <menu+0xe96>
		} else if(kapi1Tip == 1) {
 8001a36:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <menu+0xe78>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d126      	bne.n	8001a8c <menu+0xe84>
			lcd_print(2, 1, butonKontrolluText);
 8001a3e:	4a12      	ldr	r2, [pc, #72]	@ (8001a88 <menu+0xe80>)
 8001a40:	2101      	movs	r1, #1
 8001a42:	2002      	movs	r0, #2
 8001a44:	f006 ff63 	bl	800890e <lcd_print>
 8001a48:	e029      	b.n	8001a9e <menu+0xe96>
 8001a4a:	bf00      	nop
 8001a4c:	20000da8 	.word	0x20000da8
 8001a50:	20001024 	.word	0x20001024
 8001a54:	40010800 	.word	0x40010800
 8001a58:	20000dcf 	.word	0x20000dcf
 8001a5c:	20000d00 	.word	0x20000d00
 8001a60:	20000da6 	.word	0x20000da6
 8001a64:	20000dcc 	.word	0x20000dcc
 8001a68:	20000da0 	.word	0x20000da0
 8001a6c:	20001038 	.word	0x20001038
 8001a70:	20000dac 	.word	0x20000dac
 8001a74:	2000104c 	.word	0x2000104c
 8001a78:	20001060 	.word	0x20001060
 8001a7c:	20001074 	.word	0x20001074
 8001a80:	20000da9 	.word	0x20000da9
 8001a84:	20000094 	.word	0x20000094
 8001a88:	20001088 	.word	0x20001088
		} else if(kapi1Tip == 2) {
 8001a8c:	4b73      	ldr	r3, [pc, #460]	@ (8001c5c <menu+0x1054>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d104      	bne.n	8001a9e <menu+0xe96>
			lcd_print(2, 1, pizzattoTextGN);
 8001a94:	4a72      	ldr	r2, [pc, #456]	@ (8001c60 <menu+0x1058>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	2002      	movs	r0, #2
 8001a9a:	f006 ff38 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	4870      	ldr	r0, [pc, #448]	@ (8001c64 <menu+0x105c>)
 8001aa2:	f008 f88f 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d115      	bne.n	8001ad8 <menu+0xed0>
 8001aac:	4b6e      	ldr	r3, [pc, #440]	@ (8001c68 <menu+0x1060>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	f083 0301 	eor.w	r3, r3, #1
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00e      	beq.n	8001ad8 <menu+0xed0>
			kapi1Tip = kapi1Tip + 1;
 8001aba:	4b68      	ldr	r3, [pc, #416]	@ (8001c5c <menu+0x1054>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b66      	ldr	r3, [pc, #408]	@ (8001c5c <menu+0x1054>)
 8001ac4:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8001ac6:	4b65      	ldr	r3, [pc, #404]	@ (8001c5c <menu+0x1054>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d902      	bls.n	8001ad4 <menu+0xecc>
				kapi1Tip = 0;
 8001ace:	4b63      	ldr	r3, [pc, #396]	@ (8001c5c <menu+0x1054>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ad4:	f001 fc9c 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ad8:	2104      	movs	r1, #4
 8001ada:	4862      	ldr	r0, [pc, #392]	@ (8001c64 <menu+0x105c>)
 8001adc:	f008 f872 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d115      	bne.n	8001b12 <menu+0xf0a>
 8001ae6:	4b60      	ldr	r3, [pc, #384]	@ (8001c68 <menu+0x1060>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	f083 0301 	eor.w	r3, r3, #1
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00e      	beq.n	8001b12 <menu+0xf0a>
			kapi1Tip = kapi1Tip - 1;
 8001af4:	4b59      	ldr	r3, [pc, #356]	@ (8001c5c <menu+0x1054>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	4b57      	ldr	r3, [pc, #348]	@ (8001c5c <menu+0x1054>)
 8001afe:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8001b00:	4b56      	ldr	r3, [pc, #344]	@ (8001c5c <menu+0x1054>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d902      	bls.n	8001b0e <menu+0xf06>
		   		kapi1Tip = 2;
 8001b08:	4b54      	ldr	r3, [pc, #336]	@ (8001c5c <menu+0x1054>)
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b0e:	f001 fc7f 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b12:	2108      	movs	r1, #8
 8001b14:	4853      	ldr	r0, [pc, #332]	@ (8001c64 <menu+0x105c>)
 8001b16:	f008 f855 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d10d      	bne.n	8001b3c <menu+0xf34>
 8001b20:	4b51      	ldr	r3, [pc, #324]	@ (8001c68 <menu+0x1060>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	f083 0301 	eor.w	r3, r3, #1
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d006      	beq.n	8001b3c <menu+0xf34>
			eepromData[8] = kapi1Tip;
 8001b2e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c5c <menu+0x1054>)
 8001b30:	781a      	ldrb	r2, [r3, #0]
 8001b32:	4b4e      	ldr	r3, [pc, #312]	@ (8001c6c <menu+0x1064>)
 8001b34:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8001b36:	4b4e      	ldr	r3, [pc, #312]	@ (8001c70 <menu+0x1068>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8001b3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001c74 <menu+0x106c>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b0a      	cmp	r3, #10
 8001b42:	d16c      	bne.n	8001c1e <menu+0x1016>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 8001b44:	4a4c      	ldr	r2, [pc, #304]	@ (8001c78 <menu+0x1070>)
 8001b46:	2101      	movs	r1, #1
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f006 fee0 	bl	800890e <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8001b4e:	4a4b      	ldr	r2, [pc, #300]	@ (8001c7c <menu+0x1074>)
 8001b50:	2101      	movs	r1, #1
 8001b52:	2002      	movs	r0, #2
 8001b54:	f006 fedb 	bl	800890e <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 8001b58:	4b49      	ldr	r3, [pc, #292]	@ (8001c80 <menu+0x1078>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	220a      	movs	r2, #10
 8001b5e:	4949      	ldr	r1, [pc, #292]	@ (8001c84 <menu+0x107c>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f00a fbd1 	bl	800c308 <itoa>
		lcd_print(2,16,snum);
 8001b66:	4a47      	ldr	r2, [pc, #284]	@ (8001c84 <menu+0x107c>)
 8001b68:	2110      	movs	r1, #16
 8001b6a:	2002      	movs	r0, #2
 8001b6c:	f006 fecf 	bl	800890e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001b70:	2102      	movs	r1, #2
 8001b72:	483c      	ldr	r0, [pc, #240]	@ (8001c64 <menu+0x105c>)
 8001b74:	f008 f826 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d119      	bne.n	8001bb2 <menu+0xfaa>
 8001b7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c68 <menu+0x1060>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	f083 0301 	eor.w	r3, r3, #1
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d012      	beq.n	8001bb2 <menu+0xfaa>
 8001b8c:	4b33      	ldr	r3, [pc, #204]	@ (8001c5c <menu+0x1054>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10e      	bne.n	8001bb2 <menu+0xfaa>
			kapi1AcSure = kapi1AcSure + 1;
 8001b94:	4b3a      	ldr	r3, [pc, #232]	@ (8001c80 <menu+0x1078>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	4b38      	ldr	r3, [pc, #224]	@ (8001c80 <menu+0x1078>)
 8001b9e:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8001ba0:	4b37      	ldr	r3, [pc, #220]	@ (8001c80 <menu+0x1078>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d902      	bls.n	8001bae <menu+0xfa6>
				kapi1AcSure = 0;
 8001ba8:	4b35      	ldr	r3, [pc, #212]	@ (8001c80 <menu+0x1078>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bae:	f001 fc2f 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001bb2:	2104      	movs	r1, #4
 8001bb4:	482b      	ldr	r0, [pc, #172]	@ (8001c64 <menu+0x105c>)
 8001bb6:	f008 f805 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d119      	bne.n	8001bf4 <menu+0xfec>
 8001bc0:	4b29      	ldr	r3, [pc, #164]	@ (8001c68 <menu+0x1060>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	f083 0301 	eor.w	r3, r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d012      	beq.n	8001bf4 <menu+0xfec>
 8001bce:	4b23      	ldr	r3, [pc, #140]	@ (8001c5c <menu+0x1054>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10e      	bne.n	8001bf4 <menu+0xfec>
			kapi1AcSure = kapi1AcSure - 1;
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c80 <menu+0x1078>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4b28      	ldr	r3, [pc, #160]	@ (8001c80 <menu+0x1078>)
 8001be0:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8001be2:	4b27      	ldr	r3, [pc, #156]	@ (8001c80 <menu+0x1078>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d902      	bls.n	8001bf0 <menu+0xfe8>
		   		kapi1AcSure = 5;
 8001bea:	4b25      	ldr	r3, [pc, #148]	@ (8001c80 <menu+0x1078>)
 8001bec:	2205      	movs	r2, #5
 8001bee:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001bf0:	f001 fc0e 	bl	8003410 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	481b      	ldr	r0, [pc, #108]	@ (8001c64 <menu+0x105c>)
 8001bf8:	f007 ffe4 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d10d      	bne.n	8001c1e <menu+0x1016>
 8001c02:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <menu+0x1060>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	f083 0301 	eor.w	r3, r3, #1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <menu+0x1016>
			eepromData[9] = kapi1AcSure;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	@ (8001c80 <menu+0x1078>)
 8001c12:	781a      	ldrb	r2, [r3, #0]
 8001c14:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <menu+0x1064>)
 8001c16:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8001c18:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <menu+0x1068>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <menu+0x106c>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b0b      	cmp	r3, #11
 8001c24:	f040 8090 	bne.w	8001d48 <menu+0x1140>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 8001c28:	4a17      	ldr	r2, [pc, #92]	@ (8001c88 <menu+0x1080>)
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f006 fe6e 	bl	800890e <lcd_print>

		if(kapi2Tip == 0) {
 8001c32:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <menu+0x1084>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d105      	bne.n	8001c46 <menu+0x103e>
			lcd_print(2, 1, prudhomeTextGN);
 8001c3a:	4a15      	ldr	r2, [pc, #84]	@ (8001c90 <menu+0x1088>)
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f006 fe65 	bl	800890e <lcd_print>
 8001c44:	e031      	b.n	8001caa <menu+0x10a2>
		} else if(kapi2Tip == 1) {
 8001c46:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <menu+0x1084>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d124      	bne.n	8001c98 <menu+0x1090>
			lcd_print(2, 1, butonKontrolluText);
 8001c4e:	4a11      	ldr	r2, [pc, #68]	@ (8001c94 <menu+0x108c>)
 8001c50:	2101      	movs	r1, #1
 8001c52:	2002      	movs	r0, #2
 8001c54:	f006 fe5b 	bl	800890e <lcd_print>
 8001c58:	e027      	b.n	8001caa <menu+0x10a2>
 8001c5a:	bf00      	nop
 8001c5c:	20000da9 	.word	0x20000da9
 8001c60:	200000a8 	.word	0x200000a8
 8001c64:	40010800 	.word	0x40010800
 8001c68:	20000dcf 	.word	0x20000dcf
 8001c6c:	20000d00 	.word	0x20000d00
 8001c70:	20000dcc 	.word	0x20000dcc
 8001c74:	20000da0 	.word	0x20000da0
 8001c78:	2000109c 	.word	0x2000109c
 8001c7c:	200010b0 	.word	0x200010b0
 8001c80:	20000db9 	.word	0x20000db9
 8001c84:	20000d70 	.word	0x20000d70
 8001c88:	200010c4 	.word	0x200010c4
 8001c8c:	20000daa 	.word	0x20000daa
 8001c90:	20000094 	.word	0x20000094
 8001c94:	20001088 	.word	0x20001088
		} else if(kapi2Tip == 2) {
 8001c98:	4b73      	ldr	r3, [pc, #460]	@ (8001e68 <menu+0x1260>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d104      	bne.n	8001caa <menu+0x10a2>
			lcd_print(2, 1, pizzattoTextGN);
 8001ca0:	4a72      	ldr	r2, [pc, #456]	@ (8001e6c <menu+0x1264>)
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f006 fe32 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001caa:	2102      	movs	r1, #2
 8001cac:	4870      	ldr	r0, [pc, #448]	@ (8001e70 <menu+0x1268>)
 8001cae:	f007 ff89 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d115      	bne.n	8001ce4 <menu+0x10dc>
 8001cb8:	4b6e      	ldr	r3, [pc, #440]	@ (8001e74 <menu+0x126c>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	f083 0301 	eor.w	r3, r3, #1
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00e      	beq.n	8001ce4 <menu+0x10dc>
			kapi2Tip = kapi2Tip + 1;
 8001cc6:	4b68      	ldr	r3, [pc, #416]	@ (8001e68 <menu+0x1260>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b66      	ldr	r3, [pc, #408]	@ (8001e68 <menu+0x1260>)
 8001cd0:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8001cd2:	4b65      	ldr	r3, [pc, #404]	@ (8001e68 <menu+0x1260>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d902      	bls.n	8001ce0 <menu+0x10d8>
				kapi2Tip = 0;
 8001cda:	4b63      	ldr	r3, [pc, #396]	@ (8001e68 <menu+0x1260>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ce0:	f001 fb96 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ce4:	2104      	movs	r1, #4
 8001ce6:	4862      	ldr	r0, [pc, #392]	@ (8001e70 <menu+0x1268>)
 8001ce8:	f007 ff6c 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d115      	bne.n	8001d1e <menu+0x1116>
 8001cf2:	4b60      	ldr	r3, [pc, #384]	@ (8001e74 <menu+0x126c>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	f083 0301 	eor.w	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00e      	beq.n	8001d1e <menu+0x1116>
			kapi2Tip = kapi2Tip - 1;
 8001d00:	4b59      	ldr	r3, [pc, #356]	@ (8001e68 <menu+0x1260>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	4b57      	ldr	r3, [pc, #348]	@ (8001e68 <menu+0x1260>)
 8001d0a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8001d0c:	4b56      	ldr	r3, [pc, #344]	@ (8001e68 <menu+0x1260>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d902      	bls.n	8001d1a <menu+0x1112>
		   		kapi2Tip = 2;
 8001d14:	4b54      	ldr	r3, [pc, #336]	@ (8001e68 <menu+0x1260>)
 8001d16:	2202      	movs	r2, #2
 8001d18:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d1a:	f001 fb79 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d1e:	2108      	movs	r1, #8
 8001d20:	4853      	ldr	r0, [pc, #332]	@ (8001e70 <menu+0x1268>)
 8001d22:	f007 ff4f 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d10d      	bne.n	8001d48 <menu+0x1140>
 8001d2c:	4b51      	ldr	r3, [pc, #324]	@ (8001e74 <menu+0x126c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	f083 0301 	eor.w	r3, r3, #1
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d006      	beq.n	8001d48 <menu+0x1140>
			eepromData[10] = kapi2Tip;
 8001d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8001e68 <menu+0x1260>)
 8001d3c:	781a      	ldrb	r2, [r3, #0]
 8001d3e:	4b4e      	ldr	r3, [pc, #312]	@ (8001e78 <menu+0x1270>)
 8001d40:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8001d42:	4b4e      	ldr	r3, [pc, #312]	@ (8001e7c <menu+0x1274>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8001d48:	4b4d      	ldr	r3, [pc, #308]	@ (8001e80 <menu+0x1278>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b0c      	cmp	r3, #12
 8001d4e:	d16c      	bne.n	8001e2a <menu+0x1222>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 8001d50:	4a4c      	ldr	r2, [pc, #304]	@ (8001e84 <menu+0x127c>)
 8001d52:	2101      	movs	r1, #1
 8001d54:	2001      	movs	r0, #1
 8001d56:	f006 fdda 	bl	800890e <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8001d5a:	4a4b      	ldr	r2, [pc, #300]	@ (8001e88 <menu+0x1280>)
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	2002      	movs	r0, #2
 8001d60:	f006 fdd5 	bl	800890e <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 8001d64:	4b49      	ldr	r3, [pc, #292]	@ (8001e8c <menu+0x1284>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	220a      	movs	r2, #10
 8001d6a:	4949      	ldr	r1, [pc, #292]	@ (8001e90 <menu+0x1288>)
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f00a facb 	bl	800c308 <itoa>
		lcd_print(2,16,snum);
 8001d72:	4a47      	ldr	r2, [pc, #284]	@ (8001e90 <menu+0x1288>)
 8001d74:	2110      	movs	r1, #16
 8001d76:	2002      	movs	r0, #2
 8001d78:	f006 fdc9 	bl	800890e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	483c      	ldr	r0, [pc, #240]	@ (8001e70 <menu+0x1268>)
 8001d80:	f007 ff20 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d119      	bne.n	8001dbe <menu+0x11b6>
 8001d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e74 <menu+0x126c>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	f083 0301 	eor.w	r3, r3, #1
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d012      	beq.n	8001dbe <menu+0x11b6>
 8001d98:	4b33      	ldr	r3, [pc, #204]	@ (8001e68 <menu+0x1260>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10e      	bne.n	8001dbe <menu+0x11b6>
			kapi2AcSure = kapi2AcSure + 1;
 8001da0:	4b3a      	ldr	r3, [pc, #232]	@ (8001e8c <menu+0x1284>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	4b38      	ldr	r3, [pc, #224]	@ (8001e8c <menu+0x1284>)
 8001daa:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8001dac:	4b37      	ldr	r3, [pc, #220]	@ (8001e8c <menu+0x1284>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b05      	cmp	r3, #5
 8001db2:	d902      	bls.n	8001dba <menu+0x11b2>
				kapi2AcSure = 0;
 8001db4:	4b35      	ldr	r3, [pc, #212]	@ (8001e8c <menu+0x1284>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dba:	f001 fb29 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	482b      	ldr	r0, [pc, #172]	@ (8001e70 <menu+0x1268>)
 8001dc2:	f007 feff 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d119      	bne.n	8001e00 <menu+0x11f8>
 8001dcc:	4b29      	ldr	r3, [pc, #164]	@ (8001e74 <menu+0x126c>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	f083 0301 	eor.w	r3, r3, #1
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d012      	beq.n	8001e00 <menu+0x11f8>
 8001dda:	4b23      	ldr	r3, [pc, #140]	@ (8001e68 <menu+0x1260>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10e      	bne.n	8001e00 <menu+0x11f8>
			kapi2AcSure = kapi2AcSure - 1;
 8001de2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e8c <menu+0x1284>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4b28      	ldr	r3, [pc, #160]	@ (8001e8c <menu+0x1284>)
 8001dec:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8001dee:	4b27      	ldr	r3, [pc, #156]	@ (8001e8c <menu+0x1284>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d902      	bls.n	8001dfc <menu+0x11f4>
		   		kapi2AcSure = 5;
 8001df6:	4b25      	ldr	r3, [pc, #148]	@ (8001e8c <menu+0x1284>)
 8001df8:	2205      	movs	r2, #5
 8001dfa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001dfc:	f001 fb08 	bl	8003410 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e00:	2108      	movs	r1, #8
 8001e02:	481b      	ldr	r0, [pc, #108]	@ (8001e70 <menu+0x1268>)
 8001e04:	f007 fede 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d10d      	bne.n	8001e2a <menu+0x1222>
 8001e0e:	4b19      	ldr	r3, [pc, #100]	@ (8001e74 <menu+0x126c>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	f083 0301 	eor.w	r3, r3, #1
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <menu+0x1222>
			eepromData[11] = kapi2AcSure;
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e8c <menu+0x1284>)
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <menu+0x1270>)
 8001e22:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8001e24:	4b15      	ldr	r3, [pc, #84]	@ (8001e7c <menu+0x1274>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8001e2a:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <menu+0x1278>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b0d      	cmp	r3, #13
 8001e30:	f040 8090 	bne.w	8001f54 <menu+0x134c>
		lcd_print(1, 1, tablaKapiTipiText);
 8001e34:	4a17      	ldr	r2, [pc, #92]	@ (8001e94 <menu+0x128c>)
 8001e36:	2101      	movs	r1, #1
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f006 fd68 	bl	800890e <lcd_print>

		if(kapitablaTip == 0) {
 8001e3e:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <menu+0x1290>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d105      	bne.n	8001e52 <menu+0x124a>
			lcd_print(2, 1, prudhomeTextGN);
 8001e46:	4a15      	ldr	r2, [pc, #84]	@ (8001e9c <menu+0x1294>)
 8001e48:	2101      	movs	r1, #1
 8001e4a:	2002      	movs	r0, #2
 8001e4c:	f006 fd5f 	bl	800890e <lcd_print>
 8001e50:	e031      	b.n	8001eb6 <menu+0x12ae>
		} else if(kapitablaTip == 1) {
 8001e52:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <menu+0x1290>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d124      	bne.n	8001ea4 <menu+0x129c>
			lcd_print(2, 1, butonKontrolluText);
 8001e5a:	4a11      	ldr	r2, [pc, #68]	@ (8001ea0 <menu+0x1298>)
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	2002      	movs	r0, #2
 8001e60:	f006 fd55 	bl	800890e <lcd_print>
 8001e64:	e027      	b.n	8001eb6 <menu+0x12ae>
 8001e66:	bf00      	nop
 8001e68:	20000daa 	.word	0x20000daa
 8001e6c:	200000a8 	.word	0x200000a8
 8001e70:	40010800 	.word	0x40010800
 8001e74:	20000dcf 	.word	0x20000dcf
 8001e78:	20000d00 	.word	0x20000d00
 8001e7c:	20000dcc 	.word	0x20000dcc
 8001e80:	20000da0 	.word	0x20000da0
 8001e84:	200010d8 	.word	0x200010d8
 8001e88:	200010b0 	.word	0x200010b0
 8001e8c:	20000dba 	.word	0x20000dba
 8001e90:	20000d70 	.word	0x20000d70
 8001e94:	200010ec 	.word	0x200010ec
 8001e98:	20000dab 	.word	0x20000dab
 8001e9c:	20000094 	.word	0x20000094
 8001ea0:	20001088 	.word	0x20001088
		} else if(kapitablaTip == 2) {
 8001ea4:	4b3f      	ldr	r3, [pc, #252]	@ (8001fa4 <menu+0x139c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d104      	bne.n	8001eb6 <menu+0x12ae>
			lcd_print(2, 1, pizzattoTextGN);
 8001eac:	4a3e      	ldr	r2, [pc, #248]	@ (8001fa8 <menu+0x13a0>)
 8001eae:	2101      	movs	r1, #1
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	f006 fd2c 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eb6:	2102      	movs	r1, #2
 8001eb8:	483c      	ldr	r0, [pc, #240]	@ (8001fac <menu+0x13a4>)
 8001eba:	f007 fe83 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d115      	bne.n	8001ef0 <menu+0x12e8>
 8001ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb0 <menu+0x13a8>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	f083 0301 	eor.w	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00e      	beq.n	8001ef0 <menu+0x12e8>
			kapitablaTip = kapitablaTip + 1;
 8001ed2:	4b34      	ldr	r3, [pc, #208]	@ (8001fa4 <menu+0x139c>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4b32      	ldr	r3, [pc, #200]	@ (8001fa4 <menu+0x139c>)
 8001edc:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8001ede:	4b31      	ldr	r3, [pc, #196]	@ (8001fa4 <menu+0x139c>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d902      	bls.n	8001eec <menu+0x12e4>
				kapitablaTip = 0;
 8001ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa4 <menu+0x139c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001eec:	f001 fa90 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ef0:	2104      	movs	r1, #4
 8001ef2:	482e      	ldr	r0, [pc, #184]	@ (8001fac <menu+0x13a4>)
 8001ef4:	f007 fe66 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d115      	bne.n	8001f2a <menu+0x1322>
 8001efe:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb0 <menu+0x13a8>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	f083 0301 	eor.w	r3, r3, #1
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00e      	beq.n	8001f2a <menu+0x1322>
			kapitablaTip = kapitablaTip - 1;
 8001f0c:	4b25      	ldr	r3, [pc, #148]	@ (8001fa4 <menu+0x139c>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	4b23      	ldr	r3, [pc, #140]	@ (8001fa4 <menu+0x139c>)
 8001f16:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8001f18:	4b22      	ldr	r3, [pc, #136]	@ (8001fa4 <menu+0x139c>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d902      	bls.n	8001f26 <menu+0x131e>
		   		kapitablaTip = 2;
 8001f20:	4b20      	ldr	r3, [pc, #128]	@ (8001fa4 <menu+0x139c>)
 8001f22:	2202      	movs	r2, #2
 8001f24:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f26:	f001 fa73 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f2a:	2108      	movs	r1, #8
 8001f2c:	481f      	ldr	r0, [pc, #124]	@ (8001fac <menu+0x13a4>)
 8001f2e:	f007 fe49 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d10d      	bne.n	8001f54 <menu+0x134c>
 8001f38:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb0 <menu+0x13a8>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	f083 0301 	eor.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d006      	beq.n	8001f54 <menu+0x134c>
			eepromData[12] = kapitablaTip;
 8001f46:	4b17      	ldr	r3, [pc, #92]	@ (8001fa4 <menu+0x139c>)
 8001f48:	781a      	ldrb	r2, [r3, #0]
 8001f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb4 <menu+0x13ac>)
 8001f4c:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb8 <menu+0x13b0>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8001f54:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <menu+0x13b4>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b0e      	cmp	r3, #14
 8001f5a:	f040 80a3 	bne.w	80020a4 <menu+0x149c>
		lcd_print(1, 1, tablaKapiAcKonumText);
 8001f5e:	4a18      	ldr	r2, [pc, #96]	@ (8001fc0 <menu+0x13b8>)
 8001f60:	2101      	movs	r1, #1
 8001f62:	2001      	movs	r0, #1
 8001f64:	f006 fcd3 	bl	800890e <lcd_print>

		if(kapiTablaAcKonum == 0) {
 8001f68:	4b16      	ldr	r3, [pc, #88]	@ (8001fc4 <menu+0x13bc>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d105      	bne.n	8001f7c <menu+0x1374>
			lcd_print(2, 1, birinciKattaAcText);
 8001f70:	4a15      	ldr	r2, [pc, #84]	@ (8001fc8 <menu+0x13c0>)
 8001f72:	2101      	movs	r1, #1
 8001f74:	2002      	movs	r0, #2
 8001f76:	f006 fcca 	bl	800890e <lcd_print>
 8001f7a:	e034      	b.n	8001fe6 <menu+0x13de>
		} else if(kapiTablaAcKonum == 1) {
 8001f7c:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <menu+0x13bc>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d105      	bne.n	8001f90 <menu+0x1388>
			lcd_print(2, 1, ikinciKattaAcText);
 8001f84:	4a11      	ldr	r2, [pc, #68]	@ (8001fcc <menu+0x13c4>)
 8001f86:	2101      	movs	r1, #1
 8001f88:	2002      	movs	r0, #2
 8001f8a:	f006 fcc0 	bl	800890e <lcd_print>
 8001f8e:	e02a      	b.n	8001fe6 <menu+0x13de>
		} else if(kapiTablaAcKonum == 2) {
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <menu+0x13bc>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d11d      	bne.n	8001fd4 <menu+0x13cc>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8001f98:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd0 <menu+0x13c8>)
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	2002      	movs	r0, #2
 8001f9e:	f006 fcb6 	bl	800890e <lcd_print>
 8001fa2:	e020      	b.n	8001fe6 <menu+0x13de>
 8001fa4:	20000dab 	.word	0x20000dab
 8001fa8:	200000a8 	.word	0x200000a8
 8001fac:	40010800 	.word	0x40010800
 8001fb0:	20000dcf 	.word	0x20000dcf
 8001fb4:	20000d00 	.word	0x20000d00
 8001fb8:	20000dcc 	.word	0x20000dcc
 8001fbc:	20000da0 	.word	0x20000da0
 8001fc0:	20001100 	.word	0x20001100
 8001fc4:	20000dad 	.word	0x20000dad
 8001fc8:	20001114 	.word	0x20001114
 8001fcc:	20001128 	.word	0x20001128
 8001fd0:	2000113c 	.word	0x2000113c
		} else if(kapiTablaAcKonum == 3) {
 8001fd4:	4b76      	ldr	r3, [pc, #472]	@ (80021b0 <menu+0x15a8>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d104      	bne.n	8001fe6 <menu+0x13de>
			lcd_print(2, 1, pasifText);
 8001fdc:	4a75      	ldr	r2, [pc, #468]	@ (80021b4 <menu+0x15ac>)
 8001fde:	2101      	movs	r1, #1
 8001fe0:	2002      	movs	r0, #2
 8001fe2:	f006 fc94 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	4873      	ldr	r0, [pc, #460]	@ (80021b8 <menu+0x15b0>)
 8001fea:	f007 fdeb 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d115      	bne.n	8002020 <menu+0x1418>
 8001ff4:	4b71      	ldr	r3, [pc, #452]	@ (80021bc <menu+0x15b4>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	f083 0301 	eor.w	r3, r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00e      	beq.n	8002020 <menu+0x1418>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002002:	4b6b      	ldr	r3, [pc, #428]	@ (80021b0 <menu+0x15a8>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	3301      	adds	r3, #1
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4b69      	ldr	r3, [pc, #420]	@ (80021b0 <menu+0x15a8>)
 800200c:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 800200e:	4b68      	ldr	r3, [pc, #416]	@ (80021b0 <menu+0x15a8>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d902      	bls.n	800201c <menu+0x1414>
				kapiTablaAcKonum = 0;
 8002016:	4b66      	ldr	r3, [pc, #408]	@ (80021b0 <menu+0x15a8>)
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800201c:	f001 f9f8 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002020:	2104      	movs	r1, #4
 8002022:	4865      	ldr	r0, [pc, #404]	@ (80021b8 <menu+0x15b0>)
 8002024:	f007 fdce 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002028:	4603      	mov	r3, r0
 800202a:	2b01      	cmp	r3, #1
 800202c:	d115      	bne.n	800205a <menu+0x1452>
 800202e:	4b63      	ldr	r3, [pc, #396]	@ (80021bc <menu+0x15b4>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	f083 0301 	eor.w	r3, r3, #1
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00e      	beq.n	800205a <menu+0x1452>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 800203c:	4b5c      	ldr	r3, [pc, #368]	@ (80021b0 <menu+0x15a8>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	3b01      	subs	r3, #1
 8002042:	b2da      	uxtb	r2, r3
 8002044:	4b5a      	ldr	r3, [pc, #360]	@ (80021b0 <menu+0x15a8>)
 8002046:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002048:	4b59      	ldr	r3, [pc, #356]	@ (80021b0 <menu+0x15a8>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b03      	cmp	r3, #3
 800204e:	d902      	bls.n	8002056 <menu+0x144e>
		   		kapiTablaAcKonum = 2;
 8002050:	4b57      	ldr	r3, [pc, #348]	@ (80021b0 <menu+0x15a8>)
 8002052:	2202      	movs	r2, #2
 8002054:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002056:	f001 f9db 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800205a:	2108      	movs	r1, #8
 800205c:	4856      	ldr	r0, [pc, #344]	@ (80021b8 <menu+0x15b0>)
 800205e:	f007 fdb1 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002062:	4603      	mov	r3, r0
 8002064:	2b01      	cmp	r3, #1
 8002066:	d11d      	bne.n	80020a4 <menu+0x149c>
 8002068:	4b54      	ldr	r3, [pc, #336]	@ (80021bc <menu+0x15b4>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	f083 0301 	eor.w	r3, r3, #1
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d016      	beq.n	80020a4 <menu+0x149c>
			eepromData[34] = kapiTablaAcKonum;
 8002076:	4b4e      	ldr	r3, [pc, #312]	@ (80021b0 <menu+0x15a8>)
 8002078:	781a      	ldrb	r2, [r3, #0]
 800207a:	4b51      	ldr	r3, [pc, #324]	@ (80021c0 <menu+0x15b8>)
 800207c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002080:	4b4b      	ldr	r3, [pc, #300]	@ (80021b0 <menu+0x15a8>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <menu+0x1488>
 8002088:	4b49      	ldr	r3, [pc, #292]	@ (80021b0 <menu+0x15a8>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d106      	bne.n	800209e <menu+0x1496>
				altLimit = 1;
 8002090:	4b4c      	ldr	r3, [pc, #304]	@ (80021c4 <menu+0x15bc>)
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002096:	4b4b      	ldr	r3, [pc, #300]	@ (80021c4 <menu+0x15bc>)
 8002098:	781a      	ldrb	r2, [r3, #0]
 800209a:	4b49      	ldr	r3, [pc, #292]	@ (80021c0 <menu+0x15b8>)
 800209c:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 800209e:	4b4a      	ldr	r3, [pc, #296]	@ (80021c8 <menu+0x15c0>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 80020a4:	4b49      	ldr	r3, [pc, #292]	@ (80021cc <menu+0x15c4>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b0f      	cmp	r3, #15
 80020aa:	d16c      	bne.n	8002186 <menu+0x157e>
		lcd_print(1, 1, tablaKapiAcSureText);
 80020ac:	4a48      	ldr	r2, [pc, #288]	@ (80021d0 <menu+0x15c8>)
 80020ae:	2101      	movs	r1, #1
 80020b0:	2001      	movs	r0, #1
 80020b2:	f006 fc2c 	bl	800890e <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80020b6:	4a47      	ldr	r2, [pc, #284]	@ (80021d4 <menu+0x15cc>)
 80020b8:	2101      	movs	r1, #1
 80020ba:	2002      	movs	r0, #2
 80020bc:	f006 fc27 	bl	800890e <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 80020c0:	4b45      	ldr	r3, [pc, #276]	@ (80021d8 <menu+0x15d0>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	220a      	movs	r2, #10
 80020c6:	4945      	ldr	r1, [pc, #276]	@ (80021dc <menu+0x15d4>)
 80020c8:	4618      	mov	r0, r3
 80020ca:	f00a f91d 	bl	800c308 <itoa>
		lcd_print(2,16,snum);
 80020ce:	4a43      	ldr	r2, [pc, #268]	@ (80021dc <menu+0x15d4>)
 80020d0:	2110      	movs	r1, #16
 80020d2:	2002      	movs	r0, #2
 80020d4:	f006 fc1b 	bl	800890e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80020d8:	2102      	movs	r1, #2
 80020da:	4837      	ldr	r0, [pc, #220]	@ (80021b8 <menu+0x15b0>)
 80020dc:	f007 fd72 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d119      	bne.n	800211a <menu+0x1512>
 80020e6:	4b35      	ldr	r3, [pc, #212]	@ (80021bc <menu+0x15b4>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	f083 0301 	eor.w	r3, r3, #1
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d012      	beq.n	800211a <menu+0x1512>
 80020f4:	4b3a      	ldr	r3, [pc, #232]	@ (80021e0 <menu+0x15d8>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10e      	bne.n	800211a <menu+0x1512>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80020fc:	4b36      	ldr	r3, [pc, #216]	@ (80021d8 <menu+0x15d0>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	3301      	adds	r3, #1
 8002102:	b2da      	uxtb	r2, r3
 8002104:	4b34      	ldr	r3, [pc, #208]	@ (80021d8 <menu+0x15d0>)
 8002106:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002108:	4b33      	ldr	r3, [pc, #204]	@ (80021d8 <menu+0x15d0>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b05      	cmp	r3, #5
 800210e:	d902      	bls.n	8002116 <menu+0x150e>
				kapiTablaAcSure = 0;
 8002110:	4b31      	ldr	r3, [pc, #196]	@ (80021d8 <menu+0x15d0>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002116:	f001 f97b 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800211a:	2104      	movs	r1, #4
 800211c:	4826      	ldr	r0, [pc, #152]	@ (80021b8 <menu+0x15b0>)
 800211e:	f007 fd51 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002122:	4603      	mov	r3, r0
 8002124:	2b01      	cmp	r3, #1
 8002126:	d119      	bne.n	800215c <menu+0x1554>
 8002128:	4b24      	ldr	r3, [pc, #144]	@ (80021bc <menu+0x15b4>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	f083 0301 	eor.w	r3, r3, #1
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d012      	beq.n	800215c <menu+0x1554>
 8002136:	4b2a      	ldr	r3, [pc, #168]	@ (80021e0 <menu+0x15d8>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10e      	bne.n	800215c <menu+0x1554>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800213e:	4b26      	ldr	r3, [pc, #152]	@ (80021d8 <menu+0x15d0>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	3b01      	subs	r3, #1
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4b24      	ldr	r3, [pc, #144]	@ (80021d8 <menu+0x15d0>)
 8002148:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800214a:	4b23      	ldr	r3, [pc, #140]	@ (80021d8 <menu+0x15d0>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b06      	cmp	r3, #6
 8002150:	d902      	bls.n	8002158 <menu+0x1550>
		   		kapiTablaAcSure = 5;
 8002152:	4b21      	ldr	r3, [pc, #132]	@ (80021d8 <menu+0x15d0>)
 8002154:	2205      	movs	r2, #5
 8002156:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002158:	f001 f95a 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800215c:	2108      	movs	r1, #8
 800215e:	4816      	ldr	r0, [pc, #88]	@ (80021b8 <menu+0x15b0>)
 8002160:	f007 fd30 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002164:	4603      	mov	r3, r0
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10d      	bne.n	8002186 <menu+0x157e>
 800216a:	4b14      	ldr	r3, [pc, #80]	@ (80021bc <menu+0x15b4>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	f083 0301 	eor.w	r3, r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d006      	beq.n	8002186 <menu+0x157e>
			eepromData[13] = kapiTablaAcSure;
 8002178:	4b17      	ldr	r3, [pc, #92]	@ (80021d8 <menu+0x15d0>)
 800217a:	781a      	ldrb	r2, [r3, #0]
 800217c:	4b10      	ldr	r3, [pc, #64]	@ (80021c0 <menu+0x15b8>)
 800217e:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002180:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <menu+0x15c0>)
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002186:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <menu+0x15c4>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b10      	cmp	r3, #16
 800218c:	f040 8086 	bne.w	800229c <menu+0x1694>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002190:	4a14      	ldr	r2, [pc, #80]	@ (80021e4 <menu+0x15dc>)
 8002192:	2101      	movs	r1, #1
 8002194:	2001      	movs	r0, #1
 8002196:	f006 fbba 	bl	800890e <lcd_print>

		if(yukariYavasLimit == 0) {
 800219a:	4b13      	ldr	r3, [pc, #76]	@ (80021e8 <menu+0x15e0>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d124      	bne.n	80021ec <menu+0x15e4>
			lcd_print(2, 1, pasifText);
 80021a2:	4a04      	ldr	r2, [pc, #16]	@ (80021b4 <menu+0x15ac>)
 80021a4:	2101      	movs	r1, #1
 80021a6:	2002      	movs	r0, #2
 80021a8:	f006 fbb1 	bl	800890e <lcd_print>
 80021ac:	e027      	b.n	80021fe <menu+0x15f6>
 80021ae:	bf00      	nop
 80021b0:	20000dad 	.word	0x20000dad
 80021b4:	20000f84 	.word	0x20000f84
 80021b8:	40010800 	.word	0x40010800
 80021bc:	20000dcf 	.word	0x20000dcf
 80021c0:	20000d00 	.word	0x20000d00
 80021c4:	20000da6 	.word	0x20000da6
 80021c8:	20000dcc 	.word	0x20000dcc
 80021cc:	20000da0 	.word	0x20000da0
 80021d0:	20001150 	.word	0x20001150
 80021d4:	200010b0 	.word	0x200010b0
 80021d8:	20000dbb 	.word	0x20000dbb
 80021dc:	20000d70 	.word	0x20000d70
 80021e0:	20000dab 	.word	0x20000dab
 80021e4:	20001164 	.word	0x20001164
 80021e8:	20000dae 	.word	0x20000dae
		} else if(yukariYavasLimit == 1) {
 80021ec:	4b84      	ldr	r3, [pc, #528]	@ (8002400 <menu+0x17f8>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d104      	bne.n	80021fe <menu+0x15f6>
			lcd_print(2, 1, aktifText);
 80021f4:	4a83      	ldr	r2, [pc, #524]	@ (8002404 <menu+0x17fc>)
 80021f6:	2101      	movs	r1, #1
 80021f8:	2002      	movs	r0, #2
 80021fa:	f006 fb88 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021fe:	2102      	movs	r1, #2
 8002200:	4881      	ldr	r0, [pc, #516]	@ (8002408 <menu+0x1800>)
 8002202:	f007 fcdf 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002206:	4603      	mov	r3, r0
 8002208:	2b01      	cmp	r3, #1
 800220a:	d115      	bne.n	8002238 <menu+0x1630>
 800220c:	4b7f      	ldr	r3, [pc, #508]	@ (800240c <menu+0x1804>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	f083 0301 	eor.w	r3, r3, #1
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00e      	beq.n	8002238 <menu+0x1630>
			yukariYavasLimit = yukariYavasLimit + 1;
 800221a:	4b79      	ldr	r3, [pc, #484]	@ (8002400 <menu+0x17f8>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4b77      	ldr	r3, [pc, #476]	@ (8002400 <menu+0x17f8>)
 8002224:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002226:	4b76      	ldr	r3, [pc, #472]	@ (8002400 <menu+0x17f8>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d902      	bls.n	8002234 <menu+0x162c>
				yukariYavasLimit = 0;
 800222e:	4b74      	ldr	r3, [pc, #464]	@ (8002400 <menu+0x17f8>)
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002234:	f001 f8ec 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002238:	2104      	movs	r1, #4
 800223a:	4873      	ldr	r0, [pc, #460]	@ (8002408 <menu+0x1800>)
 800223c:	f007 fcc2 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002240:	4603      	mov	r3, r0
 8002242:	2b01      	cmp	r3, #1
 8002244:	d115      	bne.n	8002272 <menu+0x166a>
 8002246:	4b71      	ldr	r3, [pc, #452]	@ (800240c <menu+0x1804>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	f083 0301 	eor.w	r3, r3, #1
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00e      	beq.n	8002272 <menu+0x166a>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002254:	4b6a      	ldr	r3, [pc, #424]	@ (8002400 <menu+0x17f8>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	3b01      	subs	r3, #1
 800225a:	b2da      	uxtb	r2, r3
 800225c:	4b68      	ldr	r3, [pc, #416]	@ (8002400 <menu+0x17f8>)
 800225e:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002260:	4b67      	ldr	r3, [pc, #412]	@ (8002400 <menu+0x17f8>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <menu+0x1666>
		   		yukariYavasLimit = 1;
 8002268:	4b65      	ldr	r3, [pc, #404]	@ (8002400 <menu+0x17f8>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800226e:	f001 f8cf 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002272:	2108      	movs	r1, #8
 8002274:	4864      	ldr	r0, [pc, #400]	@ (8002408 <menu+0x1800>)
 8002276:	f007 fca5 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800227a:	4603      	mov	r3, r0
 800227c:	2b01      	cmp	r3, #1
 800227e:	d10d      	bne.n	800229c <menu+0x1694>
 8002280:	4b62      	ldr	r3, [pc, #392]	@ (800240c <menu+0x1804>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	f083 0301 	eor.w	r3, r3, #1
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d006      	beq.n	800229c <menu+0x1694>
			eepromData[14] = yukariYavasLimit;
 800228e:	4b5c      	ldr	r3, [pc, #368]	@ (8002400 <menu+0x17f8>)
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	4b5f      	ldr	r3, [pc, #380]	@ (8002410 <menu+0x1808>)
 8002294:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002296:	4b5f      	ldr	r3, [pc, #380]	@ (8002414 <menu+0x180c>)
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 800229c:	4b5e      	ldr	r3, [pc, #376]	@ (8002418 <menu+0x1810>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b11      	cmp	r3, #17
 80022a2:	f040 808b 	bne.w	80023bc <menu+0x17b4>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 80022a6:	4a5d      	ldr	r2, [pc, #372]	@ (800241c <menu+0x1814>)
 80022a8:	2101      	movs	r1, #1
 80022aa:	2001      	movs	r0, #1
 80022ac:	f006 fb2f 	bl	800890e <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 80022b0:	4b5b      	ldr	r3, [pc, #364]	@ (8002420 <menu+0x1818>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d105      	bne.n	80022c4 <menu+0x16bc>
			lcd_print(2, 1, devirmeAktifText);
 80022b8:	4a5a      	ldr	r2, [pc, #360]	@ (8002424 <menu+0x181c>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	2002      	movs	r0, #2
 80022be:	f006 fb26 	bl	800890e <lcd_print>
 80022c2:	e012      	b.n	80022ea <menu+0x16e2>
		} else if(devirmeYuruyusSecim == 1) {
 80022c4:	4b56      	ldr	r3, [pc, #344]	@ (8002420 <menu+0x1818>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d105      	bne.n	80022d8 <menu+0x16d0>
			lcd_print(2, 1, yuruyusAktifText);
 80022cc:	4a56      	ldr	r2, [pc, #344]	@ (8002428 <menu+0x1820>)
 80022ce:	2101      	movs	r1, #1
 80022d0:	2002      	movs	r0, #2
 80022d2:	f006 fb1c 	bl	800890e <lcd_print>
 80022d6:	e008      	b.n	80022ea <menu+0x16e2>
		} else if(devirmeYuruyusSecim == 0) {
 80022d8:	4b51      	ldr	r3, [pc, #324]	@ (8002420 <menu+0x1818>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d104      	bne.n	80022ea <menu+0x16e2>
			lcd_print(2, 1, pasifText);
 80022e0:	4a52      	ldr	r2, [pc, #328]	@ (800242c <menu+0x1824>)
 80022e2:	2101      	movs	r1, #1
 80022e4:	2002      	movs	r0, #2
 80022e6:	f006 fb12 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022ea:	2102      	movs	r1, #2
 80022ec:	4846      	ldr	r0, [pc, #280]	@ (8002408 <menu+0x1800>)
 80022ee:	f007 fc69 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d115      	bne.n	8002324 <menu+0x171c>
 80022f8:	4b44      	ldr	r3, [pc, #272]	@ (800240c <menu+0x1804>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	f083 0301 	eor.w	r3, r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00e      	beq.n	8002324 <menu+0x171c>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002306:	4b46      	ldr	r3, [pc, #280]	@ (8002420 <menu+0x1818>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	3301      	adds	r3, #1
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4b44      	ldr	r3, [pc, #272]	@ (8002420 <menu+0x1818>)
 8002310:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002312:	4b43      	ldr	r3, [pc, #268]	@ (8002420 <menu+0x1818>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d902      	bls.n	8002320 <menu+0x1718>
				devirmeYuruyusSecim = 0;
 800231a:	4b41      	ldr	r3, [pc, #260]	@ (8002420 <menu+0x1818>)
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002320:	f001 f876 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002324:	2104      	movs	r1, #4
 8002326:	4838      	ldr	r0, [pc, #224]	@ (8002408 <menu+0x1800>)
 8002328:	f007 fc4c 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800232c:	4603      	mov	r3, r0
 800232e:	2b01      	cmp	r3, #1
 8002330:	d115      	bne.n	800235e <menu+0x1756>
 8002332:	4b36      	ldr	r3, [pc, #216]	@ (800240c <menu+0x1804>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	f083 0301 	eor.w	r3, r3, #1
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00e      	beq.n	800235e <menu+0x1756>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002340:	4b37      	ldr	r3, [pc, #220]	@ (8002420 <menu+0x1818>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	3b01      	subs	r3, #1
 8002346:	b2da      	uxtb	r2, r3
 8002348:	4b35      	ldr	r3, [pc, #212]	@ (8002420 <menu+0x1818>)
 800234a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 800234c:	4b34      	ldr	r3, [pc, #208]	@ (8002420 <menu+0x1818>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d902      	bls.n	800235a <menu+0x1752>
		   		devirmeYuruyusSecim = 2;
 8002354:	4b32      	ldr	r3, [pc, #200]	@ (8002420 <menu+0x1818>)
 8002356:	2202      	movs	r2, #2
 8002358:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800235a:	f001 f859 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800235e:	2108      	movs	r1, #8
 8002360:	4829      	ldr	r0, [pc, #164]	@ (8002408 <menu+0x1800>)
 8002362:	f007 fc2f 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002366:	4603      	mov	r3, r0
 8002368:	2b01      	cmp	r3, #1
 800236a:	d127      	bne.n	80023bc <menu+0x17b4>
 800236c:	4b27      	ldr	r3, [pc, #156]	@ (800240c <menu+0x1804>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	f083 0301 	eor.w	r3, r3, #1
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d020      	beq.n	80023bc <menu+0x17b4>
			eepromData[15] = devirmeYuruyusSecim;
 800237a:	4b29      	ldr	r3, [pc, #164]	@ (8002420 <menu+0x1818>)
 800237c:	781a      	ldrb	r2, [r3, #0]
 800237e:	4b24      	ldr	r3, [pc, #144]	@ (8002410 <menu+0x1808>)
 8002380:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002382:	4b27      	ldr	r3, [pc, #156]	@ (8002420 <menu+0x1818>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d003      	beq.n	8002392 <menu+0x178a>
 800238a:	4b25      	ldr	r3, [pc, #148]	@ (8002420 <menu+0x1818>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d106      	bne.n	80023a0 <menu+0x1798>
				calismaSekli = 0;
 8002392:	4b27      	ldr	r3, [pc, #156]	@ (8002430 <menu+0x1828>)
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002398:	4b25      	ldr	r3, [pc, #148]	@ (8002430 <menu+0x1828>)
 800239a:	781a      	ldrb	r2, [r3, #0]
 800239c:	4b1c      	ldr	r3, [pc, #112]	@ (8002410 <menu+0x1808>)
 800239e:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80023a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002420 <menu+0x1818>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d106      	bne.n	80023b6 <menu+0x17ae>
				devirmeSilindirTipi = 1;
 80023a8:	4b22      	ldr	r3, [pc, #136]	@ (8002434 <menu+0x182c>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80023ae:	4b21      	ldr	r3, [pc, #132]	@ (8002434 <menu+0x182c>)
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	4b17      	ldr	r3, [pc, #92]	@ (8002410 <menu+0x1808>)
 80023b4:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80023b6:	4b17      	ldr	r3, [pc, #92]	@ (8002414 <menu+0x180c>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80023bc:	4b16      	ldr	r3, [pc, #88]	@ (8002418 <menu+0x1810>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b12      	cmp	r3, #18
 80023c2:	f040 8097 	bne.w	80024f4 <menu+0x18ec>
		if(devirmeYuruyusSecim == 2) {
 80023c6:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <menu+0x1818>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d105      	bne.n	80023da <menu+0x17d2>
			lcd_print(1, 1, devirmeYukariText);
 80023ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002438 <menu+0x1830>)
 80023d0:	2101      	movs	r1, #1
 80023d2:	2001      	movs	r0, #1
 80023d4:	f006 fa9b 	bl	800890e <lcd_print>
 80023d8:	e008      	b.n	80023ec <menu+0x17e4>
		} else if(devirmeYuruyusSecim == 1) {
 80023da:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <menu+0x1818>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d104      	bne.n	80023ec <menu+0x17e4>
			lcd_print(1, 1, yuruyusIleriText);
 80023e2:	4a16      	ldr	r2, [pc, #88]	@ (800243c <menu+0x1834>)
 80023e4:	2101      	movs	r1, #1
 80023e6:	2001      	movs	r0, #1
 80023e8:	f006 fa91 	bl	800890e <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 80023ec:	4b14      	ldr	r3, [pc, #80]	@ (8002440 <menu+0x1838>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d127      	bne.n	8002444 <menu+0x183c>
			lcd_print(2, 1, pasifText);
 80023f4:	4a0d      	ldr	r2, [pc, #52]	@ (800242c <menu+0x1824>)
 80023f6:	2101      	movs	r1, #1
 80023f8:	2002      	movs	r0, #2
 80023fa:	f006 fa88 	bl	800890e <lcd_print>
 80023fe:	e02a      	b.n	8002456 <menu+0x184e>
 8002400:	20000dae 	.word	0x20000dae
 8002404:	20000f98 	.word	0x20000f98
 8002408:	40010800 	.word	0x40010800
 800240c:	20000dcf 	.word	0x20000dcf
 8002410:	20000d00 	.word	0x20000d00
 8002414:	20000dcc 	.word	0x20000dcc
 8002418:	20000da0 	.word	0x20000da0
 800241c:	20001178 	.word	0x20001178
 8002420:	20000daf 	.word	0x20000daf
 8002424:	2000118c 	.word	0x2000118c
 8002428:	200011a0 	.word	0x200011a0
 800242c:	20000f84 	.word	0x20000f84
 8002430:	20000da1 	.word	0x20000da1
 8002434:	20000db2 	.word	0x20000db2
 8002438:	200011b4 	.word	0x200011b4
 800243c:	200011c8 	.word	0x200011c8
 8002440:	20000db0 	.word	0x20000db0
		} else if(devirmeYukariIleriLimit == 1){
 8002444:	4b79      	ldr	r3, [pc, #484]	@ (800262c <menu+0x1a24>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d104      	bne.n	8002456 <menu+0x184e>
			lcd_print(2, 1, aktifText);
 800244c:	4a78      	ldr	r2, [pc, #480]	@ (8002630 <menu+0x1a28>)
 800244e:	2101      	movs	r1, #1
 8002450:	2002      	movs	r0, #2
 8002452:	f006 fa5c 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002456:	2102      	movs	r1, #2
 8002458:	4876      	ldr	r0, [pc, #472]	@ (8002634 <menu+0x1a2c>)
 800245a:	f007 fbb3 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800245e:	4603      	mov	r3, r0
 8002460:	2b01      	cmp	r3, #1
 8002462:	d115      	bne.n	8002490 <menu+0x1888>
 8002464:	4b74      	ldr	r3, [pc, #464]	@ (8002638 <menu+0x1a30>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	f083 0301 	eor.w	r3, r3, #1
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00e      	beq.n	8002490 <menu+0x1888>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002472:	4b6e      	ldr	r3, [pc, #440]	@ (800262c <menu+0x1a24>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	3301      	adds	r3, #1
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4b6c      	ldr	r3, [pc, #432]	@ (800262c <menu+0x1a24>)
 800247c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800247e:	4b6b      	ldr	r3, [pc, #428]	@ (800262c <menu+0x1a24>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d902      	bls.n	800248c <menu+0x1884>
				devirmeYukariIleriLimit = 0;
 8002486:	4b69      	ldr	r3, [pc, #420]	@ (800262c <menu+0x1a24>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800248c:	f000 ffc0 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002490:	2104      	movs	r1, #4
 8002492:	4868      	ldr	r0, [pc, #416]	@ (8002634 <menu+0x1a2c>)
 8002494:	f007 fb96 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002498:	4603      	mov	r3, r0
 800249a:	2b01      	cmp	r3, #1
 800249c:	d115      	bne.n	80024ca <menu+0x18c2>
 800249e:	4b66      	ldr	r3, [pc, #408]	@ (8002638 <menu+0x1a30>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	f083 0301 	eor.w	r3, r3, #1
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00e      	beq.n	80024ca <menu+0x18c2>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80024ac:	4b5f      	ldr	r3, [pc, #380]	@ (800262c <menu+0x1a24>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	4b5d      	ldr	r3, [pc, #372]	@ (800262c <menu+0x1a24>)
 80024b6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80024b8:	4b5c      	ldr	r3, [pc, #368]	@ (800262c <menu+0x1a24>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <menu+0x18be>
		   		devirmeYukariIleriLimit = 1;
 80024c0:	4b5a      	ldr	r3, [pc, #360]	@ (800262c <menu+0x1a24>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024c6:	f000 ffa3 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ca:	2108      	movs	r1, #8
 80024cc:	4859      	ldr	r0, [pc, #356]	@ (8002634 <menu+0x1a2c>)
 80024ce:	f007 fb79 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d10d      	bne.n	80024f4 <menu+0x18ec>
 80024d8:	4b57      	ldr	r3, [pc, #348]	@ (8002638 <menu+0x1a30>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	f083 0301 	eor.w	r3, r3, #1
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d006      	beq.n	80024f4 <menu+0x18ec>
			eepromData[16] = devirmeYukariIleriLimit;
 80024e6:	4b51      	ldr	r3, [pc, #324]	@ (800262c <menu+0x1a24>)
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	4b54      	ldr	r3, [pc, #336]	@ (800263c <menu+0x1a34>)
 80024ec:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80024ee:	4b54      	ldr	r3, [pc, #336]	@ (8002640 <menu+0x1a38>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80024f4:	4b53      	ldr	r3, [pc, #332]	@ (8002644 <menu+0x1a3c>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b13      	cmp	r3, #19
 80024fa:	d174      	bne.n	80025e6 <menu+0x19de>
		if(devirmeYuruyusSecim == 2) {
 80024fc:	4b52      	ldr	r3, [pc, #328]	@ (8002648 <menu+0x1a40>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d105      	bne.n	8002510 <menu+0x1908>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002504:	4a51      	ldr	r2, [pc, #324]	@ (800264c <menu+0x1a44>)
 8002506:	2101      	movs	r1, #1
 8002508:	2001      	movs	r0, #1
 800250a:	f006 fa00 	bl	800890e <lcd_print>
 800250e:	e008      	b.n	8002522 <menu+0x191a>
		} else if(devirmeYuruyusSecim == 1) {
 8002510:	4b4d      	ldr	r3, [pc, #308]	@ (8002648 <menu+0x1a40>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d104      	bne.n	8002522 <menu+0x191a>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002518:	4a4d      	ldr	r2, [pc, #308]	@ (8002650 <menu+0x1a48>)
 800251a:	2101      	movs	r1, #1
 800251c:	2001      	movs	r0, #1
 800251e:	f006 f9f6 	bl	800890e <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002522:	4b4c      	ldr	r3, [pc, #304]	@ (8002654 <menu+0x1a4c>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <menu+0x192e>
			lcd_print(2, 1, pasifText);
 800252a:	4a4b      	ldr	r2, [pc, #300]	@ (8002658 <menu+0x1a50>)
 800252c:	2101      	movs	r1, #1
 800252e:	2002      	movs	r0, #2
 8002530:	f006 f9ed 	bl	800890e <lcd_print>
 8002534:	e008      	b.n	8002548 <menu+0x1940>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002536:	4b47      	ldr	r3, [pc, #284]	@ (8002654 <menu+0x1a4c>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d104      	bne.n	8002548 <menu+0x1940>
			lcd_print(2, 1, aktifText);
 800253e:	4a3c      	ldr	r2, [pc, #240]	@ (8002630 <menu+0x1a28>)
 8002540:	2101      	movs	r1, #1
 8002542:	2002      	movs	r0, #2
 8002544:	f006 f9e3 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002548:	2102      	movs	r1, #2
 800254a:	483a      	ldr	r0, [pc, #232]	@ (8002634 <menu+0x1a2c>)
 800254c:	f007 fb3a 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002550:	4603      	mov	r3, r0
 8002552:	2b01      	cmp	r3, #1
 8002554:	d115      	bne.n	8002582 <menu+0x197a>
 8002556:	4b38      	ldr	r3, [pc, #224]	@ (8002638 <menu+0x1a30>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	f083 0301 	eor.w	r3, r3, #1
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00e      	beq.n	8002582 <menu+0x197a>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002564:	4b3b      	ldr	r3, [pc, #236]	@ (8002654 <menu+0x1a4c>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	b2da      	uxtb	r2, r3
 800256c:	4b39      	ldr	r3, [pc, #228]	@ (8002654 <menu+0x1a4c>)
 800256e:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002570:	4b38      	ldr	r3, [pc, #224]	@ (8002654 <menu+0x1a4c>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d902      	bls.n	800257e <menu+0x1976>
				devirmeAsagiGeriLimit = 0;
 8002578:	4b36      	ldr	r3, [pc, #216]	@ (8002654 <menu+0x1a4c>)
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800257e:	f000 ff47 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002582:	2104      	movs	r1, #4
 8002584:	482b      	ldr	r0, [pc, #172]	@ (8002634 <menu+0x1a2c>)
 8002586:	f007 fb1d 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800258a:	4603      	mov	r3, r0
 800258c:	2b01      	cmp	r3, #1
 800258e:	d115      	bne.n	80025bc <menu+0x19b4>
 8002590:	4b29      	ldr	r3, [pc, #164]	@ (8002638 <menu+0x1a30>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	f083 0301 	eor.w	r3, r3, #1
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00e      	beq.n	80025bc <menu+0x19b4>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 800259e:	4b2d      	ldr	r3, [pc, #180]	@ (8002654 <menu+0x1a4c>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002654 <menu+0x1a4c>)
 80025a8:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80025aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002654 <menu+0x1a4c>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <menu+0x19b0>
		   		devirmeAsagiGeriLimit = 1;
 80025b2:	4b28      	ldr	r3, [pc, #160]	@ (8002654 <menu+0x1a4c>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025b8:	f000 ff2a 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025bc:	2108      	movs	r1, #8
 80025be:	481d      	ldr	r0, [pc, #116]	@ (8002634 <menu+0x1a2c>)
 80025c0:	f007 fb00 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d10d      	bne.n	80025e6 <menu+0x19de>
 80025ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <menu+0x1a30>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	f083 0301 	eor.w	r3, r3, #1
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d006      	beq.n	80025e6 <menu+0x19de>
			eepromData[17] = devirmeAsagiGeriLimit;
 80025d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002654 <menu+0x1a4c>)
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	4b17      	ldr	r3, [pc, #92]	@ (800263c <menu+0x1a34>)
 80025de:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80025e0:	4b17      	ldr	r3, [pc, #92]	@ (8002640 <menu+0x1a38>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80025e6:	4b17      	ldr	r3, [pc, #92]	@ (8002644 <menu+0x1a3c>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b14      	cmp	r3, #20
 80025ec:	f040 809e 	bne.w	800272c <menu+0x1b24>
		if(devirmeYuruyusSecim == 1) {
 80025f0:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <menu+0x1a40>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d105      	bne.n	8002604 <menu+0x19fc>
			lcd_print(1, 1, yuruyusSecildiText);
 80025f8:	4a18      	ldr	r2, [pc, #96]	@ (800265c <menu+0x1a54>)
 80025fa:	2101      	movs	r1, #1
 80025fc:	2001      	movs	r0, #1
 80025fe:	f006 f986 	bl	800890e <lcd_print>
 8002602:	e008      	b.n	8002616 <menu+0x1a0e>
		} else if(devirmeYuruyusSecim == 2) {
 8002604:	4b10      	ldr	r3, [pc, #64]	@ (8002648 <menu+0x1a40>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d104      	bne.n	8002616 <menu+0x1a0e>
			lcd_print(1, 1, devirmeSilindirTipiText);
 800260c:	4a14      	ldr	r2, [pc, #80]	@ (8002660 <menu+0x1a58>)
 800260e:	2101      	movs	r1, #1
 8002610:	2001      	movs	r0, #1
 8002612:	f006 f97c 	bl	800890e <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002616:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <menu+0x1a5c>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d126      	bne.n	800266c <menu+0x1a64>
			lcd_print(2, 1, tekTesirText);
 800261e:	4a12      	ldr	r2, [pc, #72]	@ (8002668 <menu+0x1a60>)
 8002620:	2101      	movs	r1, #1
 8002622:	2002      	movs	r0, #2
 8002624:	f006 f973 	bl	800890e <lcd_print>
 8002628:	e029      	b.n	800267e <menu+0x1a76>
 800262a:	bf00      	nop
 800262c:	20000db0 	.word	0x20000db0
 8002630:	20000f98 	.word	0x20000f98
 8002634:	40010800 	.word	0x40010800
 8002638:	20000dcf 	.word	0x20000dcf
 800263c:	20000d00 	.word	0x20000d00
 8002640:	20000dcc 	.word	0x20000dcc
 8002644:	20000da0 	.word	0x20000da0
 8002648:	20000daf 	.word	0x20000daf
 800264c:	200011dc 	.word	0x200011dc
 8002650:	200011f0 	.word	0x200011f0
 8002654:	20000db1 	.word	0x20000db1
 8002658:	20000f84 	.word	0x20000f84
 800265c:	20001204 	.word	0x20001204
 8002660:	20001218 	.word	0x20001218
 8002664:	20000db2 	.word	0x20000db2
 8002668:	2000122c 	.word	0x2000122c
		} else if(devirmeSilindirTipi == 1) {
 800266c:	4b39      	ldr	r3, [pc, #228]	@ (8002754 <menu+0x1b4c>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d104      	bne.n	800267e <menu+0x1a76>
			lcd_print(2, 1, ciftTesirText);
 8002674:	4a38      	ldr	r2, [pc, #224]	@ (8002758 <menu+0x1b50>)
 8002676:	2101      	movs	r1, #1
 8002678:	2002      	movs	r0, #2
 800267a:	f006 f948 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800267e:	2102      	movs	r1, #2
 8002680:	4836      	ldr	r0, [pc, #216]	@ (800275c <menu+0x1b54>)
 8002682:	f007 fa9f 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002686:	4603      	mov	r3, r0
 8002688:	2b01      	cmp	r3, #1
 800268a:	d119      	bne.n	80026c0 <menu+0x1ab8>
 800268c:	4b34      	ldr	r3, [pc, #208]	@ (8002760 <menu+0x1b58>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	f083 0301 	eor.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d012      	beq.n	80026c0 <menu+0x1ab8>
 800269a:	4b32      	ldr	r3, [pc, #200]	@ (8002764 <menu+0x1b5c>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d10e      	bne.n	80026c0 <menu+0x1ab8>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80026a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002754 <menu+0x1b4c>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	3301      	adds	r3, #1
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002754 <menu+0x1b4c>)
 80026ac:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80026ae:	4b29      	ldr	r3, [pc, #164]	@ (8002754 <menu+0x1b4c>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d902      	bls.n	80026bc <menu+0x1ab4>
				devirmeSilindirTipi = 0;
 80026b6:	4b27      	ldr	r3, [pc, #156]	@ (8002754 <menu+0x1b4c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026bc:	f000 fea8 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80026c0:	2104      	movs	r1, #4
 80026c2:	4826      	ldr	r0, [pc, #152]	@ (800275c <menu+0x1b54>)
 80026c4:	f007 fa7e 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d119      	bne.n	8002702 <menu+0x1afa>
 80026ce:	4b24      	ldr	r3, [pc, #144]	@ (8002760 <menu+0x1b58>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	f083 0301 	eor.w	r3, r3, #1
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d012      	beq.n	8002702 <menu+0x1afa>
 80026dc:	4b21      	ldr	r3, [pc, #132]	@ (8002764 <menu+0x1b5c>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d10e      	bne.n	8002702 <menu+0x1afa>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80026e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002754 <menu+0x1b4c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	4b19      	ldr	r3, [pc, #100]	@ (8002754 <menu+0x1b4c>)
 80026ee:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80026f0:	4b18      	ldr	r3, [pc, #96]	@ (8002754 <menu+0x1b4c>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <menu+0x1af6>
		   		devirmeSilindirTipi = 1;
 80026f8:	4b16      	ldr	r3, [pc, #88]	@ (8002754 <menu+0x1b4c>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026fe:	f000 fe87 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002702:	2108      	movs	r1, #8
 8002704:	4815      	ldr	r0, [pc, #84]	@ (800275c <menu+0x1b54>)
 8002706:	f007 fa5d 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800270a:	4603      	mov	r3, r0
 800270c:	2b01      	cmp	r3, #1
 800270e:	d10d      	bne.n	800272c <menu+0x1b24>
 8002710:	4b13      	ldr	r3, [pc, #76]	@ (8002760 <menu+0x1b58>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	f083 0301 	eor.w	r3, r3, #1
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d006      	beq.n	800272c <menu+0x1b24>
			eepromData[18] = devirmeSilindirTipi;
 800271e:	4b0d      	ldr	r3, [pc, #52]	@ (8002754 <menu+0x1b4c>)
 8002720:	781a      	ldrb	r2, [r3, #0]
 8002722:	4b11      	ldr	r3, [pc, #68]	@ (8002768 <menu+0x1b60>)
 8002724:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002726:	4b11      	ldr	r3, [pc, #68]	@ (800276c <menu+0x1b64>)
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800272c:	4b10      	ldr	r3, [pc, #64]	@ (8002770 <menu+0x1b68>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b15      	cmp	r3, #21
 8002732:	f040 8088 	bne.w	8002846 <menu+0x1c3e>
		lcd_print(1, 1, platformSilindirTipiText);
 8002736:	4a0f      	ldr	r2, [pc, #60]	@ (8002774 <menu+0x1b6c>)
 8002738:	2101      	movs	r1, #1
 800273a:	2001      	movs	r0, #1
 800273c:	f006 f8e7 	bl	800890e <lcd_print>

		if(platformSilindirTipi == 0) {
 8002740:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <menu+0x1b70>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d11b      	bne.n	8002780 <menu+0x1b78>
			lcd_print(2, 1, tekTesirText);
 8002748:	4a0c      	ldr	r2, [pc, #48]	@ (800277c <menu+0x1b74>)
 800274a:	2101      	movs	r1, #1
 800274c:	2002      	movs	r0, #2
 800274e:	f006 f8de 	bl	800890e <lcd_print>
 8002752:	e01e      	b.n	8002792 <menu+0x1b8a>
 8002754:	20000db2 	.word	0x20000db2
 8002758:	20001240 	.word	0x20001240
 800275c:	40010800 	.word	0x40010800
 8002760:	20000dcf 	.word	0x20000dcf
 8002764:	20000daf 	.word	0x20000daf
 8002768:	20000d00 	.word	0x20000d00
 800276c:	20000dcc 	.word	0x20000dcc
 8002770:	20000da0 	.word	0x20000da0
 8002774:	20001254 	.word	0x20001254
 8002778:	20000db3 	.word	0x20000db3
 800277c:	2000122c 	.word	0x2000122c
		} else if(platformSilindirTipi == 1) {
 8002780:	4ba1      	ldr	r3, [pc, #644]	@ (8002a08 <menu+0x1e00>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d104      	bne.n	8002792 <menu+0x1b8a>
			lcd_print(2, 1, ciftTesirText);
 8002788:	4aa0      	ldr	r2, [pc, #640]	@ (8002a0c <menu+0x1e04>)
 800278a:	2101      	movs	r1, #1
 800278c:	2002      	movs	r0, #2
 800278e:	f006 f8be 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002792:	2102      	movs	r1, #2
 8002794:	489e      	ldr	r0, [pc, #632]	@ (8002a10 <menu+0x1e08>)
 8002796:	f007 fa15 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800279a:	4603      	mov	r3, r0
 800279c:	2b01      	cmp	r3, #1
 800279e:	d115      	bne.n	80027cc <menu+0x1bc4>
 80027a0:	4b9c      	ldr	r3, [pc, #624]	@ (8002a14 <menu+0x1e0c>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	f083 0301 	eor.w	r3, r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00e      	beq.n	80027cc <menu+0x1bc4>
			platformSilindirTipi = platformSilindirTipi + 1;
 80027ae:	4b96      	ldr	r3, [pc, #600]	@ (8002a08 <menu+0x1e00>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	3301      	adds	r3, #1
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4b94      	ldr	r3, [pc, #592]	@ (8002a08 <menu+0x1e00>)
 80027b8:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80027ba:	4b93      	ldr	r3, [pc, #588]	@ (8002a08 <menu+0x1e00>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d902      	bls.n	80027c8 <menu+0x1bc0>
				platformSilindirTipi = 0;
 80027c2:	4b91      	ldr	r3, [pc, #580]	@ (8002a08 <menu+0x1e00>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027c8:	f000 fe22 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027cc:	2104      	movs	r1, #4
 80027ce:	4890      	ldr	r0, [pc, #576]	@ (8002a10 <menu+0x1e08>)
 80027d0:	f007 f9f8 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d115      	bne.n	8002806 <menu+0x1bfe>
 80027da:	4b8e      	ldr	r3, [pc, #568]	@ (8002a14 <menu+0x1e0c>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	f083 0301 	eor.w	r3, r3, #1
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00e      	beq.n	8002806 <menu+0x1bfe>
			platformSilindirTipi = platformSilindirTipi - 1;
 80027e8:	4b87      	ldr	r3, [pc, #540]	@ (8002a08 <menu+0x1e00>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	4b85      	ldr	r3, [pc, #532]	@ (8002a08 <menu+0x1e00>)
 80027f2:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80027f4:	4b84      	ldr	r3, [pc, #528]	@ (8002a08 <menu+0x1e00>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <menu+0x1bfa>
		   		platformSilindirTipi = 1;
 80027fc:	4b82      	ldr	r3, [pc, #520]	@ (8002a08 <menu+0x1e00>)
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002802:	f000 fe05 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002806:	2108      	movs	r1, #8
 8002808:	4881      	ldr	r0, [pc, #516]	@ (8002a10 <menu+0x1e08>)
 800280a:	f007 f9db 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800280e:	4603      	mov	r3, r0
 8002810:	2b01      	cmp	r3, #1
 8002812:	d118      	bne.n	8002846 <menu+0x1c3e>
 8002814:	4b7f      	ldr	r3, [pc, #508]	@ (8002a14 <menu+0x1e0c>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	f083 0301 	eor.w	r3, r3, #1
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d011      	beq.n	8002846 <menu+0x1c3e>
			eepromData[19] = platformSilindirTipi;
 8002822:	4b79      	ldr	r3, [pc, #484]	@ (8002a08 <menu+0x1e00>)
 8002824:	781a      	ldrb	r2, [r3, #0]
 8002826:	4b7c      	ldr	r3, [pc, #496]	@ (8002a18 <menu+0x1e10>)
 8002828:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800282a:	4b77      	ldr	r3, [pc, #476]	@ (8002a08 <menu+0x1e00>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d106      	bne.n	8002840 <menu+0x1c38>
				altLimit = 1;
 8002832:	4b7a      	ldr	r3, [pc, #488]	@ (8002a1c <menu+0x1e14>)
 8002834:	2201      	movs	r2, #1
 8002836:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002838:	4b78      	ldr	r3, [pc, #480]	@ (8002a1c <menu+0x1e14>)
 800283a:	781a      	ldrb	r2, [r3, #0]
 800283c:	4b76      	ldr	r3, [pc, #472]	@ (8002a18 <menu+0x1e10>)
 800283e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002840:	4b77      	ldr	r3, [pc, #476]	@ (8002a20 <menu+0x1e18>)
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002846:	4b77      	ldr	r3, [pc, #476]	@ (8002a24 <menu+0x1e1c>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b16      	cmp	r3, #22
 800284c:	d164      	bne.n	8002918 <menu+0x1d10>
		lcd_print(1, 1, yukariValfSureText);
 800284e:	4a76      	ldr	r2, [pc, #472]	@ (8002a28 <menu+0x1e20>)
 8002850:	2101      	movs	r1, #1
 8002852:	2001      	movs	r0, #1
 8002854:	f006 f85b 	bl	800890e <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002858:	4a74      	ldr	r2, [pc, #464]	@ (8002a2c <menu+0x1e24>)
 800285a:	2101      	movs	r1, #1
 800285c:	2002      	movs	r0, #2
 800285e:	f006 f856 	bl	800890e <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8002862:	4b73      	ldr	r3, [pc, #460]	@ (8002a30 <menu+0x1e28>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	220a      	movs	r2, #10
 8002868:	4972      	ldr	r1, [pc, #456]	@ (8002a34 <menu+0x1e2c>)
 800286a:	4618      	mov	r0, r3
 800286c:	f009 fd4c 	bl	800c308 <itoa>
		lcd_print(2,16,snum);
 8002870:	4a70      	ldr	r2, [pc, #448]	@ (8002a34 <menu+0x1e2c>)
 8002872:	2110      	movs	r1, #16
 8002874:	2002      	movs	r0, #2
 8002876:	f006 f84a 	bl	800890e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800287a:	2102      	movs	r1, #2
 800287c:	4864      	ldr	r0, [pc, #400]	@ (8002a10 <menu+0x1e08>)
 800287e:	f007 f9a1 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002882:	4603      	mov	r3, r0
 8002884:	2b01      	cmp	r3, #1
 8002886:	d115      	bne.n	80028b4 <menu+0x1cac>
 8002888:	4b62      	ldr	r3, [pc, #392]	@ (8002a14 <menu+0x1e0c>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	f083 0301 	eor.w	r3, r3, #1
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00e      	beq.n	80028b4 <menu+0x1cac>
			yukariValfTmr = yukariValfTmr + 1;
 8002896:	4b66      	ldr	r3, [pc, #408]	@ (8002a30 <menu+0x1e28>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	3301      	adds	r3, #1
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4b64      	ldr	r3, [pc, #400]	@ (8002a30 <menu+0x1e28>)
 80028a0:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80028a2:	4b63      	ldr	r3, [pc, #396]	@ (8002a30 <menu+0x1e28>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b05      	cmp	r3, #5
 80028a8:	d902      	bls.n	80028b0 <menu+0x1ca8>
				yukariValfTmr = 0;
 80028aa:	4b61      	ldr	r3, [pc, #388]	@ (8002a30 <menu+0x1e28>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028b0:	f000 fdae 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028b4:	2104      	movs	r1, #4
 80028b6:	4856      	ldr	r0, [pc, #344]	@ (8002a10 <menu+0x1e08>)
 80028b8:	f007 f984 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d115      	bne.n	80028ee <menu+0x1ce6>
 80028c2:	4b54      	ldr	r3, [pc, #336]	@ (8002a14 <menu+0x1e0c>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	f083 0301 	eor.w	r3, r3, #1
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00e      	beq.n	80028ee <menu+0x1ce6>
			yukariValfTmr = yukariValfTmr - 1;
 80028d0:	4b57      	ldr	r3, [pc, #348]	@ (8002a30 <menu+0x1e28>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	4b55      	ldr	r3, [pc, #340]	@ (8002a30 <menu+0x1e28>)
 80028da:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80028dc:	4b54      	ldr	r3, [pc, #336]	@ (8002a30 <menu+0x1e28>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b06      	cmp	r3, #6
 80028e2:	d902      	bls.n	80028ea <menu+0x1ce2>
		   		yukariValfTmr = 5;
 80028e4:	4b52      	ldr	r3, [pc, #328]	@ (8002a30 <menu+0x1e28>)
 80028e6:	2205      	movs	r2, #5
 80028e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028ea:	f000 fd91 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028ee:	2108      	movs	r1, #8
 80028f0:	4847      	ldr	r0, [pc, #284]	@ (8002a10 <menu+0x1e08>)
 80028f2:	f007 f967 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d10d      	bne.n	8002918 <menu+0x1d10>
 80028fc:	4b45      	ldr	r3, [pc, #276]	@ (8002a14 <menu+0x1e0c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	f083 0301 	eor.w	r3, r3, #1
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <menu+0x1d10>
			eepromData[20] = yukariValfTmr;
 800290a:	4b49      	ldr	r3, [pc, #292]	@ (8002a30 <menu+0x1e28>)
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	4b42      	ldr	r3, [pc, #264]	@ (8002a18 <menu+0x1e10>)
 8002910:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002912:	4b43      	ldr	r3, [pc, #268]	@ (8002a20 <menu+0x1e18>)
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002918:	4b42      	ldr	r3, [pc, #264]	@ (8002a24 <menu+0x1e1c>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b17      	cmp	r3, #23
 800291e:	d164      	bne.n	80029ea <menu+0x1de2>
		lcd_print(1, 1, asagiValfSureText);
 8002920:	4a45      	ldr	r2, [pc, #276]	@ (8002a38 <menu+0x1e30>)
 8002922:	2101      	movs	r1, #1
 8002924:	2001      	movs	r0, #1
 8002926:	f005 fff2 	bl	800890e <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 800292a:	4a40      	ldr	r2, [pc, #256]	@ (8002a2c <menu+0x1e24>)
 800292c:	2101      	movs	r1, #1
 800292e:	2002      	movs	r0, #2
 8002930:	f005 ffed 	bl	800890e <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 8002934:	4b41      	ldr	r3, [pc, #260]	@ (8002a3c <menu+0x1e34>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	220a      	movs	r2, #10
 800293a:	493e      	ldr	r1, [pc, #248]	@ (8002a34 <menu+0x1e2c>)
 800293c:	4618      	mov	r0, r3
 800293e:	f009 fce3 	bl	800c308 <itoa>
		lcd_print(2,16,snum);
 8002942:	4a3c      	ldr	r2, [pc, #240]	@ (8002a34 <menu+0x1e2c>)
 8002944:	2110      	movs	r1, #16
 8002946:	2002      	movs	r0, #2
 8002948:	f005 ffe1 	bl	800890e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800294c:	2102      	movs	r1, #2
 800294e:	4830      	ldr	r0, [pc, #192]	@ (8002a10 <menu+0x1e08>)
 8002950:	f007 f938 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002954:	4603      	mov	r3, r0
 8002956:	2b01      	cmp	r3, #1
 8002958:	d115      	bne.n	8002986 <menu+0x1d7e>
 800295a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a14 <menu+0x1e0c>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	f083 0301 	eor.w	r3, r3, #1
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00e      	beq.n	8002986 <menu+0x1d7e>
			asagiValfTmr = asagiValfTmr + 1;
 8002968:	4b34      	ldr	r3, [pc, #208]	@ (8002a3c <menu+0x1e34>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	3301      	adds	r3, #1
 800296e:	b2da      	uxtb	r2, r3
 8002970:	4b32      	ldr	r3, [pc, #200]	@ (8002a3c <menu+0x1e34>)
 8002972:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002974:	4b31      	ldr	r3, [pc, #196]	@ (8002a3c <menu+0x1e34>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b05      	cmp	r3, #5
 800297a:	d902      	bls.n	8002982 <menu+0x1d7a>
				asagiValfTmr = 0;
 800297c:	4b2f      	ldr	r3, [pc, #188]	@ (8002a3c <menu+0x1e34>)
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002982:	f000 fd45 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002986:	2104      	movs	r1, #4
 8002988:	4821      	ldr	r0, [pc, #132]	@ (8002a10 <menu+0x1e08>)
 800298a:	f007 f91b 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800298e:	4603      	mov	r3, r0
 8002990:	2b01      	cmp	r3, #1
 8002992:	d115      	bne.n	80029c0 <menu+0x1db8>
 8002994:	4b1f      	ldr	r3, [pc, #124]	@ (8002a14 <menu+0x1e0c>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	f083 0301 	eor.w	r3, r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00e      	beq.n	80029c0 <menu+0x1db8>
			asagiValfTmr = asagiValfTmr - 1;
 80029a2:	4b26      	ldr	r3, [pc, #152]	@ (8002a3c <menu+0x1e34>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4b24      	ldr	r3, [pc, #144]	@ (8002a3c <menu+0x1e34>)
 80029ac:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 80029ae:	4b23      	ldr	r3, [pc, #140]	@ (8002a3c <menu+0x1e34>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b06      	cmp	r3, #6
 80029b4:	d902      	bls.n	80029bc <menu+0x1db4>
		   		asagiValfTmr = 5;
 80029b6:	4b21      	ldr	r3, [pc, #132]	@ (8002a3c <menu+0x1e34>)
 80029b8:	2205      	movs	r2, #5
 80029ba:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029bc:	f000 fd28 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029c0:	2108      	movs	r1, #8
 80029c2:	4813      	ldr	r0, [pc, #76]	@ (8002a10 <menu+0x1e08>)
 80029c4:	f007 f8fe 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d10d      	bne.n	80029ea <menu+0x1de2>
 80029ce:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <menu+0x1e0c>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	f083 0301 	eor.w	r3, r3, #1
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d006      	beq.n	80029ea <menu+0x1de2>
			eepromData[21] = asagiValfTmr;
 80029dc:	4b17      	ldr	r3, [pc, #92]	@ (8002a3c <menu+0x1e34>)
 80029de:	781a      	ldrb	r2, [r3, #0]
 80029e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a18 <menu+0x1e10>)
 80029e2:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80029e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a20 <menu+0x1e18>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80029ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002a24 <menu+0x1e1c>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b18      	cmp	r3, #24
 80029f0:	f040 8093 	bne.w	8002b1a <menu+0x1f12>
		if(devirmeYuruyusSecim == 2) {
 80029f4:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <menu+0x1e38>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d125      	bne.n	8002a48 <menu+0x1e40>
			lcd_print(1, 1, devirmeYukariValfSureText);
 80029fc:	4a11      	ldr	r2, [pc, #68]	@ (8002a44 <menu+0x1e3c>)
 80029fe:	2101      	movs	r1, #1
 8002a00:	2001      	movs	r0, #1
 8002a02:	f005 ff84 	bl	800890e <lcd_print>
 8002a06:	e028      	b.n	8002a5a <menu+0x1e52>
 8002a08:	20000db3 	.word	0x20000db3
 8002a0c:	20001240 	.word	0x20001240
 8002a10:	40010800 	.word	0x40010800
 8002a14:	20000dcf 	.word	0x20000dcf
 8002a18:	20000d00 	.word	0x20000d00
 8002a1c:	20000da6 	.word	0x20000da6
 8002a20:	20000dcc 	.word	0x20000dcc
 8002a24:	20000da0 	.word	0x20000da0
 8002a28:	20001268 	.word	0x20001268
 8002a2c:	200010b0 	.word	0x200010b0
 8002a30:	20000db4 	.word	0x20000db4
 8002a34:	20000d70 	.word	0x20000d70
 8002a38:	2000127c 	.word	0x2000127c
 8002a3c:	20000db5 	.word	0x20000db5
 8002a40:	20000daf 	.word	0x20000daf
 8002a44:	20001290 	.word	0x20001290
		} else if(devirmeYuruyusSecim == 1) {
 8002a48:	4b8c      	ldr	r3, [pc, #560]	@ (8002c7c <menu+0x2074>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d104      	bne.n	8002a5a <menu+0x1e52>
			lcd_print(1, 1, ileriValfSureText);
 8002a50:	4a8b      	ldr	r2, [pc, #556]	@ (8002c80 <menu+0x2078>)
 8002a52:	2101      	movs	r1, #1
 8002a54:	2001      	movs	r0, #1
 8002a56:	f005 ff5a 	bl	800890e <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002a5a:	4a8a      	ldr	r2, [pc, #552]	@ (8002c84 <menu+0x207c>)
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	2002      	movs	r0, #2
 8002a60:	f005 ff55 	bl	800890e <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8002a64:	4b88      	ldr	r3, [pc, #544]	@ (8002c88 <menu+0x2080>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	220a      	movs	r2, #10
 8002a6a:	4988      	ldr	r1, [pc, #544]	@ (8002c8c <menu+0x2084>)
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f009 fc4b 	bl	800c308 <itoa>
		lcd_print(2, 16, snum);
 8002a72:	4a86      	ldr	r2, [pc, #536]	@ (8002c8c <menu+0x2084>)
 8002a74:	2110      	movs	r1, #16
 8002a76:	2002      	movs	r0, #2
 8002a78:	f005 ff49 	bl	800890e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	4884      	ldr	r0, [pc, #528]	@ (8002c90 <menu+0x2088>)
 8002a80:	f007 f8a0 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d115      	bne.n	8002ab6 <menu+0x1eae>
 8002a8a:	4b82      	ldr	r3, [pc, #520]	@ (8002c94 <menu+0x208c>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	f083 0301 	eor.w	r3, r3, #1
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00e      	beq.n	8002ab6 <menu+0x1eae>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8002a98:	4b7b      	ldr	r3, [pc, #492]	@ (8002c88 <menu+0x2080>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	4b79      	ldr	r3, [pc, #484]	@ (8002c88 <menu+0x2080>)
 8002aa2:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8002aa4:	4b78      	ldr	r3, [pc, #480]	@ (8002c88 <menu+0x2080>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b05      	cmp	r3, #5
 8002aaa:	d902      	bls.n	8002ab2 <menu+0x1eaa>
				devirmeYukariIleriTmr = 0;
 8002aac:	4b76      	ldr	r3, [pc, #472]	@ (8002c88 <menu+0x2080>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ab2:	f000 fcad 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ab6:	2104      	movs	r1, #4
 8002ab8:	4875      	ldr	r0, [pc, #468]	@ (8002c90 <menu+0x2088>)
 8002aba:	f007 f883 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d115      	bne.n	8002af0 <menu+0x1ee8>
 8002ac4:	4b73      	ldr	r3, [pc, #460]	@ (8002c94 <menu+0x208c>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	f083 0301 	eor.w	r3, r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00e      	beq.n	8002af0 <menu+0x1ee8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8002ad2:	4b6d      	ldr	r3, [pc, #436]	@ (8002c88 <menu+0x2080>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	4b6b      	ldr	r3, [pc, #428]	@ (8002c88 <menu+0x2080>)
 8002adc:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8002ade:	4b6a      	ldr	r3, [pc, #424]	@ (8002c88 <menu+0x2080>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b06      	cmp	r3, #6
 8002ae4:	d902      	bls.n	8002aec <menu+0x1ee4>
		   		devirmeYukariIleriTmr = 5;
 8002ae6:	4b68      	ldr	r3, [pc, #416]	@ (8002c88 <menu+0x2080>)
 8002ae8:	2205      	movs	r2, #5
 8002aea:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002aec:	f000 fc90 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002af0:	2108      	movs	r1, #8
 8002af2:	4867      	ldr	r0, [pc, #412]	@ (8002c90 <menu+0x2088>)
 8002af4:	f007 f866 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d10d      	bne.n	8002b1a <menu+0x1f12>
 8002afe:	4b65      	ldr	r3, [pc, #404]	@ (8002c94 <menu+0x208c>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	f083 0301 	eor.w	r3, r3, #1
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d006      	beq.n	8002b1a <menu+0x1f12>
			eepromData[22] = devirmeYukariIleriTmr;
 8002b0c:	4b5e      	ldr	r3, [pc, #376]	@ (8002c88 <menu+0x2080>)
 8002b0e:	781a      	ldrb	r2, [r3, #0]
 8002b10:	4b61      	ldr	r3, [pc, #388]	@ (8002c98 <menu+0x2090>)
 8002b12:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8002b14:	4b61      	ldr	r3, [pc, #388]	@ (8002c9c <menu+0x2094>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8002b1a:	4b61      	ldr	r3, [pc, #388]	@ (8002ca0 <menu+0x2098>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b19      	cmp	r3, #25
 8002b20:	d172      	bne.n	8002c08 <menu+0x2000>
		if(devirmeYuruyusSecim == 2) {
 8002b22:	4b56      	ldr	r3, [pc, #344]	@ (8002c7c <menu+0x2074>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d105      	bne.n	8002b36 <menu+0x1f2e>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 8002b2a:	4a5e      	ldr	r2, [pc, #376]	@ (8002ca4 <menu+0x209c>)
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	2001      	movs	r0, #1
 8002b30:	f005 feed 	bl	800890e <lcd_print>
 8002b34:	e008      	b.n	8002b48 <menu+0x1f40>
		} else if(devirmeYuruyusSecim == 1) {
 8002b36:	4b51      	ldr	r3, [pc, #324]	@ (8002c7c <menu+0x2074>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d104      	bne.n	8002b48 <menu+0x1f40>
			lcd_print(1, 1, geriValfSureText);
 8002b3e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ca8 <menu+0x20a0>)
 8002b40:	2101      	movs	r1, #1
 8002b42:	2001      	movs	r0, #1
 8002b44:	f005 fee3 	bl	800890e <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002b48:	4a4e      	ldr	r2, [pc, #312]	@ (8002c84 <menu+0x207c>)
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	2002      	movs	r0, #2
 8002b4e:	f005 fede 	bl	800890e <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8002b52:	4b56      	ldr	r3, [pc, #344]	@ (8002cac <menu+0x20a4>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	220a      	movs	r2, #10
 8002b58:	494c      	ldr	r1, [pc, #304]	@ (8002c8c <menu+0x2084>)
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f009 fbd4 	bl	800c308 <itoa>
		lcd_print(2,16,snum);
 8002b60:	4a4a      	ldr	r2, [pc, #296]	@ (8002c8c <menu+0x2084>)
 8002b62:	2110      	movs	r1, #16
 8002b64:	2002      	movs	r0, #2
 8002b66:	f005 fed2 	bl	800890e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	4848      	ldr	r0, [pc, #288]	@ (8002c90 <menu+0x2088>)
 8002b6e:	f007 f829 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d115      	bne.n	8002ba4 <menu+0x1f9c>
 8002b78:	4b46      	ldr	r3, [pc, #280]	@ (8002c94 <menu+0x208c>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	f083 0301 	eor.w	r3, r3, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00e      	beq.n	8002ba4 <menu+0x1f9c>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8002b86:	4b49      	ldr	r3, [pc, #292]	@ (8002cac <menu+0x20a4>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4b47      	ldr	r3, [pc, #284]	@ (8002cac <menu+0x20a4>)
 8002b90:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8002b92:	4b46      	ldr	r3, [pc, #280]	@ (8002cac <menu+0x20a4>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b05      	cmp	r3, #5
 8002b98:	d902      	bls.n	8002ba0 <menu+0x1f98>
				devirmeAsagiGeriTmr = 0;
 8002b9a:	4b44      	ldr	r3, [pc, #272]	@ (8002cac <menu+0x20a4>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ba0:	f000 fc36 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ba4:	2104      	movs	r1, #4
 8002ba6:	483a      	ldr	r0, [pc, #232]	@ (8002c90 <menu+0x2088>)
 8002ba8:	f007 f80c 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d115      	bne.n	8002bde <menu+0x1fd6>
 8002bb2:	4b38      	ldr	r3, [pc, #224]	@ (8002c94 <menu+0x208c>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	f083 0301 	eor.w	r3, r3, #1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00e      	beq.n	8002bde <menu+0x1fd6>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8002bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8002cac <menu+0x20a4>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	4b38      	ldr	r3, [pc, #224]	@ (8002cac <menu+0x20a4>)
 8002bca:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8002bcc:	4b37      	ldr	r3, [pc, #220]	@ (8002cac <menu+0x20a4>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b06      	cmp	r3, #6
 8002bd2:	d902      	bls.n	8002bda <menu+0x1fd2>
		   		devirmeAsagiGeriTmr = 5;
 8002bd4:	4b35      	ldr	r3, [pc, #212]	@ (8002cac <menu+0x20a4>)
 8002bd6:	2205      	movs	r2, #5
 8002bd8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bda:	f000 fc19 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bde:	2108      	movs	r1, #8
 8002be0:	482b      	ldr	r0, [pc, #172]	@ (8002c90 <menu+0x2088>)
 8002be2:	f006 ffef 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d10d      	bne.n	8002c08 <menu+0x2000>
 8002bec:	4b29      	ldr	r3, [pc, #164]	@ (8002c94 <menu+0x208c>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	f083 0301 	eor.w	r3, r3, #1
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d006      	beq.n	8002c08 <menu+0x2000>
			eepromData[23] = devirmeAsagiGeriTmr;
 8002bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8002cac <menu+0x20a4>)
 8002bfc:	781a      	ldrb	r2, [r3, #0]
 8002bfe:	4b26      	ldr	r3, [pc, #152]	@ (8002c98 <menu+0x2090>)
 8002c00:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8002c02:	4b26      	ldr	r3, [pc, #152]	@ (8002c9c <menu+0x2094>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8002c08:	4b25      	ldr	r3, [pc, #148]	@ (8002ca0 <menu+0x2098>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b1a      	cmp	r3, #26
 8002c0e:	f040 80b7 	bne.w	8002d80 <menu+0x2178>
		lcd_print(1, 1, calismaSuresiText);
 8002c12:	4a27      	ldr	r2, [pc, #156]	@ (8002cb0 <menu+0x20a8>)
 8002c14:	2101      	movs	r1, #1
 8002c16:	2001      	movs	r0, #1
 8002c18:	f005 fe79 	bl	800890e <lcd_print>

		if(makineCalismaTmr > 99) {
 8002c1c:	4b25      	ldr	r3, [pc, #148]	@ (8002cb4 <menu+0x20ac>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b63      	cmp	r3, #99	@ 0x63
 8002c22:	d911      	bls.n	8002c48 <menu+0x2040>
			lcd_print(2, 1, kacSaniyeText);
 8002c24:	4a17      	ldr	r2, [pc, #92]	@ (8002c84 <menu+0x207c>)
 8002c26:	2101      	movs	r1, #1
 8002c28:	2002      	movs	r0, #2
 8002c2a:	f005 fe70 	bl	800890e <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8002c2e:	4b21      	ldr	r3, [pc, #132]	@ (8002cb4 <menu+0x20ac>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	220a      	movs	r2, #10
 8002c34:	4915      	ldr	r1, [pc, #84]	@ (8002c8c <menu+0x2084>)
 8002c36:	4618      	mov	r0, r3
 8002c38:	f009 fb66 	bl	800c308 <itoa>
			lcd_print(2,14,snum);
 8002c3c:	4a13      	ldr	r2, [pc, #76]	@ (8002c8c <menu+0x2084>)
 8002c3e:	210e      	movs	r1, #14
 8002c40:	2002      	movs	r0, #2
 8002c42:	f005 fe64 	bl	800890e <lcd_print>
 8002c46:	e04c      	b.n	8002ce2 <menu+0x20da>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8002c48:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb4 <menu+0x20ac>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b09      	cmp	r3, #9
 8002c4e:	d933      	bls.n	8002cb8 <menu+0x20b0>
 8002c50:	4b18      	ldr	r3, [pc, #96]	@ (8002cb4 <menu+0x20ac>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b63      	cmp	r3, #99	@ 0x63
 8002c56:	d82f      	bhi.n	8002cb8 <menu+0x20b0>
			lcd_print(2, 1, kacSaniyeText);
 8002c58:	4a0a      	ldr	r2, [pc, #40]	@ (8002c84 <menu+0x207c>)
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	2002      	movs	r0, #2
 8002c5e:	f005 fe56 	bl	800890e <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8002c62:	4b14      	ldr	r3, [pc, #80]	@ (8002cb4 <menu+0x20ac>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	220a      	movs	r2, #10
 8002c68:	4908      	ldr	r1, [pc, #32]	@ (8002c8c <menu+0x2084>)
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f009 fb4c 	bl	800c308 <itoa>
			lcd_print(2, 15, snum);
 8002c70:	4a06      	ldr	r2, [pc, #24]	@ (8002c8c <menu+0x2084>)
 8002c72:	210f      	movs	r1, #15
 8002c74:	2002      	movs	r0, #2
 8002c76:	f005 fe4a 	bl	800890e <lcd_print>
 8002c7a:	e032      	b.n	8002ce2 <menu+0x20da>
 8002c7c:	20000daf 	.word	0x20000daf
 8002c80:	200012a4 	.word	0x200012a4
 8002c84:	200010b0 	.word	0x200010b0
 8002c88:	20000db6 	.word	0x20000db6
 8002c8c:	20000d70 	.word	0x20000d70
 8002c90:	40010800 	.word	0x40010800
 8002c94:	20000dcf 	.word	0x20000dcf
 8002c98:	20000d00 	.word	0x20000d00
 8002c9c:	20000dcc 	.word	0x20000dcc
 8002ca0:	20000da0 	.word	0x20000da0
 8002ca4:	200012b8 	.word	0x200012b8
 8002ca8:	200012cc 	.word	0x200012cc
 8002cac:	20000db7 	.word	0x20000db7
 8002cb0:	200012e0 	.word	0x200012e0
 8002cb4:	20000db8 	.word	0x20000db8
		} else if(makineCalismaTmr <=  9) {
 8002cb8:	4b72      	ldr	r3, [pc, #456]	@ (8002e84 <menu+0x227c>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b09      	cmp	r3, #9
 8002cbe:	d810      	bhi.n	8002ce2 <menu+0x20da>
			lcd_print(2, 1, kacSaniyeText);
 8002cc0:	4a71      	ldr	r2, [pc, #452]	@ (8002e88 <menu+0x2280>)
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	2002      	movs	r0, #2
 8002cc6:	f005 fe22 	bl	800890e <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8002cca:	4b6e      	ldr	r3, [pc, #440]	@ (8002e84 <menu+0x227c>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	220a      	movs	r2, #10
 8002cd0:	496e      	ldr	r1, [pc, #440]	@ (8002e8c <menu+0x2284>)
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f009 fb18 	bl	800c308 <itoa>
			lcd_print(2, 16, snum);
 8002cd8:	4a6c      	ldr	r2, [pc, #432]	@ (8002e8c <menu+0x2284>)
 8002cda:	2110      	movs	r1, #16
 8002cdc:	2002      	movs	r0, #2
 8002cde:	f005 fe16 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	486a      	ldr	r0, [pc, #424]	@ (8002e90 <menu+0x2288>)
 8002ce6:	f006 ff6d 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d115      	bne.n	8002d1c <menu+0x2114>
 8002cf0:	4b68      	ldr	r3, [pc, #416]	@ (8002e94 <menu+0x228c>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	f083 0301 	eor.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00e      	beq.n	8002d1c <menu+0x2114>
			makineCalismaTmr = makineCalismaTmr + 1;
 8002cfe:	4b61      	ldr	r3, [pc, #388]	@ (8002e84 <menu+0x227c>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	3301      	adds	r3, #1
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	4b5f      	ldr	r3, [pc, #380]	@ (8002e84 <menu+0x227c>)
 8002d08:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8002d0a:	4b5e      	ldr	r3, [pc, #376]	@ (8002e84 <menu+0x227c>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2bb4      	cmp	r3, #180	@ 0xb4
 8002d10:	d902      	bls.n	8002d18 <menu+0x2110>
				makineCalismaTmr = 0;
 8002d12:	4b5c      	ldr	r3, [pc, #368]	@ (8002e84 <menu+0x227c>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d18:	f000 fb7a 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d1c:	2104      	movs	r1, #4
 8002d1e:	485c      	ldr	r0, [pc, #368]	@ (8002e90 <menu+0x2288>)
 8002d20:	f006 ff50 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d115      	bne.n	8002d56 <menu+0x214e>
 8002d2a:	4b5a      	ldr	r3, [pc, #360]	@ (8002e94 <menu+0x228c>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	f083 0301 	eor.w	r3, r3, #1
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00e      	beq.n	8002d56 <menu+0x214e>
			makineCalismaTmr = makineCalismaTmr - 1;
 8002d38:	4b52      	ldr	r3, [pc, #328]	@ (8002e84 <menu+0x227c>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	4b50      	ldr	r3, [pc, #320]	@ (8002e84 <menu+0x227c>)
 8002d42:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8002d44:	4b4f      	ldr	r3, [pc, #316]	@ (8002e84 <menu+0x227c>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2bb5      	cmp	r3, #181	@ 0xb5
 8002d4a:	d902      	bls.n	8002d52 <menu+0x214a>
		   		makineCalismaTmr = 180;
 8002d4c:	4b4d      	ldr	r3, [pc, #308]	@ (8002e84 <menu+0x227c>)
 8002d4e:	22b4      	movs	r2, #180	@ 0xb4
 8002d50:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d52:	f000 fb5d 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d56:	2108      	movs	r1, #8
 8002d58:	484d      	ldr	r0, [pc, #308]	@ (8002e90 <menu+0x2288>)
 8002d5a:	f006 ff33 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d10d      	bne.n	8002d80 <menu+0x2178>
 8002d64:	4b4b      	ldr	r3, [pc, #300]	@ (8002e94 <menu+0x228c>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	f083 0301 	eor.w	r3, r3, #1
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d006      	beq.n	8002d80 <menu+0x2178>
			eepromData[24] = makineCalismaTmr;
 8002d72:	4b44      	ldr	r3, [pc, #272]	@ (8002e84 <menu+0x227c>)
 8002d74:	781a      	ldrb	r2, [r3, #0]
 8002d76:	4b48      	ldr	r3, [pc, #288]	@ (8002e98 <menu+0x2290>)
 8002d78:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8002d7a:	4b48      	ldr	r3, [pc, #288]	@ (8002e9c <menu+0x2294>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8002d80:	4b47      	ldr	r3, [pc, #284]	@ (8002ea0 <menu+0x2298>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b1b      	cmp	r3, #27
 8002d86:	d166      	bne.n	8002e56 <menu+0x224e>
		lcd_print(1, 1, buzzerTextGN);
 8002d88:	4a46      	ldr	r2, [pc, #280]	@ (8002ea4 <menu+0x229c>)
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	f005 fdbe 	bl	800890e <lcd_print>

		if(buzzer == 0) {
 8002d92:	4b45      	ldr	r3, [pc, #276]	@ (8002ea8 <menu+0x22a0>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d105      	bne.n	8002da6 <menu+0x219e>
			lcd_print(2, 1, pasifText);
 8002d9a:	4a44      	ldr	r2, [pc, #272]	@ (8002eac <menu+0x22a4>)
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	2002      	movs	r0, #2
 8002da0:	f005 fdb5 	bl	800890e <lcd_print>
 8002da4:	e008      	b.n	8002db8 <menu+0x21b0>
		} else if(buzzer == 1) {
 8002da6:	4b40      	ldr	r3, [pc, #256]	@ (8002ea8 <menu+0x22a0>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d104      	bne.n	8002db8 <menu+0x21b0>
			lcd_print(2, 1, aktifText);
 8002dae:	4a40      	ldr	r2, [pc, #256]	@ (8002eb0 <menu+0x22a8>)
 8002db0:	2101      	movs	r1, #1
 8002db2:	2002      	movs	r0, #2
 8002db4:	f005 fdab 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002db8:	2102      	movs	r1, #2
 8002dba:	4835      	ldr	r0, [pc, #212]	@ (8002e90 <menu+0x2288>)
 8002dbc:	f006 ff02 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d115      	bne.n	8002df2 <menu+0x21ea>
 8002dc6:	4b33      	ldr	r3, [pc, #204]	@ (8002e94 <menu+0x228c>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	f083 0301 	eor.w	r3, r3, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00e      	beq.n	8002df2 <menu+0x21ea>
			buzzer = buzzer + 1;
 8002dd4:	4b34      	ldr	r3, [pc, #208]	@ (8002ea8 <menu+0x22a0>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	4b32      	ldr	r3, [pc, #200]	@ (8002ea8 <menu+0x22a0>)
 8002dde:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8002de0:	4b31      	ldr	r3, [pc, #196]	@ (8002ea8 <menu+0x22a0>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d902      	bls.n	8002dee <menu+0x21e6>
				buzzer = 0;
 8002de8:	4b2f      	ldr	r3, [pc, #188]	@ (8002ea8 <menu+0x22a0>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002dee:	f000 fb0f 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002df2:	2104      	movs	r1, #4
 8002df4:	4826      	ldr	r0, [pc, #152]	@ (8002e90 <menu+0x2288>)
 8002df6:	f006 fee5 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d115      	bne.n	8002e2c <menu+0x2224>
 8002e00:	4b24      	ldr	r3, [pc, #144]	@ (8002e94 <menu+0x228c>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	f083 0301 	eor.w	r3, r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00e      	beq.n	8002e2c <menu+0x2224>
			buzzer = buzzer - 1;
 8002e0e:	4b26      	ldr	r3, [pc, #152]	@ (8002ea8 <menu+0x22a0>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	4b24      	ldr	r3, [pc, #144]	@ (8002ea8 <menu+0x22a0>)
 8002e18:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8002e1a:	4b23      	ldr	r3, [pc, #140]	@ (8002ea8 <menu+0x22a0>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <menu+0x2220>
		   		buzzer = 1;
 8002e22:	4b21      	ldr	r3, [pc, #132]	@ (8002ea8 <menu+0x22a0>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e28:	f000 faf2 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e2c:	2108      	movs	r1, #8
 8002e2e:	4818      	ldr	r0, [pc, #96]	@ (8002e90 <menu+0x2288>)
 8002e30:	f006 fec8 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d10d      	bne.n	8002e56 <menu+0x224e>
 8002e3a:	4b16      	ldr	r3, [pc, #88]	@ (8002e94 <menu+0x228c>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	f083 0301 	eor.w	r3, r3, #1
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d006      	beq.n	8002e56 <menu+0x224e>
			eepromData[25] = buzzer;
 8002e48:	4b17      	ldr	r3, [pc, #92]	@ (8002ea8 <menu+0x22a0>)
 8002e4a:	781a      	ldrb	r2, [r3, #0]
 8002e4c:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <menu+0x2290>)
 8002e4e:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8002e50:	4b12      	ldr	r3, [pc, #72]	@ (8002e9c <menu+0x2294>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8002e56:	4b12      	ldr	r3, [pc, #72]	@ (8002ea0 <menu+0x2298>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b1c      	cmp	r3, #28
 8002e5c:	f040 8088 	bne.w	8002f70 <menu+0x2368>
		calismaSayModu = 0;
 8002e60:	4b14      	ldr	r3, [pc, #80]	@ (8002eb4 <menu+0x22ac>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 8002e66:	4a14      	ldr	r2, [pc, #80]	@ (8002eb8 <menu+0x22b0>)
 8002e68:	2101      	movs	r1, #1
 8002e6a:	2001      	movs	r0, #1
 8002e6c:	f005 fd4f 	bl	800890e <lcd_print>

		if(demoMode == 0) {
 8002e70:	4b12      	ldr	r3, [pc, #72]	@ (8002ebc <menu+0x22b4>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d123      	bne.n	8002ec0 <menu+0x22b8>
			lcd_print(2, 1, pasifText);
 8002e78:	4a0c      	ldr	r2, [pc, #48]	@ (8002eac <menu+0x22a4>)
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	2002      	movs	r0, #2
 8002e7e:	f005 fd46 	bl	800890e <lcd_print>
 8002e82:	e026      	b.n	8002ed2 <menu+0x22ca>
 8002e84:	20000db8 	.word	0x20000db8
 8002e88:	200010b0 	.word	0x200010b0
 8002e8c:	20000d70 	.word	0x20000d70
 8002e90:	40010800 	.word	0x40010800
 8002e94:	20000dcf 	.word	0x20000dcf
 8002e98:	20000d00 	.word	0x20000d00
 8002e9c:	20000dcc 	.word	0x20000dcc
 8002ea0:	20000da0 	.word	0x20000da0
 8002ea4:	200000bc 	.word	0x200000bc
 8002ea8:	20000dbc 	.word	0x20000dbc
 8002eac:	20000f84 	.word	0x20000f84
 8002eb0:	20000f98 	.word	0x20000f98
 8002eb4:	20000dc0 	.word	0x20000dc0
 8002eb8:	200000d0 	.word	0x200000d0
 8002ebc:	20000dbe 	.word	0x20000dbe
		} else if(demoMode == 1) {
 8002ec0:	4b7d      	ldr	r3, [pc, #500]	@ (80030b8 <menu+0x24b0>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d104      	bne.n	8002ed2 <menu+0x22ca>
			lcd_print(2, 1, aktifText);
 8002ec8:	4a7c      	ldr	r2, [pc, #496]	@ (80030bc <menu+0x24b4>)
 8002eca:	2101      	movs	r1, #1
 8002ecc:	2002      	movs	r0, #2
 8002ece:	f005 fd1e 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	487a      	ldr	r0, [pc, #488]	@ (80030c0 <menu+0x24b8>)
 8002ed6:	f006 fe75 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d115      	bne.n	8002f0c <menu+0x2304>
 8002ee0:	4b78      	ldr	r3, [pc, #480]	@ (80030c4 <menu+0x24bc>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	f083 0301 	eor.w	r3, r3, #1
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00e      	beq.n	8002f0c <menu+0x2304>
			demoMode = demoMode + 1;
 8002eee:	4b72      	ldr	r3, [pc, #456]	@ (80030b8 <menu+0x24b0>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4b70      	ldr	r3, [pc, #448]	@ (80030b8 <menu+0x24b0>)
 8002ef8:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8002efa:	4b6f      	ldr	r3, [pc, #444]	@ (80030b8 <menu+0x24b0>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d902      	bls.n	8002f08 <menu+0x2300>
				demoMode = 0;
 8002f02:	4b6d      	ldr	r3, [pc, #436]	@ (80030b8 <menu+0x24b0>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f08:	f000 fa82 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f0c:	2104      	movs	r1, #4
 8002f0e:	486c      	ldr	r0, [pc, #432]	@ (80030c0 <menu+0x24b8>)
 8002f10:	f006 fe58 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d115      	bne.n	8002f46 <menu+0x233e>
 8002f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80030c4 <menu+0x24bc>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	f083 0301 	eor.w	r3, r3, #1
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00e      	beq.n	8002f46 <menu+0x233e>
			demoMode = demoMode - 1;
 8002f28:	4b63      	ldr	r3, [pc, #396]	@ (80030b8 <menu+0x24b0>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	4b61      	ldr	r3, [pc, #388]	@ (80030b8 <menu+0x24b0>)
 8002f32:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8002f34:	4b60      	ldr	r3, [pc, #384]	@ (80030b8 <menu+0x24b0>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <menu+0x233a>
		   		demoMode = 1;
 8002f3c:	4b5e      	ldr	r3, [pc, #376]	@ (80030b8 <menu+0x24b0>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f42:	f000 fa65 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f46:	2108      	movs	r1, #8
 8002f48:	485d      	ldr	r0, [pc, #372]	@ (80030c0 <menu+0x24b8>)
 8002f4a:	f006 fe3b 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d10d      	bne.n	8002f70 <menu+0x2368>
 8002f54:	4b5b      	ldr	r3, [pc, #364]	@ (80030c4 <menu+0x24bc>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	f083 0301 	eor.w	r3, r3, #1
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d006      	beq.n	8002f70 <menu+0x2368>
			eepromData[26] = demoMode;
 8002f62:	4b55      	ldr	r3, [pc, #340]	@ (80030b8 <menu+0x24b0>)
 8002f64:	781a      	ldrb	r2, [r3, #0]
 8002f66:	4b58      	ldr	r3, [pc, #352]	@ (80030c8 <menu+0x24c0>)
 8002f68:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8002f6a:	4b58      	ldr	r3, [pc, #352]	@ (80030cc <menu+0x24c4>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8002f70:	4b57      	ldr	r3, [pc, #348]	@ (80030d0 <menu+0x24c8>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b1d      	cmp	r3, #29
 8002f76:	f040 80c9 	bne.w	800310c <menu+0x2504>
		finalCount=0;
 8002f7a:	4b56      	ldr	r3, [pc, #344]	@ (80030d4 <menu+0x24cc>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 8002f80:	4b55      	ldr	r3, [pc, #340]	@ (80030d8 <menu+0x24d0>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d135      	bne.n	8002ff4 <menu+0x23ec>
			lcd_print(1, 1, calismaSayisiText);
 8002f88:	4a54      	ldr	r2, [pc, #336]	@ (80030dc <menu+0x24d4>)
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	f005 fcbe 	bl	800890e <lcd_print>

			if(demoMode == 1) {
 8002f92:	4b49      	ldr	r3, [pc, #292]	@ (80030b8 <menu+0x24b0>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d113      	bne.n	8002fc2 <menu+0x23ba>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 8002f9a:	4b51      	ldr	r3, [pc, #324]	@ (80030e0 <menu+0x24d8>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	1a9a      	subs	r2, r3, r2
 8002fa6:	4b4b      	ldr	r3, [pc, #300]	@ (80030d4 <menu+0x24cc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	4a49      	ldr	r2, [pc, #292]	@ (80030d4 <menu+0x24cc>)
 8002fae:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8002fb0:	4b4c      	ldr	r3, [pc, #304]	@ (80030e4 <menu+0x24dc>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4b47      	ldr	r3, [pc, #284]	@ (80030d4 <menu+0x24cc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a45      	ldr	r2, [pc, #276]	@ (80030d4 <menu+0x24cc>)
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	e012      	b.n	8002fe8 <menu+0x23e0>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 8002fc2:	4b49      	ldr	r3, [pc, #292]	@ (80030e8 <menu+0x24e0>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4613      	mov	r3, r2
 8002fca:	021b      	lsls	r3, r3, #8
 8002fcc:	1a9a      	subs	r2, r3, r2
 8002fce:	4b41      	ldr	r3, [pc, #260]	@ (80030d4 <menu+0x24cc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	4a3f      	ldr	r2, [pc, #252]	@ (80030d4 <menu+0x24cc>)
 8002fd6:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 8002fd8:	4b44      	ldr	r3, [pc, #272]	@ (80030ec <menu+0x24e4>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4b3d      	ldr	r3, [pc, #244]	@ (80030d4 <menu+0x24cc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	4a3b      	ldr	r2, [pc, #236]	@ (80030d4 <menu+0x24cc>)
 8002fe6:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 8002fe8:	4b3a      	ldr	r3, [pc, #232]	@ (80030d4 <menu+0x24cc>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 f965 	bl	80032bc <displayCycleOnLCD>
 8002ff2:	e00d      	b.n	8003010 <menu+0x2408>
		} else if(calismaSayModu == 1) {
 8002ff4:	4b38      	ldr	r3, [pc, #224]	@ (80030d8 <menu+0x24d0>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d109      	bne.n	8003010 <menu+0x2408>
			lcd_print(1, 1, calismaSayisiText);
 8002ffc:	4a37      	ldr	r2, [pc, #220]	@ (80030dc <menu+0x24d4>)
 8002ffe:	2101      	movs	r1, #1
 8003000:	2001      	movs	r0, #1
 8003002:	f005 fc84 	bl	800890e <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8003006:	4a3a      	ldr	r2, [pc, #232]	@ (80030f0 <menu+0x24e8>)
 8003008:	2101      	movs	r1, #1
 800300a:	2002      	movs	r0, #2
 800300c:	f005 fc7f 	bl	800890e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003010:	2102      	movs	r1, #2
 8003012:	482b      	ldr	r0, [pc, #172]	@ (80030c0 <menu+0x24b8>)
 8003014:	f006 fdd6 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003018:	4603      	mov	r3, r0
 800301a:	2b01      	cmp	r3, #1
 800301c:	d115      	bne.n	800304a <menu+0x2442>
 800301e:	4b29      	ldr	r3, [pc, #164]	@ (80030c4 <menu+0x24bc>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	f083 0301 	eor.w	r3, r3, #1
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00e      	beq.n	800304a <menu+0x2442>
			calismaSayModu = calismaSayModu + 1;
 800302c:	4b2a      	ldr	r3, [pc, #168]	@ (80030d8 <menu+0x24d0>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	b2da      	uxtb	r2, r3
 8003034:	4b28      	ldr	r3, [pc, #160]	@ (80030d8 <menu+0x24d0>)
 8003036:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003038:	4b27      	ldr	r3, [pc, #156]	@ (80030d8 <menu+0x24d0>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d902      	bls.n	8003046 <menu+0x243e>
				calismaSayModu = 0;
 8003040:	4b25      	ldr	r3, [pc, #148]	@ (80030d8 <menu+0x24d0>)
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003046:	f000 f9e3 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800304a:	2104      	movs	r1, #4
 800304c:	481c      	ldr	r0, [pc, #112]	@ (80030c0 <menu+0x24b8>)
 800304e:	f006 fdb9 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003052:	4603      	mov	r3, r0
 8003054:	2b01      	cmp	r3, #1
 8003056:	d115      	bne.n	8003084 <menu+0x247c>
 8003058:	4b1a      	ldr	r3, [pc, #104]	@ (80030c4 <menu+0x24bc>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	f083 0301 	eor.w	r3, r3, #1
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00e      	beq.n	8003084 <menu+0x247c>
			calismaSayModu = calismaSayModu - 1;
 8003066:	4b1c      	ldr	r3, [pc, #112]	@ (80030d8 <menu+0x24d0>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	3b01      	subs	r3, #1
 800306c:	b2da      	uxtb	r2, r3
 800306e:	4b1a      	ldr	r3, [pc, #104]	@ (80030d8 <menu+0x24d0>)
 8003070:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003072:	4b19      	ldr	r3, [pc, #100]	@ (80030d8 <menu+0x24d0>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <menu+0x2478>
		   		calismaSayModu = 1;
 800307a:	4b17      	ldr	r3, [pc, #92]	@ (80030d8 <menu+0x24d0>)
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003080:	f000 f9c6 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003084:	2108      	movs	r1, #8
 8003086:	480e      	ldr	r0, [pc, #56]	@ (80030c0 <menu+0x24b8>)
 8003088:	f006 fd9c 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800308c:	4603      	mov	r3, r0
 800308e:	2b01      	cmp	r3, #1
 8003090:	d13c      	bne.n	800310c <menu+0x2504>
 8003092:	4b0c      	ldr	r3, [pc, #48]	@ (80030c4 <menu+0x24bc>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	f083 0301 	eor.w	r3, r3, #1
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d035      	beq.n	800310c <menu+0x2504>
			if(demoMode == 1) {
 80030a0:	4b05      	ldr	r3, [pc, #20]	@ (80030b8 <menu+0x24b0>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d125      	bne.n	80030f4 <menu+0x24ec>
				eepromData[28] = 0;
 80030a8:	4b07      	ldr	r3, [pc, #28]	@ (80030c8 <menu+0x24c0>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 80030ae:	4b06      	ldr	r3, [pc, #24]	@ (80030c8 <menu+0x24c0>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	779a      	strb	r2, [r3, #30]
 80030b4:	e024      	b.n	8003100 <menu+0x24f8>
 80030b6:	bf00      	nop
 80030b8:	20000dbe 	.word	0x20000dbe
 80030bc:	20000f98 	.word	0x20000f98
 80030c0:	40010800 	.word	0x40010800
 80030c4:	20000dcf 	.word	0x20000dcf
 80030c8:	20000d00 	.word	0x20000d00
 80030cc:	20000dcc 	.word	0x20000dcc
 80030d0:	20000da0 	.word	0x20000da0
 80030d4:	20000d9c 	.word	0x20000d9c
 80030d8:	20000dc0 	.word	0x20000dc0
 80030dc:	200012f4 	.word	0x200012f4
 80030e0:	20000d9b 	.word	0x20000d9b
 80030e4:	20000d99 	.word	0x20000d99
 80030e8:	20000d9a 	.word	0x20000d9a
 80030ec:	20000d98 	.word	0x20000d98
 80030f0:	20001308 	.word	0x20001308
			} else {
				eepromData[27] = 0;
 80030f4:	4b64      	ldr	r3, [pc, #400]	@ (8003288 <menu+0x2680>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 80030fa:	4b63      	ldr	r3, [pc, #396]	@ (8003288 <menu+0x2680>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	775a      	strb	r2, [r3, #29]
			}
			calismaSayModu = 0;
 8003100:	4b62      	ldr	r3, [pc, #392]	@ (800328c <menu+0x2684>)
 8003102:	2200      	movs	r2, #0
 8003104:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003106:	4b62      	ldr	r3, [pc, #392]	@ (8003290 <menu+0x2688>)
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800310c:	4b61      	ldr	r3, [pc, #388]	@ (8003294 <menu+0x268c>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b1e      	cmp	r3, #30
 8003112:	d16a      	bne.n	80031ea <menu+0x25e2>
		calismaSayModu = 0;
 8003114:	4b5d      	ldr	r3, [pc, #372]	@ (800328c <menu+0x2684>)
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 800311a:	4a5f      	ldr	r2, [pc, #380]	@ (8003298 <menu+0x2690>)
 800311c:	2101      	movs	r1, #1
 800311e:	2001      	movs	r0, #1
 8003120:	f005 fbf5 	bl	800890e <lcd_print>
		lcd_print(2, 1, secilenDilText);
 8003124:	4a5d      	ldr	r2, [pc, #372]	@ (800329c <menu+0x2694>)
 8003126:	2101      	movs	r1, #1
 8003128:	2002      	movs	r0, #2
 800312a:	f005 fbf0 	bl	800890e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800312e:	2102      	movs	r1, #2
 8003130:	485b      	ldr	r0, [pc, #364]	@ (80032a0 <menu+0x2698>)
 8003132:	f006 fd47 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003136:	4603      	mov	r3, r0
 8003138:	2b01      	cmp	r3, #1
 800313a:	d11c      	bne.n	8003176 <menu+0x256e>
 800313c:	4b59      	ldr	r3, [pc, #356]	@ (80032a4 <menu+0x269c>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	f083 0301 	eor.w	r3, r3, #1
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d015      	beq.n	8003176 <menu+0x256e>
			dilSecim = dilSecim + 1;
 800314a:	4b57      	ldr	r3, [pc, #348]	@ (80032a8 <menu+0x26a0>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	3301      	adds	r3, #1
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4b55      	ldr	r3, [pc, #340]	@ (80032a8 <menu+0x26a0>)
 8003154:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003156:	4b54      	ldr	r3, [pc, #336]	@ (80032a8 <menu+0x26a0>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d902      	bls.n	8003164 <menu+0x255c>
				dilSecim = 0;
 800315e:	4b52      	ldr	r3, [pc, #328]	@ (80032a8 <menu+0x26a0>)
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
			}
			resetMenuTexts();
 8003164:	f005 f89a 	bl	800829c <resetMenuTexts>
			loadMenuTexts(dilSecim);
 8003168:	4b4f      	ldr	r3, [pc, #316]	@ (80032a8 <menu+0x26a0>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f003 fdf9 	bl	8006d64 <loadMenuTexts>

			bekle();
 8003172:	f000 f94d 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003176:	2104      	movs	r1, #4
 8003178:	4849      	ldr	r0, [pc, #292]	@ (80032a0 <menu+0x2698>)
 800317a:	f006 fd23 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800317e:	4603      	mov	r3, r0
 8003180:	2b01      	cmp	r3, #1
 8003182:	d11c      	bne.n	80031be <menu+0x25b6>
 8003184:	4b47      	ldr	r3, [pc, #284]	@ (80032a4 <menu+0x269c>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	f083 0301 	eor.w	r3, r3, #1
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d015      	beq.n	80031be <menu+0x25b6>
			dilSecim = dilSecim - 1;
 8003192:	4b45      	ldr	r3, [pc, #276]	@ (80032a8 <menu+0x26a0>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	3b01      	subs	r3, #1
 8003198:	b2da      	uxtb	r2, r3
 800319a:	4b43      	ldr	r3, [pc, #268]	@ (80032a8 <menu+0x26a0>)
 800319c:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 800319e:	4b42      	ldr	r3, [pc, #264]	@ (80032a8 <menu+0x26a0>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <menu+0x25a4>
		   		dilSecim = 1;
 80031a6:	4b40      	ldr	r3, [pc, #256]	@ (80032a8 <menu+0x26a0>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	701a      	strb	r2, [r3, #0]
		   	}
		   	resetMenuTexts();
 80031ac:	f005 f876 	bl	800829c <resetMenuTexts>
		   	loadMenuTexts(dilSecim);
 80031b0:	4b3d      	ldr	r3, [pc, #244]	@ (80032a8 <menu+0x26a0>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f003 fdd5 	bl	8006d64 <loadMenuTexts>

			bekle();
 80031ba:	f000 f929 	bl	8003410 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031be:	2108      	movs	r1, #8
 80031c0:	4837      	ldr	r0, [pc, #220]	@ (80032a0 <menu+0x2698>)
 80031c2:	f006 fcff 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d10e      	bne.n	80031ea <menu+0x25e2>
 80031cc:	4b35      	ldr	r3, [pc, #212]	@ (80032a4 <menu+0x269c>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	f083 0301 	eor.w	r3, r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d007      	beq.n	80031ea <menu+0x25e2>
			eepromData[33] = dilSecim;
 80031da:	4b33      	ldr	r3, [pc, #204]	@ (80032a8 <menu+0x26a0>)
 80031dc:	781a      	ldrb	r2, [r3, #0]
 80031de:	4b2a      	ldr	r3, [pc, #168]	@ (8003288 <menu+0x2680>)
 80031e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 80031e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003290 <menu+0x2688>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80031ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003294 <menu+0x268c>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b1f      	cmp	r3, #31
 80031f0:	d146      	bne.n	8003280 <menu+0x2678>
		lcd_print(1, 1, menudenCikisText);
 80031f2:	4a2e      	ldr	r2, [pc, #184]	@ (80032ac <menu+0x26a4>)
 80031f4:	2101      	movs	r1, #1
 80031f6:	2001      	movs	r0, #1
 80031f8:	f005 fb89 	bl	800890e <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 80031fc:	4a2c      	ldr	r2, [pc, #176]	@ (80032b0 <menu+0x26a8>)
 80031fe:	2101      	movs	r1, #1
 8003200:	2002      	movs	r0, #2
 8003202:	f005 fb84 	bl	800890e <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003206:	2108      	movs	r1, #8
 8003208:	4825      	ldr	r0, [pc, #148]	@ (80032a0 <menu+0x2698>)
 800320a:	f006 fcdb 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800320e:	4603      	mov	r3, r0
 8003210:	2b01      	cmp	r3, #1
 8003212:	d135      	bne.n	8003280 <menu+0x2678>
			menuGiris = 0;
 8003214:	4b27      	ldr	r3, [pc, #156]	@ (80032b4 <menu+0x26ac>)
 8003216:	2200      	movs	r2, #0
 8003218:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 800321a:	f006 f83b 	bl	8009294 <HAL_GetTick>
 800321e:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003220:	e007      	b.n	8003232 <menu+0x262a>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003222:	f006 f837 	bl	8009294 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003230:	d806      	bhi.n	8003240 <menu+0x2638>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003232:	4821      	ldr	r0, [pc, #132]	@ (80032b8 <menu+0x26b0>)
 8003234:	f007 faef 	bl	800a816 <HAL_I2C_GetError>
 8003238:	4603      	mov	r3, r0
 800323a:	2b04      	cmp	r3, #4
 800323c:	d0f1      	beq.n	8003222 <menu+0x261a>
 800323e:	e000      	b.n	8003242 <menu+0x263a>
			        break;
 8003240:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 8003242:	f006 f827 	bl	8009294 <HAL_GetTick>
 8003246:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003248:	e007      	b.n	800325a <menu+0x2652>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 800324a:	f006 f823 	bl	8009294 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003258:	d806      	bhi.n	8003268 <menu+0x2660>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800325a:	4817      	ldr	r0, [pc, #92]	@ (80032b8 <menu+0x26b0>)
 800325c:	f007 face 	bl	800a7fc <HAL_I2C_GetState>
 8003260:	4603      	mov	r3, r0
 8003262:	2b20      	cmp	r3, #32
 8003264:	d1f1      	bne.n	800324a <menu+0x2642>
 8003266:	e000      	b.n	800326a <menu+0x2662>
			        break;
 8003268:	bf00      	nop
			    }
			}

			saveEEPROM(0);
 800326a:	2000      	movs	r0, #0
 800326c:	f7fd fa02 	bl	8000674 <saveEEPROM>

			lcd_clear();
 8003270:	f005 fb62 	bl	8008938 <lcd_clear>
			HAL_Delay(500);
 8003274:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003278:	f006 f816 	bl	80092a8 <HAL_Delay>
			NVIC_SystemReset();
 800327c:	f7fd fcae 	bl	8000bdc <__NVIC_SystemReset>
		}
	}
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000d00 	.word	0x20000d00
 800328c:	20000dc0 	.word	0x20000dc0
 8003290:	20000dcc 	.word	0x20000dcc
 8003294:	20000da0 	.word	0x20000da0
 8003298:	2000131c 	.word	0x2000131c
 800329c:	20001330 	.word	0x20001330
 80032a0:	40010800 	.word	0x40010800
 80032a4:	20000dcf 	.word	0x20000dcf
 80032a8:	20000dc1 	.word	0x20000dc1
 80032ac:	20001344 	.word	0x20001344
 80032b0:	20001358 	.word	0x20001358
 80032b4:	20000dbd 	.word	0x20000dbd
 80032b8:	2000140c 	.word	0x2000140c

080032bc <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08a      	sub	sp, #40	@ 0x28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 80032c4:	220a      	movs	r2, #10
 80032c6:	491c      	ldr	r1, [pc, #112]	@ (8003338 <displayCycleOnLCD+0x7c>)
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f009 f81d 	bl	800c308 <itoa>

    int length = strlen(snum);
 80032ce:	481a      	ldr	r0, [pc, #104]	@ (8003338 <displayCycleOnLCD+0x7c>)
 80032d0:	f7fc ffa8 	bl	8000224 <strlen>
 80032d4:	4603      	mov	r3, r0
 80032d6:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	f1c3 0310 	rsb	r3, r3, #16
 80032de:	0fda      	lsrs	r2, r3, #31
 80032e0:	4413      	add	r3, r2
 80032e2:	105b      	asrs	r3, r3, #1
 80032e4:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 80032e6:	f107 0308 	add.w	r3, r7, #8
 80032ea:	2210      	movs	r2, #16
 80032ec:	2120      	movs	r1, #32
 80032ee:	4618      	mov	r0, r3
 80032f0:	f009 f84e 	bl	800c390 <memset>
    displayLine[16] = '\0'; // Null terminator
 80032f4:	2300      	movs	r3, #0
 80032f6:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 80032f8:	2300      	movs	r3, #0
 80032fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80032fc:	e00d      	b.n	800331a <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 80032fe:	69fa      	ldr	r2, [r7, #28]
 8003300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003302:	4413      	add	r3, r2
 8003304:	490c      	ldr	r1, [pc, #48]	@ (8003338 <displayCycleOnLCD+0x7c>)
 8003306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003308:	440a      	add	r2, r1
 800330a:	7812      	ldrb	r2, [r2, #0]
 800330c:	3328      	adds	r3, #40	@ 0x28
 800330e:	443b      	add	r3, r7
 8003310:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 8003314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003316:	3301      	adds	r3, #1
 8003318:	627b      	str	r3, [r7, #36]	@ 0x24
 800331a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	429a      	cmp	r2, r3
 8003320:	dbed      	blt.n	80032fe <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 8003322:	f107 0308 	add.w	r3, r7, #8
 8003326:	461a      	mov	r2, r3
 8003328:	2101      	movs	r1, #1
 800332a:	2002      	movs	r0, #2
 800332c:	f005 faef 	bl	800890e <lcd_print>
}
 8003330:	bf00      	nop
 8003332:	3728      	adds	r7, #40	@ 0x28
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20000d70 	.word	0x20000d70

0800333c <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d105      	bne.n	8003358 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 800334c:	4a22      	ldr	r2, [pc, #136]	@ (80033d8 <lcdUpdate+0x9c>)
 800334e:	2101      	movs	r1, #1
 8003350:	2002      	movs	r0, #2
 8003352:	f005 fadc 	bl	800890e <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
	}
}
 8003356:	e03b      	b.n	80033d0 <lcdUpdate+0x94>
	} else if(y==2) {
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d105      	bne.n	800336a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 800335e:	4a1e      	ldr	r2, [pc, #120]	@ (80033d8 <lcdUpdate+0x9c>)
 8003360:	2102      	movs	r1, #2
 8003362:	2002      	movs	r0, #2
 8003364:	f005 fad3 	bl	800890e <lcd_print>
}
 8003368:	e032      	b.n	80033d0 <lcdUpdate+0x94>
	} else if(y==3) {
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	2b03      	cmp	r3, #3
 800336e:	d105      	bne.n	800337c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003370:	4a19      	ldr	r2, [pc, #100]	@ (80033d8 <lcdUpdate+0x9c>)
 8003372:	2103      	movs	r1, #3
 8003374:	2002      	movs	r0, #2
 8003376:	f005 faca 	bl	800890e <lcd_print>
}
 800337a:	e029      	b.n	80033d0 <lcdUpdate+0x94>
	} else if(y==4) {
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	2b04      	cmp	r3, #4
 8003380:	d105      	bne.n	800338e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003382:	4a15      	ldr	r2, [pc, #84]	@ (80033d8 <lcdUpdate+0x9c>)
 8003384:	2104      	movs	r1, #4
 8003386:	2002      	movs	r0, #2
 8003388:	f005 fac1 	bl	800890e <lcd_print>
}
 800338c:	e020      	b.n	80033d0 <lcdUpdate+0x94>
	} else if(y==5) {
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	2b05      	cmp	r3, #5
 8003392:	d105      	bne.n	80033a0 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003394:	4a10      	ldr	r2, [pc, #64]	@ (80033d8 <lcdUpdate+0x9c>)
 8003396:	2105      	movs	r1, #5
 8003398:	2002      	movs	r0, #2
 800339a:	f005 fab8 	bl	800890e <lcd_print>
}
 800339e:	e017      	b.n	80033d0 <lcdUpdate+0x94>
	} else if(y==6) {
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d105      	bne.n	80033b2 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80033a6:	4a0c      	ldr	r2, [pc, #48]	@ (80033d8 <lcdUpdate+0x9c>)
 80033a8:	2106      	movs	r1, #6
 80033aa:	2002      	movs	r0, #2
 80033ac:	f005 faaf 	bl	800890e <lcd_print>
}
 80033b0:	e00e      	b.n	80033d0 <lcdUpdate+0x94>
	} else if (y==7) {
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	2b07      	cmp	r3, #7
 80033b6:	d10b      	bne.n	80033d0 <lcdUpdate+0x94>
		lcd_clear();
 80033b8:	f005 fabe 	bl	8008938 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 80033bc:	4a07      	ldr	r2, [pc, #28]	@ (80033dc <lcdUpdate+0xa0>)
 80033be:	2101      	movs	r1, #1
 80033c0:	2001      	movs	r0, #1
 80033c2:	f005 faa4 	bl	800890e <lcd_print>
		lcd_print(2, 1, mainText2GN);
 80033c6:	4a06      	ldr	r2, [pc, #24]	@ (80033e0 <lcdUpdate+0xa4>)
 80033c8:	2101      	movs	r1, #1
 80033ca:	2002      	movs	r0, #2
 80033cc:	f005 fa9f 	bl	800890e <lcd_print>
}
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	0800c458 	.word	0x0800c458
 80033dc:	20000058 	.word	0x20000058
 80033e0:	2000006c 	.word	0x2000006c

080033e4 <checkLCDBacklight>:

void checkLCDBacklight() {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 80033e8:	4b07      	ldr	r3, [pc, #28]	@ (8003408 <checkLCDBacklight+0x24>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	4b07      	ldr	r3, [pc, #28]	@ (800340c <checkLCDBacklight+0x28>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b3b      	cmp	r3, #59	@ 0x3b
 80033f4:	d903      	bls.n	80033fe <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 80033f6:	2000      	movs	r0, #0
 80033f8:	f005 faa8 	bl	800894c <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 80033fc:	e002      	b.n	8003404 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 80033fe:	2001      	movs	r0, #1
 8003400:	f005 faa4 	bl	800894c <lcd_backlight>
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20000d78 	.word	0x20000d78
 800340c:	20000d94 	.word	0x20000d94

08003410 <bekle>:

void bekle() {
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
	timer1=millis;
 8003414:	4b47      	ldr	r3, [pc, #284]	@ (8003534 <bekle+0x124>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a47      	ldr	r2, [pc, #284]	@ (8003538 <bekle+0x128>)
 800341a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800341c:	e002      	b.n	8003424 <bekle+0x14>
    	butonKontrol = 1;
 800341e:	4b47      	ldr	r3, [pc, #284]	@ (800353c <bekle+0x12c>)
 8003420:	2201      	movs	r2, #1
 8003422:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003424:	2101      	movs	r1, #1
 8003426:	4846      	ldr	r0, [pc, #280]	@ (8003540 <bekle+0x130>)
 8003428:	f006 fbcc 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800342c:	4603      	mov	r3, r0
 800342e:	2b01      	cmp	r3, #1
 8003430:	d109      	bne.n	8003446 <bekle+0x36>
 8003432:	4b40      	ldr	r3, [pc, #256]	@ (8003534 <bekle+0x124>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4b40      	ldr	r3, [pc, #256]	@ (8003538 <bekle+0x128>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d0ef      	beq.n	800341e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800343e:	e002      	b.n	8003446 <bekle+0x36>
    	butonKontrol = 1;
 8003440:	4b3e      	ldr	r3, [pc, #248]	@ (800353c <bekle+0x12c>)
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003446:	2108      	movs	r1, #8
 8003448:	483e      	ldr	r0, [pc, #248]	@ (8003544 <bekle+0x134>)
 800344a:	f006 fbbb 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800344e:	4603      	mov	r3, r0
 8003450:	2b01      	cmp	r3, #1
 8003452:	d109      	bne.n	8003468 <bekle+0x58>
 8003454:	4b37      	ldr	r3, [pc, #220]	@ (8003534 <bekle+0x124>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b37      	ldr	r3, [pc, #220]	@ (8003538 <bekle+0x128>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d0ef      	beq.n	8003440 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003460:	e002      	b.n	8003468 <bekle+0x58>
    	butonKontrol = 1;
 8003462:	4b36      	ldr	r3, [pc, #216]	@ (800353c <bekle+0x12c>)
 8003464:	2201      	movs	r2, #1
 8003466:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003468:	2102      	movs	r1, #2
 800346a:	4835      	ldr	r0, [pc, #212]	@ (8003540 <bekle+0x130>)
 800346c:	f006 fbaa 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003470:	4603      	mov	r3, r0
 8003472:	2b01      	cmp	r3, #1
 8003474:	d109      	bne.n	800348a <bekle+0x7a>
 8003476:	4b2f      	ldr	r3, [pc, #188]	@ (8003534 <bekle+0x124>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4b2f      	ldr	r3, [pc, #188]	@ (8003538 <bekle+0x128>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d0ef      	beq.n	8003462 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003482:	e002      	b.n	800348a <bekle+0x7a>
    	butonKontrol = 1;
 8003484:	4b2d      	ldr	r3, [pc, #180]	@ (800353c <bekle+0x12c>)
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800348a:	2104      	movs	r1, #4
 800348c:	482c      	ldr	r0, [pc, #176]	@ (8003540 <bekle+0x130>)
 800348e:	f006 fb99 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003492:	4603      	mov	r3, r0
 8003494:	2b01      	cmp	r3, #1
 8003496:	d109      	bne.n	80034ac <bekle+0x9c>
 8003498:	4b26      	ldr	r3, [pc, #152]	@ (8003534 <bekle+0x124>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4b26      	ldr	r3, [pc, #152]	@ (8003538 <bekle+0x128>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d0ef      	beq.n	8003484 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80034a4:	e002      	b.n	80034ac <bekle+0x9c>
    	butonKontrol = 1;
 80034a6:	4b25      	ldr	r3, [pc, #148]	@ (800353c <bekle+0x12c>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80034ac:	2108      	movs	r1, #8
 80034ae:	4824      	ldr	r0, [pc, #144]	@ (8003540 <bekle+0x130>)
 80034b0:	f006 fb88 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d109      	bne.n	80034ce <bekle+0xbe>
 80034ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003534 <bekle+0x124>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4b1e      	ldr	r3, [pc, #120]	@ (8003538 <bekle+0x128>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d0ef      	beq.n	80034a6 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80034c6:	e002      	b.n	80034ce <bekle+0xbe>
    	butonKontrol = 1;
 80034c8:	4b1c      	ldr	r3, [pc, #112]	@ (800353c <bekle+0x12c>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80034ce:	2180      	movs	r1, #128	@ 0x80
 80034d0:	481c      	ldr	r0, [pc, #112]	@ (8003544 <bekle+0x134>)
 80034d2:	f006 fb77 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d109      	bne.n	80034f0 <bekle+0xe0>
 80034dc:	4b15      	ldr	r3, [pc, #84]	@ (8003534 <bekle+0x124>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4b15      	ldr	r3, [pc, #84]	@ (8003538 <bekle+0x128>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d0ef      	beq.n	80034c8 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80034e8:	e002      	b.n	80034f0 <bekle+0xe0>
    	butonKontrol = 1;
 80034ea:	4b14      	ldr	r3, [pc, #80]	@ (800353c <bekle+0x12c>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80034f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034f4:	4813      	ldr	r0, [pc, #76]	@ (8003544 <bekle+0x134>)
 80034f6:	f006 fb65 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d109      	bne.n	8003514 <bekle+0x104>
 8003500:	4b0c      	ldr	r3, [pc, #48]	@ (8003534 <bekle+0x124>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	4b0c      	ldr	r3, [pc, #48]	@ (8003538 <bekle+0x128>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d0ee      	beq.n	80034ea <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800350c:	e002      	b.n	8003514 <bekle+0x104>
    	butonKontrol = 1;
 800350e:	4b0b      	ldr	r3, [pc, #44]	@ (800353c <bekle+0x12c>)
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003514:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003518:	480a      	ldr	r0, [pc, #40]	@ (8003544 <bekle+0x134>)
 800351a:	f006 fb53 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d105      	bne.n	8003530 <bekle+0x120>
 8003524:	4b03      	ldr	r3, [pc, #12]	@ (8003534 <bekle+0x124>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4b03      	ldr	r3, [pc, #12]	@ (8003538 <bekle+0x128>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d0ee      	beq.n	800350e <bekle+0xfe>
    }

}
 8003530:	bf00      	nop
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000d78 	.word	0x20000d78
 8003538:	20000d80 	.word	0x20000d80
 800353c:	20000dcf 	.word	0x20000dcf
 8003540:	40010800 	.word	0x40010800
 8003544:	40011000 	.word	0x40011000

08003548 <buttonCheck>:

uint8_t buttonCheck(void) {
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 800354c:	2101      	movs	r1, #1
 800354e:	4815      	ldr	r0, [pc, #84]	@ (80035a4 <buttonCheck+0x5c>)
 8003550:	f006 fb38 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003554:	4603      	mov	r3, r0
 8003556:	2b01      	cmp	r3, #1
 8003558:	d01b      	beq.n	8003592 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 800355a:	2108      	movs	r1, #8
 800355c:	4812      	ldr	r0, [pc, #72]	@ (80035a8 <buttonCheck+0x60>)
 800355e:	f006 fb31 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003562:	4603      	mov	r3, r0
 8003564:	2b01      	cmp	r3, #1
 8003566:	d014      	beq.n	8003592 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8003568:	2102      	movs	r1, #2
 800356a:	480e      	ldr	r0, [pc, #56]	@ (80035a4 <buttonCheck+0x5c>)
 800356c:	f006 fb2a 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003570:	4603      	mov	r3, r0
 8003572:	2b01      	cmp	r3, #1
 8003574:	d00d      	beq.n	8003592 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8003576:	2104      	movs	r1, #4
 8003578:	480a      	ldr	r0, [pc, #40]	@ (80035a4 <buttonCheck+0x5c>)
 800357a:	f006 fb23 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800357e:	4603      	mov	r3, r0
 8003580:	2b01      	cmp	r3, #1
 8003582:	d006      	beq.n	8003592 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8003584:	2108      	movs	r1, #8
 8003586:	4807      	ldr	r0, [pc, #28]	@ (80035a4 <buttonCheck+0x5c>)
 8003588:	f006 fb1c 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800358c:	4603      	mov	r3, r0
 800358e:	2b01      	cmp	r3, #1
 8003590:	d104      	bne.n	800359c <buttonCheck+0x54>
		backLightTimer = 0;
 8003592:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <buttonCheck+0x64>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
		return 1;
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <buttonCheck+0x56>
	}
	return 0;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40010800 	.word	0x40010800
 80035a8:	40011000 	.word	0x40011000
 80035ac:	20000d94 	.word	0x20000d94

080035b0 <checkBasincSalteri>:

void checkBasincSalteri() {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80035b4:	4b13      	ldr	r3, [pc, #76]	@ (8003604 <checkBasincSalteri+0x54>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <checkBasincSalteri+0x12>
		basincVar=1;
 80035bc:	4b12      	ldr	r3, [pc, #72]	@ (8003608 <checkBasincSalteri+0x58>)
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80035c2:	4b10      	ldr	r3, [pc, #64]	@ (8003604 <checkBasincSalteri+0x54>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d119      	bne.n	80035fe <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80035ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035ce:	480f      	ldr	r0, [pc, #60]	@ (800360c <checkBasincSalteri+0x5c>)
 80035d0:	f006 faf8 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10a      	bne.n	80035f0 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80035da:	4b0d      	ldr	r3, [pc, #52]	@ (8003610 <checkBasincSalteri+0x60>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b0d      	ldr	r3, [pc, #52]	@ (8003614 <checkBasincSalteri+0x64>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d90a      	bls.n	80035fe <checkBasincSalteri+0x4e>
				basincVar=1;
 80035e8:	4b07      	ldr	r3, [pc, #28]	@ (8003608 <checkBasincSalteri+0x58>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80035ee:	e006      	b.n	80035fe <checkBasincSalteri+0x4e>
			timer5=millis;
 80035f0:	4b07      	ldr	r3, [pc, #28]	@ (8003610 <checkBasincSalteri+0x60>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a07      	ldr	r2, [pc, #28]	@ (8003614 <checkBasincSalteri+0x64>)
 80035f6:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80035f8:	4b03      	ldr	r3, [pc, #12]	@ (8003608 <checkBasincSalteri+0x58>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20000da7 	.word	0x20000da7
 8003608:	20000da3 	.word	0x20000da3
 800360c:	40011000 	.word	0x40011000
 8003610:	20000d78 	.word	0x20000d78
 8003614:	20000d90 	.word	0x20000d90

08003618 <checkBasGonder>:

void checkBasGonder() {
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 800361c:	4b1b      	ldr	r3, [pc, #108]	@ (800368c <checkBasGonder+0x74>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d10b      	bne.n	800363c <checkBasGonder+0x24>
 8003624:	4b1a      	ldr	r3, [pc, #104]	@ (8003690 <checkBasGonder+0x78>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d007      	beq.n	800363c <checkBasGonder+0x24>
 800362c:	4b19      	ldr	r3, [pc, #100]	@ (8003694 <checkBasGonder+0x7c>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d103      	bne.n	800363c <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8003634:	4b18      	ldr	r3, [pc, #96]	@ (8003698 <checkBasGonder+0x80>)
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e009      	b.n	8003650 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 800363c:	4b14      	ldr	r3, [pc, #80]	@ (8003690 <checkBasGonder+0x78>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	f083 0301 	eor.w	r3, r3, #1
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800364a:	4b13      	ldr	r3, [pc, #76]	@ (8003698 <checkBasGonder+0x80>)
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003650:	4b0e      	ldr	r3, [pc, #56]	@ (800368c <checkBasGonder+0x74>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d10b      	bne.n	8003670 <checkBasGonder+0x58>
 8003658:	4b10      	ldr	r3, [pc, #64]	@ (800369c <checkBasGonder+0x84>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d007      	beq.n	8003670 <checkBasGonder+0x58>
 8003660:	4b0c      	ldr	r3, [pc, #48]	@ (8003694 <checkBasGonder+0x7c>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d103      	bne.n	8003670 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8003668:	4b0d      	ldr	r3, [pc, #52]	@ (80036a0 <checkBasGonder+0x88>)
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 800366e:	e009      	b.n	8003684 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8003670:	4b0a      	ldr	r3, [pc, #40]	@ (800369c <checkBasGonder+0x84>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	f083 0301 	eor.w	r3, r3, #1
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 800367e:	4b08      	ldr	r3, [pc, #32]	@ (80036a0 <checkBasGonder+0x88>)
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
}
 8003684:	bf00      	nop
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	20000da1 	.word	0x20000da1
 8003690:	20000dd5 	.word	0x20000dd5
 8003694:	20000daf 	.word	0x20000daf
 8003698:	20000ddc 	.word	0x20000ddc
 800369c:	20000dd8 	.word	0x20000dd8
 80036a0:	20000ddd 	.word	0x20000ddd

080036a4 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80036a8:	4b24      	ldr	r3, [pc, #144]	@ (800373c <checkKapiSecimleri+0x98>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80036b0:	4b23      	ldr	r3, [pc, #140]	@ (8003740 <checkKapiSecimleri+0x9c>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80036b6:	4b21      	ldr	r3, [pc, #132]	@ (800373c <checkKapiSecimleri+0x98>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d10e      	bne.n	80036dc <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80036be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036c2:	4820      	ldr	r0, [pc, #128]	@ (8003744 <checkKapiSecimleri+0xa0>)
 80036c4:	f006 fa7e 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d103      	bne.n	80036d6 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80036ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003740 <checkKapiSecimleri+0x9c>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	701a      	strb	r2, [r3, #0]
 80036d4:	e002      	b.n	80036dc <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80036d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003740 <checkKapiSecimleri+0x9c>)
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80036dc:	4b17      	ldr	r3, [pc, #92]	@ (800373c <checkKapiSecimleri+0x98>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d10e      	bne.n	8003702 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80036e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036e8:	4816      	ldr	r0, [pc, #88]	@ (8003744 <checkKapiSecimleri+0xa0>)
 80036ea:	f006 fa6b 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d103      	bne.n	80036fc <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80036f4:	4b12      	ldr	r3, [pc, #72]	@ (8003740 <checkKapiSecimleri+0x9c>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	e002      	b.n	8003702 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80036fc:	4b10      	ldr	r3, [pc, #64]	@ (8003740 <checkKapiSecimleri+0x9c>)
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8003702:	4b0e      	ldr	r3, [pc, #56]	@ (800373c <checkKapiSecimleri+0x98>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d116      	bne.n	8003738 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 800370a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800370e:	480d      	ldr	r0, [pc, #52]	@ (8003744 <checkKapiSecimleri+0xa0>)
 8003710:	f006 fa58 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10b      	bne.n	8003732 <checkKapiSecimleri+0x8e>
 800371a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800371e:	4809      	ldr	r0, [pc, #36]	@ (8003744 <checkKapiSecimleri+0xa0>)
 8003720:	f006 fa50 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d103      	bne.n	8003732 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 800372a:	4b05      	ldr	r3, [pc, #20]	@ (8003740 <checkKapiSecimleri+0x9c>)
 800372c:	2201      	movs	r2, #1
 800372e:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8003730:	e002      	b.n	8003738 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8003732:	4b03      	ldr	r3, [pc, #12]	@ (8003740 <checkKapiSecimleri+0x9c>)
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
}
 8003738:	bf00      	nop
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20000da8 	.word	0x20000da8
 8003740:	20000df2 	.word	0x20000df2
 8003744:	40010800 	.word	0x40010800

08003748 <checkAktifCalisma>:

void checkAktifCalisma() {
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 800374c:	4b66      	ldr	r3, [pc, #408]	@ (80038e8 <checkAktifCalisma+0x1a0>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f041 83ab 	bne.w	8004eac <checkAktifCalisma+0x1764>
 8003756:	4b65      	ldr	r3, [pc, #404]	@ (80038ec <checkAktifCalisma+0x1a4>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f041 83a6 	bne.w	8004eac <checkAktifCalisma+0x1764>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8003760:	4b63      	ldr	r3, [pc, #396]	@ (80038f0 <checkAktifCalisma+0x1a8>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d11a      	bne.n	800379e <checkAktifCalisma+0x56>
 8003768:	4b62      	ldr	r3, [pc, #392]	@ (80038f4 <checkAktifCalisma+0x1ac>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d116      	bne.n	800379e <checkAktifCalisma+0x56>
 8003770:	4b61      	ldr	r3, [pc, #388]	@ (80038f8 <checkAktifCalisma+0x1b0>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <checkAktifCalisma+0x46>
 8003778:	4b60      	ldr	r3, [pc, #384]	@ (80038fc <checkAktifCalisma+0x1b4>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	f083 0301 	eor.w	r3, r3, #1
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <checkAktifCalisma+0x46>
 8003786:	4b5e      	ldr	r3, [pc, #376]	@ (8003900 <checkAktifCalisma+0x1b8>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d007      	beq.n	800379e <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 800378e:	4b5d      	ldr	r3, [pc, #372]	@ (8003904 <checkAktifCalisma+0x1bc>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01c      	beq.n	80037d0 <checkAktifCalisma+0x88>
 8003796:	4b5c      	ldr	r3, [pc, #368]	@ (8003908 <checkAktifCalisma+0x1c0>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d118      	bne.n	80037d0 <checkAktifCalisma+0x88>
 800379e:	4b5b      	ldr	r3, [pc, #364]	@ (800390c <checkAktifCalisma+0x1c4>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d103      	bne.n	80037ae <checkAktifCalisma+0x66>
 80037a6:	4b5a      	ldr	r3, [pc, #360]	@ (8003910 <checkAktifCalisma+0x1c8>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d010      	beq.n	80037d0 <checkAktifCalisma+0x88>
 80037ae:	4b59      	ldr	r3, [pc, #356]	@ (8003914 <checkAktifCalisma+0x1cc>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00c      	beq.n	80037d0 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80037b6:	2201      	movs	r2, #1
 80037b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80037bc:	4856      	ldr	r0, [pc, #344]	@ (8003918 <checkAktifCalisma+0x1d0>)
 80037be:	f006 fa18 	bl	8009bf2 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 80037c2:	4b56      	ldr	r3, [pc, #344]	@ (800391c <checkAktifCalisma+0x1d4>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 80037c8:	4b55      	ldr	r3, [pc, #340]	@ (8003920 <checkAktifCalisma+0x1d8>)
 80037ca:	2201      	movs	r2, #1
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	e008      	b.n	80037e2 <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80037d0:	2200      	movs	r2, #0
 80037d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80037d6:	4850      	ldr	r0, [pc, #320]	@ (8003918 <checkAktifCalisma+0x1d0>)
 80037d8:	f006 fa0b 	bl	8009bf2 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 80037dc:	4b4f      	ldr	r3, [pc, #316]	@ (800391c <checkAktifCalisma+0x1d4>)
 80037de:	2200      	movs	r2, #0
 80037e0:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 80037e2:	4b42      	ldr	r3, [pc, #264]	@ (80038ec <checkAktifCalisma+0x1a4>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d164      	bne.n	80038b4 <checkAktifCalisma+0x16c>
 80037ea:	4b49      	ldr	r3, [pc, #292]	@ (8003910 <checkAktifCalisma+0x1c8>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d103      	bne.n	80037fa <checkAktifCalisma+0xb2>
 80037f2:	4b46      	ldr	r3, [pc, #280]	@ (800390c <checkAktifCalisma+0x1c4>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d05c      	beq.n	80038b4 <checkAktifCalisma+0x16c>
 80037fa:	4b46      	ldr	r3, [pc, #280]	@ (8003914 <checkAktifCalisma+0x1cc>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d058      	beq.n	80038b4 <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8003802:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003806:	4844      	ldr	r0, [pc, #272]	@ (8003918 <checkAktifCalisma+0x1d0>)
 8003808:	f006 f9dc 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <checkAktifCalisma+0xd2>
 8003812:	4b44      	ldr	r3, [pc, #272]	@ (8003924 <checkAktifCalisma+0x1dc>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d04c      	beq.n	80038b4 <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800381a:	2102      	movs	r1, #2
 800381c:	4842      	ldr	r0, [pc, #264]	@ (8003928 <checkAktifCalisma+0x1e0>)
 800381e:	f006 f9d1 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d145      	bne.n	80038b4 <checkAktifCalisma+0x16c>
							&& (basincVar)
 8003828:	4b40      	ldr	r3, [pc, #256]	@ (800392c <checkAktifCalisma+0x1e4>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d041      	beq.n	80038b4 <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8003830:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003834:	4838      	ldr	r0, [pc, #224]	@ (8003918 <checkAktifCalisma+0x1d0>)
 8003836:	f006 f9c5 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800383a:	4603      	mov	r3, r0
 800383c:	2b01      	cmp	r3, #1
 800383e:	d10e      	bne.n	800385e <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8003840:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003844:	4834      	ldr	r0, [pc, #208]	@ (8003918 <checkAktifCalisma+0x1d0>)
 8003846:	f006 f9bd 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800384a:	4603      	mov	r3, r0
 800384c:	2b01      	cmp	r3, #1
 800384e:	d106      	bne.n	800385e <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8003850:	2140      	movs	r1, #64	@ 0x40
 8003852:	4835      	ldr	r0, [pc, #212]	@ (8003928 <checkAktifCalisma+0x1e0>)
 8003854:	f006 f9b6 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003858:	4603      	mov	r3, r0
 800385a:	2b01      	cmp	r3, #1
 800385c:	d003      	beq.n	8003866 <checkAktifCalisma+0x11e>
 800385e:	4b24      	ldr	r3, [pc, #144]	@ (80038f0 <checkAktifCalisma+0x1a8>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d026      	beq.n	80038b4 <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 8003866:	4b24      	ldr	r3, [pc, #144]	@ (80038f8 <checkAktifCalisma+0x1b0>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	f083 0301 	eor.w	r3, r3, #1
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01f      	beq.n	80038b4 <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8003874:	4b1f      	ldr	r3, [pc, #124]	@ (80038f4 <checkAktifCalisma+0x1ac>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	f083 0301 	eor.w	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d018      	beq.n	80038b4 <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 8003882:	4b20      	ldr	r3, [pc, #128]	@ (8003904 <checkAktifCalisma+0x1bc>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	f083 0301 	eor.w	r3, r3, #1
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d011      	beq.n	80038b4 <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8003890:	4b27      	ldr	r3, [pc, #156]	@ (8003930 <checkAktifCalisma+0x1e8>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	f083 0301 	eor.w	r3, r3, #1
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 800389e:	4b25      	ldr	r3, [pc, #148]	@ (8003934 <checkAktifCalisma+0x1ec>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	f083 0301 	eor.w	r3, r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 80038ac:	4b10      	ldr	r3, [pc, #64]	@ (80038f0 <checkAktifCalisma+0x1a8>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	e002      	b.n	80038ba <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 80038b4:	4b0e      	ldr	r3, [pc, #56]	@ (80038f0 <checkAktifCalisma+0x1a8>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80038ba:	4b0d      	ldr	r3, [pc, #52]	@ (80038f0 <checkAktifCalisma+0x1a8>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d03c      	beq.n	800393c <checkAktifCalisma+0x1f4>
 80038c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80038c6:	4818      	ldr	r0, [pc, #96]	@ (8003928 <checkAktifCalisma+0x1e0>)
 80038c8:	f006 f97c 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d134      	bne.n	800393c <checkAktifCalisma+0x1f4>
 80038d2:	4b19      	ldr	r3, [pc, #100]	@ (8003938 <checkAktifCalisma+0x1f0>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d030      	beq.n	800393c <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80038da:	2201      	movs	r2, #1
 80038dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80038e0:	480d      	ldr	r0, [pc, #52]	@ (8003918 <checkAktifCalisma+0x1d0>)
 80038e2:	f006 f986 	bl	8009bf2 <HAL_GPIO_WritePin>
 80038e6:	e02f      	b.n	8003948 <checkAktifCalisma+0x200>
 80038e8:	20000dbe 	.word	0x20000dbe
 80038ec:	20000dbd 	.word	0x20000dbd
 80038f0:	20000dd5 	.word	0x20000dd5
 80038f4:	20000dd6 	.word	0x20000dd6
 80038f8:	20000dd8 	.word	0x20000dd8
 80038fc:	20000dd0 	.word	0x20000dd0
 8003900:	20000db3 	.word	0x20000db3
 8003904:	20000dd7 	.word	0x20000dd7
 8003908:	20000db2 	.word	0x20000db2
 800390c:	20000df1 	.word	0x20000df1
 8003910:	20000e04 	.word	0x20000e04
 8003914:	20000df2 	.word	0x20000df2
 8003918:	40010c00 	.word	0x40010c00
 800391c:	20000df3 	.word	0x20000df3
 8003920:	20000ddf 	.word	0x20000ddf
 8003924:	20000ddc 	.word	0x20000ddc
 8003928:	40011000 	.word	0x40011000
 800392c:	20000da3 	.word	0x20000da3
 8003930:	20000dda 	.word	0x20000dda
 8003934:	20000ddb 	.word	0x20000ddb
 8003938:	20000dae 	.word	0x20000dae
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800393c:	2200      	movs	r2, #0
 800393e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003942:	4865      	ldr	r0, [pc, #404]	@ (8003ad8 <checkAktifCalisma+0x390>)
 8003944:	f006 f955 	bl	8009bf2 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8003948:	4b64      	ldr	r3, [pc, #400]	@ (8003adc <checkAktifCalisma+0x394>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d013      	beq.n	8003978 <checkAktifCalisma+0x230>
 8003950:	4b63      	ldr	r3, [pc, #396]	@ (8003ae0 <checkAktifCalisma+0x398>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d007      	beq.n	8003968 <checkAktifCalisma+0x220>
 8003958:	4b61      	ldr	r3, [pc, #388]	@ (8003ae0 <checkAktifCalisma+0x398>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d003      	beq.n	8003968 <checkAktifCalisma+0x220>
 8003960:	4b60      	ldr	r3, [pc, #384]	@ (8003ae4 <checkAktifCalisma+0x39c>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d107      	bne.n	8003978 <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8003968:	2201      	movs	r2, #1
 800396a:	2104      	movs	r1, #4
 800396c:	485a      	ldr	r0, [pc, #360]	@ (8003ad8 <checkAktifCalisma+0x390>)
 800396e:	f006 f940 	bl	8009bf2 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8003972:	4b5d      	ldr	r3, [pc, #372]	@ (8003ae8 <checkAktifCalisma+0x3a0>)
 8003974:	2201      	movs	r2, #1
 8003976:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8003978:	4b5b      	ldr	r3, [pc, #364]	@ (8003ae8 <checkAktifCalisma+0x3a0>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d033      	beq.n	80039e8 <checkAktifCalisma+0x2a0>
 8003980:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003984:	4854      	ldr	r0, [pc, #336]	@ (8003ad8 <checkAktifCalisma+0x390>)
 8003986:	f006 f91d 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800398a:	4603      	mov	r3, r0
 800398c:	2b01      	cmp	r3, #1
 800398e:	d106      	bne.n	800399e <checkAktifCalisma+0x256>
 8003990:	4b56      	ldr	r3, [pc, #344]	@ (8003aec <checkAktifCalisma+0x3a4>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	f083 0301 	eor.w	r3, r3, #1
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <checkAktifCalisma+0x264>
 800399e:	2102      	movs	r1, #2
 80039a0:	4853      	ldr	r0, [pc, #332]	@ (8003af0 <checkAktifCalisma+0x3a8>)
 80039a2:	f006 f90f 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d11d      	bne.n	80039e8 <checkAktifCalisma+0x2a0>
 80039ac:	4b51      	ldr	r3, [pc, #324]	@ (8003af4 <checkAktifCalisma+0x3ac>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d103      	bne.n	80039bc <checkAktifCalisma+0x274>
 80039b4:	4b50      	ldr	r3, [pc, #320]	@ (8003af8 <checkAktifCalisma+0x3b0>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d015      	beq.n	80039e8 <checkAktifCalisma+0x2a0>
 80039bc:	4b4f      	ldr	r3, [pc, #316]	@ (8003afc <checkAktifCalisma+0x3b4>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d011      	beq.n	80039e8 <checkAktifCalisma+0x2a0>
 80039c4:	4b4e      	ldr	r3, [pc, #312]	@ (8003b00 <checkAktifCalisma+0x3b8>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00d      	beq.n	80039e8 <checkAktifCalisma+0x2a0>
 80039cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003b04 <checkAktifCalisma+0x3bc>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	f083 0301 	eor.w	r3, r3, #1
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d006      	beq.n	80039e8 <checkAktifCalisma+0x2a0>
					timer2=millis;
 80039da:	4b4b      	ldr	r3, [pc, #300]	@ (8003b08 <checkAktifCalisma+0x3c0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a4b      	ldr	r2, [pc, #300]	@ (8003b0c <checkAktifCalisma+0x3c4>)
 80039e0:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 80039e2:	4b48      	ldr	r3, [pc, #288]	@ (8003b04 <checkAktifCalisma+0x3bc>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 80039e8:	4b47      	ldr	r3, [pc, #284]	@ (8003b08 <checkAktifCalisma+0x3c0>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4b47      	ldr	r3, [pc, #284]	@ (8003b0c <checkAktifCalisma+0x3c4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	4a47      	ldr	r2, [pc, #284]	@ (8003b10 <checkAktifCalisma+0x3c8>)
 80039f4:	7812      	ldrb	r2, [r2, #0]
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d303      	bcc.n	8003a02 <checkAktifCalisma+0x2ba>
 80039fa:	4b42      	ldr	r3, [pc, #264]	@ (8003b04 <checkAktifCalisma+0x3bc>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d118      	bne.n	8003a34 <checkAktifCalisma+0x2ec>
 8003a02:	4b3c      	ldr	r3, [pc, #240]	@ (8003af4 <checkAktifCalisma+0x3ac>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	f083 0301 	eor.w	r3, r3, #1
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d006      	beq.n	8003a1e <checkAktifCalisma+0x2d6>
 8003a10:	4b39      	ldr	r3, [pc, #228]	@ (8003af8 <checkAktifCalisma+0x3b0>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	f083 0301 	eor.w	r3, r3, #1
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <checkAktifCalisma+0x2ec>
 8003a1e:	4b37      	ldr	r3, [pc, #220]	@ (8003afc <checkAktifCalisma+0x3b4>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	f083 0301 	eor.w	r3, r3, #1
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d103      	bne.n	8003a34 <checkAktifCalisma+0x2ec>
 8003a2c:	4b34      	ldr	r3, [pc, #208]	@ (8003b00 <checkAktifCalisma+0x3b8>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8003a34:	2200      	movs	r2, #0
 8003a36:	2104      	movs	r1, #4
 8003a38:	4827      	ldr	r0, [pc, #156]	@ (8003ad8 <checkAktifCalisma+0x390>)
 8003a3a:	f006 f8da 	bl	8009bf2 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 8003a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ae8 <checkAktifCalisma+0x3a0>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 8003a44:	4b2f      	ldr	r3, [pc, #188]	@ (8003b04 <checkAktifCalisma+0x3bc>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 8003a4a:	4b32      	ldr	r3, [pc, #200]	@ (8003b14 <checkAktifCalisma+0x3cc>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d102      	bne.n	8003a58 <checkAktifCalisma+0x310>
					cerceveVar=1;
 8003a52:	4b31      	ldr	r3, [pc, #196]	@ (8003b18 <checkAktifCalisma+0x3d0>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8003a58:	4b2e      	ldr	r3, [pc, #184]	@ (8003b14 <checkAktifCalisma+0x3cc>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d116      	bne.n	8003a8e <checkAktifCalisma+0x346>
 8003a60:	4b2e      	ldr	r3, [pc, #184]	@ (8003b1c <checkAktifCalisma+0x3d4>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d112      	bne.n	8003a8e <checkAktifCalisma+0x346>
 8003a68:	2101      	movs	r1, #1
 8003a6a:	4821      	ldr	r0, [pc, #132]	@ (8003af0 <checkAktifCalisma+0x3a8>)
 8003a6c:	f006 f8aa 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10b      	bne.n	8003a8e <checkAktifCalisma+0x346>
 8003a76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a7a:	4817      	ldr	r0, [pc, #92]	@ (8003ad8 <checkAktifCalisma+0x390>)
 8003a7c:	f006 f8a2 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d103      	bne.n	8003a8e <checkAktifCalisma+0x346>
					cerceveVar=1;
 8003a86:	4b24      	ldr	r3, [pc, #144]	@ (8003b18 <checkAktifCalisma+0x3d0>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	e011      	b.n	8003ab2 <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8003a8e:	4b21      	ldr	r3, [pc, #132]	@ (8003b14 <checkAktifCalisma+0x3cc>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d10d      	bne.n	8003ab2 <checkAktifCalisma+0x36a>
 8003a96:	2101      	movs	r1, #1
 8003a98:	4815      	ldr	r0, [pc, #84]	@ (8003af0 <checkAktifCalisma+0x3a8>)
 8003a9a:	f006 f893 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d106      	bne.n	8003ab2 <checkAktifCalisma+0x36a>
 8003aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b1c <checkAktifCalisma+0x3d4>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d102      	bne.n	8003ab2 <checkAktifCalisma+0x36a>
					cerceveVar=0;
 8003aac:	4b1a      	ldr	r3, [pc, #104]	@ (8003b18 <checkAktifCalisma+0x3d0>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8003ab2:	4b18      	ldr	r3, [pc, #96]	@ (8003b14 <checkAktifCalisma+0x3cc>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d135      	bne.n	8003b26 <checkAktifCalisma+0x3de>
 8003aba:	4b18      	ldr	r3, [pc, #96]	@ (8003b1c <checkAktifCalisma+0x3d4>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d131      	bne.n	8003b26 <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	480a      	ldr	r0, [pc, #40]	@ (8003af0 <checkAktifCalisma+0x3a8>)
 8003ac6:	f006 f87d 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d127      	bne.n	8003b20 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 8003ad0:	4b11      	ldr	r3, [pc, #68]	@ (8003b18 <checkAktifCalisma+0x3d0>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	e026      	b.n	8003b26 <checkAktifCalisma+0x3de>
 8003ad8:	40010c00 	.word	0x40010c00
 8003adc:	20000dd5 	.word	0x20000dd5
 8003ae0:	20000daf 	.word	0x20000daf
 8003ae4:	20000db3 	.word	0x20000db3
 8003ae8:	20000dd9 	.word	0x20000dd9
 8003aec:	20000ddc 	.word	0x20000ddc
 8003af0:	40011000 	.word	0x40011000
 8003af4:	20000df1 	.word	0x20000df1
 8003af8:	20000e04 	.word	0x20000e04
 8003afc:	20000df2 	.word	0x20000df2
 8003b00:	20000da3 	.word	0x20000da3
 8003b04:	20000dd1 	.word	0x20000dd1
 8003b08:	20000d78 	.word	0x20000d78
 8003b0c:	20000d84 	.word	0x20000d84
 8003b10:	20000db4 	.word	0x20000db4
 8003b14:	20000da4 	.word	0x20000da4
 8003b18:	20000df6 	.word	0x20000df6
 8003b1c:	20000da1 	.word	0x20000da1
					} else {
						cerceveVar=0;
 8003b20:	4b7f      	ldr	r3, [pc, #508]	@ (8003d20 <checkAktifCalisma+0x5d8>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8003b26:	4b7f      	ldr	r3, [pc, #508]	@ (8003d24 <checkAktifCalisma+0x5dc>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d17c      	bne.n	8003c28 <checkAktifCalisma+0x4e0>
 8003b2e:	4b7e      	ldr	r3, [pc, #504]	@ (8003d28 <checkAktifCalisma+0x5e0>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d078      	beq.n	8003c28 <checkAktifCalisma+0x4e0>
 8003b36:	4b7d      	ldr	r3, [pc, #500]	@ (8003d2c <checkAktifCalisma+0x5e4>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d074      	beq.n	8003c28 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8003b3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b42:	487b      	ldr	r0, [pc, #492]	@ (8003d30 <checkAktifCalisma+0x5e8>)
 8003b44:	f006 f83e 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <checkAktifCalisma+0x40e>
 8003b4e:	4b79      	ldr	r3, [pc, #484]	@ (8003d34 <checkAktifCalisma+0x5ec>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d068      	beq.n	8003c28 <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8003b56:	4b72      	ldr	r3, [pc, #456]	@ (8003d20 <checkAktifCalisma+0x5d8>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d064      	beq.n	8003c28 <checkAktifCalisma+0x4e0>
 8003b5e:	4b76      	ldr	r3, [pc, #472]	@ (8003d38 <checkAktifCalisma+0x5f0>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	f083 0301 	eor.w	r3, r3, #1
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d05d      	beq.n	8003c28 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8003b6c:	2104      	movs	r1, #4
 8003b6e:	4873      	ldr	r0, [pc, #460]	@ (8003d3c <checkAktifCalisma+0x5f4>)
 8003b70:	f006 f828 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <checkAktifCalisma+0x43a>
 8003b7a:	4b71      	ldr	r3, [pc, #452]	@ (8003d40 <checkAktifCalisma+0x5f8>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d152      	bne.n	8003c28 <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8003b82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b86:	486a      	ldr	r0, [pc, #424]	@ (8003d30 <checkAktifCalisma+0x5e8>)
 8003b88:	f006 f81c 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d10e      	bne.n	8003bb0 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8003b92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b96:	4866      	ldr	r0, [pc, #408]	@ (8003d30 <checkAktifCalisma+0x5e8>)
 8003b98:	f006 f814 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d106      	bne.n	8003bb0 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8003ba2:	2140      	movs	r1, #64	@ 0x40
 8003ba4:	4865      	ldr	r0, [pc, #404]	@ (8003d3c <checkAktifCalisma+0x5f4>)
 8003ba6:	f006 f80d 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d003      	beq.n	8003bb8 <checkAktifCalisma+0x470>
 8003bb0:	4b64      	ldr	r3, [pc, #400]	@ (8003d44 <checkAktifCalisma+0x5fc>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d037      	beq.n	8003c28 <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 8003bb8:	4b63      	ldr	r3, [pc, #396]	@ (8003d48 <checkAktifCalisma+0x600>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	f083 0301 	eor.w	r3, r3, #1
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d030      	beq.n	8003c28 <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 8003bc6:	4b61      	ldr	r3, [pc, #388]	@ (8003d4c <checkAktifCalisma+0x604>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	f083 0301 	eor.w	r3, r3, #1
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d029      	beq.n	8003c28 <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 8003bd4:	4b5e      	ldr	r3, [pc, #376]	@ (8003d50 <checkAktifCalisma+0x608>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	f083 0301 	eor.w	r3, r3, #1
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d022      	beq.n	8003c28 <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 8003be2:	4b5c      	ldr	r3, [pc, #368]	@ (8003d54 <checkAktifCalisma+0x60c>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	f083 0301 	eor.w	r3, r3, #1
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d01b      	beq.n	8003c28 <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8003bf0:	4b59      	ldr	r3, [pc, #356]	@ (8003d58 <checkAktifCalisma+0x610>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	f083 0301 	eor.w	r3, r3, #1
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d014      	beq.n	8003c28 <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 8003bfe:	4b57      	ldr	r3, [pc, #348]	@ (8003d5c <checkAktifCalisma+0x614>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	f083 0301 	eor.w	r3, r3, #1
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00d      	beq.n	8003c28 <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	2102      	movs	r1, #2
 8003c10:	4847      	ldr	r0, [pc, #284]	@ (8003d30 <checkAktifCalisma+0x5e8>)
 8003c12:	f005 ffee 	bl	8009bf2 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 8003c16:	4b4b      	ldr	r3, [pc, #300]	@ (8003d44 <checkAktifCalisma+0x5fc>)
 8003c18:	2201      	movs	r2, #1
 8003c1a:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8003c1c:	4b50      	ldr	r3, [pc, #320]	@ (8003d60 <checkAktifCalisma+0x618>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 8003c22:	4b50      	ldr	r3, [pc, #320]	@ (8003d64 <checkAktifCalisma+0x61c>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8003c28:	4b46      	ldr	r3, [pc, #280]	@ (8003d44 <checkAktifCalisma+0x5fc>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d033      	beq.n	8003c98 <checkAktifCalisma+0x550>
 8003c30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c34:	483e      	ldr	r0, [pc, #248]	@ (8003d30 <checkAktifCalisma+0x5e8>)
 8003c36:	f005 ffc5 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d106      	bne.n	8003c4e <checkAktifCalisma+0x506>
 8003c40:	4b3c      	ldr	r3, [pc, #240]	@ (8003d34 <checkAktifCalisma+0x5ec>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	f083 0301 	eor.w	r3, r3, #1
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <checkAktifCalisma+0x51c>
 8003c4e:	2104      	movs	r1, #4
 8003c50:	483a      	ldr	r0, [pc, #232]	@ (8003d3c <checkAktifCalisma+0x5f4>)
 8003c52:	f005 ffb7 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d11d      	bne.n	8003c98 <checkAktifCalisma+0x550>
 8003c5c:	4b38      	ldr	r3, [pc, #224]	@ (8003d40 <checkAktifCalisma+0x5f8>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d019      	beq.n	8003c98 <checkAktifCalisma+0x550>
 8003c64:	4b30      	ldr	r3, [pc, #192]	@ (8003d28 <checkAktifCalisma+0x5e0>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d015      	beq.n	8003c98 <checkAktifCalisma+0x550>
 8003c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8003d2c <checkAktifCalisma+0x5e4>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d011      	beq.n	8003c98 <checkAktifCalisma+0x550>
 8003c74:	4b2a      	ldr	r3, [pc, #168]	@ (8003d20 <checkAktifCalisma+0x5d8>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00d      	beq.n	8003c98 <checkAktifCalisma+0x550>
 8003c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8003d68 <checkAktifCalisma+0x620>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	f083 0301 	eor.w	r3, r3, #1
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d006      	beq.n	8003c98 <checkAktifCalisma+0x550>
					timer2=millis;
 8003c8a:	4b38      	ldr	r3, [pc, #224]	@ (8003d6c <checkAktifCalisma+0x624>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a38      	ldr	r2, [pc, #224]	@ (8003d70 <checkAktifCalisma+0x628>)
 8003c90:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 8003c92:	4b35      	ldr	r3, [pc, #212]	@ (8003d68 <checkAktifCalisma+0x620>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8003c98:	4b34      	ldr	r3, [pc, #208]	@ (8003d6c <checkAktifCalisma+0x624>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b34      	ldr	r3, [pc, #208]	@ (8003d70 <checkAktifCalisma+0x628>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	4a34      	ldr	r2, [pc, #208]	@ (8003d74 <checkAktifCalisma+0x62c>)
 8003ca4:	7812      	ldrb	r2, [r2, #0]
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d303      	bcc.n	8003cb2 <checkAktifCalisma+0x56a>
 8003caa:	4b2f      	ldr	r3, [pc, #188]	@ (8003d68 <checkAktifCalisma+0x620>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d114      	bne.n	8003cdc <checkAktifCalisma+0x594>
 8003cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d28 <checkAktifCalisma+0x5e0>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	f083 0301 	eor.w	r3, r3, #1
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10d      	bne.n	8003cdc <checkAktifCalisma+0x594>
 8003cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d2c <checkAktifCalisma+0x5e4>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	f083 0301 	eor.w	r3, r3, #1
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <checkAktifCalisma+0x594>
 8003cce:	4b14      	ldr	r3, [pc, #80]	@ (8003d20 <checkAktifCalisma+0x5d8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	f083 0301 	eor.w	r3, r3, #1
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2102      	movs	r1, #2
 8003ce0:	4813      	ldr	r0, [pc, #76]	@ (8003d30 <checkAktifCalisma+0x5e8>)
 8003ce2:	f005 ff86 	bl	8009bf2 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8003ce6:	4b17      	ldr	r3, [pc, #92]	@ (8003d44 <checkAktifCalisma+0x5fc>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8003cec:	4b1e      	ldr	r3, [pc, #120]	@ (8003d68 <checkAktifCalisma+0x620>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8003cf2:	4b14      	ldr	r3, [pc, #80]	@ (8003d44 <checkAktifCalisma+0x5fc>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d040      	beq.n	8003d7c <checkAktifCalisma+0x634>
 8003cfa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003cfe:	480f      	ldr	r0, [pc, #60]	@ (8003d3c <checkAktifCalisma+0x5f4>)
 8003d00:	f005 ff60 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d138      	bne.n	8003d7c <checkAktifCalisma+0x634>
 8003d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d78 <checkAktifCalisma+0x630>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d034      	beq.n	8003d7c <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8003d12:	2201      	movs	r2, #1
 8003d14:	2101      	movs	r1, #1
 8003d16:	4806      	ldr	r0, [pc, #24]	@ (8003d30 <checkAktifCalisma+0x5e8>)
 8003d18:	f005 ff6b 	bl	8009bf2 <HAL_GPIO_WritePin>
 8003d1c:	e033      	b.n	8003d86 <checkAktifCalisma+0x63e>
 8003d1e:	bf00      	nop
 8003d20:	20000df6 	.word	0x20000df6
 8003d24:	20000dbd 	.word	0x20000dbd
 8003d28:	20000df1 	.word	0x20000df1
 8003d2c:	20000df2 	.word	0x20000df2
 8003d30:	40010c00 	.word	0x40010c00
 8003d34:	20000ddd 	.word	0x20000ddd
 8003d38:	20000df0 	.word	0x20000df0
 8003d3c:	40011000 	.word	0x40011000
 8003d40:	20000da6 	.word	0x20000da6
 8003d44:	20000dd8 	.word	0x20000dd8
 8003d48:	20000dd5 	.word	0x20000dd5
 8003d4c:	20000dd9 	.word	0x20000dd9
 8003d50:	20000dd6 	.word	0x20000dd6
 8003d54:	20000dd7 	.word	0x20000dd7
 8003d58:	20000dda 	.word	0x20000dda
 8003d5c:	20000ddb 	.word	0x20000ddb
 8003d60:	20000de0 	.word	0x20000de0
 8003d64:	20000e00 	.word	0x20000e00
 8003d68:	20000dd0 	.word	0x20000dd0
 8003d6c:	20000d78 	.word	0x20000d78
 8003d70:	20000d84 	.word	0x20000d84
 8003d74:	20000db5 	.word	0x20000db5
 8003d78:	20000da5 	.word	0x20000da5
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2101      	movs	r1, #1
 8003d80:	4836      	ldr	r0, [pc, #216]	@ (8003e5c <checkAktifCalisma+0x714>)
 8003d82:	f005 ff36 	bl	8009bf2 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8003d86:	4b36      	ldr	r3, [pc, #216]	@ (8003e60 <checkAktifCalisma+0x718>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f040 8080 	bne.w	8003e90 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8003d90:	4b34      	ldr	r3, [pc, #208]	@ (8003e64 <checkAktifCalisma+0x71c>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d003      	beq.n	8003da0 <checkAktifCalisma+0x658>
 8003d98:	4b32      	ldr	r3, [pc, #200]	@ (8003e64 <checkAktifCalisma+0x71c>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d177      	bne.n	8003e90 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8003da0:	4b31      	ldr	r3, [pc, #196]	@ (8003e68 <checkAktifCalisma+0x720>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d073      	beq.n	8003e90 <checkAktifCalisma+0x748>
 8003da8:	4b30      	ldr	r3, [pc, #192]	@ (8003e6c <checkAktifCalisma+0x724>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d06f      	beq.n	8003e90 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8003db0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003db4:	4829      	ldr	r0, [pc, #164]	@ (8003e5c <checkAktifCalisma+0x714>)
 8003db6:	f005 ff05 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d167      	bne.n	8003e90 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8003dc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003dc4:	482a      	ldr	r0, [pc, #168]	@ (8003e70 <checkAktifCalisma+0x728>)
 8003dc6:	f005 fefd 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <checkAktifCalisma+0x690>
 8003dd0:	4b28      	ldr	r3, [pc, #160]	@ (8003e74 <checkAktifCalisma+0x72c>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d15b      	bne.n	8003e90 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8003dd8:	2140      	movs	r1, #64	@ 0x40
 8003dda:	4825      	ldr	r0, [pc, #148]	@ (8003e70 <checkAktifCalisma+0x728>)
 8003ddc:	f005 fef2 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d10f      	bne.n	8003e06 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8003de6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003dea:	481c      	ldr	r0, [pc, #112]	@ (8003e5c <checkAktifCalisma+0x714>)
 8003dec:	f005 feea 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d107      	bne.n	8003e06 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8003df6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003dfa:	4818      	ldr	r0, [pc, #96]	@ (8003e5c <checkAktifCalisma+0x714>)
 8003dfc:	f005 fee2 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d003      	beq.n	8003e0e <checkAktifCalisma+0x6c6>
 8003e06:	4b1c      	ldr	r3, [pc, #112]	@ (8003e78 <checkAktifCalisma+0x730>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d040      	beq.n	8003e90 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8003e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003e7c <checkAktifCalisma+0x734>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	f083 0301 	eor.w	r3, r3, #1
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d039      	beq.n	8003e90 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8003e1c:	4b18      	ldr	r3, [pc, #96]	@ (8003e80 <checkAktifCalisma+0x738>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	f083 0301 	eor.w	r3, r3, #1
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d032      	beq.n	8003e90 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8003e2a:	4b16      	ldr	r3, [pc, #88]	@ (8003e84 <checkAktifCalisma+0x73c>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	f083 0301 	eor.w	r3, r3, #1
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d02b      	beq.n	8003e90 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8003e38:	4b13      	ldr	r3, [pc, #76]	@ (8003e88 <checkAktifCalisma+0x740>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	f083 0301 	eor.w	r3, r3, #1
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d024      	beq.n	8003e90 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8003e46:	4b11      	ldr	r3, [pc, #68]	@ (8003e8c <checkAktifCalisma+0x744>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	f083 0301 	eor.w	r3, r3, #1
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01d      	beq.n	8003e90 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8003e54:	4b08      	ldr	r3, [pc, #32]	@ (8003e78 <checkAktifCalisma+0x730>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e01c      	b.n	8003e96 <checkAktifCalisma+0x74e>
 8003e5c:	40010c00 	.word	0x40010c00
 8003e60:	20000dbd 	.word	0x20000dbd
 8003e64:	20000daf 	.word	0x20000daf
 8003e68:	20000df1 	.word	0x20000df1
 8003e6c:	20000df2 	.word	0x20000df2
 8003e70:	40011000 	.word	0x40011000
 8003e74:	20000db0 	.word	0x20000db0
 8003e78:	20000dd6 	.word	0x20000dd6
 8003e7c:	20000dd5 	.word	0x20000dd5
 8003e80:	20000dd9 	.word	0x20000dd9
 8003e84:	20000dd8 	.word	0x20000dd8
 8003e88:	20000dd7 	.word	0x20000dd7
 8003e8c:	20000ddb 	.word	0x20000ddb
				} else {
					devmotoryukaricalisiyor=0;
 8003e90:	4b64      	ldr	r3, [pc, #400]	@ (8004024 <checkAktifCalisma+0x8dc>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8003e96:	4b63      	ldr	r3, [pc, #396]	@ (8004024 <checkAktifCalisma+0x8dc>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d007      	beq.n	8003eae <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	2120      	movs	r1, #32
 8003ea2:	4861      	ldr	r0, [pc, #388]	@ (8004028 <checkAktifCalisma+0x8e0>)
 8003ea4:	f005 fea5 	bl	8009bf2 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8003ea8:	4b60      	ldr	r3, [pc, #384]	@ (800402c <checkAktifCalisma+0x8e4>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8003eae:	4b5f      	ldr	r3, [pc, #380]	@ (800402c <checkAktifCalisma+0x8e4>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d025      	beq.n	8003f02 <checkAktifCalisma+0x7ba>
 8003eb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003eba:	485d      	ldr	r0, [pc, #372]	@ (8004030 <checkAktifCalisma+0x8e8>)
 8003ebc:	f005 fe82 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d007      	beq.n	8003ed6 <checkAktifCalisma+0x78e>
 8003ec6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003eca:	4857      	ldr	r0, [pc, #348]	@ (8004028 <checkAktifCalisma+0x8e0>)
 8003ecc:	f005 fe7a 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d115      	bne.n	8003f02 <checkAktifCalisma+0x7ba>
 8003ed6:	4b57      	ldr	r3, [pc, #348]	@ (8004034 <checkAktifCalisma+0x8ec>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d011      	beq.n	8003f02 <checkAktifCalisma+0x7ba>
 8003ede:	4b56      	ldr	r3, [pc, #344]	@ (8004038 <checkAktifCalisma+0x8f0>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <checkAktifCalisma+0x7ba>
 8003ee6:	4b55      	ldr	r3, [pc, #340]	@ (800403c <checkAktifCalisma+0x8f4>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	f083 0301 	eor.w	r3, r3, #1
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d006      	beq.n	8003f02 <checkAktifCalisma+0x7ba>
					timer2=millis;
 8003ef4:	4b52      	ldr	r3, [pc, #328]	@ (8004040 <checkAktifCalisma+0x8f8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a52      	ldr	r2, [pc, #328]	@ (8004044 <checkAktifCalisma+0x8fc>)
 8003efa:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8003efc:	4b4f      	ldr	r3, [pc, #316]	@ (800403c <checkAktifCalisma+0x8f4>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8003f02:	4b4f      	ldr	r3, [pc, #316]	@ (8004040 <checkAktifCalisma+0x8f8>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b4f      	ldr	r3, [pc, #316]	@ (8004044 <checkAktifCalisma+0x8fc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	4a4e      	ldr	r2, [pc, #312]	@ (8004048 <checkAktifCalisma+0x900>)
 8003f0e:	7812      	ldrb	r2, [r2, #0]
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d303      	bcc.n	8003f1c <checkAktifCalisma+0x7d4>
 8003f14:	4b49      	ldr	r3, [pc, #292]	@ (800403c <checkAktifCalisma+0x8f4>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10d      	bne.n	8003f38 <checkAktifCalisma+0x7f0>
 8003f1c:	4b45      	ldr	r3, [pc, #276]	@ (8004034 <checkAktifCalisma+0x8ec>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	f083 0301 	eor.w	r3, r3, #1
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <checkAktifCalisma+0x7f0>
 8003f2a:	4b43      	ldr	r3, [pc, #268]	@ (8004038 <checkAktifCalisma+0x8f0>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	f083 0301 	eor.w	r3, r3, #1
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2120      	movs	r1, #32
 8003f3c:	483a      	ldr	r0, [pc, #232]	@ (8004028 <checkAktifCalisma+0x8e0>)
 8003f3e:	f005 fe58 	bl	8009bf2 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8003f42:	4b3a      	ldr	r3, [pc, #232]	@ (800402c <checkAktifCalisma+0x8e4>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8003f48:	4b3c      	ldr	r3, [pc, #240]	@ (800403c <checkAktifCalisma+0x8f4>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8003f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800404c <checkAktifCalisma+0x904>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f040 8088 	bne.w	8004068 <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8003f58:	4b3d      	ldr	r3, [pc, #244]	@ (8004050 <checkAktifCalisma+0x908>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d003      	beq.n	8003f68 <checkAktifCalisma+0x820>
 8003f60:	4b3b      	ldr	r3, [pc, #236]	@ (8004050 <checkAktifCalisma+0x908>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d17f      	bne.n	8004068 <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8003f68:	4b32      	ldr	r3, [pc, #200]	@ (8004034 <checkAktifCalisma+0x8ec>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d07b      	beq.n	8004068 <checkAktifCalisma+0x920>
 8003f70:	4b31      	ldr	r3, [pc, #196]	@ (8004038 <checkAktifCalisma+0x8f0>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d077      	beq.n	8004068 <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8003f78:	2140      	movs	r1, #64	@ 0x40
 8003f7a:	482b      	ldr	r0, [pc, #172]	@ (8004028 <checkAktifCalisma+0x8e0>)
 8003f7c:	f005 fe22 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d170      	bne.n	8004068 <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8003f86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003f8a:	4827      	ldr	r0, [pc, #156]	@ (8004028 <checkAktifCalisma+0x8e0>)
 8003f8c:	f005 fe1a 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <checkAktifCalisma+0x856>
 8003f96:	4b2f      	ldr	r3, [pc, #188]	@ (8004054 <checkAktifCalisma+0x90c>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d164      	bne.n	8004068 <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8003f9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fa2:	4823      	ldr	r0, [pc, #140]	@ (8004030 <checkAktifCalisma+0x8e8>)
 8003fa4:	f005 fe0e 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d10f      	bne.n	8003fce <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8003fae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003fb2:	481f      	ldr	r0, [pc, #124]	@ (8004030 <checkAktifCalisma+0x8e8>)
 8003fb4:	f005 fe06 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d107      	bne.n	8003fce <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8003fbe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003fc2:	481b      	ldr	r0, [pc, #108]	@ (8004030 <checkAktifCalisma+0x8e8>)
 8003fc4:	f005 fdfe 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d003      	beq.n	8003fd6 <checkAktifCalisma+0x88e>
 8003fce:	4b22      	ldr	r3, [pc, #136]	@ (8004058 <checkAktifCalisma+0x910>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d048      	beq.n	8004068 <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8003fd6:	4b21      	ldr	r3, [pc, #132]	@ (800405c <checkAktifCalisma+0x914>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	f083 0301 	eor.w	r3, r3, #1
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d041      	beq.n	8004068 <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8003fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8004060 <checkAktifCalisma+0x918>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	f083 0301 	eor.w	r3, r3, #1
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d03a      	beq.n	8004068 <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8003ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8004064 <checkAktifCalisma+0x91c>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	f083 0301 	eor.w	r3, r3, #1
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d033      	beq.n	8004068 <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8004000:	4b0a      	ldr	r3, [pc, #40]	@ (800402c <checkAktifCalisma+0x8e4>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	f083 0301 	eor.w	r3, r3, #1
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d02c      	beq.n	8004068 <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 800400e:	4b05      	ldr	r3, [pc, #20]	@ (8004024 <checkAktifCalisma+0x8dc>)
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	f083 0301 	eor.w	r3, r3, #1
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d025      	beq.n	8004068 <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 800401c:	4b0e      	ldr	r3, [pc, #56]	@ (8004058 <checkAktifCalisma+0x910>)
 800401e:	2201      	movs	r2, #1
 8004020:	701a      	strb	r2, [r3, #0]
 8004022:	e024      	b.n	800406e <checkAktifCalisma+0x926>
 8004024:	20000dd6 	.word	0x20000dd6
 8004028:	40011000 	.word	0x40011000
 800402c:	20000dda 	.word	0x20000dda
 8004030:	40010c00 	.word	0x40010c00
 8004034:	20000df1 	.word	0x20000df1
 8004038:	20000df2 	.word	0x20000df2
 800403c:	20000dd2 	.word	0x20000dd2
 8004040:	20000d78 	.word	0x20000d78
 8004044:	20000d84 	.word	0x20000d84
 8004048:	20000db6 	.word	0x20000db6
 800404c:	20000dbd 	.word	0x20000dbd
 8004050:	20000daf 	.word	0x20000daf
 8004054:	20000db1 	.word	0x20000db1
 8004058:	20000dd7 	.word	0x20000dd7
 800405c:	20000dd5 	.word	0x20000dd5
 8004060:	20000dd9 	.word	0x20000dd9
 8004064:	20000dd8 	.word	0x20000dd8
				} else {
					devmotorasagicalisiyor=0;
 8004068:	4b96      	ldr	r3, [pc, #600]	@ (80042c4 <checkAktifCalisma+0xb7c>)
 800406a:	2200      	movs	r2, #0
 800406c:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 800406e:	4b95      	ldr	r3, [pc, #596]	@ (80042c4 <checkAktifCalisma+0xb7c>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d007      	beq.n	8004086 <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004076:	2201      	movs	r2, #1
 8004078:	2110      	movs	r1, #16
 800407a:	4893      	ldr	r0, [pc, #588]	@ (80042c8 <checkAktifCalisma+0xb80>)
 800407c:	f005 fdb9 	bl	8009bf2 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004080:	4b92      	ldr	r3, [pc, #584]	@ (80042cc <checkAktifCalisma+0xb84>)
 8004082:	2201      	movs	r2, #1
 8004084:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004086:	4b91      	ldr	r3, [pc, #580]	@ (80042cc <checkAktifCalisma+0xb84>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d024      	beq.n	80040d8 <checkAktifCalisma+0x990>
 800408e:	2140      	movs	r1, #64	@ 0x40
 8004090:	488d      	ldr	r0, [pc, #564]	@ (80042c8 <checkAktifCalisma+0xb80>)
 8004092:	f005 fd97 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004096:	4603      	mov	r3, r0
 8004098:	2b01      	cmp	r3, #1
 800409a:	d007      	beq.n	80040ac <checkAktifCalisma+0x964>
 800409c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80040a0:	4889      	ldr	r0, [pc, #548]	@ (80042c8 <checkAktifCalisma+0xb80>)
 80040a2:	f005 fd8f 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d115      	bne.n	80040d8 <checkAktifCalisma+0x990>
 80040ac:	4b88      	ldr	r3, [pc, #544]	@ (80042d0 <checkAktifCalisma+0xb88>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d011      	beq.n	80040d8 <checkAktifCalisma+0x990>
 80040b4:	4b87      	ldr	r3, [pc, #540]	@ (80042d4 <checkAktifCalisma+0xb8c>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00d      	beq.n	80040d8 <checkAktifCalisma+0x990>
 80040bc:	4b86      	ldr	r3, [pc, #536]	@ (80042d8 <checkAktifCalisma+0xb90>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	f083 0301 	eor.w	r3, r3, #1
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d006      	beq.n	80040d8 <checkAktifCalisma+0x990>
					timer2=millis;
 80040ca:	4b84      	ldr	r3, [pc, #528]	@ (80042dc <checkAktifCalisma+0xb94>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a84      	ldr	r2, [pc, #528]	@ (80042e0 <checkAktifCalisma+0xb98>)
 80040d0:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 80040d2:	4b81      	ldr	r3, [pc, #516]	@ (80042d8 <checkAktifCalisma+0xb90>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80040d8:	4b80      	ldr	r3, [pc, #512]	@ (80042dc <checkAktifCalisma+0xb94>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4b80      	ldr	r3, [pc, #512]	@ (80042e0 <checkAktifCalisma+0xb98>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	4a80      	ldr	r2, [pc, #512]	@ (80042e4 <checkAktifCalisma+0xb9c>)
 80040e4:	7812      	ldrb	r2, [r2, #0]
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d303      	bcc.n	80040f2 <checkAktifCalisma+0x9aa>
 80040ea:	4b7b      	ldr	r3, [pc, #492]	@ (80042d8 <checkAktifCalisma+0xb90>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10d      	bne.n	800410e <checkAktifCalisma+0x9c6>
 80040f2:	4b77      	ldr	r3, [pc, #476]	@ (80042d0 <checkAktifCalisma+0xb88>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	f083 0301 	eor.w	r3, r3, #1
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d106      	bne.n	800410e <checkAktifCalisma+0x9c6>
 8004100:	4b74      	ldr	r3, [pc, #464]	@ (80042d4 <checkAktifCalisma+0xb8c>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	f083 0301 	eor.w	r3, r3, #1
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800410e:	2200      	movs	r2, #0
 8004110:	2110      	movs	r1, #16
 8004112:	486d      	ldr	r0, [pc, #436]	@ (80042c8 <checkAktifCalisma+0xb80>)
 8004114:	f005 fd6d 	bl	8009bf2 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004118:	4b6c      	ldr	r3, [pc, #432]	@ (80042cc <checkAktifCalisma+0xb84>)
 800411a:	2200      	movs	r2, #0
 800411c:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 800411e:	4b6e      	ldr	r3, [pc, #440]	@ (80042d8 <checkAktifCalisma+0xb90>)
 8004120:	2200      	movs	r2, #0
 8004122:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004124:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004128:	486f      	ldr	r0, [pc, #444]	@ (80042e8 <checkAktifCalisma+0xba0>)
 800412a:	f005 fd4b 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d120      	bne.n	8004176 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004134:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004138:	486b      	ldr	r0, [pc, #428]	@ (80042e8 <checkAktifCalisma+0xba0>)
 800413a:	f005 fd43 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d118      	bne.n	8004176 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004144:	2104      	movs	r1, #4
 8004146:	4868      	ldr	r0, [pc, #416]	@ (80042e8 <checkAktifCalisma+0xba0>)
 8004148:	f005 fd3c 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d111      	bne.n	8004176 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004152:	2102      	movs	r1, #2
 8004154:	4864      	ldr	r0, [pc, #400]	@ (80042e8 <checkAktifCalisma+0xba0>)
 8004156:	f005 fd35 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004160:	2101      	movs	r1, #1
 8004162:	4861      	ldr	r0, [pc, #388]	@ (80042e8 <checkAktifCalisma+0xba0>)
 8004164:	f005 fd2e 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d103      	bne.n	8004176 <checkAktifCalisma+0xa2e>
					makineStop=1;
 800416e:	4b5f      	ldr	r3, [pc, #380]	@ (80042ec <checkAktifCalisma+0xba4>)
 8004170:	2201      	movs	r2, #1
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e002      	b.n	800417c <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 8004176:	4b5d      	ldr	r3, [pc, #372]	@ (80042ec <checkAktifCalisma+0xba4>)
 8004178:	2200      	movs	r2, #0
 800417a:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800417c:	4b5c      	ldr	r3, [pc, #368]	@ (80042f0 <checkAktifCalisma+0xba8>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d144      	bne.n	800420e <checkAktifCalisma+0xac6>
 8004184:	4b5b      	ldr	r3, [pc, #364]	@ (80042f4 <checkAktifCalisma+0xbac>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d003      	beq.n	8004194 <checkAktifCalisma+0xa4c>
 800418c:	4b59      	ldr	r3, [pc, #356]	@ (80042f4 <checkAktifCalisma+0xbac>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d13c      	bne.n	800420e <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004194:	2180      	movs	r1, #128	@ 0x80
 8004196:	484c      	ldr	r0, [pc, #304]	@ (80042c8 <checkAktifCalisma+0xb80>)
 8004198:	f005 fd14 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d103      	bne.n	80041aa <checkAktifCalisma+0xa62>
 80041a2:	4b55      	ldr	r3, [pc, #340]	@ (80042f8 <checkAktifCalisma+0xbb0>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00b      	beq.n	80041c2 <checkAktifCalisma+0xa7a>
 80041aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80041ae:	484e      	ldr	r0, [pc, #312]	@ (80042e8 <checkAktifCalisma+0xba0>)
 80041b0:	f005 fd08 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d129      	bne.n	800420e <checkAktifCalisma+0xac6>
 80041ba:	4b4f      	ldr	r3, [pc, #316]	@ (80042f8 <checkAktifCalisma+0xbb0>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d125      	bne.n	800420e <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80041c2:	2104      	movs	r1, #4
 80041c4:	4840      	ldr	r0, [pc, #256]	@ (80042c8 <checkAktifCalisma+0xb80>)
 80041c6:	f005 fcfd 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d003      	beq.n	80041d8 <checkAktifCalisma+0xa90>
 80041d0:	4b4a      	ldr	r3, [pc, #296]	@ (80042fc <checkAktifCalisma+0xbb4>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d11a      	bne.n	800420e <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80041d8:	2102      	movs	r1, #2
 80041da:	483b      	ldr	r0, [pc, #236]	@ (80042c8 <checkAktifCalisma+0xb80>)
 80041dc:	f005 fcf2 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d113      	bne.n	800420e <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 80041e6:	4b46      	ldr	r3, [pc, #280]	@ (8004300 <checkAktifCalisma+0xbb8>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	f083 0301 	eor.w	r3, r3, #1
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00c      	beq.n	800420e <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 80041f4:	4b3d      	ldr	r3, [pc, #244]	@ (80042ec <checkAktifCalisma+0xba4>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 80041fc:	4b41      	ldr	r3, [pc, #260]	@ (8004304 <checkAktifCalisma+0xbbc>)
 80041fe:	2201      	movs	r2, #1
 8004200:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004202:	4b36      	ldr	r3, [pc, #216]	@ (80042dc <checkAktifCalisma+0xb94>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a40      	ldr	r2, [pc, #256]	@ (8004308 <checkAktifCalisma+0xbc0>)
 8004208:	6013      	str	r3, [r2, #0]
					bekle();
 800420a:	f7ff f901 	bl	8003410 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800420e:	4b33      	ldr	r3, [pc, #204]	@ (80042dc <checkAktifCalisma+0xb94>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4b3d      	ldr	r3, [pc, #244]	@ (8004308 <checkAktifCalisma+0xbc0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	4a3c      	ldr	r2, [pc, #240]	@ (800430c <checkAktifCalisma+0xbc4>)
 800421a:	7812      	ldrb	r2, [r2, #0]
 800421c:	4293      	cmp	r3, r2
 800421e:	d211      	bcs.n	8004244 <checkAktifCalisma+0xafc>
 8004220:	2104      	movs	r1, #4
 8004222:	4829      	ldr	r0, [pc, #164]	@ (80042c8 <checkAktifCalisma+0xb80>)
 8004224:	f005 fcce 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <checkAktifCalisma+0xafc>
 800422e:	4b33      	ldr	r3, [pc, #204]	@ (80042fc <checkAktifCalisma+0xbb4>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d006      	beq.n	8004244 <checkAktifCalisma+0xafc>
 8004236:	4b2d      	ldr	r3, [pc, #180]	@ (80042ec <checkAktifCalisma+0xba4>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	f083 0301 	eor.w	r3, r3, #1
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 8004244:	4b2f      	ldr	r3, [pc, #188]	@ (8004304 <checkAktifCalisma+0xbbc>)
 8004246:	2200      	movs	r2, #0
 8004248:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800424a:	4b29      	ldr	r3, [pc, #164]	@ (80042f0 <checkAktifCalisma+0xba8>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d160      	bne.n	8004314 <checkAktifCalisma+0xbcc>
 8004252:	4b28      	ldr	r3, [pc, #160]	@ (80042f4 <checkAktifCalisma+0xbac>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d003      	beq.n	8004262 <checkAktifCalisma+0xb1a>
 800425a:	4b26      	ldr	r3, [pc, #152]	@ (80042f4 <checkAktifCalisma+0xbac>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b03      	cmp	r3, #3
 8004260:	d158      	bne.n	8004314 <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004262:	2104      	movs	r1, #4
 8004264:	4818      	ldr	r0, [pc, #96]	@ (80042c8 <checkAktifCalisma+0xb80>)
 8004266:	f005 fcad 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800426a:	4603      	mov	r3, r0
 800426c:	2b01      	cmp	r3, #1
 800426e:	d003      	beq.n	8004278 <checkAktifCalisma+0xb30>
 8004270:	4b22      	ldr	r3, [pc, #136]	@ (80042fc <checkAktifCalisma+0xbb4>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d14d      	bne.n	8004314 <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004278:	2102      	movs	r1, #2
 800427a:	4813      	ldr	r0, [pc, #76]	@ (80042c8 <checkAktifCalisma+0xb80>)
 800427c:	f005 fca2 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d146      	bne.n	8004314 <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004286:	2180      	movs	r1, #128	@ 0x80
 8004288:	480f      	ldr	r0, [pc, #60]	@ (80042c8 <checkAktifCalisma+0xb80>)
 800428a:	f005 fc9b 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d103      	bne.n	800429c <checkAktifCalisma+0xb54>
 8004294:	4b18      	ldr	r3, [pc, #96]	@ (80042f8 <checkAktifCalisma+0xbb0>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00b      	beq.n	80042b4 <checkAktifCalisma+0xb6c>
 800429c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80042a0:	4811      	ldr	r0, [pc, #68]	@ (80042e8 <checkAktifCalisma+0xba0>)
 80042a2:	f005 fc8f 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d133      	bne.n	8004314 <checkAktifCalisma+0xbcc>
 80042ac:	4b12      	ldr	r3, [pc, #72]	@ (80042f8 <checkAktifCalisma+0xbb0>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d12f      	bne.n	8004314 <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 80042b4:	4b0d      	ldr	r3, [pc, #52]	@ (80042ec <checkAktifCalisma+0xba4>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d02b      	beq.n	8004314 <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 80042bc:	4b14      	ldr	r3, [pc, #80]	@ (8004310 <checkAktifCalisma+0xbc8>)
 80042be:	2201      	movs	r2, #1
 80042c0:	701a      	strb	r2, [r3, #0]
 80042c2:	e02a      	b.n	800431a <checkAktifCalisma+0xbd2>
 80042c4:	20000dd7 	.word	0x20000dd7
 80042c8:	40011000 	.word	0x40011000
 80042cc:	20000ddb 	.word	0x20000ddb
 80042d0:	20000df1 	.word	0x20000df1
 80042d4:	20000df2 	.word	0x20000df2
 80042d8:	20000dd3 	.word	0x20000dd3
 80042dc:	20000d78 	.word	0x20000d78
 80042e0:	20000d84 	.word	0x20000d84
 80042e4:	20000db6 	.word	0x20000db6
 80042e8:	40010c00 	.word	0x40010c00
 80042ec:	20000de1 	.word	0x20000de1
 80042f0:	20000da9 	.word	0x20000da9
 80042f4:	20000da8 	.word	0x20000da8
 80042f8:	20000dac 	.word	0x20000dac
 80042fc:	20000da6 	.word	0x20000da6
 8004300:	20000dcf 	.word	0x20000dcf
 8004304:	20000de2 	.word	0x20000de2
 8004308:	20000d7c 	.word	0x20000d7c
 800430c:	20000db9 	.word	0x20000db9
 8004310:	20000de3 	.word	0x20000de3
				} else {
					kapi1butonkontrol=0;
 8004314:	4b8b      	ldr	r3, [pc, #556]	@ (8004544 <checkAktifCalisma+0xdfc>)
 8004316:	2200      	movs	r2, #0
 8004318:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800431a:	4b8b      	ldr	r3, [pc, #556]	@ (8004548 <checkAktifCalisma+0xe00>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d121      	bne.n	8004366 <checkAktifCalisma+0xc1e>
 8004322:	4b8a      	ldr	r3, [pc, #552]	@ (800454c <checkAktifCalisma+0xe04>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d003      	beq.n	8004332 <checkAktifCalisma+0xbea>
 800432a:	4b88      	ldr	r3, [pc, #544]	@ (800454c <checkAktifCalisma+0xe04>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b03      	cmp	r3, #3
 8004330:	d119      	bne.n	8004366 <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004332:	2104      	movs	r1, #4
 8004334:	4886      	ldr	r0, [pc, #536]	@ (8004550 <checkAktifCalisma+0xe08>)
 8004336:	f005 fc45 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800433a:	4603      	mov	r3, r0
 800433c:	2b01      	cmp	r3, #1
 800433e:	d003      	beq.n	8004348 <checkAktifCalisma+0xc00>
 8004340:	4b84      	ldr	r3, [pc, #528]	@ (8004554 <checkAktifCalisma+0xe0c>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10e      	bne.n	8004366 <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004348:	2102      	movs	r1, #2
 800434a:	4881      	ldr	r0, [pc, #516]	@ (8004550 <checkAktifCalisma+0xe08>)
 800434c:	f005 fc3a 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d107      	bne.n	8004366 <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 8004356:	4b80      	ldr	r3, [pc, #512]	@ (8004558 <checkAktifCalisma+0xe10>)
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 800435e:	4b7f      	ldr	r3, [pc, #508]	@ (800455c <checkAktifCalisma+0xe14>)
 8004360:	2201      	movs	r2, #1
 8004362:	701a      	strb	r2, [r3, #0]
 8004364:	e002      	b.n	800436c <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8004366:	4b7d      	ldr	r3, [pc, #500]	@ (800455c <checkAktifCalisma+0xe14>)
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 800436c:	4b75      	ldr	r3, [pc, #468]	@ (8004544 <checkAktifCalisma+0xdfc>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d107      	bne.n	8004384 <checkAktifCalisma+0xc3c>
 8004374:	4b79      	ldr	r3, [pc, #484]	@ (800455c <checkAktifCalisma+0xe14>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d103      	bne.n	8004384 <checkAktifCalisma+0xc3c>
 800437c:	4b78      	ldr	r3, [pc, #480]	@ (8004560 <checkAktifCalisma+0xe18>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004384:	2201      	movs	r2, #1
 8004386:	2180      	movs	r1, #128	@ 0x80
 8004388:	4876      	ldr	r0, [pc, #472]	@ (8004564 <checkAktifCalisma+0xe1c>)
 800438a:	f005 fc32 	bl	8009bf2 <HAL_GPIO_WritePin>
 800438e:	e004      	b.n	800439a <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004390:	2200      	movs	r2, #0
 8004392:	2180      	movs	r1, #128	@ 0x80
 8004394:	4873      	ldr	r0, [pc, #460]	@ (8004564 <checkAktifCalisma+0xe1c>)
 8004396:	f005 fc2c 	bl	8009bf2 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800439a:	4b73      	ldr	r3, [pc, #460]	@ (8004568 <checkAktifCalisma+0xe20>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d141      	bne.n	8004426 <checkAktifCalisma+0xcde>
 80043a2:	4b6a      	ldr	r3, [pc, #424]	@ (800454c <checkAktifCalisma+0xe04>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d003      	beq.n	80043b2 <checkAktifCalisma+0xc6a>
 80043aa:	4b68      	ldr	r3, [pc, #416]	@ (800454c <checkAktifCalisma+0xe04>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d139      	bne.n	8004426 <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80043b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80043b6:	4866      	ldr	r0, [pc, #408]	@ (8004550 <checkAktifCalisma+0xe08>)
 80043b8:	f005 fc04 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d103      	bne.n	80043ca <checkAktifCalisma+0xc82>
 80043c2:	4b6a      	ldr	r3, [pc, #424]	@ (800456c <checkAktifCalisma+0xe24>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <checkAktifCalisma+0xc9a>
 80043ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80043ce:	4868      	ldr	r0, [pc, #416]	@ (8004570 <checkAktifCalisma+0xe28>)
 80043d0:	f005 fbf8 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d125      	bne.n	8004426 <checkAktifCalisma+0xcde>
 80043da:	4b64      	ldr	r3, [pc, #400]	@ (800456c <checkAktifCalisma+0xe24>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d121      	bne.n	8004426 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80043e2:	2102      	movs	r1, #2
 80043e4:	485a      	ldr	r0, [pc, #360]	@ (8004550 <checkAktifCalisma+0xe08>)
 80043e6:	f005 fbed 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d11a      	bne.n	8004426 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80043f0:	2104      	movs	r1, #4
 80043f2:	4857      	ldr	r0, [pc, #348]	@ (8004550 <checkAktifCalisma+0xe08>)
 80043f4:	f005 fbe6 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d113      	bne.n	8004426 <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 80043fe:	4b56      	ldr	r3, [pc, #344]	@ (8004558 <checkAktifCalisma+0xe10>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00f      	beq.n	8004426 <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 8004406:	4b5b      	ldr	r3, [pc, #364]	@ (8004574 <checkAktifCalisma+0xe2c>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	f083 0301 	eor.w	r3, r3, #1
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 8004414:	4b58      	ldr	r3, [pc, #352]	@ (8004578 <checkAktifCalisma+0xe30>)
 8004416:	2201      	movs	r2, #1
 8004418:	701a      	strb	r2, [r3, #0]
					timer = millis;
 800441a:	4b58      	ldr	r3, [pc, #352]	@ (800457c <checkAktifCalisma+0xe34>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a58      	ldr	r2, [pc, #352]	@ (8004580 <checkAktifCalisma+0xe38>)
 8004420:	6013      	str	r3, [r2, #0]
					bekle();
 8004422:	f7fe fff5 	bl	8003410 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004426:	4b55      	ldr	r3, [pc, #340]	@ (800457c <checkAktifCalisma+0xe34>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	4b55      	ldr	r3, [pc, #340]	@ (8004580 <checkAktifCalisma+0xe38>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	4a54      	ldr	r2, [pc, #336]	@ (8004584 <checkAktifCalisma+0xe3c>)
 8004432:	7812      	ldrb	r2, [r2, #0]
 8004434:	4293      	cmp	r3, r2
 8004436:	d20d      	bcs.n	8004454 <checkAktifCalisma+0xd0c>
 8004438:	2102      	movs	r1, #2
 800443a:	4845      	ldr	r0, [pc, #276]	@ (8004550 <checkAktifCalisma+0xe08>)
 800443c:	f005 fbc2 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d006      	beq.n	8004454 <checkAktifCalisma+0xd0c>
 8004446:	4b44      	ldr	r3, [pc, #272]	@ (8004558 <checkAktifCalisma+0xe10>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	f083 0301 	eor.w	r3, r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 8004454:	4b48      	ldr	r3, [pc, #288]	@ (8004578 <checkAktifCalisma+0xe30>)
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800445a:	4b43      	ldr	r3, [pc, #268]	@ (8004568 <checkAktifCalisma+0xe20>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d135      	bne.n	80044ce <checkAktifCalisma+0xd86>
 8004462:	4b3a      	ldr	r3, [pc, #232]	@ (800454c <checkAktifCalisma+0xe04>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d003      	beq.n	8004472 <checkAktifCalisma+0xd2a>
 800446a:	4b38      	ldr	r3, [pc, #224]	@ (800454c <checkAktifCalisma+0xe04>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b03      	cmp	r3, #3
 8004470:	d12d      	bne.n	80044ce <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004472:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004476:	4836      	ldr	r0, [pc, #216]	@ (8004550 <checkAktifCalisma+0xe08>)
 8004478:	f005 fba4 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d103      	bne.n	800448a <checkAktifCalisma+0xd42>
 8004482:	4b3a      	ldr	r3, [pc, #232]	@ (800456c <checkAktifCalisma+0xe24>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00b      	beq.n	80044a2 <checkAktifCalisma+0xd5a>
 800448a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800448e:	4838      	ldr	r0, [pc, #224]	@ (8004570 <checkAktifCalisma+0xe28>)
 8004490:	f005 fb98 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d119      	bne.n	80044ce <checkAktifCalisma+0xd86>
 800449a:	4b34      	ldr	r3, [pc, #208]	@ (800456c <checkAktifCalisma+0xe24>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d115      	bne.n	80044ce <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80044a2:	2102      	movs	r1, #2
 80044a4:	482a      	ldr	r0, [pc, #168]	@ (8004550 <checkAktifCalisma+0xe08>)
 80044a6:	f005 fb8d 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d10e      	bne.n	80044ce <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80044b0:	2104      	movs	r1, #4
 80044b2:	4827      	ldr	r0, [pc, #156]	@ (8004550 <checkAktifCalisma+0xe08>)
 80044b4:	f005 fb86 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d107      	bne.n	80044ce <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 80044be:	4b26      	ldr	r3, [pc, #152]	@ (8004558 <checkAktifCalisma+0xe10>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 80044c6:	4b30      	ldr	r3, [pc, #192]	@ (8004588 <checkAktifCalisma+0xe40>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]
 80044cc:	e002      	b.n	80044d4 <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 80044ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004588 <checkAktifCalisma+0xe40>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80044d4:	4b24      	ldr	r3, [pc, #144]	@ (8004568 <checkAktifCalisma+0xe20>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d11d      	bne.n	8004518 <checkAktifCalisma+0xdd0>
 80044dc:	4b1b      	ldr	r3, [pc, #108]	@ (800454c <checkAktifCalisma+0xe04>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d003      	beq.n	80044ec <checkAktifCalisma+0xda4>
 80044e4:	4b19      	ldr	r3, [pc, #100]	@ (800454c <checkAktifCalisma+0xe04>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d115      	bne.n	8004518 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80044ec:	2102      	movs	r1, #2
 80044ee:	4818      	ldr	r0, [pc, #96]	@ (8004550 <checkAktifCalisma+0xe08>)
 80044f0:	f005 fb68 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d10e      	bne.n	8004518 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80044fa:	2104      	movs	r1, #4
 80044fc:	4814      	ldr	r0, [pc, #80]	@ (8004550 <checkAktifCalisma+0xe08>)
 80044fe:	f005 fb61 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d107      	bne.n	8004518 <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 8004508:	4b13      	ldr	r3, [pc, #76]	@ (8004558 <checkAktifCalisma+0xe10>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8004510:	4b1e      	ldr	r3, [pc, #120]	@ (800458c <checkAktifCalisma+0xe44>)
 8004512:	2201      	movs	r2, #1
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	e002      	b.n	800451e <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8004518:	4b1c      	ldr	r3, [pc, #112]	@ (800458c <checkAktifCalisma+0xe44>)
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800451e:	4b1a      	ldr	r3, [pc, #104]	@ (8004588 <checkAktifCalisma+0xe40>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d107      	bne.n	8004536 <checkAktifCalisma+0xdee>
 8004526:	4b19      	ldr	r3, [pc, #100]	@ (800458c <checkAktifCalisma+0xe44>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d103      	bne.n	8004536 <checkAktifCalisma+0xdee>
 800452e:	4b12      	ldr	r3, [pc, #72]	@ (8004578 <checkAktifCalisma+0xe30>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d02c      	beq.n	8004590 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8004536:	2201      	movs	r2, #1
 8004538:	2140      	movs	r1, #64	@ 0x40
 800453a:	480a      	ldr	r0, [pc, #40]	@ (8004564 <checkAktifCalisma+0xe1c>)
 800453c:	f005 fb59 	bl	8009bf2 <HAL_GPIO_WritePin>
 8004540:	e02b      	b.n	800459a <checkAktifCalisma+0xe52>
 8004542:	bf00      	nop
 8004544:	20000de3 	.word	0x20000de3
 8004548:	20000da9 	.word	0x20000da9
 800454c:	20000da8 	.word	0x20000da8
 8004550:	40011000 	.word	0x40011000
 8004554:	20000da6 	.word	0x20000da6
 8004558:	20000de1 	.word	0x20000de1
 800455c:	20000de4 	.word	0x20000de4
 8004560:	20000de2 	.word	0x20000de2
 8004564:	40010800 	.word	0x40010800
 8004568:	20000daa 	.word	0x20000daa
 800456c:	20000dac 	.word	0x20000dac
 8004570:	40010c00 	.word	0x40010c00
 8004574:	20000dcf 	.word	0x20000dcf
 8004578:	20000de5 	.word	0x20000de5
 800457c:	20000d78 	.word	0x20000d78
 8004580:	20000d7c 	.word	0x20000d7c
 8004584:	20000dba 	.word	0x20000dba
 8004588:	20000de6 	.word	0x20000de6
 800458c:	20000de7 	.word	0x20000de7
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004590:	2200      	movs	r2, #0
 8004592:	2140      	movs	r1, #64	@ 0x40
 8004594:	4835      	ldr	r0, [pc, #212]	@ (800466c <checkAktifCalisma+0xf24>)
 8004596:	f005 fb2c 	bl	8009bf2 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 800459a:	4b35      	ldr	r3, [pc, #212]	@ (8004670 <checkAktifCalisma+0xf28>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <checkAktifCalisma+0xe62>
 80045a2:	4b33      	ldr	r3, [pc, #204]	@ (8004670 <checkAktifCalisma+0xf28>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d115      	bne.n	80045d6 <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80045aa:	2104      	movs	r1, #4
 80045ac:	4831      	ldr	r0, [pc, #196]	@ (8004674 <checkAktifCalisma+0xf2c>)
 80045ae:	f005 fb09 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d003      	beq.n	80045c0 <checkAktifCalisma+0xe78>
 80045b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004678 <checkAktifCalisma+0xf30>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10a      	bne.n	80045d6 <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80045c0:	2102      	movs	r1, #2
 80045c2:	482c      	ldr	r0, [pc, #176]	@ (8004674 <checkAktifCalisma+0xf2c>)
 80045c4:	f005 fafe 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d103      	bne.n	80045d6 <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 80045ce:	4b2b      	ldr	r3, [pc, #172]	@ (800467c <checkAktifCalisma+0xf34>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	701a      	strb	r2, [r3, #0]
 80045d4:	e002      	b.n	80045dc <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 80045d6:	4b29      	ldr	r3, [pc, #164]	@ (800467c <checkAktifCalisma+0xf34>)
 80045d8:	2200      	movs	r2, #0
 80045da:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80045dc:	4b24      	ldr	r3, [pc, #144]	@ (8004670 <checkAktifCalisma+0xf28>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d003      	beq.n	80045ec <checkAktifCalisma+0xea4>
 80045e4:	4b22      	ldr	r3, [pc, #136]	@ (8004670 <checkAktifCalisma+0xf28>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d111      	bne.n	8004610 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80045ec:	2102      	movs	r1, #2
 80045ee:	4821      	ldr	r0, [pc, #132]	@ (8004674 <checkAktifCalisma+0xf2c>)
 80045f0:	f005 fae8 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d10a      	bne.n	8004610 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80045fa:	2104      	movs	r1, #4
 80045fc:	481d      	ldr	r0, [pc, #116]	@ (8004674 <checkAktifCalisma+0xf2c>)
 80045fe:	f005 fae1 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d103      	bne.n	8004610 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8004608:	4b1d      	ldr	r3, [pc, #116]	@ (8004680 <checkAktifCalisma+0xf38>)
 800460a:	2201      	movs	r2, #1
 800460c:	701a      	strb	r2, [r3, #0]
 800460e:	e002      	b.n	8004616 <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8004610:	4b1b      	ldr	r3, [pc, #108]	@ (8004680 <checkAktifCalisma+0xf38>)
 8004612:	2200      	movs	r2, #0
 8004614:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8004616:	4b19      	ldr	r3, [pc, #100]	@ (800467c <checkAktifCalisma+0xf34>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00f      	beq.n	800463e <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 800461e:	4b19      	ldr	r3, [pc, #100]	@ (8004684 <checkAktifCalisma+0xf3c>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d10b      	bne.n	800463e <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8004626:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800462a:	4817      	ldr	r0, [pc, #92]	@ (8004688 <checkAktifCalisma+0xf40>)
 800462c:	f005 faca 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 8004636:	4b15      	ldr	r3, [pc, #84]	@ (800468c <checkAktifCalisma+0xf44>)
 8004638:	2201      	movs	r2, #1
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	e002      	b.n	8004644 <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 800463e:	4b13      	ldr	r3, [pc, #76]	@ (800468c <checkAktifCalisma+0xf44>)
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8004644:	4b0e      	ldr	r3, [pc, #56]	@ (8004680 <checkAktifCalisma+0xf38>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d023      	beq.n	8004694 <checkAktifCalisma+0xf4c>
						&& kapiAcTipi==1
 800464c:	4b0d      	ldr	r3, [pc, #52]	@ (8004684 <checkAktifCalisma+0xf3c>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d11f      	bne.n	8004694 <checkAktifCalisma+0xf4c>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8004654:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004658:	480b      	ldr	r0, [pc, #44]	@ (8004688 <checkAktifCalisma+0xf40>)
 800465a:	f005 fab3 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d117      	bne.n	8004694 <checkAktifCalisma+0xf4c>

					kapiactablaesp2=1;
 8004664:	4b0a      	ldr	r3, [pc, #40]	@ (8004690 <checkAktifCalisma+0xf48>)
 8004666:	2201      	movs	r2, #1
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	e016      	b.n	800469a <checkAktifCalisma+0xf52>
 800466c:	40010800 	.word	0x40010800
 8004670:	20000dad 	.word	0x20000dad
 8004674:	40011000 	.word	0x40011000
 8004678:	20000da6 	.word	0x20000da6
 800467c:	20000deb 	.word	0x20000deb
 8004680:	20000dec 	.word	0x20000dec
 8004684:	20000dac 	.word	0x20000dac
 8004688:	40010c00 	.word	0x40010c00
 800468c:	20000dfb 	.word	0x20000dfb
 8004690:	20000dfc 	.word	0x20000dfc
				} else {
					kapiactablaesp2=0;
 8004694:	4b7e      	ldr	r3, [pc, #504]	@ (8004890 <checkAktifCalisma+0x1148>)
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800469a:	4b7e      	ldr	r3, [pc, #504]	@ (8004894 <checkAktifCalisma+0x114c>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d154      	bne.n	800474c <checkAktifCalisma+0x1004>
 80046a2:	4b7d      	ldr	r3, [pc, #500]	@ (8004898 <checkAktifCalisma+0x1150>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d003      	beq.n	80046b2 <checkAktifCalisma+0xf6a>
 80046aa:	4b7b      	ldr	r3, [pc, #492]	@ (8004898 <checkAktifCalisma+0x1150>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d14c      	bne.n	800474c <checkAktifCalisma+0x1004>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80046b2:	4b7a      	ldr	r3, [pc, #488]	@ (800489c <checkAktifCalisma+0x1154>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d103      	bne.n	80046c2 <checkAktifCalisma+0xf7a>
 80046ba:	4b79      	ldr	r3, [pc, #484]	@ (80048a0 <checkAktifCalisma+0x1158>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d044      	beq.n	800474c <checkAktifCalisma+0x1004>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 80046c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80046c6:	4877      	ldr	r0, [pc, #476]	@ (80048a4 <checkAktifCalisma+0x115c>)
 80046c8:	f005 fa7c 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01c      	beq.n	800470c <checkAktifCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 80046d2:	2180      	movs	r1, #128	@ 0x80
 80046d4:	4873      	ldr	r0, [pc, #460]	@ (80048a4 <checkAktifCalisma+0x115c>)
 80046d6:	f005 fa75 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d106      	bne.n	80046ee <checkAktifCalisma+0xfa6>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 80046e0:	2104      	movs	r1, #4
 80046e2:	4870      	ldr	r0, [pc, #448]	@ (80048a4 <checkAktifCalisma+0x115c>)
 80046e4:	f005 fa6e 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d00e      	beq.n	800470c <checkAktifCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 80046ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80046f2:	486c      	ldr	r0, [pc, #432]	@ (80048a4 <checkAktifCalisma+0x115c>)
 80046f4:	f005 fa66 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <checkAktifCalisma+0xfcc>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 80046fe:	2102      	movs	r1, #2
 8004700:	4868      	ldr	r0, [pc, #416]	@ (80048a4 <checkAktifCalisma+0x115c>)
 8004702:	f005 fa5f 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004706:	4603      	mov	r3, r0
 8004708:	2b01      	cmp	r3, #1
 800470a:	d103      	bne.n	8004714 <checkAktifCalisma+0xfcc>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800470c:	4b66      	ldr	r3, [pc, #408]	@ (80048a8 <checkAktifCalisma+0x1160>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <checkAktifCalisma+0xfdc>
 8004714:	4b65      	ldr	r3, [pc, #404]	@ (80048ac <checkAktifCalisma+0x1164>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d103      	bne.n	8004724 <checkAktifCalisma+0xfdc>
 800471c:	4b5c      	ldr	r3, [pc, #368]	@ (8004890 <checkAktifCalisma+0x1148>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d013      	beq.n	800474c <checkAktifCalisma+0x1004>
						&&(makineStop==1)
 8004724:	4b62      	ldr	r3, [pc, #392]	@ (80048b0 <checkAktifCalisma+0x1168>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00f      	beq.n	800474c <checkAktifCalisma+0x1004>
						&&(butonKontrol==0)) {
 800472c:	4b61      	ldr	r3, [pc, #388]	@ (80048b4 <checkAktifCalisma+0x116c>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	f083 0301 	eor.w	r3, r3, #1
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d008      	beq.n	800474c <checkAktifCalisma+0x1004>

					kapiTablaprudhome=1;
 800473a:	4b5f      	ldr	r3, [pc, #380]	@ (80048b8 <checkAktifCalisma+0x1170>)
 800473c:	2201      	movs	r2, #1
 800473e:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004740:	4b5e      	ldr	r3, [pc, #376]	@ (80048bc <checkAktifCalisma+0x1174>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a5e      	ldr	r2, [pc, #376]	@ (80048c0 <checkAktifCalisma+0x1178>)
 8004746:	6013      	str	r3, [r2, #0]
					bekle();
 8004748:	f7fe fe62 	bl	8003410 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 800474c:	4b5b      	ldr	r3, [pc, #364]	@ (80048bc <checkAktifCalisma+0x1174>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	4b5b      	ldr	r3, [pc, #364]	@ (80048c0 <checkAktifCalisma+0x1178>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	4a5b      	ldr	r2, [pc, #364]	@ (80048c4 <checkAktifCalisma+0x117c>)
 8004758:	7812      	ldrb	r2, [r2, #0]
 800475a:	4293      	cmp	r3, r2
 800475c:	d214      	bcs.n	8004788 <checkAktifCalisma+0x1040>
 800475e:	4b4f      	ldr	r3, [pc, #316]	@ (800489c <checkAktifCalisma+0x1154>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	f083 0301 	eor.w	r3, r3, #1
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d006      	beq.n	800477a <checkAktifCalisma+0x1032>
 800476c:	4b4c      	ldr	r3, [pc, #304]	@ (80048a0 <checkAktifCalisma+0x1158>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	f083 0301 	eor.w	r3, r3, #1
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <checkAktifCalisma+0x1040>
 800477a:	4b4d      	ldr	r3, [pc, #308]	@ (80048b0 <checkAktifCalisma+0x1168>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	f083 0301 	eor.w	r3, r3, #1
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <checkAktifCalisma+0x1046>
					kapiTablaprudhome=0;
 8004788:	4b4b      	ldr	r3, [pc, #300]	@ (80048b8 <checkAktifCalisma+0x1170>)
 800478a:	2200      	movs	r2, #0
 800478c:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800478e:	4b41      	ldr	r3, [pc, #260]	@ (8004894 <checkAktifCalisma+0x114c>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d148      	bne.n	8004828 <checkAktifCalisma+0x10e0>
 8004796:	4b40      	ldr	r3, [pc, #256]	@ (8004898 <checkAktifCalisma+0x1150>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b02      	cmp	r3, #2
 800479c:	d003      	beq.n	80047a6 <checkAktifCalisma+0x105e>
 800479e:	4b3e      	ldr	r3, [pc, #248]	@ (8004898 <checkAktifCalisma+0x1150>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d140      	bne.n	8004828 <checkAktifCalisma+0x10e0>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80047a6:	4b3d      	ldr	r3, [pc, #244]	@ (800489c <checkAktifCalisma+0x1154>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d103      	bne.n	80047b6 <checkAktifCalisma+0x106e>
 80047ae:	4b3c      	ldr	r3, [pc, #240]	@ (80048a0 <checkAktifCalisma+0x1158>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d038      	beq.n	8004828 <checkAktifCalisma+0x10e0>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 80047b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80047ba:	483a      	ldr	r0, [pc, #232]	@ (80048a4 <checkAktifCalisma+0x115c>)
 80047bc:	f005 fa02 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d01c      	beq.n	8004800 <checkAktifCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 80047c6:	2180      	movs	r1, #128	@ 0x80
 80047c8:	4836      	ldr	r0, [pc, #216]	@ (80048a4 <checkAktifCalisma+0x115c>)
 80047ca:	f005 f9fb 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d106      	bne.n	80047e2 <checkAktifCalisma+0x109a>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 80047d4:	2104      	movs	r1, #4
 80047d6:	4833      	ldr	r0, [pc, #204]	@ (80048a4 <checkAktifCalisma+0x115c>)
 80047d8:	f005 f9f4 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d00e      	beq.n	8004800 <checkAktifCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 80047e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80047e6:	482f      	ldr	r0, [pc, #188]	@ (80048a4 <checkAktifCalisma+0x115c>)
 80047e8:	f005 f9ec 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10a      	bne.n	8004808 <checkAktifCalisma+0x10c0>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 80047f2:	2102      	movs	r1, #2
 80047f4:	482b      	ldr	r0, [pc, #172]	@ (80048a4 <checkAktifCalisma+0x115c>)
 80047f6:	f005 f9e5 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d103      	bne.n	8004808 <checkAktifCalisma+0x10c0>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8004800:	4b29      	ldr	r3, [pc, #164]	@ (80048a8 <checkAktifCalisma+0x1160>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <checkAktifCalisma+0x10d0>
 8004808:	4b28      	ldr	r3, [pc, #160]	@ (80048ac <checkAktifCalisma+0x1164>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d103      	bne.n	8004818 <checkAktifCalisma+0x10d0>
 8004810:	4b1f      	ldr	r3, [pc, #124]	@ (8004890 <checkAktifCalisma+0x1148>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <checkAktifCalisma+0x10e0>
						&&(makineStop==1)) {
 8004818:	4b25      	ldr	r3, [pc, #148]	@ (80048b0 <checkAktifCalisma+0x1168>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <checkAktifCalisma+0x10e0>

					kapiTablabutonkontrol=1;
 8004820:	4b29      	ldr	r3, [pc, #164]	@ (80048c8 <checkAktifCalisma+0x1180>)
 8004822:	2201      	movs	r2, #1
 8004824:	701a      	strb	r2, [r3, #0]
 8004826:	e002      	b.n	800482e <checkAktifCalisma+0x10e6>
				} else {
					kapiTablabutonkontrol=0;
 8004828:	4b27      	ldr	r3, [pc, #156]	@ (80048c8 <checkAktifCalisma+0x1180>)
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800482e:	4b19      	ldr	r3, [pc, #100]	@ (8004894 <checkAktifCalisma+0x114c>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d117      	bne.n	8004866 <checkAktifCalisma+0x111e>
 8004836:	4b18      	ldr	r3, [pc, #96]	@ (8004898 <checkAktifCalisma+0x1150>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d003      	beq.n	8004846 <checkAktifCalisma+0x10fe>
 800483e:	4b16      	ldr	r3, [pc, #88]	@ (8004898 <checkAktifCalisma+0x1150>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2b03      	cmp	r3, #3
 8004844:	d10f      	bne.n	8004866 <checkAktifCalisma+0x111e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004846:	4b15      	ldr	r3, [pc, #84]	@ (800489c <checkAktifCalisma+0x1154>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d103      	bne.n	8004856 <checkAktifCalisma+0x110e>
 800484e:	4b14      	ldr	r3, [pc, #80]	@ (80048a0 <checkAktifCalisma+0x1158>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <checkAktifCalisma+0x111e>
						&&(makineStop==1)) {
 8004856:	4b16      	ldr	r3, [pc, #88]	@ (80048b0 <checkAktifCalisma+0x1168>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <checkAktifCalisma+0x111e>

					kapiTablapizzato=1;
 800485e:	4b1b      	ldr	r3, [pc, #108]	@ (80048cc <checkAktifCalisma+0x1184>)
 8004860:	2201      	movs	r2, #1
 8004862:	701a      	strb	r2, [r3, #0]
 8004864:	e002      	b.n	800486c <checkAktifCalisma+0x1124>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8004866:	4b19      	ldr	r3, [pc, #100]	@ (80048cc <checkAktifCalisma+0x1184>)
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800486c:	4b16      	ldr	r3, [pc, #88]	@ (80048c8 <checkAktifCalisma+0x1180>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d107      	bne.n	8004884 <checkAktifCalisma+0x113c>
 8004874:	4b10      	ldr	r3, [pc, #64]	@ (80048b8 <checkAktifCalisma+0x1170>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d103      	bne.n	8004884 <checkAktifCalisma+0x113c>
 800487c:	4b13      	ldr	r3, [pc, #76]	@ (80048cc <checkAktifCalisma+0x1184>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d027      	beq.n	80048d4 <checkAktifCalisma+0x118c>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8004884:	2201      	movs	r2, #1
 8004886:	2120      	movs	r1, #32
 8004888:	4811      	ldr	r0, [pc, #68]	@ (80048d0 <checkAktifCalisma+0x1188>)
 800488a:	f005 f9b2 	bl	8009bf2 <HAL_GPIO_WritePin>
 800488e:	e026      	b.n	80048de <checkAktifCalisma+0x1196>
 8004890:	20000dfc 	.word	0x20000dfc
 8004894:	20000dab 	.word	0x20000dab
 8004898:	20000da8 	.word	0x20000da8
 800489c:	20000deb 	.word	0x20000deb
 80048a0:	20000dec 	.word	0x20000dec
 80048a4:	40011000 	.word	0x40011000
 80048a8:	20000dac 	.word	0x20000dac
 80048ac:	20000dfb 	.word	0x20000dfb
 80048b0:	20000de1 	.word	0x20000de1
 80048b4:	20000dcf 	.word	0x20000dcf
 80048b8:	20000de8 	.word	0x20000de8
 80048bc:	20000d78 	.word	0x20000d78
 80048c0:	20000d7c 	.word	0x20000d7c
 80048c4:	20000dbb 	.word	0x20000dbb
 80048c8:	20000de9 	.word	0x20000de9
 80048cc:	20000dea 	.word	0x20000dea
 80048d0:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80048d4:	2200      	movs	r2, #0
 80048d6:	2120      	movs	r1, #32
 80048d8:	4887      	ldr	r0, [pc, #540]	@ (8004af8 <checkAktifCalisma+0x13b0>)
 80048da:	f005 f98a 	bl	8009bf2 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80048de:	4b87      	ldr	r3, [pc, #540]	@ (8004afc <checkAktifCalisma+0x13b4>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00e      	beq.n	8004904 <checkAktifCalisma+0x11bc>
 80048e6:	2102      	movs	r1, #2
 80048e8:	4885      	ldr	r0, [pc, #532]	@ (8004b00 <checkAktifCalisma+0x13b8>)
 80048ea:	f005 f96b 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d107      	bne.n	8004904 <checkAktifCalisma+0x11bc>
 80048f4:	4b83      	ldr	r3, [pc, #524]	@ (8004b04 <checkAktifCalisma+0x13bc>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d103      	bne.n	8004904 <checkAktifCalisma+0x11bc>
 80048fc:	4b82      	ldr	r3, [pc, #520]	@ (8004b08 <checkAktifCalisma+0x13c0>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d112      	bne.n	800492a <checkAktifCalisma+0x11e2>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8004904:	4b81      	ldr	r3, [pc, #516]	@ (8004b0c <checkAktifCalisma+0x13c4>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d032      	beq.n	8004972 <checkAktifCalisma+0x122a>
 800490c:	2104      	movs	r1, #4
 800490e:	487c      	ldr	r0, [pc, #496]	@ (8004b00 <checkAktifCalisma+0x13b8>)
 8004910:	f005 f958 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004914:	4603      	mov	r3, r0
 8004916:	2b01      	cmp	r3, #1
 8004918:	d12b      	bne.n	8004972 <checkAktifCalisma+0x122a>
 800491a:	4b7a      	ldr	r3, [pc, #488]	@ (8004b04 <checkAktifCalisma+0x13bc>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d027      	beq.n	8004972 <checkAktifCalisma+0x122a>
 8004922:	4b79      	ldr	r3, [pc, #484]	@ (8004b08 <checkAktifCalisma+0x13c0>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d023      	beq.n	8004972 <checkAktifCalisma+0x122a>



					calismaSayisi=calismaSayisi+254;
 800492a:	4b79      	ldr	r3, [pc, #484]	@ (8004b10 <checkAktifCalisma+0x13c8>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	3b02      	subs	r3, #2
 8004930:	b2da      	uxtb	r2, r3
 8004932:	4b77      	ldr	r3, [pc, #476]	@ (8004b10 <checkAktifCalisma+0x13c8>)
 8004934:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8004936:	4b76      	ldr	r3, [pc, #472]	@ (8004b10 <checkAktifCalisma+0x13c8>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	2bff      	cmp	r3, #255	@ 0xff
 800493c:	d108      	bne.n	8004950 <checkAktifCalisma+0x1208>
						calismaSayisi = 0;
 800493e:	4b74      	ldr	r3, [pc, #464]	@ (8004b10 <checkAktifCalisma+0x13c8>)
 8004940:	2200      	movs	r2, #0
 8004942:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 8004944:	4b73      	ldr	r3, [pc, #460]	@ (8004b14 <checkAktifCalisma+0x13cc>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	3301      	adds	r3, #1
 800494a:	b2da      	uxtb	r2, r3
 800494c:	4b71      	ldr	r3, [pc, #452]	@ (8004b14 <checkAktifCalisma+0x13cc>)
 800494e:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 8004950:	4b6f      	ldr	r3, [pc, #444]	@ (8004b10 <checkAktifCalisma+0x13c8>)
 8004952:	781a      	ldrb	r2, [r3, #0]
 8004954:	4b70      	ldr	r3, [pc, #448]	@ (8004b18 <checkAktifCalisma+0x13d0>)
 8004956:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 8004958:	4b6e      	ldr	r3, [pc, #440]	@ (8004b14 <checkAktifCalisma+0x13cc>)
 800495a:	781a      	ldrb	r2, [r3, #0]
 800495c:	4b6e      	ldr	r3, [pc, #440]	@ (8004b18 <checkAktifCalisma+0x13d0>)
 800495e:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 8004960:	4b6e      	ldr	r3, [pc, #440]	@ (8004b1c <checkAktifCalisma+0x13d4>)
 8004962:	2201      	movs	r2, #1
 8004964:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 8004966:	4b65      	ldr	r3, [pc, #404]	@ (8004afc <checkAktifCalisma+0x13b4>)
 8004968:	2200      	movs	r2, #0
 800496a:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 800496c:	4b67      	ldr	r3, [pc, #412]	@ (8004b0c <checkAktifCalisma+0x13c4>)
 800496e:	2200      	movs	r2, #0
 8004970:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8004972:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004976:	486a      	ldr	r0, [pc, #424]	@ (8004b20 <checkAktifCalisma+0x13d8>)
 8004978:	f005 f924 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8004982:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004986:	4866      	ldr	r0, [pc, #408]	@ (8004b20 <checkAktifCalisma+0x13d8>)
 8004988:	f005 f91c 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00e      	beq.n	80049b0 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8004992:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004996:	4862      	ldr	r0, [pc, #392]	@ (8004b20 <checkAktifCalisma+0x13d8>)
 8004998:	f005 f914 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d006      	beq.n	80049b0 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80049a2:	2140      	movs	r1, #64	@ 0x40
 80049a4:	4856      	ldr	r0, [pc, #344]	@ (8004b00 <checkAktifCalisma+0x13b8>)
 80049a6:	f005 f90d 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d103      	bne.n	80049b8 <checkAktifCalisma+0x1270>

					startBasili=1;
 80049b0:	4b5c      	ldr	r3, [pc, #368]	@ (8004b24 <checkAktifCalisma+0x13dc>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	e002      	b.n	80049be <checkAktifCalisma+0x1276>
				} else {
					startBasili=0;
 80049b8:	4b5a      	ldr	r3, [pc, #360]	@ (8004b24 <checkAktifCalisma+0x13dc>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80049be:	4b59      	ldr	r3, [pc, #356]	@ (8004b24 <checkAktifCalisma+0x13dc>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d014      	beq.n	80049f0 <checkAktifCalisma+0x12a8>
 80049c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80049ca:	4855      	ldr	r0, [pc, #340]	@ (8004b20 <checkAktifCalisma+0x13d8>)
 80049cc:	f005 f8fa 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d10c      	bne.n	80049f0 <checkAktifCalisma+0x12a8>

					hataVar=1;
 80049d6:	4b54      	ldr	r3, [pc, #336]	@ (8004b28 <checkAktifCalisma+0x13e0>)
 80049d8:	2201      	movs	r2, #1
 80049da:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 80049dc:	2001      	movs	r0, #1
 80049de:	f7fb ffa3 	bl	8000928 <hataKoduLcdGoster>
					hata2EEPROM(1);
 80049e2:	2001      	movs	r0, #1
 80049e4:	f7fb ff48 	bl	8000878 <hata2EEPROM>
					acilstophatasi=1;
 80049e8:	4b50      	ldr	r3, [pc, #320]	@ (8004b2c <checkAktifCalisma+0x13e4>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	e018      	b.n	8004a22 <checkAktifCalisma+0x12da>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80049f0:	4b4e      	ldr	r3, [pc, #312]	@ (8004b2c <checkAktifCalisma+0x13e4>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d014      	beq.n	8004a22 <checkAktifCalisma+0x12da>
 80049f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80049fc:	4848      	ldr	r0, [pc, #288]	@ (8004b20 <checkAktifCalisma+0x13d8>)
 80049fe:	f005 f8e1 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10c      	bne.n	8004a22 <checkAktifCalisma+0x12da>
 8004a08:	4b46      	ldr	r3, [pc, #280]	@ (8004b24 <checkAktifCalisma+0x13dc>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	f083 0301 	eor.w	r3, r3, #1
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <checkAktifCalisma+0x12da>
					acilstophatasi=0;
 8004a16:	4b45      	ldr	r3, [pc, #276]	@ (8004b2c <checkAktifCalisma+0x13e4>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	f7fe fc8d 	bl	800333c <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 8004a22:	4b43      	ldr	r3, [pc, #268]	@ (8004b30 <checkAktifCalisma+0x13e8>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	f083 0301 	eor.w	r3, r3, #1
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d023      	beq.n	8004a78 <checkAktifCalisma+0x1330>
 8004a30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a34:	483a      	ldr	r0, [pc, #232]	@ (8004b20 <checkAktifCalisma+0x13d8>)
 8004a36:	f005 f8c5 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <checkAktifCalisma+0x1300>
 8004a40:	4b3c      	ldr	r3, [pc, #240]	@ (8004b34 <checkAktifCalisma+0x13ec>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d017      	beq.n	8004a78 <checkAktifCalisma+0x1330>
 8004a48:	4b3b      	ldr	r3, [pc, #236]	@ (8004b38 <checkAktifCalisma+0x13f0>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d113      	bne.n	8004a78 <checkAktifCalisma+0x1330>
 8004a50:	4b3a      	ldr	r3, [pc, #232]	@ (8004b3c <checkAktifCalisma+0x13f4>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	f083 0301 	eor.w	r3, r3, #1
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00c      	beq.n	8004a78 <checkAktifCalisma+0x1330>
					hataVar=1;
 8004a5e:	4b32      	ldr	r3, [pc, #200]	@ (8004b28 <checkAktifCalisma+0x13e0>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8004a64:	2002      	movs	r0, #2
 8004a66:	f7fb ff5f 	bl	8000928 <hataKoduLcdGoster>
					hata2EEPROM(2);
 8004a6a:	2002      	movs	r0, #2
 8004a6c:	f7fb ff04 	bl	8000878 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8004a70:	4b32      	ldr	r3, [pc, #200]	@ (8004b3c <checkAktifCalisma+0x13f4>)
 8004a72:	2201      	movs	r2, #1
 8004a74:	701a      	strb	r2, [r3, #0]
 8004a76:	e017      	b.n	8004aa8 <checkAktifCalisma+0x1360>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8004a78:	4b30      	ldr	r3, [pc, #192]	@ (8004b3c <checkAktifCalisma+0x13f4>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d013      	beq.n	8004aa8 <checkAktifCalisma+0x1360>
 8004a80:	4b2b      	ldr	r3, [pc, #172]	@ (8004b30 <checkAktifCalisma+0x13e8>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00f      	beq.n	8004aa8 <checkAktifCalisma+0x1360>
 8004a88:	4b2d      	ldr	r3, [pc, #180]	@ (8004b40 <checkAktifCalisma+0x13f8>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	f083 0301 	eor.w	r3, r3, #1
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <checkAktifCalisma+0x1360>
					emniyetCercevesihatasi=0;
 8004a96:	4b29      	ldr	r3, [pc, #164]	@ (8004b3c <checkAktifCalisma+0x13f4>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8004a9c:	4b25      	ldr	r3, [pc, #148]	@ (8004b34 <checkAktifCalisma+0x13ec>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 8004aa2:	2002      	movs	r0, #2
 8004aa4:	f7fe fc4a 	bl	800333c <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 8004aa8:	4b26      	ldr	r3, [pc, #152]	@ (8004b44 <checkAktifCalisma+0x13fc>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d151      	bne.n	8004b54 <checkAktifCalisma+0x140c>
 8004ab0:	4b25      	ldr	r3, [pc, #148]	@ (8004b48 <checkAktifCalisma+0x1400>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d14d      	bne.n	8004b54 <checkAktifCalisma+0x140c>
 8004ab8:	4b24      	ldr	r3, [pc, #144]	@ (8004b4c <checkAktifCalisma+0x1404>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d049      	beq.n	8004b54 <checkAktifCalisma+0x140c>
 8004ac0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ac4:	480e      	ldr	r0, [pc, #56]	@ (8004b00 <checkAktifCalisma+0x13b8>)
 8004ac6:	f005 f87d 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d141      	bne.n	8004b54 <checkAktifCalisma+0x140c>
 8004ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8004b50 <checkAktifCalisma+0x1408>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	f083 0301 	eor.w	r3, r3, #1
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d03a      	beq.n	8004b54 <checkAktifCalisma+0x140c>
					hataVar=1;
 8004ade:	4b12      	ldr	r3, [pc, #72]	@ (8004b28 <checkAktifCalisma+0x13e0>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 8004ae4:	2003      	movs	r0, #3
 8004ae6:	f7fb ff1f 	bl	8000928 <hataKoduLcdGoster>
					hata2EEPROM(3);
 8004aea:	2003      	movs	r0, #3
 8004aec:	f7fb fec4 	bl	8000878 <hata2EEPROM>
					basinchatasi=1;
 8004af0:	4b17      	ldr	r3, [pc, #92]	@ (8004b50 <checkAktifCalisma+0x1408>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	e043      	b.n	8004b80 <checkAktifCalisma+0x1438>
 8004af8:	40010800 	.word	0x40010800
 8004afc:	20000ddf 	.word	0x20000ddf
 8004b00:	40011000 	.word	0x40011000
 8004b04:	20000da6 	.word	0x20000da6
 8004b08:	20000de1 	.word	0x20000de1
 8004b0c:	20000de0 	.word	0x20000de0
 8004b10:	20000d98 	.word	0x20000d98
 8004b14:	20000d9a 	.word	0x20000d9a
 8004b18:	20000d00 	.word	0x20000d00
 8004b1c:	20000dcc 	.word	0x20000dcc
 8004b20:	40010c00 	.word	0x40010c00
 8004b24:	20000ded 	.word	0x20000ded
 8004b28:	20000df4 	.word	0x20000df4
 8004b2c:	20000def 	.word	0x20000def
 8004b30:	20000df6 	.word	0x20000df6
 8004b34:	20000e00 	.word	0x20000e00
 8004b38:	20000da4 	.word	0x20000da4
 8004b3c:	20000df0 	.word	0x20000df0
 8004b40:	20000dd8 	.word	0x20000dd8
 8004b44:	20000da3 	.word	0x20000da3
 8004b48:	20000da7 	.word	0x20000da7
 8004b4c:	20000df3 	.word	0x20000df3
 8004b50:	20000dfd 	.word	0x20000dfd
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8004b54:	4b85      	ldr	r3, [pc, #532]	@ (8004d6c <checkAktifCalisma+0x1624>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d011      	beq.n	8004b80 <checkAktifCalisma+0x1438>
 8004b5c:	4b84      	ldr	r3, [pc, #528]	@ (8004d70 <checkAktifCalisma+0x1628>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d10d      	bne.n	8004b80 <checkAktifCalisma+0x1438>
 8004b64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004b68:	4882      	ldr	r0, [pc, #520]	@ (8004d74 <checkAktifCalisma+0x162c>)
 8004b6a:	f005 f82b 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d105      	bne.n	8004b80 <checkAktifCalisma+0x1438>
					basinchatasi=0;
 8004b74:	4b7d      	ldr	r3, [pc, #500]	@ (8004d6c <checkAktifCalisma+0x1624>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 8004b7a:	2003      	movs	r0, #3
 8004b7c:	f7fe fbde 	bl	800333c <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8004b80:	4b7d      	ldr	r3, [pc, #500]	@ (8004d78 <checkAktifCalisma+0x1630>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d103      	bne.n	8004b90 <checkAktifCalisma+0x1448>
 8004b88:	4b7c      	ldr	r3, [pc, #496]	@ (8004d7c <checkAktifCalisma+0x1634>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d023      	beq.n	8004bd8 <checkAktifCalisma+0x1490>
 8004b90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b94:	487a      	ldr	r0, [pc, #488]	@ (8004d80 <checkAktifCalisma+0x1638>)
 8004b96:	f005 f815 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d11b      	bne.n	8004bd8 <checkAktifCalisma+0x1490>
 8004ba0:	4b78      	ldr	r3, [pc, #480]	@ (8004d84 <checkAktifCalisma+0x163c>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d003      	beq.n	8004bb0 <checkAktifCalisma+0x1468>
 8004ba8:	4b76      	ldr	r3, [pc, #472]	@ (8004d84 <checkAktifCalisma+0x163c>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d113      	bne.n	8004bd8 <checkAktifCalisma+0x1490>
 8004bb0:	4b75      	ldr	r3, [pc, #468]	@ (8004d88 <checkAktifCalisma+0x1640>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	f083 0301 	eor.w	r3, r3, #1
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00c      	beq.n	8004bd8 <checkAktifCalisma+0x1490>
					hataVar=1;
 8004bbe:	4b73      	ldr	r3, [pc, #460]	@ (8004d8c <checkAktifCalisma+0x1644>)
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8004bc4:	2004      	movs	r0, #4
 8004bc6:	f7fb feaf 	bl	8000928 <hataKoduLcdGoster>
					hata2EEPROM(4);
 8004bca:	2004      	movs	r0, #4
 8004bcc:	f7fb fe54 	bl	8000878 <hata2EEPROM>
					katkapisivicihatasi=1;
 8004bd0:	4b6d      	ldr	r3, [pc, #436]	@ (8004d88 <checkAktifCalisma+0x1640>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	e01f      	b.n	8004c18 <checkAktifCalisma+0x14d0>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004bd8:	4b6b      	ldr	r3, [pc, #428]	@ (8004d88 <checkAktifCalisma+0x1640>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <checkAktifCalisma+0x14d0>
 8004be0:	4b6b      	ldr	r3, [pc, #428]	@ (8004d90 <checkAktifCalisma+0x1648>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d017      	beq.n	8004c18 <checkAktifCalisma+0x14d0>
 8004be8:	4b63      	ldr	r3, [pc, #396]	@ (8004d78 <checkAktifCalisma+0x1630>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	f083 0301 	eor.w	r3, r3, #1
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d010      	beq.n	8004c18 <checkAktifCalisma+0x14d0>
 8004bf6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004bfa:	4861      	ldr	r0, [pc, #388]	@ (8004d80 <checkAktifCalisma+0x1638>)
 8004bfc:	f004 ffe2 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d108      	bne.n	8004c18 <checkAktifCalisma+0x14d0>

					katkapisivicihatasi=0;
 8004c06:	4b60      	ldr	r3, [pc, #384]	@ (8004d88 <checkAktifCalisma+0x1640>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8004c0c:	4b5b      	ldr	r3, [pc, #364]	@ (8004d7c <checkAktifCalisma+0x1634>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8004c12:	2004      	movs	r0, #4
 8004c14:	f7fe fb92 	bl	800333c <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8004c18:	4b57      	ldr	r3, [pc, #348]	@ (8004d78 <checkAktifCalisma+0x1630>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d103      	bne.n	8004c28 <checkAktifCalisma+0x14e0>
 8004c20:	4b5c      	ldr	r3, [pc, #368]	@ (8004d94 <checkAktifCalisma+0x164c>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d023      	beq.n	8004c70 <checkAktifCalisma+0x1528>
 8004c28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c2c:	4854      	ldr	r0, [pc, #336]	@ (8004d80 <checkAktifCalisma+0x1638>)
 8004c2e:	f004 ffc9 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d11b      	bne.n	8004c70 <checkAktifCalisma+0x1528>
 8004c38:	4b52      	ldr	r3, [pc, #328]	@ (8004d84 <checkAktifCalisma+0x163c>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d003      	beq.n	8004c48 <checkAktifCalisma+0x1500>
 8004c40:	4b50      	ldr	r3, [pc, #320]	@ (8004d84 <checkAktifCalisma+0x163c>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d113      	bne.n	8004c70 <checkAktifCalisma+0x1528>
 8004c48:	4b53      	ldr	r3, [pc, #332]	@ (8004d98 <checkAktifCalisma+0x1650>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	f083 0301 	eor.w	r3, r3, #1
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00c      	beq.n	8004c70 <checkAktifCalisma+0x1528>

					hataVar=1;
 8004c56:	4b4d      	ldr	r3, [pc, #308]	@ (8004d8c <checkAktifCalisma+0x1644>)
 8004c58:	2201      	movs	r2, #1
 8004c5a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8004c5c:	2005      	movs	r0, #5
 8004c5e:	f7fb fe63 	bl	8000928 <hataKoduLcdGoster>
					hata2EEPROM(5);
 8004c62:	2005      	movs	r0, #5
 8004c64:	f7fb fe08 	bl	8000878 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8004c68:	4b4b      	ldr	r3, [pc, #300]	@ (8004d98 <checkAktifCalisma+0x1650>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	701a      	strb	r2, [r3, #0]
 8004c6e:	e023      	b.n	8004cb8 <checkAktifCalisma+0x1570>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8004c70:	4b49      	ldr	r3, [pc, #292]	@ (8004d98 <checkAktifCalisma+0x1650>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01f      	beq.n	8004cb8 <checkAktifCalisma+0x1570>
 8004c78:	4b45      	ldr	r3, [pc, #276]	@ (8004d90 <checkAktifCalisma+0x1648>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01b      	beq.n	8004cb8 <checkAktifCalisma+0x1570>
 8004c80:	4b3d      	ldr	r3, [pc, #244]	@ (8004d78 <checkAktifCalisma+0x1630>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	f083 0301 	eor.w	r3, r3, #1
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d014      	beq.n	8004cb8 <checkAktifCalisma+0x1570>
 8004c8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c92:	483b      	ldr	r0, [pc, #236]	@ (8004d80 <checkAktifCalisma+0x1638>)
 8004c94:	f004 ff96 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10c      	bne.n	8004cb8 <checkAktifCalisma+0x1570>
 8004c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d90 <checkAktifCalisma+0x1648>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d008      	beq.n	8004cb8 <checkAktifCalisma+0x1570>
					tablakapisivicihatasi=0;
 8004ca6:	4b3c      	ldr	r3, [pc, #240]	@ (8004d98 <checkAktifCalisma+0x1650>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8004cac:	4b39      	ldr	r3, [pc, #228]	@ (8004d94 <checkAktifCalisma+0x164c>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8004cb2:	2005      	movs	r0, #5
 8004cb4:	f7fe fb42 	bl	800333c <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8004cb8:	4b38      	ldr	r3, [pc, #224]	@ (8004d9c <checkAktifCalisma+0x1654>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d107      	bne.n	8004cd0 <checkAktifCalisma+0x1588>
 8004cc0:	4b37      	ldr	r3, [pc, #220]	@ (8004da0 <checkAktifCalisma+0x1658>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d103      	bne.n	8004cd0 <checkAktifCalisma+0x1588>
 8004cc8:	4b36      	ldr	r3, [pc, #216]	@ (8004da4 <checkAktifCalisma+0x165c>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01b      	beq.n	8004d08 <checkAktifCalisma+0x15c0>
 8004cd0:	4b35      	ldr	r3, [pc, #212]	@ (8004da8 <checkAktifCalisma+0x1660>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	f083 0301 	eor.w	r3, r3, #1
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d014      	beq.n	8004d08 <checkAktifCalisma+0x15c0>
				    if(millis-timer4>=makineCalismaTmr) {
 8004cde:	4b33      	ldr	r3, [pc, #204]	@ (8004dac <checkAktifCalisma+0x1664>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b33      	ldr	r3, [pc, #204]	@ (8004db0 <checkAktifCalisma+0x1668>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	4a32      	ldr	r2, [pc, #200]	@ (8004db4 <checkAktifCalisma+0x166c>)
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d30b      	bcc.n	8004d08 <checkAktifCalisma+0x15c0>
					  	hataVar=1;
 8004cf0:	4b26      	ldr	r3, [pc, #152]	@ (8004d8c <checkAktifCalisma+0x1644>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 8004cf6:	2006      	movs	r0, #6
 8004cf8:	f7fb fe16 	bl	8000928 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8004cfc:	2006      	movs	r0, #6
 8004cfe:	f7fb fdbb 	bl	8000878 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8004d02:	4b29      	ldr	r3, [pc, #164]	@ (8004da8 <checkAktifCalisma+0x1660>)
 8004d04:	2201      	movs	r2, #1
 8004d06:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8004d08:	4b27      	ldr	r3, [pc, #156]	@ (8004da8 <checkAktifCalisma+0x1660>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d013      	beq.n	8004d38 <checkAktifCalisma+0x15f0>
 8004d10:	2108      	movs	r1, #8
 8004d12:	481b      	ldr	r0, [pc, #108]	@ (8004d80 <checkAktifCalisma+0x1638>)
 8004d14:	f004 ff56 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00c      	beq.n	8004d38 <checkAktifCalisma+0x15f0>
 8004d1e:	4b16      	ldr	r3, [pc, #88]	@ (8004d78 <checkAktifCalisma+0x1630>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	f083 0301 	eor.w	r3, r3, #1
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <checkAktifCalisma+0x15f0>
					maksimumcalismahatasi=0;
 8004d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8004da8 <checkAktifCalisma+0x1660>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8004d32:	2006      	movs	r0, #6
 8004d34:	f7fe fb02 	bl	800333c <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8004d38:	4b1f      	ldr	r3, [pc, #124]	@ (8004db8 <checkAktifCalisma+0x1670>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10b      	bne.n	8004d58 <checkAktifCalisma+0x1610>
 8004d40:	4b17      	ldr	r3, [pc, #92]	@ (8004da0 <checkAktifCalisma+0x1658>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d107      	bne.n	8004d58 <checkAktifCalisma+0x1610>
 8004d48:	4b1c      	ldr	r3, [pc, #112]	@ (8004dbc <checkAktifCalisma+0x1674>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d103      	bne.n	8004d58 <checkAktifCalisma+0x1610>
 8004d50:	4b14      	ldr	r3, [pc, #80]	@ (8004da4 <checkAktifCalisma+0x165c>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d035      	beq.n	8004dc4 <checkAktifCalisma+0x167c>
					makineCalisiyor=0;
 8004d58:	4b19      	ldr	r3, [pc, #100]	@ (8004dc0 <checkAktifCalisma+0x1678>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8004d5e:	4b07      	ldr	r3, [pc, #28]	@ (8004d7c <checkAktifCalisma+0x1634>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8004d64:	4b0b      	ldr	r3, [pc, #44]	@ (8004d94 <checkAktifCalisma+0x164c>)
 8004d66:	2201      	movs	r2, #1
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	e032      	b.n	8004dd2 <checkAktifCalisma+0x168a>
 8004d6c:	20000dfd 	.word	0x20000dfd
 8004d70:	20000da3 	.word	0x20000da3
 8004d74:	40010c00 	.word	0x40010c00
 8004d78:	20000ded 	.word	0x20000ded
 8004d7c:	20000e01 	.word	0x20000e01
 8004d80:	40010800 	.word	0x40010800
 8004d84:	20000da8 	.word	0x20000da8
 8004d88:	20000dfe 	.word	0x20000dfe
 8004d8c:	20000df4 	.word	0x20000df4
 8004d90:	20000de1 	.word	0x20000de1
 8004d94:	20000e02 	.word	0x20000e02
 8004d98:	20000dff 	.word	0x20000dff
 8004d9c:	20000df3 	.word	0x20000df3
 8004da0:	20000dd8 	.word	0x20000dd8
 8004da4:	20000dd7 	.word	0x20000dd7
 8004da8:	20000dee 	.word	0x20000dee
 8004dac:	20000d78 	.word	0x20000d78
 8004db0:	20000d8c 	.word	0x20000d8c
 8004db4:	20000db8 	.word	0x20000db8
 8004db8:	20000dd5 	.word	0x20000dd5
 8004dbc:	20000dd6 	.word	0x20000dd6
 8004dc0:	20000df5 	.word	0x20000df5
				} else {
					makineCalisiyor=1;
 8004dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8004eb0 <checkAktifCalisma+0x1768>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8004dca:	4b3a      	ldr	r3, [pc, #232]	@ (8004eb4 <checkAktifCalisma+0x176c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a3a      	ldr	r2, [pc, #232]	@ (8004eb8 <checkAktifCalisma+0x1770>)
 8004dd0:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8004dd2:	4b3a      	ldr	r3, [pc, #232]	@ (8004ebc <checkAktifCalisma+0x1774>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d02f      	beq.n	8004e3a <checkAktifCalisma+0x16f2>
 8004dda:	4b39      	ldr	r3, [pc, #228]	@ (8004ec0 <checkAktifCalisma+0x1778>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	f083 0301 	eor.w	r3, r3, #1
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d028      	beq.n	8004e3a <checkAktifCalisma+0x16f2>
 8004de8:	4b36      	ldr	r3, [pc, #216]	@ (8004ec4 <checkAktifCalisma+0x177c>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	f083 0301 	eor.w	r3, r3, #1
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d021      	beq.n	8004e3a <checkAktifCalisma+0x16f2>
 8004df6:	4b34      	ldr	r3, [pc, #208]	@ (8004ec8 <checkAktifCalisma+0x1780>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	f083 0301 	eor.w	r3, r3, #1
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01a      	beq.n	8004e3a <checkAktifCalisma+0x16f2>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8004e04:	4b31      	ldr	r3, [pc, #196]	@ (8004ecc <checkAktifCalisma+0x1784>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	f083 0301 	eor.w	r3, r3, #1
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d013      	beq.n	8004e3a <checkAktifCalisma+0x16f2>
 8004e12:	4b2f      	ldr	r3, [pc, #188]	@ (8004ed0 <checkAktifCalisma+0x1788>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	f083 0301 	eor.w	r3, r3, #1
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00c      	beq.n	8004e3a <checkAktifCalisma+0x16f2>
 8004e20:	4b2c      	ldr	r3, [pc, #176]	@ (8004ed4 <checkAktifCalisma+0x178c>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	f083 0301 	eor.w	r3, r3, #1
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <checkAktifCalisma+0x16f2>

					hataVar=0;
 8004e2e:	4b23      	ldr	r3, [pc, #140]	@ (8004ebc <checkAktifCalisma+0x1774>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8004e34:	2007      	movs	r0, #7
 8004e36:	f7fe fa81 	bl	800333c <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8004e3a:	4b20      	ldr	r3, [pc, #128]	@ (8004ebc <checkAktifCalisma+0x1774>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d02a      	beq.n	8004e98 <checkAktifCalisma+0x1750>
 8004e42:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec0 <checkAktifCalisma+0x1778>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	f083 0301 	eor.w	r3, r3, #1
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d023      	beq.n	8004e98 <checkAktifCalisma+0x1750>
 8004e50:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec4 <checkAktifCalisma+0x177c>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01f      	beq.n	8004e98 <checkAktifCalisma+0x1750>
 8004e58:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec8 <checkAktifCalisma+0x1780>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	f083 0301 	eor.w	r3, r3, #1
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d018      	beq.n	8004e98 <checkAktifCalisma+0x1750>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8004e66:	4b19      	ldr	r3, [pc, #100]	@ (8004ecc <checkAktifCalisma+0x1784>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	f083 0301 	eor.w	r3, r3, #1
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d011      	beq.n	8004e98 <checkAktifCalisma+0x1750>
 8004e74:	4b16      	ldr	r3, [pc, #88]	@ (8004ed0 <checkAktifCalisma+0x1788>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	f083 0301 	eor.w	r3, r3, #1
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <checkAktifCalisma+0x1750>
 8004e82:	4b14      	ldr	r3, [pc, #80]	@ (8004ed4 <checkAktifCalisma+0x178c>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	f083 0301 	eor.w	r3, r3, #1
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <checkAktifCalisma+0x1750>
				{
					EmnCerHataMakYukariCalis=1;
 8004e90:	4b11      	ldr	r3, [pc, #68]	@ (8004ed8 <checkAktifCalisma+0x1790>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 8004e96:	e009      	b.n	8004eac <checkAktifCalisma+0x1764>
				else if(emniyetCercevesihatasi==0)
 8004e98:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec4 <checkAktifCalisma+0x177c>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	f083 0301 	eor.w	r3, r3, #1
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <checkAktifCalisma+0x1764>
					EmnCerHataMakYukariCalis=0;
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed8 <checkAktifCalisma+0x1790>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	701a      	strb	r2, [r3, #0]
}
 8004eac:	bf00      	nop
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20000df5 	.word	0x20000df5
 8004eb4:	20000d78 	.word	0x20000d78
 8004eb8:	20000d8c 	.word	0x20000d8c
 8004ebc:	20000df4 	.word	0x20000df4
 8004ec0:	20000def 	.word	0x20000def
 8004ec4:	20000df0 	.word	0x20000df0
 8004ec8:	20000dfd 	.word	0x20000dfd
 8004ecc:	20000dfe 	.word	0x20000dfe
 8004ed0:	20000dff 	.word	0x20000dff
 8004ed4:	20000dee 	.word	0x20000dee
 8004ed8:	20000e03 	.word	0x20000e03

08004edc <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004ee0:	4b66      	ldr	r3, [pc, #408]	@ (800507c <checkDemoModCalisma+0x1a0>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f041 83ab 	bne.w	8006640 <checkDemoModCalisma+0x1764>
 8004eea:	4b65      	ldr	r3, [pc, #404]	@ (8005080 <checkDemoModCalisma+0x1a4>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f041 83a6 	bne.w	8006640 <checkDemoModCalisma+0x1764>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8004ef4:	4b63      	ldr	r3, [pc, #396]	@ (8005084 <checkDemoModCalisma+0x1a8>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d11a      	bne.n	8004f32 <checkDemoModCalisma+0x56>
 8004efc:	4b62      	ldr	r3, [pc, #392]	@ (8005088 <checkDemoModCalisma+0x1ac>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d116      	bne.n	8004f32 <checkDemoModCalisma+0x56>
 8004f04:	4b61      	ldr	r3, [pc, #388]	@ (800508c <checkDemoModCalisma+0x1b0>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00a      	beq.n	8004f22 <checkDemoModCalisma+0x46>
 8004f0c:	4b60      	ldr	r3, [pc, #384]	@ (8005090 <checkDemoModCalisma+0x1b4>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	f083 0301 	eor.w	r3, r3, #1
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <checkDemoModCalisma+0x46>
 8004f1a:	4b5e      	ldr	r3, [pc, #376]	@ (8005094 <checkDemoModCalisma+0x1b8>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d007      	beq.n	8004f32 <checkDemoModCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8004f22:	4b5d      	ldr	r3, [pc, #372]	@ (8005098 <checkDemoModCalisma+0x1bc>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d01c      	beq.n	8004f64 <checkDemoModCalisma+0x88>
 8004f2a:	4b5c      	ldr	r3, [pc, #368]	@ (800509c <checkDemoModCalisma+0x1c0>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d118      	bne.n	8004f64 <checkDemoModCalisma+0x88>
 8004f32:	4b5b      	ldr	r3, [pc, #364]	@ (80050a0 <checkDemoModCalisma+0x1c4>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d103      	bne.n	8004f42 <checkDemoModCalisma+0x66>
 8004f3a:	4b5a      	ldr	r3, [pc, #360]	@ (80050a4 <checkDemoModCalisma+0x1c8>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d010      	beq.n	8004f64 <checkDemoModCalisma+0x88>
 8004f42:	4b59      	ldr	r3, [pc, #356]	@ (80050a8 <checkDemoModCalisma+0x1cc>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00c      	beq.n	8004f64 <checkDemoModCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004f50:	4856      	ldr	r0, [pc, #344]	@ (80050ac <checkDemoModCalisma+0x1d0>)
 8004f52:	f004 fe4e 	bl	8009bf2 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8004f56:	4b56      	ldr	r3, [pc, #344]	@ (80050b0 <checkDemoModCalisma+0x1d4>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8004f5c:	4b55      	ldr	r3, [pc, #340]	@ (80050b4 <checkDemoModCalisma+0x1d8>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	e008      	b.n	8004f76 <checkDemoModCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004f64:	2200      	movs	r2, #0
 8004f66:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004f6a:	4850      	ldr	r0, [pc, #320]	@ (80050ac <checkDemoModCalisma+0x1d0>)
 8004f6c:	f004 fe41 	bl	8009bf2 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8004f70:	4b4f      	ldr	r3, [pc, #316]	@ (80050b0 <checkDemoModCalisma+0x1d4>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8004f76:	4b42      	ldr	r3, [pc, #264]	@ (8005080 <checkDemoModCalisma+0x1a4>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d164      	bne.n	8005048 <checkDemoModCalisma+0x16c>
 8004f7e:	4b49      	ldr	r3, [pc, #292]	@ (80050a4 <checkDemoModCalisma+0x1c8>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d103      	bne.n	8004f8e <checkDemoModCalisma+0xb2>
 8004f86:	4b46      	ldr	r3, [pc, #280]	@ (80050a0 <checkDemoModCalisma+0x1c4>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d05c      	beq.n	8005048 <checkDemoModCalisma+0x16c>
 8004f8e:	4b46      	ldr	r3, [pc, #280]	@ (80050a8 <checkDemoModCalisma+0x1cc>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d058      	beq.n	8005048 <checkDemoModCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004f96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004f9a:	4844      	ldr	r0, [pc, #272]	@ (80050ac <checkDemoModCalisma+0x1d0>)
 8004f9c:	f004 fe12 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <checkDemoModCalisma+0xd2>
 8004fa6:	4b44      	ldr	r3, [pc, #272]	@ (80050b8 <checkDemoModCalisma+0x1dc>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d04c      	beq.n	8005048 <checkDemoModCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004fae:	2102      	movs	r1, #2
 8004fb0:	4842      	ldr	r0, [pc, #264]	@ (80050bc <checkDemoModCalisma+0x1e0>)
 8004fb2:	f004 fe07 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d145      	bne.n	8005048 <checkDemoModCalisma+0x16c>
							&& (basincVar)
 8004fbc:	4b40      	ldr	r3, [pc, #256]	@ (80050c0 <checkDemoModCalisma+0x1e4>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d041      	beq.n	8005048 <checkDemoModCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004fc4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004fc8:	4838      	ldr	r0, [pc, #224]	@ (80050ac <checkDemoModCalisma+0x1d0>)
 8004fca:	f004 fdfb 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d10e      	bne.n	8004ff2 <checkDemoModCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004fd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004fd8:	4834      	ldr	r0, [pc, #208]	@ (80050ac <checkDemoModCalisma+0x1d0>)
 8004fda:	f004 fdf3 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d106      	bne.n	8004ff2 <checkDemoModCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004fe4:	2140      	movs	r1, #64	@ 0x40
 8004fe6:	4835      	ldr	r0, [pc, #212]	@ (80050bc <checkDemoModCalisma+0x1e0>)
 8004fe8:	f004 fdec 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d003      	beq.n	8004ffa <checkDemoModCalisma+0x11e>
 8004ff2:	4b24      	ldr	r3, [pc, #144]	@ (8005084 <checkDemoModCalisma+0x1a8>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d026      	beq.n	8005048 <checkDemoModCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 8004ffa:	4b24      	ldr	r3, [pc, #144]	@ (800508c <checkDemoModCalisma+0x1b0>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	f083 0301 	eor.w	r3, r3, #1
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d01f      	beq.n	8005048 <checkDemoModCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8005008:	4b1f      	ldr	r3, [pc, #124]	@ (8005088 <checkDemoModCalisma+0x1ac>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	f083 0301 	eor.w	r3, r3, #1
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d018      	beq.n	8005048 <checkDemoModCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 8005016:	4b20      	ldr	r3, [pc, #128]	@ (8005098 <checkDemoModCalisma+0x1bc>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	f083 0301 	eor.w	r3, r3, #1
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d011      	beq.n	8005048 <checkDemoModCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8005024:	4b27      	ldr	r3, [pc, #156]	@ (80050c4 <checkDemoModCalisma+0x1e8>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	f083 0301 	eor.w	r3, r3, #1
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <checkDemoModCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 8005032:	4b25      	ldr	r3, [pc, #148]	@ (80050c8 <checkDemoModCalisma+0x1ec>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	f083 0301 	eor.w	r3, r3, #1
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <checkDemoModCalisma+0x16c>
					yukarimotorcalisiyor=1;
 8005040:	4b10      	ldr	r3, [pc, #64]	@ (8005084 <checkDemoModCalisma+0x1a8>)
 8005042:	2201      	movs	r2, #1
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	e002      	b.n	800504e <checkDemoModCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8005048:	4b0e      	ldr	r3, [pc, #56]	@ (8005084 <checkDemoModCalisma+0x1a8>)
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800504e:	4b0d      	ldr	r3, [pc, #52]	@ (8005084 <checkDemoModCalisma+0x1a8>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d03c      	beq.n	80050d0 <checkDemoModCalisma+0x1f4>
 8005056:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800505a:	4818      	ldr	r0, [pc, #96]	@ (80050bc <checkDemoModCalisma+0x1e0>)
 800505c:	f004 fdb2 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005060:	4603      	mov	r3, r0
 8005062:	2b01      	cmp	r3, #1
 8005064:	d134      	bne.n	80050d0 <checkDemoModCalisma+0x1f4>
 8005066:	4b19      	ldr	r3, [pc, #100]	@ (80050cc <checkDemoModCalisma+0x1f0>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d030      	beq.n	80050d0 <checkDemoModCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800506e:	2201      	movs	r2, #1
 8005070:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005074:	480d      	ldr	r0, [pc, #52]	@ (80050ac <checkDemoModCalisma+0x1d0>)
 8005076:	f004 fdbc 	bl	8009bf2 <HAL_GPIO_WritePin>
 800507a:	e02f      	b.n	80050dc <checkDemoModCalisma+0x200>
 800507c:	20000dbe 	.word	0x20000dbe
 8005080:	20000dbd 	.word	0x20000dbd
 8005084:	20000dd5 	.word	0x20000dd5
 8005088:	20000dd6 	.word	0x20000dd6
 800508c:	20000dd8 	.word	0x20000dd8
 8005090:	20000dd0 	.word	0x20000dd0
 8005094:	20000db3 	.word	0x20000db3
 8005098:	20000dd7 	.word	0x20000dd7
 800509c:	20000db2 	.word	0x20000db2
 80050a0:	20000df1 	.word	0x20000df1
 80050a4:	20000e04 	.word	0x20000e04
 80050a8:	20000df2 	.word	0x20000df2
 80050ac:	40010c00 	.word	0x40010c00
 80050b0:	20000df3 	.word	0x20000df3
 80050b4:	20000ddf 	.word	0x20000ddf
 80050b8:	20000ddc 	.word	0x20000ddc
 80050bc:	40011000 	.word	0x40011000
 80050c0:	20000da3 	.word	0x20000da3
 80050c4:	20000dda 	.word	0x20000dda
 80050c8:	20000ddb 	.word	0x20000ddb
 80050cc:	20000dae 	.word	0x20000dae
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80050d0:	2200      	movs	r2, #0
 80050d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80050d6:	4865      	ldr	r0, [pc, #404]	@ (800526c <checkDemoModCalisma+0x390>)
 80050d8:	f004 fd8b 	bl	8009bf2 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80050dc:	4b64      	ldr	r3, [pc, #400]	@ (8005270 <checkDemoModCalisma+0x394>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d013      	beq.n	800510c <checkDemoModCalisma+0x230>
 80050e4:	4b63      	ldr	r3, [pc, #396]	@ (8005274 <checkDemoModCalisma+0x398>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d007      	beq.n	80050fc <checkDemoModCalisma+0x220>
 80050ec:	4b61      	ldr	r3, [pc, #388]	@ (8005274 <checkDemoModCalisma+0x398>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d003      	beq.n	80050fc <checkDemoModCalisma+0x220>
 80050f4:	4b60      	ldr	r3, [pc, #384]	@ (8005278 <checkDemoModCalisma+0x39c>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d107      	bne.n	800510c <checkDemoModCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80050fc:	2201      	movs	r2, #1
 80050fe:	2104      	movs	r1, #4
 8005100:	485a      	ldr	r0, [pc, #360]	@ (800526c <checkDemoModCalisma+0x390>)
 8005102:	f004 fd76 	bl	8009bf2 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8005106:	4b5d      	ldr	r3, [pc, #372]	@ (800527c <checkDemoModCalisma+0x3a0>)
 8005108:	2201      	movs	r2, #1
 800510a:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800510c:	4b5b      	ldr	r3, [pc, #364]	@ (800527c <checkDemoModCalisma+0x3a0>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d033      	beq.n	800517c <checkDemoModCalisma+0x2a0>
 8005114:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005118:	4854      	ldr	r0, [pc, #336]	@ (800526c <checkDemoModCalisma+0x390>)
 800511a:	f004 fd53 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800511e:	4603      	mov	r3, r0
 8005120:	2b01      	cmp	r3, #1
 8005122:	d106      	bne.n	8005132 <checkDemoModCalisma+0x256>
 8005124:	4b56      	ldr	r3, [pc, #344]	@ (8005280 <checkDemoModCalisma+0x3a4>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	f083 0301 	eor.w	r3, r3, #1
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <checkDemoModCalisma+0x264>
 8005132:	2102      	movs	r1, #2
 8005134:	4853      	ldr	r0, [pc, #332]	@ (8005284 <checkDemoModCalisma+0x3a8>)
 8005136:	f004 fd45 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800513a:	4603      	mov	r3, r0
 800513c:	2b01      	cmp	r3, #1
 800513e:	d11d      	bne.n	800517c <checkDemoModCalisma+0x2a0>
 8005140:	4b51      	ldr	r3, [pc, #324]	@ (8005288 <checkDemoModCalisma+0x3ac>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d103      	bne.n	8005150 <checkDemoModCalisma+0x274>
 8005148:	4b50      	ldr	r3, [pc, #320]	@ (800528c <checkDemoModCalisma+0x3b0>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d015      	beq.n	800517c <checkDemoModCalisma+0x2a0>
 8005150:	4b4f      	ldr	r3, [pc, #316]	@ (8005290 <checkDemoModCalisma+0x3b4>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d011      	beq.n	800517c <checkDemoModCalisma+0x2a0>
 8005158:	4b4e      	ldr	r3, [pc, #312]	@ (8005294 <checkDemoModCalisma+0x3b8>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00d      	beq.n	800517c <checkDemoModCalisma+0x2a0>
 8005160:	4b4d      	ldr	r3, [pc, #308]	@ (8005298 <checkDemoModCalisma+0x3bc>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	f083 0301 	eor.w	r3, r3, #1
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d006      	beq.n	800517c <checkDemoModCalisma+0x2a0>
					timer2=millis;
 800516e:	4b4b      	ldr	r3, [pc, #300]	@ (800529c <checkDemoModCalisma+0x3c0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a4b      	ldr	r2, [pc, #300]	@ (80052a0 <checkDemoModCalisma+0x3c4>)
 8005174:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 8005176:	4b48      	ldr	r3, [pc, #288]	@ (8005298 <checkDemoModCalisma+0x3bc>)
 8005178:	2201      	movs	r2, #1
 800517a:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 800517c:	4b47      	ldr	r3, [pc, #284]	@ (800529c <checkDemoModCalisma+0x3c0>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	4b47      	ldr	r3, [pc, #284]	@ (80052a0 <checkDemoModCalisma+0x3c4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	4a47      	ldr	r2, [pc, #284]	@ (80052a4 <checkDemoModCalisma+0x3c8>)
 8005188:	7812      	ldrb	r2, [r2, #0]
 800518a:	4293      	cmp	r3, r2
 800518c:	d303      	bcc.n	8005196 <checkDemoModCalisma+0x2ba>
 800518e:	4b42      	ldr	r3, [pc, #264]	@ (8005298 <checkDemoModCalisma+0x3bc>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d118      	bne.n	80051c8 <checkDemoModCalisma+0x2ec>
 8005196:	4b3c      	ldr	r3, [pc, #240]	@ (8005288 <checkDemoModCalisma+0x3ac>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	f083 0301 	eor.w	r3, r3, #1
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d006      	beq.n	80051b2 <checkDemoModCalisma+0x2d6>
 80051a4:	4b39      	ldr	r3, [pc, #228]	@ (800528c <checkDemoModCalisma+0x3b0>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	f083 0301 	eor.w	r3, r3, #1
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <checkDemoModCalisma+0x2ec>
 80051b2:	4b37      	ldr	r3, [pc, #220]	@ (8005290 <checkDemoModCalisma+0x3b4>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	f083 0301 	eor.w	r3, r3, #1
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d103      	bne.n	80051c8 <checkDemoModCalisma+0x2ec>
 80051c0:	4b34      	ldr	r3, [pc, #208]	@ (8005294 <checkDemoModCalisma+0x3b8>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10a      	bne.n	80051de <checkDemoModCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80051c8:	2200      	movs	r2, #0
 80051ca:	2104      	movs	r1, #4
 80051cc:	4827      	ldr	r0, [pc, #156]	@ (800526c <checkDemoModCalisma+0x390>)
 80051ce:	f004 fd10 	bl	8009bf2 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 80051d2:	4b2a      	ldr	r3, [pc, #168]	@ (800527c <checkDemoModCalisma+0x3a0>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 80051d8:	4b2f      	ldr	r3, [pc, #188]	@ (8005298 <checkDemoModCalisma+0x3bc>)
 80051da:	2200      	movs	r2, #0
 80051dc:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 80051de:	4b32      	ldr	r3, [pc, #200]	@ (80052a8 <checkDemoModCalisma+0x3cc>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d102      	bne.n	80051ec <checkDemoModCalisma+0x310>
					cerceveVar=1;
 80051e6:	4b31      	ldr	r3, [pc, #196]	@ (80052ac <checkDemoModCalisma+0x3d0>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80051ec:	4b2e      	ldr	r3, [pc, #184]	@ (80052a8 <checkDemoModCalisma+0x3cc>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d116      	bne.n	8005222 <checkDemoModCalisma+0x346>
 80051f4:	4b2e      	ldr	r3, [pc, #184]	@ (80052b0 <checkDemoModCalisma+0x3d4>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d112      	bne.n	8005222 <checkDemoModCalisma+0x346>
 80051fc:	2101      	movs	r1, #1
 80051fe:	4821      	ldr	r0, [pc, #132]	@ (8005284 <checkDemoModCalisma+0x3a8>)
 8005200:	f004 fce0 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10b      	bne.n	8005222 <checkDemoModCalisma+0x346>
 800520a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800520e:	4817      	ldr	r0, [pc, #92]	@ (800526c <checkDemoModCalisma+0x390>)
 8005210:	f004 fcd8 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d103      	bne.n	8005222 <checkDemoModCalisma+0x346>
					cerceveVar=1;
 800521a:	4b24      	ldr	r3, [pc, #144]	@ (80052ac <checkDemoModCalisma+0x3d0>)
 800521c:	2201      	movs	r2, #1
 800521e:	701a      	strb	r2, [r3, #0]
 8005220:	e011      	b.n	8005246 <checkDemoModCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005222:	4b21      	ldr	r3, [pc, #132]	@ (80052a8 <checkDemoModCalisma+0x3cc>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d10d      	bne.n	8005246 <checkDemoModCalisma+0x36a>
 800522a:	2101      	movs	r1, #1
 800522c:	4815      	ldr	r0, [pc, #84]	@ (8005284 <checkDemoModCalisma+0x3a8>)
 800522e:	f004 fcc9 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005232:	4603      	mov	r3, r0
 8005234:	2b01      	cmp	r3, #1
 8005236:	d106      	bne.n	8005246 <checkDemoModCalisma+0x36a>
 8005238:	4b1d      	ldr	r3, [pc, #116]	@ (80052b0 <checkDemoModCalisma+0x3d4>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d102      	bne.n	8005246 <checkDemoModCalisma+0x36a>
					cerceveVar=0;
 8005240:	4b1a      	ldr	r3, [pc, #104]	@ (80052ac <checkDemoModCalisma+0x3d0>)
 8005242:	2200      	movs	r2, #0
 8005244:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8005246:	4b18      	ldr	r3, [pc, #96]	@ (80052a8 <checkDemoModCalisma+0x3cc>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d135      	bne.n	80052ba <checkDemoModCalisma+0x3de>
 800524e:	4b18      	ldr	r3, [pc, #96]	@ (80052b0 <checkDemoModCalisma+0x3d4>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d131      	bne.n	80052ba <checkDemoModCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005256:	2101      	movs	r1, #1
 8005258:	480a      	ldr	r0, [pc, #40]	@ (8005284 <checkDemoModCalisma+0x3a8>)
 800525a:	f004 fcb3 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d127      	bne.n	80052b4 <checkDemoModCalisma+0x3d8>
						cerceveVar=1;
 8005264:	4b11      	ldr	r3, [pc, #68]	@ (80052ac <checkDemoModCalisma+0x3d0>)
 8005266:	2201      	movs	r2, #1
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	e026      	b.n	80052ba <checkDemoModCalisma+0x3de>
 800526c:	40010c00 	.word	0x40010c00
 8005270:	20000dd5 	.word	0x20000dd5
 8005274:	20000daf 	.word	0x20000daf
 8005278:	20000db3 	.word	0x20000db3
 800527c:	20000dd9 	.word	0x20000dd9
 8005280:	20000ddc 	.word	0x20000ddc
 8005284:	40011000 	.word	0x40011000
 8005288:	20000df1 	.word	0x20000df1
 800528c:	20000e04 	.word	0x20000e04
 8005290:	20000df2 	.word	0x20000df2
 8005294:	20000da3 	.word	0x20000da3
 8005298:	20000dd1 	.word	0x20000dd1
 800529c:	20000d78 	.word	0x20000d78
 80052a0:	20000d84 	.word	0x20000d84
 80052a4:	20000db4 	.word	0x20000db4
 80052a8:	20000da4 	.word	0x20000da4
 80052ac:	20000df6 	.word	0x20000df6
 80052b0:	20000da1 	.word	0x20000da1
					} else {
						cerceveVar=0;
 80052b4:	4b7f      	ldr	r3, [pc, #508]	@ (80054b4 <checkDemoModCalisma+0x5d8>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80052ba:	4b7f      	ldr	r3, [pc, #508]	@ (80054b8 <checkDemoModCalisma+0x5dc>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d17c      	bne.n	80053bc <checkDemoModCalisma+0x4e0>
 80052c2:	4b7e      	ldr	r3, [pc, #504]	@ (80054bc <checkDemoModCalisma+0x5e0>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d078      	beq.n	80053bc <checkDemoModCalisma+0x4e0>
 80052ca:	4b7d      	ldr	r3, [pc, #500]	@ (80054c0 <checkDemoModCalisma+0x5e4>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d074      	beq.n	80053bc <checkDemoModCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80052d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80052d6:	487b      	ldr	r0, [pc, #492]	@ (80054c4 <checkDemoModCalisma+0x5e8>)
 80052d8:	f004 fc74 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <checkDemoModCalisma+0x40e>
 80052e2:	4b79      	ldr	r3, [pc, #484]	@ (80054c8 <checkDemoModCalisma+0x5ec>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d068      	beq.n	80053bc <checkDemoModCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80052ea:	4b72      	ldr	r3, [pc, #456]	@ (80054b4 <checkDemoModCalisma+0x5d8>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d064      	beq.n	80053bc <checkDemoModCalisma+0x4e0>
 80052f2:	4b76      	ldr	r3, [pc, #472]	@ (80054cc <checkDemoModCalisma+0x5f0>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	f083 0301 	eor.w	r3, r3, #1
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d05d      	beq.n	80053bc <checkDemoModCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005300:	2104      	movs	r1, #4
 8005302:	4873      	ldr	r0, [pc, #460]	@ (80054d0 <checkDemoModCalisma+0x5f4>)
 8005304:	f004 fc5e 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <checkDemoModCalisma+0x43a>
 800530e:	4b71      	ldr	r3, [pc, #452]	@ (80054d4 <checkDemoModCalisma+0x5f8>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d152      	bne.n	80053bc <checkDemoModCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005316:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800531a:	486a      	ldr	r0, [pc, #424]	@ (80054c4 <checkDemoModCalisma+0x5e8>)
 800531c:	f004 fc52 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005320:	4603      	mov	r3, r0
 8005322:	2b01      	cmp	r3, #1
 8005324:	d10e      	bne.n	8005344 <checkDemoModCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005326:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800532a:	4866      	ldr	r0, [pc, #408]	@ (80054c4 <checkDemoModCalisma+0x5e8>)
 800532c:	f004 fc4a 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005330:	4603      	mov	r3, r0
 8005332:	2b01      	cmp	r3, #1
 8005334:	d106      	bne.n	8005344 <checkDemoModCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005336:	2140      	movs	r1, #64	@ 0x40
 8005338:	4865      	ldr	r0, [pc, #404]	@ (80054d0 <checkDemoModCalisma+0x5f4>)
 800533a:	f004 fc43 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800533e:	4603      	mov	r3, r0
 8005340:	2b01      	cmp	r3, #1
 8005342:	d003      	beq.n	800534c <checkDemoModCalisma+0x470>
 8005344:	4b64      	ldr	r3, [pc, #400]	@ (80054d8 <checkDemoModCalisma+0x5fc>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d037      	beq.n	80053bc <checkDemoModCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 800534c:	4b63      	ldr	r3, [pc, #396]	@ (80054dc <checkDemoModCalisma+0x600>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f083 0301 	eor.w	r3, r3, #1
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d030      	beq.n	80053bc <checkDemoModCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 800535a:	4b61      	ldr	r3, [pc, #388]	@ (80054e0 <checkDemoModCalisma+0x604>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	f083 0301 	eor.w	r3, r3, #1
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d029      	beq.n	80053bc <checkDemoModCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 8005368:	4b5e      	ldr	r3, [pc, #376]	@ (80054e4 <checkDemoModCalisma+0x608>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	f083 0301 	eor.w	r3, r3, #1
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d022      	beq.n	80053bc <checkDemoModCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 8005376:	4b5c      	ldr	r3, [pc, #368]	@ (80054e8 <checkDemoModCalisma+0x60c>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	f083 0301 	eor.w	r3, r3, #1
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01b      	beq.n	80053bc <checkDemoModCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8005384:	4b59      	ldr	r3, [pc, #356]	@ (80054ec <checkDemoModCalisma+0x610>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	f083 0301 	eor.w	r3, r3, #1
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d014      	beq.n	80053bc <checkDemoModCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 8005392:	4b57      	ldr	r3, [pc, #348]	@ (80054f0 <checkDemoModCalisma+0x614>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	f083 0301 	eor.w	r3, r3, #1
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00d      	beq.n	80053bc <checkDemoModCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80053a0:	2201      	movs	r2, #1
 80053a2:	2102      	movs	r1, #2
 80053a4:	4847      	ldr	r0, [pc, #284]	@ (80054c4 <checkDemoModCalisma+0x5e8>)
 80053a6:	f004 fc24 	bl	8009bf2 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 80053aa:	4b4b      	ldr	r3, [pc, #300]	@ (80054d8 <checkDemoModCalisma+0x5fc>)
 80053ac:	2201      	movs	r2, #1
 80053ae:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 80053b0:	4b50      	ldr	r3, [pc, #320]	@ (80054f4 <checkDemoModCalisma+0x618>)
 80053b2:	2201      	movs	r2, #1
 80053b4:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 80053b6:	4b50      	ldr	r3, [pc, #320]	@ (80054f8 <checkDemoModCalisma+0x61c>)
 80053b8:	2201      	movs	r2, #1
 80053ba:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80053bc:	4b46      	ldr	r3, [pc, #280]	@ (80054d8 <checkDemoModCalisma+0x5fc>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d033      	beq.n	800542c <checkDemoModCalisma+0x550>
 80053c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80053c8:	483e      	ldr	r0, [pc, #248]	@ (80054c4 <checkDemoModCalisma+0x5e8>)
 80053ca:	f004 fbfb 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d106      	bne.n	80053e2 <checkDemoModCalisma+0x506>
 80053d4:	4b3c      	ldr	r3, [pc, #240]	@ (80054c8 <checkDemoModCalisma+0x5ec>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	f083 0301 	eor.w	r3, r3, #1
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10a      	bne.n	80053f8 <checkDemoModCalisma+0x51c>
 80053e2:	2104      	movs	r1, #4
 80053e4:	483a      	ldr	r0, [pc, #232]	@ (80054d0 <checkDemoModCalisma+0x5f4>)
 80053e6:	f004 fbed 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d11d      	bne.n	800542c <checkDemoModCalisma+0x550>
 80053f0:	4b38      	ldr	r3, [pc, #224]	@ (80054d4 <checkDemoModCalisma+0x5f8>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d019      	beq.n	800542c <checkDemoModCalisma+0x550>
 80053f8:	4b30      	ldr	r3, [pc, #192]	@ (80054bc <checkDemoModCalisma+0x5e0>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d015      	beq.n	800542c <checkDemoModCalisma+0x550>
 8005400:	4b2f      	ldr	r3, [pc, #188]	@ (80054c0 <checkDemoModCalisma+0x5e4>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d011      	beq.n	800542c <checkDemoModCalisma+0x550>
 8005408:	4b2a      	ldr	r3, [pc, #168]	@ (80054b4 <checkDemoModCalisma+0x5d8>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00d      	beq.n	800542c <checkDemoModCalisma+0x550>
 8005410:	4b3a      	ldr	r3, [pc, #232]	@ (80054fc <checkDemoModCalisma+0x620>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	f083 0301 	eor.w	r3, r3, #1
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d006      	beq.n	800542c <checkDemoModCalisma+0x550>
					timer2=millis;
 800541e:	4b38      	ldr	r3, [pc, #224]	@ (8005500 <checkDemoModCalisma+0x624>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a38      	ldr	r2, [pc, #224]	@ (8005504 <checkDemoModCalisma+0x628>)
 8005424:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 8005426:	4b35      	ldr	r3, [pc, #212]	@ (80054fc <checkDemoModCalisma+0x620>)
 8005428:	2201      	movs	r2, #1
 800542a:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 800542c:	4b34      	ldr	r3, [pc, #208]	@ (8005500 <checkDemoModCalisma+0x624>)
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	4b34      	ldr	r3, [pc, #208]	@ (8005504 <checkDemoModCalisma+0x628>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	4a34      	ldr	r2, [pc, #208]	@ (8005508 <checkDemoModCalisma+0x62c>)
 8005438:	7812      	ldrb	r2, [r2, #0]
 800543a:	4293      	cmp	r3, r2
 800543c:	d303      	bcc.n	8005446 <checkDemoModCalisma+0x56a>
 800543e:	4b2f      	ldr	r3, [pc, #188]	@ (80054fc <checkDemoModCalisma+0x620>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d114      	bne.n	8005470 <checkDemoModCalisma+0x594>
 8005446:	4b1d      	ldr	r3, [pc, #116]	@ (80054bc <checkDemoModCalisma+0x5e0>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	f083 0301 	eor.w	r3, r3, #1
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10d      	bne.n	8005470 <checkDemoModCalisma+0x594>
 8005454:	4b1a      	ldr	r3, [pc, #104]	@ (80054c0 <checkDemoModCalisma+0x5e4>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	f083 0301 	eor.w	r3, r3, #1
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <checkDemoModCalisma+0x594>
 8005462:	4b14      	ldr	r3, [pc, #80]	@ (80054b4 <checkDemoModCalisma+0x5d8>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	f083 0301 	eor.w	r3, r3, #1
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <checkDemoModCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005470:	2200      	movs	r2, #0
 8005472:	2102      	movs	r1, #2
 8005474:	4813      	ldr	r0, [pc, #76]	@ (80054c4 <checkDemoModCalisma+0x5e8>)
 8005476:	f004 fbbc 	bl	8009bf2 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 800547a:	4b17      	ldr	r3, [pc, #92]	@ (80054d8 <checkDemoModCalisma+0x5fc>)
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8005480:	4b1e      	ldr	r3, [pc, #120]	@ (80054fc <checkDemoModCalisma+0x620>)
 8005482:	2200      	movs	r2, #0
 8005484:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005486:	4b14      	ldr	r3, [pc, #80]	@ (80054d8 <checkDemoModCalisma+0x5fc>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d040      	beq.n	8005510 <checkDemoModCalisma+0x634>
 800548e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005492:	480f      	ldr	r0, [pc, #60]	@ (80054d0 <checkDemoModCalisma+0x5f4>)
 8005494:	f004 fb96 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d138      	bne.n	8005510 <checkDemoModCalisma+0x634>
 800549e:	4b1b      	ldr	r3, [pc, #108]	@ (800550c <checkDemoModCalisma+0x630>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d034      	beq.n	8005510 <checkDemoModCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80054a6:	2201      	movs	r2, #1
 80054a8:	2101      	movs	r1, #1
 80054aa:	4806      	ldr	r0, [pc, #24]	@ (80054c4 <checkDemoModCalisma+0x5e8>)
 80054ac:	f004 fba1 	bl	8009bf2 <HAL_GPIO_WritePin>
 80054b0:	e033      	b.n	800551a <checkDemoModCalisma+0x63e>
 80054b2:	bf00      	nop
 80054b4:	20000df6 	.word	0x20000df6
 80054b8:	20000dbd 	.word	0x20000dbd
 80054bc:	20000df1 	.word	0x20000df1
 80054c0:	20000df2 	.word	0x20000df2
 80054c4:	40010c00 	.word	0x40010c00
 80054c8:	20000ddd 	.word	0x20000ddd
 80054cc:	20000df0 	.word	0x20000df0
 80054d0:	40011000 	.word	0x40011000
 80054d4:	20000da6 	.word	0x20000da6
 80054d8:	20000dd8 	.word	0x20000dd8
 80054dc:	20000dd5 	.word	0x20000dd5
 80054e0:	20000dd9 	.word	0x20000dd9
 80054e4:	20000dd6 	.word	0x20000dd6
 80054e8:	20000dd7 	.word	0x20000dd7
 80054ec:	20000dda 	.word	0x20000dda
 80054f0:	20000ddb 	.word	0x20000ddb
 80054f4:	20000de0 	.word	0x20000de0
 80054f8:	20000e00 	.word	0x20000e00
 80054fc:	20000dd0 	.word	0x20000dd0
 8005500:	20000d78 	.word	0x20000d78
 8005504:	20000d84 	.word	0x20000d84
 8005508:	20000db5 	.word	0x20000db5
 800550c:	20000da5 	.word	0x20000da5
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005510:	2200      	movs	r2, #0
 8005512:	2101      	movs	r1, #1
 8005514:	4836      	ldr	r0, [pc, #216]	@ (80055f0 <checkDemoModCalisma+0x714>)
 8005516:	f004 fb6c 	bl	8009bf2 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 800551a:	4b36      	ldr	r3, [pc, #216]	@ (80055f4 <checkDemoModCalisma+0x718>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	f040 8080 	bne.w	8005624 <checkDemoModCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005524:	4b34      	ldr	r3, [pc, #208]	@ (80055f8 <checkDemoModCalisma+0x71c>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d003      	beq.n	8005534 <checkDemoModCalisma+0x658>
 800552c:	4b32      	ldr	r3, [pc, #200]	@ (80055f8 <checkDemoModCalisma+0x71c>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d177      	bne.n	8005624 <checkDemoModCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8005534:	4b31      	ldr	r3, [pc, #196]	@ (80055fc <checkDemoModCalisma+0x720>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d073      	beq.n	8005624 <checkDemoModCalisma+0x748>
 800553c:	4b30      	ldr	r3, [pc, #192]	@ (8005600 <checkDemoModCalisma+0x724>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d06f      	beq.n	8005624 <checkDemoModCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005544:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005548:	4829      	ldr	r0, [pc, #164]	@ (80055f0 <checkDemoModCalisma+0x714>)
 800554a:	f004 fb3b 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d167      	bne.n	8005624 <checkDemoModCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005554:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005558:	482a      	ldr	r0, [pc, #168]	@ (8005604 <checkDemoModCalisma+0x728>)
 800555a:	f004 fb33 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <checkDemoModCalisma+0x690>
 8005564:	4b28      	ldr	r3, [pc, #160]	@ (8005608 <checkDemoModCalisma+0x72c>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d15b      	bne.n	8005624 <checkDemoModCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 800556c:	2140      	movs	r1, #64	@ 0x40
 800556e:	4825      	ldr	r0, [pc, #148]	@ (8005604 <checkDemoModCalisma+0x728>)
 8005570:	f004 fb28 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005574:	4603      	mov	r3, r0
 8005576:	2b01      	cmp	r3, #1
 8005578:	d10f      	bne.n	800559a <checkDemoModCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800557a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800557e:	481c      	ldr	r0, [pc, #112]	@ (80055f0 <checkDemoModCalisma+0x714>)
 8005580:	f004 fb20 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005584:	4603      	mov	r3, r0
 8005586:	2b01      	cmp	r3, #1
 8005588:	d107      	bne.n	800559a <checkDemoModCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800558a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800558e:	4818      	ldr	r0, [pc, #96]	@ (80055f0 <checkDemoModCalisma+0x714>)
 8005590:	f004 fb18 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005594:	4603      	mov	r3, r0
 8005596:	2b01      	cmp	r3, #1
 8005598:	d003      	beq.n	80055a2 <checkDemoModCalisma+0x6c6>
 800559a:	4b1c      	ldr	r3, [pc, #112]	@ (800560c <checkDemoModCalisma+0x730>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d040      	beq.n	8005624 <checkDemoModCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 80055a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005610 <checkDemoModCalisma+0x734>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	f083 0301 	eor.w	r3, r3, #1
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d039      	beq.n	8005624 <checkDemoModCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 80055b0:	4b18      	ldr	r3, [pc, #96]	@ (8005614 <checkDemoModCalisma+0x738>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	f083 0301 	eor.w	r3, r3, #1
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d032      	beq.n	8005624 <checkDemoModCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 80055be:	4b16      	ldr	r3, [pc, #88]	@ (8005618 <checkDemoModCalisma+0x73c>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	f083 0301 	eor.w	r3, r3, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d02b      	beq.n	8005624 <checkDemoModCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 80055cc:	4b13      	ldr	r3, [pc, #76]	@ (800561c <checkDemoModCalisma+0x740>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	f083 0301 	eor.w	r3, r3, #1
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d024      	beq.n	8005624 <checkDemoModCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 80055da:	4b11      	ldr	r3, [pc, #68]	@ (8005620 <checkDemoModCalisma+0x744>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	f083 0301 	eor.w	r3, r3, #1
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01d      	beq.n	8005624 <checkDemoModCalisma+0x748>

					devmotoryukaricalisiyor=1;
 80055e8:	4b08      	ldr	r3, [pc, #32]	@ (800560c <checkDemoModCalisma+0x730>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	e01c      	b.n	800562a <checkDemoModCalisma+0x74e>
 80055f0:	40010c00 	.word	0x40010c00
 80055f4:	20000dbd 	.word	0x20000dbd
 80055f8:	20000daf 	.word	0x20000daf
 80055fc:	20000df1 	.word	0x20000df1
 8005600:	20000df2 	.word	0x20000df2
 8005604:	40011000 	.word	0x40011000
 8005608:	20000db0 	.word	0x20000db0
 800560c:	20000dd6 	.word	0x20000dd6
 8005610:	20000dd5 	.word	0x20000dd5
 8005614:	20000dd9 	.word	0x20000dd9
 8005618:	20000dd8 	.word	0x20000dd8
 800561c:	20000dd7 	.word	0x20000dd7
 8005620:	20000ddb 	.word	0x20000ddb
				} else {
					devmotoryukaricalisiyor=0;
 8005624:	4b64      	ldr	r3, [pc, #400]	@ (80057b8 <checkDemoModCalisma+0x8dc>)
 8005626:	2200      	movs	r2, #0
 8005628:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 800562a:	4b63      	ldr	r3, [pc, #396]	@ (80057b8 <checkDemoModCalisma+0x8dc>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d007      	beq.n	8005642 <checkDemoModCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005632:	2201      	movs	r2, #1
 8005634:	2120      	movs	r1, #32
 8005636:	4861      	ldr	r0, [pc, #388]	@ (80057bc <checkDemoModCalisma+0x8e0>)
 8005638:	f004 fadb 	bl	8009bf2 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 800563c:	4b60      	ldr	r3, [pc, #384]	@ (80057c0 <checkDemoModCalisma+0x8e4>)
 800563e:	2201      	movs	r2, #1
 8005640:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005642:	4b5f      	ldr	r3, [pc, #380]	@ (80057c0 <checkDemoModCalisma+0x8e4>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d025      	beq.n	8005696 <checkDemoModCalisma+0x7ba>
 800564a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800564e:	485d      	ldr	r0, [pc, #372]	@ (80057c4 <checkDemoModCalisma+0x8e8>)
 8005650:	f004 fab8 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005654:	4603      	mov	r3, r0
 8005656:	2b01      	cmp	r3, #1
 8005658:	d007      	beq.n	800566a <checkDemoModCalisma+0x78e>
 800565a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800565e:	4857      	ldr	r0, [pc, #348]	@ (80057bc <checkDemoModCalisma+0x8e0>)
 8005660:	f004 fab0 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005664:	4603      	mov	r3, r0
 8005666:	2b01      	cmp	r3, #1
 8005668:	d115      	bne.n	8005696 <checkDemoModCalisma+0x7ba>
 800566a:	4b57      	ldr	r3, [pc, #348]	@ (80057c8 <checkDemoModCalisma+0x8ec>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d011      	beq.n	8005696 <checkDemoModCalisma+0x7ba>
 8005672:	4b56      	ldr	r3, [pc, #344]	@ (80057cc <checkDemoModCalisma+0x8f0>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00d      	beq.n	8005696 <checkDemoModCalisma+0x7ba>
 800567a:	4b55      	ldr	r3, [pc, #340]	@ (80057d0 <checkDemoModCalisma+0x8f4>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	f083 0301 	eor.w	r3, r3, #1
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d006      	beq.n	8005696 <checkDemoModCalisma+0x7ba>
					timer2=millis;
 8005688:	4b52      	ldr	r3, [pc, #328]	@ (80057d4 <checkDemoModCalisma+0x8f8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a52      	ldr	r2, [pc, #328]	@ (80057d8 <checkDemoModCalisma+0x8fc>)
 800568e:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8005690:	4b4f      	ldr	r3, [pc, #316]	@ (80057d0 <checkDemoModCalisma+0x8f4>)
 8005692:	2201      	movs	r2, #1
 8005694:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005696:	4b4f      	ldr	r3, [pc, #316]	@ (80057d4 <checkDemoModCalisma+0x8f8>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	4b4f      	ldr	r3, [pc, #316]	@ (80057d8 <checkDemoModCalisma+0x8fc>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	4a4e      	ldr	r2, [pc, #312]	@ (80057dc <checkDemoModCalisma+0x900>)
 80056a2:	7812      	ldrb	r2, [r2, #0]
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d303      	bcc.n	80056b0 <checkDemoModCalisma+0x7d4>
 80056a8:	4b49      	ldr	r3, [pc, #292]	@ (80057d0 <checkDemoModCalisma+0x8f4>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10d      	bne.n	80056cc <checkDemoModCalisma+0x7f0>
 80056b0:	4b45      	ldr	r3, [pc, #276]	@ (80057c8 <checkDemoModCalisma+0x8ec>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	f083 0301 	eor.w	r3, r3, #1
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <checkDemoModCalisma+0x7f0>
 80056be:	4b43      	ldr	r3, [pc, #268]	@ (80057cc <checkDemoModCalisma+0x8f0>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	f083 0301 	eor.w	r3, r3, #1
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <checkDemoModCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80056cc:	2200      	movs	r2, #0
 80056ce:	2120      	movs	r1, #32
 80056d0:	483a      	ldr	r0, [pc, #232]	@ (80057bc <checkDemoModCalisma+0x8e0>)
 80056d2:	f004 fa8e 	bl	8009bf2 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 80056d6:	4b3a      	ldr	r3, [pc, #232]	@ (80057c0 <checkDemoModCalisma+0x8e4>)
 80056d8:	2200      	movs	r2, #0
 80056da:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 80056dc:	4b3c      	ldr	r3, [pc, #240]	@ (80057d0 <checkDemoModCalisma+0x8f4>)
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 80056e2:	4b3f      	ldr	r3, [pc, #252]	@ (80057e0 <checkDemoModCalisma+0x904>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f040 8088 	bne.w	80057fc <checkDemoModCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80056ec:	4b3d      	ldr	r3, [pc, #244]	@ (80057e4 <checkDemoModCalisma+0x908>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d003      	beq.n	80056fc <checkDemoModCalisma+0x820>
 80056f4:	4b3b      	ldr	r3, [pc, #236]	@ (80057e4 <checkDemoModCalisma+0x908>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d17f      	bne.n	80057fc <checkDemoModCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 80056fc:	4b32      	ldr	r3, [pc, #200]	@ (80057c8 <checkDemoModCalisma+0x8ec>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d07b      	beq.n	80057fc <checkDemoModCalisma+0x920>
 8005704:	4b31      	ldr	r3, [pc, #196]	@ (80057cc <checkDemoModCalisma+0x8f0>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d077      	beq.n	80057fc <checkDemoModCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 800570c:	2140      	movs	r1, #64	@ 0x40
 800570e:	482b      	ldr	r0, [pc, #172]	@ (80057bc <checkDemoModCalisma+0x8e0>)
 8005710:	f004 fa58 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d170      	bne.n	80057fc <checkDemoModCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800571a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800571e:	4827      	ldr	r0, [pc, #156]	@ (80057bc <checkDemoModCalisma+0x8e0>)
 8005720:	f004 fa50 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <checkDemoModCalisma+0x856>
 800572a:	4b2f      	ldr	r3, [pc, #188]	@ (80057e8 <checkDemoModCalisma+0x90c>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d164      	bne.n	80057fc <checkDemoModCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005732:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005736:	4823      	ldr	r0, [pc, #140]	@ (80057c4 <checkDemoModCalisma+0x8e8>)
 8005738:	f004 fa44 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800573c:	4603      	mov	r3, r0
 800573e:	2b01      	cmp	r3, #1
 8005740:	d10f      	bne.n	8005762 <checkDemoModCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005742:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005746:	481f      	ldr	r0, [pc, #124]	@ (80057c4 <checkDemoModCalisma+0x8e8>)
 8005748:	f004 fa3c 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800574c:	4603      	mov	r3, r0
 800574e:	2b01      	cmp	r3, #1
 8005750:	d107      	bne.n	8005762 <checkDemoModCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005752:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005756:	481b      	ldr	r0, [pc, #108]	@ (80057c4 <checkDemoModCalisma+0x8e8>)
 8005758:	f004 fa34 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800575c:	4603      	mov	r3, r0
 800575e:	2b01      	cmp	r3, #1
 8005760:	d003      	beq.n	800576a <checkDemoModCalisma+0x88e>
 8005762:	4b22      	ldr	r3, [pc, #136]	@ (80057ec <checkDemoModCalisma+0x910>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d048      	beq.n	80057fc <checkDemoModCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 800576a:	4b21      	ldr	r3, [pc, #132]	@ (80057f0 <checkDemoModCalisma+0x914>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f083 0301 	eor.w	r3, r3, #1
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d041      	beq.n	80057fc <checkDemoModCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8005778:	4b1e      	ldr	r3, [pc, #120]	@ (80057f4 <checkDemoModCalisma+0x918>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	f083 0301 	eor.w	r3, r3, #1
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d03a      	beq.n	80057fc <checkDemoModCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8005786:	4b1c      	ldr	r3, [pc, #112]	@ (80057f8 <checkDemoModCalisma+0x91c>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	f083 0301 	eor.w	r3, r3, #1
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d033      	beq.n	80057fc <checkDemoModCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8005794:	4b0a      	ldr	r3, [pc, #40]	@ (80057c0 <checkDemoModCalisma+0x8e4>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	f083 0301 	eor.w	r3, r3, #1
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d02c      	beq.n	80057fc <checkDemoModCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 80057a2:	4b05      	ldr	r3, [pc, #20]	@ (80057b8 <checkDemoModCalisma+0x8dc>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	f083 0301 	eor.w	r3, r3, #1
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d025      	beq.n	80057fc <checkDemoModCalisma+0x920>

					devmotorasagicalisiyor=1;
 80057b0:	4b0e      	ldr	r3, [pc, #56]	@ (80057ec <checkDemoModCalisma+0x910>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	701a      	strb	r2, [r3, #0]
 80057b6:	e024      	b.n	8005802 <checkDemoModCalisma+0x926>
 80057b8:	20000dd6 	.word	0x20000dd6
 80057bc:	40011000 	.word	0x40011000
 80057c0:	20000dda 	.word	0x20000dda
 80057c4:	40010c00 	.word	0x40010c00
 80057c8:	20000df1 	.word	0x20000df1
 80057cc:	20000df2 	.word	0x20000df2
 80057d0:	20000dd2 	.word	0x20000dd2
 80057d4:	20000d78 	.word	0x20000d78
 80057d8:	20000d84 	.word	0x20000d84
 80057dc:	20000db6 	.word	0x20000db6
 80057e0:	20000dbd 	.word	0x20000dbd
 80057e4:	20000daf 	.word	0x20000daf
 80057e8:	20000db1 	.word	0x20000db1
 80057ec:	20000dd7 	.word	0x20000dd7
 80057f0:	20000dd5 	.word	0x20000dd5
 80057f4:	20000dd9 	.word	0x20000dd9
 80057f8:	20000dd8 	.word	0x20000dd8
				} else {
					devmotorasagicalisiyor=0;
 80057fc:	4b96      	ldr	r3, [pc, #600]	@ (8005a58 <checkDemoModCalisma+0xb7c>)
 80057fe:	2200      	movs	r2, #0
 8005800:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8005802:	4b95      	ldr	r3, [pc, #596]	@ (8005a58 <checkDemoModCalisma+0xb7c>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d007      	beq.n	800581a <checkDemoModCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800580a:	2201      	movs	r2, #1
 800580c:	2110      	movs	r1, #16
 800580e:	4893      	ldr	r0, [pc, #588]	@ (8005a5c <checkDemoModCalisma+0xb80>)
 8005810:	f004 f9ef 	bl	8009bf2 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8005814:	4b92      	ldr	r3, [pc, #584]	@ (8005a60 <checkDemoModCalisma+0xb84>)
 8005816:	2201      	movs	r2, #1
 8005818:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800581a:	4b91      	ldr	r3, [pc, #580]	@ (8005a60 <checkDemoModCalisma+0xb84>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d024      	beq.n	800586c <checkDemoModCalisma+0x990>
 8005822:	2140      	movs	r1, #64	@ 0x40
 8005824:	488d      	ldr	r0, [pc, #564]	@ (8005a5c <checkDemoModCalisma+0xb80>)
 8005826:	f004 f9cd 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800582a:	4603      	mov	r3, r0
 800582c:	2b01      	cmp	r3, #1
 800582e:	d007      	beq.n	8005840 <checkDemoModCalisma+0x964>
 8005830:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005834:	4889      	ldr	r0, [pc, #548]	@ (8005a5c <checkDemoModCalisma+0xb80>)
 8005836:	f004 f9c5 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800583a:	4603      	mov	r3, r0
 800583c:	2b01      	cmp	r3, #1
 800583e:	d115      	bne.n	800586c <checkDemoModCalisma+0x990>
 8005840:	4b88      	ldr	r3, [pc, #544]	@ (8005a64 <checkDemoModCalisma+0xb88>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d011      	beq.n	800586c <checkDemoModCalisma+0x990>
 8005848:	4b87      	ldr	r3, [pc, #540]	@ (8005a68 <checkDemoModCalisma+0xb8c>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00d      	beq.n	800586c <checkDemoModCalisma+0x990>
 8005850:	4b86      	ldr	r3, [pc, #536]	@ (8005a6c <checkDemoModCalisma+0xb90>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	f083 0301 	eor.w	r3, r3, #1
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d006      	beq.n	800586c <checkDemoModCalisma+0x990>
					timer2=millis;
 800585e:	4b84      	ldr	r3, [pc, #528]	@ (8005a70 <checkDemoModCalisma+0xb94>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a84      	ldr	r2, [pc, #528]	@ (8005a74 <checkDemoModCalisma+0xb98>)
 8005864:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8005866:	4b81      	ldr	r3, [pc, #516]	@ (8005a6c <checkDemoModCalisma+0xb90>)
 8005868:	2201      	movs	r2, #1
 800586a:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800586c:	4b80      	ldr	r3, [pc, #512]	@ (8005a70 <checkDemoModCalisma+0xb94>)
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	4b80      	ldr	r3, [pc, #512]	@ (8005a74 <checkDemoModCalisma+0xb98>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	4a80      	ldr	r2, [pc, #512]	@ (8005a78 <checkDemoModCalisma+0xb9c>)
 8005878:	7812      	ldrb	r2, [r2, #0]
 800587a:	4293      	cmp	r3, r2
 800587c:	d303      	bcc.n	8005886 <checkDemoModCalisma+0x9aa>
 800587e:	4b7b      	ldr	r3, [pc, #492]	@ (8005a6c <checkDemoModCalisma+0xb90>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10d      	bne.n	80058a2 <checkDemoModCalisma+0x9c6>
 8005886:	4b77      	ldr	r3, [pc, #476]	@ (8005a64 <checkDemoModCalisma+0xb88>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	f083 0301 	eor.w	r3, r3, #1
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d106      	bne.n	80058a2 <checkDemoModCalisma+0x9c6>
 8005894:	4b74      	ldr	r3, [pc, #464]	@ (8005a68 <checkDemoModCalisma+0xb8c>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	f083 0301 	eor.w	r3, r3, #1
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <checkDemoModCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80058a2:	2200      	movs	r2, #0
 80058a4:	2110      	movs	r1, #16
 80058a6:	486d      	ldr	r0, [pc, #436]	@ (8005a5c <checkDemoModCalisma+0xb80>)
 80058a8:	f004 f9a3 	bl	8009bf2 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 80058ac:	4b6c      	ldr	r3, [pc, #432]	@ (8005a60 <checkDemoModCalisma+0xb84>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 80058b2:	4b6e      	ldr	r3, [pc, #440]	@ (8005a6c <checkDemoModCalisma+0xb90>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80058b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058bc:	486f      	ldr	r0, [pc, #444]	@ (8005a7c <checkDemoModCalisma+0xba0>)
 80058be:	f004 f981 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d120      	bne.n	800590a <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80058c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058cc:	486b      	ldr	r0, [pc, #428]	@ (8005a7c <checkDemoModCalisma+0xba0>)
 80058ce:	f004 f979 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d118      	bne.n	800590a <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80058d8:	2104      	movs	r1, #4
 80058da:	4868      	ldr	r0, [pc, #416]	@ (8005a7c <checkDemoModCalisma+0xba0>)
 80058dc:	f004 f972 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d111      	bne.n	800590a <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80058e6:	2102      	movs	r1, #2
 80058e8:	4864      	ldr	r0, [pc, #400]	@ (8005a7c <checkDemoModCalisma+0xba0>)
 80058ea:	f004 f96b 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80058f4:	2101      	movs	r1, #1
 80058f6:	4861      	ldr	r0, [pc, #388]	@ (8005a7c <checkDemoModCalisma+0xba0>)
 80058f8:	f004 f964 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d103      	bne.n	800590a <checkDemoModCalisma+0xa2e>
					makineStop=1;
 8005902:	4b5f      	ldr	r3, [pc, #380]	@ (8005a80 <checkDemoModCalisma+0xba4>)
 8005904:	2201      	movs	r2, #1
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	e002      	b.n	8005910 <checkDemoModCalisma+0xa34>
				} else {
					makineStop=0;
 800590a:	4b5d      	ldr	r3, [pc, #372]	@ (8005a80 <checkDemoModCalisma+0xba4>)
 800590c:	2200      	movs	r2, #0
 800590e:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005910:	4b5c      	ldr	r3, [pc, #368]	@ (8005a84 <checkDemoModCalisma+0xba8>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d144      	bne.n	80059a2 <checkDemoModCalisma+0xac6>
 8005918:	4b5b      	ldr	r3, [pc, #364]	@ (8005a88 <checkDemoModCalisma+0xbac>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d003      	beq.n	8005928 <checkDemoModCalisma+0xa4c>
 8005920:	4b59      	ldr	r3, [pc, #356]	@ (8005a88 <checkDemoModCalisma+0xbac>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b03      	cmp	r3, #3
 8005926:	d13c      	bne.n	80059a2 <checkDemoModCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005928:	2180      	movs	r1, #128	@ 0x80
 800592a:	484c      	ldr	r0, [pc, #304]	@ (8005a5c <checkDemoModCalisma+0xb80>)
 800592c:	f004 f94a 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d103      	bne.n	800593e <checkDemoModCalisma+0xa62>
 8005936:	4b55      	ldr	r3, [pc, #340]	@ (8005a8c <checkDemoModCalisma+0xbb0>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00b      	beq.n	8005956 <checkDemoModCalisma+0xa7a>
 800593e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005942:	484e      	ldr	r0, [pc, #312]	@ (8005a7c <checkDemoModCalisma+0xba0>)
 8005944:	f004 f93e 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d129      	bne.n	80059a2 <checkDemoModCalisma+0xac6>
 800594e:	4b4f      	ldr	r3, [pc, #316]	@ (8005a8c <checkDemoModCalisma+0xbb0>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d125      	bne.n	80059a2 <checkDemoModCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005956:	2104      	movs	r1, #4
 8005958:	4840      	ldr	r0, [pc, #256]	@ (8005a5c <checkDemoModCalisma+0xb80>)
 800595a:	f004 f933 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800595e:	4603      	mov	r3, r0
 8005960:	2b01      	cmp	r3, #1
 8005962:	d003      	beq.n	800596c <checkDemoModCalisma+0xa90>
 8005964:	4b4a      	ldr	r3, [pc, #296]	@ (8005a90 <checkDemoModCalisma+0xbb4>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d11a      	bne.n	80059a2 <checkDemoModCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800596c:	2102      	movs	r1, #2
 800596e:	483b      	ldr	r0, [pc, #236]	@ (8005a5c <checkDemoModCalisma+0xb80>)
 8005970:	f004 f928 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d113      	bne.n	80059a2 <checkDemoModCalisma+0xac6>
						&&(butonKontrol==0)
 800597a:	4b46      	ldr	r3, [pc, #280]	@ (8005a94 <checkDemoModCalisma+0xbb8>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	f083 0301 	eor.w	r3, r3, #1
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00c      	beq.n	80059a2 <checkDemoModCalisma+0xac6>
						&&(makineStop==1)) {
 8005988:	4b3d      	ldr	r3, [pc, #244]	@ (8005a80 <checkDemoModCalisma+0xba4>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <checkDemoModCalisma+0xac6>

					kapi1prudhome=1;
 8005990:	4b41      	ldr	r3, [pc, #260]	@ (8005a98 <checkDemoModCalisma+0xbbc>)
 8005992:	2201      	movs	r2, #1
 8005994:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005996:	4b36      	ldr	r3, [pc, #216]	@ (8005a70 <checkDemoModCalisma+0xb94>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a40      	ldr	r2, [pc, #256]	@ (8005a9c <checkDemoModCalisma+0xbc0>)
 800599c:	6013      	str	r3, [r2, #0]
					bekle();
 800599e:	f7fd fd37 	bl	8003410 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80059a2:	4b33      	ldr	r3, [pc, #204]	@ (8005a70 <checkDemoModCalisma+0xb94>)
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4b3d      	ldr	r3, [pc, #244]	@ (8005a9c <checkDemoModCalisma+0xbc0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	4a3c      	ldr	r2, [pc, #240]	@ (8005aa0 <checkDemoModCalisma+0xbc4>)
 80059ae:	7812      	ldrb	r2, [r2, #0]
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d211      	bcs.n	80059d8 <checkDemoModCalisma+0xafc>
 80059b4:	2104      	movs	r1, #4
 80059b6:	4829      	ldr	r0, [pc, #164]	@ (8005a5c <checkDemoModCalisma+0xb80>)
 80059b8:	f004 f904 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <checkDemoModCalisma+0xafc>
 80059c2:	4b33      	ldr	r3, [pc, #204]	@ (8005a90 <checkDemoModCalisma+0xbb4>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d006      	beq.n	80059d8 <checkDemoModCalisma+0xafc>
 80059ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005a80 <checkDemoModCalisma+0xba4>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	f083 0301 	eor.w	r3, r3, #1
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <checkDemoModCalisma+0xb02>
					kapi1prudhome=0;
 80059d8:	4b2f      	ldr	r3, [pc, #188]	@ (8005a98 <checkDemoModCalisma+0xbbc>)
 80059da:	2200      	movs	r2, #0
 80059dc:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059de:	4b29      	ldr	r3, [pc, #164]	@ (8005a84 <checkDemoModCalisma+0xba8>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d160      	bne.n	8005aa8 <checkDemoModCalisma+0xbcc>
 80059e6:	4b28      	ldr	r3, [pc, #160]	@ (8005a88 <checkDemoModCalisma+0xbac>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d003      	beq.n	80059f6 <checkDemoModCalisma+0xb1a>
 80059ee:	4b26      	ldr	r3, [pc, #152]	@ (8005a88 <checkDemoModCalisma+0xbac>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d158      	bne.n	8005aa8 <checkDemoModCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80059f6:	2104      	movs	r1, #4
 80059f8:	4818      	ldr	r0, [pc, #96]	@ (8005a5c <checkDemoModCalisma+0xb80>)
 80059fa:	f004 f8e3 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d003      	beq.n	8005a0c <checkDemoModCalisma+0xb30>
 8005a04:	4b22      	ldr	r3, [pc, #136]	@ (8005a90 <checkDemoModCalisma+0xbb4>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d14d      	bne.n	8005aa8 <checkDemoModCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005a0c:	2102      	movs	r1, #2
 8005a0e:	4813      	ldr	r0, [pc, #76]	@ (8005a5c <checkDemoModCalisma+0xb80>)
 8005a10:	f004 f8d8 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d146      	bne.n	8005aa8 <checkDemoModCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a1a:	2180      	movs	r1, #128	@ 0x80
 8005a1c:	480f      	ldr	r0, [pc, #60]	@ (8005a5c <checkDemoModCalisma+0xb80>)
 8005a1e:	f004 f8d1 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d103      	bne.n	8005a30 <checkDemoModCalisma+0xb54>
 8005a28:	4b18      	ldr	r3, [pc, #96]	@ (8005a8c <checkDemoModCalisma+0xbb0>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00b      	beq.n	8005a48 <checkDemoModCalisma+0xb6c>
 8005a30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005a34:	4811      	ldr	r0, [pc, #68]	@ (8005a7c <checkDemoModCalisma+0xba0>)
 8005a36:	f004 f8c5 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d133      	bne.n	8005aa8 <checkDemoModCalisma+0xbcc>
 8005a40:	4b12      	ldr	r3, [pc, #72]	@ (8005a8c <checkDemoModCalisma+0xbb0>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d12f      	bne.n	8005aa8 <checkDemoModCalisma+0xbcc>
						&&(makineStop==1)) {
 8005a48:	4b0d      	ldr	r3, [pc, #52]	@ (8005a80 <checkDemoModCalisma+0xba4>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d02b      	beq.n	8005aa8 <checkDemoModCalisma+0xbcc>

					kapi1butonkontrol=1;
 8005a50:	4b14      	ldr	r3, [pc, #80]	@ (8005aa4 <checkDemoModCalisma+0xbc8>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	e02a      	b.n	8005aae <checkDemoModCalisma+0xbd2>
 8005a58:	20000dd7 	.word	0x20000dd7
 8005a5c:	40011000 	.word	0x40011000
 8005a60:	20000ddb 	.word	0x20000ddb
 8005a64:	20000df1 	.word	0x20000df1
 8005a68:	20000df2 	.word	0x20000df2
 8005a6c:	20000dd3 	.word	0x20000dd3
 8005a70:	20000d78 	.word	0x20000d78
 8005a74:	20000d84 	.word	0x20000d84
 8005a78:	20000db6 	.word	0x20000db6
 8005a7c:	40010c00 	.word	0x40010c00
 8005a80:	20000de1 	.word	0x20000de1
 8005a84:	20000da9 	.word	0x20000da9
 8005a88:	20000da8 	.word	0x20000da8
 8005a8c:	20000dac 	.word	0x20000dac
 8005a90:	20000da6 	.word	0x20000da6
 8005a94:	20000dcf 	.word	0x20000dcf
 8005a98:	20000de2 	.word	0x20000de2
 8005a9c:	20000d7c 	.word	0x20000d7c
 8005aa0:	20000db9 	.word	0x20000db9
 8005aa4:	20000de3 	.word	0x20000de3
				} else {
					kapi1butonkontrol=0;
 8005aa8:	4b8b      	ldr	r3, [pc, #556]	@ (8005cd8 <checkDemoModCalisma+0xdfc>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005aae:	4b8b      	ldr	r3, [pc, #556]	@ (8005cdc <checkDemoModCalisma+0xe00>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d121      	bne.n	8005afa <checkDemoModCalisma+0xc1e>
 8005ab6:	4b8a      	ldr	r3, [pc, #552]	@ (8005ce0 <checkDemoModCalisma+0xe04>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d003      	beq.n	8005ac6 <checkDemoModCalisma+0xbea>
 8005abe:	4b88      	ldr	r3, [pc, #544]	@ (8005ce0 <checkDemoModCalisma+0xe04>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d119      	bne.n	8005afa <checkDemoModCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005ac6:	2104      	movs	r1, #4
 8005ac8:	4886      	ldr	r0, [pc, #536]	@ (8005ce4 <checkDemoModCalisma+0xe08>)
 8005aca:	f004 f87b 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d003      	beq.n	8005adc <checkDemoModCalisma+0xc00>
 8005ad4:	4b84      	ldr	r3, [pc, #528]	@ (8005ce8 <checkDemoModCalisma+0xe0c>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10e      	bne.n	8005afa <checkDemoModCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005adc:	2102      	movs	r1, #2
 8005ade:	4881      	ldr	r0, [pc, #516]	@ (8005ce4 <checkDemoModCalisma+0xe08>)
 8005ae0:	f004 f870 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d107      	bne.n	8005afa <checkDemoModCalisma+0xc1e>
						&&(makineStop==1)) {
 8005aea:	4b80      	ldr	r3, [pc, #512]	@ (8005cec <checkDemoModCalisma+0xe10>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <checkDemoModCalisma+0xc1e>

					kapi1pizzato=1;
 8005af2:	4b7f      	ldr	r3, [pc, #508]	@ (8005cf0 <checkDemoModCalisma+0xe14>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	701a      	strb	r2, [r3, #0]
 8005af8:	e002      	b.n	8005b00 <checkDemoModCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8005afa:	4b7d      	ldr	r3, [pc, #500]	@ (8005cf0 <checkDemoModCalisma+0xe14>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005b00:	4b75      	ldr	r3, [pc, #468]	@ (8005cd8 <checkDemoModCalisma+0xdfc>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d107      	bne.n	8005b18 <checkDemoModCalisma+0xc3c>
 8005b08:	4b79      	ldr	r3, [pc, #484]	@ (8005cf0 <checkDemoModCalisma+0xe14>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d103      	bne.n	8005b18 <checkDemoModCalisma+0xc3c>
 8005b10:	4b78      	ldr	r3, [pc, #480]	@ (8005cf4 <checkDemoModCalisma+0xe18>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <checkDemoModCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005b18:	2201      	movs	r2, #1
 8005b1a:	2180      	movs	r1, #128	@ 0x80
 8005b1c:	4876      	ldr	r0, [pc, #472]	@ (8005cf8 <checkDemoModCalisma+0xe1c>)
 8005b1e:	f004 f868 	bl	8009bf2 <HAL_GPIO_WritePin>
 8005b22:	e004      	b.n	8005b2e <checkDemoModCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005b24:	2200      	movs	r2, #0
 8005b26:	2180      	movs	r1, #128	@ 0x80
 8005b28:	4873      	ldr	r0, [pc, #460]	@ (8005cf8 <checkDemoModCalisma+0xe1c>)
 8005b2a:	f004 f862 	bl	8009bf2 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b2e:	4b73      	ldr	r3, [pc, #460]	@ (8005cfc <checkDemoModCalisma+0xe20>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d141      	bne.n	8005bba <checkDemoModCalisma+0xcde>
 8005b36:	4b6a      	ldr	r3, [pc, #424]	@ (8005ce0 <checkDemoModCalisma+0xe04>)
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d003      	beq.n	8005b46 <checkDemoModCalisma+0xc6a>
 8005b3e:	4b68      	ldr	r3, [pc, #416]	@ (8005ce0 <checkDemoModCalisma+0xe04>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d139      	bne.n	8005bba <checkDemoModCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005b46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005b4a:	4866      	ldr	r0, [pc, #408]	@ (8005ce4 <checkDemoModCalisma+0xe08>)
 8005b4c:	f004 f83a 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d103      	bne.n	8005b5e <checkDemoModCalisma+0xc82>
 8005b56:	4b6a      	ldr	r3, [pc, #424]	@ (8005d00 <checkDemoModCalisma+0xe24>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <checkDemoModCalisma+0xc9a>
 8005b5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005b62:	4868      	ldr	r0, [pc, #416]	@ (8005d04 <checkDemoModCalisma+0xe28>)
 8005b64:	f004 f82e 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d125      	bne.n	8005bba <checkDemoModCalisma+0xcde>
 8005b6e:	4b64      	ldr	r3, [pc, #400]	@ (8005d00 <checkDemoModCalisma+0xe24>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d121      	bne.n	8005bba <checkDemoModCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b76:	2102      	movs	r1, #2
 8005b78:	485a      	ldr	r0, [pc, #360]	@ (8005ce4 <checkDemoModCalisma+0xe08>)
 8005b7a:	f004 f823 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d11a      	bne.n	8005bba <checkDemoModCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b84:	2104      	movs	r1, #4
 8005b86:	4857      	ldr	r0, [pc, #348]	@ (8005ce4 <checkDemoModCalisma+0xe08>)
 8005b88:	f004 f81c 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d113      	bne.n	8005bba <checkDemoModCalisma+0xcde>
						&&(makineStop==1)
 8005b92:	4b56      	ldr	r3, [pc, #344]	@ (8005cec <checkDemoModCalisma+0xe10>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00f      	beq.n	8005bba <checkDemoModCalisma+0xcde>
						&&(butonKontrol==0)) {
 8005b9a:	4b5b      	ldr	r3, [pc, #364]	@ (8005d08 <checkDemoModCalisma+0xe2c>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	f083 0301 	eor.w	r3, r3, #1
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d008      	beq.n	8005bba <checkDemoModCalisma+0xcde>

					kapi2prudhome=1;
 8005ba8:	4b58      	ldr	r3, [pc, #352]	@ (8005d0c <checkDemoModCalisma+0xe30>)
 8005baa:	2201      	movs	r2, #1
 8005bac:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005bae:	4b58      	ldr	r3, [pc, #352]	@ (8005d10 <checkDemoModCalisma+0xe34>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a58      	ldr	r2, [pc, #352]	@ (8005d14 <checkDemoModCalisma+0xe38>)
 8005bb4:	6013      	str	r3, [r2, #0]
					bekle();
 8005bb6:	f7fd fc2b 	bl	8003410 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005bba:	4b55      	ldr	r3, [pc, #340]	@ (8005d10 <checkDemoModCalisma+0xe34>)
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	4b55      	ldr	r3, [pc, #340]	@ (8005d14 <checkDemoModCalisma+0xe38>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	4a54      	ldr	r2, [pc, #336]	@ (8005d18 <checkDemoModCalisma+0xe3c>)
 8005bc6:	7812      	ldrb	r2, [r2, #0]
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d20d      	bcs.n	8005be8 <checkDemoModCalisma+0xd0c>
 8005bcc:	2102      	movs	r1, #2
 8005bce:	4845      	ldr	r0, [pc, #276]	@ (8005ce4 <checkDemoModCalisma+0xe08>)
 8005bd0:	f003 fff8 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d006      	beq.n	8005be8 <checkDemoModCalisma+0xd0c>
 8005bda:	4b44      	ldr	r3, [pc, #272]	@ (8005cec <checkDemoModCalisma+0xe10>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	f083 0301 	eor.w	r3, r3, #1
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <checkDemoModCalisma+0xd12>
					kapi2prudhome=0;
 8005be8:	4b48      	ldr	r3, [pc, #288]	@ (8005d0c <checkDemoModCalisma+0xe30>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005bee:	4b43      	ldr	r3, [pc, #268]	@ (8005cfc <checkDemoModCalisma+0xe20>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d135      	bne.n	8005c62 <checkDemoModCalisma+0xd86>
 8005bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8005ce0 <checkDemoModCalisma+0xe04>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d003      	beq.n	8005c06 <checkDemoModCalisma+0xd2a>
 8005bfe:	4b38      	ldr	r3, [pc, #224]	@ (8005ce0 <checkDemoModCalisma+0xe04>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d12d      	bne.n	8005c62 <checkDemoModCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005c06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c0a:	4836      	ldr	r0, [pc, #216]	@ (8005ce4 <checkDemoModCalisma+0xe08>)
 8005c0c:	f003 ffda 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d103      	bne.n	8005c1e <checkDemoModCalisma+0xd42>
 8005c16:	4b3a      	ldr	r3, [pc, #232]	@ (8005d00 <checkDemoModCalisma+0xe24>)
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00b      	beq.n	8005c36 <checkDemoModCalisma+0xd5a>
 8005c1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005c22:	4838      	ldr	r0, [pc, #224]	@ (8005d04 <checkDemoModCalisma+0xe28>)
 8005c24:	f003 ffce 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d119      	bne.n	8005c62 <checkDemoModCalisma+0xd86>
 8005c2e:	4b34      	ldr	r3, [pc, #208]	@ (8005d00 <checkDemoModCalisma+0xe24>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d115      	bne.n	8005c62 <checkDemoModCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c36:	2102      	movs	r1, #2
 8005c38:	482a      	ldr	r0, [pc, #168]	@ (8005ce4 <checkDemoModCalisma+0xe08>)
 8005c3a:	f003 ffc3 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d10e      	bne.n	8005c62 <checkDemoModCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005c44:	2104      	movs	r1, #4
 8005c46:	4827      	ldr	r0, [pc, #156]	@ (8005ce4 <checkDemoModCalisma+0xe08>)
 8005c48:	f003 ffbc 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d107      	bne.n	8005c62 <checkDemoModCalisma+0xd86>
						&&(makineStop==1)) {
 8005c52:	4b26      	ldr	r3, [pc, #152]	@ (8005cec <checkDemoModCalisma+0xe10>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <checkDemoModCalisma+0xd86>

					kapi2butonkontrol=1;
 8005c5a:	4b30      	ldr	r3, [pc, #192]	@ (8005d1c <checkDemoModCalisma+0xe40>)
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	701a      	strb	r2, [r3, #0]
 8005c60:	e002      	b.n	8005c68 <checkDemoModCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 8005c62:	4b2e      	ldr	r3, [pc, #184]	@ (8005d1c <checkDemoModCalisma+0xe40>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005c68:	4b24      	ldr	r3, [pc, #144]	@ (8005cfc <checkDemoModCalisma+0xe20>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d11d      	bne.n	8005cac <checkDemoModCalisma+0xdd0>
 8005c70:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce0 <checkDemoModCalisma+0xe04>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d003      	beq.n	8005c80 <checkDemoModCalisma+0xda4>
 8005c78:	4b19      	ldr	r3, [pc, #100]	@ (8005ce0 <checkDemoModCalisma+0xe04>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d115      	bne.n	8005cac <checkDemoModCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c80:	2102      	movs	r1, #2
 8005c82:	4818      	ldr	r0, [pc, #96]	@ (8005ce4 <checkDemoModCalisma+0xe08>)
 8005c84:	f003 ff9e 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d10e      	bne.n	8005cac <checkDemoModCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005c8e:	2104      	movs	r1, #4
 8005c90:	4814      	ldr	r0, [pc, #80]	@ (8005ce4 <checkDemoModCalisma+0xe08>)
 8005c92:	f003 ff97 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d107      	bne.n	8005cac <checkDemoModCalisma+0xdd0>
						&&(makineStop==1)) {
 8005c9c:	4b13      	ldr	r3, [pc, #76]	@ (8005cec <checkDemoModCalisma+0xe10>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <checkDemoModCalisma+0xdd0>

					kapi2pizzato=1;
 8005ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8005d20 <checkDemoModCalisma+0xe44>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	e002      	b.n	8005cb2 <checkDemoModCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8005cac:	4b1c      	ldr	r3, [pc, #112]	@ (8005d20 <checkDemoModCalisma+0xe44>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8005d1c <checkDemoModCalisma+0xe40>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d107      	bne.n	8005cca <checkDemoModCalisma+0xdee>
 8005cba:	4b19      	ldr	r3, [pc, #100]	@ (8005d20 <checkDemoModCalisma+0xe44>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d103      	bne.n	8005cca <checkDemoModCalisma+0xdee>
 8005cc2:	4b12      	ldr	r3, [pc, #72]	@ (8005d0c <checkDemoModCalisma+0xe30>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d02c      	beq.n	8005d24 <checkDemoModCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005cca:	2201      	movs	r2, #1
 8005ccc:	2140      	movs	r1, #64	@ 0x40
 8005cce:	480a      	ldr	r0, [pc, #40]	@ (8005cf8 <checkDemoModCalisma+0xe1c>)
 8005cd0:	f003 ff8f 	bl	8009bf2 <HAL_GPIO_WritePin>
 8005cd4:	e02b      	b.n	8005d2e <checkDemoModCalisma+0xe52>
 8005cd6:	bf00      	nop
 8005cd8:	20000de3 	.word	0x20000de3
 8005cdc:	20000da9 	.word	0x20000da9
 8005ce0:	20000da8 	.word	0x20000da8
 8005ce4:	40011000 	.word	0x40011000
 8005ce8:	20000da6 	.word	0x20000da6
 8005cec:	20000de1 	.word	0x20000de1
 8005cf0:	20000de4 	.word	0x20000de4
 8005cf4:	20000de2 	.word	0x20000de2
 8005cf8:	40010800 	.word	0x40010800
 8005cfc:	20000daa 	.word	0x20000daa
 8005d00:	20000dac 	.word	0x20000dac
 8005d04:	40010c00 	.word	0x40010c00
 8005d08:	20000dcf 	.word	0x20000dcf
 8005d0c:	20000de5 	.word	0x20000de5
 8005d10:	20000d78 	.word	0x20000d78
 8005d14:	20000d7c 	.word	0x20000d7c
 8005d18:	20000dba 	.word	0x20000dba
 8005d1c:	20000de6 	.word	0x20000de6
 8005d20:	20000de7 	.word	0x20000de7
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005d24:	2200      	movs	r2, #0
 8005d26:	2140      	movs	r1, #64	@ 0x40
 8005d28:	4835      	ldr	r0, [pc, #212]	@ (8005e00 <checkDemoModCalisma+0xf24>)
 8005d2a:	f003 ff62 	bl	8009bf2 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 8005d2e:	4b35      	ldr	r3, [pc, #212]	@ (8005e04 <checkDemoModCalisma+0xf28>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <checkDemoModCalisma+0xe62>
 8005d36:	4b33      	ldr	r3, [pc, #204]	@ (8005e04 <checkDemoModCalisma+0xf28>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d115      	bne.n	8005d6a <checkDemoModCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005d3e:	2104      	movs	r1, #4
 8005d40:	4831      	ldr	r0, [pc, #196]	@ (8005e08 <checkDemoModCalisma+0xf2c>)
 8005d42:	f003 ff3f 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d003      	beq.n	8005d54 <checkDemoModCalisma+0xe78>
 8005d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8005e0c <checkDemoModCalisma+0xf30>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <checkDemoModCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005d54:	2102      	movs	r1, #2
 8005d56:	482c      	ldr	r0, [pc, #176]	@ (8005e08 <checkDemoModCalisma+0xf2c>)
 8005d58:	f003 ff34 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d103      	bne.n	8005d6a <checkDemoModCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 8005d62:	4b2b      	ldr	r3, [pc, #172]	@ (8005e10 <checkDemoModCalisma+0xf34>)
 8005d64:	2201      	movs	r2, #1
 8005d66:	701a      	strb	r2, [r3, #0]
 8005d68:	e002      	b.n	8005d70 <checkDemoModCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 8005d6a:	4b29      	ldr	r3, [pc, #164]	@ (8005e10 <checkDemoModCalisma+0xf34>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005d70:	4b24      	ldr	r3, [pc, #144]	@ (8005e04 <checkDemoModCalisma+0xf28>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d003      	beq.n	8005d80 <checkDemoModCalisma+0xea4>
 8005d78:	4b22      	ldr	r3, [pc, #136]	@ (8005e04 <checkDemoModCalisma+0xf28>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d111      	bne.n	8005da4 <checkDemoModCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005d80:	2102      	movs	r1, #2
 8005d82:	4821      	ldr	r0, [pc, #132]	@ (8005e08 <checkDemoModCalisma+0xf2c>)
 8005d84:	f003 ff1e 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d10a      	bne.n	8005da4 <checkDemoModCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005d8e:	2104      	movs	r1, #4
 8005d90:	481d      	ldr	r0, [pc, #116]	@ (8005e08 <checkDemoModCalisma+0xf2c>)
 8005d92:	f003 ff17 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d103      	bne.n	8005da4 <checkDemoModCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8005d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005e14 <checkDemoModCalisma+0xf38>)
 8005d9e:	2201      	movs	r2, #1
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	e002      	b.n	8005daa <checkDemoModCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8005da4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e14 <checkDemoModCalisma+0xf38>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8005daa:	4b19      	ldr	r3, [pc, #100]	@ (8005e10 <checkDemoModCalisma+0xf34>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00f      	beq.n	8005dd2 <checkDemoModCalisma+0xef6>
						&& kapiAcTipi==1
 8005db2:	4b19      	ldr	r3, [pc, #100]	@ (8005e18 <checkDemoModCalisma+0xf3c>)
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d10b      	bne.n	8005dd2 <checkDemoModCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005dba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005dbe:	4817      	ldr	r0, [pc, #92]	@ (8005e1c <checkDemoModCalisma+0xf40>)
 8005dc0:	f003 ff00 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d103      	bne.n	8005dd2 <checkDemoModCalisma+0xef6>

					kapiactablaesp1=1;
 8005dca:	4b15      	ldr	r3, [pc, #84]	@ (8005e20 <checkDemoModCalisma+0xf44>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	701a      	strb	r2, [r3, #0]
 8005dd0:	e002      	b.n	8005dd8 <checkDemoModCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8005dd2:	4b13      	ldr	r3, [pc, #76]	@ (8005e20 <checkDemoModCalisma+0xf44>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8005dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8005e14 <checkDemoModCalisma+0xf38>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d023      	beq.n	8005e28 <checkDemoModCalisma+0xf4c>
						&& kapiAcTipi==1
 8005de0:	4b0d      	ldr	r3, [pc, #52]	@ (8005e18 <checkDemoModCalisma+0xf3c>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d11f      	bne.n	8005e28 <checkDemoModCalisma+0xf4c>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005de8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005dec:	480b      	ldr	r0, [pc, #44]	@ (8005e1c <checkDemoModCalisma+0xf40>)
 8005dee:	f003 fee9 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d117      	bne.n	8005e28 <checkDemoModCalisma+0xf4c>

					kapiactablaesp2=1;
 8005df8:	4b0a      	ldr	r3, [pc, #40]	@ (8005e24 <checkDemoModCalisma+0xf48>)
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	701a      	strb	r2, [r3, #0]
 8005dfe:	e016      	b.n	8005e2e <checkDemoModCalisma+0xf52>
 8005e00:	40010800 	.word	0x40010800
 8005e04:	20000dad 	.word	0x20000dad
 8005e08:	40011000 	.word	0x40011000
 8005e0c:	20000da6 	.word	0x20000da6
 8005e10:	20000deb 	.word	0x20000deb
 8005e14:	20000dec 	.word	0x20000dec
 8005e18:	20000dac 	.word	0x20000dac
 8005e1c:	40010c00 	.word	0x40010c00
 8005e20:	20000dfb 	.word	0x20000dfb
 8005e24:	20000dfc 	.word	0x20000dfc
				} else {
					kapiactablaesp2=0;
 8005e28:	4b7e      	ldr	r3, [pc, #504]	@ (8006024 <checkDemoModCalisma+0x1148>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005e2e:	4b7e      	ldr	r3, [pc, #504]	@ (8006028 <checkDemoModCalisma+0x114c>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d154      	bne.n	8005ee0 <checkDemoModCalisma+0x1004>
 8005e36:	4b7d      	ldr	r3, [pc, #500]	@ (800602c <checkDemoModCalisma+0x1150>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d003      	beq.n	8005e46 <checkDemoModCalisma+0xf6a>
 8005e3e:	4b7b      	ldr	r3, [pc, #492]	@ (800602c <checkDemoModCalisma+0x1150>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d14c      	bne.n	8005ee0 <checkDemoModCalisma+0x1004>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e46:	4b7a      	ldr	r3, [pc, #488]	@ (8006030 <checkDemoModCalisma+0x1154>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d103      	bne.n	8005e56 <checkDemoModCalisma+0xf7a>
 8005e4e:	4b79      	ldr	r3, [pc, #484]	@ (8006034 <checkDemoModCalisma+0x1158>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d044      	beq.n	8005ee0 <checkDemoModCalisma+0x1004>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8005e56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005e5a:	4877      	ldr	r0, [pc, #476]	@ (8006038 <checkDemoModCalisma+0x115c>)
 8005e5c:	f003 feb2 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d01c      	beq.n	8005ea0 <checkDemoModCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8005e66:	2180      	movs	r1, #128	@ 0x80
 8005e68:	4873      	ldr	r0, [pc, #460]	@ (8006038 <checkDemoModCalisma+0x115c>)
 8005e6a:	f003 feab 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d106      	bne.n	8005e82 <checkDemoModCalisma+0xfa6>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005e74:	2104      	movs	r1, #4
 8005e76:	4870      	ldr	r0, [pc, #448]	@ (8006038 <checkDemoModCalisma+0x115c>)
 8005e78:	f003 fea4 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d00e      	beq.n	8005ea0 <checkDemoModCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005e82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005e86:	486c      	ldr	r0, [pc, #432]	@ (8006038 <checkDemoModCalisma+0x115c>)
 8005e88:	f003 fe9c 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10a      	bne.n	8005ea8 <checkDemoModCalisma+0xfcc>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005e92:	2102      	movs	r1, #2
 8005e94:	4868      	ldr	r0, [pc, #416]	@ (8006038 <checkDemoModCalisma+0x115c>)
 8005e96:	f003 fe95 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d103      	bne.n	8005ea8 <checkDemoModCalisma+0xfcc>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005ea0:	4b66      	ldr	r3, [pc, #408]	@ (800603c <checkDemoModCalisma+0x1160>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d007      	beq.n	8005eb8 <checkDemoModCalisma+0xfdc>
 8005ea8:	4b65      	ldr	r3, [pc, #404]	@ (8006040 <checkDemoModCalisma+0x1164>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d103      	bne.n	8005eb8 <checkDemoModCalisma+0xfdc>
 8005eb0:	4b5c      	ldr	r3, [pc, #368]	@ (8006024 <checkDemoModCalisma+0x1148>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d013      	beq.n	8005ee0 <checkDemoModCalisma+0x1004>
						&&(makineStop==1)
 8005eb8:	4b62      	ldr	r3, [pc, #392]	@ (8006044 <checkDemoModCalisma+0x1168>)
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00f      	beq.n	8005ee0 <checkDemoModCalisma+0x1004>
						&&(butonKontrol==0)) {
 8005ec0:	4b61      	ldr	r3, [pc, #388]	@ (8006048 <checkDemoModCalisma+0x116c>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	f083 0301 	eor.w	r3, r3, #1
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d008      	beq.n	8005ee0 <checkDemoModCalisma+0x1004>

					kapiTablaprudhome=1;
 8005ece:	4b5f      	ldr	r3, [pc, #380]	@ (800604c <checkDemoModCalisma+0x1170>)
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005ed4:	4b5e      	ldr	r3, [pc, #376]	@ (8006050 <checkDemoModCalisma+0x1174>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a5e      	ldr	r2, [pc, #376]	@ (8006054 <checkDemoModCalisma+0x1178>)
 8005eda:	6013      	str	r3, [r2, #0]
					bekle();
 8005edc:	f7fd fa98 	bl	8003410 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005ee0:	4b5b      	ldr	r3, [pc, #364]	@ (8006050 <checkDemoModCalisma+0x1174>)
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	4b5b      	ldr	r3, [pc, #364]	@ (8006054 <checkDemoModCalisma+0x1178>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	4a5b      	ldr	r2, [pc, #364]	@ (8006058 <checkDemoModCalisma+0x117c>)
 8005eec:	7812      	ldrb	r2, [r2, #0]
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d214      	bcs.n	8005f1c <checkDemoModCalisma+0x1040>
 8005ef2:	4b4f      	ldr	r3, [pc, #316]	@ (8006030 <checkDemoModCalisma+0x1154>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	f083 0301 	eor.w	r3, r3, #1
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d006      	beq.n	8005f0e <checkDemoModCalisma+0x1032>
 8005f00:	4b4c      	ldr	r3, [pc, #304]	@ (8006034 <checkDemoModCalisma+0x1158>)
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	f083 0301 	eor.w	r3, r3, #1
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <checkDemoModCalisma+0x1040>
 8005f0e:	4b4d      	ldr	r3, [pc, #308]	@ (8006044 <checkDemoModCalisma+0x1168>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	f083 0301 	eor.w	r3, r3, #1
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <checkDemoModCalisma+0x1046>
					kapiTablaprudhome=0;
 8005f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800604c <checkDemoModCalisma+0x1170>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005f22:	4b41      	ldr	r3, [pc, #260]	@ (8006028 <checkDemoModCalisma+0x114c>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d148      	bne.n	8005fbc <checkDemoModCalisma+0x10e0>
 8005f2a:	4b40      	ldr	r3, [pc, #256]	@ (800602c <checkDemoModCalisma+0x1150>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d003      	beq.n	8005f3a <checkDemoModCalisma+0x105e>
 8005f32:	4b3e      	ldr	r3, [pc, #248]	@ (800602c <checkDemoModCalisma+0x1150>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d140      	bne.n	8005fbc <checkDemoModCalisma+0x10e0>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005f3a:	4b3d      	ldr	r3, [pc, #244]	@ (8006030 <checkDemoModCalisma+0x1154>)
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d103      	bne.n	8005f4a <checkDemoModCalisma+0x106e>
 8005f42:	4b3c      	ldr	r3, [pc, #240]	@ (8006034 <checkDemoModCalisma+0x1158>)
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d038      	beq.n	8005fbc <checkDemoModCalisma+0x10e0>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8005f4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005f4e:	483a      	ldr	r0, [pc, #232]	@ (8006038 <checkDemoModCalisma+0x115c>)
 8005f50:	f003 fe38 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d01c      	beq.n	8005f94 <checkDemoModCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8005f5a:	2180      	movs	r1, #128	@ 0x80
 8005f5c:	4836      	ldr	r0, [pc, #216]	@ (8006038 <checkDemoModCalisma+0x115c>)
 8005f5e:	f003 fe31 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d106      	bne.n	8005f76 <checkDemoModCalisma+0x109a>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005f68:	2104      	movs	r1, #4
 8005f6a:	4833      	ldr	r0, [pc, #204]	@ (8006038 <checkDemoModCalisma+0x115c>)
 8005f6c:	f003 fe2a 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d00e      	beq.n	8005f94 <checkDemoModCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005f76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005f7a:	482f      	ldr	r0, [pc, #188]	@ (8006038 <checkDemoModCalisma+0x115c>)
 8005f7c:	f003 fe22 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10a      	bne.n	8005f9c <checkDemoModCalisma+0x10c0>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005f86:	2102      	movs	r1, #2
 8005f88:	482b      	ldr	r0, [pc, #172]	@ (8006038 <checkDemoModCalisma+0x115c>)
 8005f8a:	f003 fe1b 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d103      	bne.n	8005f9c <checkDemoModCalisma+0x10c0>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005f94:	4b29      	ldr	r3, [pc, #164]	@ (800603c <checkDemoModCalisma+0x1160>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d007      	beq.n	8005fac <checkDemoModCalisma+0x10d0>
 8005f9c:	4b28      	ldr	r3, [pc, #160]	@ (8006040 <checkDemoModCalisma+0x1164>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d103      	bne.n	8005fac <checkDemoModCalisma+0x10d0>
 8005fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8006024 <checkDemoModCalisma+0x1148>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d007      	beq.n	8005fbc <checkDemoModCalisma+0x10e0>
						&&(makineStop==1)) {
 8005fac:	4b25      	ldr	r3, [pc, #148]	@ (8006044 <checkDemoModCalisma+0x1168>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <checkDemoModCalisma+0x10e0>

					kapiTablabutonkontrol=1;
 8005fb4:	4b29      	ldr	r3, [pc, #164]	@ (800605c <checkDemoModCalisma+0x1180>)
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	e002      	b.n	8005fc2 <checkDemoModCalisma+0x10e6>
				} else {
					kapiTablabutonkontrol=0;
 8005fbc:	4b27      	ldr	r3, [pc, #156]	@ (800605c <checkDemoModCalisma+0x1180>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005fc2:	4b19      	ldr	r3, [pc, #100]	@ (8006028 <checkDemoModCalisma+0x114c>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d117      	bne.n	8005ffa <checkDemoModCalisma+0x111e>
 8005fca:	4b18      	ldr	r3, [pc, #96]	@ (800602c <checkDemoModCalisma+0x1150>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d003      	beq.n	8005fda <checkDemoModCalisma+0x10fe>
 8005fd2:	4b16      	ldr	r3, [pc, #88]	@ (800602c <checkDemoModCalisma+0x1150>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d10f      	bne.n	8005ffa <checkDemoModCalisma+0x111e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005fda:	4b15      	ldr	r3, [pc, #84]	@ (8006030 <checkDemoModCalisma+0x1154>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d103      	bne.n	8005fea <checkDemoModCalisma+0x110e>
 8005fe2:	4b14      	ldr	r3, [pc, #80]	@ (8006034 <checkDemoModCalisma+0x1158>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d007      	beq.n	8005ffa <checkDemoModCalisma+0x111e>
						&&(makineStop==1)) {
 8005fea:	4b16      	ldr	r3, [pc, #88]	@ (8006044 <checkDemoModCalisma+0x1168>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <checkDemoModCalisma+0x111e>

					kapiTablapizzato=1;
 8005ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8006060 <checkDemoModCalisma+0x1184>)
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	e002      	b.n	8006000 <checkDemoModCalisma+0x1124>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8005ffa:	4b19      	ldr	r3, [pc, #100]	@ (8006060 <checkDemoModCalisma+0x1184>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8006000:	4b16      	ldr	r3, [pc, #88]	@ (800605c <checkDemoModCalisma+0x1180>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d107      	bne.n	8006018 <checkDemoModCalisma+0x113c>
 8006008:	4b10      	ldr	r3, [pc, #64]	@ (800604c <checkDemoModCalisma+0x1170>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d103      	bne.n	8006018 <checkDemoModCalisma+0x113c>
 8006010:	4b13      	ldr	r3, [pc, #76]	@ (8006060 <checkDemoModCalisma+0x1184>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d027      	beq.n	8006068 <checkDemoModCalisma+0x118c>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006018:	2201      	movs	r2, #1
 800601a:	2120      	movs	r1, #32
 800601c:	4811      	ldr	r0, [pc, #68]	@ (8006064 <checkDemoModCalisma+0x1188>)
 800601e:	f003 fde8 	bl	8009bf2 <HAL_GPIO_WritePin>
 8006022:	e026      	b.n	8006072 <checkDemoModCalisma+0x1196>
 8006024:	20000dfc 	.word	0x20000dfc
 8006028:	20000dab 	.word	0x20000dab
 800602c:	20000da8 	.word	0x20000da8
 8006030:	20000deb 	.word	0x20000deb
 8006034:	20000dec 	.word	0x20000dec
 8006038:	40011000 	.word	0x40011000
 800603c:	20000dac 	.word	0x20000dac
 8006040:	20000dfb 	.word	0x20000dfb
 8006044:	20000de1 	.word	0x20000de1
 8006048:	20000dcf 	.word	0x20000dcf
 800604c:	20000de8 	.word	0x20000de8
 8006050:	20000d78 	.word	0x20000d78
 8006054:	20000d7c 	.word	0x20000d7c
 8006058:	20000dbb 	.word	0x20000dbb
 800605c:	20000de9 	.word	0x20000de9
 8006060:	20000dea 	.word	0x20000dea
 8006064:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006068:	2200      	movs	r2, #0
 800606a:	2120      	movs	r1, #32
 800606c:	4887      	ldr	r0, [pc, #540]	@ (800628c <checkDemoModCalisma+0x13b0>)
 800606e:	f003 fdc0 	bl	8009bf2 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8006072:	4b87      	ldr	r3, [pc, #540]	@ (8006290 <checkDemoModCalisma+0x13b4>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00e      	beq.n	8006098 <checkDemoModCalisma+0x11bc>
 800607a:	2102      	movs	r1, #2
 800607c:	4885      	ldr	r0, [pc, #532]	@ (8006294 <checkDemoModCalisma+0x13b8>)
 800607e:	f003 fda1 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006082:	4603      	mov	r3, r0
 8006084:	2b01      	cmp	r3, #1
 8006086:	d107      	bne.n	8006098 <checkDemoModCalisma+0x11bc>
 8006088:	4b83      	ldr	r3, [pc, #524]	@ (8006298 <checkDemoModCalisma+0x13bc>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d103      	bne.n	8006098 <checkDemoModCalisma+0x11bc>
 8006090:	4b82      	ldr	r3, [pc, #520]	@ (800629c <checkDemoModCalisma+0x13c0>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d112      	bne.n	80060be <checkDemoModCalisma+0x11e2>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8006098:	4b81      	ldr	r3, [pc, #516]	@ (80062a0 <checkDemoModCalisma+0x13c4>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d032      	beq.n	8006106 <checkDemoModCalisma+0x122a>
 80060a0:	2104      	movs	r1, #4
 80060a2:	487c      	ldr	r0, [pc, #496]	@ (8006294 <checkDemoModCalisma+0x13b8>)
 80060a4:	f003 fd8e 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d12b      	bne.n	8006106 <checkDemoModCalisma+0x122a>
 80060ae:	4b7a      	ldr	r3, [pc, #488]	@ (8006298 <checkDemoModCalisma+0x13bc>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d027      	beq.n	8006106 <checkDemoModCalisma+0x122a>
 80060b6:	4b79      	ldr	r3, [pc, #484]	@ (800629c <checkDemoModCalisma+0x13c0>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d023      	beq.n	8006106 <checkDemoModCalisma+0x122a>


					calismaSayisi++;
 80060be:	4b79      	ldr	r3, [pc, #484]	@ (80062a4 <checkDemoModCalisma+0x13c8>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	4b77      	ldr	r3, [pc, #476]	@ (80062a4 <checkDemoModCalisma+0x13c8>)
 80060c8:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 80060ca:	4b76      	ldr	r3, [pc, #472]	@ (80062a4 <checkDemoModCalisma+0x13c8>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2bff      	cmp	r3, #255	@ 0xff
 80060d0:	d108      	bne.n	80060e4 <checkDemoModCalisma+0x1208>
						calismaSayisi = 0;
 80060d2:	4b74      	ldr	r3, [pc, #464]	@ (80062a4 <checkDemoModCalisma+0x13c8>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 80060d8:	4b73      	ldr	r3, [pc, #460]	@ (80062a8 <checkDemoModCalisma+0x13cc>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	3301      	adds	r3, #1
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	4b71      	ldr	r3, [pc, #452]	@ (80062a8 <checkDemoModCalisma+0x13cc>)
 80060e2:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 80060e4:	4b6f      	ldr	r3, [pc, #444]	@ (80062a4 <checkDemoModCalisma+0x13c8>)
 80060e6:	781a      	ldrb	r2, [r3, #0]
 80060e8:	4b70      	ldr	r3, [pc, #448]	@ (80062ac <checkDemoModCalisma+0x13d0>)
 80060ea:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 80060ec:	4b6e      	ldr	r3, [pc, #440]	@ (80062a8 <checkDemoModCalisma+0x13cc>)
 80060ee:	781a      	ldrb	r2, [r3, #0]
 80060f0:	4b6e      	ldr	r3, [pc, #440]	@ (80062ac <checkDemoModCalisma+0x13d0>)
 80060f2:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 80060f4:	4b6e      	ldr	r3, [pc, #440]	@ (80062b0 <checkDemoModCalisma+0x13d4>)
 80060f6:	2201      	movs	r2, #1
 80060f8:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 80060fa:	4b65      	ldr	r3, [pc, #404]	@ (8006290 <checkDemoModCalisma+0x13b4>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 8006100:	4b67      	ldr	r3, [pc, #412]	@ (80062a0 <checkDemoModCalisma+0x13c4>)
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006106:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800610a:	486a      	ldr	r0, [pc, #424]	@ (80062b4 <checkDemoModCalisma+0x13d8>)
 800610c:	f003 fd5a 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d016      	beq.n	8006144 <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006116:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800611a:	4866      	ldr	r0, [pc, #408]	@ (80062b4 <checkDemoModCalisma+0x13d8>)
 800611c:	f003 fd52 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00e      	beq.n	8006144 <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006126:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800612a:	4862      	ldr	r0, [pc, #392]	@ (80062b4 <checkDemoModCalisma+0x13d8>)
 800612c:	f003 fd4a 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d006      	beq.n	8006144 <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006136:	2140      	movs	r1, #64	@ 0x40
 8006138:	4856      	ldr	r0, [pc, #344]	@ (8006294 <checkDemoModCalisma+0x13b8>)
 800613a:	f003 fd43 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d103      	bne.n	800614c <checkDemoModCalisma+0x1270>

					startBasili=1;
 8006144:	4b5c      	ldr	r3, [pc, #368]	@ (80062b8 <checkDemoModCalisma+0x13dc>)
 8006146:	2201      	movs	r2, #1
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	e002      	b.n	8006152 <checkDemoModCalisma+0x1276>
				} else {
					startBasili=0;
 800614c:	4b5a      	ldr	r3, [pc, #360]	@ (80062b8 <checkDemoModCalisma+0x13dc>)
 800614e:	2200      	movs	r2, #0
 8006150:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006152:	4b59      	ldr	r3, [pc, #356]	@ (80062b8 <checkDemoModCalisma+0x13dc>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d014      	beq.n	8006184 <checkDemoModCalisma+0x12a8>
 800615a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800615e:	4855      	ldr	r0, [pc, #340]	@ (80062b4 <checkDemoModCalisma+0x13d8>)
 8006160:	f003 fd30 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006164:	4603      	mov	r3, r0
 8006166:	2b01      	cmp	r3, #1
 8006168:	d10c      	bne.n	8006184 <checkDemoModCalisma+0x12a8>

					hataVar=1;
 800616a:	4b54      	ldr	r3, [pc, #336]	@ (80062bc <checkDemoModCalisma+0x13e0>)
 800616c:	2201      	movs	r2, #1
 800616e:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8006170:	2001      	movs	r0, #1
 8006172:	f7fa fbd9 	bl	8000928 <hataKoduLcdGoster>
					hata2EEPROM(1);
 8006176:	2001      	movs	r0, #1
 8006178:	f7fa fb7e 	bl	8000878 <hata2EEPROM>
					acilstophatasi=1;
 800617c:	4b50      	ldr	r3, [pc, #320]	@ (80062c0 <checkDemoModCalisma+0x13e4>)
 800617e:	2201      	movs	r2, #1
 8006180:	701a      	strb	r2, [r3, #0]
 8006182:	e018      	b.n	80061b6 <checkDemoModCalisma+0x12da>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006184:	4b4e      	ldr	r3, [pc, #312]	@ (80062c0 <checkDemoModCalisma+0x13e4>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d014      	beq.n	80061b6 <checkDemoModCalisma+0x12da>
 800618c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006190:	4848      	ldr	r0, [pc, #288]	@ (80062b4 <checkDemoModCalisma+0x13d8>)
 8006192:	f003 fd17 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10c      	bne.n	80061b6 <checkDemoModCalisma+0x12da>
 800619c:	4b46      	ldr	r3, [pc, #280]	@ (80062b8 <checkDemoModCalisma+0x13dc>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	f083 0301 	eor.w	r3, r3, #1
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <checkDemoModCalisma+0x12da>
					acilstophatasi=0;
 80061aa:	4b45      	ldr	r3, [pc, #276]	@ (80062c0 <checkDemoModCalisma+0x13e4>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 80061b0:	2001      	movs	r0, #1
 80061b2:	f7fd f8c3 	bl	800333c <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 80061b6:	4b43      	ldr	r3, [pc, #268]	@ (80062c4 <checkDemoModCalisma+0x13e8>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	f083 0301 	eor.w	r3, r3, #1
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d023      	beq.n	800620c <checkDemoModCalisma+0x1330>
 80061c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80061c8:	483a      	ldr	r0, [pc, #232]	@ (80062b4 <checkDemoModCalisma+0x13d8>)
 80061ca:	f003 fcfb 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <checkDemoModCalisma+0x1300>
 80061d4:	4b3c      	ldr	r3, [pc, #240]	@ (80062c8 <checkDemoModCalisma+0x13ec>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d017      	beq.n	800620c <checkDemoModCalisma+0x1330>
 80061dc:	4b3b      	ldr	r3, [pc, #236]	@ (80062cc <checkDemoModCalisma+0x13f0>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d113      	bne.n	800620c <checkDemoModCalisma+0x1330>
 80061e4:	4b3a      	ldr	r3, [pc, #232]	@ (80062d0 <checkDemoModCalisma+0x13f4>)
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	f083 0301 	eor.w	r3, r3, #1
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00c      	beq.n	800620c <checkDemoModCalisma+0x1330>
					hataVar=1;
 80061f2:	4b32      	ldr	r3, [pc, #200]	@ (80062bc <checkDemoModCalisma+0x13e0>)
 80061f4:	2201      	movs	r2, #1
 80061f6:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 80061f8:	2002      	movs	r0, #2
 80061fa:	f7fa fb95 	bl	8000928 <hataKoduLcdGoster>
					hata2EEPROM(2);
 80061fe:	2002      	movs	r0, #2
 8006200:	f7fa fb3a 	bl	8000878 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8006204:	4b32      	ldr	r3, [pc, #200]	@ (80062d0 <checkDemoModCalisma+0x13f4>)
 8006206:	2201      	movs	r2, #1
 8006208:	701a      	strb	r2, [r3, #0]
 800620a:	e017      	b.n	800623c <checkDemoModCalisma+0x1360>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 800620c:	4b30      	ldr	r3, [pc, #192]	@ (80062d0 <checkDemoModCalisma+0x13f4>)
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d013      	beq.n	800623c <checkDemoModCalisma+0x1360>
 8006214:	4b2b      	ldr	r3, [pc, #172]	@ (80062c4 <checkDemoModCalisma+0x13e8>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00f      	beq.n	800623c <checkDemoModCalisma+0x1360>
 800621c:	4b2d      	ldr	r3, [pc, #180]	@ (80062d4 <checkDemoModCalisma+0x13f8>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	f083 0301 	eor.w	r3, r3, #1
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d008      	beq.n	800623c <checkDemoModCalisma+0x1360>
					emniyetCercevesihatasi=0;
 800622a:	4b29      	ldr	r3, [pc, #164]	@ (80062d0 <checkDemoModCalisma+0x13f4>)
 800622c:	2200      	movs	r2, #0
 800622e:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8006230:	4b25      	ldr	r3, [pc, #148]	@ (80062c8 <checkDemoModCalisma+0x13ec>)
 8006232:	2200      	movs	r2, #0
 8006234:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 8006236:	2002      	movs	r0, #2
 8006238:	f7fd f880 	bl	800333c <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 800623c:	4b26      	ldr	r3, [pc, #152]	@ (80062d8 <checkDemoModCalisma+0x13fc>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d151      	bne.n	80062e8 <checkDemoModCalisma+0x140c>
 8006244:	4b25      	ldr	r3, [pc, #148]	@ (80062dc <checkDemoModCalisma+0x1400>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d14d      	bne.n	80062e8 <checkDemoModCalisma+0x140c>
 800624c:	4b24      	ldr	r3, [pc, #144]	@ (80062e0 <checkDemoModCalisma+0x1404>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d049      	beq.n	80062e8 <checkDemoModCalisma+0x140c>
 8006254:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006258:	480e      	ldr	r0, [pc, #56]	@ (8006294 <checkDemoModCalisma+0x13b8>)
 800625a:	f003 fcb3 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800625e:	4603      	mov	r3, r0
 8006260:	2b01      	cmp	r3, #1
 8006262:	d141      	bne.n	80062e8 <checkDemoModCalisma+0x140c>
 8006264:	4b1f      	ldr	r3, [pc, #124]	@ (80062e4 <checkDemoModCalisma+0x1408>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	f083 0301 	eor.w	r3, r3, #1
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d03a      	beq.n	80062e8 <checkDemoModCalisma+0x140c>
					hataVar=1;
 8006272:	4b12      	ldr	r3, [pc, #72]	@ (80062bc <checkDemoModCalisma+0x13e0>)
 8006274:	2201      	movs	r2, #1
 8006276:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 8006278:	2003      	movs	r0, #3
 800627a:	f7fa fb55 	bl	8000928 <hataKoduLcdGoster>
					hata2EEPROM(3);
 800627e:	2003      	movs	r0, #3
 8006280:	f7fa fafa 	bl	8000878 <hata2EEPROM>
					basinchatasi=1;
 8006284:	4b17      	ldr	r3, [pc, #92]	@ (80062e4 <checkDemoModCalisma+0x1408>)
 8006286:	2201      	movs	r2, #1
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	e043      	b.n	8006314 <checkDemoModCalisma+0x1438>
 800628c:	40010800 	.word	0x40010800
 8006290:	20000ddf 	.word	0x20000ddf
 8006294:	40011000 	.word	0x40011000
 8006298:	20000da6 	.word	0x20000da6
 800629c:	20000de1 	.word	0x20000de1
 80062a0:	20000de0 	.word	0x20000de0
 80062a4:	20000d98 	.word	0x20000d98
 80062a8:	20000d9a 	.word	0x20000d9a
 80062ac:	20000d00 	.word	0x20000d00
 80062b0:	20000dcc 	.word	0x20000dcc
 80062b4:	40010c00 	.word	0x40010c00
 80062b8:	20000ded 	.word	0x20000ded
 80062bc:	20000df4 	.word	0x20000df4
 80062c0:	20000def 	.word	0x20000def
 80062c4:	20000df6 	.word	0x20000df6
 80062c8:	20000e00 	.word	0x20000e00
 80062cc:	20000da4 	.word	0x20000da4
 80062d0:	20000df0 	.word	0x20000df0
 80062d4:	20000dd8 	.word	0x20000dd8
 80062d8:	20000da3 	.word	0x20000da3
 80062dc:	20000da7 	.word	0x20000da7
 80062e0:	20000df3 	.word	0x20000df3
 80062e4:	20000dfd 	.word	0x20000dfd
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80062e8:	4b85      	ldr	r3, [pc, #532]	@ (8006500 <checkDemoModCalisma+0x1624>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d011      	beq.n	8006314 <checkDemoModCalisma+0x1438>
 80062f0:	4b84      	ldr	r3, [pc, #528]	@ (8006504 <checkDemoModCalisma+0x1628>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d10d      	bne.n	8006314 <checkDemoModCalisma+0x1438>
 80062f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80062fc:	4882      	ldr	r0, [pc, #520]	@ (8006508 <checkDemoModCalisma+0x162c>)
 80062fe:	f003 fc61 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006302:	4603      	mov	r3, r0
 8006304:	2b01      	cmp	r3, #1
 8006306:	d105      	bne.n	8006314 <checkDemoModCalisma+0x1438>
					basinchatasi=0;
 8006308:	4b7d      	ldr	r3, [pc, #500]	@ (8006500 <checkDemoModCalisma+0x1624>)
 800630a:	2200      	movs	r2, #0
 800630c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 800630e:	2003      	movs	r0, #3
 8006310:	f7fd f814 	bl	800333c <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8006314:	4b7d      	ldr	r3, [pc, #500]	@ (800650c <checkDemoModCalisma+0x1630>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d103      	bne.n	8006324 <checkDemoModCalisma+0x1448>
 800631c:	4b7c      	ldr	r3, [pc, #496]	@ (8006510 <checkDemoModCalisma+0x1634>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d023      	beq.n	800636c <checkDemoModCalisma+0x1490>
 8006324:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006328:	487a      	ldr	r0, [pc, #488]	@ (8006514 <checkDemoModCalisma+0x1638>)
 800632a:	f003 fc4b 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800632e:	4603      	mov	r3, r0
 8006330:	2b01      	cmp	r3, #1
 8006332:	d11b      	bne.n	800636c <checkDemoModCalisma+0x1490>
 8006334:	4b78      	ldr	r3, [pc, #480]	@ (8006518 <checkDemoModCalisma+0x163c>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d003      	beq.n	8006344 <checkDemoModCalisma+0x1468>
 800633c:	4b76      	ldr	r3, [pc, #472]	@ (8006518 <checkDemoModCalisma+0x163c>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b03      	cmp	r3, #3
 8006342:	d113      	bne.n	800636c <checkDemoModCalisma+0x1490>
 8006344:	4b75      	ldr	r3, [pc, #468]	@ (800651c <checkDemoModCalisma+0x1640>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	f083 0301 	eor.w	r3, r3, #1
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00c      	beq.n	800636c <checkDemoModCalisma+0x1490>
					hataVar=1;
 8006352:	4b73      	ldr	r3, [pc, #460]	@ (8006520 <checkDemoModCalisma+0x1644>)
 8006354:	2201      	movs	r2, #1
 8006356:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8006358:	2004      	movs	r0, #4
 800635a:	f7fa fae5 	bl	8000928 <hataKoduLcdGoster>
					hata2EEPROM(4);
 800635e:	2004      	movs	r0, #4
 8006360:	f7fa fa8a 	bl	8000878 <hata2EEPROM>
					katkapisivicihatasi=1;
 8006364:	4b6d      	ldr	r3, [pc, #436]	@ (800651c <checkDemoModCalisma+0x1640>)
 8006366:	2201      	movs	r2, #1
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	e01f      	b.n	80063ac <checkDemoModCalisma+0x14d0>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800636c:	4b6b      	ldr	r3, [pc, #428]	@ (800651c <checkDemoModCalisma+0x1640>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d01b      	beq.n	80063ac <checkDemoModCalisma+0x14d0>
 8006374:	4b6b      	ldr	r3, [pc, #428]	@ (8006524 <checkDemoModCalisma+0x1648>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d017      	beq.n	80063ac <checkDemoModCalisma+0x14d0>
 800637c:	4b63      	ldr	r3, [pc, #396]	@ (800650c <checkDemoModCalisma+0x1630>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	f083 0301 	eor.w	r3, r3, #1
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d010      	beq.n	80063ac <checkDemoModCalisma+0x14d0>
 800638a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800638e:	4861      	ldr	r0, [pc, #388]	@ (8006514 <checkDemoModCalisma+0x1638>)
 8006390:	f003 fc18 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d108      	bne.n	80063ac <checkDemoModCalisma+0x14d0>

					katkapisivicihatasi=0;
 800639a:	4b60      	ldr	r3, [pc, #384]	@ (800651c <checkDemoModCalisma+0x1640>)
 800639c:	2200      	movs	r2, #0
 800639e:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 80063a0:	4b5b      	ldr	r3, [pc, #364]	@ (8006510 <checkDemoModCalisma+0x1634>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 80063a6:	2004      	movs	r0, #4
 80063a8:	f7fc ffc8 	bl	800333c <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 80063ac:	4b57      	ldr	r3, [pc, #348]	@ (800650c <checkDemoModCalisma+0x1630>)
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d103      	bne.n	80063bc <checkDemoModCalisma+0x14e0>
 80063b4:	4b5c      	ldr	r3, [pc, #368]	@ (8006528 <checkDemoModCalisma+0x164c>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d023      	beq.n	8006404 <checkDemoModCalisma+0x1528>
 80063bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80063c0:	4854      	ldr	r0, [pc, #336]	@ (8006514 <checkDemoModCalisma+0x1638>)
 80063c2:	f003 fbff 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d11b      	bne.n	8006404 <checkDemoModCalisma+0x1528>
 80063cc:	4b52      	ldr	r3, [pc, #328]	@ (8006518 <checkDemoModCalisma+0x163c>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d003      	beq.n	80063dc <checkDemoModCalisma+0x1500>
 80063d4:	4b50      	ldr	r3, [pc, #320]	@ (8006518 <checkDemoModCalisma+0x163c>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d113      	bne.n	8006404 <checkDemoModCalisma+0x1528>
 80063dc:	4b53      	ldr	r3, [pc, #332]	@ (800652c <checkDemoModCalisma+0x1650>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	f083 0301 	eor.w	r3, r3, #1
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00c      	beq.n	8006404 <checkDemoModCalisma+0x1528>

					hataVar=1;
 80063ea:	4b4d      	ldr	r3, [pc, #308]	@ (8006520 <checkDemoModCalisma+0x1644>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 80063f0:	2005      	movs	r0, #5
 80063f2:	f7fa fa99 	bl	8000928 <hataKoduLcdGoster>
					hata2EEPROM(5);
 80063f6:	2005      	movs	r0, #5
 80063f8:	f7fa fa3e 	bl	8000878 <hata2EEPROM>
					tablakapisivicihatasi=1;
 80063fc:	4b4b      	ldr	r3, [pc, #300]	@ (800652c <checkDemoModCalisma+0x1650>)
 80063fe:	2201      	movs	r2, #1
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	e023      	b.n	800644c <checkDemoModCalisma+0x1570>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006404:	4b49      	ldr	r3, [pc, #292]	@ (800652c <checkDemoModCalisma+0x1650>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01f      	beq.n	800644c <checkDemoModCalisma+0x1570>
 800640c:	4b45      	ldr	r3, [pc, #276]	@ (8006524 <checkDemoModCalisma+0x1648>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d01b      	beq.n	800644c <checkDemoModCalisma+0x1570>
 8006414:	4b3d      	ldr	r3, [pc, #244]	@ (800650c <checkDemoModCalisma+0x1630>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	f083 0301 	eor.w	r3, r3, #1
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d014      	beq.n	800644c <checkDemoModCalisma+0x1570>
 8006422:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006426:	483b      	ldr	r0, [pc, #236]	@ (8006514 <checkDemoModCalisma+0x1638>)
 8006428:	f003 fbcc 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10c      	bne.n	800644c <checkDemoModCalisma+0x1570>
 8006432:	4b3c      	ldr	r3, [pc, #240]	@ (8006524 <checkDemoModCalisma+0x1648>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d008      	beq.n	800644c <checkDemoModCalisma+0x1570>
					tablakapisivicihatasi=0;
 800643a:	4b3c      	ldr	r3, [pc, #240]	@ (800652c <checkDemoModCalisma+0x1650>)
 800643c:	2200      	movs	r2, #0
 800643e:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8006440:	4b39      	ldr	r3, [pc, #228]	@ (8006528 <checkDemoModCalisma+0x164c>)
 8006442:	2200      	movs	r2, #0
 8006444:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8006446:	2005      	movs	r0, #5
 8006448:	f7fc ff78 	bl	800333c <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 800644c:	4b38      	ldr	r3, [pc, #224]	@ (8006530 <checkDemoModCalisma+0x1654>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d107      	bne.n	8006464 <checkDemoModCalisma+0x1588>
 8006454:	4b37      	ldr	r3, [pc, #220]	@ (8006534 <checkDemoModCalisma+0x1658>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d103      	bne.n	8006464 <checkDemoModCalisma+0x1588>
 800645c:	4b36      	ldr	r3, [pc, #216]	@ (8006538 <checkDemoModCalisma+0x165c>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d01b      	beq.n	800649c <checkDemoModCalisma+0x15c0>
 8006464:	4b35      	ldr	r3, [pc, #212]	@ (800653c <checkDemoModCalisma+0x1660>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	f083 0301 	eor.w	r3, r3, #1
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d014      	beq.n	800649c <checkDemoModCalisma+0x15c0>
				    if(millis-timer4>=makineCalismaTmr) {
 8006472:	4b33      	ldr	r3, [pc, #204]	@ (8006540 <checkDemoModCalisma+0x1664>)
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	4b33      	ldr	r3, [pc, #204]	@ (8006544 <checkDemoModCalisma+0x1668>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	4a32      	ldr	r2, [pc, #200]	@ (8006548 <checkDemoModCalisma+0x166c>)
 800647e:	7812      	ldrb	r2, [r2, #0]
 8006480:	4293      	cmp	r3, r2
 8006482:	d30b      	bcc.n	800649c <checkDemoModCalisma+0x15c0>
					  	hataVar=1;
 8006484:	4b26      	ldr	r3, [pc, #152]	@ (8006520 <checkDemoModCalisma+0x1644>)
 8006486:	2201      	movs	r2, #1
 8006488:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 800648a:	2006      	movs	r0, #6
 800648c:	f7fa fa4c 	bl	8000928 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8006490:	2006      	movs	r0, #6
 8006492:	f7fa f9f1 	bl	8000878 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8006496:	4b29      	ldr	r3, [pc, #164]	@ (800653c <checkDemoModCalisma+0x1660>)
 8006498:	2201      	movs	r2, #1
 800649a:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 800649c:	4b27      	ldr	r3, [pc, #156]	@ (800653c <checkDemoModCalisma+0x1660>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d013      	beq.n	80064cc <checkDemoModCalisma+0x15f0>
 80064a4:	2108      	movs	r1, #8
 80064a6:	481b      	ldr	r0, [pc, #108]	@ (8006514 <checkDemoModCalisma+0x1638>)
 80064a8:	f003 fb8c 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00c      	beq.n	80064cc <checkDemoModCalisma+0x15f0>
 80064b2:	4b16      	ldr	r3, [pc, #88]	@ (800650c <checkDemoModCalisma+0x1630>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	f083 0301 	eor.w	r3, r3, #1
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <checkDemoModCalisma+0x15f0>
					maksimumcalismahatasi=0;
 80064c0:	4b1e      	ldr	r3, [pc, #120]	@ (800653c <checkDemoModCalisma+0x1660>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 80064c6:	2006      	movs	r0, #6
 80064c8:	f7fc ff38 	bl	800333c <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80064cc:	4b1f      	ldr	r3, [pc, #124]	@ (800654c <checkDemoModCalisma+0x1670>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10b      	bne.n	80064ec <checkDemoModCalisma+0x1610>
 80064d4:	4b17      	ldr	r3, [pc, #92]	@ (8006534 <checkDemoModCalisma+0x1658>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d107      	bne.n	80064ec <checkDemoModCalisma+0x1610>
 80064dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006550 <checkDemoModCalisma+0x1674>)
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d103      	bne.n	80064ec <checkDemoModCalisma+0x1610>
 80064e4:	4b14      	ldr	r3, [pc, #80]	@ (8006538 <checkDemoModCalisma+0x165c>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d035      	beq.n	8006558 <checkDemoModCalisma+0x167c>
					makineCalisiyor=0;
 80064ec:	4b19      	ldr	r3, [pc, #100]	@ (8006554 <checkDemoModCalisma+0x1678>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 80064f2:	4b07      	ldr	r3, [pc, #28]	@ (8006510 <checkDemoModCalisma+0x1634>)
 80064f4:	2201      	movs	r2, #1
 80064f6:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 80064f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006528 <checkDemoModCalisma+0x164c>)
 80064fa:	2201      	movs	r2, #1
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	e032      	b.n	8006566 <checkDemoModCalisma+0x168a>
 8006500:	20000dfd 	.word	0x20000dfd
 8006504:	20000da3 	.word	0x20000da3
 8006508:	40010c00 	.word	0x40010c00
 800650c:	20000ded 	.word	0x20000ded
 8006510:	20000e01 	.word	0x20000e01
 8006514:	40010800 	.word	0x40010800
 8006518:	20000da8 	.word	0x20000da8
 800651c:	20000dfe 	.word	0x20000dfe
 8006520:	20000df4 	.word	0x20000df4
 8006524:	20000de1 	.word	0x20000de1
 8006528:	20000e02 	.word	0x20000e02
 800652c:	20000dff 	.word	0x20000dff
 8006530:	20000df3 	.word	0x20000df3
 8006534:	20000dd8 	.word	0x20000dd8
 8006538:	20000dd7 	.word	0x20000dd7
 800653c:	20000dee 	.word	0x20000dee
 8006540:	20000d78 	.word	0x20000d78
 8006544:	20000d8c 	.word	0x20000d8c
 8006548:	20000db8 	.word	0x20000db8
 800654c:	20000dd5 	.word	0x20000dd5
 8006550:	20000dd6 	.word	0x20000dd6
 8006554:	20000df5 	.word	0x20000df5
				} else {
					makineCalisiyor=1;
 8006558:	4b90      	ldr	r3, [pc, #576]	@ (800679c <checkDemoModCalisma+0x18c0>)
 800655a:	2201      	movs	r2, #1
 800655c:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 800655e:	4b90      	ldr	r3, [pc, #576]	@ (80067a0 <checkDemoModCalisma+0x18c4>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a90      	ldr	r2, [pc, #576]	@ (80067a4 <checkDemoModCalisma+0x18c8>)
 8006564:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006566:	4b90      	ldr	r3, [pc, #576]	@ (80067a8 <checkDemoModCalisma+0x18cc>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d02f      	beq.n	80065ce <checkDemoModCalisma+0x16f2>
 800656e:	4b8f      	ldr	r3, [pc, #572]	@ (80067ac <checkDemoModCalisma+0x18d0>)
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	f083 0301 	eor.w	r3, r3, #1
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d028      	beq.n	80065ce <checkDemoModCalisma+0x16f2>
 800657c:	4b8c      	ldr	r3, [pc, #560]	@ (80067b0 <checkDemoModCalisma+0x18d4>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	f083 0301 	eor.w	r3, r3, #1
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d021      	beq.n	80065ce <checkDemoModCalisma+0x16f2>
 800658a:	4b8a      	ldr	r3, [pc, #552]	@ (80067b4 <checkDemoModCalisma+0x18d8>)
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	f083 0301 	eor.w	r3, r3, #1
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01a      	beq.n	80065ce <checkDemoModCalisma+0x16f2>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006598:	4b87      	ldr	r3, [pc, #540]	@ (80067b8 <checkDemoModCalisma+0x18dc>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	f083 0301 	eor.w	r3, r3, #1
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d013      	beq.n	80065ce <checkDemoModCalisma+0x16f2>
 80065a6:	4b85      	ldr	r3, [pc, #532]	@ (80067bc <checkDemoModCalisma+0x18e0>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	f083 0301 	eor.w	r3, r3, #1
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00c      	beq.n	80065ce <checkDemoModCalisma+0x16f2>
 80065b4:	4b82      	ldr	r3, [pc, #520]	@ (80067c0 <checkDemoModCalisma+0x18e4>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	f083 0301 	eor.w	r3, r3, #1
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d005      	beq.n	80065ce <checkDemoModCalisma+0x16f2>

					hataVar=0;
 80065c2:	4b79      	ldr	r3, [pc, #484]	@ (80067a8 <checkDemoModCalisma+0x18cc>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 80065c8:	2007      	movs	r0, #7
 80065ca:	f7fc feb7 	bl	800333c <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 80065ce:	4b76      	ldr	r3, [pc, #472]	@ (80067a8 <checkDemoModCalisma+0x18cc>)
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d02a      	beq.n	800662c <checkDemoModCalisma+0x1750>
 80065d6:	4b75      	ldr	r3, [pc, #468]	@ (80067ac <checkDemoModCalisma+0x18d0>)
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	f083 0301 	eor.w	r3, r3, #1
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d023      	beq.n	800662c <checkDemoModCalisma+0x1750>
 80065e4:	4b72      	ldr	r3, [pc, #456]	@ (80067b0 <checkDemoModCalisma+0x18d4>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01f      	beq.n	800662c <checkDemoModCalisma+0x1750>
 80065ec:	4b71      	ldr	r3, [pc, #452]	@ (80067b4 <checkDemoModCalisma+0x18d8>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	f083 0301 	eor.w	r3, r3, #1
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d018      	beq.n	800662c <checkDemoModCalisma+0x1750>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 80065fa:	4b6f      	ldr	r3, [pc, #444]	@ (80067b8 <checkDemoModCalisma+0x18dc>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	f083 0301 	eor.w	r3, r3, #1
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b00      	cmp	r3, #0
 8006606:	d011      	beq.n	800662c <checkDemoModCalisma+0x1750>
 8006608:	4b6c      	ldr	r3, [pc, #432]	@ (80067bc <checkDemoModCalisma+0x18e0>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	f083 0301 	eor.w	r3, r3, #1
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <checkDemoModCalisma+0x1750>
 8006616:	4b6a      	ldr	r3, [pc, #424]	@ (80067c0 <checkDemoModCalisma+0x18e4>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	f083 0301 	eor.w	r3, r3, #1
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <checkDemoModCalisma+0x1750>
				{
					EmnCerHataMakYukariCalis=1;
 8006624:	4b67      	ldr	r3, [pc, #412]	@ (80067c4 <checkDemoModCalisma+0x18e8>)
 8006626:	2201      	movs	r2, #1
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	e009      	b.n	8006640 <checkDemoModCalisma+0x1764>
				}
				else if(emniyetCercevesihatasi==0)
 800662c:	4b60      	ldr	r3, [pc, #384]	@ (80067b0 <checkDemoModCalisma+0x18d4>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	f083 0301 	eor.w	r3, r3, #1
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <checkDemoModCalisma+0x1764>
				{
					EmnCerHataMakYukariCalis=0;
 800663a:	4b62      	ldr	r3, [pc, #392]	@ (80067c4 <checkDemoModCalisma+0x18e8>)
 800663c:	2200      	movs	r2, #0
 800663e:	701a      	strb	r2, [r3, #0]

			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006640:	4b61      	ldr	r3, [pc, #388]	@ (80067c8 <checkDemoModCalisma+0x18ec>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b01      	cmp	r3, #1
 8006646:	f040 81d8 	bne.w	80069fa <checkDemoModCalisma+0x1b1e>
 800664a:	4b60      	ldr	r3, [pc, #384]	@ (80067cc <checkDemoModCalisma+0x18f0>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 81d3 	beq.w	80069fa <checkDemoModCalisma+0x1b1e>
 8006654:	4b5e      	ldr	r3, [pc, #376]	@ (80067d0 <checkDemoModCalisma+0x18f4>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	f040 81ce 	bne.w	80069fa <checkDemoModCalisma+0x1b1e>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800665e:	2102      	movs	r1, #2
 8006660:	485c      	ldr	r0, [pc, #368]	@ (80067d4 <checkDemoModCalisma+0x18f8>)
 8006662:	f003 faaf 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d11d      	bne.n	80066a8 <checkDemoModCalisma+0x17cc>
						&& (demoAsagiCalis==0)
 800666c:	4b5a      	ldr	r3, [pc, #360]	@ (80067d8 <checkDemoModCalisma+0x18fc>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	f083 0301 	eor.w	r3, r3, #1
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d016      	beq.n	80066a8 <checkDemoModCalisma+0x17cc>
						&& (demoDevYukari==0)
 800667a:	4b58      	ldr	r3, [pc, #352]	@ (80067dc <checkDemoModCalisma+0x1900>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	f083 0301 	eor.w	r3, r3, #1
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00f      	beq.n	80066a8 <checkDemoModCalisma+0x17cc>
						&& (demoDevAsagi==0)) {
 8006688:	4b55      	ldr	r3, [pc, #340]	@ (80067e0 <checkDemoModCalisma+0x1904>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	f083 0301 	eor.w	r3, r3, #1
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d008      	beq.n	80066a8 <checkDemoModCalisma+0x17cc>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006696:	2201      	movs	r2, #1
 8006698:	2104      	movs	r1, #4
 800669a:	4852      	ldr	r0, [pc, #328]	@ (80067e4 <checkDemoModCalisma+0x1908>)
 800669c:	f003 faa9 	bl	8009bf2 <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 80066a0:	4b51      	ldr	r3, [pc, #324]	@ (80067e8 <checkDemoModCalisma+0x190c>)
 80066a2:	2201      	movs	r2, #1
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	e00e      	b.n	80066c6 <checkDemoModCalisma+0x17ea>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80066a8:	2102      	movs	r1, #2
 80066aa:	484a      	ldr	r0, [pc, #296]	@ (80067d4 <checkDemoModCalisma+0x18f8>)
 80066ac:	f003 fa8a 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d107      	bne.n	80066c6 <checkDemoModCalisma+0x17ea>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80066b6:	2200      	movs	r2, #0
 80066b8:	2104      	movs	r1, #4
 80066ba:	484a      	ldr	r0, [pc, #296]	@ (80067e4 <checkDemoModCalisma+0x1908>)
 80066bc:	f003 fa99 	bl	8009bf2 <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 80066c0:	4b49      	ldr	r3, [pc, #292]	@ (80067e8 <checkDemoModCalisma+0x190c>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80066c6:	4b48      	ldr	r3, [pc, #288]	@ (80067e8 <checkDemoModCalisma+0x190c>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10b      	bne.n	80066e6 <checkDemoModCalisma+0x180a>
 80066ce:	4b43      	ldr	r3, [pc, #268]	@ (80067dc <checkDemoModCalisma+0x1900>)
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d107      	bne.n	80066e6 <checkDemoModCalisma+0x180a>
 80066d6:	4b42      	ldr	r3, [pc, #264]	@ (80067e0 <checkDemoModCalisma+0x1904>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d103      	bne.n	80066e6 <checkDemoModCalisma+0x180a>
 80066de:	4b3e      	ldr	r3, [pc, #248]	@ (80067d8 <checkDemoModCalisma+0x18fc>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00c      	beq.n	8006700 <checkDemoModCalisma+0x1824>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80066e6:	2201      	movs	r2, #1
 80066e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80066ec:	483d      	ldr	r0, [pc, #244]	@ (80067e4 <checkDemoModCalisma+0x1908>)
 80066ee:	f003 fa80 	bl	8009bf2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80066f2:	2201      	movs	r2, #1
 80066f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80066f8:	483a      	ldr	r0, [pc, #232]	@ (80067e4 <checkDemoModCalisma+0x1908>)
 80066fa:	f003 fa7a 	bl	8009bf2 <HAL_GPIO_WritePin>
 80066fe:	e00b      	b.n	8006718 <checkDemoModCalisma+0x183c>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006700:	2200      	movs	r2, #0
 8006702:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006706:	4837      	ldr	r0, [pc, #220]	@ (80067e4 <checkDemoModCalisma+0x1908>)
 8006708:	f003 fa73 	bl	8009bf2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800670c:	2200      	movs	r2, #0
 800670e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006712:	4834      	ldr	r0, [pc, #208]	@ (80067e4 <checkDemoModCalisma+0x1908>)
 8006714:	f003 fa6d 	bl	8009bf2 <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006718:	2102      	movs	r1, #2
 800671a:	482e      	ldr	r0, [pc, #184]	@ (80067d4 <checkDemoModCalisma+0x18f8>)
 800671c:	f003 fa52 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006720:	4603      	mov	r3, r0
 8006722:	2b01      	cmp	r3, #1
 8006724:	d10d      	bne.n	8006742 <checkDemoModCalisma+0x1866>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006726:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800672a:	482a      	ldr	r0, [pc, #168]	@ (80067d4 <checkDemoModCalisma+0x18f8>)
 800672c:	f003 fa4a 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d105      	bne.n	8006742 <checkDemoModCalisma+0x1866>
						&& (demoYukariCalis==0)
 8006736:	4b2c      	ldr	r3, [pc, #176]	@ (80067e8 <checkDemoModCalisma+0x190c>)
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	f083 0301 	eor.w	r3, r3, #1
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006742:	2102      	movs	r1, #2
 8006744:	4823      	ldr	r0, [pc, #140]	@ (80067d4 <checkDemoModCalisma+0x18f8>)
 8006746:	f003 fa3d 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800674a:	4603      	mov	r3, r0
 800674c:	2b01      	cmp	r3, #1
 800674e:	d14d      	bne.n	80067ec <checkDemoModCalisma+0x1910>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006750:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006754:	481f      	ldr	r0, [pc, #124]	@ (80067d4 <checkDemoModCalisma+0x18f8>)
 8006756:	f003 fa35 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d145      	bne.n	80067ec <checkDemoModCalisma+0x1910>
						&&(demoYukariCalis==0)
 8006760:	4b21      	ldr	r3, [pc, #132]	@ (80067e8 <checkDemoModCalisma+0x190c>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	f083 0301 	eor.w	r3, r3, #1
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d03e      	beq.n	80067ec <checkDemoModCalisma+0x1910>
						&&(demoAsagiCalis==0)
 800676e:	4b1a      	ldr	r3, [pc, #104]	@ (80067d8 <checkDemoModCalisma+0x18fc>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	f083 0301 	eor.w	r3, r3, #1
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d037      	beq.n	80067ec <checkDemoModCalisma+0x1910>
						&& (demoDevAsagi==0)) {
 800677c:	4b18      	ldr	r3, [pc, #96]	@ (80067e0 <checkDemoModCalisma+0x1904>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	f083 0301 	eor.w	r3, r3, #1
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d030      	beq.n	80067ec <checkDemoModCalisma+0x1910>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800678a:	2201      	movs	r2, #1
 800678c:	2120      	movs	r1, #32
 800678e:	4811      	ldr	r0, [pc, #68]	@ (80067d4 <checkDemoModCalisma+0x18f8>)
 8006790:	f003 fa2f 	bl	8009bf2 <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8006794:	4b11      	ldr	r3, [pc, #68]	@ (80067dc <checkDemoModCalisma+0x1900>)
 8006796:	2201      	movs	r2, #1
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	e02f      	b.n	80067fc <checkDemoModCalisma+0x1920>
 800679c:	20000df5 	.word	0x20000df5
 80067a0:	20000d78 	.word	0x20000d78
 80067a4:	20000d8c 	.word	0x20000d8c
 80067a8:	20000df4 	.word	0x20000df4
 80067ac:	20000def 	.word	0x20000def
 80067b0:	20000df0 	.word	0x20000df0
 80067b4:	20000dfd 	.word	0x20000dfd
 80067b8:	20000dfe 	.word	0x20000dfe
 80067bc:	20000dff 	.word	0x20000dff
 80067c0:	20000dee 	.word	0x20000dee
 80067c4:	20000e03 	.word	0x20000e03
 80067c8:	20000dbe 	.word	0x20000dbe
 80067cc:	20000df1 	.word	0x20000df1
 80067d0:	20000dbd 	.word	0x20000dbd
 80067d4:	40011000 	.word	0x40011000
 80067d8:	20000df8 	.word	0x20000df8
 80067dc:	20000df9 	.word	0x20000df9
 80067e0:	20000dfa 	.word	0x20000dfa
 80067e4:	40010c00 	.word	0x40010c00
 80067e8:	20000df7 	.word	0x20000df7
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80067ec:	2200      	movs	r2, #0
 80067ee:	2120      	movs	r1, #32
 80067f0:	48a1      	ldr	r0, [pc, #644]	@ (8006a78 <checkDemoModCalisma+0x1b9c>)
 80067f2:	f003 f9fe 	bl	8009bf2 <HAL_GPIO_WritePin>
					demoDevYukari=0;
 80067f6:	4ba1      	ldr	r3, [pc, #644]	@ (8006a7c <checkDemoModCalisma+0x1ba0>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80067fc:	2102      	movs	r1, #2
 80067fe:	489e      	ldr	r0, [pc, #632]	@ (8006a78 <checkDemoModCalisma+0x1b9c>)
 8006800:	f003 f9e0 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006804:	4603      	mov	r3, r0
 8006806:	2b01      	cmp	r3, #1
 8006808:	d125      	bne.n	8006856 <checkDemoModCalisma+0x197a>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800680a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800680e:	489a      	ldr	r0, [pc, #616]	@ (8006a78 <checkDemoModCalisma+0x1b9c>)
 8006810:	f003 f9d8 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d11d      	bne.n	8006856 <checkDemoModCalisma+0x197a>
						&&(demoYukariCalis==0)
 800681a:	4b99      	ldr	r3, [pc, #612]	@ (8006a80 <checkDemoModCalisma+0x1ba4>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	f083 0301 	eor.w	r3, r3, #1
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	d016      	beq.n	8006856 <checkDemoModCalisma+0x197a>
						&&(demoDevYukari==0)
 8006828:	4b94      	ldr	r3, [pc, #592]	@ (8006a7c <checkDemoModCalisma+0x1ba0>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	f083 0301 	eor.w	r3, r3, #1
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00f      	beq.n	8006856 <checkDemoModCalisma+0x197a>
						&& (demoAsagiCalis==0)) {
 8006836:	4b93      	ldr	r3, [pc, #588]	@ (8006a84 <checkDemoModCalisma+0x1ba8>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	f083 0301 	eor.w	r3, r3, #1
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <checkDemoModCalisma+0x197a>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006844:	2201      	movs	r2, #1
 8006846:	2110      	movs	r1, #16
 8006848:	488b      	ldr	r0, [pc, #556]	@ (8006a78 <checkDemoModCalisma+0x1b9c>)
 800684a:	f003 f9d2 	bl	8009bf2 <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 800684e:	4b8e      	ldr	r3, [pc, #568]	@ (8006a88 <checkDemoModCalisma+0x1bac>)
 8006850:	2201      	movs	r2, #1
 8006852:	701a      	strb	r2, [r3, #0]
 8006854:	e007      	b.n	8006866 <checkDemoModCalisma+0x198a>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006856:	2200      	movs	r2, #0
 8006858:	2110      	movs	r1, #16
 800685a:	4887      	ldr	r0, [pc, #540]	@ (8006a78 <checkDemoModCalisma+0x1b9c>)
 800685c:	f003 f9c9 	bl	8009bf2 <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8006860:	4b89      	ldr	r3, [pc, #548]	@ (8006a88 <checkDemoModCalisma+0x1bac>)
 8006862:	2200      	movs	r2, #0
 8006864:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006866:	2104      	movs	r1, #4
 8006868:	4883      	ldr	r0, [pc, #524]	@ (8006a78 <checkDemoModCalisma+0x1b9c>)
 800686a:	f003 f9ab 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d125      	bne.n	80068c0 <checkDemoModCalisma+0x19e4>
						&& (demoYukariCalis==0)
 8006874:	4b82      	ldr	r3, [pc, #520]	@ (8006a80 <checkDemoModCalisma+0x1ba4>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	f083 0301 	eor.w	r3, r3, #1
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d01e      	beq.n	80068c0 <checkDemoModCalisma+0x19e4>
						&& (demoDevAsagi==0)
 8006882:	4b81      	ldr	r3, [pc, #516]	@ (8006a88 <checkDemoModCalisma+0x1bac>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	f083 0301 	eor.w	r3, r3, #1
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	d017      	beq.n	80068c0 <checkDemoModCalisma+0x19e4>
						&& (demoDevYukari==0)) {
 8006890:	4b7a      	ldr	r3, [pc, #488]	@ (8006a7c <checkDemoModCalisma+0x1ba0>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	f083 0301 	eor.w	r3, r3, #1
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d010      	beq.n	80068c0 <checkDemoModCalisma+0x19e4>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800689e:	2201      	movs	r2, #1
 80068a0:	2102      	movs	r1, #2
 80068a2:	487a      	ldr	r0, [pc, #488]	@ (8006a8c <checkDemoModCalisma+0x1bb0>)
 80068a4:	f003 f9a5 	bl	8009bf2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80068a8:	2201      	movs	r2, #1
 80068aa:	2101      	movs	r1, #1
 80068ac:	4877      	ldr	r0, [pc, #476]	@ (8006a8c <checkDemoModCalisma+0x1bb0>)
 80068ae:	f003 f9a0 	bl	8009bf2 <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 80068b2:	4b74      	ldr	r3, [pc, #464]	@ (8006a84 <checkDemoModCalisma+0x1ba8>)
 80068b4:	2201      	movs	r2, #1
 80068b6:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 80068b8:	4b75      	ldr	r3, [pc, #468]	@ (8006a90 <checkDemoModCalisma+0x1bb4>)
 80068ba:	2201      	movs	r2, #1
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	e013      	b.n	80068e8 <checkDemoModCalisma+0x1a0c>
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80068c0:	2104      	movs	r1, #4
 80068c2:	486d      	ldr	r0, [pc, #436]	@ (8006a78 <checkDemoModCalisma+0x1b9c>)
 80068c4:	f003 f97e 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d10c      	bne.n	80068e8 <checkDemoModCalisma+0x1a0c>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80068ce:	2200      	movs	r2, #0
 80068d0:	2102      	movs	r1, #2
 80068d2:	486e      	ldr	r0, [pc, #440]	@ (8006a8c <checkDemoModCalisma+0x1bb0>)
 80068d4:	f003 f98d 	bl	8009bf2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80068d8:	2200      	movs	r2, #0
 80068da:	2101      	movs	r1, #1
 80068dc:	486b      	ldr	r0, [pc, #428]	@ (8006a8c <checkDemoModCalisma+0x1bb0>)
 80068de:	f003 f988 	bl	8009bf2 <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 80068e2:	4b68      	ldr	r3, [pc, #416]	@ (8006a84 <checkDemoModCalisma+0x1ba8>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80068e8:	2104      	movs	r1, #4
 80068ea:	4863      	ldr	r0, [pc, #396]	@ (8006a78 <checkDemoModCalisma+0x1b9c>)
 80068ec:	f003 f96a 	bl	8009bc4 <HAL_GPIO_ReadPin>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d10d      	bne.n	8006912 <checkDemoModCalisma+0x1a36>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80068f6:	2201      	movs	r2, #1
 80068f8:	2180      	movs	r1, #128	@ 0x80
 80068fa:	4866      	ldr	r0, [pc, #408]	@ (8006a94 <checkDemoModCalisma+0x1bb8>)
 80068fc:	f003 f979 	bl	8009bf2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006900:	2201      	movs	r2, #1
 8006902:	2120      	movs	r1, #32
 8006904:	4863      	ldr	r0, [pc, #396]	@ (8006a94 <checkDemoModCalisma+0x1bb8>)
 8006906:	f003 f974 	bl	8009bf2 <HAL_GPIO_WritePin>
					timer3 = millis;
 800690a:	4b63      	ldr	r3, [pc, #396]	@ (8006a98 <checkDemoModCalisma+0x1bbc>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a63      	ldr	r2, [pc, #396]	@ (8006a9c <checkDemoModCalisma+0x1bc0>)
 8006910:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8006912:	4b61      	ldr	r3, [pc, #388]	@ (8006a98 <checkDemoModCalisma+0x1bbc>)
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	4b61      	ldr	r3, [pc, #388]	@ (8006a9c <checkDemoModCalisma+0x1bc0>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b04      	cmp	r3, #4
 800691e:	d909      	bls.n	8006934 <checkDemoModCalisma+0x1a58>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006920:	2200      	movs	r2, #0
 8006922:	2180      	movs	r1, #128	@ 0x80
 8006924:	485b      	ldr	r0, [pc, #364]	@ (8006a94 <checkDemoModCalisma+0x1bb8>)
 8006926:	f003 f964 	bl	8009bf2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800692a:	2200      	movs	r2, #0
 800692c:	2120      	movs	r1, #32
 800692e:	4859      	ldr	r0, [pc, #356]	@ (8006a94 <checkDemoModCalisma+0x1bb8>)
 8006930:	f003 f95f 	bl	8009bf2 <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006934:	2102      	movs	r1, #2
 8006936:	4850      	ldr	r0, [pc, #320]	@ (8006a78 <checkDemoModCalisma+0x1b9c>)
 8006938:	f003 f944 	bl	8009bc4 <HAL_GPIO_ReadPin>
 800693c:	4603      	mov	r3, r0
 800693e:	2b01      	cmp	r3, #1
 8006940:	d108      	bne.n	8006954 <checkDemoModCalisma+0x1a78>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006942:	2201      	movs	r2, #1
 8006944:	2140      	movs	r1, #64	@ 0x40
 8006946:	4853      	ldr	r0, [pc, #332]	@ (8006a94 <checkDemoModCalisma+0x1bb8>)
 8006948:	f003 f953 	bl	8009bf2 <HAL_GPIO_WritePin>
					timer3 = millis;
 800694c:	4b52      	ldr	r3, [pc, #328]	@ (8006a98 <checkDemoModCalisma+0x1bbc>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a52      	ldr	r2, [pc, #328]	@ (8006a9c <checkDemoModCalisma+0x1bc0>)
 8006952:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8006954:	4b50      	ldr	r3, [pc, #320]	@ (8006a98 <checkDemoModCalisma+0x1bbc>)
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	4b50      	ldr	r3, [pc, #320]	@ (8006a9c <checkDemoModCalisma+0x1bc0>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b04      	cmp	r3, #4
 8006960:	d904      	bls.n	800696c <checkDemoModCalisma+0x1a90>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006962:	2200      	movs	r2, #0
 8006964:	2140      	movs	r1, #64	@ 0x40
 8006966:	484b      	ldr	r0, [pc, #300]	@ (8006a94 <checkDemoModCalisma+0x1bb8>)
 8006968:	f003 f943 	bl	8009bf2 <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 800696c:	4b44      	ldr	r3, [pc, #272]	@ (8006a80 <checkDemoModCalisma+0x1ba4>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d024      	beq.n	80069be <checkDemoModCalisma+0x1ae2>
 8006974:	4b46      	ldr	r3, [pc, #280]	@ (8006a90 <checkDemoModCalisma+0x1bb4>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d020      	beq.n	80069be <checkDemoModCalisma+0x1ae2>

					calismaSayisiDemo++;
 800697c:	4b48      	ldr	r3, [pc, #288]	@ (8006aa0 <checkDemoModCalisma+0x1bc4>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	3301      	adds	r3, #1
 8006982:	b2da      	uxtb	r2, r3
 8006984:	4b46      	ldr	r3, [pc, #280]	@ (8006aa0 <checkDemoModCalisma+0x1bc4>)
 8006986:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8006988:	4b46      	ldr	r3, [pc, #280]	@ (8006aa4 <checkDemoModCalisma+0x1bc8>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2bff      	cmp	r3, #255	@ 0xff
 800698e:	d108      	bne.n	80069a2 <checkDemoModCalisma+0x1ac6>
							calismaSayisi = 0;
 8006990:	4b44      	ldr	r3, [pc, #272]	@ (8006aa4 <checkDemoModCalisma+0x1bc8>)
 8006992:	2200      	movs	r2, #0
 8006994:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 8006996:	4b44      	ldr	r3, [pc, #272]	@ (8006aa8 <checkDemoModCalisma+0x1bcc>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	3301      	adds	r3, #1
 800699c:	b2da      	uxtb	r2, r3
 800699e:	4b42      	ldr	r3, [pc, #264]	@ (8006aa8 <checkDemoModCalisma+0x1bcc>)
 80069a0:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 80069a2:	4b3f      	ldr	r3, [pc, #252]	@ (8006aa0 <checkDemoModCalisma+0x1bc4>)
 80069a4:	781a      	ldrb	r2, [r3, #0]
 80069a6:	4b41      	ldr	r3, [pc, #260]	@ (8006aac <checkDemoModCalisma+0x1bd0>)
 80069a8:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 80069aa:	4b41      	ldr	r3, [pc, #260]	@ (8006ab0 <checkDemoModCalisma+0x1bd4>)
 80069ac:	781a      	ldrb	r2, [r3, #0]
 80069ae:	4b3f      	ldr	r3, [pc, #252]	@ (8006aac <checkDemoModCalisma+0x1bd0>)
 80069b0:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 80069b2:	4b40      	ldr	r3, [pc, #256]	@ (8006ab4 <checkDemoModCalisma+0x1bd8>)
 80069b4:	2201      	movs	r2, #1
 80069b6:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 80069b8:	4b35      	ldr	r3, [pc, #212]	@ (8006a90 <checkDemoModCalisma+0x1bb4>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 80069be:	4b3e      	ldr	r3, [pc, #248]	@ (8006ab8 <checkDemoModCalisma+0x1bdc>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d156      	bne.n	8006a74 <checkDemoModCalisma+0x1b98>
					lcd_print(2,1,"Cycle     ");
 80069c6:	4a3d      	ldr	r2, [pc, #244]	@ (8006abc <checkDemoModCalisma+0x1be0>)
 80069c8:	2101      	movs	r1, #1
 80069ca:	2002      	movs	r0, #2
 80069cc:	f001 ff9f 	bl	800890e <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 80069d0:	4a3b      	ldr	r2, [pc, #236]	@ (8006ac0 <checkDemoModCalisma+0x1be4>)
 80069d2:	2101      	movs	r1, #1
 80069d4:	2001      	movs	r0, #1
 80069d6:	f001 ff9a 	bl	800890e <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 80069da:	4b31      	ldr	r3, [pc, #196]	@ (8006aa0 <checkDemoModCalisma+0x1bc4>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	220a      	movs	r2, #10
 80069e0:	4938      	ldr	r1, [pc, #224]	@ (8006ac4 <checkDemoModCalisma+0x1be8>)
 80069e2:	4618      	mov	r0, r3
 80069e4:	f005 fc90 	bl	800c308 <itoa>
					lcd_print(2,11,snum);
 80069e8:	4a36      	ldr	r2, [pc, #216]	@ (8006ac4 <checkDemoModCalisma+0x1be8>)
 80069ea:	210b      	movs	r1, #11
 80069ec:	2002      	movs	r0, #2
 80069ee:	f001 ff8e 	bl	800890e <lcd_print>
					mesajYazildi=1;
 80069f2:	4b35      	ldr	r3, [pc, #212]	@ (8006ac8 <checkDemoModCalisma+0x1bec>)
 80069f4:	2201      	movs	r2, #1
 80069f6:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 80069f8:	e03c      	b.n	8006a74 <checkDemoModCalisma+0x1b98>
				}
			} else if(demoMode==1 || menuGiris==1) {
 80069fa:	4b34      	ldr	r3, [pc, #208]	@ (8006acc <checkDemoModCalisma+0x1bf0>)
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d003      	beq.n	8006a0a <checkDemoModCalisma+0x1b2e>
 8006a02:	4b2d      	ldr	r3, [pc, #180]	@ (8006ab8 <checkDemoModCalisma+0x1bdc>)
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d134      	bne.n	8006a74 <checkDemoModCalisma+0x1b98>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006a10:	481e      	ldr	r0, [pc, #120]	@ (8006a8c <checkDemoModCalisma+0x1bb0>)
 8006a12:	f003 f8ee 	bl	8009bf2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006a16:	2200      	movs	r2, #0
 8006a18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006a1c:	481b      	ldr	r0, [pc, #108]	@ (8006a8c <checkDemoModCalisma+0x1bb0>)
 8006a1e:	f003 f8e8 	bl	8009bf2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006a22:	2200      	movs	r2, #0
 8006a24:	2104      	movs	r1, #4
 8006a26:	4819      	ldr	r0, [pc, #100]	@ (8006a8c <checkDemoModCalisma+0x1bb0>)
 8006a28:	f003 f8e3 	bl	8009bf2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2102      	movs	r1, #2
 8006a30:	4816      	ldr	r0, [pc, #88]	@ (8006a8c <checkDemoModCalisma+0x1bb0>)
 8006a32:	f003 f8de 	bl	8009bf2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006a36:	2200      	movs	r2, #0
 8006a38:	2101      	movs	r1, #1
 8006a3a:	4814      	ldr	r0, [pc, #80]	@ (8006a8c <checkDemoModCalisma+0x1bb0>)
 8006a3c:	f003 f8d9 	bl	8009bf2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006a40:	2200      	movs	r2, #0
 8006a42:	2120      	movs	r1, #32
 8006a44:	480c      	ldr	r0, [pc, #48]	@ (8006a78 <checkDemoModCalisma+0x1b9c>)
 8006a46:	f003 f8d4 	bl	8009bf2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	2110      	movs	r1, #16
 8006a4e:	480a      	ldr	r0, [pc, #40]	@ (8006a78 <checkDemoModCalisma+0x1b9c>)
 8006a50:	f003 f8cf 	bl	8009bf2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006a54:	2200      	movs	r2, #0
 8006a56:	2180      	movs	r1, #128	@ 0x80
 8006a58:	480e      	ldr	r0, [pc, #56]	@ (8006a94 <checkDemoModCalisma+0x1bb8>)
 8006a5a:	f003 f8ca 	bl	8009bf2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006a5e:	2200      	movs	r2, #0
 8006a60:	2140      	movs	r1, #64	@ 0x40
 8006a62:	480c      	ldr	r0, [pc, #48]	@ (8006a94 <checkDemoModCalisma+0x1bb8>)
 8006a64:	f003 f8c5 	bl	8009bf2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2120      	movs	r1, #32
 8006a6c:	4809      	ldr	r0, [pc, #36]	@ (8006a94 <checkDemoModCalisma+0x1bb8>)
 8006a6e:	f003 f8c0 	bl	8009bf2 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8006a72:	e7ff      	b.n	8006a74 <checkDemoModCalisma+0x1b98>
 8006a74:	bf00      	nop
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	40011000 	.word	0x40011000
 8006a7c:	20000df9 	.word	0x20000df9
 8006a80:	20000df7 	.word	0x20000df7
 8006a84:	20000df8 	.word	0x20000df8
 8006a88:	20000dfa 	.word	0x20000dfa
 8006a8c:	40010c00 	.word	0x40010c00
 8006a90:	20000dde 	.word	0x20000dde
 8006a94:	40010800 	.word	0x40010800
 8006a98:	20000d78 	.word	0x20000d78
 8006a9c:	20000d88 	.word	0x20000d88
 8006aa0:	20000d99 	.word	0x20000d99
 8006aa4:	20000d98 	.word	0x20000d98
 8006aa8:	20000d9a 	.word	0x20000d9a
 8006aac:	20000d00 	.word	0x20000d00
 8006ab0:	20000d9b 	.word	0x20000d9b
 8006ab4:	20000dcc 	.word	0x20000dcc
 8006ab8:	20000dbd 	.word	0x20000dbd
 8006abc:	0800c45c 	.word	0x0800c45c
 8006ac0:	0800c468 	.word	0x0800c468
 8006ac4:	20000d70 	.word	0x20000d70
 8006ac8:	20000dd4 	.word	0x20000dd4
 8006acc:	20000dbe 	.word	0x20000dbe

08006ad0 <mainLoop>:

void mainLoop() {
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 8006ad4:	f7fc fc86 	bl	80033e4 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006ad8:	2101      	movs	r1, #1
 8006ada:	488b      	ldr	r0, [pc, #556]	@ (8006d08 <mainLoop+0x238>)
 8006adc:	f003 f872 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d136      	bne.n	8006b54 <mainLoop+0x84>
 8006ae6:	2108      	movs	r1, #8
 8006ae8:	4888      	ldr	r0, [pc, #544]	@ (8006d0c <mainLoop+0x23c>)
 8006aea:	f003 f86b 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d12f      	bne.n	8006b54 <mainLoop+0x84>
 8006af4:	2102      	movs	r1, #2
 8006af6:	4884      	ldr	r0, [pc, #528]	@ (8006d08 <mainLoop+0x238>)
 8006af8:	f003 f864 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d128      	bne.n	8006b54 <mainLoop+0x84>
 8006b02:	2104      	movs	r1, #4
 8006b04:	4880      	ldr	r0, [pc, #512]	@ (8006d08 <mainLoop+0x238>)
 8006b06:	f003 f85d 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d121      	bne.n	8006b54 <mainLoop+0x84>
 8006b10:	2108      	movs	r1, #8
 8006b12:	487d      	ldr	r0, [pc, #500]	@ (8006d08 <mainLoop+0x238>)
 8006b14:	f003 f856 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d11a      	bne.n	8006b54 <mainLoop+0x84>
 8006b1e:	2180      	movs	r1, #128	@ 0x80
 8006b20:	487a      	ldr	r0, [pc, #488]	@ (8006d0c <mainLoop+0x23c>)
 8006b22:	f003 f84f 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d113      	bne.n	8006b54 <mainLoop+0x84>
 8006b2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b30:	4876      	ldr	r0, [pc, #472]	@ (8006d0c <mainLoop+0x23c>)
 8006b32:	f003 f847 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d10b      	bne.n	8006b54 <mainLoop+0x84>
 8006b3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006b40:	4872      	ldr	r0, [pc, #456]	@ (8006d0c <mainLoop+0x23c>)
 8006b42:	f003 f83f 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d103      	bne.n	8006b54 <mainLoop+0x84>
			butonKontrol=0;
 8006b4c:	4b70      	ldr	r3, [pc, #448]	@ (8006d10 <mainLoop+0x240>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	e003      	b.n	8006b5c <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 8006b54:	4b6f      	ldr	r3, [pc, #444]	@ (8006d14 <mainLoop+0x244>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a6f      	ldr	r2, [pc, #444]	@ (8006d18 <mainLoop+0x248>)
 8006b5a:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8006b5c:	f7fc fcf4 	bl	8003548 <buttonCheck>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d103      	bne.n	8006b6e <mainLoop+0x9e>
			backLightTimer = millis;
 8006b66:	4b6b      	ldr	r3, [pc, #428]	@ (8006d14 <mainLoop+0x244>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a6b      	ldr	r2, [pc, #428]	@ (8006d18 <mainLoop+0x248>)
 8006b6c:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz == 1) {
 8006b6e:	4b6b      	ldr	r3, [pc, #428]	@ (8006d1c <mainLoop+0x24c>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d005      	beq.n	8006b82 <mainLoop+0xb2>
			hafizaYaz = 0;
 8006b76:	4b69      	ldr	r3, [pc, #420]	@ (8006d1c <mainLoop+0x24c>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	701a      	strb	r2, [r3, #0]
			saveEEPROM(1);
 8006b7c:	2001      	movs	r0, #1
 8006b7e:	f7f9 fd79 	bl	8000674 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006b82:	4b67      	ldr	r3, [pc, #412]	@ (8006d20 <mainLoop+0x250>)
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	f083 0301 	eor.w	r3, r3, #1
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d043      	beq.n	8006c18 <mainLoop+0x148>
 8006b90:	4864      	ldr	r0, [pc, #400]	@ (8006d24 <mainLoop+0x254>)
 8006b92:	f003 fe33 	bl	800a7fc <HAL_I2C_GetState>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b20      	cmp	r3, #32
 8006b9a:	d13d      	bne.n	8006c18 <mainLoop+0x148>
		  if(ilkOkuma==0) {
 8006b9c:	4b62      	ldr	r3, [pc, #392]	@ (8006d28 <mainLoop+0x258>)
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	f083 0301 	eor.w	r3, r3, #1
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d028      	beq.n	8006bfc <mainLoop+0x12c>
			  lcd_print(1, 1, eepromTextGN);
 8006baa:	4a60      	ldr	r2, [pc, #384]	@ (8006d2c <mainLoop+0x25c>)
 8006bac:	2101      	movs	r1, #1
 8006bae:	2001      	movs	r0, #1
 8006bb0:	f001 fead 	bl	800890e <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8006bb4:	4a5e      	ldr	r2, [pc, #376]	@ (8006d30 <mainLoop+0x260>)
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	2002      	movs	r0, #2
 8006bba:	f001 fea8 	bl	800890e <lcd_print>
			  HAL_Delay(1000);
 8006bbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006bc2:	f002 fb71 	bl	80092a8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006bc6:	bf00      	nop
 8006bc8:	4856      	ldr	r0, [pc, #344]	@ (8006d24 <mainLoop+0x254>)
 8006bca:	f003 fe24 	bl	800a816 <HAL_I2C_GetError>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d0f9      	beq.n	8006bc8 <mainLoop+0xf8>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006bd4:	e003      	b.n	8006bde <mainLoop+0x10e>
				  HAL_Delay(1000);
 8006bd6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006bda:	f002 fb65 	bl	80092a8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006bde:	4851      	ldr	r0, [pc, #324]	@ (8006d24 <mainLoop+0x254>)
 8006be0:	f003 fe0c 	bl	800a7fc <HAL_I2C_GetState>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b20      	cmp	r3, #32
 8006be8:	d1f5      	bne.n	8006bd6 <mainLoop+0x106>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8006bea:	4a52      	ldr	r2, [pc, #328]	@ (8006d34 <mainLoop+0x264>)
 8006bec:	2101      	movs	r1, #1
 8006bee:	2002      	movs	r0, #2
 8006bf0:	f001 fe8d 	bl	800890e <lcd_print>

			  ilkOkuma=1;
 8006bf4:	4b4c      	ldr	r3, [pc, #304]	@ (8006d28 <mainLoop+0x258>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	701a      	strb	r2, [r3, #0]
 8006bfa:	e006      	b.n	8006c0a <mainLoop+0x13a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8006bfc:	4a4e      	ldr	r2, [pc, #312]	@ (8006d38 <mainLoop+0x268>)
 8006bfe:	2101      	movs	r1, #1
 8006c00:	2002      	movs	r0, #2
 8006c02:	f001 fe84 	bl	800890e <lcd_print>
			  lcd_clear();
 8006c06:	f001 fe97 	bl	8008938 <lcd_clear>
		  }

		  lcd_clear();
 8006c0a:	f001 fe95 	bl	8008938 <lcd_clear>

		  eepromKontrol();
 8006c0e:	f7f9 fb11 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006c12:	4b43      	ldr	r3, [pc, #268]	@ (8006d20 <mainLoop+0x250>)
 8006c14:	2201      	movs	r2, #1
 8006c16:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006c18:	4b48      	ldr	r3, [pc, #288]	@ (8006d3c <mainLoop+0x26c>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d11c      	bne.n	8006c5a <mainLoop+0x18a>
 8006c20:	4b47      	ldr	r3, [pc, #284]	@ (8006d40 <mainLoop+0x270>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	f083 0301 	eor.w	r3, r3, #1
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d015      	beq.n	8006c5a <mainLoop+0x18a>
 8006c2e:	4b45      	ldr	r3, [pc, #276]	@ (8006d44 <mainLoop+0x274>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d111      	bne.n	8006c5a <mainLoop+0x18a>
			lcd_clear();
 8006c36:	f001 fe7f 	bl	8008938 <lcd_clear>
			HAL_Delay(10);
 8006c3a:	200a      	movs	r0, #10
 8006c3c:	f002 fb34 	bl	80092a8 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8006c40:	4a41      	ldr	r2, [pc, #260]	@ (8006d48 <mainLoop+0x278>)
 8006c42:	2101      	movs	r1, #1
 8006c44:	2001      	movs	r0, #1
 8006c46:	f001 fe62 	bl	800890e <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8006c4a:	4a40      	ldr	r2, [pc, #256]	@ (8006d4c <mainLoop+0x27c>)
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	2002      	movs	r0, #2
 8006c50:	f001 fe5d 	bl	800890e <lcd_print>
			mesajYazildi=1;
 8006c54:	4b3a      	ldr	r3, [pc, #232]	@ (8006d40 <mainLoop+0x270>)
 8006c56:	2201      	movs	r2, #1
 8006c58:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006c5a:	4b38      	ldr	r3, [pc, #224]	@ (8006d3c <mainLoop+0x26c>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d112      	bne.n	8006c88 <mainLoop+0x1b8>
 8006c62:	2102      	movs	r1, #2
 8006c64:	4828      	ldr	r0, [pc, #160]	@ (8006d08 <mainLoop+0x238>)
 8006c66:	f002 ffad 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d10b      	bne.n	8006c88 <mainLoop+0x1b8>
 8006c70:	2104      	movs	r1, #4
 8006c72:	4825      	ldr	r0, [pc, #148]	@ (8006d08 <mainLoop+0x238>)
 8006c74:	f002 ffa6 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d104      	bne.n	8006c88 <mainLoop+0x1b8>
			menuGiris=1;
 8006c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8006d3c <mainLoop+0x26c>)
 8006c80:	2201      	movs	r2, #1
 8006c82:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006c84:	f001 fe58 	bl	8008938 <lcd_clear>
		}

		if(menuGiris==1) {
 8006c88:	4b2c      	ldr	r3, [pc, #176]	@ (8006d3c <mainLoop+0x26c>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <mainLoop+0x1c4>
			menu();
 8006c90:	f7f9 ffba 	bl	8000c08 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006c94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006c98:	481c      	ldr	r0, [pc, #112]	@ (8006d0c <mainLoop+0x23c>)
 8006c9a:	f002 ffc2 	bl	8009c22 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006c9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006ca2:	482b      	ldr	r0, [pc, #172]	@ (8006d50 <mainLoop+0x280>)
 8006ca4:	f002 ff8e 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <mainLoop+0x1f4>
 8006cae:	4b29      	ldr	r3, [pc, #164]	@ (8006d54 <mainLoop+0x284>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	f083 0301 	eor.w	r3, r3, #1
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <mainLoop+0x1f4>
			stopVar=1;
 8006cbc:	4b26      	ldr	r3, [pc, #152]	@ (8006d58 <mainLoop+0x288>)
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	e002      	b.n	8006cca <mainLoop+0x1fa>
		} else {
			stopVar=0;
 8006cc4:	4b24      	ldr	r3, [pc, #144]	@ (8006d58 <mainLoop+0x288>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 8006cca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006cce:	4820      	ldr	r0, [pc, #128]	@ (8006d50 <mainLoop+0x280>)
 8006cd0:	f002 ff78 	bl	8009bc4 <HAL_GPIO_ReadPin>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d107      	bne.n	8006cea <mainLoop+0x21a>
 8006cda:	4b20      	ldr	r3, [pc, #128]	@ (8006d5c <mainLoop+0x28c>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <mainLoop+0x21a>
			EmnStopVar=1;
 8006ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8006d60 <mainLoop+0x290>)
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	701a      	strb	r2, [r3, #0]
 8006ce8:	e002      	b.n	8006cf0 <mainLoop+0x220>
		} else {
			EmnStopVar=0;
 8006cea:	4b1d      	ldr	r3, [pc, #116]	@ (8006d60 <mainLoop+0x290>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006cf0:	f7fc fc5e 	bl	80035b0 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006cf4:	f7fc fc90 	bl	8003618 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006cf8:	f7fc fcd4 	bl	80036a4 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006cfc:	f7fc fd24 	bl	8003748 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006d00:	f7fe f8ec 	bl	8004edc <checkDemoModCalisma>
		checkLCDBacklight();
 8006d04:	e6e6      	b.n	8006ad4 <mainLoop+0x4>
 8006d06:	bf00      	nop
 8006d08:	40010800 	.word	0x40010800
 8006d0c:	40011000 	.word	0x40011000
 8006d10:	20000dcf 	.word	0x20000dcf
 8006d14:	20000d78 	.word	0x20000d78
 8006d18:	20000d94 	.word	0x20000d94
 8006d1c:	20000dcc 	.word	0x20000dcc
 8006d20:	20000dcd 	.word	0x20000dcd
 8006d24:	2000140c 	.word	0x2000140c
 8006d28:	20000dce 	.word	0x20000dce
 8006d2c:	2000010c 	.word	0x2000010c
 8006d30:	20001394 	.word	0x20001394
 8006d34:	200013a8 	.word	0x200013a8
 8006d38:	200013bc 	.word	0x200013bc
 8006d3c:	20000dbd 	.word	0x20000dbd
 8006d40:	20000dd4 	.word	0x20000dd4
 8006d44:	20000dbe 	.word	0x20000dbe
 8006d48:	20000058 	.word	0x20000058
 8006d4c:	2000006c 	.word	0x2000006c
 8006d50:	40010c00 	.word	0x40010c00
 8006d54:	20000df4 	.word	0x20000df4
 8006d58:	20000df1 	.word	0x20000df1
 8006d5c:	20000e03 	.word	0x20000e03
 8006d60:	20000e04 	.word	0x20000e04

08006d64 <loadMenuTexts>:
char degerKaydedildiText[17];

//Error Code:
char errorCodeText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8006d64:	b5b0      	push	{r4, r5, r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8006d6e:	79fb      	ldrb	r3, [r7, #7]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f040 846b 	bne.w	800764c <loadMenuTexts+0x8e8>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8006d76:	4ac7      	ldr	r2, [pc, #796]	@ (8007094 <loadMenuTexts+0x330>)
 8006d78:	4bc7      	ldr	r3, [pc, #796]	@ (8007098 <loadMenuTexts+0x334>)
 8006d7a:	4614      	mov	r4, r2
 8006d7c:	461d      	mov	r5, r3
 8006d7e:	6828      	ldr	r0, [r5, #0]
 8006d80:	6869      	ldr	r1, [r5, #4]
 8006d82:	68aa      	ldr	r2, [r5, #8]
 8006d84:	68eb      	ldr	r3, [r5, #12]
 8006d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d88:	7c2b      	ldrb	r3, [r5, #16]
 8006d8a:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8006d8c:	4ac3      	ldr	r2, [pc, #780]	@ (800709c <loadMenuTexts+0x338>)
 8006d8e:	4bc4      	ldr	r3, [pc, #784]	@ (80070a0 <loadMenuTexts+0x33c>)
 8006d90:	4614      	mov	r4, r2
 8006d92:	461d      	mov	r5, r3
 8006d94:	6828      	ldr	r0, [r5, #0]
 8006d96:	6869      	ldr	r1, [r5, #4]
 8006d98:	68aa      	ldr	r2, [r5, #8]
 8006d9a:	68eb      	ldr	r3, [r5, #12]
 8006d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d9e:	7c2b      	ldrb	r3, [r5, #16]
 8006da0:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8006da2:	4ac0      	ldr	r2, [pc, #768]	@ (80070a4 <loadMenuTexts+0x340>)
 8006da4:	4bc0      	ldr	r3, [pc, #768]	@ (80070a8 <loadMenuTexts+0x344>)
 8006da6:	4614      	mov	r4, r2
 8006da8:	461d      	mov	r5, r3
 8006daa:	6828      	ldr	r0, [r5, #0]
 8006dac:	6869      	ldr	r1, [r5, #4]
 8006dae:	68aa      	ldr	r2, [r5, #8]
 8006db0:	68eb      	ldr	r3, [r5, #12]
 8006db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006db4:	7c2b      	ldrb	r3, [r5, #16]
 8006db6:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8006db8:	4abc      	ldr	r2, [pc, #752]	@ (80070ac <loadMenuTexts+0x348>)
 8006dba:	4bbd      	ldr	r3, [pc, #756]	@ (80070b0 <loadMenuTexts+0x34c>)
 8006dbc:	4614      	mov	r4, r2
 8006dbe:	461d      	mov	r5, r3
 8006dc0:	6828      	ldr	r0, [r5, #0]
 8006dc2:	6869      	ldr	r1, [r5, #4]
 8006dc4:	68aa      	ldr	r2, [r5, #8]
 8006dc6:	68eb      	ldr	r3, [r5, #12]
 8006dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dca:	7c2b      	ldrb	r3, [r5, #16]
 8006dcc:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8006dce:	4ab9      	ldr	r2, [pc, #740]	@ (80070b4 <loadMenuTexts+0x350>)
 8006dd0:	4bb9      	ldr	r3, [pc, #740]	@ (80070b8 <loadMenuTexts+0x354>)
 8006dd2:	4614      	mov	r4, r2
 8006dd4:	461d      	mov	r5, r3
 8006dd6:	6828      	ldr	r0, [r5, #0]
 8006dd8:	6869      	ldr	r1, [r5, #4]
 8006dda:	68aa      	ldr	r2, [r5, #8]
 8006ddc:	68eb      	ldr	r3, [r5, #12]
 8006dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006de0:	7c2b      	ldrb	r3, [r5, #16]
 8006de2:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8006de4:	4ab5      	ldr	r2, [pc, #724]	@ (80070bc <loadMenuTexts+0x358>)
 8006de6:	4bb6      	ldr	r3, [pc, #728]	@ (80070c0 <loadMenuTexts+0x35c>)
 8006de8:	4614      	mov	r4, r2
 8006dea:	461d      	mov	r5, r3
 8006dec:	6828      	ldr	r0, [r5, #0]
 8006dee:	6869      	ldr	r1, [r5, #4]
 8006df0:	68aa      	ldr	r2, [r5, #8]
 8006df2:	68eb      	ldr	r3, [r5, #12]
 8006df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006df6:	7c2b      	ldrb	r3, [r5, #16]
 8006df8:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 8006dfa:	4ab2      	ldr	r2, [pc, #712]	@ (80070c4 <loadMenuTexts+0x360>)
 8006dfc:	4bb2      	ldr	r3, [pc, #712]	@ (80070c8 <loadMenuTexts+0x364>)
 8006dfe:	4614      	mov	r4, r2
 8006e00:	461d      	mov	r5, r3
 8006e02:	6828      	ldr	r0, [r5, #0]
 8006e04:	6869      	ldr	r1, [r5, #4]
 8006e06:	68aa      	ldr	r2, [r5, #8]
 8006e08:	68eb      	ldr	r3, [r5, #12]
 8006e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e0c:	7c2b      	ldrb	r3, [r5, #16]
 8006e0e:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8006e10:	4aae      	ldr	r2, [pc, #696]	@ (80070cc <loadMenuTexts+0x368>)
 8006e12:	4baf      	ldr	r3, [pc, #700]	@ (80070d0 <loadMenuTexts+0x36c>)
 8006e14:	4614      	mov	r4, r2
 8006e16:	461d      	mov	r5, r3
 8006e18:	6828      	ldr	r0, [r5, #0]
 8006e1a:	6869      	ldr	r1, [r5, #4]
 8006e1c:	68aa      	ldr	r2, [r5, #8]
 8006e1e:	68eb      	ldr	r3, [r5, #12]
 8006e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e22:	7c2b      	ldrb	r3, [r5, #16]
 8006e24:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8006e26:	4aab      	ldr	r2, [pc, #684]	@ (80070d4 <loadMenuTexts+0x370>)
 8006e28:	4bab      	ldr	r3, [pc, #684]	@ (80070d8 <loadMenuTexts+0x374>)
 8006e2a:	4614      	mov	r4, r2
 8006e2c:	461d      	mov	r5, r3
 8006e2e:	6828      	ldr	r0, [r5, #0]
 8006e30:	6869      	ldr	r1, [r5, #4]
 8006e32:	68aa      	ldr	r2, [r5, #8]
 8006e34:	68eb      	ldr	r3, [r5, #12]
 8006e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e38:	7c2b      	ldrb	r3, [r5, #16]
 8006e3a:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8006e3c:	4aa7      	ldr	r2, [pc, #668]	@ (80070dc <loadMenuTexts+0x378>)
 8006e3e:	4ba8      	ldr	r3, [pc, #672]	@ (80070e0 <loadMenuTexts+0x37c>)
 8006e40:	4614      	mov	r4, r2
 8006e42:	461d      	mov	r5, r3
 8006e44:	6828      	ldr	r0, [r5, #0]
 8006e46:	6869      	ldr	r1, [r5, #4]
 8006e48:	68aa      	ldr	r2, [r5, #8]
 8006e4a:	68eb      	ldr	r3, [r5, #12]
 8006e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e4e:	7c2b      	ldrb	r3, [r5, #16]
 8006e50:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8006e52:	4aa4      	ldr	r2, [pc, #656]	@ (80070e4 <loadMenuTexts+0x380>)
 8006e54:	4ba4      	ldr	r3, [pc, #656]	@ (80070e8 <loadMenuTexts+0x384>)
 8006e56:	4614      	mov	r4, r2
 8006e58:	461d      	mov	r5, r3
 8006e5a:	6828      	ldr	r0, [r5, #0]
 8006e5c:	6869      	ldr	r1, [r5, #4]
 8006e5e:	68aa      	ldr	r2, [r5, #8]
 8006e60:	68eb      	ldr	r3, [r5, #12]
 8006e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e64:	7c2b      	ldrb	r3, [r5, #16]
 8006e66:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8006e68:	4aa0      	ldr	r2, [pc, #640]	@ (80070ec <loadMenuTexts+0x388>)
 8006e6a:	4ba1      	ldr	r3, [pc, #644]	@ (80070f0 <loadMenuTexts+0x38c>)
 8006e6c:	4614      	mov	r4, r2
 8006e6e:	461d      	mov	r5, r3
 8006e70:	6828      	ldr	r0, [r5, #0]
 8006e72:	6869      	ldr	r1, [r5, #4]
 8006e74:	68aa      	ldr	r2, [r5, #8]
 8006e76:	68eb      	ldr	r3, [r5, #12]
 8006e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e7a:	7c2b      	ldrb	r3, [r5, #16]
 8006e7c:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8006e7e:	4a9d      	ldr	r2, [pc, #628]	@ (80070f4 <loadMenuTexts+0x390>)
 8006e80:	4b9d      	ldr	r3, [pc, #628]	@ (80070f8 <loadMenuTexts+0x394>)
 8006e82:	4614      	mov	r4, r2
 8006e84:	461d      	mov	r5, r3
 8006e86:	6828      	ldr	r0, [r5, #0]
 8006e88:	6869      	ldr	r1, [r5, #4]
 8006e8a:	68aa      	ldr	r2, [r5, #8]
 8006e8c:	68eb      	ldr	r3, [r5, #12]
 8006e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e90:	7c2b      	ldrb	r3, [r5, #16]
 8006e92:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8006e94:	4a99      	ldr	r2, [pc, #612]	@ (80070fc <loadMenuTexts+0x398>)
 8006e96:	4b9a      	ldr	r3, [pc, #616]	@ (8007100 <loadMenuTexts+0x39c>)
 8006e98:	4614      	mov	r4, r2
 8006e9a:	461d      	mov	r5, r3
 8006e9c:	6828      	ldr	r0, [r5, #0]
 8006e9e:	6869      	ldr	r1, [r5, #4]
 8006ea0:	68aa      	ldr	r2, [r5, #8]
 8006ea2:	68eb      	ldr	r3, [r5, #12]
 8006ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ea6:	7c2b      	ldrb	r3, [r5, #16]
 8006ea8:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 8006eaa:	4a96      	ldr	r2, [pc, #600]	@ (8007104 <loadMenuTexts+0x3a0>)
 8006eac:	4b96      	ldr	r3, [pc, #600]	@ (8007108 <loadMenuTexts+0x3a4>)
 8006eae:	4614      	mov	r4, r2
 8006eb0:	461d      	mov	r5, r3
 8006eb2:	6828      	ldr	r0, [r5, #0]
 8006eb4:	6869      	ldr	r1, [r5, #4]
 8006eb6:	68aa      	ldr	r2, [r5, #8]
 8006eb8:	68eb      	ldr	r3, [r5, #12]
 8006eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ebc:	7c2b      	ldrb	r3, [r5, #16]
 8006ebe:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8006ec0:	4a92      	ldr	r2, [pc, #584]	@ (800710c <loadMenuTexts+0x3a8>)
 8006ec2:	4b93      	ldr	r3, [pc, #588]	@ (8007110 <loadMenuTexts+0x3ac>)
 8006ec4:	4614      	mov	r4, r2
 8006ec6:	461d      	mov	r5, r3
 8006ec8:	6828      	ldr	r0, [r5, #0]
 8006eca:	6869      	ldr	r1, [r5, #4]
 8006ecc:	68aa      	ldr	r2, [r5, #8]
 8006ece:	68eb      	ldr	r3, [r5, #12]
 8006ed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ed2:	7c2b      	ldrb	r3, [r5, #16]
 8006ed4:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 8006ed6:	4a8f      	ldr	r2, [pc, #572]	@ (8007114 <loadMenuTexts+0x3b0>)
 8006ed8:	4b8f      	ldr	r3, [pc, #572]	@ (8007118 <loadMenuTexts+0x3b4>)
 8006eda:	4614      	mov	r4, r2
 8006edc:	461d      	mov	r5, r3
 8006ede:	6828      	ldr	r0, [r5, #0]
 8006ee0:	6869      	ldr	r1, [r5, #4]
 8006ee2:	68aa      	ldr	r2, [r5, #8]
 8006ee4:	68eb      	ldr	r3, [r5, #12]
 8006ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ee8:	7c2b      	ldrb	r3, [r5, #16]
 8006eea:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 8006eec:	4a8b      	ldr	r2, [pc, #556]	@ (800711c <loadMenuTexts+0x3b8>)
 8006eee:	4b8c      	ldr	r3, [pc, #560]	@ (8007120 <loadMenuTexts+0x3bc>)
 8006ef0:	4614      	mov	r4, r2
 8006ef2:	461d      	mov	r5, r3
 8006ef4:	6828      	ldr	r0, [r5, #0]
 8006ef6:	6869      	ldr	r1, [r5, #4]
 8006ef8:	68aa      	ldr	r2, [r5, #8]
 8006efa:	68eb      	ldr	r3, [r5, #12]
 8006efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006efe:	7c2b      	ldrb	r3, [r5, #16]
 8006f00:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 8006f02:	4a88      	ldr	r2, [pc, #544]	@ (8007124 <loadMenuTexts+0x3c0>)
 8006f04:	4b88      	ldr	r3, [pc, #544]	@ (8007128 <loadMenuTexts+0x3c4>)
 8006f06:	4614      	mov	r4, r2
 8006f08:	461d      	mov	r5, r3
 8006f0a:	6828      	ldr	r0, [r5, #0]
 8006f0c:	6869      	ldr	r1, [r5, #4]
 8006f0e:	68aa      	ldr	r2, [r5, #8]
 8006f10:	68eb      	ldr	r3, [r5, #12]
 8006f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f14:	7c2b      	ldrb	r3, [r5, #16]
 8006f16:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 8006f18:	4a84      	ldr	r2, [pc, #528]	@ (800712c <loadMenuTexts+0x3c8>)
 8006f1a:	4b85      	ldr	r3, [pc, #532]	@ (8007130 <loadMenuTexts+0x3cc>)
 8006f1c:	4614      	mov	r4, r2
 8006f1e:	461d      	mov	r5, r3
 8006f20:	6828      	ldr	r0, [r5, #0]
 8006f22:	6869      	ldr	r1, [r5, #4]
 8006f24:	68aa      	ldr	r2, [r5, #8]
 8006f26:	68eb      	ldr	r3, [r5, #12]
 8006f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f2a:	7c2b      	ldrb	r3, [r5, #16]
 8006f2c:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 8006f2e:	4a81      	ldr	r2, [pc, #516]	@ (8007134 <loadMenuTexts+0x3d0>)
 8006f30:	4b81      	ldr	r3, [pc, #516]	@ (8007138 <loadMenuTexts+0x3d4>)
 8006f32:	4614      	mov	r4, r2
 8006f34:	461d      	mov	r5, r3
 8006f36:	6828      	ldr	r0, [r5, #0]
 8006f38:	6869      	ldr	r1, [r5, #4]
 8006f3a:	68aa      	ldr	r2, [r5, #8]
 8006f3c:	68eb      	ldr	r3, [r5, #12]
 8006f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f40:	7c2b      	ldrb	r3, [r5, #16]
 8006f42:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 8006f44:	4a7d      	ldr	r2, [pc, #500]	@ (800713c <loadMenuTexts+0x3d8>)
 8006f46:	4b7e      	ldr	r3, [pc, #504]	@ (8007140 <loadMenuTexts+0x3dc>)
 8006f48:	4614      	mov	r4, r2
 8006f4a:	461d      	mov	r5, r3
 8006f4c:	6828      	ldr	r0, [r5, #0]
 8006f4e:	6869      	ldr	r1, [r5, #4]
 8006f50:	68aa      	ldr	r2, [r5, #8]
 8006f52:	68eb      	ldr	r3, [r5, #12]
 8006f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f56:	7c2b      	ldrb	r3, [r5, #16]
 8006f58:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 8006f5a:	4a7a      	ldr	r2, [pc, #488]	@ (8007144 <loadMenuTexts+0x3e0>)
 8006f5c:	4b7a      	ldr	r3, [pc, #488]	@ (8007148 <loadMenuTexts+0x3e4>)
 8006f5e:	4614      	mov	r4, r2
 8006f60:	461d      	mov	r5, r3
 8006f62:	6828      	ldr	r0, [r5, #0]
 8006f64:	6869      	ldr	r1, [r5, #4]
 8006f66:	68aa      	ldr	r2, [r5, #8]
 8006f68:	68eb      	ldr	r3, [r5, #12]
 8006f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f6c:	7c2b      	ldrb	r3, [r5, #16]
 8006f6e:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8006f70:	4a76      	ldr	r2, [pc, #472]	@ (800714c <loadMenuTexts+0x3e8>)
 8006f72:	4b77      	ldr	r3, [pc, #476]	@ (8007150 <loadMenuTexts+0x3ec>)
 8006f74:	4614      	mov	r4, r2
 8006f76:	461d      	mov	r5, r3
 8006f78:	6828      	ldr	r0, [r5, #0]
 8006f7a:	6869      	ldr	r1, [r5, #4]
 8006f7c:	68aa      	ldr	r2, [r5, #8]
 8006f7e:	68eb      	ldr	r3, [r5, #12]
 8006f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f82:	7c2b      	ldrb	r3, [r5, #16]
 8006f84:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 8006f86:	4a73      	ldr	r2, [pc, #460]	@ (8007154 <loadMenuTexts+0x3f0>)
 8006f88:	4b73      	ldr	r3, [pc, #460]	@ (8007158 <loadMenuTexts+0x3f4>)
 8006f8a:	4614      	mov	r4, r2
 8006f8c:	461d      	mov	r5, r3
 8006f8e:	6828      	ldr	r0, [r5, #0]
 8006f90:	6869      	ldr	r1, [r5, #4]
 8006f92:	68aa      	ldr	r2, [r5, #8]
 8006f94:	68eb      	ldr	r3, [r5, #12]
 8006f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f98:	7c2b      	ldrb	r3, [r5, #16]
 8006f9a:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8006f9c:	4a6f      	ldr	r2, [pc, #444]	@ (800715c <loadMenuTexts+0x3f8>)
 8006f9e:	4b70      	ldr	r3, [pc, #448]	@ (8007160 <loadMenuTexts+0x3fc>)
 8006fa0:	4614      	mov	r4, r2
 8006fa2:	461d      	mov	r5, r3
 8006fa4:	6828      	ldr	r0, [r5, #0]
 8006fa6:	6869      	ldr	r1, [r5, #4]
 8006fa8:	68aa      	ldr	r2, [r5, #8]
 8006faa:	68eb      	ldr	r3, [r5, #12]
 8006fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fae:	7c2b      	ldrb	r3, [r5, #16]
 8006fb0:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 8006fb2:	4a6c      	ldr	r2, [pc, #432]	@ (8007164 <loadMenuTexts+0x400>)
 8006fb4:	4b6c      	ldr	r3, [pc, #432]	@ (8007168 <loadMenuTexts+0x404>)
 8006fb6:	4614      	mov	r4, r2
 8006fb8:	461d      	mov	r5, r3
 8006fba:	6828      	ldr	r0, [r5, #0]
 8006fbc:	6869      	ldr	r1, [r5, #4]
 8006fbe:	68aa      	ldr	r2, [r5, #8]
 8006fc0:	68eb      	ldr	r3, [r5, #12]
 8006fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fc4:	7c2b      	ldrb	r3, [r5, #16]
 8006fc6:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 8006fc8:	4a68      	ldr	r2, [pc, #416]	@ (800716c <loadMenuTexts+0x408>)
 8006fca:	4b69      	ldr	r3, [pc, #420]	@ (8007170 <loadMenuTexts+0x40c>)
 8006fcc:	4614      	mov	r4, r2
 8006fce:	461d      	mov	r5, r3
 8006fd0:	6828      	ldr	r0, [r5, #0]
 8006fd2:	6869      	ldr	r1, [r5, #4]
 8006fd4:	68aa      	ldr	r2, [r5, #8]
 8006fd6:	68eb      	ldr	r3, [r5, #12]
 8006fd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fda:	7c2b      	ldrb	r3, [r5, #16]
 8006fdc:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 8006fde:	4a65      	ldr	r2, [pc, #404]	@ (8007174 <loadMenuTexts+0x410>)
 8006fe0:	4b65      	ldr	r3, [pc, #404]	@ (8007178 <loadMenuTexts+0x414>)
 8006fe2:	4614      	mov	r4, r2
 8006fe4:	461d      	mov	r5, r3
 8006fe6:	6828      	ldr	r0, [r5, #0]
 8006fe8:	6869      	ldr	r1, [r5, #4]
 8006fea:	68aa      	ldr	r2, [r5, #8]
 8006fec:	68eb      	ldr	r3, [r5, #12]
 8006fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ff0:	7c2b      	ldrb	r3, [r5, #16]
 8006ff2:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 8006ff4:	4a61      	ldr	r2, [pc, #388]	@ (800717c <loadMenuTexts+0x418>)
 8006ff6:	4b62      	ldr	r3, [pc, #392]	@ (8007180 <loadMenuTexts+0x41c>)
 8006ff8:	4614      	mov	r4, r2
 8006ffa:	461d      	mov	r5, r3
 8006ffc:	6828      	ldr	r0, [r5, #0]
 8006ffe:	6869      	ldr	r1, [r5, #4]
 8007000:	68aa      	ldr	r2, [r5, #8]
 8007002:	68eb      	ldr	r3, [r5, #12]
 8007004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007006:	7c2b      	ldrb	r3, [r5, #16]
 8007008:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 800700a:	4a5e      	ldr	r2, [pc, #376]	@ (8007184 <loadMenuTexts+0x420>)
 800700c:	4b5e      	ldr	r3, [pc, #376]	@ (8007188 <loadMenuTexts+0x424>)
 800700e:	4614      	mov	r4, r2
 8007010:	461d      	mov	r5, r3
 8007012:	6828      	ldr	r0, [r5, #0]
 8007014:	6869      	ldr	r1, [r5, #4]
 8007016:	68aa      	ldr	r2, [r5, #8]
 8007018:	68eb      	ldr	r3, [r5, #12]
 800701a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800701c:	7c2b      	ldrb	r3, [r5, #16]
 800701e:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8007020:	4a5a      	ldr	r2, [pc, #360]	@ (800718c <loadMenuTexts+0x428>)
 8007022:	4b5b      	ldr	r3, [pc, #364]	@ (8007190 <loadMenuTexts+0x42c>)
 8007024:	4614      	mov	r4, r2
 8007026:	461d      	mov	r5, r3
 8007028:	6828      	ldr	r0, [r5, #0]
 800702a:	6869      	ldr	r1, [r5, #4]
 800702c:	68aa      	ldr	r2, [r5, #8]
 800702e:	68eb      	ldr	r3, [r5, #12]
 8007030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007032:	7c2b      	ldrb	r3, [r5, #16]
 8007034:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 8007036:	4a57      	ldr	r2, [pc, #348]	@ (8007194 <loadMenuTexts+0x430>)
 8007038:	4b57      	ldr	r3, [pc, #348]	@ (8007198 <loadMenuTexts+0x434>)
 800703a:	4614      	mov	r4, r2
 800703c:	461d      	mov	r5, r3
 800703e:	6828      	ldr	r0, [r5, #0]
 8007040:	6869      	ldr	r1, [r5, #4]
 8007042:	68aa      	ldr	r2, [r5, #8]
 8007044:	68eb      	ldr	r3, [r5, #12]
 8007046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007048:	7c2b      	ldrb	r3, [r5, #16]
 800704a:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 800704c:	4a53      	ldr	r2, [pc, #332]	@ (800719c <loadMenuTexts+0x438>)
 800704e:	4b54      	ldr	r3, [pc, #336]	@ (80071a0 <loadMenuTexts+0x43c>)
 8007050:	4614      	mov	r4, r2
 8007052:	461d      	mov	r5, r3
 8007054:	6828      	ldr	r0, [r5, #0]
 8007056:	6869      	ldr	r1, [r5, #4]
 8007058:	68aa      	ldr	r2, [r5, #8]
 800705a:	68eb      	ldr	r3, [r5, #12]
 800705c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800705e:	7c2b      	ldrb	r3, [r5, #16]
 8007060:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 8007062:	4a50      	ldr	r2, [pc, #320]	@ (80071a4 <loadMenuTexts+0x440>)
 8007064:	4b50      	ldr	r3, [pc, #320]	@ (80071a8 <loadMenuTexts+0x444>)
 8007066:	4614      	mov	r4, r2
 8007068:	461d      	mov	r5, r3
 800706a:	6828      	ldr	r0, [r5, #0]
 800706c:	6869      	ldr	r1, [r5, #4]
 800706e:	68aa      	ldr	r2, [r5, #8]
 8007070:	68eb      	ldr	r3, [r5, #12]
 8007072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007074:	7c2b      	ldrb	r3, [r5, #16]
 8007076:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 8007078:	4a4c      	ldr	r2, [pc, #304]	@ (80071ac <loadMenuTexts+0x448>)
 800707a:	4b4d      	ldr	r3, [pc, #308]	@ (80071b0 <loadMenuTexts+0x44c>)
 800707c:	4614      	mov	r4, r2
 800707e:	461d      	mov	r5, r3
 8007080:	6828      	ldr	r0, [r5, #0]
 8007082:	6869      	ldr	r1, [r5, #4]
 8007084:	68aa      	ldr	r2, [r5, #8]
 8007086:	68eb      	ldr	r3, [r5, #12]
 8007088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800708a:	7c2b      	ldrb	r3, [r5, #16]
 800708c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 800708e:	4a49      	ldr	r2, [pc, #292]	@ (80071b4 <loadMenuTexts+0x450>)
 8007090:	e092      	b.n	80071b8 <loadMenuTexts+0x454>
 8007092:	bf00      	nop
 8007094:	20000e08 	.word	0x20000e08
 8007098:	20000120 	.word	0x20000120
 800709c:	20000e1c 	.word	0x20000e1c
 80070a0:	20000134 	.word	0x20000134
 80070a4:	20000e30 	.word	0x20000e30
 80070a8:	20000148 	.word	0x20000148
 80070ac:	20000e44 	.word	0x20000e44
 80070b0:	2000015c 	.word	0x2000015c
 80070b4:	20000e58 	.word	0x20000e58
 80070b8:	20000170 	.word	0x20000170
 80070bc:	20000e6c 	.word	0x20000e6c
 80070c0:	20000184 	.word	0x20000184
 80070c4:	20000e80 	.word	0x20000e80
 80070c8:	20000198 	.word	0x20000198
 80070cc:	20000e94 	.word	0x20000e94
 80070d0:	200001ac 	.word	0x200001ac
 80070d4:	20000ea8 	.word	0x20000ea8
 80070d8:	200001c0 	.word	0x200001c0
 80070dc:	20000ebc 	.word	0x20000ebc
 80070e0:	200001d4 	.word	0x200001d4
 80070e4:	20000ed0 	.word	0x20000ed0
 80070e8:	200001e8 	.word	0x200001e8
 80070ec:	20000ee4 	.word	0x20000ee4
 80070f0:	200001fc 	.word	0x200001fc
 80070f4:	20000ef8 	.word	0x20000ef8
 80070f8:	20000210 	.word	0x20000210
 80070fc:	20000f0c 	.word	0x20000f0c
 8007100:	20000224 	.word	0x20000224
 8007104:	20000f20 	.word	0x20000f20
 8007108:	20000238 	.word	0x20000238
 800710c:	20000f34 	.word	0x20000f34
 8007110:	2000024c 	.word	0x2000024c
 8007114:	20000f48 	.word	0x20000f48
 8007118:	20000260 	.word	0x20000260
 800711c:	20000f5c 	.word	0x20000f5c
 8007120:	20000274 	.word	0x20000274
 8007124:	20000f70 	.word	0x20000f70
 8007128:	20000288 	.word	0x20000288
 800712c:	20000f84 	.word	0x20000f84
 8007130:	2000029c 	.word	0x2000029c
 8007134:	20000f98 	.word	0x20000f98
 8007138:	200002b0 	.word	0x200002b0
 800713c:	20000fac 	.word	0x20000fac
 8007140:	200002c4 	.word	0x200002c4
 8007144:	20000fc0 	.word	0x20000fc0
 8007148:	200002d8 	.word	0x200002d8
 800714c:	20000fd4 	.word	0x20000fd4
 8007150:	200002ec 	.word	0x200002ec
 8007154:	20000fe8 	.word	0x20000fe8
 8007158:	20000300 	.word	0x20000300
 800715c:	20000ffc 	.word	0x20000ffc
 8007160:	20000314 	.word	0x20000314
 8007164:	20001010 	.word	0x20001010
 8007168:	20000328 	.word	0x20000328
 800716c:	20001024 	.word	0x20001024
 8007170:	2000033c 	.word	0x2000033c
 8007174:	20001038 	.word	0x20001038
 8007178:	20000350 	.word	0x20000350
 800717c:	2000104c 	.word	0x2000104c
 8007180:	20000364 	.word	0x20000364
 8007184:	20001060 	.word	0x20001060
 8007188:	20000378 	.word	0x20000378
 800718c:	20001074 	.word	0x20001074
 8007190:	2000038c 	.word	0x2000038c
 8007194:	20001088 	.word	0x20001088
 8007198:	200003a0 	.word	0x200003a0
 800719c:	2000109c 	.word	0x2000109c
 80071a0:	200003b4 	.word	0x200003b4
 80071a4:	200010b0 	.word	0x200010b0
 80071a8:	200003c8 	.word	0x200003c8
 80071ac:	200010c4 	.word	0x200010c4
 80071b0:	200003dc 	.word	0x200003dc
 80071b4:	200010d8 	.word	0x200010d8
 80071b8:	4bc7      	ldr	r3, [pc, #796]	@ (80074d8 <loadMenuTexts+0x774>)
 80071ba:	4614      	mov	r4, r2
 80071bc:	461d      	mov	r5, r3
 80071be:	6828      	ldr	r0, [r5, #0]
 80071c0:	6869      	ldr	r1, [r5, #4]
 80071c2:	68aa      	ldr	r2, [r5, #8]
 80071c4:	68eb      	ldr	r3, [r5, #12]
 80071c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071c8:	7c2b      	ldrb	r3, [r5, #16]
 80071ca:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 80071cc:	4ac3      	ldr	r2, [pc, #780]	@ (80074dc <loadMenuTexts+0x778>)
 80071ce:	4bc4      	ldr	r3, [pc, #784]	@ (80074e0 <loadMenuTexts+0x77c>)
 80071d0:	4614      	mov	r4, r2
 80071d2:	461d      	mov	r5, r3
 80071d4:	6828      	ldr	r0, [r5, #0]
 80071d6:	6869      	ldr	r1, [r5, #4]
 80071d8:	68aa      	ldr	r2, [r5, #8]
 80071da:	68eb      	ldr	r3, [r5, #12]
 80071dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071de:	7c2b      	ldrb	r3, [r5, #16]
 80071e0:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 80071e2:	4ac0      	ldr	r2, [pc, #768]	@ (80074e4 <loadMenuTexts+0x780>)
 80071e4:	4bc0      	ldr	r3, [pc, #768]	@ (80074e8 <loadMenuTexts+0x784>)
 80071e6:	4614      	mov	r4, r2
 80071e8:	461d      	mov	r5, r3
 80071ea:	6828      	ldr	r0, [r5, #0]
 80071ec:	6869      	ldr	r1, [r5, #4]
 80071ee:	68aa      	ldr	r2, [r5, #8]
 80071f0:	68eb      	ldr	r3, [r5, #12]
 80071f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071f4:	7c2b      	ldrb	r3, [r5, #16]
 80071f6:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 80071f8:	4abc      	ldr	r2, [pc, #752]	@ (80074ec <loadMenuTexts+0x788>)
 80071fa:	4bbd      	ldr	r3, [pc, #756]	@ (80074f0 <loadMenuTexts+0x78c>)
 80071fc:	4614      	mov	r4, r2
 80071fe:	461d      	mov	r5, r3
 8007200:	6828      	ldr	r0, [r5, #0]
 8007202:	6869      	ldr	r1, [r5, #4]
 8007204:	68aa      	ldr	r2, [r5, #8]
 8007206:	68eb      	ldr	r3, [r5, #12]
 8007208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800720a:	7c2b      	ldrb	r3, [r5, #16]
 800720c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 800720e:	4ab9      	ldr	r2, [pc, #740]	@ (80074f4 <loadMenuTexts+0x790>)
 8007210:	4bb9      	ldr	r3, [pc, #740]	@ (80074f8 <loadMenuTexts+0x794>)
 8007212:	4614      	mov	r4, r2
 8007214:	461d      	mov	r5, r3
 8007216:	6828      	ldr	r0, [r5, #0]
 8007218:	6869      	ldr	r1, [r5, #4]
 800721a:	68aa      	ldr	r2, [r5, #8]
 800721c:	68eb      	ldr	r3, [r5, #12]
 800721e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007220:	7c2b      	ldrb	r3, [r5, #16]
 8007222:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 8007224:	4ab5      	ldr	r2, [pc, #724]	@ (80074fc <loadMenuTexts+0x798>)
 8007226:	4bb6      	ldr	r3, [pc, #728]	@ (8007500 <loadMenuTexts+0x79c>)
 8007228:	4614      	mov	r4, r2
 800722a:	461d      	mov	r5, r3
 800722c:	6828      	ldr	r0, [r5, #0]
 800722e:	6869      	ldr	r1, [r5, #4]
 8007230:	68aa      	ldr	r2, [r5, #8]
 8007232:	68eb      	ldr	r3, [r5, #12]
 8007234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007236:	7c2b      	ldrb	r3, [r5, #16]
 8007238:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 800723a:	4ab2      	ldr	r2, [pc, #712]	@ (8007504 <loadMenuTexts+0x7a0>)
 800723c:	4bb2      	ldr	r3, [pc, #712]	@ (8007508 <loadMenuTexts+0x7a4>)
 800723e:	4614      	mov	r4, r2
 8007240:	461d      	mov	r5, r3
 8007242:	6828      	ldr	r0, [r5, #0]
 8007244:	6869      	ldr	r1, [r5, #4]
 8007246:	68aa      	ldr	r2, [r5, #8]
 8007248:	68eb      	ldr	r3, [r5, #12]
 800724a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800724c:	7c2b      	ldrb	r3, [r5, #16]
 800724e:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8007250:	4aae      	ldr	r2, [pc, #696]	@ (800750c <loadMenuTexts+0x7a8>)
 8007252:	4baf      	ldr	r3, [pc, #700]	@ (8007510 <loadMenuTexts+0x7ac>)
 8007254:	4614      	mov	r4, r2
 8007256:	461d      	mov	r5, r3
 8007258:	6828      	ldr	r0, [r5, #0]
 800725a:	6869      	ldr	r1, [r5, #4]
 800725c:	68aa      	ldr	r2, [r5, #8]
 800725e:	68eb      	ldr	r3, [r5, #12]
 8007260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007262:	7c2b      	ldrb	r3, [r5, #16]
 8007264:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 8007266:	4aab      	ldr	r2, [pc, #684]	@ (8007514 <loadMenuTexts+0x7b0>)
 8007268:	4bab      	ldr	r3, [pc, #684]	@ (8007518 <loadMenuTexts+0x7b4>)
 800726a:	4614      	mov	r4, r2
 800726c:	461d      	mov	r5, r3
 800726e:	6828      	ldr	r0, [r5, #0]
 8007270:	6869      	ldr	r1, [r5, #4]
 8007272:	68aa      	ldr	r2, [r5, #8]
 8007274:	68eb      	ldr	r3, [r5, #12]
 8007276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007278:	7c2b      	ldrb	r3, [r5, #16]
 800727a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 800727c:	4aa7      	ldr	r2, [pc, #668]	@ (800751c <loadMenuTexts+0x7b8>)
 800727e:	4ba8      	ldr	r3, [pc, #672]	@ (8007520 <loadMenuTexts+0x7bc>)
 8007280:	4614      	mov	r4, r2
 8007282:	461d      	mov	r5, r3
 8007284:	6828      	ldr	r0, [r5, #0]
 8007286:	6869      	ldr	r1, [r5, #4]
 8007288:	68aa      	ldr	r2, [r5, #8]
 800728a:	68eb      	ldr	r3, [r5, #12]
 800728c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800728e:	7c2b      	ldrb	r3, [r5, #16]
 8007290:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 8007292:	4aa4      	ldr	r2, [pc, #656]	@ (8007524 <loadMenuTexts+0x7c0>)
 8007294:	4ba4      	ldr	r3, [pc, #656]	@ (8007528 <loadMenuTexts+0x7c4>)
 8007296:	4614      	mov	r4, r2
 8007298:	461d      	mov	r5, r3
 800729a:	6828      	ldr	r0, [r5, #0]
 800729c:	6869      	ldr	r1, [r5, #4]
 800729e:	68aa      	ldr	r2, [r5, #8]
 80072a0:	68eb      	ldr	r3, [r5, #12]
 80072a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072a4:	7c2b      	ldrb	r3, [r5, #16]
 80072a6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 80072a8:	4aa0      	ldr	r2, [pc, #640]	@ (800752c <loadMenuTexts+0x7c8>)
 80072aa:	4ba1      	ldr	r3, [pc, #644]	@ (8007530 <loadMenuTexts+0x7cc>)
 80072ac:	4614      	mov	r4, r2
 80072ae:	461d      	mov	r5, r3
 80072b0:	6828      	ldr	r0, [r5, #0]
 80072b2:	6869      	ldr	r1, [r5, #4]
 80072b4:	68aa      	ldr	r2, [r5, #8]
 80072b6:	68eb      	ldr	r3, [r5, #12]
 80072b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ba:	7c2b      	ldrb	r3, [r5, #16]
 80072bc:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 80072be:	4a9d      	ldr	r2, [pc, #628]	@ (8007534 <loadMenuTexts+0x7d0>)
 80072c0:	4b9d      	ldr	r3, [pc, #628]	@ (8007538 <loadMenuTexts+0x7d4>)
 80072c2:	4614      	mov	r4, r2
 80072c4:	461d      	mov	r5, r3
 80072c6:	6828      	ldr	r0, [r5, #0]
 80072c8:	6869      	ldr	r1, [r5, #4]
 80072ca:	68aa      	ldr	r2, [r5, #8]
 80072cc:	68eb      	ldr	r3, [r5, #12]
 80072ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072d0:	7c2b      	ldrb	r3, [r5, #16]
 80072d2:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 80072d4:	4a99      	ldr	r2, [pc, #612]	@ (800753c <loadMenuTexts+0x7d8>)
 80072d6:	4b9a      	ldr	r3, [pc, #616]	@ (8007540 <loadMenuTexts+0x7dc>)
 80072d8:	4614      	mov	r4, r2
 80072da:	461d      	mov	r5, r3
 80072dc:	6828      	ldr	r0, [r5, #0]
 80072de:	6869      	ldr	r1, [r5, #4]
 80072e0:	68aa      	ldr	r2, [r5, #8]
 80072e2:	68eb      	ldr	r3, [r5, #12]
 80072e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072e6:	7c2b      	ldrb	r3, [r5, #16]
 80072e8:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 80072ea:	4a96      	ldr	r2, [pc, #600]	@ (8007544 <loadMenuTexts+0x7e0>)
 80072ec:	4b96      	ldr	r3, [pc, #600]	@ (8007548 <loadMenuTexts+0x7e4>)
 80072ee:	4614      	mov	r4, r2
 80072f0:	461d      	mov	r5, r3
 80072f2:	6828      	ldr	r0, [r5, #0]
 80072f4:	6869      	ldr	r1, [r5, #4]
 80072f6:	68aa      	ldr	r2, [r5, #8]
 80072f8:	68eb      	ldr	r3, [r5, #12]
 80072fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072fc:	7c2b      	ldrb	r3, [r5, #16]
 80072fe:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 8007300:	4a92      	ldr	r2, [pc, #584]	@ (800754c <loadMenuTexts+0x7e8>)
 8007302:	4b93      	ldr	r3, [pc, #588]	@ (8007550 <loadMenuTexts+0x7ec>)
 8007304:	4614      	mov	r4, r2
 8007306:	461d      	mov	r5, r3
 8007308:	6828      	ldr	r0, [r5, #0]
 800730a:	6869      	ldr	r1, [r5, #4]
 800730c:	68aa      	ldr	r2, [r5, #8]
 800730e:	68eb      	ldr	r3, [r5, #12]
 8007310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007312:	7c2b      	ldrb	r3, [r5, #16]
 8007314:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 8007316:	4a8f      	ldr	r2, [pc, #572]	@ (8007554 <loadMenuTexts+0x7f0>)
 8007318:	4b8f      	ldr	r3, [pc, #572]	@ (8007558 <loadMenuTexts+0x7f4>)
 800731a:	4614      	mov	r4, r2
 800731c:	461d      	mov	r5, r3
 800731e:	6828      	ldr	r0, [r5, #0]
 8007320:	6869      	ldr	r1, [r5, #4]
 8007322:	68aa      	ldr	r2, [r5, #8]
 8007324:	68eb      	ldr	r3, [r5, #12]
 8007326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007328:	7c2b      	ldrb	r3, [r5, #16]
 800732a:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 800732c:	4a8b      	ldr	r2, [pc, #556]	@ (800755c <loadMenuTexts+0x7f8>)
 800732e:	4b8c      	ldr	r3, [pc, #560]	@ (8007560 <loadMenuTexts+0x7fc>)
 8007330:	4614      	mov	r4, r2
 8007332:	461d      	mov	r5, r3
 8007334:	6828      	ldr	r0, [r5, #0]
 8007336:	6869      	ldr	r1, [r5, #4]
 8007338:	68aa      	ldr	r2, [r5, #8]
 800733a:	68eb      	ldr	r3, [r5, #12]
 800733c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800733e:	7c2b      	ldrb	r3, [r5, #16]
 8007340:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 8007342:	4a88      	ldr	r2, [pc, #544]	@ (8007564 <loadMenuTexts+0x800>)
 8007344:	4b88      	ldr	r3, [pc, #544]	@ (8007568 <loadMenuTexts+0x804>)
 8007346:	4614      	mov	r4, r2
 8007348:	461d      	mov	r5, r3
 800734a:	6828      	ldr	r0, [r5, #0]
 800734c:	6869      	ldr	r1, [r5, #4]
 800734e:	68aa      	ldr	r2, [r5, #8]
 8007350:	68eb      	ldr	r3, [r5, #12]
 8007352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007354:	7c2b      	ldrb	r3, [r5, #16]
 8007356:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8007358:	4a84      	ldr	r2, [pc, #528]	@ (800756c <loadMenuTexts+0x808>)
 800735a:	4b85      	ldr	r3, [pc, #532]	@ (8007570 <loadMenuTexts+0x80c>)
 800735c:	4614      	mov	r4, r2
 800735e:	461d      	mov	r5, r3
 8007360:	6828      	ldr	r0, [r5, #0]
 8007362:	6869      	ldr	r1, [r5, #4]
 8007364:	68aa      	ldr	r2, [r5, #8]
 8007366:	68eb      	ldr	r3, [r5, #12]
 8007368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800736a:	7c2b      	ldrb	r3, [r5, #16]
 800736c:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 800736e:	4a81      	ldr	r2, [pc, #516]	@ (8007574 <loadMenuTexts+0x810>)
 8007370:	4b81      	ldr	r3, [pc, #516]	@ (8007578 <loadMenuTexts+0x814>)
 8007372:	4614      	mov	r4, r2
 8007374:	461d      	mov	r5, r3
 8007376:	6828      	ldr	r0, [r5, #0]
 8007378:	6869      	ldr	r1, [r5, #4]
 800737a:	68aa      	ldr	r2, [r5, #8]
 800737c:	68eb      	ldr	r3, [r5, #12]
 800737e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007380:	7c2b      	ldrb	r3, [r5, #16]
 8007382:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 8007384:	4a7d      	ldr	r2, [pc, #500]	@ (800757c <loadMenuTexts+0x818>)
 8007386:	4b7e      	ldr	r3, [pc, #504]	@ (8007580 <loadMenuTexts+0x81c>)
 8007388:	4614      	mov	r4, r2
 800738a:	461d      	mov	r5, r3
 800738c:	6828      	ldr	r0, [r5, #0]
 800738e:	6869      	ldr	r1, [r5, #4]
 8007390:	68aa      	ldr	r2, [r5, #8]
 8007392:	68eb      	ldr	r3, [r5, #12]
 8007394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007396:	7c2b      	ldrb	r3, [r5, #16]
 8007398:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 800739a:	4a7a      	ldr	r2, [pc, #488]	@ (8007584 <loadMenuTexts+0x820>)
 800739c:	4b7a      	ldr	r3, [pc, #488]	@ (8007588 <loadMenuTexts+0x824>)
 800739e:	4614      	mov	r4, r2
 80073a0:	461d      	mov	r5, r3
 80073a2:	6828      	ldr	r0, [r5, #0]
 80073a4:	6869      	ldr	r1, [r5, #4]
 80073a6:	68aa      	ldr	r2, [r5, #8]
 80073a8:	68eb      	ldr	r3, [r5, #12]
 80073aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073ac:	7c2b      	ldrb	r3, [r5, #16]
 80073ae:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 80073b0:	4a76      	ldr	r2, [pc, #472]	@ (800758c <loadMenuTexts+0x828>)
 80073b2:	4b77      	ldr	r3, [pc, #476]	@ (8007590 <loadMenuTexts+0x82c>)
 80073b4:	4614      	mov	r4, r2
 80073b6:	461d      	mov	r5, r3
 80073b8:	6828      	ldr	r0, [r5, #0]
 80073ba:	6869      	ldr	r1, [r5, #4]
 80073bc:	68aa      	ldr	r2, [r5, #8]
 80073be:	68eb      	ldr	r3, [r5, #12]
 80073c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073c2:	7c2b      	ldrb	r3, [r5, #16]
 80073c4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 80073c6:	4a73      	ldr	r2, [pc, #460]	@ (8007594 <loadMenuTexts+0x830>)
 80073c8:	4b73      	ldr	r3, [pc, #460]	@ (8007598 <loadMenuTexts+0x834>)
 80073ca:	4614      	mov	r4, r2
 80073cc:	461d      	mov	r5, r3
 80073ce:	6828      	ldr	r0, [r5, #0]
 80073d0:	6869      	ldr	r1, [r5, #4]
 80073d2:	68aa      	ldr	r2, [r5, #8]
 80073d4:	68eb      	ldr	r3, [r5, #12]
 80073d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073d8:	7c2b      	ldrb	r3, [r5, #16]
 80073da:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 80073dc:	4a6f      	ldr	r2, [pc, #444]	@ (800759c <loadMenuTexts+0x838>)
 80073de:	4b70      	ldr	r3, [pc, #448]	@ (80075a0 <loadMenuTexts+0x83c>)
 80073e0:	4614      	mov	r4, r2
 80073e2:	461d      	mov	r5, r3
 80073e4:	6828      	ldr	r0, [r5, #0]
 80073e6:	6869      	ldr	r1, [r5, #4]
 80073e8:	68aa      	ldr	r2, [r5, #8]
 80073ea:	68eb      	ldr	r3, [r5, #12]
 80073ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073ee:	7c2b      	ldrb	r3, [r5, #16]
 80073f0:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 80073f2:	4a6c      	ldr	r2, [pc, #432]	@ (80075a4 <loadMenuTexts+0x840>)
 80073f4:	4b6c      	ldr	r3, [pc, #432]	@ (80075a8 <loadMenuTexts+0x844>)
 80073f6:	4614      	mov	r4, r2
 80073f8:	461d      	mov	r5, r3
 80073fa:	6828      	ldr	r0, [r5, #0]
 80073fc:	6869      	ldr	r1, [r5, #4]
 80073fe:	68aa      	ldr	r2, [r5, #8]
 8007400:	68eb      	ldr	r3, [r5, #12]
 8007402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007404:	7c2b      	ldrb	r3, [r5, #16]
 8007406:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 8007408:	4a68      	ldr	r2, [pc, #416]	@ (80075ac <loadMenuTexts+0x848>)
 800740a:	4b69      	ldr	r3, [pc, #420]	@ (80075b0 <loadMenuTexts+0x84c>)
 800740c:	4614      	mov	r4, r2
 800740e:	461d      	mov	r5, r3
 8007410:	6828      	ldr	r0, [r5, #0]
 8007412:	6869      	ldr	r1, [r5, #4]
 8007414:	68aa      	ldr	r2, [r5, #8]
 8007416:	68eb      	ldr	r3, [r5, #12]
 8007418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800741a:	7c2b      	ldrb	r3, [r5, #16]
 800741c:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 800741e:	4a65      	ldr	r2, [pc, #404]	@ (80075b4 <loadMenuTexts+0x850>)
 8007420:	4b65      	ldr	r3, [pc, #404]	@ (80075b8 <loadMenuTexts+0x854>)
 8007422:	4614      	mov	r4, r2
 8007424:	461d      	mov	r5, r3
 8007426:	6828      	ldr	r0, [r5, #0]
 8007428:	6869      	ldr	r1, [r5, #4]
 800742a:	68aa      	ldr	r2, [r5, #8]
 800742c:	68eb      	ldr	r3, [r5, #12]
 800742e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007430:	7c2b      	ldrb	r3, [r5, #16]
 8007432:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 8007434:	4a61      	ldr	r2, [pc, #388]	@ (80075bc <loadMenuTexts+0x858>)
 8007436:	4b62      	ldr	r3, [pc, #392]	@ (80075c0 <loadMenuTexts+0x85c>)
 8007438:	4614      	mov	r4, r2
 800743a:	461d      	mov	r5, r3
 800743c:	6828      	ldr	r0, [r5, #0]
 800743e:	6869      	ldr	r1, [r5, #4]
 8007440:	68aa      	ldr	r2, [r5, #8]
 8007442:	68eb      	ldr	r3, [r5, #12]
 8007444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007446:	7c2b      	ldrb	r3, [r5, #16]
 8007448:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 800744a:	4a5e      	ldr	r2, [pc, #376]	@ (80075c4 <loadMenuTexts+0x860>)
 800744c:	4b5e      	ldr	r3, [pc, #376]	@ (80075c8 <loadMenuTexts+0x864>)
 800744e:	4614      	mov	r4, r2
 8007450:	461d      	mov	r5, r3
 8007452:	6828      	ldr	r0, [r5, #0]
 8007454:	6869      	ldr	r1, [r5, #4]
 8007456:	68aa      	ldr	r2, [r5, #8]
 8007458:	68eb      	ldr	r3, [r5, #12]
 800745a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800745c:	7c2b      	ldrb	r3, [r5, #16]
 800745e:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8007460:	4a5a      	ldr	r2, [pc, #360]	@ (80075cc <loadMenuTexts+0x868>)
 8007462:	4b5b      	ldr	r3, [pc, #364]	@ (80075d0 <loadMenuTexts+0x86c>)
 8007464:	4614      	mov	r4, r2
 8007466:	461d      	mov	r5, r3
 8007468:	6828      	ldr	r0, [r5, #0]
 800746a:	6869      	ldr	r1, [r5, #4]
 800746c:	68aa      	ldr	r2, [r5, #8]
 800746e:	68eb      	ldr	r3, [r5, #12]
 8007470:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007472:	7c2b      	ldrb	r3, [r5, #16]
 8007474:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 8007476:	4a57      	ldr	r2, [pc, #348]	@ (80075d4 <loadMenuTexts+0x870>)
 8007478:	4b57      	ldr	r3, [pc, #348]	@ (80075d8 <loadMenuTexts+0x874>)
 800747a:	4614      	mov	r4, r2
 800747c:	461d      	mov	r5, r3
 800747e:	6828      	ldr	r0, [r5, #0]
 8007480:	6869      	ldr	r1, [r5, #4]
 8007482:	68aa      	ldr	r2, [r5, #8]
 8007484:	68eb      	ldr	r3, [r5, #12]
 8007486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007488:	7c2b      	ldrb	r3, [r5, #16]
 800748a:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 800748c:	4a53      	ldr	r2, [pc, #332]	@ (80075dc <loadMenuTexts+0x878>)
 800748e:	4b54      	ldr	r3, [pc, #336]	@ (80075e0 <loadMenuTexts+0x87c>)
 8007490:	4614      	mov	r4, r2
 8007492:	461d      	mov	r5, r3
 8007494:	6828      	ldr	r0, [r5, #0]
 8007496:	6869      	ldr	r1, [r5, #4]
 8007498:	68aa      	ldr	r2, [r5, #8]
 800749a:	68eb      	ldr	r3, [r5, #12]
 800749c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800749e:	7c2b      	ldrb	r3, [r5, #16]
 80074a0:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 80074a2:	4a50      	ldr	r2, [pc, #320]	@ (80075e4 <loadMenuTexts+0x880>)
 80074a4:	4b50      	ldr	r3, [pc, #320]	@ (80075e8 <loadMenuTexts+0x884>)
 80074a6:	4614      	mov	r4, r2
 80074a8:	461d      	mov	r5, r3
 80074aa:	6828      	ldr	r0, [r5, #0]
 80074ac:	6869      	ldr	r1, [r5, #4]
 80074ae:	68aa      	ldr	r2, [r5, #8]
 80074b0:	68eb      	ldr	r3, [r5, #12]
 80074b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074b4:	7c2b      	ldrb	r3, [r5, #16]
 80074b6:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 80074b8:	4a4c      	ldr	r2, [pc, #304]	@ (80075ec <loadMenuTexts+0x888>)
 80074ba:	4b4d      	ldr	r3, [pc, #308]	@ (80075f0 <loadMenuTexts+0x88c>)
 80074bc:	4614      	mov	r4, r2
 80074be:	461d      	mov	r5, r3
 80074c0:	6828      	ldr	r0, [r5, #0]
 80074c2:	6869      	ldr	r1, [r5, #4]
 80074c4:	68aa      	ldr	r2, [r5, #8]
 80074c6:	68eb      	ldr	r3, [r5, #12]
 80074c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074ca:	7c2b      	ldrb	r3, [r5, #16]
 80074cc:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 80074ce:	4a49      	ldr	r2, [pc, #292]	@ (80075f4 <loadMenuTexts+0x890>)
 80074d0:	4b49      	ldr	r3, [pc, #292]	@ (80075f8 <loadMenuTexts+0x894>)
 80074d2:	4614      	mov	r4, r2
 80074d4:	461d      	mov	r5, r3
 80074d6:	e091      	b.n	80075fc <loadMenuTexts+0x898>
 80074d8:	200003f0 	.word	0x200003f0
 80074dc:	200010ec 	.word	0x200010ec
 80074e0:	20000404 	.word	0x20000404
 80074e4:	20001100 	.word	0x20001100
 80074e8:	20000418 	.word	0x20000418
 80074ec:	20001114 	.word	0x20001114
 80074f0:	2000042c 	.word	0x2000042c
 80074f4:	20001128 	.word	0x20001128
 80074f8:	20000440 	.word	0x20000440
 80074fc:	2000113c 	.word	0x2000113c
 8007500:	20000454 	.word	0x20000454
 8007504:	20001150 	.word	0x20001150
 8007508:	20000468 	.word	0x20000468
 800750c:	20001164 	.word	0x20001164
 8007510:	2000047c 	.word	0x2000047c
 8007514:	20001178 	.word	0x20001178
 8007518:	20000490 	.word	0x20000490
 800751c:	2000118c 	.word	0x2000118c
 8007520:	200004a4 	.word	0x200004a4
 8007524:	200011a0 	.word	0x200011a0
 8007528:	200004b8 	.word	0x200004b8
 800752c:	200011b4 	.word	0x200011b4
 8007530:	200004cc 	.word	0x200004cc
 8007534:	200011c8 	.word	0x200011c8
 8007538:	200004e0 	.word	0x200004e0
 800753c:	200011dc 	.word	0x200011dc
 8007540:	200004f4 	.word	0x200004f4
 8007544:	200011f0 	.word	0x200011f0
 8007548:	20000508 	.word	0x20000508
 800754c:	20001204 	.word	0x20001204
 8007550:	2000051c 	.word	0x2000051c
 8007554:	20001218 	.word	0x20001218
 8007558:	20000530 	.word	0x20000530
 800755c:	2000122c 	.word	0x2000122c
 8007560:	20000544 	.word	0x20000544
 8007564:	20001240 	.word	0x20001240
 8007568:	20000558 	.word	0x20000558
 800756c:	20001254 	.word	0x20001254
 8007570:	2000056c 	.word	0x2000056c
 8007574:	20001268 	.word	0x20001268
 8007578:	20000580 	.word	0x20000580
 800757c:	2000127c 	.word	0x2000127c
 8007580:	20000594 	.word	0x20000594
 8007584:	20001290 	.word	0x20001290
 8007588:	200005a8 	.word	0x200005a8
 800758c:	200012a4 	.word	0x200012a4
 8007590:	200005bc 	.word	0x200005bc
 8007594:	200012b8 	.word	0x200012b8
 8007598:	200005d0 	.word	0x200005d0
 800759c:	200012cc 	.word	0x200012cc
 80075a0:	200005e4 	.word	0x200005e4
 80075a4:	200012e0 	.word	0x200012e0
 80075a8:	200005f8 	.word	0x200005f8
 80075ac:	200012f4 	.word	0x200012f4
 80075b0:	2000060c 	.word	0x2000060c
 80075b4:	20001308 	.word	0x20001308
 80075b8:	20000620 	.word	0x20000620
 80075bc:	2000131c 	.word	0x2000131c
 80075c0:	20000634 	.word	0x20000634
 80075c4:	20001330 	.word	0x20001330
 80075c8:	20000648 	.word	0x20000648
 80075cc:	20001344 	.word	0x20001344
 80075d0:	2000065c 	.word	0x2000065c
 80075d4:	20001358 	.word	0x20001358
 80075d8:	20000670 	.word	0x20000670
 80075dc:	2000136c 	.word	0x2000136c
 80075e0:	20000684 	.word	0x20000684
 80075e4:	20001380 	.word	0x20001380
 80075e8:	20000c10 	.word	0x20000c10
 80075ec:	20001394 	.word	0x20001394
 80075f0:	20000c38 	.word	0x20000c38
 80075f4:	200013a8 	.word	0x200013a8
 80075f8:	20000c60 	.word	0x20000c60
 80075fc:	6828      	ldr	r0, [r5, #0]
 80075fe:	6869      	ldr	r1, [r5, #4]
 8007600:	68aa      	ldr	r2, [r5, #8]
 8007602:	68eb      	ldr	r3, [r5, #12]
 8007604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007606:	7c2b      	ldrb	r3, [r5, #16]
 8007608:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 800760a:	4a0c      	ldr	r2, [pc, #48]	@ (800763c <loadMenuTexts+0x8d8>)
 800760c:	4b0c      	ldr	r3, [pc, #48]	@ (8007640 <loadMenuTexts+0x8dc>)
 800760e:	4614      	mov	r4, r2
 8007610:	461d      	mov	r5, r3
 8007612:	6828      	ldr	r0, [r5, #0]
 8007614:	6869      	ldr	r1, [r5, #4]
 8007616:	68aa      	ldr	r2, [r5, #8]
 8007618:	68eb      	ldr	r3, [r5, #12]
 800761a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800761c:	7c2b      	ldrb	r3, [r5, #16]
 800761e:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8007620:	4a08      	ldr	r2, [pc, #32]	@ (8007644 <loadMenuTexts+0x8e0>)
 8007622:	4b09      	ldr	r3, [pc, #36]	@ (8007648 <loadMenuTexts+0x8e4>)
 8007624:	4614      	mov	r4, r2
 8007626:	461d      	mov	r5, r3
 8007628:	6828      	ldr	r0, [r5, #0]
 800762a:	6869      	ldr	r1, [r5, #4]
 800762c:	68aa      	ldr	r2, [r5, #8]
 800762e:	68eb      	ldr	r3, [r5, #12]
 8007630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007632:	7c2b      	ldrb	r3, [r5, #16]
 8007634:	7023      	strb	r3, [r4, #0]
 8007636:	f000 bc68 	b.w	8007f0a <loadMenuTexts+0x11a6>
 800763a:	bf00      	nop
 800763c:	200013bc 	.word	0x200013bc
 8007640:	20000c88 	.word	0x20000c88
 8007644:	200013d0 	.word	0x200013d0
 8007648:	20000cb0 	.word	0x20000cb0
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 800764c:	4ac6      	ldr	r2, [pc, #792]	@ (8007968 <loadMenuTexts+0xc04>)
 800764e:	4bc7      	ldr	r3, [pc, #796]	@ (800796c <loadMenuTexts+0xc08>)
 8007650:	4614      	mov	r4, r2
 8007652:	461d      	mov	r5, r3
 8007654:	6828      	ldr	r0, [r5, #0]
 8007656:	6869      	ldr	r1, [r5, #4]
 8007658:	68aa      	ldr	r2, [r5, #8]
 800765a:	68eb      	ldr	r3, [r5, #12]
 800765c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800765e:	7c2b      	ldrb	r3, [r5, #16]
 8007660:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8007662:	4ac3      	ldr	r2, [pc, #780]	@ (8007970 <loadMenuTexts+0xc0c>)
 8007664:	4bc3      	ldr	r3, [pc, #780]	@ (8007974 <loadMenuTexts+0xc10>)
 8007666:	4614      	mov	r4, r2
 8007668:	461d      	mov	r5, r3
 800766a:	6828      	ldr	r0, [r5, #0]
 800766c:	6869      	ldr	r1, [r5, #4]
 800766e:	68aa      	ldr	r2, [r5, #8]
 8007670:	68eb      	ldr	r3, [r5, #12]
 8007672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007674:	7c2b      	ldrb	r3, [r5, #16]
 8007676:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8007678:	4abf      	ldr	r2, [pc, #764]	@ (8007978 <loadMenuTexts+0xc14>)
 800767a:	4bc0      	ldr	r3, [pc, #768]	@ (800797c <loadMenuTexts+0xc18>)
 800767c:	4614      	mov	r4, r2
 800767e:	461d      	mov	r5, r3
 8007680:	6828      	ldr	r0, [r5, #0]
 8007682:	6869      	ldr	r1, [r5, #4]
 8007684:	68aa      	ldr	r2, [r5, #8]
 8007686:	68eb      	ldr	r3, [r5, #12]
 8007688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800768a:	7c2b      	ldrb	r3, [r5, #16]
 800768c:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 800768e:	4abc      	ldr	r2, [pc, #752]	@ (8007980 <loadMenuTexts+0xc1c>)
 8007690:	4bbc      	ldr	r3, [pc, #752]	@ (8007984 <loadMenuTexts+0xc20>)
 8007692:	4614      	mov	r4, r2
 8007694:	461d      	mov	r5, r3
 8007696:	6828      	ldr	r0, [r5, #0]
 8007698:	6869      	ldr	r1, [r5, #4]
 800769a:	68aa      	ldr	r2, [r5, #8]
 800769c:	68eb      	ldr	r3, [r5, #12]
 800769e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076a0:	7c2b      	ldrb	r3, [r5, #16]
 80076a2:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 80076a4:	4ab8      	ldr	r2, [pc, #736]	@ (8007988 <loadMenuTexts+0xc24>)
 80076a6:	4bb9      	ldr	r3, [pc, #740]	@ (800798c <loadMenuTexts+0xc28>)
 80076a8:	4614      	mov	r4, r2
 80076aa:	461d      	mov	r5, r3
 80076ac:	6828      	ldr	r0, [r5, #0]
 80076ae:	6869      	ldr	r1, [r5, #4]
 80076b0:	68aa      	ldr	r2, [r5, #8]
 80076b2:	68eb      	ldr	r3, [r5, #12]
 80076b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076b6:	7c2b      	ldrb	r3, [r5, #16]
 80076b8:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 80076ba:	4ab5      	ldr	r2, [pc, #724]	@ (8007990 <loadMenuTexts+0xc2c>)
 80076bc:	4bb5      	ldr	r3, [pc, #724]	@ (8007994 <loadMenuTexts+0xc30>)
 80076be:	4614      	mov	r4, r2
 80076c0:	461d      	mov	r5, r3
 80076c2:	6828      	ldr	r0, [r5, #0]
 80076c4:	6869      	ldr	r1, [r5, #4]
 80076c6:	68aa      	ldr	r2, [r5, #8]
 80076c8:	68eb      	ldr	r3, [r5, #12]
 80076ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076cc:	7c2b      	ldrb	r3, [r5, #16]
 80076ce:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 80076d0:	4ab1      	ldr	r2, [pc, #708]	@ (8007998 <loadMenuTexts+0xc34>)
 80076d2:	4bb2      	ldr	r3, [pc, #712]	@ (800799c <loadMenuTexts+0xc38>)
 80076d4:	4614      	mov	r4, r2
 80076d6:	461d      	mov	r5, r3
 80076d8:	6828      	ldr	r0, [r5, #0]
 80076da:	6869      	ldr	r1, [r5, #4]
 80076dc:	68aa      	ldr	r2, [r5, #8]
 80076de:	68eb      	ldr	r3, [r5, #12]
 80076e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076e2:	7c2b      	ldrb	r3, [r5, #16]
 80076e4:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 80076e6:	4aae      	ldr	r2, [pc, #696]	@ (80079a0 <loadMenuTexts+0xc3c>)
 80076e8:	4bae      	ldr	r3, [pc, #696]	@ (80079a4 <loadMenuTexts+0xc40>)
 80076ea:	4614      	mov	r4, r2
 80076ec:	461d      	mov	r5, r3
 80076ee:	6828      	ldr	r0, [r5, #0]
 80076f0:	6869      	ldr	r1, [r5, #4]
 80076f2:	68aa      	ldr	r2, [r5, #8]
 80076f4:	68eb      	ldr	r3, [r5, #12]
 80076f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076f8:	7c2b      	ldrb	r3, [r5, #16]
 80076fa:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 80076fc:	4aaa      	ldr	r2, [pc, #680]	@ (80079a8 <loadMenuTexts+0xc44>)
 80076fe:	4bab      	ldr	r3, [pc, #684]	@ (80079ac <loadMenuTexts+0xc48>)
 8007700:	4614      	mov	r4, r2
 8007702:	461d      	mov	r5, r3
 8007704:	6828      	ldr	r0, [r5, #0]
 8007706:	6869      	ldr	r1, [r5, #4]
 8007708:	68aa      	ldr	r2, [r5, #8]
 800770a:	68eb      	ldr	r3, [r5, #12]
 800770c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800770e:	7c2b      	ldrb	r3, [r5, #16]
 8007710:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8007712:	4aa7      	ldr	r2, [pc, #668]	@ (80079b0 <loadMenuTexts+0xc4c>)
 8007714:	4ba7      	ldr	r3, [pc, #668]	@ (80079b4 <loadMenuTexts+0xc50>)
 8007716:	4614      	mov	r4, r2
 8007718:	461d      	mov	r5, r3
 800771a:	6828      	ldr	r0, [r5, #0]
 800771c:	6869      	ldr	r1, [r5, #4]
 800771e:	68aa      	ldr	r2, [r5, #8]
 8007720:	68eb      	ldr	r3, [r5, #12]
 8007722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007724:	7c2b      	ldrb	r3, [r5, #16]
 8007726:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8007728:	4aa3      	ldr	r2, [pc, #652]	@ (80079b8 <loadMenuTexts+0xc54>)
 800772a:	4ba4      	ldr	r3, [pc, #656]	@ (80079bc <loadMenuTexts+0xc58>)
 800772c:	4614      	mov	r4, r2
 800772e:	461d      	mov	r5, r3
 8007730:	6828      	ldr	r0, [r5, #0]
 8007732:	6869      	ldr	r1, [r5, #4]
 8007734:	68aa      	ldr	r2, [r5, #8]
 8007736:	68eb      	ldr	r3, [r5, #12]
 8007738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800773a:	7c2b      	ldrb	r3, [r5, #16]
 800773c:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 800773e:	4aa0      	ldr	r2, [pc, #640]	@ (80079c0 <loadMenuTexts+0xc5c>)
 8007740:	4ba0      	ldr	r3, [pc, #640]	@ (80079c4 <loadMenuTexts+0xc60>)
 8007742:	4614      	mov	r4, r2
 8007744:	461d      	mov	r5, r3
 8007746:	6828      	ldr	r0, [r5, #0]
 8007748:	6869      	ldr	r1, [r5, #4]
 800774a:	68aa      	ldr	r2, [r5, #8]
 800774c:	68eb      	ldr	r3, [r5, #12]
 800774e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007750:	7c2b      	ldrb	r3, [r5, #16]
 8007752:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8007754:	4a9c      	ldr	r2, [pc, #624]	@ (80079c8 <loadMenuTexts+0xc64>)
 8007756:	4b9d      	ldr	r3, [pc, #628]	@ (80079cc <loadMenuTexts+0xc68>)
 8007758:	4614      	mov	r4, r2
 800775a:	461d      	mov	r5, r3
 800775c:	6828      	ldr	r0, [r5, #0]
 800775e:	6869      	ldr	r1, [r5, #4]
 8007760:	68aa      	ldr	r2, [r5, #8]
 8007762:	68eb      	ldr	r3, [r5, #12]
 8007764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007766:	7c2b      	ldrb	r3, [r5, #16]
 8007768:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 800776a:	4a99      	ldr	r2, [pc, #612]	@ (80079d0 <loadMenuTexts+0xc6c>)
 800776c:	4b99      	ldr	r3, [pc, #612]	@ (80079d4 <loadMenuTexts+0xc70>)
 800776e:	4614      	mov	r4, r2
 8007770:	461d      	mov	r5, r3
 8007772:	6828      	ldr	r0, [r5, #0]
 8007774:	6869      	ldr	r1, [r5, #4]
 8007776:	68aa      	ldr	r2, [r5, #8]
 8007778:	68eb      	ldr	r3, [r5, #12]
 800777a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800777c:	7c2b      	ldrb	r3, [r5, #16]
 800777e:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8007780:	4a95      	ldr	r2, [pc, #596]	@ (80079d8 <loadMenuTexts+0xc74>)
 8007782:	4b96      	ldr	r3, [pc, #600]	@ (80079dc <loadMenuTexts+0xc78>)
 8007784:	4614      	mov	r4, r2
 8007786:	461d      	mov	r5, r3
 8007788:	6828      	ldr	r0, [r5, #0]
 800778a:	6869      	ldr	r1, [r5, #4]
 800778c:	68aa      	ldr	r2, [r5, #8]
 800778e:	68eb      	ldr	r3, [r5, #12]
 8007790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007792:	7c2b      	ldrb	r3, [r5, #16]
 8007794:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8007796:	4a92      	ldr	r2, [pc, #584]	@ (80079e0 <loadMenuTexts+0xc7c>)
 8007798:	4b92      	ldr	r3, [pc, #584]	@ (80079e4 <loadMenuTexts+0xc80>)
 800779a:	4614      	mov	r4, r2
 800779c:	461d      	mov	r5, r3
 800779e:	6828      	ldr	r0, [r5, #0]
 80077a0:	6869      	ldr	r1, [r5, #4]
 80077a2:	68aa      	ldr	r2, [r5, #8]
 80077a4:	68eb      	ldr	r3, [r5, #12]
 80077a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077a8:	7c2b      	ldrb	r3, [r5, #16]
 80077aa:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 80077ac:	4a8e      	ldr	r2, [pc, #568]	@ (80079e8 <loadMenuTexts+0xc84>)
 80077ae:	4b8f      	ldr	r3, [pc, #572]	@ (80079ec <loadMenuTexts+0xc88>)
 80077b0:	4614      	mov	r4, r2
 80077b2:	461d      	mov	r5, r3
 80077b4:	6828      	ldr	r0, [r5, #0]
 80077b6:	6869      	ldr	r1, [r5, #4]
 80077b8:	68aa      	ldr	r2, [r5, #8]
 80077ba:	68eb      	ldr	r3, [r5, #12]
 80077bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077be:	7c2b      	ldrb	r3, [r5, #16]
 80077c0:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 80077c2:	4a8b      	ldr	r2, [pc, #556]	@ (80079f0 <loadMenuTexts+0xc8c>)
 80077c4:	4b8b      	ldr	r3, [pc, #556]	@ (80079f4 <loadMenuTexts+0xc90>)
 80077c6:	4614      	mov	r4, r2
 80077c8:	461d      	mov	r5, r3
 80077ca:	6828      	ldr	r0, [r5, #0]
 80077cc:	6869      	ldr	r1, [r5, #4]
 80077ce:	68aa      	ldr	r2, [r5, #8]
 80077d0:	68eb      	ldr	r3, [r5, #12]
 80077d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077d4:	7c2b      	ldrb	r3, [r5, #16]
 80077d6:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 80077d8:	4a87      	ldr	r2, [pc, #540]	@ (80079f8 <loadMenuTexts+0xc94>)
 80077da:	4b88      	ldr	r3, [pc, #544]	@ (80079fc <loadMenuTexts+0xc98>)
 80077dc:	4614      	mov	r4, r2
 80077de:	461d      	mov	r5, r3
 80077e0:	6828      	ldr	r0, [r5, #0]
 80077e2:	6869      	ldr	r1, [r5, #4]
 80077e4:	68aa      	ldr	r2, [r5, #8]
 80077e6:	68eb      	ldr	r3, [r5, #12]
 80077e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077ea:	7c2b      	ldrb	r3, [r5, #16]
 80077ec:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 80077ee:	4a84      	ldr	r2, [pc, #528]	@ (8007a00 <loadMenuTexts+0xc9c>)
 80077f0:	4b84      	ldr	r3, [pc, #528]	@ (8007a04 <loadMenuTexts+0xca0>)
 80077f2:	4614      	mov	r4, r2
 80077f4:	461d      	mov	r5, r3
 80077f6:	6828      	ldr	r0, [r5, #0]
 80077f8:	6869      	ldr	r1, [r5, #4]
 80077fa:	68aa      	ldr	r2, [r5, #8]
 80077fc:	68eb      	ldr	r3, [r5, #12]
 80077fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007800:	7c2b      	ldrb	r3, [r5, #16]
 8007802:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8007804:	4a80      	ldr	r2, [pc, #512]	@ (8007a08 <loadMenuTexts+0xca4>)
 8007806:	4b81      	ldr	r3, [pc, #516]	@ (8007a0c <loadMenuTexts+0xca8>)
 8007808:	4614      	mov	r4, r2
 800780a:	461d      	mov	r5, r3
 800780c:	6828      	ldr	r0, [r5, #0]
 800780e:	6869      	ldr	r1, [r5, #4]
 8007810:	68aa      	ldr	r2, [r5, #8]
 8007812:	68eb      	ldr	r3, [r5, #12]
 8007814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007816:	7c2b      	ldrb	r3, [r5, #16]
 8007818:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 800781a:	4a7d      	ldr	r2, [pc, #500]	@ (8007a10 <loadMenuTexts+0xcac>)
 800781c:	4b7d      	ldr	r3, [pc, #500]	@ (8007a14 <loadMenuTexts+0xcb0>)
 800781e:	4614      	mov	r4, r2
 8007820:	461d      	mov	r5, r3
 8007822:	6828      	ldr	r0, [r5, #0]
 8007824:	6869      	ldr	r1, [r5, #4]
 8007826:	68aa      	ldr	r2, [r5, #8]
 8007828:	68eb      	ldr	r3, [r5, #12]
 800782a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800782c:	7c2b      	ldrb	r3, [r5, #16]
 800782e:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8007830:	4a79      	ldr	r2, [pc, #484]	@ (8007a18 <loadMenuTexts+0xcb4>)
 8007832:	4b7a      	ldr	r3, [pc, #488]	@ (8007a1c <loadMenuTexts+0xcb8>)
 8007834:	4614      	mov	r4, r2
 8007836:	461d      	mov	r5, r3
 8007838:	6828      	ldr	r0, [r5, #0]
 800783a:	6869      	ldr	r1, [r5, #4]
 800783c:	68aa      	ldr	r2, [r5, #8]
 800783e:	68eb      	ldr	r3, [r5, #12]
 8007840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007842:	7c2b      	ldrb	r3, [r5, #16]
 8007844:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8007846:	4a76      	ldr	r2, [pc, #472]	@ (8007a20 <loadMenuTexts+0xcbc>)
 8007848:	4b76      	ldr	r3, [pc, #472]	@ (8007a24 <loadMenuTexts+0xcc0>)
 800784a:	4614      	mov	r4, r2
 800784c:	461d      	mov	r5, r3
 800784e:	6828      	ldr	r0, [r5, #0]
 8007850:	6869      	ldr	r1, [r5, #4]
 8007852:	68aa      	ldr	r2, [r5, #8]
 8007854:	68eb      	ldr	r3, [r5, #12]
 8007856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007858:	7c2b      	ldrb	r3, [r5, #16]
 800785a:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 800785c:	4a72      	ldr	r2, [pc, #456]	@ (8007a28 <loadMenuTexts+0xcc4>)
 800785e:	4b73      	ldr	r3, [pc, #460]	@ (8007a2c <loadMenuTexts+0xcc8>)
 8007860:	4614      	mov	r4, r2
 8007862:	461d      	mov	r5, r3
 8007864:	6828      	ldr	r0, [r5, #0]
 8007866:	6869      	ldr	r1, [r5, #4]
 8007868:	68aa      	ldr	r2, [r5, #8]
 800786a:	68eb      	ldr	r3, [r5, #12]
 800786c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800786e:	7c2b      	ldrb	r3, [r5, #16]
 8007870:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8007872:	4a6f      	ldr	r2, [pc, #444]	@ (8007a30 <loadMenuTexts+0xccc>)
 8007874:	4b6f      	ldr	r3, [pc, #444]	@ (8007a34 <loadMenuTexts+0xcd0>)
 8007876:	4614      	mov	r4, r2
 8007878:	461d      	mov	r5, r3
 800787a:	6828      	ldr	r0, [r5, #0]
 800787c:	6869      	ldr	r1, [r5, #4]
 800787e:	68aa      	ldr	r2, [r5, #8]
 8007880:	68eb      	ldr	r3, [r5, #12]
 8007882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007884:	7c2b      	ldrb	r3, [r5, #16]
 8007886:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8007888:	4a6b      	ldr	r2, [pc, #428]	@ (8007a38 <loadMenuTexts+0xcd4>)
 800788a:	4b6c      	ldr	r3, [pc, #432]	@ (8007a3c <loadMenuTexts+0xcd8>)
 800788c:	4614      	mov	r4, r2
 800788e:	461d      	mov	r5, r3
 8007890:	6828      	ldr	r0, [r5, #0]
 8007892:	6869      	ldr	r1, [r5, #4]
 8007894:	68aa      	ldr	r2, [r5, #8]
 8007896:	68eb      	ldr	r3, [r5, #12]
 8007898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800789a:	7c2b      	ldrb	r3, [r5, #16]
 800789c:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 800789e:	4a68      	ldr	r2, [pc, #416]	@ (8007a40 <loadMenuTexts+0xcdc>)
 80078a0:	4b68      	ldr	r3, [pc, #416]	@ (8007a44 <loadMenuTexts+0xce0>)
 80078a2:	4614      	mov	r4, r2
 80078a4:	461d      	mov	r5, r3
 80078a6:	6828      	ldr	r0, [r5, #0]
 80078a8:	6869      	ldr	r1, [r5, #4]
 80078aa:	68aa      	ldr	r2, [r5, #8]
 80078ac:	68eb      	ldr	r3, [r5, #12]
 80078ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078b0:	7c2b      	ldrb	r3, [r5, #16]
 80078b2:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 80078b4:	4a64      	ldr	r2, [pc, #400]	@ (8007a48 <loadMenuTexts+0xce4>)
 80078b6:	4b65      	ldr	r3, [pc, #404]	@ (8007a4c <loadMenuTexts+0xce8>)
 80078b8:	4614      	mov	r4, r2
 80078ba:	461d      	mov	r5, r3
 80078bc:	6828      	ldr	r0, [r5, #0]
 80078be:	6869      	ldr	r1, [r5, #4]
 80078c0:	68aa      	ldr	r2, [r5, #8]
 80078c2:	68eb      	ldr	r3, [r5, #12]
 80078c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078c6:	7c2b      	ldrb	r3, [r5, #16]
 80078c8:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 80078ca:	4a61      	ldr	r2, [pc, #388]	@ (8007a50 <loadMenuTexts+0xcec>)
 80078cc:	4b61      	ldr	r3, [pc, #388]	@ (8007a54 <loadMenuTexts+0xcf0>)
 80078ce:	4614      	mov	r4, r2
 80078d0:	461d      	mov	r5, r3
 80078d2:	6828      	ldr	r0, [r5, #0]
 80078d4:	6869      	ldr	r1, [r5, #4]
 80078d6:	68aa      	ldr	r2, [r5, #8]
 80078d8:	68eb      	ldr	r3, [r5, #12]
 80078da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078dc:	7c2b      	ldrb	r3, [r5, #16]
 80078de:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 80078e0:	4a5d      	ldr	r2, [pc, #372]	@ (8007a58 <loadMenuTexts+0xcf4>)
 80078e2:	4b5e      	ldr	r3, [pc, #376]	@ (8007a5c <loadMenuTexts+0xcf8>)
 80078e4:	4614      	mov	r4, r2
 80078e6:	461d      	mov	r5, r3
 80078e8:	6828      	ldr	r0, [r5, #0]
 80078ea:	6869      	ldr	r1, [r5, #4]
 80078ec:	68aa      	ldr	r2, [r5, #8]
 80078ee:	68eb      	ldr	r3, [r5, #12]
 80078f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078f2:	7c2b      	ldrb	r3, [r5, #16]
 80078f4:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 80078f6:	4a5a      	ldr	r2, [pc, #360]	@ (8007a60 <loadMenuTexts+0xcfc>)
 80078f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007a64 <loadMenuTexts+0xd00>)
 80078fa:	4614      	mov	r4, r2
 80078fc:	461d      	mov	r5, r3
 80078fe:	6828      	ldr	r0, [r5, #0]
 8007900:	6869      	ldr	r1, [r5, #4]
 8007902:	68aa      	ldr	r2, [r5, #8]
 8007904:	68eb      	ldr	r3, [r5, #12]
 8007906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007908:	7c2b      	ldrb	r3, [r5, #16]
 800790a:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 800790c:	4a56      	ldr	r2, [pc, #344]	@ (8007a68 <loadMenuTexts+0xd04>)
 800790e:	4b57      	ldr	r3, [pc, #348]	@ (8007a6c <loadMenuTexts+0xd08>)
 8007910:	4614      	mov	r4, r2
 8007912:	461d      	mov	r5, r3
 8007914:	6828      	ldr	r0, [r5, #0]
 8007916:	6869      	ldr	r1, [r5, #4]
 8007918:	68aa      	ldr	r2, [r5, #8]
 800791a:	68eb      	ldr	r3, [r5, #12]
 800791c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800791e:	7c2b      	ldrb	r3, [r5, #16]
 8007920:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8007922:	4a53      	ldr	r2, [pc, #332]	@ (8007a70 <loadMenuTexts+0xd0c>)
 8007924:	4b53      	ldr	r3, [pc, #332]	@ (8007a74 <loadMenuTexts+0xd10>)
 8007926:	4614      	mov	r4, r2
 8007928:	461d      	mov	r5, r3
 800792a:	6828      	ldr	r0, [r5, #0]
 800792c:	6869      	ldr	r1, [r5, #4]
 800792e:	68aa      	ldr	r2, [r5, #8]
 8007930:	68eb      	ldr	r3, [r5, #12]
 8007932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007934:	7c2b      	ldrb	r3, [r5, #16]
 8007936:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8007938:	4a4f      	ldr	r2, [pc, #316]	@ (8007a78 <loadMenuTexts+0xd14>)
 800793a:	4b50      	ldr	r3, [pc, #320]	@ (8007a7c <loadMenuTexts+0xd18>)
 800793c:	4614      	mov	r4, r2
 800793e:	461d      	mov	r5, r3
 8007940:	6828      	ldr	r0, [r5, #0]
 8007942:	6869      	ldr	r1, [r5, #4]
 8007944:	68aa      	ldr	r2, [r5, #8]
 8007946:	68eb      	ldr	r3, [r5, #12]
 8007948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800794a:	7c2b      	ldrb	r3, [r5, #16]
 800794c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 800794e:	4a4c      	ldr	r2, [pc, #304]	@ (8007a80 <loadMenuTexts+0xd1c>)
 8007950:	4b4c      	ldr	r3, [pc, #304]	@ (8007a84 <loadMenuTexts+0xd20>)
 8007952:	4614      	mov	r4, r2
 8007954:	461d      	mov	r5, r3
 8007956:	6828      	ldr	r0, [r5, #0]
 8007958:	6869      	ldr	r1, [r5, #4]
 800795a:	68aa      	ldr	r2, [r5, #8]
 800795c:	68eb      	ldr	r3, [r5, #12]
 800795e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007960:	7c2b      	ldrb	r3, [r5, #16]
 8007962:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8007964:	4a48      	ldr	r2, [pc, #288]	@ (8007a88 <loadMenuTexts+0xd24>)
 8007966:	e091      	b.n	8007a8c <loadMenuTexts+0xd28>
 8007968:	20000e08 	.word	0x20000e08
 800796c:	20000698 	.word	0x20000698
 8007970:	20000e1c 	.word	0x20000e1c
 8007974:	200006ac 	.word	0x200006ac
 8007978:	20000e30 	.word	0x20000e30
 800797c:	200006c0 	.word	0x200006c0
 8007980:	20000e44 	.word	0x20000e44
 8007984:	200006d4 	.word	0x200006d4
 8007988:	20000e58 	.word	0x20000e58
 800798c:	200006e8 	.word	0x200006e8
 8007990:	20000e6c 	.word	0x20000e6c
 8007994:	200006fc 	.word	0x200006fc
 8007998:	20000e80 	.word	0x20000e80
 800799c:	20000710 	.word	0x20000710
 80079a0:	20000e94 	.word	0x20000e94
 80079a4:	20000724 	.word	0x20000724
 80079a8:	20000ea8 	.word	0x20000ea8
 80079ac:	20000738 	.word	0x20000738
 80079b0:	20000ebc 	.word	0x20000ebc
 80079b4:	2000074c 	.word	0x2000074c
 80079b8:	20000ed0 	.word	0x20000ed0
 80079bc:	20000760 	.word	0x20000760
 80079c0:	20000ee4 	.word	0x20000ee4
 80079c4:	20000774 	.word	0x20000774
 80079c8:	20000ef8 	.word	0x20000ef8
 80079cc:	20000788 	.word	0x20000788
 80079d0:	20000f0c 	.word	0x20000f0c
 80079d4:	2000079c 	.word	0x2000079c
 80079d8:	20000f20 	.word	0x20000f20
 80079dc:	200007b0 	.word	0x200007b0
 80079e0:	20000f34 	.word	0x20000f34
 80079e4:	200007c4 	.word	0x200007c4
 80079e8:	20000f48 	.word	0x20000f48
 80079ec:	200007d8 	.word	0x200007d8
 80079f0:	20000f5c 	.word	0x20000f5c
 80079f4:	200007ec 	.word	0x200007ec
 80079f8:	20000f70 	.word	0x20000f70
 80079fc:	20000800 	.word	0x20000800
 8007a00:	20000f84 	.word	0x20000f84
 8007a04:	20000814 	.word	0x20000814
 8007a08:	20000f98 	.word	0x20000f98
 8007a0c:	20000828 	.word	0x20000828
 8007a10:	20000fac 	.word	0x20000fac
 8007a14:	2000083c 	.word	0x2000083c
 8007a18:	20000fc0 	.word	0x20000fc0
 8007a1c:	20000850 	.word	0x20000850
 8007a20:	20000fd4 	.word	0x20000fd4
 8007a24:	20000864 	.word	0x20000864
 8007a28:	20000fe8 	.word	0x20000fe8
 8007a2c:	20000878 	.word	0x20000878
 8007a30:	20000ffc 	.word	0x20000ffc
 8007a34:	2000088c 	.word	0x2000088c
 8007a38:	20001010 	.word	0x20001010
 8007a3c:	200008a0 	.word	0x200008a0
 8007a40:	20001024 	.word	0x20001024
 8007a44:	200008b4 	.word	0x200008b4
 8007a48:	20001038 	.word	0x20001038
 8007a4c:	200008c8 	.word	0x200008c8
 8007a50:	2000104c 	.word	0x2000104c
 8007a54:	200008dc 	.word	0x200008dc
 8007a58:	20001060 	.word	0x20001060
 8007a5c:	200008f0 	.word	0x200008f0
 8007a60:	20001074 	.word	0x20001074
 8007a64:	20000904 	.word	0x20000904
 8007a68:	20001088 	.word	0x20001088
 8007a6c:	20000918 	.word	0x20000918
 8007a70:	2000109c 	.word	0x2000109c
 8007a74:	2000092c 	.word	0x2000092c
 8007a78:	200010b0 	.word	0x200010b0
 8007a7c:	20000940 	.word	0x20000940
 8007a80:	200010c4 	.word	0x200010c4
 8007a84:	20000954 	.word	0x20000954
 8007a88:	200010d8 	.word	0x200010d8
 8007a8c:	4bc7      	ldr	r3, [pc, #796]	@ (8007dac <loadMenuTexts+0x1048>)
 8007a8e:	4614      	mov	r4, r2
 8007a90:	461d      	mov	r5, r3
 8007a92:	6828      	ldr	r0, [r5, #0]
 8007a94:	6869      	ldr	r1, [r5, #4]
 8007a96:	68aa      	ldr	r2, [r5, #8]
 8007a98:	68eb      	ldr	r3, [r5, #12]
 8007a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a9c:	7c2b      	ldrb	r3, [r5, #16]
 8007a9e:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8007aa0:	4ac3      	ldr	r2, [pc, #780]	@ (8007db0 <loadMenuTexts+0x104c>)
 8007aa2:	4bc4      	ldr	r3, [pc, #784]	@ (8007db4 <loadMenuTexts+0x1050>)
 8007aa4:	4614      	mov	r4, r2
 8007aa6:	461d      	mov	r5, r3
 8007aa8:	6828      	ldr	r0, [r5, #0]
 8007aaa:	6869      	ldr	r1, [r5, #4]
 8007aac:	68aa      	ldr	r2, [r5, #8]
 8007aae:	68eb      	ldr	r3, [r5, #12]
 8007ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ab2:	7c2b      	ldrb	r3, [r5, #16]
 8007ab4:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8007ab6:	4ac0      	ldr	r2, [pc, #768]	@ (8007db8 <loadMenuTexts+0x1054>)
 8007ab8:	4bc0      	ldr	r3, [pc, #768]	@ (8007dbc <loadMenuTexts+0x1058>)
 8007aba:	4614      	mov	r4, r2
 8007abc:	461d      	mov	r5, r3
 8007abe:	6828      	ldr	r0, [r5, #0]
 8007ac0:	6869      	ldr	r1, [r5, #4]
 8007ac2:	68aa      	ldr	r2, [r5, #8]
 8007ac4:	68eb      	ldr	r3, [r5, #12]
 8007ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ac8:	7c2b      	ldrb	r3, [r5, #16]
 8007aca:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8007acc:	4abc      	ldr	r2, [pc, #752]	@ (8007dc0 <loadMenuTexts+0x105c>)
 8007ace:	4bbd      	ldr	r3, [pc, #756]	@ (8007dc4 <loadMenuTexts+0x1060>)
 8007ad0:	4614      	mov	r4, r2
 8007ad2:	461d      	mov	r5, r3
 8007ad4:	6828      	ldr	r0, [r5, #0]
 8007ad6:	6869      	ldr	r1, [r5, #4]
 8007ad8:	68aa      	ldr	r2, [r5, #8]
 8007ada:	68eb      	ldr	r3, [r5, #12]
 8007adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ade:	7c2b      	ldrb	r3, [r5, #16]
 8007ae0:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8007ae2:	4ab9      	ldr	r2, [pc, #740]	@ (8007dc8 <loadMenuTexts+0x1064>)
 8007ae4:	4bb9      	ldr	r3, [pc, #740]	@ (8007dcc <loadMenuTexts+0x1068>)
 8007ae6:	4614      	mov	r4, r2
 8007ae8:	461d      	mov	r5, r3
 8007aea:	6828      	ldr	r0, [r5, #0]
 8007aec:	6869      	ldr	r1, [r5, #4]
 8007aee:	68aa      	ldr	r2, [r5, #8]
 8007af0:	68eb      	ldr	r3, [r5, #12]
 8007af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007af4:	7c2b      	ldrb	r3, [r5, #16]
 8007af6:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8007af8:	4ab5      	ldr	r2, [pc, #724]	@ (8007dd0 <loadMenuTexts+0x106c>)
 8007afa:	4bb6      	ldr	r3, [pc, #728]	@ (8007dd4 <loadMenuTexts+0x1070>)
 8007afc:	4614      	mov	r4, r2
 8007afe:	461d      	mov	r5, r3
 8007b00:	6828      	ldr	r0, [r5, #0]
 8007b02:	6869      	ldr	r1, [r5, #4]
 8007b04:	68aa      	ldr	r2, [r5, #8]
 8007b06:	68eb      	ldr	r3, [r5, #12]
 8007b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b0a:	7c2b      	ldrb	r3, [r5, #16]
 8007b0c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8007b0e:	4ab2      	ldr	r2, [pc, #712]	@ (8007dd8 <loadMenuTexts+0x1074>)
 8007b10:	4bb2      	ldr	r3, [pc, #712]	@ (8007ddc <loadMenuTexts+0x1078>)
 8007b12:	4614      	mov	r4, r2
 8007b14:	461d      	mov	r5, r3
 8007b16:	6828      	ldr	r0, [r5, #0]
 8007b18:	6869      	ldr	r1, [r5, #4]
 8007b1a:	68aa      	ldr	r2, [r5, #8]
 8007b1c:	68eb      	ldr	r3, [r5, #12]
 8007b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b20:	7c2b      	ldrb	r3, [r5, #16]
 8007b22:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8007b24:	4aae      	ldr	r2, [pc, #696]	@ (8007de0 <loadMenuTexts+0x107c>)
 8007b26:	4baf      	ldr	r3, [pc, #700]	@ (8007de4 <loadMenuTexts+0x1080>)
 8007b28:	4614      	mov	r4, r2
 8007b2a:	461d      	mov	r5, r3
 8007b2c:	6828      	ldr	r0, [r5, #0]
 8007b2e:	6869      	ldr	r1, [r5, #4]
 8007b30:	68aa      	ldr	r2, [r5, #8]
 8007b32:	68eb      	ldr	r3, [r5, #12]
 8007b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b36:	7c2b      	ldrb	r3, [r5, #16]
 8007b38:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8007b3a:	4aab      	ldr	r2, [pc, #684]	@ (8007de8 <loadMenuTexts+0x1084>)
 8007b3c:	4bab      	ldr	r3, [pc, #684]	@ (8007dec <loadMenuTexts+0x1088>)
 8007b3e:	4614      	mov	r4, r2
 8007b40:	461d      	mov	r5, r3
 8007b42:	6828      	ldr	r0, [r5, #0]
 8007b44:	6869      	ldr	r1, [r5, #4]
 8007b46:	68aa      	ldr	r2, [r5, #8]
 8007b48:	68eb      	ldr	r3, [r5, #12]
 8007b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b4c:	7c2b      	ldrb	r3, [r5, #16]
 8007b4e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8007b50:	4aa7      	ldr	r2, [pc, #668]	@ (8007df0 <loadMenuTexts+0x108c>)
 8007b52:	4ba8      	ldr	r3, [pc, #672]	@ (8007df4 <loadMenuTexts+0x1090>)
 8007b54:	4614      	mov	r4, r2
 8007b56:	461d      	mov	r5, r3
 8007b58:	6828      	ldr	r0, [r5, #0]
 8007b5a:	6869      	ldr	r1, [r5, #4]
 8007b5c:	68aa      	ldr	r2, [r5, #8]
 8007b5e:	68eb      	ldr	r3, [r5, #12]
 8007b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b62:	7c2b      	ldrb	r3, [r5, #16]
 8007b64:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8007b66:	4aa4      	ldr	r2, [pc, #656]	@ (8007df8 <loadMenuTexts+0x1094>)
 8007b68:	4ba4      	ldr	r3, [pc, #656]	@ (8007dfc <loadMenuTexts+0x1098>)
 8007b6a:	4614      	mov	r4, r2
 8007b6c:	461d      	mov	r5, r3
 8007b6e:	6828      	ldr	r0, [r5, #0]
 8007b70:	6869      	ldr	r1, [r5, #4]
 8007b72:	68aa      	ldr	r2, [r5, #8]
 8007b74:	68eb      	ldr	r3, [r5, #12]
 8007b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b78:	7c2b      	ldrb	r3, [r5, #16]
 8007b7a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8007b7c:	4aa0      	ldr	r2, [pc, #640]	@ (8007e00 <loadMenuTexts+0x109c>)
 8007b7e:	4ba1      	ldr	r3, [pc, #644]	@ (8007e04 <loadMenuTexts+0x10a0>)
 8007b80:	4614      	mov	r4, r2
 8007b82:	461d      	mov	r5, r3
 8007b84:	6828      	ldr	r0, [r5, #0]
 8007b86:	6869      	ldr	r1, [r5, #4]
 8007b88:	68aa      	ldr	r2, [r5, #8]
 8007b8a:	68eb      	ldr	r3, [r5, #12]
 8007b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b8e:	7c2b      	ldrb	r3, [r5, #16]
 8007b90:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8007b92:	4a9d      	ldr	r2, [pc, #628]	@ (8007e08 <loadMenuTexts+0x10a4>)
 8007b94:	4b9d      	ldr	r3, [pc, #628]	@ (8007e0c <loadMenuTexts+0x10a8>)
 8007b96:	4614      	mov	r4, r2
 8007b98:	461d      	mov	r5, r3
 8007b9a:	6828      	ldr	r0, [r5, #0]
 8007b9c:	6869      	ldr	r1, [r5, #4]
 8007b9e:	68aa      	ldr	r2, [r5, #8]
 8007ba0:	68eb      	ldr	r3, [r5, #12]
 8007ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ba4:	7c2b      	ldrb	r3, [r5, #16]
 8007ba6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8007ba8:	4a99      	ldr	r2, [pc, #612]	@ (8007e10 <loadMenuTexts+0x10ac>)
 8007baa:	4b9a      	ldr	r3, [pc, #616]	@ (8007e14 <loadMenuTexts+0x10b0>)
 8007bac:	4614      	mov	r4, r2
 8007bae:	461d      	mov	r5, r3
 8007bb0:	6828      	ldr	r0, [r5, #0]
 8007bb2:	6869      	ldr	r1, [r5, #4]
 8007bb4:	68aa      	ldr	r2, [r5, #8]
 8007bb6:	68eb      	ldr	r3, [r5, #12]
 8007bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bba:	7c2b      	ldrb	r3, [r5, #16]
 8007bbc:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8007bbe:	4a96      	ldr	r2, [pc, #600]	@ (8007e18 <loadMenuTexts+0x10b4>)
 8007bc0:	4b96      	ldr	r3, [pc, #600]	@ (8007e1c <loadMenuTexts+0x10b8>)
 8007bc2:	4614      	mov	r4, r2
 8007bc4:	461d      	mov	r5, r3
 8007bc6:	6828      	ldr	r0, [r5, #0]
 8007bc8:	6869      	ldr	r1, [r5, #4]
 8007bca:	68aa      	ldr	r2, [r5, #8]
 8007bcc:	68eb      	ldr	r3, [r5, #12]
 8007bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bd0:	7c2b      	ldrb	r3, [r5, #16]
 8007bd2:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8007bd4:	4a92      	ldr	r2, [pc, #584]	@ (8007e20 <loadMenuTexts+0x10bc>)
 8007bd6:	4b93      	ldr	r3, [pc, #588]	@ (8007e24 <loadMenuTexts+0x10c0>)
 8007bd8:	4614      	mov	r4, r2
 8007bda:	461d      	mov	r5, r3
 8007bdc:	6828      	ldr	r0, [r5, #0]
 8007bde:	6869      	ldr	r1, [r5, #4]
 8007be0:	68aa      	ldr	r2, [r5, #8]
 8007be2:	68eb      	ldr	r3, [r5, #12]
 8007be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007be6:	7c2b      	ldrb	r3, [r5, #16]
 8007be8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8007bea:	4a8f      	ldr	r2, [pc, #572]	@ (8007e28 <loadMenuTexts+0x10c4>)
 8007bec:	4b8f      	ldr	r3, [pc, #572]	@ (8007e2c <loadMenuTexts+0x10c8>)
 8007bee:	4614      	mov	r4, r2
 8007bf0:	461d      	mov	r5, r3
 8007bf2:	6828      	ldr	r0, [r5, #0]
 8007bf4:	6869      	ldr	r1, [r5, #4]
 8007bf6:	68aa      	ldr	r2, [r5, #8]
 8007bf8:	68eb      	ldr	r3, [r5, #12]
 8007bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bfc:	7c2b      	ldrb	r3, [r5, #16]
 8007bfe:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8007c00:	4a8b      	ldr	r2, [pc, #556]	@ (8007e30 <loadMenuTexts+0x10cc>)
 8007c02:	4b8c      	ldr	r3, [pc, #560]	@ (8007e34 <loadMenuTexts+0x10d0>)
 8007c04:	4614      	mov	r4, r2
 8007c06:	461d      	mov	r5, r3
 8007c08:	6828      	ldr	r0, [r5, #0]
 8007c0a:	6869      	ldr	r1, [r5, #4]
 8007c0c:	68aa      	ldr	r2, [r5, #8]
 8007c0e:	68eb      	ldr	r3, [r5, #12]
 8007c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c12:	7c2b      	ldrb	r3, [r5, #16]
 8007c14:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8007c16:	4a88      	ldr	r2, [pc, #544]	@ (8007e38 <loadMenuTexts+0x10d4>)
 8007c18:	4b88      	ldr	r3, [pc, #544]	@ (8007e3c <loadMenuTexts+0x10d8>)
 8007c1a:	4614      	mov	r4, r2
 8007c1c:	461d      	mov	r5, r3
 8007c1e:	6828      	ldr	r0, [r5, #0]
 8007c20:	6869      	ldr	r1, [r5, #4]
 8007c22:	68aa      	ldr	r2, [r5, #8]
 8007c24:	68eb      	ldr	r3, [r5, #12]
 8007c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c28:	7c2b      	ldrb	r3, [r5, #16]
 8007c2a:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8007c2c:	4a84      	ldr	r2, [pc, #528]	@ (8007e40 <loadMenuTexts+0x10dc>)
 8007c2e:	4b85      	ldr	r3, [pc, #532]	@ (8007e44 <loadMenuTexts+0x10e0>)
 8007c30:	4614      	mov	r4, r2
 8007c32:	461d      	mov	r5, r3
 8007c34:	6828      	ldr	r0, [r5, #0]
 8007c36:	6869      	ldr	r1, [r5, #4]
 8007c38:	68aa      	ldr	r2, [r5, #8]
 8007c3a:	68eb      	ldr	r3, [r5, #12]
 8007c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c3e:	7c2b      	ldrb	r3, [r5, #16]
 8007c40:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8007c42:	4a81      	ldr	r2, [pc, #516]	@ (8007e48 <loadMenuTexts+0x10e4>)
 8007c44:	4b81      	ldr	r3, [pc, #516]	@ (8007e4c <loadMenuTexts+0x10e8>)
 8007c46:	4614      	mov	r4, r2
 8007c48:	461d      	mov	r5, r3
 8007c4a:	6828      	ldr	r0, [r5, #0]
 8007c4c:	6869      	ldr	r1, [r5, #4]
 8007c4e:	68aa      	ldr	r2, [r5, #8]
 8007c50:	68eb      	ldr	r3, [r5, #12]
 8007c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c54:	7c2b      	ldrb	r3, [r5, #16]
 8007c56:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8007c58:	4a7d      	ldr	r2, [pc, #500]	@ (8007e50 <loadMenuTexts+0x10ec>)
 8007c5a:	4b7e      	ldr	r3, [pc, #504]	@ (8007e54 <loadMenuTexts+0x10f0>)
 8007c5c:	4614      	mov	r4, r2
 8007c5e:	461d      	mov	r5, r3
 8007c60:	6828      	ldr	r0, [r5, #0]
 8007c62:	6869      	ldr	r1, [r5, #4]
 8007c64:	68aa      	ldr	r2, [r5, #8]
 8007c66:	68eb      	ldr	r3, [r5, #12]
 8007c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c6a:	7c2b      	ldrb	r3, [r5, #16]
 8007c6c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8007c6e:	4a7a      	ldr	r2, [pc, #488]	@ (8007e58 <loadMenuTexts+0x10f4>)
 8007c70:	4b7a      	ldr	r3, [pc, #488]	@ (8007e5c <loadMenuTexts+0x10f8>)
 8007c72:	4614      	mov	r4, r2
 8007c74:	461d      	mov	r5, r3
 8007c76:	6828      	ldr	r0, [r5, #0]
 8007c78:	6869      	ldr	r1, [r5, #4]
 8007c7a:	68aa      	ldr	r2, [r5, #8]
 8007c7c:	68eb      	ldr	r3, [r5, #12]
 8007c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c80:	7c2b      	ldrb	r3, [r5, #16]
 8007c82:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8007c84:	4a76      	ldr	r2, [pc, #472]	@ (8007e60 <loadMenuTexts+0x10fc>)
 8007c86:	4b77      	ldr	r3, [pc, #476]	@ (8007e64 <loadMenuTexts+0x1100>)
 8007c88:	4614      	mov	r4, r2
 8007c8a:	461d      	mov	r5, r3
 8007c8c:	6828      	ldr	r0, [r5, #0]
 8007c8e:	6869      	ldr	r1, [r5, #4]
 8007c90:	68aa      	ldr	r2, [r5, #8]
 8007c92:	68eb      	ldr	r3, [r5, #12]
 8007c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c96:	7c2b      	ldrb	r3, [r5, #16]
 8007c98:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8007c9a:	4a73      	ldr	r2, [pc, #460]	@ (8007e68 <loadMenuTexts+0x1104>)
 8007c9c:	4b73      	ldr	r3, [pc, #460]	@ (8007e6c <loadMenuTexts+0x1108>)
 8007c9e:	4614      	mov	r4, r2
 8007ca0:	461d      	mov	r5, r3
 8007ca2:	6828      	ldr	r0, [r5, #0]
 8007ca4:	6869      	ldr	r1, [r5, #4]
 8007ca6:	68aa      	ldr	r2, [r5, #8]
 8007ca8:	68eb      	ldr	r3, [r5, #12]
 8007caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cac:	7c2b      	ldrb	r3, [r5, #16]
 8007cae:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8007cb0:	4a6f      	ldr	r2, [pc, #444]	@ (8007e70 <loadMenuTexts+0x110c>)
 8007cb2:	4b70      	ldr	r3, [pc, #448]	@ (8007e74 <loadMenuTexts+0x1110>)
 8007cb4:	4614      	mov	r4, r2
 8007cb6:	461d      	mov	r5, r3
 8007cb8:	6828      	ldr	r0, [r5, #0]
 8007cba:	6869      	ldr	r1, [r5, #4]
 8007cbc:	68aa      	ldr	r2, [r5, #8]
 8007cbe:	68eb      	ldr	r3, [r5, #12]
 8007cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cc2:	7c2b      	ldrb	r3, [r5, #16]
 8007cc4:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8007cc6:	4a6c      	ldr	r2, [pc, #432]	@ (8007e78 <loadMenuTexts+0x1114>)
 8007cc8:	4b6c      	ldr	r3, [pc, #432]	@ (8007e7c <loadMenuTexts+0x1118>)
 8007cca:	4614      	mov	r4, r2
 8007ccc:	461d      	mov	r5, r3
 8007cce:	6828      	ldr	r0, [r5, #0]
 8007cd0:	6869      	ldr	r1, [r5, #4]
 8007cd2:	68aa      	ldr	r2, [r5, #8]
 8007cd4:	68eb      	ldr	r3, [r5, #12]
 8007cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cd8:	7c2b      	ldrb	r3, [r5, #16]
 8007cda:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8007cdc:	4a68      	ldr	r2, [pc, #416]	@ (8007e80 <loadMenuTexts+0x111c>)
 8007cde:	4b69      	ldr	r3, [pc, #420]	@ (8007e84 <loadMenuTexts+0x1120>)
 8007ce0:	4614      	mov	r4, r2
 8007ce2:	461d      	mov	r5, r3
 8007ce4:	6828      	ldr	r0, [r5, #0]
 8007ce6:	6869      	ldr	r1, [r5, #4]
 8007ce8:	68aa      	ldr	r2, [r5, #8]
 8007cea:	68eb      	ldr	r3, [r5, #12]
 8007cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cee:	7c2b      	ldrb	r3, [r5, #16]
 8007cf0:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 8007cf2:	4a65      	ldr	r2, [pc, #404]	@ (8007e88 <loadMenuTexts+0x1124>)
 8007cf4:	4b65      	ldr	r3, [pc, #404]	@ (8007e8c <loadMenuTexts+0x1128>)
 8007cf6:	4614      	mov	r4, r2
 8007cf8:	461d      	mov	r5, r3
 8007cfa:	6828      	ldr	r0, [r5, #0]
 8007cfc:	6869      	ldr	r1, [r5, #4]
 8007cfe:	68aa      	ldr	r2, [r5, #8]
 8007d00:	68eb      	ldr	r3, [r5, #12]
 8007d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d04:	7c2b      	ldrb	r3, [r5, #16]
 8007d06:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8007d08:	4a61      	ldr	r2, [pc, #388]	@ (8007e90 <loadMenuTexts+0x112c>)
 8007d0a:	4b62      	ldr	r3, [pc, #392]	@ (8007e94 <loadMenuTexts+0x1130>)
 8007d0c:	4614      	mov	r4, r2
 8007d0e:	461d      	mov	r5, r3
 8007d10:	6828      	ldr	r0, [r5, #0]
 8007d12:	6869      	ldr	r1, [r5, #4]
 8007d14:	68aa      	ldr	r2, [r5, #8]
 8007d16:	68eb      	ldr	r3, [r5, #12]
 8007d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d1a:	7c2b      	ldrb	r3, [r5, #16]
 8007d1c:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 8007d1e:	4a5e      	ldr	r2, [pc, #376]	@ (8007e98 <loadMenuTexts+0x1134>)
 8007d20:	4b5e      	ldr	r3, [pc, #376]	@ (8007e9c <loadMenuTexts+0x1138>)
 8007d22:	4614      	mov	r4, r2
 8007d24:	461d      	mov	r5, r3
 8007d26:	6828      	ldr	r0, [r5, #0]
 8007d28:	6869      	ldr	r1, [r5, #4]
 8007d2a:	68aa      	ldr	r2, [r5, #8]
 8007d2c:	68eb      	ldr	r3, [r5, #12]
 8007d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d30:	7c2b      	ldrb	r3, [r5, #16]
 8007d32:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 8007d34:	4a5a      	ldr	r2, [pc, #360]	@ (8007ea0 <loadMenuTexts+0x113c>)
 8007d36:	4b5b      	ldr	r3, [pc, #364]	@ (8007ea4 <loadMenuTexts+0x1140>)
 8007d38:	4614      	mov	r4, r2
 8007d3a:	461d      	mov	r5, r3
 8007d3c:	6828      	ldr	r0, [r5, #0]
 8007d3e:	6869      	ldr	r1, [r5, #4]
 8007d40:	68aa      	ldr	r2, [r5, #8]
 8007d42:	68eb      	ldr	r3, [r5, #12]
 8007d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d46:	7c2b      	ldrb	r3, [r5, #16]
 8007d48:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 8007d4a:	4a57      	ldr	r2, [pc, #348]	@ (8007ea8 <loadMenuTexts+0x1144>)
 8007d4c:	4b57      	ldr	r3, [pc, #348]	@ (8007eac <loadMenuTexts+0x1148>)
 8007d4e:	4614      	mov	r4, r2
 8007d50:	461d      	mov	r5, r3
 8007d52:	6828      	ldr	r0, [r5, #0]
 8007d54:	6869      	ldr	r1, [r5, #4]
 8007d56:	68aa      	ldr	r2, [r5, #8]
 8007d58:	68eb      	ldr	r3, [r5, #12]
 8007d5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d5c:	7c2b      	ldrb	r3, [r5, #16]
 8007d5e:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8007d60:	4a53      	ldr	r2, [pc, #332]	@ (8007eb0 <loadMenuTexts+0x114c>)
 8007d62:	4b54      	ldr	r3, [pc, #336]	@ (8007eb4 <loadMenuTexts+0x1150>)
 8007d64:	4614      	mov	r4, r2
 8007d66:	461d      	mov	r5, r3
 8007d68:	6828      	ldr	r0, [r5, #0]
 8007d6a:	6869      	ldr	r1, [r5, #4]
 8007d6c:	68aa      	ldr	r2, [r5, #8]
 8007d6e:	68eb      	ldr	r3, [r5, #12]
 8007d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d72:	7c2b      	ldrb	r3, [r5, #16]
 8007d74:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 8007d76:	4a50      	ldr	r2, [pc, #320]	@ (8007eb8 <loadMenuTexts+0x1154>)
 8007d78:	4b50      	ldr	r3, [pc, #320]	@ (8007ebc <loadMenuTexts+0x1158>)
 8007d7a:	4614      	mov	r4, r2
 8007d7c:	461d      	mov	r5, r3
 8007d7e:	6828      	ldr	r0, [r5, #0]
 8007d80:	6869      	ldr	r1, [r5, #4]
 8007d82:	68aa      	ldr	r2, [r5, #8]
 8007d84:	68eb      	ldr	r3, [r5, #12]
 8007d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d88:	7c2b      	ldrb	r3, [r5, #16]
 8007d8a:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 8007d8c:	4a4c      	ldr	r2, [pc, #304]	@ (8007ec0 <loadMenuTexts+0x115c>)
 8007d8e:	4b4d      	ldr	r3, [pc, #308]	@ (8007ec4 <loadMenuTexts+0x1160>)
 8007d90:	4614      	mov	r4, r2
 8007d92:	461d      	mov	r5, r3
 8007d94:	6828      	ldr	r0, [r5, #0]
 8007d96:	6869      	ldr	r1, [r5, #4]
 8007d98:	68aa      	ldr	r2, [r5, #8]
 8007d9a:	68eb      	ldr	r3, [r5, #12]
 8007d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d9e:	7c2b      	ldrb	r3, [r5, #16]
 8007da0:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 8007da2:	4a49      	ldr	r2, [pc, #292]	@ (8007ec8 <loadMenuTexts+0x1164>)
 8007da4:	4b49      	ldr	r3, [pc, #292]	@ (8007ecc <loadMenuTexts+0x1168>)
 8007da6:	4614      	mov	r4, r2
 8007da8:	461d      	mov	r5, r3
 8007daa:	e091      	b.n	8007ed0 <loadMenuTexts+0x116c>
 8007dac:	20000968 	.word	0x20000968
 8007db0:	200010ec 	.word	0x200010ec
 8007db4:	2000097c 	.word	0x2000097c
 8007db8:	20001100 	.word	0x20001100
 8007dbc:	20000990 	.word	0x20000990
 8007dc0:	20001114 	.word	0x20001114
 8007dc4:	200009a4 	.word	0x200009a4
 8007dc8:	20001128 	.word	0x20001128
 8007dcc:	200009b8 	.word	0x200009b8
 8007dd0:	2000113c 	.word	0x2000113c
 8007dd4:	200009cc 	.word	0x200009cc
 8007dd8:	20001150 	.word	0x20001150
 8007ddc:	200009e0 	.word	0x200009e0
 8007de0:	20001164 	.word	0x20001164
 8007de4:	200009f4 	.word	0x200009f4
 8007de8:	20001178 	.word	0x20001178
 8007dec:	20000a08 	.word	0x20000a08
 8007df0:	2000118c 	.word	0x2000118c
 8007df4:	20000a1c 	.word	0x20000a1c
 8007df8:	200011a0 	.word	0x200011a0
 8007dfc:	20000a30 	.word	0x20000a30
 8007e00:	200011b4 	.word	0x200011b4
 8007e04:	20000a44 	.word	0x20000a44
 8007e08:	200011c8 	.word	0x200011c8
 8007e0c:	20000a58 	.word	0x20000a58
 8007e10:	200011dc 	.word	0x200011dc
 8007e14:	20000a6c 	.word	0x20000a6c
 8007e18:	200011f0 	.word	0x200011f0
 8007e1c:	20000a80 	.word	0x20000a80
 8007e20:	20001204 	.word	0x20001204
 8007e24:	20000a94 	.word	0x20000a94
 8007e28:	20001218 	.word	0x20001218
 8007e2c:	20000aa8 	.word	0x20000aa8
 8007e30:	2000122c 	.word	0x2000122c
 8007e34:	20000abc 	.word	0x20000abc
 8007e38:	20001240 	.word	0x20001240
 8007e3c:	20000ad0 	.word	0x20000ad0
 8007e40:	20001254 	.word	0x20001254
 8007e44:	20000ae4 	.word	0x20000ae4
 8007e48:	20001268 	.word	0x20001268
 8007e4c:	20000af8 	.word	0x20000af8
 8007e50:	2000127c 	.word	0x2000127c
 8007e54:	20000b0c 	.word	0x20000b0c
 8007e58:	20001290 	.word	0x20001290
 8007e5c:	20000b20 	.word	0x20000b20
 8007e60:	200012a4 	.word	0x200012a4
 8007e64:	20000b34 	.word	0x20000b34
 8007e68:	200012b8 	.word	0x200012b8
 8007e6c:	20000b48 	.word	0x20000b48
 8007e70:	200012cc 	.word	0x200012cc
 8007e74:	20000b5c 	.word	0x20000b5c
 8007e78:	200012e0 	.word	0x200012e0
 8007e7c:	20000b70 	.word	0x20000b70
 8007e80:	200012f4 	.word	0x200012f4
 8007e84:	20000b84 	.word	0x20000b84
 8007e88:	20001308 	.word	0x20001308
 8007e8c:	20000b98 	.word	0x20000b98
 8007e90:	2000131c 	.word	0x2000131c
 8007e94:	20000bac 	.word	0x20000bac
 8007e98:	20001330 	.word	0x20001330
 8007e9c:	20000bc0 	.word	0x20000bc0
 8007ea0:	20001344 	.word	0x20001344
 8007ea4:	20000bd4 	.word	0x20000bd4
 8007ea8:	20001358 	.word	0x20001358
 8007eac:	20000be8 	.word	0x20000be8
 8007eb0:	2000136c 	.word	0x2000136c
 8007eb4:	20000bfc 	.word	0x20000bfc
 8007eb8:	20001380 	.word	0x20001380
 8007ebc:	20000c24 	.word	0x20000c24
 8007ec0:	20001394 	.word	0x20001394
 8007ec4:	20000c4c 	.word	0x20000c4c
 8007ec8:	200013a8 	.word	0x200013a8
 8007ecc:	20000c74 	.word	0x20000c74
 8007ed0:	6828      	ldr	r0, [r5, #0]
 8007ed2:	6869      	ldr	r1, [r5, #4]
 8007ed4:	68aa      	ldr	r2, [r5, #8]
 8007ed6:	68eb      	ldr	r3, [r5, #12]
 8007ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007eda:	7c2b      	ldrb	r3, [r5, #16]
 8007edc:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 8007ede:	4a0e      	ldr	r2, [pc, #56]	@ (8007f18 <loadMenuTexts+0x11b4>)
 8007ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8007f1c <loadMenuTexts+0x11b8>)
 8007ee2:	4614      	mov	r4, r2
 8007ee4:	461d      	mov	r5, r3
 8007ee6:	6828      	ldr	r0, [r5, #0]
 8007ee8:	6869      	ldr	r1, [r5, #4]
 8007eea:	68aa      	ldr	r2, [r5, #8]
 8007eec:	68eb      	ldr	r3, [r5, #12]
 8007eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ef0:	7c2b      	ldrb	r3, [r5, #16]
 8007ef2:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 8007ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8007f20 <loadMenuTexts+0x11bc>)
 8007ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8007f24 <loadMenuTexts+0x11c0>)
 8007ef8:	4614      	mov	r4, r2
 8007efa:	461d      	mov	r5, r3
 8007efc:	6828      	ldr	r0, [r5, #0]
 8007efe:	6869      	ldr	r1, [r5, #4]
 8007f00:	68aa      	ldr	r2, [r5, #8]
 8007f02:	68eb      	ldr	r3, [r5, #12]
 8007f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f06:	7c2b      	ldrb	r3, [r5, #16]
 8007f08:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 8007f0a:	f000 f80d 	bl	8007f28 <menuVariableFinisher>
}
 8007f0e:	bf00      	nop
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bdb0      	pop	{r4, r5, r7, pc}
 8007f16:	bf00      	nop
 8007f18:	200013bc 	.word	0x200013bc
 8007f1c:	20000c9c 	.word	0x20000c9c
 8007f20:	200013d0 	.word	0x200013d0
 8007f24:	20000cc4 	.word	0x20000cc4

08007f28 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8007f28:	b480      	push	{r7}
 8007f2a:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 8007f2c:	4b84      	ldr	r3, [pc, #528]	@ (8008140 <menuVariableFinisher+0x218>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 8007f32:	4b84      	ldr	r3, [pc, #528]	@ (8008144 <menuVariableFinisher+0x21c>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8007f38:	4b83      	ldr	r3, [pc, #524]	@ (8008148 <menuVariableFinisher+0x220>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 8007f3e:	4b83      	ldr	r3, [pc, #524]	@ (800814c <menuVariableFinisher+0x224>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 8007f44:	4b82      	ldr	r3, [pc, #520]	@ (8008150 <menuVariableFinisher+0x228>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 8007f4a:	4b82      	ldr	r3, [pc, #520]	@ (8008154 <menuVariableFinisher+0x22c>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 8007f50:	4b81      	ldr	r3, [pc, #516]	@ (8008158 <menuVariableFinisher+0x230>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 8007f56:	4b81      	ldr	r3, [pc, #516]	@ (800815c <menuVariableFinisher+0x234>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8007f5c:	4b80      	ldr	r3, [pc, #512]	@ (8008160 <menuVariableFinisher+0x238>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 8007f62:	4b80      	ldr	r3, [pc, #512]	@ (8008164 <menuVariableFinisher+0x23c>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8007f68:	4b7f      	ldr	r3, [pc, #508]	@ (8008168 <menuVariableFinisher+0x240>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 8007f6e:	4b7f      	ldr	r3, [pc, #508]	@ (800816c <menuVariableFinisher+0x244>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8007f74:	4b7e      	ldr	r3, [pc, #504]	@ (8008170 <menuVariableFinisher+0x248>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 8007f7a:	4b7e      	ldr	r3, [pc, #504]	@ (8008174 <menuVariableFinisher+0x24c>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 8007f80:	4b7d      	ldr	r3, [pc, #500]	@ (8008178 <menuVariableFinisher+0x250>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 8007f86:	4b7d      	ldr	r3, [pc, #500]	@ (800817c <menuVariableFinisher+0x254>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8007f8c:	4b7c      	ldr	r3, [pc, #496]	@ (8008180 <menuVariableFinisher+0x258>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 8007f92:	4b7c      	ldr	r3, [pc, #496]	@ (8008184 <menuVariableFinisher+0x25c>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8007f98:	4b7b      	ldr	r3, [pc, #492]	@ (8008188 <menuVariableFinisher+0x260>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 8007f9e:	4b7b      	ldr	r3, [pc, #492]	@ (800818c <menuVariableFinisher+0x264>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 8007fa4:	4b7a      	ldr	r3, [pc, #488]	@ (8008190 <menuVariableFinisher+0x268>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 8007faa:	4b7a      	ldr	r3, [pc, #488]	@ (8008194 <menuVariableFinisher+0x26c>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 8007fb0:	4b79      	ldr	r3, [pc, #484]	@ (8008198 <menuVariableFinisher+0x270>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 8007fb6:	4b79      	ldr	r3, [pc, #484]	@ (800819c <menuVariableFinisher+0x274>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8007fbc:	4b78      	ldr	r3, [pc, #480]	@ (80081a0 <menuVariableFinisher+0x278>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 8007fc2:	4b78      	ldr	r3, [pc, #480]	@ (80081a4 <menuVariableFinisher+0x27c>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8007fc8:	4b77      	ldr	r3, [pc, #476]	@ (80081a8 <menuVariableFinisher+0x280>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 8007fce:	4b77      	ldr	r3, [pc, #476]	@ (80081ac <menuVariableFinisher+0x284>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 8007fd4:	4b76      	ldr	r3, [pc, #472]	@ (80081b0 <menuVariableFinisher+0x288>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 8007fda:	4b76      	ldr	r3, [pc, #472]	@ (80081b4 <menuVariableFinisher+0x28c>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8007fe0:	4b75      	ldr	r3, [pc, #468]	@ (80081b8 <menuVariableFinisher+0x290>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 8007fe6:	4b75      	ldr	r3, [pc, #468]	@ (80081bc <menuVariableFinisher+0x294>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 8007fec:	4b74      	ldr	r3, [pc, #464]	@ (80081c0 <menuVariableFinisher+0x298>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 8007ff2:	4b74      	ldr	r3, [pc, #464]	@ (80081c4 <menuVariableFinisher+0x29c>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8007ff8:	4b73      	ldr	r3, [pc, #460]	@ (80081c8 <menuVariableFinisher+0x2a0>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 8007ffe:	4b73      	ldr	r3, [pc, #460]	@ (80081cc <menuVariableFinisher+0x2a4>)
 8008000:	2200      	movs	r2, #0
 8008002:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 8008004:	4b72      	ldr	r3, [pc, #456]	@ (80081d0 <menuVariableFinisher+0x2a8>)
 8008006:	2200      	movs	r2, #0
 8008008:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 800800a:	4b72      	ldr	r3, [pc, #456]	@ (80081d4 <menuVariableFinisher+0x2ac>)
 800800c:	2200      	movs	r2, #0
 800800e:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8008010:	4b71      	ldr	r3, [pc, #452]	@ (80081d8 <menuVariableFinisher+0x2b0>)
 8008012:	2200      	movs	r2, #0
 8008014:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 8008016:	4b71      	ldr	r3, [pc, #452]	@ (80081dc <menuVariableFinisher+0x2b4>)
 8008018:	2200      	movs	r2, #0
 800801a:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 800801c:	4b70      	ldr	r3, [pc, #448]	@ (80081e0 <menuVariableFinisher+0x2b8>)
 800801e:	2200      	movs	r2, #0
 8008020:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 8008022:	4b70      	ldr	r3, [pc, #448]	@ (80081e4 <menuVariableFinisher+0x2bc>)
 8008024:	2200      	movs	r2, #0
 8008026:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8008028:	4b6f      	ldr	r3, [pc, #444]	@ (80081e8 <menuVariableFinisher+0x2c0>)
 800802a:	2200      	movs	r2, #0
 800802c:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 800802e:	4b6f      	ldr	r3, [pc, #444]	@ (80081ec <menuVariableFinisher+0x2c4>)
 8008030:	2200      	movs	r2, #0
 8008032:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8008034:	4b6e      	ldr	r3, [pc, #440]	@ (80081f0 <menuVariableFinisher+0x2c8>)
 8008036:	2200      	movs	r2, #0
 8008038:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 800803a:	4b6e      	ldr	r3, [pc, #440]	@ (80081f4 <menuVariableFinisher+0x2cc>)
 800803c:	2200      	movs	r2, #0
 800803e:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8008040:	4b6d      	ldr	r3, [pc, #436]	@ (80081f8 <menuVariableFinisher+0x2d0>)
 8008042:	2200      	movs	r2, #0
 8008044:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 8008046:	4b6d      	ldr	r3, [pc, #436]	@ (80081fc <menuVariableFinisher+0x2d4>)
 8008048:	2200      	movs	r2, #0
 800804a:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 800804c:	4b6c      	ldr	r3, [pc, #432]	@ (8008200 <menuVariableFinisher+0x2d8>)
 800804e:	2200      	movs	r2, #0
 8008050:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 8008052:	4b6c      	ldr	r3, [pc, #432]	@ (8008204 <menuVariableFinisher+0x2dc>)
 8008054:	2200      	movs	r2, #0
 8008056:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8008058:	4b6b      	ldr	r3, [pc, #428]	@ (8008208 <menuVariableFinisher+0x2e0>)
 800805a:	2200      	movs	r2, #0
 800805c:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 800805e:	4b6b      	ldr	r3, [pc, #428]	@ (800820c <menuVariableFinisher+0x2e4>)
 8008060:	2200      	movs	r2, #0
 8008062:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8008064:	4b6a      	ldr	r3, [pc, #424]	@ (8008210 <menuVariableFinisher+0x2e8>)
 8008066:	2200      	movs	r2, #0
 8008068:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 800806a:	4b6a      	ldr	r3, [pc, #424]	@ (8008214 <menuVariableFinisher+0x2ec>)
 800806c:	2200      	movs	r2, #0
 800806e:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8008070:	4b69      	ldr	r3, [pc, #420]	@ (8008218 <menuVariableFinisher+0x2f0>)
 8008072:	2200      	movs	r2, #0
 8008074:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8008076:	4b69      	ldr	r3, [pc, #420]	@ (800821c <menuVariableFinisher+0x2f4>)
 8008078:	2200      	movs	r2, #0
 800807a:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 800807c:	4b68      	ldr	r3, [pc, #416]	@ (8008220 <menuVariableFinisher+0x2f8>)
 800807e:	2200      	movs	r2, #0
 8008080:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 8008082:	4b68      	ldr	r3, [pc, #416]	@ (8008224 <menuVariableFinisher+0x2fc>)
 8008084:	2200      	movs	r2, #0
 8008086:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8008088:	4b67      	ldr	r3, [pc, #412]	@ (8008228 <menuVariableFinisher+0x300>)
 800808a:	2200      	movs	r2, #0
 800808c:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 800808e:	4b67      	ldr	r3, [pc, #412]	@ (800822c <menuVariableFinisher+0x304>)
 8008090:	2200      	movs	r2, #0
 8008092:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 8008094:	4b66      	ldr	r3, [pc, #408]	@ (8008230 <menuVariableFinisher+0x308>)
 8008096:	2200      	movs	r2, #0
 8008098:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 800809a:	4b66      	ldr	r3, [pc, #408]	@ (8008234 <menuVariableFinisher+0x30c>)
 800809c:	2200      	movs	r2, #0
 800809e:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 80080a0:	4b65      	ldr	r3, [pc, #404]	@ (8008238 <menuVariableFinisher+0x310>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 80080a6:	4b65      	ldr	r3, [pc, #404]	@ (800823c <menuVariableFinisher+0x314>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 80080ac:	4b64      	ldr	r3, [pc, #400]	@ (8008240 <menuVariableFinisher+0x318>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 80080b2:	4b64      	ldr	r3, [pc, #400]	@ (8008244 <menuVariableFinisher+0x31c>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 80080b8:	4b63      	ldr	r3, [pc, #396]	@ (8008248 <menuVariableFinisher+0x320>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 80080be:	4b63      	ldr	r3, [pc, #396]	@ (800824c <menuVariableFinisher+0x324>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 80080c4:	4b62      	ldr	r3, [pc, #392]	@ (8008250 <menuVariableFinisher+0x328>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 80080ca:	4b62      	ldr	r3, [pc, #392]	@ (8008254 <menuVariableFinisher+0x32c>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 80080d0:	4b61      	ldr	r3, [pc, #388]	@ (8008258 <menuVariableFinisher+0x330>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 80080d6:	4b61      	ldr	r3, [pc, #388]	@ (800825c <menuVariableFinisher+0x334>)
 80080d8:	2200      	movs	r2, #0
 80080da:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 80080dc:	4b60      	ldr	r3, [pc, #384]	@ (8008260 <menuVariableFinisher+0x338>)
 80080de:	2200      	movs	r2, #0
 80080e0:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 80080e2:	4b60      	ldr	r3, [pc, #384]	@ (8008264 <menuVariableFinisher+0x33c>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 80080e8:	4b5f      	ldr	r3, [pc, #380]	@ (8008268 <menuVariableFinisher+0x340>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 80080ee:	4b5f      	ldr	r3, [pc, #380]	@ (800826c <menuVariableFinisher+0x344>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 80080f4:	4b5e      	ldr	r3, [pc, #376]	@ (8008270 <menuVariableFinisher+0x348>)
 80080f6:	2200      	movs	r2, #0
 80080f8:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 80080fa:	4b5e      	ldr	r3, [pc, #376]	@ (8008274 <menuVariableFinisher+0x34c>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 8008100:	4b5d      	ldr	r3, [pc, #372]	@ (8008278 <menuVariableFinisher+0x350>)
 8008102:	2200      	movs	r2, #0
 8008104:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 8008106:	4b5d      	ldr	r3, [pc, #372]	@ (800827c <menuVariableFinisher+0x354>)
 8008108:	2200      	movs	r2, #0
 800810a:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 800810c:	4b5c      	ldr	r3, [pc, #368]	@ (8008280 <menuVariableFinisher+0x358>)
 800810e:	2200      	movs	r2, #0
 8008110:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 8008112:	4b5c      	ldr	r3, [pc, #368]	@ (8008284 <menuVariableFinisher+0x35c>)
 8008114:	2200      	movs	r2, #0
 8008116:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8008118:	4b5b      	ldr	r3, [pc, #364]	@ (8008288 <menuVariableFinisher+0x360>)
 800811a:	2200      	movs	r2, #0
 800811c:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 800811e:	4b5b      	ldr	r3, [pc, #364]	@ (800828c <menuVariableFinisher+0x364>)
 8008120:	2200      	movs	r2, #0
 8008122:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8008124:	4b5a      	ldr	r3, [pc, #360]	@ (8008290 <menuVariableFinisher+0x368>)
 8008126:	2200      	movs	r2, #0
 8008128:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 800812a:	4b5a      	ldr	r3, [pc, #360]	@ (8008294 <menuVariableFinisher+0x36c>)
 800812c:	2200      	movs	r2, #0
 800812e:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8008130:	4b59      	ldr	r3, [pc, #356]	@ (8008298 <menuVariableFinisher+0x370>)
 8008132:	2200      	movs	r2, #0
 8008134:	741a      	strb	r2, [r3, #16]
}
 8008136:	bf00      	nop
 8008138:	46bd      	mov	sp, r7
 800813a:	bc80      	pop	{r7}
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	20000030 	.word	0x20000030
 8008144:	20000044 	.word	0x20000044
 8008148:	20000058 	.word	0x20000058
 800814c:	2000006c 	.word	0x2000006c
 8008150:	20000080 	.word	0x20000080
 8008154:	20000094 	.word	0x20000094
 8008158:	200000a8 	.word	0x200000a8
 800815c:	200000bc 	.word	0x200000bc
 8008160:	200000d0 	.word	0x200000d0
 8008164:	200000e4 	.word	0x200000e4
 8008168:	200000f8 	.word	0x200000f8
 800816c:	2000010c 	.word	0x2000010c
 8008170:	20000e08 	.word	0x20000e08
 8008174:	20000e1c 	.word	0x20000e1c
 8008178:	20000e30 	.word	0x20000e30
 800817c:	20000e44 	.word	0x20000e44
 8008180:	20000e58 	.word	0x20000e58
 8008184:	20000e6c 	.word	0x20000e6c
 8008188:	20000e80 	.word	0x20000e80
 800818c:	20000e94 	.word	0x20000e94
 8008190:	20000ea8 	.word	0x20000ea8
 8008194:	20000ebc 	.word	0x20000ebc
 8008198:	20000ed0 	.word	0x20000ed0
 800819c:	20000ee4 	.word	0x20000ee4
 80081a0:	20000ef8 	.word	0x20000ef8
 80081a4:	20000f0c 	.word	0x20000f0c
 80081a8:	20000f20 	.word	0x20000f20
 80081ac:	20000f34 	.word	0x20000f34
 80081b0:	20000f48 	.word	0x20000f48
 80081b4:	20000f5c 	.word	0x20000f5c
 80081b8:	20000f70 	.word	0x20000f70
 80081bc:	20000f84 	.word	0x20000f84
 80081c0:	20000f98 	.word	0x20000f98
 80081c4:	20000fac 	.word	0x20000fac
 80081c8:	20000fc0 	.word	0x20000fc0
 80081cc:	20000fd4 	.word	0x20000fd4
 80081d0:	20000fe8 	.word	0x20000fe8
 80081d4:	20000ffc 	.word	0x20000ffc
 80081d8:	20001010 	.word	0x20001010
 80081dc:	20001024 	.word	0x20001024
 80081e0:	20001038 	.word	0x20001038
 80081e4:	2000104c 	.word	0x2000104c
 80081e8:	20001060 	.word	0x20001060
 80081ec:	20001074 	.word	0x20001074
 80081f0:	20001088 	.word	0x20001088
 80081f4:	2000109c 	.word	0x2000109c
 80081f8:	200010b0 	.word	0x200010b0
 80081fc:	200010c4 	.word	0x200010c4
 8008200:	200010d8 	.word	0x200010d8
 8008204:	200010ec 	.word	0x200010ec
 8008208:	20001100 	.word	0x20001100
 800820c:	20001114 	.word	0x20001114
 8008210:	20001128 	.word	0x20001128
 8008214:	2000113c 	.word	0x2000113c
 8008218:	20001150 	.word	0x20001150
 800821c:	20001164 	.word	0x20001164
 8008220:	20001178 	.word	0x20001178
 8008224:	2000118c 	.word	0x2000118c
 8008228:	200011a0 	.word	0x200011a0
 800822c:	200011b4 	.word	0x200011b4
 8008230:	200011c8 	.word	0x200011c8
 8008234:	200011dc 	.word	0x200011dc
 8008238:	200011f0 	.word	0x200011f0
 800823c:	20001204 	.word	0x20001204
 8008240:	20001218 	.word	0x20001218
 8008244:	2000122c 	.word	0x2000122c
 8008248:	20001240 	.word	0x20001240
 800824c:	20001254 	.word	0x20001254
 8008250:	20001268 	.word	0x20001268
 8008254:	2000127c 	.word	0x2000127c
 8008258:	20001290 	.word	0x20001290
 800825c:	200012a4 	.word	0x200012a4
 8008260:	200012b8 	.word	0x200012b8
 8008264:	200012cc 	.word	0x200012cc
 8008268:	200012e0 	.word	0x200012e0
 800826c:	200012f4 	.word	0x200012f4
 8008270:	20001308 	.word	0x20001308
 8008274:	2000131c 	.word	0x2000131c
 8008278:	20001330 	.word	0x20001330
 800827c:	20001344 	.word	0x20001344
 8008280:	20001358 	.word	0x20001358
 8008284:	2000136c 	.word	0x2000136c
 8008288:	20001380 	.word	0x20001380
 800828c:	20001394 	.word	0x20001394
 8008290:	200013a8 	.word	0x200013a8
 8008294:	200013bc 	.word	0x200013bc
 8008298:	200013d0 	.word	0x200013d0

0800829c <resetMenuTexts>:

void resetMenuTexts() {
 800829c:	b580      	push	{r7, lr}
 800829e:	af00      	add	r7, sp, #0
    memset(menuyeGirildiText, 0, 17);
 80082a0:	2211      	movs	r2, #17
 80082a2:	2100      	movs	r1, #0
 80082a4:	48bb      	ldr	r0, [pc, #748]	@ (8008594 <resetMenuTexts+0x2f8>)
 80082a6:	f004 f873 	bl	800c390 <memset>
    memset(ayarlarText, 0, 17);
 80082aa:	2211      	movs	r2, #17
 80082ac:	2100      	movs	r1, #0
 80082ae:	48ba      	ldr	r0, [pc, #744]	@ (8008598 <resetMenuTexts+0x2fc>)
 80082b0:	f004 f86e 	bl	800c390 <memset>
    memset(hataKayitListText, 0, 17);
 80082b4:	2211      	movs	r2, #17
 80082b6:	2100      	movs	r1, #0
 80082b8:	48b8      	ldr	r0, [pc, #736]	@ (800859c <resetMenuTexts+0x300>)
 80082ba:	f004 f869 	bl	800c390 <memset>
    memset(birHataKoduText, 0, 17);
 80082be:	2211      	movs	r2, #17
 80082c0:	2100      	movs	r1, #0
 80082c2:	48b7      	ldr	r0, [pc, #732]	@ (80085a0 <resetMenuTexts+0x304>)
 80082c4:	f004 f864 	bl	800c390 <memset>
    memset(ikiHataKoduText, 0, 17);
 80082c8:	2211      	movs	r2, #17
 80082ca:	2100      	movs	r1, #0
 80082cc:	48b5      	ldr	r0, [pc, #724]	@ (80085a4 <resetMenuTexts+0x308>)
 80082ce:	f004 f85f 	bl	800c390 <memset>
    memset(ucHataKoduText, 0, 17);
 80082d2:	2211      	movs	r2, #17
 80082d4:	2100      	movs	r1, #0
 80082d6:	48b4      	ldr	r0, [pc, #720]	@ (80085a8 <resetMenuTexts+0x30c>)
 80082d8:	f004 f85a 	bl	800c390 <memset>
    memset(dortHataKoduText, 0, 17);
 80082dc:	2211      	movs	r2, #17
 80082de:	2100      	movs	r1, #0
 80082e0:	48b2      	ldr	r0, [pc, #712]	@ (80085ac <resetMenuTexts+0x310>)
 80082e2:	f004 f855 	bl	800c390 <memset>
    memset(besHataKoduText, 0, 17);
 80082e6:	2211      	movs	r2, #17
 80082e8:	2100      	movs	r1, #0
 80082ea:	48b1      	ldr	r0, [pc, #708]	@ (80085b0 <resetMenuTexts+0x314>)
 80082ec:	f004 f850 	bl	800c390 <memset>
    memset(altiHataKoduText, 0, 17);
 80082f0:	2211      	movs	r2, #17
 80082f2:	2100      	movs	r1, #0
 80082f4:	48af      	ldr	r0, [pc, #700]	@ (80085b4 <resetMenuTexts+0x318>)
 80082f6:	f004 f84b 	bl	800c390 <memset>
    memset(yediHataKoduText, 0, 17);
 80082fa:	2211      	movs	r2, #17
 80082fc:	2100      	movs	r1, #0
 80082fe:	48ae      	ldr	r0, [pc, #696]	@ (80085b8 <resetMenuTexts+0x31c>)
 8008300:	f004 f846 	bl	800c390 <memset>
    memset(sekizHataKoduText, 0, 17);
 8008304:	2211      	movs	r2, #17
 8008306:	2100      	movs	r1, #0
 8008308:	48ac      	ldr	r0, [pc, #688]	@ (80085bc <resetMenuTexts+0x320>)
 800830a:	f004 f841 	bl	800c390 <memset>
    memset(dokuzHataKoduText, 0, 17);
 800830e:	2211      	movs	r2, #17
 8008310:	2100      	movs	r1, #0
 8008312:	48ab      	ldr	r0, [pc, #684]	@ (80085c0 <resetMenuTexts+0x324>)
 8008314:	f004 f83c 	bl	800c390 <memset>
    memset(onHataKoduText, 0, 17);
 8008318:	2211      	movs	r2, #17
 800831a:	2100      	movs	r1, #0
 800831c:	48a9      	ldr	r0, [pc, #676]	@ (80085c4 <resetMenuTexts+0x328>)
 800831e:	f004 f837 	bl	800c390 <memset>
    memset(silmekIcinText, 0, 17);
 8008322:	2211      	movs	r2, #17
 8008324:	2100      	movs	r1, #0
 8008326:	48a8      	ldr	r0, [pc, #672]	@ (80085c8 <resetMenuTexts+0x32c>)
 8008328:	f004 f832 	bl	800c390 <memset>
    memset(calismaSekliText, 0, 17);
 800832c:	2211      	movs	r2, #17
 800832e:	2100      	movs	r1, #0
 8008330:	48a6      	ldr	r0, [pc, #664]	@ (80085cc <resetMenuTexts+0x330>)
 8008332:	f004 f82d 	bl	800c390 <memset>
    memset(devirmeYuruyusText, 0, 17);
 8008336:	2211      	movs	r2, #17
 8008338:	2100      	movs	r1, #0
 800833a:	48a5      	ldr	r0, [pc, #660]	@ (80085d0 <resetMenuTexts+0x334>)
 800833c:	f004 f828 	bl	800c390 <memset>
    memset(bastikcaCalisanText, 0, 17);
 8008340:	2211      	movs	r2, #17
 8008342:	2100      	movs	r1, #0
 8008344:	48a3      	ldr	r0, [pc, #652]	@ (80085d4 <resetMenuTexts+0x338>)
 8008346:	f004 f823 	bl	800c390 <memset>
    memset(basGonderText, 0, 17);
 800834a:	2211      	movs	r2, #17
 800834c:	2100      	movs	r1, #0
 800834e:	48a2      	ldr	r0, [pc, #648]	@ (80085d8 <resetMenuTexts+0x33c>)
 8008350:	f004 f81e 	bl	800c390 <memset>
    memset(emniyetCercevesiText, 0, 17);
 8008354:	2211      	movs	r2, #17
 8008356:	2100      	movs	r1, #0
 8008358:	48a0      	ldr	r0, [pc, #640]	@ (80085dc <resetMenuTexts+0x340>)
 800835a:	f004 f819 	bl	800c390 <memset>
    memset(pasifText, 0, 17);
 800835e:	2211      	movs	r2, #17
 8008360:	2100      	movs	r1, #0
 8008362:	489f      	ldr	r0, [pc, #636]	@ (80085e0 <resetMenuTexts+0x344>)
 8008364:	f004 f814 	bl	800c390 <memset>
    memset(aktifText, 0, 17);
 8008368:	2211      	movs	r2, #17
 800836a:	2100      	movs	r1, #0
 800836c:	489d      	ldr	r0, [pc, #628]	@ (80085e4 <resetMenuTexts+0x348>)
 800836e:	f004 f80f 	bl	800c390 <memset>
    memset(yavaslamaLimitText, 0, 17);
 8008372:	2211      	movs	r2, #17
 8008374:	2100      	movs	r1, #0
 8008376:	489c      	ldr	r0, [pc, #624]	@ (80085e8 <resetMenuTexts+0x34c>)
 8008378:	f004 f80a 	bl	800c390 <memset>
    memset(altLimitText, 0, 17);
 800837c:	2211      	movs	r2, #17
 800837e:	2100      	movs	r1, #0
 8008380:	489a      	ldr	r0, [pc, #616]	@ (80085ec <resetMenuTexts+0x350>)
 8008382:	f004 f805 	bl	800c390 <memset>
    memset(basincSalteriText, 0, 17);
 8008386:	2211      	movs	r2, #17
 8008388:	2100      	movs	r1, #0
 800838a:	4899      	ldr	r0, [pc, #612]	@ (80085f0 <resetMenuTexts+0x354>)
 800838c:	f004 f800 	bl	800c390 <memset>
    memset(kapiSecimleriText, 0, 17);
 8008390:	2211      	movs	r2, #17
 8008392:	2100      	movs	r1, #0
 8008394:	4897      	ldr	r0, [pc, #604]	@ (80085f4 <resetMenuTexts+0x358>)
 8008396:	f003 fffb 	bl	800c390 <memset>
    memset(katKapisiAktifText, 0, 17);
 800839a:	2211      	movs	r2, #17
 800839c:	2100      	movs	r1, #0
 800839e:	4896      	ldr	r0, [pc, #600]	@ (80085f8 <resetMenuTexts+0x35c>)
 80083a0:	f003 fff6 	bl	800c390 <memset>
    memset(tablaKapiAktifText, 0, 17);
 80083a4:	2211      	movs	r2, #17
 80083a6:	2100      	movs	r1, #0
 80083a8:	4894      	ldr	r0, [pc, #592]	@ (80085fc <resetMenuTexts+0x360>)
 80083aa:	f003 fff1 	bl	800c390 <memset>
    memset(katArtiTablaAktifText, 0, 17);
 80083ae:	2211      	movs	r2, #17
 80083b0:	2100      	movs	r1, #0
 80083b2:	4893      	ldr	r0, [pc, #588]	@ (8008600 <resetMenuTexts+0x364>)
 80083b4:	f003 ffec 	bl	800c390 <memset>
    memset(kapiAcmaTipiText, 0, 17);
 80083b8:	2211      	movs	r2, #17
 80083ba:	2100      	movs	r1, #0
 80083bc:	4891      	ldr	r0, [pc, #580]	@ (8008604 <resetMenuTexts+0x368>)
 80083be:	f003 ffe7 	bl	800c390 <memset>
    memset(kapiButonuESPText, 0, 17);
 80083c2:	2211      	movs	r2, #17
 80083c4:	2100      	movs	r1, #0
 80083c6:	4890      	ldr	r0, [pc, #576]	@ (8008608 <resetMenuTexts+0x36c>)
 80083c8:	f003 ffe2 	bl	800c390 <memset>
    memset(katButonuEXTText, 0, 17);
 80083cc:	2211      	movs	r2, #17
 80083ce:	2100      	movs	r1, #0
 80083d0:	488e      	ldr	r0, [pc, #568]	@ (800860c <resetMenuTexts+0x370>)
 80083d2:	f003 ffdd 	bl	800c390 <memset>
    memset(birKatKapiTipiText, 0, 17);
 80083d6:	2211      	movs	r2, #17
 80083d8:	2100      	movs	r1, #0
 80083da:	488d      	ldr	r0, [pc, #564]	@ (8008610 <resetMenuTexts+0x374>)
 80083dc:	f003 ffd8 	bl	800c390 <memset>
    memset(butonKontrolluText, 0, 17);
 80083e0:	2211      	movs	r2, #17
 80083e2:	2100      	movs	r1, #0
 80083e4:	488b      	ldr	r0, [pc, #556]	@ (8008614 <resetMenuTexts+0x378>)
 80083e6:	f003 ffd3 	bl	800c390 <memset>
    memset(birinciKapiAcSuresiText, 0, 17);
 80083ea:	2211      	movs	r2, #17
 80083ec:	2100      	movs	r1, #0
 80083ee:	488a      	ldr	r0, [pc, #552]	@ (8008618 <resetMenuTexts+0x37c>)
 80083f0:	f003 ffce 	bl	800c390 <memset>
    memset(kacSaniyeText, 0, 17);
 80083f4:	2211      	movs	r2, #17
 80083f6:	2100      	movs	r1, #0
 80083f8:	4888      	ldr	r0, [pc, #544]	@ (800861c <resetMenuTexts+0x380>)
 80083fa:	f003 ffc9 	bl	800c390 <memset>
    memset(ikinciKatKapiTipiText, 0, 17);
 80083fe:	2211      	movs	r2, #17
 8008400:	2100      	movs	r1, #0
 8008402:	4887      	ldr	r0, [pc, #540]	@ (8008620 <resetMenuTexts+0x384>)
 8008404:	f003 ffc4 	bl	800c390 <memset>
    memset(ikinciKapiAcSuresiText, 0, 17);
 8008408:	2211      	movs	r2, #17
 800840a:	2100      	movs	r1, #0
 800840c:	4885      	ldr	r0, [pc, #532]	@ (8008624 <resetMenuTexts+0x388>)
 800840e:	f003 ffbf 	bl	800c390 <memset>
    memset(tablaKapiTipiText, 0, 17);
 8008412:	2211      	movs	r2, #17
 8008414:	2100      	movs	r1, #0
 8008416:	4884      	ldr	r0, [pc, #528]	@ (8008628 <resetMenuTexts+0x38c>)
 8008418:	f003 ffba 	bl	800c390 <memset>
    memset(tablaKapiAcKonumText, 0, 17);
 800841c:	2211      	movs	r2, #17
 800841e:	2100      	movs	r1, #0
 8008420:	4882      	ldr	r0, [pc, #520]	@ (800862c <resetMenuTexts+0x390>)
 8008422:	f003 ffb5 	bl	800c390 <memset>
    memset(birinciKattaAcText, 0, 17);
 8008426:	2211      	movs	r2, #17
 8008428:	2100      	movs	r1, #0
 800842a:	4881      	ldr	r0, [pc, #516]	@ (8008630 <resetMenuTexts+0x394>)
 800842c:	f003 ffb0 	bl	800c390 <memset>
    memset(ikinciKattaAcText, 0, 17);
 8008430:	2211      	movs	r2, #17
 8008432:	2100      	movs	r1, #0
 8008434:	487f      	ldr	r0, [pc, #508]	@ (8008634 <resetMenuTexts+0x398>)
 8008436:	f003 ffab 	bl	800c390 <memset>
    memset(birVeIkinciKattaAcText, 0, 17);
 800843a:	2211      	movs	r2, #17
 800843c:	2100      	movs	r1, #0
 800843e:	487e      	ldr	r0, [pc, #504]	@ (8008638 <resetMenuTexts+0x39c>)
 8008440:	f003 ffa6 	bl	800c390 <memset>
    memset(tablaKapiAcSureText, 0, 17);
 8008444:	2211      	movs	r2, #17
 8008446:	2100      	movs	r1, #0
 8008448:	487c      	ldr	r0, [pc, #496]	@ (800863c <resetMenuTexts+0x3a0>)
 800844a:	f003 ffa1 	bl	800c390 <memset>
    memset(yukariYavaslamaLimitiText, 0, 17);
 800844e:	2211      	movs	r2, #17
 8008450:	2100      	movs	r1, #0
 8008452:	487b      	ldr	r0, [pc, #492]	@ (8008640 <resetMenuTexts+0x3a4>)
 8008454:	f003 ff9c 	bl	800c390 <memset>
    memset(devirmeYuruyusMenuText, 0, 17);
 8008458:	2211      	movs	r2, #17
 800845a:	2100      	movs	r1, #0
 800845c:	4879      	ldr	r0, [pc, #484]	@ (8008644 <resetMenuTexts+0x3a8>)
 800845e:	f003 ff97 	bl	800c390 <memset>
    memset(devirmeAktifText, 0, 17);
 8008462:	2211      	movs	r2, #17
 8008464:	2100      	movs	r1, #0
 8008466:	4878      	ldr	r0, [pc, #480]	@ (8008648 <resetMenuTexts+0x3ac>)
 8008468:	f003 ff92 	bl	800c390 <memset>
    memset(yuruyusAktifText, 0, 17);
 800846c:	2211      	movs	r2, #17
 800846e:	2100      	movs	r1, #0
 8008470:	4876      	ldr	r0, [pc, #472]	@ (800864c <resetMenuTexts+0x3b0>)
 8008472:	f003 ff8d 	bl	800c390 <memset>
    memset(devirmeYukariText, 0, 17);
 8008476:	2211      	movs	r2, #17
 8008478:	2100      	movs	r1, #0
 800847a:	4875      	ldr	r0, [pc, #468]	@ (8008650 <resetMenuTexts+0x3b4>)
 800847c:	f003 ff88 	bl	800c390 <memset>
    memset(yuruyusIleriText, 0, 17);
 8008480:	2211      	movs	r2, #17
 8008482:	2100      	movs	r1, #0
 8008484:	4873      	ldr	r0, [pc, #460]	@ (8008654 <resetMenuTexts+0x3b8>)
 8008486:	f003 ff83 	bl	800c390 <memset>
    memset(devirmeAsagiSivicText, 0, 17);
 800848a:	2211      	movs	r2, #17
 800848c:	2100      	movs	r1, #0
 800848e:	4872      	ldr	r0, [pc, #456]	@ (8008658 <resetMenuTexts+0x3bc>)
 8008490:	f003 ff7e 	bl	800c390 <memset>
    memset(yuruyusGeriSivicText, 0, 17);
 8008494:	2211      	movs	r2, #17
 8008496:	2100      	movs	r1, #0
 8008498:	4870      	ldr	r0, [pc, #448]	@ (800865c <resetMenuTexts+0x3c0>)
 800849a:	f003 ff79 	bl	800c390 <memset>
    memset(yuruyusSecildiText, 0, 17);
 800849e:	2211      	movs	r2, #17
 80084a0:	2100      	movs	r1, #0
 80084a2:	486f      	ldr	r0, [pc, #444]	@ (8008660 <resetMenuTexts+0x3c4>)
 80084a4:	f003 ff74 	bl	800c390 <memset>
    memset(devirmeSilindirTipiText, 0, 17);
 80084a8:	2211      	movs	r2, #17
 80084aa:	2100      	movs	r1, #0
 80084ac:	486d      	ldr	r0, [pc, #436]	@ (8008664 <resetMenuTexts+0x3c8>)
 80084ae:	f003 ff6f 	bl	800c390 <memset>
    memset(tekTesirText, 0, 17);
 80084b2:	2211      	movs	r2, #17
 80084b4:	2100      	movs	r1, #0
 80084b6:	486c      	ldr	r0, [pc, #432]	@ (8008668 <resetMenuTexts+0x3cc>)
 80084b8:	f003 ff6a 	bl	800c390 <memset>
    memset(ciftTesirText, 0, 17);
 80084bc:	2211      	movs	r2, #17
 80084be:	2100      	movs	r1, #0
 80084c0:	486a      	ldr	r0, [pc, #424]	@ (800866c <resetMenuTexts+0x3d0>)
 80084c2:	f003 ff65 	bl	800c390 <memset>
    memset(platformSilindirTipiText, 0, 17);
 80084c6:	2211      	movs	r2, #17
 80084c8:	2100      	movs	r1, #0
 80084ca:	4869      	ldr	r0, [pc, #420]	@ (8008670 <resetMenuTexts+0x3d4>)
 80084cc:	f003 ff60 	bl	800c390 <memset>
    memset(yukariValfSureText, 0, 17);
 80084d0:	2211      	movs	r2, #17
 80084d2:	2100      	movs	r1, #0
 80084d4:	4867      	ldr	r0, [pc, #412]	@ (8008674 <resetMenuTexts+0x3d8>)
 80084d6:	f003 ff5b 	bl	800c390 <memset>
    memset(asagiValfSureText, 0, 17);
 80084da:	2211      	movs	r2, #17
 80084dc:	2100      	movs	r1, #0
 80084de:	4866      	ldr	r0, [pc, #408]	@ (8008678 <resetMenuTexts+0x3dc>)
 80084e0:	f003 ff56 	bl	800c390 <memset>
    memset(devirmeYukariValfSureText, 0, 17);
 80084e4:	2211      	movs	r2, #17
 80084e6:	2100      	movs	r1, #0
 80084e8:	4864      	ldr	r0, [pc, #400]	@ (800867c <resetMenuTexts+0x3e0>)
 80084ea:	f003 ff51 	bl	800c390 <memset>
    memset(ileriValfSureText, 0, 17);
 80084ee:	2211      	movs	r2, #17
 80084f0:	2100      	movs	r1, #0
 80084f2:	4863      	ldr	r0, [pc, #396]	@ (8008680 <resetMenuTexts+0x3e4>)
 80084f4:	f003 ff4c 	bl	800c390 <memset>
    memset(devirmeAsagiValfSureText, 0, 17);
 80084f8:	2211      	movs	r2, #17
 80084fa:	2100      	movs	r1, #0
 80084fc:	4861      	ldr	r0, [pc, #388]	@ (8008684 <resetMenuTexts+0x3e8>)
 80084fe:	f003 ff47 	bl	800c390 <memset>
    memset(geriValfSureText, 0, 17);
 8008502:	2211      	movs	r2, #17
 8008504:	2100      	movs	r1, #0
 8008506:	4860      	ldr	r0, [pc, #384]	@ (8008688 <resetMenuTexts+0x3ec>)
 8008508:	f003 ff42 	bl	800c390 <memset>
    memset(calismaSuresiText, 0, 17);
 800850c:	2211      	movs	r2, #17
 800850e:	2100      	movs	r1, #0
 8008510:	485e      	ldr	r0, [pc, #376]	@ (800868c <resetMenuTexts+0x3f0>)
 8008512:	f003 ff3d 	bl	800c390 <memset>
    memset(calismaSayisiText, 0, 17);
 8008516:	2211      	movs	r2, #17
 8008518:	2100      	movs	r1, #0
 800851a:	485d      	ldr	r0, [pc, #372]	@ (8008690 <resetMenuTexts+0x3f4>)
 800851c:	f003 ff38 	bl	800c390 <memset>
    memset(enterlaSifirlaText, 0, 17);
 8008520:	2211      	movs	r2, #17
 8008522:	2100      	movs	r1, #0
 8008524:	485b      	ldr	r0, [pc, #364]	@ (8008694 <resetMenuTexts+0x3f8>)
 8008526:	f003 ff33 	bl	800c390 <memset>
    memset(dilSecimText, 0, 17);
 800852a:	2211      	movs	r2, #17
 800852c:	2100      	movs	r1, #0
 800852e:	485a      	ldr	r0, [pc, #360]	@ (8008698 <resetMenuTexts+0x3fc>)
 8008530:	f003 ff2e 	bl	800c390 <memset>
    memset(secilenDilText, 0, 17);
 8008534:	2211      	movs	r2, #17
 8008536:	2100      	movs	r1, #0
 8008538:	4858      	ldr	r0, [pc, #352]	@ (800869c <resetMenuTexts+0x400>)
 800853a:	f003 ff29 	bl	800c390 <memset>
    memset(menudenCikisText, 0, 17);
 800853e:	2211      	movs	r2, #17
 8008540:	2100      	movs	r1, #0
 8008542:	4857      	ldr	r0, [pc, #348]	@ (80086a0 <resetMenuTexts+0x404>)
 8008544:	f003 ff24 	bl	800c390 <memset>
    memset(enteraBasinizText, 0, 17);
 8008548:	2211      	movs	r2, #17
 800854a:	2100      	movs	r1, #0
 800854c:	4855      	ldr	r0, [pc, #340]	@ (80086a4 <resetMenuTexts+0x408>)
 800854e:	f003 ff1f 	bl	800c390 <memset>
    memset(hataKoduText, 0, 17);
 8008552:	2211      	movs	r2, #17
 8008554:	2100      	movs	r1, #0
 8008556:	4854      	ldr	r0, [pc, #336]	@ (80086a8 <resetMenuTexts+0x40c>)
 8008558:	f003 ff1a 	bl	800c390 <memset>
    memset(dataYazildiText, 0, 17);
 800855c:	2211      	movs	r2, #17
 800855e:	2100      	movs	r1, #0
 8008560:	4852      	ldr	r0, [pc, #328]	@ (80086ac <resetMenuTexts+0x410>)
 8008562:	f003 ff15 	bl	800c390 <memset>
    memset(dataOkunuyorText, 0, 17);
 8008566:	2211      	movs	r2, #17
 8008568:	2100      	movs	r1, #0
 800856a:	4851      	ldr	r0, [pc, #324]	@ (80086b0 <resetMenuTexts+0x414>)
 800856c:	f003 ff10 	bl	800c390 <memset>
    memset(dataOkunduText, 0, 17);
 8008570:	2211      	movs	r2, #17
 8008572:	2100      	movs	r1, #0
 8008574:	484f      	ldr	r0, [pc, #316]	@ (80086b4 <resetMenuTexts+0x418>)
 8008576:	f003 ff0b 	bl	800c390 <memset>
    memset(degerKaydedildiText, 0, 17);
 800857a:	2211      	movs	r2, #17
 800857c:	2100      	movs	r1, #0
 800857e:	484e      	ldr	r0, [pc, #312]	@ (80086b8 <resetMenuTexts+0x41c>)
 8008580:	f003 ff06 	bl	800c390 <memset>
    memset(errorCodeText, 0, 17);
 8008584:	2211      	movs	r2, #17
 8008586:	2100      	movs	r1, #0
 8008588:	484c      	ldr	r0, [pc, #304]	@ (80086bc <resetMenuTexts+0x420>)
 800858a:	f003 ff01 	bl	800c390 <memset>
}
 800858e:	bf00      	nop
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	20000e08 	.word	0x20000e08
 8008598:	20000e1c 	.word	0x20000e1c
 800859c:	20000e30 	.word	0x20000e30
 80085a0:	20000e44 	.word	0x20000e44
 80085a4:	20000e58 	.word	0x20000e58
 80085a8:	20000e6c 	.word	0x20000e6c
 80085ac:	20000e80 	.word	0x20000e80
 80085b0:	20000e94 	.word	0x20000e94
 80085b4:	20000ea8 	.word	0x20000ea8
 80085b8:	20000ebc 	.word	0x20000ebc
 80085bc:	20000ed0 	.word	0x20000ed0
 80085c0:	20000ee4 	.word	0x20000ee4
 80085c4:	20000ef8 	.word	0x20000ef8
 80085c8:	20000f0c 	.word	0x20000f0c
 80085cc:	20000f20 	.word	0x20000f20
 80085d0:	20000f34 	.word	0x20000f34
 80085d4:	20000f48 	.word	0x20000f48
 80085d8:	20000f5c 	.word	0x20000f5c
 80085dc:	20000f70 	.word	0x20000f70
 80085e0:	20000f84 	.word	0x20000f84
 80085e4:	20000f98 	.word	0x20000f98
 80085e8:	20000fac 	.word	0x20000fac
 80085ec:	20000fc0 	.word	0x20000fc0
 80085f0:	20000fd4 	.word	0x20000fd4
 80085f4:	20000fe8 	.word	0x20000fe8
 80085f8:	20000ffc 	.word	0x20000ffc
 80085fc:	20001010 	.word	0x20001010
 8008600:	20001024 	.word	0x20001024
 8008604:	20001038 	.word	0x20001038
 8008608:	2000104c 	.word	0x2000104c
 800860c:	20001060 	.word	0x20001060
 8008610:	20001074 	.word	0x20001074
 8008614:	20001088 	.word	0x20001088
 8008618:	2000109c 	.word	0x2000109c
 800861c:	200010b0 	.word	0x200010b0
 8008620:	200010c4 	.word	0x200010c4
 8008624:	200010d8 	.word	0x200010d8
 8008628:	200010ec 	.word	0x200010ec
 800862c:	20001100 	.word	0x20001100
 8008630:	20001114 	.word	0x20001114
 8008634:	20001128 	.word	0x20001128
 8008638:	2000113c 	.word	0x2000113c
 800863c:	20001150 	.word	0x20001150
 8008640:	20001164 	.word	0x20001164
 8008644:	20001178 	.word	0x20001178
 8008648:	2000118c 	.word	0x2000118c
 800864c:	200011a0 	.word	0x200011a0
 8008650:	200011b4 	.word	0x200011b4
 8008654:	200011c8 	.word	0x200011c8
 8008658:	200011dc 	.word	0x200011dc
 800865c:	200011f0 	.word	0x200011f0
 8008660:	20001204 	.word	0x20001204
 8008664:	20001218 	.word	0x20001218
 8008668:	2000122c 	.word	0x2000122c
 800866c:	20001240 	.word	0x20001240
 8008670:	20001254 	.word	0x20001254
 8008674:	20001268 	.word	0x20001268
 8008678:	2000127c 	.word	0x2000127c
 800867c:	20001290 	.word	0x20001290
 8008680:	200012a4 	.word	0x200012a4
 8008684:	200012b8 	.word	0x200012b8
 8008688:	200012cc 	.word	0x200012cc
 800868c:	200012e0 	.word	0x200012e0
 8008690:	200012f4 	.word	0x200012f4
 8008694:	20001308 	.word	0x20001308
 8008698:	2000131c 	.word	0x2000131c
 800869c:	20001330 	.word	0x20001330
 80086a0:	20001344 	.word	0x20001344
 80086a4:	20001358 	.word	0x20001358
 80086a8:	2000136c 	.word	0x2000136c
 80086ac:	20001380 	.word	0x20001380
 80086b0:	20001394 	.word	0x20001394
 80086b4:	200013a8 	.word	0x200013a8
 80086b8:	200013bc 	.word	0x200013bc
 80086bc:	200013d0 	.word	0x200013d0

080086c0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af02      	add	r7, sp, #8
 80086c6:	4603      	mov	r3, r0
 80086c8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80086ca:	79fb      	ldrb	r3, [r7, #7]
 80086cc:	f023 030f 	bic.w	r3, r3, #15
 80086d0:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80086d2:	79fb      	ldrb	r3, [r7, #7]
 80086d4:	011b      	lsls	r3, r3, #4
 80086d6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80086d8:	7b7b      	ldrb	r3, [r7, #13]
 80086da:	f043 030c 	orr.w	r3, r3, #12
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80086e2:	7b7b      	ldrb	r3, [r7, #13]
 80086e4:	f043 0308 	orr.w	r3, r3, #8
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80086ec:	7b3b      	ldrb	r3, [r7, #12]
 80086ee:	f043 030c 	orr.w	r3, r3, #12
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80086f6:	7b3b      	ldrb	r3, [r7, #12]
 80086f8:	f043 0308 	orr.w	r3, r3, #8
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008700:	bf00      	nop
 8008702:	4825      	ldr	r0, [pc, #148]	@ (8008798 <lcd_send_cmd+0xd8>)
 8008704:	f002 f887 	bl	800a816 <HAL_I2C_GetError>
 8008708:	4603      	mov	r3, r0
 800870a:	2b04      	cmp	r3, #4
 800870c:	d0f9      	beq.n	8008702 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800870e:	bf00      	nop
 8008710:	4821      	ldr	r0, [pc, #132]	@ (8008798 <lcd_send_cmd+0xd8>)
 8008712:	f002 f873 	bl	800a7fc <HAL_I2C_GetState>
 8008716:	4603      	mov	r3, r0
 8008718:	2b20      	cmp	r3, #32
 800871a:	d1f9      	bne.n	8008710 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 800871c:	4b1f      	ldr	r3, [pc, #124]	@ (800879c <lcd_send_cmd+0xdc>)
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d116      	bne.n	8008752 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008724:	2300      	movs	r3, #0
 8008726:	73fb      	strb	r3, [r7, #15]
 8008728:	e00f      	b.n	800874a <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800872a:	7bfb      	ldrb	r3, [r7, #15]
 800872c:	3310      	adds	r3, #16
 800872e:	443b      	add	r3, r7
 8008730:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008734:	7bfb      	ldrb	r3, [r7, #15]
 8008736:	f022 0208 	bic.w	r2, r2, #8
 800873a:	b2d2      	uxtb	r2, r2
 800873c:	3310      	adds	r3, #16
 800873e:	443b      	add	r3, r7
 8008740:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008744:	7bfb      	ldrb	r3, [r7, #15]
 8008746:	3301      	adds	r3, #1
 8008748:	73fb      	strb	r3, [r7, #15]
 800874a:	7bfb      	ldrb	r3, [r7, #15]
 800874c:	2b03      	cmp	r3, #3
 800874e:	d9ec      	bls.n	800872a <lcd_send_cmd+0x6a>
 8008750:	e015      	b.n	800877e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008752:	2300      	movs	r3, #0
 8008754:	73bb      	strb	r3, [r7, #14]
 8008756:	e00f      	b.n	8008778 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008758:	7bbb      	ldrb	r3, [r7, #14]
 800875a:	3310      	adds	r3, #16
 800875c:	443b      	add	r3, r7
 800875e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	f042 0208 	orr.w	r2, r2, #8
 8008768:	b2d2      	uxtb	r2, r2
 800876a:	3310      	adds	r3, #16
 800876c:	443b      	add	r3, r7
 800876e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008772:	7bbb      	ldrb	r3, [r7, #14]
 8008774:	3301      	adds	r3, #1
 8008776:	73bb      	strb	r3, [r7, #14]
 8008778:	7bbb      	ldrb	r3, [r7, #14]
 800877a:	2b03      	cmp	r3, #3
 800877c:	d9ec      	bls.n	8008758 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800877e:	f107 0208 	add.w	r2, r7, #8
 8008782:	2364      	movs	r3, #100	@ 0x64
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	2304      	movs	r3, #4
 8008788:	214e      	movs	r1, #78	@ 0x4e
 800878a:	4803      	ldr	r0, [pc, #12]	@ (8008798 <lcd_send_cmd+0xd8>)
 800878c:	f001 fbd6 	bl	8009f3c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008790:	bf00      	nop
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	2000140c 	.word	0x2000140c
 800879c:	200013e1 	.word	0x200013e1

080087a0 <lcd_send_data>:

void lcd_send_data (char data) {
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af02      	add	r7, sp, #8
 80087a6:	4603      	mov	r3, r0
 80087a8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80087aa:	79fb      	ldrb	r3, [r7, #7]
 80087ac:	f023 030f 	bic.w	r3, r3, #15
 80087b0:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	011b      	lsls	r3, r3, #4
 80087b6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80087b8:	7b7b      	ldrb	r3, [r7, #13]
 80087ba:	f043 030d 	orr.w	r3, r3, #13
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80087c2:	7b7b      	ldrb	r3, [r7, #13]
 80087c4:	f043 0309 	orr.w	r3, r3, #9
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80087cc:	7b3b      	ldrb	r3, [r7, #12]
 80087ce:	f043 030d 	orr.w	r3, r3, #13
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80087d6:	7b3b      	ldrb	r3, [r7, #12]
 80087d8:	f043 0309 	orr.w	r3, r3, #9
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80087e0:	bf00      	nop
 80087e2:	4825      	ldr	r0, [pc, #148]	@ (8008878 <lcd_send_data+0xd8>)
 80087e4:	f002 f817 	bl	800a816 <HAL_I2C_GetError>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b04      	cmp	r3, #4
 80087ec:	d0f9      	beq.n	80087e2 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80087ee:	bf00      	nop
 80087f0:	4821      	ldr	r0, [pc, #132]	@ (8008878 <lcd_send_data+0xd8>)
 80087f2:	f002 f803 	bl	800a7fc <HAL_I2C_GetState>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b20      	cmp	r3, #32
 80087fa:	d1f9      	bne.n	80087f0 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80087fc:	4b1f      	ldr	r3, [pc, #124]	@ (800887c <lcd_send_data+0xdc>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d116      	bne.n	8008832 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008804:	2300      	movs	r3, #0
 8008806:	73fb      	strb	r3, [r7, #15]
 8008808:	e00f      	b.n	800882a <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	3310      	adds	r3, #16
 800880e:	443b      	add	r3, r7
 8008810:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	f022 0208 	bic.w	r2, r2, #8
 800881a:	b2d2      	uxtb	r2, r2
 800881c:	3310      	adds	r3, #16
 800881e:	443b      	add	r3, r7
 8008820:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008824:	7bfb      	ldrb	r3, [r7, #15]
 8008826:	3301      	adds	r3, #1
 8008828:	73fb      	strb	r3, [r7, #15]
 800882a:	7bfb      	ldrb	r3, [r7, #15]
 800882c:	2b03      	cmp	r3, #3
 800882e:	d9ec      	bls.n	800880a <lcd_send_data+0x6a>
 8008830:	e015      	b.n	800885e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008832:	2300      	movs	r3, #0
 8008834:	73bb      	strb	r3, [r7, #14]
 8008836:	e00f      	b.n	8008858 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8008838:	7bbb      	ldrb	r3, [r7, #14]
 800883a:	3310      	adds	r3, #16
 800883c:	443b      	add	r3, r7
 800883e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008842:	7bbb      	ldrb	r3, [r7, #14]
 8008844:	f042 0208 	orr.w	r2, r2, #8
 8008848:	b2d2      	uxtb	r2, r2
 800884a:	3310      	adds	r3, #16
 800884c:	443b      	add	r3, r7
 800884e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008852:	7bbb      	ldrb	r3, [r7, #14]
 8008854:	3301      	adds	r3, #1
 8008856:	73bb      	strb	r3, [r7, #14]
 8008858:	7bbb      	ldrb	r3, [r7, #14]
 800885a:	2b03      	cmp	r3, #3
 800885c:	d9ec      	bls.n	8008838 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800885e:	f107 0208 	add.w	r2, r7, #8
 8008862:	2364      	movs	r3, #100	@ 0x64
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	2304      	movs	r3, #4
 8008868:	214e      	movs	r1, #78	@ 0x4e
 800886a:	4803      	ldr	r0, [pc, #12]	@ (8008878 <lcd_send_data+0xd8>)
 800886c:	f001 fb66 	bl	8009f3c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008870:	bf00      	nop
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	2000140c 	.word	0x2000140c
 800887c:	200013e1 	.word	0x200013e1

08008880 <lcd_send_string>:

void lcd_send_string (char *str) {
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
	while (*str) {
 8008888:	e006      	b.n	8008898 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	1c5a      	adds	r2, r3, #1
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	4618      	mov	r0, r3
 8008894:	f7ff ff84 	bl	80087a0 <lcd_send_data>
	while (*str) {
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1f4      	bne.n	800888a <lcd_send_string+0xa>
	}
}
 80088a0:	bf00      	nop
 80088a2:	bf00      	nop
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <lcd_init>:

void lcd_init (void) {
 80088aa:	b580      	push	{r7, lr}
 80088ac:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80088ae:	2002      	movs	r0, #2
 80088b0:	f7ff ff06 	bl	80086c0 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80088b4:	2028      	movs	r0, #40	@ 0x28
 80088b6:	f7ff ff03 	bl	80086c0 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80088ba:	200c      	movs	r0, #12
 80088bc:	f7ff ff00 	bl	80086c0 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80088c0:	2080      	movs	r0, #128	@ 0x80
 80088c2:	f7ff fefd 	bl	80086c0 <lcd_send_cmd>
	lcd_backlight(1);
 80088c6:	2001      	movs	r0, #1
 80088c8:	f000 f840 	bl	800894c <lcd_backlight>
}
 80088cc:	bf00      	nop
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	4603      	mov	r3, r0
 80088d8:	460a      	mov	r2, r1
 80088da:	71fb      	strb	r3, [r7, #7]
 80088dc:	4613      	mov	r3, r2
 80088de:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 80088e0:	79fb      	ldrb	r3, [r7, #7]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d106      	bne.n	80088f4 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80088e6:	79bb      	ldrb	r3, [r7, #6]
 80088e8:	337f      	adds	r3, #127	@ 0x7f
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7ff fee7 	bl	80086c0 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80088f2:	e008      	b.n	8008906 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80088f4:	79fb      	ldrb	r3, [r7, #7]
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d105      	bne.n	8008906 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80088fa:	79bb      	ldrb	r3, [r7, #6]
 80088fc:	3b41      	subs	r3, #65	@ 0x41
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	4618      	mov	r0, r3
 8008902:	f7ff fedd 	bl	80086c0 <lcd_send_cmd>
}
 8008906:	bf00      	nop
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 800890e:	b580      	push	{r7, lr}
 8008910:	b082      	sub	sp, #8
 8008912:	af00      	add	r7, sp, #0
 8008914:	4603      	mov	r3, r0
 8008916:	603a      	str	r2, [r7, #0]
 8008918:	71fb      	strb	r3, [r7, #7]
 800891a:	460b      	mov	r3, r1
 800891c:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 800891e:	79ba      	ldrb	r2, [r7, #6]
 8008920:	79fb      	ldrb	r3, [r7, #7]
 8008922:	4611      	mov	r1, r2
 8008924:	4618      	mov	r0, r3
 8008926:	f7ff ffd3 	bl	80088d0 <lcd_gotoxy>
	lcd_send_string(str);
 800892a:	6838      	ldr	r0, [r7, #0]
 800892c:	f7ff ffa8 	bl	8008880 <lcd_send_string>
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <lcd_clear>:

void lcd_clear(void) {
 8008938:	b580      	push	{r7, lr}
 800893a:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 800893c:	2001      	movs	r0, #1
 800893e:	f7ff febf 	bl	80086c0 <lcd_send_cmd>
    HAL_Delay(2);
 8008942:	2002      	movs	r0, #2
 8008944:	f000 fcb0 	bl	80092a8 <HAL_Delay>

}
 8008948:	bf00      	nop
 800894a:	bd80      	pop	{r7, pc}

0800894c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	4603      	mov	r3, r0
 8008954:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8008956:	4a05      	ldr	r2, [pc, #20]	@ (800896c <lcd_backlight+0x20>)
 8008958:	79fb      	ldrb	r3, [r7, #7]
 800895a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800895c:	2000      	movs	r0, #0
 800895e:	f7ff feaf 	bl	80086c0 <lcd_send_cmd>
}
 8008962:	bf00      	nop
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	200013e1 	.word	0x200013e1

08008970 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008978:	4b04      	ldr	r3, [pc, #16]	@ (800898c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3301      	adds	r3, #1
 800897e:	4a03      	ldr	r2, [pc, #12]	@ (800898c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008980:	6013      	str	r3, [r2, #0]
}
 8008982:	bf00      	nop
 8008984:	370c      	adds	r7, #12
 8008986:	46bd      	mov	sp, r7
 8008988:	bc80      	pop	{r7}
 800898a:	4770      	bx	lr
 800898c:	20000d78 	.word	0x20000d78

08008990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008994:	f000 fc26 	bl	80091e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008998:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800899c:	f000 fc84 	bl	80092a8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80089a0:	f000 f89a 	bl	8008ad8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80089a4:	f000 f9bc 	bl	8008d20 <MX_GPIO_Init>
  MX_CAN_Init();
 80089a8:	f000 f8dc 	bl	8008b64 <MX_CAN_Init>
  MX_I2C1_Init();
 80089ac:	f000 f90e 	bl	8008bcc <MX_I2C1_Init>
  MX_TIM1_Init();
 80089b0:	f000 f93a 	bl	8008c28 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80089b4:	f000 f98a 	bl	8008ccc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80089b8:	2201      	movs	r2, #1
 80089ba:	2140      	movs	r1, #64	@ 0x40
 80089bc:	483d      	ldr	r0, [pc, #244]	@ (8008ab4 <main+0x124>)
 80089be:	f001 f918 	bl	8009bf2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80089c2:	2201      	movs	r2, #1
 80089c4:	2180      	movs	r1, #128	@ 0x80
 80089c6:	483b      	ldr	r0, [pc, #236]	@ (8008ab4 <main+0x124>)
 80089c8:	f001 f913 	bl	8009bf2 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80089cc:	200a      	movs	r0, #10
 80089ce:	f000 fc6b 	bl	80092a8 <HAL_Delay>
  lcd_init();
 80089d2:	f7ff ff6a 	bl	80088aa <lcd_init>
  HAL_Delay(10);
 80089d6:	200a      	movs	r0, #10
 80089d8:	f000 fc66 	bl	80092a8 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 80089dc:	4836      	ldr	r0, [pc, #216]	@ (8008ab8 <main+0x128>)
 80089de:	f002 ffbb 	bl	800b958 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80089e2:	bf00      	nop
 80089e4:	4835      	ldr	r0, [pc, #212]	@ (8008abc <main+0x12c>)
 80089e6:	f001 ff16 	bl	800a816 <HAL_I2C_GetError>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b04      	cmp	r3, #4
 80089ee:	d0f9      	beq.n	80089e4 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80089f0:	bf00      	nop
 80089f2:	4832      	ldr	r0, [pc, #200]	@ (8008abc <main+0x12c>)
 80089f4:	f001 ff02 	bl	800a7fc <HAL_I2C_GetState>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b20      	cmp	r3, #32
 80089fc:	d1f9      	bne.n	80089f2 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80089fe:	2200      	movs	r2, #0
 8008a00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008a04:	482b      	ldr	r0, [pc, #172]	@ (8008ab4 <main+0x124>)
 8008a06:	f001 f8f4 	bl	8009bf2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a10:	4828      	ldr	r0, [pc, #160]	@ (8008ab4 <main+0x124>)
 8008a12:	f001 f8ee 	bl	8009bf2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008a16:	2200      	movs	r2, #0
 8008a18:	2104      	movs	r1, #4
 8008a1a:	4826      	ldr	r0, [pc, #152]	@ (8008ab4 <main+0x124>)
 8008a1c:	f001 f8e9 	bl	8009bf2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008a20:	2200      	movs	r2, #0
 8008a22:	2102      	movs	r1, #2
 8008a24:	4823      	ldr	r0, [pc, #140]	@ (8008ab4 <main+0x124>)
 8008a26:	f001 f8e4 	bl	8009bf2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	4821      	ldr	r0, [pc, #132]	@ (8008ab4 <main+0x124>)
 8008a30:	f001 f8df 	bl	8009bf2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008a34:	2200      	movs	r2, #0
 8008a36:	2120      	movs	r1, #32
 8008a38:	4821      	ldr	r0, [pc, #132]	@ (8008ac0 <main+0x130>)
 8008a3a:	f001 f8da 	bl	8009bf2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2110      	movs	r1, #16
 8008a42:	481f      	ldr	r0, [pc, #124]	@ (8008ac0 <main+0x130>)
 8008a44:	f001 f8d5 	bl	8009bf2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008a48:	2200      	movs	r2, #0
 8008a4a:	2180      	movs	r1, #128	@ 0x80
 8008a4c:	481d      	ldr	r0, [pc, #116]	@ (8008ac4 <main+0x134>)
 8008a4e:	f001 f8d0 	bl	8009bf2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008a52:	2200      	movs	r2, #0
 8008a54:	2140      	movs	r1, #64	@ 0x40
 8008a56:	481b      	ldr	r0, [pc, #108]	@ (8008ac4 <main+0x134>)
 8008a58:	f001 f8cb 	bl	8009bf2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	2120      	movs	r1, #32
 8008a60:	4818      	ldr	r0, [pc, #96]	@ (8008ac4 <main+0x134>)
 8008a62:	f001 f8c6 	bl	8009bf2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008a66:	2200      	movs	r2, #0
 8008a68:	2110      	movs	r1, #16
 8008a6a:	4816      	ldr	r0, [pc, #88]	@ (8008ac4 <main+0x134>)
 8008a6c:	f001 f8c1 	bl	8009bf2 <HAL_GPIO_WritePin>

  i2cTest();
 8008a70:	f7f8 f806 	bl	8000a80 <i2cTest>
  HAL_Delay(100);
 8008a74:	2064      	movs	r0, #100	@ 0x64
 8008a76:	f000 fc17 	bl	80092a8 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8008a7a:	4a13      	ldr	r2, [pc, #76]	@ (8008ac8 <main+0x138>)
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	2001      	movs	r0, #1
 8008a80:	f7ff ff45 	bl	800890e <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8008a84:	4a11      	ldr	r2, [pc, #68]	@ (8008acc <main+0x13c>)
 8008a86:	2101      	movs	r1, #1
 8008a88:	2002      	movs	r0, #2
 8008a8a:	f7ff ff40 	bl	800890e <lcd_print>
  HAL_Delay(1000);
 8008a8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008a92:	f000 fc09 	bl	80092a8 <HAL_Delay>
  lcd_clear();
 8008a96:	f7ff ff4f 	bl	8008938 <lcd_clear>

  eepromKontrol();
 8008a9a:	f7f7 fbcb 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8008a9e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008aa2:	f000 fc01 	bl	80092a8 <HAL_Delay>

  backLightTimer = millis;
 8008aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad0 <main+0x140>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8008ad4 <main+0x144>)
 8008aac:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008aae:	f7fe f80f 	bl	8006ad0 <mainLoop>
 8008ab2:	e7fc      	b.n	8008aae <main+0x11e>
 8008ab4:	40010c00 	.word	0x40010c00
 8008ab8:	20001460 	.word	0x20001460
 8008abc:	2000140c 	.word	0x2000140c
 8008ac0:	40011000 	.word	0x40011000
 8008ac4:	40010800 	.word	0x40010800
 8008ac8:	20000030 	.word	0x20000030
 8008acc:	20000044 	.word	0x20000044
 8008ad0:	20000d78 	.word	0x20000d78
 8008ad4:	20000d94 	.word	0x20000d94

08008ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b090      	sub	sp, #64	@ 0x40
 8008adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008ade:	f107 0318 	add.w	r3, r7, #24
 8008ae2:	2228      	movs	r2, #40	@ 0x28
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f003 fc52 	bl	800c390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008aec:	1d3b      	adds	r3, r7, #4
 8008aee:	2200      	movs	r2, #0
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	605a      	str	r2, [r3, #4]
 8008af4:	609a      	str	r2, [r3, #8]
 8008af6:	60da      	str	r2, [r3, #12]
 8008af8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008afa:	2301      	movs	r3, #1
 8008afc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008afe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008b02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008b04:	2300      	movs	r3, #0
 8008b06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008b10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008b14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008b16:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8008b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008b1c:	f107 0318 	add.w	r3, r7, #24
 8008b20:	4618      	mov	r0, r3
 8008b22:	f002 fab9 	bl	800b098 <HAL_RCC_OscConfig>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008b2c:	f000 f9a2 	bl	8008e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008b30:	230f      	movs	r3, #15
 8008b32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008b34:	2302      	movs	r3, #2
 8008b36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008b3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008b42:	2300      	movs	r3, #0
 8008b44:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008b46:	1d3b      	adds	r3, r7, #4
 8008b48:	2102      	movs	r1, #2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f002 fd26 	bl	800b59c <HAL_RCC_ClockConfig>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008b56:	f000 f98d 	bl	8008e74 <Error_Handler>
  }
}
 8008b5a:	bf00      	nop
 8008b5c:	3740      	adds	r7, #64	@ 0x40
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
	...

08008b64 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008b68:	4b16      	ldr	r3, [pc, #88]	@ (8008bc4 <MX_CAN_Init+0x60>)
 8008b6a:	4a17      	ldr	r2, [pc, #92]	@ (8008bc8 <MX_CAN_Init+0x64>)
 8008b6c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008b6e:	4b15      	ldr	r3, [pc, #84]	@ (8008bc4 <MX_CAN_Init+0x60>)
 8008b70:	2210      	movs	r2, #16
 8008b72:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008b74:	4b13      	ldr	r3, [pc, #76]	@ (8008bc4 <MX_CAN_Init+0x60>)
 8008b76:	2200      	movs	r2, #0
 8008b78:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008b7a:	4b12      	ldr	r3, [pc, #72]	@ (8008bc4 <MX_CAN_Init+0x60>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008b80:	4b10      	ldr	r3, [pc, #64]	@ (8008bc4 <MX_CAN_Init+0x60>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008b86:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc4 <MX_CAN_Init+0x60>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc4 <MX_CAN_Init+0x60>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008b92:	4b0c      	ldr	r3, [pc, #48]	@ (8008bc4 <MX_CAN_Init+0x60>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008b98:	4b0a      	ldr	r3, [pc, #40]	@ (8008bc4 <MX_CAN_Init+0x60>)
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008b9e:	4b09      	ldr	r3, [pc, #36]	@ (8008bc4 <MX_CAN_Init+0x60>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008ba4:	4b07      	ldr	r3, [pc, #28]	@ (8008bc4 <MX_CAN_Init+0x60>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008baa:	4b06      	ldr	r3, [pc, #24]	@ (8008bc4 <MX_CAN_Init+0x60>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008bb0:	4804      	ldr	r0, [pc, #16]	@ (8008bc4 <MX_CAN_Init+0x60>)
 8008bb2:	f000 fb9d 	bl	80092f0 <HAL_CAN_Init>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008bbc:	f000 f95a 	bl	8008e74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008bc0:	bf00      	nop
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	200013e4 	.word	0x200013e4
 8008bc8:	40006400 	.word	0x40006400

08008bcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008bd0:	4b12      	ldr	r3, [pc, #72]	@ (8008c1c <MX_I2C1_Init+0x50>)
 8008bd2:	4a13      	ldr	r2, [pc, #76]	@ (8008c20 <MX_I2C1_Init+0x54>)
 8008bd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008bd6:	4b11      	ldr	r3, [pc, #68]	@ (8008c1c <MX_I2C1_Init+0x50>)
 8008bd8:	4a12      	ldr	r2, [pc, #72]	@ (8008c24 <MX_I2C1_Init+0x58>)
 8008bda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8008c1c <MX_I2C1_Init+0x50>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008be2:	4b0e      	ldr	r3, [pc, #56]	@ (8008c1c <MX_I2C1_Init+0x50>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008be8:	4b0c      	ldr	r3, [pc, #48]	@ (8008c1c <MX_I2C1_Init+0x50>)
 8008bea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008bee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8008c1c <MX_I2C1_Init+0x50>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008bf6:	4b09      	ldr	r3, [pc, #36]	@ (8008c1c <MX_I2C1_Init+0x50>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008bfc:	4b07      	ldr	r3, [pc, #28]	@ (8008c1c <MX_I2C1_Init+0x50>)
 8008bfe:	2200      	movs	r2, #0
 8008c00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008c02:	4b06      	ldr	r3, [pc, #24]	@ (8008c1c <MX_I2C1_Init+0x50>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008c08:	4804      	ldr	r0, [pc, #16]	@ (8008c1c <MX_I2C1_Init+0x50>)
 8008c0a:	f001 f823 	bl	8009c54 <HAL_I2C_Init>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008c14:	f000 f92e 	bl	8008e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008c18:	bf00      	nop
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	2000140c 	.word	0x2000140c
 8008c20:	40005400 	.word	0x40005400
 8008c24:	00061a80 	.word	0x00061a80

08008c28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008c2e:	f107 0308 	add.w	r3, r7, #8
 8008c32:	2200      	movs	r2, #0
 8008c34:	601a      	str	r2, [r3, #0]
 8008c36:	605a      	str	r2, [r3, #4]
 8008c38:	609a      	str	r2, [r3, #8]
 8008c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c3c:	463b      	mov	r3, r7
 8008c3e:	2200      	movs	r2, #0
 8008c40:	601a      	str	r2, [r3, #0]
 8008c42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008c44:	4b1f      	ldr	r3, [pc, #124]	@ (8008cc4 <MX_TIM1_Init+0x9c>)
 8008c46:	4a20      	ldr	r2, [pc, #128]	@ (8008cc8 <MX_TIM1_Init+0xa0>)
 8008c48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8008cc4 <MX_TIM1_Init+0x9c>)
 8008c4c:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8008c50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c52:	4b1c      	ldr	r3, [pc, #112]	@ (8008cc4 <MX_TIM1_Init+0x9c>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008c58:	4b1a      	ldr	r3, [pc, #104]	@ (8008cc4 <MX_TIM1_Init+0x9c>)
 8008c5a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8008c5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c60:	4b18      	ldr	r3, [pc, #96]	@ (8008cc4 <MX_TIM1_Init+0x9c>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008c66:	4b17      	ldr	r3, [pc, #92]	@ (8008cc4 <MX_TIM1_Init+0x9c>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c6c:	4b15      	ldr	r3, [pc, #84]	@ (8008cc4 <MX_TIM1_Init+0x9c>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008c72:	4814      	ldr	r0, [pc, #80]	@ (8008cc4 <MX_TIM1_Init+0x9c>)
 8008c74:	f002 fe20 	bl	800b8b8 <HAL_TIM_Base_Init>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d001      	beq.n	8008c82 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008c7e:	f000 f8f9 	bl	8008e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008c82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008c86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008c88:	f107 0308 	add.w	r3, r7, #8
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	480d      	ldr	r0, [pc, #52]	@ (8008cc4 <MX_TIM1_Init+0x9c>)
 8008c90:	f002 ffca 	bl	800bc28 <HAL_TIM_ConfigClockSource>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008c9a:	f000 f8eb 	bl	8008e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008ca6:	463b      	mov	r3, r7
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4806      	ldr	r0, [pc, #24]	@ (8008cc4 <MX_TIM1_Init+0x9c>)
 8008cac:	f003 f9b8 	bl	800c020 <HAL_TIMEx_MasterConfigSynchronization>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008cb6:	f000 f8dd 	bl	8008e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008cba:	bf00      	nop
 8008cbc:	3718      	adds	r7, #24
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20001460 	.word	0x20001460
 8008cc8:	40012c00 	.word	0x40012c00

08008ccc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008cd0:	4b11      	ldr	r3, [pc, #68]	@ (8008d18 <MX_USART1_UART_Init+0x4c>)
 8008cd2:	4a12      	ldr	r2, [pc, #72]	@ (8008d1c <MX_USART1_UART_Init+0x50>)
 8008cd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008cd6:	4b10      	ldr	r3, [pc, #64]	@ (8008d18 <MX_USART1_UART_Init+0x4c>)
 8008cd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008cdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008cde:	4b0e      	ldr	r3, [pc, #56]	@ (8008d18 <MX_USART1_UART_Init+0x4c>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8008d18 <MX_USART1_UART_Init+0x4c>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008cea:	4b0b      	ldr	r3, [pc, #44]	@ (8008d18 <MX_USART1_UART_Init+0x4c>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008cf0:	4b09      	ldr	r3, [pc, #36]	@ (8008d18 <MX_USART1_UART_Init+0x4c>)
 8008cf2:	220c      	movs	r2, #12
 8008cf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008cf6:	4b08      	ldr	r3, [pc, #32]	@ (8008d18 <MX_USART1_UART_Init+0x4c>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008cfc:	4b06      	ldr	r3, [pc, #24]	@ (8008d18 <MX_USART1_UART_Init+0x4c>)
 8008cfe:	2200      	movs	r2, #0
 8008d00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008d02:	4805      	ldr	r0, [pc, #20]	@ (8008d18 <MX_USART1_UART_Init+0x4c>)
 8008d04:	f003 fa0a 	bl	800c11c <HAL_UART_Init>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008d0e:	f000 f8b1 	bl	8008e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008d12:	bf00      	nop
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	200014a8 	.word	0x200014a8
 8008d1c:	40013800 	.word	0x40013800

08008d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b088      	sub	sp, #32
 8008d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d26:	f107 0310 	add.w	r3, r7, #16
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	605a      	str	r2, [r3, #4]
 8008d30:	609a      	str	r2, [r3, #8]
 8008d32:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d34:	4b4b      	ldr	r3, [pc, #300]	@ (8008e64 <MX_GPIO_Init+0x144>)
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	4a4a      	ldr	r2, [pc, #296]	@ (8008e64 <MX_GPIO_Init+0x144>)
 8008d3a:	f043 0310 	orr.w	r3, r3, #16
 8008d3e:	6193      	str	r3, [r2, #24]
 8008d40:	4b48      	ldr	r3, [pc, #288]	@ (8008e64 <MX_GPIO_Init+0x144>)
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	f003 0310 	and.w	r3, r3, #16
 8008d48:	60fb      	str	r3, [r7, #12]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008d4c:	4b45      	ldr	r3, [pc, #276]	@ (8008e64 <MX_GPIO_Init+0x144>)
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	4a44      	ldr	r2, [pc, #272]	@ (8008e64 <MX_GPIO_Init+0x144>)
 8008d52:	f043 0320 	orr.w	r3, r3, #32
 8008d56:	6193      	str	r3, [r2, #24]
 8008d58:	4b42      	ldr	r3, [pc, #264]	@ (8008e64 <MX_GPIO_Init+0x144>)
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	f003 0320 	and.w	r3, r3, #32
 8008d60:	60bb      	str	r3, [r7, #8]
 8008d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d64:	4b3f      	ldr	r3, [pc, #252]	@ (8008e64 <MX_GPIO_Init+0x144>)
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	4a3e      	ldr	r2, [pc, #248]	@ (8008e64 <MX_GPIO_Init+0x144>)
 8008d6a:	f043 0304 	orr.w	r3, r3, #4
 8008d6e:	6193      	str	r3, [r2, #24]
 8008d70:	4b3c      	ldr	r3, [pc, #240]	@ (8008e64 <MX_GPIO_Init+0x144>)
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	f003 0304 	and.w	r3, r3, #4
 8008d78:	607b      	str	r3, [r7, #4]
 8008d7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d7c:	4b39      	ldr	r3, [pc, #228]	@ (8008e64 <MX_GPIO_Init+0x144>)
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	4a38      	ldr	r2, [pc, #224]	@ (8008e64 <MX_GPIO_Init+0x144>)
 8008d82:	f043 0308 	orr.w	r3, r3, #8
 8008d86:	6193      	str	r3, [r2, #24]
 8008d88:	4b36      	ldr	r3, [pc, #216]	@ (8008e64 <MX_GPIO_Init+0x144>)
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	f003 0308 	and.w	r3, r3, #8
 8008d90:	603b      	str	r3, [r7, #0]
 8008d92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008d94:	2200      	movs	r2, #0
 8008d96:	21f0      	movs	r1, #240	@ 0xf0
 8008d98:	4833      	ldr	r0, [pc, #204]	@ (8008e68 <MX_GPIO_Init+0x148>)
 8008d9a:	f000 ff2a 	bl	8009bf2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f241 0130 	movw	r1, #4144	@ 0x1030
 8008da4:	4831      	ldr	r0, [pc, #196]	@ (8008e6c <MX_GPIO_Init+0x14c>)
 8008da6:	f000 ff24 	bl	8009bf2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008daa:	2200      	movs	r2, #0
 8008dac:	f640 4107 	movw	r1, #3079	@ 0xc07
 8008db0:	482f      	ldr	r0, [pc, #188]	@ (8008e70 <MX_GPIO_Init+0x150>)
 8008db2:	f000 ff1e 	bl	8009bf2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008db6:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8008dba:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008dc4:	f107 0310 	add.w	r3, r7, #16
 8008dc8:	4619      	mov	r1, r3
 8008dca:	4828      	ldr	r0, [pc, #160]	@ (8008e6c <MX_GPIO_Init+0x14c>)
 8008dcc:	f000 fc9a 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008dd0:	f248 130f 	movw	r3, #33039	@ 0x810f
 8008dd4:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dde:	f107 0310 	add.w	r3, r7, #16
 8008de2:	4619      	mov	r1, r3
 8008de4:	4820      	ldr	r0, [pc, #128]	@ (8008e68 <MX_GPIO_Init+0x148>)
 8008de6:	f000 fc8d 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008dea:	23f0      	movs	r3, #240	@ 0xf0
 8008dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008dee:	2301      	movs	r3, #1
 8008df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008df2:	2300      	movs	r3, #0
 8008df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008df6:	2302      	movs	r3, #2
 8008df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dfa:	f107 0310 	add.w	r3, r7, #16
 8008dfe:	4619      	mov	r1, r3
 8008e00:	4819      	ldr	r0, [pc, #100]	@ (8008e68 <MX_GPIO_Init+0x148>)
 8008e02:	f000 fc7f 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008e06:	f241 0330 	movw	r3, #4144	@ 0x1030
 8008e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e10:	2300      	movs	r3, #0
 8008e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e14:	2302      	movs	r3, #2
 8008e16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e18:	f107 0310 	add.w	r3, r7, #16
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	4813      	ldr	r0, [pc, #76]	@ (8008e6c <MX_GPIO_Init+0x14c>)
 8008e20:	f000 fc70 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008e24:	f640 4307 	movw	r3, #3079	@ 0xc07
 8008e28:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e32:	2302      	movs	r3, #2
 8008e34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e36:	f107 0310 	add.w	r3, r7, #16
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	480c      	ldr	r0, [pc, #48]	@ (8008e70 <MX_GPIO_Init+0x150>)
 8008e3e:	f000 fc61 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008e42:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8008e46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e50:	f107 0310 	add.w	r3, r7, #16
 8008e54:	4619      	mov	r1, r3
 8008e56:	4806      	ldr	r0, [pc, #24]	@ (8008e70 <MX_GPIO_Init+0x150>)
 8008e58:	f000 fc54 	bl	8009704 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008e5c:	bf00      	nop
 8008e5e:	3720      	adds	r7, #32
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	40021000 	.word	0x40021000
 8008e68:	40010800 	.word	0x40010800
 8008e6c:	40011000 	.word	0x40011000
 8008e70:	40010c00 	.word	0x40010c00

08008e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008e74:	b480      	push	{r7}
 8008e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008e78:	bf00      	nop
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bc80      	pop	{r7}
 8008e7e:	4770      	bx	lr

08008e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008e86:	4b15      	ldr	r3, [pc, #84]	@ (8008edc <HAL_MspInit+0x5c>)
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	4a14      	ldr	r2, [pc, #80]	@ (8008edc <HAL_MspInit+0x5c>)
 8008e8c:	f043 0301 	orr.w	r3, r3, #1
 8008e90:	6193      	str	r3, [r2, #24]
 8008e92:	4b12      	ldr	r3, [pc, #72]	@ (8008edc <HAL_MspInit+0x5c>)
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	60bb      	str	r3, [r7, #8]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8008edc <HAL_MspInit+0x5c>)
 8008ea0:	69db      	ldr	r3, [r3, #28]
 8008ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8008edc <HAL_MspInit+0x5c>)
 8008ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ea8:	61d3      	str	r3, [r2, #28]
 8008eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8008edc <HAL_MspInit+0x5c>)
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008eb2:	607b      	str	r3, [r7, #4]
 8008eb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee0 <HAL_MspInit+0x60>)
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8008ec2:	60fb      	str	r3, [r7, #12]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	4a04      	ldr	r2, [pc, #16]	@ (8008ee0 <HAL_MspInit+0x60>)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008ed2:	bf00      	nop
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bc80      	pop	{r7}
 8008eda:	4770      	bx	lr
 8008edc:	40021000 	.word	0x40021000
 8008ee0:	40010000 	.word	0x40010000

08008ee4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b088      	sub	sp, #32
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008eec:	f107 0310 	add.w	r3, r7, #16
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	601a      	str	r2, [r3, #0]
 8008ef4:	605a      	str	r2, [r3, #4]
 8008ef6:	609a      	str	r2, [r3, #8]
 8008ef8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a1c      	ldr	r2, [pc, #112]	@ (8008f70 <HAL_CAN_MspInit+0x8c>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d131      	bne.n	8008f68 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008f04:	4b1b      	ldr	r3, [pc, #108]	@ (8008f74 <HAL_CAN_MspInit+0x90>)
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	4a1a      	ldr	r2, [pc, #104]	@ (8008f74 <HAL_CAN_MspInit+0x90>)
 8008f0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008f0e:	61d3      	str	r3, [r2, #28]
 8008f10:	4b18      	ldr	r3, [pc, #96]	@ (8008f74 <HAL_CAN_MspInit+0x90>)
 8008f12:	69db      	ldr	r3, [r3, #28]
 8008f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f18:	60fb      	str	r3, [r7, #12]
 8008f1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f1c:	4b15      	ldr	r3, [pc, #84]	@ (8008f74 <HAL_CAN_MspInit+0x90>)
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	4a14      	ldr	r2, [pc, #80]	@ (8008f74 <HAL_CAN_MspInit+0x90>)
 8008f22:	f043 0304 	orr.w	r3, r3, #4
 8008f26:	6193      	str	r3, [r2, #24]
 8008f28:	4b12      	ldr	r3, [pc, #72]	@ (8008f74 <HAL_CAN_MspInit+0x90>)
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	f003 0304 	and.w	r3, r3, #4
 8008f30:	60bb      	str	r3, [r7, #8]
 8008f32:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008f34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008f38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f42:	f107 0310 	add.w	r3, r7, #16
 8008f46:	4619      	mov	r1, r3
 8008f48:	480b      	ldr	r0, [pc, #44]	@ (8008f78 <HAL_CAN_MspInit+0x94>)
 8008f4a:	f000 fbdb 	bl	8009704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008f4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008f52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f54:	2302      	movs	r3, #2
 8008f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f5c:	f107 0310 	add.w	r3, r7, #16
 8008f60:	4619      	mov	r1, r3
 8008f62:	4805      	ldr	r0, [pc, #20]	@ (8008f78 <HAL_CAN_MspInit+0x94>)
 8008f64:	f000 fbce 	bl	8009704 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8008f68:	bf00      	nop
 8008f6a:	3720      	adds	r7, #32
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	40006400 	.word	0x40006400
 8008f74:	40021000 	.word	0x40021000
 8008f78:	40010800 	.word	0x40010800

08008f7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b088      	sub	sp, #32
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f84:	f107 0310 	add.w	r3, r7, #16
 8008f88:	2200      	movs	r2, #0
 8008f8a:	601a      	str	r2, [r3, #0]
 8008f8c:	605a      	str	r2, [r3, #4]
 8008f8e:	609a      	str	r2, [r3, #8]
 8008f90:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a15      	ldr	r2, [pc, #84]	@ (8008fec <HAL_I2C_MspInit+0x70>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d123      	bne.n	8008fe4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f9c:	4b14      	ldr	r3, [pc, #80]	@ (8008ff0 <HAL_I2C_MspInit+0x74>)
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	4a13      	ldr	r2, [pc, #76]	@ (8008ff0 <HAL_I2C_MspInit+0x74>)
 8008fa2:	f043 0308 	orr.w	r3, r3, #8
 8008fa6:	6193      	str	r3, [r2, #24]
 8008fa8:	4b11      	ldr	r3, [pc, #68]	@ (8008ff0 <HAL_I2C_MspInit+0x74>)
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	f003 0308 	and.w	r3, r3, #8
 8008fb0:	60fb      	str	r3, [r7, #12]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008fb4:	23c0      	movs	r3, #192	@ 0xc0
 8008fb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008fb8:	2312      	movs	r3, #18
 8008fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fc0:	f107 0310 	add.w	r3, r7, #16
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	480b      	ldr	r0, [pc, #44]	@ (8008ff4 <HAL_I2C_MspInit+0x78>)
 8008fc8:	f000 fb9c 	bl	8009704 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008fcc:	4b08      	ldr	r3, [pc, #32]	@ (8008ff0 <HAL_I2C_MspInit+0x74>)
 8008fce:	69db      	ldr	r3, [r3, #28]
 8008fd0:	4a07      	ldr	r2, [pc, #28]	@ (8008ff0 <HAL_I2C_MspInit+0x74>)
 8008fd2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008fd6:	61d3      	str	r3, [r2, #28]
 8008fd8:	4b05      	ldr	r3, [pc, #20]	@ (8008ff0 <HAL_I2C_MspInit+0x74>)
 8008fda:	69db      	ldr	r3, [r3, #28]
 8008fdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008fe0:	60bb      	str	r3, [r7, #8]
 8008fe2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8008fe4:	bf00      	nop
 8008fe6:	3720      	adds	r7, #32
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	40005400 	.word	0x40005400
 8008ff0:	40021000 	.word	0x40021000
 8008ff4:	40010c00 	.word	0x40010c00

08008ff8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a0a      	ldr	r2, [pc, #40]	@ (8009030 <HAL_I2C_MspDeInit+0x38>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d10d      	bne.n	8009026 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800900a:	4b0a      	ldr	r3, [pc, #40]	@ (8009034 <HAL_I2C_MspDeInit+0x3c>)
 800900c:	69db      	ldr	r3, [r3, #28]
 800900e:	4a09      	ldr	r2, [pc, #36]	@ (8009034 <HAL_I2C_MspDeInit+0x3c>)
 8009010:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009014:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8009016:	2140      	movs	r1, #64	@ 0x40
 8009018:	4807      	ldr	r0, [pc, #28]	@ (8009038 <HAL_I2C_MspDeInit+0x40>)
 800901a:	f000 fd07 	bl	8009a2c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800901e:	2180      	movs	r1, #128	@ 0x80
 8009020:	4805      	ldr	r0, [pc, #20]	@ (8009038 <HAL_I2C_MspDeInit+0x40>)
 8009022:	f000 fd03 	bl	8009a2c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8009026:	bf00      	nop
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	40005400 	.word	0x40005400
 8009034:	40021000 	.word	0x40021000
 8009038:	40010c00 	.word	0x40010c00

0800903c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a0d      	ldr	r2, [pc, #52]	@ (8009080 <HAL_TIM_Base_MspInit+0x44>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d113      	bne.n	8009076 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800904e:	4b0d      	ldr	r3, [pc, #52]	@ (8009084 <HAL_TIM_Base_MspInit+0x48>)
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	4a0c      	ldr	r2, [pc, #48]	@ (8009084 <HAL_TIM_Base_MspInit+0x48>)
 8009054:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009058:	6193      	str	r3, [r2, #24]
 800905a:	4b0a      	ldr	r3, [pc, #40]	@ (8009084 <HAL_TIM_Base_MspInit+0x48>)
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009062:	60fb      	str	r3, [r7, #12]
 8009064:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8009066:	2200      	movs	r2, #0
 8009068:	2100      	movs	r1, #0
 800906a:	2019      	movs	r0, #25
 800906c:	f000 fb13 	bl	8009696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8009070:	2019      	movs	r0, #25
 8009072:	f000 fb2c 	bl	80096ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8009076:	bf00      	nop
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	40012c00 	.word	0x40012c00
 8009084:	40021000 	.word	0x40021000

08009088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009090:	f107 0310 	add.w	r3, r7, #16
 8009094:	2200      	movs	r2, #0
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	605a      	str	r2, [r3, #4]
 800909a:	609a      	str	r2, [r3, #8]
 800909c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a1c      	ldr	r2, [pc, #112]	@ (8009114 <HAL_UART_MspInit+0x8c>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d131      	bne.n	800910c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80090a8:	4b1b      	ldr	r3, [pc, #108]	@ (8009118 <HAL_UART_MspInit+0x90>)
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	4a1a      	ldr	r2, [pc, #104]	@ (8009118 <HAL_UART_MspInit+0x90>)
 80090ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80090b2:	6193      	str	r3, [r2, #24]
 80090b4:	4b18      	ldr	r3, [pc, #96]	@ (8009118 <HAL_UART_MspInit+0x90>)
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090bc:	60fb      	str	r3, [r7, #12]
 80090be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090c0:	4b15      	ldr	r3, [pc, #84]	@ (8009118 <HAL_UART_MspInit+0x90>)
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	4a14      	ldr	r2, [pc, #80]	@ (8009118 <HAL_UART_MspInit+0x90>)
 80090c6:	f043 0304 	orr.w	r3, r3, #4
 80090ca:	6193      	str	r3, [r2, #24]
 80090cc:	4b12      	ldr	r3, [pc, #72]	@ (8009118 <HAL_UART_MspInit+0x90>)
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	f003 0304 	and.w	r3, r3, #4
 80090d4:	60bb      	str	r3, [r7, #8]
 80090d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80090d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090de:	2302      	movs	r3, #2
 80090e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80090e2:	2303      	movs	r3, #3
 80090e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090e6:	f107 0310 	add.w	r3, r7, #16
 80090ea:	4619      	mov	r1, r3
 80090ec:	480b      	ldr	r0, [pc, #44]	@ (800911c <HAL_UART_MspInit+0x94>)
 80090ee:	f000 fb09 	bl	8009704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80090f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80090f8:	2300      	movs	r3, #0
 80090fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090fc:	2300      	movs	r3, #0
 80090fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009100:	f107 0310 	add.w	r3, r7, #16
 8009104:	4619      	mov	r1, r3
 8009106:	4805      	ldr	r0, [pc, #20]	@ (800911c <HAL_UART_MspInit+0x94>)
 8009108:	f000 fafc 	bl	8009704 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800910c:	bf00      	nop
 800910e:	3720      	adds	r7, #32
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	40013800 	.word	0x40013800
 8009118:	40021000 	.word	0x40021000
 800911c:	40010800 	.word	0x40010800

08009120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009120:	b480      	push	{r7}
 8009122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009124:	bf00      	nop
 8009126:	e7fd      	b.n	8009124 <NMI_Handler+0x4>

08009128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009128:	b480      	push	{r7}
 800912a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800912c:	bf00      	nop
 800912e:	e7fd      	b.n	800912c <HardFault_Handler+0x4>

08009130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009130:	b480      	push	{r7}
 8009132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009134:	bf00      	nop
 8009136:	e7fd      	b.n	8009134 <MemManage_Handler+0x4>

08009138 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009138:	b480      	push	{r7}
 800913a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800913c:	bf00      	nop
 800913e:	e7fd      	b.n	800913c <BusFault_Handler+0x4>

08009140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009140:	b480      	push	{r7}
 8009142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009144:	bf00      	nop
 8009146:	e7fd      	b.n	8009144 <UsageFault_Handler+0x4>

08009148 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009148:	b480      	push	{r7}
 800914a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800914c:	bf00      	nop
 800914e:	46bd      	mov	sp, r7
 8009150:	bc80      	pop	{r7}
 8009152:	4770      	bx	lr

08009154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009154:	b480      	push	{r7}
 8009156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009158:	bf00      	nop
 800915a:	46bd      	mov	sp, r7
 800915c:	bc80      	pop	{r7}
 800915e:	4770      	bx	lr

08009160 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009160:	b480      	push	{r7}
 8009162:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009164:	bf00      	nop
 8009166:	46bd      	mov	sp, r7
 8009168:	bc80      	pop	{r7}
 800916a:	4770      	bx	lr

0800916c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009170:	f000 f87e 	bl	8009270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009174:	bf00      	nop
 8009176:	bd80      	pop	{r7, pc}

08009178 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800917c:	4802      	ldr	r0, [pc, #8]	@ (8009188 <TIM1_UP_IRQHandler+0x10>)
 800917e:	f002 fc4b 	bl	800ba18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009182:	bf00      	nop
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20001460 	.word	0x20001460

0800918c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800918c:	b480      	push	{r7}
 800918e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009190:	bf00      	nop
 8009192:	46bd      	mov	sp, r7
 8009194:	bc80      	pop	{r7}
 8009196:	4770      	bx	lr

08009198 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009198:	480c      	ldr	r0, [pc, #48]	@ (80091cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800919a:	490d      	ldr	r1, [pc, #52]	@ (80091d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800919c:	4a0d      	ldr	r2, [pc, #52]	@ (80091d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800919e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80091a0:	e002      	b.n	80091a8 <LoopCopyDataInit>

080091a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80091a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80091a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80091a6:	3304      	adds	r3, #4

080091a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80091a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80091aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80091ac:	d3f9      	bcc.n	80091a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80091ae:	4a0a      	ldr	r2, [pc, #40]	@ (80091d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80091b0:	4c0a      	ldr	r4, [pc, #40]	@ (80091dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80091b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80091b4:	e001      	b.n	80091ba <LoopFillZerobss>

080091b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80091b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80091b8:	3204      	adds	r2, #4

080091ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80091ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80091bc:	d3fb      	bcc.n	80091b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80091be:	f7ff ffe5 	bl	800918c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80091c2:	f003 f8ed 	bl	800c3a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80091c6:	f7ff fbe3 	bl	8008990 <main>
  bx lr
 80091ca:	4770      	bx	lr
  ldr r0, =_sdata
 80091cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80091d0:	20000ce4 	.word	0x20000ce4
  ldr r2, =_sidata
 80091d4:	0800c4dc 	.word	0x0800c4dc
  ldr r2, =_sbss
 80091d8:	20000ce4 	.word	0x20000ce4
  ldr r4, =_ebss
 80091dc:	200014f4 	.word	0x200014f4

080091e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80091e0:	e7fe      	b.n	80091e0 <ADC1_2_IRQHandler>
	...

080091e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80091e8:	4b08      	ldr	r3, [pc, #32]	@ (800920c <HAL_Init+0x28>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a07      	ldr	r2, [pc, #28]	@ (800920c <HAL_Init+0x28>)
 80091ee:	f043 0310 	orr.w	r3, r3, #16
 80091f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80091f4:	2003      	movs	r0, #3
 80091f6:	f000 fa43 	bl	8009680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80091fa:	200f      	movs	r0, #15
 80091fc:	f000 f808 	bl	8009210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009200:	f7ff fe3e 	bl	8008e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	40022000 	.word	0x40022000

08009210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009218:	4b12      	ldr	r3, [pc, #72]	@ (8009264 <HAL_InitTick+0x54>)
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	4b12      	ldr	r3, [pc, #72]	@ (8009268 <HAL_InitTick+0x58>)
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	4619      	mov	r1, r3
 8009222:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009226:	fbb3 f3f1 	udiv	r3, r3, r1
 800922a:	fbb2 f3f3 	udiv	r3, r2, r3
 800922e:	4618      	mov	r0, r3
 8009230:	f000 fa5b 	bl	80096ea <HAL_SYSTICK_Config>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e00e      	b.n	800925c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b0f      	cmp	r3, #15
 8009242:	d80a      	bhi.n	800925a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009244:	2200      	movs	r2, #0
 8009246:	6879      	ldr	r1, [r7, #4]
 8009248:	f04f 30ff 	mov.w	r0, #4294967295
 800924c:	f000 fa23 	bl	8009696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009250:	4a06      	ldr	r2, [pc, #24]	@ (800926c <HAL_InitTick+0x5c>)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	e000      	b.n	800925c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
}
 800925c:	4618      	mov	r0, r3
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	20000cd8 	.word	0x20000cd8
 8009268:	20000ce0 	.word	0x20000ce0
 800926c:	20000cdc 	.word	0x20000cdc

08009270 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009274:	4b05      	ldr	r3, [pc, #20]	@ (800928c <HAL_IncTick+0x1c>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	461a      	mov	r2, r3
 800927a:	4b05      	ldr	r3, [pc, #20]	@ (8009290 <HAL_IncTick+0x20>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4413      	add	r3, r2
 8009280:	4a03      	ldr	r2, [pc, #12]	@ (8009290 <HAL_IncTick+0x20>)
 8009282:	6013      	str	r3, [r2, #0]
}
 8009284:	bf00      	nop
 8009286:	46bd      	mov	sp, r7
 8009288:	bc80      	pop	{r7}
 800928a:	4770      	bx	lr
 800928c:	20000ce0 	.word	0x20000ce0
 8009290:	200014f0 	.word	0x200014f0

08009294 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009294:	b480      	push	{r7}
 8009296:	af00      	add	r7, sp, #0
  return uwTick;
 8009298:	4b02      	ldr	r3, [pc, #8]	@ (80092a4 <HAL_GetTick+0x10>)
 800929a:	681b      	ldr	r3, [r3, #0]
}
 800929c:	4618      	mov	r0, r3
 800929e:	46bd      	mov	sp, r7
 80092a0:	bc80      	pop	{r7}
 80092a2:	4770      	bx	lr
 80092a4:	200014f0 	.word	0x200014f0

080092a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80092b0:	f7ff fff0 	bl	8009294 <HAL_GetTick>
 80092b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c0:	d005      	beq.n	80092ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80092c2:	4b0a      	ldr	r3, [pc, #40]	@ (80092ec <HAL_Delay+0x44>)
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	461a      	mov	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	4413      	add	r3, r2
 80092cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80092ce:	bf00      	nop
 80092d0:	f7ff ffe0 	bl	8009294 <HAL_GetTick>
 80092d4:	4602      	mov	r2, r0
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d8f7      	bhi.n	80092d0 <HAL_Delay+0x28>
  {
  }
}
 80092e0:	bf00      	nop
 80092e2:	bf00      	nop
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	20000ce0 	.word	0x20000ce0

080092f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d101      	bne.n	8009302 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e0ed      	b.n	80094de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009308:	b2db      	uxtb	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d102      	bne.n	8009314 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7ff fde8 	bl	8008ee4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f042 0201 	orr.w	r2, r2, #1
 8009322:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009324:	f7ff ffb6 	bl	8009294 <HAL_GetTick>
 8009328:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800932a:	e012      	b.n	8009352 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800932c:	f7ff ffb2 	bl	8009294 <HAL_GetTick>
 8009330:	4602      	mov	r2, r0
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	1ad3      	subs	r3, r2, r3
 8009336:	2b0a      	cmp	r3, #10
 8009338:	d90b      	bls.n	8009352 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800933e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2205      	movs	r2, #5
 800934a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e0c5      	b.n	80094de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	f003 0301 	and.w	r3, r3, #1
 800935c:	2b00      	cmp	r3, #0
 800935e:	d0e5      	beq.n	800932c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f022 0202 	bic.w	r2, r2, #2
 800936e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009370:	f7ff ff90 	bl	8009294 <HAL_GetTick>
 8009374:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009376:	e012      	b.n	800939e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009378:	f7ff ff8c 	bl	8009294 <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	2b0a      	cmp	r3, #10
 8009384:	d90b      	bls.n	800939e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2205      	movs	r2, #5
 8009396:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e09f      	b.n	80094de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1e5      	bne.n	8009378 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	7e1b      	ldrb	r3, [r3, #24]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d108      	bne.n	80093c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80093c2:	601a      	str	r2, [r3, #0]
 80093c4:	e007      	b.n	80093d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80093d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	7e5b      	ldrb	r3, [r3, #25]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d108      	bne.n	80093f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	e007      	b.n	8009400 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	7e9b      	ldrb	r3, [r3, #26]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d108      	bne.n	800941a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f042 0220 	orr.w	r2, r2, #32
 8009416:	601a      	str	r2, [r3, #0]
 8009418:	e007      	b.n	800942a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 0220 	bic.w	r2, r2, #32
 8009428:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	7edb      	ldrb	r3, [r3, #27]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d108      	bne.n	8009444 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f022 0210 	bic.w	r2, r2, #16
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	e007      	b.n	8009454 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f042 0210 	orr.w	r2, r2, #16
 8009452:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	7f1b      	ldrb	r3, [r3, #28]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d108      	bne.n	800946e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f042 0208 	orr.w	r2, r2, #8
 800946a:	601a      	str	r2, [r3, #0]
 800946c:	e007      	b.n	800947e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f022 0208 	bic.w	r2, r2, #8
 800947c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	7f5b      	ldrb	r3, [r3, #29]
 8009482:	2b01      	cmp	r3, #1
 8009484:	d108      	bne.n	8009498 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f042 0204 	orr.w	r2, r2, #4
 8009494:	601a      	str	r2, [r3, #0]
 8009496:	e007      	b.n	80094a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f022 0204 	bic.w	r2, r2, #4
 80094a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689a      	ldr	r2, [r3, #8]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	431a      	orrs	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	431a      	orrs	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	ea42 0103 	orr.w	r1, r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	1e5a      	subs	r2, r3, #1
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	430a      	orrs	r2, r1
 80094cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
	...

080094e8 <__NVIC_SetPriorityGrouping>:
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f003 0307 	and.w	r3, r3, #7
 80094f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80094f8:	4b0c      	ldr	r3, [pc, #48]	@ (800952c <__NVIC_SetPriorityGrouping+0x44>)
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009504:	4013      	ands	r3, r2
 8009506:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009510:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800951a:	4a04      	ldr	r2, [pc, #16]	@ (800952c <__NVIC_SetPriorityGrouping+0x44>)
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	60d3      	str	r3, [r2, #12]
}
 8009520:	bf00      	nop
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	bc80      	pop	{r7}
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	e000ed00 	.word	0xe000ed00

08009530 <__NVIC_GetPriorityGrouping>:
{
 8009530:	b480      	push	{r7}
 8009532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009534:	4b04      	ldr	r3, [pc, #16]	@ (8009548 <__NVIC_GetPriorityGrouping+0x18>)
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	0a1b      	lsrs	r3, r3, #8
 800953a:	f003 0307 	and.w	r3, r3, #7
}
 800953e:	4618      	mov	r0, r3
 8009540:	46bd      	mov	sp, r7
 8009542:	bc80      	pop	{r7}
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	e000ed00 	.word	0xe000ed00

0800954c <__NVIC_EnableIRQ>:
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	4603      	mov	r3, r0
 8009554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800955a:	2b00      	cmp	r3, #0
 800955c:	db0b      	blt.n	8009576 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800955e:	79fb      	ldrb	r3, [r7, #7]
 8009560:	f003 021f 	and.w	r2, r3, #31
 8009564:	4906      	ldr	r1, [pc, #24]	@ (8009580 <__NVIC_EnableIRQ+0x34>)
 8009566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800956a:	095b      	lsrs	r3, r3, #5
 800956c:	2001      	movs	r0, #1
 800956e:	fa00 f202 	lsl.w	r2, r0, r2
 8009572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	bc80      	pop	{r7}
 800957e:	4770      	bx	lr
 8009580:	e000e100 	.word	0xe000e100

08009584 <__NVIC_SetPriority>:
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	4603      	mov	r3, r0
 800958c:	6039      	str	r1, [r7, #0]
 800958e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009594:	2b00      	cmp	r3, #0
 8009596:	db0a      	blt.n	80095ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	b2da      	uxtb	r2, r3
 800959c:	490c      	ldr	r1, [pc, #48]	@ (80095d0 <__NVIC_SetPriority+0x4c>)
 800959e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095a2:	0112      	lsls	r2, r2, #4
 80095a4:	b2d2      	uxtb	r2, r2
 80095a6:	440b      	add	r3, r1
 80095a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80095ac:	e00a      	b.n	80095c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	4908      	ldr	r1, [pc, #32]	@ (80095d4 <__NVIC_SetPriority+0x50>)
 80095b4:	79fb      	ldrb	r3, [r7, #7]
 80095b6:	f003 030f 	and.w	r3, r3, #15
 80095ba:	3b04      	subs	r3, #4
 80095bc:	0112      	lsls	r2, r2, #4
 80095be:	b2d2      	uxtb	r2, r2
 80095c0:	440b      	add	r3, r1
 80095c2:	761a      	strb	r2, [r3, #24]
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bc80      	pop	{r7}
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	e000e100 	.word	0xe000e100
 80095d4:	e000ed00 	.word	0xe000ed00

080095d8 <NVIC_EncodePriority>:
{
 80095d8:	b480      	push	{r7}
 80095da:	b089      	sub	sp, #36	@ 0x24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f003 0307 	and.w	r3, r3, #7
 80095ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	f1c3 0307 	rsb	r3, r3, #7
 80095f2:	2b04      	cmp	r3, #4
 80095f4:	bf28      	it	cs
 80095f6:	2304      	movcs	r3, #4
 80095f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	3304      	adds	r3, #4
 80095fe:	2b06      	cmp	r3, #6
 8009600:	d902      	bls.n	8009608 <NVIC_EncodePriority+0x30>
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	3b03      	subs	r3, #3
 8009606:	e000      	b.n	800960a <NVIC_EncodePriority+0x32>
 8009608:	2300      	movs	r3, #0
 800960a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800960c:	f04f 32ff 	mov.w	r2, #4294967295
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	fa02 f303 	lsl.w	r3, r2, r3
 8009616:	43da      	mvns	r2, r3
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	401a      	ands	r2, r3
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009620:	f04f 31ff 	mov.w	r1, #4294967295
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	fa01 f303 	lsl.w	r3, r1, r3
 800962a:	43d9      	mvns	r1, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009630:	4313      	orrs	r3, r2
}
 8009632:	4618      	mov	r0, r3
 8009634:	3724      	adds	r7, #36	@ 0x24
 8009636:	46bd      	mov	sp, r7
 8009638:	bc80      	pop	{r7}
 800963a:	4770      	bx	lr

0800963c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	3b01      	subs	r3, #1
 8009648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800964c:	d301      	bcc.n	8009652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800964e:	2301      	movs	r3, #1
 8009650:	e00f      	b.n	8009672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009652:	4a0a      	ldr	r2, [pc, #40]	@ (800967c <SysTick_Config+0x40>)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3b01      	subs	r3, #1
 8009658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800965a:	210f      	movs	r1, #15
 800965c:	f04f 30ff 	mov.w	r0, #4294967295
 8009660:	f7ff ff90 	bl	8009584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009664:	4b05      	ldr	r3, [pc, #20]	@ (800967c <SysTick_Config+0x40>)
 8009666:	2200      	movs	r2, #0
 8009668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800966a:	4b04      	ldr	r3, [pc, #16]	@ (800967c <SysTick_Config+0x40>)
 800966c:	2207      	movs	r2, #7
 800966e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	e000e010 	.word	0xe000e010

08009680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7ff ff2d 	bl	80094e8 <__NVIC_SetPriorityGrouping>
}
 800968e:	bf00      	nop
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009696:	b580      	push	{r7, lr}
 8009698:	b086      	sub	sp, #24
 800969a:	af00      	add	r7, sp, #0
 800969c:	4603      	mov	r3, r0
 800969e:	60b9      	str	r1, [r7, #8]
 80096a0:	607a      	str	r2, [r7, #4]
 80096a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80096a4:	2300      	movs	r3, #0
 80096a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80096a8:	f7ff ff42 	bl	8009530 <__NVIC_GetPriorityGrouping>
 80096ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	68b9      	ldr	r1, [r7, #8]
 80096b2:	6978      	ldr	r0, [r7, #20]
 80096b4:	f7ff ff90 	bl	80095d8 <NVIC_EncodePriority>
 80096b8:	4602      	mov	r2, r0
 80096ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096be:	4611      	mov	r1, r2
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7ff ff5f 	bl	8009584 <__NVIC_SetPriority>
}
 80096c6:	bf00      	nop
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	4603      	mov	r3, r0
 80096d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80096d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096dc:	4618      	mov	r0, r3
 80096de:	f7ff ff35 	bl	800954c <__NVIC_EnableIRQ>
}
 80096e2:	bf00      	nop
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b082      	sub	sp, #8
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7ff ffa2 	bl	800963c <SysTick_Config>
 80096f8:	4603      	mov	r3, r0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
	...

08009704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009704:	b480      	push	{r7}
 8009706:	b08b      	sub	sp, #44	@ 0x2c
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800970e:	2300      	movs	r3, #0
 8009710:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009712:	2300      	movs	r3, #0
 8009714:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009716:	e179      	b.n	8009a0c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009718:	2201      	movs	r2, #1
 800971a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971c:	fa02 f303 	lsl.w	r3, r2, r3
 8009720:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	69fa      	ldr	r2, [r7, #28]
 8009728:	4013      	ands	r3, r2
 800972a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800972c:	69ba      	ldr	r2, [r7, #24]
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	429a      	cmp	r2, r3
 8009732:	f040 8168 	bne.w	8009a06 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	4a96      	ldr	r2, [pc, #600]	@ (8009994 <HAL_GPIO_Init+0x290>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d05e      	beq.n	80097fe <HAL_GPIO_Init+0xfa>
 8009740:	4a94      	ldr	r2, [pc, #592]	@ (8009994 <HAL_GPIO_Init+0x290>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d875      	bhi.n	8009832 <HAL_GPIO_Init+0x12e>
 8009746:	4a94      	ldr	r2, [pc, #592]	@ (8009998 <HAL_GPIO_Init+0x294>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d058      	beq.n	80097fe <HAL_GPIO_Init+0xfa>
 800974c:	4a92      	ldr	r2, [pc, #584]	@ (8009998 <HAL_GPIO_Init+0x294>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d86f      	bhi.n	8009832 <HAL_GPIO_Init+0x12e>
 8009752:	4a92      	ldr	r2, [pc, #584]	@ (800999c <HAL_GPIO_Init+0x298>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d052      	beq.n	80097fe <HAL_GPIO_Init+0xfa>
 8009758:	4a90      	ldr	r2, [pc, #576]	@ (800999c <HAL_GPIO_Init+0x298>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d869      	bhi.n	8009832 <HAL_GPIO_Init+0x12e>
 800975e:	4a90      	ldr	r2, [pc, #576]	@ (80099a0 <HAL_GPIO_Init+0x29c>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d04c      	beq.n	80097fe <HAL_GPIO_Init+0xfa>
 8009764:	4a8e      	ldr	r2, [pc, #568]	@ (80099a0 <HAL_GPIO_Init+0x29c>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d863      	bhi.n	8009832 <HAL_GPIO_Init+0x12e>
 800976a:	4a8e      	ldr	r2, [pc, #568]	@ (80099a4 <HAL_GPIO_Init+0x2a0>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d046      	beq.n	80097fe <HAL_GPIO_Init+0xfa>
 8009770:	4a8c      	ldr	r2, [pc, #560]	@ (80099a4 <HAL_GPIO_Init+0x2a0>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d85d      	bhi.n	8009832 <HAL_GPIO_Init+0x12e>
 8009776:	2b12      	cmp	r3, #18
 8009778:	d82a      	bhi.n	80097d0 <HAL_GPIO_Init+0xcc>
 800977a:	2b12      	cmp	r3, #18
 800977c:	d859      	bhi.n	8009832 <HAL_GPIO_Init+0x12e>
 800977e:	a201      	add	r2, pc, #4	@ (adr r2, 8009784 <HAL_GPIO_Init+0x80>)
 8009780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009784:	080097ff 	.word	0x080097ff
 8009788:	080097d9 	.word	0x080097d9
 800978c:	080097eb 	.word	0x080097eb
 8009790:	0800982d 	.word	0x0800982d
 8009794:	08009833 	.word	0x08009833
 8009798:	08009833 	.word	0x08009833
 800979c:	08009833 	.word	0x08009833
 80097a0:	08009833 	.word	0x08009833
 80097a4:	08009833 	.word	0x08009833
 80097a8:	08009833 	.word	0x08009833
 80097ac:	08009833 	.word	0x08009833
 80097b0:	08009833 	.word	0x08009833
 80097b4:	08009833 	.word	0x08009833
 80097b8:	08009833 	.word	0x08009833
 80097bc:	08009833 	.word	0x08009833
 80097c0:	08009833 	.word	0x08009833
 80097c4:	08009833 	.word	0x08009833
 80097c8:	080097e1 	.word	0x080097e1
 80097cc:	080097f5 	.word	0x080097f5
 80097d0:	4a75      	ldr	r2, [pc, #468]	@ (80099a8 <HAL_GPIO_Init+0x2a4>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d013      	beq.n	80097fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80097d6:	e02c      	b.n	8009832 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	623b      	str	r3, [r7, #32]
          break;
 80097de:	e029      	b.n	8009834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	3304      	adds	r3, #4
 80097e6:	623b      	str	r3, [r7, #32]
          break;
 80097e8:	e024      	b.n	8009834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	3308      	adds	r3, #8
 80097f0:	623b      	str	r3, [r7, #32]
          break;
 80097f2:	e01f      	b.n	8009834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	330c      	adds	r3, #12
 80097fa:	623b      	str	r3, [r7, #32]
          break;
 80097fc:	e01a      	b.n	8009834 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d102      	bne.n	800980c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009806:	2304      	movs	r3, #4
 8009808:	623b      	str	r3, [r7, #32]
          break;
 800980a:	e013      	b.n	8009834 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d105      	bne.n	8009820 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009814:	2308      	movs	r3, #8
 8009816:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	69fa      	ldr	r2, [r7, #28]
 800981c:	611a      	str	r2, [r3, #16]
          break;
 800981e:	e009      	b.n	8009834 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009820:	2308      	movs	r3, #8
 8009822:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	69fa      	ldr	r2, [r7, #28]
 8009828:	615a      	str	r2, [r3, #20]
          break;
 800982a:	e003      	b.n	8009834 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800982c:	2300      	movs	r3, #0
 800982e:	623b      	str	r3, [r7, #32]
          break;
 8009830:	e000      	b.n	8009834 <HAL_GPIO_Init+0x130>
          break;
 8009832:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	2bff      	cmp	r3, #255	@ 0xff
 8009838:	d801      	bhi.n	800983e <HAL_GPIO_Init+0x13a>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	e001      	b.n	8009842 <HAL_GPIO_Init+0x13e>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	3304      	adds	r3, #4
 8009842:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	2bff      	cmp	r3, #255	@ 0xff
 8009848:	d802      	bhi.n	8009850 <HAL_GPIO_Init+0x14c>
 800984a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	e002      	b.n	8009856 <HAL_GPIO_Init+0x152>
 8009850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009852:	3b08      	subs	r3, #8
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	210f      	movs	r1, #15
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	fa01 f303 	lsl.w	r3, r1, r3
 8009864:	43db      	mvns	r3, r3
 8009866:	401a      	ands	r2, r3
 8009868:	6a39      	ldr	r1, [r7, #32]
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	fa01 f303 	lsl.w	r3, r1, r3
 8009870:	431a      	orrs	r2, r3
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800987e:	2b00      	cmp	r3, #0
 8009880:	f000 80c1 	beq.w	8009a06 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009884:	4b49      	ldr	r3, [pc, #292]	@ (80099ac <HAL_GPIO_Init+0x2a8>)
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	4a48      	ldr	r2, [pc, #288]	@ (80099ac <HAL_GPIO_Init+0x2a8>)
 800988a:	f043 0301 	orr.w	r3, r3, #1
 800988e:	6193      	str	r3, [r2, #24]
 8009890:	4b46      	ldr	r3, [pc, #280]	@ (80099ac <HAL_GPIO_Init+0x2a8>)
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	f003 0301 	and.w	r3, r3, #1
 8009898:	60bb      	str	r3, [r7, #8]
 800989a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800989c:	4a44      	ldr	r2, [pc, #272]	@ (80099b0 <HAL_GPIO_Init+0x2ac>)
 800989e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a0:	089b      	lsrs	r3, r3, #2
 80098a2:	3302      	adds	r3, #2
 80098a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80098aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ac:	f003 0303 	and.w	r3, r3, #3
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	220f      	movs	r2, #15
 80098b4:	fa02 f303 	lsl.w	r3, r2, r3
 80098b8:	43db      	mvns	r3, r3
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	4013      	ands	r3, r2
 80098be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a3c      	ldr	r2, [pc, #240]	@ (80099b4 <HAL_GPIO_Init+0x2b0>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d01f      	beq.n	8009908 <HAL_GPIO_Init+0x204>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a3b      	ldr	r2, [pc, #236]	@ (80099b8 <HAL_GPIO_Init+0x2b4>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d019      	beq.n	8009904 <HAL_GPIO_Init+0x200>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a3a      	ldr	r2, [pc, #232]	@ (80099bc <HAL_GPIO_Init+0x2b8>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d013      	beq.n	8009900 <HAL_GPIO_Init+0x1fc>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a39      	ldr	r2, [pc, #228]	@ (80099c0 <HAL_GPIO_Init+0x2bc>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d00d      	beq.n	80098fc <HAL_GPIO_Init+0x1f8>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a38      	ldr	r2, [pc, #224]	@ (80099c4 <HAL_GPIO_Init+0x2c0>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d007      	beq.n	80098f8 <HAL_GPIO_Init+0x1f4>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a37      	ldr	r2, [pc, #220]	@ (80099c8 <HAL_GPIO_Init+0x2c4>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d101      	bne.n	80098f4 <HAL_GPIO_Init+0x1f0>
 80098f0:	2305      	movs	r3, #5
 80098f2:	e00a      	b.n	800990a <HAL_GPIO_Init+0x206>
 80098f4:	2306      	movs	r3, #6
 80098f6:	e008      	b.n	800990a <HAL_GPIO_Init+0x206>
 80098f8:	2304      	movs	r3, #4
 80098fa:	e006      	b.n	800990a <HAL_GPIO_Init+0x206>
 80098fc:	2303      	movs	r3, #3
 80098fe:	e004      	b.n	800990a <HAL_GPIO_Init+0x206>
 8009900:	2302      	movs	r3, #2
 8009902:	e002      	b.n	800990a <HAL_GPIO_Init+0x206>
 8009904:	2301      	movs	r3, #1
 8009906:	e000      	b.n	800990a <HAL_GPIO_Init+0x206>
 8009908:	2300      	movs	r3, #0
 800990a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800990c:	f002 0203 	and.w	r2, r2, #3
 8009910:	0092      	lsls	r2, r2, #2
 8009912:	4093      	lsls	r3, r2
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	4313      	orrs	r3, r2
 8009918:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800991a:	4925      	ldr	r1, [pc, #148]	@ (80099b0 <HAL_GPIO_Init+0x2ac>)
 800991c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991e:	089b      	lsrs	r3, r3, #2
 8009920:	3302      	adds	r3, #2
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009930:	2b00      	cmp	r3, #0
 8009932:	d006      	beq.n	8009942 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009934:	4b25      	ldr	r3, [pc, #148]	@ (80099cc <HAL_GPIO_Init+0x2c8>)
 8009936:	689a      	ldr	r2, [r3, #8]
 8009938:	4924      	ldr	r1, [pc, #144]	@ (80099cc <HAL_GPIO_Init+0x2c8>)
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	4313      	orrs	r3, r2
 800993e:	608b      	str	r3, [r1, #8]
 8009940:	e006      	b.n	8009950 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009942:	4b22      	ldr	r3, [pc, #136]	@ (80099cc <HAL_GPIO_Init+0x2c8>)
 8009944:	689a      	ldr	r2, [r3, #8]
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	43db      	mvns	r3, r3
 800994a:	4920      	ldr	r1, [pc, #128]	@ (80099cc <HAL_GPIO_Init+0x2c8>)
 800994c:	4013      	ands	r3, r2
 800994e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009958:	2b00      	cmp	r3, #0
 800995a:	d006      	beq.n	800996a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800995c:	4b1b      	ldr	r3, [pc, #108]	@ (80099cc <HAL_GPIO_Init+0x2c8>)
 800995e:	68da      	ldr	r2, [r3, #12]
 8009960:	491a      	ldr	r1, [pc, #104]	@ (80099cc <HAL_GPIO_Init+0x2c8>)
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	4313      	orrs	r3, r2
 8009966:	60cb      	str	r3, [r1, #12]
 8009968:	e006      	b.n	8009978 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800996a:	4b18      	ldr	r3, [pc, #96]	@ (80099cc <HAL_GPIO_Init+0x2c8>)
 800996c:	68da      	ldr	r2, [r3, #12]
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	43db      	mvns	r3, r3
 8009972:	4916      	ldr	r1, [pc, #88]	@ (80099cc <HAL_GPIO_Init+0x2c8>)
 8009974:	4013      	ands	r3, r2
 8009976:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d025      	beq.n	80099d0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009984:	4b11      	ldr	r3, [pc, #68]	@ (80099cc <HAL_GPIO_Init+0x2c8>)
 8009986:	685a      	ldr	r2, [r3, #4]
 8009988:	4910      	ldr	r1, [pc, #64]	@ (80099cc <HAL_GPIO_Init+0x2c8>)
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	4313      	orrs	r3, r2
 800998e:	604b      	str	r3, [r1, #4]
 8009990:	e025      	b.n	80099de <HAL_GPIO_Init+0x2da>
 8009992:	bf00      	nop
 8009994:	10320000 	.word	0x10320000
 8009998:	10310000 	.word	0x10310000
 800999c:	10220000 	.word	0x10220000
 80099a0:	10210000 	.word	0x10210000
 80099a4:	10120000 	.word	0x10120000
 80099a8:	10110000 	.word	0x10110000
 80099ac:	40021000 	.word	0x40021000
 80099b0:	40010000 	.word	0x40010000
 80099b4:	40010800 	.word	0x40010800
 80099b8:	40010c00 	.word	0x40010c00
 80099bc:	40011000 	.word	0x40011000
 80099c0:	40011400 	.word	0x40011400
 80099c4:	40011800 	.word	0x40011800
 80099c8:	40011c00 	.word	0x40011c00
 80099cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80099d0:	4b15      	ldr	r3, [pc, #84]	@ (8009a28 <HAL_GPIO_Init+0x324>)
 80099d2:	685a      	ldr	r2, [r3, #4]
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	43db      	mvns	r3, r3
 80099d8:	4913      	ldr	r1, [pc, #76]	@ (8009a28 <HAL_GPIO_Init+0x324>)
 80099da:	4013      	ands	r3, r2
 80099dc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d006      	beq.n	80099f8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80099ea:	4b0f      	ldr	r3, [pc, #60]	@ (8009a28 <HAL_GPIO_Init+0x324>)
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	490e      	ldr	r1, [pc, #56]	@ (8009a28 <HAL_GPIO_Init+0x324>)
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	600b      	str	r3, [r1, #0]
 80099f6:	e006      	b.n	8009a06 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80099f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009a28 <HAL_GPIO_Init+0x324>)
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	43db      	mvns	r3, r3
 8009a00:	4909      	ldr	r1, [pc, #36]	@ (8009a28 <HAL_GPIO_Init+0x324>)
 8009a02:	4013      	ands	r3, r2
 8009a04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a08:	3301      	adds	r3, #1
 8009a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a12:	fa22 f303 	lsr.w	r3, r2, r3
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f47f ae7e 	bne.w	8009718 <HAL_GPIO_Init+0x14>
  }
}
 8009a1c:	bf00      	nop
 8009a1e:	bf00      	nop
 8009a20:	372c      	adds	r7, #44	@ 0x2c
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bc80      	pop	{r7}
 8009a26:	4770      	bx	lr
 8009a28:	40010400 	.word	0x40010400

08009a2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b089      	sub	sp, #36	@ 0x24
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009a36:	2300      	movs	r3, #0
 8009a38:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009a3a:	e0a6      	b.n	8009b8a <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	fa02 f303 	lsl.w	r3, r2, r3
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	4013      	ands	r3, r2
 8009a48:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f000 8099 	beq.w	8009b84 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009a52:	4a54      	ldr	r2, [pc, #336]	@ (8009ba4 <HAL_GPIO_DeInit+0x178>)
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	089b      	lsrs	r3, r3, #2
 8009a58:	3302      	adds	r3, #2
 8009a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a5e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	f003 0303 	and.w	r3, r3, #3
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	220f      	movs	r2, #15
 8009a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	4013      	ands	r3, r2
 8009a72:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a4c      	ldr	r2, [pc, #304]	@ (8009ba8 <HAL_GPIO_DeInit+0x17c>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d01f      	beq.n	8009abc <HAL_GPIO_DeInit+0x90>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a4b      	ldr	r2, [pc, #300]	@ (8009bac <HAL_GPIO_DeInit+0x180>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d019      	beq.n	8009ab8 <HAL_GPIO_DeInit+0x8c>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a4a      	ldr	r2, [pc, #296]	@ (8009bb0 <HAL_GPIO_DeInit+0x184>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d013      	beq.n	8009ab4 <HAL_GPIO_DeInit+0x88>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a49      	ldr	r2, [pc, #292]	@ (8009bb4 <HAL_GPIO_DeInit+0x188>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d00d      	beq.n	8009ab0 <HAL_GPIO_DeInit+0x84>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a48      	ldr	r2, [pc, #288]	@ (8009bb8 <HAL_GPIO_DeInit+0x18c>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d007      	beq.n	8009aac <HAL_GPIO_DeInit+0x80>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a47      	ldr	r2, [pc, #284]	@ (8009bbc <HAL_GPIO_DeInit+0x190>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d101      	bne.n	8009aa8 <HAL_GPIO_DeInit+0x7c>
 8009aa4:	2305      	movs	r3, #5
 8009aa6:	e00a      	b.n	8009abe <HAL_GPIO_DeInit+0x92>
 8009aa8:	2306      	movs	r3, #6
 8009aaa:	e008      	b.n	8009abe <HAL_GPIO_DeInit+0x92>
 8009aac:	2304      	movs	r3, #4
 8009aae:	e006      	b.n	8009abe <HAL_GPIO_DeInit+0x92>
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e004      	b.n	8009abe <HAL_GPIO_DeInit+0x92>
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	e002      	b.n	8009abe <HAL_GPIO_DeInit+0x92>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e000      	b.n	8009abe <HAL_GPIO_DeInit+0x92>
 8009abc:	2300      	movs	r3, #0
 8009abe:	69fa      	ldr	r2, [r7, #28]
 8009ac0:	f002 0203 	and.w	r2, r2, #3
 8009ac4:	0092      	lsls	r2, r2, #2
 8009ac6:	4093      	lsls	r3, r2
 8009ac8:	697a      	ldr	r2, [r7, #20]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d132      	bne.n	8009b34 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009ace:	4b3c      	ldr	r3, [pc, #240]	@ (8009bc0 <HAL_GPIO_DeInit+0x194>)
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	43db      	mvns	r3, r3
 8009ad6:	493a      	ldr	r1, [pc, #232]	@ (8009bc0 <HAL_GPIO_DeInit+0x194>)
 8009ad8:	4013      	ands	r3, r2
 8009ada:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009adc:	4b38      	ldr	r3, [pc, #224]	@ (8009bc0 <HAL_GPIO_DeInit+0x194>)
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	43db      	mvns	r3, r3
 8009ae4:	4936      	ldr	r1, [pc, #216]	@ (8009bc0 <HAL_GPIO_DeInit+0x194>)
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009aea:	4b35      	ldr	r3, [pc, #212]	@ (8009bc0 <HAL_GPIO_DeInit+0x194>)
 8009aec:	68da      	ldr	r2, [r3, #12]
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	43db      	mvns	r3, r3
 8009af2:	4933      	ldr	r1, [pc, #204]	@ (8009bc0 <HAL_GPIO_DeInit+0x194>)
 8009af4:	4013      	ands	r3, r2
 8009af6:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009af8:	4b31      	ldr	r3, [pc, #196]	@ (8009bc0 <HAL_GPIO_DeInit+0x194>)
 8009afa:	689a      	ldr	r2, [r3, #8]
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	43db      	mvns	r3, r3
 8009b00:	492f      	ldr	r1, [pc, #188]	@ (8009bc0 <HAL_GPIO_DeInit+0x194>)
 8009b02:	4013      	ands	r3, r2
 8009b04:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	f003 0303 	and.w	r3, r3, #3
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	220f      	movs	r2, #15
 8009b10:	fa02 f303 	lsl.w	r3, r2, r3
 8009b14:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009b16:	4a23      	ldr	r2, [pc, #140]	@ (8009ba4 <HAL_GPIO_DeInit+0x178>)
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	089b      	lsrs	r3, r3, #2
 8009b1c:	3302      	adds	r3, #2
 8009b1e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	43da      	mvns	r2, r3
 8009b26:	481f      	ldr	r0, [pc, #124]	@ (8009ba4 <HAL_GPIO_DeInit+0x178>)
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	089b      	lsrs	r3, r3, #2
 8009b2c:	400a      	ands	r2, r1
 8009b2e:	3302      	adds	r3, #2
 8009b30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	2bff      	cmp	r3, #255	@ 0xff
 8009b38:	d801      	bhi.n	8009b3e <HAL_GPIO_DeInit+0x112>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	e001      	b.n	8009b42 <HAL_GPIO_DeInit+0x116>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	3304      	adds	r3, #4
 8009b42:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	2bff      	cmp	r3, #255	@ 0xff
 8009b48:	d802      	bhi.n	8009b50 <HAL_GPIO_DeInit+0x124>
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	e002      	b.n	8009b56 <HAL_GPIO_DeInit+0x12a>
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	3b08      	subs	r3, #8
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	210f      	movs	r1, #15
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	fa01 f303 	lsl.w	r3, r1, r3
 8009b64:	43db      	mvns	r3, r3
 8009b66:	401a      	ands	r2, r3
 8009b68:	2104      	movs	r1, #4
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b70:	431a      	orrs	r2, r3
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	68da      	ldr	r2, [r3, #12]
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	43db      	mvns	r3, r3
 8009b7e:	401a      	ands	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	3301      	adds	r3, #1
 8009b88:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009b8a:	683a      	ldr	r2, [r7, #0]
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f47f af52 	bne.w	8009a3c <HAL_GPIO_DeInit+0x10>
  }
}
 8009b98:	bf00      	nop
 8009b9a:	bf00      	nop
 8009b9c:	3724      	adds	r7, #36	@ 0x24
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bc80      	pop	{r7}
 8009ba2:	4770      	bx	lr
 8009ba4:	40010000 	.word	0x40010000
 8009ba8:	40010800 	.word	0x40010800
 8009bac:	40010c00 	.word	0x40010c00
 8009bb0:	40011000 	.word	0x40011000
 8009bb4:	40011400 	.word	0x40011400
 8009bb8:	40011800 	.word	0x40011800
 8009bbc:	40011c00 	.word	0x40011c00
 8009bc0:	40010400 	.word	0x40010400

08009bc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	460b      	mov	r3, r1
 8009bce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	887b      	ldrh	r3, [r7, #2]
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	73fb      	strb	r3, [r7, #15]
 8009be0:	e001      	b.n	8009be6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009be2:	2300      	movs	r3, #0
 8009be4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bc80      	pop	{r7}
 8009bf0:	4770      	bx	lr

08009bf2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b083      	sub	sp, #12
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	807b      	strh	r3, [r7, #2]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009c02:	787b      	ldrb	r3, [r7, #1]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d003      	beq.n	8009c10 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009c08:	887a      	ldrh	r2, [r7, #2]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009c0e:	e003      	b.n	8009c18 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009c10:	887b      	ldrh	r3, [r7, #2]
 8009c12:	041a      	lsls	r2, r3, #16
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	611a      	str	r2, [r3, #16]
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bc80      	pop	{r7}
 8009c20:	4770      	bx	lr

08009c22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009c22:	b480      	push	{r7}
 8009c24:	b085      	sub	sp, #20
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009c34:	887a      	ldrh	r2, [r7, #2]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	4013      	ands	r3, r2
 8009c3a:	041a      	lsls	r2, r3, #16
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	43d9      	mvns	r1, r3
 8009c40:	887b      	ldrh	r3, [r7, #2]
 8009c42:	400b      	ands	r3, r1
 8009c44:	431a      	orrs	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	611a      	str	r2, [r3, #16]
}
 8009c4a:	bf00      	nop
 8009c4c:	3714      	adds	r7, #20
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bc80      	pop	{r7}
 8009c52:	4770      	bx	lr

08009c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d101      	bne.n	8009c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e12b      	b.n	8009ebe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d106      	bne.n	8009c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7ff f97e 	bl	8008f7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2224      	movs	r2, #36	@ 0x24
 8009c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f022 0201 	bic.w	r2, r2, #1
 8009c96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009ca6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009cb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009cb8:	f001 fdb8 	bl	800b82c <HAL_RCC_GetPCLK1Freq>
 8009cbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	4a81      	ldr	r2, [pc, #516]	@ (8009ec8 <HAL_I2C_Init+0x274>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d807      	bhi.n	8009cd8 <HAL_I2C_Init+0x84>
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	4a80      	ldr	r2, [pc, #512]	@ (8009ecc <HAL_I2C_Init+0x278>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	bf94      	ite	ls
 8009cd0:	2301      	movls	r3, #1
 8009cd2:	2300      	movhi	r3, #0
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	e006      	b.n	8009ce6 <HAL_I2C_Init+0x92>
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	4a7d      	ldr	r2, [pc, #500]	@ (8009ed0 <HAL_I2C_Init+0x27c>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	bf94      	ite	ls
 8009ce0:	2301      	movls	r3, #1
 8009ce2:	2300      	movhi	r3, #0
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d001      	beq.n	8009cee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	e0e7      	b.n	8009ebe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	4a78      	ldr	r2, [pc, #480]	@ (8009ed4 <HAL_I2C_Init+0x280>)
 8009cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf6:	0c9b      	lsrs	r3, r3, #18
 8009cf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	6a1b      	ldr	r3, [r3, #32]
 8009d14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	4a6a      	ldr	r2, [pc, #424]	@ (8009ec8 <HAL_I2C_Init+0x274>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d802      	bhi.n	8009d28 <HAL_I2C_Init+0xd4>
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	3301      	adds	r3, #1
 8009d26:	e009      	b.n	8009d3c <HAL_I2C_Init+0xe8>
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009d2e:	fb02 f303 	mul.w	r3, r2, r3
 8009d32:	4a69      	ldr	r2, [pc, #420]	@ (8009ed8 <HAL_I2C_Init+0x284>)
 8009d34:	fba2 2303 	umull	r2, r3, r2, r3
 8009d38:	099b      	lsrs	r3, r3, #6
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	6812      	ldr	r2, [r2, #0]
 8009d40:	430b      	orrs	r3, r1
 8009d42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	69db      	ldr	r3, [r3, #28]
 8009d4a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009d4e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	495c      	ldr	r1, [pc, #368]	@ (8009ec8 <HAL_I2C_Init+0x274>)
 8009d58:	428b      	cmp	r3, r1
 8009d5a:	d819      	bhi.n	8009d90 <HAL_I2C_Init+0x13c>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	1e59      	subs	r1, r3, #1
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	005b      	lsls	r3, r3, #1
 8009d66:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d6a:	1c59      	adds	r1, r3, #1
 8009d6c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009d70:	400b      	ands	r3, r1
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00a      	beq.n	8009d8c <HAL_I2C_Init+0x138>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	1e59      	subs	r1, r3, #1
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	005b      	lsls	r3, r3, #1
 8009d80:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d84:	3301      	adds	r3, #1
 8009d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d8a:	e051      	b.n	8009e30 <HAL_I2C_Init+0x1dc>
 8009d8c:	2304      	movs	r3, #4
 8009d8e:	e04f      	b.n	8009e30 <HAL_I2C_Init+0x1dc>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d111      	bne.n	8009dbc <HAL_I2C_Init+0x168>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	1e58      	subs	r0, r3, #1
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6859      	ldr	r1, [r3, #4]
 8009da0:	460b      	mov	r3, r1
 8009da2:	005b      	lsls	r3, r3, #1
 8009da4:	440b      	add	r3, r1
 8009da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009daa:	3301      	adds	r3, #1
 8009dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	bf0c      	ite	eq
 8009db4:	2301      	moveq	r3, #1
 8009db6:	2300      	movne	r3, #0
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	e012      	b.n	8009de2 <HAL_I2C_Init+0x18e>
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	1e58      	subs	r0, r3, #1
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6859      	ldr	r1, [r3, #4]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	440b      	add	r3, r1
 8009dca:	0099      	lsls	r1, r3, #2
 8009dcc:	440b      	add	r3, r1
 8009dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	bf0c      	ite	eq
 8009ddc:	2301      	moveq	r3, #1
 8009dde:	2300      	movne	r3, #0
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <HAL_I2C_Init+0x196>
 8009de6:	2301      	movs	r3, #1
 8009de8:	e022      	b.n	8009e30 <HAL_I2C_Init+0x1dc>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10e      	bne.n	8009e10 <HAL_I2C_Init+0x1bc>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	1e58      	subs	r0, r3, #1
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6859      	ldr	r1, [r3, #4]
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	005b      	lsls	r3, r3, #1
 8009dfe:	440b      	add	r3, r1
 8009e00:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e04:	3301      	adds	r3, #1
 8009e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e0e:	e00f      	b.n	8009e30 <HAL_I2C_Init+0x1dc>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	1e58      	subs	r0, r3, #1
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6859      	ldr	r1, [r3, #4]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	440b      	add	r3, r1
 8009e1e:	0099      	lsls	r1, r3, #2
 8009e20:	440b      	add	r3, r1
 8009e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e26:	3301      	adds	r3, #1
 8009e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009e30:	6879      	ldr	r1, [r7, #4]
 8009e32:	6809      	ldr	r1, [r1, #0]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	69da      	ldr	r2, [r3, #28]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	431a      	orrs	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	430a      	orrs	r2, r1
 8009e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009e5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	6911      	ldr	r1, [r2, #16]
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	68d2      	ldr	r2, [r2, #12]
 8009e6a:	4311      	orrs	r1, r2
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	6812      	ldr	r2, [r2, #0]
 8009e70:	430b      	orrs	r3, r1
 8009e72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	695a      	ldr	r2, [r3, #20]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	431a      	orrs	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f042 0201 	orr.w	r2, r2, #1
 8009e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2220      	movs	r2, #32
 8009eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	000186a0 	.word	0x000186a0
 8009ecc:	001e847f 	.word	0x001e847f
 8009ed0:	003d08ff 	.word	0x003d08ff
 8009ed4:	431bde83 	.word	0x431bde83
 8009ed8:	10624dd3 	.word	0x10624dd3

08009edc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d101      	bne.n	8009eee <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	e021      	b.n	8009f32 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2224      	movs	r2, #36	@ 0x24
 8009ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f022 0201 	bic.w	r2, r2, #1
 8009f04:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f7ff f876 	bl	8008ff8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
	...

08009f3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b088      	sub	sp, #32
 8009f40:	af02      	add	r7, sp, #8
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	607a      	str	r2, [r7, #4]
 8009f46:	461a      	mov	r2, r3
 8009f48:	460b      	mov	r3, r1
 8009f4a:	817b      	strh	r3, [r7, #10]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009f50:	f7ff f9a0 	bl	8009294 <HAL_GetTick>
 8009f54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	2b20      	cmp	r3, #32
 8009f60:	f040 80e0 	bne.w	800a124 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	2319      	movs	r3, #25
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	4970      	ldr	r1, [pc, #448]	@ (800a130 <HAL_I2C_Master_Transmit+0x1f4>)
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f000 fe5c 	bl	800ac2c <I2C_WaitOnFlagUntilTimeout>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	e0d3      	b.n	800a126 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d101      	bne.n	8009f8c <HAL_I2C_Master_Transmit+0x50>
 8009f88:	2302      	movs	r3, #2
 8009f8a:	e0cc      	b.n	800a126 <HAL_I2C_Master_Transmit+0x1ea>
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0301 	and.w	r3, r3, #1
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d007      	beq.n	8009fb2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f042 0201 	orr.w	r2, r2, #1
 8009fb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009fc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2221      	movs	r2, #33	@ 0x21
 8009fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2210      	movs	r2, #16
 8009fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	893a      	ldrh	r2, [r7, #8]
 8009fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	4a50      	ldr	r2, [pc, #320]	@ (800a134 <HAL_I2C_Master_Transmit+0x1f8>)
 8009ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009ff4:	8979      	ldrh	r1, [r7, #10]
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	6a3a      	ldr	r2, [r7, #32]
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f000 fc16 	bl	800a82c <I2C_MasterRequestWrite>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d001      	beq.n	800a00a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	e08d      	b.n	800a126 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a00a:	2300      	movs	r3, #0
 800a00c:	613b      	str	r3, [r7, #16]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	695b      	ldr	r3, [r3, #20]
 800a014:	613b      	str	r3, [r7, #16]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	699b      	ldr	r3, [r3, #24]
 800a01c:	613b      	str	r3, [r7, #16]
 800a01e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a020:	e066      	b.n	800a0f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	6a39      	ldr	r1, [r7, #32]
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f000 ff1a 	bl	800ae60 <I2C_WaitOnTXEFlagUntilTimeout>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00d      	beq.n	800a04e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a036:	2b04      	cmp	r3, #4
 800a038:	d107      	bne.n	800a04a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a048:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e06b      	b.n	800a126 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a052:	781a      	ldrb	r2, [r3, #0]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a05e:	1c5a      	adds	r2, r3, #1
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a068:	b29b      	uxth	r3, r3
 800a06a:	3b01      	subs	r3, #1
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a076:	3b01      	subs	r3, #1
 800a078:	b29a      	uxth	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	695b      	ldr	r3, [r3, #20]
 800a084:	f003 0304 	and.w	r3, r3, #4
 800a088:	2b04      	cmp	r3, #4
 800a08a:	d11b      	bne.n	800a0c4 <HAL_I2C_Master_Transmit+0x188>
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a090:	2b00      	cmp	r3, #0
 800a092:	d017      	beq.n	800a0c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a098:	781a      	ldrb	r2, [r3, #0]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a4:	1c5a      	adds	r2, r3, #1
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0c4:	697a      	ldr	r2, [r7, #20]
 800a0c6:	6a39      	ldr	r1, [r7, #32]
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f000 ff11 	bl	800aef0 <I2C_WaitOnBTFFlagUntilTimeout>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00d      	beq.n	800a0f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0d8:	2b04      	cmp	r3, #4
 800a0da:	d107      	bne.n	800a0ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a0ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e01a      	b.n	800a126 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d194      	bne.n	800a022 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2220      	movs	r2, #32
 800a10c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a120:	2300      	movs	r3, #0
 800a122:	e000      	b.n	800a126 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a124:	2302      	movs	r3, #2
  }
}
 800a126:	4618      	mov	r0, r3
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	00100002 	.word	0x00100002
 800a134:	ffff0000 	.word	0xffff0000

0800a138 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b088      	sub	sp, #32
 800a13c:	af02      	add	r7, sp, #8
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	4608      	mov	r0, r1
 800a142:	4611      	mov	r1, r2
 800a144:	461a      	mov	r2, r3
 800a146:	4603      	mov	r3, r0
 800a148:	817b      	strh	r3, [r7, #10]
 800a14a:	460b      	mov	r3, r1
 800a14c:	813b      	strh	r3, [r7, #8]
 800a14e:	4613      	mov	r3, r2
 800a150:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a152:	f7ff f89f 	bl	8009294 <HAL_GetTick>
 800a156:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	2b20      	cmp	r3, #32
 800a162:	f040 80d9 	bne.w	800a318 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	2319      	movs	r3, #25
 800a16c:	2201      	movs	r2, #1
 800a16e:	496d      	ldr	r1, [pc, #436]	@ (800a324 <HAL_I2C_Mem_Write+0x1ec>)
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f000 fd5b 	bl	800ac2c <I2C_WaitOnFlagUntilTimeout>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a17c:	2302      	movs	r3, #2
 800a17e:	e0cc      	b.n	800a31a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a186:	2b01      	cmp	r3, #1
 800a188:	d101      	bne.n	800a18e <HAL_I2C_Mem_Write+0x56>
 800a18a:	2302      	movs	r3, #2
 800a18c:	e0c5      	b.n	800a31a <HAL_I2C_Mem_Write+0x1e2>
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2201      	movs	r2, #1
 800a192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 0301 	and.w	r3, r3, #1
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d007      	beq.n	800a1b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f042 0201 	orr.w	r2, r2, #1
 800a1b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a1c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2221      	movs	r2, #33	@ 0x21
 800a1c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2240      	movs	r2, #64	@ 0x40
 800a1d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6a3a      	ldr	r2, [r7, #32]
 800a1de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a1e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1ea:	b29a      	uxth	r2, r3
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	4a4d      	ldr	r2, [pc, #308]	@ (800a328 <HAL_I2C_Mem_Write+0x1f0>)
 800a1f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a1f6:	88f8      	ldrh	r0, [r7, #6]
 800a1f8:	893a      	ldrh	r2, [r7, #8]
 800a1fa:	8979      	ldrh	r1, [r7, #10]
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	9301      	str	r3, [sp, #4]
 800a200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	4603      	mov	r3, r0
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	f000 fb92 	bl	800a930 <I2C_RequestMemoryWrite>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d052      	beq.n	800a2b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e081      	b.n	800a31a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f000 fe20 	bl	800ae60 <I2C_WaitOnTXEFlagUntilTimeout>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00d      	beq.n	800a242 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a22a:	2b04      	cmp	r3, #4
 800a22c:	d107      	bne.n	800a23e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a23c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e06b      	b.n	800a31a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a246:	781a      	ldrb	r2, [r3, #0]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a25c:	3b01      	subs	r3, #1
 800a25e:	b29a      	uxth	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a268:	b29b      	uxth	r3, r3
 800a26a:	3b01      	subs	r3, #1
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	695b      	ldr	r3, [r3, #20]
 800a278:	f003 0304 	and.w	r3, r3, #4
 800a27c:	2b04      	cmp	r3, #4
 800a27e:	d11b      	bne.n	800a2b8 <HAL_I2C_Mem_Write+0x180>
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a284:	2b00      	cmp	r3, #0
 800a286:	d017      	beq.n	800a2b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a28c:	781a      	ldrb	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a298:	1c5a      	adds	r2, r3, #1
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d1aa      	bne.n	800a216 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f000 fe13 	bl	800aef0 <I2C_WaitOnBTFFlagUntilTimeout>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00d      	beq.n	800a2ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d4:	2b04      	cmp	r3, #4
 800a2d6:	d107      	bne.n	800a2e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e016      	b.n	800a31a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2220      	movs	r2, #32
 800a300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	e000      	b.n	800a31a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a318:	2302      	movs	r3, #2
  }
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	00100002 	.word	0x00100002
 800a328:	ffff0000 	.word	0xffff0000

0800a32c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08c      	sub	sp, #48	@ 0x30
 800a330:	af02      	add	r7, sp, #8
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	4608      	mov	r0, r1
 800a336:	4611      	mov	r1, r2
 800a338:	461a      	mov	r2, r3
 800a33a:	4603      	mov	r3, r0
 800a33c:	817b      	strh	r3, [r7, #10]
 800a33e:	460b      	mov	r3, r1
 800a340:	813b      	strh	r3, [r7, #8]
 800a342:	4613      	mov	r3, r2
 800a344:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a346:	2300      	movs	r3, #0
 800a348:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a34a:	f7fe ffa3 	bl	8009294 <HAL_GetTick>
 800a34e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a356:	b2db      	uxtb	r3, r3
 800a358:	2b20      	cmp	r3, #32
 800a35a:	f040 8244 	bne.w	800a7e6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	2319      	movs	r3, #25
 800a364:	2201      	movs	r2, #1
 800a366:	4982      	ldr	r1, [pc, #520]	@ (800a570 <HAL_I2C_Mem_Read+0x244>)
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f000 fc5f 	bl	800ac2c <I2C_WaitOnFlagUntilTimeout>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d001      	beq.n	800a378 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a374:	2302      	movs	r3, #2
 800a376:	e237      	b.n	800a7e8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d101      	bne.n	800a386 <HAL_I2C_Mem_Read+0x5a>
 800a382:	2302      	movs	r3, #2
 800a384:	e230      	b.n	800a7e8 <HAL_I2C_Mem_Read+0x4bc>
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2201      	movs	r2, #1
 800a38a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0301 	and.w	r3, r3, #1
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d007      	beq.n	800a3ac <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f042 0201 	orr.w	r2, r2, #1
 800a3aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a3ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2222      	movs	r2, #34	@ 0x22
 800a3c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2240      	movs	r2, #64	@ 0x40
 800a3c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a3dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	4a62      	ldr	r2, [pc, #392]	@ (800a574 <HAL_I2C_Mem_Read+0x248>)
 800a3ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a3ee:	88f8      	ldrh	r0, [r7, #6]
 800a3f0:	893a      	ldrh	r2, [r7, #8]
 800a3f2:	8979      	ldrh	r1, [r7, #10]
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f6:	9301      	str	r3, [sp, #4]
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f000 fb2c 	bl	800aa5c <I2C_RequestMemoryRead>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d001      	beq.n	800a40e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a40a:	2301      	movs	r3, #1
 800a40c:	e1ec      	b.n	800a7e8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a412:	2b00      	cmp	r3, #0
 800a414:	d113      	bne.n	800a43e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a416:	2300      	movs	r3, #0
 800a418:	61fb      	str	r3, [r7, #28]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	695b      	ldr	r3, [r3, #20]
 800a420:	61fb      	str	r3, [r7, #28]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	699b      	ldr	r3, [r3, #24]
 800a428:	61fb      	str	r3, [r7, #28]
 800a42a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a43a:	601a      	str	r2, [r3, #0]
 800a43c:	e1c0      	b.n	800a7c0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a442:	2b01      	cmp	r3, #1
 800a444:	d11e      	bne.n	800a484 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a454:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a456:	b672      	cpsid	i
}
 800a458:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a45a:	2300      	movs	r3, #0
 800a45c:	61bb      	str	r3, [r7, #24]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	61bb      	str	r3, [r7, #24]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	699b      	ldr	r3, [r3, #24]
 800a46c:	61bb      	str	r3, [r7, #24]
 800a46e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a47e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a480:	b662      	cpsie	i
}
 800a482:	e035      	b.n	800a4f0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d11e      	bne.n	800a4ca <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a49a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a49c:	b672      	cpsid	i
}
 800a49e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	617b      	str	r3, [r7, #20]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	695b      	ldr	r3, [r3, #20]
 800a4aa:	617b      	str	r3, [r7, #20]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	699b      	ldr	r3, [r3, #24]
 800a4b2:	617b      	str	r3, [r7, #20]
 800a4b4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a4c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a4c6:	b662      	cpsie	i
}
 800a4c8:	e012      	b.n	800a4f0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a4d8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4da:	2300      	movs	r3, #0
 800a4dc:	613b      	str	r3, [r7, #16]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	613b      	str	r3, [r7, #16]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	699b      	ldr	r3, [r3, #24]
 800a4ec:	613b      	str	r3, [r7, #16]
 800a4ee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a4f0:	e166      	b.n	800a7c0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4f6:	2b03      	cmp	r3, #3
 800a4f8:	f200 811f 	bhi.w	800a73a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a500:	2b01      	cmp	r3, #1
 800a502:	d123      	bne.n	800a54c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a506:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 fd39 	bl	800af80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e167      	b.n	800a7e8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	691a      	ldr	r2, [r3, #16]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a522:	b2d2      	uxtb	r2, r2
 800a524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a52a:	1c5a      	adds	r2, r3, #1
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a534:	3b01      	subs	r3, #1
 800a536:	b29a      	uxth	r2, r3
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a540:	b29b      	uxth	r3, r3
 800a542:	3b01      	subs	r3, #1
 800a544:	b29a      	uxth	r2, r3
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a54a:	e139      	b.n	800a7c0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a550:	2b02      	cmp	r3, #2
 800a552:	d152      	bne.n	800a5fa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a55a:	2200      	movs	r2, #0
 800a55c:	4906      	ldr	r1, [pc, #24]	@ (800a578 <HAL_I2C_Mem_Read+0x24c>)
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f000 fb64 	bl	800ac2c <I2C_WaitOnFlagUntilTimeout>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d008      	beq.n	800a57c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	e13c      	b.n	800a7e8 <HAL_I2C_Mem_Read+0x4bc>
 800a56e:	bf00      	nop
 800a570:	00100002 	.word	0x00100002
 800a574:	ffff0000 	.word	0xffff0000
 800a578:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a57c:	b672      	cpsid	i
}
 800a57e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a58e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	691a      	ldr	r2, [r3, #16]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a59a:	b2d2      	uxtb	r2, r2
 800a59c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5a2:	1c5a      	adds	r2, r3, #1
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a5c2:	b662      	cpsie	i
}
 800a5c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	691a      	ldr	r2, [r3, #16]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5d0:	b2d2      	uxtb	r2, r2
 800a5d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5d8:	1c5a      	adds	r2, r3, #1
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a5f8:	e0e2      	b.n	800a7c0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fc:	9300      	str	r3, [sp, #0]
 800a5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a600:	2200      	movs	r2, #0
 800a602:	497b      	ldr	r1, [pc, #492]	@ (800a7f0 <HAL_I2C_Mem_Read+0x4c4>)
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 fb11 	bl	800ac2c <I2C_WaitOnFlagUntilTimeout>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d001      	beq.n	800a614 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	e0e9      	b.n	800a7e8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a622:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a624:	b672      	cpsid	i
}
 800a626:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	691a      	ldr	r2, [r3, #16]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a632:	b2d2      	uxtb	r2, r2
 800a634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a63a:	1c5a      	adds	r2, r3, #1
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a644:	3b01      	subs	r3, #1
 800a646:	b29a      	uxth	r2, r3
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a650:	b29b      	uxth	r3, r3
 800a652:	3b01      	subs	r3, #1
 800a654:	b29a      	uxth	r2, r3
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a65a:	4b66      	ldr	r3, [pc, #408]	@ (800a7f4 <HAL_I2C_Mem_Read+0x4c8>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	08db      	lsrs	r3, r3, #3
 800a660:	4a65      	ldr	r2, [pc, #404]	@ (800a7f8 <HAL_I2C_Mem_Read+0x4cc>)
 800a662:	fba2 2303 	umull	r2, r3, r2, r3
 800a666:	0a1a      	lsrs	r2, r3, #8
 800a668:	4613      	mov	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	00da      	lsls	r2, r3, #3
 800a670:	1ad3      	subs	r3, r2, r3
 800a672:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a674:	6a3b      	ldr	r3, [r7, #32]
 800a676:	3b01      	subs	r3, #1
 800a678:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a67a:	6a3b      	ldr	r3, [r7, #32]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d118      	bne.n	800a6b2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2220      	movs	r2, #32
 800a68a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a69a:	f043 0220 	orr.w	r2, r3, #32
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a6a2:	b662      	cpsie	i
}
 800a6a4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e09a      	b.n	800a7e8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	695b      	ldr	r3, [r3, #20]
 800a6b8:	f003 0304 	and.w	r3, r3, #4
 800a6bc:	2b04      	cmp	r3, #4
 800a6be:	d1d9      	bne.n	800a674 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	691a      	ldr	r2, [r3, #16]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6da:	b2d2      	uxtb	r2, r2
 800a6dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e2:	1c5a      	adds	r2, r3, #1
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6ec:	3b01      	subs	r3, #1
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a702:	b662      	cpsie	i
}
 800a704:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	691a      	ldr	r2, [r3, #16]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a710:	b2d2      	uxtb	r2, r2
 800a712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a718:	1c5a      	adds	r2, r3, #1
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a722:	3b01      	subs	r3, #1
 800a724:	b29a      	uxth	r2, r3
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a72e:	b29b      	uxth	r3, r3
 800a730:	3b01      	subs	r3, #1
 800a732:	b29a      	uxth	r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a738:	e042      	b.n	800a7c0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a73a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a73c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a73e:	68f8      	ldr	r0, [r7, #12]
 800a740:	f000 fc1e 	bl	800af80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e04c      	b.n	800a7e8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	691a      	ldr	r2, [r3, #16]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a758:	b2d2      	uxtb	r2, r2
 800a75a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a760:	1c5a      	adds	r2, r3, #1
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a76a:	3b01      	subs	r3, #1
 800a76c:	b29a      	uxth	r2, r3
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a776:	b29b      	uxth	r3, r3
 800a778:	3b01      	subs	r3, #1
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	695b      	ldr	r3, [r3, #20]
 800a786:	f003 0304 	and.w	r3, r3, #4
 800a78a:	2b04      	cmp	r3, #4
 800a78c:	d118      	bne.n	800a7c0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	691a      	ldr	r2, [r3, #16]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a798:	b2d2      	uxtb	r2, r2
 800a79a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a0:	1c5a      	adds	r2, r3, #1
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	b29a      	uxth	r2, r3
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	3b01      	subs	r3, #1
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f47f ae94 	bne.w	800a4f2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2220      	movs	r2, #32
 800a7ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	e000      	b.n	800a7e8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a7e6:	2302      	movs	r3, #2
  }
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3728      	adds	r7, #40	@ 0x28
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	00010004 	.word	0x00010004
 800a7f4:	20000cd8 	.word	0x20000cd8
 800a7f8:	14f8b589 	.word	0x14f8b589

0800a7fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a80a:	b2db      	uxtb	r3, r3
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	bc80      	pop	{r7}
 800a814:	4770      	bx	lr

0800a816 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a816:	b480      	push	{r7}
 800a818:	b083      	sub	sp, #12
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800a822:	4618      	mov	r0, r3
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	bc80      	pop	{r7}
 800a82a:	4770      	bx	lr

0800a82c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b088      	sub	sp, #32
 800a830:	af02      	add	r7, sp, #8
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	607a      	str	r2, [r7, #4]
 800a836:	603b      	str	r3, [r7, #0]
 800a838:	460b      	mov	r3, r1
 800a83a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a840:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	2b08      	cmp	r3, #8
 800a846:	d006      	beq.n	800a856 <I2C_MasterRequestWrite+0x2a>
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d003      	beq.n	800a856 <I2C_MasterRequestWrite+0x2a>
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a854:	d108      	bne.n	800a868 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a864:	601a      	str	r2, [r3, #0]
 800a866:	e00b      	b.n	800a880 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a86c:	2b12      	cmp	r3, #18
 800a86e:	d107      	bne.n	800a880 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a87e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 f9cd 	bl	800ac2c <I2C_WaitOnFlagUntilTimeout>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d00d      	beq.n	800a8b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8a6:	d103      	bne.n	800a8b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a8ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	e035      	b.n	800a920 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8bc:	d108      	bne.n	800a8d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a8be:	897b      	ldrh	r3, [r7, #10]
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a8cc:	611a      	str	r2, [r3, #16]
 800a8ce:	e01b      	b.n	800a908 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a8d0:	897b      	ldrh	r3, [r7, #10]
 800a8d2:	11db      	asrs	r3, r3, #7
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	f003 0306 	and.w	r3, r3, #6
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	f063 030f 	orn	r3, r3, #15
 800a8e0:	b2da      	uxtb	r2, r3
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	490e      	ldr	r1, [pc, #56]	@ (800a928 <I2C_MasterRequestWrite+0xfc>)
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f000 fa16 	bl	800ad20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e010      	b.n	800a920 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a8fe:	897b      	ldrh	r3, [r7, #10]
 800a900:	b2da      	uxtb	r2, r3
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	4907      	ldr	r1, [pc, #28]	@ (800a92c <I2C_MasterRequestWrite+0x100>)
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f000 fa06 	bl	800ad20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	d001      	beq.n	800a91e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	e000      	b.n	800a920 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3718      	adds	r7, #24
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	00010008 	.word	0x00010008
 800a92c:	00010002 	.word	0x00010002

0800a930 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b088      	sub	sp, #32
 800a934:	af02      	add	r7, sp, #8
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	4608      	mov	r0, r1
 800a93a:	4611      	mov	r1, r2
 800a93c:	461a      	mov	r2, r3
 800a93e:	4603      	mov	r3, r0
 800a940:	817b      	strh	r3, [r7, #10]
 800a942:	460b      	mov	r3, r1
 800a944:	813b      	strh	r3, [r7, #8]
 800a946:	4613      	mov	r3, r2
 800a948:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a958:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a95c:	9300      	str	r3, [sp, #0]
 800a95e:	6a3b      	ldr	r3, [r7, #32]
 800a960:	2200      	movs	r2, #0
 800a962:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f000 f960 	bl	800ac2c <I2C_WaitOnFlagUntilTimeout>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00d      	beq.n	800a98e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a97c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a980:	d103      	bne.n	800a98a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a988:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a98a:	2303      	movs	r3, #3
 800a98c:	e05f      	b.n	800aa4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a98e:	897b      	ldrh	r3, [r7, #10]
 800a990:	b2db      	uxtb	r3, r3
 800a992:	461a      	mov	r2, r3
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a99c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a0:	6a3a      	ldr	r2, [r7, #32]
 800a9a2:	492d      	ldr	r1, [pc, #180]	@ (800aa58 <I2C_RequestMemoryWrite+0x128>)
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f000 f9bb 	bl	800ad20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e04c      	b.n	800aa4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	617b      	str	r3, [r7, #20]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	617b      	str	r3, [r7, #20]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	617b      	str	r3, [r7, #20]
 800a9c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9cc:	6a39      	ldr	r1, [r7, #32]
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f000 fa46 	bl	800ae60 <I2C_WaitOnTXEFlagUntilTimeout>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00d      	beq.n	800a9f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9de:	2b04      	cmp	r3, #4
 800a9e0:	d107      	bne.n	800a9f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e02b      	b.n	800aa4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a9f6:	88fb      	ldrh	r3, [r7, #6]
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d105      	bne.n	800aa08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a9fc:	893b      	ldrh	r3, [r7, #8]
 800a9fe:	b2da      	uxtb	r2, r3
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	611a      	str	r2, [r3, #16]
 800aa06:	e021      	b.n	800aa4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aa08:	893b      	ldrh	r3, [r7, #8]
 800aa0a:	0a1b      	lsrs	r3, r3, #8
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa18:	6a39      	ldr	r1, [r7, #32]
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f000 fa20 	bl	800ae60 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00d      	beq.n	800aa42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa2a:	2b04      	cmp	r3, #4
 800aa2c:	d107      	bne.n	800aa3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e005      	b.n	800aa4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aa42:	893b      	ldrh	r3, [r7, #8]
 800aa44:	b2da      	uxtb	r2, r3
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3718      	adds	r7, #24
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	00010002 	.word	0x00010002

0800aa5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b088      	sub	sp, #32
 800aa60:	af02      	add	r7, sp, #8
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	4608      	mov	r0, r1
 800aa66:	4611      	mov	r1, r2
 800aa68:	461a      	mov	r2, r3
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	817b      	strh	r3, [r7, #10]
 800aa6e:	460b      	mov	r3, r1
 800aa70:	813b      	strh	r3, [r7, #8]
 800aa72:	4613      	mov	r3, r2
 800aa74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aa84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aa96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa98:	9300      	str	r3, [sp, #0]
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f000 f8c2 	bl	800ac2c <I2C_WaitOnFlagUntilTimeout>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00d      	beq.n	800aaca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aabc:	d103      	bne.n	800aac6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aac4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800aac6:	2303      	movs	r3, #3
 800aac8:	e0aa      	b.n	800ac20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aaca:	897b      	ldrh	r3, [r7, #10]
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	461a      	mov	r2, r3
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800aad8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aadc:	6a3a      	ldr	r2, [r7, #32]
 800aade:	4952      	ldr	r1, [pc, #328]	@ (800ac28 <I2C_RequestMemoryRead+0x1cc>)
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f000 f91d 	bl	800ad20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d001      	beq.n	800aaf0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	e097      	b.n	800ac20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	617b      	str	r3, [r7, #20]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	695b      	ldr	r3, [r3, #20]
 800aafa:	617b      	str	r3, [r7, #20]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	699b      	ldr	r3, [r3, #24]
 800ab02:	617b      	str	r3, [r7, #20]
 800ab04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab08:	6a39      	ldr	r1, [r7, #32]
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	f000 f9a8 	bl	800ae60 <I2C_WaitOnTXEFlagUntilTimeout>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00d      	beq.n	800ab32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab1a:	2b04      	cmp	r3, #4
 800ab1c:	d107      	bne.n	800ab2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e076      	b.n	800ac20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ab32:	88fb      	ldrh	r3, [r7, #6]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d105      	bne.n	800ab44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ab38:	893b      	ldrh	r3, [r7, #8]
 800ab3a:	b2da      	uxtb	r2, r3
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	611a      	str	r2, [r3, #16]
 800ab42:	e021      	b.n	800ab88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ab44:	893b      	ldrh	r3, [r7, #8]
 800ab46:	0a1b      	lsrs	r3, r3, #8
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	b2da      	uxtb	r2, r3
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab54:	6a39      	ldr	r1, [r7, #32]
 800ab56:	68f8      	ldr	r0, [r7, #12]
 800ab58:	f000 f982 	bl	800ae60 <I2C_WaitOnTXEFlagUntilTimeout>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00d      	beq.n	800ab7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab66:	2b04      	cmp	r3, #4
 800ab68:	d107      	bne.n	800ab7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e050      	b.n	800ac20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ab7e:	893b      	ldrh	r3, [r7, #8]
 800ab80:	b2da      	uxtb	r2, r3
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab8a:	6a39      	ldr	r1, [r7, #32]
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f000 f967 	bl	800ae60 <I2C_WaitOnTXEFlagUntilTimeout>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00d      	beq.n	800abb4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab9c:	2b04      	cmp	r3, #4
 800ab9e:	d107      	bne.n	800abb0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800abae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800abb0:	2301      	movs	r3, #1
 800abb2:	e035      	b.n	800ac20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800abc2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800abc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	6a3b      	ldr	r3, [r7, #32]
 800abca:	2200      	movs	r2, #0
 800abcc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f000 f82b 	bl	800ac2c <I2C_WaitOnFlagUntilTimeout>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00d      	beq.n	800abf8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abea:	d103      	bne.n	800abf4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800abf2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800abf4:	2303      	movs	r3, #3
 800abf6:	e013      	b.n	800ac20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800abf8:	897b      	ldrh	r3, [r7, #10]
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	f043 0301 	orr.w	r3, r3, #1
 800ac00:	b2da      	uxtb	r2, r3
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0a:	6a3a      	ldr	r2, [r7, #32]
 800ac0c:	4906      	ldr	r1, [pc, #24]	@ (800ac28 <I2C_RequestMemoryRead+0x1cc>)
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f000 f886 	bl	800ad20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e000      	b.n	800ac20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3718      	adds	r7, #24
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	00010002 	.word	0x00010002

0800ac2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	603b      	str	r3, [r7, #0]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac3c:	e048      	b.n	800acd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac44:	d044      	beq.n	800acd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac46:	f7fe fb25 	bl	8009294 <HAL_GetTick>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	1ad3      	subs	r3, r2, r3
 800ac50:	683a      	ldr	r2, [r7, #0]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d302      	bcc.n	800ac5c <I2C_WaitOnFlagUntilTimeout+0x30>
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d139      	bne.n	800acd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	0c1b      	lsrs	r3, r3, #16
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d10d      	bne.n	800ac82 <I2C_WaitOnFlagUntilTimeout+0x56>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	695b      	ldr	r3, [r3, #20]
 800ac6c:	43da      	mvns	r2, r3
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	4013      	ands	r3, r2
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	bf0c      	ite	eq
 800ac78:	2301      	moveq	r3, #1
 800ac7a:	2300      	movne	r3, #0
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	461a      	mov	r2, r3
 800ac80:	e00c      	b.n	800ac9c <I2C_WaitOnFlagUntilTimeout+0x70>
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	699b      	ldr	r3, [r3, #24]
 800ac88:	43da      	mvns	r2, r3
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	bf0c      	ite	eq
 800ac94:	2301      	moveq	r3, #1
 800ac96:	2300      	movne	r3, #0
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	79fb      	ldrb	r3, [r7, #7]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d116      	bne.n	800acd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2200      	movs	r2, #0
 800aca6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2220      	movs	r2, #32
 800acac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2200      	movs	r2, #0
 800acb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acbc:	f043 0220 	orr.w	r2, r3, #32
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800accc:	2301      	movs	r3, #1
 800acce:	e023      	b.n	800ad18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	0c1b      	lsrs	r3, r3, #16
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d10d      	bne.n	800acf6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	695b      	ldr	r3, [r3, #20]
 800ace0:	43da      	mvns	r2, r3
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	4013      	ands	r3, r2
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	2b00      	cmp	r3, #0
 800acea:	bf0c      	ite	eq
 800acec:	2301      	moveq	r3, #1
 800acee:	2300      	movne	r3, #0
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	461a      	mov	r2, r3
 800acf4:	e00c      	b.n	800ad10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	699b      	ldr	r3, [r3, #24]
 800acfc:	43da      	mvns	r2, r3
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	4013      	ands	r3, r2
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	bf0c      	ite	eq
 800ad08:	2301      	moveq	r3, #1
 800ad0a:	2300      	movne	r3, #0
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	461a      	mov	r2, r3
 800ad10:	79fb      	ldrb	r3, [r7, #7]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d093      	beq.n	800ac3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3710      	adds	r7, #16
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
 800ad2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ad2e:	e071      	b.n	800ae14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	695b      	ldr	r3, [r3, #20]
 800ad36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad3e:	d123      	bne.n	800ad88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ad58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2220      	movs	r2, #32
 800ad64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad74:	f043 0204 	orr.w	r2, r3, #4
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	e067      	b.n	800ae58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad8e:	d041      	beq.n	800ae14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad90:	f7fe fa80 	bl	8009294 <HAL_GetTick>
 800ad94:	4602      	mov	r2, r0
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d302      	bcc.n	800ada6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d136      	bne.n	800ae14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	0c1b      	lsrs	r3, r3, #16
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	2b01      	cmp	r3, #1
 800adae:	d10c      	bne.n	800adca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	695b      	ldr	r3, [r3, #20]
 800adb6:	43da      	mvns	r2, r3
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	4013      	ands	r3, r2
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	bf14      	ite	ne
 800adc2:	2301      	movne	r3, #1
 800adc4:	2300      	moveq	r3, #0
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	e00b      	b.n	800ade2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	43da      	mvns	r2, r3
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	4013      	ands	r3, r2
 800add6:	b29b      	uxth	r3, r3
 800add8:	2b00      	cmp	r3, #0
 800adda:	bf14      	ite	ne
 800addc:	2301      	movne	r3, #1
 800adde:	2300      	moveq	r3, #0
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d016      	beq.n	800ae14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2200      	movs	r2, #0
 800adea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2220      	movs	r2, #32
 800adf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae00:	f043 0220 	orr.w	r2, r3, #32
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	e021      	b.n	800ae58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	0c1b      	lsrs	r3, r3, #16
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d10c      	bne.n	800ae38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	43da      	mvns	r2, r3
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	4013      	ands	r3, r2
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	bf14      	ite	ne
 800ae30:	2301      	movne	r3, #1
 800ae32:	2300      	moveq	r3, #0
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	e00b      	b.n	800ae50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	43da      	mvns	r2, r3
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	4013      	ands	r3, r2
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	bf14      	ite	ne
 800ae4a:	2301      	movne	r3, #1
 800ae4c:	2300      	moveq	r3, #0
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f47f af6d 	bne.w	800ad30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ae6c:	e034      	b.n	800aed8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f000 f8e3 	bl	800b03a <I2C_IsAcknowledgeFailed>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d001      	beq.n	800ae7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e034      	b.n	800aee8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae84:	d028      	beq.n	800aed8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae86:	f7fe fa05 	bl	8009294 <HAL_GetTick>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	1ad3      	subs	r3, r2, r3
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d302      	bcc.n	800ae9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d11d      	bne.n	800aed8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	695b      	ldr	r3, [r3, #20]
 800aea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aea6:	2b80      	cmp	r3, #128	@ 0x80
 800aea8:	d016      	beq.n	800aed8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2220      	movs	r2, #32
 800aeb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aec4:	f043 0220 	orr.w	r2, r3, #32
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	e007      	b.n	800aee8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	695b      	ldr	r3, [r3, #20]
 800aede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aee2:	2b80      	cmp	r3, #128	@ 0x80
 800aee4:	d1c3      	bne.n	800ae6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800aee6:	2300      	movs	r3, #0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3710      	adds	r7, #16
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aefc:	e034      	b.n	800af68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f000 f89b 	bl	800b03a <I2C_IsAcknowledgeFailed>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d001      	beq.n	800af0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	e034      	b.n	800af78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af14:	d028      	beq.n	800af68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af16:	f7fe f9bd 	bl	8009294 <HAL_GetTick>
 800af1a:	4602      	mov	r2, r0
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	1ad3      	subs	r3, r2, r3
 800af20:	68ba      	ldr	r2, [r7, #8]
 800af22:	429a      	cmp	r2, r3
 800af24:	d302      	bcc.n	800af2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d11d      	bne.n	800af68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	f003 0304 	and.w	r3, r3, #4
 800af36:	2b04      	cmp	r3, #4
 800af38:	d016      	beq.n	800af68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2200      	movs	r2, #0
 800af3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2220      	movs	r2, #32
 800af44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af54:	f043 0220 	orr.w	r2, r3, #32
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800af64:	2301      	movs	r3, #1
 800af66:	e007      	b.n	800af78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	695b      	ldr	r3, [r3, #20]
 800af6e:	f003 0304 	and.w	r3, r3, #4
 800af72:	2b04      	cmp	r3, #4
 800af74:	d1c3      	bne.n	800aefe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800af8c:	e049      	b.n	800b022 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	695b      	ldr	r3, [r3, #20]
 800af94:	f003 0310 	and.w	r3, r3, #16
 800af98:	2b10      	cmp	r3, #16
 800af9a:	d119      	bne.n	800afd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f06f 0210 	mvn.w	r2, #16
 800afa4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2220      	movs	r2, #32
 800afb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	e030      	b.n	800b032 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afd0:	f7fe f960 	bl	8009294 <HAL_GetTick>
 800afd4:	4602      	mov	r2, r0
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	1ad3      	subs	r3, r2, r3
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d302      	bcc.n	800afe6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d11d      	bne.n	800b022 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	695b      	ldr	r3, [r3, #20]
 800afec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aff0:	2b40      	cmp	r3, #64	@ 0x40
 800aff2:	d016      	beq.n	800b022 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2200      	movs	r2, #0
 800aff8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2220      	movs	r2, #32
 800affe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b00e:	f043 0220 	orr.w	r2, r3, #32
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2200      	movs	r2, #0
 800b01a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	e007      	b.n	800b032 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	695b      	ldr	r3, [r3, #20]
 800b028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b02c:	2b40      	cmp	r3, #64	@ 0x40
 800b02e:	d1ae      	bne.n	800af8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b03a:	b480      	push	{r7}
 800b03c:	b083      	sub	sp, #12
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	695b      	ldr	r3, [r3, #20]
 800b048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b04c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b050:	d11b      	bne.n	800b08a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b05a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2220      	movs	r2, #32
 800b066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b076:	f043 0204 	orr.w	r2, r3, #4
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b086:	2301      	movs	r3, #1
 800b088:	e000      	b.n	800b08c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	bc80      	pop	{r7}
 800b094:	4770      	bx	lr
	...

0800b098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d101      	bne.n	800b0aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e272      	b.n	800b590 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f000 8087 	beq.w	800b1c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b0b8:	4b92      	ldr	r3, [pc, #584]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	f003 030c 	and.w	r3, r3, #12
 800b0c0:	2b04      	cmp	r3, #4
 800b0c2:	d00c      	beq.n	800b0de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b0c4:	4b8f      	ldr	r3, [pc, #572]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	f003 030c 	and.w	r3, r3, #12
 800b0cc:	2b08      	cmp	r3, #8
 800b0ce:	d112      	bne.n	800b0f6 <HAL_RCC_OscConfig+0x5e>
 800b0d0:	4b8c      	ldr	r3, [pc, #560]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b0d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0dc:	d10b      	bne.n	800b0f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b0de:	4b89      	ldr	r3, [pc, #548]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d06c      	beq.n	800b1c4 <HAL_RCC_OscConfig+0x12c>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d168      	bne.n	800b1c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e24c      	b.n	800b590 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0fe:	d106      	bne.n	800b10e <HAL_RCC_OscConfig+0x76>
 800b100:	4b80      	ldr	r3, [pc, #512]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a7f      	ldr	r2, [pc, #508]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b10a:	6013      	str	r3, [r2, #0]
 800b10c:	e02e      	b.n	800b16c <HAL_RCC_OscConfig+0xd4>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d10c      	bne.n	800b130 <HAL_RCC_OscConfig+0x98>
 800b116:	4b7b      	ldr	r3, [pc, #492]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a7a      	ldr	r2, [pc, #488]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b11c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b120:	6013      	str	r3, [r2, #0]
 800b122:	4b78      	ldr	r3, [pc, #480]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a77      	ldr	r2, [pc, #476]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b128:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b12c:	6013      	str	r3, [r2, #0]
 800b12e:	e01d      	b.n	800b16c <HAL_RCC_OscConfig+0xd4>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b138:	d10c      	bne.n	800b154 <HAL_RCC_OscConfig+0xbc>
 800b13a:	4b72      	ldr	r3, [pc, #456]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4a71      	ldr	r2, [pc, #452]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b144:	6013      	str	r3, [r2, #0]
 800b146:	4b6f      	ldr	r3, [pc, #444]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a6e      	ldr	r2, [pc, #440]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b14c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b150:	6013      	str	r3, [r2, #0]
 800b152:	e00b      	b.n	800b16c <HAL_RCC_OscConfig+0xd4>
 800b154:	4b6b      	ldr	r3, [pc, #428]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a6a      	ldr	r2, [pc, #424]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b15a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b15e:	6013      	str	r3, [r2, #0]
 800b160:	4b68      	ldr	r3, [pc, #416]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a67      	ldr	r2, [pc, #412]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b16a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d013      	beq.n	800b19c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b174:	f7fe f88e 	bl	8009294 <HAL_GetTick>
 800b178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b17a:	e008      	b.n	800b18e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b17c:	f7fe f88a 	bl	8009294 <HAL_GetTick>
 800b180:	4602      	mov	r2, r0
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	1ad3      	subs	r3, r2, r3
 800b186:	2b64      	cmp	r3, #100	@ 0x64
 800b188:	d901      	bls.n	800b18e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b18a:	2303      	movs	r3, #3
 800b18c:	e200      	b.n	800b590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b18e:	4b5d      	ldr	r3, [pc, #372]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b196:	2b00      	cmp	r3, #0
 800b198:	d0f0      	beq.n	800b17c <HAL_RCC_OscConfig+0xe4>
 800b19a:	e014      	b.n	800b1c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b19c:	f7fe f87a 	bl	8009294 <HAL_GetTick>
 800b1a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b1a2:	e008      	b.n	800b1b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1a4:	f7fe f876 	bl	8009294 <HAL_GetTick>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	1ad3      	subs	r3, r2, r3
 800b1ae:	2b64      	cmp	r3, #100	@ 0x64
 800b1b0:	d901      	bls.n	800b1b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b1b2:	2303      	movs	r3, #3
 800b1b4:	e1ec      	b.n	800b590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b1b6:	4b53      	ldr	r3, [pc, #332]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d1f0      	bne.n	800b1a4 <HAL_RCC_OscConfig+0x10c>
 800b1c2:	e000      	b.n	800b1c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b1c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f003 0302 	and.w	r3, r3, #2
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d063      	beq.n	800b29a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b1d2:	4b4c      	ldr	r3, [pc, #304]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	f003 030c 	and.w	r3, r3, #12
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00b      	beq.n	800b1f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b1de:	4b49      	ldr	r3, [pc, #292]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	f003 030c 	and.w	r3, r3, #12
 800b1e6:	2b08      	cmp	r3, #8
 800b1e8:	d11c      	bne.n	800b224 <HAL_RCC_OscConfig+0x18c>
 800b1ea:	4b46      	ldr	r3, [pc, #280]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d116      	bne.n	800b224 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b1f6:	4b43      	ldr	r3, [pc, #268]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f003 0302 	and.w	r3, r3, #2
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d005      	beq.n	800b20e <HAL_RCC_OscConfig+0x176>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	2b01      	cmp	r3, #1
 800b208:	d001      	beq.n	800b20e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	e1c0      	b.n	800b590 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b20e:	4b3d      	ldr	r3, [pc, #244]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	695b      	ldr	r3, [r3, #20]
 800b21a:	00db      	lsls	r3, r3, #3
 800b21c:	4939      	ldr	r1, [pc, #228]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b21e:	4313      	orrs	r3, r2
 800b220:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b222:	e03a      	b.n	800b29a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	691b      	ldr	r3, [r3, #16]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d020      	beq.n	800b26e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b22c:	4b36      	ldr	r3, [pc, #216]	@ (800b308 <HAL_RCC_OscConfig+0x270>)
 800b22e:	2201      	movs	r2, #1
 800b230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b232:	f7fe f82f 	bl	8009294 <HAL_GetTick>
 800b236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b238:	e008      	b.n	800b24c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b23a:	f7fe f82b 	bl	8009294 <HAL_GetTick>
 800b23e:	4602      	mov	r2, r0
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	2b02      	cmp	r3, #2
 800b246:	d901      	bls.n	800b24c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b248:	2303      	movs	r3, #3
 800b24a:	e1a1      	b.n	800b590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b24c:	4b2d      	ldr	r3, [pc, #180]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 0302 	and.w	r3, r3, #2
 800b254:	2b00      	cmp	r3, #0
 800b256:	d0f0      	beq.n	800b23a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b258:	4b2a      	ldr	r3, [pc, #168]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	695b      	ldr	r3, [r3, #20]
 800b264:	00db      	lsls	r3, r3, #3
 800b266:	4927      	ldr	r1, [pc, #156]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b268:	4313      	orrs	r3, r2
 800b26a:	600b      	str	r3, [r1, #0]
 800b26c:	e015      	b.n	800b29a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b26e:	4b26      	ldr	r3, [pc, #152]	@ (800b308 <HAL_RCC_OscConfig+0x270>)
 800b270:	2200      	movs	r2, #0
 800b272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b274:	f7fe f80e 	bl	8009294 <HAL_GetTick>
 800b278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b27a:	e008      	b.n	800b28e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b27c:	f7fe f80a 	bl	8009294 <HAL_GetTick>
 800b280:	4602      	mov	r2, r0
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	2b02      	cmp	r3, #2
 800b288:	d901      	bls.n	800b28e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b28a:	2303      	movs	r3, #3
 800b28c:	e180      	b.n	800b590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b28e:	4b1d      	ldr	r3, [pc, #116]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 0302 	and.w	r3, r3, #2
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1f0      	bne.n	800b27c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 0308 	and.w	r3, r3, #8
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d03a      	beq.n	800b31c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	699b      	ldr	r3, [r3, #24]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d019      	beq.n	800b2e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b2ae:	4b17      	ldr	r3, [pc, #92]	@ (800b30c <HAL_RCC_OscConfig+0x274>)
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b2b4:	f7fd ffee 	bl	8009294 <HAL_GetTick>
 800b2b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b2ba:	e008      	b.n	800b2ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b2bc:	f7fd ffea 	bl	8009294 <HAL_GetTick>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	1ad3      	subs	r3, r2, r3
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	d901      	bls.n	800b2ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	e160      	b.n	800b590 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b2ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b304 <HAL_RCC_OscConfig+0x26c>)
 800b2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d2:	f003 0302 	and.w	r3, r3, #2
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d0f0      	beq.n	800b2bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b2da:	2001      	movs	r0, #1
 800b2dc:	f000 face 	bl	800b87c <RCC_Delay>
 800b2e0:	e01c      	b.n	800b31c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b2e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b30c <HAL_RCC_OscConfig+0x274>)
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b2e8:	f7fd ffd4 	bl	8009294 <HAL_GetTick>
 800b2ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b2ee:	e00f      	b.n	800b310 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b2f0:	f7fd ffd0 	bl	8009294 <HAL_GetTick>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	1ad3      	subs	r3, r2, r3
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d908      	bls.n	800b310 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b2fe:	2303      	movs	r3, #3
 800b300:	e146      	b.n	800b590 <HAL_RCC_OscConfig+0x4f8>
 800b302:	bf00      	nop
 800b304:	40021000 	.word	0x40021000
 800b308:	42420000 	.word	0x42420000
 800b30c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b310:	4b92      	ldr	r3, [pc, #584]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b314:	f003 0302 	and.w	r3, r3, #2
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1e9      	bne.n	800b2f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f003 0304 	and.w	r3, r3, #4
 800b324:	2b00      	cmp	r3, #0
 800b326:	f000 80a6 	beq.w	800b476 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b32a:	2300      	movs	r3, #0
 800b32c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b32e:	4b8b      	ldr	r3, [pc, #556]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b330:	69db      	ldr	r3, [r3, #28]
 800b332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b336:	2b00      	cmp	r3, #0
 800b338:	d10d      	bne.n	800b356 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b33a:	4b88      	ldr	r3, [pc, #544]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b33c:	69db      	ldr	r3, [r3, #28]
 800b33e:	4a87      	ldr	r2, [pc, #540]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b344:	61d3      	str	r3, [r2, #28]
 800b346:	4b85      	ldr	r3, [pc, #532]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b348:	69db      	ldr	r3, [r3, #28]
 800b34a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b34e:	60bb      	str	r3, [r7, #8]
 800b350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b352:	2301      	movs	r3, #1
 800b354:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b356:	4b82      	ldr	r3, [pc, #520]	@ (800b560 <HAL_RCC_OscConfig+0x4c8>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d118      	bne.n	800b394 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b362:	4b7f      	ldr	r3, [pc, #508]	@ (800b560 <HAL_RCC_OscConfig+0x4c8>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a7e      	ldr	r2, [pc, #504]	@ (800b560 <HAL_RCC_OscConfig+0x4c8>)
 800b368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b36c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b36e:	f7fd ff91 	bl	8009294 <HAL_GetTick>
 800b372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b374:	e008      	b.n	800b388 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b376:	f7fd ff8d 	bl	8009294 <HAL_GetTick>
 800b37a:	4602      	mov	r2, r0
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	1ad3      	subs	r3, r2, r3
 800b380:	2b64      	cmp	r3, #100	@ 0x64
 800b382:	d901      	bls.n	800b388 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b384:	2303      	movs	r3, #3
 800b386:	e103      	b.n	800b590 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b388:	4b75      	ldr	r3, [pc, #468]	@ (800b560 <HAL_RCC_OscConfig+0x4c8>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b390:	2b00      	cmp	r3, #0
 800b392:	d0f0      	beq.n	800b376 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d106      	bne.n	800b3aa <HAL_RCC_OscConfig+0x312>
 800b39c:	4b6f      	ldr	r3, [pc, #444]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b39e:	6a1b      	ldr	r3, [r3, #32]
 800b3a0:	4a6e      	ldr	r2, [pc, #440]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b3a2:	f043 0301 	orr.w	r3, r3, #1
 800b3a6:	6213      	str	r3, [r2, #32]
 800b3a8:	e02d      	b.n	800b406 <HAL_RCC_OscConfig+0x36e>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	68db      	ldr	r3, [r3, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d10c      	bne.n	800b3cc <HAL_RCC_OscConfig+0x334>
 800b3b2:	4b6a      	ldr	r3, [pc, #424]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b3b4:	6a1b      	ldr	r3, [r3, #32]
 800b3b6:	4a69      	ldr	r2, [pc, #420]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b3b8:	f023 0301 	bic.w	r3, r3, #1
 800b3bc:	6213      	str	r3, [r2, #32]
 800b3be:	4b67      	ldr	r3, [pc, #412]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	4a66      	ldr	r2, [pc, #408]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b3c4:	f023 0304 	bic.w	r3, r3, #4
 800b3c8:	6213      	str	r3, [r2, #32]
 800b3ca:	e01c      	b.n	800b406 <HAL_RCC_OscConfig+0x36e>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	2b05      	cmp	r3, #5
 800b3d2:	d10c      	bne.n	800b3ee <HAL_RCC_OscConfig+0x356>
 800b3d4:	4b61      	ldr	r3, [pc, #388]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b3d6:	6a1b      	ldr	r3, [r3, #32]
 800b3d8:	4a60      	ldr	r2, [pc, #384]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b3da:	f043 0304 	orr.w	r3, r3, #4
 800b3de:	6213      	str	r3, [r2, #32]
 800b3e0:	4b5e      	ldr	r3, [pc, #376]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b3e2:	6a1b      	ldr	r3, [r3, #32]
 800b3e4:	4a5d      	ldr	r2, [pc, #372]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b3e6:	f043 0301 	orr.w	r3, r3, #1
 800b3ea:	6213      	str	r3, [r2, #32]
 800b3ec:	e00b      	b.n	800b406 <HAL_RCC_OscConfig+0x36e>
 800b3ee:	4b5b      	ldr	r3, [pc, #364]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b3f0:	6a1b      	ldr	r3, [r3, #32]
 800b3f2:	4a5a      	ldr	r2, [pc, #360]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b3f4:	f023 0301 	bic.w	r3, r3, #1
 800b3f8:	6213      	str	r3, [r2, #32]
 800b3fa:	4b58      	ldr	r3, [pc, #352]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b3fc:	6a1b      	ldr	r3, [r3, #32]
 800b3fe:	4a57      	ldr	r2, [pc, #348]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b400:	f023 0304 	bic.w	r3, r3, #4
 800b404:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d015      	beq.n	800b43a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b40e:	f7fd ff41 	bl	8009294 <HAL_GetTick>
 800b412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b414:	e00a      	b.n	800b42c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b416:	f7fd ff3d 	bl	8009294 <HAL_GetTick>
 800b41a:	4602      	mov	r2, r0
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	1ad3      	subs	r3, r2, r3
 800b420:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b424:	4293      	cmp	r3, r2
 800b426:	d901      	bls.n	800b42c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b428:	2303      	movs	r3, #3
 800b42a:	e0b1      	b.n	800b590 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b42c:	4b4b      	ldr	r3, [pc, #300]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b42e:	6a1b      	ldr	r3, [r3, #32]
 800b430:	f003 0302 	and.w	r3, r3, #2
 800b434:	2b00      	cmp	r3, #0
 800b436:	d0ee      	beq.n	800b416 <HAL_RCC_OscConfig+0x37e>
 800b438:	e014      	b.n	800b464 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b43a:	f7fd ff2b 	bl	8009294 <HAL_GetTick>
 800b43e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b440:	e00a      	b.n	800b458 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b442:	f7fd ff27 	bl	8009294 <HAL_GetTick>
 800b446:	4602      	mov	r2, r0
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b450:	4293      	cmp	r3, r2
 800b452:	d901      	bls.n	800b458 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b454:	2303      	movs	r3, #3
 800b456:	e09b      	b.n	800b590 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b458:	4b40      	ldr	r3, [pc, #256]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b45a:	6a1b      	ldr	r3, [r3, #32]
 800b45c:	f003 0302 	and.w	r3, r3, #2
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1ee      	bne.n	800b442 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b464:	7dfb      	ldrb	r3, [r7, #23]
 800b466:	2b01      	cmp	r3, #1
 800b468:	d105      	bne.n	800b476 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b46a:	4b3c      	ldr	r3, [pc, #240]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b46c:	69db      	ldr	r3, [r3, #28]
 800b46e:	4a3b      	ldr	r2, [pc, #236]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b470:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b474:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	69db      	ldr	r3, [r3, #28]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f000 8087 	beq.w	800b58e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b480:	4b36      	ldr	r3, [pc, #216]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	f003 030c 	and.w	r3, r3, #12
 800b488:	2b08      	cmp	r3, #8
 800b48a:	d061      	beq.n	800b550 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	69db      	ldr	r3, [r3, #28]
 800b490:	2b02      	cmp	r3, #2
 800b492:	d146      	bne.n	800b522 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b494:	4b33      	ldr	r3, [pc, #204]	@ (800b564 <HAL_RCC_OscConfig+0x4cc>)
 800b496:	2200      	movs	r2, #0
 800b498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b49a:	f7fd fefb 	bl	8009294 <HAL_GetTick>
 800b49e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b4a0:	e008      	b.n	800b4b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4a2:	f7fd fef7 	bl	8009294 <HAL_GetTick>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d901      	bls.n	800b4b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	e06d      	b.n	800b590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b4b4:	4b29      	ldr	r3, [pc, #164]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d1f0      	bne.n	800b4a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6a1b      	ldr	r3, [r3, #32]
 800b4c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4c8:	d108      	bne.n	800b4dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b4ca:	4b24      	ldr	r3, [pc, #144]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	4921      	ldr	r1, [pc, #132]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b4dc:	4b1f      	ldr	r3, [pc, #124]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6a19      	ldr	r1, [r3, #32]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4ec:	430b      	orrs	r3, r1
 800b4ee:	491b      	ldr	r1, [pc, #108]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b4f4:	4b1b      	ldr	r3, [pc, #108]	@ (800b564 <HAL_RCC_OscConfig+0x4cc>)
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4fa:	f7fd fecb 	bl	8009294 <HAL_GetTick>
 800b4fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b500:	e008      	b.n	800b514 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b502:	f7fd fec7 	bl	8009294 <HAL_GetTick>
 800b506:	4602      	mov	r2, r0
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	1ad3      	subs	r3, r2, r3
 800b50c:	2b02      	cmp	r3, #2
 800b50e:	d901      	bls.n	800b514 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b510:	2303      	movs	r3, #3
 800b512:	e03d      	b.n	800b590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b514:	4b11      	ldr	r3, [pc, #68]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d0f0      	beq.n	800b502 <HAL_RCC_OscConfig+0x46a>
 800b520:	e035      	b.n	800b58e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b522:	4b10      	ldr	r3, [pc, #64]	@ (800b564 <HAL_RCC_OscConfig+0x4cc>)
 800b524:	2200      	movs	r2, #0
 800b526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b528:	f7fd feb4 	bl	8009294 <HAL_GetTick>
 800b52c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b52e:	e008      	b.n	800b542 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b530:	f7fd feb0 	bl	8009294 <HAL_GetTick>
 800b534:	4602      	mov	r2, r0
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	1ad3      	subs	r3, r2, r3
 800b53a:	2b02      	cmp	r3, #2
 800b53c:	d901      	bls.n	800b542 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b53e:	2303      	movs	r3, #3
 800b540:	e026      	b.n	800b590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b542:	4b06      	ldr	r3, [pc, #24]	@ (800b55c <HAL_RCC_OscConfig+0x4c4>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d1f0      	bne.n	800b530 <HAL_RCC_OscConfig+0x498>
 800b54e:	e01e      	b.n	800b58e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	69db      	ldr	r3, [r3, #28]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d107      	bne.n	800b568 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	e019      	b.n	800b590 <HAL_RCC_OscConfig+0x4f8>
 800b55c:	40021000 	.word	0x40021000
 800b560:	40007000 	.word	0x40007000
 800b564:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b568:	4b0b      	ldr	r3, [pc, #44]	@ (800b598 <HAL_RCC_OscConfig+0x500>)
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6a1b      	ldr	r3, [r3, #32]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d106      	bne.n	800b58a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b586:	429a      	cmp	r2, r3
 800b588:	d001      	beq.n	800b58e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	e000      	b.n	800b590 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3718      	adds	r7, #24
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	40021000 	.word	0x40021000

0800b59c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d101      	bne.n	800b5b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e0d0      	b.n	800b752 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b5b0:	4b6a      	ldr	r3, [pc, #424]	@ (800b75c <HAL_RCC_ClockConfig+0x1c0>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f003 0307 	and.w	r3, r3, #7
 800b5b8:	683a      	ldr	r2, [r7, #0]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d910      	bls.n	800b5e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5be:	4b67      	ldr	r3, [pc, #412]	@ (800b75c <HAL_RCC_ClockConfig+0x1c0>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f023 0207 	bic.w	r2, r3, #7
 800b5c6:	4965      	ldr	r1, [pc, #404]	@ (800b75c <HAL_RCC_ClockConfig+0x1c0>)
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5ce:	4b63      	ldr	r3, [pc, #396]	@ (800b75c <HAL_RCC_ClockConfig+0x1c0>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f003 0307 	and.w	r3, r3, #7
 800b5d6:	683a      	ldr	r2, [r7, #0]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d001      	beq.n	800b5e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e0b8      	b.n	800b752 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f003 0302 	and.w	r3, r3, #2
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d020      	beq.n	800b62e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f003 0304 	and.w	r3, r3, #4
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d005      	beq.n	800b604 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b5f8:	4b59      	ldr	r3, [pc, #356]	@ (800b760 <HAL_RCC_ClockConfig+0x1c4>)
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	4a58      	ldr	r2, [pc, #352]	@ (800b760 <HAL_RCC_ClockConfig+0x1c4>)
 800b5fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b602:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f003 0308 	and.w	r3, r3, #8
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d005      	beq.n	800b61c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b610:	4b53      	ldr	r3, [pc, #332]	@ (800b760 <HAL_RCC_ClockConfig+0x1c4>)
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	4a52      	ldr	r2, [pc, #328]	@ (800b760 <HAL_RCC_ClockConfig+0x1c4>)
 800b616:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800b61a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b61c:	4b50      	ldr	r3, [pc, #320]	@ (800b760 <HAL_RCC_ClockConfig+0x1c4>)
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	494d      	ldr	r1, [pc, #308]	@ (800b760 <HAL_RCC_ClockConfig+0x1c4>)
 800b62a:	4313      	orrs	r3, r2
 800b62c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f003 0301 	and.w	r3, r3, #1
 800b636:	2b00      	cmp	r3, #0
 800b638:	d040      	beq.n	800b6bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d107      	bne.n	800b652 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b642:	4b47      	ldr	r3, [pc, #284]	@ (800b760 <HAL_RCC_ClockConfig+0x1c4>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d115      	bne.n	800b67a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	e07f      	b.n	800b752 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	2b02      	cmp	r3, #2
 800b658:	d107      	bne.n	800b66a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b65a:	4b41      	ldr	r3, [pc, #260]	@ (800b760 <HAL_RCC_ClockConfig+0x1c4>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b662:	2b00      	cmp	r3, #0
 800b664:	d109      	bne.n	800b67a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	e073      	b.n	800b752 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b66a:	4b3d      	ldr	r3, [pc, #244]	@ (800b760 <HAL_RCC_ClockConfig+0x1c4>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f003 0302 	and.w	r3, r3, #2
 800b672:	2b00      	cmp	r3, #0
 800b674:	d101      	bne.n	800b67a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	e06b      	b.n	800b752 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b67a:	4b39      	ldr	r3, [pc, #228]	@ (800b760 <HAL_RCC_ClockConfig+0x1c4>)
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	f023 0203 	bic.w	r2, r3, #3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	4936      	ldr	r1, [pc, #216]	@ (800b760 <HAL_RCC_ClockConfig+0x1c4>)
 800b688:	4313      	orrs	r3, r2
 800b68a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b68c:	f7fd fe02 	bl	8009294 <HAL_GetTick>
 800b690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b692:	e00a      	b.n	800b6aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b694:	f7fd fdfe 	bl	8009294 <HAL_GetTick>
 800b698:	4602      	mov	r2, r0
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	1ad3      	subs	r3, r2, r3
 800b69e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d901      	bls.n	800b6aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	e053      	b.n	800b752 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6aa:	4b2d      	ldr	r3, [pc, #180]	@ (800b760 <HAL_RCC_ClockConfig+0x1c4>)
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	f003 020c 	and.w	r2, r3, #12
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d1eb      	bne.n	800b694 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b6bc:	4b27      	ldr	r3, [pc, #156]	@ (800b75c <HAL_RCC_ClockConfig+0x1c0>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f003 0307 	and.w	r3, r3, #7
 800b6c4:	683a      	ldr	r2, [r7, #0]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d210      	bcs.n	800b6ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b6ca:	4b24      	ldr	r3, [pc, #144]	@ (800b75c <HAL_RCC_ClockConfig+0x1c0>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f023 0207 	bic.w	r2, r3, #7
 800b6d2:	4922      	ldr	r1, [pc, #136]	@ (800b75c <HAL_RCC_ClockConfig+0x1c0>)
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6da:	4b20      	ldr	r3, [pc, #128]	@ (800b75c <HAL_RCC_ClockConfig+0x1c0>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f003 0307 	and.w	r3, r3, #7
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d001      	beq.n	800b6ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	e032      	b.n	800b752 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f003 0304 	and.w	r3, r3, #4
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d008      	beq.n	800b70a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b6f8:	4b19      	ldr	r3, [pc, #100]	@ (800b760 <HAL_RCC_ClockConfig+0x1c4>)
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	4916      	ldr	r1, [pc, #88]	@ (800b760 <HAL_RCC_ClockConfig+0x1c4>)
 800b706:	4313      	orrs	r3, r2
 800b708:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f003 0308 	and.w	r3, r3, #8
 800b712:	2b00      	cmp	r3, #0
 800b714:	d009      	beq.n	800b72a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b716:	4b12      	ldr	r3, [pc, #72]	@ (800b760 <HAL_RCC_ClockConfig+0x1c4>)
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	691b      	ldr	r3, [r3, #16]
 800b722:	00db      	lsls	r3, r3, #3
 800b724:	490e      	ldr	r1, [pc, #56]	@ (800b760 <HAL_RCC_ClockConfig+0x1c4>)
 800b726:	4313      	orrs	r3, r2
 800b728:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b72a:	f000 f821 	bl	800b770 <HAL_RCC_GetSysClockFreq>
 800b72e:	4602      	mov	r2, r0
 800b730:	4b0b      	ldr	r3, [pc, #44]	@ (800b760 <HAL_RCC_ClockConfig+0x1c4>)
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	091b      	lsrs	r3, r3, #4
 800b736:	f003 030f 	and.w	r3, r3, #15
 800b73a:	490a      	ldr	r1, [pc, #40]	@ (800b764 <HAL_RCC_ClockConfig+0x1c8>)
 800b73c:	5ccb      	ldrb	r3, [r1, r3]
 800b73e:	fa22 f303 	lsr.w	r3, r2, r3
 800b742:	4a09      	ldr	r2, [pc, #36]	@ (800b768 <HAL_RCC_ClockConfig+0x1cc>)
 800b744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b746:	4b09      	ldr	r3, [pc, #36]	@ (800b76c <HAL_RCC_ClockConfig+0x1d0>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fd fd60 	bl	8009210 <HAL_InitTick>

  return HAL_OK;
 800b750:	2300      	movs	r3, #0
}
 800b752:	4618      	mov	r0, r3
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	40022000 	.word	0x40022000
 800b760:	40021000 	.word	0x40021000
 800b764:	0800c47c 	.word	0x0800c47c
 800b768:	20000cd8 	.word	0x20000cd8
 800b76c:	20000cdc 	.word	0x20000cdc

0800b770 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b770:	b480      	push	{r7}
 800b772:	b087      	sub	sp, #28
 800b774:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b776:	2300      	movs	r3, #0
 800b778:	60fb      	str	r3, [r7, #12]
 800b77a:	2300      	movs	r3, #0
 800b77c:	60bb      	str	r3, [r7, #8]
 800b77e:	2300      	movs	r3, #0
 800b780:	617b      	str	r3, [r7, #20]
 800b782:	2300      	movs	r3, #0
 800b784:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b786:	2300      	movs	r3, #0
 800b788:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b78a:	4b1e      	ldr	r3, [pc, #120]	@ (800b804 <HAL_RCC_GetSysClockFreq+0x94>)
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f003 030c 	and.w	r3, r3, #12
 800b796:	2b04      	cmp	r3, #4
 800b798:	d002      	beq.n	800b7a0 <HAL_RCC_GetSysClockFreq+0x30>
 800b79a:	2b08      	cmp	r3, #8
 800b79c:	d003      	beq.n	800b7a6 <HAL_RCC_GetSysClockFreq+0x36>
 800b79e:	e027      	b.n	800b7f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b7a0:	4b19      	ldr	r3, [pc, #100]	@ (800b808 <HAL_RCC_GetSysClockFreq+0x98>)
 800b7a2:	613b      	str	r3, [r7, #16]
      break;
 800b7a4:	e027      	b.n	800b7f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	0c9b      	lsrs	r3, r3, #18
 800b7aa:	f003 030f 	and.w	r3, r3, #15
 800b7ae:	4a17      	ldr	r2, [pc, #92]	@ (800b80c <HAL_RCC_GetSysClockFreq+0x9c>)
 800b7b0:	5cd3      	ldrb	r3, [r2, r3]
 800b7b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d010      	beq.n	800b7e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b7be:	4b11      	ldr	r3, [pc, #68]	@ (800b804 <HAL_RCC_GetSysClockFreq+0x94>)
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	0c5b      	lsrs	r3, r3, #17
 800b7c4:	f003 0301 	and.w	r3, r3, #1
 800b7c8:	4a11      	ldr	r2, [pc, #68]	@ (800b810 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b7ca:	5cd3      	ldrb	r3, [r2, r3]
 800b7cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a0d      	ldr	r2, [pc, #52]	@ (800b808 <HAL_RCC_GetSysClockFreq+0x98>)
 800b7d2:	fb03 f202 	mul.w	r2, r3, r2
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7dc:	617b      	str	r3, [r7, #20]
 800b7de:	e004      	b.n	800b7ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a0c      	ldr	r2, [pc, #48]	@ (800b814 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b7e4:	fb02 f303 	mul.w	r3, r2, r3
 800b7e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	613b      	str	r3, [r7, #16]
      break;
 800b7ee:	e002      	b.n	800b7f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b7f0:	4b05      	ldr	r3, [pc, #20]	@ (800b808 <HAL_RCC_GetSysClockFreq+0x98>)
 800b7f2:	613b      	str	r3, [r7, #16]
      break;
 800b7f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b7f6:	693b      	ldr	r3, [r7, #16]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	371c      	adds	r7, #28
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bc80      	pop	{r7}
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop
 800b804:	40021000 	.word	0x40021000
 800b808:	007a1200 	.word	0x007a1200
 800b80c:	0800c494 	.word	0x0800c494
 800b810:	0800c4a4 	.word	0x0800c4a4
 800b814:	003d0900 	.word	0x003d0900

0800b818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b818:	b480      	push	{r7}
 800b81a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b81c:	4b02      	ldr	r3, [pc, #8]	@ (800b828 <HAL_RCC_GetHCLKFreq+0x10>)
 800b81e:	681b      	ldr	r3, [r3, #0]
}
 800b820:	4618      	mov	r0, r3
 800b822:	46bd      	mov	sp, r7
 800b824:	bc80      	pop	{r7}
 800b826:	4770      	bx	lr
 800b828:	20000cd8 	.word	0x20000cd8

0800b82c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b830:	f7ff fff2 	bl	800b818 <HAL_RCC_GetHCLKFreq>
 800b834:	4602      	mov	r2, r0
 800b836:	4b05      	ldr	r3, [pc, #20]	@ (800b84c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	0a1b      	lsrs	r3, r3, #8
 800b83c:	f003 0307 	and.w	r3, r3, #7
 800b840:	4903      	ldr	r1, [pc, #12]	@ (800b850 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b842:	5ccb      	ldrb	r3, [r1, r3]
 800b844:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b848:	4618      	mov	r0, r3
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	40021000 	.word	0x40021000
 800b850:	0800c48c 	.word	0x0800c48c

0800b854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b858:	f7ff ffde 	bl	800b818 <HAL_RCC_GetHCLKFreq>
 800b85c:	4602      	mov	r2, r0
 800b85e:	4b05      	ldr	r3, [pc, #20]	@ (800b874 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	0adb      	lsrs	r3, r3, #11
 800b864:	f003 0307 	and.w	r3, r3, #7
 800b868:	4903      	ldr	r1, [pc, #12]	@ (800b878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b86a:	5ccb      	ldrb	r3, [r1, r3]
 800b86c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b870:	4618      	mov	r0, r3
 800b872:	bd80      	pop	{r7, pc}
 800b874:	40021000 	.word	0x40021000
 800b878:	0800c48c 	.word	0x0800c48c

0800b87c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b884:	4b0a      	ldr	r3, [pc, #40]	@ (800b8b0 <RCC_Delay+0x34>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4a0a      	ldr	r2, [pc, #40]	@ (800b8b4 <RCC_Delay+0x38>)
 800b88a:	fba2 2303 	umull	r2, r3, r2, r3
 800b88e:	0a5b      	lsrs	r3, r3, #9
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	fb02 f303 	mul.w	r3, r2, r3
 800b896:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b898:	bf00      	nop
  }
  while (Delay --);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	1e5a      	subs	r2, r3, #1
 800b89e:	60fa      	str	r2, [r7, #12]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d1f9      	bne.n	800b898 <RCC_Delay+0x1c>
}
 800b8a4:	bf00      	nop
 800b8a6:	bf00      	nop
 800b8a8:	3714      	adds	r7, #20
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bc80      	pop	{r7}
 800b8ae:	4770      	bx	lr
 800b8b0:	20000cd8 	.word	0x20000cd8
 800b8b4:	10624dd3 	.word	0x10624dd3

0800b8b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d101      	bne.n	800b8ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e041      	b.n	800b94e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d106      	bne.n	800b8e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f7fd fbac 	bl	800903c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2202      	movs	r2, #2
 800b8e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	4610      	mov	r0, r2
 800b8f8:	f000 fa82 	bl	800be00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2201      	movs	r2, #1
 800b900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2201      	movs	r2, #1
 800b908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2201      	movs	r2, #1
 800b918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2201      	movs	r2, #1
 800b920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2201      	movs	r2, #1
 800b928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2201      	movs	r2, #1
 800b938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2201      	movs	r2, #1
 800b940:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b94c:	2300      	movs	r3, #0
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
	...

0800b958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b966:	b2db      	uxtb	r3, r3
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d001      	beq.n	800b970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b96c:	2301      	movs	r3, #1
 800b96e:	e044      	b.n	800b9fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2202      	movs	r2, #2
 800b974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68da      	ldr	r2, [r3, #12]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f042 0201 	orr.w	r2, r2, #1
 800b986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a1d      	ldr	r2, [pc, #116]	@ (800ba04 <HAL_TIM_Base_Start_IT+0xac>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d018      	beq.n	800b9c4 <HAL_TIM_Base_Start_IT+0x6c>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a1c      	ldr	r2, [pc, #112]	@ (800ba08 <HAL_TIM_Base_Start_IT+0xb0>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d013      	beq.n	800b9c4 <HAL_TIM_Base_Start_IT+0x6c>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9a4:	d00e      	beq.n	800b9c4 <HAL_TIM_Base_Start_IT+0x6c>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a18      	ldr	r2, [pc, #96]	@ (800ba0c <HAL_TIM_Base_Start_IT+0xb4>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d009      	beq.n	800b9c4 <HAL_TIM_Base_Start_IT+0x6c>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a16      	ldr	r2, [pc, #88]	@ (800ba10 <HAL_TIM_Base_Start_IT+0xb8>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d004      	beq.n	800b9c4 <HAL_TIM_Base_Start_IT+0x6c>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4a15      	ldr	r2, [pc, #84]	@ (800ba14 <HAL_TIM_Base_Start_IT+0xbc>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d111      	bne.n	800b9e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	f003 0307 	and.w	r3, r3, #7
 800b9ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2b06      	cmp	r3, #6
 800b9d4:	d010      	beq.n	800b9f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f042 0201 	orr.w	r2, r2, #1
 800b9e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9e6:	e007      	b.n	800b9f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f042 0201 	orr.w	r2, r2, #1
 800b9f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3714      	adds	r7, #20
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bc80      	pop	{r7}
 800ba02:	4770      	bx	lr
 800ba04:	40012c00 	.word	0x40012c00
 800ba08:	40013400 	.word	0x40013400
 800ba0c:	40000400 	.word	0x40000400
 800ba10:	40000800 	.word	0x40000800
 800ba14:	40000c00 	.word	0x40000c00

0800ba18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	f003 0302 	and.w	r3, r3, #2
 800ba2a:	2b02      	cmp	r3, #2
 800ba2c:	d122      	bne.n	800ba74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	f003 0302 	and.w	r3, r3, #2
 800ba38:	2b02      	cmp	r3, #2
 800ba3a:	d11b      	bne.n	800ba74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f06f 0202 	mvn.w	r2, #2
 800ba44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	699b      	ldr	r3, [r3, #24]
 800ba52:	f003 0303 	and.w	r3, r3, #3
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d003      	beq.n	800ba62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f9b4 	bl	800bdc8 <HAL_TIM_IC_CaptureCallback>
 800ba60:	e005      	b.n	800ba6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 f9a7 	bl	800bdb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 f9b6 	bl	800bdda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	f003 0304 	and.w	r3, r3, #4
 800ba7e:	2b04      	cmp	r3, #4
 800ba80:	d122      	bne.n	800bac8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	f003 0304 	and.w	r3, r3, #4
 800ba8c:	2b04      	cmp	r3, #4
 800ba8e:	d11b      	bne.n	800bac8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f06f 0204 	mvn.w	r2, #4
 800ba98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2202      	movs	r2, #2
 800ba9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	699b      	ldr	r3, [r3, #24]
 800baa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d003      	beq.n	800bab6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 f98a 	bl	800bdc8 <HAL_TIM_IC_CaptureCallback>
 800bab4:	e005      	b.n	800bac2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 f97d 	bl	800bdb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 f98c 	bl	800bdda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	f003 0308 	and.w	r3, r3, #8
 800bad2:	2b08      	cmp	r3, #8
 800bad4:	d122      	bne.n	800bb1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	f003 0308 	and.w	r3, r3, #8
 800bae0:	2b08      	cmp	r3, #8
 800bae2:	d11b      	bne.n	800bb1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f06f 0208 	mvn.w	r2, #8
 800baec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2204      	movs	r2, #4
 800baf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	69db      	ldr	r3, [r3, #28]
 800bafa:	f003 0303 	and.w	r3, r3, #3
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d003      	beq.n	800bb0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f960 	bl	800bdc8 <HAL_TIM_IC_CaptureCallback>
 800bb08:	e005      	b.n	800bb16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f953 	bl	800bdb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 f962 	bl	800bdda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	f003 0310 	and.w	r3, r3, #16
 800bb26:	2b10      	cmp	r3, #16
 800bb28:	d122      	bne.n	800bb70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	f003 0310 	and.w	r3, r3, #16
 800bb34:	2b10      	cmp	r3, #16
 800bb36:	d11b      	bne.n	800bb70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f06f 0210 	mvn.w	r2, #16
 800bb40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2208      	movs	r2, #8
 800bb46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	69db      	ldr	r3, [r3, #28]
 800bb4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d003      	beq.n	800bb5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 f936 	bl	800bdc8 <HAL_TIM_IC_CaptureCallback>
 800bb5c:	e005      	b.n	800bb6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f929 	bl	800bdb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 f938 	bl	800bdda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	f003 0301 	and.w	r3, r3, #1
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d10e      	bne.n	800bb9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	f003 0301 	and.w	r3, r3, #1
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d107      	bne.n	800bb9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f06f 0201 	mvn.w	r2, #1
 800bb94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f7fc feea 	bl	8008970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bba6:	2b80      	cmp	r3, #128	@ 0x80
 800bba8:	d10e      	bne.n	800bbc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbb4:	2b80      	cmp	r3, #128	@ 0x80
 800bbb6:	d107      	bne.n	800bbc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bbc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 faa1 	bl	800c10a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbd2:	2b40      	cmp	r3, #64	@ 0x40
 800bbd4:	d10e      	bne.n	800bbf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbe0:	2b40      	cmp	r3, #64	@ 0x40
 800bbe2:	d107      	bne.n	800bbf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bbec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 f8fc 	bl	800bdec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	f003 0320 	and.w	r3, r3, #32
 800bbfe:	2b20      	cmp	r3, #32
 800bc00:	d10e      	bne.n	800bc20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	f003 0320 	and.w	r3, r3, #32
 800bc0c:	2b20      	cmp	r3, #32
 800bc0e:	d107      	bne.n	800bc20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f06f 0220 	mvn.w	r2, #32
 800bc18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 fa6c 	bl	800c0f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc20:	bf00      	nop
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc32:	2300      	movs	r3, #0
 800bc34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d101      	bne.n	800bc44 <HAL_TIM_ConfigClockSource+0x1c>
 800bc40:	2302      	movs	r3, #2
 800bc42:	e0b4      	b.n	800bdae <HAL_TIM_ConfigClockSource+0x186>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2202      	movs	r2, #2
 800bc50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bc62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	68ba      	ldr	r2, [r7, #8]
 800bc72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc7c:	d03e      	beq.n	800bcfc <HAL_TIM_ConfigClockSource+0xd4>
 800bc7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc82:	f200 8087 	bhi.w	800bd94 <HAL_TIM_ConfigClockSource+0x16c>
 800bc86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc8a:	f000 8086 	beq.w	800bd9a <HAL_TIM_ConfigClockSource+0x172>
 800bc8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc92:	d87f      	bhi.n	800bd94 <HAL_TIM_ConfigClockSource+0x16c>
 800bc94:	2b70      	cmp	r3, #112	@ 0x70
 800bc96:	d01a      	beq.n	800bcce <HAL_TIM_ConfigClockSource+0xa6>
 800bc98:	2b70      	cmp	r3, #112	@ 0x70
 800bc9a:	d87b      	bhi.n	800bd94 <HAL_TIM_ConfigClockSource+0x16c>
 800bc9c:	2b60      	cmp	r3, #96	@ 0x60
 800bc9e:	d050      	beq.n	800bd42 <HAL_TIM_ConfigClockSource+0x11a>
 800bca0:	2b60      	cmp	r3, #96	@ 0x60
 800bca2:	d877      	bhi.n	800bd94 <HAL_TIM_ConfigClockSource+0x16c>
 800bca4:	2b50      	cmp	r3, #80	@ 0x50
 800bca6:	d03c      	beq.n	800bd22 <HAL_TIM_ConfigClockSource+0xfa>
 800bca8:	2b50      	cmp	r3, #80	@ 0x50
 800bcaa:	d873      	bhi.n	800bd94 <HAL_TIM_ConfigClockSource+0x16c>
 800bcac:	2b40      	cmp	r3, #64	@ 0x40
 800bcae:	d058      	beq.n	800bd62 <HAL_TIM_ConfigClockSource+0x13a>
 800bcb0:	2b40      	cmp	r3, #64	@ 0x40
 800bcb2:	d86f      	bhi.n	800bd94 <HAL_TIM_ConfigClockSource+0x16c>
 800bcb4:	2b30      	cmp	r3, #48	@ 0x30
 800bcb6:	d064      	beq.n	800bd82 <HAL_TIM_ConfigClockSource+0x15a>
 800bcb8:	2b30      	cmp	r3, #48	@ 0x30
 800bcba:	d86b      	bhi.n	800bd94 <HAL_TIM_ConfigClockSource+0x16c>
 800bcbc:	2b20      	cmp	r3, #32
 800bcbe:	d060      	beq.n	800bd82 <HAL_TIM_ConfigClockSource+0x15a>
 800bcc0:	2b20      	cmp	r3, #32
 800bcc2:	d867      	bhi.n	800bd94 <HAL_TIM_ConfigClockSource+0x16c>
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d05c      	beq.n	800bd82 <HAL_TIM_ConfigClockSource+0x15a>
 800bcc8:	2b10      	cmp	r3, #16
 800bcca:	d05a      	beq.n	800bd82 <HAL_TIM_ConfigClockSource+0x15a>
 800bccc:	e062      	b.n	800bd94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bcde:	f000 f980 	bl	800bfe2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bcf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	68ba      	ldr	r2, [r7, #8]
 800bcf8:	609a      	str	r2, [r3, #8]
      break;
 800bcfa:	e04f      	b.n	800bd9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd0c:	f000 f969 	bl	800bfe2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	689a      	ldr	r2, [r3, #8]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bd1e:	609a      	str	r2, [r3, #8]
      break;
 800bd20:	e03c      	b.n	800bd9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd2e:	461a      	mov	r2, r3
 800bd30:	f000 f8e0 	bl	800bef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2150      	movs	r1, #80	@ 0x50
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f000 f937 	bl	800bfae <TIM_ITRx_SetConfig>
      break;
 800bd40:	e02c      	b.n	800bd9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd4e:	461a      	mov	r2, r3
 800bd50:	f000 f8fe 	bl	800bf50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2160      	movs	r1, #96	@ 0x60
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f000 f927 	bl	800bfae <TIM_ITRx_SetConfig>
      break;
 800bd60:	e01c      	b.n	800bd9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd6e:	461a      	mov	r2, r3
 800bd70:	f000 f8c0 	bl	800bef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2140      	movs	r1, #64	@ 0x40
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f000 f917 	bl	800bfae <TIM_ITRx_SetConfig>
      break;
 800bd80:	e00c      	b.n	800bd9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	4610      	mov	r0, r2
 800bd8e:	f000 f90e 	bl	800bfae <TIM_ITRx_SetConfig>
      break;
 800bd92:	e003      	b.n	800bd9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	73fb      	strb	r3, [r7, #15]
      break;
 800bd98:	e000      	b.n	800bd9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bd9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2200      	movs	r2, #0
 800bda8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3710      	adds	r7, #16
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bdb6:	b480      	push	{r7}
 800bdb8:	b083      	sub	sp, #12
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bdbe:	bf00      	nop
 800bdc0:	370c      	adds	r7, #12
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bc80      	pop	{r7}
 800bdc6:	4770      	bx	lr

0800bdc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bc80      	pop	{r7}
 800bdd8:	4770      	bx	lr

0800bdda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bdda:	b480      	push	{r7}
 800bddc:	b083      	sub	sp, #12
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bde2:	bf00      	nop
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bc80      	pop	{r7}
 800bdea:	4770      	bx	lr

0800bdec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bdf4:	bf00      	nop
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bc80      	pop	{r7}
 800bdfc:	4770      	bx	lr
	...

0800be00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800be00:	b480      	push	{r7}
 800be02:	b085      	sub	sp, #20
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	4a33      	ldr	r2, [pc, #204]	@ (800bee0 <TIM_Base_SetConfig+0xe0>)
 800be14:	4293      	cmp	r3, r2
 800be16:	d013      	beq.n	800be40 <TIM_Base_SetConfig+0x40>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	4a32      	ldr	r2, [pc, #200]	@ (800bee4 <TIM_Base_SetConfig+0xe4>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d00f      	beq.n	800be40 <TIM_Base_SetConfig+0x40>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be26:	d00b      	beq.n	800be40 <TIM_Base_SetConfig+0x40>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	4a2f      	ldr	r2, [pc, #188]	@ (800bee8 <TIM_Base_SetConfig+0xe8>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d007      	beq.n	800be40 <TIM_Base_SetConfig+0x40>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4a2e      	ldr	r2, [pc, #184]	@ (800beec <TIM_Base_SetConfig+0xec>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d003      	beq.n	800be40 <TIM_Base_SetConfig+0x40>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4a2d      	ldr	r2, [pc, #180]	@ (800bef0 <TIM_Base_SetConfig+0xf0>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d108      	bne.n	800be52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	68fa      	ldr	r2, [r7, #12]
 800be4e:	4313      	orrs	r3, r2
 800be50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	4a22      	ldr	r2, [pc, #136]	@ (800bee0 <TIM_Base_SetConfig+0xe0>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d013      	beq.n	800be82 <TIM_Base_SetConfig+0x82>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4a21      	ldr	r2, [pc, #132]	@ (800bee4 <TIM_Base_SetConfig+0xe4>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d00f      	beq.n	800be82 <TIM_Base_SetConfig+0x82>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be68:	d00b      	beq.n	800be82 <TIM_Base_SetConfig+0x82>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4a1e      	ldr	r2, [pc, #120]	@ (800bee8 <TIM_Base_SetConfig+0xe8>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d007      	beq.n	800be82 <TIM_Base_SetConfig+0x82>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	4a1d      	ldr	r2, [pc, #116]	@ (800beec <TIM_Base_SetConfig+0xec>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d003      	beq.n	800be82 <TIM_Base_SetConfig+0x82>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4a1c      	ldr	r2, [pc, #112]	@ (800bef0 <TIM_Base_SetConfig+0xf0>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d108      	bne.n	800be94 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	4313      	orrs	r3, r2
 800be92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	695b      	ldr	r3, [r3, #20]
 800be9e:	4313      	orrs	r3, r2
 800bea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	689a      	ldr	r2, [r3, #8]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a09      	ldr	r2, [pc, #36]	@ (800bee0 <TIM_Base_SetConfig+0xe0>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d003      	beq.n	800bec8 <TIM_Base_SetConfig+0xc8>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4a08      	ldr	r2, [pc, #32]	@ (800bee4 <TIM_Base_SetConfig+0xe4>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d103      	bne.n	800bed0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	691a      	ldr	r2, [r3, #16]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2201      	movs	r2, #1
 800bed4:	615a      	str	r2, [r3, #20]
}
 800bed6:	bf00      	nop
 800bed8:	3714      	adds	r7, #20
 800beda:	46bd      	mov	sp, r7
 800bedc:	bc80      	pop	{r7}
 800bede:	4770      	bx	lr
 800bee0:	40012c00 	.word	0x40012c00
 800bee4:	40013400 	.word	0x40013400
 800bee8:	40000400 	.word	0x40000400
 800beec:	40000800 	.word	0x40000800
 800bef0:	40000c00 	.word	0x40000c00

0800bef4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b087      	sub	sp, #28
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	6a1b      	ldr	r3, [r3, #32]
 800bf04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6a1b      	ldr	r3, [r3, #32]
 800bf0a:	f023 0201 	bic.w	r2, r3, #1
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	699b      	ldr	r3, [r3, #24]
 800bf16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bf1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	011b      	lsls	r3, r3, #4
 800bf24:	693a      	ldr	r2, [r7, #16]
 800bf26:	4313      	orrs	r3, r2
 800bf28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	f023 030a 	bic.w	r3, r3, #10
 800bf30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf32:	697a      	ldr	r2, [r7, #20]
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	4313      	orrs	r3, r2
 800bf38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	693a      	ldr	r2, [r7, #16]
 800bf3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	697a      	ldr	r2, [r7, #20]
 800bf44:	621a      	str	r2, [r3, #32]
}
 800bf46:	bf00      	nop
 800bf48:	371c      	adds	r7, #28
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bc80      	pop	{r7}
 800bf4e:	4770      	bx	lr

0800bf50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b087      	sub	sp, #28
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	6a1b      	ldr	r3, [r3, #32]
 800bf60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	6a1b      	ldr	r3, [r3, #32]
 800bf66:	f023 0210 	bic.w	r2, r3, #16
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	699b      	ldr	r3, [r3, #24]
 800bf72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bf7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	031b      	lsls	r3, r3, #12
 800bf80:	693a      	ldr	r2, [r7, #16]
 800bf82:	4313      	orrs	r3, r2
 800bf84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bf8c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	011b      	lsls	r3, r3, #4
 800bf92:	697a      	ldr	r2, [r7, #20]
 800bf94:	4313      	orrs	r3, r2
 800bf96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	693a      	ldr	r2, [r7, #16]
 800bf9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	697a      	ldr	r2, [r7, #20]
 800bfa2:	621a      	str	r2, [r3, #32]
}
 800bfa4:	bf00      	nop
 800bfa6:	371c      	adds	r7, #28
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bc80      	pop	{r7}
 800bfac:	4770      	bx	lr

0800bfae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bfae:	b480      	push	{r7}
 800bfb0:	b085      	sub	sp, #20
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
 800bfb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bfc6:	683a      	ldr	r2, [r7, #0]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	f043 0307 	orr.w	r3, r3, #7
 800bfd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	609a      	str	r2, [r3, #8]
}
 800bfd8:	bf00      	nop
 800bfda:	3714      	adds	r7, #20
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bc80      	pop	{r7}
 800bfe0:	4770      	bx	lr

0800bfe2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bfe2:	b480      	push	{r7}
 800bfe4:	b087      	sub	sp, #28
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	60f8      	str	r0, [r7, #12]
 800bfea:	60b9      	str	r1, [r7, #8]
 800bfec:	607a      	str	r2, [r7, #4]
 800bfee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bffc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	021a      	lsls	r2, r3, #8
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	431a      	orrs	r2, r3
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	4313      	orrs	r3, r2
 800c00a:	697a      	ldr	r2, [r7, #20]
 800c00c:	4313      	orrs	r3, r2
 800c00e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	697a      	ldr	r2, [r7, #20]
 800c014:	609a      	str	r2, [r3, #8]
}
 800c016:	bf00      	nop
 800c018:	371c      	adds	r7, #28
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bc80      	pop	{r7}
 800c01e:	4770      	bx	lr

0800c020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c030:	2b01      	cmp	r3, #1
 800c032:	d101      	bne.n	800c038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c034:	2302      	movs	r3, #2
 800c036:	e050      	b.n	800c0da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2202      	movs	r2, #2
 800c044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	689b      	ldr	r3, [r3, #8]
 800c056:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c05e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68fa      	ldr	r2, [r7, #12]
 800c066:	4313      	orrs	r3, r2
 800c068:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	68fa      	ldr	r2, [r7, #12]
 800c070:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4a1b      	ldr	r2, [pc, #108]	@ (800c0e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d018      	beq.n	800c0ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a19      	ldr	r2, [pc, #100]	@ (800c0e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d013      	beq.n	800c0ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c08e:	d00e      	beq.n	800c0ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a15      	ldr	r2, [pc, #84]	@ (800c0ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d009      	beq.n	800c0ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4a14      	ldr	r2, [pc, #80]	@ (800c0f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d004      	beq.n	800c0ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4a12      	ldr	r2, [pc, #72]	@ (800c0f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d10c      	bne.n	800c0c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	68ba      	ldr	r2, [r7, #8]
 800c0c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c0d8:	2300      	movs	r3, #0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3714      	adds	r7, #20
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bc80      	pop	{r7}
 800c0e2:	4770      	bx	lr
 800c0e4:	40012c00 	.word	0x40012c00
 800c0e8:	40013400 	.word	0x40013400
 800c0ec:	40000400 	.word	0x40000400
 800c0f0:	40000800 	.word	0x40000800
 800c0f4:	40000c00 	.word	0x40000c00

0800c0f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b083      	sub	sp, #12
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c100:	bf00      	nop
 800c102:	370c      	adds	r7, #12
 800c104:	46bd      	mov	sp, r7
 800c106:	bc80      	pop	{r7}
 800c108:	4770      	bx	lr

0800c10a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c10a:	b480      	push	{r7}
 800c10c:	b083      	sub	sp, #12
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c112:	bf00      	nop
 800c114:	370c      	adds	r7, #12
 800c116:	46bd      	mov	sp, r7
 800c118:	bc80      	pop	{r7}
 800c11a:	4770      	bx	lr

0800c11c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d101      	bne.n	800c12e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c12a:	2301      	movs	r3, #1
 800c12c:	e042      	b.n	800c1b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c134:	b2db      	uxtb	r3, r3
 800c136:	2b00      	cmp	r3, #0
 800c138:	d106      	bne.n	800c148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2200      	movs	r2, #0
 800c13e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7fc ffa0 	bl	8009088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2224      	movs	r2, #36	@ 0x24
 800c14c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68da      	ldr	r2, [r3, #12]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c15e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 f82b 	bl	800c1bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	691a      	ldr	r2, [r3, #16]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c174:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	695a      	ldr	r2, [r3, #20]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c184:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	68da      	ldr	r2, [r3, #12]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c194:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2220      	movs	r2, #32
 800c1a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2220      	movs	r2, #32
 800c1a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3708      	adds	r7, #8
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	68da      	ldr	r2, [r3, #12]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	430a      	orrs	r2, r1
 800c1d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	689a      	ldr	r2, [r3, #8]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	691b      	ldr	r3, [r3, #16]
 800c1e2:	431a      	orrs	r2, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	695b      	ldr	r3, [r3, #20]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800c1f6:	f023 030c 	bic.w	r3, r3, #12
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	6812      	ldr	r2, [r2, #0]
 800c1fe:	68b9      	ldr	r1, [r7, #8]
 800c200:	430b      	orrs	r3, r1
 800c202:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	695b      	ldr	r3, [r3, #20]
 800c20a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	699a      	ldr	r2, [r3, #24]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	430a      	orrs	r2, r1
 800c218:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a2c      	ldr	r2, [pc, #176]	@ (800c2d0 <UART_SetConfig+0x114>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d103      	bne.n	800c22c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c224:	f7ff fb16 	bl	800b854 <HAL_RCC_GetPCLK2Freq>
 800c228:	60f8      	str	r0, [r7, #12]
 800c22a:	e002      	b.n	800c232 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c22c:	f7ff fafe 	bl	800b82c <HAL_RCC_GetPCLK1Freq>
 800c230:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	4613      	mov	r3, r2
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	4413      	add	r3, r2
 800c23a:	009a      	lsls	r2, r3, #2
 800c23c:	441a      	add	r2, r3
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	fbb2 f3f3 	udiv	r3, r2, r3
 800c248:	4a22      	ldr	r2, [pc, #136]	@ (800c2d4 <UART_SetConfig+0x118>)
 800c24a:	fba2 2303 	umull	r2, r3, r2, r3
 800c24e:	095b      	lsrs	r3, r3, #5
 800c250:	0119      	lsls	r1, r3, #4
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	4613      	mov	r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	4413      	add	r3, r2
 800c25a:	009a      	lsls	r2, r3, #2
 800c25c:	441a      	add	r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	fbb2 f2f3 	udiv	r2, r2, r3
 800c268:	4b1a      	ldr	r3, [pc, #104]	@ (800c2d4 <UART_SetConfig+0x118>)
 800c26a:	fba3 0302 	umull	r0, r3, r3, r2
 800c26e:	095b      	lsrs	r3, r3, #5
 800c270:	2064      	movs	r0, #100	@ 0x64
 800c272:	fb00 f303 	mul.w	r3, r0, r3
 800c276:	1ad3      	subs	r3, r2, r3
 800c278:	011b      	lsls	r3, r3, #4
 800c27a:	3332      	adds	r3, #50	@ 0x32
 800c27c:	4a15      	ldr	r2, [pc, #84]	@ (800c2d4 <UART_SetConfig+0x118>)
 800c27e:	fba2 2303 	umull	r2, r3, r2, r3
 800c282:	095b      	lsrs	r3, r3, #5
 800c284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c288:	4419      	add	r1, r3
 800c28a:	68fa      	ldr	r2, [r7, #12]
 800c28c:	4613      	mov	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	4413      	add	r3, r2
 800c292:	009a      	lsls	r2, r3, #2
 800c294:	441a      	add	r2, r3
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c2a0:	4b0c      	ldr	r3, [pc, #48]	@ (800c2d4 <UART_SetConfig+0x118>)
 800c2a2:	fba3 0302 	umull	r0, r3, r3, r2
 800c2a6:	095b      	lsrs	r3, r3, #5
 800c2a8:	2064      	movs	r0, #100	@ 0x64
 800c2aa:	fb00 f303 	mul.w	r3, r0, r3
 800c2ae:	1ad3      	subs	r3, r2, r3
 800c2b0:	011b      	lsls	r3, r3, #4
 800c2b2:	3332      	adds	r3, #50	@ 0x32
 800c2b4:	4a07      	ldr	r2, [pc, #28]	@ (800c2d4 <UART_SetConfig+0x118>)
 800c2b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c2ba:	095b      	lsrs	r3, r3, #5
 800c2bc:	f003 020f 	and.w	r2, r3, #15
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	440a      	add	r2, r1
 800c2c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c2c8:	bf00      	nop
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	40013800 	.word	0x40013800
 800c2d4:	51eb851f 	.word	0x51eb851f

0800c2d8 <__itoa>:
 800c2d8:	1e93      	subs	r3, r2, #2
 800c2da:	2b22      	cmp	r3, #34	@ 0x22
 800c2dc:	b510      	push	{r4, lr}
 800c2de:	460c      	mov	r4, r1
 800c2e0:	d904      	bls.n	800c2ec <__itoa+0x14>
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	461c      	mov	r4, r3
 800c2e6:	700b      	strb	r3, [r1, #0]
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	bd10      	pop	{r4, pc}
 800c2ec:	2a0a      	cmp	r2, #10
 800c2ee:	d109      	bne.n	800c304 <__itoa+0x2c>
 800c2f0:	2800      	cmp	r0, #0
 800c2f2:	da07      	bge.n	800c304 <__itoa+0x2c>
 800c2f4:	232d      	movs	r3, #45	@ 0x2d
 800c2f6:	700b      	strb	r3, [r1, #0]
 800c2f8:	2101      	movs	r1, #1
 800c2fa:	4240      	negs	r0, r0
 800c2fc:	4421      	add	r1, r4
 800c2fe:	f000 f805 	bl	800c30c <__utoa>
 800c302:	e7f1      	b.n	800c2e8 <__itoa+0x10>
 800c304:	2100      	movs	r1, #0
 800c306:	e7f9      	b.n	800c2fc <__itoa+0x24>

0800c308 <itoa>:
 800c308:	f7ff bfe6 	b.w	800c2d8 <__itoa>

0800c30c <__utoa>:
 800c30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c30e:	b08b      	sub	sp, #44	@ 0x2c
 800c310:	4605      	mov	r5, r0
 800c312:	460b      	mov	r3, r1
 800c314:	466e      	mov	r6, sp
 800c316:	4c1d      	ldr	r4, [pc, #116]	@ (800c38c <__utoa+0x80>)
 800c318:	f104 0c20 	add.w	ip, r4, #32
 800c31c:	4637      	mov	r7, r6
 800c31e:	6820      	ldr	r0, [r4, #0]
 800c320:	6861      	ldr	r1, [r4, #4]
 800c322:	3408      	adds	r4, #8
 800c324:	c703      	stmia	r7!, {r0, r1}
 800c326:	4564      	cmp	r4, ip
 800c328:	463e      	mov	r6, r7
 800c32a:	d1f7      	bne.n	800c31c <__utoa+0x10>
 800c32c:	7921      	ldrb	r1, [r4, #4]
 800c32e:	6820      	ldr	r0, [r4, #0]
 800c330:	7139      	strb	r1, [r7, #4]
 800c332:	1e91      	subs	r1, r2, #2
 800c334:	2922      	cmp	r1, #34	@ 0x22
 800c336:	6038      	str	r0, [r7, #0]
 800c338:	f04f 0100 	mov.w	r1, #0
 800c33c:	d904      	bls.n	800c348 <__utoa+0x3c>
 800c33e:	7019      	strb	r1, [r3, #0]
 800c340:	460b      	mov	r3, r1
 800c342:	4618      	mov	r0, r3
 800c344:	b00b      	add	sp, #44	@ 0x2c
 800c346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c348:	1e58      	subs	r0, r3, #1
 800c34a:	4684      	mov	ip, r0
 800c34c:	fbb5 f7f2 	udiv	r7, r5, r2
 800c350:	fb02 5617 	mls	r6, r2, r7, r5
 800c354:	3628      	adds	r6, #40	@ 0x28
 800c356:	446e      	add	r6, sp
 800c358:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c35c:	460c      	mov	r4, r1
 800c35e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c362:	462e      	mov	r6, r5
 800c364:	42b2      	cmp	r2, r6
 800c366:	463d      	mov	r5, r7
 800c368:	f101 0101 	add.w	r1, r1, #1
 800c36c:	d9ee      	bls.n	800c34c <__utoa+0x40>
 800c36e:	2200      	movs	r2, #0
 800c370:	545a      	strb	r2, [r3, r1]
 800c372:	1919      	adds	r1, r3, r4
 800c374:	1aa5      	subs	r5, r4, r2
 800c376:	42aa      	cmp	r2, r5
 800c378:	dae3      	bge.n	800c342 <__utoa+0x36>
 800c37a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c37e:	780e      	ldrb	r6, [r1, #0]
 800c380:	3201      	adds	r2, #1
 800c382:	7006      	strb	r6, [r0, #0]
 800c384:	f801 5901 	strb.w	r5, [r1], #-1
 800c388:	e7f4      	b.n	800c374 <__utoa+0x68>
 800c38a:	bf00      	nop
 800c38c:	0800c4a6 	.word	0x0800c4a6

0800c390 <memset>:
 800c390:	4603      	mov	r3, r0
 800c392:	4402      	add	r2, r0
 800c394:	4293      	cmp	r3, r2
 800c396:	d100      	bne.n	800c39a <memset+0xa>
 800c398:	4770      	bx	lr
 800c39a:	f803 1b01 	strb.w	r1, [r3], #1
 800c39e:	e7f9      	b.n	800c394 <memset+0x4>

0800c3a0 <__libc_init_array>:
 800c3a0:	b570      	push	{r4, r5, r6, lr}
 800c3a2:	2600      	movs	r6, #0
 800c3a4:	4d0c      	ldr	r5, [pc, #48]	@ (800c3d8 <__libc_init_array+0x38>)
 800c3a6:	4c0d      	ldr	r4, [pc, #52]	@ (800c3dc <__libc_init_array+0x3c>)
 800c3a8:	1b64      	subs	r4, r4, r5
 800c3aa:	10a4      	asrs	r4, r4, #2
 800c3ac:	42a6      	cmp	r6, r4
 800c3ae:	d109      	bne.n	800c3c4 <__libc_init_array+0x24>
 800c3b0:	f000 f81a 	bl	800c3e8 <_init>
 800c3b4:	2600      	movs	r6, #0
 800c3b6:	4d0a      	ldr	r5, [pc, #40]	@ (800c3e0 <__libc_init_array+0x40>)
 800c3b8:	4c0a      	ldr	r4, [pc, #40]	@ (800c3e4 <__libc_init_array+0x44>)
 800c3ba:	1b64      	subs	r4, r4, r5
 800c3bc:	10a4      	asrs	r4, r4, #2
 800c3be:	42a6      	cmp	r6, r4
 800c3c0:	d105      	bne.n	800c3ce <__libc_init_array+0x2e>
 800c3c2:	bd70      	pop	{r4, r5, r6, pc}
 800c3c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3c8:	4798      	blx	r3
 800c3ca:	3601      	adds	r6, #1
 800c3cc:	e7ee      	b.n	800c3ac <__libc_init_array+0xc>
 800c3ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3d2:	4798      	blx	r3
 800c3d4:	3601      	adds	r6, #1
 800c3d6:	e7f2      	b.n	800c3be <__libc_init_array+0x1e>
 800c3d8:	0800c4d4 	.word	0x0800c4d4
 800c3dc:	0800c4d4 	.word	0x0800c4d4
 800c3e0:	0800c4d4 	.word	0x0800c4d4
 800c3e4:	0800c4d8 	.word	0x0800c4d8

0800c3e8 <_init>:
 800c3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ea:	bf00      	nop
 800c3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ee:	bc08      	pop	{r3}
 800c3f0:	469e      	mov	lr, r3
 800c3f2:	4770      	bx	lr

0800c3f4 <_fini>:
 800c3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3f6:	bf00      	nop
 800c3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3fa:	bc08      	pop	{r3}
 800c3fc:	469e      	mov	lr, r3
 800c3fe:	4770      	bx	lr
