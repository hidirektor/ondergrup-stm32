
ESP_Version_3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a8c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c60  08009c70  08009c70  0000ac70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8d0  0800a8d0  0000c040  2**0
                  CONTENTS
  4 .ARM          00000000  0800a8d0  0800a8d0  0000c040  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a8d0  0800a8d0  0000c040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8d0  0800a8d0  0000b8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8d4  0800a8d4  0000b8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  0800a8d8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000040  0800a918  0000c040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  0800a918  0000c240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bc7  00000000  00000000  0000c069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a9  00000000  00000000  0001ec30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00020de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc4  00000000  00000000  00021df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019944  00000000  00000000  00022abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f35  00000000  00000000  0003c400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a9a6  00000000  00000000  00051335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ebcdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a0  00000000  00000000  000ebd20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000f02c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000040 	.word	0x20000040
 8000200:	00000000 	.word	0x00000000
 8000204:	08009c58 	.word	0x08009c58

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000044 	.word	0x20000044
 8000220:	08009c58 	.word	0x08009c58

08000224 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af02      	add	r7, sp, #8
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	f023 030f 	bic.w	r3, r3, #15
 8000234:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	011b      	lsls	r3, r3, #4
 800023a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800023c:	7b7b      	ldrb	r3, [r7, #13]
 800023e:	f043 030c 	orr.w	r3, r3, #12
 8000242:	b2db      	uxtb	r3, r3
 8000244:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000246:	7b7b      	ldrb	r3, [r7, #13]
 8000248:	f043 0308 	orr.w	r3, r3, #8
 800024c:	b2db      	uxtb	r3, r3
 800024e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000250:	7b3b      	ldrb	r3, [r7, #12]
 8000252:	f043 030c 	orr.w	r3, r3, #12
 8000256:	b2db      	uxtb	r3, r3
 8000258:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800025a:	7b3b      	ldrb	r3, [r7, #12]
 800025c:	f043 0308 	orr.w	r3, r3, #8
 8000260:	b2db      	uxtb	r3, r3
 8000262:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000264:	bf00      	nop
 8000266:	4825      	ldr	r0, [pc, #148]	@ (80002fc <lcd_send_cmd+0xd8>)
 8000268:	f007 ff0d 	bl	8008086 <HAL_I2C_GetError>
 800026c:	4603      	mov	r3, r0
 800026e:	2b04      	cmp	r3, #4
 8000270:	d0f9      	beq.n	8000266 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000272:	bf00      	nop
 8000274:	4821      	ldr	r0, [pc, #132]	@ (80002fc <lcd_send_cmd+0xd8>)
 8000276:	f007 fef9 	bl	800806c <HAL_I2C_GetState>
 800027a:	4603      	mov	r3, r0
 800027c:	2b20      	cmp	r3, #32
 800027e:	d1f9      	bne.n	8000274 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000280:	4b1f      	ldr	r3, [pc, #124]	@ (8000300 <lcd_send_cmd+0xdc>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d116      	bne.n	80002b6 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000288:	2300      	movs	r3, #0
 800028a:	73fb      	strb	r3, [r7, #15]
 800028c:	e00f      	b.n	80002ae <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800028e:	7bfb      	ldrb	r3, [r7, #15]
 8000290:	3310      	adds	r3, #16
 8000292:	443b      	add	r3, r7
 8000294:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000298:	7bfb      	ldrb	r3, [r7, #15]
 800029a:	f022 0208 	bic.w	r2, r2, #8
 800029e:	b2d2      	uxtb	r2, r2
 80002a0:	3310      	adds	r3, #16
 80002a2:	443b      	add	r3, r7
 80002a4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
 80002aa:	3301      	adds	r3, #1
 80002ac:	73fb      	strb	r3, [r7, #15]
 80002ae:	7bfb      	ldrb	r3, [r7, #15]
 80002b0:	2b03      	cmp	r3, #3
 80002b2:	d9ec      	bls.n	800028e <lcd_send_cmd+0x6a>
 80002b4:	e015      	b.n	80002e2 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80002b6:	2300      	movs	r3, #0
 80002b8:	73bb      	strb	r3, [r7, #14]
 80002ba:	e00f      	b.n	80002dc <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80002bc:	7bbb      	ldrb	r3, [r7, #14]
 80002be:	3310      	adds	r3, #16
 80002c0:	443b      	add	r3, r7
 80002c2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80002c6:	7bbb      	ldrb	r3, [r7, #14]
 80002c8:	f042 0208 	orr.w	r2, r2, #8
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	3310      	adds	r3, #16
 80002d0:	443b      	add	r3, r7
 80002d2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002d6:	7bbb      	ldrb	r3, [r7, #14]
 80002d8:	3301      	adds	r3, #1
 80002da:	73bb      	strb	r3, [r7, #14]
 80002dc:	7bbb      	ldrb	r3, [r7, #14]
 80002de:	2b03      	cmp	r3, #3
 80002e0:	d9ec      	bls.n	80002bc <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002e2:	f107 0208 	add.w	r2, r7, #8
 80002e6:	2364      	movs	r3, #100	@ 0x64
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2304      	movs	r3, #4
 80002ec:	214e      	movs	r1, #78	@ 0x4e
 80002ee:	4803      	ldr	r0, [pc, #12]	@ (80002fc <lcd_send_cmd+0xd8>)
 80002f0:	f007 fa5c 	bl	80077ac <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80002f4:	bf00      	nop
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000158 	.word	0x20000158
 8000300:	2000005c 	.word	0x2000005c

08000304 <lcd_send_data>:

void lcd_send_data (char data) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af02      	add	r7, sp, #8
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	011b      	lsls	r3, r3, #4
 800031a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800031c:	7b7b      	ldrb	r3, [r7, #13]
 800031e:	f043 030d 	orr.w	r3, r3, #13
 8000322:	b2db      	uxtb	r3, r3
 8000324:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000326:	7b7b      	ldrb	r3, [r7, #13]
 8000328:	f043 0309 	orr.w	r3, r3, #9
 800032c:	b2db      	uxtb	r3, r3
 800032e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000330:	7b3b      	ldrb	r3, [r7, #12]
 8000332:	f043 030d 	orr.w	r3, r3, #13
 8000336:	b2db      	uxtb	r3, r3
 8000338:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800033a:	7b3b      	ldrb	r3, [r7, #12]
 800033c:	f043 0309 	orr.w	r3, r3, #9
 8000340:	b2db      	uxtb	r3, r3
 8000342:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000344:	bf00      	nop
 8000346:	4825      	ldr	r0, [pc, #148]	@ (80003dc <lcd_send_data+0xd8>)
 8000348:	f007 fe9d 	bl	8008086 <HAL_I2C_GetError>
 800034c:	4603      	mov	r3, r0
 800034e:	2b04      	cmp	r3, #4
 8000350:	d0f9      	beq.n	8000346 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000352:	bf00      	nop
 8000354:	4821      	ldr	r0, [pc, #132]	@ (80003dc <lcd_send_data+0xd8>)
 8000356:	f007 fe89 	bl	800806c <HAL_I2C_GetState>
 800035a:	4603      	mov	r3, r0
 800035c:	2b20      	cmp	r3, #32
 800035e:	d1f9      	bne.n	8000354 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000360:	4b1f      	ldr	r3, [pc, #124]	@ (80003e0 <lcd_send_data+0xdc>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d116      	bne.n	8000396 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000368:	2300      	movs	r3, #0
 800036a:	73fb      	strb	r3, [r7, #15]
 800036c:	e00f      	b.n	800038e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800036e:	7bfb      	ldrb	r3, [r7, #15]
 8000370:	3310      	adds	r3, #16
 8000372:	443b      	add	r3, r7
 8000374:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000378:	7bfb      	ldrb	r3, [r7, #15]
 800037a:	f022 0208 	bic.w	r2, r2, #8
 800037e:	b2d2      	uxtb	r2, r2
 8000380:	3310      	adds	r3, #16
 8000382:	443b      	add	r3, r7
 8000384:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	3301      	adds	r3, #1
 800038c:	73fb      	strb	r3, [r7, #15]
 800038e:	7bfb      	ldrb	r3, [r7, #15]
 8000390:	2b03      	cmp	r3, #3
 8000392:	d9ec      	bls.n	800036e <lcd_send_data+0x6a>
 8000394:	e015      	b.n	80003c2 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8000396:	2300      	movs	r3, #0
 8000398:	73bb      	strb	r3, [r7, #14]
 800039a:	e00f      	b.n	80003bc <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 800039c:	7bbb      	ldrb	r3, [r7, #14]
 800039e:	3310      	adds	r3, #16
 80003a0:	443b      	add	r3, r7
 80003a2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003a6:	7bbb      	ldrb	r3, [r7, #14]
 80003a8:	f042 0208 	orr.w	r2, r2, #8
 80003ac:	b2d2      	uxtb	r2, r2
 80003ae:	3310      	adds	r3, #16
 80003b0:	443b      	add	r3, r7
 80003b2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003b6:	7bbb      	ldrb	r3, [r7, #14]
 80003b8:	3301      	adds	r3, #1
 80003ba:	73bb      	strb	r3, [r7, #14]
 80003bc:	7bbb      	ldrb	r3, [r7, #14]
 80003be:	2b03      	cmp	r3, #3
 80003c0:	d9ec      	bls.n	800039c <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003c2:	f107 0208 	add.w	r2, r7, #8
 80003c6:	2364      	movs	r3, #100	@ 0x64
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	2304      	movs	r3, #4
 80003cc:	214e      	movs	r1, #78	@ 0x4e
 80003ce:	4803      	ldr	r0, [pc, #12]	@ (80003dc <lcd_send_data+0xd8>)
 80003d0:	f007 f9ec 	bl	80077ac <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80003d4:	bf00      	nop
 80003d6:	3710      	adds	r7, #16
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20000158 	.word	0x20000158
 80003e0:	2000005c 	.word	0x2000005c

080003e4 <lcd_send_string>:

void lcd_send_string (char *str) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	while (*str) {
 80003ec:	e006      	b.n	80003fc <lcd_send_string+0x18>
		lcd_send_data (*str++);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	1c5a      	adds	r2, r3, #1
 80003f2:	607a      	str	r2, [r7, #4]
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff84 	bl	8000304 <lcd_send_data>
	while (*str) {
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d1f4      	bne.n	80003ee <lcd_send_string+0xa>
	}
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <lcd_init>:

void lcd_init (void) {
 800040e:	b580      	push	{r7, lr}
 8000410:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000412:	2002      	movs	r0, #2
 8000414:	f7ff ff06 	bl	8000224 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8000418:	2028      	movs	r0, #40	@ 0x28
 800041a:	f7ff ff03 	bl	8000224 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 800041e:	200c      	movs	r0, #12
 8000420:	f7ff ff00 	bl	8000224 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000424:	2080      	movs	r0, #128	@ 0x80
 8000426:	f7ff fefd 	bl	8000224 <lcd_send_cmd>
	lcd_backlight(1);
 800042a:	2001      	movs	r0, #1
 800042c:	f000 f840 	bl	80004b0 <lcd_backlight>
}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}

08000434 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	460a      	mov	r2, r1
 800043e:	71fb      	strb	r3, [r7, #7]
 8000440:	4613      	mov	r3, r2
 8000442:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d106      	bne.n	8000458 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 800044a:	79bb      	ldrb	r3, [r7, #6]
 800044c:	337f      	adds	r3, #127	@ 0x7f
 800044e:	b2db      	uxtb	r3, r3
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff fee7 	bl	8000224 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8000456:	e008      	b.n	800046a <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	2b02      	cmp	r3, #2
 800045c:	d105      	bne.n	800046a <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 800045e:	79bb      	ldrb	r3, [r7, #6]
 8000460:	3b41      	subs	r3, #65	@ 0x41
 8000462:	b2db      	uxtb	r3, r3
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff fedd 	bl	8000224 <lcd_send_cmd>
}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8000472:	b580      	push	{r7, lr}
 8000474:	b082      	sub	sp, #8
 8000476:	af00      	add	r7, sp, #0
 8000478:	4603      	mov	r3, r0
 800047a:	603a      	str	r2, [r7, #0]
 800047c:	71fb      	strb	r3, [r7, #7]
 800047e:	460b      	mov	r3, r1
 8000480:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000482:	79ba      	ldrb	r2, [r7, #6]
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	4611      	mov	r1, r2
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ffd3 	bl	8000434 <lcd_gotoxy>
	lcd_send_string(str);
 800048e:	6838      	ldr	r0, [r7, #0]
 8000490:	f7ff ffa8 	bl	80003e4 <lcd_send_string>
}
 8000494:	bf00      	nop
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <lcd_clear>:

void lcd_clear(void) {
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80004a0:	2001      	movs	r0, #1
 80004a2:	f7ff febf 	bl	8000224 <lcd_send_cmd>
    HAL_Delay(2);
 80004a6:	2002      	movs	r0, #2
 80004a8:	f006 fb36 	bl	8006b18 <HAL_Delay>

}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 80004ba:	4a05      	ldr	r2, [pc, #20]	@ (80004d0 <lcd_backlight+0x20>)
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 80004c0:	2000      	movs	r0, #0
 80004c2:	f7ff feaf 	bl	8000224 <lcd_send_cmd>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	2000005c 	.word	0x2000005c

080004d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004d8:	f3bf 8f4f 	dsb	sy
}
 80004dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80004de:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <__NVIC_SystemReset+0x24>)
 80004e0:	68db      	ldr	r3, [r3, #12]
 80004e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80004e6:	4904      	ldr	r1, [pc, #16]	@ (80004f8 <__NVIC_SystemReset+0x24>)
 80004e8:	4b04      	ldr	r3, [pc, #16]	@ (80004fc <__NVIC_SystemReset+0x28>)
 80004ea:	4313      	orrs	r3, r2
 80004ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80004ee:	f3bf 8f4f 	dsb	sy
}
 80004f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <__NVIC_SystemReset+0x20>
 80004f8:	e000ed00 	.word	0xe000ed00
 80004fc:	05fa0004 	.word	0x05fa0004

08000500 <menu>:
bool HataMakineCalisiyortabla = 0;
bool EmnCerHataMakYukariCalis = 0;
bool EmnStopVar = 0;
char *deneme;

void menu(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000504:	2101      	movs	r1, #1
 8000506:	488f      	ldr	r0, [pc, #572]	@ (8000744 <menu+0x244>)
 8000508:	f006 ff94 	bl	8007434 <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	2b01      	cmp	r3, #1
 8000510:	f040 808e 	bne.w	8000630 <menu+0x130>
 8000514:	4b8c      	ldr	r3, [pc, #560]	@ (8000748 <menu+0x248>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	f083 0301 	eor.w	r3, r3, #1
 800051c:	b2db      	uxtb	r3, r3
 800051e:	2b00      	cmp	r3, #0
 8000520:	f000 8086 	beq.w	8000630 <menu+0x130>
		menuSayac = menuSayac+1;
 8000524:	4b89      	ldr	r3, [pc, #548]	@ (800074c <menu+0x24c>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b87      	ldr	r3, [pc, #540]	@ (800074c <menu+0x24c>)
 800052e:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 32) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8000530:	4b86      	ldr	r3, [pc, #536]	@ (800074c <menu+0x24c>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b20      	cmp	r3, #32
 8000536:	d102      	bne.n	800053e <menu+0x3e>
			menuSayac = 1;
 8000538:	4b84      	ldr	r3, [pc, #528]	@ (800074c <menu+0x24c>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 800053e:	4b83      	ldr	r3, [pc, #524]	@ (800074c <menu+0x24c>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b12      	cmp	r3, #18
 8000544:	d106      	bne.n	8000554 <menu+0x54>
 8000546:	4b82      	ldr	r3, [pc, #520]	@ (8000750 <menu+0x250>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d102      	bne.n	8000554 <menu+0x54>
			menuSayac = 21;
 800054e:	4b7f      	ldr	r3, [pc, #508]	@ (800074c <menu+0x24c>)
 8000550:	2215      	movs	r2, #21
 8000552:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8000554:	4b7d      	ldr	r3, [pc, #500]	@ (800074c <menu+0x24c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b08      	cmp	r3, #8
 800055a:	d106      	bne.n	800056a <menu+0x6a>
 800055c:	4b7d      	ldr	r3, [pc, #500]	@ (8000754 <menu+0x254>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d102      	bne.n	800056a <menu+0x6a>
			menuSayac = 16;
 8000564:	4b79      	ldr	r3, [pc, #484]	@ (800074c <menu+0x24c>)
 8000566:	2210      	movs	r2, #16
 8000568:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800056a:	4b78      	ldr	r3, [pc, #480]	@ (800074c <menu+0x24c>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b0d      	cmp	r3, #13
 8000570:	d106      	bne.n	8000580 <menu+0x80>
 8000572:	4b78      	ldr	r3, [pc, #480]	@ (8000754 <menu+0x254>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d102      	bne.n	8000580 <menu+0x80>
			menuSayac = 16;
 800057a:	4b74      	ldr	r3, [pc, #464]	@ (800074c <menu+0x24c>)
 800057c:	2210      	movs	r2, #16
 800057e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000580:	4b72      	ldr	r3, [pc, #456]	@ (800074c <menu+0x24c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b09      	cmp	r3, #9
 8000586:	d106      	bne.n	8000596 <menu+0x96>
 8000588:	4b72      	ldr	r3, [pc, #456]	@ (8000754 <menu+0x254>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d102      	bne.n	8000596 <menu+0x96>
			menuSayac = 13;
 8000590:	4b6e      	ldr	r3, [pc, #440]	@ (800074c <menu+0x24c>)
 8000592:	220d      	movs	r2, #13
 8000594:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000596:	4b6d      	ldr	r3, [pc, #436]	@ (800074c <menu+0x24c>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b0a      	cmp	r3, #10
 800059c:	d10a      	bne.n	80005b4 <menu+0xb4>
 800059e:	4b6e      	ldr	r3, [pc, #440]	@ (8000758 <menu+0x258>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d003      	beq.n	80005ae <menu+0xae>
 80005a6:	4b6c      	ldr	r3, [pc, #432]	@ (8000758 <menu+0x258>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d102      	bne.n	80005b4 <menu+0xb4>
			menuSayac = 11;
 80005ae:	4b67      	ldr	r3, [pc, #412]	@ (800074c <menu+0x24c>)
 80005b0:	220b      	movs	r2, #11
 80005b2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80005b4:	4b65      	ldr	r3, [pc, #404]	@ (800074c <menu+0x24c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b0c      	cmp	r3, #12
 80005ba:	d10e      	bne.n	80005da <menu+0xda>
 80005bc:	4b67      	ldr	r3, [pc, #412]	@ (800075c <menu+0x25c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d003      	beq.n	80005cc <menu+0xcc>
 80005c4:	4b65      	ldr	r3, [pc, #404]	@ (800075c <menu+0x25c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d106      	bne.n	80005da <menu+0xda>
 80005cc:	4b61      	ldr	r3, [pc, #388]	@ (8000754 <menu+0x254>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d102      	bne.n	80005da <menu+0xda>
			menuSayac = 16;
 80005d4:	4b5d      	ldr	r3, [pc, #372]	@ (800074c <menu+0x24c>)
 80005d6:	2210      	movs	r2, #16
 80005d8:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80005da:	4b5c      	ldr	r3, [pc, #368]	@ (800074c <menu+0x24c>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b0c      	cmp	r3, #12
 80005e0:	d10e      	bne.n	8000600 <menu+0x100>
 80005e2:	4b5e      	ldr	r3, [pc, #376]	@ (800075c <menu+0x25c>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d003      	beq.n	80005f2 <menu+0xf2>
 80005ea:	4b5c      	ldr	r3, [pc, #368]	@ (800075c <menu+0x25c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d106      	bne.n	8000600 <menu+0x100>
 80005f2:	4b58      	ldr	r3, [pc, #352]	@ (8000754 <menu+0x254>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b03      	cmp	r3, #3
 80005f8:	d102      	bne.n	8000600 <menu+0x100>
			menuSayac = 13;
 80005fa:	4b54      	ldr	r3, [pc, #336]	@ (800074c <menu+0x24c>)
 80005fc:	220d      	movs	r2, #13
 80005fe:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000600:	4b52      	ldr	r3, [pc, #328]	@ (800074c <menu+0x24c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d106      	bne.n	8000616 <menu+0x116>
 8000608:	4b55      	ldr	r3, [pc, #340]	@ (8000760 <menu+0x260>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d102      	bne.n	8000616 <menu+0x116>
			menuSayac = 16;
 8000610:	4b4e      	ldr	r3, [pc, #312]	@ (800074c <menu+0x24c>)
 8000612:	2210      	movs	r2, #16
 8000614:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8000616:	4b4d      	ldr	r3, [pc, #308]	@ (800074c <menu+0x24c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b18      	cmp	r3, #24
 800061c:	d106      	bne.n	800062c <menu+0x12c>
 800061e:	4b4c      	ldr	r3, [pc, #304]	@ (8000750 <menu+0x250>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d102      	bne.n	800062c <menu+0x12c>
			menuSayac = 26;
 8000626:	4b49      	ldr	r3, [pc, #292]	@ (800074c <menu+0x24c>)
 8000628:	221a      	movs	r2, #26
 800062a:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800062c:	f003 f890 	bl	8003750 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000630:	2108      	movs	r1, #8
 8000632:	484c      	ldr	r0, [pc, #304]	@ (8000764 <menu+0x264>)
 8000634:	f006 fefe 	bl	8007434 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	d175      	bne.n	800072a <menu+0x22a>
 800063e:	4b42      	ldr	r3, [pc, #264]	@ (8000748 <menu+0x248>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	f083 0301 	eor.w	r3, r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d06e      	beq.n	800072a <menu+0x22a>
		if (menuSayac <= 1) {
 800064c:	4b3f      	ldr	r3, [pc, #252]	@ (800074c <menu+0x24c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d802      	bhi.n	800065a <menu+0x15a>
			menuSayac = 32;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8000654:	4b3d      	ldr	r3, [pc, #244]	@ (800074c <menu+0x24c>)
 8000656:	2220      	movs	r2, #32
 8000658:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800065a:	4b3c      	ldr	r3, [pc, #240]	@ (800074c <menu+0x24c>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	3b01      	subs	r3, #1
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b3a      	ldr	r3, [pc, #232]	@ (800074c <menu+0x24c>)
 8000664:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8000666:	4b39      	ldr	r3, [pc, #228]	@ (800074c <menu+0x24c>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b14      	cmp	r3, #20
 800066c:	d106      	bne.n	800067c <menu+0x17c>
 800066e:	4b38      	ldr	r3, [pc, #224]	@ (8000750 <menu+0x250>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d102      	bne.n	800067c <menu+0x17c>
			menuSayac = 17;
 8000676:	4b35      	ldr	r3, [pc, #212]	@ (800074c <menu+0x24c>)
 8000678:	2211      	movs	r2, #17
 800067a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800067c:	4b33      	ldr	r3, [pc, #204]	@ (800074c <menu+0x24c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b0f      	cmp	r3, #15
 8000682:	d106      	bne.n	8000692 <menu+0x192>
 8000684:	4b33      	ldr	r3, [pc, #204]	@ (8000754 <menu+0x254>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d102      	bne.n	8000692 <menu+0x192>
			menuSayac = 7;
 800068c:	4b2f      	ldr	r3, [pc, #188]	@ (800074c <menu+0x24c>)
 800068e:	2207      	movs	r2, #7
 8000690:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8000692:	4b2e      	ldr	r3, [pc, #184]	@ (800074c <menu+0x24c>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b0f      	cmp	r3, #15
 8000698:	d106      	bne.n	80006a8 <menu+0x1a8>
 800069a:	4b2e      	ldr	r3, [pc, #184]	@ (8000754 <menu+0x254>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d102      	bne.n	80006a8 <menu+0x1a8>
			menuSayac = 12;
 80006a2:	4b2a      	ldr	r3, [pc, #168]	@ (800074c <menu+0x24c>)
 80006a4:	220c      	movs	r2, #12
 80006a6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80006a8:	4b28      	ldr	r3, [pc, #160]	@ (800074c <menu+0x24c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b0c      	cmp	r3, #12
 80006ae:	d106      	bne.n	80006be <menu+0x1be>
 80006b0:	4b28      	ldr	r3, [pc, #160]	@ (8000754 <menu+0x254>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d102      	bne.n	80006be <menu+0x1be>
			menuSayac = 8;
 80006b8:	4b24      	ldr	r3, [pc, #144]	@ (800074c <menu+0x24c>)
 80006ba:	2208      	movs	r2, #8
 80006bc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80006be:	4b23      	ldr	r3, [pc, #140]	@ (800074c <menu+0x24c>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d10a      	bne.n	80006dc <menu+0x1dc>
 80006c6:	4b24      	ldr	r3, [pc, #144]	@ (8000758 <menu+0x258>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d003      	beq.n	80006d6 <menu+0x1d6>
 80006ce:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <menu+0x258>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d102      	bne.n	80006dc <menu+0x1dc>
			menuSayac = 9;
 80006d6:	4b1d      	ldr	r3, [pc, #116]	@ (800074c <menu+0x24c>)
 80006d8:	2209      	movs	r2, #9
 80006da:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80006dc:	4b1b      	ldr	r3, [pc, #108]	@ (800074c <menu+0x24c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b0c      	cmp	r3, #12
 80006e2:	d10a      	bne.n	80006fa <menu+0x1fa>
 80006e4:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <menu+0x25c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d003      	beq.n	80006f4 <menu+0x1f4>
 80006ec:	4b1b      	ldr	r3, [pc, #108]	@ (800075c <menu+0x25c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d102      	bne.n	80006fa <menu+0x1fa>
			menuSayac = 11;
 80006f4:	4b15      	ldr	r3, [pc, #84]	@ (800074c <menu+0x24c>)
 80006f6:	220b      	movs	r2, #11
 80006f8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80006fa:	4b14      	ldr	r3, [pc, #80]	@ (800074c <menu+0x24c>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b0f      	cmp	r3, #15
 8000700:	d106      	bne.n	8000710 <menu+0x210>
 8000702:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <menu+0x260>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d102      	bne.n	8000710 <menu+0x210>
			menuSayac = 14;
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <menu+0x24c>)
 800070c:	220e      	movs	r2, #14
 800070e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8000710:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <menu+0x24c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b19      	cmp	r3, #25
 8000716:	d106      	bne.n	8000726 <menu+0x226>
 8000718:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <menu+0x250>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d102      	bne.n	8000726 <menu+0x226>
			menuSayac = 23;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <menu+0x24c>)
 8000722:	2217      	movs	r2, #23
 8000724:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8000726:	f003 f813 	bl	8003750 <bekle>
	}

	if (menuSayac == 0) {
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <menu+0x24c>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d134      	bne.n	800079c <menu+0x29c>
		if(dilSecim == 0) {
 8000732:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <menu+0x268>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d122      	bne.n	8000780 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 800073a:	4a0c      	ldr	r2, [pc, #48]	@ (800076c <menu+0x26c>)
 800073c:	2101      	movs	r1, #1
 800073e:	2001      	movs	r0, #1
 8000740:	e016      	b.n	8000770 <menu+0x270>
 8000742:	bf00      	nop
 8000744:	40010800 	.word	0x40010800
 8000748:	200000f8 	.word	0x200000f8
 800074c:	200000ca 	.word	0x200000ca
 8000750:	200000d9 	.word	0x200000d9
 8000754:	200000d2 	.word	0x200000d2
 8000758:	200000d3 	.word	0x200000d3
 800075c:	200000d4 	.word	0x200000d4
 8000760:	200000d5 	.word	0x200000d5
 8000764:	40011000 	.word	0x40011000
 8000768:	200000ea 	.word	0x200000ea
 800076c:	08009c70 	.word	0x08009c70
 8000770:	f7ff fe7f 	bl	8000472 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8000774:	4a94      	ldr	r2, [pc, #592]	@ (80009c8 <menu+0x4c8>)
 8000776:	2101      	movs	r1, #1
 8000778:	2002      	movs	r0, #2
 800077a:	f7ff fe7a 	bl	8000472 <lcd_print>
 800077e:	e00d      	b.n	800079c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8000780:	4b92      	ldr	r3, [pc, #584]	@ (80009cc <menu+0x4cc>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d109      	bne.n	800079c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8000788:	4a91      	ldr	r2, [pc, #580]	@ (80009d0 <menu+0x4d0>)
 800078a:	2101      	movs	r1, #1
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff fe70 	bl	8000472 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8000792:	4a90      	ldr	r2, [pc, #576]	@ (80009d4 <menu+0x4d4>)
 8000794:	2101      	movs	r1, #1
 8000796:	2002      	movs	r0, #2
 8000798:	f7ff fe6b 	bl	8000472 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800079c:	4b8e      	ldr	r3, [pc, #568]	@ (80009d8 <menu+0x4d8>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	f040 828b 	bne.w	8000cbc <menu+0x7bc>
		if(dilSecim == 0) {
 80007a6:	4b89      	ldr	r3, [pc, #548]	@ (80009cc <menu+0x4cc>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d105      	bne.n	80007ba <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80007ae:	4a8b      	ldr	r2, [pc, #556]	@ (80009dc <menu+0x4dc>)
 80007b0:	2101      	movs	r1, #1
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff fe5d 	bl	8000472 <lcd_print>
 80007b8:	e008      	b.n	80007cc <menu+0x2cc>
		} else if(dilSecim == 1) {
 80007ba:	4b84      	ldr	r3, [pc, #528]	@ (80009cc <menu+0x4cc>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d104      	bne.n	80007cc <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80007c2:	4a87      	ldr	r2, [pc, #540]	@ (80009e0 <menu+0x4e0>)
 80007c4:	2101      	movs	r1, #1
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff fe53 	bl	8000472 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80007cc:	4b85      	ldr	r3, [pc, #532]	@ (80009e4 <menu+0x4e4>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d123      	bne.n	800081c <menu+0x31c>
			if(dilSecim == 0) {
 80007d4:	4b7d      	ldr	r3, [pc, #500]	@ (80009cc <menu+0x4cc>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d105      	bne.n	80007e8 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80007dc:	4a82      	ldr	r2, [pc, #520]	@ (80009e8 <menu+0x4e8>)
 80007de:	2101      	movs	r1, #1
 80007e0:	2002      	movs	r0, #2
 80007e2:	f7ff fe46 	bl	8000472 <lcd_print>
 80007e6:	e008      	b.n	80007fa <menu+0x2fa>

			} else if(dilSecim == 1) {
 80007e8:	4b78      	ldr	r3, [pc, #480]	@ (80009cc <menu+0x4cc>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d104      	bne.n	80007fa <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80007f0:	4a7e      	ldr	r2, [pc, #504]	@ (80009ec <menu+0x4ec>)
 80007f2:	2101      	movs	r1, #1
 80007f4:	2002      	movs	r0, #2
 80007f6:	f7ff fe3c 	bl	8000472 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80007fa:	4a7d      	ldr	r2, [pc, #500]	@ (80009f0 <menu+0x4f0>)
 80007fc:	210f      	movs	r1, #15
 80007fe:	2002      	movs	r0, #2
 8000800:	f7ff fe37 	bl	8000472 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8000804:	4b7b      	ldr	r3, [pc, #492]	@ (80009f4 <menu+0x4f4>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	220a      	movs	r2, #10
 800080a:	497b      	ldr	r1, [pc, #492]	@ (80009f8 <menu+0x4f8>)
 800080c:	4618      	mov	r0, r3
 800080e:	f009 f9b3 	bl	8009b78 <itoa>
			lcd_print(2, 14, snum);
 8000812:	4a79      	ldr	r2, [pc, #484]	@ (80009f8 <menu+0x4f8>)
 8000814:	210e      	movs	r1, #14
 8000816:	2002      	movs	r0, #2
 8000818:	f7ff fe2b 	bl	8000472 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800081c:	4b71      	ldr	r3, [pc, #452]	@ (80009e4 <menu+0x4e4>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d123      	bne.n	800086c <menu+0x36c>
			if(dilSecim == 0) {
 8000824:	4b69      	ldr	r3, [pc, #420]	@ (80009cc <menu+0x4cc>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d105      	bne.n	8000838 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 800082c:	4a73      	ldr	r2, [pc, #460]	@ (80009fc <menu+0x4fc>)
 800082e:	2101      	movs	r1, #1
 8000830:	2002      	movs	r0, #2
 8000832:	f7ff fe1e 	bl	8000472 <lcd_print>
 8000836:	e008      	b.n	800084a <menu+0x34a>
			} else if(dilSecim == 1) {
 8000838:	4b64      	ldr	r3, [pc, #400]	@ (80009cc <menu+0x4cc>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d104      	bne.n	800084a <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8000840:	4a6f      	ldr	r2, [pc, #444]	@ (8000a00 <menu+0x500>)
 8000842:	2101      	movs	r1, #1
 8000844:	2002      	movs	r0, #2
 8000846:	f7ff fe14 	bl	8000472 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800084a:	4a6e      	ldr	r2, [pc, #440]	@ (8000a04 <menu+0x504>)
 800084c:	210f      	movs	r1, #15
 800084e:	2002      	movs	r0, #2
 8000850:	f7ff fe0f 	bl	8000472 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8000854:	4b6c      	ldr	r3, [pc, #432]	@ (8000a08 <menu+0x508>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	220a      	movs	r2, #10
 800085a:	4967      	ldr	r1, [pc, #412]	@ (80009f8 <menu+0x4f8>)
 800085c:	4618      	mov	r0, r3
 800085e:	f009 f98b 	bl	8009b78 <itoa>
			lcd_print(2, 14, snum);
 8000862:	4a65      	ldr	r2, [pc, #404]	@ (80009f8 <menu+0x4f8>)
 8000864:	210e      	movs	r1, #14
 8000866:	2002      	movs	r0, #2
 8000868:	f7ff fe03 	bl	8000472 <lcd_print>
		}

		if(hataGostermeSirasi == 2){
 800086c:	4b5d      	ldr	r3, [pc, #372]	@ (80009e4 <menu+0x4e4>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d123      	bne.n	80008bc <menu+0x3bc>
			if(dilSecim == 0) {
 8000874:	4b55      	ldr	r3, [pc, #340]	@ (80009cc <menu+0x4cc>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d105      	bne.n	8000888 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800087c:	4a63      	ldr	r2, [pc, #396]	@ (8000a0c <menu+0x50c>)
 800087e:	2101      	movs	r1, #1
 8000880:	2002      	movs	r0, #2
 8000882:	f7ff fdf6 	bl	8000472 <lcd_print>
 8000886:	e008      	b.n	800089a <menu+0x39a>
			} else if(dilSecim == 1) {
 8000888:	4b50      	ldr	r3, [pc, #320]	@ (80009cc <menu+0x4cc>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d104      	bne.n	800089a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8000890:	4a5f      	ldr	r2, [pc, #380]	@ (8000a10 <menu+0x510>)
 8000892:	2101      	movs	r1, #1
 8000894:	2002      	movs	r0, #2
 8000896:	f7ff fdec 	bl	8000472 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800089a:	4a5a      	ldr	r2, [pc, #360]	@ (8000a04 <menu+0x504>)
 800089c:	210f      	movs	r1, #15
 800089e:	2002      	movs	r0, #2
 80008a0:	f7ff fde7 	bl	8000472 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80008a4:	4b5b      	ldr	r3, [pc, #364]	@ (8000a14 <menu+0x514>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	220a      	movs	r2, #10
 80008aa:	4953      	ldr	r1, [pc, #332]	@ (80009f8 <menu+0x4f8>)
 80008ac:	4618      	mov	r0, r3
 80008ae:	f009 f963 	bl	8009b78 <itoa>
			lcd_print(2, 14, snum);
 80008b2:	4a51      	ldr	r2, [pc, #324]	@ (80009f8 <menu+0x4f8>)
 80008b4:	210e      	movs	r1, #14
 80008b6:	2002      	movs	r0, #2
 80008b8:	f7ff fddb 	bl	8000472 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80008bc:	4b49      	ldr	r3, [pc, #292]	@ (80009e4 <menu+0x4e4>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	d123      	bne.n	800090c <menu+0x40c>
			if(dilSecim == 0) {
 80008c4:	4b41      	ldr	r3, [pc, #260]	@ (80009cc <menu+0x4cc>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d105      	bne.n	80008d8 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 80008cc:	4a52      	ldr	r2, [pc, #328]	@ (8000a18 <menu+0x518>)
 80008ce:	2101      	movs	r1, #1
 80008d0:	2002      	movs	r0, #2
 80008d2:	f7ff fdce 	bl	8000472 <lcd_print>
 80008d6:	e008      	b.n	80008ea <menu+0x3ea>
			} else if(dilSecim == 1) {
 80008d8:	4b3c      	ldr	r3, [pc, #240]	@ (80009cc <menu+0x4cc>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d104      	bne.n	80008ea <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 80008e0:	4a4e      	ldr	r2, [pc, #312]	@ (8000a1c <menu+0x51c>)
 80008e2:	2101      	movs	r1, #1
 80008e4:	2002      	movs	r0, #2
 80008e6:	f7ff fdc4 	bl	8000472 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 80008ea:	4a46      	ldr	r2, [pc, #280]	@ (8000a04 <menu+0x504>)
 80008ec:	210f      	movs	r1, #15
 80008ee:	2002      	movs	r0, #2
 80008f0:	f7ff fdbf 	bl	8000472 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80008f4:	4b4a      	ldr	r3, [pc, #296]	@ (8000a20 <menu+0x520>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	220a      	movs	r2, #10
 80008fa:	493f      	ldr	r1, [pc, #252]	@ (80009f8 <menu+0x4f8>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f009 f93b 	bl	8009b78 <itoa>
			lcd_print(2, 14, snum);
 8000902:	4a3d      	ldr	r2, [pc, #244]	@ (80009f8 <menu+0x4f8>)
 8000904:	210e      	movs	r1, #14
 8000906:	2002      	movs	r0, #2
 8000908:	f7ff fdb3 	bl	8000472 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800090c:	4b35      	ldr	r3, [pc, #212]	@ (80009e4 <menu+0x4e4>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b04      	cmp	r3, #4
 8000912:	d123      	bne.n	800095c <menu+0x45c>
			if(dilSecim == 0) {
 8000914:	4b2d      	ldr	r3, [pc, #180]	@ (80009cc <menu+0x4cc>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d105      	bne.n	8000928 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 800091c:	4a41      	ldr	r2, [pc, #260]	@ (8000a24 <menu+0x524>)
 800091e:	2101      	movs	r1, #1
 8000920:	2002      	movs	r0, #2
 8000922:	f7ff fda6 	bl	8000472 <lcd_print>
 8000926:	e008      	b.n	800093a <menu+0x43a>
			} else if(dilSecim == 1) {
 8000928:	4b28      	ldr	r3, [pc, #160]	@ (80009cc <menu+0x4cc>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d104      	bne.n	800093a <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8000930:	4a3d      	ldr	r2, [pc, #244]	@ (8000a28 <menu+0x528>)
 8000932:	2101      	movs	r1, #1
 8000934:	2002      	movs	r0, #2
 8000936:	f7ff fd9c 	bl	8000472 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800093a:	4a32      	ldr	r2, [pc, #200]	@ (8000a04 <menu+0x504>)
 800093c:	210f      	movs	r1, #15
 800093e:	2002      	movs	r0, #2
 8000940:	f7ff fd97 	bl	8000472 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8000944:	4b39      	ldr	r3, [pc, #228]	@ (8000a2c <menu+0x52c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	220a      	movs	r2, #10
 800094a:	492b      	ldr	r1, [pc, #172]	@ (80009f8 <menu+0x4f8>)
 800094c:	4618      	mov	r0, r3
 800094e:	f009 f913 	bl	8009b78 <itoa>
			lcd_print(2, 14, snum);
 8000952:	4a29      	ldr	r2, [pc, #164]	@ (80009f8 <menu+0x4f8>)
 8000954:	210e      	movs	r1, #14
 8000956:	2002      	movs	r0, #2
 8000958:	f7ff fd8b 	bl	8000472 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800095c:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <menu+0x4e4>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b05      	cmp	r3, #5
 8000962:	d123      	bne.n	80009ac <menu+0x4ac>
			if(dilSecim == 0) {
 8000964:	4b19      	ldr	r3, [pc, #100]	@ (80009cc <menu+0x4cc>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d105      	bne.n	8000978 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 800096c:	4a30      	ldr	r2, [pc, #192]	@ (8000a30 <menu+0x530>)
 800096e:	2101      	movs	r1, #1
 8000970:	2002      	movs	r0, #2
 8000972:	f7ff fd7e 	bl	8000472 <lcd_print>
 8000976:	e008      	b.n	800098a <menu+0x48a>
			} else if(dilSecim == 1) {
 8000978:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <menu+0x4cc>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d104      	bne.n	800098a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8000980:	4a2c      	ldr	r2, [pc, #176]	@ (8000a34 <menu+0x534>)
 8000982:	2101      	movs	r1, #1
 8000984:	2002      	movs	r0, #2
 8000986:	f7ff fd74 	bl	8000472 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800098a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a04 <menu+0x504>)
 800098c:	210f      	movs	r1, #15
 800098e:	2002      	movs	r0, #2
 8000990:	f7ff fd6f 	bl	8000472 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8000994:	4b28      	ldr	r3, [pc, #160]	@ (8000a38 <menu+0x538>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	220a      	movs	r2, #10
 800099a:	4917      	ldr	r1, [pc, #92]	@ (80009f8 <menu+0x4f8>)
 800099c:	4618      	mov	r0, r3
 800099e:	f009 f8eb 	bl	8009b78 <itoa>
			lcd_print(2, 14, snum);
 80009a2:	4a15      	ldr	r2, [pc, #84]	@ (80009f8 <menu+0x4f8>)
 80009a4:	210e      	movs	r1, #14
 80009a6:	2002      	movs	r0, #2
 80009a8:	f7ff fd63 	bl	8000472 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80009ac:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <menu+0x4e4>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b06      	cmp	r3, #6
 80009b2:	d15f      	bne.n	8000a74 <menu+0x574>
			if(dilSecim == 0) {
 80009b4:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <menu+0x4cc>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d141      	bne.n	8000a40 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80009bc:	4a1f      	ldr	r2, [pc, #124]	@ (8000a3c <menu+0x53c>)
 80009be:	2101      	movs	r1, #1
 80009c0:	2002      	movs	r0, #2
 80009c2:	f7ff fd56 	bl	8000472 <lcd_print>
 80009c6:	e044      	b.n	8000a52 <menu+0x552>
 80009c8:	08009c84 	.word	0x08009c84
 80009cc:	200000ea 	.word	0x200000ea
 80009d0:	08009c98 	.word	0x08009c98
 80009d4:	08009cac 	.word	0x08009cac
 80009d8:	200000ca 	.word	0x200000ca
 80009dc:	08009cc0 	.word	0x08009cc0
 80009e0:	08009cd4 	.word	0x08009cd4
 80009e4:	200000cc 	.word	0x200000cc
 80009e8:	08009ce8 	.word	0x08009ce8
 80009ec:	08009cf8 	.word	0x08009cf8
 80009f0:	08009d08 	.word	0x08009d08
 80009f4:	200000eb 	.word	0x200000eb
 80009f8:	200000a0 	.word	0x200000a0
 80009fc:	08009d0c 	.word	0x08009d0c
 8000a00:	08009d1c 	.word	0x08009d1c
 8000a04:	08009d2c 	.word	0x08009d2c
 8000a08:	200000ec 	.word	0x200000ec
 8000a0c:	08009d30 	.word	0x08009d30
 8000a10:	08009d40 	.word	0x08009d40
 8000a14:	200000ed 	.word	0x200000ed
 8000a18:	08009d50 	.word	0x08009d50
 8000a1c:	08009d60 	.word	0x08009d60
 8000a20:	200000ee 	.word	0x200000ee
 8000a24:	08009d70 	.word	0x08009d70
 8000a28:	08009d80 	.word	0x08009d80
 8000a2c:	200000ef 	.word	0x200000ef
 8000a30:	08009d90 	.word	0x08009d90
 8000a34:	08009da0 	.word	0x08009da0
 8000a38:	200000f0 	.word	0x200000f0
 8000a3c:	08009db0 	.word	0x08009db0
			} else if(dilSecim == 1) {
 8000a40:	4ba6      	ldr	r3, [pc, #664]	@ (8000cdc <menu+0x7dc>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d104      	bne.n	8000a52 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8000a48:	4aa5      	ldr	r2, [pc, #660]	@ (8000ce0 <menu+0x7e0>)
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	2002      	movs	r0, #2
 8000a4e:	f7ff fd10 	bl	8000472 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000a52:	4aa4      	ldr	r2, [pc, #656]	@ (8000ce4 <menu+0x7e4>)
 8000a54:	210f      	movs	r1, #15
 8000a56:	2002      	movs	r0, #2
 8000a58:	f7ff fd0b 	bl	8000472 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8000a5c:	4ba2      	ldr	r3, [pc, #648]	@ (8000ce8 <menu+0x7e8>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	220a      	movs	r2, #10
 8000a62:	49a2      	ldr	r1, [pc, #648]	@ (8000cec <menu+0x7ec>)
 8000a64:	4618      	mov	r0, r3
 8000a66:	f009 f887 	bl	8009b78 <itoa>
			lcd_print(2, 14, snum);
 8000a6a:	4aa0      	ldr	r2, [pc, #640]	@ (8000cec <menu+0x7ec>)
 8000a6c:	210e      	movs	r1, #14
 8000a6e:	2002      	movs	r0, #2
 8000a70:	f7ff fcff 	bl	8000472 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8000a74:	4b9e      	ldr	r3, [pc, #632]	@ (8000cf0 <menu+0x7f0>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b07      	cmp	r3, #7
 8000a7a:	d123      	bne.n	8000ac4 <menu+0x5c4>
			if(dilSecim == 0) {
 8000a7c:	4b97      	ldr	r3, [pc, #604]	@ (8000cdc <menu+0x7dc>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d105      	bne.n	8000a90 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8000a84:	4a9b      	ldr	r2, [pc, #620]	@ (8000cf4 <menu+0x7f4>)
 8000a86:	2101      	movs	r1, #1
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f7ff fcf2 	bl	8000472 <lcd_print>
 8000a8e:	e008      	b.n	8000aa2 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8000a90:	4b92      	ldr	r3, [pc, #584]	@ (8000cdc <menu+0x7dc>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d104      	bne.n	8000aa2 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8000a98:	4a97      	ldr	r2, [pc, #604]	@ (8000cf8 <menu+0x7f8>)
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	f7ff fce8 	bl	8000472 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000aa2:	4a90      	ldr	r2, [pc, #576]	@ (8000ce4 <menu+0x7e4>)
 8000aa4:	210f      	movs	r1, #15
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f7ff fce3 	bl	8000472 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8000aac:	4b93      	ldr	r3, [pc, #588]	@ (8000cfc <menu+0x7fc>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	220a      	movs	r2, #10
 8000ab2:	498e      	ldr	r1, [pc, #568]	@ (8000cec <menu+0x7ec>)
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f009 f85f 	bl	8009b78 <itoa>
			lcd_print(2, 14, snum);
 8000aba:	4a8c      	ldr	r2, [pc, #560]	@ (8000cec <menu+0x7ec>)
 8000abc:	210e      	movs	r1, #14
 8000abe:	2002      	movs	r0, #2
 8000ac0:	f7ff fcd7 	bl	8000472 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8000ac4:	4b8a      	ldr	r3, [pc, #552]	@ (8000cf0 <menu+0x7f0>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b08      	cmp	r3, #8
 8000aca:	d123      	bne.n	8000b14 <menu+0x614>
			if(dilSecim == 0) {
 8000acc:	4b83      	ldr	r3, [pc, #524]	@ (8000cdc <menu+0x7dc>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d105      	bne.n	8000ae0 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8000ad4:	4a8a      	ldr	r2, [pc, #552]	@ (8000d00 <menu+0x800>)
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	2002      	movs	r0, #2
 8000ada:	f7ff fcca 	bl	8000472 <lcd_print>
 8000ade:	e008      	b.n	8000af2 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8000ae0:	4b7e      	ldr	r3, [pc, #504]	@ (8000cdc <menu+0x7dc>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d104      	bne.n	8000af2 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8000ae8:	4a86      	ldr	r2, [pc, #536]	@ (8000d04 <menu+0x804>)
 8000aea:	2101      	movs	r1, #1
 8000aec:	2002      	movs	r0, #2
 8000aee:	f7ff fcc0 	bl	8000472 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000af2:	4a7c      	ldr	r2, [pc, #496]	@ (8000ce4 <menu+0x7e4>)
 8000af4:	210f      	movs	r1, #15
 8000af6:	2002      	movs	r0, #2
 8000af8:	f7ff fcbb 	bl	8000472 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8000afc:	4b82      	ldr	r3, [pc, #520]	@ (8000d08 <menu+0x808>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	220a      	movs	r2, #10
 8000b02:	497a      	ldr	r1, [pc, #488]	@ (8000cec <menu+0x7ec>)
 8000b04:	4618      	mov	r0, r3
 8000b06:	f009 f837 	bl	8009b78 <itoa>
			lcd_print(2, 14, snum);
 8000b0a:	4a78      	ldr	r2, [pc, #480]	@ (8000cec <menu+0x7ec>)
 8000b0c:	210e      	movs	r1, #14
 8000b0e:	2002      	movs	r0, #2
 8000b10:	f7ff fcaf 	bl	8000472 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8000b14:	4b76      	ldr	r3, [pc, #472]	@ (8000cf0 <menu+0x7f0>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b09      	cmp	r3, #9
 8000b1a:	d123      	bne.n	8000b64 <menu+0x664>
			if(dilSecim == 0) {
 8000b1c:	4b6f      	ldr	r3, [pc, #444]	@ (8000cdc <menu+0x7dc>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d105      	bne.n	8000b30 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8000b24:	4a79      	ldr	r2, [pc, #484]	@ (8000d0c <menu+0x80c>)
 8000b26:	2101      	movs	r1, #1
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f7ff fca2 	bl	8000472 <lcd_print>
 8000b2e:	e008      	b.n	8000b42 <menu+0x642>
			} else if(dilSecim == 1) {
 8000b30:	4b6a      	ldr	r3, [pc, #424]	@ (8000cdc <menu+0x7dc>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d104      	bne.n	8000b42 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8000b38:	4a75      	ldr	r2, [pc, #468]	@ (8000d10 <menu+0x810>)
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	2002      	movs	r0, #2
 8000b3e:	f7ff fc98 	bl	8000472 <lcd_print>

			}
			lcd_print(2, 16, " ");
 8000b42:	4a74      	ldr	r2, [pc, #464]	@ (8000d14 <menu+0x814>)
 8000b44:	2110      	movs	r1, #16
 8000b46:	2002      	movs	r0, #2
 8000b48:	f7ff fc93 	bl	8000472 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8000b4c:	4b72      	ldr	r3, [pc, #456]	@ (8000d18 <menu+0x818>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	220a      	movs	r2, #10
 8000b52:	4966      	ldr	r1, [pc, #408]	@ (8000cec <menu+0x7ec>)
 8000b54:	4618      	mov	r0, r3
 8000b56:	f009 f80f 	bl	8009b78 <itoa>
			lcd_print(2, 15, snum);
 8000b5a:	4a64      	ldr	r2, [pc, #400]	@ (8000cec <menu+0x7ec>)
 8000b5c:	210f      	movs	r1, #15
 8000b5e:	2002      	movs	r0, #2
 8000b60:	f7ff fc87 	bl	8000472 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8000b64:	4b62      	ldr	r3, [pc, #392]	@ (8000cf0 <menu+0x7f0>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b0a      	cmp	r3, #10
 8000b6a:	d112      	bne.n	8000b92 <menu+0x692>
			if(dilSecim == 0) {
 8000b6c:	4b5b      	ldr	r3, [pc, #364]	@ (8000cdc <menu+0x7dc>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d105      	bne.n	8000b80 <menu+0x680>
				lcd_print(2, 1, "Silmek icin ent.");
 8000b74:	4a69      	ldr	r2, [pc, #420]	@ (8000d1c <menu+0x81c>)
 8000b76:	2101      	movs	r1, #1
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f7ff fc7a 	bl	8000472 <lcd_print>
 8000b7e:	e008      	b.n	8000b92 <menu+0x692>
			} else if(dilSecim == 1) {
 8000b80:	4b56      	ldr	r3, [pc, #344]	@ (8000cdc <menu+0x7dc>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d104      	bne.n	8000b92 <menu+0x692>
				lcd_print(2, 1, "Del. press enter");
 8000b88:	4a65      	ldr	r2, [pc, #404]	@ (8000d20 <menu+0x820>)
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f7ff fc70 	bl	8000472 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8000b92:	2102      	movs	r1, #2
 8000b94:	4863      	ldr	r0, [pc, #396]	@ (8000d24 <menu+0x824>)
 8000b96:	f006 fc4d 	bl	8007434 <HAL_GPIO_ReadPin>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d115      	bne.n	8000bcc <menu+0x6cc>
 8000ba0:	4b61      	ldr	r3, [pc, #388]	@ (8000d28 <menu+0x828>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	f083 0301 	eor.w	r3, r3, #1
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d00e      	beq.n	8000bcc <menu+0x6cc>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8000bae:	4b50      	ldr	r3, [pc, #320]	@ (8000cf0 <menu+0x7f0>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4b4e      	ldr	r3, [pc, #312]	@ (8000cf0 <menu+0x7f0>)
 8000bb8:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8000bba:	4b4d      	ldr	r3, [pc, #308]	@ (8000cf0 <menu+0x7f0>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b0a      	cmp	r3, #10
 8000bc0:	d902      	bls.n	8000bc8 <menu+0x6c8>
				hataGostermeSirasi = 0;
 8000bc2:	4b4b      	ldr	r3, [pc, #300]	@ (8000cf0 <menu+0x7f0>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000bc8:	f002 fdc2 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8000bcc:	2104      	movs	r1, #4
 8000bce:	4855      	ldr	r0, [pc, #340]	@ (8000d24 <menu+0x824>)
 8000bd0:	f006 fc30 	bl	8007434 <HAL_GPIO_ReadPin>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d115      	bne.n	8000c06 <menu+0x706>
 8000bda:	4b53      	ldr	r3, [pc, #332]	@ (8000d28 <menu+0x828>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	f083 0301 	eor.w	r3, r3, #1
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d00e      	beq.n	8000c06 <menu+0x706>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8000be8:	4b41      	ldr	r3, [pc, #260]	@ (8000cf0 <menu+0x7f0>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b3f      	ldr	r3, [pc, #252]	@ (8000cf0 <menu+0x7f0>)
 8000bf2:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8000bf4:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf0 <menu+0x7f0>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b0b      	cmp	r3, #11
 8000bfa:	d902      	bls.n	8000c02 <menu+0x702>
	    		hataGostermeSirasi = 10;
 8000bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8000cf0 <menu+0x7f0>)
 8000bfe:	220a      	movs	r2, #10
 8000c00:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000c02:	f002 fda5 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8000c06:	2108      	movs	r1, #8
 8000c08:	4846      	ldr	r0, [pc, #280]	@ (8000d24 <menu+0x824>)
 8000c0a:	f006 fc13 	bl	8007434 <HAL_GPIO_ReadPin>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d153      	bne.n	8000cbc <menu+0x7bc>
 8000c14:	4b44      	ldr	r3, [pc, #272]	@ (8000d28 <menu+0x828>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	f083 0301 	eor.w	r3, r3, #1
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d04c      	beq.n	8000cbc <menu+0x7bc>
 8000c22:	4b33      	ldr	r3, [pc, #204]	@ (8000cf0 <menu+0x7f0>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b0a      	cmp	r3, #10
 8000c28:	d148      	bne.n	8000cbc <menu+0x7bc>
			hataKayit1 = 0; eepromData[37] = 0;
 8000c2a:	4b40      	ldr	r3, [pc, #256]	@ (8000d2c <menu+0x82c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	4b3f      	ldr	r3, [pc, #252]	@ (8000d30 <menu+0x830>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8000c38:	4b3e      	ldr	r3, [pc, #248]	@ (8000d34 <menu+0x834>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
 8000c3e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d30 <menu+0x830>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8000c46:	4b3c      	ldr	r3, [pc, #240]	@ (8000d38 <menu+0x838>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	4b38      	ldr	r3, [pc, #224]	@ (8000d30 <menu+0x830>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8000c54:	4b39      	ldr	r3, [pc, #228]	@ (8000d3c <menu+0x83c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	4b35      	ldr	r3, [pc, #212]	@ (8000d30 <menu+0x830>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8000c62:	4b37      	ldr	r3, [pc, #220]	@ (8000d40 <menu+0x840>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	4b31      	ldr	r3, [pc, #196]	@ (8000d30 <menu+0x830>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8000c70:	4b34      	ldr	r3, [pc, #208]	@ (8000d44 <menu+0x844>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	4b2e      	ldr	r3, [pc, #184]	@ (8000d30 <menu+0x830>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <menu+0x7e8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	4b2a      	ldr	r3, [pc, #168]	@ (8000d30 <menu+0x830>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cfc <menu+0x7fc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
 8000c92:	4b27      	ldr	r3, [pc, #156]	@ (8000d30 <menu+0x830>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8000c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d08 <menu+0x808>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	4b23      	ldr	r3, [pc, #140]	@ (8000d30 <menu+0x830>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d18 <menu+0x818>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
 8000cae:	4b20      	ldr	r3, [pc, #128]	@ (8000d30 <menu+0x830>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8000cb6:	4b24      	ldr	r3, [pc, #144]	@ (8000d48 <menu+0x848>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8000cbc:	4b23      	ldr	r3, [pc, #140]	@ (8000d4c <menu+0x84c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	f040 8103 	bne.w	8000ecc <menu+0x9cc>
		if(dilSecim == 0) {
 8000cc6:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <menu+0x7dc>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d142      	bne.n	8000d54 <menu+0x854>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8000cce:	4a20      	ldr	r2, [pc, #128]	@ (8000d50 <menu+0x850>)
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f7ff fbcd 	bl	8000472 <lcd_print>
 8000cd8:	e045      	b.n	8000d66 <menu+0x866>
 8000cda:	bf00      	nop
 8000cdc:	200000ea 	.word	0x200000ea
 8000ce0:	08009dc0 	.word	0x08009dc0
 8000ce4:	08009d2c 	.word	0x08009d2c
 8000ce8:	200000f1 	.word	0x200000f1
 8000cec:	200000a0 	.word	0x200000a0
 8000cf0:	200000cc 	.word	0x200000cc
 8000cf4:	08009dd0 	.word	0x08009dd0
 8000cf8:	08009de0 	.word	0x08009de0
 8000cfc:	200000f2 	.word	0x200000f2
 8000d00:	08009df0 	.word	0x08009df0
 8000d04:	08009e00 	.word	0x08009e00
 8000d08:	200000f3 	.word	0x200000f3
 8000d0c:	08009e10 	.word	0x08009e10
 8000d10:	08009e20 	.word	0x08009e20
 8000d14:	08009e30 	.word	0x08009e30
 8000d18:	200000f4 	.word	0x200000f4
 8000d1c:	08009e34 	.word	0x08009e34
 8000d20:	08009e48 	.word	0x08009e48
 8000d24:	40010800 	.word	0x40010800
 8000d28:	200000f8 	.word	0x200000f8
 8000d2c:	200000eb 	.word	0x200000eb
 8000d30:	20000060 	.word	0x20000060
 8000d34:	200000ec 	.word	0x200000ec
 8000d38:	200000ed 	.word	0x200000ed
 8000d3c:	200000ee 	.word	0x200000ee
 8000d40:	200000ef 	.word	0x200000ef
 8000d44:	200000f0 	.word	0x200000f0
 8000d48:	200000f5 	.word	0x200000f5
 8000d4c:	200000ca 	.word	0x200000ca
 8000d50:	08009e5c 	.word	0x08009e5c
		} else if(dilSecim == 1) {
 8000d54:	4b75      	ldr	r3, [pc, #468]	@ (8000f2c <menu+0xa2c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d104      	bne.n	8000d66 <menu+0x866>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8000d5c:	4a74      	ldr	r2, [pc, #464]	@ (8000f30 <menu+0xa30>)
 8000d5e:	2101      	movs	r1, #1
 8000d60:	2001      	movs	r0, #1
 8000d62:	f7ff fb86 	bl	8000472 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8000d66:	4b73      	ldr	r3, [pc, #460]	@ (8000f34 <menu+0xa34>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d003      	beq.n	8000d76 <menu+0x876>
 8000d6e:	4b71      	ldr	r3, [pc, #452]	@ (8000f34 <menu+0xa34>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d112      	bne.n	8000d9c <menu+0x89c>
			if(dilSecim == 0) {
 8000d76:	4b6d      	ldr	r3, [pc, #436]	@ (8000f2c <menu+0xa2c>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d105      	bne.n	8000d8a <menu+0x88a>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8000d7e:	4a6e      	ldr	r2, [pc, #440]	@ (8000f38 <menu+0xa38>)
 8000d80:	2101      	movs	r1, #1
 8000d82:	2002      	movs	r0, #2
 8000d84:	f7ff fb75 	bl	8000472 <lcd_print>
 8000d88:	e008      	b.n	8000d9c <menu+0x89c>
			} else if(dilSecim == 1) {
 8000d8a:	4b68      	ldr	r3, [pc, #416]	@ (8000f2c <menu+0xa2c>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d104      	bne.n	8000d9c <menu+0x89c>
				lcd_print(2, 1, "Tppng Mobil slct");
 8000d92:	4a6a      	ldr	r2, [pc, #424]	@ (8000f3c <menu+0xa3c>)
 8000d94:	2101      	movs	r1, #1
 8000d96:	2002      	movs	r0, #2
 8000d98:	f7ff fb6b 	bl	8000472 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8000d9c:	4b68      	ldr	r3, [pc, #416]	@ (8000f40 <menu+0xa40>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d116      	bne.n	8000dd2 <menu+0x8d2>
 8000da4:	4b63      	ldr	r3, [pc, #396]	@ (8000f34 <menu+0xa34>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d112      	bne.n	8000dd2 <menu+0x8d2>
			if(dilSecim == 0) {
 8000dac:	4b5f      	ldr	r3, [pc, #380]	@ (8000f2c <menu+0xa2c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d105      	bne.n	8000dc0 <menu+0x8c0>
				lcd_print(2, 1, "Bastikca cal.  ");
 8000db4:	4a63      	ldr	r2, [pc, #396]	@ (8000f44 <menu+0xa44>)
 8000db6:	2101      	movs	r1, #1
 8000db8:	2002      	movs	r0, #2
 8000dba:	f7ff fb5a 	bl	8000472 <lcd_print>
 8000dbe:	e008      	b.n	8000dd2 <menu+0x8d2>
			} else if(dilSecim == 1) {
 8000dc0:	4b5a      	ldr	r3, [pc, #360]	@ (8000f2c <menu+0xa2c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d104      	bne.n	8000dd2 <menu+0x8d2>
				lcd_print(2, 1, "Deadman Control");
 8000dc8:	4a5f      	ldr	r2, [pc, #380]	@ (8000f48 <menu+0xa48>)
 8000dca:	2101      	movs	r1, #1
 8000dcc:	2002      	movs	r0, #2
 8000dce:	f7ff fb50 	bl	8000472 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8000dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8000f40 <menu+0xa40>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d116      	bne.n	8000e08 <menu+0x908>
 8000dda:	4b56      	ldr	r3, [pc, #344]	@ (8000f34 <menu+0xa34>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d112      	bne.n	8000e08 <menu+0x908>
			if(dilSecim == 0) {
 8000de2:	4b52      	ldr	r3, [pc, #328]	@ (8000f2c <menu+0xa2c>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d105      	bne.n	8000df6 <menu+0x8f6>
				lcd_print(2, 1, "Bas gonder     ");
 8000dea:	4a58      	ldr	r2, [pc, #352]	@ (8000f4c <menu+0xa4c>)
 8000dec:	2101      	movs	r1, #1
 8000dee:	2002      	movs	r0, #2
 8000df0:	f7ff fb3f 	bl	8000472 <lcd_print>
 8000df4:	e008      	b.n	8000e08 <menu+0x908>
			} else if(dilSecim == 1) {
 8000df6:	4b4d      	ldr	r3, [pc, #308]	@ (8000f2c <menu+0xa2c>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d104      	bne.n	8000e08 <menu+0x908>
				lcd_print(2, 1, "Call & Send    ");
 8000dfe:	4a54      	ldr	r2, [pc, #336]	@ (8000f50 <menu+0xa50>)
 8000e00:	2101      	movs	r1, #1
 8000e02:	2002      	movs	r0, #2
 8000e04:	f7ff fb35 	bl	8000472 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000e08:	2102      	movs	r1, #2
 8000e0a:	4852      	ldr	r0, [pc, #328]	@ (8000f54 <menu+0xa54>)
 8000e0c:	f006 fb12 	bl	8007434 <HAL_GPIO_ReadPin>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d119      	bne.n	8000e4a <menu+0x94a>
 8000e16:	4b50      	ldr	r3, [pc, #320]	@ (8000f58 <menu+0xa58>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	f083 0301 	eor.w	r3, r3, #1
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d012      	beq.n	8000e4a <menu+0x94a>
 8000e24:	4b43      	ldr	r3, [pc, #268]	@ (8000f34 <menu+0xa34>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d10e      	bne.n	8000e4a <menu+0x94a>
			calismaSekli = calismaSekli + 1;
 8000e2c:	4b44      	ldr	r3, [pc, #272]	@ (8000f40 <menu+0xa40>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b42      	ldr	r3, [pc, #264]	@ (8000f40 <menu+0xa40>)
 8000e36:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8000e38:	4b41      	ldr	r3, [pc, #260]	@ (8000f40 <menu+0xa40>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d902      	bls.n	8000e46 <menu+0x946>
				calismaSekli = 0;
 8000e40:	4b3f      	ldr	r3, [pc, #252]	@ (8000f40 <menu+0xa40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000e46:	f002 fc83 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	4841      	ldr	r0, [pc, #260]	@ (8000f54 <menu+0xa54>)
 8000e4e:	f006 faf1 	bl	8007434 <HAL_GPIO_ReadPin>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d119      	bne.n	8000e8c <menu+0x98c>
 8000e58:	4b3f      	ldr	r3, [pc, #252]	@ (8000f58 <menu+0xa58>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	f083 0301 	eor.w	r3, r3, #1
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d012      	beq.n	8000e8c <menu+0x98c>
 8000e66:	4b33      	ldr	r3, [pc, #204]	@ (8000f34 <menu+0xa34>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10e      	bne.n	8000e8c <menu+0x98c>
			calismaSekli = calismaSekli - 1;
 8000e6e:	4b34      	ldr	r3, [pc, #208]	@ (8000f40 <menu+0xa40>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b32      	ldr	r3, [pc, #200]	@ (8000f40 <menu+0xa40>)
 8000e78:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8000e7a:	4b31      	ldr	r3, [pc, #196]	@ (8000f40 <menu+0xa40>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d002      	beq.n	8000e88 <menu+0x988>
	    		calismaSekli = 1;
 8000e82:	4b2f      	ldr	r3, [pc, #188]	@ (8000f40 <menu+0xa40>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000e88:	f002 fc62 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8000e8c:	2108      	movs	r1, #8
 8000e8e:	4831      	ldr	r0, [pc, #196]	@ (8000f54 <menu+0xa54>)
 8000e90:	f006 fad0 	bl	8007434 <HAL_GPIO_ReadPin>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d118      	bne.n	8000ecc <menu+0x9cc>
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f58 <menu+0xa58>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	f083 0301 	eor.w	r3, r3, #1
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d011      	beq.n	8000ecc <menu+0x9cc>
			eepromData[1] = calismaSekli;
 8000ea8:	4b25      	ldr	r3, [pc, #148]	@ (8000f40 <menu+0xa40>)
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	4b2b      	ldr	r3, [pc, #172]	@ (8000f5c <menu+0xa5c>)
 8000eae:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8000eb0:	4b23      	ldr	r3, [pc, #140]	@ (8000f40 <menu+0xa40>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d106      	bne.n	8000ec6 <menu+0x9c6>
				altLimit = 1;
 8000eb8:	4b29      	ldr	r3, [pc, #164]	@ (8000f60 <menu+0xa60>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8000ebe:	4b28      	ldr	r3, [pc, #160]	@ (8000f60 <menu+0xa60>)
 8000ec0:	781a      	ldrb	r2, [r3, #0]
 8000ec2:	4b26      	ldr	r3, [pc, #152]	@ (8000f5c <menu+0xa5c>)
 8000ec4:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8000ec6:	4b27      	ldr	r3, [pc, #156]	@ (8000f64 <menu+0xa64>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8000ecc:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <menu+0xa68>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	f040 80ad 	bne.w	8001030 <menu+0xb30>
		if(dilSecim == 0) {
 8000ed6:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <menu+0xa2c>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d105      	bne.n	8000eea <menu+0x9ea>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8000ede:	4a23      	ldr	r2, [pc, #140]	@ (8000f6c <menu+0xa6c>)
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f7ff fac5 	bl	8000472 <lcd_print>
 8000ee8:	e008      	b.n	8000efc <menu+0x9fc>
		} else if(dilSecim == 1) {
 8000eea:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <menu+0xa2c>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d104      	bne.n	8000efc <menu+0x9fc>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8000ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8000f70 <menu+0xa70>)
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f7ff fabb 	bl	8000472 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8000efc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <menu+0xa74>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d13d      	bne.n	8000f80 <menu+0xa80>
			if(dilSecim == 0) {
 8000f04:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <menu+0xa2c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d105      	bne.n	8000f18 <menu+0xa18>
				lcd_print(2, 1, "Pasif           ");
 8000f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8000f78 <menu+0xa78>)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	2002      	movs	r0, #2
 8000f12:	f7ff faae 	bl	8000472 <lcd_print>
 8000f16:	e03c      	b.n	8000f92 <menu+0xa92>
			} else if(dilSecim == 1) {
 8000f18:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <menu+0xa2c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d138      	bne.n	8000f92 <menu+0xa92>
				lcd_print(2, 1, "Passive         ");
 8000f20:	4a16      	ldr	r2, [pc, #88]	@ (8000f7c <menu+0xa7c>)
 8000f22:	2101      	movs	r1, #1
 8000f24:	2002      	movs	r0, #2
 8000f26:	f7ff faa4 	bl	8000472 <lcd_print>
 8000f2a:	e032      	b.n	8000f92 <menu+0xa92>
 8000f2c:	200000ea 	.word	0x200000ea
 8000f30:	08009e70 	.word	0x08009e70
 8000f34:	200000d9 	.word	0x200000d9
 8000f38:	08009e84 	.word	0x08009e84
 8000f3c:	08009e98 	.word	0x08009e98
 8000f40:	200000cb 	.word	0x200000cb
 8000f44:	08009eac 	.word	0x08009eac
 8000f48:	08009ebc 	.word	0x08009ebc
 8000f4c:	08009ecc 	.word	0x08009ecc
 8000f50:	08009edc 	.word	0x08009edc
 8000f54:	40010800 	.word	0x40010800
 8000f58:	200000f8 	.word	0x200000f8
 8000f5c:	20000060 	.word	0x20000060
 8000f60:	200000d0 	.word	0x200000d0
 8000f64:	200000f5 	.word	0x200000f5
 8000f68:	200000ca 	.word	0x200000ca
 8000f6c:	08009eec 	.word	0x08009eec
 8000f70:	08009f00 	.word	0x08009f00
 8000f74:	200000ce 	.word	0x200000ce
 8000f78:	08009f14 	.word	0x08009f14
 8000f7c:	08009f28 	.word	0x08009f28
			}
		} else if(emniyetCercevesi == 1) {
 8000f80:	4b95      	ldr	r3, [pc, #596]	@ (80011d8 <menu+0xcd8>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d104      	bne.n	8000f92 <menu+0xa92>
			lcd_print(2, 1, "OND Safety     ");
 8000f88:	4a94      	ldr	r2, [pc, #592]	@ (80011dc <menu+0xcdc>)
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f7ff fa70 	bl	8000472 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8000f92:	2102      	movs	r1, #2
 8000f94:	4892      	ldr	r0, [pc, #584]	@ (80011e0 <menu+0xce0>)
 8000f96:	f006 fa4d 	bl	8007434 <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d115      	bne.n	8000fcc <menu+0xacc>
 8000fa0:	4b90      	ldr	r3, [pc, #576]	@ (80011e4 <menu+0xce4>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	f083 0301 	eor.w	r3, r3, #1
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00e      	beq.n	8000fcc <menu+0xacc>
			emniyetCercevesi = emniyetCercevesi + 1;
 8000fae:	4b8a      	ldr	r3, [pc, #552]	@ (80011d8 <menu+0xcd8>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4b88      	ldr	r3, [pc, #544]	@ (80011d8 <menu+0xcd8>)
 8000fb8:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8000fba:	4b87      	ldr	r3, [pc, #540]	@ (80011d8 <menu+0xcd8>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d902      	bls.n	8000fc8 <menu+0xac8>
				emniyetCercevesi = 0;
 8000fc2:	4b85      	ldr	r3, [pc, #532]	@ (80011d8 <menu+0xcd8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000fc8:	f002 fbc2 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8000fcc:	2104      	movs	r1, #4
 8000fce:	4884      	ldr	r0, [pc, #528]	@ (80011e0 <menu+0xce0>)
 8000fd0:	f006 fa30 	bl	8007434 <HAL_GPIO_ReadPin>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d115      	bne.n	8001006 <menu+0xb06>
 8000fda:	4b82      	ldr	r3, [pc, #520]	@ (80011e4 <menu+0xce4>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	f083 0301 	eor.w	r3, r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00e      	beq.n	8001006 <menu+0xb06>
			emniyetCercevesi = emniyetCercevesi - 1;
 8000fe8:	4b7b      	ldr	r3, [pc, #492]	@ (80011d8 <menu+0xcd8>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b79      	ldr	r3, [pc, #484]	@ (80011d8 <menu+0xcd8>)
 8000ff2:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8000ff4:	4b78      	ldr	r3, [pc, #480]	@ (80011d8 <menu+0xcd8>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d002      	beq.n	8001002 <menu+0xb02>
		   		emniyetCercevesi = 1;
 8000ffc:	4b76      	ldr	r3, [pc, #472]	@ (80011d8 <menu+0xcd8>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001002:	f002 fba5 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001006:	2108      	movs	r1, #8
 8001008:	4875      	ldr	r0, [pc, #468]	@ (80011e0 <menu+0xce0>)
 800100a:	f006 fa13 	bl	8007434 <HAL_GPIO_ReadPin>
 800100e:	4603      	mov	r3, r0
 8001010:	2b01      	cmp	r3, #1
 8001012:	d10d      	bne.n	8001030 <menu+0xb30>
 8001014:	4b73      	ldr	r3, [pc, #460]	@ (80011e4 <menu+0xce4>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	f083 0301 	eor.w	r3, r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d006      	beq.n	8001030 <menu+0xb30>
			eepromData[2] = emniyetCercevesi;
 8001022:	4b6d      	ldr	r3, [pc, #436]	@ (80011d8 <menu+0xcd8>)
 8001024:	781a      	ldrb	r2, [r3, #0]
 8001026:	4b70      	ldr	r3, [pc, #448]	@ (80011e8 <menu+0xce8>)
 8001028:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 800102a:	4b70      	ldr	r3, [pc, #448]	@ (80011ec <menu+0xcec>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001030:	4b6f      	ldr	r3, [pc, #444]	@ (80011f0 <menu+0xcf0>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b04      	cmp	r3, #4
 8001036:	f040 8091 	bne.w	800115c <menu+0xc5c>
		if(dilSecim == 0) {
 800103a:	4b6e      	ldr	r3, [pc, #440]	@ (80011f4 <menu+0xcf4>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d105      	bne.n	800104e <menu+0xb4e>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001042:	4a6d      	ldr	r2, [pc, #436]	@ (80011f8 <menu+0xcf8>)
 8001044:	2101      	movs	r1, #1
 8001046:	2001      	movs	r0, #1
 8001048:	f7ff fa13 	bl	8000472 <lcd_print>
 800104c:	e008      	b.n	8001060 <menu+0xb60>
		} else if(dilSecim == 1) {
 800104e:	4b69      	ldr	r3, [pc, #420]	@ (80011f4 <menu+0xcf4>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d104      	bne.n	8001060 <menu+0xb60>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001056:	4a69      	ldr	r2, [pc, #420]	@ (80011fc <menu+0xcfc>)
 8001058:	2101      	movs	r1, #1
 800105a:	2001      	movs	r0, #1
 800105c:	f7ff fa09 	bl	8000472 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001060:	4b67      	ldr	r3, [pc, #412]	@ (8001200 <menu+0xd00>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d113      	bne.n	8001090 <menu+0xb90>
			if(dilSecim == 0) {
 8001068:	4b62      	ldr	r3, [pc, #392]	@ (80011f4 <menu+0xcf4>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d105      	bne.n	800107c <menu+0xb7c>
				lcd_print(2, 1, "Pasif           ");
 8001070:	4a64      	ldr	r2, [pc, #400]	@ (8001204 <menu+0xd04>)
 8001072:	2101      	movs	r1, #1
 8001074:	2002      	movs	r0, #2
 8001076:	f7ff f9fc 	bl	8000472 <lcd_print>
 800107a:	e020      	b.n	80010be <menu+0xbbe>
			} else if(dilSecim == 1) {
 800107c:	4b5d      	ldr	r3, [pc, #372]	@ (80011f4 <menu+0xcf4>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d11c      	bne.n	80010be <menu+0xbbe>
				lcd_print(2, 1, "Passive         ");
 8001084:	4a60      	ldr	r2, [pc, #384]	@ (8001208 <menu+0xd08>)
 8001086:	2101      	movs	r1, #1
 8001088:	2002      	movs	r0, #2
 800108a:	f7ff f9f2 	bl	8000472 <lcd_print>
 800108e:	e016      	b.n	80010be <menu+0xbbe>
			}
		} else if(yavaslamaLimit == 1) {
 8001090:	4b5b      	ldr	r3, [pc, #364]	@ (8001200 <menu+0xd00>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d112      	bne.n	80010be <menu+0xbbe>
			if(dilSecim == 0) {
 8001098:	4b56      	ldr	r3, [pc, #344]	@ (80011f4 <menu+0xcf4>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d105      	bne.n	80010ac <menu+0xbac>
				lcd_print(2, 1, "Aktif           ");
 80010a0:	4a5a      	ldr	r2, [pc, #360]	@ (800120c <menu+0xd0c>)
 80010a2:	2101      	movs	r1, #1
 80010a4:	2002      	movs	r0, #2
 80010a6:	f7ff f9e4 	bl	8000472 <lcd_print>
 80010aa:	e008      	b.n	80010be <menu+0xbbe>
			} else if(dilSecim == 1) {
 80010ac:	4b51      	ldr	r3, [pc, #324]	@ (80011f4 <menu+0xcf4>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d104      	bne.n	80010be <menu+0xbbe>
				lcd_print(2, 1, "Active          ");
 80010b4:	4a56      	ldr	r2, [pc, #344]	@ (8001210 <menu+0xd10>)
 80010b6:	2101      	movs	r1, #1
 80010b8:	2002      	movs	r0, #2
 80010ba:	f7ff f9da 	bl	8000472 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80010be:	2102      	movs	r1, #2
 80010c0:	4847      	ldr	r0, [pc, #284]	@ (80011e0 <menu+0xce0>)
 80010c2:	f006 f9b7 	bl	8007434 <HAL_GPIO_ReadPin>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d115      	bne.n	80010f8 <menu+0xbf8>
 80010cc:	4b45      	ldr	r3, [pc, #276]	@ (80011e4 <menu+0xce4>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	f083 0301 	eor.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00e      	beq.n	80010f8 <menu+0xbf8>
			yavaslamaLimit = yavaslamaLimit + 1;
 80010da:	4b49      	ldr	r3, [pc, #292]	@ (8001200 <menu+0xd00>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b47      	ldr	r3, [pc, #284]	@ (8001200 <menu+0xd00>)
 80010e4:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80010e6:	4b46      	ldr	r3, [pc, #280]	@ (8001200 <menu+0xd00>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d902      	bls.n	80010f4 <menu+0xbf4>
				yavaslamaLimit = 0;
 80010ee:	4b44      	ldr	r3, [pc, #272]	@ (8001200 <menu+0xd00>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80010f4:	f002 fb2c 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80010f8:	2104      	movs	r1, #4
 80010fa:	4839      	ldr	r0, [pc, #228]	@ (80011e0 <menu+0xce0>)
 80010fc:	f006 f99a 	bl	8007434 <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	2b01      	cmp	r3, #1
 8001104:	d115      	bne.n	8001132 <menu+0xc32>
 8001106:	4b37      	ldr	r3, [pc, #220]	@ (80011e4 <menu+0xce4>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	f083 0301 	eor.w	r3, r3, #1
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00e      	beq.n	8001132 <menu+0xc32>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001114:	4b3a      	ldr	r3, [pc, #232]	@ (8001200 <menu+0xd00>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	3b01      	subs	r3, #1
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b38      	ldr	r3, [pc, #224]	@ (8001200 <menu+0xd00>)
 800111e:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001120:	4b37      	ldr	r3, [pc, #220]	@ (8001200 <menu+0xd00>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <menu+0xc2e>
		   		yavaslamaLimit = 1;
 8001128:	4b35      	ldr	r3, [pc, #212]	@ (8001200 <menu+0xd00>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800112e:	f002 fb0f 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001132:	2108      	movs	r1, #8
 8001134:	482a      	ldr	r0, [pc, #168]	@ (80011e0 <menu+0xce0>)
 8001136:	f006 f97d 	bl	8007434 <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b01      	cmp	r3, #1
 800113e:	d10d      	bne.n	800115c <menu+0xc5c>
 8001140:	4b28      	ldr	r3, [pc, #160]	@ (80011e4 <menu+0xce4>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	f083 0301 	eor.w	r3, r3, #1
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <menu+0xc5c>
			eepromData[4] = yavaslamaLimit;
 800114e:	4b2c      	ldr	r3, [pc, #176]	@ (8001200 <menu+0xd00>)
 8001150:	781a      	ldrb	r2, [r3, #0]
 8001152:	4b25      	ldr	r3, [pc, #148]	@ (80011e8 <menu+0xce8>)
 8001154:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001156:	4b25      	ldr	r3, [pc, #148]	@ (80011ec <menu+0xcec>)
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 800115c:	4b24      	ldr	r3, [pc, #144]	@ (80011f0 <menu+0xcf0>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b05      	cmp	r3, #5
 8001162:	f040 80dd 	bne.w	8001320 <menu+0xe20>
		if(dilSecim == 0) {
 8001166:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <menu+0xcf4>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d105      	bne.n	800117a <menu+0xc7a>
			lcd_print(1, 1, "ALT LIMIT       ");
 800116e:	4a29      	ldr	r2, [pc, #164]	@ (8001214 <menu+0xd14>)
 8001170:	2101      	movs	r1, #1
 8001172:	2001      	movs	r0, #1
 8001174:	f7ff f97d 	bl	8000472 <lcd_print>
 8001178:	e008      	b.n	800118c <menu+0xc8c>
		} else if(dilSecim == 1) {
 800117a:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <menu+0xcf4>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d104      	bne.n	800118c <menu+0xc8c>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001182:	4a25      	ldr	r2, [pc, #148]	@ (8001218 <menu+0xd18>)
 8001184:	2101      	movs	r1, #1
 8001186:	2001      	movs	r0, #1
 8001188:	f7ff f973 	bl	8000472 <lcd_print>
		}

		if(altLimit == 0) {
 800118c:	4b23      	ldr	r3, [pc, #140]	@ (800121c <menu+0xd1c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d113      	bne.n	80011bc <menu+0xcbc>
			if(dilSecim == 0) {
 8001194:	4b17      	ldr	r3, [pc, #92]	@ (80011f4 <menu+0xcf4>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d105      	bne.n	80011a8 <menu+0xca8>
				lcd_print(2, 1, "Pasif           ");
 800119c:	4a19      	ldr	r2, [pc, #100]	@ (8001204 <menu+0xd04>)
 800119e:	2101      	movs	r1, #1
 80011a0:	2002      	movs	r0, #2
 80011a2:	f7ff f966 	bl	8000472 <lcd_print>
 80011a6:	e044      	b.n	8001232 <menu+0xd32>
			} else if(dilSecim == 1) {
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <menu+0xcf4>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d140      	bne.n	8001232 <menu+0xd32>
				lcd_print(2, 1, "Passive         ");
 80011b0:	4a15      	ldr	r2, [pc, #84]	@ (8001208 <menu+0xd08>)
 80011b2:	2101      	movs	r1, #1
 80011b4:	2002      	movs	r0, #2
 80011b6:	f7ff f95c 	bl	8000472 <lcd_print>
 80011ba:	e03a      	b.n	8001232 <menu+0xd32>
			}
		} else if(altLimit == 1) {
 80011bc:	4b17      	ldr	r3, [pc, #92]	@ (800121c <menu+0xd1c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d136      	bne.n	8001232 <menu+0xd32>
			if(dilSecim == 0){
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <menu+0xcf4>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d129      	bne.n	8001220 <menu+0xd20>
				lcd_print(2, 1, "Aktif           ");
 80011cc:	4a0f      	ldr	r2, [pc, #60]	@ (800120c <menu+0xd0c>)
 80011ce:	2101      	movs	r1, #1
 80011d0:	2002      	movs	r0, #2
 80011d2:	f7ff f94e 	bl	8000472 <lcd_print>
 80011d6:	e02c      	b.n	8001232 <menu+0xd32>
 80011d8:	200000ce 	.word	0x200000ce
 80011dc:	08009f3c 	.word	0x08009f3c
 80011e0:	40010800 	.word	0x40010800
 80011e4:	200000f8 	.word	0x200000f8
 80011e8:	20000060 	.word	0x20000060
 80011ec:	200000f5 	.word	0x200000f5
 80011f0:	200000ca 	.word	0x200000ca
 80011f4:	200000ea 	.word	0x200000ea
 80011f8:	08009f4c 	.word	0x08009f4c
 80011fc:	08009f60 	.word	0x08009f60
 8001200:	200000cf 	.word	0x200000cf
 8001204:	08009f14 	.word	0x08009f14
 8001208:	08009f28 	.word	0x08009f28
 800120c:	08009f74 	.word	0x08009f74
 8001210:	08009f88 	.word	0x08009f88
 8001214:	08009f9c 	.word	0x08009f9c
 8001218:	08009fb0 	.word	0x08009fb0
 800121c:	200000d0 	.word	0x200000d0
			} else if(dilSecim == 1){
 8001220:	4b92      	ldr	r3, [pc, #584]	@ (800146c <menu+0xf6c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d104      	bne.n	8001232 <menu+0xd32>
				lcd_print(2, 1, "Active          ");
 8001228:	4a91      	ldr	r2, [pc, #580]	@ (8001470 <menu+0xf70>)
 800122a:	2101      	movs	r1, #1
 800122c:	2002      	movs	r0, #2
 800122e:	f7ff f920 	bl	8000472 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001232:	2102      	movs	r1, #2
 8001234:	488f      	ldr	r0, [pc, #572]	@ (8001474 <menu+0xf74>)
 8001236:	f006 f8fd 	bl	8007434 <HAL_GPIO_ReadPin>
 800123a:	4603      	mov	r3, r0
 800123c:	2b01      	cmp	r3, #1
 800123e:	d119      	bne.n	8001274 <menu+0xd74>
 8001240:	4b8d      	ldr	r3, [pc, #564]	@ (8001478 <menu+0xf78>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	f083 0301 	eor.w	r3, r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d012      	beq.n	8001274 <menu+0xd74>
 800124e:	4b8b      	ldr	r3, [pc, #556]	@ (800147c <menu+0xf7c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10e      	bne.n	8001274 <menu+0xd74>
			altLimit = altLimit + 1;
 8001256:	4b8a      	ldr	r3, [pc, #552]	@ (8001480 <menu+0xf80>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4b88      	ldr	r3, [pc, #544]	@ (8001480 <menu+0xf80>)
 8001260:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001262:	4b87      	ldr	r3, [pc, #540]	@ (8001480 <menu+0xf80>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d902      	bls.n	8001270 <menu+0xd70>
				altLimit = 0;
 800126a:	4b85      	ldr	r3, [pc, #532]	@ (8001480 <menu+0xf80>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001270:	f002 fa6e 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001274:	2104      	movs	r1, #4
 8001276:	487f      	ldr	r0, [pc, #508]	@ (8001474 <menu+0xf74>)
 8001278:	f006 f8dc 	bl	8007434 <HAL_GPIO_ReadPin>
 800127c:	4603      	mov	r3, r0
 800127e:	2b01      	cmp	r3, #1
 8001280:	d119      	bne.n	80012b6 <menu+0xdb6>
 8001282:	4b7d      	ldr	r3, [pc, #500]	@ (8001478 <menu+0xf78>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	f083 0301 	eor.w	r3, r3, #1
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d012      	beq.n	80012b6 <menu+0xdb6>
 8001290:	4b7a      	ldr	r3, [pc, #488]	@ (800147c <menu+0xf7c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10e      	bne.n	80012b6 <menu+0xdb6>
			altLimit = altLimit - 1;
 8001298:	4b79      	ldr	r3, [pc, #484]	@ (8001480 <menu+0xf80>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	3b01      	subs	r3, #1
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b77      	ldr	r3, [pc, #476]	@ (8001480 <menu+0xf80>)
 80012a2:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80012a4:	4b76      	ldr	r3, [pc, #472]	@ (8001480 <menu+0xf80>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <menu+0xdb2>
		   		altLimit = 1;
 80012ac:	4b74      	ldr	r3, [pc, #464]	@ (8001480 <menu+0xf80>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80012b2:	f002 fa4d 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80012b6:	2108      	movs	r1, #8
 80012b8:	486e      	ldr	r0, [pc, #440]	@ (8001474 <menu+0xf74>)
 80012ba:	f006 f8bb 	bl	8007434 <HAL_GPIO_ReadPin>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d12d      	bne.n	8001320 <menu+0xe20>
 80012c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001478 <menu+0xf78>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	f083 0301 	eor.w	r3, r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d026      	beq.n	8001320 <menu+0xe20>
			eepromData[5] = altLimit;
 80012d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001480 <menu+0xf80>)
 80012d4:	781a      	ldrb	r2, [r3, #0]
 80012d6:	4b6b      	ldr	r3, [pc, #428]	@ (8001484 <menu+0xf84>)
 80012d8:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80012da:	4b69      	ldr	r3, [pc, #420]	@ (8001480 <menu+0xf80>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d110      	bne.n	8001304 <menu+0xe04>
 80012e2:	4b69      	ldr	r3, [pc, #420]	@ (8001488 <menu+0xf88>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <menu+0xdf2>
 80012ea:	4b67      	ldr	r3, [pc, #412]	@ (8001488 <menu+0xf88>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d108      	bne.n	8001304 <menu+0xe04>
				kapiTablaAcKonum = 3;
 80012f2:	4b65      	ldr	r3, [pc, #404]	@ (8001488 <menu+0xf88>)
 80012f4:	2203      	movs	r2, #3
 80012f6:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80012f8:	4b63      	ldr	r3, [pc, #396]	@ (8001488 <menu+0xf88>)
 80012fa:	781a      	ldrb	r2, [r3, #0]
 80012fc:	4b61      	ldr	r3, [pc, #388]	@ (8001484 <menu+0xf84>)
 80012fe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001302:	e00a      	b.n	800131a <menu+0xe1a>
			} else if(altLimit == 0) {
 8001304:	4b5e      	ldr	r3, [pc, #376]	@ (8001480 <menu+0xf80>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d106      	bne.n	800131a <menu+0xe1a>
				platformSilindirTipi = 0;
 800130c:	4b5f      	ldr	r3, [pc, #380]	@ (800148c <menu+0xf8c>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001312:	4b5e      	ldr	r3, [pc, #376]	@ (800148c <menu+0xf8c>)
 8001314:	781a      	ldrb	r2, [r3, #0]
 8001316:	4b5b      	ldr	r3, [pc, #364]	@ (8001484 <menu+0xf84>)
 8001318:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800131a:	4b5d      	ldr	r3, [pc, #372]	@ (8001490 <menu+0xf90>)
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001320:	4b5c      	ldr	r3, [pc, #368]	@ (8001494 <menu+0xf94>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b06      	cmp	r3, #6
 8001326:	f040 8091 	bne.w	800144c <menu+0xf4c>
		if(dilSecim == 0) {
 800132a:	4b50      	ldr	r3, [pc, #320]	@ (800146c <menu+0xf6c>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d105      	bne.n	800133e <menu+0xe3e>
			lcd_print(1, 1, "BASINC SALTERI ");
 8001332:	4a59      	ldr	r2, [pc, #356]	@ (8001498 <menu+0xf98>)
 8001334:	2101      	movs	r1, #1
 8001336:	2001      	movs	r0, #1
 8001338:	f7ff f89b 	bl	8000472 <lcd_print>
 800133c:	e008      	b.n	8001350 <menu+0xe50>
		} else if(dilSecim == 1){
 800133e:	4b4b      	ldr	r3, [pc, #300]	@ (800146c <menu+0xf6c>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d104      	bne.n	8001350 <menu+0xe50>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8001346:	4a55      	ldr	r2, [pc, #340]	@ (800149c <menu+0xf9c>)
 8001348:	2101      	movs	r1, #1
 800134a:	2001      	movs	r0, #1
 800134c:	f7ff f891 	bl	8000472 <lcd_print>
		}
		if(basincSalteri == 0){
 8001350:	4b53      	ldr	r3, [pc, #332]	@ (80014a0 <menu+0xfa0>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d113      	bne.n	8001380 <menu+0xe80>
			if(dilSecim == 0) {
 8001358:	4b44      	ldr	r3, [pc, #272]	@ (800146c <menu+0xf6c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d105      	bne.n	800136c <menu+0xe6c>
				lcd_print(2, 1, "Pasif           ");
 8001360:	4a50      	ldr	r2, [pc, #320]	@ (80014a4 <menu+0xfa4>)
 8001362:	2101      	movs	r1, #1
 8001364:	2002      	movs	r0, #2
 8001366:	f7ff f884 	bl	8000472 <lcd_print>
 800136a:	e020      	b.n	80013ae <menu+0xeae>
			} else if(dilSecim == 1){
 800136c:	4b3f      	ldr	r3, [pc, #252]	@ (800146c <menu+0xf6c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d11c      	bne.n	80013ae <menu+0xeae>
				lcd_print(2, 1, "Passive         ");
 8001374:	4a4c      	ldr	r2, [pc, #304]	@ (80014a8 <menu+0xfa8>)
 8001376:	2101      	movs	r1, #1
 8001378:	2002      	movs	r0, #2
 800137a:	f7ff f87a 	bl	8000472 <lcd_print>
 800137e:	e016      	b.n	80013ae <menu+0xeae>
			}
		} else if(basincSalteri == 1) {
 8001380:	4b47      	ldr	r3, [pc, #284]	@ (80014a0 <menu+0xfa0>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d112      	bne.n	80013ae <menu+0xeae>
			if(dilSecim == 0) {
 8001388:	4b38      	ldr	r3, [pc, #224]	@ (800146c <menu+0xf6c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d105      	bne.n	800139c <menu+0xe9c>
				lcd_print(2, 1, "Aktif           ");
 8001390:	4a46      	ldr	r2, [pc, #280]	@ (80014ac <menu+0xfac>)
 8001392:	2101      	movs	r1, #1
 8001394:	2002      	movs	r0, #2
 8001396:	f7ff f86c 	bl	8000472 <lcd_print>
 800139a:	e008      	b.n	80013ae <menu+0xeae>
			} else if(dilSecim == 1) {
 800139c:	4b33      	ldr	r3, [pc, #204]	@ (800146c <menu+0xf6c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d104      	bne.n	80013ae <menu+0xeae>
				lcd_print(2, 1, "Active          ");
 80013a4:	4a32      	ldr	r2, [pc, #200]	@ (8001470 <menu+0xf70>)
 80013a6:	2101      	movs	r1, #1
 80013a8:	2002      	movs	r0, #2
 80013aa:	f7ff f862 	bl	8000472 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80013ae:	2102      	movs	r1, #2
 80013b0:	4830      	ldr	r0, [pc, #192]	@ (8001474 <menu+0xf74>)
 80013b2:	f006 f83f 	bl	8007434 <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d115      	bne.n	80013e8 <menu+0xee8>
 80013bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001478 <menu+0xf78>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	f083 0301 	eor.w	r3, r3, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00e      	beq.n	80013e8 <menu+0xee8>
			basincSalteri = basincSalteri + 1;
 80013ca:	4b35      	ldr	r3, [pc, #212]	@ (80014a0 <menu+0xfa0>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4b33      	ldr	r3, [pc, #204]	@ (80014a0 <menu+0xfa0>)
 80013d4:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80013d6:	4b32      	ldr	r3, [pc, #200]	@ (80014a0 <menu+0xfa0>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d902      	bls.n	80013e4 <menu+0xee4>
				basincSalteri = 0;
 80013de:	4b30      	ldr	r3, [pc, #192]	@ (80014a0 <menu+0xfa0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80013e4:	f002 f9b4 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80013e8:	2104      	movs	r1, #4
 80013ea:	4822      	ldr	r0, [pc, #136]	@ (8001474 <menu+0xf74>)
 80013ec:	f006 f822 	bl	8007434 <HAL_GPIO_ReadPin>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d115      	bne.n	8001422 <menu+0xf22>
 80013f6:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <menu+0xf78>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	f083 0301 	eor.w	r3, r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00e      	beq.n	8001422 <menu+0xf22>
			basincSalteri = basincSalteri - 1;
 8001404:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <menu+0xfa0>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	3b01      	subs	r3, #1
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b24      	ldr	r3, [pc, #144]	@ (80014a0 <menu+0xfa0>)
 800140e:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001410:	4b23      	ldr	r3, [pc, #140]	@ (80014a0 <menu+0xfa0>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <menu+0xf1e>
		   		basincSalteri = 1;
 8001418:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <menu+0xfa0>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800141e:	f002 f997 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001422:	2108      	movs	r1, #8
 8001424:	4813      	ldr	r0, [pc, #76]	@ (8001474 <menu+0xf74>)
 8001426:	f006 f805 	bl	8007434 <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	2b01      	cmp	r3, #1
 800142e:	d10d      	bne.n	800144c <menu+0xf4c>
 8001430:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <menu+0xf78>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	f083 0301 	eor.w	r3, r3, #1
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <menu+0xf4c>
			eepromData[6] = basincSalteri;
 800143e:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <menu+0xfa0>)
 8001440:	781a      	ldrb	r2, [r3, #0]
 8001442:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <menu+0xf84>)
 8001444:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001446:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <menu+0xf90>)
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <menu+0xf94>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b07      	cmp	r3, #7
 8001452:	f040 80f1 	bne.w	8001638 <menu+0x1138>
		if(dilSecim == 0) {
 8001456:	4b05      	ldr	r3, [pc, #20]	@ (800146c <menu+0xf6c>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d12a      	bne.n	80014b4 <menu+0xfb4>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800145e:	4a14      	ldr	r2, [pc, #80]	@ (80014b0 <menu+0xfb0>)
 8001460:	2101      	movs	r1, #1
 8001462:	2001      	movs	r0, #1
 8001464:	f7ff f805 	bl	8000472 <lcd_print>
 8001468:	e02d      	b.n	80014c6 <menu+0xfc6>
 800146a:	bf00      	nop
 800146c:	200000ea 	.word	0x200000ea
 8001470:	08009f88 	.word	0x08009f88
 8001474:	40010800 	.word	0x40010800
 8001478:	200000f8 	.word	0x200000f8
 800147c:	200000cb 	.word	0x200000cb
 8001480:	200000d0 	.word	0x200000d0
 8001484:	20000060 	.word	0x20000060
 8001488:	200000d7 	.word	0x200000d7
 800148c:	200000dd 	.word	0x200000dd
 8001490:	200000f5 	.word	0x200000f5
 8001494:	200000ca 	.word	0x200000ca
 8001498:	08009fc4 	.word	0x08009fc4
 800149c:	08009fd4 	.word	0x08009fd4
 80014a0:	200000d1 	.word	0x200000d1
 80014a4:	08009f14 	.word	0x08009f14
 80014a8:	08009f28 	.word	0x08009f28
 80014ac:	08009f74 	.word	0x08009f74
 80014b0:	08009fe4 	.word	0x08009fe4
		} else if(dilSecim == 1){
 80014b4:	4b7f      	ldr	r3, [pc, #508]	@ (80016b4 <menu+0x11b4>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d104      	bne.n	80014c6 <menu+0xfc6>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80014bc:	4a7e      	ldr	r2, [pc, #504]	@ (80016b8 <menu+0x11b8>)
 80014be:	2101      	movs	r1, #1
 80014c0:	2001      	movs	r0, #1
 80014c2:	f7fe ffd6 	bl	8000472 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80014c6:	4b7d      	ldr	r3, [pc, #500]	@ (80016bc <menu+0x11bc>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d113      	bne.n	80014f6 <menu+0xff6>
			if(dilSecim == 0) {
 80014ce:	4b79      	ldr	r3, [pc, #484]	@ (80016b4 <menu+0x11b4>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d105      	bne.n	80014e2 <menu+0xfe2>
				lcd_print(2, 1, "Pasif           ");
 80014d6:	4a7a      	ldr	r2, [pc, #488]	@ (80016c0 <menu+0x11c0>)
 80014d8:	2101      	movs	r1, #1
 80014da:	2002      	movs	r0, #2
 80014dc:	f7fe ffc9 	bl	8000472 <lcd_print>
 80014e0:	e050      	b.n	8001584 <menu+0x1084>
			} else if(dilSecim == 1){
 80014e2:	4b74      	ldr	r3, [pc, #464]	@ (80016b4 <menu+0x11b4>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d14c      	bne.n	8001584 <menu+0x1084>
				lcd_print(2, 1, "Passive         ");
 80014ea:	4a76      	ldr	r2, [pc, #472]	@ (80016c4 <menu+0x11c4>)
 80014ec:	2101      	movs	r1, #1
 80014ee:	2002      	movs	r0, #2
 80014f0:	f7fe ffbf 	bl	8000472 <lcd_print>
 80014f4:	e046      	b.n	8001584 <menu+0x1084>
			}
		} else if(kapiSecimleri == 1) {
 80014f6:	4b71      	ldr	r3, [pc, #452]	@ (80016bc <menu+0x11bc>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d113      	bne.n	8001526 <menu+0x1026>
			if(dilSecim == 0) {
 80014fe:	4b6d      	ldr	r3, [pc, #436]	@ (80016b4 <menu+0x11b4>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d105      	bne.n	8001512 <menu+0x1012>
				lcd_print(2, 1, "Kat kapisi aktif");
 8001506:	4a70      	ldr	r2, [pc, #448]	@ (80016c8 <menu+0x11c8>)
 8001508:	2101      	movs	r1, #1
 800150a:	2002      	movs	r0, #2
 800150c:	f7fe ffb1 	bl	8000472 <lcd_print>
 8001510:	e038      	b.n	8001584 <menu+0x1084>
			} else if(dilSecim == 1) {
 8001512:	4b68      	ldr	r3, [pc, #416]	@ (80016b4 <menu+0x11b4>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d134      	bne.n	8001584 <menu+0x1084>
				lcd_print(2, 1, "Floor door act  ");
 800151a:	4a6c      	ldr	r2, [pc, #432]	@ (80016cc <menu+0x11cc>)
 800151c:	2101      	movs	r1, #1
 800151e:	2002      	movs	r0, #2
 8001520:	f7fe ffa7 	bl	8000472 <lcd_print>
 8001524:	e02e      	b.n	8001584 <menu+0x1084>
			}
		} else if(kapiSecimleri == 2){
 8001526:	4b65      	ldr	r3, [pc, #404]	@ (80016bc <menu+0x11bc>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d113      	bne.n	8001556 <menu+0x1056>
			if(dilSecim == 0) {
 800152e:	4b61      	ldr	r3, [pc, #388]	@ (80016b4 <menu+0x11b4>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d105      	bne.n	8001542 <menu+0x1042>
				lcd_print(2, 1, "Tabla kapi aktif");
 8001536:	4a66      	ldr	r2, [pc, #408]	@ (80016d0 <menu+0x11d0>)
 8001538:	2101      	movs	r1, #1
 800153a:	2002      	movs	r0, #2
 800153c:	f7fe ff99 	bl	8000472 <lcd_print>
 8001540:	e020      	b.n	8001584 <menu+0x1084>
			} else if(dilSecim == 1) {
 8001542:	4b5c      	ldr	r3, [pc, #368]	@ (80016b4 <menu+0x11b4>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d11c      	bne.n	8001584 <menu+0x1084>
				lcd_print(2, 1, "Pltfrm door act ");
 800154a:	4a62      	ldr	r2, [pc, #392]	@ (80016d4 <menu+0x11d4>)
 800154c:	2101      	movs	r1, #1
 800154e:	2002      	movs	r0, #2
 8001550:	f7fe ff8f 	bl	8000472 <lcd_print>
 8001554:	e016      	b.n	8001584 <menu+0x1084>
			}
		} else if(kapiSecimleri == 3){
 8001556:	4b59      	ldr	r3, [pc, #356]	@ (80016bc <menu+0x11bc>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d112      	bne.n	8001584 <menu+0x1084>
			if(dilSecim == 0) {
 800155e:	4b55      	ldr	r3, [pc, #340]	@ (80016b4 <menu+0x11b4>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d105      	bne.n	8001572 <menu+0x1072>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8001566:	4a5c      	ldr	r2, [pc, #368]	@ (80016d8 <menu+0x11d8>)
 8001568:	2101      	movs	r1, #1
 800156a:	2002      	movs	r0, #2
 800156c:	f7fe ff81 	bl	8000472 <lcd_print>
 8001570:	e008      	b.n	8001584 <menu+0x1084>
			} else if(dilSecim == 1){
 8001572:	4b50      	ldr	r3, [pc, #320]	@ (80016b4 <menu+0x11b4>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d104      	bne.n	8001584 <menu+0x1084>
				lcd_print(2, 1, "Flr + Plrfrm act");
 800157a:	4a58      	ldr	r2, [pc, #352]	@ (80016dc <menu+0x11dc>)
 800157c:	2101      	movs	r1, #1
 800157e:	2002      	movs	r0, #2
 8001580:	f7fe ff77 	bl	8000472 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001584:	2102      	movs	r1, #2
 8001586:	4856      	ldr	r0, [pc, #344]	@ (80016e0 <menu+0x11e0>)
 8001588:	f005 ff54 	bl	8007434 <HAL_GPIO_ReadPin>
 800158c:	4603      	mov	r3, r0
 800158e:	2b01      	cmp	r3, #1
 8001590:	d115      	bne.n	80015be <menu+0x10be>
 8001592:	4b54      	ldr	r3, [pc, #336]	@ (80016e4 <menu+0x11e4>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	f083 0301 	eor.w	r3, r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00e      	beq.n	80015be <menu+0x10be>
			kapiSecimleri = kapiSecimleri + 1;
 80015a0:	4b46      	ldr	r3, [pc, #280]	@ (80016bc <menu+0x11bc>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	3301      	adds	r3, #1
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	4b44      	ldr	r3, [pc, #272]	@ (80016bc <menu+0x11bc>)
 80015aa:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80015ac:	4b43      	ldr	r3, [pc, #268]	@ (80016bc <menu+0x11bc>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d902      	bls.n	80015ba <menu+0x10ba>
				kapiSecimleri = 0;
 80015b4:	4b41      	ldr	r3, [pc, #260]	@ (80016bc <menu+0x11bc>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80015ba:	f002 f8c9 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80015be:	2104      	movs	r1, #4
 80015c0:	4847      	ldr	r0, [pc, #284]	@ (80016e0 <menu+0x11e0>)
 80015c2:	f005 ff37 	bl	8007434 <HAL_GPIO_ReadPin>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d115      	bne.n	80015f8 <menu+0x10f8>
 80015cc:	4b45      	ldr	r3, [pc, #276]	@ (80016e4 <menu+0x11e4>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	f083 0301 	eor.w	r3, r3, #1
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00e      	beq.n	80015f8 <menu+0x10f8>
			kapiSecimleri = kapiSecimleri - 1;
 80015da:	4b38      	ldr	r3, [pc, #224]	@ (80016bc <menu+0x11bc>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	3b01      	subs	r3, #1
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b36      	ldr	r3, [pc, #216]	@ (80016bc <menu+0x11bc>)
 80015e4:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80015e6:	4b35      	ldr	r3, [pc, #212]	@ (80016bc <menu+0x11bc>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d902      	bls.n	80015f4 <menu+0x10f4>
		   		kapiSecimleri = 3;
 80015ee:	4b33      	ldr	r3, [pc, #204]	@ (80016bc <menu+0x11bc>)
 80015f0:	2203      	movs	r2, #3
 80015f2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80015f4:	f002 f8ac 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80015f8:	2108      	movs	r1, #8
 80015fa:	4839      	ldr	r0, [pc, #228]	@ (80016e0 <menu+0x11e0>)
 80015fc:	f005 ff1a 	bl	8007434 <HAL_GPIO_ReadPin>
 8001600:	4603      	mov	r3, r0
 8001602:	2b01      	cmp	r3, #1
 8001604:	d118      	bne.n	8001638 <menu+0x1138>
 8001606:	4b37      	ldr	r3, [pc, #220]	@ (80016e4 <menu+0x11e4>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	f083 0301 	eor.w	r3, r3, #1
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d011      	beq.n	8001638 <menu+0x1138>
			eepromData[7] = kapiSecimleri;
 8001614:	4b29      	ldr	r3, [pc, #164]	@ (80016bc <menu+0x11bc>)
 8001616:	781a      	ldrb	r2, [r3, #0]
 8001618:	4b33      	ldr	r3, [pc, #204]	@ (80016e8 <menu+0x11e8>)
 800161a:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800161c:	4b27      	ldr	r3, [pc, #156]	@ (80016bc <menu+0x11bc>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d006      	beq.n	8001632 <menu+0x1132>
				altLimit = 1;
 8001624:	4b31      	ldr	r3, [pc, #196]	@ (80016ec <menu+0x11ec>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800162a:	4b30      	ldr	r3, [pc, #192]	@ (80016ec <menu+0x11ec>)
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	4b2e      	ldr	r3, [pc, #184]	@ (80016e8 <menu+0x11e8>)
 8001630:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001632:	4b2f      	ldr	r3, [pc, #188]	@ (80016f0 <menu+0x11f0>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001638:	4b2e      	ldr	r3, [pc, #184]	@ (80016f4 <menu+0x11f4>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b08      	cmp	r3, #8
 800163e:	f040 80c0 	bne.w	80017c2 <menu+0x12c2>
		if(dilSecim == 0) {
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <menu+0x11b4>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d105      	bne.n	8001656 <menu+0x1156>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 800164a:	4a2b      	ldr	r2, [pc, #172]	@ (80016f8 <menu+0x11f8>)
 800164c:	2101      	movs	r1, #1
 800164e:	2001      	movs	r0, #1
 8001650:	f7fe ff0f 	bl	8000472 <lcd_print>
 8001654:	e008      	b.n	8001668 <menu+0x1168>
		} else if(dilSecim == 1) {
 8001656:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <menu+0x11b4>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d104      	bne.n	8001668 <menu+0x1168>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800165e:	4a27      	ldr	r2, [pc, #156]	@ (80016fc <menu+0x11fc>)
 8001660:	2101      	movs	r1, #1
 8001662:	2001      	movs	r0, #1
 8001664:	f7fe ff05 	bl	8000472 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8001668:	4b25      	ldr	r3, [pc, #148]	@ (8001700 <menu+0x1200>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d113      	bne.n	8001698 <menu+0x1198>
			if(dilSecim == 0) {
 8001670:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <menu+0x11b4>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d105      	bne.n	8001684 <menu+0x1184>
				lcd_print(2, 1, "Kapi butonu ESP");
 8001678:	4a22      	ldr	r2, [pc, #136]	@ (8001704 <menu+0x1204>)
 800167a:	2101      	movs	r1, #1
 800167c:	2002      	movs	r0, #2
 800167e:	f7fe fef8 	bl	8000472 <lcd_print>
 8001682:	e04e      	b.n	8001722 <menu+0x1222>
			} else if(dilSecim == 1) {
 8001684:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <menu+0x11b4>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d14a      	bne.n	8001722 <menu+0x1222>
				lcd_print(2, 1, "Door Button ESP");
 800168c:	4a1e      	ldr	r2, [pc, #120]	@ (8001708 <menu+0x1208>)
 800168e:	2101      	movs	r1, #1
 8001690:	2002      	movs	r0, #2
 8001692:	f7fe feee 	bl	8000472 <lcd_print>
 8001696:	e044      	b.n	8001722 <menu+0x1222>
			}
		} else if(kapiAcTipi == 1){
 8001698:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <menu+0x1200>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d140      	bne.n	8001722 <menu+0x1222>
			if(dilSecim == 0){
 80016a0:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <menu+0x11b4>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d133      	bne.n	8001710 <menu+0x1210>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80016a8:	4a18      	ldr	r2, [pc, #96]	@ (800170c <menu+0x120c>)
 80016aa:	2101      	movs	r1, #1
 80016ac:	2002      	movs	r0, #2
 80016ae:	f7fe fee0 	bl	8000472 <lcd_print>
 80016b2:	e036      	b.n	8001722 <menu+0x1222>
 80016b4:	200000ea 	.word	0x200000ea
 80016b8:	08009ff8 	.word	0x08009ff8
 80016bc:	200000d2 	.word	0x200000d2
 80016c0:	08009f14 	.word	0x08009f14
 80016c4:	08009f28 	.word	0x08009f28
 80016c8:	0800a00c 	.word	0x0800a00c
 80016cc:	0800a020 	.word	0x0800a020
 80016d0:	0800a034 	.word	0x0800a034
 80016d4:	0800a048 	.word	0x0800a048
 80016d8:	0800a05c 	.word	0x0800a05c
 80016dc:	0800a070 	.word	0x0800a070
 80016e0:	40010800 	.word	0x40010800
 80016e4:	200000f8 	.word	0x200000f8
 80016e8:	20000060 	.word	0x20000060
 80016ec:	200000d0 	.word	0x200000d0
 80016f0:	200000f5 	.word	0x200000f5
 80016f4:	200000ca 	.word	0x200000ca
 80016f8:	0800a084 	.word	0x0800a084
 80016fc:	0800a098 	.word	0x0800a098
 8001700:	200000d6 	.word	0x200000d6
 8001704:	0800a0ac 	.word	0x0800a0ac
 8001708:	0800a0bc 	.word	0x0800a0bc
 800170c:	0800a0cc 	.word	0x0800a0cc
			} else if(dilSecim == 1){
 8001710:	4b7f      	ldr	r3, [pc, #508]	@ (8001910 <menu+0x1410>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d104      	bne.n	8001722 <menu+0x1222>
				lcd_print(2, 1, "Floor button EXT");
 8001718:	4a7e      	ldr	r2, [pc, #504]	@ (8001914 <menu+0x1414>)
 800171a:	2101      	movs	r1, #1
 800171c:	2002      	movs	r0, #2
 800171e:	f7fe fea8 	bl	8000472 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001722:	2102      	movs	r1, #2
 8001724:	487c      	ldr	r0, [pc, #496]	@ (8001918 <menu+0x1418>)
 8001726:	f005 fe85 	bl	8007434 <HAL_GPIO_ReadPin>
 800172a:	4603      	mov	r3, r0
 800172c:	2b01      	cmp	r3, #1
 800172e:	d115      	bne.n	800175c <menu+0x125c>
 8001730:	4b7a      	ldr	r3, [pc, #488]	@ (800191c <menu+0x141c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	f083 0301 	eor.w	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00e      	beq.n	800175c <menu+0x125c>
			kapiAcTipi = kapiAcTipi + 1;
 800173e:	4b78      	ldr	r3, [pc, #480]	@ (8001920 <menu+0x1420>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	3301      	adds	r3, #1
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4b76      	ldr	r3, [pc, #472]	@ (8001920 <menu+0x1420>)
 8001748:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800174a:	4b75      	ldr	r3, [pc, #468]	@ (8001920 <menu+0x1420>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d902      	bls.n	8001758 <menu+0x1258>
				kapiAcTipi = 0;
 8001752:	4b73      	ldr	r3, [pc, #460]	@ (8001920 <menu+0x1420>)
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001758:	f001 fffa 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800175c:	2104      	movs	r1, #4
 800175e:	486e      	ldr	r0, [pc, #440]	@ (8001918 <menu+0x1418>)
 8001760:	f005 fe68 	bl	8007434 <HAL_GPIO_ReadPin>
 8001764:	4603      	mov	r3, r0
 8001766:	2b01      	cmp	r3, #1
 8001768:	d115      	bne.n	8001796 <menu+0x1296>
 800176a:	4b6c      	ldr	r3, [pc, #432]	@ (800191c <menu+0x141c>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	f083 0301 	eor.w	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00e      	beq.n	8001796 <menu+0x1296>
			kapiAcTipi = kapiAcTipi - 1;
 8001778:	4b69      	ldr	r3, [pc, #420]	@ (8001920 <menu+0x1420>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	3b01      	subs	r3, #1
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4b67      	ldr	r3, [pc, #412]	@ (8001920 <menu+0x1420>)
 8001782:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8001784:	4b66      	ldr	r3, [pc, #408]	@ (8001920 <menu+0x1420>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <menu+0x1292>
		   		kapiAcTipi = 1;
 800178c:	4b64      	ldr	r3, [pc, #400]	@ (8001920 <menu+0x1420>)
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001792:	f001 ffdd 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001796:	2108      	movs	r1, #8
 8001798:	485f      	ldr	r0, [pc, #380]	@ (8001918 <menu+0x1418>)
 800179a:	f005 fe4b 	bl	8007434 <HAL_GPIO_ReadPin>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d10e      	bne.n	80017c2 <menu+0x12c2>
 80017a4:	4b5d      	ldr	r3, [pc, #372]	@ (800191c <menu+0x141c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	f083 0301 	eor.w	r3, r3, #1
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <menu+0x12c2>
			eepromData[36] = kapiAcTipi;
 80017b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001920 <menu+0x1420>)
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001924 <menu+0x1424>)
 80017b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 80017bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001928 <menu+0x1428>)
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80017c2:	4b5a      	ldr	r3, [pc, #360]	@ (800192c <menu+0x142c>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b09      	cmp	r3, #9
 80017c8:	f040 808d 	bne.w	80018e6 <menu+0x13e6>
		if(dilSecim == 0){
 80017cc:	4b50      	ldr	r3, [pc, #320]	@ (8001910 <menu+0x1410>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d105      	bne.n	80017e0 <menu+0x12e0>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80017d4:	4a56      	ldr	r2, [pc, #344]	@ (8001930 <menu+0x1430>)
 80017d6:	2101      	movs	r1, #1
 80017d8:	2001      	movs	r0, #1
 80017da:	f7fe fe4a 	bl	8000472 <lcd_print>
 80017de:	e008      	b.n	80017f2 <menu+0x12f2>
		} else if(dilSecim == 1) {
 80017e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001910 <menu+0x1410>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d104      	bne.n	80017f2 <menu+0x12f2>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80017e8:	4a52      	ldr	r2, [pc, #328]	@ (8001934 <menu+0x1434>)
 80017ea:	2101      	movs	r1, #1
 80017ec:	2001      	movs	r0, #1
 80017ee:	f7fe fe40 	bl	8000472 <lcd_print>
		}

		if(kapi1Tip == 0) {
 80017f2:	4b51      	ldr	r3, [pc, #324]	@ (8001938 <menu+0x1438>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d105      	bne.n	8001806 <menu+0x1306>
			lcd_print(2, 1, "Prudhome        ");
 80017fa:	4a50      	ldr	r2, [pc, #320]	@ (800193c <menu+0x143c>)
 80017fc:	2101      	movs	r1, #1
 80017fe:	2002      	movs	r0, #2
 8001800:	f7fe fe37 	bl	8000472 <lcd_print>
 8001804:	e020      	b.n	8001848 <menu+0x1348>
		} else if(kapi1Tip == 1) {
 8001806:	4b4c      	ldr	r3, [pc, #304]	@ (8001938 <menu+0x1438>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d113      	bne.n	8001836 <menu+0x1336>
			if(dilSecim == 0){
 800180e:	4b40      	ldr	r3, [pc, #256]	@ (8001910 <menu+0x1410>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d105      	bne.n	8001822 <menu+0x1322>
				lcd_print(2, 1, "Buton kontrollu ");
 8001816:	4a4a      	ldr	r2, [pc, #296]	@ (8001940 <menu+0x1440>)
 8001818:	2101      	movs	r1, #1
 800181a:	2002      	movs	r0, #2
 800181c:	f7fe fe29 	bl	8000472 <lcd_print>
 8001820:	e012      	b.n	8001848 <menu+0x1348>
			} else if(dilSecim == 1) {
 8001822:	4b3b      	ldr	r3, [pc, #236]	@ (8001910 <menu+0x1410>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d10e      	bne.n	8001848 <menu+0x1348>
				lcd_print(2, 1, "Button cntrolled");
 800182a:	4a46      	ldr	r2, [pc, #280]	@ (8001944 <menu+0x1444>)
 800182c:	2101      	movs	r1, #1
 800182e:	2002      	movs	r0, #2
 8001830:	f7fe fe1f 	bl	8000472 <lcd_print>
 8001834:	e008      	b.n	8001848 <menu+0x1348>
			}
		} else if(kapi1Tip == 2) {
 8001836:	4b40      	ldr	r3, [pc, #256]	@ (8001938 <menu+0x1438>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d104      	bne.n	8001848 <menu+0x1348>
			lcd_print(2, 1, "Pizzato        ");
 800183e:	4a42      	ldr	r2, [pc, #264]	@ (8001948 <menu+0x1448>)
 8001840:	2101      	movs	r1, #1
 8001842:	2002      	movs	r0, #2
 8001844:	f7fe fe15 	bl	8000472 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001848:	2102      	movs	r1, #2
 800184a:	4833      	ldr	r0, [pc, #204]	@ (8001918 <menu+0x1418>)
 800184c:	f005 fdf2 	bl	8007434 <HAL_GPIO_ReadPin>
 8001850:	4603      	mov	r3, r0
 8001852:	2b01      	cmp	r3, #1
 8001854:	d115      	bne.n	8001882 <menu+0x1382>
 8001856:	4b31      	ldr	r3, [pc, #196]	@ (800191c <menu+0x141c>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	f083 0301 	eor.w	r3, r3, #1
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00e      	beq.n	8001882 <menu+0x1382>
			kapi1Tip = kapi1Tip + 1;
 8001864:	4b34      	ldr	r3, [pc, #208]	@ (8001938 <menu+0x1438>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b32      	ldr	r3, [pc, #200]	@ (8001938 <menu+0x1438>)
 800186e:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8001870:	4b31      	ldr	r3, [pc, #196]	@ (8001938 <menu+0x1438>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d902      	bls.n	800187e <menu+0x137e>
				kapi1Tip = 0;
 8001878:	4b2f      	ldr	r3, [pc, #188]	@ (8001938 <menu+0x1438>)
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800187e:	f001 ff67 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001882:	2104      	movs	r1, #4
 8001884:	4824      	ldr	r0, [pc, #144]	@ (8001918 <menu+0x1418>)
 8001886:	f005 fdd5 	bl	8007434 <HAL_GPIO_ReadPin>
 800188a:	4603      	mov	r3, r0
 800188c:	2b01      	cmp	r3, #1
 800188e:	d115      	bne.n	80018bc <menu+0x13bc>
 8001890:	4b22      	ldr	r3, [pc, #136]	@ (800191c <menu+0x141c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	f083 0301 	eor.w	r3, r3, #1
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00e      	beq.n	80018bc <menu+0x13bc>
			kapi1Tip = kapi1Tip - 1;
 800189e:	4b26      	ldr	r3, [pc, #152]	@ (8001938 <menu+0x1438>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b24      	ldr	r3, [pc, #144]	@ (8001938 <menu+0x1438>)
 80018a8:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80018aa:	4b23      	ldr	r3, [pc, #140]	@ (8001938 <menu+0x1438>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d902      	bls.n	80018b8 <menu+0x13b8>
		   		kapi1Tip = 2;
 80018b2:	4b21      	ldr	r3, [pc, #132]	@ (8001938 <menu+0x1438>)
 80018b4:	2202      	movs	r2, #2
 80018b6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80018b8:	f001 ff4a 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80018bc:	2108      	movs	r1, #8
 80018be:	4816      	ldr	r0, [pc, #88]	@ (8001918 <menu+0x1418>)
 80018c0:	f005 fdb8 	bl	8007434 <HAL_GPIO_ReadPin>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d10d      	bne.n	80018e6 <menu+0x13e6>
 80018ca:	4b14      	ldr	r3, [pc, #80]	@ (800191c <menu+0x141c>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	f083 0301 	eor.w	r3, r3, #1
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <menu+0x13e6>
			eepromData[8] = kapi1Tip;
 80018d8:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <menu+0x1438>)
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <menu+0x1424>)
 80018de:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <menu+0x1428>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80018e6:	4b11      	ldr	r3, [pc, #68]	@ (800192c <menu+0x142c>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b0a      	cmp	r3, #10
 80018ec:	f040 80a3 	bne.w	8001a36 <menu+0x1536>
		if(dilSecim == 0) {
 80018f0:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <menu+0x1410>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d12d      	bne.n	8001954 <menu+0x1454>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80018f8:	4a14      	ldr	r2, [pc, #80]	@ (800194c <menu+0x144c>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	2001      	movs	r0, #1
 80018fe:	f7fe fdb8 	bl	8000472 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001902:	4a13      	ldr	r2, [pc, #76]	@ (8001950 <menu+0x1450>)
 8001904:	2101      	movs	r1, #1
 8001906:	2002      	movs	r0, #2
 8001908:	f7fe fdb3 	bl	8000472 <lcd_print>
 800190c:	e030      	b.n	8001970 <menu+0x1470>
 800190e:	bf00      	nop
 8001910:	200000ea 	.word	0x200000ea
 8001914:	0800a0e0 	.word	0x0800a0e0
 8001918:	40010800 	.word	0x40010800
 800191c:	200000f8 	.word	0x200000f8
 8001920:	200000d6 	.word	0x200000d6
 8001924:	20000060 	.word	0x20000060
 8001928:	200000f5 	.word	0x200000f5
 800192c:	200000ca 	.word	0x200000ca
 8001930:	0800a0f4 	.word	0x0800a0f4
 8001934:	0800a108 	.word	0x0800a108
 8001938:	200000d3 	.word	0x200000d3
 800193c:	0800a11c 	.word	0x0800a11c
 8001940:	0800a130 	.word	0x0800a130
 8001944:	0800a144 	.word	0x0800a144
 8001948:	0800a158 	.word	0x0800a158
 800194c:	0800a168 	.word	0x0800a168
 8001950:	0800a17c 	.word	0x0800a17c
		} else if(dilSecim == 1) {
 8001954:	4b8b      	ldr	r3, [pc, #556]	@ (8001b84 <menu+0x1684>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d109      	bne.n	8001970 <menu+0x1470>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800195c:	4a8a      	ldr	r2, [pc, #552]	@ (8001b88 <menu+0x1688>)
 800195e:	2101      	movs	r1, #1
 8001960:	2001      	movs	r0, #1
 8001962:	f7fe fd86 	bl	8000472 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001966:	4a89      	ldr	r2, [pc, #548]	@ (8001b8c <menu+0x168c>)
 8001968:	2101      	movs	r1, #1
 800196a:	2002      	movs	r0, #2
 800196c:	f7fe fd81 	bl	8000472 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8001970:	4b87      	ldr	r3, [pc, #540]	@ (8001b90 <menu+0x1690>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	220a      	movs	r2, #10
 8001976:	4987      	ldr	r1, [pc, #540]	@ (8001b94 <menu+0x1694>)
 8001978:	4618      	mov	r0, r3
 800197a:	f008 f8fd 	bl	8009b78 <itoa>
		lcd_print(2,16,snum);
 800197e:	4a85      	ldr	r2, [pc, #532]	@ (8001b94 <menu+0x1694>)
 8001980:	2110      	movs	r1, #16
 8001982:	2002      	movs	r0, #2
 8001984:	f7fe fd75 	bl	8000472 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001988:	2102      	movs	r1, #2
 800198a:	4883      	ldr	r0, [pc, #524]	@ (8001b98 <menu+0x1698>)
 800198c:	f005 fd52 	bl	8007434 <HAL_GPIO_ReadPin>
 8001990:	4603      	mov	r3, r0
 8001992:	2b01      	cmp	r3, #1
 8001994:	d119      	bne.n	80019ca <menu+0x14ca>
 8001996:	4b81      	ldr	r3, [pc, #516]	@ (8001b9c <menu+0x169c>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	f083 0301 	eor.w	r3, r3, #1
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d012      	beq.n	80019ca <menu+0x14ca>
 80019a4:	4b7e      	ldr	r3, [pc, #504]	@ (8001ba0 <menu+0x16a0>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10e      	bne.n	80019ca <menu+0x14ca>
			kapi1AcSure = kapi1AcSure + 1;
 80019ac:	4b78      	ldr	r3, [pc, #480]	@ (8001b90 <menu+0x1690>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	3301      	adds	r3, #1
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	4b76      	ldr	r3, [pc, #472]	@ (8001b90 <menu+0x1690>)
 80019b6:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80019b8:	4b75      	ldr	r3, [pc, #468]	@ (8001b90 <menu+0x1690>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d902      	bls.n	80019c6 <menu+0x14c6>
				kapi1AcSure = 0;
 80019c0:	4b73      	ldr	r3, [pc, #460]	@ (8001b90 <menu+0x1690>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80019c6:	f001 fec3 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80019ca:	2104      	movs	r1, #4
 80019cc:	4872      	ldr	r0, [pc, #456]	@ (8001b98 <menu+0x1698>)
 80019ce:	f005 fd31 	bl	8007434 <HAL_GPIO_ReadPin>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d119      	bne.n	8001a0c <menu+0x150c>
 80019d8:	4b70      	ldr	r3, [pc, #448]	@ (8001b9c <menu+0x169c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	f083 0301 	eor.w	r3, r3, #1
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d012      	beq.n	8001a0c <menu+0x150c>
 80019e6:	4b6e      	ldr	r3, [pc, #440]	@ (8001ba0 <menu+0x16a0>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10e      	bne.n	8001a0c <menu+0x150c>
			kapi1AcSure = kapi1AcSure - 1;
 80019ee:	4b68      	ldr	r3, [pc, #416]	@ (8001b90 <menu+0x1690>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4b66      	ldr	r3, [pc, #408]	@ (8001b90 <menu+0x1690>)
 80019f8:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80019fa:	4b65      	ldr	r3, [pc, #404]	@ (8001b90 <menu+0x1690>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d902      	bls.n	8001a08 <menu+0x1508>
		   		kapi1AcSure = 5;
 8001a02:	4b63      	ldr	r3, [pc, #396]	@ (8001b90 <menu+0x1690>)
 8001a04:	2205      	movs	r2, #5
 8001a06:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001a08:	f001 fea2 	bl	8003750 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a0c:	2108      	movs	r1, #8
 8001a0e:	4862      	ldr	r0, [pc, #392]	@ (8001b98 <menu+0x1698>)
 8001a10:	f005 fd10 	bl	8007434 <HAL_GPIO_ReadPin>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d10d      	bne.n	8001a36 <menu+0x1536>
 8001a1a:	4b60      	ldr	r3, [pc, #384]	@ (8001b9c <menu+0x169c>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	f083 0301 	eor.w	r3, r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d006      	beq.n	8001a36 <menu+0x1536>
			eepromData[9] = kapi1AcSure;
 8001a28:	4b59      	ldr	r3, [pc, #356]	@ (8001b90 <menu+0x1690>)
 8001a2a:	781a      	ldrb	r2, [r3, #0]
 8001a2c:	4b5d      	ldr	r3, [pc, #372]	@ (8001ba4 <menu+0x16a4>)
 8001a2e:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8001a30:	4b5d      	ldr	r3, [pc, #372]	@ (8001ba8 <menu+0x16a8>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8001a36:	4b5d      	ldr	r3, [pc, #372]	@ (8001bac <menu+0x16ac>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b0b      	cmp	r3, #11
 8001a3c:	f040 808d 	bne.w	8001b5a <menu+0x165a>
		if(dilSecim == 0) {
 8001a40:	4b50      	ldr	r3, [pc, #320]	@ (8001b84 <menu+0x1684>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d105      	bne.n	8001a54 <menu+0x1554>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8001a48:	4a59      	ldr	r2, [pc, #356]	@ (8001bb0 <menu+0x16b0>)
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f7fe fd10 	bl	8000472 <lcd_print>
 8001a52:	e008      	b.n	8001a66 <menu+0x1566>
		} else if(dilSecim == 1) {
 8001a54:	4b4b      	ldr	r3, [pc, #300]	@ (8001b84 <menu+0x1684>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d104      	bne.n	8001a66 <menu+0x1566>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8001a5c:	4a55      	ldr	r2, [pc, #340]	@ (8001bb4 <menu+0x16b4>)
 8001a5e:	2101      	movs	r1, #1
 8001a60:	2001      	movs	r0, #1
 8001a62:	f7fe fd06 	bl	8000472 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8001a66:	4b54      	ldr	r3, [pc, #336]	@ (8001bb8 <menu+0x16b8>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d105      	bne.n	8001a7a <menu+0x157a>
			lcd_print(2, 1, "Prudhome        ");
 8001a6e:	4a53      	ldr	r2, [pc, #332]	@ (8001bbc <menu+0x16bc>)
 8001a70:	2101      	movs	r1, #1
 8001a72:	2002      	movs	r0, #2
 8001a74:	f7fe fcfd 	bl	8000472 <lcd_print>
 8001a78:	e020      	b.n	8001abc <menu+0x15bc>
		} else if(kapi2Tip == 1) {
 8001a7a:	4b4f      	ldr	r3, [pc, #316]	@ (8001bb8 <menu+0x16b8>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d113      	bne.n	8001aaa <menu+0x15aa>
			if(dilSecim == 0) {
 8001a82:	4b40      	ldr	r3, [pc, #256]	@ (8001b84 <menu+0x1684>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d105      	bne.n	8001a96 <menu+0x1596>
				lcd_print(2, 1, "Buton kontrollu ");
 8001a8a:	4a4d      	ldr	r2, [pc, #308]	@ (8001bc0 <menu+0x16c0>)
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	2002      	movs	r0, #2
 8001a90:	f7fe fcef 	bl	8000472 <lcd_print>
 8001a94:	e012      	b.n	8001abc <menu+0x15bc>
			} else if(dilSecim == 1) {
 8001a96:	4b3b      	ldr	r3, [pc, #236]	@ (8001b84 <menu+0x1684>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d10e      	bne.n	8001abc <menu+0x15bc>
				lcd_print(2, 1, "Button cntrolled");
 8001a9e:	4a49      	ldr	r2, [pc, #292]	@ (8001bc4 <menu+0x16c4>)
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	2002      	movs	r0, #2
 8001aa4:	f7fe fce5 	bl	8000472 <lcd_print>
 8001aa8:	e008      	b.n	8001abc <menu+0x15bc>
			}
		} else if(kapi2Tip == 2) {
 8001aaa:	4b43      	ldr	r3, [pc, #268]	@ (8001bb8 <menu+0x16b8>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d104      	bne.n	8001abc <menu+0x15bc>
			lcd_print(2, 1, "Pizzato        ");
 8001ab2:	4a45      	ldr	r2, [pc, #276]	@ (8001bc8 <menu+0x16c8>)
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	2002      	movs	r0, #2
 8001ab8:	f7fe fcdb 	bl	8000472 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001abc:	2102      	movs	r1, #2
 8001abe:	4836      	ldr	r0, [pc, #216]	@ (8001b98 <menu+0x1698>)
 8001ac0:	f005 fcb8 	bl	8007434 <HAL_GPIO_ReadPin>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d115      	bne.n	8001af6 <menu+0x15f6>
 8001aca:	4b34      	ldr	r3, [pc, #208]	@ (8001b9c <menu+0x169c>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	f083 0301 	eor.w	r3, r3, #1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00e      	beq.n	8001af6 <menu+0x15f6>
			kapi2Tip = kapi2Tip + 1;
 8001ad8:	4b37      	ldr	r3, [pc, #220]	@ (8001bb8 <menu+0x16b8>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	4b35      	ldr	r3, [pc, #212]	@ (8001bb8 <menu+0x16b8>)
 8001ae2:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8001ae4:	4b34      	ldr	r3, [pc, #208]	@ (8001bb8 <menu+0x16b8>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d902      	bls.n	8001af2 <menu+0x15f2>
				kapi2Tip = 0;
 8001aec:	4b32      	ldr	r3, [pc, #200]	@ (8001bb8 <menu+0x16b8>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001af2:	f001 fe2d 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001af6:	2104      	movs	r1, #4
 8001af8:	4827      	ldr	r0, [pc, #156]	@ (8001b98 <menu+0x1698>)
 8001afa:	f005 fc9b 	bl	8007434 <HAL_GPIO_ReadPin>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d115      	bne.n	8001b30 <menu+0x1630>
 8001b04:	4b25      	ldr	r3, [pc, #148]	@ (8001b9c <menu+0x169c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	f083 0301 	eor.w	r3, r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00e      	beq.n	8001b30 <menu+0x1630>
			kapi2Tip = kapi2Tip - 1;
 8001b12:	4b29      	ldr	r3, [pc, #164]	@ (8001bb8 <menu+0x16b8>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4b27      	ldr	r3, [pc, #156]	@ (8001bb8 <menu+0x16b8>)
 8001b1c:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8001b1e:	4b26      	ldr	r3, [pc, #152]	@ (8001bb8 <menu+0x16b8>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d902      	bls.n	8001b2c <menu+0x162c>
		   		kapi2Tip = 2;
 8001b26:	4b24      	ldr	r3, [pc, #144]	@ (8001bb8 <menu+0x16b8>)
 8001b28:	2202      	movs	r2, #2
 8001b2a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b2c:	f001 fe10 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b30:	2108      	movs	r1, #8
 8001b32:	4819      	ldr	r0, [pc, #100]	@ (8001b98 <menu+0x1698>)
 8001b34:	f005 fc7e 	bl	8007434 <HAL_GPIO_ReadPin>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d10d      	bne.n	8001b5a <menu+0x165a>
 8001b3e:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <menu+0x169c>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	f083 0301 	eor.w	r3, r3, #1
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d006      	beq.n	8001b5a <menu+0x165a>
			eepromData[10] = kapi2Tip;
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb8 <menu+0x16b8>)
 8001b4e:	781a      	ldrb	r2, [r3, #0]
 8001b50:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <menu+0x16a4>)
 8001b52:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8001b54:	4b14      	ldr	r3, [pc, #80]	@ (8001ba8 <menu+0x16a8>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8001b5a:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <menu+0x16ac>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	f040 80a9 	bne.w	8001cb6 <menu+0x17b6>
		if(dilSecim == 0) {
 8001b64:	4b07      	ldr	r3, [pc, #28]	@ (8001b84 <menu+0x1684>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d133      	bne.n	8001bd4 <menu+0x16d4>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8001b6c:	4a17      	ldr	r2, [pc, #92]	@ (8001bcc <menu+0x16cc>)
 8001b6e:	2101      	movs	r1, #1
 8001b70:	2001      	movs	r0, #1
 8001b72:	f7fe fc7e 	bl	8000472 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001b76:	4a16      	ldr	r2, [pc, #88]	@ (8001bd0 <menu+0x16d0>)
 8001b78:	2101      	movs	r1, #1
 8001b7a:	2002      	movs	r0, #2
 8001b7c:	f7fe fc79 	bl	8000472 <lcd_print>
 8001b80:	e036      	b.n	8001bf0 <menu+0x16f0>
 8001b82:	bf00      	nop
 8001b84:	200000ea 	.word	0x200000ea
 8001b88:	0800a18c 	.word	0x0800a18c
 8001b8c:	0800a1a0 	.word	0x0800a1a0
 8001b90:	200000e3 	.word	0x200000e3
 8001b94:	200000a0 	.word	0x200000a0
 8001b98:	40010800 	.word	0x40010800
 8001b9c:	200000f8 	.word	0x200000f8
 8001ba0:	200000d3 	.word	0x200000d3
 8001ba4:	20000060 	.word	0x20000060
 8001ba8:	200000f5 	.word	0x200000f5
 8001bac:	200000ca 	.word	0x200000ca
 8001bb0:	0800a1b0 	.word	0x0800a1b0
 8001bb4:	0800a1c4 	.word	0x0800a1c4
 8001bb8:	200000d4 	.word	0x200000d4
 8001bbc:	0800a11c 	.word	0x0800a11c
 8001bc0:	0800a130 	.word	0x0800a130
 8001bc4:	0800a144 	.word	0x0800a144
 8001bc8:	0800a158 	.word	0x0800a158
 8001bcc:	0800a1d8 	.word	0x0800a1d8
 8001bd0:	0800a17c 	.word	0x0800a17c
		} else if(dilSecim == 1) {
 8001bd4:	4b99      	ldr	r3, [pc, #612]	@ (8001e3c <menu+0x193c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d109      	bne.n	8001bf0 <menu+0x16f0>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8001bdc:	4a98      	ldr	r2, [pc, #608]	@ (8001e40 <menu+0x1940>)
 8001bde:	2101      	movs	r1, #1
 8001be0:	2001      	movs	r0, #1
 8001be2:	f7fe fc46 	bl	8000472 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001be6:	4a97      	ldr	r2, [pc, #604]	@ (8001e44 <menu+0x1944>)
 8001be8:	2101      	movs	r1, #1
 8001bea:	2002      	movs	r0, #2
 8001bec:	f7fe fc41 	bl	8000472 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8001bf0:	4b95      	ldr	r3, [pc, #596]	@ (8001e48 <menu+0x1948>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	220a      	movs	r2, #10
 8001bf6:	4995      	ldr	r1, [pc, #596]	@ (8001e4c <menu+0x194c>)
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f007 ffbd 	bl	8009b78 <itoa>
		lcd_print(2,16,snum);
 8001bfe:	4a93      	ldr	r2, [pc, #588]	@ (8001e4c <menu+0x194c>)
 8001c00:	2110      	movs	r1, #16
 8001c02:	2002      	movs	r0, #2
 8001c04:	f7fe fc35 	bl	8000472 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001c08:	2102      	movs	r1, #2
 8001c0a:	4891      	ldr	r0, [pc, #580]	@ (8001e50 <menu+0x1950>)
 8001c0c:	f005 fc12 	bl	8007434 <HAL_GPIO_ReadPin>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d119      	bne.n	8001c4a <menu+0x174a>
 8001c16:	4b8f      	ldr	r3, [pc, #572]	@ (8001e54 <menu+0x1954>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	f083 0301 	eor.w	r3, r3, #1
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d012      	beq.n	8001c4a <menu+0x174a>
 8001c24:	4b8c      	ldr	r3, [pc, #560]	@ (8001e58 <menu+0x1958>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10e      	bne.n	8001c4a <menu+0x174a>
			kapi2AcSure = kapi2AcSure + 1;
 8001c2c:	4b86      	ldr	r3, [pc, #536]	@ (8001e48 <menu+0x1948>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	4b84      	ldr	r3, [pc, #528]	@ (8001e48 <menu+0x1948>)
 8001c36:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8001c38:	4b83      	ldr	r3, [pc, #524]	@ (8001e48 <menu+0x1948>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d902      	bls.n	8001c46 <menu+0x1746>
				kapi2AcSure = 0;
 8001c40:	4b81      	ldr	r3, [pc, #516]	@ (8001e48 <menu+0x1948>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c46:	f001 fd83 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	4880      	ldr	r0, [pc, #512]	@ (8001e50 <menu+0x1950>)
 8001c4e:	f005 fbf1 	bl	8007434 <HAL_GPIO_ReadPin>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d119      	bne.n	8001c8c <menu+0x178c>
 8001c58:	4b7e      	ldr	r3, [pc, #504]	@ (8001e54 <menu+0x1954>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	f083 0301 	eor.w	r3, r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d012      	beq.n	8001c8c <menu+0x178c>
 8001c66:	4b7c      	ldr	r3, [pc, #496]	@ (8001e58 <menu+0x1958>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10e      	bne.n	8001c8c <menu+0x178c>
			kapi2AcSure = kapi2AcSure - 1;
 8001c6e:	4b76      	ldr	r3, [pc, #472]	@ (8001e48 <menu+0x1948>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4b74      	ldr	r3, [pc, #464]	@ (8001e48 <menu+0x1948>)
 8001c78:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8001c7a:	4b73      	ldr	r3, [pc, #460]	@ (8001e48 <menu+0x1948>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d902      	bls.n	8001c88 <menu+0x1788>
		   		kapi2AcSure = 5;
 8001c82:	4b71      	ldr	r3, [pc, #452]	@ (8001e48 <menu+0x1948>)
 8001c84:	2205      	movs	r2, #5
 8001c86:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c88:	f001 fd62 	bl	8003750 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c8c:	2108      	movs	r1, #8
 8001c8e:	4870      	ldr	r0, [pc, #448]	@ (8001e50 <menu+0x1950>)
 8001c90:	f005 fbd0 	bl	8007434 <HAL_GPIO_ReadPin>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d10d      	bne.n	8001cb6 <menu+0x17b6>
 8001c9a:	4b6e      	ldr	r3, [pc, #440]	@ (8001e54 <menu+0x1954>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	f083 0301 	eor.w	r3, r3, #1
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <menu+0x17b6>
			eepromData[11] = kapi2AcSure;
 8001ca8:	4b67      	ldr	r3, [pc, #412]	@ (8001e48 <menu+0x1948>)
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	4b6b      	ldr	r3, [pc, #428]	@ (8001e5c <menu+0x195c>)
 8001cae:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8001cb0:	4b6b      	ldr	r3, [pc, #428]	@ (8001e60 <menu+0x1960>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8001cb6:	4b6b      	ldr	r3, [pc, #428]	@ (8001e64 <menu+0x1964>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b0d      	cmp	r3, #13
 8001cbc:	f040 808d 	bne.w	8001dda <menu+0x18da>
		if(dilSecim == 0) {
 8001cc0:	4b5e      	ldr	r3, [pc, #376]	@ (8001e3c <menu+0x193c>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d105      	bne.n	8001cd4 <menu+0x17d4>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8001cc8:	4a67      	ldr	r2, [pc, #412]	@ (8001e68 <menu+0x1968>)
 8001cca:	2101      	movs	r1, #1
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f7fe fbd0 	bl	8000472 <lcd_print>
 8001cd2:	e008      	b.n	8001ce6 <menu+0x17e6>
		} else if(dilSecim == 1){
 8001cd4:	4b59      	ldr	r3, [pc, #356]	@ (8001e3c <menu+0x193c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d104      	bne.n	8001ce6 <menu+0x17e6>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8001cdc:	4a63      	ldr	r2, [pc, #396]	@ (8001e6c <menu+0x196c>)
 8001cde:	2101      	movs	r1, #1
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f7fe fbc6 	bl	8000472 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8001ce6:	4b62      	ldr	r3, [pc, #392]	@ (8001e70 <menu+0x1970>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d105      	bne.n	8001cfa <menu+0x17fa>
			lcd_print(2, 1, "Prudhome        ");
 8001cee:	4a61      	ldr	r2, [pc, #388]	@ (8001e74 <menu+0x1974>)
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f7fe fbbd 	bl	8000472 <lcd_print>
 8001cf8:	e020      	b.n	8001d3c <menu+0x183c>
		} else if(kapitablaTip == 1) {
 8001cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8001e70 <menu+0x1970>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d113      	bne.n	8001d2a <menu+0x182a>
			if(dilSecim == 0) {
 8001d02:	4b4e      	ldr	r3, [pc, #312]	@ (8001e3c <menu+0x193c>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d105      	bne.n	8001d16 <menu+0x1816>
				lcd_print(2, 1, "Buton kontrollu ");
 8001d0a:	4a5b      	ldr	r2, [pc, #364]	@ (8001e78 <menu+0x1978>)
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	2002      	movs	r0, #2
 8001d10:	f7fe fbaf 	bl	8000472 <lcd_print>
 8001d14:	e012      	b.n	8001d3c <menu+0x183c>
			} else if(dilSecim == 1) {
 8001d16:	4b49      	ldr	r3, [pc, #292]	@ (8001e3c <menu+0x193c>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d10e      	bne.n	8001d3c <menu+0x183c>
				lcd_print(2, 1, "Button cntrolled");
 8001d1e:	4a57      	ldr	r2, [pc, #348]	@ (8001e7c <menu+0x197c>)
 8001d20:	2101      	movs	r1, #1
 8001d22:	2002      	movs	r0, #2
 8001d24:	f7fe fba5 	bl	8000472 <lcd_print>
 8001d28:	e008      	b.n	8001d3c <menu+0x183c>
			}
		} else if(kapitablaTip == 2) {
 8001d2a:	4b51      	ldr	r3, [pc, #324]	@ (8001e70 <menu+0x1970>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d104      	bne.n	8001d3c <menu+0x183c>
			lcd_print(2, 1, "Pizzato        ");
 8001d32:	4a53      	ldr	r2, [pc, #332]	@ (8001e80 <menu+0x1980>)
 8001d34:	2101      	movs	r1, #1
 8001d36:	2002      	movs	r0, #2
 8001d38:	f7fe fb9b 	bl	8000472 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	4844      	ldr	r0, [pc, #272]	@ (8001e50 <menu+0x1950>)
 8001d40:	f005 fb78 	bl	8007434 <HAL_GPIO_ReadPin>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d115      	bne.n	8001d76 <menu+0x1876>
 8001d4a:	4b42      	ldr	r3, [pc, #264]	@ (8001e54 <menu+0x1954>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	f083 0301 	eor.w	r3, r3, #1
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00e      	beq.n	8001d76 <menu+0x1876>
			kapitablaTip = kapitablaTip + 1;
 8001d58:	4b45      	ldr	r3, [pc, #276]	@ (8001e70 <menu+0x1970>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	4b43      	ldr	r3, [pc, #268]	@ (8001e70 <menu+0x1970>)
 8001d62:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8001d64:	4b42      	ldr	r3, [pc, #264]	@ (8001e70 <menu+0x1970>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d902      	bls.n	8001d72 <menu+0x1872>
				kapitablaTip = 0;
 8001d6c:	4b40      	ldr	r3, [pc, #256]	@ (8001e70 <menu+0x1970>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d72:	f001 fced 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d76:	2104      	movs	r1, #4
 8001d78:	4835      	ldr	r0, [pc, #212]	@ (8001e50 <menu+0x1950>)
 8001d7a:	f005 fb5b 	bl	8007434 <HAL_GPIO_ReadPin>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d115      	bne.n	8001db0 <menu+0x18b0>
 8001d84:	4b33      	ldr	r3, [pc, #204]	@ (8001e54 <menu+0x1954>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	f083 0301 	eor.w	r3, r3, #1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00e      	beq.n	8001db0 <menu+0x18b0>
			kapitablaTip = kapitablaTip - 1;
 8001d92:	4b37      	ldr	r3, [pc, #220]	@ (8001e70 <menu+0x1970>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4b35      	ldr	r3, [pc, #212]	@ (8001e70 <menu+0x1970>)
 8001d9c:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8001d9e:	4b34      	ldr	r3, [pc, #208]	@ (8001e70 <menu+0x1970>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d902      	bls.n	8001dac <menu+0x18ac>
		   		kapitablaTip = 2;
 8001da6:	4b32      	ldr	r3, [pc, #200]	@ (8001e70 <menu+0x1970>)
 8001da8:	2202      	movs	r2, #2
 8001daa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001dac:	f001 fcd0 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001db0:	2108      	movs	r1, #8
 8001db2:	4827      	ldr	r0, [pc, #156]	@ (8001e50 <menu+0x1950>)
 8001db4:	f005 fb3e 	bl	8007434 <HAL_GPIO_ReadPin>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d10d      	bne.n	8001dda <menu+0x18da>
 8001dbe:	4b25      	ldr	r3, [pc, #148]	@ (8001e54 <menu+0x1954>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	f083 0301 	eor.w	r3, r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <menu+0x18da>
			eepromData[12] = kapitablaTip;
 8001dcc:	4b28      	ldr	r3, [pc, #160]	@ (8001e70 <menu+0x1970>)
 8001dce:	781a      	ldrb	r2, [r3, #0]
 8001dd0:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <menu+0x195c>)
 8001dd2:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8001dd4:	4b22      	ldr	r3, [pc, #136]	@ (8001e60 <menu+0x1960>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8001dda:	4b22      	ldr	r3, [pc, #136]	@ (8001e64 <menu+0x1964>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b0e      	cmp	r3, #14
 8001de0:	f040 80fe 	bne.w	8001fe0 <menu+0x1ae0>
		if(dilSecim == 0) {
 8001de4:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <menu+0x193c>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <menu+0x18f8>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8001dec:	4a25      	ldr	r2, [pc, #148]	@ (8001e84 <menu+0x1984>)
 8001dee:	2101      	movs	r1, #1
 8001df0:	2001      	movs	r0, #1
 8001df2:	f7fe fb3e 	bl	8000472 <lcd_print>
 8001df6:	e008      	b.n	8001e0a <menu+0x190a>
		} else if(dilSecim == 1) {
 8001df8:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <menu+0x193c>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d104      	bne.n	8001e0a <menu+0x190a>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8001e00:	4a21      	ldr	r2, [pc, #132]	@ (8001e88 <menu+0x1988>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	2001      	movs	r0, #1
 8001e06:	f7fe fb34 	bl	8000472 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8001e0a:	4b20      	ldr	r3, [pc, #128]	@ (8001e8c <menu+0x198c>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d142      	bne.n	8001e98 <menu+0x1998>
			if(dilSecim == 0){
 8001e12:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <menu+0x193c>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d105      	bne.n	8001e26 <menu+0x1926>
				lcd_print(2, 1, "1. Katta ac    ");
 8001e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8001e90 <menu+0x1990>)
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	2002      	movs	r0, #2
 8001e20:	f7fe fb27 	bl	8000472 <lcd_print>
 8001e24:	e07d      	b.n	8001f22 <menu+0x1a22>
			} else if(dilSecim == 1) {
 8001e26:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <menu+0x193c>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d179      	bne.n	8001f22 <menu+0x1a22>
				lcd_print(2, 1, "1. Floor open  ");
 8001e2e:	4a19      	ldr	r2, [pc, #100]	@ (8001e94 <menu+0x1994>)
 8001e30:	2101      	movs	r1, #1
 8001e32:	2002      	movs	r0, #2
 8001e34:	f7fe fb1d 	bl	8000472 <lcd_print>
 8001e38:	e073      	b.n	8001f22 <menu+0x1a22>
 8001e3a:	bf00      	nop
 8001e3c:	200000ea 	.word	0x200000ea
 8001e40:	0800a1ec 	.word	0x0800a1ec
 8001e44:	0800a1a0 	.word	0x0800a1a0
 8001e48:	200000e4 	.word	0x200000e4
 8001e4c:	200000a0 	.word	0x200000a0
 8001e50:	40010800 	.word	0x40010800
 8001e54:	200000f8 	.word	0x200000f8
 8001e58:	200000d4 	.word	0x200000d4
 8001e5c:	20000060 	.word	0x20000060
 8001e60:	200000f5 	.word	0x200000f5
 8001e64:	200000ca 	.word	0x200000ca
 8001e68:	0800a200 	.word	0x0800a200
 8001e6c:	0800a214 	.word	0x0800a214
 8001e70:	200000d5 	.word	0x200000d5
 8001e74:	0800a11c 	.word	0x0800a11c
 8001e78:	0800a130 	.word	0x0800a130
 8001e7c:	0800a144 	.word	0x0800a144
 8001e80:	0800a158 	.word	0x0800a158
 8001e84:	0800a228 	.word	0x0800a228
 8001e88:	0800a23c 	.word	0x0800a23c
 8001e8c:	200000d7 	.word	0x200000d7
 8001e90:	0800a250 	.word	0x0800a250
 8001e94:	0800a260 	.word	0x0800a260
			}
		} else if(kapiTablaAcKonum == 1) {
 8001e98:	4b9b      	ldr	r3, [pc, #620]	@ (8002108 <menu+0x1c08>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d112      	bne.n	8001ec6 <menu+0x19c6>
			if(dilSecim == 0){
 8001ea0:	4b9a      	ldr	r3, [pc, #616]	@ (800210c <menu+0x1c0c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d104      	bne.n	8001eb2 <menu+0x19b2>
				lcd_print(2, 1, "2. Katta ac    ");
 8001ea8:	4a99      	ldr	r2, [pc, #612]	@ (8002110 <menu+0x1c10>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	2002      	movs	r0, #2
 8001eae:	f7fe fae0 	bl	8000472 <lcd_print>
			}
			if(dilSecim == 1){
 8001eb2:	4b96      	ldr	r3, [pc, #600]	@ (800210c <menu+0x1c0c>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d133      	bne.n	8001f22 <menu+0x1a22>
				lcd_print(2, 1, "2. Floor open  ");
 8001eba:	4a96      	ldr	r2, [pc, #600]	@ (8002114 <menu+0x1c14>)
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	2002      	movs	r0, #2
 8001ec0:	f7fe fad7 	bl	8000472 <lcd_print>
 8001ec4:	e02d      	b.n	8001f22 <menu+0x1a22>
			}
		} else if(kapiTablaAcKonum == 2) {
 8001ec6:	4b90      	ldr	r3, [pc, #576]	@ (8002108 <menu+0x1c08>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d113      	bne.n	8001ef6 <menu+0x19f6>
			if(dilSecim == 0){
 8001ece:	4b8f      	ldr	r3, [pc, #572]	@ (800210c <menu+0x1c0c>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d105      	bne.n	8001ee2 <menu+0x19e2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8001ed6:	4a90      	ldr	r2, [pc, #576]	@ (8002118 <menu+0x1c18>)
 8001ed8:	2101      	movs	r1, #1
 8001eda:	2002      	movs	r0, #2
 8001edc:	f7fe fac9 	bl	8000472 <lcd_print>
 8001ee0:	e01f      	b.n	8001f22 <menu+0x1a22>
			} else if(dilSecim == 1) {
 8001ee2:	4b8a      	ldr	r3, [pc, #552]	@ (800210c <menu+0x1c0c>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d11b      	bne.n	8001f22 <menu+0x1a22>
				lcd_print(2, 1, "1.+2. Floor open");
 8001eea:	4a8c      	ldr	r2, [pc, #560]	@ (800211c <menu+0x1c1c>)
 8001eec:	2101      	movs	r1, #1
 8001eee:	2002      	movs	r0, #2
 8001ef0:	f7fe fabf 	bl	8000472 <lcd_print>
 8001ef4:	e015      	b.n	8001f22 <menu+0x1a22>
			}
		} else if(kapiTablaAcKonum == 3) {
 8001ef6:	4b84      	ldr	r3, [pc, #528]	@ (8002108 <menu+0x1c08>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d111      	bne.n	8001f22 <menu+0x1a22>
			if(dilSecim == 0) {
 8001efe:	4b83      	ldr	r3, [pc, #524]	@ (800210c <menu+0x1c0c>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d104      	bne.n	8001f10 <menu+0x1a10>
				lcd_print(2, 1, "Pasif           ");
 8001f06:	4a86      	ldr	r2, [pc, #536]	@ (8002120 <menu+0x1c20>)
 8001f08:	2101      	movs	r1, #1
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	f7fe fab1 	bl	8000472 <lcd_print>
			}
			if(dilSecim == 1) {
 8001f10:	4b7e      	ldr	r3, [pc, #504]	@ (800210c <menu+0x1c0c>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d104      	bne.n	8001f22 <menu+0x1a22>
				lcd_print(2, 1, "Passive         ");
 8001f18:	4a82      	ldr	r2, [pc, #520]	@ (8002124 <menu+0x1c24>)
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f7fe faa8 	bl	8000472 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f22:	2102      	movs	r1, #2
 8001f24:	4880      	ldr	r0, [pc, #512]	@ (8002128 <menu+0x1c28>)
 8001f26:	f005 fa85 	bl	8007434 <HAL_GPIO_ReadPin>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d115      	bne.n	8001f5c <menu+0x1a5c>
 8001f30:	4b7e      	ldr	r3, [pc, #504]	@ (800212c <menu+0x1c2c>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	f083 0301 	eor.w	r3, r3, #1
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00e      	beq.n	8001f5c <menu+0x1a5c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8001f3e:	4b72      	ldr	r3, [pc, #456]	@ (8002108 <menu+0x1c08>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4b70      	ldr	r3, [pc, #448]	@ (8002108 <menu+0x1c08>)
 8001f48:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8001f4a:	4b6f      	ldr	r3, [pc, #444]	@ (8002108 <menu+0x1c08>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d902      	bls.n	8001f58 <menu+0x1a58>
				kapiTablaAcKonum = 0;
 8001f52:	4b6d      	ldr	r3, [pc, #436]	@ (8002108 <menu+0x1c08>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f58:	f001 fbfa 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	4872      	ldr	r0, [pc, #456]	@ (8002128 <menu+0x1c28>)
 8001f60:	f005 fa68 	bl	8007434 <HAL_GPIO_ReadPin>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d115      	bne.n	8001f96 <menu+0x1a96>
 8001f6a:	4b70      	ldr	r3, [pc, #448]	@ (800212c <menu+0x1c2c>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	f083 0301 	eor.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00e      	beq.n	8001f96 <menu+0x1a96>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8001f78:	4b63      	ldr	r3, [pc, #396]	@ (8002108 <menu+0x1c08>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	4b61      	ldr	r3, [pc, #388]	@ (8002108 <menu+0x1c08>)
 8001f82:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8001f84:	4b60      	ldr	r3, [pc, #384]	@ (8002108 <menu+0x1c08>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d902      	bls.n	8001f92 <menu+0x1a92>
		   		kapiTablaAcKonum = 2;
 8001f8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002108 <menu+0x1c08>)
 8001f8e:	2202      	movs	r2, #2
 8001f90:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f92:	f001 fbdd 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f96:	2108      	movs	r1, #8
 8001f98:	4863      	ldr	r0, [pc, #396]	@ (8002128 <menu+0x1c28>)
 8001f9a:	f005 fa4b 	bl	8007434 <HAL_GPIO_ReadPin>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d11d      	bne.n	8001fe0 <menu+0x1ae0>
 8001fa4:	4b61      	ldr	r3, [pc, #388]	@ (800212c <menu+0x1c2c>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	f083 0301 	eor.w	r3, r3, #1
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d016      	beq.n	8001fe0 <menu+0x1ae0>
			eepromData[34] = kapiTablaAcKonum;
 8001fb2:	4b55      	ldr	r3, [pc, #340]	@ (8002108 <menu+0x1c08>)
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	4b5e      	ldr	r3, [pc, #376]	@ (8002130 <menu+0x1c30>)
 8001fb8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8001fbc:	4b52      	ldr	r3, [pc, #328]	@ (8002108 <menu+0x1c08>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <menu+0x1acc>
 8001fc4:	4b50      	ldr	r3, [pc, #320]	@ (8002108 <menu+0x1c08>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d106      	bne.n	8001fda <menu+0x1ada>
				altLimit = 1;
 8001fcc:	4b59      	ldr	r3, [pc, #356]	@ (8002134 <menu+0x1c34>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001fd2:	4b58      	ldr	r3, [pc, #352]	@ (8002134 <menu+0x1c34>)
 8001fd4:	781a      	ldrb	r2, [r3, #0]
 8001fd6:	4b56      	ldr	r3, [pc, #344]	@ (8002130 <menu+0x1c30>)
 8001fd8:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8001fda:	4b57      	ldr	r3, [pc, #348]	@ (8002138 <menu+0x1c38>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8001fe0:	4b56      	ldr	r3, [pc, #344]	@ (800213c <menu+0x1c3c>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b0f      	cmp	r3, #15
 8001fe6:	d17f      	bne.n	80020e8 <menu+0x1be8>
		if(dilSecim == 0) {
 8001fe8:	4b48      	ldr	r3, [pc, #288]	@ (800210c <menu+0x1c0c>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10a      	bne.n	8002006 <menu+0x1b06>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8001ff0:	4a53      	ldr	r2, [pc, #332]	@ (8002140 <menu+0x1c40>)
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f7fe fa3c 	bl	8000472 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001ffa:	4a52      	ldr	r2, [pc, #328]	@ (8002144 <menu+0x1c44>)
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	2002      	movs	r0, #2
 8002000:	f7fe fa37 	bl	8000472 <lcd_print>
 8002004:	e00d      	b.n	8002022 <menu+0x1b22>
		} else if(dilSecim == 1) {
 8002006:	4b41      	ldr	r3, [pc, #260]	@ (800210c <menu+0x1c0c>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d109      	bne.n	8002022 <menu+0x1b22>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 800200e:	4a4e      	ldr	r2, [pc, #312]	@ (8002148 <menu+0x1c48>)
 8002010:	2101      	movs	r1, #1
 8002012:	2001      	movs	r0, #1
 8002014:	f7fe fa2d 	bl	8000472 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002018:	4a4c      	ldr	r2, [pc, #304]	@ (800214c <menu+0x1c4c>)
 800201a:	2101      	movs	r1, #1
 800201c:	2002      	movs	r0, #2
 800201e:	f7fe fa28 	bl	8000472 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002022:	4b4b      	ldr	r3, [pc, #300]	@ (8002150 <menu+0x1c50>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	220a      	movs	r2, #10
 8002028:	494a      	ldr	r1, [pc, #296]	@ (8002154 <menu+0x1c54>)
 800202a:	4618      	mov	r0, r3
 800202c:	f007 fda4 	bl	8009b78 <itoa>
		lcd_print(2,16,snum);
 8002030:	4a48      	ldr	r2, [pc, #288]	@ (8002154 <menu+0x1c54>)
 8002032:	2110      	movs	r1, #16
 8002034:	2002      	movs	r0, #2
 8002036:	f7fe fa1c 	bl	8000472 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800203a:	2102      	movs	r1, #2
 800203c:	483a      	ldr	r0, [pc, #232]	@ (8002128 <menu+0x1c28>)
 800203e:	f005 f9f9 	bl	8007434 <HAL_GPIO_ReadPin>
 8002042:	4603      	mov	r3, r0
 8002044:	2b01      	cmp	r3, #1
 8002046:	d119      	bne.n	800207c <menu+0x1b7c>
 8002048:	4b38      	ldr	r3, [pc, #224]	@ (800212c <menu+0x1c2c>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	f083 0301 	eor.w	r3, r3, #1
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d012      	beq.n	800207c <menu+0x1b7c>
 8002056:	4b40      	ldr	r3, [pc, #256]	@ (8002158 <menu+0x1c58>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10e      	bne.n	800207c <menu+0x1b7c>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 800205e:	4b3c      	ldr	r3, [pc, #240]	@ (8002150 <menu+0x1c50>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b3a      	ldr	r3, [pc, #232]	@ (8002150 <menu+0x1c50>)
 8002068:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 800206a:	4b39      	ldr	r3, [pc, #228]	@ (8002150 <menu+0x1c50>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b05      	cmp	r3, #5
 8002070:	d902      	bls.n	8002078 <menu+0x1b78>
				kapiTablaAcSure = 0;
 8002072:	4b37      	ldr	r3, [pc, #220]	@ (8002150 <menu+0x1c50>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002078:	f001 fb6a 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800207c:	2104      	movs	r1, #4
 800207e:	482a      	ldr	r0, [pc, #168]	@ (8002128 <menu+0x1c28>)
 8002080:	f005 f9d8 	bl	8007434 <HAL_GPIO_ReadPin>
 8002084:	4603      	mov	r3, r0
 8002086:	2b01      	cmp	r3, #1
 8002088:	d119      	bne.n	80020be <menu+0x1bbe>
 800208a:	4b28      	ldr	r3, [pc, #160]	@ (800212c <menu+0x1c2c>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	f083 0301 	eor.w	r3, r3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d012      	beq.n	80020be <menu+0x1bbe>
 8002098:	4b2f      	ldr	r3, [pc, #188]	@ (8002158 <menu+0x1c58>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10e      	bne.n	80020be <menu+0x1bbe>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80020a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002150 <menu+0x1c50>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b29      	ldr	r3, [pc, #164]	@ (8002150 <menu+0x1c50>)
 80020aa:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80020ac:	4b28      	ldr	r3, [pc, #160]	@ (8002150 <menu+0x1c50>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b06      	cmp	r3, #6
 80020b2:	d902      	bls.n	80020ba <menu+0x1bba>
		   		kapiTablaAcSure = 5;
 80020b4:	4b26      	ldr	r3, [pc, #152]	@ (8002150 <menu+0x1c50>)
 80020b6:	2205      	movs	r2, #5
 80020b8:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80020ba:	f001 fb49 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020be:	2108      	movs	r1, #8
 80020c0:	4819      	ldr	r0, [pc, #100]	@ (8002128 <menu+0x1c28>)
 80020c2:	f005 f9b7 	bl	8007434 <HAL_GPIO_ReadPin>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d10d      	bne.n	80020e8 <menu+0x1be8>
 80020cc:	4b17      	ldr	r3, [pc, #92]	@ (800212c <menu+0x1c2c>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	f083 0301 	eor.w	r3, r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <menu+0x1be8>
			eepromData[13] = kapiTablaAcSure;
 80020da:	4b1d      	ldr	r3, [pc, #116]	@ (8002150 <menu+0x1c50>)
 80020dc:	781a      	ldrb	r2, [r3, #0]
 80020de:	4b14      	ldr	r3, [pc, #80]	@ (8002130 <menu+0x1c30>)
 80020e0:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80020e2:	4b15      	ldr	r3, [pc, #84]	@ (8002138 <menu+0x1c38>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80020e8:	4b14      	ldr	r3, [pc, #80]	@ (800213c <menu+0x1c3c>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b10      	cmp	r3, #16
 80020ee:	f040 80be 	bne.w	800226e <menu+0x1d6e>
		if(dilSecim == 0) {
 80020f2:	4b06      	ldr	r3, [pc, #24]	@ (800210c <menu+0x1c0c>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d132      	bne.n	8002160 <menu+0x1c60>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80020fa:	4a18      	ldr	r2, [pc, #96]	@ (800215c <menu+0x1c5c>)
 80020fc:	2101      	movs	r1, #1
 80020fe:	2001      	movs	r0, #1
 8002100:	f7fe f9b7 	bl	8000472 <lcd_print>
 8002104:	e035      	b.n	8002172 <menu+0x1c72>
 8002106:	bf00      	nop
 8002108:	200000d7 	.word	0x200000d7
 800210c:	200000ea 	.word	0x200000ea
 8002110:	0800a270 	.word	0x0800a270
 8002114:	0800a280 	.word	0x0800a280
 8002118:	0800a290 	.word	0x0800a290
 800211c:	0800a2a4 	.word	0x0800a2a4
 8002120:	08009f14 	.word	0x08009f14
 8002124:	08009f28 	.word	0x08009f28
 8002128:	40010800 	.word	0x40010800
 800212c:	200000f8 	.word	0x200000f8
 8002130:	20000060 	.word	0x20000060
 8002134:	200000d0 	.word	0x200000d0
 8002138:	200000f5 	.word	0x200000f5
 800213c:	200000ca 	.word	0x200000ca
 8002140:	0800a2b8 	.word	0x0800a2b8
 8002144:	0800a17c 	.word	0x0800a17c
 8002148:	0800a2cc 	.word	0x0800a2cc
 800214c:	0800a1a0 	.word	0x0800a1a0
 8002150:	200000e5 	.word	0x200000e5
 8002154:	200000a0 	.word	0x200000a0
 8002158:	200000d5 	.word	0x200000d5
 800215c:	0800a2e0 	.word	0x0800a2e0
		} else if(dilSecim == 1) {
 8002160:	4b6e      	ldr	r3, [pc, #440]	@ (800231c <menu+0x1e1c>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d104      	bne.n	8002172 <menu+0x1c72>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002168:	4a6d      	ldr	r2, [pc, #436]	@ (8002320 <menu+0x1e20>)
 800216a:	2101      	movs	r1, #1
 800216c:	2001      	movs	r0, #1
 800216e:	f7fe f980 	bl	8000472 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002172:	4b6c      	ldr	r3, [pc, #432]	@ (8002324 <menu+0x1e24>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d113      	bne.n	80021a2 <menu+0x1ca2>
			if(dilSecim == 0) {
 800217a:	4b68      	ldr	r3, [pc, #416]	@ (800231c <menu+0x1e1c>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d105      	bne.n	800218e <menu+0x1c8e>
				lcd_print(2, 1, "Pasif           ");
 8002182:	4a69      	ldr	r2, [pc, #420]	@ (8002328 <menu+0x1e28>)
 8002184:	2101      	movs	r1, #1
 8002186:	2002      	movs	r0, #2
 8002188:	f7fe f973 	bl	8000472 <lcd_print>
 800218c:	e020      	b.n	80021d0 <menu+0x1cd0>
			} else if(dilSecim == 1) {
 800218e:	4b63      	ldr	r3, [pc, #396]	@ (800231c <menu+0x1e1c>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d11c      	bne.n	80021d0 <menu+0x1cd0>
				lcd_print(2, 1, "Passive         ");
 8002196:	4a65      	ldr	r2, [pc, #404]	@ (800232c <menu+0x1e2c>)
 8002198:	2101      	movs	r1, #1
 800219a:	2002      	movs	r0, #2
 800219c:	f7fe f969 	bl	8000472 <lcd_print>
 80021a0:	e016      	b.n	80021d0 <menu+0x1cd0>
			}
		} else if(yukariYavasLimit == 1) {
 80021a2:	4b60      	ldr	r3, [pc, #384]	@ (8002324 <menu+0x1e24>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d112      	bne.n	80021d0 <menu+0x1cd0>
			if(dilSecim == 0) {
 80021aa:	4b5c      	ldr	r3, [pc, #368]	@ (800231c <menu+0x1e1c>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d105      	bne.n	80021be <menu+0x1cbe>
				lcd_print(2, 1, "Aktif           ");
 80021b2:	4a5f      	ldr	r2, [pc, #380]	@ (8002330 <menu+0x1e30>)
 80021b4:	2101      	movs	r1, #1
 80021b6:	2002      	movs	r0, #2
 80021b8:	f7fe f95b 	bl	8000472 <lcd_print>
 80021bc:	e008      	b.n	80021d0 <menu+0x1cd0>
			} else if(dilSecim == 1) {
 80021be:	4b57      	ldr	r3, [pc, #348]	@ (800231c <menu+0x1e1c>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d104      	bne.n	80021d0 <menu+0x1cd0>
				lcd_print(2, 1, "Active          ");
 80021c6:	4a5b      	ldr	r2, [pc, #364]	@ (8002334 <menu+0x1e34>)
 80021c8:	2101      	movs	r1, #1
 80021ca:	2002      	movs	r0, #2
 80021cc:	f7fe f951 	bl	8000472 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021d0:	2102      	movs	r1, #2
 80021d2:	4859      	ldr	r0, [pc, #356]	@ (8002338 <menu+0x1e38>)
 80021d4:	f005 f92e 	bl	8007434 <HAL_GPIO_ReadPin>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d115      	bne.n	800220a <menu+0x1d0a>
 80021de:	4b57      	ldr	r3, [pc, #348]	@ (800233c <menu+0x1e3c>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	f083 0301 	eor.w	r3, r3, #1
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00e      	beq.n	800220a <menu+0x1d0a>
			yukariYavasLimit = yukariYavasLimit + 1;
 80021ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002324 <menu+0x1e24>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002324 <menu+0x1e24>)
 80021f6:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80021f8:	4b4a      	ldr	r3, [pc, #296]	@ (8002324 <menu+0x1e24>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d902      	bls.n	8002206 <menu+0x1d06>
				yukariYavasLimit = 0;
 8002200:	4b48      	ldr	r3, [pc, #288]	@ (8002324 <menu+0x1e24>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002206:	f001 faa3 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800220a:	2104      	movs	r1, #4
 800220c:	484a      	ldr	r0, [pc, #296]	@ (8002338 <menu+0x1e38>)
 800220e:	f005 f911 	bl	8007434 <HAL_GPIO_ReadPin>
 8002212:	4603      	mov	r3, r0
 8002214:	2b01      	cmp	r3, #1
 8002216:	d115      	bne.n	8002244 <menu+0x1d44>
 8002218:	4b48      	ldr	r3, [pc, #288]	@ (800233c <menu+0x1e3c>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	f083 0301 	eor.w	r3, r3, #1
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00e      	beq.n	8002244 <menu+0x1d44>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002226:	4b3f      	ldr	r3, [pc, #252]	@ (8002324 <menu+0x1e24>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	3b01      	subs	r3, #1
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b3d      	ldr	r3, [pc, #244]	@ (8002324 <menu+0x1e24>)
 8002230:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002232:	4b3c      	ldr	r3, [pc, #240]	@ (8002324 <menu+0x1e24>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <menu+0x1d40>
		   		yukariYavasLimit = 1;
 800223a:	4b3a      	ldr	r3, [pc, #232]	@ (8002324 <menu+0x1e24>)
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002240:	f001 fa86 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002244:	2108      	movs	r1, #8
 8002246:	483c      	ldr	r0, [pc, #240]	@ (8002338 <menu+0x1e38>)
 8002248:	f005 f8f4 	bl	8007434 <HAL_GPIO_ReadPin>
 800224c:	4603      	mov	r3, r0
 800224e:	2b01      	cmp	r3, #1
 8002250:	d10d      	bne.n	800226e <menu+0x1d6e>
 8002252:	4b3a      	ldr	r3, [pc, #232]	@ (800233c <menu+0x1e3c>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	f083 0301 	eor.w	r3, r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d006      	beq.n	800226e <menu+0x1d6e>
			eepromData[14] = yukariYavasLimit;
 8002260:	4b30      	ldr	r3, [pc, #192]	@ (8002324 <menu+0x1e24>)
 8002262:	781a      	ldrb	r2, [r3, #0]
 8002264:	4b36      	ldr	r3, [pc, #216]	@ (8002340 <menu+0x1e40>)
 8002266:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002268:	4b36      	ldr	r3, [pc, #216]	@ (8002344 <menu+0x1e44>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 800226e:	4b36      	ldr	r3, [pc, #216]	@ (8002348 <menu+0x1e48>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b11      	cmp	r3, #17
 8002274:	f040 80ea 	bne.w	800244c <menu+0x1f4c>
		if(dilSecim == 0) {
 8002278:	4b28      	ldr	r3, [pc, #160]	@ (800231c <menu+0x1e1c>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d105      	bne.n	800228c <menu+0x1d8c>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002280:	4a32      	ldr	r2, [pc, #200]	@ (800234c <menu+0x1e4c>)
 8002282:	2101      	movs	r1, #1
 8002284:	2001      	movs	r0, #1
 8002286:	f7fe f8f4 	bl	8000472 <lcd_print>
 800228a:	e008      	b.n	800229e <menu+0x1d9e>
		} else if(dilSecim == 1) {
 800228c:	4b23      	ldr	r3, [pc, #140]	@ (800231c <menu+0x1e1c>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d104      	bne.n	800229e <menu+0x1d9e>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002294:	4a2e      	ldr	r2, [pc, #184]	@ (8002350 <menu+0x1e50>)
 8002296:	2101      	movs	r1, #1
 8002298:	2001      	movs	r0, #1
 800229a:	f7fe f8ea 	bl	8000472 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 800229e:	4b2d      	ldr	r3, [pc, #180]	@ (8002354 <menu+0x1e54>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d113      	bne.n	80022ce <menu+0x1dce>
			if(dilSecim == 0){
 80022a6:	4b1d      	ldr	r3, [pc, #116]	@ (800231c <menu+0x1e1c>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <menu+0x1dba>
				lcd_print(2, 1, "Devirme aktif  ");
 80022ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002358 <menu+0x1e58>)
 80022b0:	2101      	movs	r1, #1
 80022b2:	2002      	movs	r0, #2
 80022b4:	f7fe f8dd 	bl	8000472 <lcd_print>
 80022b8:	e05f      	b.n	800237a <menu+0x1e7a>
			} else if(dilSecim == 1){
 80022ba:	4b18      	ldr	r3, [pc, #96]	@ (800231c <menu+0x1e1c>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d15b      	bne.n	800237a <menu+0x1e7a>
				lcd_print(2, 1, "Tipping active ");
 80022c2:	4a26      	ldr	r2, [pc, #152]	@ (800235c <menu+0x1e5c>)
 80022c4:	2101      	movs	r1, #1
 80022c6:	2002      	movs	r0, #2
 80022c8:	f7fe f8d3 	bl	8000472 <lcd_print>
 80022cc:	e055      	b.n	800237a <menu+0x1e7a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80022ce:	4b21      	ldr	r3, [pc, #132]	@ (8002354 <menu+0x1e54>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d113      	bne.n	80022fe <menu+0x1dfe>
			if(dilSecim == 0){
 80022d6:	4b11      	ldr	r3, [pc, #68]	@ (800231c <menu+0x1e1c>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d105      	bne.n	80022ea <menu+0x1dea>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80022de:	4a20      	ldr	r2, [pc, #128]	@ (8002360 <menu+0x1e60>)
 80022e0:	2101      	movs	r1, #1
 80022e2:	2002      	movs	r0, #2
 80022e4:	f7fe f8c5 	bl	8000472 <lcd_print>
 80022e8:	e047      	b.n	800237a <menu+0x1e7a>
			} else if(dilSecim == 1) {
 80022ea:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <menu+0x1e1c>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d143      	bne.n	800237a <menu+0x1e7a>
				lcd_print(2, 1, "Drive active   ");
 80022f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002364 <menu+0x1e64>)
 80022f4:	2101      	movs	r1, #1
 80022f6:	2002      	movs	r0, #2
 80022f8:	f7fe f8bb 	bl	8000472 <lcd_print>
 80022fc:	e03d      	b.n	800237a <menu+0x1e7a>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80022fe:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <menu+0x1e54>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d139      	bne.n	800237a <menu+0x1e7a>
			if(dilSecim == 0) {
 8002306:	4b05      	ldr	r3, [pc, #20]	@ (800231c <menu+0x1e1c>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d12c      	bne.n	8002368 <menu+0x1e68>
				lcd_print(2, 1, "Pasif           ");
 800230e:	4a06      	ldr	r2, [pc, #24]	@ (8002328 <menu+0x1e28>)
 8002310:	2101      	movs	r1, #1
 8002312:	2002      	movs	r0, #2
 8002314:	f7fe f8ad 	bl	8000472 <lcd_print>
 8002318:	e02f      	b.n	800237a <menu+0x1e7a>
 800231a:	bf00      	nop
 800231c:	200000ea 	.word	0x200000ea
 8002320:	0800a2f4 	.word	0x0800a2f4
 8002324:	200000d8 	.word	0x200000d8
 8002328:	08009f14 	.word	0x08009f14
 800232c:	08009f28 	.word	0x08009f28
 8002330:	08009f74 	.word	0x08009f74
 8002334:	08009f88 	.word	0x08009f88
 8002338:	40010800 	.word	0x40010800
 800233c:	200000f8 	.word	0x200000f8
 8002340:	20000060 	.word	0x20000060
 8002344:	200000f5 	.word	0x200000f5
 8002348:	200000ca 	.word	0x200000ca
 800234c:	0800a308 	.word	0x0800a308
 8002350:	0800a31c 	.word	0x0800a31c
 8002354:	200000d9 	.word	0x200000d9
 8002358:	0800a330 	.word	0x0800a330
 800235c:	0800a340 	.word	0x0800a340
 8002360:	0800a350 	.word	0x0800a350
 8002364:	0800a360 	.word	0x0800a360
			} else if(dilSecim == 1) {
 8002368:	4b9a      	ldr	r3, [pc, #616]	@ (80025d4 <menu+0x20d4>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d104      	bne.n	800237a <menu+0x1e7a>
				lcd_print(2, 1, "Passive         ");
 8002370:	4a99      	ldr	r2, [pc, #612]	@ (80025d8 <menu+0x20d8>)
 8002372:	2101      	movs	r1, #1
 8002374:	2002      	movs	r0, #2
 8002376:	f7fe f87c 	bl	8000472 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800237a:	2102      	movs	r1, #2
 800237c:	4897      	ldr	r0, [pc, #604]	@ (80025dc <menu+0x20dc>)
 800237e:	f005 f859 	bl	8007434 <HAL_GPIO_ReadPin>
 8002382:	4603      	mov	r3, r0
 8002384:	2b01      	cmp	r3, #1
 8002386:	d115      	bne.n	80023b4 <menu+0x1eb4>
 8002388:	4b95      	ldr	r3, [pc, #596]	@ (80025e0 <menu+0x20e0>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	f083 0301 	eor.w	r3, r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00e      	beq.n	80023b4 <menu+0x1eb4>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002396:	4b93      	ldr	r3, [pc, #588]	@ (80025e4 <menu+0x20e4>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	3301      	adds	r3, #1
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b91      	ldr	r3, [pc, #580]	@ (80025e4 <menu+0x20e4>)
 80023a0:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80023a2:	4b90      	ldr	r3, [pc, #576]	@ (80025e4 <menu+0x20e4>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d902      	bls.n	80023b0 <menu+0x1eb0>
				devirmeYuruyusSecim = 0;
 80023aa:	4b8e      	ldr	r3, [pc, #568]	@ (80025e4 <menu+0x20e4>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023b0:	f001 f9ce 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023b4:	2104      	movs	r1, #4
 80023b6:	4889      	ldr	r0, [pc, #548]	@ (80025dc <menu+0x20dc>)
 80023b8:	f005 f83c 	bl	8007434 <HAL_GPIO_ReadPin>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d115      	bne.n	80023ee <menu+0x1eee>
 80023c2:	4b87      	ldr	r3, [pc, #540]	@ (80025e0 <menu+0x20e0>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	f083 0301 	eor.w	r3, r3, #1
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00e      	beq.n	80023ee <menu+0x1eee>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80023d0:	4b84      	ldr	r3, [pc, #528]	@ (80025e4 <menu+0x20e4>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b82      	ldr	r3, [pc, #520]	@ (80025e4 <menu+0x20e4>)
 80023da:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80023dc:	4b81      	ldr	r3, [pc, #516]	@ (80025e4 <menu+0x20e4>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d902      	bls.n	80023ea <menu+0x1eea>
		   		devirmeYuruyusSecim = 2;
 80023e4:	4b7f      	ldr	r3, [pc, #508]	@ (80025e4 <menu+0x20e4>)
 80023e6:	2202      	movs	r2, #2
 80023e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023ea:	f001 f9b1 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023ee:	2108      	movs	r1, #8
 80023f0:	487a      	ldr	r0, [pc, #488]	@ (80025dc <menu+0x20dc>)
 80023f2:	f005 f81f 	bl	8007434 <HAL_GPIO_ReadPin>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d127      	bne.n	800244c <menu+0x1f4c>
 80023fc:	4b78      	ldr	r3, [pc, #480]	@ (80025e0 <menu+0x20e0>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	f083 0301 	eor.w	r3, r3, #1
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d020      	beq.n	800244c <menu+0x1f4c>
			eepromData[15] = devirmeYuruyusSecim;
 800240a:	4b76      	ldr	r3, [pc, #472]	@ (80025e4 <menu+0x20e4>)
 800240c:	781a      	ldrb	r2, [r3, #0]
 800240e:	4b76      	ldr	r3, [pc, #472]	@ (80025e8 <menu+0x20e8>)
 8002410:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002412:	4b74      	ldr	r3, [pc, #464]	@ (80025e4 <menu+0x20e4>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d003      	beq.n	8002422 <menu+0x1f22>
 800241a:	4b72      	ldr	r3, [pc, #456]	@ (80025e4 <menu+0x20e4>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d106      	bne.n	8002430 <menu+0x1f30>
				calismaSekli = 0;
 8002422:	4b72      	ldr	r3, [pc, #456]	@ (80025ec <menu+0x20ec>)
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002428:	4b70      	ldr	r3, [pc, #448]	@ (80025ec <menu+0x20ec>)
 800242a:	781a      	ldrb	r2, [r3, #0]
 800242c:	4b6e      	ldr	r3, [pc, #440]	@ (80025e8 <menu+0x20e8>)
 800242e:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002430:	4b6c      	ldr	r3, [pc, #432]	@ (80025e4 <menu+0x20e4>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d106      	bne.n	8002446 <menu+0x1f46>
				devirmeSilindirTipi = 1;
 8002438:	4b6d      	ldr	r3, [pc, #436]	@ (80025f0 <menu+0x20f0>)
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800243e:	4b6c      	ldr	r3, [pc, #432]	@ (80025f0 <menu+0x20f0>)
 8002440:	781a      	ldrb	r2, [r3, #0]
 8002442:	4b69      	ldr	r3, [pc, #420]	@ (80025e8 <menu+0x20e8>)
 8002444:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002446:	4b6b      	ldr	r3, [pc, #428]	@ (80025f4 <menu+0x20f4>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 800244c:	4b6a      	ldr	r3, [pc, #424]	@ (80025f8 <menu+0x20f8>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b12      	cmp	r3, #18
 8002452:	f040 80ac 	bne.w	80025ae <menu+0x20ae>
		if(devirmeYuruyusSecim == 2) {
 8002456:	4b63      	ldr	r3, [pc, #396]	@ (80025e4 <menu+0x20e4>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d113      	bne.n	8002486 <menu+0x1f86>
			if(dilSecim == 0) {
 800245e:	4b5d      	ldr	r3, [pc, #372]	@ (80025d4 <menu+0x20d4>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <menu+0x1f72>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8002466:	4a65      	ldr	r2, [pc, #404]	@ (80025fc <menu+0x20fc>)
 8002468:	2101      	movs	r1, #1
 800246a:	2001      	movs	r0, #1
 800246c:	f7fe f801 	bl	8000472 <lcd_print>
 8002470:	e01f      	b.n	80024b2 <menu+0x1fb2>
			} else if(dilSecim == 1) {
 8002472:	4b58      	ldr	r3, [pc, #352]	@ (80025d4 <menu+0x20d4>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d11b      	bne.n	80024b2 <menu+0x1fb2>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 800247a:	4a61      	ldr	r2, [pc, #388]	@ (8002600 <menu+0x2100>)
 800247c:	2101      	movs	r1, #1
 800247e:	2001      	movs	r0, #1
 8002480:	f7fd fff7 	bl	8000472 <lcd_print>
 8002484:	e015      	b.n	80024b2 <menu+0x1fb2>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002486:	4b57      	ldr	r3, [pc, #348]	@ (80025e4 <menu+0x20e4>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d111      	bne.n	80024b2 <menu+0x1fb2>
			if(dilSecim == 0){
 800248e:	4b51      	ldr	r3, [pc, #324]	@ (80025d4 <menu+0x20d4>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d104      	bne.n	80024a0 <menu+0x1fa0>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8002496:	4a5b      	ldr	r2, [pc, #364]	@ (8002604 <menu+0x2104>)
 8002498:	2101      	movs	r1, #1
 800249a:	2001      	movs	r0, #1
 800249c:	f7fd ffe9 	bl	8000472 <lcd_print>
			}
			if(dilSecim == 1){
 80024a0:	4b4c      	ldr	r3, [pc, #304]	@ (80025d4 <menu+0x20d4>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d104      	bne.n	80024b2 <menu+0x1fb2>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80024a8:	4a57      	ldr	r2, [pc, #348]	@ (8002608 <menu+0x2108>)
 80024aa:	2101      	movs	r1, #1
 80024ac:	2001      	movs	r0, #1
 80024ae:	f7fd ffe0 	bl	8000472 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80024b2:	4b56      	ldr	r3, [pc, #344]	@ (800260c <menu+0x210c>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d113      	bne.n	80024e2 <menu+0x1fe2>
			if(dilSecim == 0) {
 80024ba:	4b46      	ldr	r3, [pc, #280]	@ (80025d4 <menu+0x20d4>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <menu+0x1fce>
				lcd_print(2, 1, "Pasif           ");
 80024c2:	4a53      	ldr	r2, [pc, #332]	@ (8002610 <menu+0x2110>)
 80024c4:	2101      	movs	r1, #1
 80024c6:	2002      	movs	r0, #2
 80024c8:	f7fd ffd3 	bl	8000472 <lcd_print>
 80024cc:	e020      	b.n	8002510 <menu+0x2010>
			} else if(dilSecim == 1){
 80024ce:	4b41      	ldr	r3, [pc, #260]	@ (80025d4 <menu+0x20d4>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d11c      	bne.n	8002510 <menu+0x2010>
				lcd_print(2, 1, "Passive         ");
 80024d6:	4a40      	ldr	r2, [pc, #256]	@ (80025d8 <menu+0x20d8>)
 80024d8:	2101      	movs	r1, #1
 80024da:	2002      	movs	r0, #2
 80024dc:	f7fd ffc9 	bl	8000472 <lcd_print>
 80024e0:	e016      	b.n	8002510 <menu+0x2010>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80024e2:	4b4a      	ldr	r3, [pc, #296]	@ (800260c <menu+0x210c>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d112      	bne.n	8002510 <menu+0x2010>
			if(dilSecim == 0){
 80024ea:	4b3a      	ldr	r3, [pc, #232]	@ (80025d4 <menu+0x20d4>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d105      	bne.n	80024fe <menu+0x1ffe>
				lcd_print(2, 1, "Aktif           ");
 80024f2:	4a48      	ldr	r2, [pc, #288]	@ (8002614 <menu+0x2114>)
 80024f4:	2101      	movs	r1, #1
 80024f6:	2002      	movs	r0, #2
 80024f8:	f7fd ffbb 	bl	8000472 <lcd_print>
 80024fc:	e008      	b.n	8002510 <menu+0x2010>
			} else if(dilSecim == 1){
 80024fe:	4b35      	ldr	r3, [pc, #212]	@ (80025d4 <menu+0x20d4>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d104      	bne.n	8002510 <menu+0x2010>
				lcd_print(2, 1, "Active          ");
 8002506:	4a44      	ldr	r2, [pc, #272]	@ (8002618 <menu+0x2118>)
 8002508:	2101      	movs	r1, #1
 800250a:	2002      	movs	r0, #2
 800250c:	f7fd ffb1 	bl	8000472 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002510:	2102      	movs	r1, #2
 8002512:	4832      	ldr	r0, [pc, #200]	@ (80025dc <menu+0x20dc>)
 8002514:	f004 ff8e 	bl	8007434 <HAL_GPIO_ReadPin>
 8002518:	4603      	mov	r3, r0
 800251a:	2b01      	cmp	r3, #1
 800251c:	d115      	bne.n	800254a <menu+0x204a>
 800251e:	4b30      	ldr	r3, [pc, #192]	@ (80025e0 <menu+0x20e0>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	f083 0301 	eor.w	r3, r3, #1
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00e      	beq.n	800254a <menu+0x204a>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800252c:	4b37      	ldr	r3, [pc, #220]	@ (800260c <menu+0x210c>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	3301      	adds	r3, #1
 8002532:	b2da      	uxtb	r2, r3
 8002534:	4b35      	ldr	r3, [pc, #212]	@ (800260c <menu+0x210c>)
 8002536:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002538:	4b34      	ldr	r3, [pc, #208]	@ (800260c <menu+0x210c>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d902      	bls.n	8002546 <menu+0x2046>
				devirmeYukariIleriLimit = 0;
 8002540:	4b32      	ldr	r3, [pc, #200]	@ (800260c <menu+0x210c>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002546:	f001 f903 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800254a:	2104      	movs	r1, #4
 800254c:	4823      	ldr	r0, [pc, #140]	@ (80025dc <menu+0x20dc>)
 800254e:	f004 ff71 	bl	8007434 <HAL_GPIO_ReadPin>
 8002552:	4603      	mov	r3, r0
 8002554:	2b01      	cmp	r3, #1
 8002556:	d115      	bne.n	8002584 <menu+0x2084>
 8002558:	4b21      	ldr	r3, [pc, #132]	@ (80025e0 <menu+0x20e0>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	f083 0301 	eor.w	r3, r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00e      	beq.n	8002584 <menu+0x2084>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002566:	4b29      	ldr	r3, [pc, #164]	@ (800260c <menu+0x210c>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	3b01      	subs	r3, #1
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4b27      	ldr	r3, [pc, #156]	@ (800260c <menu+0x210c>)
 8002570:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002572:	4b26      	ldr	r3, [pc, #152]	@ (800260c <menu+0x210c>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <menu+0x2080>
		   		devirmeYukariIleriLimit = 1;
 800257a:	4b24      	ldr	r3, [pc, #144]	@ (800260c <menu+0x210c>)
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002580:	f001 f8e6 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002584:	2108      	movs	r1, #8
 8002586:	4815      	ldr	r0, [pc, #84]	@ (80025dc <menu+0x20dc>)
 8002588:	f004 ff54 	bl	8007434 <HAL_GPIO_ReadPin>
 800258c:	4603      	mov	r3, r0
 800258e:	2b01      	cmp	r3, #1
 8002590:	d10d      	bne.n	80025ae <menu+0x20ae>
 8002592:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <menu+0x20e0>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	f083 0301 	eor.w	r3, r3, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d006      	beq.n	80025ae <menu+0x20ae>
			eepromData[16] = devirmeYukariIleriLimit;
 80025a0:	4b1a      	ldr	r3, [pc, #104]	@ (800260c <menu+0x210c>)
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <menu+0x20e8>)
 80025a6:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80025a8:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <menu+0x20f4>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80025ae:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <menu+0x20f8>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b13      	cmp	r3, #19
 80025b4:	f040 80d2 	bne.w	800275c <menu+0x225c>
		if(devirmeYuruyusSecim == 2) {
 80025b8:	4b0a      	ldr	r3, [pc, #40]	@ (80025e4 <menu+0x20e4>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d139      	bne.n	8002634 <menu+0x2134>
			if(dilSecim == 0) {
 80025c0:	4b04      	ldr	r3, [pc, #16]	@ (80025d4 <menu+0x20d4>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d12b      	bne.n	8002620 <menu+0x2120>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80025c8:	4a14      	ldr	r2, [pc, #80]	@ (800261c <menu+0x211c>)
 80025ca:	2101      	movs	r1, #1
 80025cc:	2001      	movs	r0, #1
 80025ce:	f7fd ff50 	bl	8000472 <lcd_print>
 80025d2:	e045      	b.n	8002660 <menu+0x2160>
 80025d4:	200000ea 	.word	0x200000ea
 80025d8:	08009f28 	.word	0x08009f28
 80025dc:	40010800 	.word	0x40010800
 80025e0:	200000f8 	.word	0x200000f8
 80025e4:	200000d9 	.word	0x200000d9
 80025e8:	20000060 	.word	0x20000060
 80025ec:	200000cb 	.word	0x200000cb
 80025f0:	200000dc 	.word	0x200000dc
 80025f4:	200000f5 	.word	0x200000f5
 80025f8:	200000ca 	.word	0x200000ca
 80025fc:	0800a370 	.word	0x0800a370
 8002600:	0800a384 	.word	0x0800a384
 8002604:	0800a394 	.word	0x0800a394
 8002608:	0800a3a8 	.word	0x0800a3a8
 800260c:	200000da 	.word	0x200000da
 8002610:	08009f14 	.word	0x08009f14
 8002614:	08009f74 	.word	0x08009f74
 8002618:	08009f88 	.word	0x08009f88
 800261c:	0800a3bc 	.word	0x0800a3bc
			} else if(dilSecim == 1) {
 8002620:	4b7b      	ldr	r3, [pc, #492]	@ (8002810 <menu+0x2310>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d11b      	bne.n	8002660 <menu+0x2160>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8002628:	4a7a      	ldr	r2, [pc, #488]	@ (8002814 <menu+0x2314>)
 800262a:	2101      	movs	r1, #1
 800262c:	2001      	movs	r0, #1
 800262e:	f7fd ff20 	bl	8000472 <lcd_print>
 8002632:	e015      	b.n	8002660 <menu+0x2160>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002634:	4b78      	ldr	r3, [pc, #480]	@ (8002818 <menu+0x2318>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d111      	bne.n	8002660 <menu+0x2160>
			if(dilSecim == 0) {
 800263c:	4b74      	ldr	r3, [pc, #464]	@ (8002810 <menu+0x2310>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d104      	bne.n	800264e <menu+0x214e>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8002644:	4a75      	ldr	r2, [pc, #468]	@ (800281c <menu+0x231c>)
 8002646:	2101      	movs	r1, #1
 8002648:	2001      	movs	r0, #1
 800264a:	f7fd ff12 	bl	8000472 <lcd_print>
			}
			if(dilSecim == 1) {
 800264e:	4b70      	ldr	r3, [pc, #448]	@ (8002810 <menu+0x2310>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d104      	bne.n	8002660 <menu+0x2160>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8002656:	4a72      	ldr	r2, [pc, #456]	@ (8002820 <menu+0x2320>)
 8002658:	2101      	movs	r1, #1
 800265a:	2001      	movs	r0, #1
 800265c:	f7fd ff09 	bl	8000472 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002660:	4b70      	ldr	r3, [pc, #448]	@ (8002824 <menu+0x2324>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d113      	bne.n	8002690 <menu+0x2190>
			if(dilSecim == 0) {
 8002668:	4b69      	ldr	r3, [pc, #420]	@ (8002810 <menu+0x2310>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d105      	bne.n	800267c <menu+0x217c>
				lcd_print(2, 1, "Pasif           ");
 8002670:	4a6d      	ldr	r2, [pc, #436]	@ (8002828 <menu+0x2328>)
 8002672:	2101      	movs	r1, #1
 8002674:	2002      	movs	r0, #2
 8002676:	f7fd fefc 	bl	8000472 <lcd_print>
 800267a:	e020      	b.n	80026be <menu+0x21be>
			} else if(dilSecim == 1) {
 800267c:	4b64      	ldr	r3, [pc, #400]	@ (8002810 <menu+0x2310>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d11c      	bne.n	80026be <menu+0x21be>
				lcd_print(2, 1, "Passive         ");
 8002684:	4a69      	ldr	r2, [pc, #420]	@ (800282c <menu+0x232c>)
 8002686:	2101      	movs	r1, #1
 8002688:	2002      	movs	r0, #2
 800268a:	f7fd fef2 	bl	8000472 <lcd_print>
 800268e:	e016      	b.n	80026be <menu+0x21be>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8002690:	4b64      	ldr	r3, [pc, #400]	@ (8002824 <menu+0x2324>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d112      	bne.n	80026be <menu+0x21be>
			if(dilSecim == 0) {
 8002698:	4b5d      	ldr	r3, [pc, #372]	@ (8002810 <menu+0x2310>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <menu+0x21ac>
				lcd_print(2, 1, "Aktif           ");
 80026a0:	4a63      	ldr	r2, [pc, #396]	@ (8002830 <menu+0x2330>)
 80026a2:	2101      	movs	r1, #1
 80026a4:	2002      	movs	r0, #2
 80026a6:	f7fd fee4 	bl	8000472 <lcd_print>
 80026aa:	e008      	b.n	80026be <menu+0x21be>
			} else if(dilSecim == 1) {
 80026ac:	4b58      	ldr	r3, [pc, #352]	@ (8002810 <menu+0x2310>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d104      	bne.n	80026be <menu+0x21be>
				lcd_print(2, 1, "Active          ");
 80026b4:	4a5f      	ldr	r2, [pc, #380]	@ (8002834 <menu+0x2334>)
 80026b6:	2101      	movs	r1, #1
 80026b8:	2002      	movs	r0, #2
 80026ba:	f7fd feda 	bl	8000472 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026be:	2102      	movs	r1, #2
 80026c0:	485d      	ldr	r0, [pc, #372]	@ (8002838 <menu+0x2338>)
 80026c2:	f004 feb7 	bl	8007434 <HAL_GPIO_ReadPin>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d115      	bne.n	80026f8 <menu+0x21f8>
 80026cc:	4b5b      	ldr	r3, [pc, #364]	@ (800283c <menu+0x233c>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	f083 0301 	eor.w	r3, r3, #1
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00e      	beq.n	80026f8 <menu+0x21f8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80026da:	4b52      	ldr	r3, [pc, #328]	@ (8002824 <menu+0x2324>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	3301      	adds	r3, #1
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4b50      	ldr	r3, [pc, #320]	@ (8002824 <menu+0x2324>)
 80026e4:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80026e6:	4b4f      	ldr	r3, [pc, #316]	@ (8002824 <menu+0x2324>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d902      	bls.n	80026f4 <menu+0x21f4>
				devirmeAsagiGeriLimit = 0;
 80026ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002824 <menu+0x2324>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026f4:	f001 f82c 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026f8:	2104      	movs	r1, #4
 80026fa:	484f      	ldr	r0, [pc, #316]	@ (8002838 <menu+0x2338>)
 80026fc:	f004 fe9a 	bl	8007434 <HAL_GPIO_ReadPin>
 8002700:	4603      	mov	r3, r0
 8002702:	2b01      	cmp	r3, #1
 8002704:	d115      	bne.n	8002732 <menu+0x2232>
 8002706:	4b4d      	ldr	r3, [pc, #308]	@ (800283c <menu+0x233c>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	f083 0301 	eor.w	r3, r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00e      	beq.n	8002732 <menu+0x2232>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002714:	4b43      	ldr	r3, [pc, #268]	@ (8002824 <menu+0x2324>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	3b01      	subs	r3, #1
 800271a:	b2da      	uxtb	r2, r3
 800271c:	4b41      	ldr	r3, [pc, #260]	@ (8002824 <menu+0x2324>)
 800271e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002720:	4b40      	ldr	r3, [pc, #256]	@ (8002824 <menu+0x2324>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <menu+0x222e>
		   		devirmeAsagiGeriLimit = 1;
 8002728:	4b3e      	ldr	r3, [pc, #248]	@ (8002824 <menu+0x2324>)
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800272e:	f001 f80f 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002732:	2108      	movs	r1, #8
 8002734:	4840      	ldr	r0, [pc, #256]	@ (8002838 <menu+0x2338>)
 8002736:	f004 fe7d 	bl	8007434 <HAL_GPIO_ReadPin>
 800273a:	4603      	mov	r3, r0
 800273c:	2b01      	cmp	r3, #1
 800273e:	d10d      	bne.n	800275c <menu+0x225c>
 8002740:	4b3e      	ldr	r3, [pc, #248]	@ (800283c <menu+0x233c>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	f083 0301 	eor.w	r3, r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d006      	beq.n	800275c <menu+0x225c>
			eepromData[17] = devirmeAsagiGeriLimit;
 800274e:	4b35      	ldr	r3, [pc, #212]	@ (8002824 <menu+0x2324>)
 8002750:	781a      	ldrb	r2, [r3, #0]
 8002752:	4b3b      	ldr	r3, [pc, #236]	@ (8002840 <menu+0x2340>)
 8002754:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002756:	4b3b      	ldr	r3, [pc, #236]	@ (8002844 <menu+0x2344>)
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 800275c:	4b3a      	ldr	r3, [pc, #232]	@ (8002848 <menu+0x2348>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b14      	cmp	r3, #20
 8002762:	f040 80e3 	bne.w	800292c <menu+0x242c>
		if(devirmeYuruyusSecim == 1) {
 8002766:	4b2c      	ldr	r3, [pc, #176]	@ (8002818 <menu+0x2318>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d113      	bne.n	8002796 <menu+0x2296>
			if(dilSecim == 0) {
 800276e:	4b28      	ldr	r3, [pc, #160]	@ (8002810 <menu+0x2310>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d105      	bne.n	8002782 <menu+0x2282>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8002776:	4a35      	ldr	r2, [pc, #212]	@ (800284c <menu+0x234c>)
 8002778:	2101      	movs	r1, #1
 800277a:	2001      	movs	r0, #1
 800277c:	f7fd fe79 	bl	8000472 <lcd_print>
 8002780:	e020      	b.n	80027c4 <menu+0x22c4>
			} else if(dilSecim == 1) {
 8002782:	4b23      	ldr	r3, [pc, #140]	@ (8002810 <menu+0x2310>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d11c      	bne.n	80027c4 <menu+0x22c4>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800278a:	4a31      	ldr	r2, [pc, #196]	@ (8002850 <menu+0x2350>)
 800278c:	2101      	movs	r1, #1
 800278e:	2001      	movs	r0, #1
 8002790:	f7fd fe6f 	bl	8000472 <lcd_print>
 8002794:	e016      	b.n	80027c4 <menu+0x22c4>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8002796:	4b20      	ldr	r3, [pc, #128]	@ (8002818 <menu+0x2318>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d112      	bne.n	80027c4 <menu+0x22c4>
			if(dilSecim == 0) {
 800279e:	4b1c      	ldr	r3, [pc, #112]	@ (8002810 <menu+0x2310>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <menu+0x22b2>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80027a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002854 <menu+0x2354>)
 80027a8:	2101      	movs	r1, #1
 80027aa:	2001      	movs	r0, #1
 80027ac:	f7fd fe61 	bl	8000472 <lcd_print>
 80027b0:	e008      	b.n	80027c4 <menu+0x22c4>
			} else if(dilSecim == 1) {
 80027b2:	4b17      	ldr	r3, [pc, #92]	@ (8002810 <menu+0x2310>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d104      	bne.n	80027c4 <menu+0x22c4>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80027ba:	4a27      	ldr	r2, [pc, #156]	@ (8002858 <menu+0x2358>)
 80027bc:	2101      	movs	r1, #1
 80027be:	2001      	movs	r0, #1
 80027c0:	f7fd fe57 	bl	8000472 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80027c4:	4b25      	ldr	r3, [pc, #148]	@ (800285c <menu+0x235c>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d113      	bne.n	80027f4 <menu+0x22f4>
			if(dilSecim == 0) {
 80027cc:	4b10      	ldr	r3, [pc, #64]	@ (8002810 <menu+0x2310>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <menu+0x22e0>
				lcd_print(2, 1, "Tek tesir       ");
 80027d4:	4a22      	ldr	r2, [pc, #136]	@ (8002860 <menu+0x2360>)
 80027d6:	2101      	movs	r1, #1
 80027d8:	2002      	movs	r0, #2
 80027da:	f7fd fe4a 	bl	8000472 <lcd_print>
 80027de:	e04e      	b.n	800287e <menu+0x237e>
			} else if(dilSecim == 1) {
 80027e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002810 <menu+0x2310>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d14a      	bne.n	800287e <menu+0x237e>
				lcd_print(2, 1, "Single acting  ");
 80027e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002864 <menu+0x2364>)
 80027ea:	2101      	movs	r1, #1
 80027ec:	2002      	movs	r0, #2
 80027ee:	f7fd fe40 	bl	8000472 <lcd_print>
 80027f2:	e044      	b.n	800287e <menu+0x237e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80027f4:	4b19      	ldr	r3, [pc, #100]	@ (800285c <menu+0x235c>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d140      	bne.n	800287e <menu+0x237e>
			if(dilSecim == 0) {
 80027fc:	4b04      	ldr	r3, [pc, #16]	@ (8002810 <menu+0x2310>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d133      	bne.n	800286c <menu+0x236c>
				lcd_print(2, 1, "Cift tesir      ");
 8002804:	4a18      	ldr	r2, [pc, #96]	@ (8002868 <menu+0x2368>)
 8002806:	2101      	movs	r1, #1
 8002808:	2002      	movs	r0, #2
 800280a:	f7fd fe32 	bl	8000472 <lcd_print>
 800280e:	e036      	b.n	800287e <menu+0x237e>
 8002810:	200000ea 	.word	0x200000ea
 8002814:	0800a3d0 	.word	0x0800a3d0
 8002818:	200000d9 	.word	0x200000d9
 800281c:	0800a3e4 	.word	0x0800a3e4
 8002820:	0800a3f8 	.word	0x0800a3f8
 8002824:	200000db 	.word	0x200000db
 8002828:	08009f14 	.word	0x08009f14
 800282c:	08009f28 	.word	0x08009f28
 8002830:	08009f74 	.word	0x08009f74
 8002834:	08009f88 	.word	0x08009f88
 8002838:	40010800 	.word	0x40010800
 800283c:	200000f8 	.word	0x200000f8
 8002840:	20000060 	.word	0x20000060
 8002844:	200000f5 	.word	0x200000f5
 8002848:	200000ca 	.word	0x200000ca
 800284c:	0800a40c 	.word	0x0800a40c
 8002850:	0800a420 	.word	0x0800a420
 8002854:	0800a434 	.word	0x0800a434
 8002858:	0800a448 	.word	0x0800a448
 800285c:	200000dc 	.word	0x200000dc
 8002860:	0800a45c 	.word	0x0800a45c
 8002864:	0800a470 	.word	0x0800a470
 8002868:	0800a480 	.word	0x0800a480
			} else if(dilSecim == 1) {
 800286c:	4b90      	ldr	r3, [pc, #576]	@ (8002ab0 <menu+0x25b0>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d104      	bne.n	800287e <menu+0x237e>
				lcd_print(2, 1, "Double acting  ");
 8002874:	4a8f      	ldr	r2, [pc, #572]	@ (8002ab4 <menu+0x25b4>)
 8002876:	2101      	movs	r1, #1
 8002878:	2002      	movs	r0, #2
 800287a:	f7fd fdfa 	bl	8000472 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800287e:	2102      	movs	r1, #2
 8002880:	488d      	ldr	r0, [pc, #564]	@ (8002ab8 <menu+0x25b8>)
 8002882:	f004 fdd7 	bl	8007434 <HAL_GPIO_ReadPin>
 8002886:	4603      	mov	r3, r0
 8002888:	2b01      	cmp	r3, #1
 800288a:	d119      	bne.n	80028c0 <menu+0x23c0>
 800288c:	4b8b      	ldr	r3, [pc, #556]	@ (8002abc <menu+0x25bc>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	f083 0301 	eor.w	r3, r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d012      	beq.n	80028c0 <menu+0x23c0>
 800289a:	4b89      	ldr	r3, [pc, #548]	@ (8002ac0 <menu+0x25c0>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d10e      	bne.n	80028c0 <menu+0x23c0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80028a2:	4b88      	ldr	r3, [pc, #544]	@ (8002ac4 <menu+0x25c4>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	3301      	adds	r3, #1
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	4b86      	ldr	r3, [pc, #536]	@ (8002ac4 <menu+0x25c4>)
 80028ac:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80028ae:	4b85      	ldr	r3, [pc, #532]	@ (8002ac4 <menu+0x25c4>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d902      	bls.n	80028bc <menu+0x23bc>
				devirmeSilindirTipi = 0;
 80028b6:	4b83      	ldr	r3, [pc, #524]	@ (8002ac4 <menu+0x25c4>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028bc:	f000 ff48 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80028c0:	2104      	movs	r1, #4
 80028c2:	487d      	ldr	r0, [pc, #500]	@ (8002ab8 <menu+0x25b8>)
 80028c4:	f004 fdb6 	bl	8007434 <HAL_GPIO_ReadPin>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d119      	bne.n	8002902 <menu+0x2402>
 80028ce:	4b7b      	ldr	r3, [pc, #492]	@ (8002abc <menu+0x25bc>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	f083 0301 	eor.w	r3, r3, #1
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d012      	beq.n	8002902 <menu+0x2402>
 80028dc:	4b78      	ldr	r3, [pc, #480]	@ (8002ac0 <menu+0x25c0>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d10e      	bne.n	8002902 <menu+0x2402>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80028e4:	4b77      	ldr	r3, [pc, #476]	@ (8002ac4 <menu+0x25c4>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	4b75      	ldr	r3, [pc, #468]	@ (8002ac4 <menu+0x25c4>)
 80028ee:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80028f0:	4b74      	ldr	r3, [pc, #464]	@ (8002ac4 <menu+0x25c4>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <menu+0x23fe>
		   		devirmeSilindirTipi = 1;
 80028f8:	4b72      	ldr	r3, [pc, #456]	@ (8002ac4 <menu+0x25c4>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028fe:	f000 ff27 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002902:	2108      	movs	r1, #8
 8002904:	486c      	ldr	r0, [pc, #432]	@ (8002ab8 <menu+0x25b8>)
 8002906:	f004 fd95 	bl	8007434 <HAL_GPIO_ReadPin>
 800290a:	4603      	mov	r3, r0
 800290c:	2b01      	cmp	r3, #1
 800290e:	d10d      	bne.n	800292c <menu+0x242c>
 8002910:	4b6a      	ldr	r3, [pc, #424]	@ (8002abc <menu+0x25bc>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	f083 0301 	eor.w	r3, r3, #1
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d006      	beq.n	800292c <menu+0x242c>
			eepromData[18] = devirmeSilindirTipi;
 800291e:	4b69      	ldr	r3, [pc, #420]	@ (8002ac4 <menu+0x25c4>)
 8002920:	781a      	ldrb	r2, [r3, #0]
 8002922:	4b69      	ldr	r3, [pc, #420]	@ (8002ac8 <menu+0x25c8>)
 8002924:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002926:	4b69      	ldr	r3, [pc, #420]	@ (8002acc <menu+0x25cc>)
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800292c:	4b68      	ldr	r3, [pc, #416]	@ (8002ad0 <menu+0x25d0>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b15      	cmp	r3, #21
 8002932:	f040 809b 	bne.w	8002a6c <menu+0x256c>
		if(dilSecim == 0) {
 8002936:	4b5e      	ldr	r3, [pc, #376]	@ (8002ab0 <menu+0x25b0>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d105      	bne.n	800294a <menu+0x244a>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800293e:	4a65      	ldr	r2, [pc, #404]	@ (8002ad4 <menu+0x25d4>)
 8002940:	2101      	movs	r1, #1
 8002942:	2001      	movs	r0, #1
 8002944:	f7fd fd95 	bl	8000472 <lcd_print>
 8002948:	e008      	b.n	800295c <menu+0x245c>
		} else if(dilSecim == 1) {
 800294a:	4b59      	ldr	r3, [pc, #356]	@ (8002ab0 <menu+0x25b0>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d104      	bne.n	800295c <menu+0x245c>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8002952:	4a61      	ldr	r2, [pc, #388]	@ (8002ad8 <menu+0x25d8>)
 8002954:	2101      	movs	r1, #1
 8002956:	2001      	movs	r0, #1
 8002958:	f7fd fd8b 	bl	8000472 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800295c:	4b5f      	ldr	r3, [pc, #380]	@ (8002adc <menu+0x25dc>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d112      	bne.n	800298a <menu+0x248a>
			if(dilSecim == 0) {
 8002964:	4b52      	ldr	r3, [pc, #328]	@ (8002ab0 <menu+0x25b0>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d104      	bne.n	8002976 <menu+0x2476>
				lcd_print(2, 1, "Tek tesir       ");
 800296c:	4a5c      	ldr	r2, [pc, #368]	@ (8002ae0 <menu+0x25e0>)
 800296e:	2101      	movs	r1, #1
 8002970:	2002      	movs	r0, #2
 8002972:	f7fd fd7e 	bl	8000472 <lcd_print>
			}
			if(dilSecim == 1) {
 8002976:	4b4e      	ldr	r3, [pc, #312]	@ (8002ab0 <menu+0x25b0>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d11c      	bne.n	80029b8 <menu+0x24b8>
				lcd_print(2, 1, "Single acting  ");
 800297e:	4a59      	ldr	r2, [pc, #356]	@ (8002ae4 <menu+0x25e4>)
 8002980:	2101      	movs	r1, #1
 8002982:	2002      	movs	r0, #2
 8002984:	f7fd fd75 	bl	8000472 <lcd_print>
 8002988:	e016      	b.n	80029b8 <menu+0x24b8>
			}
		} else if(platformSilindirTipi == 1) {
 800298a:	4b54      	ldr	r3, [pc, #336]	@ (8002adc <menu+0x25dc>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d112      	bne.n	80029b8 <menu+0x24b8>
			if(dilSecim == 0) {
 8002992:	4b47      	ldr	r3, [pc, #284]	@ (8002ab0 <menu+0x25b0>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d105      	bne.n	80029a6 <menu+0x24a6>
				lcd_print(2, 1, "Cift tesir      ");
 800299a:	4a53      	ldr	r2, [pc, #332]	@ (8002ae8 <menu+0x25e8>)
 800299c:	2101      	movs	r1, #1
 800299e:	2002      	movs	r0, #2
 80029a0:	f7fd fd67 	bl	8000472 <lcd_print>
 80029a4:	e008      	b.n	80029b8 <menu+0x24b8>
			} else if(dilSecim == 1) {
 80029a6:	4b42      	ldr	r3, [pc, #264]	@ (8002ab0 <menu+0x25b0>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d104      	bne.n	80029b8 <menu+0x24b8>
				lcd_print(2, 1, "Double acting  ");
 80029ae:	4a41      	ldr	r2, [pc, #260]	@ (8002ab4 <menu+0x25b4>)
 80029b0:	2101      	movs	r1, #1
 80029b2:	2002      	movs	r0, #2
 80029b4:	f7fd fd5d 	bl	8000472 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029b8:	2102      	movs	r1, #2
 80029ba:	483f      	ldr	r0, [pc, #252]	@ (8002ab8 <menu+0x25b8>)
 80029bc:	f004 fd3a 	bl	8007434 <HAL_GPIO_ReadPin>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d115      	bne.n	80029f2 <menu+0x24f2>
 80029c6:	4b3d      	ldr	r3, [pc, #244]	@ (8002abc <menu+0x25bc>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	f083 0301 	eor.w	r3, r3, #1
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00e      	beq.n	80029f2 <menu+0x24f2>
			platformSilindirTipi = platformSilindirTipi + 1;
 80029d4:	4b41      	ldr	r3, [pc, #260]	@ (8002adc <menu+0x25dc>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	3301      	adds	r3, #1
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	4b3f      	ldr	r3, [pc, #252]	@ (8002adc <menu+0x25dc>)
 80029de:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80029e0:	4b3e      	ldr	r3, [pc, #248]	@ (8002adc <menu+0x25dc>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d902      	bls.n	80029ee <menu+0x24ee>
				platformSilindirTipi = 0;
 80029e8:	4b3c      	ldr	r3, [pc, #240]	@ (8002adc <menu+0x25dc>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029ee:	f000 feaf 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029f2:	2104      	movs	r1, #4
 80029f4:	4830      	ldr	r0, [pc, #192]	@ (8002ab8 <menu+0x25b8>)
 80029f6:	f004 fd1d 	bl	8007434 <HAL_GPIO_ReadPin>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d115      	bne.n	8002a2c <menu+0x252c>
 8002a00:	4b2e      	ldr	r3, [pc, #184]	@ (8002abc <menu+0x25bc>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	f083 0301 	eor.w	r3, r3, #1
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00e      	beq.n	8002a2c <menu+0x252c>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002a0e:	4b33      	ldr	r3, [pc, #204]	@ (8002adc <menu+0x25dc>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4b31      	ldr	r3, [pc, #196]	@ (8002adc <menu+0x25dc>)
 8002a18:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002a1a:	4b30      	ldr	r3, [pc, #192]	@ (8002adc <menu+0x25dc>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <menu+0x2528>
		   		platformSilindirTipi = 1;
 8002a22:	4b2e      	ldr	r3, [pc, #184]	@ (8002adc <menu+0x25dc>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a28:	f000 fe92 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a2c:	2108      	movs	r1, #8
 8002a2e:	4822      	ldr	r0, [pc, #136]	@ (8002ab8 <menu+0x25b8>)
 8002a30:	f004 fd00 	bl	8007434 <HAL_GPIO_ReadPin>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d118      	bne.n	8002a6c <menu+0x256c>
 8002a3a:	4b20      	ldr	r3, [pc, #128]	@ (8002abc <menu+0x25bc>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	f083 0301 	eor.w	r3, r3, #1
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d011      	beq.n	8002a6c <menu+0x256c>
			eepromData[19] = platformSilindirTipi;
 8002a48:	4b24      	ldr	r3, [pc, #144]	@ (8002adc <menu+0x25dc>)
 8002a4a:	781a      	ldrb	r2, [r3, #0]
 8002a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac8 <menu+0x25c8>)
 8002a4e:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002a50:	4b22      	ldr	r3, [pc, #136]	@ (8002adc <menu+0x25dc>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d106      	bne.n	8002a66 <menu+0x2566>
				altLimit = 1;
 8002a58:	4b24      	ldr	r3, [pc, #144]	@ (8002aec <menu+0x25ec>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002a5e:	4b23      	ldr	r3, [pc, #140]	@ (8002aec <menu+0x25ec>)
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	4b19      	ldr	r3, [pc, #100]	@ (8002ac8 <menu+0x25c8>)
 8002a64:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002a66:	4b19      	ldr	r3, [pc, #100]	@ (8002acc <menu+0x25cc>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002a6c:	4b18      	ldr	r3, [pc, #96]	@ (8002ad0 <menu+0x25d0>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b16      	cmp	r3, #22
 8002a72:	f040 80a7 	bne.w	8002bc4 <menu+0x26c4>
		if(dilSecim == 0) {
 8002a76:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab0 <menu+0x25b0>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d105      	bne.n	8002a8a <menu+0x258a>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8002a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002af0 <menu+0x25f0>)
 8002a80:	2101      	movs	r1, #1
 8002a82:	2001      	movs	r0, #1
 8002a84:	f7fd fcf5 	bl	8000472 <lcd_print>
 8002a88:	e008      	b.n	8002a9c <menu+0x259c>
		} else if(dilSecim == 1) {
 8002a8a:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <menu+0x25b0>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d104      	bne.n	8002a9c <menu+0x259c>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8002a92:	4a18      	ldr	r2, [pc, #96]	@ (8002af4 <menu+0x25f4>)
 8002a94:	2101      	movs	r1, #1
 8002a96:	2001      	movs	r0, #1
 8002a98:	f7fd fceb 	bl	8000472 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8002a9c:	4b04      	ldr	r3, [pc, #16]	@ (8002ab0 <menu+0x25b0>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d12b      	bne.n	8002afc <menu+0x25fc>
				lcd_print(2, 1, "Kac Saniye     ");
 8002aa4:	4a14      	ldr	r2, [pc, #80]	@ (8002af8 <menu+0x25f8>)
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	2002      	movs	r0, #2
 8002aaa:	f7fd fce2 	bl	8000472 <lcd_print>
 8002aae:	e02e      	b.n	8002b0e <menu+0x260e>
 8002ab0:	200000ea 	.word	0x200000ea
 8002ab4:	0800a494 	.word	0x0800a494
 8002ab8:	40010800 	.word	0x40010800
 8002abc:	200000f8 	.word	0x200000f8
 8002ac0:	200000d9 	.word	0x200000d9
 8002ac4:	200000dc 	.word	0x200000dc
 8002ac8:	20000060 	.word	0x20000060
 8002acc:	200000f5 	.word	0x200000f5
 8002ad0:	200000ca 	.word	0x200000ca
 8002ad4:	0800a4a4 	.word	0x0800a4a4
 8002ad8:	0800a4b8 	.word	0x0800a4b8
 8002adc:	200000dd 	.word	0x200000dd
 8002ae0:	0800a45c 	.word	0x0800a45c
 8002ae4:	0800a470 	.word	0x0800a470
 8002ae8:	0800a480 	.word	0x0800a480
 8002aec:	200000d0 	.word	0x200000d0
 8002af0:	0800a4c8 	.word	0x0800a4c8
 8002af4:	0800a4dc 	.word	0x0800a4dc
 8002af8:	0800a17c 	.word	0x0800a17c
			} else if(dilSecim == 1){
 8002afc:	4b93      	ldr	r3, [pc, #588]	@ (8002d4c <menu+0x284c>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d104      	bne.n	8002b0e <menu+0x260e>
				lcd_print(2, 1, "Second         ");
 8002b04:	4a92      	ldr	r2, [pc, #584]	@ (8002d50 <menu+0x2850>)
 8002b06:	2101      	movs	r1, #1
 8002b08:	2002      	movs	r0, #2
 8002b0a:	f7fd fcb2 	bl	8000472 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8002b0e:	4b91      	ldr	r3, [pc, #580]	@ (8002d54 <menu+0x2854>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	220a      	movs	r2, #10
 8002b14:	4990      	ldr	r1, [pc, #576]	@ (8002d58 <menu+0x2858>)
 8002b16:	4618      	mov	r0, r3
 8002b18:	f007 f82e 	bl	8009b78 <itoa>
		lcd_print(2,16,snum);
 8002b1c:	4a8e      	ldr	r2, [pc, #568]	@ (8002d58 <menu+0x2858>)
 8002b1e:	2110      	movs	r1, #16
 8002b20:	2002      	movs	r0, #2
 8002b22:	f7fd fca6 	bl	8000472 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b26:	2102      	movs	r1, #2
 8002b28:	488c      	ldr	r0, [pc, #560]	@ (8002d5c <menu+0x285c>)
 8002b2a:	f004 fc83 	bl	8007434 <HAL_GPIO_ReadPin>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d115      	bne.n	8002b60 <menu+0x2660>
 8002b34:	4b8a      	ldr	r3, [pc, #552]	@ (8002d60 <menu+0x2860>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	f083 0301 	eor.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00e      	beq.n	8002b60 <menu+0x2660>
			yukariValfTmr = yukariValfTmr + 1;
 8002b42:	4b84      	ldr	r3, [pc, #528]	@ (8002d54 <menu+0x2854>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	3301      	adds	r3, #1
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4b82      	ldr	r3, [pc, #520]	@ (8002d54 <menu+0x2854>)
 8002b4c:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002b4e:	4b81      	ldr	r3, [pc, #516]	@ (8002d54 <menu+0x2854>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b05      	cmp	r3, #5
 8002b54:	d902      	bls.n	8002b5c <menu+0x265c>
				yukariValfTmr = 0;
 8002b56:	4b7f      	ldr	r3, [pc, #508]	@ (8002d54 <menu+0x2854>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b5c:	f000 fdf8 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b60:	2104      	movs	r1, #4
 8002b62:	487e      	ldr	r0, [pc, #504]	@ (8002d5c <menu+0x285c>)
 8002b64:	f004 fc66 	bl	8007434 <HAL_GPIO_ReadPin>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d115      	bne.n	8002b9a <menu+0x269a>
 8002b6e:	4b7c      	ldr	r3, [pc, #496]	@ (8002d60 <menu+0x2860>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	f083 0301 	eor.w	r3, r3, #1
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00e      	beq.n	8002b9a <menu+0x269a>
			yukariValfTmr = yukariValfTmr - 1;
 8002b7c:	4b75      	ldr	r3, [pc, #468]	@ (8002d54 <menu+0x2854>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	4b73      	ldr	r3, [pc, #460]	@ (8002d54 <menu+0x2854>)
 8002b86:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002b88:	4b72      	ldr	r3, [pc, #456]	@ (8002d54 <menu+0x2854>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b06      	cmp	r3, #6
 8002b8e:	d902      	bls.n	8002b96 <menu+0x2696>
		   		yukariValfTmr = 5;
 8002b90:	4b70      	ldr	r3, [pc, #448]	@ (8002d54 <menu+0x2854>)
 8002b92:	2205      	movs	r2, #5
 8002b94:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b96:	f000 fddb 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b9a:	2108      	movs	r1, #8
 8002b9c:	486f      	ldr	r0, [pc, #444]	@ (8002d5c <menu+0x285c>)
 8002b9e:	f004 fc49 	bl	8007434 <HAL_GPIO_ReadPin>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d10d      	bne.n	8002bc4 <menu+0x26c4>
 8002ba8:	4b6d      	ldr	r3, [pc, #436]	@ (8002d60 <menu+0x2860>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	f083 0301 	eor.w	r3, r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <menu+0x26c4>
			eepromData[20] = yukariValfTmr;
 8002bb6:	4b67      	ldr	r3, [pc, #412]	@ (8002d54 <menu+0x2854>)
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	4b6a      	ldr	r3, [pc, #424]	@ (8002d64 <menu+0x2864>)
 8002bbc:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8002d68 <menu+0x2868>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002bc4:	4b69      	ldr	r3, [pc, #420]	@ (8002d6c <menu+0x286c>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b17      	cmp	r3, #23
 8002bca:	f040 8081 	bne.w	8002cd0 <menu+0x27d0>
		if(dilSecim == 0) {
 8002bce:	4b5f      	ldr	r3, [pc, #380]	@ (8002d4c <menu+0x284c>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d105      	bne.n	8002be2 <menu+0x26e2>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8002bd6:	4a66      	ldr	r2, [pc, #408]	@ (8002d70 <menu+0x2870>)
 8002bd8:	2101      	movs	r1, #1
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f7fd fc49 	bl	8000472 <lcd_print>
 8002be0:	e008      	b.n	8002bf4 <menu+0x26f4>
		} else if(dilSecim == 1) {
 8002be2:	4b5a      	ldr	r3, [pc, #360]	@ (8002d4c <menu+0x284c>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d104      	bne.n	8002bf4 <menu+0x26f4>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8002bea:	4a62      	ldr	r2, [pc, #392]	@ (8002d74 <menu+0x2874>)
 8002bec:	2101      	movs	r1, #1
 8002bee:	2001      	movs	r0, #1
 8002bf0:	f7fd fc3f 	bl	8000472 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8002bf4:	4b55      	ldr	r3, [pc, #340]	@ (8002d4c <menu+0x284c>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d105      	bne.n	8002c08 <menu+0x2708>
				lcd_print(2, 1, "Kac Saniye     ");
 8002bfc:	4a5e      	ldr	r2, [pc, #376]	@ (8002d78 <menu+0x2878>)
 8002bfe:	2101      	movs	r1, #1
 8002c00:	2002      	movs	r0, #2
 8002c02:	f7fd fc36 	bl	8000472 <lcd_print>
 8002c06:	e008      	b.n	8002c1a <menu+0x271a>
			} else if(dilSecim == 1) {
 8002c08:	4b50      	ldr	r3, [pc, #320]	@ (8002d4c <menu+0x284c>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d104      	bne.n	8002c1a <menu+0x271a>
				lcd_print(2, 1, "Second         ");
 8002c10:	4a4f      	ldr	r2, [pc, #316]	@ (8002d50 <menu+0x2850>)
 8002c12:	2101      	movs	r1, #1
 8002c14:	2002      	movs	r0, #2
 8002c16:	f7fd fc2c 	bl	8000472 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8002c1a:	4b58      	ldr	r3, [pc, #352]	@ (8002d7c <menu+0x287c>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	220a      	movs	r2, #10
 8002c20:	494d      	ldr	r1, [pc, #308]	@ (8002d58 <menu+0x2858>)
 8002c22:	4618      	mov	r0, r3
 8002c24:	f006 ffa8 	bl	8009b78 <itoa>
		lcd_print(2,16,snum);
 8002c28:	4a4b      	ldr	r2, [pc, #300]	@ (8002d58 <menu+0x2858>)
 8002c2a:	2110      	movs	r1, #16
 8002c2c:	2002      	movs	r0, #2
 8002c2e:	f7fd fc20 	bl	8000472 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c32:	2102      	movs	r1, #2
 8002c34:	4849      	ldr	r0, [pc, #292]	@ (8002d5c <menu+0x285c>)
 8002c36:	f004 fbfd 	bl	8007434 <HAL_GPIO_ReadPin>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d115      	bne.n	8002c6c <menu+0x276c>
 8002c40:	4b47      	ldr	r3, [pc, #284]	@ (8002d60 <menu+0x2860>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	f083 0301 	eor.w	r3, r3, #1
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00e      	beq.n	8002c6c <menu+0x276c>
			asagiValfTmr = asagiValfTmr + 1;
 8002c4e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d7c <menu+0x287c>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4b49      	ldr	r3, [pc, #292]	@ (8002d7c <menu+0x287c>)
 8002c58:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002c5a:	4b48      	ldr	r3, [pc, #288]	@ (8002d7c <menu+0x287c>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b05      	cmp	r3, #5
 8002c60:	d902      	bls.n	8002c68 <menu+0x2768>
				asagiValfTmr = 0;
 8002c62:	4b46      	ldr	r3, [pc, #280]	@ (8002d7c <menu+0x287c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c68:	f000 fd72 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c6c:	2104      	movs	r1, #4
 8002c6e:	483b      	ldr	r0, [pc, #236]	@ (8002d5c <menu+0x285c>)
 8002c70:	f004 fbe0 	bl	8007434 <HAL_GPIO_ReadPin>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d115      	bne.n	8002ca6 <menu+0x27a6>
 8002c7a:	4b39      	ldr	r3, [pc, #228]	@ (8002d60 <menu+0x2860>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	f083 0301 	eor.w	r3, r3, #1
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00e      	beq.n	8002ca6 <menu+0x27a6>
			asagiValfTmr = asagiValfTmr - 1;
 8002c88:	4b3c      	ldr	r3, [pc, #240]	@ (8002d7c <menu+0x287c>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	4b3a      	ldr	r3, [pc, #232]	@ (8002d7c <menu+0x287c>)
 8002c92:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002c94:	4b39      	ldr	r3, [pc, #228]	@ (8002d7c <menu+0x287c>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b06      	cmp	r3, #6
 8002c9a:	d902      	bls.n	8002ca2 <menu+0x27a2>
		   		asagiValfTmr = 5;
 8002c9c:	4b37      	ldr	r3, [pc, #220]	@ (8002d7c <menu+0x287c>)
 8002c9e:	2205      	movs	r2, #5
 8002ca0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ca2:	f000 fd55 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ca6:	2108      	movs	r1, #8
 8002ca8:	482c      	ldr	r0, [pc, #176]	@ (8002d5c <menu+0x285c>)
 8002caa:	f004 fbc3 	bl	8007434 <HAL_GPIO_ReadPin>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10d      	bne.n	8002cd0 <menu+0x27d0>
 8002cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8002d60 <menu+0x2860>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	f083 0301 	eor.w	r3, r3, #1
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d006      	beq.n	8002cd0 <menu+0x27d0>
			eepromData[21] = asagiValfTmr;
 8002cc2:	4b2e      	ldr	r3, [pc, #184]	@ (8002d7c <menu+0x287c>)
 8002cc4:	781a      	ldrb	r2, [r3, #0]
 8002cc6:	4b27      	ldr	r3, [pc, #156]	@ (8002d64 <menu+0x2864>)
 8002cc8:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002cca:	4b27      	ldr	r3, [pc, #156]	@ (8002d68 <menu+0x2868>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002cd0:	4b26      	ldr	r3, [pc, #152]	@ (8002d6c <menu+0x286c>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b18      	cmp	r3, #24
 8002cd6:	f040 80c1 	bne.w	8002e5c <menu+0x295c>
		if(devirmeYuruyusSecim == 2) {
 8002cda:	4b29      	ldr	r3, [pc, #164]	@ (8002d80 <menu+0x2880>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d113      	bne.n	8002d0a <menu+0x280a>
			if(dilSecim == 0) {
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d4c <menu+0x284c>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <menu+0x27f6>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8002cea:	4a26      	ldr	r2, [pc, #152]	@ (8002d84 <menu+0x2884>)
 8002cec:	2101      	movs	r1, #1
 8002cee:	2001      	movs	r0, #1
 8002cf0:	f7fd fbbf 	bl	8000472 <lcd_print>
 8002cf4:	e020      	b.n	8002d38 <menu+0x2838>
			} else if(dilSecim == 1) {
 8002cf6:	4b15      	ldr	r3, [pc, #84]	@ (8002d4c <menu+0x284c>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d11c      	bne.n	8002d38 <menu+0x2838>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8002cfe:	4a22      	ldr	r2, [pc, #136]	@ (8002d88 <menu+0x2888>)
 8002d00:	2101      	movs	r1, #1
 8002d02:	2001      	movs	r0, #1
 8002d04:	f7fd fbb5 	bl	8000472 <lcd_print>
 8002d08:	e016      	b.n	8002d38 <menu+0x2838>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002d80 <menu+0x2880>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d112      	bne.n	8002d38 <menu+0x2838>
			if(dilSecim == 0) {
 8002d12:	4b0e      	ldr	r3, [pc, #56]	@ (8002d4c <menu+0x284c>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d105      	bne.n	8002d26 <menu+0x2826>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8002d1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002d8c <menu+0x288c>)
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	2001      	movs	r0, #1
 8002d20:	f7fd fba7 	bl	8000472 <lcd_print>
 8002d24:	e008      	b.n	8002d38 <menu+0x2838>
			} else if(dilSecim == 1) {
 8002d26:	4b09      	ldr	r3, [pc, #36]	@ (8002d4c <menu+0x284c>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d104      	bne.n	8002d38 <menu+0x2838>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8002d2e:	4a18      	ldr	r2, [pc, #96]	@ (8002d90 <menu+0x2890>)
 8002d30:	2101      	movs	r1, #1
 8002d32:	2001      	movs	r0, #1
 8002d34:	f7fd fb9d 	bl	8000472 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8002d38:	4b04      	ldr	r3, [pc, #16]	@ (8002d4c <menu+0x284c>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d129      	bne.n	8002d94 <menu+0x2894>
				lcd_print(2, 1, "Kac Saniye     ");
 8002d40:	4a0d      	ldr	r2, [pc, #52]	@ (8002d78 <menu+0x2878>)
 8002d42:	2101      	movs	r1, #1
 8002d44:	2002      	movs	r0, #2
 8002d46:	f7fd fb94 	bl	8000472 <lcd_print>
 8002d4a:	e02c      	b.n	8002da6 <menu+0x28a6>
 8002d4c:	200000ea 	.word	0x200000ea
 8002d50:	0800a4f0 	.word	0x0800a4f0
 8002d54:	200000de 	.word	0x200000de
 8002d58:	200000a0 	.word	0x200000a0
 8002d5c:	40010800 	.word	0x40010800
 8002d60:	200000f8 	.word	0x200000f8
 8002d64:	20000060 	.word	0x20000060
 8002d68:	200000f5 	.word	0x200000f5
 8002d6c:	200000ca 	.word	0x200000ca
 8002d70:	0800a500 	.word	0x0800a500
 8002d74:	0800a514 	.word	0x0800a514
 8002d78:	0800a17c 	.word	0x0800a17c
 8002d7c:	200000df 	.word	0x200000df
 8002d80:	200000d9 	.word	0x200000d9
 8002d84:	0800a528 	.word	0x0800a528
 8002d88:	0800a53c 	.word	0x0800a53c
 8002d8c:	0800a550 	.word	0x0800a550
 8002d90:	0800a564 	.word	0x0800a564
			} else if(dilSecim == 1) {
 8002d94:	4ba0      	ldr	r3, [pc, #640]	@ (8003018 <menu+0x2b18>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d104      	bne.n	8002da6 <menu+0x28a6>
				lcd_print(2, 1, "Second         ");
 8002d9c:	4a9f      	ldr	r2, [pc, #636]	@ (800301c <menu+0x2b1c>)
 8002d9e:	2101      	movs	r1, #1
 8002da0:	2002      	movs	r0, #2
 8002da2:	f7fd fb66 	bl	8000472 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8002da6:	4b9e      	ldr	r3, [pc, #632]	@ (8003020 <menu+0x2b20>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	220a      	movs	r2, #10
 8002dac:	499d      	ldr	r1, [pc, #628]	@ (8003024 <menu+0x2b24>)
 8002dae:	4618      	mov	r0, r3
 8002db0:	f006 fee2 	bl	8009b78 <itoa>
		lcd_print(2, 16, snum);
 8002db4:	4a9b      	ldr	r2, [pc, #620]	@ (8003024 <menu+0x2b24>)
 8002db6:	2110      	movs	r1, #16
 8002db8:	2002      	movs	r0, #2
 8002dba:	f7fd fb5a 	bl	8000472 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dbe:	2102      	movs	r1, #2
 8002dc0:	4899      	ldr	r0, [pc, #612]	@ (8003028 <menu+0x2b28>)
 8002dc2:	f004 fb37 	bl	8007434 <HAL_GPIO_ReadPin>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d115      	bne.n	8002df8 <menu+0x28f8>
 8002dcc:	4b97      	ldr	r3, [pc, #604]	@ (800302c <menu+0x2b2c>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	f083 0301 	eor.w	r3, r3, #1
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00e      	beq.n	8002df8 <menu+0x28f8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8002dda:	4b91      	ldr	r3, [pc, #580]	@ (8003020 <menu+0x2b20>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	3301      	adds	r3, #1
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4b8f      	ldr	r3, [pc, #572]	@ (8003020 <menu+0x2b20>)
 8002de4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8002de6:	4b8e      	ldr	r3, [pc, #568]	@ (8003020 <menu+0x2b20>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d902      	bls.n	8002df4 <menu+0x28f4>
				devirmeYukariIleriTmr = 0;
 8002dee:	4b8c      	ldr	r3, [pc, #560]	@ (8003020 <menu+0x2b20>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002df4:	f000 fcac 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002df8:	2104      	movs	r1, #4
 8002dfa:	488b      	ldr	r0, [pc, #556]	@ (8003028 <menu+0x2b28>)
 8002dfc:	f004 fb1a 	bl	8007434 <HAL_GPIO_ReadPin>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d115      	bne.n	8002e32 <menu+0x2932>
 8002e06:	4b89      	ldr	r3, [pc, #548]	@ (800302c <menu+0x2b2c>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	f083 0301 	eor.w	r3, r3, #1
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00e      	beq.n	8002e32 <menu+0x2932>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8002e14:	4b82      	ldr	r3, [pc, #520]	@ (8003020 <menu+0x2b20>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	4b80      	ldr	r3, [pc, #512]	@ (8003020 <menu+0x2b20>)
 8002e1e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8002e20:	4b7f      	ldr	r3, [pc, #508]	@ (8003020 <menu+0x2b20>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b06      	cmp	r3, #6
 8002e26:	d902      	bls.n	8002e2e <menu+0x292e>
		   		devirmeYukariIleriTmr = 5;
 8002e28:	4b7d      	ldr	r3, [pc, #500]	@ (8003020 <menu+0x2b20>)
 8002e2a:	2205      	movs	r2, #5
 8002e2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e2e:	f000 fc8f 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e32:	2108      	movs	r1, #8
 8002e34:	487c      	ldr	r0, [pc, #496]	@ (8003028 <menu+0x2b28>)
 8002e36:	f004 fafd 	bl	8007434 <HAL_GPIO_ReadPin>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d10d      	bne.n	8002e5c <menu+0x295c>
 8002e40:	4b7a      	ldr	r3, [pc, #488]	@ (800302c <menu+0x2b2c>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	f083 0301 	eor.w	r3, r3, #1
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d006      	beq.n	8002e5c <menu+0x295c>
			eepromData[22] = devirmeYukariIleriTmr;
 8002e4e:	4b74      	ldr	r3, [pc, #464]	@ (8003020 <menu+0x2b20>)
 8002e50:	781a      	ldrb	r2, [r3, #0]
 8002e52:	4b77      	ldr	r3, [pc, #476]	@ (8003030 <menu+0x2b30>)
 8002e54:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8002e56:	4b77      	ldr	r3, [pc, #476]	@ (8003034 <menu+0x2b34>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8002e5c:	4b76      	ldr	r3, [pc, #472]	@ (8003038 <menu+0x2b38>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b19      	cmp	r3, #25
 8002e62:	f040 809d 	bne.w	8002fa0 <menu+0x2aa0>
		if(devirmeYuruyusSecim == 2) {
 8002e66:	4b75      	ldr	r3, [pc, #468]	@ (800303c <menu+0x2b3c>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d113      	bne.n	8002e96 <menu+0x2996>
			if(dilSecim == 0) {
 8002e6e:	4b6a      	ldr	r3, [pc, #424]	@ (8003018 <menu+0x2b18>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d105      	bne.n	8002e82 <menu+0x2982>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8002e76:	4a72      	ldr	r2, [pc, #456]	@ (8003040 <menu+0x2b40>)
 8002e78:	2101      	movs	r1, #1
 8002e7a:	2001      	movs	r0, #1
 8002e7c:	f7fd faf9 	bl	8000472 <lcd_print>
 8002e80:	e020      	b.n	8002ec4 <menu+0x29c4>
			} else if(dilSecim == 1) {
 8002e82:	4b65      	ldr	r3, [pc, #404]	@ (8003018 <menu+0x2b18>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d11c      	bne.n	8002ec4 <menu+0x29c4>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8002e8a:	4a6e      	ldr	r2, [pc, #440]	@ (8003044 <menu+0x2b44>)
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f7fd faef 	bl	8000472 <lcd_print>
 8002e94:	e016      	b.n	8002ec4 <menu+0x29c4>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002e96:	4b69      	ldr	r3, [pc, #420]	@ (800303c <menu+0x2b3c>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d112      	bne.n	8002ec4 <menu+0x29c4>
			if(dilSecim == 0) {
 8002e9e:	4b5e      	ldr	r3, [pc, #376]	@ (8003018 <menu+0x2b18>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d105      	bne.n	8002eb2 <menu+0x29b2>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8002ea6:	4a68      	ldr	r2, [pc, #416]	@ (8003048 <menu+0x2b48>)
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	2001      	movs	r0, #1
 8002eac:	f7fd fae1 	bl	8000472 <lcd_print>
 8002eb0:	e008      	b.n	8002ec4 <menu+0x29c4>
			} else if(dilSecim == 1) {
 8002eb2:	4b59      	ldr	r3, [pc, #356]	@ (8003018 <menu+0x2b18>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d104      	bne.n	8002ec4 <menu+0x29c4>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8002eba:	4a64      	ldr	r2, [pc, #400]	@ (800304c <menu+0x2b4c>)
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	f7fd fad7 	bl	8000472 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8002ec4:	4b54      	ldr	r3, [pc, #336]	@ (8003018 <menu+0x2b18>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d105      	bne.n	8002ed8 <menu+0x29d8>
				lcd_print(2, 1, "Kac Saniye     ");
 8002ecc:	4a60      	ldr	r2, [pc, #384]	@ (8003050 <menu+0x2b50>)
 8002ece:	2101      	movs	r1, #1
 8002ed0:	2002      	movs	r0, #2
 8002ed2:	f7fd face 	bl	8000472 <lcd_print>
 8002ed6:	e008      	b.n	8002eea <menu+0x29ea>
			} else if(dilSecim == 1) {
 8002ed8:	4b4f      	ldr	r3, [pc, #316]	@ (8003018 <menu+0x2b18>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d104      	bne.n	8002eea <menu+0x29ea>
				lcd_print(2, 1, "Second         ");
 8002ee0:	4a4e      	ldr	r2, [pc, #312]	@ (800301c <menu+0x2b1c>)
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	2002      	movs	r0, #2
 8002ee6:	f7fd fac4 	bl	8000472 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8002eea:	4b5a      	ldr	r3, [pc, #360]	@ (8003054 <menu+0x2b54>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	220a      	movs	r2, #10
 8002ef0:	494c      	ldr	r1, [pc, #304]	@ (8003024 <menu+0x2b24>)
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f006 fe40 	bl	8009b78 <itoa>
		lcd_print(2,16,snum);
 8002ef8:	4a4a      	ldr	r2, [pc, #296]	@ (8003024 <menu+0x2b24>)
 8002efa:	2110      	movs	r1, #16
 8002efc:	2002      	movs	r0, #2
 8002efe:	f7fd fab8 	bl	8000472 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f02:	2102      	movs	r1, #2
 8002f04:	4848      	ldr	r0, [pc, #288]	@ (8003028 <menu+0x2b28>)
 8002f06:	f004 fa95 	bl	8007434 <HAL_GPIO_ReadPin>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d115      	bne.n	8002f3c <menu+0x2a3c>
 8002f10:	4b46      	ldr	r3, [pc, #280]	@ (800302c <menu+0x2b2c>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	f083 0301 	eor.w	r3, r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00e      	beq.n	8002f3c <menu+0x2a3c>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8002f1e:	4b4d      	ldr	r3, [pc, #308]	@ (8003054 <menu+0x2b54>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4b4b      	ldr	r3, [pc, #300]	@ (8003054 <menu+0x2b54>)
 8002f28:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8002f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003054 <menu+0x2b54>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b05      	cmp	r3, #5
 8002f30:	d902      	bls.n	8002f38 <menu+0x2a38>
				devirmeAsagiGeriTmr = 0;
 8002f32:	4b48      	ldr	r3, [pc, #288]	@ (8003054 <menu+0x2b54>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f38:	f000 fc0a 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	483a      	ldr	r0, [pc, #232]	@ (8003028 <menu+0x2b28>)
 8002f40:	f004 fa78 	bl	8007434 <HAL_GPIO_ReadPin>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d115      	bne.n	8002f76 <menu+0x2a76>
 8002f4a:	4b38      	ldr	r3, [pc, #224]	@ (800302c <menu+0x2b2c>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	f083 0301 	eor.w	r3, r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00e      	beq.n	8002f76 <menu+0x2a76>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8002f58:	4b3e      	ldr	r3, [pc, #248]	@ (8003054 <menu+0x2b54>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	4b3c      	ldr	r3, [pc, #240]	@ (8003054 <menu+0x2b54>)
 8002f62:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8002f64:	4b3b      	ldr	r3, [pc, #236]	@ (8003054 <menu+0x2b54>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b06      	cmp	r3, #6
 8002f6a:	d902      	bls.n	8002f72 <menu+0x2a72>
		   		devirmeAsagiGeriTmr = 5;
 8002f6c:	4b39      	ldr	r3, [pc, #228]	@ (8003054 <menu+0x2b54>)
 8002f6e:	2205      	movs	r2, #5
 8002f70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f72:	f000 fbed 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f76:	2108      	movs	r1, #8
 8002f78:	482b      	ldr	r0, [pc, #172]	@ (8003028 <menu+0x2b28>)
 8002f7a:	f004 fa5b 	bl	8007434 <HAL_GPIO_ReadPin>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d10d      	bne.n	8002fa0 <menu+0x2aa0>
 8002f84:	4b29      	ldr	r3, [pc, #164]	@ (800302c <menu+0x2b2c>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	f083 0301 	eor.w	r3, r3, #1
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d006      	beq.n	8002fa0 <menu+0x2aa0>
			eepromData[23] = devirmeAsagiGeriTmr;
 8002f92:	4b30      	ldr	r3, [pc, #192]	@ (8003054 <menu+0x2b54>)
 8002f94:	781a      	ldrb	r2, [r3, #0]
 8002f96:	4b26      	ldr	r3, [pc, #152]	@ (8003030 <menu+0x2b30>)
 8002f98:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8002f9a:	4b26      	ldr	r3, [pc, #152]	@ (8003034 <menu+0x2b34>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8002fa0:	4b25      	ldr	r3, [pc, #148]	@ (8003038 <menu+0x2b38>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b1a      	cmp	r3, #26
 8002fa6:	f040 80f7 	bne.w	8003198 <menu+0x2c98>
		if(dilSecim == 0) {
 8002faa:	4b1b      	ldr	r3, [pc, #108]	@ (8003018 <menu+0x2b18>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d105      	bne.n	8002fbe <menu+0x2abe>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8002fb2:	4a29      	ldr	r2, [pc, #164]	@ (8003058 <menu+0x2b58>)
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f7fd fa5b 	bl	8000472 <lcd_print>
 8002fbc:	e008      	b.n	8002fd0 <menu+0x2ad0>
		} else if(dilSecim == 1) {
 8002fbe:	4b16      	ldr	r3, [pc, #88]	@ (8003018 <menu+0x2b18>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d104      	bne.n	8002fd0 <menu+0x2ad0>
			lcd_print(1, 1, "WORKING TIME    ");
 8002fc6:	4a25      	ldr	r2, [pc, #148]	@ (800305c <menu+0x2b5c>)
 8002fc8:	2101      	movs	r1, #1
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f7fd fa51 	bl	8000472 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8002fd0:	4b23      	ldr	r3, [pc, #140]	@ (8003060 <menu+0x2b60>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b63      	cmp	r3, #99	@ 0x63
 8002fd6:	d945      	bls.n	8003064 <menu+0x2b64>
			if(dilSecim == 0) {
 8002fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003018 <menu+0x2b18>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d104      	bne.n	8002fea <menu+0x2aea>
				lcd_print(2, 1, "Kac Saniye     ");
 8002fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8003050 <menu+0x2b50>)
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	2002      	movs	r0, #2
 8002fe6:	f7fd fa44 	bl	8000472 <lcd_print>
			}
			if(dilSecim == 1) {
 8002fea:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <menu+0x2b18>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d104      	bne.n	8002ffc <menu+0x2afc>
				lcd_print(2, 1, "Second         ");
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <menu+0x2b1c>)
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	2002      	movs	r0, #2
 8002ff8:	f7fd fa3b 	bl	8000472 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8002ffc:	4b18      	ldr	r3, [pc, #96]	@ (8003060 <menu+0x2b60>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	220a      	movs	r2, #10
 8003002:	4908      	ldr	r1, [pc, #32]	@ (8003024 <menu+0x2b24>)
 8003004:	4618      	mov	r0, r3
 8003006:	f006 fdb7 	bl	8009b78 <itoa>
			lcd_print(2,14,snum);
 800300a:	4a06      	ldr	r2, [pc, #24]	@ (8003024 <menu+0x2b24>)
 800300c:	210e      	movs	r1, #14
 800300e:	2002      	movs	r0, #2
 8003010:	f7fd fa2f 	bl	8000472 <lcd_print>
 8003014:	e071      	b.n	80030fa <menu+0x2bfa>
 8003016:	bf00      	nop
 8003018:	200000ea 	.word	0x200000ea
 800301c:	0800a4f0 	.word	0x0800a4f0
 8003020:	200000e0 	.word	0x200000e0
 8003024:	200000a0 	.word	0x200000a0
 8003028:	40010800 	.word	0x40010800
 800302c:	200000f8 	.word	0x200000f8
 8003030:	20000060 	.word	0x20000060
 8003034:	200000f5 	.word	0x200000f5
 8003038:	200000ca 	.word	0x200000ca
 800303c:	200000d9 	.word	0x200000d9
 8003040:	0800a578 	.word	0x0800a578
 8003044:	0800a58c 	.word	0x0800a58c
 8003048:	0800a5a0 	.word	0x0800a5a0
 800304c:	0800a5b4 	.word	0x0800a5b4
 8003050:	0800a17c 	.word	0x0800a17c
 8003054:	200000e1 	.word	0x200000e1
 8003058:	0800a5c8 	.word	0x0800a5c8
 800305c:	0800a5dc 	.word	0x0800a5dc
 8003060:	200000e2 	.word	0x200000e2

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003064:	4b9e      	ldr	r3, [pc, #632]	@ (80032e0 <menu+0x2de0>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b09      	cmp	r3, #9
 800306a:	d923      	bls.n	80030b4 <menu+0x2bb4>
 800306c:	4b9c      	ldr	r3, [pc, #624]	@ (80032e0 <menu+0x2de0>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b63      	cmp	r3, #99	@ 0x63
 8003072:	d81f      	bhi.n	80030b4 <menu+0x2bb4>
			if(dilSecim == 0) {
 8003074:	4b9b      	ldr	r3, [pc, #620]	@ (80032e4 <menu+0x2de4>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <menu+0x2b88>
				lcd_print(2, 1, "Kac Saniye     ");
 800307c:	4a9a      	ldr	r2, [pc, #616]	@ (80032e8 <menu+0x2de8>)
 800307e:	2101      	movs	r1, #1
 8003080:	2002      	movs	r0, #2
 8003082:	f7fd f9f6 	bl	8000472 <lcd_print>
 8003086:	e008      	b.n	800309a <menu+0x2b9a>
			} else if(dilSecim == 1) {
 8003088:	4b96      	ldr	r3, [pc, #600]	@ (80032e4 <menu+0x2de4>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d104      	bne.n	800309a <menu+0x2b9a>
				lcd_print(2, 1, "Second         ");
 8003090:	4a96      	ldr	r2, [pc, #600]	@ (80032ec <menu+0x2dec>)
 8003092:	2101      	movs	r1, #1
 8003094:	2002      	movs	r0, #2
 8003096:	f7fd f9ec 	bl	8000472 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800309a:	4b91      	ldr	r3, [pc, #580]	@ (80032e0 <menu+0x2de0>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	220a      	movs	r2, #10
 80030a0:	4993      	ldr	r1, [pc, #588]	@ (80032f0 <menu+0x2df0>)
 80030a2:	4618      	mov	r0, r3
 80030a4:	f006 fd68 	bl	8009b78 <itoa>
			lcd_print(2, 15, snum);
 80030a8:	4a91      	ldr	r2, [pc, #580]	@ (80032f0 <menu+0x2df0>)
 80030aa:	210f      	movs	r1, #15
 80030ac:	2002      	movs	r0, #2
 80030ae:	f7fd f9e0 	bl	8000472 <lcd_print>
		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80030b2:	e022      	b.n	80030fa <menu+0x2bfa>
		} else if(makineCalismaTmr <=  9) {
 80030b4:	4b8a      	ldr	r3, [pc, #552]	@ (80032e0 <menu+0x2de0>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b09      	cmp	r3, #9
 80030ba:	d81e      	bhi.n	80030fa <menu+0x2bfa>
			if(dilSecim == 0) {
 80030bc:	4b89      	ldr	r3, [pc, #548]	@ (80032e4 <menu+0x2de4>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d105      	bne.n	80030d0 <menu+0x2bd0>
				lcd_print(2, 1, "Kac Saniye     ");
 80030c4:	4a88      	ldr	r2, [pc, #544]	@ (80032e8 <menu+0x2de8>)
 80030c6:	2101      	movs	r1, #1
 80030c8:	2002      	movs	r0, #2
 80030ca:	f7fd f9d2 	bl	8000472 <lcd_print>
 80030ce:	e008      	b.n	80030e2 <menu+0x2be2>
			} else if(dilSecim == 1) {
 80030d0:	4b84      	ldr	r3, [pc, #528]	@ (80032e4 <menu+0x2de4>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d104      	bne.n	80030e2 <menu+0x2be2>
				lcd_print(2, 1, "Second         ");
 80030d8:	4a84      	ldr	r2, [pc, #528]	@ (80032ec <menu+0x2dec>)
 80030da:	2101      	movs	r1, #1
 80030dc:	2002      	movs	r0, #2
 80030de:	f7fd f9c8 	bl	8000472 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80030e2:	4b7f      	ldr	r3, [pc, #508]	@ (80032e0 <menu+0x2de0>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	220a      	movs	r2, #10
 80030e8:	4981      	ldr	r1, [pc, #516]	@ (80032f0 <menu+0x2df0>)
 80030ea:	4618      	mov	r0, r3
 80030ec:	f006 fd44 	bl	8009b78 <itoa>
			lcd_print(2, 16, snum);
 80030f0:	4a7f      	ldr	r2, [pc, #508]	@ (80032f0 <menu+0x2df0>)
 80030f2:	2110      	movs	r1, #16
 80030f4:	2002      	movs	r0, #2
 80030f6:	f7fd f9bc 	bl	8000472 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030fa:	2102      	movs	r1, #2
 80030fc:	487d      	ldr	r0, [pc, #500]	@ (80032f4 <menu+0x2df4>)
 80030fe:	f004 f999 	bl	8007434 <HAL_GPIO_ReadPin>
 8003102:	4603      	mov	r3, r0
 8003104:	2b01      	cmp	r3, #1
 8003106:	d115      	bne.n	8003134 <menu+0x2c34>
 8003108:	4b7b      	ldr	r3, [pc, #492]	@ (80032f8 <menu+0x2df8>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	f083 0301 	eor.w	r3, r3, #1
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00e      	beq.n	8003134 <menu+0x2c34>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003116:	4b72      	ldr	r3, [pc, #456]	@ (80032e0 <menu+0x2de0>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	3301      	adds	r3, #1
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4b70      	ldr	r3, [pc, #448]	@ (80032e0 <menu+0x2de0>)
 8003120:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003122:	4b6f      	ldr	r3, [pc, #444]	@ (80032e0 <menu+0x2de0>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2bb4      	cmp	r3, #180	@ 0xb4
 8003128:	d902      	bls.n	8003130 <menu+0x2c30>
				makineCalismaTmr = 0;
 800312a:	4b6d      	ldr	r3, [pc, #436]	@ (80032e0 <menu+0x2de0>)
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003130:	f000 fb0e 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003134:	2104      	movs	r1, #4
 8003136:	486f      	ldr	r0, [pc, #444]	@ (80032f4 <menu+0x2df4>)
 8003138:	f004 f97c 	bl	8007434 <HAL_GPIO_ReadPin>
 800313c:	4603      	mov	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d115      	bne.n	800316e <menu+0x2c6e>
 8003142:	4b6d      	ldr	r3, [pc, #436]	@ (80032f8 <menu+0x2df8>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	f083 0301 	eor.w	r3, r3, #1
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00e      	beq.n	800316e <menu+0x2c6e>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003150:	4b63      	ldr	r3, [pc, #396]	@ (80032e0 <menu+0x2de0>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	3b01      	subs	r3, #1
 8003156:	b2da      	uxtb	r2, r3
 8003158:	4b61      	ldr	r3, [pc, #388]	@ (80032e0 <menu+0x2de0>)
 800315a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 800315c:	4b60      	ldr	r3, [pc, #384]	@ (80032e0 <menu+0x2de0>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2bb5      	cmp	r3, #181	@ 0xb5
 8003162:	d902      	bls.n	800316a <menu+0x2c6a>
		   		makineCalismaTmr = 180;
 8003164:	4b5e      	ldr	r3, [pc, #376]	@ (80032e0 <menu+0x2de0>)
 8003166:	22b4      	movs	r2, #180	@ 0xb4
 8003168:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800316a:	f000 faf1 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800316e:	2108      	movs	r1, #8
 8003170:	4860      	ldr	r0, [pc, #384]	@ (80032f4 <menu+0x2df4>)
 8003172:	f004 f95f 	bl	8007434 <HAL_GPIO_ReadPin>
 8003176:	4603      	mov	r3, r0
 8003178:	2b01      	cmp	r3, #1
 800317a:	d10d      	bne.n	8003198 <menu+0x2c98>
 800317c:	4b5e      	ldr	r3, [pc, #376]	@ (80032f8 <menu+0x2df8>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	f083 0301 	eor.w	r3, r3, #1
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d006      	beq.n	8003198 <menu+0x2c98>
			eepromData[24] = makineCalismaTmr;
 800318a:	4b55      	ldr	r3, [pc, #340]	@ (80032e0 <menu+0x2de0>)
 800318c:	781a      	ldrb	r2, [r3, #0]
 800318e:	4b5b      	ldr	r3, [pc, #364]	@ (80032fc <menu+0x2dfc>)
 8003190:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003192:	4b5b      	ldr	r3, [pc, #364]	@ (8003300 <menu+0x2e00>)
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003198:	4b5a      	ldr	r3, [pc, #360]	@ (8003304 <menu+0x2e04>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b1b      	cmp	r3, #27
 800319e:	f040 8083 	bne.w	80032a8 <menu+0x2da8>
		lcd_print(1, 1, "BUZZER          ");
 80031a2:	4a59      	ldr	r2, [pc, #356]	@ (8003308 <menu+0x2e08>)
 80031a4:	2101      	movs	r1, #1
 80031a6:	2001      	movs	r0, #1
 80031a8:	f7fd f963 	bl	8000472 <lcd_print>

		if(buzzer == 0) {
 80031ac:	4b57      	ldr	r3, [pc, #348]	@ (800330c <menu+0x2e0c>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d113      	bne.n	80031dc <menu+0x2cdc>
			if(dilSecim == 0) {
 80031b4:	4b4b      	ldr	r3, [pc, #300]	@ (80032e4 <menu+0x2de4>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <menu+0x2cc8>
				lcd_print(2, 1, "Pasif           ");
 80031bc:	4a54      	ldr	r2, [pc, #336]	@ (8003310 <menu+0x2e10>)
 80031be:	2101      	movs	r1, #1
 80031c0:	2002      	movs	r0, #2
 80031c2:	f7fd f956 	bl	8000472 <lcd_print>
 80031c6:	e020      	b.n	800320a <menu+0x2d0a>
			} else if(dilSecim == 1) {
 80031c8:	4b46      	ldr	r3, [pc, #280]	@ (80032e4 <menu+0x2de4>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d11c      	bne.n	800320a <menu+0x2d0a>
				lcd_print(2, 1, "Passive         ");
 80031d0:	4a50      	ldr	r2, [pc, #320]	@ (8003314 <menu+0x2e14>)
 80031d2:	2101      	movs	r1, #1
 80031d4:	2002      	movs	r0, #2
 80031d6:	f7fd f94c 	bl	8000472 <lcd_print>
 80031da:	e016      	b.n	800320a <menu+0x2d0a>
			}
		} else if(buzzer == 1) {
 80031dc:	4b4b      	ldr	r3, [pc, #300]	@ (800330c <menu+0x2e0c>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d112      	bne.n	800320a <menu+0x2d0a>
			if(dilSecim == 0) {
 80031e4:	4b3f      	ldr	r3, [pc, #252]	@ (80032e4 <menu+0x2de4>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <menu+0x2cf8>
				lcd_print(2, 1, "Aktif           ");
 80031ec:	4a4a      	ldr	r2, [pc, #296]	@ (8003318 <menu+0x2e18>)
 80031ee:	2101      	movs	r1, #1
 80031f0:	2002      	movs	r0, #2
 80031f2:	f7fd f93e 	bl	8000472 <lcd_print>
 80031f6:	e008      	b.n	800320a <menu+0x2d0a>
			} else if(dilSecim == 1) {
 80031f8:	4b3a      	ldr	r3, [pc, #232]	@ (80032e4 <menu+0x2de4>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d104      	bne.n	800320a <menu+0x2d0a>
				lcd_print(2, 1, "Active          ");
 8003200:	4a46      	ldr	r2, [pc, #280]	@ (800331c <menu+0x2e1c>)
 8003202:	2101      	movs	r1, #1
 8003204:	2002      	movs	r0, #2
 8003206:	f7fd f934 	bl	8000472 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800320a:	2102      	movs	r1, #2
 800320c:	4839      	ldr	r0, [pc, #228]	@ (80032f4 <menu+0x2df4>)
 800320e:	f004 f911 	bl	8007434 <HAL_GPIO_ReadPin>
 8003212:	4603      	mov	r3, r0
 8003214:	2b01      	cmp	r3, #1
 8003216:	d115      	bne.n	8003244 <menu+0x2d44>
 8003218:	4b37      	ldr	r3, [pc, #220]	@ (80032f8 <menu+0x2df8>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	f083 0301 	eor.w	r3, r3, #1
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00e      	beq.n	8003244 <menu+0x2d44>
			buzzer = buzzer + 1;
 8003226:	4b39      	ldr	r3, [pc, #228]	@ (800330c <menu+0x2e0c>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	3301      	adds	r3, #1
 800322c:	b2da      	uxtb	r2, r3
 800322e:	4b37      	ldr	r3, [pc, #220]	@ (800330c <menu+0x2e0c>)
 8003230:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003232:	4b36      	ldr	r3, [pc, #216]	@ (800330c <menu+0x2e0c>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d902      	bls.n	8003240 <menu+0x2d40>
				buzzer = 0;
 800323a:	4b34      	ldr	r3, [pc, #208]	@ (800330c <menu+0x2e0c>)
 800323c:	2200      	movs	r2, #0
 800323e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003240:	f000 fa86 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003244:	2104      	movs	r1, #4
 8003246:	482b      	ldr	r0, [pc, #172]	@ (80032f4 <menu+0x2df4>)
 8003248:	f004 f8f4 	bl	8007434 <HAL_GPIO_ReadPin>
 800324c:	4603      	mov	r3, r0
 800324e:	2b01      	cmp	r3, #1
 8003250:	d115      	bne.n	800327e <menu+0x2d7e>
 8003252:	4b29      	ldr	r3, [pc, #164]	@ (80032f8 <menu+0x2df8>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	f083 0301 	eor.w	r3, r3, #1
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00e      	beq.n	800327e <menu+0x2d7e>
			buzzer = buzzer - 1;
 8003260:	4b2a      	ldr	r3, [pc, #168]	@ (800330c <menu+0x2e0c>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	3b01      	subs	r3, #1
 8003266:	b2da      	uxtb	r2, r3
 8003268:	4b28      	ldr	r3, [pc, #160]	@ (800330c <menu+0x2e0c>)
 800326a:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 800326c:	4b27      	ldr	r3, [pc, #156]	@ (800330c <menu+0x2e0c>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <menu+0x2d7a>
		   		buzzer = 1;
 8003274:	4b25      	ldr	r3, [pc, #148]	@ (800330c <menu+0x2e0c>)
 8003276:	2201      	movs	r2, #1
 8003278:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800327a:	f000 fa69 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800327e:	2108      	movs	r1, #8
 8003280:	481c      	ldr	r0, [pc, #112]	@ (80032f4 <menu+0x2df4>)
 8003282:	f004 f8d7 	bl	8007434 <HAL_GPIO_ReadPin>
 8003286:	4603      	mov	r3, r0
 8003288:	2b01      	cmp	r3, #1
 800328a:	d10d      	bne.n	80032a8 <menu+0x2da8>
 800328c:	4b1a      	ldr	r3, [pc, #104]	@ (80032f8 <menu+0x2df8>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	f083 0301 	eor.w	r3, r3, #1
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d006      	beq.n	80032a8 <menu+0x2da8>
			eepromData[25] = buzzer;
 800329a:	4b1c      	ldr	r3, [pc, #112]	@ (800330c <menu+0x2e0c>)
 800329c:	781a      	ldrb	r2, [r3, #0]
 800329e:	4b17      	ldr	r3, [pc, #92]	@ (80032fc <menu+0x2dfc>)
 80032a0:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80032a2:	4b17      	ldr	r3, [pc, #92]	@ (8003300 <menu+0x2e00>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80032a8:	4b16      	ldr	r3, [pc, #88]	@ (8003304 <menu+0x2e04>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b1c      	cmp	r3, #28
 80032ae:	f040 80ad 	bne.w	800340c <menu+0x2f0c>
		calismaSayModu = 0;
 80032b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003320 <menu+0x2e20>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 80032b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003324 <menu+0x2e24>)
 80032ba:	2101      	movs	r1, #1
 80032bc:	2001      	movs	r0, #1
 80032be:	f7fd f8d8 	bl	8000472 <lcd_print>

		if(demoMode == 0) {
 80032c2:	4b19      	ldr	r3, [pc, #100]	@ (8003328 <menu+0x2e28>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d13a      	bne.n	8003340 <menu+0x2e40>
			if(dilSecim == 0) {
 80032ca:	4b06      	ldr	r3, [pc, #24]	@ (80032e4 <menu+0x2de4>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d12c      	bne.n	800332c <menu+0x2e2c>
				lcd_print(2, 1, "Pasif           ");
 80032d2:	4a0f      	ldr	r2, [pc, #60]	@ (8003310 <menu+0x2e10>)
 80032d4:	2101      	movs	r1, #1
 80032d6:	2002      	movs	r0, #2
 80032d8:	f7fd f8cb 	bl	8000472 <lcd_print>
 80032dc:	e047      	b.n	800336e <menu+0x2e6e>
 80032de:	bf00      	nop
 80032e0:	200000e2 	.word	0x200000e2
 80032e4:	200000ea 	.word	0x200000ea
 80032e8:	0800a17c 	.word	0x0800a17c
 80032ec:	0800a4f0 	.word	0x0800a4f0
 80032f0:	200000a0 	.word	0x200000a0
 80032f4:	40010800 	.word	0x40010800
 80032f8:	200000f8 	.word	0x200000f8
 80032fc:	20000060 	.word	0x20000060
 8003300:	200000f5 	.word	0x200000f5
 8003304:	200000ca 	.word	0x200000ca
 8003308:	0800a5f0 	.word	0x0800a5f0
 800330c:	200000e6 	.word	0x200000e6
 8003310:	08009f14 	.word	0x08009f14
 8003314:	08009f28 	.word	0x08009f28
 8003318:	08009f74 	.word	0x08009f74
 800331c:	08009f88 	.word	0x08009f88
 8003320:	200000e9 	.word	0x200000e9
 8003324:	0800a604 	.word	0x0800a604
 8003328:	200000e8 	.word	0x200000e8
			} else if(dilSecim == 1) {
 800332c:	4b9c      	ldr	r3, [pc, #624]	@ (80035a0 <menu+0x30a0>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d11c      	bne.n	800336e <menu+0x2e6e>
				lcd_print(2, 1, "Passive         ");
 8003334:	4a9b      	ldr	r2, [pc, #620]	@ (80035a4 <menu+0x30a4>)
 8003336:	2101      	movs	r1, #1
 8003338:	2002      	movs	r0, #2
 800333a:	f7fd f89a 	bl	8000472 <lcd_print>
 800333e:	e016      	b.n	800336e <menu+0x2e6e>
			}
		} else if(demoMode == 1) {
 8003340:	4b99      	ldr	r3, [pc, #612]	@ (80035a8 <menu+0x30a8>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d112      	bne.n	800336e <menu+0x2e6e>
			if(dilSecim == 0){
 8003348:	4b95      	ldr	r3, [pc, #596]	@ (80035a0 <menu+0x30a0>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d105      	bne.n	800335c <menu+0x2e5c>
				lcd_print(2, 1, "Aktif           ");
 8003350:	4a96      	ldr	r2, [pc, #600]	@ (80035ac <menu+0x30ac>)
 8003352:	2101      	movs	r1, #1
 8003354:	2002      	movs	r0, #2
 8003356:	f7fd f88c 	bl	8000472 <lcd_print>
 800335a:	e008      	b.n	800336e <menu+0x2e6e>
			} else if(dilSecim == 1) {
 800335c:	4b90      	ldr	r3, [pc, #576]	@ (80035a0 <menu+0x30a0>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d104      	bne.n	800336e <menu+0x2e6e>
				lcd_print(2, 1, "Active          ");
 8003364:	4a92      	ldr	r2, [pc, #584]	@ (80035b0 <menu+0x30b0>)
 8003366:	2101      	movs	r1, #1
 8003368:	2002      	movs	r0, #2
 800336a:	f7fd f882 	bl	8000472 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800336e:	2102      	movs	r1, #2
 8003370:	4890      	ldr	r0, [pc, #576]	@ (80035b4 <menu+0x30b4>)
 8003372:	f004 f85f 	bl	8007434 <HAL_GPIO_ReadPin>
 8003376:	4603      	mov	r3, r0
 8003378:	2b01      	cmp	r3, #1
 800337a:	d115      	bne.n	80033a8 <menu+0x2ea8>
 800337c:	4b8e      	ldr	r3, [pc, #568]	@ (80035b8 <menu+0x30b8>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	f083 0301 	eor.w	r3, r3, #1
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00e      	beq.n	80033a8 <menu+0x2ea8>
			demoMode = demoMode + 1;
 800338a:	4b87      	ldr	r3, [pc, #540]	@ (80035a8 <menu+0x30a8>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	3301      	adds	r3, #1
 8003390:	b2da      	uxtb	r2, r3
 8003392:	4b85      	ldr	r3, [pc, #532]	@ (80035a8 <menu+0x30a8>)
 8003394:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003396:	4b84      	ldr	r3, [pc, #528]	@ (80035a8 <menu+0x30a8>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d902      	bls.n	80033a4 <menu+0x2ea4>
				demoMode = 0;
 800339e:	4b82      	ldr	r3, [pc, #520]	@ (80035a8 <menu+0x30a8>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033a4:	f000 f9d4 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033a8:	2104      	movs	r1, #4
 80033aa:	4882      	ldr	r0, [pc, #520]	@ (80035b4 <menu+0x30b4>)
 80033ac:	f004 f842 	bl	8007434 <HAL_GPIO_ReadPin>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d115      	bne.n	80033e2 <menu+0x2ee2>
 80033b6:	4b80      	ldr	r3, [pc, #512]	@ (80035b8 <menu+0x30b8>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	f083 0301 	eor.w	r3, r3, #1
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00e      	beq.n	80033e2 <menu+0x2ee2>
			demoMode = demoMode - 1;
 80033c4:	4b78      	ldr	r3, [pc, #480]	@ (80035a8 <menu+0x30a8>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	4b76      	ldr	r3, [pc, #472]	@ (80035a8 <menu+0x30a8>)
 80033ce:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80033d0:	4b75      	ldr	r3, [pc, #468]	@ (80035a8 <menu+0x30a8>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <menu+0x2ede>
		   		demoMode = 1;
 80033d8:	4b73      	ldr	r3, [pc, #460]	@ (80035a8 <menu+0x30a8>)
 80033da:	2201      	movs	r2, #1
 80033dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033de:	f000 f9b7 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033e2:	2108      	movs	r1, #8
 80033e4:	4873      	ldr	r0, [pc, #460]	@ (80035b4 <menu+0x30b4>)
 80033e6:	f004 f825 	bl	8007434 <HAL_GPIO_ReadPin>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d10d      	bne.n	800340c <menu+0x2f0c>
 80033f0:	4b71      	ldr	r3, [pc, #452]	@ (80035b8 <menu+0x30b8>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	f083 0301 	eor.w	r3, r3, #1
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d006      	beq.n	800340c <menu+0x2f0c>
			eepromData[26] = demoMode;
 80033fe:	4b6a      	ldr	r3, [pc, #424]	@ (80035a8 <menu+0x30a8>)
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	4b6e      	ldr	r3, [pc, #440]	@ (80035bc <menu+0x30bc>)
 8003404:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003406:	4b6e      	ldr	r3, [pc, #440]	@ (80035c0 <menu+0x30c0>)
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 800340c:	4b6d      	ldr	r3, [pc, #436]	@ (80035c4 <menu+0x30c4>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b1d      	cmp	r3, #29
 8003412:	f040 80ad 	bne.w	8003570 <menu+0x3070>
		if(calismaSayModu == 0) {
 8003416:	4b6c      	ldr	r3, [pc, #432]	@ (80035c8 <menu+0x30c8>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d124      	bne.n	8003468 <menu+0x2f68>
			if(dilSecim == 0) {
 800341e:	4b60      	ldr	r3, [pc, #384]	@ (80035a0 <menu+0x30a0>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d105      	bne.n	8003432 <menu+0x2f32>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8003426:	4a69      	ldr	r2, [pc, #420]	@ (80035cc <menu+0x30cc>)
 8003428:	2101      	movs	r1, #1
 800342a:	2001      	movs	r0, #1
 800342c:	f7fd f821 	bl	8000472 <lcd_print>
 8003430:	e008      	b.n	8003444 <menu+0x2f44>
			} else if(dilSecim == 1) {
 8003432:	4b5b      	ldr	r3, [pc, #364]	@ (80035a0 <menu+0x30a0>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d104      	bne.n	8003444 <menu+0x2f44>
				lcd_print(1, 1, "Working Cycle   ");
 800343a:	4a65      	ldr	r2, [pc, #404]	@ (80035d0 <menu+0x30d0>)
 800343c:	2101      	movs	r1, #1
 800343e:	2001      	movs	r0, #1
 8003440:	f7fd f817 	bl	8000472 <lcd_print>
			}

			itoa(calismaSayisi, snum, 10);
 8003444:	4b63      	ldr	r3, [pc, #396]	@ (80035d4 <menu+0x30d4>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	220a      	movs	r2, #10
 800344a:	4963      	ldr	r1, [pc, #396]	@ (80035d8 <menu+0x30d8>)
 800344c:	4618      	mov	r0, r3
 800344e:	f006 fb93 	bl	8009b78 <itoa>
			lcd_print(2, 11, snum);
 8003452:	4a61      	ldr	r2, [pc, #388]	@ (80035d8 <menu+0x30d8>)
 8003454:	210b      	movs	r1, #11
 8003456:	2002      	movs	r0, #2
 8003458:	f7fd f80b 	bl	8000472 <lcd_print>

			lcd_print(2, 1, "           ");
 800345c:	4a5f      	ldr	r2, [pc, #380]	@ (80035dc <menu+0x30dc>)
 800345e:	2101      	movs	r1, #1
 8003460:	2002      	movs	r0, #2
 8003462:	f7fd f806 	bl	8000472 <lcd_print>
 8003466:	e020      	b.n	80034aa <menu+0x2faa>
		} else if(calismaSayModu == 1) {
 8003468:	4b57      	ldr	r3, [pc, #348]	@ (80035c8 <menu+0x30c8>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d11c      	bne.n	80034aa <menu+0x2faa>
			if(dilSecim == 0) {
 8003470:	4b4b      	ldr	r3, [pc, #300]	@ (80035a0 <menu+0x30a0>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10a      	bne.n	800348e <menu+0x2f8e>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8003478:	4a54      	ldr	r2, [pc, #336]	@ (80035cc <menu+0x30cc>)
 800347a:	2101      	movs	r1, #1
 800347c:	2001      	movs	r0, #1
 800347e:	f7fc fff8 	bl	8000472 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8003482:	4a57      	ldr	r2, [pc, #348]	@ (80035e0 <menu+0x30e0>)
 8003484:	2101      	movs	r1, #1
 8003486:	2002      	movs	r0, #2
 8003488:	f7fc fff3 	bl	8000472 <lcd_print>
 800348c:	e00d      	b.n	80034aa <menu+0x2faa>
			} else if(dilSecim == 1) {
 800348e:	4b44      	ldr	r3, [pc, #272]	@ (80035a0 <menu+0x30a0>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d109      	bne.n	80034aa <menu+0x2faa>
				lcd_print(1, 1, "Working Cycle   ");
 8003496:	4a4e      	ldr	r2, [pc, #312]	@ (80035d0 <menu+0x30d0>)
 8003498:	2101      	movs	r1, #1
 800349a:	2001      	movs	r0, #1
 800349c:	f7fc ffe9 	bl	8000472 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80034a0:	4a50      	ldr	r2, [pc, #320]	@ (80035e4 <menu+0x30e4>)
 80034a2:	2101      	movs	r1, #1
 80034a4:	2002      	movs	r0, #2
 80034a6:	f7fc ffe4 	bl	8000472 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80034aa:	2102      	movs	r1, #2
 80034ac:	4841      	ldr	r0, [pc, #260]	@ (80035b4 <menu+0x30b4>)
 80034ae:	f003 ffc1 	bl	8007434 <HAL_GPIO_ReadPin>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d119      	bne.n	80034ec <menu+0x2fec>
 80034b8:	4b3f      	ldr	r3, [pc, #252]	@ (80035b8 <menu+0x30b8>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	f083 0301 	eor.w	r3, r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d012      	beq.n	80034ec <menu+0x2fec>
 80034c6:	4b48      	ldr	r3, [pc, #288]	@ (80035e8 <menu+0x30e8>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00e      	beq.n	80034ec <menu+0x2fec>
			calismaSayModu = calismaSayModu + 1;
 80034ce:	4b3e      	ldr	r3, [pc, #248]	@ (80035c8 <menu+0x30c8>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	3301      	adds	r3, #1
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	4b3c      	ldr	r3, [pc, #240]	@ (80035c8 <menu+0x30c8>)
 80034d8:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80034da:	4b3b      	ldr	r3, [pc, #236]	@ (80035c8 <menu+0x30c8>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d902      	bls.n	80034e8 <menu+0x2fe8>
				calismaSayModu = 0;
 80034e2:	4b39      	ldr	r3, [pc, #228]	@ (80035c8 <menu+0x30c8>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034e8:	f000 f932 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80034ec:	2104      	movs	r1, #4
 80034ee:	4831      	ldr	r0, [pc, #196]	@ (80035b4 <menu+0x30b4>)
 80034f0:	f003 ffa0 	bl	8007434 <HAL_GPIO_ReadPin>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d119      	bne.n	800352e <menu+0x302e>
 80034fa:	4b2f      	ldr	r3, [pc, #188]	@ (80035b8 <menu+0x30b8>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	f083 0301 	eor.w	r3, r3, #1
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d012      	beq.n	800352e <menu+0x302e>
 8003508:	4b37      	ldr	r3, [pc, #220]	@ (80035e8 <menu+0x30e8>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00e      	beq.n	800352e <menu+0x302e>
			calismaSayModu = calismaSayModu - 1;
 8003510:	4b2d      	ldr	r3, [pc, #180]	@ (80035c8 <menu+0x30c8>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	3b01      	subs	r3, #1
 8003516:	b2da      	uxtb	r2, r3
 8003518:	4b2b      	ldr	r3, [pc, #172]	@ (80035c8 <menu+0x30c8>)
 800351a:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800351c:	4b2a      	ldr	r3, [pc, #168]	@ (80035c8 <menu+0x30c8>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <menu+0x302a>
		   		calismaSayModu = 1;
 8003524:	4b28      	ldr	r3, [pc, #160]	@ (80035c8 <menu+0x30c8>)
 8003526:	2201      	movs	r2, #1
 8003528:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800352a:	f000 f911 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)&&(calismaSayModu==1)) {
 800352e:	2108      	movs	r1, #8
 8003530:	4820      	ldr	r0, [pc, #128]	@ (80035b4 <menu+0x30b4>)
 8003532:	f003 ff7f 	bl	8007434 <HAL_GPIO_ReadPin>
 8003536:	4603      	mov	r3, r0
 8003538:	2b01      	cmp	r3, #1
 800353a:	d119      	bne.n	8003570 <menu+0x3070>
 800353c:	4b1e      	ldr	r3, [pc, #120]	@ (80035b8 <menu+0x30b8>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	f083 0301 	eor.w	r3, r3, #1
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d012      	beq.n	8003570 <menu+0x3070>
 800354a:	4b1f      	ldr	r3, [pc, #124]	@ (80035c8 <menu+0x30c8>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d10e      	bne.n	8003570 <menu+0x3070>
			eepromData[27] = 0;
 8003552:	4b1a      	ldr	r3, [pc, #104]	@ (80035bc <menu+0x30bc>)
 8003554:	2200      	movs	r2, #0
 8003556:	76da      	strb	r2, [r3, #27]
			eepromData[28] = 0;
 8003558:	4b18      	ldr	r3, [pc, #96]	@ (80035bc <menu+0x30bc>)
 800355a:	2200      	movs	r2, #0
 800355c:	771a      	strb	r2, [r3, #28]
			calismaSayisi = 0;
 800355e:	4b1d      	ldr	r3, [pc, #116]	@ (80035d4 <menu+0x30d4>)
 8003560:	2200      	movs	r2, #0
 8003562:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8003564:	4b18      	ldr	r3, [pc, #96]	@ (80035c8 <menu+0x30c8>)
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 800356a:	4b15      	ldr	r3, [pc, #84]	@ (80035c0 <menu+0x30c0>)
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003570:	4b14      	ldr	r3, [pc, #80]	@ (80035c4 <menu+0x30c4>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b1e      	cmp	r3, #30
 8003576:	f040 809b 	bne.w	80036b0 <menu+0x31b0>
		calismaSayModu = 0;
 800357a:	4b13      	ldr	r3, [pc, #76]	@ (80035c8 <menu+0x30c8>)
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8003580:	4b07      	ldr	r3, [pc, #28]	@ (80035a0 <menu+0x30a0>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d135      	bne.n	80035f4 <menu+0x30f4>
			lcd_print(1, 1, "DIL SECIMI      ");
 8003588:	4a18      	ldr	r2, [pc, #96]	@ (80035ec <menu+0x30ec>)
 800358a:	2101      	movs	r1, #1
 800358c:	2001      	movs	r0, #1
 800358e:	f7fc ff70 	bl	8000472 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8003592:	4a17      	ldr	r2, [pc, #92]	@ (80035f0 <menu+0x30f0>)
 8003594:	2101      	movs	r1, #1
 8003596:	2002      	movs	r0, #2
 8003598:	f7fc ff6b 	bl	8000472 <lcd_print>
 800359c:	e038      	b.n	8003610 <menu+0x3110>
 800359e:	bf00      	nop
 80035a0:	200000ea 	.word	0x200000ea
 80035a4:	08009f28 	.word	0x08009f28
 80035a8:	200000e8 	.word	0x200000e8
 80035ac:	08009f74 	.word	0x08009f74
 80035b0:	08009f88 	.word	0x08009f88
 80035b4:	40010800 	.word	0x40010800
 80035b8:	200000f8 	.word	0x200000f8
 80035bc:	20000060 	.word	0x20000060
 80035c0:	200000f5 	.word	0x200000f5
 80035c4:	200000ca 	.word	0x200000ca
 80035c8:	200000e9 	.word	0x200000e9
 80035cc:	0800a614 	.word	0x0800a614
 80035d0:	0800a628 	.word	0x0800a628
 80035d4:	200000c8 	.word	0x200000c8
 80035d8:	200000a0 	.word	0x200000a0
 80035dc:	0800a63c 	.word	0x0800a63c
 80035e0:	0800a648 	.word	0x0800a648
 80035e4:	0800a65c 	.word	0x0800a65c
 80035e8:	2000010a 	.word	0x2000010a
 80035ec:	0800a670 	.word	0x0800a670
 80035f0:	0800a684 	.word	0x0800a684
		} else if(dilSecim == 1) {
 80035f4:	4b49      	ldr	r3, [pc, #292]	@ (800371c <menu+0x321c>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d109      	bne.n	8003610 <menu+0x3110>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80035fc:	4a48      	ldr	r2, [pc, #288]	@ (8003720 <menu+0x3220>)
 80035fe:	2101      	movs	r1, #1
 8003600:	2001      	movs	r0, #1
 8003602:	f7fc ff36 	bl	8000472 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8003606:	4a47      	ldr	r2, [pc, #284]	@ (8003724 <menu+0x3224>)
 8003608:	2101      	movs	r1, #1
 800360a:	2002      	movs	r0, #2
 800360c:	f7fc ff31 	bl	8000472 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003610:	2102      	movs	r1, #2
 8003612:	4845      	ldr	r0, [pc, #276]	@ (8003728 <menu+0x3228>)
 8003614:	f003 ff0e 	bl	8007434 <HAL_GPIO_ReadPin>
 8003618:	4603      	mov	r3, r0
 800361a:	2b01      	cmp	r3, #1
 800361c:	d115      	bne.n	800364a <menu+0x314a>
 800361e:	4b43      	ldr	r3, [pc, #268]	@ (800372c <menu+0x322c>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	f083 0301 	eor.w	r3, r3, #1
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00e      	beq.n	800364a <menu+0x314a>
			dilSecim = dilSecim + 1;
 800362c:	4b3b      	ldr	r3, [pc, #236]	@ (800371c <menu+0x321c>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	3301      	adds	r3, #1
 8003632:	b2da      	uxtb	r2, r3
 8003634:	4b39      	ldr	r3, [pc, #228]	@ (800371c <menu+0x321c>)
 8003636:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003638:	4b38      	ldr	r3, [pc, #224]	@ (800371c <menu+0x321c>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d902      	bls.n	8003646 <menu+0x3146>
				dilSecim = 0;
 8003640:	4b36      	ldr	r3, [pc, #216]	@ (800371c <menu+0x321c>)
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003646:	f000 f883 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800364a:	2104      	movs	r1, #4
 800364c:	4836      	ldr	r0, [pc, #216]	@ (8003728 <menu+0x3228>)
 800364e:	f003 fef1 	bl	8007434 <HAL_GPIO_ReadPin>
 8003652:	4603      	mov	r3, r0
 8003654:	2b01      	cmp	r3, #1
 8003656:	d115      	bne.n	8003684 <menu+0x3184>
 8003658:	4b34      	ldr	r3, [pc, #208]	@ (800372c <menu+0x322c>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	f083 0301 	eor.w	r3, r3, #1
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00e      	beq.n	8003684 <menu+0x3184>
			dilSecim = dilSecim - 1;
 8003666:	4b2d      	ldr	r3, [pc, #180]	@ (800371c <menu+0x321c>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	3b01      	subs	r3, #1
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4b2b      	ldr	r3, [pc, #172]	@ (800371c <menu+0x321c>)
 8003670:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003672:	4b2a      	ldr	r3, [pc, #168]	@ (800371c <menu+0x321c>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <menu+0x3180>
		   		dilSecim = 1;
 800367a:	4b28      	ldr	r3, [pc, #160]	@ (800371c <menu+0x321c>)
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003680:	f000 f866 	bl	8003750 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003684:	2108      	movs	r1, #8
 8003686:	4828      	ldr	r0, [pc, #160]	@ (8003728 <menu+0x3228>)
 8003688:	f003 fed4 	bl	8007434 <HAL_GPIO_ReadPin>
 800368c:	4603      	mov	r3, r0
 800368e:	2b01      	cmp	r3, #1
 8003690:	d10e      	bne.n	80036b0 <menu+0x31b0>
 8003692:	4b26      	ldr	r3, [pc, #152]	@ (800372c <menu+0x322c>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	f083 0301 	eor.w	r3, r3, #1
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <menu+0x31b0>
			eepromData[33] = dilSecim;
 80036a0:	4b1e      	ldr	r3, [pc, #120]	@ (800371c <menu+0x321c>)
 80036a2:	781a      	ldrb	r2, [r3, #0]
 80036a4:	4b22      	ldr	r3, [pc, #136]	@ (8003730 <menu+0x3230>)
 80036a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 80036aa:	4b22      	ldr	r3, [pc, #136]	@ (8003734 <menu+0x3234>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80036b0:	4b21      	ldr	r3, [pc, #132]	@ (8003738 <menu+0x3238>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b1f      	cmp	r3, #31
 80036b6:	d12e      	bne.n	8003716 <menu+0x3216>
		if(dilSecim == 0) {
 80036b8:	4b18      	ldr	r3, [pc, #96]	@ (800371c <menu+0x321c>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <menu+0x31d6>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 80036c0:	4a1e      	ldr	r2, [pc, #120]	@ (800373c <menu+0x323c>)
 80036c2:	2101      	movs	r1, #1
 80036c4:	2001      	movs	r0, #1
 80036c6:	f7fc fed4 	bl	8000472 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 80036ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003740 <menu+0x3240>)
 80036cc:	2101      	movs	r1, #1
 80036ce:	2002      	movs	r0, #2
 80036d0:	f7fc fecf 	bl	8000472 <lcd_print>
 80036d4:	e00d      	b.n	80036f2 <menu+0x31f2>
		} else if(dilSecim == 1) {
 80036d6:	4b11      	ldr	r3, [pc, #68]	@ (800371c <menu+0x321c>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d109      	bne.n	80036f2 <menu+0x31f2>
			lcd_print(1, 1, " EXIT THE MENU  ");
 80036de:	4a19      	ldr	r2, [pc, #100]	@ (8003744 <menu+0x3244>)
 80036e0:	2101      	movs	r1, #1
 80036e2:	2001      	movs	r0, #1
 80036e4:	f7fc fec5 	bl	8000472 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 80036e8:	4a17      	ldr	r2, [pc, #92]	@ (8003748 <menu+0x3248>)
 80036ea:	2101      	movs	r1, #1
 80036ec:	2002      	movs	r0, #2
 80036ee:	f7fc fec0 	bl	8000472 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80036f2:	2108      	movs	r1, #8
 80036f4:	480c      	ldr	r0, [pc, #48]	@ (8003728 <menu+0x3228>)
 80036f6:	f003 fe9d 	bl	8007434 <HAL_GPIO_ReadPin>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d10a      	bne.n	8003716 <menu+0x3216>
			menuGiris = 0;
 8003700:	4b12      	ldr	r3, [pc, #72]	@ (800374c <menu+0x324c>)
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8003706:	f7fc fec9 	bl	800049c <lcd_clear>
			HAL_Delay(500);
 800370a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800370e:	f003 fa03 	bl	8006b18 <HAL_Delay>
			NVIC_SystemReset();
 8003712:	f7fc fedf 	bl	80004d4 <__NVIC_SystemReset>
		}
	}
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	200000ea 	.word	0x200000ea
 8003720:	0800a698 	.word	0x0800a698
 8003724:	0800a6ac 	.word	0x0800a6ac
 8003728:	40010800 	.word	0x40010800
 800372c:	200000f8 	.word	0x200000f8
 8003730:	20000060 	.word	0x20000060
 8003734:	200000f5 	.word	0x200000f5
 8003738:	200000ca 	.word	0x200000ca
 800373c:	0800a6c0 	.word	0x0800a6c0
 8003740:	0800a6d4 	.word	0x0800a6d4
 8003744:	0800a6e8 	.word	0x0800a6e8
 8003748:	0800a6fc 	.word	0x0800a6fc
 800374c:	200000e7 	.word	0x200000e7

08003750 <bekle>:
static void MX_CAN_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void bekle(void) {
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
	timer1=millis;
 8003754:	4b47      	ldr	r3, [pc, #284]	@ (8003874 <bekle+0x124>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a47      	ldr	r2, [pc, #284]	@ (8003878 <bekle+0x128>)
 800375a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800375c:	e002      	b.n	8003764 <bekle+0x14>
    	butonKontrol = 1;
 800375e:	4b47      	ldr	r3, [pc, #284]	@ (800387c <bekle+0x12c>)
 8003760:	2201      	movs	r2, #1
 8003762:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003764:	2101      	movs	r1, #1
 8003766:	4846      	ldr	r0, [pc, #280]	@ (8003880 <bekle+0x130>)
 8003768:	f003 fe64 	bl	8007434 <HAL_GPIO_ReadPin>
 800376c:	4603      	mov	r3, r0
 800376e:	2b01      	cmp	r3, #1
 8003770:	d109      	bne.n	8003786 <bekle+0x36>
 8003772:	4b40      	ldr	r3, [pc, #256]	@ (8003874 <bekle+0x124>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	4b40      	ldr	r3, [pc, #256]	@ (8003878 <bekle+0x128>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d0ef      	beq.n	800375e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800377e:	e002      	b.n	8003786 <bekle+0x36>
    	butonKontrol = 1;
 8003780:	4b3e      	ldr	r3, [pc, #248]	@ (800387c <bekle+0x12c>)
 8003782:	2201      	movs	r2, #1
 8003784:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003786:	2108      	movs	r1, #8
 8003788:	483e      	ldr	r0, [pc, #248]	@ (8003884 <bekle+0x134>)
 800378a:	f003 fe53 	bl	8007434 <HAL_GPIO_ReadPin>
 800378e:	4603      	mov	r3, r0
 8003790:	2b01      	cmp	r3, #1
 8003792:	d109      	bne.n	80037a8 <bekle+0x58>
 8003794:	4b37      	ldr	r3, [pc, #220]	@ (8003874 <bekle+0x124>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4b37      	ldr	r3, [pc, #220]	@ (8003878 <bekle+0x128>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d0ef      	beq.n	8003780 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80037a0:	e002      	b.n	80037a8 <bekle+0x58>
    	butonKontrol = 1;
 80037a2:	4b36      	ldr	r3, [pc, #216]	@ (800387c <bekle+0x12c>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80037a8:	2102      	movs	r1, #2
 80037aa:	4835      	ldr	r0, [pc, #212]	@ (8003880 <bekle+0x130>)
 80037ac:	f003 fe42 	bl	8007434 <HAL_GPIO_ReadPin>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d109      	bne.n	80037ca <bekle+0x7a>
 80037b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003874 <bekle+0x124>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003878 <bekle+0x128>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d0ef      	beq.n	80037a2 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80037c2:	e002      	b.n	80037ca <bekle+0x7a>
    	butonKontrol = 1;
 80037c4:	4b2d      	ldr	r3, [pc, #180]	@ (800387c <bekle+0x12c>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80037ca:	2104      	movs	r1, #4
 80037cc:	482c      	ldr	r0, [pc, #176]	@ (8003880 <bekle+0x130>)
 80037ce:	f003 fe31 	bl	8007434 <HAL_GPIO_ReadPin>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d109      	bne.n	80037ec <bekle+0x9c>
 80037d8:	4b26      	ldr	r3, [pc, #152]	@ (8003874 <bekle+0x124>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4b26      	ldr	r3, [pc, #152]	@ (8003878 <bekle+0x128>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d0ef      	beq.n	80037c4 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80037e4:	e002      	b.n	80037ec <bekle+0x9c>
    	butonKontrol = 1;
 80037e6:	4b25      	ldr	r3, [pc, #148]	@ (800387c <bekle+0x12c>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80037ec:	2108      	movs	r1, #8
 80037ee:	4824      	ldr	r0, [pc, #144]	@ (8003880 <bekle+0x130>)
 80037f0:	f003 fe20 	bl	8007434 <HAL_GPIO_ReadPin>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d109      	bne.n	800380e <bekle+0xbe>
 80037fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003874 <bekle+0x124>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003878 <bekle+0x128>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d0ef      	beq.n	80037e6 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003806:	e002      	b.n	800380e <bekle+0xbe>
    	butonKontrol = 1;
 8003808:	4b1c      	ldr	r3, [pc, #112]	@ (800387c <bekle+0x12c>)
 800380a:	2201      	movs	r2, #1
 800380c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800380e:	2180      	movs	r1, #128	@ 0x80
 8003810:	481c      	ldr	r0, [pc, #112]	@ (8003884 <bekle+0x134>)
 8003812:	f003 fe0f 	bl	8007434 <HAL_GPIO_ReadPin>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <bekle+0xe0>
 800381c:	4b15      	ldr	r3, [pc, #84]	@ (8003874 <bekle+0x124>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b15      	ldr	r3, [pc, #84]	@ (8003878 <bekle+0x128>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d0ef      	beq.n	8003808 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003828:	e002      	b.n	8003830 <bekle+0xe0>
    	butonKontrol = 1;
 800382a:	4b14      	ldr	r3, [pc, #80]	@ (800387c <bekle+0x12c>)
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003830:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003834:	4813      	ldr	r0, [pc, #76]	@ (8003884 <bekle+0x134>)
 8003836:	f003 fdfd 	bl	8007434 <HAL_GPIO_ReadPin>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d109      	bne.n	8003854 <bekle+0x104>
 8003840:	4b0c      	ldr	r3, [pc, #48]	@ (8003874 <bekle+0x124>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	4b0c      	ldr	r3, [pc, #48]	@ (8003878 <bekle+0x128>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d0ee      	beq.n	800382a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800384c:	e002      	b.n	8003854 <bekle+0x104>
    	butonKontrol = 1;
 800384e:	4b0b      	ldr	r3, [pc, #44]	@ (800387c <bekle+0x12c>)
 8003850:	2201      	movs	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003854:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003858:	480a      	ldr	r0, [pc, #40]	@ (8003884 <bekle+0x134>)
 800385a:	f003 fdeb 	bl	8007434 <HAL_GPIO_ReadPin>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d105      	bne.n	8003870 <bekle+0x120>
 8003864:	4b03      	ldr	r3, [pc, #12]	@ (8003874 <bekle+0x124>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4b03      	ldr	r3, [pc, #12]	@ (8003878 <bekle+0x128>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d0ee      	beq.n	800384e <bekle+0xfe>
    }

}
 8003870:	bf00      	nop
 8003872:	bd80      	pop	{r7, pc}
 8003874:	200000a8 	.word	0x200000a8
 8003878:	200000b0 	.word	0x200000b0
 800387c:	200000f8 	.word	0x200000f8
 8003880:	40010800 	.word	0x40010800
 8003884:	40011000 	.word	0x40011000

08003888 <lcdUpdate>:

void lcdUpdate(uint8_t y) {
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d105      	bne.n	80038a4 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003898:	4a22      	ldr	r2, [pc, #136]	@ (8003924 <lcdUpdate+0x9c>)
 800389a:	2101      	movs	r1, #1
 800389c:	2002      	movs	r0, #2
 800389e:	f7fc fde8 	bl	8000472 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "     ESP-XL     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 80038a2:	e03b      	b.n	800391c <lcdUpdate+0x94>
	} else if(y==2) {
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d105      	bne.n	80038b6 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80038aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003924 <lcdUpdate+0x9c>)
 80038ac:	2102      	movs	r1, #2
 80038ae:	2002      	movs	r0, #2
 80038b0:	f7fc fddf 	bl	8000472 <lcd_print>
}
 80038b4:	e032      	b.n	800391c <lcdUpdate+0x94>
	} else if(y==3) {
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d105      	bne.n	80038c8 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80038bc:	4a19      	ldr	r2, [pc, #100]	@ (8003924 <lcdUpdate+0x9c>)
 80038be:	2103      	movs	r1, #3
 80038c0:	2002      	movs	r0, #2
 80038c2:	f7fc fdd6 	bl	8000472 <lcd_print>
}
 80038c6:	e029      	b.n	800391c <lcdUpdate+0x94>
	} else if(y==4) {
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d105      	bne.n	80038da <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80038ce:	4a15      	ldr	r2, [pc, #84]	@ (8003924 <lcdUpdate+0x9c>)
 80038d0:	2104      	movs	r1, #4
 80038d2:	2002      	movs	r0, #2
 80038d4:	f7fc fdcd 	bl	8000472 <lcd_print>
}
 80038d8:	e020      	b.n	800391c <lcdUpdate+0x94>
	} else if(y==5) {
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	2b05      	cmp	r3, #5
 80038de:	d105      	bne.n	80038ec <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80038e0:	4a10      	ldr	r2, [pc, #64]	@ (8003924 <lcdUpdate+0x9c>)
 80038e2:	2105      	movs	r1, #5
 80038e4:	2002      	movs	r0, #2
 80038e6:	f7fc fdc4 	bl	8000472 <lcd_print>
}
 80038ea:	e017      	b.n	800391c <lcdUpdate+0x94>
	} else if(y==6) {
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	2b06      	cmp	r3, #6
 80038f0:	d105      	bne.n	80038fe <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80038f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003924 <lcdUpdate+0x9c>)
 80038f4:	2106      	movs	r1, #6
 80038f6:	2002      	movs	r0, #2
 80038f8:	f7fc fdbb 	bl	8000472 <lcd_print>
}
 80038fc:	e00e      	b.n	800391c <lcdUpdate+0x94>
	} else if (y==7) {
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	2b07      	cmp	r3, #7
 8003902:	d10b      	bne.n	800391c <lcdUpdate+0x94>
		lcd_clear();
 8003904:	f7fc fdca 	bl	800049c <lcd_clear>
		lcd_print(1, 1, "     ESP-XL     ");
 8003908:	4a07      	ldr	r2, [pc, #28]	@ (8003928 <lcdUpdate+0xa0>)
 800390a:	2101      	movs	r1, #1
 800390c:	2001      	movs	r0, #1
 800390e:	f7fc fdb0 	bl	8000472 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8003912:	4a06      	ldr	r2, [pc, #24]	@ (800392c <lcdUpdate+0xa4>)
 8003914:	2101      	movs	r1, #1
 8003916:	2002      	movs	r0, #2
 8003918:	f7fc fdab 	bl	8000472 <lcd_print>
}
 800391c:	bf00      	nop
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	08009e30 	.word	0x08009e30
 8003928:	0800a710 	.word	0x0800a710
 800392c:	0800a724 	.word	0x0800a724

08003930 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800393a:	2200      	movs	r2, #0
 800393c:	2102      	movs	r1, #2
 800393e:	4880      	ldr	r0, [pc, #512]	@ (8003b40 <hataKoduLcdGoster+0x210>)
 8003940:	f003 fd8f 	bl	8007462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8003944:	2200      	movs	r2, #0
 8003946:	2101      	movs	r1, #1
 8003948:	487d      	ldr	r0, [pc, #500]	@ (8003b40 <hataKoduLcdGoster+0x210>)
 800394a:	f003 fd8a 	bl	8007462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800394e:	2200      	movs	r2, #0
 8003950:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003954:	487a      	ldr	r0, [pc, #488]	@ (8003b40 <hataKoduLcdGoster+0x210>)
 8003956:	f003 fd84 	bl	8007462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800395a:	2200      	movs	r2, #0
 800395c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003960:	4877      	ldr	r0, [pc, #476]	@ (8003b40 <hataKoduLcdGoster+0x210>)
 8003962:	f003 fd7e 	bl	8007462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8003966:	2200      	movs	r2, #0
 8003968:	2104      	movs	r1, #4
 800396a:	4875      	ldr	r0, [pc, #468]	@ (8003b40 <hataKoduLcdGoster+0x210>)
 800396c:	f003 fd79 	bl	8007462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8003970:	2200      	movs	r2, #0
 8003972:	2120      	movs	r1, #32
 8003974:	4873      	ldr	r0, [pc, #460]	@ (8003b44 <hataKoduLcdGoster+0x214>)
 8003976:	f003 fd74 	bl	8007462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800397a:	2200      	movs	r2, #0
 800397c:	2110      	movs	r1, #16
 800397e:	4871      	ldr	r0, [pc, #452]	@ (8003b44 <hataKoduLcdGoster+0x214>)
 8003980:	f003 fd6f 	bl	8007462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8003984:	2200      	movs	r2, #0
 8003986:	2180      	movs	r1, #128	@ 0x80
 8003988:	486f      	ldr	r0, [pc, #444]	@ (8003b48 <hataKoduLcdGoster+0x218>)
 800398a:	f003 fd6a 	bl	8007462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800398e:	2200      	movs	r2, #0
 8003990:	2140      	movs	r1, #64	@ 0x40
 8003992:	486d      	ldr	r0, [pc, #436]	@ (8003b48 <hataKoduLcdGoster+0x218>)
 8003994:	f003 fd65 	bl	8007462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8003998:	2200      	movs	r2, #0
 800399a:	2120      	movs	r1, #32
 800399c:	486a      	ldr	r0, [pc, #424]	@ (8003b48 <hataKoduLcdGoster+0x218>)
 800399e:	f003 fd60 	bl	8007462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80039a2:	2200      	movs	r2, #0
 80039a4:	2110      	movs	r1, #16
 80039a6:	4868      	ldr	r0, [pc, #416]	@ (8003b48 <hataKoduLcdGoster+0x218>)
 80039a8:	f003 fd5b 	bl	8007462 <HAL_GPIO_WritePin>

	if(x==1) {
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d11d      	bne.n	80039ee <hataKoduLcdGoster+0xbe>
		if(dilSecim==0) {
 80039b2:	4b66      	ldr	r3, [pc, #408]	@ (8003b4c <hataKoduLcdGoster+0x21c>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d105      	bne.n	80039c6 <hataKoduLcdGoster+0x96>
			lcd_print(1, 1, "   HATA KODU    ");
 80039ba:	4a65      	ldr	r2, [pc, #404]	@ (8003b50 <hataKoduLcdGoster+0x220>)
 80039bc:	2101      	movs	r1, #1
 80039be:	2001      	movs	r0, #1
 80039c0:	f7fc fd57 	bl	8000472 <lcd_print>
 80039c4:	e008      	b.n	80039d8 <hataKoduLcdGoster+0xa8>
		} else if(dilSecim==1) {
 80039c6:	4b61      	ldr	r3, [pc, #388]	@ (8003b4c <hataKoduLcdGoster+0x21c>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d104      	bne.n	80039d8 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   ERROR CODE   ");
 80039ce:	4a61      	ldr	r2, [pc, #388]	@ (8003b54 <hataKoduLcdGoster+0x224>)
 80039d0:	2101      	movs	r1, #1
 80039d2:	2001      	movs	r0, #1
 80039d4:	f7fc fd4d 	bl	8000472 <lcd_print>
		}
		lcd_print(2, 1, "1");
 80039d8:	4a5f      	ldr	r2, [pc, #380]	@ (8003b58 <hataKoduLcdGoster+0x228>)
 80039da:	2101      	movs	r1, #1
 80039dc:	2002      	movs	r0, #2
 80039de:	f7fc fd48 	bl	8000472 <lcd_print>
		lcd_print(2, 7, "          ");
 80039e2:	4a5e      	ldr	r2, [pc, #376]	@ (8003b5c <hataKoduLcdGoster+0x22c>)
 80039e4:	2107      	movs	r1, #7
 80039e6:	2002      	movs	r0, #2
 80039e8:	f7fc fd43 	bl	8000472 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80039ec:	e0a3      	b.n	8003b36 <hataKoduLcdGoster+0x206>
	} else if(x==2){
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d11d      	bne.n	8003a30 <hataKoduLcdGoster+0x100>
		if(dilSecim==0){
 80039f4:	4b55      	ldr	r3, [pc, #340]	@ (8003b4c <hataKoduLcdGoster+0x21c>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d105      	bne.n	8003a08 <hataKoduLcdGoster+0xd8>
			lcd_print(1, 1, "   HATA KODU    ");
 80039fc:	4a54      	ldr	r2, [pc, #336]	@ (8003b50 <hataKoduLcdGoster+0x220>)
 80039fe:	2101      	movs	r1, #1
 8003a00:	2001      	movs	r0, #1
 8003a02:	f7fc fd36 	bl	8000472 <lcd_print>
 8003a06:	e008      	b.n	8003a1a <hataKoduLcdGoster+0xea>
		} else if(dilSecim==1) {
 8003a08:	4b50      	ldr	r3, [pc, #320]	@ (8003b4c <hataKoduLcdGoster+0x21c>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d104      	bne.n	8003a1a <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   ERROR CODE   ");
 8003a10:	4a50      	ldr	r2, [pc, #320]	@ (8003b54 <hataKoduLcdGoster+0x224>)
 8003a12:	2101      	movs	r1, #1
 8003a14:	2001      	movs	r0, #1
 8003a16:	f7fc fd2c 	bl	8000472 <lcd_print>
		lcd_print(2, 2, "2");
 8003a1a:	4a51      	ldr	r2, [pc, #324]	@ (8003b60 <hataKoduLcdGoster+0x230>)
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	2002      	movs	r0, #2
 8003a20:	f7fc fd27 	bl	8000472 <lcd_print>
		lcd_print(2, 7, "          ");
 8003a24:	4a4d      	ldr	r2, [pc, #308]	@ (8003b5c <hataKoduLcdGoster+0x22c>)
 8003a26:	2107      	movs	r1, #7
 8003a28:	2002      	movs	r0, #2
 8003a2a:	f7fc fd22 	bl	8000472 <lcd_print>
}
 8003a2e:	e082      	b.n	8003b36 <hataKoduLcdGoster+0x206>
	} else if(x==3) {
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d11d      	bne.n	8003a72 <hataKoduLcdGoster+0x142>
		if(dilSecim==0) {
 8003a36:	4b45      	ldr	r3, [pc, #276]	@ (8003b4c <hataKoduLcdGoster+0x21c>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d105      	bne.n	8003a4a <hataKoduLcdGoster+0x11a>
			lcd_print(1, 1, "   HATA KODU    ");
 8003a3e:	4a44      	ldr	r2, [pc, #272]	@ (8003b50 <hataKoduLcdGoster+0x220>)
 8003a40:	2101      	movs	r1, #1
 8003a42:	2001      	movs	r0, #1
 8003a44:	f7fc fd15 	bl	8000472 <lcd_print>
 8003a48:	e008      	b.n	8003a5c <hataKoduLcdGoster+0x12c>
		} else if(dilSecim==1) {
 8003a4a:	4b40      	ldr	r3, [pc, #256]	@ (8003b4c <hataKoduLcdGoster+0x21c>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d104      	bne.n	8003a5c <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   ERROR CODE   ");
 8003a52:	4a40      	ldr	r2, [pc, #256]	@ (8003b54 <hataKoduLcdGoster+0x224>)
 8003a54:	2101      	movs	r1, #1
 8003a56:	2001      	movs	r0, #1
 8003a58:	f7fc fd0b 	bl	8000472 <lcd_print>
		lcd_print(2, 3, "3");
 8003a5c:	4a41      	ldr	r2, [pc, #260]	@ (8003b64 <hataKoduLcdGoster+0x234>)
 8003a5e:	2103      	movs	r1, #3
 8003a60:	2002      	movs	r0, #2
 8003a62:	f7fc fd06 	bl	8000472 <lcd_print>
		lcd_print(2, 7, "          ");
 8003a66:	4a3d      	ldr	r2, [pc, #244]	@ (8003b5c <hataKoduLcdGoster+0x22c>)
 8003a68:	2107      	movs	r1, #7
 8003a6a:	2002      	movs	r0, #2
 8003a6c:	f7fc fd01 	bl	8000472 <lcd_print>
}
 8003a70:	e061      	b.n	8003b36 <hataKoduLcdGoster+0x206>
	} else if(x==4){
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d11d      	bne.n	8003ab4 <hataKoduLcdGoster+0x184>
		if(dilSecim==0) {
 8003a78:	4b34      	ldr	r3, [pc, #208]	@ (8003b4c <hataKoduLcdGoster+0x21c>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d105      	bne.n	8003a8c <hataKoduLcdGoster+0x15c>
			lcd_print(1, 1, "   HATA KODU    ");
 8003a80:	4a33      	ldr	r2, [pc, #204]	@ (8003b50 <hataKoduLcdGoster+0x220>)
 8003a82:	2101      	movs	r1, #1
 8003a84:	2001      	movs	r0, #1
 8003a86:	f7fc fcf4 	bl	8000472 <lcd_print>
 8003a8a:	e008      	b.n	8003a9e <hataKoduLcdGoster+0x16e>
		} else if(dilSecim==1) {
 8003a8c:	4b2f      	ldr	r3, [pc, #188]	@ (8003b4c <hataKoduLcdGoster+0x21c>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d104      	bne.n	8003a9e <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8003a94:	4a2f      	ldr	r2, [pc, #188]	@ (8003b54 <hataKoduLcdGoster+0x224>)
 8003a96:	2101      	movs	r1, #1
 8003a98:	2001      	movs	r0, #1
 8003a9a:	f7fc fcea 	bl	8000472 <lcd_print>
		lcd_print(2, 4, "4");
 8003a9e:	4a32      	ldr	r2, [pc, #200]	@ (8003b68 <hataKoduLcdGoster+0x238>)
 8003aa0:	2104      	movs	r1, #4
 8003aa2:	2002      	movs	r0, #2
 8003aa4:	f7fc fce5 	bl	8000472 <lcd_print>
		lcd_print(2, 7, "          ");
 8003aa8:	4a2c      	ldr	r2, [pc, #176]	@ (8003b5c <hataKoduLcdGoster+0x22c>)
 8003aaa:	2107      	movs	r1, #7
 8003aac:	2002      	movs	r0, #2
 8003aae:	f7fc fce0 	bl	8000472 <lcd_print>
}
 8003ab2:	e040      	b.n	8003b36 <hataKoduLcdGoster+0x206>
	} else if(x==5) {
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	2b05      	cmp	r3, #5
 8003ab8:	d11d      	bne.n	8003af6 <hataKoduLcdGoster+0x1c6>
		if(dilSecim==0) {
 8003aba:	4b24      	ldr	r3, [pc, #144]	@ (8003b4c <hataKoduLcdGoster+0x21c>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d105      	bne.n	8003ace <hataKoduLcdGoster+0x19e>
			lcd_print(1, 1, "   HATA KODU    ");
 8003ac2:	4a23      	ldr	r2, [pc, #140]	@ (8003b50 <hataKoduLcdGoster+0x220>)
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	f7fc fcd3 	bl	8000472 <lcd_print>
 8003acc:	e008      	b.n	8003ae0 <hataKoduLcdGoster+0x1b0>
		} else if(dilSecim==1) {
 8003ace:	4b1f      	ldr	r3, [pc, #124]	@ (8003b4c <hataKoduLcdGoster+0x21c>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d104      	bne.n	8003ae0 <hataKoduLcdGoster+0x1b0>
			lcd_print(1, 1, "   ERROR CODE   ");
 8003ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8003b54 <hataKoduLcdGoster+0x224>)
 8003ad8:	2101      	movs	r1, #1
 8003ada:	2001      	movs	r0, #1
 8003adc:	f7fc fcc9 	bl	8000472 <lcd_print>
		lcd_print(2, 5, "5");
 8003ae0:	4a22      	ldr	r2, [pc, #136]	@ (8003b6c <hataKoduLcdGoster+0x23c>)
 8003ae2:	2105      	movs	r1, #5
 8003ae4:	2002      	movs	r0, #2
 8003ae6:	f7fc fcc4 	bl	8000472 <lcd_print>
		lcd_print(2, 7, "          ");
 8003aea:	4a1c      	ldr	r2, [pc, #112]	@ (8003b5c <hataKoduLcdGoster+0x22c>)
 8003aec:	2107      	movs	r1, #7
 8003aee:	2002      	movs	r0, #2
 8003af0:	f7fc fcbf 	bl	8000472 <lcd_print>
}
 8003af4:	e01f      	b.n	8003b36 <hataKoduLcdGoster+0x206>
	} else if(x==6) {
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	2b06      	cmp	r3, #6
 8003afa:	d11c      	bne.n	8003b36 <hataKoduLcdGoster+0x206>
		if(dilSecim==0) {
 8003afc:	4b13      	ldr	r3, [pc, #76]	@ (8003b4c <hataKoduLcdGoster+0x21c>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d105      	bne.n	8003b10 <hataKoduLcdGoster+0x1e0>
			lcd_print(1, 1, "   HATA KODU    ");
 8003b04:	4a12      	ldr	r2, [pc, #72]	@ (8003b50 <hataKoduLcdGoster+0x220>)
 8003b06:	2101      	movs	r1, #1
 8003b08:	2001      	movs	r0, #1
 8003b0a:	f7fc fcb2 	bl	8000472 <lcd_print>
 8003b0e:	e008      	b.n	8003b22 <hataKoduLcdGoster+0x1f2>
		} else if(dilSecim==1) {
 8003b10:	4b0e      	ldr	r3, [pc, #56]	@ (8003b4c <hataKoduLcdGoster+0x21c>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d104      	bne.n	8003b22 <hataKoduLcdGoster+0x1f2>
			lcd_print(1, 1, "   ERROR CODE   ");
 8003b18:	4a0e      	ldr	r2, [pc, #56]	@ (8003b54 <hataKoduLcdGoster+0x224>)
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	f7fc fca8 	bl	8000472 <lcd_print>
		lcd_print(2, 6, "6");
 8003b22:	4a13      	ldr	r2, [pc, #76]	@ (8003b70 <hataKoduLcdGoster+0x240>)
 8003b24:	2106      	movs	r1, #6
 8003b26:	2002      	movs	r0, #2
 8003b28:	f7fc fca3 	bl	8000472 <lcd_print>
		lcd_print(2, 7, "          ");
 8003b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b5c <hataKoduLcdGoster+0x22c>)
 8003b2e:	2107      	movs	r1, #7
 8003b30:	2002      	movs	r0, #2
 8003b32:	f7fc fc9e 	bl	8000472 <lcd_print>
}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40010c00 	.word	0x40010c00
 8003b44:	40011000 	.word	0x40011000
 8003b48:	40010800 	.word	0x40010800
 8003b4c:	200000ea 	.word	0x200000ea
 8003b50:	0800a738 	.word	0x0800a738
 8003b54:	0800a74c 	.word	0x0800a74c
 8003b58:	0800a760 	.word	0x0800a760
 8003b5c:	0800a764 	.word	0x0800a764
 8003b60:	0800a770 	.word	0x0800a770
 8003b64:	0800a774 	.word	0x0800a774
 8003b68:	0800a778 	.word	0x0800a778
 8003b6c:	0800a77c 	.word	0x0800a77c
 8003b70:	0800a780 	.word	0x0800a780

08003b74 <eepromKontrol>:

void eepromKontrol(void) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8003b7a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003b7e:	9302      	str	r3, [sp, #8]
 8003b80:	233f      	movs	r3, #63	@ 0x3f
 8003b82:	9301      	str	r3, [sp, #4]
 8003b84:	4b9a      	ldr	r3, [pc, #616]	@ (8003df0 <eepromKontrol+0x27c>)
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	233f      	movs	r3, #63	@ 0x3f
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	21a0      	movs	r1, #160	@ 0xa0
 8003b8e:	4899      	ldr	r0, [pc, #612]	@ (8003df4 <eepromKontrol+0x280>)
 8003b90:	f004 f804 	bl	8007b9c <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8003b94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b98:	f002 ffbe 	bl	8006b18 <HAL_Delay>
	kaydedilenDeger = eepromData[3];
 8003b9c:	4b94      	ldr	r3, [pc, #592]	@ (8003df0 <eepromKontrol+0x27c>)
 8003b9e:	78da      	ldrb	r2, [r3, #3]
 8003ba0:	4b95      	ldr	r3, [pc, #596]	@ (8003df8 <eepromKontrol+0x284>)
 8003ba2:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8003ba4:	4b92      	ldr	r3, [pc, #584]	@ (8003df0 <eepromKontrol+0x27c>)
 8003ba6:	785a      	ldrb	r2, [r3, #1]
 8003ba8:	4b94      	ldr	r3, [pc, #592]	@ (8003dfc <eepromKontrol+0x288>)
 8003baa:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8003bac:	4b90      	ldr	r3, [pc, #576]	@ (8003df0 <eepromKontrol+0x27c>)
 8003bae:	789a      	ldrb	r2, [r3, #2]
 8003bb0:	4b93      	ldr	r3, [pc, #588]	@ (8003e00 <eepromKontrol+0x28c>)
 8003bb2:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8003bb4:	4b8e      	ldr	r3, [pc, #568]	@ (8003df0 <eepromKontrol+0x27c>)
 8003bb6:	791a      	ldrb	r2, [r3, #4]
 8003bb8:	4b92      	ldr	r3, [pc, #584]	@ (8003e04 <eepromKontrol+0x290>)
 8003bba:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8003bbc:	4b8c      	ldr	r3, [pc, #560]	@ (8003df0 <eepromKontrol+0x27c>)
 8003bbe:	795a      	ldrb	r2, [r3, #5]
 8003bc0:	4b91      	ldr	r3, [pc, #580]	@ (8003e08 <eepromKontrol+0x294>)
 8003bc2:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8003bc4:	4b8a      	ldr	r3, [pc, #552]	@ (8003df0 <eepromKontrol+0x27c>)
 8003bc6:	799a      	ldrb	r2, [r3, #6]
 8003bc8:	4b90      	ldr	r3, [pc, #576]	@ (8003e0c <eepromKontrol+0x298>)
 8003bca:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8003bcc:	4b88      	ldr	r3, [pc, #544]	@ (8003df0 <eepromKontrol+0x27c>)
 8003bce:	79da      	ldrb	r2, [r3, #7]
 8003bd0:	4b8f      	ldr	r3, [pc, #572]	@ (8003e10 <eepromKontrol+0x29c>)
 8003bd2:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8003bd4:	4b86      	ldr	r3, [pc, #536]	@ (8003df0 <eepromKontrol+0x27c>)
 8003bd6:	7a1a      	ldrb	r2, [r3, #8]
 8003bd8:	4b8e      	ldr	r3, [pc, #568]	@ (8003e14 <eepromKontrol+0x2a0>)
 8003bda:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8003bdc:	4b84      	ldr	r3, [pc, #528]	@ (8003df0 <eepromKontrol+0x27c>)
 8003bde:	7a5a      	ldrb	r2, [r3, #9]
 8003be0:	4b8d      	ldr	r3, [pc, #564]	@ (8003e18 <eepromKontrol+0x2a4>)
 8003be2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8003be4:	4b82      	ldr	r3, [pc, #520]	@ (8003df0 <eepromKontrol+0x27c>)
 8003be6:	7a9a      	ldrb	r2, [r3, #10]
 8003be8:	4b8c      	ldr	r3, [pc, #560]	@ (8003e1c <eepromKontrol+0x2a8>)
 8003bea:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8003bec:	4b80      	ldr	r3, [pc, #512]	@ (8003df0 <eepromKontrol+0x27c>)
 8003bee:	7ada      	ldrb	r2, [r3, #11]
 8003bf0:	4b8b      	ldr	r3, [pc, #556]	@ (8003e20 <eepromKontrol+0x2ac>)
 8003bf2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8003bf4:	4b7e      	ldr	r3, [pc, #504]	@ (8003df0 <eepromKontrol+0x27c>)
 8003bf6:	7b1a      	ldrb	r2, [r3, #12]
 8003bf8:	4b8a      	ldr	r3, [pc, #552]	@ (8003e24 <eepromKontrol+0x2b0>)
 8003bfa:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8003bfc:	4b7c      	ldr	r3, [pc, #496]	@ (8003df0 <eepromKontrol+0x27c>)
 8003bfe:	7b5a      	ldrb	r2, [r3, #13]
 8003c00:	4b89      	ldr	r3, [pc, #548]	@ (8003e28 <eepromKontrol+0x2b4>)
 8003c02:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8003c04:	4b7a      	ldr	r3, [pc, #488]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c06:	7b9a      	ldrb	r2, [r3, #14]
 8003c08:	4b88      	ldr	r3, [pc, #544]	@ (8003e2c <eepromKontrol+0x2b8>)
 8003c0a:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8003c0c:	4b78      	ldr	r3, [pc, #480]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c0e:	7bda      	ldrb	r2, [r3, #15]
 8003c10:	4b87      	ldr	r3, [pc, #540]	@ (8003e30 <eepromKontrol+0x2bc>)
 8003c12:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8003c14:	4b76      	ldr	r3, [pc, #472]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c16:	7c1a      	ldrb	r2, [r3, #16]
 8003c18:	4b86      	ldr	r3, [pc, #536]	@ (8003e34 <eepromKontrol+0x2c0>)
 8003c1a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8003c1c:	4b74      	ldr	r3, [pc, #464]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c1e:	7c5a      	ldrb	r2, [r3, #17]
 8003c20:	4b85      	ldr	r3, [pc, #532]	@ (8003e38 <eepromKontrol+0x2c4>)
 8003c22:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8003c24:	4b72      	ldr	r3, [pc, #456]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c26:	7c9a      	ldrb	r2, [r3, #18]
 8003c28:	4b84      	ldr	r3, [pc, #528]	@ (8003e3c <eepromKontrol+0x2c8>)
 8003c2a:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8003c2c:	4b70      	ldr	r3, [pc, #448]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c2e:	7cda      	ldrb	r2, [r3, #19]
 8003c30:	4b83      	ldr	r3, [pc, #524]	@ (8003e40 <eepromKontrol+0x2cc>)
 8003c32:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8003c34:	4b6e      	ldr	r3, [pc, #440]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c36:	7d1a      	ldrb	r2, [r3, #20]
 8003c38:	4b82      	ldr	r3, [pc, #520]	@ (8003e44 <eepromKontrol+0x2d0>)
 8003c3a:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8003c3c:	4b6c      	ldr	r3, [pc, #432]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c3e:	7d5a      	ldrb	r2, [r3, #21]
 8003c40:	4b81      	ldr	r3, [pc, #516]	@ (8003e48 <eepromKontrol+0x2d4>)
 8003c42:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8003c44:	4b6a      	ldr	r3, [pc, #424]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c46:	7d9a      	ldrb	r2, [r3, #22]
 8003c48:	4b80      	ldr	r3, [pc, #512]	@ (8003e4c <eepromKontrol+0x2d8>)
 8003c4a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8003c4c:	4b68      	ldr	r3, [pc, #416]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c4e:	7dda      	ldrb	r2, [r3, #23]
 8003c50:	4b7f      	ldr	r3, [pc, #508]	@ (8003e50 <eepromKontrol+0x2dc>)
 8003c52:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8003c54:	4b66      	ldr	r3, [pc, #408]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c56:	7e1a      	ldrb	r2, [r3, #24]
 8003c58:	4b7e      	ldr	r3, [pc, #504]	@ (8003e54 <eepromKontrol+0x2e0>)
 8003c5a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8003c5c:	4b64      	ldr	r3, [pc, #400]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c5e:	7e5a      	ldrb	r2, [r3, #25]
 8003c60:	4b7d      	ldr	r3, [pc, #500]	@ (8003e58 <eepromKontrol+0x2e4>)
 8003c62:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8003c64:	4b62      	ldr	r3, [pc, #392]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c66:	7e9a      	ldrb	r2, [r3, #26]
 8003c68:	4b7c      	ldr	r3, [pc, #496]	@ (8003e5c <eepromKontrol+0x2e8>)
 8003c6a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8003c6c:	4b60      	ldr	r3, [pc, #384]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c6e:	7eda      	ldrb	r2, [r3, #27]
 8003c70:	4b7b      	ldr	r3, [pc, #492]	@ (8003e60 <eepromKontrol+0x2ec>)
 8003c72:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[28];
 8003c74:	4b5e      	ldr	r3, [pc, #376]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c76:	7f1a      	ldrb	r2, [r3, #28]
 8003c78:	4b79      	ldr	r3, [pc, #484]	@ (8003e60 <eepromKontrol+0x2ec>)
 8003c7a:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8003c7c:	4b5c      	ldr	r3, [pc, #368]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c7e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8003c82:	4b78      	ldr	r3, [pc, #480]	@ (8003e64 <eepromKontrol+0x2f0>)
 8003c84:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8003c86:	4b5a      	ldr	r3, [pc, #360]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c88:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8003c8c:	4b76      	ldr	r3, [pc, #472]	@ (8003e68 <eepromKontrol+0x2f4>)
 8003c8e:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8003c90:	4b57      	ldr	r3, [pc, #348]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c92:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8003c96:	4b75      	ldr	r3, [pc, #468]	@ (8003e6c <eepromKontrol+0x2f8>)
 8003c98:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8003c9a:	4b55      	ldr	r3, [pc, #340]	@ (8003df0 <eepromKontrol+0x27c>)
 8003c9c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8003ca0:	4b73      	ldr	r3, [pc, #460]	@ (8003e70 <eepromKontrol+0x2fc>)
 8003ca2:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[37];
 8003ca4:	4b52      	ldr	r3, [pc, #328]	@ (8003df0 <eepromKontrol+0x27c>)
 8003ca6:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8003caa:	4b72      	ldr	r3, [pc, #456]	@ (8003e74 <eepromKontrol+0x300>)
 8003cac:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[38];
 8003cae:	4b50      	ldr	r3, [pc, #320]	@ (8003df0 <eepromKontrol+0x27c>)
 8003cb0:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8003cb4:	4b70      	ldr	r3, [pc, #448]	@ (8003e78 <eepromKontrol+0x304>)
 8003cb6:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[39];
 8003cb8:	4b4d      	ldr	r3, [pc, #308]	@ (8003df0 <eepromKontrol+0x27c>)
 8003cba:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8003cbe:	4b6f      	ldr	r3, [pc, #444]	@ (8003e7c <eepromKontrol+0x308>)
 8003cc0:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[40];
 8003cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8003df0 <eepromKontrol+0x27c>)
 8003cc4:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8003cc8:	4b6d      	ldr	r3, [pc, #436]	@ (8003e80 <eepromKontrol+0x30c>)
 8003cca:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[41];
 8003ccc:	4b48      	ldr	r3, [pc, #288]	@ (8003df0 <eepromKontrol+0x27c>)
 8003cce:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8003cd2:	4b6c      	ldr	r3, [pc, #432]	@ (8003e84 <eepromKontrol+0x310>)
 8003cd4:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[42];
 8003cd6:	4b46      	ldr	r3, [pc, #280]	@ (8003df0 <eepromKontrol+0x27c>)
 8003cd8:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8003cdc:	4b6a      	ldr	r3, [pc, #424]	@ (8003e88 <eepromKontrol+0x314>)
 8003cde:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[43];
 8003ce0:	4b43      	ldr	r3, [pc, #268]	@ (8003df0 <eepromKontrol+0x27c>)
 8003ce2:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8003ce6:	4b69      	ldr	r3, [pc, #420]	@ (8003e8c <eepromKontrol+0x318>)
 8003ce8:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[44];
 8003cea:	4b41      	ldr	r3, [pc, #260]	@ (8003df0 <eepromKontrol+0x27c>)
 8003cec:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003cf0:	4b67      	ldr	r3, [pc, #412]	@ (8003e90 <eepromKontrol+0x31c>)
 8003cf2:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[45];
 8003cf4:	4b3e      	ldr	r3, [pc, #248]	@ (8003df0 <eepromKontrol+0x27c>)
 8003cf6:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8003cfa:	4b66      	ldr	r3, [pc, #408]	@ (8003e94 <eepromKontrol+0x320>)
 8003cfc:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[46];
 8003cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8003df0 <eepromKontrol+0x27c>)
 8003d00:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8003d04:	4b64      	ldr	r3, [pc, #400]	@ (8003e98 <eepromKontrol+0x324>)
 8003d06:	701a      	strb	r2, [r3, #0]
/*
	if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8003d08:	4b3c      	ldr	r3, [pc, #240]	@ (8003dfc <eepromKontrol+0x288>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d902      	bls.n	8003d16 <eepromKontrol+0x1a2>
	    calismaSekli=0;
 8003d10:	4b3a      	ldr	r3, [pc, #232]	@ (8003dfc <eepromKontrol+0x288>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8003d16:	4b3a      	ldr	r3, [pc, #232]	@ (8003e00 <eepromKontrol+0x28c>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d902      	bls.n	8003d24 <eepromKontrol+0x1b0>
	    emniyetCercevesi=1;
 8003d1e:	4b38      	ldr	r3, [pc, #224]	@ (8003e00 <eepromKontrol+0x28c>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8003d24:	4b37      	ldr	r3, [pc, #220]	@ (8003e04 <eepromKontrol+0x290>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d902      	bls.n	8003d32 <eepromKontrol+0x1be>
	    yavaslamaLimit=0;
 8003d2c:	4b35      	ldr	r3, [pc, #212]	@ (8003e04 <eepromKontrol+0x290>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8003d32:	4b35      	ldr	r3, [pc, #212]	@ (8003e08 <eepromKontrol+0x294>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d902      	bls.n	8003d40 <eepromKontrol+0x1cc>
	    altLimit=1;
 8003d3a:	4b33      	ldr	r3, [pc, #204]	@ (8003e08 <eepromKontrol+0x294>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8003d40:	4b32      	ldr	r3, [pc, #200]	@ (8003e0c <eepromKontrol+0x298>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d902      	bls.n	8003d4e <eepromKontrol+0x1da>
	    basincSalteri=1;
 8003d48:	4b30      	ldr	r3, [pc, #192]	@ (8003e0c <eepromKontrol+0x298>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8003d4e:	4b30      	ldr	r3, [pc, #192]	@ (8003e10 <eepromKontrol+0x29c>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d902      	bls.n	8003d5c <eepromKontrol+0x1e8>
	    kapiSecimleri=3;
 8003d56:	4b2e      	ldr	r3, [pc, #184]	@ (8003e10 <eepromKontrol+0x29c>)
 8003d58:	2203      	movs	r2, #3
 8003d5a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8003d5c:	4b44      	ldr	r3, [pc, #272]	@ (8003e70 <eepromKontrol+0x2fc>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d902      	bls.n	8003d6a <eepromKontrol+0x1f6>
	    kapiAcTipi=0;
 8003d64:	4b42      	ldr	r3, [pc, #264]	@ (8003e70 <eepromKontrol+0x2fc>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8003d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8003e14 <eepromKontrol+0x2a0>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d902      	bls.n	8003d78 <eepromKontrol+0x204>
	    kapi1Tip=1;
 8003d72:	4b28      	ldr	r3, [pc, #160]	@ (8003e14 <eepromKontrol+0x2a0>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8003d78:	4b27      	ldr	r3, [pc, #156]	@ (8003e18 <eepromKontrol+0x2a4>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b05      	cmp	r3, #5
 8003d7e:	d902      	bls.n	8003d86 <eepromKontrol+0x212>
	    kapi1AcSure=5;
 8003d80:	4b25      	ldr	r3, [pc, #148]	@ (8003e18 <eepromKontrol+0x2a4>)
 8003d82:	2205      	movs	r2, #5
 8003d84:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8003d86:	4b25      	ldr	r3, [pc, #148]	@ (8003e1c <eepromKontrol+0x2a8>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d902      	bls.n	8003d94 <eepromKontrol+0x220>
	    kapi2Tip=1;
 8003d8e:	4b23      	ldr	r3, [pc, #140]	@ (8003e1c <eepromKontrol+0x2a8>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8003d94:	4b22      	ldr	r3, [pc, #136]	@ (8003e20 <eepromKontrol+0x2ac>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b05      	cmp	r3, #5
 8003d9a:	d902      	bls.n	8003da2 <eepromKontrol+0x22e>
	    kapi2AcSure=5;
 8003d9c:	4b20      	ldr	r3, [pc, #128]	@ (8003e20 <eepromKontrol+0x2ac>)
 8003d9e:	2205      	movs	r2, #5
 8003da0:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8003da2:	4b20      	ldr	r3, [pc, #128]	@ (8003e24 <eepromKontrol+0x2b0>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d902      	bls.n	8003db0 <eepromKontrol+0x23c>
	    kapitablaTip=1;
 8003daa:	4b1e      	ldr	r3, [pc, #120]	@ (8003e24 <eepromKontrol+0x2b0>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>3) {
 8003db0:	4b2d      	ldr	r3, [pc, #180]	@ (8003e68 <eepromKontrol+0x2f4>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d902      	bls.n	8003dbe <eepromKontrol+0x24a>
	    kapiTablaAcKonum=3;
 8003db8:	4b2b      	ldr	r3, [pc, #172]	@ (8003e68 <eepromKontrol+0x2f4>)
 8003dba:	2203      	movs	r2, #3
 8003dbc:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8003dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8003e28 <eepromKontrol+0x2b4>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b05      	cmp	r3, #5
 8003dc4:	d902      	bls.n	8003dcc <eepromKontrol+0x258>
	    kapiTablaAcSure=5;
 8003dc6:	4b18      	ldr	r3, [pc, #96]	@ (8003e28 <eepromKontrol+0x2b4>)
 8003dc8:	2205      	movs	r2, #5
 8003dca:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8003dcc:	4b17      	ldr	r3, [pc, #92]	@ (8003e2c <eepromKontrol+0x2b8>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d902      	bls.n	8003dda <eepromKontrol+0x266>
	    yukariYavasLimit=0;
 8003dd4:	4b15      	ldr	r3, [pc, #84]	@ (8003e2c <eepromKontrol+0x2b8>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8003dda:	4b15      	ldr	r3, [pc, #84]	@ (8003e30 <eepromKontrol+0x2bc>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d902      	bls.n	8003de8 <eepromKontrol+0x274>
	    devirmeYuruyusSecim=0;
 8003de2:	4b13      	ldr	r3, [pc, #76]	@ (8003e30 <eepromKontrol+0x2bc>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8003de8:	4b12      	ldr	r3, [pc, #72]	@ (8003e34 <eepromKontrol+0x2c0>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	e055      	b.n	8003e9c <eepromKontrol+0x328>
 8003df0:	20000060 	.word	0x20000060
 8003df4:	20000158 	.word	0x20000158
 8003df8:	2000009f 	.word	0x2000009f
 8003dfc:	200000cb 	.word	0x200000cb
 8003e00:	200000ce 	.word	0x200000ce
 8003e04:	200000cf 	.word	0x200000cf
 8003e08:	200000d0 	.word	0x200000d0
 8003e0c:	200000d1 	.word	0x200000d1
 8003e10:	200000d2 	.word	0x200000d2
 8003e14:	200000d3 	.word	0x200000d3
 8003e18:	200000e3 	.word	0x200000e3
 8003e1c:	200000d4 	.word	0x200000d4
 8003e20:	200000e4 	.word	0x200000e4
 8003e24:	200000d5 	.word	0x200000d5
 8003e28:	200000e5 	.word	0x200000e5
 8003e2c:	200000d8 	.word	0x200000d8
 8003e30:	200000d9 	.word	0x200000d9
 8003e34:	200000da 	.word	0x200000da
 8003e38:	200000db 	.word	0x200000db
 8003e3c:	200000dc 	.word	0x200000dc
 8003e40:	200000dd 	.word	0x200000dd
 8003e44:	200000de 	.word	0x200000de
 8003e48:	200000df 	.word	0x200000df
 8003e4c:	200000e0 	.word	0x200000e0
 8003e50:	200000e1 	.word	0x200000e1
 8003e54:	200000e2 	.word	0x200000e2
 8003e58:	200000e6 	.word	0x200000e6
 8003e5c:	200000e8 	.word	0x200000e8
 8003e60:	200000c8 	.word	0x200000c8
 8003e64:	200000ea 	.word	0x200000ea
 8003e68:	200000d7 	.word	0x200000d7
 8003e6c:	200000e9 	.word	0x200000e9
 8003e70:	200000d6 	.word	0x200000d6
 8003e74:	200000eb 	.word	0x200000eb
 8003e78:	200000ec 	.word	0x200000ec
 8003e7c:	200000ed 	.word	0x200000ed
 8003e80:	200000ee 	.word	0x200000ee
 8003e84:	200000ef 	.word	0x200000ef
 8003e88:	200000f0 	.word	0x200000f0
 8003e8c:	200000f1 	.word	0x200000f1
 8003e90:	200000f2 	.word	0x200000f2
 8003e94:	200000f3 	.word	0x200000f3
 8003e98:	200000f4 	.word	0x200000f4
 8003e9c:	d902      	bls.n	8003ea4 <eepromKontrol+0x330>
	    devirmeYukariIleriLimit=1;
 8003e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8003f5c <eepromKontrol+0x3e8>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8003ea4:	4b2e      	ldr	r3, [pc, #184]	@ (8003f60 <eepromKontrol+0x3ec>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d902      	bls.n	8003eb2 <eepromKontrol+0x33e>
	    devirmeAsagiGeriLimit=1;
 8003eac:	4b2c      	ldr	r3, [pc, #176]	@ (8003f60 <eepromKontrol+0x3ec>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8003eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8003f64 <eepromKontrol+0x3f0>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d902      	bls.n	8003ec0 <eepromKontrol+0x34c>
	    devirmeSilindirTipi=0;
 8003eba:	4b2a      	ldr	r3, [pc, #168]	@ (8003f64 <eepromKontrol+0x3f0>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8003ec0:	4b29      	ldr	r3, [pc, #164]	@ (8003f68 <eepromKontrol+0x3f4>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d902      	bls.n	8003ece <eepromKontrol+0x35a>
	    platformSilindirTipi=0;
 8003ec8:	4b27      	ldr	r3, [pc, #156]	@ (8003f68 <eepromKontrol+0x3f4>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8003ece:	4b27      	ldr	r3, [pc, #156]	@ (8003f6c <eepromKontrol+0x3f8>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	2b05      	cmp	r3, #5
 8003ed4:	d902      	bls.n	8003edc <eepromKontrol+0x368>
	    yukariValfTmr=0;
 8003ed6:	4b25      	ldr	r3, [pc, #148]	@ (8003f6c <eepromKontrol+0x3f8>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8003edc:	4b24      	ldr	r3, [pc, #144]	@ (8003f70 <eepromKontrol+0x3fc>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b05      	cmp	r3, #5
 8003ee2:	d902      	bls.n	8003eea <eepromKontrol+0x376>
	    asagiValfTmr=0;
 8003ee4:	4b22      	ldr	r3, [pc, #136]	@ (8003f70 <eepromKontrol+0x3fc>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8003eea:	4b22      	ldr	r3, [pc, #136]	@ (8003f74 <eepromKontrol+0x400>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b05      	cmp	r3, #5
 8003ef0:	d902      	bls.n	8003ef8 <eepromKontrol+0x384>
	    devirmeYukariIleriTmr=0;
 8003ef2:	4b20      	ldr	r3, [pc, #128]	@ (8003f74 <eepromKontrol+0x400>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8003ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8003f78 <eepromKontrol+0x404>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b05      	cmp	r3, #5
 8003efe:	d902      	bls.n	8003f06 <eepromKontrol+0x392>
	    devirmeAsagiGeriTmr=0;
 8003f00:	4b1d      	ldr	r3, [pc, #116]	@ (8003f78 <eepromKontrol+0x404>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8003f06:	4b1d      	ldr	r3, [pc, #116]	@ (8003f7c <eepromKontrol+0x408>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2bb4      	cmp	r3, #180	@ 0xb4
 8003f0c:	d902      	bls.n	8003f14 <eepromKontrol+0x3a0>
	    makineCalismaTmr=60;
 8003f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003f7c <eepromKontrol+0x408>)
 8003f10:	223c      	movs	r2, #60	@ 0x3c
 8003f12:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8003f14:	4b1a      	ldr	r3, [pc, #104]	@ (8003f80 <eepromKontrol+0x40c>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d902      	bls.n	8003f22 <eepromKontrol+0x3ae>
	    buzzer=0;
 8003f1c:	4b18      	ldr	r3, [pc, #96]	@ (8003f80 <eepromKontrol+0x40c>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8003f22:	4b18      	ldr	r3, [pc, #96]	@ (8003f84 <eepromKontrol+0x410>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d902      	bls.n	8003f30 <eepromKontrol+0x3bc>
	    demoMode=0;
 8003f2a:	4b16      	ldr	r3, [pc, #88]	@ (8003f84 <eepromKontrol+0x410>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8003f30:	4b15      	ldr	r3, [pc, #84]	@ (8003f88 <eepromKontrol+0x414>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d902      	bls.n	8003f3e <eepromKontrol+0x3ca>
	    calismaSayModu=0;
 8003f38:	4b13      	ldr	r3, [pc, #76]	@ (8003f88 <eepromKontrol+0x414>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8003f3e:	4b13      	ldr	r3, [pc, #76]	@ (8003f8c <eepromKontrol+0x418>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d902      	bls.n	8003f4c <eepromKontrol+0x3d8>
	    dilSecim=0;
 8003f46:	4b11      	ldr	r3, [pc, #68]	@ (8003f8c <eepromKontrol+0x418>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8003f4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003f50:	f002 fde2 	bl	8006b18 <HAL_Delay>
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	200000da 	.word	0x200000da
 8003f60:	200000db 	.word	0x200000db
 8003f64:	200000dc 	.word	0x200000dc
 8003f68:	200000dd 	.word	0x200000dd
 8003f6c:	200000de 	.word	0x200000de
 8003f70:	200000df 	.word	0x200000df
 8003f74:	200000e0 	.word	0x200000e0
 8003f78:	200000e1 	.word	0x200000e1
 8003f7c:	200000e2 	.word	0x200000e2
 8003f80:	200000e6 	.word	0x200000e6
 8003f84:	200000e8 	.word	0x200000e8
 8003f88:	200000e9 	.word	0x200000e9
 8003f8c:	200000ea 	.word	0x200000ea

08003f90 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	b089      	sub	sp, #36	@ 0x24
 8003f94:	af04      	add	r7, sp, #16
 8003f96:	4603      	mov	r3, r0
 8003f98:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8003f9a:	4b25      	ldr	r3, [pc, #148]	@ (8004030 <hata2EEPROM+0xa0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	1e5a      	subs	r2, r3, #1
 8003fa0:	4b24      	ldr	r3, [pc, #144]	@ (8004034 <hata2EEPROM+0xa4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	4a24      	ldr	r2, [pc, #144]	@ (8004038 <hata2EEPROM+0xa8>)
 8003fa8:	5cd3      	ldrb	r3, [r2, r3]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8003fae:	f000 f847 	bl	8004040 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8003fb2:	e000      	b.n	8003fb6 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8003fb4:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	e012      	b.n	8003fe2 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8003fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8004034 <hata2EEPROM+0xa4>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8004038 <hata2EEPROM+0xa8>)
 8003fc6:	5cd3      	ldrb	r3, [r2, r3]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d107      	bne.n	8003fdc <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8003fcc:	4b19      	ldr	r3, [pc, #100]	@ (8004034 <hata2EEPROM+0xa4>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	4918      	ldr	r1, [pc, #96]	@ (8004038 <hata2EEPROM+0xa8>)
 8003fd6:	79fa      	ldrb	r2, [r7, #7]
 8003fd8:	54ca      	strb	r2, [r1, r3]
					break;
 8003fda:	e007      	b.n	8003fec <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	4b13      	ldr	r3, [pc, #76]	@ (8004030 <hata2EEPROM+0xa0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	dbe7      	blt.n	8003fbc <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 8003fec:	4b11      	ldr	r3, [pc, #68]	@ (8004034 <hata2EEPROM+0xa4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	b299      	uxth	r1, r3
 8003ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8004030 <hata2EEPROM+0xa0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	b298      	uxth	r0, r3
 8003ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8004034 <hata2EEPROM+0xa4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a0e      	ldr	r2, [pc, #56]	@ (8004038 <hata2EEPROM+0xa8>)
 8003ffe:	4413      	add	r3, r2
 8004000:	4a0b      	ldr	r2, [pc, #44]	@ (8004030 <hata2EEPROM+0xa0>)
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	b292      	uxth	r2, r2
 8004006:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 800400a:	9402      	str	r4, [sp, #8]
 800400c:	9201      	str	r2, [sp, #4]
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	4603      	mov	r3, r0
 8004012:	460a      	mov	r2, r1
 8004014:	21a0      	movs	r1, #160	@ 0xa0
 8004016:	4809      	ldr	r0, [pc, #36]	@ (800403c <hata2EEPROM+0xac>)
 8004018:	f003 fcc6 	bl	80079a8 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 800401c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004020:	f002 fd7a 	bl	8006b18 <HAL_Delay>
	eepromKontrol();
 8004024:	f7ff fda6 	bl	8003b74 <eepromKontrol>
}
 8004028:	bf00      	nop
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	bd90      	pop	{r4, r7, pc}
 8004030:	20000028 	.word	0x20000028
 8004034:	2000002c 	.word	0x2000002c
 8004038:	20000060 	.word	0x20000060
 800403c:	20000158 	.word	0x20000158

08004040 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8004046:	2300      	movs	r3, #0
 8004048:	607b      	str	r3, [r7, #4]
 800404a:	e009      	b.n	8004060 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 800404c:	4a0a      	ldr	r2, [pc, #40]	@ (8004078 <eepromDataFillWithEmpty+0x38>)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004054:	4a09      	ldr	r2, [pc, #36]	@ (800407c <eepromDataFillWithEmpty+0x3c>)
 8004056:	2100      	movs	r1, #0
 8004058:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3301      	adds	r3, #1
 800405e:	607b      	str	r3, [r7, #4]
 8004060:	4b07      	ldr	r3, [pc, #28]	@ (8004080 <eepromDataFillWithEmpty+0x40>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	429a      	cmp	r2, r3
 8004068:	dbf0      	blt.n	800404c <eepromDataFillWithEmpty+0xc>
	}
}
 800406a:	bf00      	nop
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20000000 	.word	0x20000000
 800407c:	20000060 	.word	0x20000060
 8004080:	20000028 	.word	0x20000028

08004084 <i2cTest>:
		return 1;
	}
	return 0;
}

void i2cTest(void) {
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 800408a:	463b      	mov	r3, r7
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	605a      	str	r2, [r3, #4]
 8004092:	609a      	str	r2, [r3, #8]
 8004094:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8004096:	4b50      	ldr	r3, [pc, #320]	@ (80041d8 <i2cTest+0x154>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b4e      	ldr	r3, [pc, #312]	@ (80041d8 <i2cTest+0x154>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0201 	bic.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80040a6:	484c      	ldr	r0, [pc, #304]	@ (80041d8 <i2cTest+0x154>)
 80040a8:	f003 fb50 	bl	800774c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040ac:	23c0      	movs	r3, #192	@ 0xc0
 80040ae:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80040b0:	2311      	movs	r3, #17
 80040b2:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80040b4:	2301      	movs	r3, #1
 80040b6:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80040b8:	2303      	movs	r3, #3
 80040ba:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80040bc:	463b      	mov	r3, r7
 80040be:	4619      	mov	r1, r3
 80040c0:	4846      	ldr	r0, [pc, #280]	@ (80041dc <i2cTest+0x158>)
 80040c2:	f002 ff57 	bl	8006f74 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80040c6:	2201      	movs	r2, #1
 80040c8:	2140      	movs	r1, #64	@ 0x40
 80040ca:	4844      	ldr	r0, [pc, #272]	@ (80041dc <i2cTest+0x158>)
 80040cc:	f003 f9c9 	bl	8007462 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80040d0:	2201      	movs	r2, #1
 80040d2:	2180      	movs	r1, #128	@ 0x80
 80040d4:	4841      	ldr	r0, [pc, #260]	@ (80041dc <i2cTest+0x158>)
 80040d6:	f003 f9c4 	bl	8007462 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 80040da:	200a      	movs	r0, #10
 80040dc:	f002 fd1c 	bl	8006b18 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80040e0:	bf00      	nop
 80040e2:	2140      	movs	r1, #64	@ 0x40
 80040e4:	483d      	ldr	r0, [pc, #244]	@ (80041dc <i2cTest+0x158>)
 80040e6:	f003 f9a5 	bl	8007434 <HAL_GPIO_ReadPin>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d006      	beq.n	80040fe <i2cTest+0x7a>
 80040f0:	2180      	movs	r1, #128	@ 0x80
 80040f2:	483a      	ldr	r0, [pc, #232]	@ (80041dc <i2cTest+0x158>)
 80040f4:	f003 f99e 	bl	8007434 <HAL_GPIO_ReadPin>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d1f1      	bne.n	80040e2 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80040fe:	2200      	movs	r2, #0
 8004100:	2180      	movs	r1, #128	@ 0x80
 8004102:	4836      	ldr	r0, [pc, #216]	@ (80041dc <i2cTest+0x158>)
 8004104:	f003 f9ad 	bl	8007462 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8004108:	200a      	movs	r0, #10
 800410a:	f002 fd05 	bl	8006b18 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800410e:	bf00      	nop
 8004110:	2180      	movs	r1, #128	@ 0x80
 8004112:	4832      	ldr	r0, [pc, #200]	@ (80041dc <i2cTest+0x158>)
 8004114:	f003 f98e 	bl	8007434 <HAL_GPIO_ReadPin>
 8004118:	4603      	mov	r3, r0
 800411a:	2b01      	cmp	r3, #1
 800411c:	d0f8      	beq.n	8004110 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800411e:	2200      	movs	r2, #0
 8004120:	2140      	movs	r1, #64	@ 0x40
 8004122:	482e      	ldr	r0, [pc, #184]	@ (80041dc <i2cTest+0x158>)
 8004124:	f003 f99d 	bl	8007462 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8004128:	200a      	movs	r0, #10
 800412a:	f002 fcf5 	bl	8006b18 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800412e:	bf00      	nop
 8004130:	2140      	movs	r1, #64	@ 0x40
 8004132:	482a      	ldr	r0, [pc, #168]	@ (80041dc <i2cTest+0x158>)
 8004134:	f003 f97e 	bl	8007434 <HAL_GPIO_ReadPin>
 8004138:	4603      	mov	r3, r0
 800413a:	2b01      	cmp	r3, #1
 800413c:	d0f8      	beq.n	8004130 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800413e:	2201      	movs	r2, #1
 8004140:	2140      	movs	r1, #64	@ 0x40
 8004142:	4826      	ldr	r0, [pc, #152]	@ (80041dc <i2cTest+0x158>)
 8004144:	f003 f98d 	bl	8007462 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8004148:	200a      	movs	r0, #10
 800414a:	f002 fce5 	bl	8006b18 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 800414e:	bf00      	nop
 8004150:	2140      	movs	r1, #64	@ 0x40
 8004152:	4822      	ldr	r0, [pc, #136]	@ (80041dc <i2cTest+0x158>)
 8004154:	f003 f96e 	bl	8007434 <HAL_GPIO_ReadPin>
 8004158:	4603      	mov	r3, r0
 800415a:	2b01      	cmp	r3, #1
 800415c:	d1f8      	bne.n	8004150 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800415e:	2201      	movs	r2, #1
 8004160:	2180      	movs	r1, #128	@ 0x80
 8004162:	481e      	ldr	r0, [pc, #120]	@ (80041dc <i2cTest+0x158>)
 8004164:	f003 f97d 	bl	8007462 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8004168:	200a      	movs	r0, #10
 800416a:	f002 fcd5 	bl	8006b18 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800416e:	bf00      	nop
 8004170:	2180      	movs	r1, #128	@ 0x80
 8004172:	481a      	ldr	r0, [pc, #104]	@ (80041dc <i2cTest+0x158>)
 8004174:	f003 f95e 	bl	8007434 <HAL_GPIO_ReadPin>
 8004178:	4603      	mov	r3, r0
 800417a:	2b01      	cmp	r3, #1
 800417c:	d1f8      	bne.n	8004170 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800417e:	23c0      	movs	r3, #192	@ 0xc0
 8004180:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8004182:	2312      	movs	r3, #18
 8004184:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8004186:	2301      	movs	r3, #1
 8004188:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 800418a:	2303      	movs	r3, #3
 800418c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800418e:	463b      	mov	r3, r7
 8004190:	4619      	mov	r1, r3
 8004192:	4812      	ldr	r0, [pc, #72]	@ (80041dc <i2cTest+0x158>)
 8004194:	f002 feee 	bl	8006f74 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8004198:	4b0f      	ldr	r3, [pc, #60]	@ (80041d8 <i2cTest+0x154>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4b0e      	ldr	r3, [pc, #56]	@ (80041d8 <i2cTest+0x154>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041a6:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80041a8:	4b0b      	ldr	r3, [pc, #44]	@ (80041d8 <i2cTest+0x154>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4b0a      	ldr	r3, [pc, #40]	@ (80041d8 <i2cTest+0x154>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041b6:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80041b8:	4b07      	ldr	r3, [pc, #28]	@ (80041d8 <i2cTest+0x154>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4b06      	ldr	r3, [pc, #24]	@ (80041d8 <i2cTest+0x154>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80041c8:	4803      	ldr	r0, [pc, #12]	@ (80041d8 <i2cTest+0x154>)
 80041ca:	f003 f97b 	bl	80074c4 <HAL_I2C_Init>
}
 80041ce:	bf00      	nop
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000158 	.word	0x20000158
 80041dc:	40010c00 	.word	0x40010c00

080041e0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80041e8:	4b04      	ldr	r3, [pc, #16]	@ (80041fc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3301      	adds	r3, #1
 80041ee:	4a03      	ldr	r2, [pc, #12]	@ (80041fc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80041f0:	6013      	str	r3, [r2, #0]
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr
 80041fc:	200000a8 	.word	0x200000a8

08004200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004206:	f002 fc25 	bl	8006a54 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 800420a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800420e:	f002 fc83 	bl	8006b18 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004212:	f002 f899 	bl	8006348 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004216:	f002 f9bb 	bl	8006590 <MX_GPIO_Init>
  MX_CAN_Init();
 800421a:	f002 f8db 	bl	80063d4 <MX_CAN_Init>
  MX_I2C1_Init();
 800421e:	f002 f90d 	bl	800643c <MX_I2C1_Init>
  MX_TIM1_Init();
 8004222:	f002 f939 	bl	8006498 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8004226:	f002 f989 	bl	800653c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800422a:	2201      	movs	r2, #1
 800422c:	2140      	movs	r1, #64	@ 0x40
 800422e:	48b6      	ldr	r0, [pc, #728]	@ (8004508 <main+0x308>)
 8004230:	f003 f917 	bl	8007462 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004234:	2201      	movs	r2, #1
 8004236:	2180      	movs	r1, #128	@ 0x80
 8004238:	48b3      	ldr	r0, [pc, #716]	@ (8004508 <main+0x308>)
 800423a:	f003 f912 	bl	8007462 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800423e:	200a      	movs	r0, #10
 8004240:	f002 fc6a 	bl	8006b18 <HAL_Delay>
  lcd_init();
 8004244:	f7fc f8e3 	bl	800040e <lcd_init>
  HAL_Delay(10);
 8004248:	200a      	movs	r0, #10
 800424a:	f002 fc65 	bl	8006b18 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 800424e:	48af      	ldr	r0, [pc, #700]	@ (800450c <main+0x30c>)
 8004250:	f004 ffba 	bl	80091c8 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004254:	bf00      	nop
 8004256:	48ae      	ldr	r0, [pc, #696]	@ (8004510 <main+0x310>)
 8004258:	f003 ff15 	bl	8008086 <HAL_I2C_GetError>
 800425c:	4603      	mov	r3, r0
 800425e:	2b04      	cmp	r3, #4
 8004260:	d0f9      	beq.n	8004256 <main+0x56>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004262:	bf00      	nop
 8004264:	48aa      	ldr	r0, [pc, #680]	@ (8004510 <main+0x310>)
 8004266:	f003 ff01 	bl	800806c <HAL_I2C_GetState>
 800426a:	4603      	mov	r3, r0
 800426c:	2b20      	cmp	r3, #32
 800426e:	d1f9      	bne.n	8004264 <main+0x64>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004270:	2200      	movs	r2, #0
 8004272:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004276:	48a4      	ldr	r0, [pc, #656]	@ (8004508 <main+0x308>)
 8004278:	f003 f8f3 	bl	8007462 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800427c:	2200      	movs	r2, #0
 800427e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004282:	48a1      	ldr	r0, [pc, #644]	@ (8004508 <main+0x308>)
 8004284:	f003 f8ed 	bl	8007462 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004288:	2200      	movs	r2, #0
 800428a:	2104      	movs	r1, #4
 800428c:	489e      	ldr	r0, [pc, #632]	@ (8004508 <main+0x308>)
 800428e:	f003 f8e8 	bl	8007462 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004292:	2200      	movs	r2, #0
 8004294:	2102      	movs	r1, #2
 8004296:	489c      	ldr	r0, [pc, #624]	@ (8004508 <main+0x308>)
 8004298:	f003 f8e3 	bl	8007462 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800429c:	2200      	movs	r2, #0
 800429e:	2101      	movs	r1, #1
 80042a0:	4899      	ldr	r0, [pc, #612]	@ (8004508 <main+0x308>)
 80042a2:	f003 f8de 	bl	8007462 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80042a6:	2200      	movs	r2, #0
 80042a8:	2120      	movs	r1, #32
 80042aa:	489a      	ldr	r0, [pc, #616]	@ (8004514 <main+0x314>)
 80042ac:	f003 f8d9 	bl	8007462 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80042b0:	2200      	movs	r2, #0
 80042b2:	2110      	movs	r1, #16
 80042b4:	4897      	ldr	r0, [pc, #604]	@ (8004514 <main+0x314>)
 80042b6:	f003 f8d4 	bl	8007462 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80042ba:	2200      	movs	r2, #0
 80042bc:	2180      	movs	r1, #128	@ 0x80
 80042be:	4896      	ldr	r0, [pc, #600]	@ (8004518 <main+0x318>)
 80042c0:	f003 f8cf 	bl	8007462 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80042c4:	2200      	movs	r2, #0
 80042c6:	2140      	movs	r1, #64	@ 0x40
 80042c8:	4893      	ldr	r0, [pc, #588]	@ (8004518 <main+0x318>)
 80042ca:	f003 f8ca 	bl	8007462 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80042ce:	2200      	movs	r2, #0
 80042d0:	2120      	movs	r1, #32
 80042d2:	4891      	ldr	r0, [pc, #580]	@ (8004518 <main+0x318>)
 80042d4:	f003 f8c5 	bl	8007462 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80042d8:	2200      	movs	r2, #0
 80042da:	2110      	movs	r1, #16
 80042dc:	488e      	ldr	r0, [pc, #568]	@ (8004518 <main+0x318>)
 80042de:	f003 f8c0 	bl	8007462 <HAL_GPIO_WritePin>

  i2cTest();
 80042e2:	f7ff fecf 	bl	8004084 <i2cTest>
  HAL_Delay(100);
 80042e6:	2064      	movs	r0, #100	@ 0x64
 80042e8:	f002 fc16 	bl	8006b18 <HAL_Delay>
  lcd_print(1,1,"   ESP-XL-V1    ");
 80042ec:	4a8b      	ldr	r2, [pc, #556]	@ (800451c <main+0x31c>)
 80042ee:	2101      	movs	r1, #1
 80042f0:	2001      	movs	r0, #1
 80042f2:	f7fc f8be 	bl	8000472 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 80042f6:	4a8a      	ldr	r2, [pc, #552]	@ (8004520 <main+0x320>)
 80042f8:	2101      	movs	r1, #1
 80042fa:	2002      	movs	r0, #2
 80042fc:	f7fc f8b9 	bl	8000472 <lcd_print>
  HAL_Delay(1000);
 8004300:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004304:	f002 fc08 	bl	8006b18 <HAL_Delay>
  lcd_clear();
 8004308:	f7fc f8c8 	bl	800049c <lcd_clear>

  eepromKontrol();
 800430c:	f7ff fc32 	bl	8003b74 <eepromKontrol>

  backLightTimer = millis;
 8004310:	4b84      	ldr	r3, [pc, #528]	@ (8004524 <main+0x324>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a84      	ldr	r2, [pc, #528]	@ (8004528 <main+0x328>)
 8004316:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(millis - backLightTimer >= lcdBacklightSure) {
 8004318:	4b82      	ldr	r3, [pc, #520]	@ (8004524 <main+0x324>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4b82      	ldr	r3, [pc, #520]	@ (8004528 <main+0x328>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	4a82      	ldr	r2, [pc, #520]	@ (800452c <main+0x32c>)
 8004324:	7812      	ldrb	r2, [r2, #0]
 8004326:	4293      	cmp	r3, r2
 8004328:	d303      	bcc.n	8004332 <main+0x132>
	  			lcd_backlight(0);
 800432a:	2000      	movs	r0, #0
 800432c:	f7fc f8c0 	bl	80004b0 <lcd_backlight>
 8004330:	e002      	b.n	8004338 <main+0x138>
	  		} else {
	  			lcd_backlight(1);
 8004332:	2001      	movs	r0, #1
 8004334:	f7fc f8bc 	bl	80004b0 <lcd_backlight>
	  		}

	  		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8004338:	2101      	movs	r1, #1
 800433a:	4877      	ldr	r0, [pc, #476]	@ (8004518 <main+0x318>)
 800433c:	f003 f87a 	bl	8007434 <HAL_GPIO_ReadPin>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d136      	bne.n	80043b4 <main+0x1b4>
 8004346:	2108      	movs	r1, #8
 8004348:	4872      	ldr	r0, [pc, #456]	@ (8004514 <main+0x314>)
 800434a:	f003 f873 	bl	8007434 <HAL_GPIO_ReadPin>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d12f      	bne.n	80043b4 <main+0x1b4>
 8004354:	2102      	movs	r1, #2
 8004356:	4870      	ldr	r0, [pc, #448]	@ (8004518 <main+0x318>)
 8004358:	f003 f86c 	bl	8007434 <HAL_GPIO_ReadPin>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d128      	bne.n	80043b4 <main+0x1b4>
 8004362:	2104      	movs	r1, #4
 8004364:	486c      	ldr	r0, [pc, #432]	@ (8004518 <main+0x318>)
 8004366:	f003 f865 	bl	8007434 <HAL_GPIO_ReadPin>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d121      	bne.n	80043b4 <main+0x1b4>
 8004370:	2108      	movs	r1, #8
 8004372:	4869      	ldr	r0, [pc, #420]	@ (8004518 <main+0x318>)
 8004374:	f003 f85e 	bl	8007434 <HAL_GPIO_ReadPin>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d11a      	bne.n	80043b4 <main+0x1b4>
 800437e:	2180      	movs	r1, #128	@ 0x80
 8004380:	4864      	ldr	r0, [pc, #400]	@ (8004514 <main+0x314>)
 8004382:	f003 f857 	bl	8007434 <HAL_GPIO_ReadPin>
 8004386:	4603      	mov	r3, r0
 8004388:	2b01      	cmp	r3, #1
 800438a:	d113      	bne.n	80043b4 <main+0x1b4>
 800438c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004390:	4860      	ldr	r0, [pc, #384]	@ (8004514 <main+0x314>)
 8004392:	f003 f84f 	bl	8007434 <HAL_GPIO_ReadPin>
 8004396:	4603      	mov	r3, r0
 8004398:	2b01      	cmp	r3, #1
 800439a:	d10b      	bne.n	80043b4 <main+0x1b4>
 800439c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043a0:	485c      	ldr	r0, [pc, #368]	@ (8004514 <main+0x314>)
 80043a2:	f003 f847 	bl	8007434 <HAL_GPIO_ReadPin>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d103      	bne.n	80043b4 <main+0x1b4>
	  			butonKontrol=0;
 80043ac:	4b60      	ldr	r3, [pc, #384]	@ (8004530 <main+0x330>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	701a      	strb	r2, [r3, #0]
 80043b2:	e003      	b.n	80043bc <main+0x1bc>
	  		} else {
	  			backLightTimer = millis;
 80043b4:	4b5b      	ldr	r3, [pc, #364]	@ (8004524 <main+0x324>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a5b      	ldr	r2, [pc, #364]	@ (8004528 <main+0x328>)
 80043ba:	6013      	str	r3, [r2, #0]
	  		}

	  		if(hafizaYaz==1) {
 80043bc:	4b5d      	ldr	r3, [pc, #372]	@ (8004534 <main+0x334>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d03c      	beq.n	800443e <main+0x23e>
	  		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80043c4:	bf00      	nop
 80043c6:	4852      	ldr	r0, [pc, #328]	@ (8004510 <main+0x310>)
 80043c8:	f003 fe5d 	bl	8008086 <HAL_I2C_GetError>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d0f9      	beq.n	80043c6 <main+0x1c6>
	  		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80043d2:	bf00      	nop
 80043d4:	484e      	ldr	r0, [pc, #312]	@ (8004510 <main+0x310>)
 80043d6:	f003 fe49 	bl	800806c <HAL_I2C_GetState>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d1f9      	bne.n	80043d4 <main+0x1d4>

	  		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 80043e0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80043e4:	9302      	str	r3, [sp, #8]
 80043e6:	233f      	movs	r3, #63	@ 0x3f
 80043e8:	9301      	str	r3, [sp, #4]
 80043ea:	4b53      	ldr	r3, [pc, #332]	@ (8004538 <main+0x338>)
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	233f      	movs	r3, #63	@ 0x3f
 80043f0:	2200      	movs	r2, #0
 80043f2:	21a0      	movs	r1, #160	@ 0xa0
 80043f4:	4846      	ldr	r0, [pc, #280]	@ (8004510 <main+0x310>)
 80043f6:	f003 fad7 	bl	80079a8 <HAL_I2C_Mem_Write>
	  		  HAL_Delay(5);
 80043fa:	2005      	movs	r0, #5
 80043fc:	f002 fb8c 	bl	8006b18 <HAL_Delay>

	  		  hafizaYaz=0;
 8004400:	4b4c      	ldr	r3, [pc, #304]	@ (8004534 <main+0x334>)
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
	  		  if(dilSecim==0) {
 8004406:	4b4d      	ldr	r3, [pc, #308]	@ (800453c <main+0x33c>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d105      	bne.n	800441a <main+0x21a>
	  			  lcd_print(2,1,"Data yazildi    ");
 800440e:	4a4c      	ldr	r2, [pc, #304]	@ (8004540 <main+0x340>)
 8004410:	2101      	movs	r1, #1
 8004412:	2002      	movs	r0, #2
 8004414:	f7fc f82d 	bl	8000472 <lcd_print>
 8004418:	e008      	b.n	800442c <main+0x22c>
	  		  } else if(dilSecim==1) {
 800441a:	4b48      	ldr	r3, [pc, #288]	@ (800453c <main+0x33c>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d104      	bne.n	800442c <main+0x22c>
	  			  lcd_print(2,1,"Data Wrote      ");
 8004422:	4a48      	ldr	r2, [pc, #288]	@ (8004544 <main+0x344>)
 8004424:	2101      	movs	r1, #1
 8004426:	2002      	movs	r0, #2
 8004428:	f7fc f823 	bl	8000472 <lcd_print>
	  		  }

	  		  HAL_Delay(1000);
 800442c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004430:	f002 fb72 	bl	8006b18 <HAL_Delay>
	  		  lcd_clear();
 8004434:	f7fc f832 	bl	800049c <lcd_clear>
	  		  mesajYazildi=0;
 8004438:	4b43      	ldr	r3, [pc, #268]	@ (8004548 <main+0x348>)
 800443a:	2200      	movs	r2, #0
 800443c:	701a      	strb	r2, [r3, #0]
	  		}

	  		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800443e:	4b43      	ldr	r3, [pc, #268]	@ (800454c <main+0x34c>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	f083 0301 	eor.w	r3, r3, #1
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 809f 	beq.w	800458c <main+0x38c>
 800444e:	4830      	ldr	r0, [pc, #192]	@ (8004510 <main+0x310>)
 8004450:	f003 fe0c 	bl	800806c <HAL_I2C_GetState>
 8004454:	4603      	mov	r3, r0
 8004456:	2b20      	cmp	r3, #32
 8004458:	f040 8098 	bne.w	800458c <main+0x38c>
	  		  if(ilkOkuma==0) {
 800445c:	4b3c      	ldr	r3, [pc, #240]	@ (8004550 <main+0x350>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	f083 0301 	eor.w	r3, r3, #1
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d044      	beq.n	80044f4 <main+0x2f4>
	  			  lcd_print(1,1,"   **EEPROM**   ");
 800446a:	4a3a      	ldr	r2, [pc, #232]	@ (8004554 <main+0x354>)
 800446c:	2101      	movs	r1, #1
 800446e:	2001      	movs	r0, #1
 8004470:	f7fb ffff 	bl	8000472 <lcd_print>
	  			  if(dilSecim==0) {
 8004474:	4b31      	ldr	r3, [pc, #196]	@ (800453c <main+0x33c>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d105      	bne.n	8004488 <main+0x288>
	  				  lcd_print(2,1,"Data Okunuyor...");
 800447c:	4a36      	ldr	r2, [pc, #216]	@ (8004558 <main+0x358>)
 800447e:	2101      	movs	r1, #1
 8004480:	2002      	movs	r0, #2
 8004482:	f7fb fff6 	bl	8000472 <lcd_print>
 8004486:	e008      	b.n	800449a <main+0x29a>
	  			  } else if(dilSecim==1) {
 8004488:	4b2c      	ldr	r3, [pc, #176]	@ (800453c <main+0x33c>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d104      	bne.n	800449a <main+0x29a>
	  				  lcd_print(2,1,"Data Reading... ");
 8004490:	4a32      	ldr	r2, [pc, #200]	@ (800455c <main+0x35c>)
 8004492:	2101      	movs	r1, #1
 8004494:	2002      	movs	r0, #2
 8004496:	f7fb ffec 	bl	8000472 <lcd_print>
	  			  }
	  			  HAL_Delay(1000);
 800449a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800449e:	f002 fb3b 	bl	8006b18 <HAL_Delay>

	  			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80044a2:	bf00      	nop
 80044a4:	481a      	ldr	r0, [pc, #104]	@ (8004510 <main+0x310>)
 80044a6:	f003 fdee 	bl	8008086 <HAL_I2C_GetError>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d0f9      	beq.n	80044a4 <main+0x2a4>
	  			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80044b0:	e003      	b.n	80044ba <main+0x2ba>
	  				  HAL_Delay(1000);
 80044b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80044b6:	f002 fb2f 	bl	8006b18 <HAL_Delay>
	  			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80044ba:	4815      	ldr	r0, [pc, #84]	@ (8004510 <main+0x310>)
 80044bc:	f003 fdd6 	bl	800806c <HAL_I2C_GetState>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d1f5      	bne.n	80044b2 <main+0x2b2>
	  			  }

	  			  if(dilSecim==0) {
 80044c6:	4b1d      	ldr	r3, [pc, #116]	@ (800453c <main+0x33c>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d105      	bne.n	80044da <main+0x2da>
	  				  lcd_print(2,1,"Data Okundu.    ");
 80044ce:	4a24      	ldr	r2, [pc, #144]	@ (8004560 <main+0x360>)
 80044d0:	2101      	movs	r1, #1
 80044d2:	2002      	movs	r0, #2
 80044d4:	f7fb ffcd 	bl	8000472 <lcd_print>
 80044d8:	e008      	b.n	80044ec <main+0x2ec>
	  			  } else if(dilSecim==1) {
 80044da:	4b18      	ldr	r3, [pc, #96]	@ (800453c <main+0x33c>)
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d104      	bne.n	80044ec <main+0x2ec>
	  				  lcd_print(2,1,"Data Read.      ");
 80044e2:	4a20      	ldr	r2, [pc, #128]	@ (8004564 <main+0x364>)
 80044e4:	2101      	movs	r1, #1
 80044e6:	2002      	movs	r0, #2
 80044e8:	f7fb ffc3 	bl	8000472 <lcd_print>
	  			  }

	  			  ilkOkuma=1;
 80044ec:	4b18      	ldr	r3, [pc, #96]	@ (8004550 <main+0x350>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	e046      	b.n	8004582 <main+0x382>
	  		  } else {
	  			  if(dilSecim==0) {
 80044f4:	4b11      	ldr	r3, [pc, #68]	@ (800453c <main+0x33c>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d137      	bne.n	800456c <main+0x36c>
	  				  lcd_print(2,1,"Deger Kaydedildi");
 80044fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004568 <main+0x368>)
 80044fe:	2101      	movs	r1, #1
 8004500:	2002      	movs	r0, #2
 8004502:	f7fb ffb6 	bl	8000472 <lcd_print>
 8004506:	e03a      	b.n	800457e <main+0x37e>
 8004508:	40010c00 	.word	0x40010c00
 800450c:	200001ac 	.word	0x200001ac
 8004510:	20000158 	.word	0x20000158
 8004514:	40011000 	.word	0x40011000
 8004518:	40010800 	.word	0x40010800
 800451c:	0800a784 	.word	0x0800a784
 8004520:	0800a798 	.word	0x0800a798
 8004524:	200000a8 	.word	0x200000a8
 8004528:	200000c4 	.word	0x200000c4
 800452c:	20000030 	.word	0x20000030
 8004530:	200000f8 	.word	0x200000f8
 8004534:	200000f5 	.word	0x200000f5
 8004538:	20000060 	.word	0x20000060
 800453c:	200000ea 	.word	0x200000ea
 8004540:	0800a7ac 	.word	0x0800a7ac
 8004544:	0800a7c0 	.word	0x0800a7c0
 8004548:	200000fd 	.word	0x200000fd
 800454c:	200000f6 	.word	0x200000f6
 8004550:	200000f7 	.word	0x200000f7
 8004554:	0800a7d4 	.word	0x0800a7d4
 8004558:	0800a7e8 	.word	0x0800a7e8
 800455c:	0800a7fc 	.word	0x0800a7fc
 8004560:	0800a810 	.word	0x0800a810
 8004564:	0800a824 	.word	0x0800a824
 8004568:	0800a838 	.word	0x0800a838
	  			  } else if(dilSecim==1) {
 800456c:	4b88      	ldr	r3, [pc, #544]	@ (8004790 <main+0x590>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d104      	bne.n	800457e <main+0x37e>
	  				  lcd_print(2,1,"Value Saved     ");
 8004574:	4a87      	ldr	r2, [pc, #540]	@ (8004794 <main+0x594>)
 8004576:	2101      	movs	r1, #1
 8004578:	2002      	movs	r0, #2
 800457a:	f7fb ff7a 	bl	8000472 <lcd_print>
	  			  }
	  			  lcd_clear();
 800457e:	f7fb ff8d 	bl	800049c <lcd_clear>
	  		  }

	  		  eepromKontrol();
 8004582:	f7ff faf7 	bl	8003b74 <eepromKontrol>
	  		  hafizaOku=1;
 8004586:	4b84      	ldr	r3, [pc, #528]	@ (8004798 <main+0x598>)
 8004588:	2201      	movs	r2, #1
 800458a:	701a      	strb	r2, [r3, #0]
	  		}

	  		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 800458c:	4b83      	ldr	r3, [pc, #524]	@ (800479c <main+0x59c>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d112      	bne.n	80045ba <main+0x3ba>
 8004594:	2102      	movs	r1, #2
 8004596:	4882      	ldr	r0, [pc, #520]	@ (80047a0 <main+0x5a0>)
 8004598:	f002 ff4c 	bl	8007434 <HAL_GPIO_ReadPin>
 800459c:	4603      	mov	r3, r0
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d10b      	bne.n	80045ba <main+0x3ba>
 80045a2:	2104      	movs	r1, #4
 80045a4:	487e      	ldr	r0, [pc, #504]	@ (80047a0 <main+0x5a0>)
 80045a6:	f002 ff45 	bl	8007434 <HAL_GPIO_ReadPin>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d104      	bne.n	80045ba <main+0x3ba>
	  			menuGiris=1;
 80045b0:	4b7a      	ldr	r3, [pc, #488]	@ (800479c <main+0x59c>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	701a      	strb	r2, [r3, #0]
	  			lcd_clear();
 80045b6:	f7fb ff71 	bl	800049c <lcd_clear>
	  		}

	  		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80045ba:	4b78      	ldr	r3, [pc, #480]	@ (800479c <main+0x59c>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d119      	bne.n	80045f6 <main+0x3f6>
 80045c2:	4b78      	ldr	r3, [pc, #480]	@ (80047a4 <main+0x5a4>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d115      	bne.n	80045f6 <main+0x3f6>
 80045ca:	4b77      	ldr	r3, [pc, #476]	@ (80047a8 <main+0x5a8>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d111      	bne.n	80045f6 <main+0x3f6>
	  					lcd_clear();
 80045d2:	f7fb ff63 	bl	800049c <lcd_clear>
	  					HAL_Delay(10);
 80045d6:	200a      	movs	r0, #10
 80045d8:	f002 fa9e 	bl	8006b18 <HAL_Delay>
	  					lcd_print(1, 1, "     ESP-XL     ");
 80045dc:	4a73      	ldr	r2, [pc, #460]	@ (80047ac <main+0x5ac>)
 80045de:	2101      	movs	r1, #1
 80045e0:	2001      	movs	r0, #1
 80045e2:	f7fb ff46 	bl	8000472 <lcd_print>
	  					lcd_print(2, 1, "      RUN       ");
 80045e6:	4a72      	ldr	r2, [pc, #456]	@ (80047b0 <main+0x5b0>)
 80045e8:	2101      	movs	r1, #1
 80045ea:	2002      	movs	r0, #2
 80045ec:	f7fb ff41 	bl	8000472 <lcd_print>

	  					mesajYazildi=1;
 80045f0:	4b6c      	ldr	r3, [pc, #432]	@ (80047a4 <main+0x5a4>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	701a      	strb	r2, [r3, #0]
	  				}

	  		if(menuGiris==1) {
 80045f6:	4b69      	ldr	r3, [pc, #420]	@ (800479c <main+0x59c>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <main+0x402>
	  			menu();
 80045fe:	f7fb ff7f 	bl	8000500 <menu>
	  		}

	  		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8004602:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004606:	486b      	ldr	r0, [pc, #428]	@ (80047b4 <main+0x5b4>)
 8004608:	f002 ff43 	bl	8007492 <HAL_GPIO_TogglePin>

	  		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

	  		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 800460c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004610:	4869      	ldr	r0, [pc, #420]	@ (80047b8 <main+0x5b8>)
 8004612:	f002 ff0f 	bl	8007434 <HAL_GPIO_ReadPin>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <main+0x432>
 800461c:	4b67      	ldr	r3, [pc, #412]	@ (80047bc <main+0x5bc>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	f083 0301 	eor.w	r3, r3, #1
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <main+0x432>
	  			stopVar=1;
 800462a:	4b65      	ldr	r3, [pc, #404]	@ (80047c0 <main+0x5c0>)
 800462c:	2201      	movs	r2, #1
 800462e:	701a      	strb	r2, [r3, #0]
 8004630:	e002      	b.n	8004638 <main+0x438>
	  		} else {
	  			stopVar=0;
 8004632:	4b63      	ldr	r3, [pc, #396]	@ (80047c0 <main+0x5c0>)
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]
	  		}
	  		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 8004638:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800463c:	485e      	ldr	r0, [pc, #376]	@ (80047b8 <main+0x5b8>)
 800463e:	f002 fef9 	bl	8007434 <HAL_GPIO_ReadPin>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d107      	bne.n	8004658 <main+0x458>
 8004648:	4b5e      	ldr	r3, [pc, #376]	@ (80047c4 <main+0x5c4>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <main+0x458>
	  					EmnStopVar=1;
 8004650:	4b5d      	ldr	r3, [pc, #372]	@ (80047c8 <main+0x5c8>)
 8004652:	2201      	movs	r2, #1
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	e002      	b.n	800465e <main+0x45e>
	  				} else {
	  					EmnStopVar=0;
 8004658:	4b5b      	ldr	r3, [pc, #364]	@ (80047c8 <main+0x5c8>)
 800465a:	2200      	movs	r2, #0
 800465c:	701a      	strb	r2, [r3, #0]
	  				}

	  		/****************************************  BASINC SALTERI ********************************************/
	  		if(basincSalteri==0) {
 800465e:	4b5b      	ldr	r3, [pc, #364]	@ (80047cc <main+0x5cc>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <main+0x46c>
	  			basincVar=1;
 8004666:	4b5a      	ldr	r3, [pc, #360]	@ (80047d0 <main+0x5d0>)
 8004668:	2201      	movs	r2, #1
 800466a:	701a      	strb	r2, [r3, #0]
	  		}

	  		if(basincSalteri==1) {
 800466c:	4b57      	ldr	r3, [pc, #348]	@ (80047cc <main+0x5cc>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d119      	bne.n	80046a8 <main+0x4a8>
	  			if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004674:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004678:	484e      	ldr	r0, [pc, #312]	@ (80047b4 <main+0x5b4>)
 800467a:	f002 fedb 	bl	8007434 <HAL_GPIO_ReadPin>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <main+0x49a>
	  				if(millis-timer5>=3) {
 8004684:	4b53      	ldr	r3, [pc, #332]	@ (80047d4 <main+0x5d4>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	4b53      	ldr	r3, [pc, #332]	@ (80047d8 <main+0x5d8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d90a      	bls.n	80046a8 <main+0x4a8>
	  					basincVar=1;
 8004692:	4b4f      	ldr	r3, [pc, #316]	@ (80047d0 <main+0x5d0>)
 8004694:	2201      	movs	r2, #1
 8004696:	701a      	strb	r2, [r3, #0]
 8004698:	e006      	b.n	80046a8 <main+0x4a8>
	  				}
	  			} else {
	  				timer5=millis;
 800469a:	4b4e      	ldr	r3, [pc, #312]	@ (80047d4 <main+0x5d4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a4e      	ldr	r2, [pc, #312]	@ (80047d8 <main+0x5d8>)
 80046a0:	6013      	str	r3, [r2, #0]
	  				basincVar=0;
 80046a2:	4b4b      	ldr	r3, [pc, #300]	@ (80047d0 <main+0x5d0>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
	  			}
	  		}

	  		/******** Bas gönder ***********/
	  		if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80046a8:	4b4c      	ldr	r3, [pc, #304]	@ (80047dc <main+0x5dc>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d10b      	bne.n	80046c8 <main+0x4c8>
 80046b0:	4b4b      	ldr	r3, [pc, #300]	@ (80047e0 <main+0x5e0>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d107      	bne.n	80046c8 <main+0x4c8>
 80046b8:	4b4a      	ldr	r3, [pc, #296]	@ (80047e4 <main+0x5e4>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d103      	bne.n	80046c8 <main+0x4c8>
	  			basgondercalisyukari=1;
 80046c0:	4b49      	ldr	r3, [pc, #292]	@ (80047e8 <main+0x5e8>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	e006      	b.n	80046d6 <main+0x4d6>
	  		} else if(yukarimotorcalisiyor==0) {
 80046c8:	4b45      	ldr	r3, [pc, #276]	@ (80047e0 <main+0x5e0>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d102      	bne.n	80046d6 <main+0x4d6>
	  			basgondercalisyukari=0;
 80046d0:	4b45      	ldr	r3, [pc, #276]	@ (80047e8 <main+0x5e8>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	701a      	strb	r2, [r3, #0]
	  		}

	  		if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80046d6:	4b41      	ldr	r3, [pc, #260]	@ (80047dc <main+0x5dc>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d10b      	bne.n	80046f6 <main+0x4f6>
 80046de:	4b43      	ldr	r3, [pc, #268]	@ (80047ec <main+0x5ec>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d107      	bne.n	80046f6 <main+0x4f6>
 80046e6:	4b3f      	ldr	r3, [pc, #252]	@ (80047e4 <main+0x5e4>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d103      	bne.n	80046f6 <main+0x4f6>
	  			basgondercalisasagi=1;
 80046ee:	4b40      	ldr	r3, [pc, #256]	@ (80047f0 <main+0x5f0>)
 80046f0:	2201      	movs	r2, #1
 80046f2:	701a      	strb	r2, [r3, #0]
 80046f4:	e006      	b.n	8004704 <main+0x504>
	  		} else if(asagivalfcalisiyor==0) {
 80046f6:	4b3d      	ldr	r3, [pc, #244]	@ (80047ec <main+0x5ec>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d102      	bne.n	8004704 <main+0x504>
	  			basgondercalisasagi=0;
 80046fe:	4b3c      	ldr	r3, [pc, #240]	@ (80047f0 <main+0x5f0>)
 8004700:	2200      	movs	r2, #0
 8004702:	701a      	strb	r2, [r3, #0]
	  		}

	  		/******** Kapı Secimleri ***********/

	  		if(kapiSecimleri==0) {
 8004704:	4b3b      	ldr	r3, [pc, #236]	@ (80047f4 <main+0x5f4>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d102      	bne.n	8004712 <main+0x512>
	  			kapiSivicVar=1;
 800470c:	4b3a      	ldr	r3, [pc, #232]	@ (80047f8 <main+0x5f8>)
 800470e:	2201      	movs	r2, #1
 8004710:	701a      	strb	r2, [r3, #0]
	  		}

	  		if(kapiSecimleri==1) {
 8004712:	4b38      	ldr	r3, [pc, #224]	@ (80047f4 <main+0x5f4>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d10e      	bne.n	8004738 <main+0x538>
	  			if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800471a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800471e:	4820      	ldr	r0, [pc, #128]	@ (80047a0 <main+0x5a0>)
 8004720:	f002 fe88 	bl	8007434 <HAL_GPIO_ReadPin>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <main+0x532>
	  				kapiSivicVar=1;
 800472a:	4b33      	ldr	r3, [pc, #204]	@ (80047f8 <main+0x5f8>)
 800472c:	2201      	movs	r2, #1
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	e002      	b.n	8004738 <main+0x538>
	  			} else {
	  				kapiSivicVar=0;
 8004732:	4b31      	ldr	r3, [pc, #196]	@ (80047f8 <main+0x5f8>)
 8004734:	2200      	movs	r2, #0
 8004736:	701a      	strb	r2, [r3, #0]
	  			}
	  		}

	  		if(kapiSecimleri==2){
 8004738:	4b2e      	ldr	r3, [pc, #184]	@ (80047f4 <main+0x5f4>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d10e      	bne.n	800475e <main+0x55e>
	  			if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004740:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004744:	4816      	ldr	r0, [pc, #88]	@ (80047a0 <main+0x5a0>)
 8004746:	f002 fe75 	bl	8007434 <HAL_GPIO_ReadPin>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <main+0x558>
	  				kapiSivicVar=1;
 8004750:	4b29      	ldr	r3, [pc, #164]	@ (80047f8 <main+0x5f8>)
 8004752:	2201      	movs	r2, #1
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	e002      	b.n	800475e <main+0x55e>
	  			} else {
	  				kapiSivicVar=0;
 8004758:	4b27      	ldr	r3, [pc, #156]	@ (80047f8 <main+0x5f8>)
 800475a:	2200      	movs	r2, #0
 800475c:	701a      	strb	r2, [r3, #0]
	  			}
	  		}

	  		if(kapiSecimleri==3) {
 800475e:	4b25      	ldr	r3, [pc, #148]	@ (80047f4 <main+0x5f4>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b03      	cmp	r3, #3
 8004764:	d14d      	bne.n	8004802 <main+0x602>
	  			if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004766:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800476a:	480d      	ldr	r0, [pc, #52]	@ (80047a0 <main+0x5a0>)
 800476c:	f002 fe62 	bl	8007434 <HAL_GPIO_ReadPin>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d142      	bne.n	80047fc <main+0x5fc>
 8004776:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800477a:	4809      	ldr	r0, [pc, #36]	@ (80047a0 <main+0x5a0>)
 800477c:	f002 fe5a 	bl	8007434 <HAL_GPIO_ReadPin>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d13a      	bne.n	80047fc <main+0x5fc>
	  				kapiSivicVar=1;
 8004786:	4b1c      	ldr	r3, [pc, #112]	@ (80047f8 <main+0x5f8>)
 8004788:	2201      	movs	r2, #1
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	e039      	b.n	8004802 <main+0x602>
 800478e:	bf00      	nop
 8004790:	200000ea 	.word	0x200000ea
 8004794:	0800a84c 	.word	0x0800a84c
 8004798:	200000f6 	.word	0x200000f6
 800479c:	200000e7 	.word	0x200000e7
 80047a0:	40010800 	.word	0x40010800
 80047a4:	200000fd 	.word	0x200000fd
 80047a8:	200000e8 	.word	0x200000e8
 80047ac:	0800a710 	.word	0x0800a710
 80047b0:	0800a724 	.word	0x0800a724
 80047b4:	40011000 	.word	0x40011000
 80047b8:	40010c00 	.word	0x40010c00
 80047bc:	2000011e 	.word	0x2000011e
 80047c0:	2000011b 	.word	0x2000011b
 80047c4:	2000012d 	.word	0x2000012d
 80047c8:	2000012e 	.word	0x2000012e
 80047cc:	200000d1 	.word	0x200000d1
 80047d0:	200000cd 	.word	0x200000cd
 80047d4:	200000a8 	.word	0x200000a8
 80047d8:	200000c0 	.word	0x200000c0
 80047dc:	200000cb 	.word	0x200000cb
 80047e0:	200000fe 	.word	0x200000fe
 80047e4:	200000d9 	.word	0x200000d9
 80047e8:	20000105 	.word	0x20000105
 80047ec:	20000101 	.word	0x20000101
 80047f0:	20000106 	.word	0x20000106
 80047f4:	200000d2 	.word	0x200000d2
 80047f8:	2000011c 	.word	0x2000011c
	  			} else {
	  				kapiSivicVar=0;
 80047fc:	4b66      	ldr	r3, [pc, #408]	@ (8004998 <main+0x798>)
 80047fe:	2200      	movs	r2, #0
 8004800:	701a      	strb	r2, [r3, #0]

	  		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/

	  		/*MOTOR CALISIYOR*/

	  		if(demoMode==0 && menuGiris==0) {
 8004802:	4b66      	ldr	r3, [pc, #408]	@ (800499c <main+0x79c>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f041 836c 	bne.w	8005ee4 <main+0x1ce4>
 800480c:	4b64      	ldr	r3, [pc, #400]	@ (80049a0 <main+0x7a0>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	f041 8367 	bne.w	8005ee4 <main+0x1ce4>
	  			if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8004816:	4b63      	ldr	r3, [pc, #396]	@ (80049a4 <main+0x7a4>)
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d11a      	bne.n	8004854 <main+0x654>
 800481e:	4b62      	ldr	r3, [pc, #392]	@ (80049a8 <main+0x7a8>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d116      	bne.n	8004854 <main+0x654>
 8004826:	4b61      	ldr	r3, [pc, #388]	@ (80049ac <main+0x7ac>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <main+0x644>
 800482e:	4b60      	ldr	r3, [pc, #384]	@ (80049b0 <main+0x7b0>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	f083 0301 	eor.w	r3, r3, #1
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <main+0x644>
 800483c:	4b5d      	ldr	r3, [pc, #372]	@ (80049b4 <main+0x7b4>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d007      	beq.n	8004854 <main+0x654>
	  					||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8004844:	4b5c      	ldr	r3, [pc, #368]	@ (80049b8 <main+0x7b8>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01c      	beq.n	8004886 <main+0x686>
 800484c:	4b5b      	ldr	r3, [pc, #364]	@ (80049bc <main+0x7bc>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d118      	bne.n	8004886 <main+0x686>
 8004854:	4b5a      	ldr	r3, [pc, #360]	@ (80049c0 <main+0x7c0>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d103      	bne.n	8004864 <main+0x664>
 800485c:	4b59      	ldr	r3, [pc, #356]	@ (80049c4 <main+0x7c4>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d010      	beq.n	8004886 <main+0x686>
 8004864:	4b4c      	ldr	r3, [pc, #304]	@ (8004998 <main+0x798>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00c      	beq.n	8004886 <main+0x686>

	  				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800486c:	2201      	movs	r2, #1
 800486e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004872:	4855      	ldr	r0, [pc, #340]	@ (80049c8 <main+0x7c8>)
 8004874:	f002 fdf5 	bl	8007462 <HAL_GPIO_WritePin>
	  				motorcalisiyor=1;
 8004878:	4b54      	ldr	r3, [pc, #336]	@ (80049cc <main+0x7cc>)
 800487a:	2201      	movs	r2, #1
 800487c:	701a      	strb	r2, [r3, #0]
	  				CalismaSayisiYukari=1;
 800487e:	4b54      	ldr	r3, [pc, #336]	@ (80049d0 <main+0x7d0>)
 8004880:	2201      	movs	r2, #1
 8004882:	701a      	strb	r2, [r3, #0]
 8004884:	e008      	b.n	8004898 <main+0x698>
	  			} else {
	  				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004886:	2200      	movs	r2, #0
 8004888:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800488c:	484e      	ldr	r0, [pc, #312]	@ (80049c8 <main+0x7c8>)
 800488e:	f002 fde8 	bl	8007462 <HAL_GPIO_WritePin>
	  				motorcalisiyor=0;
 8004892:	4b4e      	ldr	r3, [pc, #312]	@ (80049cc <main+0x7cc>)
 8004894:	2200      	movs	r2, #0
 8004896:	701a      	strb	r2, [r3, #0]
	  			}

	  			/*YUKARI ÇALISMA*/

	  			if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8004898:	4b41      	ldr	r3, [pc, #260]	@ (80049a0 <main+0x7a0>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d161      	bne.n	8004964 <main+0x764>
 80048a0:	4b48      	ldr	r3, [pc, #288]	@ (80049c4 <main+0x7c4>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d103      	bne.n	80048b0 <main+0x6b0>
 80048a8:	4b45      	ldr	r3, [pc, #276]	@ (80049c0 <main+0x7c0>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d059      	beq.n	8004964 <main+0x764>
 80048b0:	4b39      	ldr	r3, [pc, #228]	@ (8004998 <main+0x798>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d055      	beq.n	8004964 <main+0x764>
	  						&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80048b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80048bc:	4842      	ldr	r0, [pc, #264]	@ (80049c8 <main+0x7c8>)
 80048be:	f002 fdb9 	bl	8007434 <HAL_GPIO_ReadPin>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <main+0x6d0>
 80048c8:	4b42      	ldr	r3, [pc, #264]	@ (80049d4 <main+0x7d4>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d049      	beq.n	8004964 <main+0x764>
	  						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80048d0:	2102      	movs	r1, #2
 80048d2:	4841      	ldr	r0, [pc, #260]	@ (80049d8 <main+0x7d8>)
 80048d4:	f002 fdae 	bl	8007434 <HAL_GPIO_ReadPin>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d142      	bne.n	8004964 <main+0x764>
	  						&& (basincVar)
 80048de:	4b3f      	ldr	r3, [pc, #252]	@ (80049dc <main+0x7dc>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d03e      	beq.n	8004964 <main+0x764>
	  						&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80048e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80048ea:	4837      	ldr	r0, [pc, #220]	@ (80049c8 <main+0x7c8>)
 80048ec:	f002 fda2 	bl	8007434 <HAL_GPIO_ReadPin>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d10e      	bne.n	8004914 <main+0x714>
	  						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80048f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80048fa:	4833      	ldr	r0, [pc, #204]	@ (80049c8 <main+0x7c8>)
 80048fc:	f002 fd9a 	bl	8007434 <HAL_GPIO_ReadPin>
 8004900:	4603      	mov	r3, r0
 8004902:	2b01      	cmp	r3, #1
 8004904:	d106      	bne.n	8004914 <main+0x714>
	  						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004906:	2140      	movs	r1, #64	@ 0x40
 8004908:	4833      	ldr	r0, [pc, #204]	@ (80049d8 <main+0x7d8>)
 800490a:	f002 fd93 	bl	8007434 <HAL_GPIO_ReadPin>
 800490e:	4603      	mov	r3, r0
 8004910:	2b01      	cmp	r3, #1
 8004912:	d003      	beq.n	800491c <main+0x71c>
 8004914:	4b23      	ldr	r3, [pc, #140]	@ (80049a4 <main+0x7a4>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d023      	beq.n	8004964 <main+0x764>
	  						&& (asagivalfcalisiyor==0)
 800491c:	4b23      	ldr	r3, [pc, #140]	@ (80049ac <main+0x7ac>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d11f      	bne.n	8004964 <main+0x764>
	  						&& (devmotoryukaricalisiyor==0)
 8004924:	4b20      	ldr	r3, [pc, #128]	@ (80049a8 <main+0x7a8>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	f083 0301 	eor.w	r3, r3, #1
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d018      	beq.n	8004964 <main+0x764>
	  						&& (devmotorasagicalisiyor==0)
 8004932:	4b21      	ldr	r3, [pc, #132]	@ (80049b8 <main+0x7b8>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	f083 0301 	eor.w	r3, r3, #1
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d011      	beq.n	8004964 <main+0x764>
	  						&&(devyukarivalfcalisiyor==0)
 8004940:	4b27      	ldr	r3, [pc, #156]	@ (80049e0 <main+0x7e0>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	f083 0301 	eor.w	r3, r3, #1
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <main+0x764>
	  						&&(devasagivalfcalisiyor==0)) {
 800494e:	4b25      	ldr	r3, [pc, #148]	@ (80049e4 <main+0x7e4>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	f083 0301 	eor.w	r3, r3, #1
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <main+0x764>
	  				yukarimotorcalisiyor=1;
 800495c:	4b11      	ldr	r3, [pc, #68]	@ (80049a4 <main+0x7a4>)
 800495e:	2201      	movs	r2, #1
 8004960:	701a      	strb	r2, [r3, #0]
 8004962:	e002      	b.n	800496a <main+0x76a>
	  			} else {
	  				yukarimotorcalisiyor=0;
 8004964:	4b0f      	ldr	r3, [pc, #60]	@ (80049a4 <main+0x7a4>)
 8004966:	2200      	movs	r2, #0
 8004968:	701a      	strb	r2, [r3, #0]
	  			}

	  			if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800496a:	4b0e      	ldr	r3, [pc, #56]	@ (80049a4 <main+0x7a4>)
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d13c      	bne.n	80049ec <main+0x7ec>
 8004972:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004976:	4818      	ldr	r0, [pc, #96]	@ (80049d8 <main+0x7d8>)
 8004978:	f002 fd5c 	bl	8007434 <HAL_GPIO_ReadPin>
 800497c:	4603      	mov	r3, r0
 800497e:	2b01      	cmp	r3, #1
 8004980:	d134      	bne.n	80049ec <main+0x7ec>
 8004982:	4b19      	ldr	r3, [pc, #100]	@ (80049e8 <main+0x7e8>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d030      	beq.n	80049ec <main+0x7ec>
	  				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800498a:	2201      	movs	r2, #1
 800498c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004990:	480d      	ldr	r0, [pc, #52]	@ (80049c8 <main+0x7c8>)
 8004992:	f002 fd66 	bl	8007462 <HAL_GPIO_WritePin>
 8004996:	e02f      	b.n	80049f8 <main+0x7f8>
 8004998:	2000011c 	.word	0x2000011c
 800499c:	200000e8 	.word	0x200000e8
 80049a0:	200000e7 	.word	0x200000e7
 80049a4:	200000fe 	.word	0x200000fe
 80049a8:	200000ff 	.word	0x200000ff
 80049ac:	20000101 	.word	0x20000101
 80049b0:	200000f9 	.word	0x200000f9
 80049b4:	200000dd 	.word	0x200000dd
 80049b8:	20000100 	.word	0x20000100
 80049bc:	200000dc 	.word	0x200000dc
 80049c0:	2000011b 	.word	0x2000011b
 80049c4:	2000012e 	.word	0x2000012e
 80049c8:	40010c00 	.word	0x40010c00
 80049cc:	2000011d 	.word	0x2000011d
 80049d0:	20000108 	.word	0x20000108
 80049d4:	20000105 	.word	0x20000105
 80049d8:	40011000 	.word	0x40011000
 80049dc:	200000cd 	.word	0x200000cd
 80049e0:	20000103 	.word	0x20000103
 80049e4:	20000104 	.word	0x20000104
 80049e8:	200000d8 	.word	0x200000d8
	  			} else {
	  				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80049ec:	2200      	movs	r2, #0
 80049ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80049f2:	4865      	ldr	r0, [pc, #404]	@ (8004b88 <main+0x988>)
 80049f4:	f002 fd35 	bl	8007462 <HAL_GPIO_WritePin>
	  			}

	  			if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80049f8:	4b64      	ldr	r3, [pc, #400]	@ (8004b8c <main+0x98c>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d013      	beq.n	8004a28 <main+0x828>
 8004a00:	4b63      	ldr	r3, [pc, #396]	@ (8004b90 <main+0x990>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d007      	beq.n	8004a18 <main+0x818>
 8004a08:	4b61      	ldr	r3, [pc, #388]	@ (8004b90 <main+0x990>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d003      	beq.n	8004a18 <main+0x818>
 8004a10:	4b60      	ldr	r3, [pc, #384]	@ (8004b94 <main+0x994>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d107      	bne.n	8004a28 <main+0x828>
	  				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004a18:	2201      	movs	r2, #1
 8004a1a:	2104      	movs	r1, #4
 8004a1c:	485a      	ldr	r0, [pc, #360]	@ (8004b88 <main+0x988>)
 8004a1e:	f002 fd20 	bl	8007462 <HAL_GPIO_WritePin>
	  				yukarivalfcalisiyor=1;
 8004a22:	4b5d      	ldr	r3, [pc, #372]	@ (8004b98 <main+0x998>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	701a      	strb	r2, [r3, #0]
	  			}

	  			// yukari valf timer calisması

	  			if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004a28:	4b5b      	ldr	r3, [pc, #364]	@ (8004b98 <main+0x998>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d033      	beq.n	8004a98 <main+0x898>
 8004a30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004a34:	4854      	ldr	r0, [pc, #336]	@ (8004b88 <main+0x988>)
 8004a36:	f002 fcfd 	bl	8007434 <HAL_GPIO_ReadPin>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d106      	bne.n	8004a4e <main+0x84e>
 8004a40:	4b56      	ldr	r3, [pc, #344]	@ (8004b9c <main+0x99c>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	f083 0301 	eor.w	r3, r3, #1
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <main+0x85c>
 8004a4e:	2102      	movs	r1, #2
 8004a50:	4853      	ldr	r0, [pc, #332]	@ (8004ba0 <main+0x9a0>)
 8004a52:	f002 fcef 	bl	8007434 <HAL_GPIO_ReadPin>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d11d      	bne.n	8004a98 <main+0x898>
 8004a5c:	4b51      	ldr	r3, [pc, #324]	@ (8004ba4 <main+0x9a4>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d103      	bne.n	8004a6c <main+0x86c>
 8004a64:	4b50      	ldr	r3, [pc, #320]	@ (8004ba8 <main+0x9a8>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d015      	beq.n	8004a98 <main+0x898>
 8004a6c:	4b4f      	ldr	r3, [pc, #316]	@ (8004bac <main+0x9ac>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d011      	beq.n	8004a98 <main+0x898>
 8004a74:	4b4e      	ldr	r3, [pc, #312]	@ (8004bb0 <main+0x9b0>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00d      	beq.n	8004a98 <main+0x898>
 8004a7c:	4b4d      	ldr	r3, [pc, #308]	@ (8004bb4 <main+0x9b4>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	f083 0301 	eor.w	r3, r3, #1
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d006      	beq.n	8004a98 <main+0x898>
	  				timer2=millis;
 8004a8a:	4b4b      	ldr	r3, [pc, #300]	@ (8004bb8 <main+0x9b8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a4b      	ldr	r2, [pc, #300]	@ (8004bbc <main+0x9bc>)
 8004a90:	6013      	str	r3, [r2, #0]
	  				butonKontrol3=1;
 8004a92:	4b48      	ldr	r3, [pc, #288]	@ (8004bb4 <main+0x9b4>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	701a      	strb	r2, [r3, #0]
	  			}

	  			if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8004a98:	4b47      	ldr	r3, [pc, #284]	@ (8004bb8 <main+0x9b8>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b47      	ldr	r3, [pc, #284]	@ (8004bbc <main+0x9bc>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	4a47      	ldr	r2, [pc, #284]	@ (8004bc0 <main+0x9c0>)
 8004aa4:	7812      	ldrb	r2, [r2, #0]
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d303      	bcc.n	8004ab2 <main+0x8b2>
 8004aaa:	4b42      	ldr	r3, [pc, #264]	@ (8004bb4 <main+0x9b4>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d118      	bne.n	8004ae4 <main+0x8e4>
 8004ab2:	4b3c      	ldr	r3, [pc, #240]	@ (8004ba4 <main+0x9a4>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	f083 0301 	eor.w	r3, r3, #1
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d006      	beq.n	8004ace <main+0x8ce>
 8004ac0:	4b39      	ldr	r3, [pc, #228]	@ (8004ba8 <main+0x9a8>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	f083 0301 	eor.w	r3, r3, #1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10a      	bne.n	8004ae4 <main+0x8e4>
 8004ace:	4b37      	ldr	r3, [pc, #220]	@ (8004bac <main+0x9ac>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	f083 0301 	eor.w	r3, r3, #1
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d103      	bne.n	8004ae4 <main+0x8e4>
 8004adc:	4b34      	ldr	r3, [pc, #208]	@ (8004bb0 <main+0x9b0>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <main+0x8fa>
	  				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2104      	movs	r1, #4
 8004ae8:	4827      	ldr	r0, [pc, #156]	@ (8004b88 <main+0x988>)
 8004aea:	f002 fcba 	bl	8007462 <HAL_GPIO_WritePin>
	  				yukarivalfcalisiyor=0;
 8004aee:	4b2a      	ldr	r3, [pc, #168]	@ (8004b98 <main+0x998>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	701a      	strb	r2, [r3, #0]
	  				butonKontrol3=0;
 8004af4:	4b2f      	ldr	r3, [pc, #188]	@ (8004bb4 <main+0x9b4>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
	  			}

	  			//Ond safety

	  			if(emniyetCercevesi==0) {
 8004afa:	4b32      	ldr	r3, [pc, #200]	@ (8004bc4 <main+0x9c4>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d102      	bne.n	8004b08 <main+0x908>
	  				cerceveVar=1;
 8004b02:	4b31      	ldr	r3, [pc, #196]	@ (8004bc8 <main+0x9c8>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
	  			}

	  			if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004b08:	4b2e      	ldr	r3, [pc, #184]	@ (8004bc4 <main+0x9c4>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d116      	bne.n	8004b3e <main+0x93e>
 8004b10:	4b2e      	ldr	r3, [pc, #184]	@ (8004bcc <main+0x9cc>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d112      	bne.n	8004b3e <main+0x93e>
 8004b18:	2101      	movs	r1, #1
 8004b1a:	4821      	ldr	r0, [pc, #132]	@ (8004ba0 <main+0x9a0>)
 8004b1c:	f002 fc8a 	bl	8007434 <HAL_GPIO_ReadPin>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10b      	bne.n	8004b3e <main+0x93e>
 8004b26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004b2a:	4817      	ldr	r0, [pc, #92]	@ (8004b88 <main+0x988>)
 8004b2c:	f002 fc82 	bl	8007434 <HAL_GPIO_ReadPin>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d103      	bne.n	8004b3e <main+0x93e>
	  				cerceveVar=1;
 8004b36:	4b24      	ldr	r3, [pc, #144]	@ (8004bc8 <main+0x9c8>)
 8004b38:	2201      	movs	r2, #1
 8004b3a:	701a      	strb	r2, [r3, #0]
 8004b3c:	e011      	b.n	8004b62 <main+0x962>
	  			} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004b3e:	4b21      	ldr	r3, [pc, #132]	@ (8004bc4 <main+0x9c4>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d10d      	bne.n	8004b62 <main+0x962>
 8004b46:	2101      	movs	r1, #1
 8004b48:	4815      	ldr	r0, [pc, #84]	@ (8004ba0 <main+0x9a0>)
 8004b4a:	f002 fc73 	bl	8007434 <HAL_GPIO_ReadPin>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d106      	bne.n	8004b62 <main+0x962>
 8004b54:	4b1d      	ldr	r3, [pc, #116]	@ (8004bcc <main+0x9cc>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d102      	bne.n	8004b62 <main+0x962>
	  				cerceveVar=0;
 8004b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004bc8 <main+0x9c8>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	701a      	strb	r2, [r3, #0]
	  			}

	  			if (emniyetCercevesi==1 && calismaSekli==1) {
 8004b62:	4b18      	ldr	r3, [pc, #96]	@ (8004bc4 <main+0x9c4>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d135      	bne.n	8004bd6 <main+0x9d6>
 8004b6a:	4b18      	ldr	r3, [pc, #96]	@ (8004bcc <main+0x9cc>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d131      	bne.n	8004bd6 <main+0x9d6>
	  				if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004b72:	2101      	movs	r1, #1
 8004b74:	480a      	ldr	r0, [pc, #40]	@ (8004ba0 <main+0x9a0>)
 8004b76:	f002 fc5d 	bl	8007434 <HAL_GPIO_ReadPin>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d127      	bne.n	8004bd0 <main+0x9d0>
	  					cerceveVar=1;
 8004b80:	4b11      	ldr	r3, [pc, #68]	@ (8004bc8 <main+0x9c8>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	701a      	strb	r2, [r3, #0]
 8004b86:	e026      	b.n	8004bd6 <main+0x9d6>
 8004b88:	40010c00 	.word	0x40010c00
 8004b8c:	200000fe 	.word	0x200000fe
 8004b90:	200000d9 	.word	0x200000d9
 8004b94:	200000dd 	.word	0x200000dd
 8004b98:	20000102 	.word	0x20000102
 8004b9c:	20000105 	.word	0x20000105
 8004ba0:	40011000 	.word	0x40011000
 8004ba4:	2000011b 	.word	0x2000011b
 8004ba8:	2000012e 	.word	0x2000012e
 8004bac:	2000011c 	.word	0x2000011c
 8004bb0:	200000cd 	.word	0x200000cd
 8004bb4:	200000fa 	.word	0x200000fa
 8004bb8:	200000a8 	.word	0x200000a8
 8004bbc:	200000b4 	.word	0x200000b4
 8004bc0:	200000de 	.word	0x200000de
 8004bc4:	200000ce 	.word	0x200000ce
 8004bc8:	20000120 	.word	0x20000120
 8004bcc:	200000cb 	.word	0x200000cb
	  				} else {
	  					cerceveVar=0;
 8004bd0:	4b7d      	ldr	r3, [pc, #500]	@ (8004dc8 <main+0xbc8>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	701a      	strb	r2, [r3, #0]
	  				}
	  			}

	  			//Asagi calisma
	  			if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004bd6:	4b7d      	ldr	r3, [pc, #500]	@ (8004dcc <main+0xbcc>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d179      	bne.n	8004cd2 <main+0xad2>
 8004bde:	4b7c      	ldr	r3, [pc, #496]	@ (8004dd0 <main+0xbd0>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d075      	beq.n	8004cd2 <main+0xad2>
 8004be6:	4b7b      	ldr	r3, [pc, #492]	@ (8004dd4 <main+0xbd4>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d071      	beq.n	8004cd2 <main+0xad2>
	  					&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004bee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004bf2:	4879      	ldr	r0, [pc, #484]	@ (8004dd8 <main+0xbd8>)
 8004bf4:	f002 fc1e 	bl	8007434 <HAL_GPIO_ReadPin>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <main+0xa06>
 8004bfe:	4b77      	ldr	r3, [pc, #476]	@ (8004ddc <main+0xbdc>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d065      	beq.n	8004cd2 <main+0xad2>
	  					&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004c06:	4b70      	ldr	r3, [pc, #448]	@ (8004dc8 <main+0xbc8>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d061      	beq.n	8004cd2 <main+0xad2>
 8004c0e:	4b74      	ldr	r3, [pc, #464]	@ (8004de0 <main+0xbe0>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	f083 0301 	eor.w	r3, r3, #1
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d05a      	beq.n	8004cd2 <main+0xad2>
	  					&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004c1c:	2104      	movs	r1, #4
 8004c1e:	4871      	ldr	r0, [pc, #452]	@ (8004de4 <main+0xbe4>)
 8004c20:	f002 fc08 	bl	8007434 <HAL_GPIO_ReadPin>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <main+0xa32>
 8004c2a:	4b6f      	ldr	r3, [pc, #444]	@ (8004de8 <main+0xbe8>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d14f      	bne.n	8004cd2 <main+0xad2>
	  					&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004c32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004c36:	4868      	ldr	r0, [pc, #416]	@ (8004dd8 <main+0xbd8>)
 8004c38:	f002 fbfc 	bl	8007434 <HAL_GPIO_ReadPin>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d10e      	bne.n	8004c60 <main+0xa60>
	  					&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004c42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c46:	4864      	ldr	r0, [pc, #400]	@ (8004dd8 <main+0xbd8>)
 8004c48:	f002 fbf4 	bl	8007434 <HAL_GPIO_ReadPin>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d106      	bne.n	8004c60 <main+0xa60>
	  					&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004c52:	2140      	movs	r1, #64	@ 0x40
 8004c54:	4863      	ldr	r0, [pc, #396]	@ (8004de4 <main+0xbe4>)
 8004c56:	f002 fbed 	bl	8007434 <HAL_GPIO_ReadPin>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d003      	beq.n	8004c68 <main+0xa68>
 8004c60:	4b62      	ldr	r3, [pc, #392]	@ (8004dec <main+0xbec>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d034      	beq.n	8004cd2 <main+0xad2>
	  					&& (yukarimotorcalisiyor==0)
 8004c68:	4b61      	ldr	r3, [pc, #388]	@ (8004df0 <main+0xbf0>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d130      	bne.n	8004cd2 <main+0xad2>
	  					&& (yukarivalfcalisiyor==0)
 8004c70:	4b60      	ldr	r3, [pc, #384]	@ (8004df4 <main+0xbf4>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	f083 0301 	eor.w	r3, r3, #1
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d029      	beq.n	8004cd2 <main+0xad2>
	  			  	  	&& (devmotoryukaricalisiyor==0)
 8004c7e:	4b5e      	ldr	r3, [pc, #376]	@ (8004df8 <main+0xbf8>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	f083 0301 	eor.w	r3, r3, #1
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d022      	beq.n	8004cd2 <main+0xad2>
	  					&& (devmotorasagicalisiyor==0)
 8004c8c:	4b5b      	ldr	r3, [pc, #364]	@ (8004dfc <main+0xbfc>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	f083 0301 	eor.w	r3, r3, #1
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d01b      	beq.n	8004cd2 <main+0xad2>
	  					&& (devyukarivalfcalisiyor==0)
 8004c9a:	4b59      	ldr	r3, [pc, #356]	@ (8004e00 <main+0xc00>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	f083 0301 	eor.w	r3, r3, #1
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d014      	beq.n	8004cd2 <main+0xad2>
	  					&& (devasagivalfcalisiyor==0)) {
 8004ca8:	4b56      	ldr	r3, [pc, #344]	@ (8004e04 <main+0xc04>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	f083 0301 	eor.w	r3, r3, #1
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00d      	beq.n	8004cd2 <main+0xad2>

	  				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	2102      	movs	r1, #2
 8004cba:	4847      	ldr	r0, [pc, #284]	@ (8004dd8 <main+0xbd8>)
 8004cbc:	f002 fbd1 	bl	8007462 <HAL_GPIO_WritePin>
	  				asagivalfcalisiyor=1;
 8004cc0:	4b4a      	ldr	r3, [pc, #296]	@ (8004dec <main+0xbec>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	701a      	strb	r2, [r3, #0]
	  				CalismaSayisiAsagi=1;
 8004cc6:	4b50      	ldr	r3, [pc, #320]	@ (8004e08 <main+0xc08>)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	701a      	strb	r2, [r3, #0]
	  				cercevesasagicalisma=1;
 8004ccc:	4b4f      	ldr	r3, [pc, #316]	@ (8004e0c <main+0xc0c>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]
	  			}

	  			// asagi valf timer calisması

	  			if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004cd2:	4b46      	ldr	r3, [pc, #280]	@ (8004dec <main+0xbec>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d133      	bne.n	8004d42 <main+0xb42>
 8004cda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004cde:	483e      	ldr	r0, [pc, #248]	@ (8004dd8 <main+0xbd8>)
 8004ce0:	f002 fba8 	bl	8007434 <HAL_GPIO_ReadPin>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d106      	bne.n	8004cf8 <main+0xaf8>
 8004cea:	4b3c      	ldr	r3, [pc, #240]	@ (8004ddc <main+0xbdc>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	f083 0301 	eor.w	r3, r3, #1
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <main+0xb0e>
 8004cf8:	2104      	movs	r1, #4
 8004cfa:	483a      	ldr	r0, [pc, #232]	@ (8004de4 <main+0xbe4>)
 8004cfc:	f002 fb9a 	bl	8007434 <HAL_GPIO_ReadPin>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d11d      	bne.n	8004d42 <main+0xb42>
 8004d06:	4b38      	ldr	r3, [pc, #224]	@ (8004de8 <main+0xbe8>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d019      	beq.n	8004d42 <main+0xb42>
 8004d0e:	4b30      	ldr	r3, [pc, #192]	@ (8004dd0 <main+0xbd0>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d015      	beq.n	8004d42 <main+0xb42>
 8004d16:	4b2f      	ldr	r3, [pc, #188]	@ (8004dd4 <main+0xbd4>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d011      	beq.n	8004d42 <main+0xb42>
 8004d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc8 <main+0xbc8>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00d      	beq.n	8004d42 <main+0xb42>
 8004d26:	4b3a      	ldr	r3, [pc, #232]	@ (8004e10 <main+0xc10>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	f083 0301 	eor.w	r3, r3, #1
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d006      	beq.n	8004d42 <main+0xb42>
	  				timer2=millis;
 8004d34:	4b37      	ldr	r3, [pc, #220]	@ (8004e14 <main+0xc14>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a37      	ldr	r2, [pc, #220]	@ (8004e18 <main+0xc18>)
 8004d3a:	6013      	str	r3, [r2, #0]
	  				butonKontrol2=1;
 8004d3c:	4b34      	ldr	r3, [pc, #208]	@ (8004e10 <main+0xc10>)
 8004d3e:	2201      	movs	r2, #1
 8004d40:	701a      	strb	r2, [r3, #0]
	  			}

	  			if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8004d42:	4b34      	ldr	r3, [pc, #208]	@ (8004e14 <main+0xc14>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4b34      	ldr	r3, [pc, #208]	@ (8004e18 <main+0xc18>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	4a33      	ldr	r2, [pc, #204]	@ (8004e1c <main+0xc1c>)
 8004d4e:	7812      	ldrb	r2, [r2, #0]
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d303      	bcc.n	8004d5c <main+0xb5c>
 8004d54:	4b2e      	ldr	r3, [pc, #184]	@ (8004e10 <main+0xc10>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d114      	bne.n	8004d86 <main+0xb86>
 8004d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8004dd0 <main+0xbd0>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	f083 0301 	eor.w	r3, r3, #1
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10d      	bne.n	8004d86 <main+0xb86>
 8004d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd4 <main+0xbd4>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	f083 0301 	eor.w	r3, r3, #1
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d106      	bne.n	8004d86 <main+0xb86>
 8004d78:	4b13      	ldr	r3, [pc, #76]	@ (8004dc8 <main+0xbc8>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	f083 0301 	eor.w	r3, r3, #1
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <main+0xb9c>
	  				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004d86:	2200      	movs	r2, #0
 8004d88:	2102      	movs	r1, #2
 8004d8a:	4813      	ldr	r0, [pc, #76]	@ (8004dd8 <main+0xbd8>)
 8004d8c:	f002 fb69 	bl	8007462 <HAL_GPIO_WritePin>
	  				asagivalfcalisiyor=0;
 8004d90:	4b16      	ldr	r3, [pc, #88]	@ (8004dec <main+0xbec>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	701a      	strb	r2, [r3, #0]
	  				butonKontrol2=0;
 8004d96:	4b1e      	ldr	r3, [pc, #120]	@ (8004e10 <main+0xc10>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	701a      	strb	r2, [r3, #0]
	  			}

	  			//yavaslama valf

	  			if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8004d9c:	4b13      	ldr	r3, [pc, #76]	@ (8004dec <main+0xbec>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d13f      	bne.n	8004e24 <main+0xc24>
 8004da4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004da8:	480e      	ldr	r0, [pc, #56]	@ (8004de4 <main+0xbe4>)
 8004daa:	f002 fb43 	bl	8007434 <HAL_GPIO_ReadPin>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d137      	bne.n	8004e24 <main+0xc24>
 8004db4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e20 <main+0xc20>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d033      	beq.n	8004e24 <main+0xc24>
	  				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	4805      	ldr	r0, [pc, #20]	@ (8004dd8 <main+0xbd8>)
 8004dc2:	f002 fb4e 	bl	8007462 <HAL_GPIO_WritePin>
 8004dc6:	e032      	b.n	8004e2e <main+0xc2e>
 8004dc8:	20000120 	.word	0x20000120
 8004dcc:	200000e7 	.word	0x200000e7
 8004dd0:	2000011b 	.word	0x2000011b
 8004dd4:	2000011c 	.word	0x2000011c
 8004dd8:	40010c00 	.word	0x40010c00
 8004ddc:	20000106 	.word	0x20000106
 8004de0:	2000011a 	.word	0x2000011a
 8004de4:	40011000 	.word	0x40011000
 8004de8:	200000d0 	.word	0x200000d0
 8004dec:	20000101 	.word	0x20000101
 8004df0:	200000fe 	.word	0x200000fe
 8004df4:	20000102 	.word	0x20000102
 8004df8:	200000ff 	.word	0x200000ff
 8004dfc:	20000100 	.word	0x20000100
 8004e00:	20000103 	.word	0x20000103
 8004e04:	20000104 	.word	0x20000104
 8004e08:	20000109 	.word	0x20000109
 8004e0c:	2000012a 	.word	0x2000012a
 8004e10:	200000f9 	.word	0x200000f9
 8004e14:	200000a8 	.word	0x200000a8
 8004e18:	200000b4 	.word	0x200000b4
 8004e1c:	200000df 	.word	0x200000df
 8004e20:	200000cf 	.word	0x200000cf
	  			} else {
	  				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004e24:	2200      	movs	r2, #0
 8004e26:	2101      	movs	r1, #1
 8004e28:	4895      	ldr	r0, [pc, #596]	@ (8005080 <main+0xe80>)
 8004e2a:	f002 fb1a 	bl	8007462 <HAL_GPIO_WritePin>
	  			}

	  			/*DEVIRME veya YURUYUS Baslangic*/

	  			// Devirme Yukari veya yuruyus ileri calisma
	  			if((menuGiris==0)
 8004e2e:	4b95      	ldr	r3, [pc, #596]	@ (8005084 <main+0xe84>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d15f      	bne.n	8004ef6 <main+0xcf6>
	  					&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004e36:	4b94      	ldr	r3, [pc, #592]	@ (8005088 <main+0xe88>)
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d003      	beq.n	8004e46 <main+0xc46>
 8004e3e:	4b92      	ldr	r3, [pc, #584]	@ (8005088 <main+0xe88>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d157      	bne.n	8004ef6 <main+0xcf6>
	  					&& (stopVar) && (kapiSivicVar)
 8004e46:	4b91      	ldr	r3, [pc, #580]	@ (800508c <main+0xe8c>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d053      	beq.n	8004ef6 <main+0xcf6>
 8004e4e:	4b90      	ldr	r3, [pc, #576]	@ (8005090 <main+0xe90>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d04f      	beq.n	8004ef6 <main+0xcf6>
	  					&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004e56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e5a:	4889      	ldr	r0, [pc, #548]	@ (8005080 <main+0xe80>)
 8004e5c:	f002 faea 	bl	8007434 <HAL_GPIO_ReadPin>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d147      	bne.n	8004ef6 <main+0xcf6>
	  					&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004e66:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004e6a:	488a      	ldr	r0, [pc, #552]	@ (8005094 <main+0xe94>)
 8004e6c:	f002 fae2 	bl	8007434 <HAL_GPIO_ReadPin>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <main+0xc7e>
 8004e76:	4b88      	ldr	r3, [pc, #544]	@ (8005098 <main+0xe98>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d13b      	bne.n	8004ef6 <main+0xcf6>
	  					&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8004e7e:	2140      	movs	r1, #64	@ 0x40
 8004e80:	4884      	ldr	r0, [pc, #528]	@ (8005094 <main+0xe94>)
 8004e82:	f002 fad7 	bl	8007434 <HAL_GPIO_ReadPin>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d10f      	bne.n	8004eac <main+0xcac>
	  					&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004e8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004e90:	487b      	ldr	r0, [pc, #492]	@ (8005080 <main+0xe80>)
 8004e92:	f002 facf 	bl	8007434 <HAL_GPIO_ReadPin>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d107      	bne.n	8004eac <main+0xcac>
	  					&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8004e9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004ea0:	4877      	ldr	r0, [pc, #476]	@ (8005080 <main+0xe80>)
 8004ea2:	f002 fac7 	bl	8007434 <HAL_GPIO_ReadPin>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d003      	beq.n	8004eb4 <main+0xcb4>
 8004eac:	4b7b      	ldr	r3, [pc, #492]	@ (800509c <main+0xe9c>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d020      	beq.n	8004ef6 <main+0xcf6>
	  					&& (yukarimotorcalisiyor==0)
 8004eb4:	4b7a      	ldr	r3, [pc, #488]	@ (80050a0 <main+0xea0>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d11c      	bne.n	8004ef6 <main+0xcf6>
	  					&& (yukarivalfcalisiyor==0)
 8004ebc:	4b79      	ldr	r3, [pc, #484]	@ (80050a4 <main+0xea4>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	f083 0301 	eor.w	r3, r3, #1
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d015      	beq.n	8004ef6 <main+0xcf6>
	  					&& (asagivalfcalisiyor==0)
 8004eca:	4b77      	ldr	r3, [pc, #476]	@ (80050a8 <main+0xea8>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d111      	bne.n	8004ef6 <main+0xcf6>
	  					&& (devmotorasagicalisiyor==0)
 8004ed2:	4b76      	ldr	r3, [pc, #472]	@ (80050ac <main+0xeac>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	f083 0301 	eor.w	r3, r3, #1
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <main+0xcf6>
	  					&&(devasagivalfcalisiyor==0)) {
 8004ee0:	4b73      	ldr	r3, [pc, #460]	@ (80050b0 <main+0xeb0>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	f083 0301 	eor.w	r3, r3, #1
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <main+0xcf6>

	  				devmotoryukaricalisiyor=1;
 8004eee:	4b6b      	ldr	r3, [pc, #428]	@ (800509c <main+0xe9c>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	e002      	b.n	8004efc <main+0xcfc>
	  			} else {
	  				devmotoryukaricalisiyor=0;
 8004ef6:	4b69      	ldr	r3, [pc, #420]	@ (800509c <main+0xe9c>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	701a      	strb	r2, [r3, #0]
	  			}

	  			if(devmotoryukaricalisiyor==1) {
 8004efc:	4b67      	ldr	r3, [pc, #412]	@ (800509c <main+0xe9c>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d007      	beq.n	8004f14 <main+0xd14>
	  				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004f04:	2201      	movs	r2, #1
 8004f06:	2120      	movs	r1, #32
 8004f08:	4862      	ldr	r0, [pc, #392]	@ (8005094 <main+0xe94>)
 8004f0a:	f002 faaa 	bl	8007462 <HAL_GPIO_WritePin>
	  				devyukarivalfcalisiyor=1;
 8004f0e:	4b69      	ldr	r3, [pc, #420]	@ (80050b4 <main+0xeb4>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]
	  			}
	  			// devirme yukari + yuruyus ileri valf timer calismasi

	  			if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004f14:	4b67      	ldr	r3, [pc, #412]	@ (80050b4 <main+0xeb4>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d025      	beq.n	8004f68 <main+0xd68>
 8004f1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f20:	4857      	ldr	r0, [pc, #348]	@ (8005080 <main+0xe80>)
 8004f22:	f002 fa87 	bl	8007434 <HAL_GPIO_ReadPin>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d007      	beq.n	8004f3c <main+0xd3c>
 8004f2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004f30:	4858      	ldr	r0, [pc, #352]	@ (8005094 <main+0xe94>)
 8004f32:	f002 fa7f 	bl	8007434 <HAL_GPIO_ReadPin>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d115      	bne.n	8004f68 <main+0xd68>
 8004f3c:	4b53      	ldr	r3, [pc, #332]	@ (800508c <main+0xe8c>)
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d011      	beq.n	8004f68 <main+0xd68>
 8004f44:	4b52      	ldr	r3, [pc, #328]	@ (8005090 <main+0xe90>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00d      	beq.n	8004f68 <main+0xd68>
 8004f4c:	4b5a      	ldr	r3, [pc, #360]	@ (80050b8 <main+0xeb8>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	f083 0301 	eor.w	r3, r3, #1
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d006      	beq.n	8004f68 <main+0xd68>
	  				timer2=millis;
 8004f5a:	4b58      	ldr	r3, [pc, #352]	@ (80050bc <main+0xebc>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a58      	ldr	r2, [pc, #352]	@ (80050c0 <main+0xec0>)
 8004f60:	6013      	str	r3, [r2, #0]
	  				butonKontrol4=1;
 8004f62:	4b55      	ldr	r3, [pc, #340]	@ (80050b8 <main+0xeb8>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	701a      	strb	r2, [r3, #0]
	  			}

	  			if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004f68:	4b54      	ldr	r3, [pc, #336]	@ (80050bc <main+0xebc>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	4b54      	ldr	r3, [pc, #336]	@ (80050c0 <main+0xec0>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	4a54      	ldr	r2, [pc, #336]	@ (80050c4 <main+0xec4>)
 8004f74:	7812      	ldrb	r2, [r2, #0]
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d303      	bcc.n	8004f82 <main+0xd82>
 8004f7a:	4b4f      	ldr	r3, [pc, #316]	@ (80050b8 <main+0xeb8>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10d      	bne.n	8004f9e <main+0xd9e>
 8004f82:	4b42      	ldr	r3, [pc, #264]	@ (800508c <main+0xe8c>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	f083 0301 	eor.w	r3, r3, #1
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <main+0xd9e>
 8004f90:	4b3f      	ldr	r3, [pc, #252]	@ (8005090 <main+0xe90>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	f083 0301 	eor.w	r3, r3, #1
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <main+0xdb4>
	  				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	2120      	movs	r1, #32
 8004fa2:	483c      	ldr	r0, [pc, #240]	@ (8005094 <main+0xe94>)
 8004fa4:	f002 fa5d 	bl	8007462 <HAL_GPIO_WritePin>
	  				devyukarivalfcalisiyor=0;
 8004fa8:	4b42      	ldr	r3, [pc, #264]	@ (80050b4 <main+0xeb4>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	701a      	strb	r2, [r3, #0]
	  				butonKontrol4=0;
 8004fae:	4b42      	ldr	r3, [pc, #264]	@ (80050b8 <main+0xeb8>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	701a      	strb	r2, [r3, #0]
	  			}

	  			// Devirme Asagi veya yuruyus geri calisma

	  			if((menuGiris==0)
 8004fb4:	4b33      	ldr	r3, [pc, #204]	@ (8005084 <main+0xe84>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f040 8087 	bne.w	80050cc <main+0xecc>
	  					&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004fbe:	4b32      	ldr	r3, [pc, #200]	@ (8005088 <main+0xe88>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d003      	beq.n	8004fce <main+0xdce>
 8004fc6:	4b30      	ldr	r3, [pc, #192]	@ (8005088 <main+0xe88>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d17e      	bne.n	80050cc <main+0xecc>
	  					&& (stopVar) && (kapiSivicVar)
 8004fce:	4b2f      	ldr	r3, [pc, #188]	@ (800508c <main+0xe8c>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d07a      	beq.n	80050cc <main+0xecc>
 8004fd6:	4b2e      	ldr	r3, [pc, #184]	@ (8005090 <main+0xe90>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d076      	beq.n	80050cc <main+0xecc>
	  					&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004fde:	2140      	movs	r1, #64	@ 0x40
 8004fe0:	482c      	ldr	r0, [pc, #176]	@ (8005094 <main+0xe94>)
 8004fe2:	f002 fa27 	bl	8007434 <HAL_GPIO_ReadPin>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d16f      	bne.n	80050cc <main+0xecc>
	  					&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004fec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004ff0:	4828      	ldr	r0, [pc, #160]	@ (8005094 <main+0xe94>)
 8004ff2:	f002 fa1f 	bl	8007434 <HAL_GPIO_ReadPin>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <main+0xe04>
 8004ffc:	4b32      	ldr	r3, [pc, #200]	@ (80050c8 <main+0xec8>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d163      	bne.n	80050cc <main+0xecc>
	  					&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005004:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005008:	481d      	ldr	r0, [pc, #116]	@ (8005080 <main+0xe80>)
 800500a:	f002 fa13 	bl	8007434 <HAL_GPIO_ReadPin>
 800500e:	4603      	mov	r3, r0
 8005010:	2b01      	cmp	r3, #1
 8005012:	d10f      	bne.n	8005034 <main+0xe34>
	  					&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005014:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005018:	4819      	ldr	r0, [pc, #100]	@ (8005080 <main+0xe80>)
 800501a:	f002 fa0b 	bl	8007434 <HAL_GPIO_ReadPin>
 800501e:	4603      	mov	r3, r0
 8005020:	2b01      	cmp	r3, #1
 8005022:	d107      	bne.n	8005034 <main+0xe34>
	  					&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005024:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005028:	4815      	ldr	r0, [pc, #84]	@ (8005080 <main+0xe80>)
 800502a:	f002 fa03 	bl	8007434 <HAL_GPIO_ReadPin>
 800502e:	4603      	mov	r3, r0
 8005030:	2b01      	cmp	r3, #1
 8005032:	d003      	beq.n	800503c <main+0xe3c>
 8005034:	4b1d      	ldr	r3, [pc, #116]	@ (80050ac <main+0xeac>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d047      	beq.n	80050cc <main+0xecc>
	  					&& (yukarimotorcalisiyor==0)
 800503c:	4b18      	ldr	r3, [pc, #96]	@ (80050a0 <main+0xea0>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d143      	bne.n	80050cc <main+0xecc>
	  					&& (yukarivalfcalisiyor==0)
 8005044:	4b17      	ldr	r3, [pc, #92]	@ (80050a4 <main+0xea4>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	f083 0301 	eor.w	r3, r3, #1
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d03c      	beq.n	80050cc <main+0xecc>
	  					&& (asagivalfcalisiyor==0)
 8005052:	4b15      	ldr	r3, [pc, #84]	@ (80050a8 <main+0xea8>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d138      	bne.n	80050cc <main+0xecc>
	  					&& (devyukarivalfcalisiyor==0)
 800505a:	4b16      	ldr	r3, [pc, #88]	@ (80050b4 <main+0xeb4>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	f083 0301 	eor.w	r3, r3, #1
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d031      	beq.n	80050cc <main+0xecc>
	  					&& (devmotoryukaricalisiyor==0)) {
 8005068:	4b0c      	ldr	r3, [pc, #48]	@ (800509c <main+0xe9c>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	f083 0301 	eor.w	r3, r3, #1
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d02a      	beq.n	80050cc <main+0xecc>

	  				devmotorasagicalisiyor=1;
 8005076:	4b0d      	ldr	r3, [pc, #52]	@ (80050ac <main+0xeac>)
 8005078:	2201      	movs	r2, #1
 800507a:	701a      	strb	r2, [r3, #0]
 800507c:	e029      	b.n	80050d2 <main+0xed2>
 800507e:	bf00      	nop
 8005080:	40010c00 	.word	0x40010c00
 8005084:	200000e7 	.word	0x200000e7
 8005088:	200000d9 	.word	0x200000d9
 800508c:	2000011b 	.word	0x2000011b
 8005090:	2000011c 	.word	0x2000011c
 8005094:	40011000 	.word	0x40011000
 8005098:	200000da 	.word	0x200000da
 800509c:	200000ff 	.word	0x200000ff
 80050a0:	200000fe 	.word	0x200000fe
 80050a4:	20000102 	.word	0x20000102
 80050a8:	20000101 	.word	0x20000101
 80050ac:	20000100 	.word	0x20000100
 80050b0:	20000104 	.word	0x20000104
 80050b4:	20000103 	.word	0x20000103
 80050b8:	200000fb 	.word	0x200000fb
 80050bc:	200000a8 	.word	0x200000a8
 80050c0:	200000b4 	.word	0x200000b4
 80050c4:	200000e0 	.word	0x200000e0
 80050c8:	200000db 	.word	0x200000db
	  			} else {
	  				devmotorasagicalisiyor=0;
 80050cc:	4b96      	ldr	r3, [pc, #600]	@ (8005328 <main+0x1128>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]
	  			}

	  			if(devmotorasagicalisiyor==1) {
 80050d2:	4b95      	ldr	r3, [pc, #596]	@ (8005328 <main+0x1128>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d007      	beq.n	80050ea <main+0xeea>
	  				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80050da:	2201      	movs	r2, #1
 80050dc:	2110      	movs	r1, #16
 80050de:	4893      	ldr	r0, [pc, #588]	@ (800532c <main+0x112c>)
 80050e0:	f002 f9bf 	bl	8007462 <HAL_GPIO_WritePin>
	  				devasagivalfcalisiyor=1;
 80050e4:	4b92      	ldr	r3, [pc, #584]	@ (8005330 <main+0x1130>)
 80050e6:	2201      	movs	r2, #1
 80050e8:	701a      	strb	r2, [r3, #0]
	  			}

	  			//devirme asagi + geri valf timer calismasi

	  			if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80050ea:	4b91      	ldr	r3, [pc, #580]	@ (8005330 <main+0x1130>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d024      	beq.n	800513c <main+0xf3c>
 80050f2:	2140      	movs	r1, #64	@ 0x40
 80050f4:	488d      	ldr	r0, [pc, #564]	@ (800532c <main+0x112c>)
 80050f6:	f002 f99d 	bl	8007434 <HAL_GPIO_ReadPin>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d007      	beq.n	8005110 <main+0xf10>
 8005100:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005104:	4889      	ldr	r0, [pc, #548]	@ (800532c <main+0x112c>)
 8005106:	f002 f995 	bl	8007434 <HAL_GPIO_ReadPin>
 800510a:	4603      	mov	r3, r0
 800510c:	2b01      	cmp	r3, #1
 800510e:	d115      	bne.n	800513c <main+0xf3c>
 8005110:	4b88      	ldr	r3, [pc, #544]	@ (8005334 <main+0x1134>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d011      	beq.n	800513c <main+0xf3c>
 8005118:	4b87      	ldr	r3, [pc, #540]	@ (8005338 <main+0x1138>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00d      	beq.n	800513c <main+0xf3c>
 8005120:	4b86      	ldr	r3, [pc, #536]	@ (800533c <main+0x113c>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	f083 0301 	eor.w	r3, r3, #1
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d006      	beq.n	800513c <main+0xf3c>
	  				timer2=millis;
 800512e:	4b84      	ldr	r3, [pc, #528]	@ (8005340 <main+0x1140>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a84      	ldr	r2, [pc, #528]	@ (8005344 <main+0x1144>)
 8005134:	6013      	str	r3, [r2, #0]
	  				butonKontrol5=1;
 8005136:	4b81      	ldr	r3, [pc, #516]	@ (800533c <main+0x113c>)
 8005138:	2201      	movs	r2, #1
 800513a:	701a      	strb	r2, [r3, #0]
	  			}

	  			if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800513c:	4b80      	ldr	r3, [pc, #512]	@ (8005340 <main+0x1140>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	4b80      	ldr	r3, [pc, #512]	@ (8005344 <main+0x1144>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	4a80      	ldr	r2, [pc, #512]	@ (8005348 <main+0x1148>)
 8005148:	7812      	ldrb	r2, [r2, #0]
 800514a:	4293      	cmp	r3, r2
 800514c:	d303      	bcc.n	8005156 <main+0xf56>
 800514e:	4b7b      	ldr	r3, [pc, #492]	@ (800533c <main+0x113c>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10d      	bne.n	8005172 <main+0xf72>
 8005156:	4b77      	ldr	r3, [pc, #476]	@ (8005334 <main+0x1134>)
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	f083 0301 	eor.w	r3, r3, #1
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <main+0xf72>
 8005164:	4b74      	ldr	r3, [pc, #464]	@ (8005338 <main+0x1138>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	f083 0301 	eor.w	r3, r3, #1
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <main+0xf88>
	  				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005172:	2200      	movs	r2, #0
 8005174:	2110      	movs	r1, #16
 8005176:	486d      	ldr	r0, [pc, #436]	@ (800532c <main+0x112c>)
 8005178:	f002 f973 	bl	8007462 <HAL_GPIO_WritePin>
	  				devasagivalfcalisiyor=0;
 800517c:	4b6c      	ldr	r3, [pc, #432]	@ (8005330 <main+0x1130>)
 800517e:	2200      	movs	r2, #0
 8005180:	701a      	strb	r2, [r3, #0]
	  				butonKontrol5=0;
 8005182:	4b6e      	ldr	r3, [pc, #440]	@ (800533c <main+0x113c>)
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
	  			}

	  			// makine durum kontrolü

	  			if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005188:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800518c:	486f      	ldr	r0, [pc, #444]	@ (800534c <main+0x114c>)
 800518e:	f002 f951 	bl	8007434 <HAL_GPIO_ReadPin>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d120      	bne.n	80051da <main+0xfda>
	  					&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005198:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800519c:	486b      	ldr	r0, [pc, #428]	@ (800534c <main+0x114c>)
 800519e:	f002 f949 	bl	8007434 <HAL_GPIO_ReadPin>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d118      	bne.n	80051da <main+0xfda>
	  					&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80051a8:	2104      	movs	r1, #4
 80051aa:	4868      	ldr	r0, [pc, #416]	@ (800534c <main+0x114c>)
 80051ac:	f002 f942 	bl	8007434 <HAL_GPIO_ReadPin>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d111      	bne.n	80051da <main+0xfda>
	  					&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80051b6:	2102      	movs	r1, #2
 80051b8:	4864      	ldr	r0, [pc, #400]	@ (800534c <main+0x114c>)
 80051ba:	f002 f93b 	bl	8007434 <HAL_GPIO_ReadPin>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <main+0xfda>
	  					&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80051c4:	2101      	movs	r1, #1
 80051c6:	4861      	ldr	r0, [pc, #388]	@ (800534c <main+0x114c>)
 80051c8:	f002 f934 	bl	8007434 <HAL_GPIO_ReadPin>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d103      	bne.n	80051da <main+0xfda>
	  				makineStop=1;
 80051d2:	4b5f      	ldr	r3, [pc, #380]	@ (8005350 <main+0x1150>)
 80051d4:	2201      	movs	r2, #1
 80051d6:	701a      	strb	r2, [r3, #0]
 80051d8:	e002      	b.n	80051e0 <main+0xfe0>
	  			} else {
	  				makineStop=0;
 80051da:	4b5d      	ldr	r3, [pc, #372]	@ (8005350 <main+0x1150>)
 80051dc:	2200      	movs	r2, #0
 80051de:	701a      	strb	r2, [r3, #0]
	  			}

	  			//kapi 1 kontrol

	  			// kapi 1 prudhome
	  			if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80051e0:	4b5c      	ldr	r3, [pc, #368]	@ (8005354 <main+0x1154>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d144      	bne.n	8005272 <main+0x1072>
 80051e8:	4b5b      	ldr	r3, [pc, #364]	@ (8005358 <main+0x1158>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d003      	beq.n	80051f8 <main+0xff8>
 80051f0:	4b59      	ldr	r3, [pc, #356]	@ (8005358 <main+0x1158>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d13c      	bne.n	8005272 <main+0x1072>
	  					&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80051f8:	2180      	movs	r1, #128	@ 0x80
 80051fa:	484c      	ldr	r0, [pc, #304]	@ (800532c <main+0x112c>)
 80051fc:	f002 f91a 	bl	8007434 <HAL_GPIO_ReadPin>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d103      	bne.n	800520e <main+0x100e>
 8005206:	4b55      	ldr	r3, [pc, #340]	@ (800535c <main+0x115c>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00b      	beq.n	8005226 <main+0x1026>
 800520e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005212:	484e      	ldr	r0, [pc, #312]	@ (800534c <main+0x114c>)
 8005214:	f002 f90e 	bl	8007434 <HAL_GPIO_ReadPin>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d129      	bne.n	8005272 <main+0x1072>
 800521e:	4b4f      	ldr	r3, [pc, #316]	@ (800535c <main+0x115c>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d125      	bne.n	8005272 <main+0x1072>
	  					&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005226:	2104      	movs	r1, #4
 8005228:	4840      	ldr	r0, [pc, #256]	@ (800532c <main+0x112c>)
 800522a:	f002 f903 	bl	8007434 <HAL_GPIO_ReadPin>
 800522e:	4603      	mov	r3, r0
 8005230:	2b01      	cmp	r3, #1
 8005232:	d003      	beq.n	800523c <main+0x103c>
 8005234:	4b4a      	ldr	r3, [pc, #296]	@ (8005360 <main+0x1160>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d11a      	bne.n	8005272 <main+0x1072>
	  					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800523c:	2102      	movs	r1, #2
 800523e:	483b      	ldr	r0, [pc, #236]	@ (800532c <main+0x112c>)
 8005240:	f002 f8f8 	bl	8007434 <HAL_GPIO_ReadPin>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d113      	bne.n	8005272 <main+0x1072>
	  					&&(butonKontrol==0)
 800524a:	4b46      	ldr	r3, [pc, #280]	@ (8005364 <main+0x1164>)
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	f083 0301 	eor.w	r3, r3, #1
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00c      	beq.n	8005272 <main+0x1072>
	  					&&(makineStop==1)) {
 8005258:	4b3d      	ldr	r3, [pc, #244]	@ (8005350 <main+0x1150>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <main+0x1072>

	  				kapi1prudhome=1;
 8005260:	4b41      	ldr	r3, [pc, #260]	@ (8005368 <main+0x1168>)
 8005262:	2201      	movs	r2, #1
 8005264:	701a      	strb	r2, [r3, #0]
	  				timer = millis;
 8005266:	4b36      	ldr	r3, [pc, #216]	@ (8005340 <main+0x1140>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a40      	ldr	r2, [pc, #256]	@ (800536c <main+0x116c>)
 800526c:	6013      	str	r3, [r2, #0]
	  				bekle();
 800526e:	f7fe fa6f 	bl	8003750 <bekle>
	  			}

	  			if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005272:	4b33      	ldr	r3, [pc, #204]	@ (8005340 <main+0x1140>)
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b3d      	ldr	r3, [pc, #244]	@ (800536c <main+0x116c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	4a3c      	ldr	r2, [pc, #240]	@ (8005370 <main+0x1170>)
 800527e:	7812      	ldrb	r2, [r2, #0]
 8005280:	4293      	cmp	r3, r2
 8005282:	d211      	bcs.n	80052a8 <main+0x10a8>
 8005284:	2104      	movs	r1, #4
 8005286:	4829      	ldr	r0, [pc, #164]	@ (800532c <main+0x112c>)
 8005288:	f002 f8d4 	bl	8007434 <HAL_GPIO_ReadPin>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <main+0x10a8>
 8005292:	4b33      	ldr	r3, [pc, #204]	@ (8005360 <main+0x1160>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d006      	beq.n	80052a8 <main+0x10a8>
 800529a:	4b2d      	ldr	r3, [pc, #180]	@ (8005350 <main+0x1150>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	f083 0301 	eor.w	r3, r3, #1
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <main+0x10ae>
	  				kapi1prudhome=0;
 80052a8:	4b2f      	ldr	r3, [pc, #188]	@ (8005368 <main+0x1168>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	701a      	strb	r2, [r3, #0]
	  			}

	  			// kapi 1 buton kontrol

	  			if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80052ae:	4b29      	ldr	r3, [pc, #164]	@ (8005354 <main+0x1154>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d160      	bne.n	8005378 <main+0x1178>
 80052b6:	4b28      	ldr	r3, [pc, #160]	@ (8005358 <main+0x1158>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d003      	beq.n	80052c6 <main+0x10c6>
 80052be:	4b26      	ldr	r3, [pc, #152]	@ (8005358 <main+0x1158>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b03      	cmp	r3, #3
 80052c4:	d158      	bne.n	8005378 <main+0x1178>

	  					&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80052c6:	2104      	movs	r1, #4
 80052c8:	4818      	ldr	r0, [pc, #96]	@ (800532c <main+0x112c>)
 80052ca:	f002 f8b3 	bl	8007434 <HAL_GPIO_ReadPin>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d003      	beq.n	80052dc <main+0x10dc>
 80052d4:	4b22      	ldr	r3, [pc, #136]	@ (8005360 <main+0x1160>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d14d      	bne.n	8005378 <main+0x1178>
	  					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80052dc:	2102      	movs	r1, #2
 80052de:	4813      	ldr	r0, [pc, #76]	@ (800532c <main+0x112c>)
 80052e0:	f002 f8a8 	bl	8007434 <HAL_GPIO_ReadPin>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d146      	bne.n	8005378 <main+0x1178>
	  					&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80052ea:	2180      	movs	r1, #128	@ 0x80
 80052ec:	480f      	ldr	r0, [pc, #60]	@ (800532c <main+0x112c>)
 80052ee:	f002 f8a1 	bl	8007434 <HAL_GPIO_ReadPin>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d103      	bne.n	8005300 <main+0x1100>
 80052f8:	4b18      	ldr	r3, [pc, #96]	@ (800535c <main+0x115c>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00b      	beq.n	8005318 <main+0x1118>
 8005300:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005304:	4811      	ldr	r0, [pc, #68]	@ (800534c <main+0x114c>)
 8005306:	f002 f895 	bl	8007434 <HAL_GPIO_ReadPin>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d133      	bne.n	8005378 <main+0x1178>
 8005310:	4b12      	ldr	r3, [pc, #72]	@ (800535c <main+0x115c>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d12f      	bne.n	8005378 <main+0x1178>
	  					&&(makineStop==1)) {
 8005318:	4b0d      	ldr	r3, [pc, #52]	@ (8005350 <main+0x1150>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d02b      	beq.n	8005378 <main+0x1178>

	  				kapi1butonkontrol=1;
 8005320:	4b14      	ldr	r3, [pc, #80]	@ (8005374 <main+0x1174>)
 8005322:	2201      	movs	r2, #1
 8005324:	701a      	strb	r2, [r3, #0]
 8005326:	e02a      	b.n	800537e <main+0x117e>
 8005328:	20000100 	.word	0x20000100
 800532c:	40011000 	.word	0x40011000
 8005330:	20000104 	.word	0x20000104
 8005334:	2000011b 	.word	0x2000011b
 8005338:	2000011c 	.word	0x2000011c
 800533c:	200000fc 	.word	0x200000fc
 8005340:	200000a8 	.word	0x200000a8
 8005344:	200000b4 	.word	0x200000b4
 8005348:	200000e0 	.word	0x200000e0
 800534c:	40010c00 	.word	0x40010c00
 8005350:	2000010b 	.word	0x2000010b
 8005354:	200000d3 	.word	0x200000d3
 8005358:	200000d2 	.word	0x200000d2
 800535c:	200000d6 	.word	0x200000d6
 8005360:	200000d0 	.word	0x200000d0
 8005364:	200000f8 	.word	0x200000f8
 8005368:	2000010c 	.word	0x2000010c
 800536c:	200000ac 	.word	0x200000ac
 8005370:	200000e3 	.word	0x200000e3
 8005374:	2000010d 	.word	0x2000010d
	  			} else {
	  				kapi1butonkontrol=0;
 8005378:	4b8b      	ldr	r3, [pc, #556]	@ (80055a8 <main+0x13a8>)
 800537a:	2200      	movs	r2, #0
 800537c:	701a      	strb	r2, [r3, #0]
	  			}

	  			// kapi 1 pizzato

	  			if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800537e:	4b8b      	ldr	r3, [pc, #556]	@ (80055ac <main+0x13ac>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d121      	bne.n	80053ca <main+0x11ca>
 8005386:	4b8a      	ldr	r3, [pc, #552]	@ (80055b0 <main+0x13b0>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d003      	beq.n	8005396 <main+0x1196>
 800538e:	4b88      	ldr	r3, [pc, #544]	@ (80055b0 <main+0x13b0>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b03      	cmp	r3, #3
 8005394:	d119      	bne.n	80053ca <main+0x11ca>

	  					&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005396:	2104      	movs	r1, #4
 8005398:	4886      	ldr	r0, [pc, #536]	@ (80055b4 <main+0x13b4>)
 800539a:	f002 f84b 	bl	8007434 <HAL_GPIO_ReadPin>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d003      	beq.n	80053ac <main+0x11ac>
 80053a4:	4b84      	ldr	r3, [pc, #528]	@ (80055b8 <main+0x13b8>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10e      	bne.n	80053ca <main+0x11ca>
	  					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80053ac:	2102      	movs	r1, #2
 80053ae:	4881      	ldr	r0, [pc, #516]	@ (80055b4 <main+0x13b4>)
 80053b0:	f002 f840 	bl	8007434 <HAL_GPIO_ReadPin>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d107      	bne.n	80053ca <main+0x11ca>
	  					&&(makineStop==1)) {
 80053ba:	4b80      	ldr	r3, [pc, #512]	@ (80055bc <main+0x13bc>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <main+0x11ca>

	  				kapi1pizzato=1;
 80053c2:	4b7f      	ldr	r3, [pc, #508]	@ (80055c0 <main+0x13c0>)
 80053c4:	2201      	movs	r2, #1
 80053c6:	701a      	strb	r2, [r3, #0]
 80053c8:	e002      	b.n	80053d0 <main+0x11d0>
	  			} else {
	  				kapi1pizzato=0;
 80053ca:	4b7d      	ldr	r3, [pc, #500]	@ (80055c0 <main+0x13c0>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	701a      	strb	r2, [r3, #0]
	  			}

	  			// kapi 1 çıkış

	  			if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80053d0:	4b75      	ldr	r3, [pc, #468]	@ (80055a8 <main+0x13a8>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d107      	bne.n	80053e8 <main+0x11e8>
 80053d8:	4b79      	ldr	r3, [pc, #484]	@ (80055c0 <main+0x13c0>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d103      	bne.n	80053e8 <main+0x11e8>
 80053e0:	4b78      	ldr	r3, [pc, #480]	@ (80055c4 <main+0x13c4>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <main+0x11f4>
	  				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80053e8:	2201      	movs	r2, #1
 80053ea:	2180      	movs	r1, #128	@ 0x80
 80053ec:	4876      	ldr	r0, [pc, #472]	@ (80055c8 <main+0x13c8>)
 80053ee:	f002 f838 	bl	8007462 <HAL_GPIO_WritePin>
 80053f2:	e004      	b.n	80053fe <main+0x11fe>
	  			} else {
	  				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80053f4:	2200      	movs	r2, #0
 80053f6:	2180      	movs	r1, #128	@ 0x80
 80053f8:	4873      	ldr	r0, [pc, #460]	@ (80055c8 <main+0x13c8>)
 80053fa:	f002 f832 	bl	8007462 <HAL_GPIO_WritePin>

	  			//kapi2 kontrol

	  			// kapi 2 prudhome

	  			if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80053fe:	4b73      	ldr	r3, [pc, #460]	@ (80055cc <main+0x13cc>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d141      	bne.n	800548a <main+0x128a>
 8005406:	4b6a      	ldr	r3, [pc, #424]	@ (80055b0 <main+0x13b0>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d003      	beq.n	8005416 <main+0x1216>
 800540e:	4b68      	ldr	r3, [pc, #416]	@ (80055b0 <main+0x13b0>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b03      	cmp	r3, #3
 8005414:	d139      	bne.n	800548a <main+0x128a>
	  					&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005416:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800541a:	4866      	ldr	r0, [pc, #408]	@ (80055b4 <main+0x13b4>)
 800541c:	f002 f80a 	bl	8007434 <HAL_GPIO_ReadPin>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d103      	bne.n	800542e <main+0x122e>
 8005426:	4b6a      	ldr	r3, [pc, #424]	@ (80055d0 <main+0x13d0>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00b      	beq.n	8005446 <main+0x1246>
 800542e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005432:	4868      	ldr	r0, [pc, #416]	@ (80055d4 <main+0x13d4>)
 8005434:	f001 fffe 	bl	8007434 <HAL_GPIO_ReadPin>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d125      	bne.n	800548a <main+0x128a>
 800543e:	4b64      	ldr	r3, [pc, #400]	@ (80055d0 <main+0x13d0>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d121      	bne.n	800548a <main+0x128a>
	  					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005446:	2102      	movs	r1, #2
 8005448:	485a      	ldr	r0, [pc, #360]	@ (80055b4 <main+0x13b4>)
 800544a:	f001 fff3 	bl	8007434 <HAL_GPIO_ReadPin>
 800544e:	4603      	mov	r3, r0
 8005450:	2b01      	cmp	r3, #1
 8005452:	d11a      	bne.n	800548a <main+0x128a>
	  					&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005454:	2104      	movs	r1, #4
 8005456:	4857      	ldr	r0, [pc, #348]	@ (80055b4 <main+0x13b4>)
 8005458:	f001 ffec 	bl	8007434 <HAL_GPIO_ReadPin>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d113      	bne.n	800548a <main+0x128a>
	  					&&(makineStop==1)
 8005462:	4b56      	ldr	r3, [pc, #344]	@ (80055bc <main+0x13bc>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00f      	beq.n	800548a <main+0x128a>
	  					&&(butonKontrol==0)) {
 800546a:	4b5b      	ldr	r3, [pc, #364]	@ (80055d8 <main+0x13d8>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	f083 0301 	eor.w	r3, r3, #1
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <main+0x128a>

	  				kapi2prudhome=1;
 8005478:	4b58      	ldr	r3, [pc, #352]	@ (80055dc <main+0x13dc>)
 800547a:	2201      	movs	r2, #1
 800547c:	701a      	strb	r2, [r3, #0]
	  				timer = millis;
 800547e:	4b58      	ldr	r3, [pc, #352]	@ (80055e0 <main+0x13e0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a58      	ldr	r2, [pc, #352]	@ (80055e4 <main+0x13e4>)
 8005484:	6013      	str	r3, [r2, #0]
	  				bekle();
 8005486:	f7fe f963 	bl	8003750 <bekle>
	  			}

	  			if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800548a:	4b55      	ldr	r3, [pc, #340]	@ (80055e0 <main+0x13e0>)
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	4b55      	ldr	r3, [pc, #340]	@ (80055e4 <main+0x13e4>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	4a54      	ldr	r2, [pc, #336]	@ (80055e8 <main+0x13e8>)
 8005496:	7812      	ldrb	r2, [r2, #0]
 8005498:	4293      	cmp	r3, r2
 800549a:	d20d      	bcs.n	80054b8 <main+0x12b8>
 800549c:	2102      	movs	r1, #2
 800549e:	4845      	ldr	r0, [pc, #276]	@ (80055b4 <main+0x13b4>)
 80054a0:	f001 ffc8 	bl	8007434 <HAL_GPIO_ReadPin>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d006      	beq.n	80054b8 <main+0x12b8>
 80054aa:	4b44      	ldr	r3, [pc, #272]	@ (80055bc <main+0x13bc>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	f083 0301 	eor.w	r3, r3, #1
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <main+0x12be>
	  				kapi2prudhome=0;
 80054b8:	4b48      	ldr	r3, [pc, #288]	@ (80055dc <main+0x13dc>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	701a      	strb	r2, [r3, #0]
	  			}

	  			// kapi 2 buton kontrol

	  			if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80054be:	4b43      	ldr	r3, [pc, #268]	@ (80055cc <main+0x13cc>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d135      	bne.n	8005532 <main+0x1332>
 80054c6:	4b3a      	ldr	r3, [pc, #232]	@ (80055b0 <main+0x13b0>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d003      	beq.n	80054d6 <main+0x12d6>
 80054ce:	4b38      	ldr	r3, [pc, #224]	@ (80055b0 <main+0x13b0>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d12d      	bne.n	8005532 <main+0x1332>

	  					&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80054d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80054da:	4836      	ldr	r0, [pc, #216]	@ (80055b4 <main+0x13b4>)
 80054dc:	f001 ffaa 	bl	8007434 <HAL_GPIO_ReadPin>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d103      	bne.n	80054ee <main+0x12ee>
 80054e6:	4b3a      	ldr	r3, [pc, #232]	@ (80055d0 <main+0x13d0>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <main+0x1306>
 80054ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80054f2:	4838      	ldr	r0, [pc, #224]	@ (80055d4 <main+0x13d4>)
 80054f4:	f001 ff9e 	bl	8007434 <HAL_GPIO_ReadPin>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d119      	bne.n	8005532 <main+0x1332>
 80054fe:	4b34      	ldr	r3, [pc, #208]	@ (80055d0 <main+0x13d0>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d115      	bne.n	8005532 <main+0x1332>
	  					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005506:	2102      	movs	r1, #2
 8005508:	482a      	ldr	r0, [pc, #168]	@ (80055b4 <main+0x13b4>)
 800550a:	f001 ff93 	bl	8007434 <HAL_GPIO_ReadPin>
 800550e:	4603      	mov	r3, r0
 8005510:	2b01      	cmp	r3, #1
 8005512:	d10e      	bne.n	8005532 <main+0x1332>
	  					&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005514:	2104      	movs	r1, #4
 8005516:	4827      	ldr	r0, [pc, #156]	@ (80055b4 <main+0x13b4>)
 8005518:	f001 ff8c 	bl	8007434 <HAL_GPIO_ReadPin>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d107      	bne.n	8005532 <main+0x1332>
	  					&&(makineStop==1)) {
 8005522:	4b26      	ldr	r3, [pc, #152]	@ (80055bc <main+0x13bc>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <main+0x1332>

	  				kapi2butonkontrol=1;
 800552a:	4b30      	ldr	r3, [pc, #192]	@ (80055ec <main+0x13ec>)
 800552c:	2201      	movs	r2, #1
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	e002      	b.n	8005538 <main+0x1338>
	  			} else {
	  				kapi2butonkontrol=0;
 8005532:	4b2e      	ldr	r3, [pc, #184]	@ (80055ec <main+0x13ec>)
 8005534:	2200      	movs	r2, #0
 8005536:	701a      	strb	r2, [r3, #0]
	  			}

	  			// kapi 2 pizzato

	  			if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005538:	4b24      	ldr	r3, [pc, #144]	@ (80055cc <main+0x13cc>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d11d      	bne.n	800557c <main+0x137c>
 8005540:	4b1b      	ldr	r3, [pc, #108]	@ (80055b0 <main+0x13b0>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d003      	beq.n	8005550 <main+0x1350>
 8005548:	4b19      	ldr	r3, [pc, #100]	@ (80055b0 <main+0x13b0>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b03      	cmp	r3, #3
 800554e:	d115      	bne.n	800557c <main+0x137c>
	  					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005550:	2102      	movs	r1, #2
 8005552:	4818      	ldr	r0, [pc, #96]	@ (80055b4 <main+0x13b4>)
 8005554:	f001 ff6e 	bl	8007434 <HAL_GPIO_ReadPin>
 8005558:	4603      	mov	r3, r0
 800555a:	2b01      	cmp	r3, #1
 800555c:	d10e      	bne.n	800557c <main+0x137c>
	  					&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800555e:	2104      	movs	r1, #4
 8005560:	4814      	ldr	r0, [pc, #80]	@ (80055b4 <main+0x13b4>)
 8005562:	f001 ff67 	bl	8007434 <HAL_GPIO_ReadPin>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d107      	bne.n	800557c <main+0x137c>
	  					&&(makineStop==1)) {
 800556c:	4b13      	ldr	r3, [pc, #76]	@ (80055bc <main+0x13bc>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <main+0x137c>

	  				kapi2pizzato=1;
 8005574:	4b1e      	ldr	r3, [pc, #120]	@ (80055f0 <main+0x13f0>)
 8005576:	2201      	movs	r2, #1
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	e002      	b.n	8005582 <main+0x1382>
	  			} else {
	  				kapi2pizzato=0;
 800557c:	4b1c      	ldr	r3, [pc, #112]	@ (80055f0 <main+0x13f0>)
 800557e:	2200      	movs	r2, #0
 8005580:	701a      	strb	r2, [r3, #0]
	  			}

	  			// kapi 2 çıkış

	  			if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005582:	4b1a      	ldr	r3, [pc, #104]	@ (80055ec <main+0x13ec>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d107      	bne.n	800559a <main+0x139a>
 800558a:	4b19      	ldr	r3, [pc, #100]	@ (80055f0 <main+0x13f0>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d103      	bne.n	800559a <main+0x139a>
 8005592:	4b12      	ldr	r3, [pc, #72]	@ (80055dc <main+0x13dc>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d02c      	beq.n	80055f4 <main+0x13f4>
	  				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800559a:	2201      	movs	r2, #1
 800559c:	2140      	movs	r1, #64	@ 0x40
 800559e:	480a      	ldr	r0, [pc, #40]	@ (80055c8 <main+0x13c8>)
 80055a0:	f001 ff5f 	bl	8007462 <HAL_GPIO_WritePin>
 80055a4:	e02b      	b.n	80055fe <main+0x13fe>
 80055a6:	bf00      	nop
 80055a8:	2000010d 	.word	0x2000010d
 80055ac:	200000d3 	.word	0x200000d3
 80055b0:	200000d2 	.word	0x200000d2
 80055b4:	40011000 	.word	0x40011000
 80055b8:	200000d0 	.word	0x200000d0
 80055bc:	2000010b 	.word	0x2000010b
 80055c0:	2000010e 	.word	0x2000010e
 80055c4:	2000010c 	.word	0x2000010c
 80055c8:	40010800 	.word	0x40010800
 80055cc:	200000d4 	.word	0x200000d4
 80055d0:	200000d6 	.word	0x200000d6
 80055d4:	40010c00 	.word	0x40010c00
 80055d8:	200000f8 	.word	0x200000f8
 80055dc:	2000010f 	.word	0x2000010f
 80055e0:	200000a8 	.word	0x200000a8
 80055e4:	200000ac 	.word	0x200000ac
 80055e8:	200000e4 	.word	0x200000e4
 80055ec:	20000110 	.word	0x20000110
 80055f0:	20000111 	.word	0x20000111
	  			} else {
	  				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80055f4:	2200      	movs	r2, #0
 80055f6:	2140      	movs	r1, #64	@ 0x40
 80055f8:	4835      	ldr	r0, [pc, #212]	@ (80056d0 <main+0x14d0>)
 80055fa:	f001 ff32 	bl	8007462 <HAL_GPIO_WritePin>
	  			}

	  			//   kapi tabla kontrol ***

	  			if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 80055fe:	4b35      	ldr	r3, [pc, #212]	@ (80056d4 <main+0x14d4>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <main+0x140e>
 8005606:	4b33      	ldr	r3, [pc, #204]	@ (80056d4 <main+0x14d4>)
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d115      	bne.n	800563a <main+0x143a>
	  					&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800560e:	2104      	movs	r1, #4
 8005610:	4831      	ldr	r0, [pc, #196]	@ (80056d8 <main+0x14d8>)
 8005612:	f001 ff0f 	bl	8007434 <HAL_GPIO_ReadPin>
 8005616:	4603      	mov	r3, r0
 8005618:	2b01      	cmp	r3, #1
 800561a:	d003      	beq.n	8005624 <main+0x1424>
 800561c:	4b2f      	ldr	r3, [pc, #188]	@ (80056dc <main+0x14dc>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10a      	bne.n	800563a <main+0x143a>
	  					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005624:	2102      	movs	r1, #2
 8005626:	482c      	ldr	r0, [pc, #176]	@ (80056d8 <main+0x14d8>)
 8005628:	f001 ff04 	bl	8007434 <HAL_GPIO_ReadPin>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d103      	bne.n	800563a <main+0x143a>

	  				kapiTablaAcKonumKat1=1;
 8005632:	4b2b      	ldr	r3, [pc, #172]	@ (80056e0 <main+0x14e0>)
 8005634:	2201      	movs	r2, #1
 8005636:	701a      	strb	r2, [r3, #0]
 8005638:	e002      	b.n	8005640 <main+0x1440>
	  			} else {
	  				kapiTablaAcKonumKat1=0;
 800563a:	4b29      	ldr	r3, [pc, #164]	@ (80056e0 <main+0x14e0>)
 800563c:	2200      	movs	r2, #0
 800563e:	701a      	strb	r2, [r3, #0]
	  			}

	  			if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005640:	4b24      	ldr	r3, [pc, #144]	@ (80056d4 <main+0x14d4>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d003      	beq.n	8005650 <main+0x1450>
 8005648:	4b22      	ldr	r3, [pc, #136]	@ (80056d4 <main+0x14d4>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d111      	bne.n	8005674 <main+0x1474>
	  					&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005650:	2102      	movs	r1, #2
 8005652:	4821      	ldr	r0, [pc, #132]	@ (80056d8 <main+0x14d8>)
 8005654:	f001 feee 	bl	8007434 <HAL_GPIO_ReadPin>
 8005658:	4603      	mov	r3, r0
 800565a:	2b01      	cmp	r3, #1
 800565c:	d10a      	bne.n	8005674 <main+0x1474>
	  					&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 800565e:	2104      	movs	r1, #4
 8005660:	481d      	ldr	r0, [pc, #116]	@ (80056d8 <main+0x14d8>)
 8005662:	f001 fee7 	bl	8007434 <HAL_GPIO_ReadPin>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d103      	bne.n	8005674 <main+0x1474>

	  				kapiTablaAcKonumKat2=1;
 800566c:	4b1d      	ldr	r3, [pc, #116]	@ (80056e4 <main+0x14e4>)
 800566e:	2201      	movs	r2, #1
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	e002      	b.n	800567a <main+0x147a>
	  			} else {
	  				kapiTablaAcKonumKat2=0;
 8005674:	4b1b      	ldr	r3, [pc, #108]	@ (80056e4 <main+0x14e4>)
 8005676:	2200      	movs	r2, #0
 8005678:	701a      	strb	r2, [r3, #0]
	  			}

	  			if(kapiTablaAcKonumKat1==1
 800567a:	4b19      	ldr	r3, [pc, #100]	@ (80056e0 <main+0x14e0>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00f      	beq.n	80056a2 <main+0x14a2>
	  					&& kapiAcTipi==1
 8005682:	4b19      	ldr	r3, [pc, #100]	@ (80056e8 <main+0x14e8>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d10b      	bne.n	80056a2 <main+0x14a2>
	  					&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 800568a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800568e:	4817      	ldr	r0, [pc, #92]	@ (80056ec <main+0x14ec>)
 8005690:	f001 fed0 	bl	8007434 <HAL_GPIO_ReadPin>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d103      	bne.n	80056a2 <main+0x14a2>

	  				kapiactablaesp1=1;
 800569a:	4b15      	ldr	r3, [pc, #84]	@ (80056f0 <main+0x14f0>)
 800569c:	2201      	movs	r2, #1
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	e002      	b.n	80056a8 <main+0x14a8>
	  			} else {
	  				kapiactablaesp1=0;
 80056a2:	4b13      	ldr	r3, [pc, #76]	@ (80056f0 <main+0x14f0>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	701a      	strb	r2, [r3, #0]
	  			}

	  			if(kapiTablaAcKonumKat2==1
 80056a8:	4b0e      	ldr	r3, [pc, #56]	@ (80056e4 <main+0x14e4>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d023      	beq.n	80056f8 <main+0x14f8>
	  					&& kapiAcTipi==1
 80056b0:	4b0d      	ldr	r3, [pc, #52]	@ (80056e8 <main+0x14e8>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d11f      	bne.n	80056f8 <main+0x14f8>
	  					&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80056b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80056bc:	480b      	ldr	r0, [pc, #44]	@ (80056ec <main+0x14ec>)
 80056be:	f001 feb9 	bl	8007434 <HAL_GPIO_ReadPin>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d117      	bne.n	80056f8 <main+0x14f8>

	  				kapiactablaesp2=1;
 80056c8:	4b0a      	ldr	r3, [pc, #40]	@ (80056f4 <main+0x14f4>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	701a      	strb	r2, [r3, #0]
 80056ce:	e016      	b.n	80056fe <main+0x14fe>
 80056d0:	40010800 	.word	0x40010800
 80056d4:	200000d7 	.word	0x200000d7
 80056d8:	40011000 	.word	0x40011000
 80056dc:	200000d0 	.word	0x200000d0
 80056e0:	20000115 	.word	0x20000115
 80056e4:	20000116 	.word	0x20000116
 80056e8:	200000d6 	.word	0x200000d6
 80056ec:	40010c00 	.word	0x40010c00
 80056f0:	20000125 	.word	0x20000125
 80056f4:	20000126 	.word	0x20000126
	  			} else {
	  				kapiactablaesp2=0;
 80056f8:	4b7e      	ldr	r3, [pc, #504]	@ (80058f4 <main+0x16f4>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	701a      	strb	r2, [r3, #0]
	  			}

	  			// tabla kapısı prudhome

	  			if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80056fe:	4b7e      	ldr	r3, [pc, #504]	@ (80058f8 <main+0x16f8>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d154      	bne.n	80057b0 <main+0x15b0>
 8005706:	4b7d      	ldr	r3, [pc, #500]	@ (80058fc <main+0x16fc>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d003      	beq.n	8005716 <main+0x1516>
 800570e:	4b7b      	ldr	r3, [pc, #492]	@ (80058fc <main+0x16fc>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b03      	cmp	r3, #3
 8005714:	d14c      	bne.n	80057b0 <main+0x15b0>
	  					&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005716:	4b7a      	ldr	r3, [pc, #488]	@ (8005900 <main+0x1700>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d103      	bne.n	8005726 <main+0x1526>
 800571e:	4b79      	ldr	r3, [pc, #484]	@ (8005904 <main+0x1704>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d044      	beq.n	80057b0 <main+0x15b0>
	  					&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8005726:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800572a:	4877      	ldr	r0, [pc, #476]	@ (8005908 <main+0x1708>)
 800572c:	f001 fe82 	bl	8007434 <HAL_GPIO_ReadPin>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d01c      	beq.n	8005770 <main+0x1570>
	  							||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8005736:	2180      	movs	r1, #128	@ 0x80
 8005738:	4873      	ldr	r0, [pc, #460]	@ (8005908 <main+0x1708>)
 800573a:	f001 fe7b 	bl	8007434 <HAL_GPIO_ReadPin>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d106      	bne.n	8005752 <main+0x1552>
	  							&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005744:	2104      	movs	r1, #4
 8005746:	4870      	ldr	r0, [pc, #448]	@ (8005908 <main+0x1708>)
 8005748:	f001 fe74 	bl	8007434 <HAL_GPIO_ReadPin>
 800574c:	4603      	mov	r3, r0
 800574e:	2b01      	cmp	r3, #1
 8005750:	d00e      	beq.n	8005770 <main+0x1570>
	  							||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005752:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005756:	486c      	ldr	r0, [pc, #432]	@ (8005908 <main+0x1708>)
 8005758:	f001 fe6c 	bl	8007434 <HAL_GPIO_ReadPin>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10a      	bne.n	8005778 <main+0x1578>
	  							&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005762:	2102      	movs	r1, #2
 8005764:	4868      	ldr	r0, [pc, #416]	@ (8005908 <main+0x1708>)
 8005766:	f001 fe65 	bl	8007434 <HAL_GPIO_ReadPin>
 800576a:	4603      	mov	r3, r0
 800576c:	2b01      	cmp	r3, #1
 800576e:	d103      	bne.n	8005778 <main+0x1578>
	  					&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005770:	4b66      	ldr	r3, [pc, #408]	@ (800590c <main+0x170c>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d007      	beq.n	8005788 <main+0x1588>
 8005778:	4b65      	ldr	r3, [pc, #404]	@ (8005910 <main+0x1710>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d103      	bne.n	8005788 <main+0x1588>
 8005780:	4b5c      	ldr	r3, [pc, #368]	@ (80058f4 <main+0x16f4>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d013      	beq.n	80057b0 <main+0x15b0>
	  					&&(makineStop==1)
 8005788:	4b62      	ldr	r3, [pc, #392]	@ (8005914 <main+0x1714>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00f      	beq.n	80057b0 <main+0x15b0>
	  					&&(butonKontrol==0)) {
 8005790:	4b61      	ldr	r3, [pc, #388]	@ (8005918 <main+0x1718>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	f083 0301 	eor.w	r3, r3, #1
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d008      	beq.n	80057b0 <main+0x15b0>

	  				kapiTablaprudhome=1;
 800579e:	4b5f      	ldr	r3, [pc, #380]	@ (800591c <main+0x171c>)
 80057a0:	2201      	movs	r2, #1
 80057a2:	701a      	strb	r2, [r3, #0]
	  				timer = millis;
 80057a4:	4b5e      	ldr	r3, [pc, #376]	@ (8005920 <main+0x1720>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a5e      	ldr	r2, [pc, #376]	@ (8005924 <main+0x1724>)
 80057aa:	6013      	str	r3, [r2, #0]
	  				bekle();
 80057ac:	f7fd ffd0 	bl	8003750 <bekle>
	  			}

	  			if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80057b0:	4b5b      	ldr	r3, [pc, #364]	@ (8005920 <main+0x1720>)
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	4b5b      	ldr	r3, [pc, #364]	@ (8005924 <main+0x1724>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	4a5b      	ldr	r2, [pc, #364]	@ (8005928 <main+0x1728>)
 80057bc:	7812      	ldrb	r2, [r2, #0]
 80057be:	4293      	cmp	r3, r2
 80057c0:	d214      	bcs.n	80057ec <main+0x15ec>
 80057c2:	4b4f      	ldr	r3, [pc, #316]	@ (8005900 <main+0x1700>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	f083 0301 	eor.w	r3, r3, #1
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d006      	beq.n	80057de <main+0x15de>
 80057d0:	4b4c      	ldr	r3, [pc, #304]	@ (8005904 <main+0x1704>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	f083 0301 	eor.w	r3, r3, #1
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <main+0x15ec>
 80057de:	4b4d      	ldr	r3, [pc, #308]	@ (8005914 <main+0x1714>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	f083 0301 	eor.w	r3, r3, #1
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <main+0x15f2>
	  				kapiTablaprudhome=0;
 80057ec:	4b4b      	ldr	r3, [pc, #300]	@ (800591c <main+0x171c>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]
	  			}

	  			// tabla kapı buton kontrol

	  			if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80057f2:	4b41      	ldr	r3, [pc, #260]	@ (80058f8 <main+0x16f8>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d148      	bne.n	800588c <main+0x168c>
 80057fa:	4b40      	ldr	r3, [pc, #256]	@ (80058fc <main+0x16fc>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d003      	beq.n	800580a <main+0x160a>
 8005802:	4b3e      	ldr	r3, [pc, #248]	@ (80058fc <main+0x16fc>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b03      	cmp	r3, #3
 8005808:	d140      	bne.n	800588c <main+0x168c>

	  					&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800580a:	4b3d      	ldr	r3, [pc, #244]	@ (8005900 <main+0x1700>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d103      	bne.n	800581a <main+0x161a>
 8005812:	4b3c      	ldr	r3, [pc, #240]	@ (8005904 <main+0x1704>)
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d038      	beq.n	800588c <main+0x168c>
	  					&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 800581a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800581e:	483a      	ldr	r0, [pc, #232]	@ (8005908 <main+0x1708>)
 8005820:	f001 fe08 	bl	8007434 <HAL_GPIO_ReadPin>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d01c      	beq.n	8005864 <main+0x1664>
	  							||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 800582a:	2180      	movs	r1, #128	@ 0x80
 800582c:	4836      	ldr	r0, [pc, #216]	@ (8005908 <main+0x1708>)
 800582e:	f001 fe01 	bl	8007434 <HAL_GPIO_ReadPin>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d106      	bne.n	8005846 <main+0x1646>
	  							&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005838:	2104      	movs	r1, #4
 800583a:	4833      	ldr	r0, [pc, #204]	@ (8005908 <main+0x1708>)
 800583c:	f001 fdfa 	bl	8007434 <HAL_GPIO_ReadPin>
 8005840:	4603      	mov	r3, r0
 8005842:	2b01      	cmp	r3, #1
 8005844:	d00e      	beq.n	8005864 <main+0x1664>
	  							||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005846:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800584a:	482f      	ldr	r0, [pc, #188]	@ (8005908 <main+0x1708>)
 800584c:	f001 fdf2 	bl	8007434 <HAL_GPIO_ReadPin>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10a      	bne.n	800586c <main+0x166c>
	  							&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005856:	2102      	movs	r1, #2
 8005858:	482b      	ldr	r0, [pc, #172]	@ (8005908 <main+0x1708>)
 800585a:	f001 fdeb 	bl	8007434 <HAL_GPIO_ReadPin>
 800585e:	4603      	mov	r3, r0
 8005860:	2b01      	cmp	r3, #1
 8005862:	d103      	bne.n	800586c <main+0x166c>
	  							&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005864:	4b29      	ldr	r3, [pc, #164]	@ (800590c <main+0x170c>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d007      	beq.n	800587c <main+0x167c>
 800586c:	4b28      	ldr	r3, [pc, #160]	@ (8005910 <main+0x1710>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d103      	bne.n	800587c <main+0x167c>
 8005874:	4b1f      	ldr	r3, [pc, #124]	@ (80058f4 <main+0x16f4>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d007      	beq.n	800588c <main+0x168c>
	  					&&(makineStop==1)) {
 800587c:	4b25      	ldr	r3, [pc, #148]	@ (8005914 <main+0x1714>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <main+0x168c>

	  				kapiTablabutonkontrol=1;
 8005884:	4b29      	ldr	r3, [pc, #164]	@ (800592c <main+0x172c>)
 8005886:	2201      	movs	r2, #1
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	e002      	b.n	8005892 <main+0x1692>
	  			} else {
	  				kapiTablabutonkontrol=0;
 800588c:	4b27      	ldr	r3, [pc, #156]	@ (800592c <main+0x172c>)
 800588e:	2200      	movs	r2, #0
 8005890:	701a      	strb	r2, [r3, #0]
	  			}

	  			// tabla kapı pizzato

	  			if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005892:	4b19      	ldr	r3, [pc, #100]	@ (80058f8 <main+0x16f8>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b02      	cmp	r3, #2
 8005898:	d117      	bne.n	80058ca <main+0x16ca>
 800589a:	4b18      	ldr	r3, [pc, #96]	@ (80058fc <main+0x16fc>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d003      	beq.n	80058aa <main+0x16aa>
 80058a2:	4b16      	ldr	r3, [pc, #88]	@ (80058fc <main+0x16fc>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d10f      	bne.n	80058ca <main+0x16ca>
	  					&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80058aa:	4b15      	ldr	r3, [pc, #84]	@ (8005900 <main+0x1700>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d103      	bne.n	80058ba <main+0x16ba>
 80058b2:	4b14      	ldr	r3, [pc, #80]	@ (8005904 <main+0x1704>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d007      	beq.n	80058ca <main+0x16ca>
	  					&&(makineStop==1)) {
 80058ba:	4b16      	ldr	r3, [pc, #88]	@ (8005914 <main+0x1714>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <main+0x16ca>

	  				kapiTablapizzato=1;
 80058c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005930 <main+0x1730>)
 80058c4:	2201      	movs	r2, #1
 80058c6:	701a      	strb	r2, [r3, #0]
 80058c8:	e002      	b.n	80058d0 <main+0x16d0>
	  			} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
	  				kapiTablapizzato=0;
 80058ca:	4b19      	ldr	r3, [pc, #100]	@ (8005930 <main+0x1730>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	701a      	strb	r2, [r3, #0]
	  			}

	  			// kapi Tabla çıkış

	  			if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80058d0:	4b16      	ldr	r3, [pc, #88]	@ (800592c <main+0x172c>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d107      	bne.n	80058e8 <main+0x16e8>
 80058d8:	4b10      	ldr	r3, [pc, #64]	@ (800591c <main+0x171c>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d103      	bne.n	80058e8 <main+0x16e8>
 80058e0:	4b13      	ldr	r3, [pc, #76]	@ (8005930 <main+0x1730>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d027      	beq.n	8005938 <main+0x1738>
	  				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80058e8:	2201      	movs	r2, #1
 80058ea:	2120      	movs	r1, #32
 80058ec:	4811      	ldr	r0, [pc, #68]	@ (8005934 <main+0x1734>)
 80058ee:	f001 fdb8 	bl	8007462 <HAL_GPIO_WritePin>
 80058f2:	e026      	b.n	8005942 <main+0x1742>
 80058f4:	20000126 	.word	0x20000126
 80058f8:	200000d5 	.word	0x200000d5
 80058fc:	200000d2 	.word	0x200000d2
 8005900:	20000115 	.word	0x20000115
 8005904:	20000116 	.word	0x20000116
 8005908:	40011000 	.word	0x40011000
 800590c:	200000d6 	.word	0x200000d6
 8005910:	20000125 	.word	0x20000125
 8005914:	2000010b 	.word	0x2000010b
 8005918:	200000f8 	.word	0x200000f8
 800591c:	20000112 	.word	0x20000112
 8005920:	200000a8 	.word	0x200000a8
 8005924:	200000ac 	.word	0x200000ac
 8005928:	200000e5 	.word	0x200000e5
 800592c:	20000113 	.word	0x20000113
 8005930:	20000114 	.word	0x20000114
 8005934:	40010800 	.word	0x40010800
	  			} else {
	  				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005938:	2200      	movs	r2, #0
 800593a:	2120      	movs	r1, #32
 800593c:	489e      	ldr	r0, [pc, #632]	@ (8005bb8 <main+0x19b8>)
 800593e:	f001 fd90 	bl	8007462 <HAL_GPIO_WritePin>
	  			}

	  			/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

	  			if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005942:	4b9e      	ldr	r3, [pc, #632]	@ (8005bbc <main+0x19bc>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00e      	beq.n	8005968 <main+0x1768>
 800594a:	2102      	movs	r1, #2
 800594c:	489c      	ldr	r0, [pc, #624]	@ (8005bc0 <main+0x19c0>)
 800594e:	f001 fd71 	bl	8007434 <HAL_GPIO_ReadPin>
 8005952:	4603      	mov	r3, r0
 8005954:	2b01      	cmp	r3, #1
 8005956:	d107      	bne.n	8005968 <main+0x1768>
 8005958:	4b9a      	ldr	r3, [pc, #616]	@ (8005bc4 <main+0x19c4>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d103      	bne.n	8005968 <main+0x1768>
 8005960:	4b99      	ldr	r3, [pc, #612]	@ (8005bc8 <main+0x19c8>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d112      	bne.n	800598e <main+0x178e>
	  					||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005968:	4b98      	ldr	r3, [pc, #608]	@ (8005bcc <main+0x19cc>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d021      	beq.n	80059b4 <main+0x17b4>
 8005970:	2104      	movs	r1, #4
 8005972:	4893      	ldr	r0, [pc, #588]	@ (8005bc0 <main+0x19c0>)
 8005974:	f001 fd5e 	bl	8007434 <HAL_GPIO_ReadPin>
 8005978:	4603      	mov	r3, r0
 800597a:	2b01      	cmp	r3, #1
 800597c:	d11a      	bne.n	80059b4 <main+0x17b4>
 800597e:	4b91      	ldr	r3, [pc, #580]	@ (8005bc4 <main+0x19c4>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d016      	beq.n	80059b4 <main+0x17b4>
 8005986:	4b90      	ldr	r3, [pc, #576]	@ (8005bc8 <main+0x19c8>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d012      	beq.n	80059b4 <main+0x17b4>



	  				calismaSayisi++;
 800598e:	4b90      	ldr	r3, [pc, #576]	@ (8005bd0 <main+0x19d0>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	3301      	adds	r3, #1
 8005994:	b2da      	uxtb	r2, r3
 8005996:	4b8e      	ldr	r3, [pc, #568]	@ (8005bd0 <main+0x19d0>)
 8005998:	701a      	strb	r2, [r3, #0]
	  				eepromData[27]=calismaSayisi;
 800599a:	4b8d      	ldr	r3, [pc, #564]	@ (8005bd0 <main+0x19d0>)
 800599c:	781a      	ldrb	r2, [r3, #0]
 800599e:	4b8d      	ldr	r3, [pc, #564]	@ (8005bd4 <main+0x19d4>)
 80059a0:	76da      	strb	r2, [r3, #27]

	  				hafizaYaz=1;
 80059a2:	4b8d      	ldr	r3, [pc, #564]	@ (8005bd8 <main+0x19d8>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	701a      	strb	r2, [r3, #0]

	  				CalismaSayisiYukari=0;
 80059a8:	4b84      	ldr	r3, [pc, #528]	@ (8005bbc <main+0x19bc>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	701a      	strb	r2, [r3, #0]
	  				CalismaSayisiAsagi=0;
 80059ae:	4b87      	ldr	r3, [pc, #540]	@ (8005bcc <main+0x19cc>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	701a      	strb	r2, [r3, #0]
	  			}

	  			/******************************************* HATA BASLIYOR *******************************************/

	  			/************************************ ACİL STOP HATA BASLANGICI **************************************************/
	  			if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80059b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80059b8:	4888      	ldr	r0, [pc, #544]	@ (8005bdc <main+0x19dc>)
 80059ba:	f001 fd3b 	bl	8007434 <HAL_GPIO_ReadPin>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d016      	beq.n	80059f2 <main+0x17f2>
	  				  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80059c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80059c8:	4884      	ldr	r0, [pc, #528]	@ (8005bdc <main+0x19dc>)
 80059ca:	f001 fd33 	bl	8007434 <HAL_GPIO_ReadPin>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00e      	beq.n	80059f2 <main+0x17f2>
	  				  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80059d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80059d8:	4880      	ldr	r0, [pc, #512]	@ (8005bdc <main+0x19dc>)
 80059da:	f001 fd2b 	bl	8007434 <HAL_GPIO_ReadPin>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d006      	beq.n	80059f2 <main+0x17f2>
	  				  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80059e4:	2140      	movs	r1, #64	@ 0x40
 80059e6:	4876      	ldr	r0, [pc, #472]	@ (8005bc0 <main+0x19c0>)
 80059e8:	f001 fd24 	bl	8007434 <HAL_GPIO_ReadPin>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d103      	bne.n	80059fa <main+0x17fa>

	  				startBasili=1;
 80059f2:	4b7b      	ldr	r3, [pc, #492]	@ (8005be0 <main+0x19e0>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	e002      	b.n	8005a00 <main+0x1800>
	  			} else {
	  				startBasili=0;
 80059fa:	4b79      	ldr	r3, [pc, #484]	@ (8005be0 <main+0x19e0>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	701a      	strb	r2, [r3, #0]
	  			}


	  			if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005a00:	4b77      	ldr	r3, [pc, #476]	@ (8005be0 <main+0x19e0>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d014      	beq.n	8005a32 <main+0x1832>
 8005a08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005a0c:	4873      	ldr	r0, [pc, #460]	@ (8005bdc <main+0x19dc>)
 8005a0e:	f001 fd11 	bl	8007434 <HAL_GPIO_ReadPin>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d10c      	bne.n	8005a32 <main+0x1832>

	  				hataVar=1;
 8005a18:	4b72      	ldr	r3, [pc, #456]	@ (8005be4 <main+0x19e4>)
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	701a      	strb	r2, [r3, #0]
	  				hataKoduLcdGoster(1);
 8005a1e:	2001      	movs	r0, #1
 8005a20:	f7fd ff86 	bl	8003930 <hataKoduLcdGoster>
	  				hata2EEPROM(1);
 8005a24:	2001      	movs	r0, #1
 8005a26:	f7fe fab3 	bl	8003f90 <hata2EEPROM>
	  				acilstophatasi=1;
 8005a2a:	4b6f      	ldr	r3, [pc, #444]	@ (8005be8 <main+0x19e8>)
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	e018      	b.n	8005a64 <main+0x1864>
	  			} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005a32:	4b6d      	ldr	r3, [pc, #436]	@ (8005be8 <main+0x19e8>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d014      	beq.n	8005a64 <main+0x1864>
 8005a3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005a3e:	4867      	ldr	r0, [pc, #412]	@ (8005bdc <main+0x19dc>)
 8005a40:	f001 fcf8 	bl	8007434 <HAL_GPIO_ReadPin>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10c      	bne.n	8005a64 <main+0x1864>
 8005a4a:	4b65      	ldr	r3, [pc, #404]	@ (8005be0 <main+0x19e0>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	f083 0301 	eor.w	r3, r3, #1
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <main+0x1864>
	  				acilstophatasi=0;
 8005a58:	4b63      	ldr	r3, [pc, #396]	@ (8005be8 <main+0x19e8>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	701a      	strb	r2, [r3, #0]
	  				lcdUpdate(1);
 8005a5e:	2001      	movs	r0, #1
 8005a60:	f7fd ff12 	bl	8003888 <lcdUpdate>
	  			}

	  			/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

	  			if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 8005a64:	4b61      	ldr	r3, [pc, #388]	@ (8005bec <main+0x19ec>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	f083 0301 	eor.w	r3, r3, #1
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d023      	beq.n	8005aba <main+0x18ba>
 8005a72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005a76:	4859      	ldr	r0, [pc, #356]	@ (8005bdc <main+0x19dc>)
 8005a78:	f001 fcdc 	bl	8007434 <HAL_GPIO_ReadPin>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <main+0x188a>
 8005a82:	4b5b      	ldr	r3, [pc, #364]	@ (8005bf0 <main+0x19f0>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d017      	beq.n	8005aba <main+0x18ba>
 8005a8a:	4b5a      	ldr	r3, [pc, #360]	@ (8005bf4 <main+0x19f4>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d113      	bne.n	8005aba <main+0x18ba>
 8005a92:	4b59      	ldr	r3, [pc, #356]	@ (8005bf8 <main+0x19f8>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	f083 0301 	eor.w	r3, r3, #1
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00c      	beq.n	8005aba <main+0x18ba>
	  				hataVar=1;
 8005aa0:	4b50      	ldr	r3, [pc, #320]	@ (8005be4 <main+0x19e4>)
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	701a      	strb	r2, [r3, #0]
	  				hataKoduLcdGoster(2);
 8005aa6:	2002      	movs	r0, #2
 8005aa8:	f7fd ff42 	bl	8003930 <hataKoduLcdGoster>
	  				hata2EEPROM(2);
 8005aac:	2002      	movs	r0, #2
 8005aae:	f7fe fa6f 	bl	8003f90 <hata2EEPROM>
	  				emniyetCercevesihatasi=1;
 8005ab2:	4b51      	ldr	r3, [pc, #324]	@ (8005bf8 <main+0x19f8>)
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	701a      	strb	r2, [r3, #0]
 8005ab8:	e014      	b.n	8005ae4 <main+0x18e4>
	  			} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005aba:	4b4f      	ldr	r3, [pc, #316]	@ (8005bf8 <main+0x19f8>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d010      	beq.n	8005ae4 <main+0x18e4>
 8005ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8005bec <main+0x19ec>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00c      	beq.n	8005ae4 <main+0x18e4>
 8005aca:	4b4c      	ldr	r3, [pc, #304]	@ (8005bfc <main+0x19fc>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d108      	bne.n	8005ae4 <main+0x18e4>
	  				emniyetCercevesihatasi=0;
 8005ad2:	4b49      	ldr	r3, [pc, #292]	@ (8005bf8 <main+0x19f8>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	701a      	strb	r2, [r3, #0]
	  				cercevesasagicalisma=0;
 8005ad8:	4b45      	ldr	r3, [pc, #276]	@ (8005bf0 <main+0x19f0>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	701a      	strb	r2, [r3, #0]
	  				lcdUpdate(2);
 8005ade:	2002      	movs	r0, #2
 8005ae0:	f7fd fed2 	bl	8003888 <lcdUpdate>
	  			}

	  			/************************************ BASINC ASIRI YUK HATASI **************************************************/

	  			if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 8005ae4:	4b46      	ldr	r3, [pc, #280]	@ (8005c00 <main+0x1a00>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d123      	bne.n	8005b34 <main+0x1934>
 8005aec:	4b45      	ldr	r3, [pc, #276]	@ (8005c04 <main+0x1a04>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d11f      	bne.n	8005b34 <main+0x1934>
 8005af4:	4b44      	ldr	r3, [pc, #272]	@ (8005c08 <main+0x1a08>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01b      	beq.n	8005b34 <main+0x1934>
 8005afc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b00:	482f      	ldr	r0, [pc, #188]	@ (8005bc0 <main+0x19c0>)
 8005b02:	f001 fc97 	bl	8007434 <HAL_GPIO_ReadPin>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d113      	bne.n	8005b34 <main+0x1934>
 8005b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c0c <main+0x1a0c>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	f083 0301 	eor.w	r3, r3, #1
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00c      	beq.n	8005b34 <main+0x1934>
	  				hataVar=1;
 8005b1a:	4b32      	ldr	r3, [pc, #200]	@ (8005be4 <main+0x19e4>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	701a      	strb	r2, [r3, #0]
	  				hataKoduLcdGoster(3);
 8005b20:	2003      	movs	r0, #3
 8005b22:	f7fd ff05 	bl	8003930 <hataKoduLcdGoster>
	  				hata2EEPROM(3);
 8005b26:	2003      	movs	r0, #3
 8005b28:	f7fe fa32 	bl	8003f90 <hata2EEPROM>
	  				basinchatasi=1;
 8005b2c:	4b37      	ldr	r3, [pc, #220]	@ (8005c0c <main+0x1a0c>)
 8005b2e:	2201      	movs	r2, #1
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	e015      	b.n	8005b60 <main+0x1960>
	  			} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005b34:	4b35      	ldr	r3, [pc, #212]	@ (8005c0c <main+0x1a0c>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d011      	beq.n	8005b60 <main+0x1960>
 8005b3c:	4b30      	ldr	r3, [pc, #192]	@ (8005c00 <main+0x1a00>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d10d      	bne.n	8005b60 <main+0x1960>
 8005b44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005b48:	4824      	ldr	r0, [pc, #144]	@ (8005bdc <main+0x19dc>)
 8005b4a:	f001 fc73 	bl	8007434 <HAL_GPIO_ReadPin>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d105      	bne.n	8005b60 <main+0x1960>
	  				basinchatasi=0;
 8005b54:	4b2d      	ldr	r3, [pc, #180]	@ (8005c0c <main+0x1a0c>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	701a      	strb	r2, [r3, #0]
	  				lcdUpdate(3);
 8005b5a:	2003      	movs	r0, #3
 8005b5c:	f7fd fe94 	bl	8003888 <lcdUpdate>
	  			}

	  			/************************************ KAPI SİVİÇ HATASI **************************************************/
	  			if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8005b60:	4b1f      	ldr	r3, [pc, #124]	@ (8005be0 <main+0x19e0>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d103      	bne.n	8005b70 <main+0x1970>
 8005b68:	4b29      	ldr	r3, [pc, #164]	@ (8005c10 <main+0x1a10>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d055      	beq.n	8005c1c <main+0x1a1c>
 8005b70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b74:	4810      	ldr	r0, [pc, #64]	@ (8005bb8 <main+0x19b8>)
 8005b76:	f001 fc5d 	bl	8007434 <HAL_GPIO_ReadPin>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d14d      	bne.n	8005c1c <main+0x1a1c>
 8005b80:	4b24      	ldr	r3, [pc, #144]	@ (8005c14 <main+0x1a14>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d003      	beq.n	8005b90 <main+0x1990>
 8005b88:	4b22      	ldr	r3, [pc, #136]	@ (8005c14 <main+0x1a14>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d145      	bne.n	8005c1c <main+0x1a1c>
 8005b90:	4b21      	ldr	r3, [pc, #132]	@ (8005c18 <main+0x1a18>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	f083 0301 	eor.w	r3, r3, #1
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d03e      	beq.n	8005c1c <main+0x1a1c>
	  				hataVar=1;
 8005b9e:	4b11      	ldr	r3, [pc, #68]	@ (8005be4 <main+0x19e4>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	701a      	strb	r2, [r3, #0]
	  				hataKoduLcdGoster(4);
 8005ba4:	2004      	movs	r0, #4
 8005ba6:	f7fd fec3 	bl	8003930 <hataKoduLcdGoster>
	  				hata2EEPROM(4);
 8005baa:	2004      	movs	r0, #4
 8005bac:	f7fe f9f0 	bl	8003f90 <hata2EEPROM>
	  				katkapisivicihatasi=1;
 8005bb0:	4b19      	ldr	r3, [pc, #100]	@ (8005c18 <main+0x1a18>)
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	701a      	strb	r2, [r3, #0]
 8005bb6:	e051      	b.n	8005c5c <main+0x1a5c>
 8005bb8:	40010800 	.word	0x40010800
 8005bbc:	20000108 	.word	0x20000108
 8005bc0:	40011000 	.word	0x40011000
 8005bc4:	200000d0 	.word	0x200000d0
 8005bc8:	2000010b 	.word	0x2000010b
 8005bcc:	20000109 	.word	0x20000109
 8005bd0:	200000c8 	.word	0x200000c8
 8005bd4:	20000060 	.word	0x20000060
 8005bd8:	200000f5 	.word	0x200000f5
 8005bdc:	40010c00 	.word	0x40010c00
 8005be0:	20000117 	.word	0x20000117
 8005be4:	2000011e 	.word	0x2000011e
 8005be8:	20000119 	.word	0x20000119
 8005bec:	20000120 	.word	0x20000120
 8005bf0:	2000012a 	.word	0x2000012a
 8005bf4:	200000ce 	.word	0x200000ce
 8005bf8:	2000011a 	.word	0x2000011a
 8005bfc:	20000101 	.word	0x20000101
 8005c00:	200000cd 	.word	0x200000cd
 8005c04:	200000d1 	.word	0x200000d1
 8005c08:	2000011d 	.word	0x2000011d
 8005c0c:	20000127 	.word	0x20000127
 8005c10:	2000012b 	.word	0x2000012b
 8005c14:	200000d2 	.word	0x200000d2
 8005c18:	20000128 	.word	0x20000128
	  			} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005c1c:	4b64      	ldr	r3, [pc, #400]	@ (8005db0 <main+0x1bb0>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01b      	beq.n	8005c5c <main+0x1a5c>
 8005c24:	4b63      	ldr	r3, [pc, #396]	@ (8005db4 <main+0x1bb4>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d017      	beq.n	8005c5c <main+0x1a5c>
 8005c2c:	4b62      	ldr	r3, [pc, #392]	@ (8005db8 <main+0x1bb8>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	f083 0301 	eor.w	r3, r3, #1
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d010      	beq.n	8005c5c <main+0x1a5c>
 8005c3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c3e:	485f      	ldr	r0, [pc, #380]	@ (8005dbc <main+0x1bbc>)
 8005c40:	f001 fbf8 	bl	8007434 <HAL_GPIO_ReadPin>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d108      	bne.n	8005c5c <main+0x1a5c>

	  				katkapisivicihatasi=0;
 8005c4a:	4b59      	ldr	r3, [pc, #356]	@ (8005db0 <main+0x1bb0>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	701a      	strb	r2, [r3, #0]
	  				HataMakineCalisiyorkapi=0;
 8005c50:	4b5b      	ldr	r3, [pc, #364]	@ (8005dc0 <main+0x1bc0>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	701a      	strb	r2, [r3, #0]
	  				lcdUpdate(4);
 8005c56:	2004      	movs	r0, #4
 8005c58:	f7fd fe16 	bl	8003888 <lcdUpdate>
	  			}

	  			/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

	  			if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8005c5c:	4b56      	ldr	r3, [pc, #344]	@ (8005db8 <main+0x1bb8>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d103      	bne.n	8005c6c <main+0x1a6c>
 8005c64:	4b57      	ldr	r3, [pc, #348]	@ (8005dc4 <main+0x1bc4>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d023      	beq.n	8005cb4 <main+0x1ab4>
 8005c6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c70:	4852      	ldr	r0, [pc, #328]	@ (8005dbc <main+0x1bbc>)
 8005c72:	f001 fbdf 	bl	8007434 <HAL_GPIO_ReadPin>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d11b      	bne.n	8005cb4 <main+0x1ab4>
 8005c7c:	4b52      	ldr	r3, [pc, #328]	@ (8005dc8 <main+0x1bc8>)
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d003      	beq.n	8005c8c <main+0x1a8c>
 8005c84:	4b50      	ldr	r3, [pc, #320]	@ (8005dc8 <main+0x1bc8>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d113      	bne.n	8005cb4 <main+0x1ab4>
 8005c8c:	4b4f      	ldr	r3, [pc, #316]	@ (8005dcc <main+0x1bcc>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	f083 0301 	eor.w	r3, r3, #1
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00c      	beq.n	8005cb4 <main+0x1ab4>

	  				hataVar=1;
 8005c9a:	4b4d      	ldr	r3, [pc, #308]	@ (8005dd0 <main+0x1bd0>)
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	701a      	strb	r2, [r3, #0]
	  				hataKoduLcdGoster(5);
 8005ca0:	2005      	movs	r0, #5
 8005ca2:	f7fd fe45 	bl	8003930 <hataKoduLcdGoster>
	  				hata2EEPROM(5);
 8005ca6:	2005      	movs	r0, #5
 8005ca8:	f7fe f972 	bl	8003f90 <hata2EEPROM>
	  				tablakapisivicihatasi=1;
 8005cac:	4b47      	ldr	r3, [pc, #284]	@ (8005dcc <main+0x1bcc>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	e023      	b.n	8005cfc <main+0x1afc>
	  			} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005cb4:	4b45      	ldr	r3, [pc, #276]	@ (8005dcc <main+0x1bcc>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01f      	beq.n	8005cfc <main+0x1afc>
 8005cbc:	4b3d      	ldr	r3, [pc, #244]	@ (8005db4 <main+0x1bb4>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01b      	beq.n	8005cfc <main+0x1afc>
 8005cc4:	4b3c      	ldr	r3, [pc, #240]	@ (8005db8 <main+0x1bb8>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	f083 0301 	eor.w	r3, r3, #1
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d014      	beq.n	8005cfc <main+0x1afc>
 8005cd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005cd6:	4839      	ldr	r0, [pc, #228]	@ (8005dbc <main+0x1bbc>)
 8005cd8:	f001 fbac 	bl	8007434 <HAL_GPIO_ReadPin>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10c      	bne.n	8005cfc <main+0x1afc>
 8005ce2:	4b34      	ldr	r3, [pc, #208]	@ (8005db4 <main+0x1bb4>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d008      	beq.n	8005cfc <main+0x1afc>
	  				tablakapisivicihatasi=0;
 8005cea:	4b38      	ldr	r3, [pc, #224]	@ (8005dcc <main+0x1bcc>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	701a      	strb	r2, [r3, #0]
	  				HataMakineCalisiyortabla=0;
 8005cf0:	4b34      	ldr	r3, [pc, #208]	@ (8005dc4 <main+0x1bc4>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	701a      	strb	r2, [r3, #0]
	  				lcdUpdate(5);
 8005cf6:	2005      	movs	r0, #5
 8005cf8:	f7fd fdc6 	bl	8003888 <lcdUpdate>
	  			}

	  			/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

	  			if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8005cfc:	4b35      	ldr	r3, [pc, #212]	@ (8005dd4 <main+0x1bd4>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d107      	bne.n	8005d14 <main+0x1b14>
 8005d04:	4b34      	ldr	r3, [pc, #208]	@ (8005dd8 <main+0x1bd8>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d103      	bne.n	8005d14 <main+0x1b14>
 8005d0c:	4b33      	ldr	r3, [pc, #204]	@ (8005ddc <main+0x1bdc>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01b      	beq.n	8005d4c <main+0x1b4c>
 8005d14:	4b32      	ldr	r3, [pc, #200]	@ (8005de0 <main+0x1be0>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	f083 0301 	eor.w	r3, r3, #1
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d014      	beq.n	8005d4c <main+0x1b4c>
	  			    if(millis-timer4>=makineCalismaTmr) {
 8005d22:	4b30      	ldr	r3, [pc, #192]	@ (8005de4 <main+0x1be4>)
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	4b30      	ldr	r3, [pc, #192]	@ (8005de8 <main+0x1be8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	4a2f      	ldr	r2, [pc, #188]	@ (8005dec <main+0x1bec>)
 8005d2e:	7812      	ldrb	r2, [r2, #0]
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d30b      	bcc.n	8005d4c <main+0x1b4c>
	  				  	hataVar=1;
 8005d34:	4b26      	ldr	r3, [pc, #152]	@ (8005dd0 <main+0x1bd0>)
 8005d36:	2201      	movs	r2, #1
 8005d38:	701a      	strb	r2, [r3, #0]
	  				  	hataKoduLcdGoster(6);
 8005d3a:	2006      	movs	r0, #6
 8005d3c:	f7fd fdf8 	bl	8003930 <hataKoduLcdGoster>
	  				  	hata2EEPROM(6);
 8005d40:	2006      	movs	r0, #6
 8005d42:	f7fe f925 	bl	8003f90 <hata2EEPROM>
	  				  	maksimumcalismahatasi=1;
 8005d46:	4b26      	ldr	r3, [pc, #152]	@ (8005de0 <main+0x1be0>)
 8005d48:	2201      	movs	r2, #1
 8005d4a:	701a      	strb	r2, [r3, #0]
	  				  }
	  			}

	  			if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005d4c:	4b24      	ldr	r3, [pc, #144]	@ (8005de0 <main+0x1be0>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d013      	beq.n	8005d7c <main+0x1b7c>
 8005d54:	2108      	movs	r1, #8
 8005d56:	4819      	ldr	r0, [pc, #100]	@ (8005dbc <main+0x1bbc>)
 8005d58:	f001 fb6c 	bl	8007434 <HAL_GPIO_ReadPin>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00c      	beq.n	8005d7c <main+0x1b7c>
 8005d62:	4b15      	ldr	r3, [pc, #84]	@ (8005db8 <main+0x1bb8>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	f083 0301 	eor.w	r3, r3, #1
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d005      	beq.n	8005d7c <main+0x1b7c>
	  				maksimumcalismahatasi=0;
 8005d70:	4b1b      	ldr	r3, [pc, #108]	@ (8005de0 <main+0x1be0>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	701a      	strb	r2, [r3, #0]
	  				lcdUpdate(6);
 8005d76:	2006      	movs	r0, #6
 8005d78:	f7fd fd86 	bl	8003888 <lcdUpdate>
	  			}

	  			if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8005df0 <main+0x1bf0>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d00b      	beq.n	8005d9c <main+0x1b9c>
 8005d84:	4b14      	ldr	r3, [pc, #80]	@ (8005dd8 <main+0x1bd8>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d007      	beq.n	8005d9c <main+0x1b9c>
 8005d8c:	4b19      	ldr	r3, [pc, #100]	@ (8005df4 <main+0x1bf4>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d103      	bne.n	8005d9c <main+0x1b9c>
 8005d94:	4b11      	ldr	r3, [pc, #68]	@ (8005ddc <main+0x1bdc>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d02f      	beq.n	8005dfc <main+0x1bfc>
	  				makineCalisiyor=0;
 8005d9c:	4b16      	ldr	r3, [pc, #88]	@ (8005df8 <main+0x1bf8>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	701a      	strb	r2, [r3, #0]
	  				HataMakineCalisiyorkapi=1;
 8005da2:	4b07      	ldr	r3, [pc, #28]	@ (8005dc0 <main+0x1bc0>)
 8005da4:	2201      	movs	r2, #1
 8005da6:	701a      	strb	r2, [r3, #0]
	  				HataMakineCalisiyortabla=1;
 8005da8:	4b06      	ldr	r3, [pc, #24]	@ (8005dc4 <main+0x1bc4>)
 8005daa:	2201      	movs	r2, #1
 8005dac:	701a      	strb	r2, [r3, #0]
 8005dae:	e02c      	b.n	8005e0a <main+0x1c0a>
 8005db0:	20000128 	.word	0x20000128
 8005db4:	2000010b 	.word	0x2000010b
 8005db8:	20000117 	.word	0x20000117
 8005dbc:	40010800 	.word	0x40010800
 8005dc0:	2000012b 	.word	0x2000012b
 8005dc4:	2000012c 	.word	0x2000012c
 8005dc8:	200000d2 	.word	0x200000d2
 8005dcc:	20000129 	.word	0x20000129
 8005dd0:	2000011e 	.word	0x2000011e
 8005dd4:	2000011d 	.word	0x2000011d
 8005dd8:	20000101 	.word	0x20000101
 8005ddc:	20000100 	.word	0x20000100
 8005de0:	20000118 	.word	0x20000118
 8005de4:	200000a8 	.word	0x200000a8
 8005de8:	200000bc 	.word	0x200000bc
 8005dec:	200000e2 	.word	0x200000e2
 8005df0:	200000fe 	.word	0x200000fe
 8005df4:	200000ff 	.word	0x200000ff
 8005df8:	2000011f 	.word	0x2000011f
	  			} else {
	  				makineCalisiyor=1;
 8005dfc:	4b90      	ldr	r3, [pc, #576]	@ (8006040 <main+0x1e40>)
 8005dfe:	2201      	movs	r2, #1
 8005e00:	701a      	strb	r2, [r3, #0]
	  				timer4=millis;
 8005e02:	4b90      	ldr	r3, [pc, #576]	@ (8006044 <main+0x1e44>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a90      	ldr	r2, [pc, #576]	@ (8006048 <main+0x1e48>)
 8005e08:	6013      	str	r3, [r2, #0]
	  			}

	  			/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
	  			if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8005e0a:	4b90      	ldr	r3, [pc, #576]	@ (800604c <main+0x1e4c>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d02f      	beq.n	8005e72 <main+0x1c72>
 8005e12:	4b8f      	ldr	r3, [pc, #572]	@ (8006050 <main+0x1e50>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	f083 0301 	eor.w	r3, r3, #1
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d028      	beq.n	8005e72 <main+0x1c72>
 8005e20:	4b8c      	ldr	r3, [pc, #560]	@ (8006054 <main+0x1e54>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	f083 0301 	eor.w	r3, r3, #1
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d021      	beq.n	8005e72 <main+0x1c72>
 8005e2e:	4b8a      	ldr	r3, [pc, #552]	@ (8006058 <main+0x1e58>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	f083 0301 	eor.w	r3, r3, #1
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d01a      	beq.n	8005e72 <main+0x1c72>
	  					&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005e3c:	4b87      	ldr	r3, [pc, #540]	@ (800605c <main+0x1e5c>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	f083 0301 	eor.w	r3, r3, #1
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d013      	beq.n	8005e72 <main+0x1c72>
 8005e4a:	4b85      	ldr	r3, [pc, #532]	@ (8006060 <main+0x1e60>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	f083 0301 	eor.w	r3, r3, #1
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00c      	beq.n	8005e72 <main+0x1c72>
 8005e58:	4b82      	ldr	r3, [pc, #520]	@ (8006064 <main+0x1e64>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	f083 0301 	eor.w	r3, r3, #1
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d005      	beq.n	8005e72 <main+0x1c72>

	  				hataVar=0;
 8005e66:	4b79      	ldr	r3, [pc, #484]	@ (800604c <main+0x1e4c>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	701a      	strb	r2, [r3, #0]
	  				lcdUpdate(7);
 8005e6c:	2007      	movs	r0, #7
 8005e6e:	f7fd fd0b 	bl	8003888 <lcdUpdate>
	  			}

	  			if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8005e72:	4b76      	ldr	r3, [pc, #472]	@ (800604c <main+0x1e4c>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d02a      	beq.n	8005ed0 <main+0x1cd0>
 8005e7a:	4b75      	ldr	r3, [pc, #468]	@ (8006050 <main+0x1e50>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	f083 0301 	eor.w	r3, r3, #1
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d023      	beq.n	8005ed0 <main+0x1cd0>
 8005e88:	4b72      	ldr	r3, [pc, #456]	@ (8006054 <main+0x1e54>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01f      	beq.n	8005ed0 <main+0x1cd0>
 8005e90:	4b71      	ldr	r3, [pc, #452]	@ (8006058 <main+0x1e58>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	f083 0301 	eor.w	r3, r3, #1
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d018      	beq.n	8005ed0 <main+0x1cd0>
	  					&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8005e9e:	4b6f      	ldr	r3, [pc, #444]	@ (800605c <main+0x1e5c>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	f083 0301 	eor.w	r3, r3, #1
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d011      	beq.n	8005ed0 <main+0x1cd0>
 8005eac:	4b6c      	ldr	r3, [pc, #432]	@ (8006060 <main+0x1e60>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	f083 0301 	eor.w	r3, r3, #1
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <main+0x1cd0>
 8005eba:	4b6a      	ldr	r3, [pc, #424]	@ (8006064 <main+0x1e64>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	f083 0301 	eor.w	r3, r3, #1
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <main+0x1cd0>
	  			{
	  				EmnCerHataMakYukariCalis=1;
 8005ec8:	4b67      	ldr	r3, [pc, #412]	@ (8006068 <main+0x1e68>)
 8005eca:	2201      	movs	r2, #1
 8005ecc:	701a      	strb	r2, [r3, #0]
 8005ece:	e009      	b.n	8005ee4 <main+0x1ce4>
	  			}
	  			else if(emniyetCercevesihatasi==0)
 8005ed0:	4b60      	ldr	r3, [pc, #384]	@ (8006054 <main+0x1e54>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	f083 0301 	eor.w	r3, r3, #1
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <main+0x1ce4>
	  			{
	  				EmnCerHataMakYukariCalis=0;
 8005ede:	4b62      	ldr	r3, [pc, #392]	@ (8006068 <main+0x1e68>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	701a      	strb	r2, [r3, #0]

	  		// DEMO MOD BASLIYOR

	  		// DEMO YUKARI CALISMA

	  		if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8005ee4:	4b61      	ldr	r3, [pc, #388]	@ (800606c <main+0x1e6c>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	f040 81c7 	bne.w	800627c <main+0x207c>
 8005eee:	4b60      	ldr	r3, [pc, #384]	@ (8006070 <main+0x1e70>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 81c2 	beq.w	800627c <main+0x207c>
 8005ef8:	4b5e      	ldr	r3, [pc, #376]	@ (8006074 <main+0x1e74>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f040 81bd 	bne.w	800627c <main+0x207c>
	  			if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005f02:	2102      	movs	r1, #2
 8005f04:	485c      	ldr	r0, [pc, #368]	@ (8006078 <main+0x1e78>)
 8005f06:	f001 fa95 	bl	8007434 <HAL_GPIO_ReadPin>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d11d      	bne.n	8005f4c <main+0x1d4c>
	  					&& (demoAsagiCalis==0)
 8005f10:	4b5a      	ldr	r3, [pc, #360]	@ (800607c <main+0x1e7c>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	f083 0301 	eor.w	r3, r3, #1
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d016      	beq.n	8005f4c <main+0x1d4c>
	  					&& (demoDevYukari==0)
 8005f1e:	4b58      	ldr	r3, [pc, #352]	@ (8006080 <main+0x1e80>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	f083 0301 	eor.w	r3, r3, #1
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00f      	beq.n	8005f4c <main+0x1d4c>
	  					&& (demoDevAsagi==0)) {
 8005f2c:	4b55      	ldr	r3, [pc, #340]	@ (8006084 <main+0x1e84>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	f083 0301 	eor.w	r3, r3, #1
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d008      	beq.n	8005f4c <main+0x1d4c>

	  				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	2104      	movs	r1, #4
 8005f3e:	4852      	ldr	r0, [pc, #328]	@ (8006088 <main+0x1e88>)
 8005f40:	f001 fa8f 	bl	8007462 <HAL_GPIO_WritePin>
	  				demoYukariCalis=1;
 8005f44:	4b51      	ldr	r3, [pc, #324]	@ (800608c <main+0x1e8c>)
 8005f46:	2201      	movs	r2, #1
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	e00e      	b.n	8005f6a <main+0x1d6a>
	  			} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005f4c:	2102      	movs	r1, #2
 8005f4e:	484a      	ldr	r0, [pc, #296]	@ (8006078 <main+0x1e78>)
 8005f50:	f001 fa70 	bl	8007434 <HAL_GPIO_ReadPin>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d107      	bne.n	8005f6a <main+0x1d6a>

	  				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2104      	movs	r1, #4
 8005f5e:	484a      	ldr	r0, [pc, #296]	@ (8006088 <main+0x1e88>)
 8005f60:	f001 fa7f 	bl	8007462 <HAL_GPIO_WritePin>
	  				demoYukariCalis=0;
 8005f64:	4b49      	ldr	r3, [pc, #292]	@ (800608c <main+0x1e8c>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	701a      	strb	r2, [r3, #0]
	  			}

	  			// DEMO MOTOR CALISMASI

	  			if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8005f6a:	4b48      	ldr	r3, [pc, #288]	@ (800608c <main+0x1e8c>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10b      	bne.n	8005f8a <main+0x1d8a>
 8005f72:	4b43      	ldr	r3, [pc, #268]	@ (8006080 <main+0x1e80>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d107      	bne.n	8005f8a <main+0x1d8a>
 8005f7a:	4b42      	ldr	r3, [pc, #264]	@ (8006084 <main+0x1e84>)
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d103      	bne.n	8005f8a <main+0x1d8a>
 8005f82:	4b3e      	ldr	r3, [pc, #248]	@ (800607c <main+0x1e7c>)
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00c      	beq.n	8005fa4 <main+0x1da4>
	  				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f90:	483d      	ldr	r0, [pc, #244]	@ (8006088 <main+0x1e88>)
 8005f92:	f001 fa66 	bl	8007462 <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005f96:	2201      	movs	r2, #1
 8005f98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005f9c:	483a      	ldr	r0, [pc, #232]	@ (8006088 <main+0x1e88>)
 8005f9e:	f001 fa60 	bl	8007462 <HAL_GPIO_WritePin>
 8005fa2:	e00b      	b.n	8005fbc <main+0x1dbc>
	  			} else {
	  				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005faa:	4837      	ldr	r0, [pc, #220]	@ (8006088 <main+0x1e88>)
 8005fac:	f001 fa59 	bl	8007462 <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005fb6:	4834      	ldr	r0, [pc, #208]	@ (8006088 <main+0x1e88>)
 8005fb8:	f001 fa53 	bl	8007462 <HAL_GPIO_WritePin>
	  			}

	  			if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005fbc:	2102      	movs	r1, #2
 8005fbe:	482e      	ldr	r0, [pc, #184]	@ (8006078 <main+0x1e78>)
 8005fc0:	f001 fa38 	bl	8007434 <HAL_GPIO_ReadPin>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d10d      	bne.n	8005fe6 <main+0x1de6>
	  					&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005fca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005fce:	482a      	ldr	r0, [pc, #168]	@ (8006078 <main+0x1e78>)
 8005fd0:	f001 fa30 	bl	8007434 <HAL_GPIO_ReadPin>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d105      	bne.n	8005fe6 <main+0x1de6>
	  					&& (demoYukariCalis==0)
 8005fda:	4b2c      	ldr	r3, [pc, #176]	@ (800608c <main+0x1e8c>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	f083 0301 	eor.w	r3, r3, #1
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
	  					&& (demoAsagiCalis==0)) {
	  				//bos burası
	  			}

	  			//DEVİRME YUKARI CALIS
	  			if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005fe6:	2102      	movs	r1, #2
 8005fe8:	4823      	ldr	r0, [pc, #140]	@ (8006078 <main+0x1e78>)
 8005fea:	f001 fa23 	bl	8007434 <HAL_GPIO_ReadPin>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d14d      	bne.n	8006090 <main+0x1e90>
	  					&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005ff4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005ff8:	481f      	ldr	r0, [pc, #124]	@ (8006078 <main+0x1e78>)
 8005ffa:	f001 fa1b 	bl	8007434 <HAL_GPIO_ReadPin>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d145      	bne.n	8006090 <main+0x1e90>
	  					&&(demoYukariCalis==0)
 8006004:	4b21      	ldr	r3, [pc, #132]	@ (800608c <main+0x1e8c>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	f083 0301 	eor.w	r3, r3, #1
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d03e      	beq.n	8006090 <main+0x1e90>
	  					&&(demoAsagiCalis==0)
 8006012:	4b1a      	ldr	r3, [pc, #104]	@ (800607c <main+0x1e7c>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	f083 0301 	eor.w	r3, r3, #1
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d037      	beq.n	8006090 <main+0x1e90>
	  					&& (demoDevAsagi==0)) {
 8006020:	4b18      	ldr	r3, [pc, #96]	@ (8006084 <main+0x1e84>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	f083 0301 	eor.w	r3, r3, #1
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d030      	beq.n	8006090 <main+0x1e90>

	  				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800602e:	2201      	movs	r2, #1
 8006030:	2120      	movs	r1, #32
 8006032:	4811      	ldr	r0, [pc, #68]	@ (8006078 <main+0x1e78>)
 8006034:	f001 fa15 	bl	8007462 <HAL_GPIO_WritePin>
	  				demoDevYukari=1;
 8006038:	4b11      	ldr	r3, [pc, #68]	@ (8006080 <main+0x1e80>)
 800603a:	2201      	movs	r2, #1
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	e02f      	b.n	80060a0 <main+0x1ea0>
 8006040:	2000011f 	.word	0x2000011f
 8006044:	200000a8 	.word	0x200000a8
 8006048:	200000bc 	.word	0x200000bc
 800604c:	2000011e 	.word	0x2000011e
 8006050:	20000119 	.word	0x20000119
 8006054:	2000011a 	.word	0x2000011a
 8006058:	20000127 	.word	0x20000127
 800605c:	20000128 	.word	0x20000128
 8006060:	20000129 	.word	0x20000129
 8006064:	20000118 	.word	0x20000118
 8006068:	2000012d 	.word	0x2000012d
 800606c:	200000e8 	.word	0x200000e8
 8006070:	2000011b 	.word	0x2000011b
 8006074:	200000e7 	.word	0x200000e7
 8006078:	40011000 	.word	0x40011000
 800607c:	20000122 	.word	0x20000122
 8006080:	20000123 	.word	0x20000123
 8006084:	20000124 	.word	0x20000124
 8006088:	40010c00 	.word	0x40010c00
 800608c:	20000121 	.word	0x20000121
	  			} else {
	  				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006090:	2200      	movs	r2, #0
 8006092:	2120      	movs	r1, #32
 8006094:	4899      	ldr	r0, [pc, #612]	@ (80062fc <main+0x20fc>)
 8006096:	f001 f9e4 	bl	8007462 <HAL_GPIO_WritePin>
	  				demoDevYukari=0;
 800609a:	4b99      	ldr	r3, [pc, #612]	@ (8006300 <main+0x2100>)
 800609c:	2200      	movs	r2, #0
 800609e:	701a      	strb	r2, [r3, #0]
	  			}

	  			// DEVIRME ASAGI CALIS

	  			if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80060a0:	2102      	movs	r1, #2
 80060a2:	4896      	ldr	r0, [pc, #600]	@ (80062fc <main+0x20fc>)
 80060a4:	f001 f9c6 	bl	8007434 <HAL_GPIO_ReadPin>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d125      	bne.n	80060fa <main+0x1efa>
	  					&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80060ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80060b2:	4892      	ldr	r0, [pc, #584]	@ (80062fc <main+0x20fc>)
 80060b4:	f001 f9be 	bl	8007434 <HAL_GPIO_ReadPin>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d11d      	bne.n	80060fa <main+0x1efa>
	  					&&(demoYukariCalis==0)
 80060be:	4b91      	ldr	r3, [pc, #580]	@ (8006304 <main+0x2104>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	f083 0301 	eor.w	r3, r3, #1
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d016      	beq.n	80060fa <main+0x1efa>
	  					&&(demoDevYukari==0)
 80060cc:	4b8c      	ldr	r3, [pc, #560]	@ (8006300 <main+0x2100>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	f083 0301 	eor.w	r3, r3, #1
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00f      	beq.n	80060fa <main+0x1efa>
	  					&& (demoAsagiCalis==0)) {
 80060da:	4b8b      	ldr	r3, [pc, #556]	@ (8006308 <main+0x2108>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	f083 0301 	eor.w	r3, r3, #1
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d008      	beq.n	80060fa <main+0x1efa>

	  				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80060e8:	2201      	movs	r2, #1
 80060ea:	2110      	movs	r1, #16
 80060ec:	4883      	ldr	r0, [pc, #524]	@ (80062fc <main+0x20fc>)
 80060ee:	f001 f9b8 	bl	8007462 <HAL_GPIO_WritePin>
	  				demoDevAsagi=1;
 80060f2:	4b86      	ldr	r3, [pc, #536]	@ (800630c <main+0x210c>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	e007      	b.n	800610a <main+0x1f0a>
	  			} else {
	  				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80060fa:	2200      	movs	r2, #0
 80060fc:	2110      	movs	r1, #16
 80060fe:	487f      	ldr	r0, [pc, #508]	@ (80062fc <main+0x20fc>)
 8006100:	f001 f9af 	bl	8007462 <HAL_GPIO_WritePin>
	  				demoDevAsagi=0;
 8006104:	4b81      	ldr	r3, [pc, #516]	@ (800630c <main+0x210c>)
 8006106:	2200      	movs	r2, #0
 8006108:	701a      	strb	r2, [r3, #0]
	  			}

	  			// DEMO ASAGI CALISMA

	  			if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800610a:	2104      	movs	r1, #4
 800610c:	487b      	ldr	r0, [pc, #492]	@ (80062fc <main+0x20fc>)
 800610e:	f001 f991 	bl	8007434 <HAL_GPIO_ReadPin>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d125      	bne.n	8006164 <main+0x1f64>
	  					&& (demoYukariCalis==0)
 8006118:	4b7a      	ldr	r3, [pc, #488]	@ (8006304 <main+0x2104>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	f083 0301 	eor.w	r3, r3, #1
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d01e      	beq.n	8006164 <main+0x1f64>
	  					&& (demoDevAsagi==0)
 8006126:	4b79      	ldr	r3, [pc, #484]	@ (800630c <main+0x210c>)
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	f083 0301 	eor.w	r3, r3, #1
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d017      	beq.n	8006164 <main+0x1f64>
	  					&& (demoDevYukari==0)) {
 8006134:	4b72      	ldr	r3, [pc, #456]	@ (8006300 <main+0x2100>)
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	f083 0301 	eor.w	r3, r3, #1
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d010      	beq.n	8006164 <main+0x1f64>

	  				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006142:	2201      	movs	r2, #1
 8006144:	2102      	movs	r1, #2
 8006146:	4872      	ldr	r0, [pc, #456]	@ (8006310 <main+0x2110>)
 8006148:	f001 f98b 	bl	8007462 <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800614c:	2201      	movs	r2, #1
 800614e:	2101      	movs	r1, #1
 8006150:	486f      	ldr	r0, [pc, #444]	@ (8006310 <main+0x2110>)
 8006152:	f001 f986 	bl	8007462 <HAL_GPIO_WritePin>
	  				demoAsagiCalis=1;
 8006156:	4b6c      	ldr	r3, [pc, #432]	@ (8006308 <main+0x2108>)
 8006158:	2201      	movs	r2, #1
 800615a:	701a      	strb	r2, [r3, #0]
	  				demoCalismaSayisiYar=1;
 800615c:	4b6d      	ldr	r3, [pc, #436]	@ (8006314 <main+0x2114>)
 800615e:	2201      	movs	r2, #1
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	e013      	b.n	800618c <main+0x1f8c>
	  			} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006164:	2104      	movs	r1, #4
 8006166:	4865      	ldr	r0, [pc, #404]	@ (80062fc <main+0x20fc>)
 8006168:	f001 f964 	bl	8007434 <HAL_GPIO_ReadPin>
 800616c:	4603      	mov	r3, r0
 800616e:	2b01      	cmp	r3, #1
 8006170:	d10c      	bne.n	800618c <main+0x1f8c>
	  				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006172:	2200      	movs	r2, #0
 8006174:	2102      	movs	r1, #2
 8006176:	4866      	ldr	r0, [pc, #408]	@ (8006310 <main+0x2110>)
 8006178:	f001 f973 	bl	8007462 <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800617c:	2200      	movs	r2, #0
 800617e:	2101      	movs	r1, #1
 8006180:	4863      	ldr	r0, [pc, #396]	@ (8006310 <main+0x2110>)
 8006182:	f001 f96e 	bl	8007462 <HAL_GPIO_WritePin>
	  				demoAsagiCalis=0;
 8006186:	4b60      	ldr	r3, [pc, #384]	@ (8006308 <main+0x2108>)
 8006188:	2200      	movs	r2, #0
 800618a:	701a      	strb	r2, [r3, #0]
	  			}

	  			if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 800618c:	2104      	movs	r1, #4
 800618e:	485b      	ldr	r0, [pc, #364]	@ (80062fc <main+0x20fc>)
 8006190:	f001 f950 	bl	8007434 <HAL_GPIO_ReadPin>
 8006194:	4603      	mov	r3, r0
 8006196:	2b01      	cmp	r3, #1
 8006198:	d10d      	bne.n	80061b6 <main+0x1fb6>
	  				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800619a:	2201      	movs	r2, #1
 800619c:	2180      	movs	r1, #128	@ 0x80
 800619e:	485e      	ldr	r0, [pc, #376]	@ (8006318 <main+0x2118>)
 80061a0:	f001 f95f 	bl	8007462 <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80061a4:	2201      	movs	r2, #1
 80061a6:	2120      	movs	r1, #32
 80061a8:	485b      	ldr	r0, [pc, #364]	@ (8006318 <main+0x2118>)
 80061aa:	f001 f95a 	bl	8007462 <HAL_GPIO_WritePin>
	  				timer3 = millis;
 80061ae:	4b5b      	ldr	r3, [pc, #364]	@ (800631c <main+0x211c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a5b      	ldr	r2, [pc, #364]	@ (8006320 <main+0x2120>)
 80061b4:	6013      	str	r3, [r2, #0]
	  			}

	  			if(millis-timer3 >= 5) {
 80061b6:	4b59      	ldr	r3, [pc, #356]	@ (800631c <main+0x211c>)
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	4b59      	ldr	r3, [pc, #356]	@ (8006320 <main+0x2120>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d909      	bls.n	80061d8 <main+0x1fd8>
	  				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80061c4:	2200      	movs	r2, #0
 80061c6:	2180      	movs	r1, #128	@ 0x80
 80061c8:	4853      	ldr	r0, [pc, #332]	@ (8006318 <main+0x2118>)
 80061ca:	f001 f94a 	bl	8007462 <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80061ce:	2200      	movs	r2, #0
 80061d0:	2120      	movs	r1, #32
 80061d2:	4851      	ldr	r0, [pc, #324]	@ (8006318 <main+0x2118>)
 80061d4:	f001 f945 	bl	8007462 <HAL_GPIO_WritePin>
	  			}

	  			if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80061d8:	2102      	movs	r1, #2
 80061da:	4848      	ldr	r0, [pc, #288]	@ (80062fc <main+0x20fc>)
 80061dc:	f001 f92a 	bl	8007434 <HAL_GPIO_ReadPin>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d108      	bne.n	80061f8 <main+0x1ff8>
	  				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80061e6:	2201      	movs	r2, #1
 80061e8:	2140      	movs	r1, #64	@ 0x40
 80061ea:	484b      	ldr	r0, [pc, #300]	@ (8006318 <main+0x2118>)
 80061ec:	f001 f939 	bl	8007462 <HAL_GPIO_WritePin>
	  				timer3 = millis;
 80061f0:	4b4a      	ldr	r3, [pc, #296]	@ (800631c <main+0x211c>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a4a      	ldr	r2, [pc, #296]	@ (8006320 <main+0x2120>)
 80061f6:	6013      	str	r3, [r2, #0]
	  			}

	  			if(millis-timer3 >= 5) {
 80061f8:	4b48      	ldr	r3, [pc, #288]	@ (800631c <main+0x211c>)
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	4b48      	ldr	r3, [pc, #288]	@ (8006320 <main+0x2120>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b04      	cmp	r3, #4
 8006204:	d904      	bls.n	8006210 <main+0x2010>
	  				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006206:	2200      	movs	r2, #0
 8006208:	2140      	movs	r1, #64	@ 0x40
 800620a:	4843      	ldr	r0, [pc, #268]	@ (8006318 <main+0x2118>)
 800620c:	f001 f929 	bl	8007462 <HAL_GPIO_WritePin>
	  			}

	  			if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006210:	4b3c      	ldr	r3, [pc, #240]	@ (8006304 <main+0x2104>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d013      	beq.n	8006240 <main+0x2040>
 8006218:	4b3e      	ldr	r3, [pc, #248]	@ (8006314 <main+0x2114>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00f      	beq.n	8006240 <main+0x2040>
	  				//mesajYazildi=0;
	  				calismaSayisiDemo++;
 8006220:	4b40      	ldr	r3, [pc, #256]	@ (8006324 <main+0x2124>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	3301      	adds	r3, #1
 8006226:	b2da      	uxtb	r2, r3
 8006228:	4b3e      	ldr	r3, [pc, #248]	@ (8006324 <main+0x2124>)
 800622a:	701a      	strb	r2, [r3, #0]

	  				eepromData[28]=calismaSayisiDemo;
 800622c:	4b3d      	ldr	r3, [pc, #244]	@ (8006324 <main+0x2124>)
 800622e:	781a      	ldrb	r2, [r3, #0]
 8006230:	4b3d      	ldr	r3, [pc, #244]	@ (8006328 <main+0x2128>)
 8006232:	771a      	strb	r2, [r3, #28]
	  				hafizaYaz=1;
 8006234:	4b3d      	ldr	r3, [pc, #244]	@ (800632c <main+0x212c>)
 8006236:	2201      	movs	r2, #1
 8006238:	701a      	strb	r2, [r3, #0]
	  		   		//mesajYazildi=0;
	  				demoCalismaSayisiYar=0;
 800623a:	4b36      	ldr	r3, [pc, #216]	@ (8006314 <main+0x2114>)
 800623c:	2200      	movs	r2, #0
 800623e:	701a      	strb	r2, [r3, #0]
	  			}

	  			if (menuGiris==0) {
 8006240:	4b3b      	ldr	r3, [pc, #236]	@ (8006330 <main+0x2130>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d156      	bne.n	80062f6 <main+0x20f6>
	  				lcd_print(2,1,"Cycle     ");
 8006248:	4a3a      	ldr	r2, [pc, #232]	@ (8006334 <main+0x2134>)
 800624a:	2101      	movs	r1, #1
 800624c:	2002      	movs	r0, #2
 800624e:	f7fa f910 	bl	8000472 <lcd_print>
	  				lcd_print(1,1, "    DEMO MODE   ");
 8006252:	4a39      	ldr	r2, [pc, #228]	@ (8006338 <main+0x2138>)
 8006254:	2101      	movs	r1, #1
 8006256:	2001      	movs	r0, #1
 8006258:	f7fa f90b 	bl	8000472 <lcd_print>
	  				itoa(calismaSayisiDemo, snum, 11);
 800625c:	4b31      	ldr	r3, [pc, #196]	@ (8006324 <main+0x2124>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	220b      	movs	r2, #11
 8006262:	4936      	ldr	r1, [pc, #216]	@ (800633c <main+0x213c>)
 8006264:	4618      	mov	r0, r3
 8006266:	f003 fc87 	bl	8009b78 <itoa>
	  				lcd_print(2,16,snum);
 800626a:	4a34      	ldr	r2, [pc, #208]	@ (800633c <main+0x213c>)
 800626c:	2110      	movs	r1, #16
 800626e:	2002      	movs	r0, #2
 8006270:	f7fa f8ff 	bl	8000472 <lcd_print>
	  				mesajYazildi=1;
 8006274:	4b32      	ldr	r3, [pc, #200]	@ (8006340 <main+0x2140>)
 8006276:	2201      	movs	r2, #1
 8006278:	701a      	strb	r2, [r3, #0]
	  			if (menuGiris==0) {
 800627a:	e03c      	b.n	80062f6 <main+0x20f6>
	  			}
	  		} else if(demoMode==1 || menuGiris==1) {
 800627c:	4b31      	ldr	r3, [pc, #196]	@ (8006344 <main+0x2144>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d004      	beq.n	800628e <main+0x208e>
 8006284:	4b2a      	ldr	r3, [pc, #168]	@ (8006330 <main+0x2130>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b01      	cmp	r3, #1
 800628a:	f47e a845 	bne.w	8004318 <main+0x118>
	  			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800628e:	2200      	movs	r2, #0
 8006290:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006294:	481e      	ldr	r0, [pc, #120]	@ (8006310 <main+0x2110>)
 8006296:	f001 f8e4 	bl	8007462 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800629a:	2200      	movs	r2, #0
 800629c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80062a0:	481b      	ldr	r0, [pc, #108]	@ (8006310 <main+0x2110>)
 80062a2:	f001 f8de 	bl	8007462 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80062a6:	2200      	movs	r2, #0
 80062a8:	2104      	movs	r1, #4
 80062aa:	4819      	ldr	r0, [pc, #100]	@ (8006310 <main+0x2110>)
 80062ac:	f001 f8d9 	bl	8007462 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80062b0:	2200      	movs	r2, #0
 80062b2:	2102      	movs	r1, #2
 80062b4:	4816      	ldr	r0, [pc, #88]	@ (8006310 <main+0x2110>)
 80062b6:	f001 f8d4 	bl	8007462 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80062ba:	2200      	movs	r2, #0
 80062bc:	2101      	movs	r1, #1
 80062be:	4814      	ldr	r0, [pc, #80]	@ (8006310 <main+0x2110>)
 80062c0:	f001 f8cf 	bl	8007462 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80062c4:	2200      	movs	r2, #0
 80062c6:	2120      	movs	r1, #32
 80062c8:	480c      	ldr	r0, [pc, #48]	@ (80062fc <main+0x20fc>)
 80062ca:	f001 f8ca 	bl	8007462 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80062ce:	2200      	movs	r2, #0
 80062d0:	2110      	movs	r1, #16
 80062d2:	480a      	ldr	r0, [pc, #40]	@ (80062fc <main+0x20fc>)
 80062d4:	f001 f8c5 	bl	8007462 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80062d8:	2200      	movs	r2, #0
 80062da:	2180      	movs	r1, #128	@ 0x80
 80062dc:	480e      	ldr	r0, [pc, #56]	@ (8006318 <main+0x2118>)
 80062de:	f001 f8c0 	bl	8007462 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80062e2:	2200      	movs	r2, #0
 80062e4:	2140      	movs	r1, #64	@ 0x40
 80062e6:	480c      	ldr	r0, [pc, #48]	@ (8006318 <main+0x2118>)
 80062e8:	f001 f8bb 	bl	8007462 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80062ec:	2200      	movs	r2, #0
 80062ee:	2120      	movs	r1, #32
 80062f0:	4809      	ldr	r0, [pc, #36]	@ (8006318 <main+0x2118>)
 80062f2:	f001 f8b6 	bl	8007462 <HAL_GPIO_WritePin>
	  if(millis - backLightTimer >= lcdBacklightSure) {
 80062f6:	f7fe b80f 	b.w	8004318 <main+0x118>
 80062fa:	bf00      	nop
 80062fc:	40011000 	.word	0x40011000
 8006300:	20000123 	.word	0x20000123
 8006304:	20000121 	.word	0x20000121
 8006308:	20000122 	.word	0x20000122
 800630c:	20000124 	.word	0x20000124
 8006310:	40010c00 	.word	0x40010c00
 8006314:	20000107 	.word	0x20000107
 8006318:	40010800 	.word	0x40010800
 800631c:	200000a8 	.word	0x200000a8
 8006320:	200000b8 	.word	0x200000b8
 8006324:	200000c9 	.word	0x200000c9
 8006328:	20000060 	.word	0x20000060
 800632c:	200000f5 	.word	0x200000f5
 8006330:	200000e7 	.word	0x200000e7
 8006334:	0800a860 	.word	0x0800a860
 8006338:	0800a86c 	.word	0x0800a86c
 800633c:	200000a0 	.word	0x200000a0
 8006340:	200000fd 	.word	0x200000fd
 8006344:	200000e8 	.word	0x200000e8

08006348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b090      	sub	sp, #64	@ 0x40
 800634c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800634e:	f107 0318 	add.w	r3, r7, #24
 8006352:	2228      	movs	r2, #40	@ 0x28
 8006354:	2100      	movs	r1, #0
 8006356:	4618      	mov	r0, r3
 8006358:	f003 fc52 	bl	8009c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800635c:	1d3b      	adds	r3, r7, #4
 800635e:	2200      	movs	r2, #0
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	605a      	str	r2, [r3, #4]
 8006364:	609a      	str	r2, [r3, #8]
 8006366:	60da      	str	r2, [r3, #12]
 8006368:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800636a:	2301      	movs	r3, #1
 800636c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800636e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006372:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006374:	2300      	movs	r3, #0
 8006376:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006378:	2301      	movs	r3, #1
 800637a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800637c:	2302      	movs	r3, #2
 800637e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006380:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006384:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006386:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800638a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800638c:	f107 0318 	add.w	r3, r7, #24
 8006390:	4618      	mov	r0, r3
 8006392:	f002 fab9 	bl	8008908 <HAL_RCC_OscConfig>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800639c:	f000 f9a2 	bl	80066e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80063a0:	230f      	movs	r3, #15
 80063a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80063a4:	2302      	movs	r3, #2
 80063a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80063a8:	2300      	movs	r3, #0
 80063aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80063ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80063b2:	2300      	movs	r3, #0
 80063b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80063b6:	1d3b      	adds	r3, r7, #4
 80063b8:	2102      	movs	r1, #2
 80063ba:	4618      	mov	r0, r3
 80063bc:	f002 fd26 	bl	8008e0c <HAL_RCC_ClockConfig>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80063c6:	f000 f98d 	bl	80066e4 <Error_Handler>
  }
}
 80063ca:	bf00      	nop
 80063cc:	3740      	adds	r7, #64	@ 0x40
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80063d8:	4b16      	ldr	r3, [pc, #88]	@ (8006434 <MX_CAN_Init+0x60>)
 80063da:	4a17      	ldr	r2, [pc, #92]	@ (8006438 <MX_CAN_Init+0x64>)
 80063dc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80063de:	4b15      	ldr	r3, [pc, #84]	@ (8006434 <MX_CAN_Init+0x60>)
 80063e0:	2210      	movs	r2, #16
 80063e2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80063e4:	4b13      	ldr	r3, [pc, #76]	@ (8006434 <MX_CAN_Init+0x60>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80063ea:	4b12      	ldr	r3, [pc, #72]	@ (8006434 <MX_CAN_Init+0x60>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80063f0:	4b10      	ldr	r3, [pc, #64]	@ (8006434 <MX_CAN_Init+0x60>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80063f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006434 <MX_CAN_Init+0x60>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80063fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006434 <MX_CAN_Init+0x60>)
 80063fe:	2200      	movs	r2, #0
 8006400:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8006402:	4b0c      	ldr	r3, [pc, #48]	@ (8006434 <MX_CAN_Init+0x60>)
 8006404:	2200      	movs	r2, #0
 8006406:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8006408:	4b0a      	ldr	r3, [pc, #40]	@ (8006434 <MX_CAN_Init+0x60>)
 800640a:	2200      	movs	r2, #0
 800640c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800640e:	4b09      	ldr	r3, [pc, #36]	@ (8006434 <MX_CAN_Init+0x60>)
 8006410:	2200      	movs	r2, #0
 8006412:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8006414:	4b07      	ldr	r3, [pc, #28]	@ (8006434 <MX_CAN_Init+0x60>)
 8006416:	2200      	movs	r2, #0
 8006418:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800641a:	4b06      	ldr	r3, [pc, #24]	@ (8006434 <MX_CAN_Init+0x60>)
 800641c:	2200      	movs	r2, #0
 800641e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8006420:	4804      	ldr	r0, [pc, #16]	@ (8006434 <MX_CAN_Init+0x60>)
 8006422:	f000 fb9d 	bl	8006b60 <HAL_CAN_Init>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800642c:	f000 f95a 	bl	80066e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8006430:	bf00      	nop
 8006432:	bd80      	pop	{r7, pc}
 8006434:	20000130 	.word	0x20000130
 8006438:	40006400 	.word	0x40006400

0800643c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006440:	4b12      	ldr	r3, [pc, #72]	@ (800648c <MX_I2C1_Init+0x50>)
 8006442:	4a13      	ldr	r2, [pc, #76]	@ (8006490 <MX_I2C1_Init+0x54>)
 8006444:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8006446:	4b11      	ldr	r3, [pc, #68]	@ (800648c <MX_I2C1_Init+0x50>)
 8006448:	4a12      	ldr	r2, [pc, #72]	@ (8006494 <MX_I2C1_Init+0x58>)
 800644a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800644c:	4b0f      	ldr	r3, [pc, #60]	@ (800648c <MX_I2C1_Init+0x50>)
 800644e:	2200      	movs	r2, #0
 8006450:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006452:	4b0e      	ldr	r3, [pc, #56]	@ (800648c <MX_I2C1_Init+0x50>)
 8006454:	2200      	movs	r2, #0
 8006456:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006458:	4b0c      	ldr	r3, [pc, #48]	@ (800648c <MX_I2C1_Init+0x50>)
 800645a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800645e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006460:	4b0a      	ldr	r3, [pc, #40]	@ (800648c <MX_I2C1_Init+0x50>)
 8006462:	2200      	movs	r2, #0
 8006464:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006466:	4b09      	ldr	r3, [pc, #36]	@ (800648c <MX_I2C1_Init+0x50>)
 8006468:	2200      	movs	r2, #0
 800646a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800646c:	4b07      	ldr	r3, [pc, #28]	@ (800648c <MX_I2C1_Init+0x50>)
 800646e:	2200      	movs	r2, #0
 8006470:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006472:	4b06      	ldr	r3, [pc, #24]	@ (800648c <MX_I2C1_Init+0x50>)
 8006474:	2200      	movs	r2, #0
 8006476:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006478:	4804      	ldr	r0, [pc, #16]	@ (800648c <MX_I2C1_Init+0x50>)
 800647a:	f001 f823 	bl	80074c4 <HAL_I2C_Init>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006484:	f000 f92e 	bl	80066e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8006488:	bf00      	nop
 800648a:	bd80      	pop	{r7, pc}
 800648c:	20000158 	.word	0x20000158
 8006490:	40005400 	.word	0x40005400
 8006494:	00061a80 	.word	0x00061a80

08006498 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800649e:	f107 0308 	add.w	r3, r7, #8
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	605a      	str	r2, [r3, #4]
 80064a8:	609a      	str	r2, [r3, #8]
 80064aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064ac:	463b      	mov	r3, r7
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80064b4:	4b1f      	ldr	r3, [pc, #124]	@ (8006534 <MX_TIM1_Init+0x9c>)
 80064b6:	4a20      	ldr	r2, [pc, #128]	@ (8006538 <MX_TIM1_Init+0xa0>)
 80064b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80064ba:	4b1e      	ldr	r3, [pc, #120]	@ (8006534 <MX_TIM1_Init+0x9c>)
 80064bc:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80064c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064c2:	4b1c      	ldr	r3, [pc, #112]	@ (8006534 <MX_TIM1_Init+0x9c>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80064c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006534 <MX_TIM1_Init+0x9c>)
 80064ca:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80064ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064d0:	4b18      	ldr	r3, [pc, #96]	@ (8006534 <MX_TIM1_Init+0x9c>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80064d6:	4b17      	ldr	r3, [pc, #92]	@ (8006534 <MX_TIM1_Init+0x9c>)
 80064d8:	2200      	movs	r2, #0
 80064da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064dc:	4b15      	ldr	r3, [pc, #84]	@ (8006534 <MX_TIM1_Init+0x9c>)
 80064de:	2200      	movs	r2, #0
 80064e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80064e2:	4814      	ldr	r0, [pc, #80]	@ (8006534 <MX_TIM1_Init+0x9c>)
 80064e4:	f002 fe20 	bl	8009128 <HAL_TIM_Base_Init>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80064ee:	f000 f8f9 	bl	80066e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80064f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80064f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80064f8:	f107 0308 	add.w	r3, r7, #8
 80064fc:	4619      	mov	r1, r3
 80064fe:	480d      	ldr	r0, [pc, #52]	@ (8006534 <MX_TIM1_Init+0x9c>)
 8006500:	f002 ffca 	bl	8009498 <HAL_TIM_ConfigClockSource>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800650a:	f000 f8eb 	bl	80066e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800650e:	2300      	movs	r3, #0
 8006510:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006512:	2300      	movs	r3, #0
 8006514:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006516:	463b      	mov	r3, r7
 8006518:	4619      	mov	r1, r3
 800651a:	4806      	ldr	r0, [pc, #24]	@ (8006534 <MX_TIM1_Init+0x9c>)
 800651c:	f003 f9b8 	bl	8009890 <HAL_TIMEx_MasterConfigSynchronization>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8006526:	f000 f8dd 	bl	80066e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800652a:	bf00      	nop
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	200001ac 	.word	0x200001ac
 8006538:	40012c00 	.word	0x40012c00

0800653c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006540:	4b11      	ldr	r3, [pc, #68]	@ (8006588 <MX_USART1_UART_Init+0x4c>)
 8006542:	4a12      	ldr	r2, [pc, #72]	@ (800658c <MX_USART1_UART_Init+0x50>)
 8006544:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006546:	4b10      	ldr	r3, [pc, #64]	@ (8006588 <MX_USART1_UART_Init+0x4c>)
 8006548:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800654c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800654e:	4b0e      	ldr	r3, [pc, #56]	@ (8006588 <MX_USART1_UART_Init+0x4c>)
 8006550:	2200      	movs	r2, #0
 8006552:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006554:	4b0c      	ldr	r3, [pc, #48]	@ (8006588 <MX_USART1_UART_Init+0x4c>)
 8006556:	2200      	movs	r2, #0
 8006558:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800655a:	4b0b      	ldr	r3, [pc, #44]	@ (8006588 <MX_USART1_UART_Init+0x4c>)
 800655c:	2200      	movs	r2, #0
 800655e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006560:	4b09      	ldr	r3, [pc, #36]	@ (8006588 <MX_USART1_UART_Init+0x4c>)
 8006562:	220c      	movs	r2, #12
 8006564:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006566:	4b08      	ldr	r3, [pc, #32]	@ (8006588 <MX_USART1_UART_Init+0x4c>)
 8006568:	2200      	movs	r2, #0
 800656a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800656c:	4b06      	ldr	r3, [pc, #24]	@ (8006588 <MX_USART1_UART_Init+0x4c>)
 800656e:	2200      	movs	r2, #0
 8006570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006572:	4805      	ldr	r0, [pc, #20]	@ (8006588 <MX_USART1_UART_Init+0x4c>)
 8006574:	f003 fa0a 	bl	800998c <HAL_UART_Init>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800657e:	f000 f8b1 	bl	80066e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006582:	bf00      	nop
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	200001f4 	.word	0x200001f4
 800658c:	40013800 	.word	0x40013800

08006590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b088      	sub	sp, #32
 8006594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006596:	f107 0310 	add.w	r3, r7, #16
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	605a      	str	r2, [r3, #4]
 80065a0:	609a      	str	r2, [r3, #8]
 80065a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80065a4:	4b4b      	ldr	r3, [pc, #300]	@ (80066d4 <MX_GPIO_Init+0x144>)
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	4a4a      	ldr	r2, [pc, #296]	@ (80066d4 <MX_GPIO_Init+0x144>)
 80065aa:	f043 0310 	orr.w	r3, r3, #16
 80065ae:	6193      	str	r3, [r2, #24]
 80065b0:	4b48      	ldr	r3, [pc, #288]	@ (80066d4 <MX_GPIO_Init+0x144>)
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	f003 0310 	and.w	r3, r3, #16
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80065bc:	4b45      	ldr	r3, [pc, #276]	@ (80066d4 <MX_GPIO_Init+0x144>)
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	4a44      	ldr	r2, [pc, #272]	@ (80066d4 <MX_GPIO_Init+0x144>)
 80065c2:	f043 0320 	orr.w	r3, r3, #32
 80065c6:	6193      	str	r3, [r2, #24]
 80065c8:	4b42      	ldr	r3, [pc, #264]	@ (80066d4 <MX_GPIO_Init+0x144>)
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	f003 0320 	and.w	r3, r3, #32
 80065d0:	60bb      	str	r3, [r7, #8]
 80065d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80065d4:	4b3f      	ldr	r3, [pc, #252]	@ (80066d4 <MX_GPIO_Init+0x144>)
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	4a3e      	ldr	r2, [pc, #248]	@ (80066d4 <MX_GPIO_Init+0x144>)
 80065da:	f043 0304 	orr.w	r3, r3, #4
 80065de:	6193      	str	r3, [r2, #24]
 80065e0:	4b3c      	ldr	r3, [pc, #240]	@ (80066d4 <MX_GPIO_Init+0x144>)
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	607b      	str	r3, [r7, #4]
 80065ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80065ec:	4b39      	ldr	r3, [pc, #228]	@ (80066d4 <MX_GPIO_Init+0x144>)
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	4a38      	ldr	r2, [pc, #224]	@ (80066d4 <MX_GPIO_Init+0x144>)
 80065f2:	f043 0308 	orr.w	r3, r3, #8
 80065f6:	6193      	str	r3, [r2, #24]
 80065f8:	4b36      	ldr	r3, [pc, #216]	@ (80066d4 <MX_GPIO_Init+0x144>)
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	f003 0308 	and.w	r3, r3, #8
 8006600:	603b      	str	r3, [r7, #0]
 8006602:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8006604:	2200      	movs	r2, #0
 8006606:	21f0      	movs	r1, #240	@ 0xf0
 8006608:	4833      	ldr	r0, [pc, #204]	@ (80066d8 <MX_GPIO_Init+0x148>)
 800660a:	f000 ff2a 	bl	8007462 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800660e:	2200      	movs	r2, #0
 8006610:	f241 0130 	movw	r1, #4144	@ 0x1030
 8006614:	4831      	ldr	r0, [pc, #196]	@ (80066dc <MX_GPIO_Init+0x14c>)
 8006616:	f000 ff24 	bl	8007462 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800661a:	2200      	movs	r2, #0
 800661c:	f640 4107 	movw	r1, #3079	@ 0xc07
 8006620:	482f      	ldr	r0, [pc, #188]	@ (80066e0 <MX_GPIO_Init+0x150>)
 8006622:	f000 ff1e 	bl	8007462 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8006626:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 800662a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006630:	2300      	movs	r3, #0
 8006632:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006634:	f107 0310 	add.w	r3, r7, #16
 8006638:	4619      	mov	r1, r3
 800663a:	4828      	ldr	r0, [pc, #160]	@ (80066dc <MX_GPIO_Init+0x14c>)
 800663c:	f000 fc9a 	bl	8006f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8006640:	f248 130f 	movw	r3, #33039	@ 0x810f
 8006644:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006646:	2300      	movs	r3, #0
 8006648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800664a:	2300      	movs	r3, #0
 800664c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800664e:	f107 0310 	add.w	r3, r7, #16
 8006652:	4619      	mov	r1, r3
 8006654:	4820      	ldr	r0, [pc, #128]	@ (80066d8 <MX_GPIO_Init+0x148>)
 8006656:	f000 fc8d 	bl	8006f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800665a:	23f0      	movs	r3, #240	@ 0xf0
 800665c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800665e:	2301      	movs	r3, #1
 8006660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006662:	2300      	movs	r3, #0
 8006664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006666:	2302      	movs	r3, #2
 8006668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800666a:	f107 0310 	add.w	r3, r7, #16
 800666e:	4619      	mov	r1, r3
 8006670:	4819      	ldr	r0, [pc, #100]	@ (80066d8 <MX_GPIO_Init+0x148>)
 8006672:	f000 fc7f 	bl	8006f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8006676:	f241 0330 	movw	r3, #4144	@ 0x1030
 800667a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800667c:	2301      	movs	r3, #1
 800667e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006680:	2300      	movs	r3, #0
 8006682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006684:	2302      	movs	r3, #2
 8006686:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006688:	f107 0310 	add.w	r3, r7, #16
 800668c:	4619      	mov	r1, r3
 800668e:	4813      	ldr	r0, [pc, #76]	@ (80066dc <MX_GPIO_Init+0x14c>)
 8006690:	f000 fc70 	bl	8006f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8006694:	f640 4307 	movw	r3, #3079	@ 0xc07
 8006698:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800669a:	2301      	movs	r3, #1
 800669c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066a2:	2302      	movs	r3, #2
 80066a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066a6:	f107 0310 	add.w	r3, r7, #16
 80066aa:	4619      	mov	r1, r3
 80066ac:	480c      	ldr	r0, [pc, #48]	@ (80066e0 <MX_GPIO_Init+0x150>)
 80066ae:	f000 fc61 	bl	8006f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80066b2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80066b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066b8:	2300      	movs	r3, #0
 80066ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066bc:	2300      	movs	r3, #0
 80066be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066c0:	f107 0310 	add.w	r3, r7, #16
 80066c4:	4619      	mov	r1, r3
 80066c6:	4806      	ldr	r0, [pc, #24]	@ (80066e0 <MX_GPIO_Init+0x150>)
 80066c8:	f000 fc54 	bl	8006f74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80066cc:	bf00      	nop
 80066ce:	3720      	adds	r7, #32
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40021000 	.word	0x40021000
 80066d8:	40010800 	.word	0x40010800
 80066dc:	40011000 	.word	0x40011000
 80066e0:	40010c00 	.word	0x40010c00

080066e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80066e4:	b480      	push	{r7}
 80066e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80066e8:	bf00      	nop
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bc80      	pop	{r7}
 80066ee:	4770      	bx	lr

080066f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80066f6:	4b15      	ldr	r3, [pc, #84]	@ (800674c <HAL_MspInit+0x5c>)
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	4a14      	ldr	r2, [pc, #80]	@ (800674c <HAL_MspInit+0x5c>)
 80066fc:	f043 0301 	orr.w	r3, r3, #1
 8006700:	6193      	str	r3, [r2, #24]
 8006702:	4b12      	ldr	r3, [pc, #72]	@ (800674c <HAL_MspInit+0x5c>)
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	60bb      	str	r3, [r7, #8]
 800670c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800670e:	4b0f      	ldr	r3, [pc, #60]	@ (800674c <HAL_MspInit+0x5c>)
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	4a0e      	ldr	r2, [pc, #56]	@ (800674c <HAL_MspInit+0x5c>)
 8006714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006718:	61d3      	str	r3, [r2, #28]
 800671a:	4b0c      	ldr	r3, [pc, #48]	@ (800674c <HAL_MspInit+0x5c>)
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006722:	607b      	str	r3, [r7, #4]
 8006724:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006726:	4b0a      	ldr	r3, [pc, #40]	@ (8006750 <HAL_MspInit+0x60>)
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	4a04      	ldr	r2, [pc, #16]	@ (8006750 <HAL_MspInit+0x60>)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006742:	bf00      	nop
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	bc80      	pop	{r7}
 800674a:	4770      	bx	lr
 800674c:	40021000 	.word	0x40021000
 8006750:	40010000 	.word	0x40010000

08006754 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800675c:	f107 0310 	add.w	r3, r7, #16
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	605a      	str	r2, [r3, #4]
 8006766:	609a      	str	r2, [r3, #8]
 8006768:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a1c      	ldr	r2, [pc, #112]	@ (80067e0 <HAL_CAN_MspInit+0x8c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d131      	bne.n	80067d8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006774:	4b1b      	ldr	r3, [pc, #108]	@ (80067e4 <HAL_CAN_MspInit+0x90>)
 8006776:	69db      	ldr	r3, [r3, #28]
 8006778:	4a1a      	ldr	r2, [pc, #104]	@ (80067e4 <HAL_CAN_MspInit+0x90>)
 800677a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800677e:	61d3      	str	r3, [r2, #28]
 8006780:	4b18      	ldr	r3, [pc, #96]	@ (80067e4 <HAL_CAN_MspInit+0x90>)
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800678c:	4b15      	ldr	r3, [pc, #84]	@ (80067e4 <HAL_CAN_MspInit+0x90>)
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	4a14      	ldr	r2, [pc, #80]	@ (80067e4 <HAL_CAN_MspInit+0x90>)
 8006792:	f043 0304 	orr.w	r3, r3, #4
 8006796:	6193      	str	r3, [r2, #24]
 8006798:	4b12      	ldr	r3, [pc, #72]	@ (80067e4 <HAL_CAN_MspInit+0x90>)
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	f003 0304 	and.w	r3, r3, #4
 80067a0:	60bb      	str	r3, [r7, #8]
 80067a2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80067a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80067a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067aa:	2300      	movs	r3, #0
 80067ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067b2:	f107 0310 	add.w	r3, r7, #16
 80067b6:	4619      	mov	r1, r3
 80067b8:	480b      	ldr	r0, [pc, #44]	@ (80067e8 <HAL_CAN_MspInit+0x94>)
 80067ba:	f000 fbdb 	bl	8006f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80067be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80067c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067c4:	2302      	movs	r3, #2
 80067c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80067c8:	2303      	movs	r3, #3
 80067ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067cc:	f107 0310 	add.w	r3, r7, #16
 80067d0:	4619      	mov	r1, r3
 80067d2:	4805      	ldr	r0, [pc, #20]	@ (80067e8 <HAL_CAN_MspInit+0x94>)
 80067d4:	f000 fbce 	bl	8006f74 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80067d8:	bf00      	nop
 80067da:	3720      	adds	r7, #32
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	40006400 	.word	0x40006400
 80067e4:	40021000 	.word	0x40021000
 80067e8:	40010800 	.word	0x40010800

080067ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067f4:	f107 0310 	add.w	r3, r7, #16
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	605a      	str	r2, [r3, #4]
 80067fe:	609a      	str	r2, [r3, #8]
 8006800:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a15      	ldr	r2, [pc, #84]	@ (800685c <HAL_I2C_MspInit+0x70>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d123      	bne.n	8006854 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800680c:	4b14      	ldr	r3, [pc, #80]	@ (8006860 <HAL_I2C_MspInit+0x74>)
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	4a13      	ldr	r2, [pc, #76]	@ (8006860 <HAL_I2C_MspInit+0x74>)
 8006812:	f043 0308 	orr.w	r3, r3, #8
 8006816:	6193      	str	r3, [r2, #24]
 8006818:	4b11      	ldr	r3, [pc, #68]	@ (8006860 <HAL_I2C_MspInit+0x74>)
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	f003 0308 	and.w	r3, r3, #8
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006824:	23c0      	movs	r3, #192	@ 0xc0
 8006826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006828:	2312      	movs	r3, #18
 800682a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800682c:	2303      	movs	r3, #3
 800682e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006830:	f107 0310 	add.w	r3, r7, #16
 8006834:	4619      	mov	r1, r3
 8006836:	480b      	ldr	r0, [pc, #44]	@ (8006864 <HAL_I2C_MspInit+0x78>)
 8006838:	f000 fb9c 	bl	8006f74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800683c:	4b08      	ldr	r3, [pc, #32]	@ (8006860 <HAL_I2C_MspInit+0x74>)
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	4a07      	ldr	r2, [pc, #28]	@ (8006860 <HAL_I2C_MspInit+0x74>)
 8006842:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006846:	61d3      	str	r3, [r2, #28]
 8006848:	4b05      	ldr	r3, [pc, #20]	@ (8006860 <HAL_I2C_MspInit+0x74>)
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006850:	60bb      	str	r3, [r7, #8]
 8006852:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8006854:	bf00      	nop
 8006856:	3720      	adds	r7, #32
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	40005400 	.word	0x40005400
 8006860:	40021000 	.word	0x40021000
 8006864:	40010c00 	.word	0x40010c00

08006868 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a0a      	ldr	r2, [pc, #40]	@ (80068a0 <HAL_I2C_MspDeInit+0x38>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d10d      	bne.n	8006896 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800687a:	4b0a      	ldr	r3, [pc, #40]	@ (80068a4 <HAL_I2C_MspDeInit+0x3c>)
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	4a09      	ldr	r2, [pc, #36]	@ (80068a4 <HAL_I2C_MspDeInit+0x3c>)
 8006880:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006884:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8006886:	2140      	movs	r1, #64	@ 0x40
 8006888:	4807      	ldr	r0, [pc, #28]	@ (80068a8 <HAL_I2C_MspDeInit+0x40>)
 800688a:	f000 fd07 	bl	800729c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800688e:	2180      	movs	r1, #128	@ 0x80
 8006890:	4805      	ldr	r0, [pc, #20]	@ (80068a8 <HAL_I2C_MspDeInit+0x40>)
 8006892:	f000 fd03 	bl	800729c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8006896:	bf00      	nop
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	40005400 	.word	0x40005400
 80068a4:	40021000 	.word	0x40021000
 80068a8:	40010c00 	.word	0x40010c00

080068ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a0d      	ldr	r2, [pc, #52]	@ (80068f0 <HAL_TIM_Base_MspInit+0x44>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d113      	bne.n	80068e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80068be:	4b0d      	ldr	r3, [pc, #52]	@ (80068f4 <HAL_TIM_Base_MspInit+0x48>)
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	4a0c      	ldr	r2, [pc, #48]	@ (80068f4 <HAL_TIM_Base_MspInit+0x48>)
 80068c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80068c8:	6193      	str	r3, [r2, #24]
 80068ca:	4b0a      	ldr	r3, [pc, #40]	@ (80068f4 <HAL_TIM_Base_MspInit+0x48>)
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80068d6:	2200      	movs	r2, #0
 80068d8:	2100      	movs	r1, #0
 80068da:	2019      	movs	r0, #25
 80068dc:	f000 fb13 	bl	8006f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80068e0:	2019      	movs	r0, #25
 80068e2:	f000 fb2c 	bl	8006f3e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80068e6:	bf00      	nop
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	40012c00 	.word	0x40012c00
 80068f4:	40021000 	.word	0x40021000

080068f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006900:	f107 0310 	add.w	r3, r7, #16
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	605a      	str	r2, [r3, #4]
 800690a:	609a      	str	r2, [r3, #8]
 800690c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a1c      	ldr	r2, [pc, #112]	@ (8006984 <HAL_UART_MspInit+0x8c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d131      	bne.n	800697c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006918:	4b1b      	ldr	r3, [pc, #108]	@ (8006988 <HAL_UART_MspInit+0x90>)
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	4a1a      	ldr	r2, [pc, #104]	@ (8006988 <HAL_UART_MspInit+0x90>)
 800691e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006922:	6193      	str	r3, [r2, #24]
 8006924:	4b18      	ldr	r3, [pc, #96]	@ (8006988 <HAL_UART_MspInit+0x90>)
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006930:	4b15      	ldr	r3, [pc, #84]	@ (8006988 <HAL_UART_MspInit+0x90>)
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	4a14      	ldr	r2, [pc, #80]	@ (8006988 <HAL_UART_MspInit+0x90>)
 8006936:	f043 0304 	orr.w	r3, r3, #4
 800693a:	6193      	str	r3, [r2, #24]
 800693c:	4b12      	ldr	r3, [pc, #72]	@ (8006988 <HAL_UART_MspInit+0x90>)
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	60bb      	str	r3, [r7, #8]
 8006946:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800694c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800694e:	2302      	movs	r3, #2
 8006950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006952:	2303      	movs	r3, #3
 8006954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006956:	f107 0310 	add.w	r3, r7, #16
 800695a:	4619      	mov	r1, r3
 800695c:	480b      	ldr	r0, [pc, #44]	@ (800698c <HAL_UART_MspInit+0x94>)
 800695e:	f000 fb09 	bl	8006f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006962:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006966:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006968:	2300      	movs	r3, #0
 800696a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800696c:	2300      	movs	r3, #0
 800696e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006970:	f107 0310 	add.w	r3, r7, #16
 8006974:	4619      	mov	r1, r3
 8006976:	4805      	ldr	r0, [pc, #20]	@ (800698c <HAL_UART_MspInit+0x94>)
 8006978:	f000 fafc 	bl	8006f74 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800697c:	bf00      	nop
 800697e:	3720      	adds	r7, #32
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	40013800 	.word	0x40013800
 8006988:	40021000 	.word	0x40021000
 800698c:	40010800 	.word	0x40010800

08006990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006994:	bf00      	nop
 8006996:	e7fd      	b.n	8006994 <NMI_Handler+0x4>

08006998 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800699c:	bf00      	nop
 800699e:	e7fd      	b.n	800699c <HardFault_Handler+0x4>

080069a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069a4:	bf00      	nop
 80069a6:	e7fd      	b.n	80069a4 <MemManage_Handler+0x4>

080069a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80069a8:	b480      	push	{r7}
 80069aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80069ac:	bf00      	nop
 80069ae:	e7fd      	b.n	80069ac <BusFault_Handler+0x4>

080069b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80069b0:	b480      	push	{r7}
 80069b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80069b4:	bf00      	nop
 80069b6:	e7fd      	b.n	80069b4 <UsageFault_Handler+0x4>

080069b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80069bc:	bf00      	nop
 80069be:	46bd      	mov	sp, r7
 80069c0:	bc80      	pop	{r7}
 80069c2:	4770      	bx	lr

080069c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80069c4:	b480      	push	{r7}
 80069c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80069c8:	bf00      	nop
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr

080069d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80069d4:	bf00      	nop
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr

080069dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80069e0:	f000 f87e 	bl	8006ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80069e4:	bf00      	nop
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80069ec:	4802      	ldr	r0, [pc, #8]	@ (80069f8 <TIM1_UP_IRQHandler+0x10>)
 80069ee:	f002 fc4b 	bl	8009288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80069f2:	bf00      	nop
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	200001ac 	.word	0x200001ac

080069fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006a00:	bf00      	nop
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr

08006a08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006a08:	480c      	ldr	r0, [pc, #48]	@ (8006a3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006a0a:	490d      	ldr	r1, [pc, #52]	@ (8006a40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8006a44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a10:	e002      	b.n	8006a18 <LoopCopyDataInit>

08006a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a16:	3304      	adds	r3, #4

08006a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a1c:	d3f9      	bcc.n	8006a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8006a48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006a20:	4c0a      	ldr	r4, [pc, #40]	@ (8006a4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8006a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a24:	e001      	b.n	8006a2a <LoopFillZerobss>

08006a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a28:	3204      	adds	r2, #4

08006a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a2c:	d3fb      	bcc.n	8006a26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006a2e:	f7ff ffe5 	bl	80069fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a32:	f003 f8ed 	bl	8009c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006a36:	f7fd fbe3 	bl	8004200 <main>
  bx lr
 8006a3a:	4770      	bx	lr
  ldr r0, =_sdata
 8006a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a40:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8006a44:	0800a8d8 	.word	0x0800a8d8
  ldr r2, =_sbss
 8006a48:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8006a4c:	20000240 	.word	0x20000240

08006a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006a50:	e7fe      	b.n	8006a50 <ADC1_2_IRQHandler>
	...

08006a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a58:	4b08      	ldr	r3, [pc, #32]	@ (8006a7c <HAL_Init+0x28>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a07      	ldr	r2, [pc, #28]	@ (8006a7c <HAL_Init+0x28>)
 8006a5e:	f043 0310 	orr.w	r3, r3, #16
 8006a62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a64:	2003      	movs	r0, #3
 8006a66:	f000 fa43 	bl	8006ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006a6a:	200f      	movs	r0, #15
 8006a6c:	f000 f808 	bl	8006a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006a70:	f7ff fe3e 	bl	80066f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40022000 	.word	0x40022000

08006a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006a88:	4b12      	ldr	r3, [pc, #72]	@ (8006ad4 <HAL_InitTick+0x54>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	4b12      	ldr	r3, [pc, #72]	@ (8006ad8 <HAL_InitTick+0x58>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	4619      	mov	r1, r3
 8006a92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fa5b 	bl	8006f5a <HAL_SYSTICK_Config>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e00e      	b.n	8006acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b0f      	cmp	r3, #15
 8006ab2:	d80a      	bhi.n	8006aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	6879      	ldr	r1, [r7, #4]
 8006ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006abc:	f000 fa23 	bl	8006f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ac0:	4a06      	ldr	r2, [pc, #24]	@ (8006adc <HAL_InitTick+0x5c>)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	e000      	b.n	8006acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	20000034 	.word	0x20000034
 8006ad8:	2000003c 	.word	0x2000003c
 8006adc:	20000038 	.word	0x20000038

08006ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ae4:	4b05      	ldr	r3, [pc, #20]	@ (8006afc <HAL_IncTick+0x1c>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	4b05      	ldr	r3, [pc, #20]	@ (8006b00 <HAL_IncTick+0x20>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4413      	add	r3, r2
 8006af0:	4a03      	ldr	r2, [pc, #12]	@ (8006b00 <HAL_IncTick+0x20>)
 8006af2:	6013      	str	r3, [r2, #0]
}
 8006af4:	bf00      	nop
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bc80      	pop	{r7}
 8006afa:	4770      	bx	lr
 8006afc:	2000003c 	.word	0x2000003c
 8006b00:	2000023c 	.word	0x2000023c

08006b04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b04:	b480      	push	{r7}
 8006b06:	af00      	add	r7, sp, #0
  return uwTick;
 8006b08:	4b02      	ldr	r3, [pc, #8]	@ (8006b14 <HAL_GetTick+0x10>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bc80      	pop	{r7}
 8006b12:	4770      	bx	lr
 8006b14:	2000023c 	.word	0x2000023c

08006b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b20:	f7ff fff0 	bl	8006b04 <HAL_GetTick>
 8006b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b30:	d005      	beq.n	8006b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b32:	4b0a      	ldr	r3, [pc, #40]	@ (8006b5c <HAL_Delay+0x44>)
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	461a      	mov	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006b3e:	bf00      	nop
 8006b40:	f7ff ffe0 	bl	8006b04 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d8f7      	bhi.n	8006b40 <HAL_Delay+0x28>
  {
  }
}
 8006b50:	bf00      	nop
 8006b52:	bf00      	nop
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	2000003c 	.word	0x2000003c

08006b60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e0ed      	b.n	8006d4e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d102      	bne.n	8006b84 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7ff fde8 	bl	8006754 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0201 	orr.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b94:	f7ff ffb6 	bl	8006b04 <HAL_GetTick>
 8006b98:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006b9a:	e012      	b.n	8006bc2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006b9c:	f7ff ffb2 	bl	8006b04 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b0a      	cmp	r3, #10
 8006ba8:	d90b      	bls.n	8006bc2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2205      	movs	r2, #5
 8006bba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e0c5      	b.n	8006d4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0e5      	beq.n	8006b9c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0202 	bic.w	r2, r2, #2
 8006bde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006be0:	f7ff ff90 	bl	8006b04 <HAL_GetTick>
 8006be4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006be6:	e012      	b.n	8006c0e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006be8:	f7ff ff8c 	bl	8006b04 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b0a      	cmp	r3, #10
 8006bf4:	d90b      	bls.n	8006c0e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bfa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2205      	movs	r2, #5
 8006c06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e09f      	b.n	8006d4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e5      	bne.n	8006be8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	7e1b      	ldrb	r3, [r3, #24]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d108      	bne.n	8006c36 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	e007      	b.n	8006c46 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	7e5b      	ldrb	r3, [r3, #25]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d108      	bne.n	8006c60 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	e007      	b.n	8006c70 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	7e9b      	ldrb	r3, [r3, #26]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d108      	bne.n	8006c8a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0220 	orr.w	r2, r2, #32
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	e007      	b.n	8006c9a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0220 	bic.w	r2, r2, #32
 8006c98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	7edb      	ldrb	r3, [r3, #27]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d108      	bne.n	8006cb4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0210 	bic.w	r2, r2, #16
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	e007      	b.n	8006cc4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0210 	orr.w	r2, r2, #16
 8006cc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	7f1b      	ldrb	r3, [r3, #28]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d108      	bne.n	8006cde <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f042 0208 	orr.w	r2, r2, #8
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	e007      	b.n	8006cee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0208 	bic.w	r2, r2, #8
 8006cec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	7f5b      	ldrb	r3, [r3, #29]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d108      	bne.n	8006d08 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f042 0204 	orr.w	r2, r2, #4
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	e007      	b.n	8006d18 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 0204 	bic.w	r2, r2, #4
 8006d16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	431a      	orrs	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	ea42 0103 	orr.w	r1, r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	1e5a      	subs	r2, r3, #1
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <__NVIC_SetPriorityGrouping>:
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d68:	4b0c      	ldr	r3, [pc, #48]	@ (8006d9c <__NVIC_SetPriorityGrouping+0x44>)
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006d74:	4013      	ands	r3, r2
 8006d76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d8a:	4a04      	ldr	r2, [pc, #16]	@ (8006d9c <__NVIC_SetPriorityGrouping+0x44>)
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	60d3      	str	r3, [r2, #12]
}
 8006d90:	bf00      	nop
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bc80      	pop	{r7}
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	e000ed00 	.word	0xe000ed00

08006da0 <__NVIC_GetPriorityGrouping>:
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006da4:	4b04      	ldr	r3, [pc, #16]	@ (8006db8 <__NVIC_GetPriorityGrouping+0x18>)
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	0a1b      	lsrs	r3, r3, #8
 8006daa:	f003 0307 	and.w	r3, r3, #7
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	e000ed00 	.word	0xe000ed00

08006dbc <__NVIC_EnableIRQ>:
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	db0b      	blt.n	8006de6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	f003 021f 	and.w	r2, r3, #31
 8006dd4:	4906      	ldr	r1, [pc, #24]	@ (8006df0 <__NVIC_EnableIRQ+0x34>)
 8006dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dda:	095b      	lsrs	r3, r3, #5
 8006ddc:	2001      	movs	r0, #1
 8006dde:	fa00 f202 	lsl.w	r2, r0, r2
 8006de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bc80      	pop	{r7}
 8006dee:	4770      	bx	lr
 8006df0:	e000e100 	.word	0xe000e100

08006df4 <__NVIC_SetPriority>:
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	6039      	str	r1, [r7, #0]
 8006dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	db0a      	blt.n	8006e1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	490c      	ldr	r1, [pc, #48]	@ (8006e40 <__NVIC_SetPriority+0x4c>)
 8006e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e12:	0112      	lsls	r2, r2, #4
 8006e14:	b2d2      	uxtb	r2, r2
 8006e16:	440b      	add	r3, r1
 8006e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006e1c:	e00a      	b.n	8006e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	4908      	ldr	r1, [pc, #32]	@ (8006e44 <__NVIC_SetPriority+0x50>)
 8006e24:	79fb      	ldrb	r3, [r7, #7]
 8006e26:	f003 030f 	and.w	r3, r3, #15
 8006e2a:	3b04      	subs	r3, #4
 8006e2c:	0112      	lsls	r2, r2, #4
 8006e2e:	b2d2      	uxtb	r2, r2
 8006e30:	440b      	add	r3, r1
 8006e32:	761a      	strb	r2, [r3, #24]
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bc80      	pop	{r7}
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	e000e100 	.word	0xe000e100
 8006e44:	e000ed00 	.word	0xe000ed00

08006e48 <NVIC_EncodePriority>:
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b089      	sub	sp, #36	@ 0x24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	f1c3 0307 	rsb	r3, r3, #7
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	bf28      	it	cs
 8006e66:	2304      	movcs	r3, #4
 8006e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	2b06      	cmp	r3, #6
 8006e70:	d902      	bls.n	8006e78 <NVIC_EncodePriority+0x30>
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	3b03      	subs	r3, #3
 8006e76:	e000      	b.n	8006e7a <NVIC_EncodePriority+0x32>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	fa02 f303 	lsl.w	r3, r2, r3
 8006e86:	43da      	mvns	r2, r3
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	401a      	ands	r2, r3
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	fa01 f303 	lsl.w	r3, r1, r3
 8006e9a:	43d9      	mvns	r1, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ea0:	4313      	orrs	r3, r2
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3724      	adds	r7, #36	@ 0x24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bc80      	pop	{r7}
 8006eaa:	4770      	bx	lr

08006eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ebc:	d301      	bcc.n	8006ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e00f      	b.n	8006ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8006eec <SysTick_Config+0x40>)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006eca:	210f      	movs	r1, #15
 8006ecc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ed0:	f7ff ff90 	bl	8006df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ed4:	4b05      	ldr	r3, [pc, #20]	@ (8006eec <SysTick_Config+0x40>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006eda:	4b04      	ldr	r3, [pc, #16]	@ (8006eec <SysTick_Config+0x40>)
 8006edc:	2207      	movs	r2, #7
 8006ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	e000e010 	.word	0xe000e010

08006ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7ff ff2d 	bl	8006d58 <__NVIC_SetPriorityGrouping>
}
 8006efe:	bf00      	nop
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b086      	sub	sp, #24
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	607a      	str	r2, [r7, #4]
 8006f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f18:	f7ff ff42 	bl	8006da0 <__NVIC_GetPriorityGrouping>
 8006f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	68b9      	ldr	r1, [r7, #8]
 8006f22:	6978      	ldr	r0, [r7, #20]
 8006f24:	f7ff ff90 	bl	8006e48 <NVIC_EncodePriority>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f2e:	4611      	mov	r1, r2
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7ff ff5f 	bl	8006df4 <__NVIC_SetPriority>
}
 8006f36:	bf00      	nop
 8006f38:	3718      	adds	r7, #24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b082      	sub	sp, #8
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	4603      	mov	r3, r0
 8006f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7ff ff35 	bl	8006dbc <__NVIC_EnableIRQ>
}
 8006f52:	bf00      	nop
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b082      	sub	sp, #8
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff ffa2 	bl	8006eac <SysTick_Config>
 8006f68:	4603      	mov	r3, r0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b08b      	sub	sp, #44	@ 0x2c
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006f82:	2300      	movs	r3, #0
 8006f84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f86:	e179      	b.n	800727c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006f88:	2201      	movs	r2, #1
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	69fa      	ldr	r2, [r7, #28]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	f040 8168 	bne.w	8007276 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	4a96      	ldr	r2, [pc, #600]	@ (8007204 <HAL_GPIO_Init+0x290>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d05e      	beq.n	800706e <HAL_GPIO_Init+0xfa>
 8006fb0:	4a94      	ldr	r2, [pc, #592]	@ (8007204 <HAL_GPIO_Init+0x290>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d875      	bhi.n	80070a2 <HAL_GPIO_Init+0x12e>
 8006fb6:	4a94      	ldr	r2, [pc, #592]	@ (8007208 <HAL_GPIO_Init+0x294>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d058      	beq.n	800706e <HAL_GPIO_Init+0xfa>
 8006fbc:	4a92      	ldr	r2, [pc, #584]	@ (8007208 <HAL_GPIO_Init+0x294>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d86f      	bhi.n	80070a2 <HAL_GPIO_Init+0x12e>
 8006fc2:	4a92      	ldr	r2, [pc, #584]	@ (800720c <HAL_GPIO_Init+0x298>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d052      	beq.n	800706e <HAL_GPIO_Init+0xfa>
 8006fc8:	4a90      	ldr	r2, [pc, #576]	@ (800720c <HAL_GPIO_Init+0x298>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d869      	bhi.n	80070a2 <HAL_GPIO_Init+0x12e>
 8006fce:	4a90      	ldr	r2, [pc, #576]	@ (8007210 <HAL_GPIO_Init+0x29c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d04c      	beq.n	800706e <HAL_GPIO_Init+0xfa>
 8006fd4:	4a8e      	ldr	r2, [pc, #568]	@ (8007210 <HAL_GPIO_Init+0x29c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d863      	bhi.n	80070a2 <HAL_GPIO_Init+0x12e>
 8006fda:	4a8e      	ldr	r2, [pc, #568]	@ (8007214 <HAL_GPIO_Init+0x2a0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d046      	beq.n	800706e <HAL_GPIO_Init+0xfa>
 8006fe0:	4a8c      	ldr	r2, [pc, #560]	@ (8007214 <HAL_GPIO_Init+0x2a0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d85d      	bhi.n	80070a2 <HAL_GPIO_Init+0x12e>
 8006fe6:	2b12      	cmp	r3, #18
 8006fe8:	d82a      	bhi.n	8007040 <HAL_GPIO_Init+0xcc>
 8006fea:	2b12      	cmp	r3, #18
 8006fec:	d859      	bhi.n	80070a2 <HAL_GPIO_Init+0x12e>
 8006fee:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff4 <HAL_GPIO_Init+0x80>)
 8006ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff4:	0800706f 	.word	0x0800706f
 8006ff8:	08007049 	.word	0x08007049
 8006ffc:	0800705b 	.word	0x0800705b
 8007000:	0800709d 	.word	0x0800709d
 8007004:	080070a3 	.word	0x080070a3
 8007008:	080070a3 	.word	0x080070a3
 800700c:	080070a3 	.word	0x080070a3
 8007010:	080070a3 	.word	0x080070a3
 8007014:	080070a3 	.word	0x080070a3
 8007018:	080070a3 	.word	0x080070a3
 800701c:	080070a3 	.word	0x080070a3
 8007020:	080070a3 	.word	0x080070a3
 8007024:	080070a3 	.word	0x080070a3
 8007028:	080070a3 	.word	0x080070a3
 800702c:	080070a3 	.word	0x080070a3
 8007030:	080070a3 	.word	0x080070a3
 8007034:	080070a3 	.word	0x080070a3
 8007038:	08007051 	.word	0x08007051
 800703c:	08007065 	.word	0x08007065
 8007040:	4a75      	ldr	r2, [pc, #468]	@ (8007218 <HAL_GPIO_Init+0x2a4>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d013      	beq.n	800706e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007046:	e02c      	b.n	80070a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	623b      	str	r3, [r7, #32]
          break;
 800704e:	e029      	b.n	80070a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	3304      	adds	r3, #4
 8007056:	623b      	str	r3, [r7, #32]
          break;
 8007058:	e024      	b.n	80070a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	3308      	adds	r3, #8
 8007060:	623b      	str	r3, [r7, #32]
          break;
 8007062:	e01f      	b.n	80070a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	330c      	adds	r3, #12
 800706a:	623b      	str	r3, [r7, #32]
          break;
 800706c:	e01a      	b.n	80070a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d102      	bne.n	800707c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007076:	2304      	movs	r3, #4
 8007078:	623b      	str	r3, [r7, #32]
          break;
 800707a:	e013      	b.n	80070a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d105      	bne.n	8007090 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007084:	2308      	movs	r3, #8
 8007086:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	69fa      	ldr	r2, [r7, #28]
 800708c:	611a      	str	r2, [r3, #16]
          break;
 800708e:	e009      	b.n	80070a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007090:	2308      	movs	r3, #8
 8007092:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	69fa      	ldr	r2, [r7, #28]
 8007098:	615a      	str	r2, [r3, #20]
          break;
 800709a:	e003      	b.n	80070a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800709c:	2300      	movs	r3, #0
 800709e:	623b      	str	r3, [r7, #32]
          break;
 80070a0:	e000      	b.n	80070a4 <HAL_GPIO_Init+0x130>
          break;
 80070a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	2bff      	cmp	r3, #255	@ 0xff
 80070a8:	d801      	bhi.n	80070ae <HAL_GPIO_Init+0x13a>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	e001      	b.n	80070b2 <HAL_GPIO_Init+0x13e>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	3304      	adds	r3, #4
 80070b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	2bff      	cmp	r3, #255	@ 0xff
 80070b8:	d802      	bhi.n	80070c0 <HAL_GPIO_Init+0x14c>
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	e002      	b.n	80070c6 <HAL_GPIO_Init+0x152>
 80070c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c2:	3b08      	subs	r3, #8
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	210f      	movs	r1, #15
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	fa01 f303 	lsl.w	r3, r1, r3
 80070d4:	43db      	mvns	r3, r3
 80070d6:	401a      	ands	r2, r3
 80070d8:	6a39      	ldr	r1, [r7, #32]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	fa01 f303 	lsl.w	r3, r1, r3
 80070e0:	431a      	orrs	r2, r3
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 80c1 	beq.w	8007276 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80070f4:	4b49      	ldr	r3, [pc, #292]	@ (800721c <HAL_GPIO_Init+0x2a8>)
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	4a48      	ldr	r2, [pc, #288]	@ (800721c <HAL_GPIO_Init+0x2a8>)
 80070fa:	f043 0301 	orr.w	r3, r3, #1
 80070fe:	6193      	str	r3, [r2, #24]
 8007100:	4b46      	ldr	r3, [pc, #280]	@ (800721c <HAL_GPIO_Init+0x2a8>)
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	60bb      	str	r3, [r7, #8]
 800710a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800710c:	4a44      	ldr	r2, [pc, #272]	@ (8007220 <HAL_GPIO_Init+0x2ac>)
 800710e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007110:	089b      	lsrs	r3, r3, #2
 8007112:	3302      	adds	r3, #2
 8007114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007118:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800711a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711c:	f003 0303 	and.w	r3, r3, #3
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	220f      	movs	r2, #15
 8007124:	fa02 f303 	lsl.w	r3, r2, r3
 8007128:	43db      	mvns	r3, r3
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	4013      	ands	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a3c      	ldr	r2, [pc, #240]	@ (8007224 <HAL_GPIO_Init+0x2b0>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d01f      	beq.n	8007178 <HAL_GPIO_Init+0x204>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a3b      	ldr	r2, [pc, #236]	@ (8007228 <HAL_GPIO_Init+0x2b4>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d019      	beq.n	8007174 <HAL_GPIO_Init+0x200>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a3a      	ldr	r2, [pc, #232]	@ (800722c <HAL_GPIO_Init+0x2b8>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d013      	beq.n	8007170 <HAL_GPIO_Init+0x1fc>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a39      	ldr	r2, [pc, #228]	@ (8007230 <HAL_GPIO_Init+0x2bc>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d00d      	beq.n	800716c <HAL_GPIO_Init+0x1f8>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a38      	ldr	r2, [pc, #224]	@ (8007234 <HAL_GPIO_Init+0x2c0>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d007      	beq.n	8007168 <HAL_GPIO_Init+0x1f4>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a37      	ldr	r2, [pc, #220]	@ (8007238 <HAL_GPIO_Init+0x2c4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d101      	bne.n	8007164 <HAL_GPIO_Init+0x1f0>
 8007160:	2305      	movs	r3, #5
 8007162:	e00a      	b.n	800717a <HAL_GPIO_Init+0x206>
 8007164:	2306      	movs	r3, #6
 8007166:	e008      	b.n	800717a <HAL_GPIO_Init+0x206>
 8007168:	2304      	movs	r3, #4
 800716a:	e006      	b.n	800717a <HAL_GPIO_Init+0x206>
 800716c:	2303      	movs	r3, #3
 800716e:	e004      	b.n	800717a <HAL_GPIO_Init+0x206>
 8007170:	2302      	movs	r3, #2
 8007172:	e002      	b.n	800717a <HAL_GPIO_Init+0x206>
 8007174:	2301      	movs	r3, #1
 8007176:	e000      	b.n	800717a <HAL_GPIO_Init+0x206>
 8007178:	2300      	movs	r3, #0
 800717a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800717c:	f002 0203 	and.w	r2, r2, #3
 8007180:	0092      	lsls	r2, r2, #2
 8007182:	4093      	lsls	r3, r2
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	4313      	orrs	r3, r2
 8007188:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800718a:	4925      	ldr	r1, [pc, #148]	@ (8007220 <HAL_GPIO_Init+0x2ac>)
 800718c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718e:	089b      	lsrs	r3, r3, #2
 8007190:	3302      	adds	r3, #2
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d006      	beq.n	80071b2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80071a4:	4b25      	ldr	r3, [pc, #148]	@ (800723c <HAL_GPIO_Init+0x2c8>)
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	4924      	ldr	r1, [pc, #144]	@ (800723c <HAL_GPIO_Init+0x2c8>)
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	608b      	str	r3, [r1, #8]
 80071b0:	e006      	b.n	80071c0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80071b2:	4b22      	ldr	r3, [pc, #136]	@ (800723c <HAL_GPIO_Init+0x2c8>)
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	43db      	mvns	r3, r3
 80071ba:	4920      	ldr	r1, [pc, #128]	@ (800723c <HAL_GPIO_Init+0x2c8>)
 80071bc:	4013      	ands	r3, r2
 80071be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d006      	beq.n	80071da <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80071cc:	4b1b      	ldr	r3, [pc, #108]	@ (800723c <HAL_GPIO_Init+0x2c8>)
 80071ce:	68da      	ldr	r2, [r3, #12]
 80071d0:	491a      	ldr	r1, [pc, #104]	@ (800723c <HAL_GPIO_Init+0x2c8>)
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	60cb      	str	r3, [r1, #12]
 80071d8:	e006      	b.n	80071e8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80071da:	4b18      	ldr	r3, [pc, #96]	@ (800723c <HAL_GPIO_Init+0x2c8>)
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	43db      	mvns	r3, r3
 80071e2:	4916      	ldr	r1, [pc, #88]	@ (800723c <HAL_GPIO_Init+0x2c8>)
 80071e4:	4013      	ands	r3, r2
 80071e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d025      	beq.n	8007240 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80071f4:	4b11      	ldr	r3, [pc, #68]	@ (800723c <HAL_GPIO_Init+0x2c8>)
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	4910      	ldr	r1, [pc, #64]	@ (800723c <HAL_GPIO_Init+0x2c8>)
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	604b      	str	r3, [r1, #4]
 8007200:	e025      	b.n	800724e <HAL_GPIO_Init+0x2da>
 8007202:	bf00      	nop
 8007204:	10320000 	.word	0x10320000
 8007208:	10310000 	.word	0x10310000
 800720c:	10220000 	.word	0x10220000
 8007210:	10210000 	.word	0x10210000
 8007214:	10120000 	.word	0x10120000
 8007218:	10110000 	.word	0x10110000
 800721c:	40021000 	.word	0x40021000
 8007220:	40010000 	.word	0x40010000
 8007224:	40010800 	.word	0x40010800
 8007228:	40010c00 	.word	0x40010c00
 800722c:	40011000 	.word	0x40011000
 8007230:	40011400 	.word	0x40011400
 8007234:	40011800 	.word	0x40011800
 8007238:	40011c00 	.word	0x40011c00
 800723c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007240:	4b15      	ldr	r3, [pc, #84]	@ (8007298 <HAL_GPIO_Init+0x324>)
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	43db      	mvns	r3, r3
 8007248:	4913      	ldr	r1, [pc, #76]	@ (8007298 <HAL_GPIO_Init+0x324>)
 800724a:	4013      	ands	r3, r2
 800724c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d006      	beq.n	8007268 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800725a:	4b0f      	ldr	r3, [pc, #60]	@ (8007298 <HAL_GPIO_Init+0x324>)
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	490e      	ldr	r1, [pc, #56]	@ (8007298 <HAL_GPIO_Init+0x324>)
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	4313      	orrs	r3, r2
 8007264:	600b      	str	r3, [r1, #0]
 8007266:	e006      	b.n	8007276 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007268:	4b0b      	ldr	r3, [pc, #44]	@ (8007298 <HAL_GPIO_Init+0x324>)
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	43db      	mvns	r3, r3
 8007270:	4909      	ldr	r1, [pc, #36]	@ (8007298 <HAL_GPIO_Init+0x324>)
 8007272:	4013      	ands	r3, r2
 8007274:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8007276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007278:	3301      	adds	r3, #1
 800727a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007282:	fa22 f303 	lsr.w	r3, r2, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	f47f ae7e 	bne.w	8006f88 <HAL_GPIO_Init+0x14>
  }
}
 800728c:	bf00      	nop
 800728e:	bf00      	nop
 8007290:	372c      	adds	r7, #44	@ 0x2c
 8007292:	46bd      	mov	sp, r7
 8007294:	bc80      	pop	{r7}
 8007296:	4770      	bx	lr
 8007298:	40010400 	.word	0x40010400

0800729c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800729c:	b480      	push	{r7}
 800729e:	b089      	sub	sp, #36	@ 0x24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80072a6:	2300      	movs	r3, #0
 80072a8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80072aa:	e0a6      	b.n	80073fa <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80072ac:	2201      	movs	r2, #1
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	fa02 f303 	lsl.w	r3, r2, r3
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	4013      	ands	r3, r2
 80072b8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 8099 	beq.w	80073f4 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80072c2:	4a54      	ldr	r2, [pc, #336]	@ (8007414 <HAL_GPIO_DeInit+0x178>)
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	089b      	lsrs	r3, r3, #2
 80072c8:	3302      	adds	r3, #2
 80072ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ce:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	f003 0303 	and.w	r3, r3, #3
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	220f      	movs	r2, #15
 80072da:	fa02 f303 	lsl.w	r3, r2, r3
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	4013      	ands	r3, r2
 80072e2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a4c      	ldr	r2, [pc, #304]	@ (8007418 <HAL_GPIO_DeInit+0x17c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d01f      	beq.n	800732c <HAL_GPIO_DeInit+0x90>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a4b      	ldr	r2, [pc, #300]	@ (800741c <HAL_GPIO_DeInit+0x180>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d019      	beq.n	8007328 <HAL_GPIO_DeInit+0x8c>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a4a      	ldr	r2, [pc, #296]	@ (8007420 <HAL_GPIO_DeInit+0x184>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d013      	beq.n	8007324 <HAL_GPIO_DeInit+0x88>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a49      	ldr	r2, [pc, #292]	@ (8007424 <HAL_GPIO_DeInit+0x188>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d00d      	beq.n	8007320 <HAL_GPIO_DeInit+0x84>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a48      	ldr	r2, [pc, #288]	@ (8007428 <HAL_GPIO_DeInit+0x18c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d007      	beq.n	800731c <HAL_GPIO_DeInit+0x80>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a47      	ldr	r2, [pc, #284]	@ (800742c <HAL_GPIO_DeInit+0x190>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d101      	bne.n	8007318 <HAL_GPIO_DeInit+0x7c>
 8007314:	2305      	movs	r3, #5
 8007316:	e00a      	b.n	800732e <HAL_GPIO_DeInit+0x92>
 8007318:	2306      	movs	r3, #6
 800731a:	e008      	b.n	800732e <HAL_GPIO_DeInit+0x92>
 800731c:	2304      	movs	r3, #4
 800731e:	e006      	b.n	800732e <HAL_GPIO_DeInit+0x92>
 8007320:	2303      	movs	r3, #3
 8007322:	e004      	b.n	800732e <HAL_GPIO_DeInit+0x92>
 8007324:	2302      	movs	r3, #2
 8007326:	e002      	b.n	800732e <HAL_GPIO_DeInit+0x92>
 8007328:	2301      	movs	r3, #1
 800732a:	e000      	b.n	800732e <HAL_GPIO_DeInit+0x92>
 800732c:	2300      	movs	r3, #0
 800732e:	69fa      	ldr	r2, [r7, #28]
 8007330:	f002 0203 	and.w	r2, r2, #3
 8007334:	0092      	lsls	r2, r2, #2
 8007336:	4093      	lsls	r3, r2
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	429a      	cmp	r2, r3
 800733c:	d132      	bne.n	80073a4 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800733e:	4b3c      	ldr	r3, [pc, #240]	@ (8007430 <HAL_GPIO_DeInit+0x194>)
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	43db      	mvns	r3, r3
 8007346:	493a      	ldr	r1, [pc, #232]	@ (8007430 <HAL_GPIO_DeInit+0x194>)
 8007348:	4013      	ands	r3, r2
 800734a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800734c:	4b38      	ldr	r3, [pc, #224]	@ (8007430 <HAL_GPIO_DeInit+0x194>)
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	43db      	mvns	r3, r3
 8007354:	4936      	ldr	r1, [pc, #216]	@ (8007430 <HAL_GPIO_DeInit+0x194>)
 8007356:	4013      	ands	r3, r2
 8007358:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800735a:	4b35      	ldr	r3, [pc, #212]	@ (8007430 <HAL_GPIO_DeInit+0x194>)
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	43db      	mvns	r3, r3
 8007362:	4933      	ldr	r1, [pc, #204]	@ (8007430 <HAL_GPIO_DeInit+0x194>)
 8007364:	4013      	ands	r3, r2
 8007366:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8007368:	4b31      	ldr	r3, [pc, #196]	@ (8007430 <HAL_GPIO_DeInit+0x194>)
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	43db      	mvns	r3, r3
 8007370:	492f      	ldr	r1, [pc, #188]	@ (8007430 <HAL_GPIO_DeInit+0x194>)
 8007372:	4013      	ands	r3, r2
 8007374:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	f003 0303 	and.w	r3, r3, #3
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	220f      	movs	r2, #15
 8007380:	fa02 f303 	lsl.w	r3, r2, r3
 8007384:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8007386:	4a23      	ldr	r2, [pc, #140]	@ (8007414 <HAL_GPIO_DeInit+0x178>)
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	089b      	lsrs	r3, r3, #2
 800738c:	3302      	adds	r3, #2
 800738e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	43da      	mvns	r2, r3
 8007396:	481f      	ldr	r0, [pc, #124]	@ (8007414 <HAL_GPIO_DeInit+0x178>)
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	089b      	lsrs	r3, r3, #2
 800739c:	400a      	ands	r2, r1
 800739e:	3302      	adds	r3, #2
 80073a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	2bff      	cmp	r3, #255	@ 0xff
 80073a8:	d801      	bhi.n	80073ae <HAL_GPIO_DeInit+0x112>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	e001      	b.n	80073b2 <HAL_GPIO_DeInit+0x116>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	3304      	adds	r3, #4
 80073b2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	2bff      	cmp	r3, #255	@ 0xff
 80073b8:	d802      	bhi.n	80073c0 <HAL_GPIO_DeInit+0x124>
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	e002      	b.n	80073c6 <HAL_GPIO_DeInit+0x12a>
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	3b08      	subs	r3, #8
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	210f      	movs	r1, #15
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	fa01 f303 	lsl.w	r3, r1, r3
 80073d4:	43db      	mvns	r3, r3
 80073d6:	401a      	ands	r2, r3
 80073d8:	2104      	movs	r1, #4
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	fa01 f303 	lsl.w	r3, r1, r3
 80073e0:	431a      	orrs	r2, r3
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	43db      	mvns	r3, r3
 80073ee:	401a      	ands	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	3301      	adds	r3, #1
 80073f8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	f47f af52 	bne.w	80072ac <HAL_GPIO_DeInit+0x10>
  }
}
 8007408:	bf00      	nop
 800740a:	bf00      	nop
 800740c:	3724      	adds	r7, #36	@ 0x24
 800740e:	46bd      	mov	sp, r7
 8007410:	bc80      	pop	{r7}
 8007412:	4770      	bx	lr
 8007414:	40010000 	.word	0x40010000
 8007418:	40010800 	.word	0x40010800
 800741c:	40010c00 	.word	0x40010c00
 8007420:	40011000 	.word	0x40011000
 8007424:	40011400 	.word	0x40011400
 8007428:	40011800 	.word	0x40011800
 800742c:	40011c00 	.word	0x40011c00
 8007430:	40010400 	.word	0x40010400

08007434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	887b      	ldrh	r3, [r7, #2]
 8007446:	4013      	ands	r3, r2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800744c:	2301      	movs	r3, #1
 800744e:	73fb      	strb	r3, [r7, #15]
 8007450:	e001      	b.n	8007456 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007452:	2300      	movs	r3, #0
 8007454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007456:	7bfb      	ldrb	r3, [r7, #15]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	bc80      	pop	{r7}
 8007460:	4770      	bx	lr

08007462 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	460b      	mov	r3, r1
 800746c:	807b      	strh	r3, [r7, #2]
 800746e:	4613      	mov	r3, r2
 8007470:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007472:	787b      	ldrb	r3, [r7, #1]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007478:	887a      	ldrh	r2, [r7, #2]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800747e:	e003      	b.n	8007488 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007480:	887b      	ldrh	r3, [r7, #2]
 8007482:	041a      	lsls	r2, r3, #16
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	611a      	str	r2, [r3, #16]
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	bc80      	pop	{r7}
 8007490:	4770      	bx	lr

08007492 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007492:	b480      	push	{r7}
 8007494:	b085      	sub	sp, #20
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	460b      	mov	r3, r1
 800749c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80074a4:	887a      	ldrh	r2, [r7, #2]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	4013      	ands	r3, r2
 80074aa:	041a      	lsls	r2, r3, #16
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	43d9      	mvns	r1, r3
 80074b0:	887b      	ldrh	r3, [r7, #2]
 80074b2:	400b      	ands	r3, r1
 80074b4:	431a      	orrs	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	611a      	str	r2, [r3, #16]
}
 80074ba:	bf00      	nop
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	bc80      	pop	{r7}
 80074c2:	4770      	bx	lr

080074c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e12b      	b.n	800772e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d106      	bne.n	80074f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7ff f97e 	bl	80067ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2224      	movs	r2, #36	@ 0x24
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0201 	bic.w	r2, r2, #1
 8007506:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007516:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007526:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007528:	f001 fdb8 	bl	800909c <HAL_RCC_GetPCLK1Freq>
 800752c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	4a81      	ldr	r2, [pc, #516]	@ (8007738 <HAL_I2C_Init+0x274>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d807      	bhi.n	8007548 <HAL_I2C_Init+0x84>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4a80      	ldr	r2, [pc, #512]	@ (800773c <HAL_I2C_Init+0x278>)
 800753c:	4293      	cmp	r3, r2
 800753e:	bf94      	ite	ls
 8007540:	2301      	movls	r3, #1
 8007542:	2300      	movhi	r3, #0
 8007544:	b2db      	uxtb	r3, r3
 8007546:	e006      	b.n	8007556 <HAL_I2C_Init+0x92>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4a7d      	ldr	r2, [pc, #500]	@ (8007740 <HAL_I2C_Init+0x27c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	bf94      	ite	ls
 8007550:	2301      	movls	r3, #1
 8007552:	2300      	movhi	r3, #0
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e0e7      	b.n	800772e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4a78      	ldr	r2, [pc, #480]	@ (8007744 <HAL_I2C_Init+0x280>)
 8007562:	fba2 2303 	umull	r2, r3, r2, r3
 8007566:	0c9b      	lsrs	r3, r3, #18
 8007568:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	430a      	orrs	r2, r1
 800757c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	4a6a      	ldr	r2, [pc, #424]	@ (8007738 <HAL_I2C_Init+0x274>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d802      	bhi.n	8007598 <HAL_I2C_Init+0xd4>
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	3301      	adds	r3, #1
 8007596:	e009      	b.n	80075ac <HAL_I2C_Init+0xe8>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800759e:	fb02 f303 	mul.w	r3, r2, r3
 80075a2:	4a69      	ldr	r2, [pc, #420]	@ (8007748 <HAL_I2C_Init+0x284>)
 80075a4:	fba2 2303 	umull	r2, r3, r2, r3
 80075a8:	099b      	lsrs	r3, r3, #6
 80075aa:	3301      	adds	r3, #1
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	6812      	ldr	r2, [r2, #0]
 80075b0:	430b      	orrs	r3, r1
 80075b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80075be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	495c      	ldr	r1, [pc, #368]	@ (8007738 <HAL_I2C_Init+0x274>)
 80075c8:	428b      	cmp	r3, r1
 80075ca:	d819      	bhi.n	8007600 <HAL_I2C_Init+0x13c>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	1e59      	subs	r1, r3, #1
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80075da:	1c59      	adds	r1, r3, #1
 80075dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80075e0:	400b      	ands	r3, r1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <HAL_I2C_Init+0x138>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	1e59      	subs	r1, r3, #1
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	005b      	lsls	r3, r3, #1
 80075f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80075f4:	3301      	adds	r3, #1
 80075f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075fa:	e051      	b.n	80076a0 <HAL_I2C_Init+0x1dc>
 80075fc:	2304      	movs	r3, #4
 80075fe:	e04f      	b.n	80076a0 <HAL_I2C_Init+0x1dc>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d111      	bne.n	800762c <HAL_I2C_Init+0x168>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	1e58      	subs	r0, r3, #1
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6859      	ldr	r1, [r3, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	005b      	lsls	r3, r3, #1
 8007614:	440b      	add	r3, r1
 8007616:	fbb0 f3f3 	udiv	r3, r0, r3
 800761a:	3301      	adds	r3, #1
 800761c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007620:	2b00      	cmp	r3, #0
 8007622:	bf0c      	ite	eq
 8007624:	2301      	moveq	r3, #1
 8007626:	2300      	movne	r3, #0
 8007628:	b2db      	uxtb	r3, r3
 800762a:	e012      	b.n	8007652 <HAL_I2C_Init+0x18e>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	1e58      	subs	r0, r3, #1
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6859      	ldr	r1, [r3, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	440b      	add	r3, r1
 800763a:	0099      	lsls	r1, r3, #2
 800763c:	440b      	add	r3, r1
 800763e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007642:	3301      	adds	r3, #1
 8007644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007648:	2b00      	cmp	r3, #0
 800764a:	bf0c      	ite	eq
 800764c:	2301      	moveq	r3, #1
 800764e:	2300      	movne	r3, #0
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <HAL_I2C_Init+0x196>
 8007656:	2301      	movs	r3, #1
 8007658:	e022      	b.n	80076a0 <HAL_I2C_Init+0x1dc>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10e      	bne.n	8007680 <HAL_I2C_Init+0x1bc>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	1e58      	subs	r0, r3, #1
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6859      	ldr	r1, [r3, #4]
 800766a:	460b      	mov	r3, r1
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	440b      	add	r3, r1
 8007670:	fbb0 f3f3 	udiv	r3, r0, r3
 8007674:	3301      	adds	r3, #1
 8007676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800767a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800767e:	e00f      	b.n	80076a0 <HAL_I2C_Init+0x1dc>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	1e58      	subs	r0, r3, #1
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6859      	ldr	r1, [r3, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	440b      	add	r3, r1
 800768e:	0099      	lsls	r1, r3, #2
 8007690:	440b      	add	r3, r1
 8007692:	fbb0 f3f3 	udiv	r3, r0, r3
 8007696:	3301      	adds	r3, #1
 8007698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800769c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80076a0:	6879      	ldr	r1, [r7, #4]
 80076a2:	6809      	ldr	r1, [r1, #0]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	69da      	ldr	r2, [r3, #28]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	431a      	orrs	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80076ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	6911      	ldr	r1, [r2, #16]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	68d2      	ldr	r2, [r2, #12]
 80076da:	4311      	orrs	r1, r2
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	6812      	ldr	r2, [r2, #0]
 80076e0:	430b      	orrs	r3, r1
 80076e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	695a      	ldr	r2, [r3, #20]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	431a      	orrs	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0201 	orr.w	r2, r2, #1
 800770e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	000186a0 	.word	0x000186a0
 800773c:	001e847f 	.word	0x001e847f
 8007740:	003d08ff 	.word	0x003d08ff
 8007744:	431bde83 	.word	0x431bde83
 8007748:	10624dd3 	.word	0x10624dd3

0800774c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e021      	b.n	80077a2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2224      	movs	r2, #36	@ 0x24
 8007762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 0201 	bic.w	r2, r2, #1
 8007774:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7ff f876 	bl	8006868 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b088      	sub	sp, #32
 80077b0:	af02      	add	r7, sp, #8
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	607a      	str	r2, [r7, #4]
 80077b6:	461a      	mov	r2, r3
 80077b8:	460b      	mov	r3, r1
 80077ba:	817b      	strh	r3, [r7, #10]
 80077bc:	4613      	mov	r3, r2
 80077be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80077c0:	f7ff f9a0 	bl	8006b04 <HAL_GetTick>
 80077c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b20      	cmp	r3, #32
 80077d0:	f040 80e0 	bne.w	8007994 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	2319      	movs	r3, #25
 80077da:	2201      	movs	r2, #1
 80077dc:	4970      	ldr	r1, [pc, #448]	@ (80079a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 fe5c 	bl	800849c <I2C_WaitOnFlagUntilTimeout>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80077ea:	2302      	movs	r3, #2
 80077ec:	e0d3      	b.n	8007996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d101      	bne.n	80077fc <HAL_I2C_Master_Transmit+0x50>
 80077f8:	2302      	movs	r3, #2
 80077fa:	e0cc      	b.n	8007996 <HAL_I2C_Master_Transmit+0x1ea>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b01      	cmp	r3, #1
 8007810:	d007      	beq.n	8007822 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f042 0201 	orr.w	r2, r2, #1
 8007820:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007830:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2221      	movs	r2, #33	@ 0x21
 8007836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2210      	movs	r2, #16
 800783e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	893a      	ldrh	r2, [r7, #8]
 8007852:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007858:	b29a      	uxth	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4a50      	ldr	r2, [pc, #320]	@ (80079a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8007862:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007864:	8979      	ldrh	r1, [r7, #10]
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	6a3a      	ldr	r2, [r7, #32]
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 fc16 	bl	800809c <I2C_MasterRequestWrite>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e08d      	b.n	8007996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800787a:	2300      	movs	r3, #0
 800787c:	613b      	str	r3, [r7, #16]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	613b      	str	r3, [r7, #16]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	613b      	str	r3, [r7, #16]
 800788e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007890:	e066      	b.n	8007960 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	6a39      	ldr	r1, [r7, #32]
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 ff1a 	bl	80086d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00d      	beq.n	80078be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a6:	2b04      	cmp	r3, #4
 80078a8:	d107      	bne.n	80078ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e06b      	b.n	8007996 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c2:	781a      	ldrb	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b01      	subs	r3, #1
 80078dc:	b29a      	uxth	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078e6:	3b01      	subs	r3, #1
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b04      	cmp	r3, #4
 80078fa:	d11b      	bne.n	8007934 <HAL_I2C_Master_Transmit+0x188>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007900:	2b00      	cmp	r3, #0
 8007902:	d017      	beq.n	8007934 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007908:	781a      	ldrb	r2, [r3, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800791e:	b29b      	uxth	r3, r3
 8007920:	3b01      	subs	r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800792c:	3b01      	subs	r3, #1
 800792e:	b29a      	uxth	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	6a39      	ldr	r1, [r7, #32]
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f000 ff11 	bl	8008760 <I2C_WaitOnBTFFlagUntilTimeout>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00d      	beq.n	8007960 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007948:	2b04      	cmp	r3, #4
 800794a:	d107      	bne.n	800795c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800795a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e01a      	b.n	8007996 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007964:	2b00      	cmp	r3, #0
 8007966:	d194      	bne.n	8007892 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2220      	movs	r2, #32
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	e000      	b.n	8007996 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007994:	2302      	movs	r3, #2
  }
}
 8007996:	4618      	mov	r0, r3
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	00100002 	.word	0x00100002
 80079a4:	ffff0000 	.word	0xffff0000

080079a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b088      	sub	sp, #32
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	4608      	mov	r0, r1
 80079b2:	4611      	mov	r1, r2
 80079b4:	461a      	mov	r2, r3
 80079b6:	4603      	mov	r3, r0
 80079b8:	817b      	strh	r3, [r7, #10]
 80079ba:	460b      	mov	r3, r1
 80079bc:	813b      	strh	r3, [r7, #8]
 80079be:	4613      	mov	r3, r2
 80079c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80079c2:	f7ff f89f 	bl	8006b04 <HAL_GetTick>
 80079c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b20      	cmp	r3, #32
 80079d2:	f040 80d9 	bne.w	8007b88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	2319      	movs	r3, #25
 80079dc:	2201      	movs	r2, #1
 80079de:	496d      	ldr	r1, [pc, #436]	@ (8007b94 <HAL_I2C_Mem_Write+0x1ec>)
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 fd5b 	bl	800849c <I2C_WaitOnFlagUntilTimeout>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80079ec:	2302      	movs	r3, #2
 80079ee:	e0cc      	b.n	8007b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d101      	bne.n	80079fe <HAL_I2C_Mem_Write+0x56>
 80079fa:	2302      	movs	r3, #2
 80079fc:	e0c5      	b.n	8007b8a <HAL_I2C_Mem_Write+0x1e2>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d007      	beq.n	8007a24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0201 	orr.w	r2, r2, #1
 8007a22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2221      	movs	r2, #33	@ 0x21
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2240      	movs	r2, #64	@ 0x40
 8007a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a3a      	ldr	r2, [r7, #32]
 8007a4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007a54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4a4d      	ldr	r2, [pc, #308]	@ (8007b98 <HAL_I2C_Mem_Write+0x1f0>)
 8007a64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a66:	88f8      	ldrh	r0, [r7, #6]
 8007a68:	893a      	ldrh	r2, [r7, #8]
 8007a6a:	8979      	ldrh	r1, [r7, #10]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	9301      	str	r3, [sp, #4]
 8007a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	4603      	mov	r3, r0
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f000 fb92 	bl	80081a0 <I2C_RequestMemoryWrite>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d052      	beq.n	8007b28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e081      	b.n	8007b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 fe20 	bl	80086d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00d      	beq.n	8007ab2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	d107      	bne.n	8007aae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007aac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e06b      	b.n	8007b8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab6:	781a      	ldrb	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007acc:	3b01      	subs	r3, #1
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	3b01      	subs	r3, #1
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	f003 0304 	and.w	r3, r3, #4
 8007aec:	2b04      	cmp	r3, #4
 8007aee:	d11b      	bne.n	8007b28 <HAL_I2C_Mem_Write+0x180>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d017      	beq.n	8007b28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afc:	781a      	ldrb	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b12:	3b01      	subs	r3, #1
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1aa      	bne.n	8007a86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 fe13 	bl	8008760 <I2C_WaitOnBTFFlagUntilTimeout>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00d      	beq.n	8007b5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b44:	2b04      	cmp	r3, #4
 8007b46:	d107      	bne.n	8007b58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e016      	b.n	8007b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	e000      	b.n	8007b8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007b88:	2302      	movs	r3, #2
  }
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	00100002 	.word	0x00100002
 8007b98:	ffff0000 	.word	0xffff0000

08007b9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08c      	sub	sp, #48	@ 0x30
 8007ba0:	af02      	add	r7, sp, #8
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	4608      	mov	r0, r1
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	461a      	mov	r2, r3
 8007baa:	4603      	mov	r3, r0
 8007bac:	817b      	strh	r3, [r7, #10]
 8007bae:	460b      	mov	r3, r1
 8007bb0:	813b      	strh	r3, [r7, #8]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007bba:	f7fe ffa3 	bl	8006b04 <HAL_GetTick>
 8007bbe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b20      	cmp	r3, #32
 8007bca:	f040 8244 	bne.w	8008056 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	2319      	movs	r3, #25
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	4982      	ldr	r1, [pc, #520]	@ (8007de0 <HAL_I2C_Mem_Read+0x244>)
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 fc5f 	bl	800849c <I2C_WaitOnFlagUntilTimeout>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007be4:	2302      	movs	r3, #2
 8007be6:	e237      	b.n	8008058 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d101      	bne.n	8007bf6 <HAL_I2C_Mem_Read+0x5a>
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	e230      	b.n	8008058 <HAL_I2C_Mem_Read+0x4bc>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d007      	beq.n	8007c1c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f042 0201 	orr.w	r2, r2, #1
 8007c1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2222      	movs	r2, #34	@ 0x22
 8007c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2240      	movs	r2, #64	@ 0x40
 8007c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4a62      	ldr	r2, [pc, #392]	@ (8007de4 <HAL_I2C_Mem_Read+0x248>)
 8007c5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007c5e:	88f8      	ldrh	r0, [r7, #6]
 8007c60:	893a      	ldrh	r2, [r7, #8]
 8007c62:	8979      	ldrh	r1, [r7, #10]
 8007c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c66:	9301      	str	r3, [sp, #4]
 8007c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 fb2c 	bl	80082cc <I2C_RequestMemoryRead>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e1ec      	b.n	8008058 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d113      	bne.n	8007cae <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c86:	2300      	movs	r3, #0
 8007c88:	61fb      	str	r3, [r7, #28]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	61fb      	str	r3, [r7, #28]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	61fb      	str	r3, [r7, #28]
 8007c9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007caa:	601a      	str	r2, [r3, #0]
 8007cac:	e1c0      	b.n	8008030 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d11e      	bne.n	8007cf4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cc4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007cc6:	b672      	cpsid	i
}
 8007cc8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cca:	2300      	movs	r3, #0
 8007ccc:	61bb      	str	r3, [r7, #24]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	61bb      	str	r3, [r7, #24]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	61bb      	str	r3, [r7, #24]
 8007cde:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007cf0:	b662      	cpsie	i
}
 8007cf2:	e035      	b.n	8007d60 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d11e      	bne.n	8007d3a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d0c:	b672      	cpsid	i
}
 8007d0e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d10:	2300      	movs	r3, #0
 8007d12:	617b      	str	r3, [r7, #20]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	617b      	str	r3, [r7, #20]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	617b      	str	r3, [r7, #20]
 8007d24:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007d36:	b662      	cpsie	i
}
 8007d38:	e012      	b.n	8007d60 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007d48:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	613b      	str	r3, [r7, #16]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	613b      	str	r3, [r7, #16]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	613b      	str	r3, [r7, #16]
 8007d5e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007d60:	e166      	b.n	8008030 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	f200 811f 	bhi.w	8007faa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d123      	bne.n	8007dbc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 fd39 	bl	80087f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e167      	b.n	8008058 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691a      	ldr	r2, [r3, #16]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d92:	b2d2      	uxtb	r2, r2
 8007d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007da4:	3b01      	subs	r3, #1
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	3b01      	subs	r3, #1
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007dba:	e139      	b.n	8008030 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d152      	bne.n	8007e6a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dca:	2200      	movs	r2, #0
 8007dcc:	4906      	ldr	r1, [pc, #24]	@ (8007de8 <HAL_I2C_Mem_Read+0x24c>)
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 fb64 	bl	800849c <I2C_WaitOnFlagUntilTimeout>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d008      	beq.n	8007dec <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e13c      	b.n	8008058 <HAL_I2C_Mem_Read+0x4bc>
 8007dde:	bf00      	nop
 8007de0:	00100002 	.word	0x00100002
 8007de4:	ffff0000 	.word	0xffff0000
 8007de8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007dec:	b672      	cpsid	i
}
 8007dee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	691a      	ldr	r2, [r3, #16]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e0a:	b2d2      	uxtb	r2, r2
 8007e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e12:	1c5a      	adds	r2, r3, #1
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007e32:	b662      	cpsie	i
}
 8007e34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	691a      	ldr	r2, [r3, #16]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e40:	b2d2      	uxtb	r2, r2
 8007e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e48:	1c5a      	adds	r2, r3, #1
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e52:	3b01      	subs	r3, #1
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	3b01      	subs	r3, #1
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007e68:	e0e2      	b.n	8008030 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e70:	2200      	movs	r2, #0
 8007e72:	497b      	ldr	r1, [pc, #492]	@ (8008060 <HAL_I2C_Mem_Read+0x4c4>)
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f000 fb11 	bl	800849c <I2C_WaitOnFlagUntilTimeout>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e0e9      	b.n	8008058 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e94:	b672      	cpsid	i
}
 8007e96:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	691a      	ldr	r2, [r3, #16]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea2:	b2d2      	uxtb	r2, r2
 8007ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007eca:	4b66      	ldr	r3, [pc, #408]	@ (8008064 <HAL_I2C_Mem_Read+0x4c8>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	08db      	lsrs	r3, r3, #3
 8007ed0:	4a65      	ldr	r2, [pc, #404]	@ (8008068 <HAL_I2C_Mem_Read+0x4cc>)
 8007ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed6:	0a1a      	lsrs	r2, r3, #8
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	00da      	lsls	r2, r3, #3
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d118      	bne.n	8007f22 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2220      	movs	r2, #32
 8007efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f0a:	f043 0220 	orr.w	r2, r3, #32
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007f12:	b662      	cpsie	i
}
 8007f14:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e09a      	b.n	8008058 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	f003 0304 	and.w	r3, r3, #4
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d1d9      	bne.n	8007ee4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	691a      	ldr	r2, [r3, #16]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f4a:	b2d2      	uxtb	r2, r2
 8007f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f52:	1c5a      	adds	r2, r3, #1
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007f72:	b662      	cpsie	i
}
 8007f74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	691a      	ldr	r2, [r3, #16]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f80:	b2d2      	uxtb	r2, r2
 8007f82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f88:	1c5a      	adds	r2, r3, #1
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f92:	3b01      	subs	r3, #1
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007fa8:	e042      	b.n	8008030 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 fc1e 	bl	80087f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e04c      	b.n	8008058 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	691a      	ldr	r2, [r3, #16]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fc8:	b2d2      	uxtb	r2, r2
 8007fca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	f003 0304 	and.w	r3, r3, #4
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	d118      	bne.n	8008030 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	691a      	ldr	r2, [r3, #16]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008008:	b2d2      	uxtb	r2, r2
 800800a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800801a:	3b01      	subs	r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008026:	b29b      	uxth	r3, r3
 8008028:	3b01      	subs	r3, #1
 800802a:	b29a      	uxth	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008034:	2b00      	cmp	r3, #0
 8008036:	f47f ae94 	bne.w	8007d62 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2220      	movs	r2, #32
 800803e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	e000      	b.n	8008058 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8008056:	2302      	movs	r3, #2
  }
}
 8008058:	4618      	mov	r0, r3
 800805a:	3728      	adds	r7, #40	@ 0x28
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	00010004 	.word	0x00010004
 8008064:	20000034 	.word	0x20000034
 8008068:	14f8b589 	.word	0x14f8b589

0800806c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800807a:	b2db      	uxtb	r3, r3
}
 800807c:	4618      	mov	r0, r3
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	bc80      	pop	{r7}
 8008084:	4770      	bx	lr

08008086 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008086:	b480      	push	{r7}
 8008088:	b083      	sub	sp, #12
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8008092:	4618      	mov	r0, r3
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	bc80      	pop	{r7}
 800809a:	4770      	bx	lr

0800809c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af02      	add	r7, sp, #8
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	607a      	str	r2, [r7, #4]
 80080a6:	603b      	str	r3, [r7, #0]
 80080a8:	460b      	mov	r3, r1
 80080aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2b08      	cmp	r3, #8
 80080b6:	d006      	beq.n	80080c6 <I2C_MasterRequestWrite+0x2a>
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d003      	beq.n	80080c6 <I2C_MasterRequestWrite+0x2a>
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80080c4:	d108      	bne.n	80080d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080d4:	601a      	str	r2, [r3, #0]
 80080d6:	e00b      	b.n	80080f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080dc:	2b12      	cmp	r3, #18
 80080de:	d107      	bne.n	80080f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 f9cd 	bl	800849c <I2C_WaitOnFlagUntilTimeout>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00d      	beq.n	8008124 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008116:	d103      	bne.n	8008120 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800811e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e035      	b.n	8008190 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800812c:	d108      	bne.n	8008140 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800812e:	897b      	ldrh	r3, [r7, #10]
 8008130:	b2db      	uxtb	r3, r3
 8008132:	461a      	mov	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800813c:	611a      	str	r2, [r3, #16]
 800813e:	e01b      	b.n	8008178 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008140:	897b      	ldrh	r3, [r7, #10]
 8008142:	11db      	asrs	r3, r3, #7
 8008144:	b2db      	uxtb	r3, r3
 8008146:	f003 0306 	and.w	r3, r3, #6
 800814a:	b2db      	uxtb	r3, r3
 800814c:	f063 030f 	orn	r3, r3, #15
 8008150:	b2da      	uxtb	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	490e      	ldr	r1, [pc, #56]	@ (8008198 <I2C_MasterRequestWrite+0xfc>)
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 fa16 	bl	8008590 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e010      	b.n	8008190 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800816e:	897b      	ldrh	r3, [r7, #10]
 8008170:	b2da      	uxtb	r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	4907      	ldr	r1, [pc, #28]	@ (800819c <I2C_MasterRequestWrite+0x100>)
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 fa06 	bl	8008590 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e000      	b.n	8008190 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3718      	adds	r7, #24
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	00010008 	.word	0x00010008
 800819c:	00010002 	.word	0x00010002

080081a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b088      	sub	sp, #32
 80081a4:	af02      	add	r7, sp, #8
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	4608      	mov	r0, r1
 80081aa:	4611      	mov	r1, r2
 80081ac:	461a      	mov	r2, r3
 80081ae:	4603      	mov	r3, r0
 80081b0:	817b      	strh	r3, [r7, #10]
 80081b2:	460b      	mov	r3, r1
 80081b4:	813b      	strh	r3, [r7, #8]
 80081b6:	4613      	mov	r3, r2
 80081b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80081c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80081ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	6a3b      	ldr	r3, [r7, #32]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f000 f960 	bl	800849c <I2C_WaitOnFlagUntilTimeout>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00d      	beq.n	80081fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081f0:	d103      	bne.n	80081fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e05f      	b.n	80082be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80081fe:	897b      	ldrh	r3, [r7, #10]
 8008200:	b2db      	uxtb	r3, r3
 8008202:	461a      	mov	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800820c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800820e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008210:	6a3a      	ldr	r2, [r7, #32]
 8008212:	492d      	ldr	r1, [pc, #180]	@ (80082c8 <I2C_RequestMemoryWrite+0x128>)
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 f9bb 	bl	8008590 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e04c      	b.n	80082be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008224:	2300      	movs	r3, #0
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	617b      	str	r3, [r7, #20]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	617b      	str	r3, [r7, #20]
 8008238:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800823a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800823c:	6a39      	ldr	r1, [r7, #32]
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 fa46 	bl	80086d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00d      	beq.n	8008266 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800824e:	2b04      	cmp	r3, #4
 8008250:	d107      	bne.n	8008262 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008260:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e02b      	b.n	80082be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008266:	88fb      	ldrh	r3, [r7, #6]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d105      	bne.n	8008278 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800826c:	893b      	ldrh	r3, [r7, #8]
 800826e:	b2da      	uxtb	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	611a      	str	r2, [r3, #16]
 8008276:	e021      	b.n	80082bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008278:	893b      	ldrh	r3, [r7, #8]
 800827a:	0a1b      	lsrs	r3, r3, #8
 800827c:	b29b      	uxth	r3, r3
 800827e:	b2da      	uxtb	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008288:	6a39      	ldr	r1, [r7, #32]
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f000 fa20 	bl	80086d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00d      	beq.n	80082b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800829a:	2b04      	cmp	r3, #4
 800829c:	d107      	bne.n	80082ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e005      	b.n	80082be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80082b2:	893b      	ldrh	r3, [r7, #8]
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	00010002 	.word	0x00010002

080082cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af02      	add	r7, sp, #8
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	4608      	mov	r0, r1
 80082d6:	4611      	mov	r1, r2
 80082d8:	461a      	mov	r2, r3
 80082da:	4603      	mov	r3, r0
 80082dc:	817b      	strh	r3, [r7, #10]
 80082de:	460b      	mov	r3, r1
 80082e0:	813b      	strh	r3, [r7, #8]
 80082e2:	4613      	mov	r3, r2
 80082e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80082f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008304:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	6a3b      	ldr	r3, [r7, #32]
 800830c:	2200      	movs	r2, #0
 800830e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 f8c2 	bl	800849c <I2C_WaitOnFlagUntilTimeout>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00d      	beq.n	800833a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008328:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800832c:	d103      	bne.n	8008336 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008334:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e0aa      	b.n	8008490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800833a:	897b      	ldrh	r3, [r7, #10]
 800833c:	b2db      	uxtb	r3, r3
 800833e:	461a      	mov	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008348:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800834a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834c:	6a3a      	ldr	r2, [r7, #32]
 800834e:	4952      	ldr	r1, [pc, #328]	@ (8008498 <I2C_RequestMemoryRead+0x1cc>)
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 f91d 	bl	8008590 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e097      	b.n	8008490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008360:	2300      	movs	r3, #0
 8008362:	617b      	str	r3, [r7, #20]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	617b      	str	r3, [r7, #20]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	617b      	str	r3, [r7, #20]
 8008374:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008378:	6a39      	ldr	r1, [r7, #32]
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 f9a8 	bl	80086d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00d      	beq.n	80083a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800838a:	2b04      	cmp	r3, #4
 800838c:	d107      	bne.n	800839e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800839c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e076      	b.n	8008490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80083a2:	88fb      	ldrh	r3, [r7, #6]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d105      	bne.n	80083b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083a8:	893b      	ldrh	r3, [r7, #8]
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	611a      	str	r2, [r3, #16]
 80083b2:	e021      	b.n	80083f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80083b4:	893b      	ldrh	r3, [r7, #8]
 80083b6:	0a1b      	lsrs	r3, r3, #8
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083c4:	6a39      	ldr	r1, [r7, #32]
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f000 f982 	bl	80086d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00d      	beq.n	80083ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	d107      	bne.n	80083ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e050      	b.n	8008490 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083ee:	893b      	ldrh	r3, [r7, #8]
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083fa:	6a39      	ldr	r1, [r7, #32]
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 f967 	bl	80086d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00d      	beq.n	8008424 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840c:	2b04      	cmp	r3, #4
 800840e:	d107      	bne.n	8008420 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800841e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e035      	b.n	8008490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008432:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	2200      	movs	r2, #0
 800843c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 f82b 	bl	800849c <I2C_WaitOnFlagUntilTimeout>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00d      	beq.n	8008468 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800845a:	d103      	bne.n	8008464 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008462:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e013      	b.n	8008490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008468:	897b      	ldrh	r3, [r7, #10]
 800846a:	b2db      	uxtb	r3, r3
 800846c:	f043 0301 	orr.w	r3, r3, #1
 8008470:	b2da      	uxtb	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847a:	6a3a      	ldr	r2, [r7, #32]
 800847c:	4906      	ldr	r1, [pc, #24]	@ (8008498 <I2C_RequestMemoryRead+0x1cc>)
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f000 f886 	bl	8008590 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e000      	b.n	8008490 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	00010002 	.word	0x00010002

0800849c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	603b      	str	r3, [r7, #0]
 80084a8:	4613      	mov	r3, r2
 80084aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084ac:	e048      	b.n	8008540 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084b4:	d044      	beq.n	8008540 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084b6:	f7fe fb25 	bl	8006b04 <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d302      	bcc.n	80084cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d139      	bne.n	8008540 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	0c1b      	lsrs	r3, r3, #16
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d10d      	bne.n	80084f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	695b      	ldr	r3, [r3, #20]
 80084dc:	43da      	mvns	r2, r3
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	4013      	ands	r3, r2
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	bf0c      	ite	eq
 80084e8:	2301      	moveq	r3, #1
 80084ea:	2300      	movne	r3, #0
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	461a      	mov	r2, r3
 80084f0:	e00c      	b.n	800850c <I2C_WaitOnFlagUntilTimeout+0x70>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	43da      	mvns	r2, r3
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	4013      	ands	r3, r2
 80084fe:	b29b      	uxth	r3, r3
 8008500:	2b00      	cmp	r3, #0
 8008502:	bf0c      	ite	eq
 8008504:	2301      	moveq	r3, #1
 8008506:	2300      	movne	r3, #0
 8008508:	b2db      	uxtb	r3, r3
 800850a:	461a      	mov	r2, r3
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	429a      	cmp	r2, r3
 8008510:	d116      	bne.n	8008540 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2220      	movs	r2, #32
 800851c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800852c:	f043 0220 	orr.w	r2, r3, #32
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e023      	b.n	8008588 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	0c1b      	lsrs	r3, r3, #16
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b01      	cmp	r3, #1
 8008548:	d10d      	bne.n	8008566 <I2C_WaitOnFlagUntilTimeout+0xca>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	43da      	mvns	r2, r3
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	4013      	ands	r3, r2
 8008556:	b29b      	uxth	r3, r3
 8008558:	2b00      	cmp	r3, #0
 800855a:	bf0c      	ite	eq
 800855c:	2301      	moveq	r3, #1
 800855e:	2300      	movne	r3, #0
 8008560:	b2db      	uxtb	r3, r3
 8008562:	461a      	mov	r2, r3
 8008564:	e00c      	b.n	8008580 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	43da      	mvns	r2, r3
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	4013      	ands	r3, r2
 8008572:	b29b      	uxth	r3, r3
 8008574:	2b00      	cmp	r3, #0
 8008576:	bf0c      	ite	eq
 8008578:	2301      	moveq	r3, #1
 800857a:	2300      	movne	r3, #0
 800857c:	b2db      	uxtb	r3, r3
 800857e:	461a      	mov	r2, r3
 8008580:	79fb      	ldrb	r3, [r7, #7]
 8008582:	429a      	cmp	r2, r3
 8008584:	d093      	beq.n	80084ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
 800859c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800859e:	e071      	b.n	8008684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085ae:	d123      	bne.n	80085f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80085c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2220      	movs	r2, #32
 80085d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e4:	f043 0204 	orr.w	r2, r3, #4
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e067      	b.n	80086c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085fe:	d041      	beq.n	8008684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008600:	f7fe fa80 	bl	8006b04 <HAL_GetTick>
 8008604:	4602      	mov	r2, r0
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	429a      	cmp	r2, r3
 800860e:	d302      	bcc.n	8008616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d136      	bne.n	8008684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	0c1b      	lsrs	r3, r3, #16
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b01      	cmp	r3, #1
 800861e:	d10c      	bne.n	800863a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	43da      	mvns	r2, r3
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	4013      	ands	r3, r2
 800862c:	b29b      	uxth	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	bf14      	ite	ne
 8008632:	2301      	movne	r3, #1
 8008634:	2300      	moveq	r3, #0
 8008636:	b2db      	uxtb	r3, r3
 8008638:	e00b      	b.n	8008652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	43da      	mvns	r2, r3
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	4013      	ands	r3, r2
 8008646:	b29b      	uxth	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	bf14      	ite	ne
 800864c:	2301      	movne	r3, #1
 800864e:	2300      	moveq	r3, #0
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d016      	beq.n	8008684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2220      	movs	r2, #32
 8008660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008670:	f043 0220 	orr.w	r2, r3, #32
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e021      	b.n	80086c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	0c1b      	lsrs	r3, r3, #16
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b01      	cmp	r3, #1
 800868c:	d10c      	bne.n	80086a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	43da      	mvns	r2, r3
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	4013      	ands	r3, r2
 800869a:	b29b      	uxth	r3, r3
 800869c:	2b00      	cmp	r3, #0
 800869e:	bf14      	ite	ne
 80086a0:	2301      	movne	r3, #1
 80086a2:	2300      	moveq	r3, #0
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	e00b      	b.n	80086c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	43da      	mvns	r2, r3
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	4013      	ands	r3, r2
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	bf14      	ite	ne
 80086ba:	2301      	movne	r3, #1
 80086bc:	2300      	moveq	r3, #0
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f47f af6d 	bne.w	80085a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086dc:	e034      	b.n	8008748 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f000 f8e3 	bl	80088aa <I2C_IsAcknowledgeFailed>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e034      	b.n	8008758 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086f4:	d028      	beq.n	8008748 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086f6:	f7fe fa05 	bl	8006b04 <HAL_GetTick>
 80086fa:	4602      	mov	r2, r0
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	429a      	cmp	r2, r3
 8008704:	d302      	bcc.n	800870c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d11d      	bne.n	8008748 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008716:	2b80      	cmp	r3, #128	@ 0x80
 8008718:	d016      	beq.n	8008748 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2220      	movs	r2, #32
 8008724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008734:	f043 0220 	orr.w	r2, r3, #32
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e007      	b.n	8008758 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008752:	2b80      	cmp	r3, #128	@ 0x80
 8008754:	d1c3      	bne.n	80086de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800876c:	e034      	b.n	80087d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 f89b 	bl	80088aa <I2C_IsAcknowledgeFailed>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e034      	b.n	80087e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008784:	d028      	beq.n	80087d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008786:	f7fe f9bd 	bl	8006b04 <HAL_GetTick>
 800878a:	4602      	mov	r2, r0
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	429a      	cmp	r2, r3
 8008794:	d302      	bcc.n	800879c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d11d      	bne.n	80087d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	f003 0304 	and.w	r3, r3, #4
 80087a6:	2b04      	cmp	r3, #4
 80087a8:	d016      	beq.n	80087d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2220      	movs	r2, #32
 80087b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087c4:	f043 0220 	orr.w	r2, r3, #32
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e007      	b.n	80087e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	f003 0304 	and.w	r3, r3, #4
 80087e2:	2b04      	cmp	r3, #4
 80087e4:	d1c3      	bne.n	800876e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087fc:	e049      	b.n	8008892 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	f003 0310 	and.w	r3, r3, #16
 8008808:	2b10      	cmp	r3, #16
 800880a:	d119      	bne.n	8008840 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f06f 0210 	mvn.w	r2, #16
 8008814:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2220      	movs	r2, #32
 8008820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e030      	b.n	80088a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008840:	f7fe f960 	bl	8006b04 <HAL_GetTick>
 8008844:	4602      	mov	r2, r0
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	429a      	cmp	r2, r3
 800884e:	d302      	bcc.n	8008856 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d11d      	bne.n	8008892 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008860:	2b40      	cmp	r3, #64	@ 0x40
 8008862:	d016      	beq.n	8008892 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2220      	movs	r2, #32
 800886e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800887e:	f043 0220 	orr.w	r2, r3, #32
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e007      	b.n	80088a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800889c:	2b40      	cmp	r3, #64	@ 0x40
 800889e:	d1ae      	bne.n	80087fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b083      	sub	sp, #12
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088c0:	d11b      	bne.n	80088fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80088ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2220      	movs	r2, #32
 80088d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088e6:	f043 0204 	orr.w	r2, r3, #4
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e000      	b.n	80088fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	bc80      	pop	{r7}
 8008904:	4770      	bx	lr
	...

08008908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d101      	bne.n	800891a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e272      	b.n	8008e00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 8087 	beq.w	8008a36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008928:	4b92      	ldr	r3, [pc, #584]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	f003 030c 	and.w	r3, r3, #12
 8008930:	2b04      	cmp	r3, #4
 8008932:	d00c      	beq.n	800894e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008934:	4b8f      	ldr	r3, [pc, #572]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f003 030c 	and.w	r3, r3, #12
 800893c:	2b08      	cmp	r3, #8
 800893e:	d112      	bne.n	8008966 <HAL_RCC_OscConfig+0x5e>
 8008940:	4b8c      	ldr	r3, [pc, #560]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800894c:	d10b      	bne.n	8008966 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800894e:	4b89      	ldr	r3, [pc, #548]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d06c      	beq.n	8008a34 <HAL_RCC_OscConfig+0x12c>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d168      	bne.n	8008a34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e24c      	b.n	8008e00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800896e:	d106      	bne.n	800897e <HAL_RCC_OscConfig+0x76>
 8008970:	4b80      	ldr	r3, [pc, #512]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a7f      	ldr	r2, [pc, #508]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008976:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800897a:	6013      	str	r3, [r2, #0]
 800897c:	e02e      	b.n	80089dc <HAL_RCC_OscConfig+0xd4>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10c      	bne.n	80089a0 <HAL_RCC_OscConfig+0x98>
 8008986:	4b7b      	ldr	r3, [pc, #492]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a7a      	ldr	r2, [pc, #488]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 800898c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008990:	6013      	str	r3, [r2, #0]
 8008992:	4b78      	ldr	r3, [pc, #480]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a77      	ldr	r2, [pc, #476]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008998:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	e01d      	b.n	80089dc <HAL_RCC_OscConfig+0xd4>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80089a8:	d10c      	bne.n	80089c4 <HAL_RCC_OscConfig+0xbc>
 80089aa:	4b72      	ldr	r3, [pc, #456]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a71      	ldr	r2, [pc, #452]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 80089b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80089b4:	6013      	str	r3, [r2, #0]
 80089b6:	4b6f      	ldr	r3, [pc, #444]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a6e      	ldr	r2, [pc, #440]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 80089bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089c0:	6013      	str	r3, [r2, #0]
 80089c2:	e00b      	b.n	80089dc <HAL_RCC_OscConfig+0xd4>
 80089c4:	4b6b      	ldr	r3, [pc, #428]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a6a      	ldr	r2, [pc, #424]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 80089ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	4b68      	ldr	r3, [pc, #416]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a67      	ldr	r2, [pc, #412]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 80089d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d013      	beq.n	8008a0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089e4:	f7fe f88e 	bl	8006b04 <HAL_GetTick>
 80089e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089ea:	e008      	b.n	80089fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089ec:	f7fe f88a 	bl	8006b04 <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	2b64      	cmp	r3, #100	@ 0x64
 80089f8:	d901      	bls.n	80089fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e200      	b.n	8008e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089fe:	4b5d      	ldr	r3, [pc, #372]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d0f0      	beq.n	80089ec <HAL_RCC_OscConfig+0xe4>
 8008a0a:	e014      	b.n	8008a36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a0c:	f7fe f87a 	bl	8006b04 <HAL_GetTick>
 8008a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a12:	e008      	b.n	8008a26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a14:	f7fe f876 	bl	8006b04 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	2b64      	cmp	r3, #100	@ 0x64
 8008a20:	d901      	bls.n	8008a26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e1ec      	b.n	8008e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a26:	4b53      	ldr	r3, [pc, #332]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1f0      	bne.n	8008a14 <HAL_RCC_OscConfig+0x10c>
 8008a32:	e000      	b.n	8008a36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0302 	and.w	r3, r3, #2
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d063      	beq.n	8008b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008a42:	4b4c      	ldr	r3, [pc, #304]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f003 030c 	and.w	r3, r3, #12
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00b      	beq.n	8008a66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008a4e:	4b49      	ldr	r3, [pc, #292]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	f003 030c 	and.w	r3, r3, #12
 8008a56:	2b08      	cmp	r3, #8
 8008a58:	d11c      	bne.n	8008a94 <HAL_RCC_OscConfig+0x18c>
 8008a5a:	4b46      	ldr	r3, [pc, #280]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d116      	bne.n	8008a94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a66:	4b43      	ldr	r3, [pc, #268]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d005      	beq.n	8008a7e <HAL_RCC_OscConfig+0x176>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d001      	beq.n	8008a7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e1c0      	b.n	8008e00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	4939      	ldr	r1, [pc, #228]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a92:	e03a      	b.n	8008b0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d020      	beq.n	8008ade <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a9c:	4b36      	ldr	r3, [pc, #216]	@ (8008b78 <HAL_RCC_OscConfig+0x270>)
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008aa2:	f7fe f82f 	bl	8006b04 <HAL_GetTick>
 8008aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008aa8:	e008      	b.n	8008abc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008aaa:	f7fe f82b 	bl	8006b04 <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d901      	bls.n	8008abc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e1a1      	b.n	8008e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008abc:	4b2d      	ldr	r3, [pc, #180]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d0f0      	beq.n	8008aaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	695b      	ldr	r3, [r3, #20]
 8008ad4:	00db      	lsls	r3, r3, #3
 8008ad6:	4927      	ldr	r1, [pc, #156]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	600b      	str	r3, [r1, #0]
 8008adc:	e015      	b.n	8008b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ade:	4b26      	ldr	r3, [pc, #152]	@ (8008b78 <HAL_RCC_OscConfig+0x270>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ae4:	f7fe f80e 	bl	8006b04 <HAL_GetTick>
 8008ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008aea:	e008      	b.n	8008afe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008aec:	f7fe f80a 	bl	8006b04 <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d901      	bls.n	8008afe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e180      	b.n	8008e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008afe:	4b1d      	ldr	r3, [pc, #116]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1f0      	bne.n	8008aec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0308 	and.w	r3, r3, #8
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d03a      	beq.n	8008b8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d019      	beq.n	8008b52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b1e:	4b17      	ldr	r3, [pc, #92]	@ (8008b7c <HAL_RCC_OscConfig+0x274>)
 8008b20:	2201      	movs	r2, #1
 8008b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b24:	f7fd ffee 	bl	8006b04 <HAL_GetTick>
 8008b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b2a:	e008      	b.n	8008b3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b2c:	f7fd ffea 	bl	8006b04 <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d901      	bls.n	8008b3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e160      	b.n	8008e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008b74 <HAL_RCC_OscConfig+0x26c>)
 8008b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d0f0      	beq.n	8008b2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008b4a:	2001      	movs	r0, #1
 8008b4c:	f000 face 	bl	80090ec <RCC_Delay>
 8008b50:	e01c      	b.n	8008b8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b52:	4b0a      	ldr	r3, [pc, #40]	@ (8008b7c <HAL_RCC_OscConfig+0x274>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b58:	f7fd ffd4 	bl	8006b04 <HAL_GetTick>
 8008b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b5e:	e00f      	b.n	8008b80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b60:	f7fd ffd0 	bl	8006b04 <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d908      	bls.n	8008b80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e146      	b.n	8008e00 <HAL_RCC_OscConfig+0x4f8>
 8008b72:	bf00      	nop
 8008b74:	40021000 	.word	0x40021000
 8008b78:	42420000 	.word	0x42420000
 8008b7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b80:	4b92      	ldr	r3, [pc, #584]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b84:	f003 0302 	and.w	r3, r3, #2
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1e9      	bne.n	8008b60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 0304 	and.w	r3, r3, #4
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 80a6 	beq.w	8008ce6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b9e:	4b8b      	ldr	r3, [pc, #556]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10d      	bne.n	8008bc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008baa:	4b88      	ldr	r3, [pc, #544]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	4a87      	ldr	r2, [pc, #540]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bb4:	61d3      	str	r3, [r2, #28]
 8008bb6:	4b85      	ldr	r3, [pc, #532]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bbe:	60bb      	str	r3, [r7, #8]
 8008bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bc6:	4b82      	ldr	r3, [pc, #520]	@ (8008dd0 <HAL_RCC_OscConfig+0x4c8>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d118      	bne.n	8008c04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8008dd0 <HAL_RCC_OscConfig+0x4c8>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a7e      	ldr	r2, [pc, #504]	@ (8008dd0 <HAL_RCC_OscConfig+0x4c8>)
 8008bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008bde:	f7fd ff91 	bl	8006b04 <HAL_GetTick>
 8008be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008be4:	e008      	b.n	8008bf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008be6:	f7fd ff8d 	bl	8006b04 <HAL_GetTick>
 8008bea:	4602      	mov	r2, r0
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	2b64      	cmp	r3, #100	@ 0x64
 8008bf2:	d901      	bls.n	8008bf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e103      	b.n	8008e00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bf8:	4b75      	ldr	r3, [pc, #468]	@ (8008dd0 <HAL_RCC_OscConfig+0x4c8>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d0f0      	beq.n	8008be6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d106      	bne.n	8008c1a <HAL_RCC_OscConfig+0x312>
 8008c0c:	4b6f      	ldr	r3, [pc, #444]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008c0e:	6a1b      	ldr	r3, [r3, #32]
 8008c10:	4a6e      	ldr	r2, [pc, #440]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008c12:	f043 0301 	orr.w	r3, r3, #1
 8008c16:	6213      	str	r3, [r2, #32]
 8008c18:	e02d      	b.n	8008c76 <HAL_RCC_OscConfig+0x36e>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10c      	bne.n	8008c3c <HAL_RCC_OscConfig+0x334>
 8008c22:	4b6a      	ldr	r3, [pc, #424]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	4a69      	ldr	r2, [pc, #420]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008c28:	f023 0301 	bic.w	r3, r3, #1
 8008c2c:	6213      	str	r3, [r2, #32]
 8008c2e:	4b67      	ldr	r3, [pc, #412]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	4a66      	ldr	r2, [pc, #408]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008c34:	f023 0304 	bic.w	r3, r3, #4
 8008c38:	6213      	str	r3, [r2, #32]
 8008c3a:	e01c      	b.n	8008c76 <HAL_RCC_OscConfig+0x36e>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	2b05      	cmp	r3, #5
 8008c42:	d10c      	bne.n	8008c5e <HAL_RCC_OscConfig+0x356>
 8008c44:	4b61      	ldr	r3, [pc, #388]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	4a60      	ldr	r2, [pc, #384]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008c4a:	f043 0304 	orr.w	r3, r3, #4
 8008c4e:	6213      	str	r3, [r2, #32]
 8008c50:	4b5e      	ldr	r3, [pc, #376]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008c52:	6a1b      	ldr	r3, [r3, #32]
 8008c54:	4a5d      	ldr	r2, [pc, #372]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008c56:	f043 0301 	orr.w	r3, r3, #1
 8008c5a:	6213      	str	r3, [r2, #32]
 8008c5c:	e00b      	b.n	8008c76 <HAL_RCC_OscConfig+0x36e>
 8008c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	4a5a      	ldr	r2, [pc, #360]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008c64:	f023 0301 	bic.w	r3, r3, #1
 8008c68:	6213      	str	r3, [r2, #32]
 8008c6a:	4b58      	ldr	r3, [pc, #352]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	4a57      	ldr	r2, [pc, #348]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008c70:	f023 0304 	bic.w	r3, r3, #4
 8008c74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d015      	beq.n	8008caa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c7e:	f7fd ff41 	bl	8006b04 <HAL_GetTick>
 8008c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c84:	e00a      	b.n	8008c9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c86:	f7fd ff3d 	bl	8006b04 <HAL_GetTick>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d901      	bls.n	8008c9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e0b1      	b.n	8008e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c9c:	4b4b      	ldr	r3, [pc, #300]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008c9e:	6a1b      	ldr	r3, [r3, #32]
 8008ca0:	f003 0302 	and.w	r3, r3, #2
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d0ee      	beq.n	8008c86 <HAL_RCC_OscConfig+0x37e>
 8008ca8:	e014      	b.n	8008cd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008caa:	f7fd ff2b 	bl	8006b04 <HAL_GetTick>
 8008cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cb0:	e00a      	b.n	8008cc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cb2:	f7fd ff27 	bl	8006b04 <HAL_GetTick>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d901      	bls.n	8008cc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e09b      	b.n	8008e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cc8:	4b40      	ldr	r3, [pc, #256]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008cca:	6a1b      	ldr	r3, [r3, #32]
 8008ccc:	f003 0302 	and.w	r3, r3, #2
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1ee      	bne.n	8008cb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d105      	bne.n	8008ce6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cda:	4b3c      	ldr	r3, [pc, #240]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	4a3b      	ldr	r2, [pc, #236]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008ce0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ce4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 8087 	beq.w	8008dfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008cf0:	4b36      	ldr	r3, [pc, #216]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	f003 030c 	and.w	r3, r3, #12
 8008cf8:	2b08      	cmp	r3, #8
 8008cfa:	d061      	beq.n	8008dc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	69db      	ldr	r3, [r3, #28]
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d146      	bne.n	8008d92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d04:	4b33      	ldr	r3, [pc, #204]	@ (8008dd4 <HAL_RCC_OscConfig+0x4cc>)
 8008d06:	2200      	movs	r2, #0
 8008d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d0a:	f7fd fefb 	bl	8006b04 <HAL_GetTick>
 8008d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d10:	e008      	b.n	8008d24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d12:	f7fd fef7 	bl	8006b04 <HAL_GetTick>
 8008d16:	4602      	mov	r2, r0
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d901      	bls.n	8008d24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e06d      	b.n	8008e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d24:	4b29      	ldr	r3, [pc, #164]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1f0      	bne.n	8008d12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a1b      	ldr	r3, [r3, #32]
 8008d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d38:	d108      	bne.n	8008d4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008d3a:	4b24      	ldr	r3, [pc, #144]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	4921      	ldr	r1, [pc, #132]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a19      	ldr	r1, [r3, #32]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d5c:	430b      	orrs	r3, r1
 8008d5e:	491b      	ldr	r1, [pc, #108]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008d60:	4313      	orrs	r3, r2
 8008d62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d64:	4b1b      	ldr	r3, [pc, #108]	@ (8008dd4 <HAL_RCC_OscConfig+0x4cc>)
 8008d66:	2201      	movs	r2, #1
 8008d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d6a:	f7fd fecb 	bl	8006b04 <HAL_GetTick>
 8008d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008d70:	e008      	b.n	8008d84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d72:	f7fd fec7 	bl	8006b04 <HAL_GetTick>
 8008d76:	4602      	mov	r2, r0
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d901      	bls.n	8008d84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e03d      	b.n	8008e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008d84:	4b11      	ldr	r3, [pc, #68]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0f0      	beq.n	8008d72 <HAL_RCC_OscConfig+0x46a>
 8008d90:	e035      	b.n	8008dfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d92:	4b10      	ldr	r3, [pc, #64]	@ (8008dd4 <HAL_RCC_OscConfig+0x4cc>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d98:	f7fd feb4 	bl	8006b04 <HAL_GetTick>
 8008d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d9e:	e008      	b.n	8008db2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008da0:	f7fd feb0 	bl	8006b04 <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d901      	bls.n	8008db2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e026      	b.n	8008e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008db2:	4b06      	ldr	r3, [pc, #24]	@ (8008dcc <HAL_RCC_OscConfig+0x4c4>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1f0      	bne.n	8008da0 <HAL_RCC_OscConfig+0x498>
 8008dbe:	e01e      	b.n	8008dfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	69db      	ldr	r3, [r3, #28]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d107      	bne.n	8008dd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e019      	b.n	8008e00 <HAL_RCC_OscConfig+0x4f8>
 8008dcc:	40021000 	.word	0x40021000
 8008dd0:	40007000 	.word	0x40007000
 8008dd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8008e08 <HAL_RCC_OscConfig+0x500>)
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a1b      	ldr	r3, [r3, #32]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d106      	bne.n	8008dfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d001      	beq.n	8008dfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e000      	b.n	8008e00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3718      	adds	r7, #24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	40021000 	.word	0x40021000

08008e0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d101      	bne.n	8008e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e0d0      	b.n	8008fc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e20:	4b6a      	ldr	r3, [pc, #424]	@ (8008fcc <HAL_RCC_ClockConfig+0x1c0>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0307 	and.w	r3, r3, #7
 8008e28:	683a      	ldr	r2, [r7, #0]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d910      	bls.n	8008e50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e2e:	4b67      	ldr	r3, [pc, #412]	@ (8008fcc <HAL_RCC_ClockConfig+0x1c0>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f023 0207 	bic.w	r2, r3, #7
 8008e36:	4965      	ldr	r1, [pc, #404]	@ (8008fcc <HAL_RCC_ClockConfig+0x1c0>)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e3e:	4b63      	ldr	r3, [pc, #396]	@ (8008fcc <HAL_RCC_ClockConfig+0x1c0>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	683a      	ldr	r2, [r7, #0]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d001      	beq.n	8008e50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e0b8      	b.n	8008fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d020      	beq.n	8008e9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0304 	and.w	r3, r3, #4
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d005      	beq.n	8008e74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e68:	4b59      	ldr	r3, [pc, #356]	@ (8008fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	4a58      	ldr	r2, [pc, #352]	@ (8008fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008e6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008e72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0308 	and.w	r3, r3, #8
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d005      	beq.n	8008e8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e80:	4b53      	ldr	r3, [pc, #332]	@ (8008fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	4a52      	ldr	r2, [pc, #328]	@ (8008fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008e86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8008e8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e8c:	4b50      	ldr	r3, [pc, #320]	@ (8008fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	494d      	ldr	r1, [pc, #308]	@ (8008fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d040      	beq.n	8008f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d107      	bne.n	8008ec2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008eb2:	4b47      	ldr	r3, [pc, #284]	@ (8008fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d115      	bne.n	8008eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e07f      	b.n	8008fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d107      	bne.n	8008eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008eca:	4b41      	ldr	r3, [pc, #260]	@ (8008fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d109      	bne.n	8008eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e073      	b.n	8008fc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008eda:	4b3d      	ldr	r3, [pc, #244]	@ (8008fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0302 	and.w	r3, r3, #2
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e06b      	b.n	8008fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008eea:	4b39      	ldr	r3, [pc, #228]	@ (8008fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	f023 0203 	bic.w	r2, r3, #3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	4936      	ldr	r1, [pc, #216]	@ (8008fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008efc:	f7fd fe02 	bl	8006b04 <HAL_GetTick>
 8008f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f02:	e00a      	b.n	8008f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f04:	f7fd fdfe 	bl	8006b04 <HAL_GetTick>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d901      	bls.n	8008f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e053      	b.n	8008fc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8008fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f003 020c 	and.w	r2, r3, #12
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d1eb      	bne.n	8008f04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f2c:	4b27      	ldr	r3, [pc, #156]	@ (8008fcc <HAL_RCC_ClockConfig+0x1c0>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 0307 	and.w	r3, r3, #7
 8008f34:	683a      	ldr	r2, [r7, #0]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d210      	bcs.n	8008f5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f3a:	4b24      	ldr	r3, [pc, #144]	@ (8008fcc <HAL_RCC_ClockConfig+0x1c0>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f023 0207 	bic.w	r2, r3, #7
 8008f42:	4922      	ldr	r1, [pc, #136]	@ (8008fcc <HAL_RCC_ClockConfig+0x1c0>)
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f4a:	4b20      	ldr	r3, [pc, #128]	@ (8008fcc <HAL_RCC_ClockConfig+0x1c0>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 0307 	and.w	r3, r3, #7
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d001      	beq.n	8008f5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e032      	b.n	8008fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d008      	beq.n	8008f7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f68:	4b19      	ldr	r3, [pc, #100]	@ (8008fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	4916      	ldr	r1, [pc, #88]	@ (8008fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008f76:	4313      	orrs	r3, r2
 8008f78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 0308 	and.w	r3, r3, #8
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d009      	beq.n	8008f9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008f86:	4b12      	ldr	r3, [pc, #72]	@ (8008fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	00db      	lsls	r3, r3, #3
 8008f94:	490e      	ldr	r1, [pc, #56]	@ (8008fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008f96:	4313      	orrs	r3, r2
 8008f98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008f9a:	f000 f821 	bl	8008fe0 <HAL_RCC_GetSysClockFreq>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8008fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	091b      	lsrs	r3, r3, #4
 8008fa6:	f003 030f 	and.w	r3, r3, #15
 8008faa:	490a      	ldr	r1, [pc, #40]	@ (8008fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8008fac:	5ccb      	ldrb	r3, [r1, r3]
 8008fae:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb2:	4a09      	ldr	r2, [pc, #36]	@ (8008fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8008fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008fb6:	4b09      	ldr	r3, [pc, #36]	@ (8008fdc <HAL_RCC_ClockConfig+0x1d0>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fd fd60 	bl	8006a80 <HAL_InitTick>

  return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	40022000 	.word	0x40022000
 8008fd0:	40021000 	.word	0x40021000
 8008fd4:	0800a880 	.word	0x0800a880
 8008fd8:	20000034 	.word	0x20000034
 8008fdc:	20000038 	.word	0x20000038

08008fe0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b087      	sub	sp, #28
 8008fe4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60fb      	str	r3, [r7, #12]
 8008fea:	2300      	movs	r3, #0
 8008fec:	60bb      	str	r3, [r7, #8]
 8008fee:	2300      	movs	r3, #0
 8008ff0:	617b      	str	r3, [r7, #20]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8009074 <HAL_RCC_GetSysClockFreq+0x94>)
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f003 030c 	and.w	r3, r3, #12
 8009006:	2b04      	cmp	r3, #4
 8009008:	d002      	beq.n	8009010 <HAL_RCC_GetSysClockFreq+0x30>
 800900a:	2b08      	cmp	r3, #8
 800900c:	d003      	beq.n	8009016 <HAL_RCC_GetSysClockFreq+0x36>
 800900e:	e027      	b.n	8009060 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009010:	4b19      	ldr	r3, [pc, #100]	@ (8009078 <HAL_RCC_GetSysClockFreq+0x98>)
 8009012:	613b      	str	r3, [r7, #16]
      break;
 8009014:	e027      	b.n	8009066 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	0c9b      	lsrs	r3, r3, #18
 800901a:	f003 030f 	and.w	r3, r3, #15
 800901e:	4a17      	ldr	r2, [pc, #92]	@ (800907c <HAL_RCC_GetSysClockFreq+0x9c>)
 8009020:	5cd3      	ldrb	r3, [r2, r3]
 8009022:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800902a:	2b00      	cmp	r3, #0
 800902c:	d010      	beq.n	8009050 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800902e:	4b11      	ldr	r3, [pc, #68]	@ (8009074 <HAL_RCC_GetSysClockFreq+0x94>)
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	0c5b      	lsrs	r3, r3, #17
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	4a11      	ldr	r2, [pc, #68]	@ (8009080 <HAL_RCC_GetSysClockFreq+0xa0>)
 800903a:	5cd3      	ldrb	r3, [r2, r3]
 800903c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a0d      	ldr	r2, [pc, #52]	@ (8009078 <HAL_RCC_GetSysClockFreq+0x98>)
 8009042:	fb03 f202 	mul.w	r2, r3, r2
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	fbb2 f3f3 	udiv	r3, r2, r3
 800904c:	617b      	str	r3, [r7, #20]
 800904e:	e004      	b.n	800905a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a0c      	ldr	r2, [pc, #48]	@ (8009084 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009054:	fb02 f303 	mul.w	r3, r2, r3
 8009058:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	613b      	str	r3, [r7, #16]
      break;
 800905e:	e002      	b.n	8009066 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009060:	4b05      	ldr	r3, [pc, #20]	@ (8009078 <HAL_RCC_GetSysClockFreq+0x98>)
 8009062:	613b      	str	r3, [r7, #16]
      break;
 8009064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009066:	693b      	ldr	r3, [r7, #16]
}
 8009068:	4618      	mov	r0, r3
 800906a:	371c      	adds	r7, #28
 800906c:	46bd      	mov	sp, r7
 800906e:	bc80      	pop	{r7}
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	40021000 	.word	0x40021000
 8009078:	007a1200 	.word	0x007a1200
 800907c:	0800a898 	.word	0x0800a898
 8009080:	0800a8a8 	.word	0x0800a8a8
 8009084:	003d0900 	.word	0x003d0900

08009088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009088:	b480      	push	{r7}
 800908a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800908c:	4b02      	ldr	r3, [pc, #8]	@ (8009098 <HAL_RCC_GetHCLKFreq+0x10>)
 800908e:	681b      	ldr	r3, [r3, #0]
}
 8009090:	4618      	mov	r0, r3
 8009092:	46bd      	mov	sp, r7
 8009094:	bc80      	pop	{r7}
 8009096:	4770      	bx	lr
 8009098:	20000034 	.word	0x20000034

0800909c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80090a0:	f7ff fff2 	bl	8009088 <HAL_RCC_GetHCLKFreq>
 80090a4:	4602      	mov	r2, r0
 80090a6:	4b05      	ldr	r3, [pc, #20]	@ (80090bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	0a1b      	lsrs	r3, r3, #8
 80090ac:	f003 0307 	and.w	r3, r3, #7
 80090b0:	4903      	ldr	r1, [pc, #12]	@ (80090c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090b2:	5ccb      	ldrb	r3, [r1, r3]
 80090b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	40021000 	.word	0x40021000
 80090c0:	0800a890 	.word	0x0800a890

080090c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80090c8:	f7ff ffde 	bl	8009088 <HAL_RCC_GetHCLKFreq>
 80090cc:	4602      	mov	r2, r0
 80090ce:	4b05      	ldr	r3, [pc, #20]	@ (80090e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	0adb      	lsrs	r3, r3, #11
 80090d4:	f003 0307 	and.w	r3, r3, #7
 80090d8:	4903      	ldr	r1, [pc, #12]	@ (80090e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80090da:	5ccb      	ldrb	r3, [r1, r3]
 80090dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	40021000 	.word	0x40021000
 80090e8:	0800a890 	.word	0x0800a890

080090ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80090f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009120 <RCC_Delay+0x34>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a0a      	ldr	r2, [pc, #40]	@ (8009124 <RCC_Delay+0x38>)
 80090fa:	fba2 2303 	umull	r2, r3, r2, r3
 80090fe:	0a5b      	lsrs	r3, r3, #9
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	fb02 f303 	mul.w	r3, r2, r3
 8009106:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009108:	bf00      	nop
  }
  while (Delay --);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	1e5a      	subs	r2, r3, #1
 800910e:	60fa      	str	r2, [r7, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1f9      	bne.n	8009108 <RCC_Delay+0x1c>
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	bc80      	pop	{r7}
 800911e:	4770      	bx	lr
 8009120:	20000034 	.word	0x20000034
 8009124:	10624dd3 	.word	0x10624dd3

08009128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d101      	bne.n	800913a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e041      	b.n	80091be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d106      	bne.n	8009154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7fd fbac 	bl	80068ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2202      	movs	r2, #2
 8009158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3304      	adds	r3, #4
 8009164:	4619      	mov	r1, r3
 8009166:	4610      	mov	r0, r2
 8009168:	f000 fa82 	bl	8009670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
	...

080091c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d001      	beq.n	80091e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e044      	b.n	800926a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2202      	movs	r2, #2
 80091e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68da      	ldr	r2, [r3, #12]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f042 0201 	orr.w	r2, r2, #1
 80091f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a1d      	ldr	r2, [pc, #116]	@ (8009274 <HAL_TIM_Base_Start_IT+0xac>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d018      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0x6c>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a1c      	ldr	r2, [pc, #112]	@ (8009278 <HAL_TIM_Base_Start_IT+0xb0>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d013      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0x6c>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009214:	d00e      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0x6c>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a18      	ldr	r2, [pc, #96]	@ (800927c <HAL_TIM_Base_Start_IT+0xb4>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d009      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0x6c>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a16      	ldr	r2, [pc, #88]	@ (8009280 <HAL_TIM_Base_Start_IT+0xb8>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d004      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0x6c>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a15      	ldr	r2, [pc, #84]	@ (8009284 <HAL_TIM_Base_Start_IT+0xbc>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d111      	bne.n	8009258 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f003 0307 	and.w	r3, r3, #7
 800923e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2b06      	cmp	r3, #6
 8009244:	d010      	beq.n	8009268 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f042 0201 	orr.w	r2, r2, #1
 8009254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009256:	e007      	b.n	8009268 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f042 0201 	orr.w	r2, r2, #1
 8009266:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	bc80      	pop	{r7}
 8009272:	4770      	bx	lr
 8009274:	40012c00 	.word	0x40012c00
 8009278:	40013400 	.word	0x40013400
 800927c:	40000400 	.word	0x40000400
 8009280:	40000800 	.word	0x40000800
 8009284:	40000c00 	.word	0x40000c00

08009288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	f003 0302 	and.w	r3, r3, #2
 800929a:	2b02      	cmp	r3, #2
 800929c:	d122      	bne.n	80092e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	f003 0302 	and.w	r3, r3, #2
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d11b      	bne.n	80092e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f06f 0202 	mvn.w	r2, #2
 80092b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2201      	movs	r2, #1
 80092ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	f003 0303 	and.w	r3, r3, #3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d003      	beq.n	80092d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f9b4 	bl	8009638 <HAL_TIM_IC_CaptureCallback>
 80092d0:	e005      	b.n	80092de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f9a7 	bl	8009626 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f9b6 	bl	800964a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	f003 0304 	and.w	r3, r3, #4
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	d122      	bne.n	8009338 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	f003 0304 	and.w	r3, r3, #4
 80092fc:	2b04      	cmp	r3, #4
 80092fe:	d11b      	bne.n	8009338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f06f 0204 	mvn.w	r2, #4
 8009308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2202      	movs	r2, #2
 800930e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f98a 	bl	8009638 <HAL_TIM_IC_CaptureCallback>
 8009324:	e005      	b.n	8009332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f97d 	bl	8009626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f98c 	bl	800964a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	f003 0308 	and.w	r3, r3, #8
 8009342:	2b08      	cmp	r3, #8
 8009344:	d122      	bne.n	800938c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	f003 0308 	and.w	r3, r3, #8
 8009350:	2b08      	cmp	r3, #8
 8009352:	d11b      	bne.n	800938c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f06f 0208 	mvn.w	r2, #8
 800935c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2204      	movs	r2, #4
 8009362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	69db      	ldr	r3, [r3, #28]
 800936a:	f003 0303 	and.w	r3, r3, #3
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f960 	bl	8009638 <HAL_TIM_IC_CaptureCallback>
 8009378:	e005      	b.n	8009386 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f953 	bl	8009626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f962 	bl	800964a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	f003 0310 	and.w	r3, r3, #16
 8009396:	2b10      	cmp	r3, #16
 8009398:	d122      	bne.n	80093e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	f003 0310 	and.w	r3, r3, #16
 80093a4:	2b10      	cmp	r3, #16
 80093a6:	d11b      	bne.n	80093e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f06f 0210 	mvn.w	r2, #16
 80093b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2208      	movs	r2, #8
 80093b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d003      	beq.n	80093ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f936 	bl	8009638 <HAL_TIM_IC_CaptureCallback>
 80093cc:	e005      	b.n	80093da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f929 	bl	8009626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f938 	bl	800964a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f003 0301 	and.w	r3, r3, #1
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d10e      	bne.n	800940c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f003 0301 	and.w	r3, r3, #1
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d107      	bne.n	800940c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f06f 0201 	mvn.w	r2, #1
 8009404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f7fa feea 	bl	80041e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009416:	2b80      	cmp	r3, #128	@ 0x80
 8009418:	d10e      	bne.n	8009438 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009424:	2b80      	cmp	r3, #128	@ 0x80
 8009426:	d107      	bne.n	8009438 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 faa1 	bl	800997a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009442:	2b40      	cmp	r3, #64	@ 0x40
 8009444:	d10e      	bne.n	8009464 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009450:	2b40      	cmp	r3, #64	@ 0x40
 8009452:	d107      	bne.n	8009464 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800945c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f8fc 	bl	800965c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	f003 0320 	and.w	r3, r3, #32
 800946e:	2b20      	cmp	r3, #32
 8009470:	d10e      	bne.n	8009490 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	f003 0320 	and.w	r3, r3, #32
 800947c:	2b20      	cmp	r3, #32
 800947e:	d107      	bne.n	8009490 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f06f 0220 	mvn.w	r2, #32
 8009488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fa6c 	bl	8009968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009490:	bf00      	nop
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094a2:	2300      	movs	r3, #0
 80094a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d101      	bne.n	80094b4 <HAL_TIM_ConfigClockSource+0x1c>
 80094b0:	2302      	movs	r3, #2
 80094b2:	e0b4      	b.n	800961e <HAL_TIM_ConfigClockSource+0x186>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2202      	movs	r2, #2
 80094c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80094d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80094da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094ec:	d03e      	beq.n	800956c <HAL_TIM_ConfigClockSource+0xd4>
 80094ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094f2:	f200 8087 	bhi.w	8009604 <HAL_TIM_ConfigClockSource+0x16c>
 80094f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094fa:	f000 8086 	beq.w	800960a <HAL_TIM_ConfigClockSource+0x172>
 80094fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009502:	d87f      	bhi.n	8009604 <HAL_TIM_ConfigClockSource+0x16c>
 8009504:	2b70      	cmp	r3, #112	@ 0x70
 8009506:	d01a      	beq.n	800953e <HAL_TIM_ConfigClockSource+0xa6>
 8009508:	2b70      	cmp	r3, #112	@ 0x70
 800950a:	d87b      	bhi.n	8009604 <HAL_TIM_ConfigClockSource+0x16c>
 800950c:	2b60      	cmp	r3, #96	@ 0x60
 800950e:	d050      	beq.n	80095b2 <HAL_TIM_ConfigClockSource+0x11a>
 8009510:	2b60      	cmp	r3, #96	@ 0x60
 8009512:	d877      	bhi.n	8009604 <HAL_TIM_ConfigClockSource+0x16c>
 8009514:	2b50      	cmp	r3, #80	@ 0x50
 8009516:	d03c      	beq.n	8009592 <HAL_TIM_ConfigClockSource+0xfa>
 8009518:	2b50      	cmp	r3, #80	@ 0x50
 800951a:	d873      	bhi.n	8009604 <HAL_TIM_ConfigClockSource+0x16c>
 800951c:	2b40      	cmp	r3, #64	@ 0x40
 800951e:	d058      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0x13a>
 8009520:	2b40      	cmp	r3, #64	@ 0x40
 8009522:	d86f      	bhi.n	8009604 <HAL_TIM_ConfigClockSource+0x16c>
 8009524:	2b30      	cmp	r3, #48	@ 0x30
 8009526:	d064      	beq.n	80095f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009528:	2b30      	cmp	r3, #48	@ 0x30
 800952a:	d86b      	bhi.n	8009604 <HAL_TIM_ConfigClockSource+0x16c>
 800952c:	2b20      	cmp	r3, #32
 800952e:	d060      	beq.n	80095f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009530:	2b20      	cmp	r3, #32
 8009532:	d867      	bhi.n	8009604 <HAL_TIM_ConfigClockSource+0x16c>
 8009534:	2b00      	cmp	r3, #0
 8009536:	d05c      	beq.n	80095f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009538:	2b10      	cmp	r3, #16
 800953a:	d05a      	beq.n	80095f2 <HAL_TIM_ConfigClockSource+0x15a>
 800953c:	e062      	b.n	8009604 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800954e:	f000 f980 	bl	8009852 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009560:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	609a      	str	r2, [r3, #8]
      break;
 800956a:	e04f      	b.n	800960c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800957c:	f000 f969 	bl	8009852 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689a      	ldr	r2, [r3, #8]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800958e:	609a      	str	r2, [r3, #8]
      break;
 8009590:	e03c      	b.n	800960c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800959e:	461a      	mov	r2, r3
 80095a0:	f000 f8e0 	bl	8009764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2150      	movs	r1, #80	@ 0x50
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 f937 	bl	800981e <TIM_ITRx_SetConfig>
      break;
 80095b0:	e02c      	b.n	800960c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80095be:	461a      	mov	r2, r3
 80095c0:	f000 f8fe 	bl	80097c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2160      	movs	r1, #96	@ 0x60
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 f927 	bl	800981e <TIM_ITRx_SetConfig>
      break;
 80095d0:	e01c      	b.n	800960c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095de:	461a      	mov	r2, r3
 80095e0:	f000 f8c0 	bl	8009764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2140      	movs	r1, #64	@ 0x40
 80095ea:	4618      	mov	r0, r3
 80095ec:	f000 f917 	bl	800981e <TIM_ITRx_SetConfig>
      break;
 80095f0:	e00c      	b.n	800960c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4619      	mov	r1, r3
 80095fc:	4610      	mov	r0, r2
 80095fe:	f000 f90e 	bl	800981e <TIM_ITRx_SetConfig>
      break;
 8009602:	e003      	b.n	800960c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	73fb      	strb	r3, [r7, #15]
      break;
 8009608:	e000      	b.n	800960c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800960a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800961c:	7bfb      	ldrb	r3, [r7, #15]
}
 800961e:	4618      	mov	r0, r3
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009626:	b480      	push	{r7}
 8009628:	b083      	sub	sp, #12
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800962e:	bf00      	nop
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	bc80      	pop	{r7}
 8009636:	4770      	bx	lr

08009638 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	bc80      	pop	{r7}
 8009648:	4770      	bx	lr

0800964a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800964a:	b480      	push	{r7}
 800964c:	b083      	sub	sp, #12
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009652:	bf00      	nop
 8009654:	370c      	adds	r7, #12
 8009656:	46bd      	mov	sp, r7
 8009658:	bc80      	pop	{r7}
 800965a:	4770      	bx	lr

0800965c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	bc80      	pop	{r7}
 800966c:	4770      	bx	lr
	...

08009670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a33      	ldr	r2, [pc, #204]	@ (8009750 <TIM_Base_SetConfig+0xe0>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d013      	beq.n	80096b0 <TIM_Base_SetConfig+0x40>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a32      	ldr	r2, [pc, #200]	@ (8009754 <TIM_Base_SetConfig+0xe4>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d00f      	beq.n	80096b0 <TIM_Base_SetConfig+0x40>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009696:	d00b      	beq.n	80096b0 <TIM_Base_SetConfig+0x40>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a2f      	ldr	r2, [pc, #188]	@ (8009758 <TIM_Base_SetConfig+0xe8>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d007      	beq.n	80096b0 <TIM_Base_SetConfig+0x40>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a2e      	ldr	r2, [pc, #184]	@ (800975c <TIM_Base_SetConfig+0xec>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d003      	beq.n	80096b0 <TIM_Base_SetConfig+0x40>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a2d      	ldr	r2, [pc, #180]	@ (8009760 <TIM_Base_SetConfig+0xf0>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d108      	bne.n	80096c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	4313      	orrs	r3, r2
 80096c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a22      	ldr	r2, [pc, #136]	@ (8009750 <TIM_Base_SetConfig+0xe0>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d013      	beq.n	80096f2 <TIM_Base_SetConfig+0x82>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a21      	ldr	r2, [pc, #132]	@ (8009754 <TIM_Base_SetConfig+0xe4>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d00f      	beq.n	80096f2 <TIM_Base_SetConfig+0x82>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096d8:	d00b      	beq.n	80096f2 <TIM_Base_SetConfig+0x82>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a1e      	ldr	r2, [pc, #120]	@ (8009758 <TIM_Base_SetConfig+0xe8>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d007      	beq.n	80096f2 <TIM_Base_SetConfig+0x82>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a1d      	ldr	r2, [pc, #116]	@ (800975c <TIM_Base_SetConfig+0xec>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d003      	beq.n	80096f2 <TIM_Base_SetConfig+0x82>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a1c      	ldr	r2, [pc, #112]	@ (8009760 <TIM_Base_SetConfig+0xf0>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d108      	bne.n	8009704 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	4313      	orrs	r3, r2
 8009702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	4313      	orrs	r3, r2
 8009710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	689a      	ldr	r2, [r3, #8]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a09      	ldr	r2, [pc, #36]	@ (8009750 <TIM_Base_SetConfig+0xe0>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d003      	beq.n	8009738 <TIM_Base_SetConfig+0xc8>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a08      	ldr	r2, [pc, #32]	@ (8009754 <TIM_Base_SetConfig+0xe4>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d103      	bne.n	8009740 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	691a      	ldr	r2, [r3, #16]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	615a      	str	r2, [r3, #20]
}
 8009746:	bf00      	nop
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	bc80      	pop	{r7}
 800974e:	4770      	bx	lr
 8009750:	40012c00 	.word	0x40012c00
 8009754:	40013400 	.word	0x40013400
 8009758:	40000400 	.word	0x40000400
 800975c:	40000800 	.word	0x40000800
 8009760:	40000c00 	.word	0x40000c00

08009764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009764:	b480      	push	{r7}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6a1b      	ldr	r3, [r3, #32]
 8009774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	f023 0201 	bic.w	r2, r3, #1
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800978e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	011b      	lsls	r3, r3, #4
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	4313      	orrs	r3, r2
 8009798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	f023 030a 	bic.w	r3, r3, #10
 80097a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	621a      	str	r2, [r3, #32]
}
 80097b6:	bf00      	nop
 80097b8:	371c      	adds	r7, #28
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bc80      	pop	{r7}
 80097be:	4770      	bx	lr

080097c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b087      	sub	sp, #28
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6a1b      	ldr	r3, [r3, #32]
 80097d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	f023 0210 	bic.w	r2, r3, #16
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80097ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	031b      	lsls	r3, r3, #12
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80097fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	011b      	lsls	r3, r3, #4
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	4313      	orrs	r3, r2
 8009806:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	697a      	ldr	r2, [r7, #20]
 8009812:	621a      	str	r2, [r3, #32]
}
 8009814:	bf00      	nop
 8009816:	371c      	adds	r7, #28
 8009818:	46bd      	mov	sp, r7
 800981a:	bc80      	pop	{r7}
 800981c:	4770      	bx	lr

0800981e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800981e:	b480      	push	{r7}
 8009820:	b085      	sub	sp, #20
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009834:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	4313      	orrs	r3, r2
 800983c:	f043 0307 	orr.w	r3, r3, #7
 8009840:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	609a      	str	r2, [r3, #8]
}
 8009848:	bf00      	nop
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	bc80      	pop	{r7}
 8009850:	4770      	bx	lr

08009852 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009852:	b480      	push	{r7}
 8009854:	b087      	sub	sp, #28
 8009856:	af00      	add	r7, sp, #0
 8009858:	60f8      	str	r0, [r7, #12]
 800985a:	60b9      	str	r1, [r7, #8]
 800985c:	607a      	str	r2, [r7, #4]
 800985e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800986c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	021a      	lsls	r2, r3, #8
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	431a      	orrs	r2, r3
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	4313      	orrs	r3, r2
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	4313      	orrs	r3, r2
 800987e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	609a      	str	r2, [r3, #8]
}
 8009886:	bf00      	nop
 8009888:	371c      	adds	r7, #28
 800988a:	46bd      	mov	sp, r7
 800988c:	bc80      	pop	{r7}
 800988e:	4770      	bx	lr

08009890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d101      	bne.n	80098a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098a4:	2302      	movs	r3, #2
 80098a6:	e050      	b.n	800994a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2202      	movs	r2, #2
 80098b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a1b      	ldr	r2, [pc, #108]	@ (8009954 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d018      	beq.n	800991e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a19      	ldr	r2, [pc, #100]	@ (8009958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d013      	beq.n	800991e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098fe:	d00e      	beq.n	800991e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a15      	ldr	r2, [pc, #84]	@ (800995c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d009      	beq.n	800991e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a14      	ldr	r2, [pc, #80]	@ (8009960 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d004      	beq.n	800991e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a12      	ldr	r2, [pc, #72]	@ (8009964 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d10c      	bne.n	8009938 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009924:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	4313      	orrs	r3, r2
 800992e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3714      	adds	r7, #20
 800994e:	46bd      	mov	sp, r7
 8009950:	bc80      	pop	{r7}
 8009952:	4770      	bx	lr
 8009954:	40012c00 	.word	0x40012c00
 8009958:	40013400 	.word	0x40013400
 800995c:	40000400 	.word	0x40000400
 8009960:	40000800 	.word	0x40000800
 8009964:	40000c00 	.word	0x40000c00

08009968 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	bc80      	pop	{r7}
 8009978:	4770      	bx	lr

0800997a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800997a:	b480      	push	{r7}
 800997c:	b083      	sub	sp, #12
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009982:	bf00      	nop
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	bc80      	pop	{r7}
 800998a:	4770      	bx	lr

0800998c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d101      	bne.n	800999e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	e042      	b.n	8009a24 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d106      	bne.n	80099b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7fc ffa0 	bl	80068f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2224      	movs	r2, #36	@ 0x24
 80099bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68da      	ldr	r2, [r3, #12]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80099ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f82b 	bl	8009a2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	691a      	ldr	r2, [r3, #16]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80099e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	695a      	ldr	r2, [r3, #20]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80099f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68da      	ldr	r2, [r3, #12]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009a04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2220      	movs	r2, #32
 8009a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2220      	movs	r2, #32
 8009a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68da      	ldr	r2, [r3, #12]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	430a      	orrs	r2, r1
 8009a48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	689a      	ldr	r2, [r3, #8]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	431a      	orrs	r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	695b      	ldr	r3, [r3, #20]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009a66:	f023 030c 	bic.w	r3, r3, #12
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	6812      	ldr	r2, [r2, #0]
 8009a6e:	68b9      	ldr	r1, [r7, #8]
 8009a70:	430b      	orrs	r3, r1
 8009a72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	699a      	ldr	r2, [r3, #24]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	430a      	orrs	r2, r1
 8009a88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8009b40 <UART_SetConfig+0x114>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d103      	bne.n	8009a9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009a94:	f7ff fb16 	bl	80090c4 <HAL_RCC_GetPCLK2Freq>
 8009a98:	60f8      	str	r0, [r7, #12]
 8009a9a:	e002      	b.n	8009aa2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009a9c:	f7ff fafe 	bl	800909c <HAL_RCC_GetPCLK1Freq>
 8009aa0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4413      	add	r3, r2
 8009aaa:	009a      	lsls	r2, r3, #2
 8009aac:	441a      	add	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab8:	4a22      	ldr	r2, [pc, #136]	@ (8009b44 <UART_SetConfig+0x118>)
 8009aba:	fba2 2303 	umull	r2, r3, r2, r3
 8009abe:	095b      	lsrs	r3, r3, #5
 8009ac0:	0119      	lsls	r1, r3, #4
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4413      	add	r3, r2
 8009aca:	009a      	lsls	r2, r3, #2
 8009acc:	441a      	add	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8009b44 <UART_SetConfig+0x118>)
 8009ada:	fba3 0302 	umull	r0, r3, r3, r2
 8009ade:	095b      	lsrs	r3, r3, #5
 8009ae0:	2064      	movs	r0, #100	@ 0x64
 8009ae2:	fb00 f303 	mul.w	r3, r0, r3
 8009ae6:	1ad3      	subs	r3, r2, r3
 8009ae8:	011b      	lsls	r3, r3, #4
 8009aea:	3332      	adds	r3, #50	@ 0x32
 8009aec:	4a15      	ldr	r2, [pc, #84]	@ (8009b44 <UART_SetConfig+0x118>)
 8009aee:	fba2 2303 	umull	r2, r3, r2, r3
 8009af2:	095b      	lsrs	r3, r3, #5
 8009af4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009af8:	4419      	add	r1, r3
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	4613      	mov	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4413      	add	r3, r2
 8009b02:	009a      	lsls	r2, r3, #2
 8009b04:	441a      	add	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b10:	4b0c      	ldr	r3, [pc, #48]	@ (8009b44 <UART_SetConfig+0x118>)
 8009b12:	fba3 0302 	umull	r0, r3, r3, r2
 8009b16:	095b      	lsrs	r3, r3, #5
 8009b18:	2064      	movs	r0, #100	@ 0x64
 8009b1a:	fb00 f303 	mul.w	r3, r0, r3
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	011b      	lsls	r3, r3, #4
 8009b22:	3332      	adds	r3, #50	@ 0x32
 8009b24:	4a07      	ldr	r2, [pc, #28]	@ (8009b44 <UART_SetConfig+0x118>)
 8009b26:	fba2 2303 	umull	r2, r3, r2, r3
 8009b2a:	095b      	lsrs	r3, r3, #5
 8009b2c:	f003 020f 	and.w	r2, r3, #15
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	440a      	add	r2, r1
 8009b36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009b38:	bf00      	nop
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	40013800 	.word	0x40013800
 8009b44:	51eb851f 	.word	0x51eb851f

08009b48 <__itoa>:
 8009b48:	1e93      	subs	r3, r2, #2
 8009b4a:	2b22      	cmp	r3, #34	@ 0x22
 8009b4c:	b510      	push	{r4, lr}
 8009b4e:	460c      	mov	r4, r1
 8009b50:	d904      	bls.n	8009b5c <__itoa+0x14>
 8009b52:	2300      	movs	r3, #0
 8009b54:	461c      	mov	r4, r3
 8009b56:	700b      	strb	r3, [r1, #0]
 8009b58:	4620      	mov	r0, r4
 8009b5a:	bd10      	pop	{r4, pc}
 8009b5c:	2a0a      	cmp	r2, #10
 8009b5e:	d109      	bne.n	8009b74 <__itoa+0x2c>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	da07      	bge.n	8009b74 <__itoa+0x2c>
 8009b64:	232d      	movs	r3, #45	@ 0x2d
 8009b66:	700b      	strb	r3, [r1, #0]
 8009b68:	2101      	movs	r1, #1
 8009b6a:	4240      	negs	r0, r0
 8009b6c:	4421      	add	r1, r4
 8009b6e:	f000 f805 	bl	8009b7c <__utoa>
 8009b72:	e7f1      	b.n	8009b58 <__itoa+0x10>
 8009b74:	2100      	movs	r1, #0
 8009b76:	e7f9      	b.n	8009b6c <__itoa+0x24>

08009b78 <itoa>:
 8009b78:	f7ff bfe6 	b.w	8009b48 <__itoa>

08009b7c <__utoa>:
 8009b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b7e:	b08b      	sub	sp, #44	@ 0x2c
 8009b80:	4605      	mov	r5, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	466e      	mov	r6, sp
 8009b86:	4c1d      	ldr	r4, [pc, #116]	@ (8009bfc <__utoa+0x80>)
 8009b88:	f104 0c20 	add.w	ip, r4, #32
 8009b8c:	4637      	mov	r7, r6
 8009b8e:	6820      	ldr	r0, [r4, #0]
 8009b90:	6861      	ldr	r1, [r4, #4]
 8009b92:	3408      	adds	r4, #8
 8009b94:	c703      	stmia	r7!, {r0, r1}
 8009b96:	4564      	cmp	r4, ip
 8009b98:	463e      	mov	r6, r7
 8009b9a:	d1f7      	bne.n	8009b8c <__utoa+0x10>
 8009b9c:	7921      	ldrb	r1, [r4, #4]
 8009b9e:	6820      	ldr	r0, [r4, #0]
 8009ba0:	7139      	strb	r1, [r7, #4]
 8009ba2:	1e91      	subs	r1, r2, #2
 8009ba4:	2922      	cmp	r1, #34	@ 0x22
 8009ba6:	6038      	str	r0, [r7, #0]
 8009ba8:	f04f 0100 	mov.w	r1, #0
 8009bac:	d904      	bls.n	8009bb8 <__utoa+0x3c>
 8009bae:	7019      	strb	r1, [r3, #0]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	b00b      	add	sp, #44	@ 0x2c
 8009bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bb8:	1e58      	subs	r0, r3, #1
 8009bba:	4684      	mov	ip, r0
 8009bbc:	fbb5 f7f2 	udiv	r7, r5, r2
 8009bc0:	fb02 5617 	mls	r6, r2, r7, r5
 8009bc4:	3628      	adds	r6, #40	@ 0x28
 8009bc6:	446e      	add	r6, sp
 8009bc8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009bcc:	460c      	mov	r4, r1
 8009bce:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009bd2:	462e      	mov	r6, r5
 8009bd4:	42b2      	cmp	r2, r6
 8009bd6:	463d      	mov	r5, r7
 8009bd8:	f101 0101 	add.w	r1, r1, #1
 8009bdc:	d9ee      	bls.n	8009bbc <__utoa+0x40>
 8009bde:	2200      	movs	r2, #0
 8009be0:	545a      	strb	r2, [r3, r1]
 8009be2:	1919      	adds	r1, r3, r4
 8009be4:	1aa5      	subs	r5, r4, r2
 8009be6:	42aa      	cmp	r2, r5
 8009be8:	dae3      	bge.n	8009bb2 <__utoa+0x36>
 8009bea:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009bee:	780e      	ldrb	r6, [r1, #0]
 8009bf0:	3201      	adds	r2, #1
 8009bf2:	7006      	strb	r6, [r0, #0]
 8009bf4:	f801 5901 	strb.w	r5, [r1], #-1
 8009bf8:	e7f4      	b.n	8009be4 <__utoa+0x68>
 8009bfa:	bf00      	nop
 8009bfc:	0800a8aa 	.word	0x0800a8aa

08009c00 <memset>:
 8009c00:	4603      	mov	r3, r0
 8009c02:	4402      	add	r2, r0
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d100      	bne.n	8009c0a <memset+0xa>
 8009c08:	4770      	bx	lr
 8009c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c0e:	e7f9      	b.n	8009c04 <memset+0x4>

08009c10 <__libc_init_array>:
 8009c10:	b570      	push	{r4, r5, r6, lr}
 8009c12:	2600      	movs	r6, #0
 8009c14:	4d0c      	ldr	r5, [pc, #48]	@ (8009c48 <__libc_init_array+0x38>)
 8009c16:	4c0d      	ldr	r4, [pc, #52]	@ (8009c4c <__libc_init_array+0x3c>)
 8009c18:	1b64      	subs	r4, r4, r5
 8009c1a:	10a4      	asrs	r4, r4, #2
 8009c1c:	42a6      	cmp	r6, r4
 8009c1e:	d109      	bne.n	8009c34 <__libc_init_array+0x24>
 8009c20:	f000 f81a 	bl	8009c58 <_init>
 8009c24:	2600      	movs	r6, #0
 8009c26:	4d0a      	ldr	r5, [pc, #40]	@ (8009c50 <__libc_init_array+0x40>)
 8009c28:	4c0a      	ldr	r4, [pc, #40]	@ (8009c54 <__libc_init_array+0x44>)
 8009c2a:	1b64      	subs	r4, r4, r5
 8009c2c:	10a4      	asrs	r4, r4, #2
 8009c2e:	42a6      	cmp	r6, r4
 8009c30:	d105      	bne.n	8009c3e <__libc_init_array+0x2e>
 8009c32:	bd70      	pop	{r4, r5, r6, pc}
 8009c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c38:	4798      	blx	r3
 8009c3a:	3601      	adds	r6, #1
 8009c3c:	e7ee      	b.n	8009c1c <__libc_init_array+0xc>
 8009c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c42:	4798      	blx	r3
 8009c44:	3601      	adds	r6, #1
 8009c46:	e7f2      	b.n	8009c2e <__libc_init_array+0x1e>
 8009c48:	0800a8d0 	.word	0x0800a8d0
 8009c4c:	0800a8d0 	.word	0x0800a8d0
 8009c50:	0800a8d0 	.word	0x0800a8d0
 8009c54:	0800a8d4 	.word	0x0800a8d4

08009c58 <_init>:
 8009c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5a:	bf00      	nop
 8009c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5e:	bc08      	pop	{r3}
 8009c60:	469e      	mov	lr, r3
 8009c62:	4770      	bx	lr

08009c64 <_fini>:
 8009c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c66:	bf00      	nop
 8009c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c6a:	bc08      	pop	{r3}
 8009c6c:	469e      	mov	lr, r3
 8009c6e:	4770      	bx	lr
