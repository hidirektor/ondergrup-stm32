
ESP_Version_3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ced4  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800d0b8  0800d0b8  0000e0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d168  0800d168  0000fce4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d168  0800d168  0000fce4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d168  0800d168  0000fce4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d168  0800d168  0000e168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d16c  0800d16c  0000e16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ce4  20000000  0800d170  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c58  20000ce8  0800de54  0000fce8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001940  0800de54  00010940  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000fce4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d74  00000000  00000000  0000fd0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c72  00000000  00000000  00025a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  000286f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d56  00000000  00000000  00029838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b97e  00000000  00000000  0002a58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019697  00000000  00000000  00045f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f7fc  00000000  00000000  0005f5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fed9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004784  00000000  00000000  000fede4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00103568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000ce8 	.word	0x20000ce8
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d0a0 	.word	0x0800d0a0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000cec 	.word	0x20000cec
 8000220:	0800d0a0 	.word	0x0800d0a0

08000224 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800022a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800022e:	9302      	str	r3, [sp, #8]
 8000230:	236e      	movs	r3, #110	@ 0x6e
 8000232:	9301      	str	r3, [sp, #4]
 8000234:	4b81      	ldr	r3, [pc, #516]	@ (800043c <eepromKontrol+0x218>)
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	236e      	movs	r3, #110	@ 0x6e
 800023a:	2200      	movs	r2, #0
 800023c:	21a0      	movs	r1, #160	@ 0xa0
 800023e:	4880      	ldr	r0, [pc, #512]	@ (8000440 <eepromKontrol+0x21c>)
 8000240:	f00a fed0 	bl	800afe4 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000244:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000248:	f009 fe8a 	bl	8009f60 <HAL_Delay>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	kaydedilenDeger = eepromData[3];
 800024c:	4b7b      	ldr	r3, [pc, #492]	@ (800043c <eepromKontrol+0x218>)
 800024e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000252:	497c      	ldr	r1, [pc, #496]	@ (8000444 <eepromKontrol+0x220>)
 8000254:	e9c1 2300 	strd	r2, r3, [r1]
	calismaSekli = eepromData[1];
 8000258:	4b78      	ldr	r3, [pc, #480]	@ (800043c <eepromKontrol+0x218>)
 800025a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800025e:	497a      	ldr	r1, [pc, #488]	@ (8000448 <eepromKontrol+0x224>)
 8000260:	e9c1 2300 	strd	r2, r3, [r1]
	emniyetCercevesi = eepromData[2];
 8000264:	4b75      	ldr	r3, [pc, #468]	@ (800043c <eepromKontrol+0x218>)
 8000266:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800026a:	4978      	ldr	r1, [pc, #480]	@ (800044c <eepromKontrol+0x228>)
 800026c:	e9c1 2300 	strd	r2, r3, [r1]
	yavaslamaLimit = eepromData[4];
 8000270:	4b72      	ldr	r3, [pc, #456]	@ (800043c <eepromKontrol+0x218>)
 8000272:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000276:	4976      	ldr	r1, [pc, #472]	@ (8000450 <eepromKontrol+0x22c>)
 8000278:	e9c1 2300 	strd	r2, r3, [r1]
	altLimit = eepromData[5];
 800027c:	4b6f      	ldr	r3, [pc, #444]	@ (800043c <eepromKontrol+0x218>)
 800027e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8000282:	4974      	ldr	r1, [pc, #464]	@ (8000454 <eepromKontrol+0x230>)
 8000284:	e9c1 2300 	strd	r2, r3, [r1]
	basincSalteri = eepromData[6];
 8000288:	4b6c      	ldr	r3, [pc, #432]	@ (800043c <eepromKontrol+0x218>)
 800028a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800028e:	4972      	ldr	r1, [pc, #456]	@ (8000458 <eepromKontrol+0x234>)
 8000290:	e9c1 2300 	strd	r2, r3, [r1]
	kapiSecimleri = eepromData[7];
 8000294:	4b69      	ldr	r3, [pc, #420]	@ (800043c <eepromKontrol+0x218>)
 8000296:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800029a:	4970      	ldr	r1, [pc, #448]	@ (800045c <eepromKontrol+0x238>)
 800029c:	e9c1 2300 	strd	r2, r3, [r1]
	kapi1Tip = eepromData[8];
 80002a0:	4b66      	ldr	r3, [pc, #408]	@ (800043c <eepromKontrol+0x218>)
 80002a2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80002a6:	496e      	ldr	r1, [pc, #440]	@ (8000460 <eepromKontrol+0x23c>)
 80002a8:	e9c1 2300 	strd	r2, r3, [r1]
	kapi1AcSure = eepromData[9];
 80002ac:	4b63      	ldr	r3, [pc, #396]	@ (800043c <eepromKontrol+0x218>)
 80002ae:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80002b2:	496c      	ldr	r1, [pc, #432]	@ (8000464 <eepromKontrol+0x240>)
 80002b4:	e9c1 2300 	strd	r2, r3, [r1]
	kapi2Tip = eepromData[10];
 80002b8:	4b60      	ldr	r3, [pc, #384]	@ (800043c <eepromKontrol+0x218>)
 80002ba:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80002be:	496a      	ldr	r1, [pc, #424]	@ (8000468 <eepromKontrol+0x244>)
 80002c0:	e9c1 2300 	strd	r2, r3, [r1]
	kapi2AcSure = eepromData[11];
 80002c4:	4b5d      	ldr	r3, [pc, #372]	@ (800043c <eepromKontrol+0x218>)
 80002c6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80002ca:	4968      	ldr	r1, [pc, #416]	@ (800046c <eepromKontrol+0x248>)
 80002cc:	e9c1 2300 	strd	r2, r3, [r1]
	kapitablaTip = eepromData[12];
 80002d0:	4b5a      	ldr	r3, [pc, #360]	@ (800043c <eepromKontrol+0x218>)
 80002d2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80002d6:	4966      	ldr	r1, [pc, #408]	@ (8000470 <eepromKontrol+0x24c>)
 80002d8:	e9c1 2300 	strd	r2, r3, [r1]
	kapiTablaAcSure = eepromData[13];
 80002dc:	4b57      	ldr	r3, [pc, #348]	@ (800043c <eepromKontrol+0x218>)
 80002de:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80002e2:	4964      	ldr	r1, [pc, #400]	@ (8000474 <eepromKontrol+0x250>)
 80002e4:	e9c1 2300 	strd	r2, r3, [r1]
	yukariYavasLimit = eepromData[14];
 80002e8:	4b54      	ldr	r3, [pc, #336]	@ (800043c <eepromKontrol+0x218>)
 80002ea:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80002ee:	4962      	ldr	r1, [pc, #392]	@ (8000478 <eepromKontrol+0x254>)
 80002f0:	e9c1 2300 	strd	r2, r3, [r1]
	devirmeYuruyusSecim = eepromData[15];
 80002f4:	4b51      	ldr	r3, [pc, #324]	@ (800043c <eepromKontrol+0x218>)
 80002f6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80002fa:	4960      	ldr	r1, [pc, #384]	@ (800047c <eepromKontrol+0x258>)
 80002fc:	e9c1 2300 	strd	r2, r3, [r1]
	devirmeYukariIleriLimit = eepromData[16];
 8000300:	4b4e      	ldr	r3, [pc, #312]	@ (800043c <eepromKontrol+0x218>)
 8000302:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8000306:	495e      	ldr	r1, [pc, #376]	@ (8000480 <eepromKontrol+0x25c>)
 8000308:	e9c1 2300 	strd	r2, r3, [r1]
	devirmeAsagiGeriLimit = eepromData[17];
 800030c:	4b4b      	ldr	r3, [pc, #300]	@ (800043c <eepromKontrol+0x218>)
 800030e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8000312:	495c      	ldr	r1, [pc, #368]	@ (8000484 <eepromKontrol+0x260>)
 8000314:	e9c1 2300 	strd	r2, r3, [r1]
	devirmeSilindirTipi = eepromData[18];
 8000318:	4b48      	ldr	r3, [pc, #288]	@ (800043c <eepromKontrol+0x218>)
 800031a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800031e:	495a      	ldr	r1, [pc, #360]	@ (8000488 <eepromKontrol+0x264>)
 8000320:	e9c1 2300 	strd	r2, r3, [r1]
	platformSilindirTipi = eepromData[19];
 8000324:	4b45      	ldr	r3, [pc, #276]	@ (800043c <eepromKontrol+0x218>)
 8000326:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800032a:	4958      	ldr	r1, [pc, #352]	@ (800048c <eepromKontrol+0x268>)
 800032c:	e9c1 2300 	strd	r2, r3, [r1]
	yukariValfTmr = eepromData[20];
 8000330:	4b42      	ldr	r3, [pc, #264]	@ (800043c <eepromKontrol+0x218>)
 8000332:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8000336:	4956      	ldr	r1, [pc, #344]	@ (8000490 <eepromKontrol+0x26c>)
 8000338:	e9c1 2300 	strd	r2, r3, [r1]
	asagiValfTmr = eepromData[21];
 800033c:	4b3f      	ldr	r3, [pc, #252]	@ (800043c <eepromKontrol+0x218>)
 800033e:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 8000342:	4954      	ldr	r1, [pc, #336]	@ (8000494 <eepromKontrol+0x270>)
 8000344:	e9c1 2300 	strd	r2, r3, [r1]
	devirmeYukariIleriTmr = eepromData[22];
 8000348:	4b3c      	ldr	r3, [pc, #240]	@ (800043c <eepromKontrol+0x218>)
 800034a:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 800034e:	4952      	ldr	r1, [pc, #328]	@ (8000498 <eepromKontrol+0x274>)
 8000350:	e9c1 2300 	strd	r2, r3, [r1]
	devirmeAsagiGeriTmr = eepromData[23];
 8000354:	4b39      	ldr	r3, [pc, #228]	@ (800043c <eepromKontrol+0x218>)
 8000356:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 800035a:	4950      	ldr	r1, [pc, #320]	@ (800049c <eepromKontrol+0x278>)
 800035c:	e9c1 2300 	strd	r2, r3, [r1]
	makineCalismaTmr = eepromData[24];
 8000360:	4b36      	ldr	r3, [pc, #216]	@ (800043c <eepromKontrol+0x218>)
 8000362:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8000366:	494e      	ldr	r1, [pc, #312]	@ (80004a0 <eepromKontrol+0x27c>)
 8000368:	e9c1 2300 	strd	r2, r3, [r1]
	buzzer = eepromData[25];
 800036c:	4b33      	ldr	r3, [pc, #204]	@ (800043c <eepromKontrol+0x218>)
 800036e:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8000372:	494c      	ldr	r1, [pc, #304]	@ (80004a4 <eepromKontrol+0x280>)
 8000374:	e9c1 2300 	strd	r2, r3, [r1]
	demoMode = eepromData[26];
 8000378:	4b30      	ldr	r3, [pc, #192]	@ (800043c <eepromKontrol+0x218>)
 800037a:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800037e:	494a      	ldr	r1, [pc, #296]	@ (80004a8 <eepromKontrol+0x284>)
 8000380:	e9c1 2300 	strd	r2, r3, [r1]
	calismaSayisi = eepromData[27];
 8000384:	4b2d      	ldr	r3, [pc, #180]	@ (800043c <eepromKontrol+0x218>)
 8000386:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	@ 0xd8
 800038a:	4948      	ldr	r1, [pc, #288]	@ (80004ac <eepromKontrol+0x288>)
 800038c:	e9c1 2300 	strd	r2, r3, [r1]
	calismaSayisiDemo = eepromData[28];
 8000390:	4b2a      	ldr	r3, [pc, #168]	@ (800043c <eepromKontrol+0x218>)
 8000392:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 8000396:	4946      	ldr	r1, [pc, #280]	@ (80004b0 <eepromKontrol+0x28c>)
 8000398:	e9c1 2300 	strd	r2, r3, [r1]
	dilSecim = eepromData[33];
 800039c:	4b27      	ldr	r3, [pc, #156]	@ (800043c <eepromKontrol+0x218>)
 800039e:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 80003a2:	4944      	ldr	r1, [pc, #272]	@ (80004b4 <eepromKontrol+0x290>)
 80003a4:	e9c1 2300 	strd	r2, r3, [r1]
	iotMode = eepromData[48];
 80003a8:	4b24      	ldr	r3, [pc, #144]	@ (800043c <eepromKontrol+0x218>)
 80003aa:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	@ 0x180
 80003ae:	4942      	ldr	r1, [pc, #264]	@ (80004b8 <eepromKontrol+0x294>)
 80003b0:	e9c1 2300 	strd	r2, r3, [r1]
	kapiTablaAcKonum = eepromData[34];
 80003b4:	4b21      	ldr	r3, [pc, #132]	@ (800043c <eepromKontrol+0x218>)
 80003b6:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	@ 0x110
 80003ba:	4940      	ldr	r1, [pc, #256]	@ (80004bc <eepromKontrol+0x298>)
 80003bc:	e9c1 2300 	strd	r2, r3, [r1]
	calismaSayModu = eepromData[35];
 80003c0:	4b1e      	ldr	r3, [pc, #120]	@ (800043c <eepromKontrol+0x218>)
 80003c2:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	@ 0x118
 80003c6:	493e      	ldr	r1, [pc, #248]	@ (80004c0 <eepromKontrol+0x29c>)
 80003c8:	e9c1 2300 	strd	r2, r3, [r1]
	kapiAcTipi = eepromData[36];
 80003cc:	4b1b      	ldr	r3, [pc, #108]	@ (800043c <eepromKontrol+0x218>)
 80003ce:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 80003d2:	493c      	ldr	r1, [pc, #240]	@ (80004c4 <eepromKontrol+0x2a0>)
 80003d4:	e9c1 2300 	strd	r2, r3, [r1]
	hataKayit1 = eepromData[38];
 80003d8:	4b18      	ldr	r3, [pc, #96]	@ (800043c <eepromKontrol+0x218>)
 80003da:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	@ 0x130
 80003de:	493a      	ldr	r1, [pc, #232]	@ (80004c8 <eepromKontrol+0x2a4>)
 80003e0:	e9c1 2300 	strd	r2, r3, [r1]
	hataKayit2 = eepromData[39];
 80003e4:	4b15      	ldr	r3, [pc, #84]	@ (800043c <eepromKontrol+0x218>)
 80003e6:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	@ 0x138
 80003ea:	4938      	ldr	r1, [pc, #224]	@ (80004cc <eepromKontrol+0x2a8>)
 80003ec:	e9c1 2300 	strd	r2, r3, [r1]
	hataKayit3 = eepromData[40];
 80003f0:	4b12      	ldr	r3, [pc, #72]	@ (800043c <eepromKontrol+0x218>)
 80003f2:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	@ 0x140
 80003f6:	4936      	ldr	r1, [pc, #216]	@ (80004d0 <eepromKontrol+0x2ac>)
 80003f8:	e9c1 2300 	strd	r2, r3, [r1]
	hataKayit4 = eepromData[41];
 80003fc:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <eepromKontrol+0x218>)
 80003fe:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	@ 0x148
 8000402:	4934      	ldr	r1, [pc, #208]	@ (80004d4 <eepromKontrol+0x2b0>)
 8000404:	e9c1 2300 	strd	r2, r3, [r1]
	hataKayit5 = eepromData[42];
 8000408:	4b0c      	ldr	r3, [pc, #48]	@ (800043c <eepromKontrol+0x218>)
 800040a:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	@ 0x150
 800040e:	4932      	ldr	r1, [pc, #200]	@ (80004d8 <eepromKontrol+0x2b4>)
 8000410:	e9c1 2300 	strd	r2, r3, [r1]
	hataKayit6 = eepromData[43];
 8000414:	4b09      	ldr	r3, [pc, #36]	@ (800043c <eepromKontrol+0x218>)
 8000416:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	@ 0x158
 800041a:	4930      	ldr	r1, [pc, #192]	@ (80004dc <eepromKontrol+0x2b8>)
 800041c:	e9c1 2300 	strd	r2, r3, [r1]
	hataKayit7 = eepromData[44];
 8000420:	4b06      	ldr	r3, [pc, #24]	@ (800043c <eepromKontrol+0x218>)
 8000422:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	@ 0x160
 8000426:	492e      	ldr	r1, [pc, #184]	@ (80004e0 <eepromKontrol+0x2bc>)
 8000428:	e9c1 2300 	strd	r2, r3, [r1]
	hataKayit8 = eepromData[45];
 800042c:	4b03      	ldr	r3, [pc, #12]	@ (800043c <eepromKontrol+0x218>)
 800042e:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	@ 0x168
 8000432:	492c      	ldr	r1, [pc, #176]	@ (80004e4 <eepromKontrol+0x2c0>)
 8000434:	e9c1 2300 	strd	r2, r3, [r1]
 8000438:	e056      	b.n	80004e8 <eepromKontrol+0x2c4>
 800043a:	bf00      	nop
 800043c:	20000d08 	.word	0x20000d08
 8000440:	20001858 	.word	0x20001858
 8000444:	20001080 	.word	0x20001080
 8000448:	200010c0 	.word	0x200010c0
 800044c:	200010d8 	.word	0x200010d8
 8000450:	200010e0 	.word	0x200010e0
 8000454:	200010e8 	.word	0x200010e8
 8000458:	200010f0 	.word	0x200010f0
 800045c:	200010f8 	.word	0x200010f8
 8000460:	20001100 	.word	0x20001100
 8000464:	20001180 	.word	0x20001180
 8000468:	20001108 	.word	0x20001108
 800046c:	20001188 	.word	0x20001188
 8000470:	20001110 	.word	0x20001110
 8000474:	20001190 	.word	0x20001190
 8000478:	20001128 	.word	0x20001128
 800047c:	20001130 	.word	0x20001130
 8000480:	20001138 	.word	0x20001138
 8000484:	20001140 	.word	0x20001140
 8000488:	20001148 	.word	0x20001148
 800048c:	20001150 	.word	0x20001150
 8000490:	20001158 	.word	0x20001158
 8000494:	20001160 	.word	0x20001160
 8000498:	20001168 	.word	0x20001168
 800049c:	20001170 	.word	0x20001170
 80004a0:	20001178 	.word	0x20001178
 80004a4:	20001198 	.word	0x20001198
 80004a8:	200011a8 	.word	0x200011a8
 80004ac:	200010a8 	.word	0x200010a8
 80004b0:	200010b0 	.word	0x200010b0
 80004b4:	200011c0 	.word	0x200011c0
 80004b8:	200011b0 	.word	0x200011b0
 80004bc:	20001120 	.word	0x20001120
 80004c0:	200011b8 	.word	0x200011b8
 80004c4:	20001118 	.word	0x20001118
 80004c8:	200011c8 	.word	0x200011c8
 80004cc:	200011d0 	.word	0x200011d0
 80004d0:	200011d8 	.word	0x200011d8
 80004d4:	200011e0 	.word	0x200011e0
 80004d8:	200011e8 	.word	0x200011e8
 80004dc:	200011f0 	.word	0x200011f0
 80004e0:	200011f8 	.word	0x200011f8
 80004e4:	20001200 	.word	0x20001200
	hataKayit9 = eepromData[46];
 80004e8:	4ba0      	ldr	r3, [pc, #640]	@ (800076c <eepromKontrol+0x548>)
 80004ea:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	@ 0x170
 80004ee:	49a0      	ldr	r1, [pc, #640]	@ (8000770 <eepromKontrol+0x54c>)
 80004f0:	e9c1 2300 	strd	r2, r3, [r1]
	hataKayit10 = eepromData[47];
 80004f4:	4b9d      	ldr	r3, [pc, #628]	@ (800076c <eepromKontrol+0x548>)
 80004f6:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	@ 0x178
 80004fa:	499e      	ldr	r1, [pc, #632]	@ (8000774 <eepromKontrol+0x550>)
 80004fc:	e9c1 2300 	strd	r2, r3, [r1]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000500:	4b9d      	ldr	r3, [pc, #628]	@ (8000778 <eepromKontrol+0x554>)
 8000502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000506:	2a02      	cmp	r2, #2
 8000508:	f173 0300 	sbcs.w	r3, r3, #0
 800050c:	d306      	bcc.n	800051c <eepromKontrol+0x2f8>
	    calismaSekli=0;
 800050e:	499a      	ldr	r1, [pc, #616]	@ (8000778 <eepromKontrol+0x554>)
 8000510:	f04f 0200 	mov.w	r2, #0
 8000514:	f04f 0300 	mov.w	r3, #0
 8000518:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(emniyetCercevesi>1) {
 800051c:	4b97      	ldr	r3, [pc, #604]	@ (800077c <eepromKontrol+0x558>)
 800051e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000522:	2a02      	cmp	r2, #2
 8000524:	f173 0300 	sbcs.w	r3, r3, #0
 8000528:	d306      	bcc.n	8000538 <eepromKontrol+0x314>
	    emniyetCercevesi=1;
 800052a:	4994      	ldr	r1, [pc, #592]	@ (800077c <eepromKontrol+0x558>)
 800052c:	f04f 0201 	mov.w	r2, #1
 8000530:	f04f 0300 	mov.w	r3, #0
 8000534:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(yavaslamaLimit>1) {
 8000538:	4b91      	ldr	r3, [pc, #580]	@ (8000780 <eepromKontrol+0x55c>)
 800053a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800053e:	2a02      	cmp	r2, #2
 8000540:	f173 0300 	sbcs.w	r3, r3, #0
 8000544:	d306      	bcc.n	8000554 <eepromKontrol+0x330>
	    yavaslamaLimit=0;
 8000546:	498e      	ldr	r1, [pc, #568]	@ (8000780 <eepromKontrol+0x55c>)
 8000548:	f04f 0200 	mov.w	r2, #0
 800054c:	f04f 0300 	mov.w	r3, #0
 8000550:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(altLimit>1) {
 8000554:	4b8b      	ldr	r3, [pc, #556]	@ (8000784 <eepromKontrol+0x560>)
 8000556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800055a:	2a02      	cmp	r2, #2
 800055c:	f173 0300 	sbcs.w	r3, r3, #0
 8000560:	d306      	bcc.n	8000570 <eepromKontrol+0x34c>
	    altLimit=1;
 8000562:	4988      	ldr	r1, [pc, #544]	@ (8000784 <eepromKontrol+0x560>)
 8000564:	f04f 0201 	mov.w	r2, #1
 8000568:	f04f 0300 	mov.w	r3, #0
 800056c:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(basincSalteri>1) {
 8000570:	4b85      	ldr	r3, [pc, #532]	@ (8000788 <eepromKontrol+0x564>)
 8000572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000576:	2a02      	cmp	r2, #2
 8000578:	f173 0300 	sbcs.w	r3, r3, #0
 800057c:	d306      	bcc.n	800058c <eepromKontrol+0x368>
	    basincSalteri=1;
 800057e:	4982      	ldr	r1, [pc, #520]	@ (8000788 <eepromKontrol+0x564>)
 8000580:	f04f 0201 	mov.w	r2, #1
 8000584:	f04f 0300 	mov.w	r3, #0
 8000588:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(kapiSecimleri>3) {
 800058c:	4b7f      	ldr	r3, [pc, #508]	@ (800078c <eepromKontrol+0x568>)
 800058e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000592:	2a04      	cmp	r2, #4
 8000594:	f173 0300 	sbcs.w	r3, r3, #0
 8000598:	d306      	bcc.n	80005a8 <eepromKontrol+0x384>
	    kapiSecimleri=3;
 800059a:	497c      	ldr	r1, [pc, #496]	@ (800078c <eepromKontrol+0x568>)
 800059c:	f04f 0203 	mov.w	r2, #3
 80005a0:	f04f 0300 	mov.w	r3, #0
 80005a4:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(kapiAcTipi>1) {
 80005a8:	4b79      	ldr	r3, [pc, #484]	@ (8000790 <eepromKontrol+0x56c>)
 80005aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ae:	2a02      	cmp	r2, #2
 80005b0:	f173 0300 	sbcs.w	r3, r3, #0
 80005b4:	d306      	bcc.n	80005c4 <eepromKontrol+0x3a0>
	    kapiAcTipi=0;
 80005b6:	4976      	ldr	r1, [pc, #472]	@ (8000790 <eepromKontrol+0x56c>)
 80005b8:	f04f 0200 	mov.w	r2, #0
 80005bc:	f04f 0300 	mov.w	r3, #0
 80005c0:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(kapi1Tip>2) {
 80005c4:	4b73      	ldr	r3, [pc, #460]	@ (8000794 <eepromKontrol+0x570>)
 80005c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ca:	2a03      	cmp	r2, #3
 80005cc:	f173 0300 	sbcs.w	r3, r3, #0
 80005d0:	d306      	bcc.n	80005e0 <eepromKontrol+0x3bc>
	    kapi1Tip=1;
 80005d2:	4970      	ldr	r1, [pc, #448]	@ (8000794 <eepromKontrol+0x570>)
 80005d4:	f04f 0201 	mov.w	r2, #1
 80005d8:	f04f 0300 	mov.w	r3, #0
 80005dc:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(kapi1AcSure>5) {
 80005e0:	4b6d      	ldr	r3, [pc, #436]	@ (8000798 <eepromKontrol+0x574>)
 80005e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005e6:	2a06      	cmp	r2, #6
 80005e8:	f173 0300 	sbcs.w	r3, r3, #0
 80005ec:	d306      	bcc.n	80005fc <eepromKontrol+0x3d8>
	    kapi1AcSure=5;
 80005ee:	496a      	ldr	r1, [pc, #424]	@ (8000798 <eepromKontrol+0x574>)
 80005f0:	f04f 0205 	mov.w	r2, #5
 80005f4:	f04f 0300 	mov.w	r3, #0
 80005f8:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(kapi2Tip>2) {
 80005fc:	4b67      	ldr	r3, [pc, #412]	@ (800079c <eepromKontrol+0x578>)
 80005fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000602:	2a03      	cmp	r2, #3
 8000604:	f173 0300 	sbcs.w	r3, r3, #0
 8000608:	d306      	bcc.n	8000618 <eepromKontrol+0x3f4>
	    kapi2Tip=1;
 800060a:	4964      	ldr	r1, [pc, #400]	@ (800079c <eepromKontrol+0x578>)
 800060c:	f04f 0201 	mov.w	r2, #1
 8000610:	f04f 0300 	mov.w	r3, #0
 8000614:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(kapi2AcSure>5) {
 8000618:	4b61      	ldr	r3, [pc, #388]	@ (80007a0 <eepromKontrol+0x57c>)
 800061a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800061e:	2a06      	cmp	r2, #6
 8000620:	f173 0300 	sbcs.w	r3, r3, #0
 8000624:	d306      	bcc.n	8000634 <eepromKontrol+0x410>
	    kapi2AcSure=5;
 8000626:	495e      	ldr	r1, [pc, #376]	@ (80007a0 <eepromKontrol+0x57c>)
 8000628:	f04f 0205 	mov.w	r2, #5
 800062c:	f04f 0300 	mov.w	r3, #0
 8000630:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(kapitablaTip>2) {
 8000634:	4b5b      	ldr	r3, [pc, #364]	@ (80007a4 <eepromKontrol+0x580>)
 8000636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800063a:	2a03      	cmp	r2, #3
 800063c:	f173 0300 	sbcs.w	r3, r3, #0
 8000640:	d306      	bcc.n	8000650 <eepromKontrol+0x42c>
	    kapitablaTip=1;
 8000642:	4958      	ldr	r1, [pc, #352]	@ (80007a4 <eepromKontrol+0x580>)
 8000644:	f04f 0201 	mov.w	r2, #1
 8000648:	f04f 0300 	mov.w	r3, #0
 800064c:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(kapiTablaAcKonum>2) {
 8000650:	4b55      	ldr	r3, [pc, #340]	@ (80007a8 <eepromKontrol+0x584>)
 8000652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000656:	2a03      	cmp	r2, #3
 8000658:	f173 0300 	sbcs.w	r3, r3, #0
 800065c:	d306      	bcc.n	800066c <eepromKontrol+0x448>
	    kapiTablaAcKonum=2;
 800065e:	4952      	ldr	r1, [pc, #328]	@ (80007a8 <eepromKontrol+0x584>)
 8000660:	f04f 0202 	mov.w	r2, #2
 8000664:	f04f 0300 	mov.w	r3, #0
 8000668:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(kapiTablaAcSure>5) {
 800066c:	4b4f      	ldr	r3, [pc, #316]	@ (80007ac <eepromKontrol+0x588>)
 800066e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000672:	2a06      	cmp	r2, #6
 8000674:	f173 0300 	sbcs.w	r3, r3, #0
 8000678:	d306      	bcc.n	8000688 <eepromKontrol+0x464>
	    kapiTablaAcSure=5;
 800067a:	494c      	ldr	r1, [pc, #304]	@ (80007ac <eepromKontrol+0x588>)
 800067c:	f04f 0205 	mov.w	r2, #5
 8000680:	f04f 0300 	mov.w	r3, #0
 8000684:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(yukariYavasLimit>1) {
 8000688:	4b49      	ldr	r3, [pc, #292]	@ (80007b0 <eepromKontrol+0x58c>)
 800068a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800068e:	2a02      	cmp	r2, #2
 8000690:	f173 0300 	sbcs.w	r3, r3, #0
 8000694:	d306      	bcc.n	80006a4 <eepromKontrol+0x480>
	    yukariYavasLimit=0;
 8000696:	4946      	ldr	r1, [pc, #280]	@ (80007b0 <eepromKontrol+0x58c>)
 8000698:	f04f 0200 	mov.w	r2, #0
 800069c:	f04f 0300 	mov.w	r3, #0
 80006a0:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(devirmeYuruyusSecim>2) {
 80006a4:	4b43      	ldr	r3, [pc, #268]	@ (80007b4 <eepromKontrol+0x590>)
 80006a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006aa:	2a03      	cmp	r2, #3
 80006ac:	f173 0300 	sbcs.w	r3, r3, #0
 80006b0:	d306      	bcc.n	80006c0 <eepromKontrol+0x49c>
	    devirmeYuruyusSecim=0;
 80006b2:	4940      	ldr	r1, [pc, #256]	@ (80007b4 <eepromKontrol+0x590>)
 80006b4:	f04f 0200 	mov.w	r2, #0
 80006b8:	f04f 0300 	mov.w	r3, #0
 80006bc:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(devirmeYukariIleriLimit>1) {
 80006c0:	4b3d      	ldr	r3, [pc, #244]	@ (80007b8 <eepromKontrol+0x594>)
 80006c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006c6:	2a02      	cmp	r2, #2
 80006c8:	f173 0300 	sbcs.w	r3, r3, #0
 80006cc:	d306      	bcc.n	80006dc <eepromKontrol+0x4b8>
	    devirmeYukariIleriLimit=1;
 80006ce:	493a      	ldr	r1, [pc, #232]	@ (80007b8 <eepromKontrol+0x594>)
 80006d0:	f04f 0201 	mov.w	r2, #1
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(devirmeAsagiGeriLimit>1) {
 80006dc:	4b37      	ldr	r3, [pc, #220]	@ (80007bc <eepromKontrol+0x598>)
 80006de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006e2:	2a02      	cmp	r2, #2
 80006e4:	f173 0300 	sbcs.w	r3, r3, #0
 80006e8:	d306      	bcc.n	80006f8 <eepromKontrol+0x4d4>
	    devirmeAsagiGeriLimit=1;
 80006ea:	4934      	ldr	r1, [pc, #208]	@ (80007bc <eepromKontrol+0x598>)
 80006ec:	f04f 0201 	mov.w	r2, #1
 80006f0:	f04f 0300 	mov.w	r3, #0
 80006f4:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(devirmeSilindirTipi>1) {
 80006f8:	4b31      	ldr	r3, [pc, #196]	@ (80007c0 <eepromKontrol+0x59c>)
 80006fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006fe:	2a02      	cmp	r2, #2
 8000700:	f173 0300 	sbcs.w	r3, r3, #0
 8000704:	d306      	bcc.n	8000714 <eepromKontrol+0x4f0>
	    devirmeSilindirTipi=0;
 8000706:	492e      	ldr	r1, [pc, #184]	@ (80007c0 <eepromKontrol+0x59c>)
 8000708:	f04f 0200 	mov.w	r2, #0
 800070c:	f04f 0300 	mov.w	r3, #0
 8000710:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(platformSilindirTipi>1) {
 8000714:	4b2b      	ldr	r3, [pc, #172]	@ (80007c4 <eepromKontrol+0x5a0>)
 8000716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800071a:	2a02      	cmp	r2, #2
 800071c:	f173 0300 	sbcs.w	r3, r3, #0
 8000720:	d306      	bcc.n	8000730 <eepromKontrol+0x50c>
	    platformSilindirTipi=0;
 8000722:	4928      	ldr	r1, [pc, #160]	@ (80007c4 <eepromKontrol+0x5a0>)
 8000724:	f04f 0200 	mov.w	r2, #0
 8000728:	f04f 0300 	mov.w	r3, #0
 800072c:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(yukariValfTmr>5) {
 8000730:	4b25      	ldr	r3, [pc, #148]	@ (80007c8 <eepromKontrol+0x5a4>)
 8000732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000736:	2a06      	cmp	r2, #6
 8000738:	f173 0300 	sbcs.w	r3, r3, #0
 800073c:	d306      	bcc.n	800074c <eepromKontrol+0x528>
	    yukariValfTmr=0;
 800073e:	4922      	ldr	r1, [pc, #136]	@ (80007c8 <eepromKontrol+0x5a4>)
 8000740:	f04f 0200 	mov.w	r2, #0
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(asagiValfTmr>5) {
 800074c:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <eepromKontrol+0x5a8>)
 800074e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000752:	2a06      	cmp	r2, #6
 8000754:	f173 0300 	sbcs.w	r3, r3, #0
 8000758:	d33a      	bcc.n	80007d0 <eepromKontrol+0x5ac>
	    asagiValfTmr=0;
 800075a:	491c      	ldr	r1, [pc, #112]	@ (80007cc <eepromKontrol+0x5a8>)
 800075c:	f04f 0200 	mov.w	r2, #0
 8000760:	f04f 0300 	mov.w	r3, #0
 8000764:	e9c1 2300 	strd	r2, r3, [r1]
 8000768:	e032      	b.n	80007d0 <eepromKontrol+0x5ac>
 800076a:	bf00      	nop
 800076c:	20000d08 	.word	0x20000d08
 8000770:	20001208 	.word	0x20001208
 8000774:	20001210 	.word	0x20001210
 8000778:	200010c0 	.word	0x200010c0
 800077c:	200010d8 	.word	0x200010d8
 8000780:	200010e0 	.word	0x200010e0
 8000784:	200010e8 	.word	0x200010e8
 8000788:	200010f0 	.word	0x200010f0
 800078c:	200010f8 	.word	0x200010f8
 8000790:	20001118 	.word	0x20001118
 8000794:	20001100 	.word	0x20001100
 8000798:	20001180 	.word	0x20001180
 800079c:	20001108 	.word	0x20001108
 80007a0:	20001188 	.word	0x20001188
 80007a4:	20001110 	.word	0x20001110
 80007a8:	20001120 	.word	0x20001120
 80007ac:	20001190 	.word	0x20001190
 80007b0:	20001128 	.word	0x20001128
 80007b4:	20001130 	.word	0x20001130
 80007b8:	20001138 	.word	0x20001138
 80007bc:	20001140 	.word	0x20001140
 80007c0:	20001148 	.word	0x20001148
 80007c4:	20001150 	.word	0x20001150
 80007c8:	20001158 	.word	0x20001158
 80007cc:	20001160 	.word	0x20001160
	}

	if(devirmeYukariIleriTmr>5) {
 80007d0:	4b3c      	ldr	r3, [pc, #240]	@ (80008c4 <eepromKontrol+0x6a0>)
 80007d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007d6:	2a06      	cmp	r2, #6
 80007d8:	f173 0300 	sbcs.w	r3, r3, #0
 80007dc:	d306      	bcc.n	80007ec <eepromKontrol+0x5c8>
	    devirmeYukariIleriTmr=0;
 80007de:	4939      	ldr	r1, [pc, #228]	@ (80008c4 <eepromKontrol+0x6a0>)
 80007e0:	f04f 0200 	mov.w	r2, #0
 80007e4:	f04f 0300 	mov.w	r3, #0
 80007e8:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(devirmeAsagiGeriTmr>5) {
 80007ec:	4b36      	ldr	r3, [pc, #216]	@ (80008c8 <eepromKontrol+0x6a4>)
 80007ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007f2:	2a06      	cmp	r2, #6
 80007f4:	f173 0300 	sbcs.w	r3, r3, #0
 80007f8:	d306      	bcc.n	8000808 <eepromKontrol+0x5e4>
	    devirmeAsagiGeriTmr=0;
 80007fa:	4933      	ldr	r1, [pc, #204]	@ (80008c8 <eepromKontrol+0x6a4>)
 80007fc:	f04f 0200 	mov.w	r2, #0
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(makineCalismaTmr>180) {
 8000808:	4b30      	ldr	r3, [pc, #192]	@ (80008cc <eepromKontrol+0x6a8>)
 800080a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800080e:	2ab5      	cmp	r2, #181	@ 0xb5
 8000810:	f173 0300 	sbcs.w	r3, r3, #0
 8000814:	d306      	bcc.n	8000824 <eepromKontrol+0x600>
	    makineCalismaTmr=60;
 8000816:	492d      	ldr	r1, [pc, #180]	@ (80008cc <eepromKontrol+0x6a8>)
 8000818:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 800081c:	f04f 0300 	mov.w	r3, #0
 8000820:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(buzzer>1) {
 8000824:	4b2a      	ldr	r3, [pc, #168]	@ (80008d0 <eepromKontrol+0x6ac>)
 8000826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800082a:	2a02      	cmp	r2, #2
 800082c:	f173 0300 	sbcs.w	r3, r3, #0
 8000830:	d306      	bcc.n	8000840 <eepromKontrol+0x61c>
	    buzzer=0;
 8000832:	4927      	ldr	r1, [pc, #156]	@ (80008d0 <eepromKontrol+0x6ac>)
 8000834:	f04f 0200 	mov.w	r2, #0
 8000838:	f04f 0300 	mov.w	r3, #0
 800083c:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(demoMode>1) {
 8000840:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <eepromKontrol+0x6b0>)
 8000842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000846:	2a02      	cmp	r2, #2
 8000848:	f173 0300 	sbcs.w	r3, r3, #0
 800084c:	d306      	bcc.n	800085c <eepromKontrol+0x638>
	    demoMode=0;
 800084e:	4921      	ldr	r1, [pc, #132]	@ (80008d4 <eepromKontrol+0x6b0>)
 8000850:	f04f 0200 	mov.w	r2, #0
 8000854:	f04f 0300 	mov.w	r3, #0
 8000858:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(calismaSayModu>1) {
 800085c:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <eepromKontrol+0x6b4>)
 800085e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000862:	2a02      	cmp	r2, #2
 8000864:	f173 0300 	sbcs.w	r3, r3, #0
 8000868:	d306      	bcc.n	8000878 <eepromKontrol+0x654>
	    calismaSayModu=0;
 800086a:	491b      	ldr	r1, [pc, #108]	@ (80008d8 <eepromKontrol+0x6b4>)
 800086c:	f04f 0200 	mov.w	r2, #0
 8000870:	f04f 0300 	mov.w	r3, #0
 8000874:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(dilSecim>1) {
 8000878:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <eepromKontrol+0x6b8>)
 800087a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800087e:	2a02      	cmp	r2, #2
 8000880:	f173 0300 	sbcs.w	r3, r3, #0
 8000884:	d306      	bcc.n	8000894 <eepromKontrol+0x670>
	    dilSecim=0;
 8000886:	4915      	ldr	r1, [pc, #84]	@ (80008dc <eepromKontrol+0x6b8>)
 8000888:	f04f 0200 	mov.w	r2, #0
 800088c:	f04f 0300 	mov.w	r3, #0
 8000890:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(iotMode>1) {
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <eepromKontrol+0x6bc>)
 8000896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800089a:	2a02      	cmp	r2, #2
 800089c:	f173 0300 	sbcs.w	r3, r3, #0
 80008a0:	d306      	bcc.n	80008b0 <eepromKontrol+0x68c>
		iotMode=0;
 80008a2:	490f      	ldr	r1, [pc, #60]	@ (80008e0 <eepromKontrol+0x6bc>)
 80008a4:	f04f 0200 	mov.w	r2, #0
 80008a8:	f04f 0300 	mov.w	r3, #0
 80008ac:	e9c1 2300 	strd	r2, r3, [r1]
	}

	loadMenuTexts(dilSecim);
 80008b0:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <eepromKontrol+0x6b8>)
 80008b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008b6:	b2d3      	uxtb	r3, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f007 fac1 	bl	8007e40 <loadMenuTexts>
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20001168 	.word	0x20001168
 80008c8:	20001170 	.word	0x20001170
 80008cc:	20001178 	.word	0x20001178
 80008d0:	20001198 	.word	0x20001198
 80008d4:	200011a8 	.word	0x200011a8
 80008d8:	200011b8 	.word	0x200011b8
 80008dc:	200011c0 	.word	0x200011c0
 80008e0:	200011b0 	.word	0x200011b0

080008e4 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 80008e4:	b5b0      	push	{r4, r5, r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af04      	add	r7, sp, #16
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80008ee:	4b2c      	ldr	r3, [pc, #176]	@ (80009a0 <hata2EEPROM+0xbc>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	1e5a      	subs	r2, r3, #1
 80008f4:	4b2b      	ldr	r3, [pc, #172]	@ (80009a4 <hata2EEPROM+0xc0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4413      	add	r3, r2
 80008fa:	4a2b      	ldr	r2, [pc, #172]	@ (80009a8 <hata2EEPROM+0xc4>)
 80008fc:	00db      	lsls	r3, r3, #3
 80008fe:	4413      	add	r3, r2
 8000900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000904:	4313      	orrs	r3, r2
 8000906:	d002      	beq.n	800090e <hata2EEPROM+0x2a>
		eepromDataFillWithEmpty();
 8000908:	f000 f8dc 	bl	8000ac4 <eepromDataFillWithEmpty>
		goto veriEkleme;
 800090c:	e000      	b.n	8000910 <hata2EEPROM+0x2c>
	} else {
		veriEkleme:
 800090e:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	e01b      	b.n	800094e <hata2EEPROM+0x6a>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000916:	4b23      	ldr	r3, [pc, #140]	@ (80009a4 <hata2EEPROM+0xc0>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	4a22      	ldr	r2, [pc, #136]	@ (80009a8 <hata2EEPROM+0xc4>)
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	4413      	add	r3, r2
 8000924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000928:	4313      	orrs	r3, r2
 800092a:	d10d      	bne.n	8000948 <hata2EEPROM+0x64>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 800092c:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <hata2EEPROM+0xc0>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4413      	add	r3, r2
 8000934:	79fa      	ldrb	r2, [r7, #7]
 8000936:	2100      	movs	r1, #0
 8000938:	4614      	mov	r4, r2
 800093a:	460d      	mov	r5, r1
 800093c:	4a1a      	ldr	r2, [pc, #104]	@ (80009a8 <hata2EEPROM+0xc4>)
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	4413      	add	r3, r2
 8000942:	e9c3 4500 	strd	r4, r5, [r3]
					break;
 8000946:	e007      	b.n	8000958 <hata2EEPROM+0x74>
			for(int i=0; i<indeksSayisi; i++) {
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	3301      	adds	r3, #1
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <hata2EEPROM+0xbc>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	429a      	cmp	r2, r3
 8000956:	dbde      	blt.n	8000916 <hata2EEPROM+0x32>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <hata2EEPROM+0xc0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	b299      	uxth	r1, r3
 800095e:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <hata2EEPROM+0xbc>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	b298      	uxth	r0, r3
 8000964:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <hata2EEPROM+0xc0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	4a0f      	ldr	r2, [pc, #60]	@ (80009a8 <hata2EEPROM+0xc4>)
 800096c:	4413      	add	r3, r2
 800096e:	4a0c      	ldr	r2, [pc, #48]	@ (80009a0 <hata2EEPROM+0xbc>)
 8000970:	6812      	ldr	r2, [r2, #0]
 8000972:	b292      	uxth	r2, r2
 8000974:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8000978:	9402      	str	r4, [sp, #8]
 800097a:	9201      	str	r2, [sp, #4]
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	4603      	mov	r3, r0
 8000980:	460a      	mov	r2, r1
 8000982:	21a0      	movs	r1, #160	@ 0xa0
 8000984:	4809      	ldr	r0, [pc, #36]	@ (80009ac <hata2EEPROM+0xc8>)
 8000986:	f00a fa33 	bl	800adf0 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 800098a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800098e:	f009 fae7 	bl	8009f60 <HAL_Delay>
	eepromKontrol();
 8000992:	f7ff fc47 	bl	8000224 <eepromKontrol>
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bdb0      	pop	{r4, r5, r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000028 	.word	0x20000028
 80009a4:	2000002c 	.word	0x2000002c
 80009a8:	20000d08 	.word	0x20000d08
 80009ac:	20001858 	.word	0x20001858

080009b0 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d10f      	bne.n	80009e0 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 80009c0:	4a38      	ldr	r2, [pc, #224]	@ (8000aa4 <hataKoduLcdGoster+0xf4>)
 80009c2:	2101      	movs	r1, #1
 80009c4:	2001      	movs	r0, #1
 80009c6:	f008 fdfe 	bl	80095c6 <lcd_print>
		lcd_print(2, 1, "1");
 80009ca:	4a37      	ldr	r2, [pc, #220]	@ (8000aa8 <hataKoduLcdGoster+0xf8>)
 80009cc:	2101      	movs	r1, #1
 80009ce:	2002      	movs	r0, #2
 80009d0:	f008 fdf9 	bl	80095c6 <lcd_print>
		lcd_print(2, 7, "          ");
 80009d4:	4a35      	ldr	r2, [pc, #212]	@ (8000aac <hataKoduLcdGoster+0xfc>)
 80009d6:	2107      	movs	r1, #7
 80009d8:	2002      	movs	r0, #2
 80009da:	f008 fdf4 	bl	80095c6 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80009de:	e05d      	b.n	8000a9c <hataKoduLcdGoster+0xec>
	} else if(x==2){
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d10f      	bne.n	8000a06 <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 80009e6:	4a2f      	ldr	r2, [pc, #188]	@ (8000aa4 <hataKoduLcdGoster+0xf4>)
 80009e8:	2101      	movs	r1, #1
 80009ea:	2001      	movs	r0, #1
 80009ec:	f008 fdeb 	bl	80095c6 <lcd_print>
		lcd_print(2, 2, "2");
 80009f0:	4a2f      	ldr	r2, [pc, #188]	@ (8000ab0 <hataKoduLcdGoster+0x100>)
 80009f2:	2102      	movs	r1, #2
 80009f4:	2002      	movs	r0, #2
 80009f6:	f008 fde6 	bl	80095c6 <lcd_print>
		lcd_print(2, 7, "          ");
 80009fa:	4a2c      	ldr	r2, [pc, #176]	@ (8000aac <hataKoduLcdGoster+0xfc>)
 80009fc:	2107      	movs	r1, #7
 80009fe:	2002      	movs	r0, #2
 8000a00:	f008 fde1 	bl	80095c6 <lcd_print>
}
 8000a04:	e04a      	b.n	8000a9c <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b03      	cmp	r3, #3
 8000a0a:	d10f      	bne.n	8000a2c <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000a0c:	4a25      	ldr	r2, [pc, #148]	@ (8000aa4 <hataKoduLcdGoster+0xf4>)
 8000a0e:	2101      	movs	r1, #1
 8000a10:	2001      	movs	r0, #1
 8000a12:	f008 fdd8 	bl	80095c6 <lcd_print>
		lcd_print(2, 3, "3");
 8000a16:	4a27      	ldr	r2, [pc, #156]	@ (8000ab4 <hataKoduLcdGoster+0x104>)
 8000a18:	2103      	movs	r1, #3
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f008 fdd3 	bl	80095c6 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a20:	4a22      	ldr	r2, [pc, #136]	@ (8000aac <hataKoduLcdGoster+0xfc>)
 8000a22:	2107      	movs	r1, #7
 8000a24:	2002      	movs	r0, #2
 8000a26:	f008 fdce 	bl	80095c6 <lcd_print>
}
 8000a2a:	e037      	b.n	8000a9c <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	d10f      	bne.n	8000a52 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000a32:	4a1c      	ldr	r2, [pc, #112]	@ (8000aa4 <hataKoduLcdGoster+0xf4>)
 8000a34:	2101      	movs	r1, #1
 8000a36:	2001      	movs	r0, #1
 8000a38:	f008 fdc5 	bl	80095c6 <lcd_print>
		lcd_print(2, 4, "4");
 8000a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ab8 <hataKoduLcdGoster+0x108>)
 8000a3e:	2104      	movs	r1, #4
 8000a40:	2002      	movs	r0, #2
 8000a42:	f008 fdc0 	bl	80095c6 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a46:	4a19      	ldr	r2, [pc, #100]	@ (8000aac <hataKoduLcdGoster+0xfc>)
 8000a48:	2107      	movs	r1, #7
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	f008 fdbb 	bl	80095c6 <lcd_print>
}
 8000a50:	e024      	b.n	8000a9c <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b05      	cmp	r3, #5
 8000a56:	d10f      	bne.n	8000a78 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000a58:	4a12      	ldr	r2, [pc, #72]	@ (8000aa4 <hataKoduLcdGoster+0xf4>)
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f008 fdb2 	bl	80095c6 <lcd_print>
		lcd_print(2, 5, "5");
 8000a62:	4a16      	ldr	r2, [pc, #88]	@ (8000abc <hataKoduLcdGoster+0x10c>)
 8000a64:	2105      	movs	r1, #5
 8000a66:	2002      	movs	r0, #2
 8000a68:	f008 fdad 	bl	80095c6 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000aac <hataKoduLcdGoster+0xfc>)
 8000a6e:	2107      	movs	r1, #7
 8000a70:	2002      	movs	r0, #2
 8000a72:	f008 fda8 	bl	80095c6 <lcd_print>
}
 8000a76:	e011      	b.n	8000a9c <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d10e      	bne.n	8000a9c <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000a7e:	4a09      	ldr	r2, [pc, #36]	@ (8000aa4 <hataKoduLcdGoster+0xf4>)
 8000a80:	2101      	movs	r1, #1
 8000a82:	2001      	movs	r0, #1
 8000a84:	f008 fd9f 	bl	80095c6 <lcd_print>
		lcd_print(2, 6, "6");
 8000a88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac0 <hataKoduLcdGoster+0x110>)
 8000a8a:	2106      	movs	r1, #6
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f008 fd9a 	bl	80095c6 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a92:	4a06      	ldr	r2, [pc, #24]	@ (8000aac <hataKoduLcdGoster+0xfc>)
 8000a94:	2107      	movs	r1, #7
 8000a96:	2002      	movs	r0, #2
 8000a98:	f008 fd95 	bl	80095c6 <lcd_print>
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000181c 	.word	0x2000181c
 8000aa8:	0800d0b8 	.word	0x0800d0b8
 8000aac:	0800d0bc 	.word	0x0800d0bc
 8000ab0:	0800d0c8 	.word	0x0800d0c8
 8000ab4:	0800d0cc 	.word	0x0800d0cc
 8000ab8:	0800d0d0 	.word	0x0800d0d0
 8000abc:	0800d0d4 	.word	0x0800d0d4
 8000ac0:	0800d0d8 	.word	0x0800d0d8

08000ac4 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	e00f      	b.n	8000af0 <eepromDataFillWithEmpty+0x2c>
		eepromData[eepromVal[i]] = 0;
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b08 <eepromDataFillWithEmpty+0x44>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8000b0c <eepromDataFillWithEmpty+0x48>)
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	18d1      	adds	r1, r2, r3
 8000ade:	f04f 0200 	mov.w	r2, #0
 8000ae2:	f04f 0300 	mov.w	r3, #0
 8000ae6:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i=0; i<indeksSayisi; i++) {
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3301      	adds	r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <eepromDataFillWithEmpty+0x4c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	dbea      	blt.n	8000ad0 <eepromDataFillWithEmpty+0xc>
	}
}
 8000afa:	bf00      	nop
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000d08 	.word	0x20000d08
 8000b10:	20000028 	.word	0x20000028

08000b14 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000b26:	4b50      	ldr	r3, [pc, #320]	@ (8000c68 <i2cTest+0x154>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b4e      	ldr	r3, [pc, #312]	@ (8000c68 <i2cTest+0x154>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f022 0201 	bic.w	r2, r2, #1
 8000b34:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000b36:	484c      	ldr	r0, [pc, #304]	@ (8000c68 <i2cTest+0x154>)
 8000b38:	f00a f82c 	bl	800ab94 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b3c:	23c0      	movs	r3, #192	@ 0xc0
 8000b3e:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000b40:	2311      	movs	r3, #17
 8000b42:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4846      	ldr	r0, [pc, #280]	@ (8000c6c <i2cTest+0x158>)
 8000b52:	f009 fc33 	bl	800a3bc <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2140      	movs	r1, #64	@ 0x40
 8000b5a:	4844      	ldr	r0, [pc, #272]	@ (8000c6c <i2cTest+0x158>)
 8000b5c:	f009 fea5 	bl	800a8aa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2180      	movs	r1, #128	@ 0x80
 8000b64:	4841      	ldr	r0, [pc, #260]	@ (8000c6c <i2cTest+0x158>)
 8000b66:	f009 fea0 	bl	800a8aa <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000b6a:	200a      	movs	r0, #10
 8000b6c:	f009 f9f8 	bl	8009f60 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000b70:	bf00      	nop
 8000b72:	2140      	movs	r1, #64	@ 0x40
 8000b74:	483d      	ldr	r0, [pc, #244]	@ (8000c6c <i2cTest+0x158>)
 8000b76:	f009 fe81 	bl	800a87c <HAL_GPIO_ReadPin>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d006      	beq.n	8000b8e <i2cTest+0x7a>
 8000b80:	2180      	movs	r1, #128	@ 0x80
 8000b82:	483a      	ldr	r0, [pc, #232]	@ (8000c6c <i2cTest+0x158>)
 8000b84:	f009 fe7a 	bl	800a87c <HAL_GPIO_ReadPin>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d1f1      	bne.n	8000b72 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2180      	movs	r1, #128	@ 0x80
 8000b92:	4836      	ldr	r0, [pc, #216]	@ (8000c6c <i2cTest+0x158>)
 8000b94:	f009 fe89 	bl	800a8aa <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000b98:	200a      	movs	r0, #10
 8000b9a:	f009 f9e1 	bl	8009f60 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000b9e:	bf00      	nop
 8000ba0:	2180      	movs	r1, #128	@ 0x80
 8000ba2:	4832      	ldr	r0, [pc, #200]	@ (8000c6c <i2cTest+0x158>)
 8000ba4:	f009 fe6a 	bl	800a87c <HAL_GPIO_ReadPin>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d0f8      	beq.n	8000ba0 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2140      	movs	r1, #64	@ 0x40
 8000bb2:	482e      	ldr	r0, [pc, #184]	@ (8000c6c <i2cTest+0x158>)
 8000bb4:	f009 fe79 	bl	800a8aa <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000bb8:	200a      	movs	r0, #10
 8000bba:	f009 f9d1 	bl	8009f60 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000bbe:	bf00      	nop
 8000bc0:	2140      	movs	r1, #64	@ 0x40
 8000bc2:	482a      	ldr	r0, [pc, #168]	@ (8000c6c <i2cTest+0x158>)
 8000bc4:	f009 fe5a 	bl	800a87c <HAL_GPIO_ReadPin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d0f8      	beq.n	8000bc0 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2140      	movs	r1, #64	@ 0x40
 8000bd2:	4826      	ldr	r0, [pc, #152]	@ (8000c6c <i2cTest+0x158>)
 8000bd4:	f009 fe69 	bl	800a8aa <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000bd8:	200a      	movs	r0, #10
 8000bda:	f009 f9c1 	bl	8009f60 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000bde:	bf00      	nop
 8000be0:	2140      	movs	r1, #64	@ 0x40
 8000be2:	4822      	ldr	r0, [pc, #136]	@ (8000c6c <i2cTest+0x158>)
 8000be4:	f009 fe4a 	bl	800a87c <HAL_GPIO_ReadPin>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d1f8      	bne.n	8000be0 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2180      	movs	r1, #128	@ 0x80
 8000bf2:	481e      	ldr	r0, [pc, #120]	@ (8000c6c <i2cTest+0x158>)
 8000bf4:	f009 fe59 	bl	800a8aa <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000bf8:	200a      	movs	r0, #10
 8000bfa:	f009 f9b1 	bl	8009f60 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000bfe:	bf00      	nop
 8000c00:	2180      	movs	r1, #128	@ 0x80
 8000c02:	481a      	ldr	r0, [pc, #104]	@ (8000c6c <i2cTest+0x158>)
 8000c04:	f009 fe3a 	bl	800a87c <HAL_GPIO_ReadPin>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d1f8      	bne.n	8000c00 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c0e:	23c0      	movs	r3, #192	@ 0xc0
 8000c10:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000c12:	2312      	movs	r3, #18
 8000c14:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c1e:	463b      	mov	r3, r7
 8000c20:	4619      	mov	r1, r3
 8000c22:	4812      	ldr	r0, [pc, #72]	@ (8000c6c <i2cTest+0x158>)
 8000c24:	f009 fbca 	bl	800a3bc <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <i2cTest+0x154>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <i2cTest+0x154>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000c36:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000c38:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <i2cTest+0x154>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <i2cTest+0x154>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000c46:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000c48:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <i2cTest+0x154>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <i2cTest+0x154>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f042 0201 	orr.w	r2, r2, #1
 8000c56:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000c58:	4803      	ldr	r0, [pc, #12]	@ (8000c68 <i2cTest+0x154>)
 8000c5a:	f009 fe57 	bl	800a90c <HAL_I2C_Init>
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20001858 	.word	0x20001858
 8000c6c:	40010c00 	.word	0x40010c00

08000c70 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c74:	f3bf 8f4f 	dsb	sy
}
 8000c78:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <__NVIC_SystemReset+0x24>)
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c82:	4904      	ldr	r1, [pc, #16]	@ (8000c94 <__NVIC_SystemReset+0x24>)
 8000c84:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <__NVIC_SystemReset+0x28>)
 8000c86:	4313      	orrs	r3, r2
 8000c88:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c8a:	f3bf 8f4f 	dsb	sy
}
 8000c8e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <__NVIC_SystemReset+0x20>
 8000c94:	e000ed00 	.word	0xe000ed00
 8000c98:	05fa0004 	.word	0x05fa0004

08000c9c <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 8000c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ca0:	b0fa      	sub	sp, #488	@ 0x1e8
 8000ca2:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	489b      	ldr	r0, [pc, #620]	@ (8000f14 <menu+0x278>)
 8000ca8:	f009 fde8 	bl	800a87c <HAL_GPIO_ReadPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	f040 80f0 	bne.w	8000e94 <menu+0x1f8>
 8000cb4:	4b98      	ldr	r3, [pc, #608]	@ (8000f18 <menu+0x27c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	f083 0301 	eor.w	r3, r3, #1
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f000 80e8 	beq.w	8000e94 <menu+0x1f8>
		menuSayac = menuSayac+1;
 8000cc4:	4b95      	ldr	r3, [pc, #596]	@ (8000f1c <menu+0x280>)
 8000cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cca:	1c54      	adds	r4, r2, #1
 8000ccc:	f143 0500 	adc.w	r5, r3, #0
 8000cd0:	4b92      	ldr	r3, [pc, #584]	@ (8000f1c <menu+0x280>)
 8000cd2:	e9c3 4500 	strd	r4, r5, [r3]
		if (menuSayac == 32) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8000cd6:	4b91      	ldr	r3, [pc, #580]	@ (8000f1c <menu+0x280>)
 8000cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cdc:	f1a2 0120 	sub.w	r1, r2, #32
 8000ce0:	430b      	orrs	r3, r1
 8000ce2:	d106      	bne.n	8000cf2 <menu+0x56>
			menuSayac = 1;
 8000ce4:	498d      	ldr	r1, [pc, #564]	@ (8000f1c <menu+0x280>)
 8000ce6:	f04f 0201 	mov.w	r2, #1
 8000cea:	f04f 0300 	mov.w	r3, #0
 8000cee:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8000cf2:	4b8a      	ldr	r3, [pc, #552]	@ (8000f1c <menu+0x280>)
 8000cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf8:	f1a2 0112 	sub.w	r1, r2, #18
 8000cfc:	430b      	orrs	r3, r1
 8000cfe:	d10b      	bne.n	8000d18 <menu+0x7c>
 8000d00:	4b87      	ldr	r3, [pc, #540]	@ (8000f20 <menu+0x284>)
 8000d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	d106      	bne.n	8000d18 <menu+0x7c>
			menuSayac = 21;
 8000d0a:	4984      	ldr	r1, [pc, #528]	@ (8000f1c <menu+0x280>)
 8000d0c:	f04f 0215 	mov.w	r2, #21
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8000d18:	4b80      	ldr	r3, [pc, #512]	@ (8000f1c <menu+0x280>)
 8000d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1e:	f1a2 0108 	sub.w	r1, r2, #8
 8000d22:	430b      	orrs	r3, r1
 8000d24:	d10b      	bne.n	8000d3e <menu+0xa2>
 8000d26:	4b7f      	ldr	r3, [pc, #508]	@ (8000f24 <menu+0x288>)
 8000d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	d106      	bne.n	8000d3e <menu+0xa2>
			menuSayac = 16;
 8000d30:	497a      	ldr	r1, [pc, #488]	@ (8000f1c <menu+0x280>)
 8000d32:	f04f 0210 	mov.w	r2, #16
 8000d36:	f04f 0300 	mov.w	r3, #0
 8000d3a:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8000d3e:	4b77      	ldr	r3, [pc, #476]	@ (8000f1c <menu+0x280>)
 8000d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d44:	f1a2 010d 	sub.w	r1, r2, #13
 8000d48:	430b      	orrs	r3, r1
 8000d4a:	d10c      	bne.n	8000d66 <menu+0xca>
 8000d4c:	4b75      	ldr	r3, [pc, #468]	@ (8000f24 <menu+0x288>)
 8000d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d52:	1e51      	subs	r1, r2, #1
 8000d54:	430b      	orrs	r3, r1
 8000d56:	d106      	bne.n	8000d66 <menu+0xca>
			menuSayac = 16;
 8000d58:	4970      	ldr	r1, [pc, #448]	@ (8000f1c <menu+0x280>)
 8000d5a:	f04f 0210 	mov.w	r2, #16
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000d66:	4b6d      	ldr	r3, [pc, #436]	@ (8000f1c <menu+0x280>)
 8000d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6c:	f1a2 0109 	sub.w	r1, r2, #9
 8000d70:	430b      	orrs	r3, r1
 8000d72:	d10c      	bne.n	8000d8e <menu+0xf2>
 8000d74:	4b6b      	ldr	r3, [pc, #428]	@ (8000f24 <menu+0x288>)
 8000d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7a:	1e91      	subs	r1, r2, #2
 8000d7c:	430b      	orrs	r3, r1
 8000d7e:	d106      	bne.n	8000d8e <menu+0xf2>
			menuSayac = 13;
 8000d80:	4966      	ldr	r1, [pc, #408]	@ (8000f1c <menu+0x280>)
 8000d82:	f04f 020d 	mov.w	r2, #13
 8000d86:	f04f 0300 	mov.w	r3, #0
 8000d8a:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000d8e:	4b63      	ldr	r3, [pc, #396]	@ (8000f1c <menu+0x280>)
 8000d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d94:	f1a2 010a 	sub.w	r1, r2, #10
 8000d98:	430b      	orrs	r3, r1
 8000d9a:	d112      	bne.n	8000dc2 <menu+0x126>
 8000d9c:	4b62      	ldr	r3, [pc, #392]	@ (8000f28 <menu+0x28c>)
 8000d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da2:	1e51      	subs	r1, r2, #1
 8000da4:	430b      	orrs	r3, r1
 8000da6:	d005      	beq.n	8000db4 <menu+0x118>
 8000da8:	4b5f      	ldr	r3, [pc, #380]	@ (8000f28 <menu+0x28c>)
 8000daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dae:	1e91      	subs	r1, r2, #2
 8000db0:	430b      	orrs	r3, r1
 8000db2:	d106      	bne.n	8000dc2 <menu+0x126>
			menuSayac = 11;
 8000db4:	4959      	ldr	r1, [pc, #356]	@ (8000f1c <menu+0x280>)
 8000db6:	f04f 020b 	mov.w	r2, #11
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8000dc2:	4b56      	ldr	r3, [pc, #344]	@ (8000f1c <menu+0x280>)
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	f1a2 010c 	sub.w	r1, r2, #12
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	d118      	bne.n	8000e02 <menu+0x166>
 8000dd0:	4b56      	ldr	r3, [pc, #344]	@ (8000f2c <menu+0x290>)
 8000dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd6:	1e51      	subs	r1, r2, #1
 8000dd8:	430b      	orrs	r3, r1
 8000dda:	d005      	beq.n	8000de8 <menu+0x14c>
 8000ddc:	4b53      	ldr	r3, [pc, #332]	@ (8000f2c <menu+0x290>)
 8000dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de2:	1e91      	subs	r1, r2, #2
 8000de4:	430b      	orrs	r3, r1
 8000de6:	d10c      	bne.n	8000e02 <menu+0x166>
 8000de8:	4b4e      	ldr	r3, [pc, #312]	@ (8000f24 <menu+0x288>)
 8000dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dee:	1e51      	subs	r1, r2, #1
 8000df0:	430b      	orrs	r3, r1
 8000df2:	d106      	bne.n	8000e02 <menu+0x166>
			menuSayac = 16;
 8000df4:	4949      	ldr	r1, [pc, #292]	@ (8000f1c <menu+0x280>)
 8000df6:	f04f 0210 	mov.w	r2, #16
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8000e02:	4b46      	ldr	r3, [pc, #280]	@ (8000f1c <menu+0x280>)
 8000e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e08:	f1a2 010c 	sub.w	r1, r2, #12
 8000e0c:	430b      	orrs	r3, r1
 8000e0e:	d118      	bne.n	8000e42 <menu+0x1a6>
 8000e10:	4b46      	ldr	r3, [pc, #280]	@ (8000f2c <menu+0x290>)
 8000e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e16:	1e51      	subs	r1, r2, #1
 8000e18:	430b      	orrs	r3, r1
 8000e1a:	d005      	beq.n	8000e28 <menu+0x18c>
 8000e1c:	4b43      	ldr	r3, [pc, #268]	@ (8000f2c <menu+0x290>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	1e91      	subs	r1, r2, #2
 8000e24:	430b      	orrs	r3, r1
 8000e26:	d10c      	bne.n	8000e42 <menu+0x1a6>
 8000e28:	4b3e      	ldr	r3, [pc, #248]	@ (8000f24 <menu+0x288>)
 8000e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2e:	1ed1      	subs	r1, r2, #3
 8000e30:	430b      	orrs	r3, r1
 8000e32:	d106      	bne.n	8000e42 <menu+0x1a6>
			menuSayac = 13;
 8000e34:	4939      	ldr	r1, [pc, #228]	@ (8000f1c <menu+0x280>)
 8000e36:	f04f 020d 	mov.w	r2, #13
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000e42:	4b36      	ldr	r3, [pc, #216]	@ (8000f1c <menu+0x280>)
 8000e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e48:	f1a2 010f 	sub.w	r1, r2, #15
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	d10c      	bne.n	8000e6a <menu+0x1ce>
 8000e50:	4b37      	ldr	r3, [pc, #220]	@ (8000f30 <menu+0x294>)
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	1e51      	subs	r1, r2, #1
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	d106      	bne.n	8000e6a <menu+0x1ce>
			menuSayac = 16;
 8000e5c:	492f      	ldr	r1, [pc, #188]	@ (8000f1c <menu+0x280>)
 8000e5e:	f04f 0210 	mov.w	r2, #16
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f1c <menu+0x280>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	f1a2 0118 	sub.w	r1, r2, #24
 8000e74:	430b      	orrs	r3, r1
 8000e76:	d10b      	bne.n	8000e90 <menu+0x1f4>
 8000e78:	4b29      	ldr	r3, [pc, #164]	@ (8000f20 <menu+0x284>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	d106      	bne.n	8000e90 <menu+0x1f4>
			menuSayac = 26;
 8000e82:	4926      	ldr	r1, [pc, #152]	@ (8000f1c <menu+0x280>)
 8000e84:	f04f 021a 	mov.w	r2, #26
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	e9c1 2300 	strd	r2, r3, [r1]
		}

		bekle();
 8000e90:	f003 f932 	bl	80040f8 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000e94:	2108      	movs	r1, #8
 8000e96:	4827      	ldr	r0, [pc, #156]	@ (8000f34 <menu+0x298>)
 8000e98:	f009 fcf0 	bl	800a87c <HAL_GPIO_ReadPin>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	f040 80df 	bne.w	8001062 <menu+0x3c6>
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f18 <menu+0x27c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	f083 0301 	eor.w	r3, r3, #1
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 80d7 	beq.w	8001062 <menu+0x3c6>
		if (menuSayac <= 1) {
 8000eb4:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <menu+0x280>)
 8000eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eba:	2a02      	cmp	r2, #2
 8000ebc:	f173 0300 	sbcs.w	r3, r3, #0
 8000ec0:	d206      	bcs.n	8000ed0 <menu+0x234>
			menuSayac = 31;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8000ec2:	4916      	ldr	r1, [pc, #88]	@ (8000f1c <menu+0x280>)
 8000ec4:	f04f 021f 	mov.w	r2, #31
 8000ec8:	f04f 0300 	mov.w	r3, #0
 8000ecc:	e9c1 2300 	strd	r2, r3, [r1]
		}

		menuSayac = menuSayac - 1;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <menu+0x280>)
 8000ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed6:	f112 38ff 	adds.w	r8, r2, #4294967295	@ 0xffffffff
 8000eda:	f143 39ff 	adc.w	r9, r3, #4294967295	@ 0xffffffff
 8000ede:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <menu+0x280>)
 8000ee0:	e9c3 8900 	strd	r8, r9, [r3]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f1c <menu+0x280>)
 8000ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eea:	f1a2 0114 	sub.w	r1, r2, #20
 8000eee:	430b      	orrs	r3, r1
 8000ef0:	d10b      	bne.n	8000f0a <menu+0x26e>
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <menu+0x284>)
 8000ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	d106      	bne.n	8000f0a <menu+0x26e>
			menuSayac = 17;
 8000efc:	4907      	ldr	r1, [pc, #28]	@ (8000f1c <menu+0x280>)
 8000efe:	f04f 0211 	mov.w	r2, #17
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8000f0a:	4b04      	ldr	r3, [pc, #16]	@ (8000f1c <menu+0x280>)
 8000f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f10:	e012      	b.n	8000f38 <menu+0x29c>
 8000f12:	bf00      	nop
 8000f14:	40010800 	.word	0x40010800
 8000f18:	2000121b 	.word	0x2000121b
 8000f1c:	200010b8 	.word	0x200010b8
 8000f20:	20001130 	.word	0x20001130
 8000f24:	200010f8 	.word	0x200010f8
 8000f28:	20001100 	.word	0x20001100
 8000f2c:	20001108 	.word	0x20001108
 8000f30:	20001110 	.word	0x20001110
 8000f34:	40011000 	.word	0x40011000
 8000f38:	f1a2 010f 	sub.w	r1, r2, #15
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	d10b      	bne.n	8000f58 <menu+0x2bc>
 8000f40:	4ba6      	ldr	r3, [pc, #664]	@ (80011dc <menu+0x540>)
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	d106      	bne.n	8000f58 <menu+0x2bc>
			menuSayac = 7;
 8000f4a:	49a5      	ldr	r1, [pc, #660]	@ (80011e0 <menu+0x544>)
 8000f4c:	f04f 0207 	mov.w	r2, #7
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8000f58:	4ba1      	ldr	r3, [pc, #644]	@ (80011e0 <menu+0x544>)
 8000f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5e:	f1a2 010f 	sub.w	r1, r2, #15
 8000f62:	430b      	orrs	r3, r1
 8000f64:	d10c      	bne.n	8000f80 <menu+0x2e4>
 8000f66:	4b9d      	ldr	r3, [pc, #628]	@ (80011dc <menu+0x540>)
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	1e51      	subs	r1, r2, #1
 8000f6e:	430b      	orrs	r3, r1
 8000f70:	d106      	bne.n	8000f80 <menu+0x2e4>
			menuSayac = 12;
 8000f72:	499b      	ldr	r1, [pc, #620]	@ (80011e0 <menu+0x544>)
 8000f74:	f04f 020c 	mov.w	r2, #12
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8000f80:	4b97      	ldr	r3, [pc, #604]	@ (80011e0 <menu+0x544>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	f1a2 010c 	sub.w	r1, r2, #12
 8000f8a:	430b      	orrs	r3, r1
 8000f8c:	d10c      	bne.n	8000fa8 <menu+0x30c>
 8000f8e:	4b93      	ldr	r3, [pc, #588]	@ (80011dc <menu+0x540>)
 8000f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f94:	1e91      	subs	r1, r2, #2
 8000f96:	430b      	orrs	r3, r1
 8000f98:	d106      	bne.n	8000fa8 <menu+0x30c>
			menuSayac = 8;
 8000f9a:	4991      	ldr	r1, [pc, #580]	@ (80011e0 <menu+0x544>)
 8000f9c:	f04f 0208 	mov.w	r2, #8
 8000fa0:	f04f 0300 	mov.w	r3, #0
 8000fa4:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000fa8:	4b8d      	ldr	r3, [pc, #564]	@ (80011e0 <menu+0x544>)
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fae:	f1a2 010a 	sub.w	r1, r2, #10
 8000fb2:	430b      	orrs	r3, r1
 8000fb4:	d112      	bne.n	8000fdc <menu+0x340>
 8000fb6:	4b8b      	ldr	r3, [pc, #556]	@ (80011e4 <menu+0x548>)
 8000fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbc:	1e51      	subs	r1, r2, #1
 8000fbe:	430b      	orrs	r3, r1
 8000fc0:	d005      	beq.n	8000fce <menu+0x332>
 8000fc2:	4b88      	ldr	r3, [pc, #544]	@ (80011e4 <menu+0x548>)
 8000fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc8:	1e91      	subs	r1, r2, #2
 8000fca:	430b      	orrs	r3, r1
 8000fcc:	d106      	bne.n	8000fdc <menu+0x340>
			menuSayac = 9;
 8000fce:	4984      	ldr	r1, [pc, #528]	@ (80011e0 <menu+0x544>)
 8000fd0:	f04f 0209 	mov.w	r2, #9
 8000fd4:	f04f 0300 	mov.w	r3, #0
 8000fd8:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8000fdc:	4b80      	ldr	r3, [pc, #512]	@ (80011e0 <menu+0x544>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f1a2 010c 	sub.w	r1, r2, #12
 8000fe6:	430b      	orrs	r3, r1
 8000fe8:	d112      	bne.n	8001010 <menu+0x374>
 8000fea:	4b7f      	ldr	r3, [pc, #508]	@ (80011e8 <menu+0x54c>)
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	1e51      	subs	r1, r2, #1
 8000ff2:	430b      	orrs	r3, r1
 8000ff4:	d005      	beq.n	8001002 <menu+0x366>
 8000ff6:	4b7c      	ldr	r3, [pc, #496]	@ (80011e8 <menu+0x54c>)
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	1e91      	subs	r1, r2, #2
 8000ffe:	430b      	orrs	r3, r1
 8001000:	d106      	bne.n	8001010 <menu+0x374>
			menuSayac = 11;
 8001002:	4977      	ldr	r1, [pc, #476]	@ (80011e0 <menu+0x544>)
 8001004:	f04f 020b 	mov.w	r2, #11
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001010:	4b73      	ldr	r3, [pc, #460]	@ (80011e0 <menu+0x544>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	f1a2 010f 	sub.w	r1, r2, #15
 800101a:	430b      	orrs	r3, r1
 800101c:	d10c      	bne.n	8001038 <menu+0x39c>
 800101e:	4b73      	ldr	r3, [pc, #460]	@ (80011ec <menu+0x550>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	1e51      	subs	r1, r2, #1
 8001026:	430b      	orrs	r3, r1
 8001028:	d106      	bne.n	8001038 <menu+0x39c>
			menuSayac = 14;
 800102a:	496d      	ldr	r1, [pc, #436]	@ (80011e0 <menu+0x544>)
 800102c:	f04f 020e 	mov.w	r2, #14
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001038:	4b69      	ldr	r3, [pc, #420]	@ (80011e0 <menu+0x544>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	f1a2 0119 	sub.w	r1, r2, #25
 8001042:	430b      	orrs	r3, r1
 8001044:	d10b      	bne.n	800105e <menu+0x3c2>
 8001046:	4b6a      	ldr	r3, [pc, #424]	@ (80011f0 <menu+0x554>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	4313      	orrs	r3, r2
 800104e:	d106      	bne.n	800105e <menu+0x3c2>
			menuSayac = 23;
 8001050:	4963      	ldr	r1, [pc, #396]	@ (80011e0 <menu+0x544>)
 8001052:	f04f 0217 	mov.w	r2, #23
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	e9c1 2300 	strd	r2, r3, [r1]
		}

		bekle();
 800105e:	f003 f84b 	bl	80040f8 <bekle>
	}

	if (menuSayac == 0) {
 8001062:	4b5f      	ldr	r3, [pc, #380]	@ (80011e0 <menu+0x544>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	4313      	orrs	r3, r2
 800106a:	d109      	bne.n	8001080 <menu+0x3e4>
		lcd_print(1, 1, menuyeGirildiText);
 800106c:	4a61      	ldr	r2, [pc, #388]	@ (80011f4 <menu+0x558>)
 800106e:	2101      	movs	r1, #1
 8001070:	2001      	movs	r0, #1
 8001072:	f008 faa8 	bl	80095c6 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8001076:	4a60      	ldr	r2, [pc, #384]	@ (80011f8 <menu+0x55c>)
 8001078:	2101      	movs	r1, #1
 800107a:	2002      	movs	r0, #2
 800107c:	f008 faa3 	bl	80095c6 <lcd_print>
	}

	if (menuSayac == 1) {
 8001080:	4b57      	ldr	r3, [pc, #348]	@ (80011e0 <menu+0x544>)
 8001082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001086:	1e51      	subs	r1, r2, #1
 8001088:	430b      	orrs	r3, r1
 800108a:	f040 82a5 	bne.w	80015d8 <menu+0x93c>
		lcd_print(1, 1, hataKayitListText);
 800108e:	4a5b      	ldr	r2, [pc, #364]	@ (80011fc <menu+0x560>)
 8001090:	2101      	movs	r1, #1
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fa97 	bl	80095c6 <lcd_print>

		if(hataGostermeSirasi == 0) {
 8001098:	4b59      	ldr	r3, [pc, #356]	@ (8001200 <menu+0x564>)
 800109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109e:	4313      	orrs	r3, r2
 80010a0:	d117      	bne.n	80010d2 <menu+0x436>
			lcd_print(2, 1, birHataKoduText);
 80010a2:	4a58      	ldr	r2, [pc, #352]	@ (8001204 <menu+0x568>)
 80010a4:	2101      	movs	r1, #1
 80010a6:	2002      	movs	r0, #2
 80010a8:	f008 fa8d 	bl	80095c6 <lcd_print>
			lcd_print(2, 15, "   ");
 80010ac:	4a56      	ldr	r2, [pc, #344]	@ (8001208 <menu+0x56c>)
 80010ae:	210f      	movs	r1, #15
 80010b0:	2002      	movs	r0, #2
 80010b2:	f008 fa88 	bl	80095c6 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80010b6:	4b55      	ldr	r3, [pc, #340]	@ (800120c <menu+0x570>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	4613      	mov	r3, r2
 80010be:	220a      	movs	r2, #10
 80010c0:	4953      	ldr	r1, [pc, #332]	@ (8001210 <menu+0x574>)
 80010c2:	4618      	mov	r0, r3
 80010c4:	f00b ff7c 	bl	800cfc0 <itoa>
			lcd_print(2, 14, snum);
 80010c8:	4a51      	ldr	r2, [pc, #324]	@ (8001210 <menu+0x574>)
 80010ca:	210e      	movs	r1, #14
 80010cc:	2002      	movs	r0, #2
 80010ce:	f008 fa7a 	bl	80095c6 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80010d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001200 <menu+0x564>)
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	1e51      	subs	r1, r2, #1
 80010da:	430b      	orrs	r3, r1
 80010dc:	d117      	bne.n	800110e <menu+0x472>
			lcd_print(2, 1, ikiHataKoduText);
 80010de:	4a4d      	ldr	r2, [pc, #308]	@ (8001214 <menu+0x578>)
 80010e0:	2101      	movs	r1, #1
 80010e2:	2002      	movs	r0, #2
 80010e4:	f008 fa6f 	bl	80095c6 <lcd_print>
			lcd_print(2, 15, "  ");
 80010e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001218 <menu+0x57c>)
 80010ea:	210f      	movs	r1, #15
 80010ec:	2002      	movs	r0, #2
 80010ee:	f008 fa6a 	bl	80095c6 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80010f2:	4b4a      	ldr	r3, [pc, #296]	@ (800121c <menu+0x580>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	4613      	mov	r3, r2
 80010fa:	220a      	movs	r2, #10
 80010fc:	4944      	ldr	r1, [pc, #272]	@ (8001210 <menu+0x574>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f00b ff5e 	bl	800cfc0 <itoa>
			lcd_print(2, 14, snum);
 8001104:	4a42      	ldr	r2, [pc, #264]	@ (8001210 <menu+0x574>)
 8001106:	210e      	movs	r1, #14
 8001108:	2002      	movs	r0, #2
 800110a:	f008 fa5c 	bl	80095c6 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800110e:	4b3c      	ldr	r3, [pc, #240]	@ (8001200 <menu+0x564>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	1e91      	subs	r1, r2, #2
 8001116:	430b      	orrs	r3, r1
 8001118:	d117      	bne.n	800114a <menu+0x4ae>
			lcd_print(2, 1, ucHataKoduText);
 800111a:	4a41      	ldr	r2, [pc, #260]	@ (8001220 <menu+0x584>)
 800111c:	2101      	movs	r1, #1
 800111e:	2002      	movs	r0, #2
 8001120:	f008 fa51 	bl	80095c6 <lcd_print>
			lcd_print(2, 15, "  ");
 8001124:	4a3c      	ldr	r2, [pc, #240]	@ (8001218 <menu+0x57c>)
 8001126:	210f      	movs	r1, #15
 8001128:	2002      	movs	r0, #2
 800112a:	f008 fa4c 	bl	80095c6 <lcd_print>
			itoa(hataKayit3, snum, 10);
 800112e:	4b3d      	ldr	r3, [pc, #244]	@ (8001224 <menu+0x588>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	4613      	mov	r3, r2
 8001136:	220a      	movs	r2, #10
 8001138:	4935      	ldr	r1, [pc, #212]	@ (8001210 <menu+0x574>)
 800113a:	4618      	mov	r0, r3
 800113c:	f00b ff40 	bl	800cfc0 <itoa>
			lcd_print(2, 14, snum);
 8001140:	4a33      	ldr	r2, [pc, #204]	@ (8001210 <menu+0x574>)
 8001142:	210e      	movs	r1, #14
 8001144:	2002      	movs	r0, #2
 8001146:	f008 fa3e 	bl	80095c6 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800114a:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <menu+0x564>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	1ed1      	subs	r1, r2, #3
 8001152:	430b      	orrs	r3, r1
 8001154:	d117      	bne.n	8001186 <menu+0x4ea>
			lcd_print(2, 1, dortHataKoduText);
 8001156:	4a34      	ldr	r2, [pc, #208]	@ (8001228 <menu+0x58c>)
 8001158:	2101      	movs	r1, #1
 800115a:	2002      	movs	r0, #2
 800115c:	f008 fa33 	bl	80095c6 <lcd_print>
			lcd_print(2, 15, "  ");
 8001160:	4a2d      	ldr	r2, [pc, #180]	@ (8001218 <menu+0x57c>)
 8001162:	210f      	movs	r1, #15
 8001164:	2002      	movs	r0, #2
 8001166:	f008 fa2e 	bl	80095c6 <lcd_print>
			itoa(hataKayit4, snum, 10);
 800116a:	4b30      	ldr	r3, [pc, #192]	@ (800122c <menu+0x590>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	4613      	mov	r3, r2
 8001172:	220a      	movs	r2, #10
 8001174:	4926      	ldr	r1, [pc, #152]	@ (8001210 <menu+0x574>)
 8001176:	4618      	mov	r0, r3
 8001178:	f00b ff22 	bl	800cfc0 <itoa>
			lcd_print(2, 14, snum);
 800117c:	4a24      	ldr	r2, [pc, #144]	@ (8001210 <menu+0x574>)
 800117e:	210e      	movs	r1, #14
 8001180:	2002      	movs	r0, #2
 8001182:	f008 fa20 	bl	80095c6 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <menu+0x564>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	1f11      	subs	r1, r2, #4
 800118e:	430b      	orrs	r3, r1
 8001190:	d117      	bne.n	80011c2 <menu+0x526>
			lcd_print(2, 1, besHataKoduText);
 8001192:	4a27      	ldr	r2, [pc, #156]	@ (8001230 <menu+0x594>)
 8001194:	2101      	movs	r1, #1
 8001196:	2002      	movs	r0, #2
 8001198:	f008 fa15 	bl	80095c6 <lcd_print>
			lcd_print(2, 15, "  ");
 800119c:	4a1e      	ldr	r2, [pc, #120]	@ (8001218 <menu+0x57c>)
 800119e:	210f      	movs	r1, #15
 80011a0:	2002      	movs	r0, #2
 80011a2:	f008 fa10 	bl	80095c6 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80011a6:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <menu+0x598>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	4613      	mov	r3, r2
 80011ae:	220a      	movs	r2, #10
 80011b0:	4917      	ldr	r1, [pc, #92]	@ (8001210 <menu+0x574>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f00b ff04 	bl	800cfc0 <itoa>
			lcd_print(2, 14, snum);
 80011b8:	4a15      	ldr	r2, [pc, #84]	@ (8001210 <menu+0x574>)
 80011ba:	210e      	movs	r1, #14
 80011bc:	2002      	movs	r0, #2
 80011be:	f008 fa02 	bl	80095c6 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80011c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <menu+0x564>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	1f51      	subs	r1, r2, #5
 80011ca:	430b      	orrs	r3, r1
 80011cc:	d149      	bne.n	8001262 <menu+0x5c6>
			lcd_print(2, 1, altiHataKoduText);
 80011ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001238 <menu+0x59c>)
 80011d0:	2101      	movs	r1, #1
 80011d2:	2002      	movs	r0, #2
 80011d4:	f008 f9f7 	bl	80095c6 <lcd_print>
 80011d8:	e030      	b.n	800123c <menu+0x5a0>
 80011da:	bf00      	nop
 80011dc:	200010f8 	.word	0x200010f8
 80011e0:	200010b8 	.word	0x200010b8
 80011e4:	20001100 	.word	0x20001100
 80011e8:	20001108 	.word	0x20001108
 80011ec:	20001110 	.word	0x20001110
 80011f0:	20001130 	.word	0x20001130
 80011f4:	20001254 	.word	0x20001254
 80011f8:	20001268 	.word	0x20001268
 80011fc:	2000127c 	.word	0x2000127c
 8001200:	200010c8 	.word	0x200010c8
 8001204:	20001290 	.word	0x20001290
 8001208:	0800d0dc 	.word	0x0800d0dc
 800120c:	200011c8 	.word	0x200011c8
 8001210:	20001078 	.word	0x20001078
 8001214:	200012a4 	.word	0x200012a4
 8001218:	0800d0e0 	.word	0x0800d0e0
 800121c:	200011d0 	.word	0x200011d0
 8001220:	200012b8 	.word	0x200012b8
 8001224:	200011d8 	.word	0x200011d8
 8001228:	200012cc 	.word	0x200012cc
 800122c:	200011e0 	.word	0x200011e0
 8001230:	200012e0 	.word	0x200012e0
 8001234:	200011e8 	.word	0x200011e8
 8001238:	200012f4 	.word	0x200012f4
			lcd_print(2, 15, "  ");
 800123c:	4aae      	ldr	r2, [pc, #696]	@ (80014f8 <menu+0x85c>)
 800123e:	210f      	movs	r1, #15
 8001240:	2002      	movs	r0, #2
 8001242:	f008 f9c0 	bl	80095c6 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001246:	4bad      	ldr	r3, [pc, #692]	@ (80014fc <menu+0x860>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	4613      	mov	r3, r2
 800124e:	220a      	movs	r2, #10
 8001250:	49ab      	ldr	r1, [pc, #684]	@ (8001500 <menu+0x864>)
 8001252:	4618      	mov	r0, r3
 8001254:	f00b feb4 	bl	800cfc0 <itoa>
			lcd_print(2, 14, snum);
 8001258:	4aa9      	ldr	r2, [pc, #676]	@ (8001500 <menu+0x864>)
 800125a:	210e      	movs	r1, #14
 800125c:	2002      	movs	r0, #2
 800125e:	f008 f9b2 	bl	80095c6 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001262:	4ba8      	ldr	r3, [pc, #672]	@ (8001504 <menu+0x868>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	1f91      	subs	r1, r2, #6
 800126a:	430b      	orrs	r3, r1
 800126c:	d117      	bne.n	800129e <menu+0x602>
			lcd_print(2, 1, yediHataKoduText);
 800126e:	4aa6      	ldr	r2, [pc, #664]	@ (8001508 <menu+0x86c>)
 8001270:	2101      	movs	r1, #1
 8001272:	2002      	movs	r0, #2
 8001274:	f008 f9a7 	bl	80095c6 <lcd_print>
			lcd_print(2, 15, "  ");
 8001278:	4a9f      	ldr	r2, [pc, #636]	@ (80014f8 <menu+0x85c>)
 800127a:	210f      	movs	r1, #15
 800127c:	2002      	movs	r0, #2
 800127e:	f008 f9a2 	bl	80095c6 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001282:	4ba2      	ldr	r3, [pc, #648]	@ (800150c <menu+0x870>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	4613      	mov	r3, r2
 800128a:	220a      	movs	r2, #10
 800128c:	499c      	ldr	r1, [pc, #624]	@ (8001500 <menu+0x864>)
 800128e:	4618      	mov	r0, r3
 8001290:	f00b fe96 	bl	800cfc0 <itoa>
			lcd_print(2, 14, snum);
 8001294:	4a9a      	ldr	r2, [pc, #616]	@ (8001500 <menu+0x864>)
 8001296:	210e      	movs	r1, #14
 8001298:	2002      	movs	r0, #2
 800129a:	f008 f994 	bl	80095c6 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 800129e:	4b99      	ldr	r3, [pc, #612]	@ (8001504 <menu+0x868>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	1fd1      	subs	r1, r2, #7
 80012a6:	430b      	orrs	r3, r1
 80012a8:	d117      	bne.n	80012da <menu+0x63e>
			lcd_print(2, 1, sekizHataKoduText);
 80012aa:	4a99      	ldr	r2, [pc, #612]	@ (8001510 <menu+0x874>)
 80012ac:	2101      	movs	r1, #1
 80012ae:	2002      	movs	r0, #2
 80012b0:	f008 f989 	bl	80095c6 <lcd_print>
			lcd_print(2, 15, "  ");
 80012b4:	4a90      	ldr	r2, [pc, #576]	@ (80014f8 <menu+0x85c>)
 80012b6:	210f      	movs	r1, #15
 80012b8:	2002      	movs	r0, #2
 80012ba:	f008 f984 	bl	80095c6 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80012be:	4b95      	ldr	r3, [pc, #596]	@ (8001514 <menu+0x878>)
 80012c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c4:	4613      	mov	r3, r2
 80012c6:	220a      	movs	r2, #10
 80012c8:	498d      	ldr	r1, [pc, #564]	@ (8001500 <menu+0x864>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f00b fe78 	bl	800cfc0 <itoa>
			lcd_print(2, 14, snum);
 80012d0:	4a8b      	ldr	r2, [pc, #556]	@ (8001500 <menu+0x864>)
 80012d2:	210e      	movs	r1, #14
 80012d4:	2002      	movs	r0, #2
 80012d6:	f008 f976 	bl	80095c6 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80012da:	4b8a      	ldr	r3, [pc, #552]	@ (8001504 <menu+0x868>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	f1a2 0108 	sub.w	r1, r2, #8
 80012e4:	430b      	orrs	r3, r1
 80012e6:	d117      	bne.n	8001318 <menu+0x67c>
			lcd_print(2, 1, dokuzHataKoduText);
 80012e8:	4a8b      	ldr	r2, [pc, #556]	@ (8001518 <menu+0x87c>)
 80012ea:	2101      	movs	r1, #1
 80012ec:	2002      	movs	r0, #2
 80012ee:	f008 f96a 	bl	80095c6 <lcd_print>
			lcd_print(2, 15, "  ");
 80012f2:	4a81      	ldr	r2, [pc, #516]	@ (80014f8 <menu+0x85c>)
 80012f4:	210f      	movs	r1, #15
 80012f6:	2002      	movs	r0, #2
 80012f8:	f008 f965 	bl	80095c6 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80012fc:	4b87      	ldr	r3, [pc, #540]	@ (800151c <menu+0x880>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	4613      	mov	r3, r2
 8001304:	220a      	movs	r2, #10
 8001306:	497e      	ldr	r1, [pc, #504]	@ (8001500 <menu+0x864>)
 8001308:	4618      	mov	r0, r3
 800130a:	f00b fe59 	bl	800cfc0 <itoa>
			lcd_print(2, 14, snum);
 800130e:	4a7c      	ldr	r2, [pc, #496]	@ (8001500 <menu+0x864>)
 8001310:	210e      	movs	r1, #14
 8001312:	2002      	movs	r0, #2
 8001314:	f008 f957 	bl	80095c6 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001318:	4b7a      	ldr	r3, [pc, #488]	@ (8001504 <menu+0x868>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f1a2 0109 	sub.w	r1, r2, #9
 8001322:	430b      	orrs	r3, r1
 8001324:	d117      	bne.n	8001356 <menu+0x6ba>
			lcd_print(2, 1, onHataKoduText);
 8001326:	4a7e      	ldr	r2, [pc, #504]	@ (8001520 <menu+0x884>)
 8001328:	2101      	movs	r1, #1
 800132a:	2002      	movs	r0, #2
 800132c:	f008 f94b 	bl	80095c6 <lcd_print>
			lcd_print(2, 16, " ");
 8001330:	4a7c      	ldr	r2, [pc, #496]	@ (8001524 <menu+0x888>)
 8001332:	2110      	movs	r1, #16
 8001334:	2002      	movs	r0, #2
 8001336:	f008 f946 	bl	80095c6 <lcd_print>
			itoa(hataKayit10, snum, 10);
 800133a:	4b7b      	ldr	r3, [pc, #492]	@ (8001528 <menu+0x88c>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	4613      	mov	r3, r2
 8001342:	220a      	movs	r2, #10
 8001344:	496e      	ldr	r1, [pc, #440]	@ (8001500 <menu+0x864>)
 8001346:	4618      	mov	r0, r3
 8001348:	f00b fe3a 	bl	800cfc0 <itoa>
			lcd_print(2, 15, snum);
 800134c:	4a6c      	ldr	r2, [pc, #432]	@ (8001500 <menu+0x864>)
 800134e:	210f      	movs	r1, #15
 8001350:	2002      	movs	r0, #2
 8001352:	f008 f938 	bl	80095c6 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001356:	4b6b      	ldr	r3, [pc, #428]	@ (8001504 <menu+0x868>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f1a2 010a 	sub.w	r1, r2, #10
 8001360:	430b      	orrs	r3, r1
 8001362:	d104      	bne.n	800136e <menu+0x6d2>
			lcd_print(2, 1, silmekIcinText);
 8001364:	4a71      	ldr	r2, [pc, #452]	@ (800152c <menu+0x890>)
 8001366:	2101      	movs	r1, #1
 8001368:	2002      	movs	r0, #2
 800136a:	f008 f92c 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800136e:	2102      	movs	r1, #2
 8001370:	486f      	ldr	r0, [pc, #444]	@ (8001530 <menu+0x894>)
 8001372:	f009 fa83 	bl	800a87c <HAL_GPIO_ReadPin>
 8001376:	4603      	mov	r3, r0
 8001378:	2b01      	cmp	r3, #1
 800137a:	d125      	bne.n	80013c8 <menu+0x72c>
 800137c:	4b6d      	ldr	r3, [pc, #436]	@ (8001534 <menu+0x898>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	f083 0301 	eor.w	r3, r3, #1
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d01e      	beq.n	80013c8 <menu+0x72c>
 800138a:	4b6b      	ldr	r3, [pc, #428]	@ (8001538 <menu+0x89c>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	4313      	orrs	r3, r2
 8001392:	d119      	bne.n	80013c8 <menu+0x72c>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001394:	4b5b      	ldr	r3, [pc, #364]	@ (8001504 <menu+0x868>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	f112 0a01 	adds.w	sl, r2, #1
 800139e:	f143 0b00 	adc.w	fp, r3, #0
 80013a2:	4b58      	ldr	r3, [pc, #352]	@ (8001504 <menu+0x868>)
 80013a4:	e9c3 ab00 	strd	sl, fp, [r3]

			if(hataGostermeSirasi > 10) {
 80013a8:	4b56      	ldr	r3, [pc, #344]	@ (8001504 <menu+0x868>)
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	2a0b      	cmp	r2, #11
 80013b0:	f173 0300 	sbcs.w	r3, r3, #0
 80013b4:	d306      	bcc.n	80013c4 <menu+0x728>
				hataGostermeSirasi = 0;
 80013b6:	4953      	ldr	r1, [pc, #332]	@ (8001504 <menu+0x868>)
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 80013c4:	f002 fe98 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80013c8:	2104      	movs	r1, #4
 80013ca:	4859      	ldr	r0, [pc, #356]	@ (8001530 <menu+0x894>)
 80013cc:	f009 fa56 	bl	800a87c <HAL_GPIO_ReadPin>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d12a      	bne.n	800142c <menu+0x790>
 80013d6:	4b57      	ldr	r3, [pc, #348]	@ (8001534 <menu+0x898>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	f083 0301 	eor.w	r3, r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d023      	beq.n	800142c <menu+0x790>
 80013e4:	4b54      	ldr	r3, [pc, #336]	@ (8001538 <menu+0x89c>)
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	d11e      	bne.n	800142c <menu+0x790>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80013ee:	4b45      	ldr	r3, [pc, #276]	@ (8001504 <menu+0x868>)
 80013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f4:	1e51      	subs	r1, r2, #1
 80013f6:	f8c7 11d0 	str.w	r1, [r7, #464]	@ 0x1d0
 80013fa:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 80013fe:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8001402:	4b40      	ldr	r3, [pc, #256]	@ (8001504 <menu+0x868>)
 8001404:	e9d7 1274 	ldrd	r1, r2, [r7, #464]	@ 0x1d0
 8001408:	e9c3 1200 	strd	r1, r2, [r3]

	    	if(hataGostermeSirasi > 11) {
 800140c:	4b3d      	ldr	r3, [pc, #244]	@ (8001504 <menu+0x868>)
 800140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001412:	2a0c      	cmp	r2, #12
 8001414:	f173 0300 	sbcs.w	r3, r3, #0
 8001418:	d306      	bcc.n	8001428 <menu+0x78c>
	    		hataGostermeSirasi = 10;
 800141a:	493a      	ldr	r1, [pc, #232]	@ (8001504 <menu+0x868>)
 800141c:	f04f 020a 	mov.w	r2, #10
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9c1 2300 	strd	r2, r3, [r1]
	    	}
			bekle();
 8001428:	f002 fe66 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 800142c:	2108      	movs	r1, #8
 800142e:	4840      	ldr	r0, [pc, #256]	@ (8001530 <menu+0x894>)
 8001430:	f009 fa24 	bl	800a87c <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	2b01      	cmp	r3, #1
 8001438:	f040 80ce 	bne.w	80015d8 <menu+0x93c>
 800143c:	4b3d      	ldr	r3, [pc, #244]	@ (8001534 <menu+0x898>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	f083 0301 	eor.w	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80c6 	beq.w	80015d8 <menu+0x93c>
 800144c:	4b2d      	ldr	r3, [pc, #180]	@ (8001504 <menu+0x868>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	f1a2 010a 	sub.w	r1, r2, #10
 8001456:	430b      	orrs	r3, r1
 8001458:	f040 80be 	bne.w	80015d8 <menu+0x93c>
			hataKayit1 = 0; eepromData[37] = 0;
 800145c:	4937      	ldr	r1, [pc, #220]	@ (800153c <menu+0x8a0>)
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9c1 2300 	strd	r2, r3, [r1]
 800146a:	4935      	ldr	r1, [pc, #212]	@ (8001540 <menu+0x8a4>)
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	e9c1 234a 	strd	r2, r3, [r1, #296]	@ 0x128
			hataKayit2 = 0; eepromData[38] = 0;
 8001478:	4932      	ldr	r1, [pc, #200]	@ (8001544 <menu+0x8a8>)
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	e9c1 2300 	strd	r2, r3, [r1]
 8001486:	492e      	ldr	r1, [pc, #184]	@ (8001540 <menu+0x8a4>)
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	e9c1 234c 	strd	r2, r3, [r1, #304]	@ 0x130
			hataKayit3 = 0; eepromData[39] = 0;
 8001494:	492c      	ldr	r1, [pc, #176]	@ (8001548 <menu+0x8ac>)
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	e9c1 2300 	strd	r2, r3, [r1]
 80014a2:	4927      	ldr	r1, [pc, #156]	@ (8001540 <menu+0x8a4>)
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	e9c1 234e 	strd	r2, r3, [r1, #312]	@ 0x138
			hataKayit4 = 0; eepromData[40] = 0;
 80014b0:	4926      	ldr	r1, [pc, #152]	@ (800154c <menu+0x8b0>)
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	e9c1 2300 	strd	r2, r3, [r1]
 80014be:	4920      	ldr	r1, [pc, #128]	@ (8001540 <menu+0x8a4>)
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	e9c1 2350 	strd	r2, r3, [r1, #320]	@ 0x140
			hataKayit5 = 0; eepromData[41] = 0;
 80014cc:	4920      	ldr	r1, [pc, #128]	@ (8001550 <menu+0x8b4>)
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	e9c1 2300 	strd	r2, r3, [r1]
 80014da:	4919      	ldr	r1, [pc, #100]	@ (8001540 <menu+0x8a4>)
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	e9c1 2352 	strd	r2, r3, [r1, #328]	@ 0x148
			hataKayit6 = 0; eepromData[42] = 0;
 80014e8:	4904      	ldr	r1, [pc, #16]	@ (80014fc <menu+0x860>)
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	e9c1 2300 	strd	r2, r3, [r1]
 80014f6:	e02d      	b.n	8001554 <menu+0x8b8>
 80014f8:	0800d0e0 	.word	0x0800d0e0
 80014fc:	200011f0 	.word	0x200011f0
 8001500:	20001078 	.word	0x20001078
 8001504:	200010c8 	.word	0x200010c8
 8001508:	20001308 	.word	0x20001308
 800150c:	200011f8 	.word	0x200011f8
 8001510:	2000131c 	.word	0x2000131c
 8001514:	20001200 	.word	0x20001200
 8001518:	20001330 	.word	0x20001330
 800151c:	20001208 	.word	0x20001208
 8001520:	20001344 	.word	0x20001344
 8001524:	0800d0e4 	.word	0x0800d0e4
 8001528:	20001210 	.word	0x20001210
 800152c:	20001358 	.word	0x20001358
 8001530:	40010800 	.word	0x40010800
 8001534:	2000121b 	.word	0x2000121b
 8001538:	20001130 	.word	0x20001130
 800153c:	200011c8 	.word	0x200011c8
 8001540:	20000d08 	.word	0x20000d08
 8001544:	200011d0 	.word	0x200011d0
 8001548:	200011d8 	.word	0x200011d8
 800154c:	200011e0 	.word	0x200011e0
 8001550:	200011e8 	.word	0x200011e8
 8001554:	4990      	ldr	r1, [pc, #576]	@ (8001798 <menu+0xafc>)
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	e9c1 2354 	strd	r2, r3, [r1, #336]	@ 0x150
			hataKayit7 = 0; eepromData[43] = 0;
 8001562:	498e      	ldr	r1, [pc, #568]	@ (800179c <menu+0xb00>)
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	e9c1 2300 	strd	r2, r3, [r1]
 8001570:	4989      	ldr	r1, [pc, #548]	@ (8001798 <menu+0xafc>)
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	e9c1 2356 	strd	r2, r3, [r1, #344]	@ 0x158
			hataKayit8 = 0; eepromData[44] = 0;
 800157e:	4988      	ldr	r1, [pc, #544]	@ (80017a0 <menu+0xb04>)
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	e9c1 2300 	strd	r2, r3, [r1]
 800158c:	4982      	ldr	r1, [pc, #520]	@ (8001798 <menu+0xafc>)
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	e9c1 2358 	strd	r2, r3, [r1, #352]	@ 0x160
			hataKayit9 = 0; eepromData[45] = 0;
 800159a:	4982      	ldr	r1, [pc, #520]	@ (80017a4 <menu+0xb08>)
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e9c1 2300 	strd	r2, r3, [r1]
 80015a8:	497b      	ldr	r1, [pc, #492]	@ (8001798 <menu+0xafc>)
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	e9c1 235a 	strd	r2, r3, [r1, #360]	@ 0x168
			hataKayit10 = 0; eepromData[46] = 0;
 80015b6:	497c      	ldr	r1, [pc, #496]	@ (80017a8 <menu+0xb0c>)
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9c1 2300 	strd	r2, r3, [r1]
 80015c4:	4974      	ldr	r1, [pc, #464]	@ (8001798 <menu+0xafc>)
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	e9c1 235c 	strd	r2, r3, [r1, #368]	@ 0x170
			hafizaYaz = 1;
 80015d2:	4a76      	ldr	r2, [pc, #472]	@ (80017ac <menu+0xb10>)
 80015d4:	2301      	movs	r3, #1
 80015d6:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 2) {
 80015d8:	4b75      	ldr	r3, [pc, #468]	@ (80017b0 <menu+0xb14>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	1e91      	subs	r1, r2, #2
 80015e0:	430b      	orrs	r3, r1
 80015e2:	f040 80c1 	bne.w	8001768 <menu+0xacc>
		lcd_print(1, 1, calismaSekliText);
 80015e6:	4a73      	ldr	r2, [pc, #460]	@ (80017b4 <menu+0xb18>)
 80015e8:	2101      	movs	r1, #1
 80015ea:	2001      	movs	r0, #1
 80015ec:	f007 ffeb 	bl	80095c6 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80015f0:	4b71      	ldr	r3, [pc, #452]	@ (80017b8 <menu+0xb1c>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	1e51      	subs	r1, r2, #1
 80015f8:	430b      	orrs	r3, r1
 80015fa:	d005      	beq.n	8001608 <menu+0x96c>
 80015fc:	4b6e      	ldr	r3, [pc, #440]	@ (80017b8 <menu+0xb1c>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	1e91      	subs	r1, r2, #2
 8001604:	430b      	orrs	r3, r1
 8001606:	d104      	bne.n	8001612 <menu+0x976>
			lcd_print(2, 1, devirmeYuruyusText);
 8001608:	4a6c      	ldr	r2, [pc, #432]	@ (80017bc <menu+0xb20>)
 800160a:	2101      	movs	r1, #1
 800160c:	2002      	movs	r0, #2
 800160e:	f007 ffda 	bl	80095c6 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001612:	4b6b      	ldr	r3, [pc, #428]	@ (80017c0 <menu+0xb24>)
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	4313      	orrs	r3, r2
 800161a:	d109      	bne.n	8001630 <menu+0x994>
 800161c:	4b66      	ldr	r3, [pc, #408]	@ (80017b8 <menu+0xb1c>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	4313      	orrs	r3, r2
 8001624:	d104      	bne.n	8001630 <menu+0x994>
			lcd_print(2, 1, bastikcaCalisanText);
 8001626:	4a67      	ldr	r2, [pc, #412]	@ (80017c4 <menu+0xb28>)
 8001628:	2101      	movs	r1, #1
 800162a:	2002      	movs	r0, #2
 800162c:	f007 ffcb 	bl	80095c6 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001630:	4b63      	ldr	r3, [pc, #396]	@ (80017c0 <menu+0xb24>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	1e51      	subs	r1, r2, #1
 8001638:	430b      	orrs	r3, r1
 800163a:	d109      	bne.n	8001650 <menu+0x9b4>
 800163c:	4b5e      	ldr	r3, [pc, #376]	@ (80017b8 <menu+0xb1c>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	4313      	orrs	r3, r2
 8001644:	d104      	bne.n	8001650 <menu+0x9b4>
			lcd_print(2, 1, basGonderText);
 8001646:	4a60      	ldr	r2, [pc, #384]	@ (80017c8 <menu+0xb2c>)
 8001648:	2101      	movs	r1, #1
 800164a:	2002      	movs	r0, #2
 800164c:	f007 ffbb 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001650:	2102      	movs	r1, #2
 8001652:	485e      	ldr	r0, [pc, #376]	@ (80017cc <menu+0xb30>)
 8001654:	f009 f912 	bl	800a87c <HAL_GPIO_ReadPin>
 8001658:	4603      	mov	r3, r0
 800165a:	2b01      	cmp	r3, #1
 800165c:	d12a      	bne.n	80016b4 <menu+0xa18>
 800165e:	4b5c      	ldr	r3, [pc, #368]	@ (80017d0 <menu+0xb34>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	f083 0301 	eor.w	r3, r3, #1
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d023      	beq.n	80016b4 <menu+0xa18>
 800166c:	4b52      	ldr	r3, [pc, #328]	@ (80017b8 <menu+0xb1c>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	4313      	orrs	r3, r2
 8001674:	d11e      	bne.n	80016b4 <menu+0xa18>
			calismaSekli = calismaSekli + 1;
 8001676:	4b52      	ldr	r3, [pc, #328]	@ (80017c0 <menu+0xb24>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	1c51      	adds	r1, r2, #1
 800167e:	f8c7 11c8 	str.w	r1, [r7, #456]	@ 0x1c8
 8001682:	f143 0300 	adc.w	r3, r3, #0
 8001686:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800168a:	4b4d      	ldr	r3, [pc, #308]	@ (80017c0 <menu+0xb24>)
 800168c:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 8001690:	e9c3 1200 	strd	r1, r2, [r3]

			if(calismaSekli > 1) {
 8001694:	4b4a      	ldr	r3, [pc, #296]	@ (80017c0 <menu+0xb24>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	2a02      	cmp	r2, #2
 800169c:	f173 0300 	sbcs.w	r3, r3, #0
 80016a0:	d306      	bcc.n	80016b0 <menu+0xa14>
				calismaSekli = 0;
 80016a2:	4947      	ldr	r1, [pc, #284]	@ (80017c0 <menu+0xb24>)
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 80016b0:	f002 fd22 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80016b4:	2104      	movs	r1, #4
 80016b6:	4845      	ldr	r0, [pc, #276]	@ (80017cc <menu+0xb30>)
 80016b8:	f009 f8e0 	bl	800a87c <HAL_GPIO_ReadPin>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d128      	bne.n	8001714 <menu+0xa78>
 80016c2:	4b43      	ldr	r3, [pc, #268]	@ (80017d0 <menu+0xb34>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	f083 0301 	eor.w	r3, r3, #1
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d021      	beq.n	8001714 <menu+0xa78>
 80016d0:	4b39      	ldr	r3, [pc, #228]	@ (80017b8 <menu+0xb1c>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	d11c      	bne.n	8001714 <menu+0xa78>
			calismaSekli = calismaSekli - 1;
 80016da:	4b39      	ldr	r3, [pc, #228]	@ (80017c0 <menu+0xb24>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	1e51      	subs	r1, r2, #1
 80016e2:	f8c7 11c0 	str.w	r1, [r7, #448]	@ 0x1c0
 80016e6:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 80016ea:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80016ee:	4b34      	ldr	r3, [pc, #208]	@ (80017c0 <menu+0xb24>)
 80016f0:	e9d7 1270 	ldrd	r1, r2, [r7, #448]	@ 0x1c0
 80016f4:	e9c3 1200 	strd	r1, r2, [r3]

	    	if(calismaSekli > 0) {
 80016f8:	4b31      	ldr	r3, [pc, #196]	@ (80017c0 <menu+0xb24>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	4313      	orrs	r3, r2
 8001700:	d006      	beq.n	8001710 <menu+0xa74>
	    		calismaSekli = 1;
 8001702:	492f      	ldr	r1, [pc, #188]	@ (80017c0 <menu+0xb24>)
 8001704:	f04f 0201 	mov.w	r2, #1
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	e9c1 2300 	strd	r2, r3, [r1]
	    	}
			bekle();
 8001710:	f002 fcf2 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001714:	2108      	movs	r1, #8
 8001716:	482d      	ldr	r0, [pc, #180]	@ (80017cc <menu+0xb30>)
 8001718:	f009 f8b0 	bl	800a87c <HAL_GPIO_ReadPin>
 800171c:	4603      	mov	r3, r0
 800171e:	2b01      	cmp	r3, #1
 8001720:	d122      	bne.n	8001768 <menu+0xacc>
 8001722:	4b2b      	ldr	r3, [pc, #172]	@ (80017d0 <menu+0xb34>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	f083 0301 	eor.w	r3, r3, #1
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d01b      	beq.n	8001768 <menu+0xacc>
			eepromData[1] = calismaSekli;
 8001730:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <menu+0xb24>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	4918      	ldr	r1, [pc, #96]	@ (8001798 <menu+0xafc>)
 8001738:	e9c1 2302 	strd	r2, r3, [r1, #8]

			if(calismaSekli == 1) {
 800173c:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <menu+0xb24>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	1e51      	subs	r1, r2, #1
 8001744:	430b      	orrs	r3, r1
 8001746:	d10c      	bne.n	8001762 <menu+0xac6>
				altLimit = 1;
 8001748:	4922      	ldr	r1, [pc, #136]	@ (80017d4 <menu+0xb38>)
 800174a:	f04f 0201 	mov.w	r2, #1
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[5] = altLimit;
 8001756:	4b1f      	ldr	r3, [pc, #124]	@ (80017d4 <menu+0xb38>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	490e      	ldr	r1, [pc, #56]	@ (8001798 <menu+0xafc>)
 800175e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
			}
			hafizaYaz = 1;
 8001762:	4a12      	ldr	r2, [pc, #72]	@ (80017ac <menu+0xb10>)
 8001764:	2301      	movs	r3, #1
 8001766:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 3) {
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <menu+0xb14>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	1ed1      	subs	r1, r2, #3
 8001770:	430b      	orrs	r3, r1
 8001772:	f040 80b1 	bne.w	80018d8 <menu+0xc3c>
		lcd_print(1, 1, emniyetCercevesiText);
 8001776:	4a18      	ldr	r2, [pc, #96]	@ (80017d8 <menu+0xb3c>)
 8001778:	2101      	movs	r1, #1
 800177a:	2001      	movs	r0, #1
 800177c:	f007 ff23 	bl	80095c6 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001780:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <menu+0xb40>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	4313      	orrs	r3, r2
 8001788:	d12c      	bne.n	80017e4 <menu+0xb48>
			lcd_print(2, 1, pasifText);
 800178a:	4a15      	ldr	r2, [pc, #84]	@ (80017e0 <menu+0xb44>)
 800178c:	2101      	movs	r1, #1
 800178e:	2002      	movs	r0, #2
 8001790:	f007 ff19 	bl	80095c6 <lcd_print>
 8001794:	e031      	b.n	80017fa <menu+0xb5e>
 8001796:	bf00      	nop
 8001798:	20000d08 	.word	0x20000d08
 800179c:	200011f8 	.word	0x200011f8
 80017a0:	20001200 	.word	0x20001200
 80017a4:	20001208 	.word	0x20001208
 80017a8:	20001210 	.word	0x20001210
 80017ac:	20001218 	.word	0x20001218
 80017b0:	200010b8 	.word	0x200010b8
 80017b4:	2000136c 	.word	0x2000136c
 80017b8:	20001130 	.word	0x20001130
 80017bc:	20001380 	.word	0x20001380
 80017c0:	200010c0 	.word	0x200010c0
 80017c4:	20001394 	.word	0x20001394
 80017c8:	200013a8 	.word	0x200013a8
 80017cc:	40010800 	.word	0x40010800
 80017d0:	2000121b 	.word	0x2000121b
 80017d4:	200010e8 	.word	0x200010e8
 80017d8:	200013bc 	.word	0x200013bc
 80017dc:	200010d8 	.word	0x200010d8
 80017e0:	200013d0 	.word	0x200013d0
		} else if(emniyetCercevesi == 1) {
 80017e4:	4b90      	ldr	r3, [pc, #576]	@ (8001a28 <menu+0xd8c>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	1e51      	subs	r1, r2, #1
 80017ec:	430b      	orrs	r3, r1
 80017ee:	d104      	bne.n	80017fa <menu+0xb5e>
			lcd_print(2, 1, ondSafetyTextGN);
 80017f0:	4a8e      	ldr	r2, [pc, #568]	@ (8001a2c <menu+0xd90>)
 80017f2:	2101      	movs	r1, #1
 80017f4:	2002      	movs	r0, #2
 80017f6:	f007 fee6 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80017fa:	2102      	movs	r1, #2
 80017fc:	488c      	ldr	r0, [pc, #560]	@ (8001a30 <menu+0xd94>)
 80017fe:	f009 f83d 	bl	800a87c <HAL_GPIO_ReadPin>
 8001802:	4603      	mov	r3, r0
 8001804:	2b01      	cmp	r3, #1
 8001806:	d125      	bne.n	8001854 <menu+0xbb8>
 8001808:	4b8a      	ldr	r3, [pc, #552]	@ (8001a34 <menu+0xd98>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	f083 0301 	eor.w	r3, r3, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d01e      	beq.n	8001854 <menu+0xbb8>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001816:	4b84      	ldr	r3, [pc, #528]	@ (8001a28 <menu+0xd8c>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	1c51      	adds	r1, r2, #1
 800181e:	f8c7 11b8 	str.w	r1, [r7, #440]	@ 0x1b8
 8001822:	f143 0300 	adc.w	r3, r3, #0
 8001826:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800182a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a28 <menu+0xd8c>)
 800182c:	e9d7 126e 	ldrd	r1, r2, [r7, #440]	@ 0x1b8
 8001830:	e9c3 1200 	strd	r1, r2, [r3]

			if(emniyetCercevesi > 1) {
 8001834:	4b7c      	ldr	r3, [pc, #496]	@ (8001a28 <menu+0xd8c>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	2a02      	cmp	r2, #2
 800183c:	f173 0300 	sbcs.w	r3, r3, #0
 8001840:	d306      	bcc.n	8001850 <menu+0xbb4>
				emniyetCercevesi = 0;
 8001842:	4979      	ldr	r1, [pc, #484]	@ (8001a28 <menu+0xd8c>)
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8001850:	f002 fc52 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001854:	2104      	movs	r1, #4
 8001856:	4876      	ldr	r0, [pc, #472]	@ (8001a30 <menu+0xd94>)
 8001858:	f009 f810 	bl	800a87c <HAL_GPIO_ReadPin>
 800185c:	4603      	mov	r3, r0
 800185e:	2b01      	cmp	r3, #1
 8001860:	d123      	bne.n	80018aa <menu+0xc0e>
 8001862:	4b74      	ldr	r3, [pc, #464]	@ (8001a34 <menu+0xd98>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	f083 0301 	eor.w	r3, r3, #1
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d01c      	beq.n	80018aa <menu+0xc0e>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001870:	4b6d      	ldr	r3, [pc, #436]	@ (8001a28 <menu+0xd8c>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	1e51      	subs	r1, r2, #1
 8001878:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
 800187c:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8001880:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8001884:	4b68      	ldr	r3, [pc, #416]	@ (8001a28 <menu+0xd8c>)
 8001886:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 800188a:	e9c3 1200 	strd	r1, r2, [r3]
		   	if(emniyetCercevesi > 0) {
 800188e:	4b66      	ldr	r3, [pc, #408]	@ (8001a28 <menu+0xd8c>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	4313      	orrs	r3, r2
 8001896:	d006      	beq.n	80018a6 <menu+0xc0a>
		   		emniyetCercevesi = 1;
 8001898:	4963      	ldr	r1, [pc, #396]	@ (8001a28 <menu+0xd8c>)
 800189a:	f04f 0201 	mov.w	r2, #1
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 80018a6:	f002 fc27 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80018aa:	2108      	movs	r1, #8
 80018ac:	4860      	ldr	r0, [pc, #384]	@ (8001a30 <menu+0xd94>)
 80018ae:	f008 ffe5 	bl	800a87c <HAL_GPIO_ReadPin>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d10f      	bne.n	80018d8 <menu+0xc3c>
 80018b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001a34 <menu+0xd98>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	f083 0301 	eor.w	r3, r3, #1
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d008      	beq.n	80018d8 <menu+0xc3c>
			eepromData[2] = emniyetCercevesi;
 80018c6:	4b58      	ldr	r3, [pc, #352]	@ (8001a28 <menu+0xd8c>)
 80018c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018cc:	495a      	ldr	r1, [pc, #360]	@ (8001a38 <menu+0xd9c>)
 80018ce:	e9c1 2304 	strd	r2, r3, [r1, #16]
			hafizaYaz = 1;
 80018d2:	4a5a      	ldr	r2, [pc, #360]	@ (8001a3c <menu+0xda0>)
 80018d4:	2301      	movs	r3, #1
 80018d6:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 4) {
 80018d8:	4b59      	ldr	r3, [pc, #356]	@ (8001a40 <menu+0xda4>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	1f11      	subs	r1, r2, #4
 80018e0:	430b      	orrs	r3, r1
 80018e2:	f040 808a 	bne.w	80019fa <menu+0xd5e>
		lcd_print(1, 1, yavaslamaLimitText);
 80018e6:	4a57      	ldr	r2, [pc, #348]	@ (8001a44 <menu+0xda8>)
 80018e8:	2101      	movs	r1, #1
 80018ea:	2001      	movs	r0, #1
 80018ec:	f007 fe6b 	bl	80095c6 <lcd_print>

		if(yavaslamaLimit == 0) {
 80018f0:	4b55      	ldr	r3, [pc, #340]	@ (8001a48 <menu+0xdac>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	d105      	bne.n	8001906 <menu+0xc6a>
			lcd_print(2, 1, pasifText);
 80018fa:	4a54      	ldr	r2, [pc, #336]	@ (8001a4c <menu+0xdb0>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	2002      	movs	r0, #2
 8001900:	f007 fe61 	bl	80095c6 <lcd_print>
 8001904:	e00a      	b.n	800191c <menu+0xc80>
		} else if(yavaslamaLimit == 1) {
 8001906:	4b50      	ldr	r3, [pc, #320]	@ (8001a48 <menu+0xdac>)
 8001908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190c:	1e51      	subs	r1, r2, #1
 800190e:	430b      	orrs	r3, r1
 8001910:	d104      	bne.n	800191c <menu+0xc80>
			lcd_print(2, 1, aktifText);
 8001912:	4a4f      	ldr	r2, [pc, #316]	@ (8001a50 <menu+0xdb4>)
 8001914:	2101      	movs	r1, #1
 8001916:	2002      	movs	r0, #2
 8001918:	f007 fe55 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800191c:	2102      	movs	r1, #2
 800191e:	4844      	ldr	r0, [pc, #272]	@ (8001a30 <menu+0xd94>)
 8001920:	f008 ffac 	bl	800a87c <HAL_GPIO_ReadPin>
 8001924:	4603      	mov	r3, r0
 8001926:	2b01      	cmp	r3, #1
 8001928:	d125      	bne.n	8001976 <menu+0xcda>
 800192a:	4b42      	ldr	r3, [pc, #264]	@ (8001a34 <menu+0xd98>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	f083 0301 	eor.w	r3, r3, #1
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01e      	beq.n	8001976 <menu+0xcda>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001938:	4b43      	ldr	r3, [pc, #268]	@ (8001a48 <menu+0xdac>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	1c51      	adds	r1, r2, #1
 8001940:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 8001944:	f143 0300 	adc.w	r3, r3, #0
 8001948:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 800194c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a48 <menu+0xdac>)
 800194e:	e9d7 126a 	ldrd	r1, r2, [r7, #424]	@ 0x1a8
 8001952:	e9c3 1200 	strd	r1, r2, [r3]

			if(yavaslamaLimit > 1){
 8001956:	4b3c      	ldr	r3, [pc, #240]	@ (8001a48 <menu+0xdac>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	2a02      	cmp	r2, #2
 800195e:	f173 0300 	sbcs.w	r3, r3, #0
 8001962:	d306      	bcc.n	8001972 <menu+0xcd6>
				yavaslamaLimit = 0;
 8001964:	4938      	ldr	r1, [pc, #224]	@ (8001a48 <menu+0xdac>)
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8001972:	f002 fbc1 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001976:	2104      	movs	r1, #4
 8001978:	482d      	ldr	r0, [pc, #180]	@ (8001a30 <menu+0xd94>)
 800197a:	f008 ff7f 	bl	800a87c <HAL_GPIO_ReadPin>
 800197e:	4603      	mov	r3, r0
 8001980:	2b01      	cmp	r3, #1
 8001982:	d123      	bne.n	80019cc <menu+0xd30>
 8001984:	4b2b      	ldr	r3, [pc, #172]	@ (8001a34 <menu+0xd98>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	f083 0301 	eor.w	r3, r3, #1
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d01c      	beq.n	80019cc <menu+0xd30>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001992:	4b2d      	ldr	r3, [pc, #180]	@ (8001a48 <menu+0xdac>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	1e51      	subs	r1, r2, #1
 800199a:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
 800199e:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 80019a2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80019a6:	4b28      	ldr	r3, [pc, #160]	@ (8001a48 <menu+0xdac>)
 80019a8:	e9d7 1268 	ldrd	r1, r2, [r7, #416]	@ 0x1a0
 80019ac:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(yavaslamaLimit > 0){
 80019b0:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <menu+0xdac>)
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	d006      	beq.n	80019c8 <menu+0xd2c>
		   		yavaslamaLimit = 1;
 80019ba:	4923      	ldr	r1, [pc, #140]	@ (8001a48 <menu+0xdac>)
 80019bc:	f04f 0201 	mov.w	r2, #1
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 80019c8:	f002 fb96 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80019cc:	2108      	movs	r1, #8
 80019ce:	4818      	ldr	r0, [pc, #96]	@ (8001a30 <menu+0xd94>)
 80019d0:	f008 ff54 	bl	800a87c <HAL_GPIO_ReadPin>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d10f      	bne.n	80019fa <menu+0xd5e>
 80019da:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <menu+0xd98>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	f083 0301 	eor.w	r3, r3, #1
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <menu+0xd5e>
			eepromData[4] = yavaslamaLimit;
 80019e8:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <menu+0xdac>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	4912      	ldr	r1, [pc, #72]	@ (8001a38 <menu+0xd9c>)
 80019f0:	e9c1 2308 	strd	r2, r3, [r1, #32]
			hafizaYaz = 1;
 80019f4:	4a11      	ldr	r2, [pc, #68]	@ (8001a3c <menu+0xda0>)
 80019f6:	2301      	movs	r3, #1
 80019f8:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 5) {
 80019fa:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <menu+0xda4>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	1f51      	subs	r1, r2, #5
 8001a02:	430b      	orrs	r3, r1
 8001a04:	f040 80de 	bne.w	8001bc4 <menu+0xf28>
		lcd_print(1, 1, altLimitText);
 8001a08:	4a12      	ldr	r2, [pc, #72]	@ (8001a54 <menu+0xdb8>)
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f007 fdda 	bl	80095c6 <lcd_print>

		if(altLimit == 0) {
 8001a12:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <menu+0xdbc>)
 8001a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	d11f      	bne.n	8001a5c <menu+0xdc0>
			lcd_print(2, 1, pasifText);
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a4c <menu+0xdb0>)
 8001a1e:	2101      	movs	r1, #1
 8001a20:	2002      	movs	r0, #2
 8001a22:	f007 fdd0 	bl	80095c6 <lcd_print>
 8001a26:	e024      	b.n	8001a72 <menu+0xdd6>
 8001a28:	200010d8 	.word	0x200010d8
 8001a2c:	20000080 	.word	0x20000080
 8001a30:	40010800 	.word	0x40010800
 8001a34:	2000121b 	.word	0x2000121b
 8001a38:	20000d08 	.word	0x20000d08
 8001a3c:	20001218 	.word	0x20001218
 8001a40:	200010b8 	.word	0x200010b8
 8001a44:	200013f8 	.word	0x200013f8
 8001a48:	200010e0 	.word	0x200010e0
 8001a4c:	200013d0 	.word	0x200013d0
 8001a50:	200013e4 	.word	0x200013e4
 8001a54:	2000140c 	.word	0x2000140c
 8001a58:	200010e8 	.word	0x200010e8
		} else if(altLimit == 1) {
 8001a5c:	4b65      	ldr	r3, [pc, #404]	@ (8001bf4 <menu+0xf58>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	1e51      	subs	r1, r2, #1
 8001a64:	430b      	orrs	r3, r1
 8001a66:	d104      	bne.n	8001a72 <menu+0xdd6>
			lcd_print(2, 1, aktifText);
 8001a68:	4a63      	ldr	r2, [pc, #396]	@ (8001bf8 <menu+0xf5c>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	f007 fdaa 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001a72:	2102      	movs	r1, #2
 8001a74:	4861      	ldr	r0, [pc, #388]	@ (8001bfc <menu+0xf60>)
 8001a76:	f008 ff01 	bl	800a87c <HAL_GPIO_ReadPin>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d12a      	bne.n	8001ad6 <menu+0xe3a>
 8001a80:	4b5f      	ldr	r3, [pc, #380]	@ (8001c00 <menu+0xf64>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	f083 0301 	eor.w	r3, r3, #1
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d023      	beq.n	8001ad6 <menu+0xe3a>
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001c04 <menu+0xf68>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	d11e      	bne.n	8001ad6 <menu+0xe3a>
			altLimit = altLimit + 1;
 8001a98:	4b56      	ldr	r3, [pc, #344]	@ (8001bf4 <menu+0xf58>)
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	1c51      	adds	r1, r2, #1
 8001aa0:	f8c7 1198 	str.w	r1, [r7, #408]	@ 0x198
 8001aa4:	f143 0300 	adc.w	r3, r3, #0
 8001aa8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001aac:	4b51      	ldr	r3, [pc, #324]	@ (8001bf4 <menu+0xf58>)
 8001aae:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 8001ab2:	e9c3 1200 	strd	r1, r2, [r3]

			if(altLimit > 1) {
 8001ab6:	4b4f      	ldr	r3, [pc, #316]	@ (8001bf4 <menu+0xf58>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	2a02      	cmp	r2, #2
 8001abe:	f173 0300 	sbcs.w	r3, r3, #0
 8001ac2:	d306      	bcc.n	8001ad2 <menu+0xe36>
				altLimit = 0;
 8001ac4:	494b      	ldr	r1, [pc, #300]	@ (8001bf4 <menu+0xf58>)
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8001ad2:	f002 fb11 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001ad6:	2104      	movs	r1, #4
 8001ad8:	4848      	ldr	r0, [pc, #288]	@ (8001bfc <menu+0xf60>)
 8001ada:	f008 fecf 	bl	800a87c <HAL_GPIO_ReadPin>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d128      	bne.n	8001b36 <menu+0xe9a>
 8001ae4:	4b46      	ldr	r3, [pc, #280]	@ (8001c00 <menu+0xf64>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	f083 0301 	eor.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d021      	beq.n	8001b36 <menu+0xe9a>
 8001af2:	4b44      	ldr	r3, [pc, #272]	@ (8001c04 <menu+0xf68>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	d11c      	bne.n	8001b36 <menu+0xe9a>
			altLimit = altLimit - 1;
 8001afc:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf4 <menu+0xf58>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	1e51      	subs	r1, r2, #1
 8001b04:	f8c7 1190 	str.w	r1, [r7, #400]	@ 0x190
 8001b08:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8001b0c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001b10:	4b38      	ldr	r3, [pc, #224]	@ (8001bf4 <menu+0xf58>)
 8001b12:	e9d7 1264 	ldrd	r1, r2, [r7, #400]	@ 0x190
 8001b16:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(altLimit > 0){
 8001b1a:	4b36      	ldr	r3, [pc, #216]	@ (8001bf4 <menu+0xf58>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	d006      	beq.n	8001b32 <menu+0xe96>
		   		altLimit = 1;
 8001b24:	4933      	ldr	r1, [pc, #204]	@ (8001bf4 <menu+0xf58>)
 8001b26:	f04f 0201 	mov.w	r2, #1
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8001b32:	f002 fae1 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b36:	2108      	movs	r1, #8
 8001b38:	4830      	ldr	r0, [pc, #192]	@ (8001bfc <menu+0xf60>)
 8001b3a:	f008 fe9f 	bl	800a87c <HAL_GPIO_ReadPin>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d13f      	bne.n	8001bc4 <menu+0xf28>
 8001b44:	4b2e      	ldr	r3, [pc, #184]	@ (8001c00 <menu+0xf64>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	f083 0301 	eor.w	r3, r3, #1
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d038      	beq.n	8001bc4 <menu+0xf28>
			eepromData[5] = altLimit;
 8001b52:	4b28      	ldr	r3, [pc, #160]	@ (8001bf4 <menu+0xf58>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	492b      	ldr	r1, [pc, #172]	@ (8001c08 <menu+0xf6c>)
 8001b5a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001b5e:	4b25      	ldr	r3, [pc, #148]	@ (8001bf4 <menu+0xf58>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	d118      	bne.n	8001b9a <menu+0xefe>
 8001b68:	4b28      	ldr	r3, [pc, #160]	@ (8001c0c <menu+0xf70>)
 8001b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	d005      	beq.n	8001b7e <menu+0xee2>
 8001b72:	4b26      	ldr	r3, [pc, #152]	@ (8001c0c <menu+0xf70>)
 8001b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b78:	1e91      	subs	r1, r2, #2
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	d10d      	bne.n	8001b9a <menu+0xefe>
				kapiTablaAcKonum = 3;
 8001b7e:	4923      	ldr	r1, [pc, #140]	@ (8001c0c <menu+0xf70>)
 8001b80:	f04f 0203 	mov.w	r2, #3
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[34] = kapiTablaAcKonum;
 8001b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c0c <menu+0xf70>)
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	491d      	ldr	r1, [pc, #116]	@ (8001c08 <menu+0xf6c>)
 8001b94:	e9c1 2344 	strd	r2, r3, [r1, #272]	@ 0x110
 8001b98:	e011      	b.n	8001bbe <menu+0xf22>
			} else if(altLimit == 0) {
 8001b9a:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <menu+0xf58>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	d10c      	bne.n	8001bbe <menu+0xf22>
				platformSilindirTipi = 0;
 8001ba4:	491a      	ldr	r1, [pc, #104]	@ (8001c10 <menu+0xf74>)
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[19] = platformSilindirTipi;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <menu+0xf74>)
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	4913      	ldr	r1, [pc, #76]	@ (8001c08 <menu+0xf6c>)
 8001bba:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
			}

			hafizaYaz = 1;
 8001bbe:	4a15      	ldr	r2, [pc, #84]	@ (8001c14 <menu+0xf78>)
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 6) {
 8001bc4:	4b14      	ldr	r3, [pc, #80]	@ (8001c18 <menu+0xf7c>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	1f91      	subs	r1, r2, #6
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	f040 80a5 	bne.w	8001d1c <menu+0x1080>
		lcd_print(1, 1, basincSalteriText);
 8001bd2:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <menu+0xf80>)
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f007 fcf5 	bl	80095c6 <lcd_print>

		if(basincSalteri == 0) {
 8001bdc:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <menu+0xf84>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	d120      	bne.n	8001c28 <menu+0xf8c>
			lcd_print(2, 1, pasifText);
 8001be6:	4a0f      	ldr	r2, [pc, #60]	@ (8001c24 <menu+0xf88>)
 8001be8:	2101      	movs	r1, #1
 8001bea:	2002      	movs	r0, #2
 8001bec:	f007 fceb 	bl	80095c6 <lcd_print>
 8001bf0:	e025      	b.n	8001c3e <menu+0xfa2>
 8001bf2:	bf00      	nop
 8001bf4:	200010e8 	.word	0x200010e8
 8001bf8:	200013e4 	.word	0x200013e4
 8001bfc:	40010800 	.word	0x40010800
 8001c00:	2000121b 	.word	0x2000121b
 8001c04:	200010c0 	.word	0x200010c0
 8001c08:	20000d08 	.word	0x20000d08
 8001c0c:	20001120 	.word	0x20001120
 8001c10:	20001150 	.word	0x20001150
 8001c14:	20001218 	.word	0x20001218
 8001c18:	200010b8 	.word	0x200010b8
 8001c1c:	20001420 	.word	0x20001420
 8001c20:	200010f0 	.word	0x200010f0
 8001c24:	200013d0 	.word	0x200013d0
		} else if(basincSalteri == 1) {
 8001c28:	4b54      	ldr	r3, [pc, #336]	@ (8001d7c <menu+0x10e0>)
 8001c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2e:	1e51      	subs	r1, r2, #1
 8001c30:	430b      	orrs	r3, r1
 8001c32:	d104      	bne.n	8001c3e <menu+0xfa2>
			lcd_print(2, 1, aktifText);
 8001c34:	4a52      	ldr	r2, [pc, #328]	@ (8001d80 <menu+0x10e4>)
 8001c36:	2101      	movs	r1, #1
 8001c38:	2002      	movs	r0, #2
 8001c3a:	f007 fcc4 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c3e:	2102      	movs	r1, #2
 8001c40:	4850      	ldr	r0, [pc, #320]	@ (8001d84 <menu+0x10e8>)
 8001c42:	f008 fe1b 	bl	800a87c <HAL_GPIO_ReadPin>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d125      	bne.n	8001c98 <menu+0xffc>
 8001c4c:	4b4e      	ldr	r3, [pc, #312]	@ (8001d88 <menu+0x10ec>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	f083 0301 	eor.w	r3, r3, #1
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d01e      	beq.n	8001c98 <menu+0xffc>
			basincSalteri = basincSalteri + 1;
 8001c5a:	4b48      	ldr	r3, [pc, #288]	@ (8001d7c <menu+0x10e0>)
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	1c51      	adds	r1, r2, #1
 8001c62:	f8c7 1188 	str.w	r1, [r7, #392]	@ 0x188
 8001c66:	f143 0300 	adc.w	r3, r3, #0
 8001c6a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8001c6e:	4b43      	ldr	r3, [pc, #268]	@ (8001d7c <menu+0x10e0>)
 8001c70:	e9d7 1262 	ldrd	r1, r2, [r7, #392]	@ 0x188
 8001c74:	e9c3 1200 	strd	r1, r2, [r3]

			if(basincSalteri > 1){
 8001c78:	4b40      	ldr	r3, [pc, #256]	@ (8001d7c <menu+0x10e0>)
 8001c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7e:	2a02      	cmp	r2, #2
 8001c80:	f173 0300 	sbcs.w	r3, r3, #0
 8001c84:	d306      	bcc.n	8001c94 <menu+0xff8>
				basincSalteri = 0;
 8001c86:	493d      	ldr	r1, [pc, #244]	@ (8001d7c <menu+0x10e0>)
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8001c94:	f002 fa30 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c98:	2104      	movs	r1, #4
 8001c9a:	483a      	ldr	r0, [pc, #232]	@ (8001d84 <menu+0x10e8>)
 8001c9c:	f008 fdee 	bl	800a87c <HAL_GPIO_ReadPin>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d123      	bne.n	8001cee <menu+0x1052>
 8001ca6:	4b38      	ldr	r3, [pc, #224]	@ (8001d88 <menu+0x10ec>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	f083 0301 	eor.w	r3, r3, #1
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d01c      	beq.n	8001cee <menu+0x1052>
			basincSalteri = basincSalteri - 1;
 8001cb4:	4b31      	ldr	r3, [pc, #196]	@ (8001d7c <menu+0x10e0>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	1e51      	subs	r1, r2, #1
 8001cbc:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
 8001cc0:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8001cc4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001cc8:	4b2c      	ldr	r3, [pc, #176]	@ (8001d7c <menu+0x10e0>)
 8001cca:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8001cce:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(basincSalteri > 0){
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <menu+0x10e0>)
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	d006      	beq.n	8001cea <menu+0x104e>
		   		basincSalteri = 1;
 8001cdc:	4927      	ldr	r1, [pc, #156]	@ (8001d7c <menu+0x10e0>)
 8001cde:	f04f 0201 	mov.w	r2, #1
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8001cea:	f002 fa05 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cee:	2108      	movs	r1, #8
 8001cf0:	4824      	ldr	r0, [pc, #144]	@ (8001d84 <menu+0x10e8>)
 8001cf2:	f008 fdc3 	bl	800a87c <HAL_GPIO_ReadPin>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d10f      	bne.n	8001d1c <menu+0x1080>
 8001cfc:	4b22      	ldr	r3, [pc, #136]	@ (8001d88 <menu+0x10ec>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	f083 0301 	eor.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d008      	beq.n	8001d1c <menu+0x1080>
			eepromData[6] = basincSalteri;
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d7c <menu+0x10e0>)
 8001d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d10:	491e      	ldr	r1, [pc, #120]	@ (8001d8c <menu+0x10f0>)
 8001d12:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
			hafizaYaz = 1;
 8001d16:	4a1e      	ldr	r2, [pc, #120]	@ (8001d90 <menu+0x10f4>)
 8001d18:	2301      	movs	r3, #1
 8001d1a:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 7) {
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d94 <menu+0x10f8>)
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	1fd1      	subs	r1, r2, #7
 8001d24:	430b      	orrs	r3, r1
 8001d26:	f040 80cf 	bne.w	8001ec8 <menu+0x122c>
		lcd_print(1, 1, kapiSecimleriText);
 8001d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d98 <menu+0x10fc>)
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f007 fc49 	bl	80095c6 <lcd_print>

		if(kapiSecimleri == 0) {
 8001d34:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <menu+0x1100>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	d105      	bne.n	8001d4a <menu+0x10ae>
			lcd_print(2, 1, pasifText);
 8001d3e:	4a18      	ldr	r2, [pc, #96]	@ (8001da0 <menu+0x1104>)
 8001d40:	2101      	movs	r1, #1
 8001d42:	2002      	movs	r0, #2
 8001d44:	f007 fc3f 	bl	80095c6 <lcd_print>
 8001d48:	e03b      	b.n	8001dc2 <menu+0x1126>
		} else if(kapiSecimleri == 1) {
 8001d4a:	4b14      	ldr	r3, [pc, #80]	@ (8001d9c <menu+0x1100>)
 8001d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d50:	1e51      	subs	r1, r2, #1
 8001d52:	430b      	orrs	r3, r1
 8001d54:	d105      	bne.n	8001d62 <menu+0x10c6>
			lcd_print(2, 1, katKapisiAktifText);
 8001d56:	4a13      	ldr	r2, [pc, #76]	@ (8001da4 <menu+0x1108>)
 8001d58:	2101      	movs	r1, #1
 8001d5a:	2002      	movs	r0, #2
 8001d5c:	f007 fc33 	bl	80095c6 <lcd_print>
 8001d60:	e02f      	b.n	8001dc2 <menu+0x1126>
		} else if(kapiSecimleri == 2) {
 8001d62:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <menu+0x1100>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	1e91      	subs	r1, r2, #2
 8001d6a:	430b      	orrs	r3, r1
 8001d6c:	d11e      	bne.n	8001dac <menu+0x1110>
			lcd_print(2, 1, tablaKapiAktifText);
 8001d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001da8 <menu+0x110c>)
 8001d70:	2101      	movs	r1, #1
 8001d72:	2002      	movs	r0, #2
 8001d74:	f007 fc27 	bl	80095c6 <lcd_print>
 8001d78:	e023      	b.n	8001dc2 <menu+0x1126>
 8001d7a:	bf00      	nop
 8001d7c:	200010f0 	.word	0x200010f0
 8001d80:	200013e4 	.word	0x200013e4
 8001d84:	40010800 	.word	0x40010800
 8001d88:	2000121b 	.word	0x2000121b
 8001d8c:	20000d08 	.word	0x20000d08
 8001d90:	20001218 	.word	0x20001218
 8001d94:	200010b8 	.word	0x200010b8
 8001d98:	20001434 	.word	0x20001434
 8001d9c:	200010f8 	.word	0x200010f8
 8001da0:	200013d0 	.word	0x200013d0
 8001da4:	20001448 	.word	0x20001448
 8001da8:	2000145c 	.word	0x2000145c
		} else if(kapiSecimleri == 3) {
 8001dac:	4ba1      	ldr	r3, [pc, #644]	@ (8002034 <menu+0x1398>)
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	1ed1      	subs	r1, r2, #3
 8001db4:	430b      	orrs	r3, r1
 8001db6:	d104      	bne.n	8001dc2 <menu+0x1126>
			lcd_print(2, 1, katArtiTablaAktifText);
 8001db8:	4a9f      	ldr	r2, [pc, #636]	@ (8002038 <menu+0x139c>)
 8001dba:	2101      	movs	r1, #1
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	f007 fc02 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dc2:	2102      	movs	r1, #2
 8001dc4:	489d      	ldr	r0, [pc, #628]	@ (800203c <menu+0x13a0>)
 8001dc6:	f008 fd59 	bl	800a87c <HAL_GPIO_ReadPin>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d125      	bne.n	8001e1c <menu+0x1180>
 8001dd0:	4b9b      	ldr	r3, [pc, #620]	@ (8002040 <menu+0x13a4>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	f083 0301 	eor.w	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d01e      	beq.n	8001e1c <menu+0x1180>
			kapiSecimleri = kapiSecimleri + 1;
 8001dde:	4b95      	ldr	r3, [pc, #596]	@ (8002034 <menu+0x1398>)
 8001de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de4:	1c51      	adds	r1, r2, #1
 8001de6:	f8c7 1178 	str.w	r1, [r7, #376]	@ 0x178
 8001dea:	f143 0300 	adc.w	r3, r3, #0
 8001dee:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001df2:	4b90      	ldr	r3, [pc, #576]	@ (8002034 <menu+0x1398>)
 8001df4:	e9d7 125e 	ldrd	r1, r2, [r7, #376]	@ 0x178
 8001df8:	e9c3 1200 	strd	r1, r2, [r3]

			if(kapiSecimleri > 3){
 8001dfc:	4b8d      	ldr	r3, [pc, #564]	@ (8002034 <menu+0x1398>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	2a04      	cmp	r2, #4
 8001e04:	f173 0300 	sbcs.w	r3, r3, #0
 8001e08:	d306      	bcc.n	8001e18 <menu+0x117c>
				kapiSecimleri = 0;
 8001e0a:	498a      	ldr	r1, [pc, #552]	@ (8002034 <menu+0x1398>)
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8001e18:	f002 f96e 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	4887      	ldr	r0, [pc, #540]	@ (800203c <menu+0x13a0>)
 8001e20:	f008 fd2c 	bl	800a87c <HAL_GPIO_ReadPin>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d125      	bne.n	8001e76 <menu+0x11da>
 8001e2a:	4b85      	ldr	r3, [pc, #532]	@ (8002040 <menu+0x13a4>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	f083 0301 	eor.w	r3, r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d01e      	beq.n	8001e76 <menu+0x11da>
			kapiSecimleri = kapiSecimleri - 1;
 8001e38:	4b7e      	ldr	r3, [pc, #504]	@ (8002034 <menu+0x1398>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	1e51      	subs	r1, r2, #1
 8001e40:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
 8001e44:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8001e48:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8001e4c:	4b79      	ldr	r3, [pc, #484]	@ (8002034 <menu+0x1398>)
 8001e4e:	e9d7 125c 	ldrd	r1, r2, [r7, #368]	@ 0x170
 8001e52:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(kapiSecimleri > 4){
 8001e56:	4b77      	ldr	r3, [pc, #476]	@ (8002034 <menu+0x1398>)
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	2a05      	cmp	r2, #5
 8001e5e:	f173 0300 	sbcs.w	r3, r3, #0
 8001e62:	d306      	bcc.n	8001e72 <menu+0x11d6>
		   		kapiSecimleri = 3;
 8001e64:	4973      	ldr	r1, [pc, #460]	@ (8002034 <menu+0x1398>)
 8001e66:	f04f 0203 	mov.w	r2, #3
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8001e72:	f002 f941 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e76:	2108      	movs	r1, #8
 8001e78:	4870      	ldr	r0, [pc, #448]	@ (800203c <menu+0x13a0>)
 8001e7a:	f008 fcff 	bl	800a87c <HAL_GPIO_ReadPin>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d121      	bne.n	8001ec8 <menu+0x122c>
 8001e84:	4b6e      	ldr	r3, [pc, #440]	@ (8002040 <menu+0x13a4>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	f083 0301 	eor.w	r3, r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d01a      	beq.n	8001ec8 <menu+0x122c>
			eepromData[7] = kapiSecimleri;
 8001e92:	4b68      	ldr	r3, [pc, #416]	@ (8002034 <menu+0x1398>)
 8001e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e98:	496a      	ldr	r1, [pc, #424]	@ (8002044 <menu+0x13a8>)
 8001e9a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

			if(kapiSecimleri >= 1) {
 8001e9e:	4b65      	ldr	r3, [pc, #404]	@ (8002034 <menu+0x1398>)
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	d00c      	beq.n	8001ec2 <menu+0x1226>
				altLimit = 1;
 8001ea8:	4967      	ldr	r1, [pc, #412]	@ (8002048 <menu+0x13ac>)
 8001eaa:	f04f 0201 	mov.w	r2, #1
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[5] = altLimit;
 8001eb6:	4b64      	ldr	r3, [pc, #400]	@ (8002048 <menu+0x13ac>)
 8001eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebc:	4961      	ldr	r1, [pc, #388]	@ (8002044 <menu+0x13a8>)
 8001ebe:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
			}
			hafizaYaz = 1;
 8001ec2:	4a62      	ldr	r2, [pc, #392]	@ (800204c <menu+0x13b0>)
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 8) {
 8001ec8:	4b61      	ldr	r3, [pc, #388]	@ (8002050 <menu+0x13b4>)
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	f1a2 0108 	sub.w	r1, r2, #8
 8001ed2:	430b      	orrs	r3, r1
 8001ed4:	f040 808a 	bne.w	8001fec <menu+0x1350>
		lcd_print(1, 1, kapiAcmaTipiText);
 8001ed8:	4a5e      	ldr	r2, [pc, #376]	@ (8002054 <menu+0x13b8>)
 8001eda:	2101      	movs	r1, #1
 8001edc:	2001      	movs	r0, #1
 8001ede:	f007 fb72 	bl	80095c6 <lcd_print>

		if(kapiAcTipi == 0) {
 8001ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8002058 <menu+0x13bc>)
 8001ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	d105      	bne.n	8001ef8 <menu+0x125c>
			lcd_print(2, 1, kapiButonuESPText);
 8001eec:	4a5b      	ldr	r2, [pc, #364]	@ (800205c <menu+0x13c0>)
 8001eee:	2101      	movs	r1, #1
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	f007 fb68 	bl	80095c6 <lcd_print>
 8001ef6:	e00a      	b.n	8001f0e <menu+0x1272>
		} else if(kapiAcTipi == 1){
 8001ef8:	4b57      	ldr	r3, [pc, #348]	@ (8002058 <menu+0x13bc>)
 8001efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efe:	1e51      	subs	r1, r2, #1
 8001f00:	430b      	orrs	r3, r1
 8001f02:	d104      	bne.n	8001f0e <menu+0x1272>
			lcd_print(2, 1, katButonuEXTText);
 8001f04:	4a56      	ldr	r2, [pc, #344]	@ (8002060 <menu+0x13c4>)
 8001f06:	2101      	movs	r1, #1
 8001f08:	2002      	movs	r0, #2
 8001f0a:	f007 fb5c 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f0e:	2102      	movs	r1, #2
 8001f10:	484a      	ldr	r0, [pc, #296]	@ (800203c <menu+0x13a0>)
 8001f12:	f008 fcb3 	bl	800a87c <HAL_GPIO_ReadPin>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d125      	bne.n	8001f68 <menu+0x12cc>
 8001f1c:	4b48      	ldr	r3, [pc, #288]	@ (8002040 <menu+0x13a4>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	f083 0301 	eor.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d01e      	beq.n	8001f68 <menu+0x12cc>
			kapiAcTipi = kapiAcTipi + 1;
 8001f2a:	4b4b      	ldr	r3, [pc, #300]	@ (8002058 <menu+0x13bc>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	1c51      	adds	r1, r2, #1
 8001f32:	f8c7 1168 	str.w	r1, [r7, #360]	@ 0x168
 8001f36:	f143 0300 	adc.w	r3, r3, #0
 8001f3a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001f3e:	4b46      	ldr	r3, [pc, #280]	@ (8002058 <menu+0x13bc>)
 8001f40:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8001f44:	e9c3 1200 	strd	r1, r2, [r3]

			if(kapiAcTipi > 1){
 8001f48:	4b43      	ldr	r3, [pc, #268]	@ (8002058 <menu+0x13bc>)
 8001f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4e:	2a02      	cmp	r2, #2
 8001f50:	f173 0300 	sbcs.w	r3, r3, #0
 8001f54:	d306      	bcc.n	8001f64 <menu+0x12c8>
				kapiAcTipi = 0;
 8001f56:	4940      	ldr	r1, [pc, #256]	@ (8002058 <menu+0x13bc>)
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8001f64:	f002 f8c8 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f68:	2104      	movs	r1, #4
 8001f6a:	4834      	ldr	r0, [pc, #208]	@ (800203c <menu+0x13a0>)
 8001f6c:	f008 fc86 	bl	800a87c <HAL_GPIO_ReadPin>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d123      	bne.n	8001fbe <menu+0x1322>
 8001f76:	4b32      	ldr	r3, [pc, #200]	@ (8002040 <menu+0x13a4>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	f083 0301 	eor.w	r3, r3, #1
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d01c      	beq.n	8001fbe <menu+0x1322>
			kapiAcTipi = kapiAcTipi - 1;
 8001f84:	4b34      	ldr	r3, [pc, #208]	@ (8002058 <menu+0x13bc>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8a:	1e51      	subs	r1, r2, #1
 8001f8c:	f8c7 1160 	str.w	r1, [r7, #352]	@ 0x160
 8001f90:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8001f94:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001f98:	4b2f      	ldr	r3, [pc, #188]	@ (8002058 <menu+0x13bc>)
 8001f9a:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 8001f9e:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(kapiAcTipi > 0){
 8001fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8002058 <menu+0x13bc>)
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	d006      	beq.n	8001fba <menu+0x131e>
		   		kapiAcTipi = 1;
 8001fac:	492a      	ldr	r1, [pc, #168]	@ (8002058 <menu+0x13bc>)
 8001fae:	f04f 0201 	mov.w	r2, #1
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8001fba:	f002 f89d 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fbe:	2108      	movs	r1, #8
 8001fc0:	481e      	ldr	r0, [pc, #120]	@ (800203c <menu+0x13a0>)
 8001fc2:	f008 fc5b 	bl	800a87c <HAL_GPIO_ReadPin>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d10f      	bne.n	8001fec <menu+0x1350>
 8001fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8002040 <menu+0x13a4>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	f083 0301 	eor.w	r3, r3, #1
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d008      	beq.n	8001fec <menu+0x1350>
			eepromData[36] = kapiAcTipi;
 8001fda:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <menu+0x13bc>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	4918      	ldr	r1, [pc, #96]	@ (8002044 <menu+0x13a8>)
 8001fe2:	e9c1 2348 	strd	r2, r3, [r1, #288]	@ 0x120
			hafizaYaz = 1;
 8001fe6:	4a19      	ldr	r2, [pc, #100]	@ (800204c <menu+0x13b0>)
 8001fe8:	2301      	movs	r3, #1
 8001fea:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 9) {
 8001fec:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <menu+0x13b4>)
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	f1a2 0109 	sub.w	r1, r2, #9
 8001ff6:	430b      	orrs	r3, r1
 8001ff8:	f040 80b8 	bne.w	800216c <menu+0x14d0>
		lcd_print(1, 1, birKatKapiTipiText);
 8001ffc:	4a19      	ldr	r2, [pc, #100]	@ (8002064 <menu+0x13c8>)
 8001ffe:	2101      	movs	r1, #1
 8002000:	2001      	movs	r0, #1
 8002002:	f007 fae0 	bl	80095c6 <lcd_print>

		if(kapi1Tip == 0) {
 8002006:	4b18      	ldr	r3, [pc, #96]	@ (8002068 <menu+0x13cc>)
 8002008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200c:	4313      	orrs	r3, r2
 800200e:	d105      	bne.n	800201c <menu+0x1380>
			lcd_print(2, 1, prudhomeTextGN);
 8002010:	4a16      	ldr	r2, [pc, #88]	@ (800206c <menu+0x13d0>)
 8002012:	2101      	movs	r1, #1
 8002014:	2002      	movs	r0, #2
 8002016:	f007 fad6 	bl	80095c6 <lcd_print>
 800201a:	e036      	b.n	800208a <menu+0x13ee>
		} else if(kapi1Tip == 1) {
 800201c:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <menu+0x13cc>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	1e51      	subs	r1, r2, #1
 8002024:	430b      	orrs	r3, r1
 8002026:	d125      	bne.n	8002074 <menu+0x13d8>
			lcd_print(2, 1, butonKontrolluText);
 8002028:	4a11      	ldr	r2, [pc, #68]	@ (8002070 <menu+0x13d4>)
 800202a:	2101      	movs	r1, #1
 800202c:	2002      	movs	r0, #2
 800202e:	f007 faca 	bl	80095c6 <lcd_print>
 8002032:	e02a      	b.n	800208a <menu+0x13ee>
 8002034:	200010f8 	.word	0x200010f8
 8002038:	20001470 	.word	0x20001470
 800203c:	40010800 	.word	0x40010800
 8002040:	2000121b 	.word	0x2000121b
 8002044:	20000d08 	.word	0x20000d08
 8002048:	200010e8 	.word	0x200010e8
 800204c:	20001218 	.word	0x20001218
 8002050:	200010b8 	.word	0x200010b8
 8002054:	20001484 	.word	0x20001484
 8002058:	20001118 	.word	0x20001118
 800205c:	20001498 	.word	0x20001498
 8002060:	200014ac 	.word	0x200014ac
 8002064:	200014c0 	.word	0x200014c0
 8002068:	20001100 	.word	0x20001100
 800206c:	20000094 	.word	0x20000094
 8002070:	200014d4 	.word	0x200014d4
		} else if(kapi1Tip == 2) {
 8002074:	4b9d      	ldr	r3, [pc, #628]	@ (80022ec <menu+0x1650>)
 8002076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207a:	1e91      	subs	r1, r2, #2
 800207c:	430b      	orrs	r3, r1
 800207e:	d104      	bne.n	800208a <menu+0x13ee>
			lcd_print(2, 1, pizzattoTextGN);
 8002080:	4a9b      	ldr	r2, [pc, #620]	@ (80022f0 <menu+0x1654>)
 8002082:	2101      	movs	r1, #1
 8002084:	2002      	movs	r0, #2
 8002086:	f007 fa9e 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800208a:	2102      	movs	r1, #2
 800208c:	4899      	ldr	r0, [pc, #612]	@ (80022f4 <menu+0x1658>)
 800208e:	f008 fbf5 	bl	800a87c <HAL_GPIO_ReadPin>
 8002092:	4603      	mov	r3, r0
 8002094:	2b01      	cmp	r3, #1
 8002096:	d125      	bne.n	80020e4 <menu+0x1448>
 8002098:	4b97      	ldr	r3, [pc, #604]	@ (80022f8 <menu+0x165c>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	f083 0301 	eor.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01e      	beq.n	80020e4 <menu+0x1448>
			kapi1Tip = kapi1Tip + 1;
 80020a6:	4b91      	ldr	r3, [pc, #580]	@ (80022ec <menu+0x1650>)
 80020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ac:	1c51      	adds	r1, r2, #1
 80020ae:	f8c7 1158 	str.w	r1, [r7, #344]	@ 0x158
 80020b2:	f143 0300 	adc.w	r3, r3, #0
 80020b6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80020ba:	4b8c      	ldr	r3, [pc, #560]	@ (80022ec <menu+0x1650>)
 80020bc:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	@ 0x158
 80020c0:	e9c3 1200 	strd	r1, r2, [r3]

			if(kapi1Tip > 2){
 80020c4:	4b89      	ldr	r3, [pc, #548]	@ (80022ec <menu+0x1650>)
 80020c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ca:	2a03      	cmp	r2, #3
 80020cc:	f173 0300 	sbcs.w	r3, r3, #0
 80020d0:	d306      	bcc.n	80020e0 <menu+0x1444>
				kapi1Tip = 0;
 80020d2:	4986      	ldr	r1, [pc, #536]	@ (80022ec <menu+0x1650>)
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 80020e0:	f002 f80a 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020e4:	2104      	movs	r1, #4
 80020e6:	4883      	ldr	r0, [pc, #524]	@ (80022f4 <menu+0x1658>)
 80020e8:	f008 fbc8 	bl	800a87c <HAL_GPIO_ReadPin>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d125      	bne.n	800213e <menu+0x14a2>
 80020f2:	4b81      	ldr	r3, [pc, #516]	@ (80022f8 <menu+0x165c>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	f083 0301 	eor.w	r3, r3, #1
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01e      	beq.n	800213e <menu+0x14a2>
			kapi1Tip = kapi1Tip - 1;
 8002100:	4b7a      	ldr	r3, [pc, #488]	@ (80022ec <menu+0x1650>)
 8002102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002106:	1e51      	subs	r1, r2, #1
 8002108:	f8c7 1150 	str.w	r1, [r7, #336]	@ 0x150
 800210c:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8002110:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002114:	4b75      	ldr	r3, [pc, #468]	@ (80022ec <menu+0x1650>)
 8002116:	e9d7 1254 	ldrd	r1, r2, [r7, #336]	@ 0x150
 800211a:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(kapi1Tip > 3){
 800211e:	4b73      	ldr	r3, [pc, #460]	@ (80022ec <menu+0x1650>)
 8002120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002124:	2a04      	cmp	r2, #4
 8002126:	f173 0300 	sbcs.w	r3, r3, #0
 800212a:	d306      	bcc.n	800213a <menu+0x149e>
		   		kapi1Tip = 2;
 800212c:	496f      	ldr	r1, [pc, #444]	@ (80022ec <menu+0x1650>)
 800212e:	f04f 0202 	mov.w	r2, #2
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 800213a:	f001 ffdd 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800213e:	2108      	movs	r1, #8
 8002140:	486c      	ldr	r0, [pc, #432]	@ (80022f4 <menu+0x1658>)
 8002142:	f008 fb9b 	bl	800a87c <HAL_GPIO_ReadPin>
 8002146:	4603      	mov	r3, r0
 8002148:	2b01      	cmp	r3, #1
 800214a:	d10f      	bne.n	800216c <menu+0x14d0>
 800214c:	4b6a      	ldr	r3, [pc, #424]	@ (80022f8 <menu+0x165c>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	f083 0301 	eor.w	r3, r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d008      	beq.n	800216c <menu+0x14d0>
			eepromData[8] = kapi1Tip;
 800215a:	4b64      	ldr	r3, [pc, #400]	@ (80022ec <menu+0x1650>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	4966      	ldr	r1, [pc, #408]	@ (80022fc <menu+0x1660>)
 8002162:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
			hafizaYaz = 1;
 8002166:	4a66      	ldr	r2, [pc, #408]	@ (8002300 <menu+0x1664>)
 8002168:	2301      	movs	r3, #1
 800216a:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 10) {
 800216c:	4b65      	ldr	r3, [pc, #404]	@ (8002304 <menu+0x1668>)
 800216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002172:	f1a2 010a 	sub.w	r1, r2, #10
 8002176:	430b      	orrs	r3, r1
 8002178:	f040 8093 	bne.w	80022a2 <menu+0x1606>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 800217c:	4a62      	ldr	r2, [pc, #392]	@ (8002308 <menu+0x166c>)
 800217e:	2101      	movs	r1, #1
 8002180:	2001      	movs	r0, #1
 8002182:	f007 fa20 	bl	80095c6 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002186:	4a61      	ldr	r2, [pc, #388]	@ (800230c <menu+0x1670>)
 8002188:	2101      	movs	r1, #1
 800218a:	2002      	movs	r0, #2
 800218c:	f007 fa1b 	bl	80095c6 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 8002190:	4b5f      	ldr	r3, [pc, #380]	@ (8002310 <menu+0x1674>)
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	4613      	mov	r3, r2
 8002198:	220a      	movs	r2, #10
 800219a:	495e      	ldr	r1, [pc, #376]	@ (8002314 <menu+0x1678>)
 800219c:	4618      	mov	r0, r3
 800219e:	f00a ff0f 	bl	800cfc0 <itoa>
		lcd_print(2,16,snum);
 80021a2:	4a5c      	ldr	r2, [pc, #368]	@ (8002314 <menu+0x1678>)
 80021a4:	2110      	movs	r1, #16
 80021a6:	2002      	movs	r0, #2
 80021a8:	f007 fa0d 	bl	80095c6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80021ac:	2102      	movs	r1, #2
 80021ae:	4851      	ldr	r0, [pc, #324]	@ (80022f4 <menu+0x1658>)
 80021b0:	f008 fb64 	bl	800a87c <HAL_GPIO_ReadPin>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d12a      	bne.n	8002210 <menu+0x1574>
 80021ba:	4b4f      	ldr	r3, [pc, #316]	@ (80022f8 <menu+0x165c>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	f083 0301 	eor.w	r3, r3, #1
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d023      	beq.n	8002210 <menu+0x1574>
 80021c8:	4b48      	ldr	r3, [pc, #288]	@ (80022ec <menu+0x1650>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	d11e      	bne.n	8002210 <menu+0x1574>
			kapi1AcSure = kapi1AcSure + 1;
 80021d2:	4b4f      	ldr	r3, [pc, #316]	@ (8002310 <menu+0x1674>)
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	1c51      	adds	r1, r2, #1
 80021da:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 80021de:	f143 0300 	adc.w	r3, r3, #0
 80021e2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80021e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002310 <menu+0x1674>)
 80021e8:	e9d7 1252 	ldrd	r1, r2, [r7, #328]	@ 0x148
 80021ec:	e9c3 1200 	strd	r1, r2, [r3]

			if(kapi1AcSure > 5){
 80021f0:	4b47      	ldr	r3, [pc, #284]	@ (8002310 <menu+0x1674>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	2a06      	cmp	r2, #6
 80021f8:	f173 0300 	sbcs.w	r3, r3, #0
 80021fc:	d306      	bcc.n	800220c <menu+0x1570>
				kapi1AcSure = 0;
 80021fe:	4944      	ldr	r1, [pc, #272]	@ (8002310 <menu+0x1674>)
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 800220c:	f001 ff74 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002210:	2104      	movs	r1, #4
 8002212:	4838      	ldr	r0, [pc, #224]	@ (80022f4 <menu+0x1658>)
 8002214:	f008 fb32 	bl	800a87c <HAL_GPIO_ReadPin>
 8002218:	4603      	mov	r3, r0
 800221a:	2b01      	cmp	r3, #1
 800221c:	d12a      	bne.n	8002274 <menu+0x15d8>
 800221e:	4b36      	ldr	r3, [pc, #216]	@ (80022f8 <menu+0x165c>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	f083 0301 	eor.w	r3, r3, #1
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d023      	beq.n	8002274 <menu+0x15d8>
 800222c:	4b2f      	ldr	r3, [pc, #188]	@ (80022ec <menu+0x1650>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	4313      	orrs	r3, r2
 8002234:	d11e      	bne.n	8002274 <menu+0x15d8>
			kapi1AcSure = kapi1AcSure - 1;
 8002236:	4b36      	ldr	r3, [pc, #216]	@ (8002310 <menu+0x1674>)
 8002238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223c:	1e51      	subs	r1, r2, #1
 800223e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
 8002242:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8002246:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800224a:	4b31      	ldr	r3, [pc, #196]	@ (8002310 <menu+0x1674>)
 800224c:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8002250:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(kapi1AcSure > 6){
 8002254:	4b2e      	ldr	r3, [pc, #184]	@ (8002310 <menu+0x1674>)
 8002256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225a:	2a07      	cmp	r2, #7
 800225c:	f173 0300 	sbcs.w	r3, r3, #0
 8002260:	d306      	bcc.n	8002270 <menu+0x15d4>
		   		kapi1AcSure = 5;
 8002262:	492b      	ldr	r1, [pc, #172]	@ (8002310 <menu+0x1674>)
 8002264:	f04f 0205 	mov.w	r2, #5
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8002270:	f001 ff42 	bl	80040f8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002274:	2108      	movs	r1, #8
 8002276:	481f      	ldr	r0, [pc, #124]	@ (80022f4 <menu+0x1658>)
 8002278:	f008 fb00 	bl	800a87c <HAL_GPIO_ReadPin>
 800227c:	4603      	mov	r3, r0
 800227e:	2b01      	cmp	r3, #1
 8002280:	d10f      	bne.n	80022a2 <menu+0x1606>
 8002282:	4b1d      	ldr	r3, [pc, #116]	@ (80022f8 <menu+0x165c>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	f083 0301 	eor.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <menu+0x1606>
			eepromData[9] = kapi1AcSure;
 8002290:	4b1f      	ldr	r3, [pc, #124]	@ (8002310 <menu+0x1674>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	4919      	ldr	r1, [pc, #100]	@ (80022fc <menu+0x1660>)
 8002298:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
			hafizaYaz = 1;
 800229c:	4a18      	ldr	r2, [pc, #96]	@ (8002300 <menu+0x1664>)
 800229e:	2301      	movs	r3, #1
 80022a0:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 11) {
 80022a2:	4b18      	ldr	r3, [pc, #96]	@ (8002304 <menu+0x1668>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	f1a2 010b 	sub.w	r1, r2, #11
 80022ac:	430b      	orrs	r3, r1
 80022ae:	f040 80b7 	bne.w	8002420 <menu+0x1784>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 80022b2:	4a19      	ldr	r2, [pc, #100]	@ (8002318 <menu+0x167c>)
 80022b4:	2101      	movs	r1, #1
 80022b6:	2001      	movs	r0, #1
 80022b8:	f007 f985 	bl	80095c6 <lcd_print>

		if(kapi2Tip == 0) {
 80022bc:	4b17      	ldr	r3, [pc, #92]	@ (800231c <menu+0x1680>)
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	d105      	bne.n	80022d2 <menu+0x1636>
			lcd_print(2, 1, prudhomeTextGN);
 80022c6:	4a16      	ldr	r2, [pc, #88]	@ (8002320 <menu+0x1684>)
 80022c8:	2101      	movs	r1, #1
 80022ca:	2002      	movs	r0, #2
 80022cc:	f007 f97b 	bl	80095c6 <lcd_print>
 80022d0:	e035      	b.n	800233e <menu+0x16a2>
		} else if(kapi2Tip == 1) {
 80022d2:	4b12      	ldr	r3, [pc, #72]	@ (800231c <menu+0x1680>)
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	1e51      	subs	r1, r2, #1
 80022da:	430b      	orrs	r3, r1
 80022dc:	d124      	bne.n	8002328 <menu+0x168c>
			lcd_print(2, 1, butonKontrolluText);
 80022de:	4a11      	ldr	r2, [pc, #68]	@ (8002324 <menu+0x1688>)
 80022e0:	2101      	movs	r1, #1
 80022e2:	2002      	movs	r0, #2
 80022e4:	f007 f96f 	bl	80095c6 <lcd_print>
 80022e8:	e029      	b.n	800233e <menu+0x16a2>
 80022ea:	bf00      	nop
 80022ec:	20001100 	.word	0x20001100
 80022f0:	200000a8 	.word	0x200000a8
 80022f4:	40010800 	.word	0x40010800
 80022f8:	2000121b 	.word	0x2000121b
 80022fc:	20000d08 	.word	0x20000d08
 8002300:	20001218 	.word	0x20001218
 8002304:	200010b8 	.word	0x200010b8
 8002308:	200014e8 	.word	0x200014e8
 800230c:	200014fc 	.word	0x200014fc
 8002310:	20001180 	.word	0x20001180
 8002314:	20001078 	.word	0x20001078
 8002318:	20001510 	.word	0x20001510
 800231c:	20001108 	.word	0x20001108
 8002320:	20000094 	.word	0x20000094
 8002324:	200014d4 	.word	0x200014d4
		} else if(kapi2Tip == 2) {
 8002328:	4b9d      	ldr	r3, [pc, #628]	@ (80025a0 <menu+0x1904>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	1e91      	subs	r1, r2, #2
 8002330:	430b      	orrs	r3, r1
 8002332:	d104      	bne.n	800233e <menu+0x16a2>
			lcd_print(2, 1, pizzattoTextGN);
 8002334:	4a9b      	ldr	r2, [pc, #620]	@ (80025a4 <menu+0x1908>)
 8002336:	2101      	movs	r1, #1
 8002338:	2002      	movs	r0, #2
 800233a:	f007 f944 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800233e:	2102      	movs	r1, #2
 8002340:	4899      	ldr	r0, [pc, #612]	@ (80025a8 <menu+0x190c>)
 8002342:	f008 fa9b 	bl	800a87c <HAL_GPIO_ReadPin>
 8002346:	4603      	mov	r3, r0
 8002348:	2b01      	cmp	r3, #1
 800234a:	d125      	bne.n	8002398 <menu+0x16fc>
 800234c:	4b97      	ldr	r3, [pc, #604]	@ (80025ac <menu+0x1910>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	f083 0301 	eor.w	r3, r3, #1
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d01e      	beq.n	8002398 <menu+0x16fc>
			kapi2Tip = kapi2Tip + 1;
 800235a:	4b91      	ldr	r3, [pc, #580]	@ (80025a0 <menu+0x1904>)
 800235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002360:	1c51      	adds	r1, r2, #1
 8002362:	f8c7 1138 	str.w	r1, [r7, #312]	@ 0x138
 8002366:	f143 0300 	adc.w	r3, r3, #0
 800236a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800236e:	4b8c      	ldr	r3, [pc, #560]	@ (80025a0 <menu+0x1904>)
 8002370:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8002374:	e9c3 1200 	strd	r1, r2, [r3]

			if(kapi2Tip > 2){
 8002378:	4b89      	ldr	r3, [pc, #548]	@ (80025a0 <menu+0x1904>)
 800237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237e:	2a03      	cmp	r2, #3
 8002380:	f173 0300 	sbcs.w	r3, r3, #0
 8002384:	d306      	bcc.n	8002394 <menu+0x16f8>
				kapi2Tip = 0;
 8002386:	4986      	ldr	r1, [pc, #536]	@ (80025a0 <menu+0x1904>)
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8002394:	f001 feb0 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002398:	2104      	movs	r1, #4
 800239a:	4883      	ldr	r0, [pc, #524]	@ (80025a8 <menu+0x190c>)
 800239c:	f008 fa6e 	bl	800a87c <HAL_GPIO_ReadPin>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d125      	bne.n	80023f2 <menu+0x1756>
 80023a6:	4b81      	ldr	r3, [pc, #516]	@ (80025ac <menu+0x1910>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	f083 0301 	eor.w	r3, r3, #1
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01e      	beq.n	80023f2 <menu+0x1756>
			kapi2Tip = kapi2Tip - 1;
 80023b4:	4b7a      	ldr	r3, [pc, #488]	@ (80025a0 <menu+0x1904>)
 80023b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ba:	1e51      	subs	r1, r2, #1
 80023bc:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 80023c0:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 80023c4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80023c8:	4b75      	ldr	r3, [pc, #468]	@ (80025a0 <menu+0x1904>)
 80023ca:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 80023ce:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(kapi2Tip > 3){
 80023d2:	4b73      	ldr	r3, [pc, #460]	@ (80025a0 <menu+0x1904>)
 80023d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d8:	2a04      	cmp	r2, #4
 80023da:	f173 0300 	sbcs.w	r3, r3, #0
 80023de:	d306      	bcc.n	80023ee <menu+0x1752>
		   		kapi2Tip = 2;
 80023e0:	496f      	ldr	r1, [pc, #444]	@ (80025a0 <menu+0x1904>)
 80023e2:	f04f 0202 	mov.w	r2, #2
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 80023ee:	f001 fe83 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023f2:	2108      	movs	r1, #8
 80023f4:	486c      	ldr	r0, [pc, #432]	@ (80025a8 <menu+0x190c>)
 80023f6:	f008 fa41 	bl	800a87c <HAL_GPIO_ReadPin>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d10f      	bne.n	8002420 <menu+0x1784>
 8002400:	4b6a      	ldr	r3, [pc, #424]	@ (80025ac <menu+0x1910>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	f083 0301 	eor.w	r3, r3, #1
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <menu+0x1784>
			eepromData[10] = kapi2Tip;
 800240e:	4b64      	ldr	r3, [pc, #400]	@ (80025a0 <menu+0x1904>)
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	4966      	ldr	r1, [pc, #408]	@ (80025b0 <menu+0x1914>)
 8002416:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
			hafizaYaz = 1;
 800241a:	4a66      	ldr	r2, [pc, #408]	@ (80025b4 <menu+0x1918>)
 800241c:	2301      	movs	r3, #1
 800241e:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 12) {
 8002420:	4b65      	ldr	r3, [pc, #404]	@ (80025b8 <menu+0x191c>)
 8002422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002426:	f1a2 010c 	sub.w	r1, r2, #12
 800242a:	430b      	orrs	r3, r1
 800242c:	f040 8093 	bne.w	8002556 <menu+0x18ba>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 8002430:	4a62      	ldr	r2, [pc, #392]	@ (80025bc <menu+0x1920>)
 8002432:	2101      	movs	r1, #1
 8002434:	2001      	movs	r0, #1
 8002436:	f007 f8c6 	bl	80095c6 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800243a:	4a61      	ldr	r2, [pc, #388]	@ (80025c0 <menu+0x1924>)
 800243c:	2101      	movs	r1, #1
 800243e:	2002      	movs	r0, #2
 8002440:	f007 f8c1 	bl	80095c6 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 8002444:	4b5f      	ldr	r3, [pc, #380]	@ (80025c4 <menu+0x1928>)
 8002446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244a:	4613      	mov	r3, r2
 800244c:	220a      	movs	r2, #10
 800244e:	495e      	ldr	r1, [pc, #376]	@ (80025c8 <menu+0x192c>)
 8002450:	4618      	mov	r0, r3
 8002452:	f00a fdb5 	bl	800cfc0 <itoa>
		lcd_print(2,16,snum);
 8002456:	4a5c      	ldr	r2, [pc, #368]	@ (80025c8 <menu+0x192c>)
 8002458:	2110      	movs	r1, #16
 800245a:	2002      	movs	r0, #2
 800245c:	f007 f8b3 	bl	80095c6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002460:	2102      	movs	r1, #2
 8002462:	4851      	ldr	r0, [pc, #324]	@ (80025a8 <menu+0x190c>)
 8002464:	f008 fa0a 	bl	800a87c <HAL_GPIO_ReadPin>
 8002468:	4603      	mov	r3, r0
 800246a:	2b01      	cmp	r3, #1
 800246c:	d12a      	bne.n	80024c4 <menu+0x1828>
 800246e:	4b4f      	ldr	r3, [pc, #316]	@ (80025ac <menu+0x1910>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	f083 0301 	eor.w	r3, r3, #1
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d023      	beq.n	80024c4 <menu+0x1828>
 800247c:	4b48      	ldr	r3, [pc, #288]	@ (80025a0 <menu+0x1904>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	4313      	orrs	r3, r2
 8002484:	d11e      	bne.n	80024c4 <menu+0x1828>
			kapi2AcSure = kapi2AcSure + 1;
 8002486:	4b4f      	ldr	r3, [pc, #316]	@ (80025c4 <menu+0x1928>)
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	1c51      	adds	r1, r2, #1
 800248e:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 8002492:	f143 0300 	adc.w	r3, r3, #0
 8002496:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800249a:	4b4a      	ldr	r3, [pc, #296]	@ (80025c4 <menu+0x1928>)
 800249c:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80024a0:	e9c3 1200 	strd	r1, r2, [r3]

			if(kapi2AcSure > 5) {
 80024a4:	4b47      	ldr	r3, [pc, #284]	@ (80025c4 <menu+0x1928>)
 80024a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024aa:	2a06      	cmp	r2, #6
 80024ac:	f173 0300 	sbcs.w	r3, r3, #0
 80024b0:	d306      	bcc.n	80024c0 <menu+0x1824>
				kapi2AcSure = 0;
 80024b2:	4944      	ldr	r1, [pc, #272]	@ (80025c4 <menu+0x1928>)
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 80024c0:	f001 fe1a 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80024c4:	2104      	movs	r1, #4
 80024c6:	4838      	ldr	r0, [pc, #224]	@ (80025a8 <menu+0x190c>)
 80024c8:	f008 f9d8 	bl	800a87c <HAL_GPIO_ReadPin>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d12a      	bne.n	8002528 <menu+0x188c>
 80024d2:	4b36      	ldr	r3, [pc, #216]	@ (80025ac <menu+0x1910>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	f083 0301 	eor.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d023      	beq.n	8002528 <menu+0x188c>
 80024e0:	4b2f      	ldr	r3, [pc, #188]	@ (80025a0 <menu+0x1904>)
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	d11e      	bne.n	8002528 <menu+0x188c>
			kapi2AcSure = kapi2AcSure - 1;
 80024ea:	4b36      	ldr	r3, [pc, #216]	@ (80025c4 <menu+0x1928>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	1e51      	subs	r1, r2, #1
 80024f2:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 80024f6:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 80024fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80024fe:	4b31      	ldr	r3, [pc, #196]	@ (80025c4 <menu+0x1928>)
 8002500:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8002504:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(kapi2AcSure > 6) {
 8002508:	4b2e      	ldr	r3, [pc, #184]	@ (80025c4 <menu+0x1928>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	2a07      	cmp	r2, #7
 8002510:	f173 0300 	sbcs.w	r3, r3, #0
 8002514:	d306      	bcc.n	8002524 <menu+0x1888>
		   		kapi2AcSure = 5;
 8002516:	492b      	ldr	r1, [pc, #172]	@ (80025c4 <menu+0x1928>)
 8002518:	f04f 0205 	mov.w	r2, #5
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8002524:	f001 fde8 	bl	80040f8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002528:	2108      	movs	r1, #8
 800252a:	481f      	ldr	r0, [pc, #124]	@ (80025a8 <menu+0x190c>)
 800252c:	f008 f9a6 	bl	800a87c <HAL_GPIO_ReadPin>
 8002530:	4603      	mov	r3, r0
 8002532:	2b01      	cmp	r3, #1
 8002534:	d10f      	bne.n	8002556 <menu+0x18ba>
 8002536:	4b1d      	ldr	r3, [pc, #116]	@ (80025ac <menu+0x1910>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	f083 0301 	eor.w	r3, r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <menu+0x18ba>
			eepromData[11] = kapi2AcSure;
 8002544:	4b1f      	ldr	r3, [pc, #124]	@ (80025c4 <menu+0x1928>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	4919      	ldr	r1, [pc, #100]	@ (80025b0 <menu+0x1914>)
 800254c:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
			hafizaYaz = 1;
 8002550:	4a18      	ldr	r2, [pc, #96]	@ (80025b4 <menu+0x1918>)
 8002552:	2301      	movs	r3, #1
 8002554:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 13) {
 8002556:	4b18      	ldr	r3, [pc, #96]	@ (80025b8 <menu+0x191c>)
 8002558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255c:	f1a2 010d 	sub.w	r1, r2, #13
 8002560:	430b      	orrs	r3, r1
 8002562:	f040 80b7 	bne.w	80026d4 <menu+0x1a38>
		lcd_print(1, 1, tablaKapiTipiText);
 8002566:	4a19      	ldr	r2, [pc, #100]	@ (80025cc <menu+0x1930>)
 8002568:	2101      	movs	r1, #1
 800256a:	2001      	movs	r0, #1
 800256c:	f007 f82b 	bl	80095c6 <lcd_print>

		if(kapitablaTip == 0) {
 8002570:	4b17      	ldr	r3, [pc, #92]	@ (80025d0 <menu+0x1934>)
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	4313      	orrs	r3, r2
 8002578:	d105      	bne.n	8002586 <menu+0x18ea>
			lcd_print(2, 1, prudhomeTextGN);
 800257a:	4a16      	ldr	r2, [pc, #88]	@ (80025d4 <menu+0x1938>)
 800257c:	2101      	movs	r1, #1
 800257e:	2002      	movs	r0, #2
 8002580:	f007 f821 	bl	80095c6 <lcd_print>
 8002584:	e035      	b.n	80025f2 <menu+0x1956>
		} else if(kapitablaTip == 1) {
 8002586:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <menu+0x1934>)
 8002588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258c:	1e51      	subs	r1, r2, #1
 800258e:	430b      	orrs	r3, r1
 8002590:	d124      	bne.n	80025dc <menu+0x1940>
			lcd_print(2, 1, butonKontrolluText);
 8002592:	4a11      	ldr	r2, [pc, #68]	@ (80025d8 <menu+0x193c>)
 8002594:	2101      	movs	r1, #1
 8002596:	2002      	movs	r0, #2
 8002598:	f007 f815 	bl	80095c6 <lcd_print>
 800259c:	e029      	b.n	80025f2 <menu+0x1956>
 800259e:	bf00      	nop
 80025a0:	20001108 	.word	0x20001108
 80025a4:	200000a8 	.word	0x200000a8
 80025a8:	40010800 	.word	0x40010800
 80025ac:	2000121b 	.word	0x2000121b
 80025b0:	20000d08 	.word	0x20000d08
 80025b4:	20001218 	.word	0x20001218
 80025b8:	200010b8 	.word	0x200010b8
 80025bc:	20001524 	.word	0x20001524
 80025c0:	200014fc 	.word	0x200014fc
 80025c4:	20001188 	.word	0x20001188
 80025c8:	20001078 	.word	0x20001078
 80025cc:	20001538 	.word	0x20001538
 80025d0:	20001110 	.word	0x20001110
 80025d4:	20000094 	.word	0x20000094
 80025d8:	200014d4 	.word	0x200014d4
		} else if(kapitablaTip == 2) {
 80025dc:	4b55      	ldr	r3, [pc, #340]	@ (8002734 <menu+0x1a98>)
 80025de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e2:	1e91      	subs	r1, r2, #2
 80025e4:	430b      	orrs	r3, r1
 80025e6:	d104      	bne.n	80025f2 <menu+0x1956>
			lcd_print(2, 1, pizzattoTextGN);
 80025e8:	4a53      	ldr	r2, [pc, #332]	@ (8002738 <menu+0x1a9c>)
 80025ea:	2101      	movs	r1, #1
 80025ec:	2002      	movs	r0, #2
 80025ee:	f006 ffea 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025f2:	2102      	movs	r1, #2
 80025f4:	4851      	ldr	r0, [pc, #324]	@ (800273c <menu+0x1aa0>)
 80025f6:	f008 f941 	bl	800a87c <HAL_GPIO_ReadPin>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d125      	bne.n	800264c <menu+0x19b0>
 8002600:	4b4f      	ldr	r3, [pc, #316]	@ (8002740 <menu+0x1aa4>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	f083 0301 	eor.w	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d01e      	beq.n	800264c <menu+0x19b0>
			kapitablaTip = kapitablaTip + 1;
 800260e:	4b49      	ldr	r3, [pc, #292]	@ (8002734 <menu+0x1a98>)
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	1c51      	adds	r1, r2, #1
 8002616:	f8c7 1118 	str.w	r1, [r7, #280]	@ 0x118
 800261a:	f143 0300 	adc.w	r3, r3, #0
 800261e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002622:	4b44      	ldr	r3, [pc, #272]	@ (8002734 <menu+0x1a98>)
 8002624:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8002628:	e9c3 1200 	strd	r1, r2, [r3]

			if(kapitablaTip > 2) {
 800262c:	4b41      	ldr	r3, [pc, #260]	@ (8002734 <menu+0x1a98>)
 800262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002632:	2a03      	cmp	r2, #3
 8002634:	f173 0300 	sbcs.w	r3, r3, #0
 8002638:	d306      	bcc.n	8002648 <menu+0x19ac>
				kapitablaTip = 0;
 800263a:	493e      	ldr	r1, [pc, #248]	@ (8002734 <menu+0x1a98>)
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8002648:	f001 fd56 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800264c:	2104      	movs	r1, #4
 800264e:	483b      	ldr	r0, [pc, #236]	@ (800273c <menu+0x1aa0>)
 8002650:	f008 f914 	bl	800a87c <HAL_GPIO_ReadPin>
 8002654:	4603      	mov	r3, r0
 8002656:	2b01      	cmp	r3, #1
 8002658:	d125      	bne.n	80026a6 <menu+0x1a0a>
 800265a:	4b39      	ldr	r3, [pc, #228]	@ (8002740 <menu+0x1aa4>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	f083 0301 	eor.w	r3, r3, #1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d01e      	beq.n	80026a6 <menu+0x1a0a>
			kapitablaTip = kapitablaTip - 1;
 8002668:	4b32      	ldr	r3, [pc, #200]	@ (8002734 <menu+0x1a98>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	1e51      	subs	r1, r2, #1
 8002670:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8002674:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8002678:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800267c:	4b2d      	ldr	r3, [pc, #180]	@ (8002734 <menu+0x1a98>)
 800267e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8002682:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(kapitablaTip > 3) {
 8002686:	4b2b      	ldr	r3, [pc, #172]	@ (8002734 <menu+0x1a98>)
 8002688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268c:	2a04      	cmp	r2, #4
 800268e:	f173 0300 	sbcs.w	r3, r3, #0
 8002692:	d306      	bcc.n	80026a2 <menu+0x1a06>
		   		kapitablaTip = 2;
 8002694:	4927      	ldr	r1, [pc, #156]	@ (8002734 <menu+0x1a98>)
 8002696:	f04f 0202 	mov.w	r2, #2
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 80026a2:	f001 fd29 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026a6:	2108      	movs	r1, #8
 80026a8:	4824      	ldr	r0, [pc, #144]	@ (800273c <menu+0x1aa0>)
 80026aa:	f008 f8e7 	bl	800a87c <HAL_GPIO_ReadPin>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d10f      	bne.n	80026d4 <menu+0x1a38>
 80026b4:	4b22      	ldr	r3, [pc, #136]	@ (8002740 <menu+0x1aa4>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	f083 0301 	eor.w	r3, r3, #1
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d008      	beq.n	80026d4 <menu+0x1a38>
			eepromData[12] = kapitablaTip;
 80026c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002734 <menu+0x1a98>)
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	491e      	ldr	r1, [pc, #120]	@ (8002744 <menu+0x1aa8>)
 80026ca:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
			hafizaYaz = 1;
 80026ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002748 <menu+0x1aac>)
 80026d0:	2301      	movs	r3, #1
 80026d2:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 14) {
 80026d4:	4b1d      	ldr	r3, [pc, #116]	@ (800274c <menu+0x1ab0>)
 80026d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026da:	f1a2 010e 	sub.w	r1, r2, #14
 80026de:	430b      	orrs	r3, r1
 80026e0:	f040 80d4 	bne.w	800288c <menu+0x1bf0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 80026e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002750 <menu+0x1ab4>)
 80026e6:	2101      	movs	r1, #1
 80026e8:	2001      	movs	r0, #1
 80026ea:	f006 ff6c 	bl	80095c6 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 80026ee:	4b19      	ldr	r3, [pc, #100]	@ (8002754 <menu+0x1ab8>)
 80026f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	d105      	bne.n	8002704 <menu+0x1a68>
			lcd_print(2, 1, birinciKattaAcText);
 80026f8:	4a17      	ldr	r2, [pc, #92]	@ (8002758 <menu+0x1abc>)
 80026fa:	2101      	movs	r1, #1
 80026fc:	2002      	movs	r0, #2
 80026fe:	f006 ff62 	bl	80095c6 <lcd_print>
 8002702:	e03a      	b.n	800277a <menu+0x1ade>
		} else if(kapiTablaAcKonum == 1) {
 8002704:	4b13      	ldr	r3, [pc, #76]	@ (8002754 <menu+0x1ab8>)
 8002706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270a:	1e51      	subs	r1, r2, #1
 800270c:	430b      	orrs	r3, r1
 800270e:	d105      	bne.n	800271c <menu+0x1a80>
			lcd_print(2, 1, ikinciKattaAcText);
 8002710:	4a12      	ldr	r2, [pc, #72]	@ (800275c <menu+0x1ac0>)
 8002712:	2101      	movs	r1, #1
 8002714:	2002      	movs	r0, #2
 8002716:	f006 ff56 	bl	80095c6 <lcd_print>
 800271a:	e02e      	b.n	800277a <menu+0x1ade>
		} else if(kapiTablaAcKonum == 2) {
 800271c:	4b0d      	ldr	r3, [pc, #52]	@ (8002754 <menu+0x1ab8>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	1e91      	subs	r1, r2, #2
 8002724:	430b      	orrs	r3, r1
 8002726:	d11d      	bne.n	8002764 <menu+0x1ac8>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002728:	4a0d      	ldr	r2, [pc, #52]	@ (8002760 <menu+0x1ac4>)
 800272a:	2101      	movs	r1, #1
 800272c:	2002      	movs	r0, #2
 800272e:	f006 ff4a 	bl	80095c6 <lcd_print>
 8002732:	e022      	b.n	800277a <menu+0x1ade>
 8002734:	20001110 	.word	0x20001110
 8002738:	200000a8 	.word	0x200000a8
 800273c:	40010800 	.word	0x40010800
 8002740:	2000121b 	.word	0x2000121b
 8002744:	20000d08 	.word	0x20000d08
 8002748:	20001218 	.word	0x20001218
 800274c:	200010b8 	.word	0x200010b8
 8002750:	2000154c 	.word	0x2000154c
 8002754:	20001120 	.word	0x20001120
 8002758:	20001560 	.word	0x20001560
 800275c:	20001574 	.word	0x20001574
 8002760:	20001588 	.word	0x20001588
		} else if(kapiTablaAcKonum == 3) {
 8002764:	4ba2      	ldr	r3, [pc, #648]	@ (80029f0 <menu+0x1d54>)
 8002766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276a:	1ed1      	subs	r1, r2, #3
 800276c:	430b      	orrs	r3, r1
 800276e:	d104      	bne.n	800277a <menu+0x1ade>
			lcd_print(2, 1, pasifText);
 8002770:	4aa0      	ldr	r2, [pc, #640]	@ (80029f4 <menu+0x1d58>)
 8002772:	2101      	movs	r1, #1
 8002774:	2002      	movs	r0, #2
 8002776:	f006 ff26 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800277a:	2102      	movs	r1, #2
 800277c:	489e      	ldr	r0, [pc, #632]	@ (80029f8 <menu+0x1d5c>)
 800277e:	f008 f87d 	bl	800a87c <HAL_GPIO_ReadPin>
 8002782:	4603      	mov	r3, r0
 8002784:	2b01      	cmp	r3, #1
 8002786:	d125      	bne.n	80027d4 <menu+0x1b38>
 8002788:	4b9c      	ldr	r3, [pc, #624]	@ (80029fc <menu+0x1d60>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	f083 0301 	eor.w	r3, r3, #1
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d01e      	beq.n	80027d4 <menu+0x1b38>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002796:	4b96      	ldr	r3, [pc, #600]	@ (80029f0 <menu+0x1d54>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	1c51      	adds	r1, r2, #1
 800279e:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 80027a2:	f143 0300 	adc.w	r3, r3, #0
 80027a6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80027aa:	4b91      	ldr	r3, [pc, #580]	@ (80029f0 <menu+0x1d54>)
 80027ac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80027b0:	e9c3 1200 	strd	r1, r2, [r3]

			if(kapiTablaAcKonum > 2){
 80027b4:	4b8e      	ldr	r3, [pc, #568]	@ (80029f0 <menu+0x1d54>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	2a03      	cmp	r2, #3
 80027bc:	f173 0300 	sbcs.w	r3, r3, #0
 80027c0:	d306      	bcc.n	80027d0 <menu+0x1b34>
				kapiTablaAcKonum = 0;
 80027c2:	498b      	ldr	r1, [pc, #556]	@ (80029f0 <menu+0x1d54>)
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 80027d0:	f001 fc92 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027d4:	2104      	movs	r1, #4
 80027d6:	4888      	ldr	r0, [pc, #544]	@ (80029f8 <menu+0x1d5c>)
 80027d8:	f008 f850 	bl	800a87c <HAL_GPIO_ReadPin>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d125      	bne.n	800282e <menu+0x1b92>
 80027e2:	4b86      	ldr	r3, [pc, #536]	@ (80029fc <menu+0x1d60>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	f083 0301 	eor.w	r3, r3, #1
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d01e      	beq.n	800282e <menu+0x1b92>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80027f0:	4b7f      	ldr	r3, [pc, #508]	@ (80029f0 <menu+0x1d54>)
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	1e51      	subs	r1, r2, #1
 80027f8:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 80027fc:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8002800:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002804:	4b7a      	ldr	r3, [pc, #488]	@ (80029f0 <menu+0x1d54>)
 8002806:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800280a:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(kapiTablaAcKonum > 3){
 800280e:	4b78      	ldr	r3, [pc, #480]	@ (80029f0 <menu+0x1d54>)
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	2a04      	cmp	r2, #4
 8002816:	f173 0300 	sbcs.w	r3, r3, #0
 800281a:	d306      	bcc.n	800282a <menu+0x1b8e>
		   		kapiTablaAcKonum = 2;
 800281c:	4974      	ldr	r1, [pc, #464]	@ (80029f0 <menu+0x1d54>)
 800281e:	f04f 0202 	mov.w	r2, #2
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 800282a:	f001 fc65 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800282e:	2108      	movs	r1, #8
 8002830:	4871      	ldr	r0, [pc, #452]	@ (80029f8 <menu+0x1d5c>)
 8002832:	f008 f823 	bl	800a87c <HAL_GPIO_ReadPin>
 8002836:	4603      	mov	r3, r0
 8002838:	2b01      	cmp	r3, #1
 800283a:	d127      	bne.n	800288c <menu+0x1bf0>
 800283c:	4b6f      	ldr	r3, [pc, #444]	@ (80029fc <menu+0x1d60>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	f083 0301 	eor.w	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d020      	beq.n	800288c <menu+0x1bf0>
			eepromData[34] = kapiTablaAcKonum;
 800284a:	4b69      	ldr	r3, [pc, #420]	@ (80029f0 <menu+0x1d54>)
 800284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002850:	496b      	ldr	r1, [pc, #428]	@ (8002a00 <menu+0x1d64>)
 8002852:	e9c1 2344 	strd	r2, r3, [r1, #272]	@ 0x110

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002856:	4b66      	ldr	r3, [pc, #408]	@ (80029f0 <menu+0x1d54>)
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	4313      	orrs	r3, r2
 800285e:	d005      	beq.n	800286c <menu+0x1bd0>
 8002860:	4b63      	ldr	r3, [pc, #396]	@ (80029f0 <menu+0x1d54>)
 8002862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002866:	1e91      	subs	r1, r2, #2
 8002868:	430b      	orrs	r3, r1
 800286a:	d10c      	bne.n	8002886 <menu+0x1bea>
				altLimit = 1;
 800286c:	4965      	ldr	r1, [pc, #404]	@ (8002a04 <menu+0x1d68>)
 800286e:	f04f 0201 	mov.w	r2, #1
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[5] = altLimit;
 800287a:	4b62      	ldr	r3, [pc, #392]	@ (8002a04 <menu+0x1d68>)
 800287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002880:	495f      	ldr	r1, [pc, #380]	@ (8002a00 <menu+0x1d64>)
 8002882:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
			}

			hafizaYaz = 1;
 8002886:	4a60      	ldr	r2, [pc, #384]	@ (8002a08 <menu+0x1d6c>)
 8002888:	2301      	movs	r3, #1
 800288a:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 15) {
 800288c:	4b5f      	ldr	r3, [pc, #380]	@ (8002a0c <menu+0x1d70>)
 800288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002892:	f1a2 010f 	sub.w	r1, r2, #15
 8002896:	430b      	orrs	r3, r1
 8002898:	f040 8093 	bne.w	80029c2 <menu+0x1d26>
		lcd_print(1, 1, tablaKapiAcSureText);
 800289c:	4a5c      	ldr	r2, [pc, #368]	@ (8002a10 <menu+0x1d74>)
 800289e:	2101      	movs	r1, #1
 80028a0:	2001      	movs	r0, #1
 80028a2:	f006 fe90 	bl	80095c6 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80028a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002a14 <menu+0x1d78>)
 80028a8:	2101      	movs	r1, #1
 80028aa:	2002      	movs	r0, #2
 80028ac:	f006 fe8b 	bl	80095c6 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 80028b0:	4b59      	ldr	r3, [pc, #356]	@ (8002a18 <menu+0x1d7c>)
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b6:	4613      	mov	r3, r2
 80028b8:	220a      	movs	r2, #10
 80028ba:	4958      	ldr	r1, [pc, #352]	@ (8002a1c <menu+0x1d80>)
 80028bc:	4618      	mov	r0, r3
 80028be:	f00a fb7f 	bl	800cfc0 <itoa>
		lcd_print(2,16,snum);
 80028c2:	4a56      	ldr	r2, [pc, #344]	@ (8002a1c <menu+0x1d80>)
 80028c4:	2110      	movs	r1, #16
 80028c6:	2002      	movs	r0, #2
 80028c8:	f006 fe7d 	bl	80095c6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80028cc:	2102      	movs	r1, #2
 80028ce:	484a      	ldr	r0, [pc, #296]	@ (80029f8 <menu+0x1d5c>)
 80028d0:	f007 ffd4 	bl	800a87c <HAL_GPIO_ReadPin>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d12a      	bne.n	8002930 <menu+0x1c94>
 80028da:	4b48      	ldr	r3, [pc, #288]	@ (80029fc <menu+0x1d60>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	f083 0301 	eor.w	r3, r3, #1
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d023      	beq.n	8002930 <menu+0x1c94>
 80028e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002a20 <menu+0x1d84>)
 80028ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	d11e      	bne.n	8002930 <menu+0x1c94>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80028f2:	4b49      	ldr	r3, [pc, #292]	@ (8002a18 <menu+0x1d7c>)
 80028f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f8:	1c51      	adds	r1, r2, #1
 80028fa:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80028fe:	f143 0300 	adc.w	r3, r3, #0
 8002902:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002906:	4b44      	ldr	r3, [pc, #272]	@ (8002a18 <menu+0x1d7c>)
 8002908:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800290c:	e9c3 1200 	strd	r1, r2, [r3]

			if(kapiTablaAcSure > 5){
 8002910:	4b41      	ldr	r3, [pc, #260]	@ (8002a18 <menu+0x1d7c>)
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002916:	2a06      	cmp	r2, #6
 8002918:	f173 0300 	sbcs.w	r3, r3, #0
 800291c:	d306      	bcc.n	800292c <menu+0x1c90>
				kapiTablaAcSure = 0;
 800291e:	493e      	ldr	r1, [pc, #248]	@ (8002a18 <menu+0x1d7c>)
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 800292c:	f001 fbe4 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002930:	2104      	movs	r1, #4
 8002932:	4831      	ldr	r0, [pc, #196]	@ (80029f8 <menu+0x1d5c>)
 8002934:	f007 ffa2 	bl	800a87c <HAL_GPIO_ReadPin>
 8002938:	4603      	mov	r3, r0
 800293a:	2b01      	cmp	r3, #1
 800293c:	d12a      	bne.n	8002994 <menu+0x1cf8>
 800293e:	4b2f      	ldr	r3, [pc, #188]	@ (80029fc <menu+0x1d60>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	f083 0301 	eor.w	r3, r3, #1
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d023      	beq.n	8002994 <menu+0x1cf8>
 800294c:	4b34      	ldr	r3, [pc, #208]	@ (8002a20 <menu+0x1d84>)
 800294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002952:	4313      	orrs	r3, r2
 8002954:	d11e      	bne.n	8002994 <menu+0x1cf8>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002956:	4b30      	ldr	r3, [pc, #192]	@ (8002a18 <menu+0x1d7c>)
 8002958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295c:	1e51      	subs	r1, r2, #1
 800295e:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 8002962:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8002966:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800296a:	4b2b      	ldr	r3, [pc, #172]	@ (8002a18 <menu+0x1d7c>)
 800296c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002970:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(kapiTablaAcSure > 6){
 8002974:	4b28      	ldr	r3, [pc, #160]	@ (8002a18 <menu+0x1d7c>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	2a07      	cmp	r2, #7
 800297c:	f173 0300 	sbcs.w	r3, r3, #0
 8002980:	d306      	bcc.n	8002990 <menu+0x1cf4>
		   		kapiTablaAcSure = 5;
 8002982:	4925      	ldr	r1, [pc, #148]	@ (8002a18 <menu+0x1d7c>)
 8002984:	f04f 0205 	mov.w	r2, #5
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	e9c1 2300 	strd	r2, r3, [r1]
		   	}

			bekle();
 8002990:	f001 fbb2 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002994:	2108      	movs	r1, #8
 8002996:	4818      	ldr	r0, [pc, #96]	@ (80029f8 <menu+0x1d5c>)
 8002998:	f007 ff70 	bl	800a87c <HAL_GPIO_ReadPin>
 800299c:	4603      	mov	r3, r0
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d10f      	bne.n	80029c2 <menu+0x1d26>
 80029a2:	4b16      	ldr	r3, [pc, #88]	@ (80029fc <menu+0x1d60>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	f083 0301 	eor.w	r3, r3, #1
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <menu+0x1d26>
			eepromData[13] = kapiTablaAcSure;
 80029b0:	4b19      	ldr	r3, [pc, #100]	@ (8002a18 <menu+0x1d7c>)
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	4912      	ldr	r1, [pc, #72]	@ (8002a00 <menu+0x1d64>)
 80029b8:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
			hafizaYaz = 1;
 80029bc:	4a12      	ldr	r2, [pc, #72]	@ (8002a08 <menu+0x1d6c>)
 80029be:	2301      	movs	r3, #1
 80029c0:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 16) {
 80029c2:	4b12      	ldr	r3, [pc, #72]	@ (8002a0c <menu+0x1d70>)
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f1a2 0110 	sub.w	r1, r2, #16
 80029cc:	430b      	orrs	r3, r1
 80029ce:	f040 80aa 	bne.w	8002b26 <menu+0x1e8a>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 80029d2:	4a14      	ldr	r2, [pc, #80]	@ (8002a24 <menu+0x1d88>)
 80029d4:	2101      	movs	r1, #1
 80029d6:	2001      	movs	r0, #1
 80029d8:	f006 fdf5 	bl	80095c6 <lcd_print>

		if(yukariYavasLimit == 0) {
 80029dc:	4b12      	ldr	r3, [pc, #72]	@ (8002a28 <menu+0x1d8c>)
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	d125      	bne.n	8002a32 <menu+0x1d96>
			lcd_print(2, 1, pasifText);
 80029e6:	4a03      	ldr	r2, [pc, #12]	@ (80029f4 <menu+0x1d58>)
 80029e8:	2101      	movs	r1, #1
 80029ea:	2002      	movs	r0, #2
 80029ec:	e01e      	b.n	8002a2c <menu+0x1d90>
 80029ee:	bf00      	nop
 80029f0:	20001120 	.word	0x20001120
 80029f4:	200013d0 	.word	0x200013d0
 80029f8:	40010800 	.word	0x40010800
 80029fc:	2000121b 	.word	0x2000121b
 8002a00:	20000d08 	.word	0x20000d08
 8002a04:	200010e8 	.word	0x200010e8
 8002a08:	20001218 	.word	0x20001218
 8002a0c:	200010b8 	.word	0x200010b8
 8002a10:	2000159c 	.word	0x2000159c
 8002a14:	200014fc 	.word	0x200014fc
 8002a18:	20001190 	.word	0x20001190
 8002a1c:	20001078 	.word	0x20001078
 8002a20:	20001110 	.word	0x20001110
 8002a24:	200015b0 	.word	0x200015b0
 8002a28:	20001128 	.word	0x20001128
 8002a2c:	f006 fdcb 	bl	80095c6 <lcd_print>
 8002a30:	e00a      	b.n	8002a48 <menu+0x1dac>
		} else if(yukariYavasLimit == 1) {
 8002a32:	4b4f      	ldr	r3, [pc, #316]	@ (8002b70 <menu+0x1ed4>)
 8002a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a38:	1e51      	subs	r1, r2, #1
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	d104      	bne.n	8002a48 <menu+0x1dac>
			lcd_print(2, 1, aktifText);
 8002a3e:	4a4d      	ldr	r2, [pc, #308]	@ (8002b74 <menu+0x1ed8>)
 8002a40:	2101      	movs	r1, #1
 8002a42:	2002      	movs	r0, #2
 8002a44:	f006 fdbf 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a48:	2102      	movs	r1, #2
 8002a4a:	484b      	ldr	r0, [pc, #300]	@ (8002b78 <menu+0x1edc>)
 8002a4c:	f007 ff16 	bl	800a87c <HAL_GPIO_ReadPin>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d125      	bne.n	8002aa2 <menu+0x1e06>
 8002a56:	4b49      	ldr	r3, [pc, #292]	@ (8002b7c <menu+0x1ee0>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	f083 0301 	eor.w	r3, r3, #1
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01e      	beq.n	8002aa2 <menu+0x1e06>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002a64:	4b42      	ldr	r3, [pc, #264]	@ (8002b70 <menu+0x1ed4>)
 8002a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6a:	1c51      	adds	r1, r2, #1
 8002a6c:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
 8002a70:	f143 0300 	adc.w	r3, r3, #0
 8002a74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002a78:	4b3d      	ldr	r3, [pc, #244]	@ (8002b70 <menu+0x1ed4>)
 8002a7a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002a7e:	e9c3 1200 	strd	r1, r2, [r3]

			if(yukariYavasLimit > 1){
 8002a82:	4b3b      	ldr	r3, [pc, #236]	@ (8002b70 <menu+0x1ed4>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	2a02      	cmp	r2, #2
 8002a8a:	f173 0300 	sbcs.w	r3, r3, #0
 8002a8e:	d306      	bcc.n	8002a9e <menu+0x1e02>
				yukariYavasLimit = 0;
 8002a90:	4937      	ldr	r1, [pc, #220]	@ (8002b70 <menu+0x1ed4>)
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8002a9e:	f001 fb2b 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aa2:	2104      	movs	r1, #4
 8002aa4:	4834      	ldr	r0, [pc, #208]	@ (8002b78 <menu+0x1edc>)
 8002aa6:	f007 fee9 	bl	800a87c <HAL_GPIO_ReadPin>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d123      	bne.n	8002af8 <menu+0x1e5c>
 8002ab0:	4b32      	ldr	r3, [pc, #200]	@ (8002b7c <menu+0x1ee0>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	f083 0301 	eor.w	r3, r3, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01c      	beq.n	8002af8 <menu+0x1e5c>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002abe:	4b2c      	ldr	r3, [pc, #176]	@ (8002b70 <menu+0x1ed4>)
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	1e51      	subs	r1, r2, #1
 8002ac6:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8002aca:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8002ace:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ad2:	4b27      	ldr	r3, [pc, #156]	@ (8002b70 <menu+0x1ed4>)
 8002ad4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002ad8:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(yukariYavasLimit > 0){
 8002adc:	4b24      	ldr	r3, [pc, #144]	@ (8002b70 <menu+0x1ed4>)
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	d006      	beq.n	8002af4 <menu+0x1e58>
		   		yukariYavasLimit = 1;
 8002ae6:	4922      	ldr	r1, [pc, #136]	@ (8002b70 <menu+0x1ed4>)
 8002ae8:	f04f 0201 	mov.w	r2, #1
 8002aec:	f04f 0300 	mov.w	r3, #0
 8002af0:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8002af4:	f001 fb00 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002af8:	2108      	movs	r1, #8
 8002afa:	481f      	ldr	r0, [pc, #124]	@ (8002b78 <menu+0x1edc>)
 8002afc:	f007 febe 	bl	800a87c <HAL_GPIO_ReadPin>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d10f      	bne.n	8002b26 <menu+0x1e8a>
 8002b06:	4b1d      	ldr	r3, [pc, #116]	@ (8002b7c <menu+0x1ee0>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	f083 0301 	eor.w	r3, r3, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <menu+0x1e8a>
			eepromData[14] = yukariYavasLimit;
 8002b14:	4b16      	ldr	r3, [pc, #88]	@ (8002b70 <menu+0x1ed4>)
 8002b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1a:	4919      	ldr	r1, [pc, #100]	@ (8002b80 <menu+0x1ee4>)
 8002b1c:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
			hafizaYaz = 1;
 8002b20:	4a18      	ldr	r2, [pc, #96]	@ (8002b84 <menu+0x1ee8>)
 8002b22:	2301      	movs	r3, #1
 8002b24:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 17) {
 8002b26:	4b18      	ldr	r3, [pc, #96]	@ (8002b88 <menu+0x1eec>)
 8002b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2c:	f1a2 0111 	sub.w	r1, r2, #17
 8002b30:	430b      	orrs	r3, r1
 8002b32:	f040 80da 	bne.w	8002cea <menu+0x204e>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002b36:	4a15      	ldr	r2, [pc, #84]	@ (8002b8c <menu+0x1ef0>)
 8002b38:	2101      	movs	r1, #1
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	f006 fd43 	bl	80095c6 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002b40:	4b13      	ldr	r3, [pc, #76]	@ (8002b90 <menu+0x1ef4>)
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	1e91      	subs	r1, r2, #2
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	d105      	bne.n	8002b58 <menu+0x1ebc>
			lcd_print(2, 1, devirmeAktifText);
 8002b4c:	4a11      	ldr	r2, [pc, #68]	@ (8002b94 <menu+0x1ef8>)
 8002b4e:	2101      	movs	r1, #1
 8002b50:	2002      	movs	r0, #2
 8002b52:	f006 fd38 	bl	80095c6 <lcd_print>
 8002b56:	e02b      	b.n	8002bb0 <menu+0x1f14>
		} else if(devirmeYuruyusSecim == 1) {
 8002b58:	4b0d      	ldr	r3, [pc, #52]	@ (8002b90 <menu+0x1ef4>)
 8002b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5e:	1e51      	subs	r1, r2, #1
 8002b60:	430b      	orrs	r3, r1
 8002b62:	d11b      	bne.n	8002b9c <menu+0x1f00>
			lcd_print(2, 1, yuruyusAktifText);
 8002b64:	4a0c      	ldr	r2, [pc, #48]	@ (8002b98 <menu+0x1efc>)
 8002b66:	2101      	movs	r1, #1
 8002b68:	2002      	movs	r0, #2
 8002b6a:	f006 fd2c 	bl	80095c6 <lcd_print>
 8002b6e:	e01f      	b.n	8002bb0 <menu+0x1f14>
 8002b70:	20001128 	.word	0x20001128
 8002b74:	200013e4 	.word	0x200013e4
 8002b78:	40010800 	.word	0x40010800
 8002b7c:	2000121b 	.word	0x2000121b
 8002b80:	20000d08 	.word	0x20000d08
 8002b84:	20001218 	.word	0x20001218
 8002b88:	200010b8 	.word	0x200010b8
 8002b8c:	200015c4 	.word	0x200015c4
 8002b90:	20001130 	.word	0x20001130
 8002b94:	200015d8 	.word	0x200015d8
 8002b98:	200015ec 	.word	0x200015ec
		} else if(devirmeYuruyusSecim == 0) {
 8002b9c:	4b68      	ldr	r3, [pc, #416]	@ (8002d40 <menu+0x20a4>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	d104      	bne.n	8002bb0 <menu+0x1f14>
			lcd_print(2, 1, pasifText);
 8002ba6:	4a67      	ldr	r2, [pc, #412]	@ (8002d44 <menu+0x20a8>)
 8002ba8:	2101      	movs	r1, #1
 8002baa:	2002      	movs	r0, #2
 8002bac:	f006 fd0b 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	4865      	ldr	r0, [pc, #404]	@ (8002d48 <menu+0x20ac>)
 8002bb4:	f007 fe62 	bl	800a87c <HAL_GPIO_ReadPin>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d125      	bne.n	8002c0a <menu+0x1f6e>
 8002bbe:	4b63      	ldr	r3, [pc, #396]	@ (8002d4c <menu+0x20b0>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	f083 0301 	eor.w	r3, r3, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01e      	beq.n	8002c0a <menu+0x1f6e>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002bcc:	4b5c      	ldr	r3, [pc, #368]	@ (8002d40 <menu+0x20a4>)
 8002bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd2:	1c51      	adds	r1, r2, #1
 8002bd4:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8002bd8:	f143 0300 	adc.w	r3, r3, #0
 8002bdc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002be0:	4b57      	ldr	r3, [pc, #348]	@ (8002d40 <menu+0x20a4>)
 8002be2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002be6:	e9c3 1200 	strd	r1, r2, [r3]

			if(devirmeYuruyusSecim > 2){
 8002bea:	4b55      	ldr	r3, [pc, #340]	@ (8002d40 <menu+0x20a4>)
 8002bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf0:	2a03      	cmp	r2, #3
 8002bf2:	f173 0300 	sbcs.w	r3, r3, #0
 8002bf6:	d306      	bcc.n	8002c06 <menu+0x1f6a>
				devirmeYuruyusSecim = 0;
 8002bf8:	4951      	ldr	r1, [pc, #324]	@ (8002d40 <menu+0x20a4>)
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8002c06:	f001 fa77 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c0a:	2104      	movs	r1, #4
 8002c0c:	484e      	ldr	r0, [pc, #312]	@ (8002d48 <menu+0x20ac>)
 8002c0e:	f007 fe35 	bl	800a87c <HAL_GPIO_ReadPin>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d125      	bne.n	8002c64 <menu+0x1fc8>
 8002c18:	4b4c      	ldr	r3, [pc, #304]	@ (8002d4c <menu+0x20b0>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	f083 0301 	eor.w	r3, r3, #1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01e      	beq.n	8002c64 <menu+0x1fc8>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002c26:	4b46      	ldr	r3, [pc, #280]	@ (8002d40 <menu+0x20a4>)
 8002c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2c:	1e51      	subs	r1, r2, #1
 8002c2e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8002c32:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8002c36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002c3a:	4b41      	ldr	r3, [pc, #260]	@ (8002d40 <menu+0x20a4>)
 8002c3c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002c40:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(devirmeYuruyusSecim>3){
 8002c44:	4b3e      	ldr	r3, [pc, #248]	@ (8002d40 <menu+0x20a4>)
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	2a04      	cmp	r2, #4
 8002c4c:	f173 0300 	sbcs.w	r3, r3, #0
 8002c50:	d306      	bcc.n	8002c60 <menu+0x1fc4>
		   		devirmeYuruyusSecim = 2;
 8002c52:	493b      	ldr	r1, [pc, #236]	@ (8002d40 <menu+0x20a4>)
 8002c54:	f04f 0202 	mov.w	r2, #2
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8002c60:	f001 fa4a 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c64:	2108      	movs	r1, #8
 8002c66:	4838      	ldr	r0, [pc, #224]	@ (8002d48 <menu+0x20ac>)
 8002c68:	f007 fe08 	bl	800a87c <HAL_GPIO_ReadPin>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d13b      	bne.n	8002cea <menu+0x204e>
 8002c72:	4b36      	ldr	r3, [pc, #216]	@ (8002d4c <menu+0x20b0>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	f083 0301 	eor.w	r3, r3, #1
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d034      	beq.n	8002cea <menu+0x204e>
			eepromData[15] = devirmeYuruyusSecim;
 8002c80:	4b2f      	ldr	r3, [pc, #188]	@ (8002d40 <menu+0x20a4>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	4932      	ldr	r1, [pc, #200]	@ (8002d50 <menu+0x20b4>)
 8002c88:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8002d40 <menu+0x20a4>)
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	1e91      	subs	r1, r2, #2
 8002c94:	430b      	orrs	r3, r1
 8002c96:	d005      	beq.n	8002ca4 <menu+0x2008>
 8002c98:	4b29      	ldr	r3, [pc, #164]	@ (8002d40 <menu+0x20a4>)
 8002c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9e:	1e51      	subs	r1, r2, #1
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	d10c      	bne.n	8002cbe <menu+0x2022>
				calismaSekli = 0;
 8002ca4:	492b      	ldr	r1, [pc, #172]	@ (8002d54 <menu+0x20b8>)
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[1] = calismaSekli;
 8002cb2:	4b28      	ldr	r3, [pc, #160]	@ (8002d54 <menu+0x20b8>)
 8002cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb8:	4925      	ldr	r1, [pc, #148]	@ (8002d50 <menu+0x20b4>)
 8002cba:	e9c1 2302 	strd	r2, r3, [r1, #8]
			}

			if(devirmeYuruyusSecim == 1) {
 8002cbe:	4b20      	ldr	r3, [pc, #128]	@ (8002d40 <menu+0x20a4>)
 8002cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc4:	1e51      	subs	r1, r2, #1
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	d10c      	bne.n	8002ce4 <menu+0x2048>
				devirmeSilindirTipi = 1;
 8002cca:	4923      	ldr	r1, [pc, #140]	@ (8002d58 <menu+0x20bc>)
 8002ccc:	f04f 0201 	mov.w	r2, #1
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[18] = devirmeSilindirTipi;
 8002cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d58 <menu+0x20bc>)
 8002cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cde:	491c      	ldr	r1, [pc, #112]	@ (8002d50 <menu+0x20b4>)
 8002ce0:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
			}
			hafizaYaz = 1;
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d5c <menu+0x20c0>)
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 18) {
 8002cea:	4b1d      	ldr	r3, [pc, #116]	@ (8002d60 <menu+0x20c4>)
 8002cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf0:	f1a2 0112 	sub.w	r1, r2, #18
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	f040 80b5 	bne.w	8002e64 <menu+0x21c8>
		if(devirmeYuruyusSecim == 2) {
 8002cfa:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <menu+0x20a4>)
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	1e91      	subs	r1, r2, #2
 8002d02:	430b      	orrs	r3, r1
 8002d04:	d105      	bne.n	8002d12 <menu+0x2076>
			lcd_print(1, 1, devirmeYukariText);
 8002d06:	4a17      	ldr	r2, [pc, #92]	@ (8002d64 <menu+0x20c8>)
 8002d08:	2101      	movs	r1, #1
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f006 fc5b 	bl	80095c6 <lcd_print>
 8002d10:	e00a      	b.n	8002d28 <menu+0x208c>
		} else if(devirmeYuruyusSecim == 1) {
 8002d12:	4b0b      	ldr	r3, [pc, #44]	@ (8002d40 <menu+0x20a4>)
 8002d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d18:	1e51      	subs	r1, r2, #1
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	d104      	bne.n	8002d28 <menu+0x208c>
			lcd_print(1, 1, yuruyusIleriText);
 8002d1e:	4a12      	ldr	r2, [pc, #72]	@ (8002d68 <menu+0x20cc>)
 8002d20:	2101      	movs	r1, #1
 8002d22:	2001      	movs	r0, #1
 8002d24:	f006 fc4f 	bl	80095c6 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002d28:	4b10      	ldr	r3, [pc, #64]	@ (8002d6c <menu+0x20d0>)
 8002d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	d11e      	bne.n	8002d70 <menu+0x20d4>
			lcd_print(2, 1, pasifText);
 8002d32:	4a04      	ldr	r2, [pc, #16]	@ (8002d44 <menu+0x20a8>)
 8002d34:	2101      	movs	r1, #1
 8002d36:	2002      	movs	r0, #2
 8002d38:	f006 fc45 	bl	80095c6 <lcd_print>
 8002d3c:	e023      	b.n	8002d86 <menu+0x20ea>
 8002d3e:	bf00      	nop
 8002d40:	20001130 	.word	0x20001130
 8002d44:	200013d0 	.word	0x200013d0
 8002d48:	40010800 	.word	0x40010800
 8002d4c:	2000121b 	.word	0x2000121b
 8002d50:	20000d08 	.word	0x20000d08
 8002d54:	200010c0 	.word	0x200010c0
 8002d58:	20001148 	.word	0x20001148
 8002d5c:	20001218 	.word	0x20001218
 8002d60:	200010b8 	.word	0x200010b8
 8002d64:	20001600 	.word	0x20001600
 8002d68:	20001614 	.word	0x20001614
 8002d6c:	20001138 	.word	0x20001138
		} else if(devirmeYukariIleriLimit == 1){
 8002d70:	4b98      	ldr	r3, [pc, #608]	@ (8002fd4 <menu+0x2338>)
 8002d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d76:	1e51      	subs	r1, r2, #1
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	d104      	bne.n	8002d86 <menu+0x20ea>
			lcd_print(2, 1, aktifText);
 8002d7c:	4a96      	ldr	r2, [pc, #600]	@ (8002fd8 <menu+0x233c>)
 8002d7e:	2101      	movs	r1, #1
 8002d80:	2002      	movs	r0, #2
 8002d82:	f006 fc20 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d86:	2102      	movs	r1, #2
 8002d88:	4894      	ldr	r0, [pc, #592]	@ (8002fdc <menu+0x2340>)
 8002d8a:	f007 fd77 	bl	800a87c <HAL_GPIO_ReadPin>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d125      	bne.n	8002de0 <menu+0x2144>
 8002d94:	4b92      	ldr	r3, [pc, #584]	@ (8002fe0 <menu+0x2344>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	f083 0301 	eor.w	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d01e      	beq.n	8002de0 <menu+0x2144>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002da2:	4b8c      	ldr	r3, [pc, #560]	@ (8002fd4 <menu+0x2338>)
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	1c51      	adds	r1, r2, #1
 8002daa:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8002dae:	f143 0300 	adc.w	r3, r3, #0
 8002db2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002db6:	4b87      	ldr	r3, [pc, #540]	@ (8002fd4 <menu+0x2338>)
 8002db8:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002dbc:	e9c3 1200 	strd	r1, r2, [r3]

			if(devirmeYukariIleriLimit > 1){
 8002dc0:	4b84      	ldr	r3, [pc, #528]	@ (8002fd4 <menu+0x2338>)
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	2a02      	cmp	r2, #2
 8002dc8:	f173 0300 	sbcs.w	r3, r3, #0
 8002dcc:	d306      	bcc.n	8002ddc <menu+0x2140>
				devirmeYukariIleriLimit = 0;
 8002dce:	4981      	ldr	r1, [pc, #516]	@ (8002fd4 <menu+0x2338>)
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8002ddc:	f001 f98c 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002de0:	2104      	movs	r1, #4
 8002de2:	487e      	ldr	r0, [pc, #504]	@ (8002fdc <menu+0x2340>)
 8002de4:	f007 fd4a 	bl	800a87c <HAL_GPIO_ReadPin>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d123      	bne.n	8002e36 <menu+0x219a>
 8002dee:	4b7c      	ldr	r3, [pc, #496]	@ (8002fe0 <menu+0x2344>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	f083 0301 	eor.w	r3, r3, #1
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01c      	beq.n	8002e36 <menu+0x219a>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002dfc:	4b75      	ldr	r3, [pc, #468]	@ (8002fd4 <menu+0x2338>)
 8002dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e02:	1e51      	subs	r1, r2, #1
 8002e04:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8002e08:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8002e0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e10:	4b70      	ldr	r3, [pc, #448]	@ (8002fd4 <menu+0x2338>)
 8002e12:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e16:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(devirmeYukariIleriLimit > 0){
 8002e1a:	4b6e      	ldr	r3, [pc, #440]	@ (8002fd4 <menu+0x2338>)
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	d006      	beq.n	8002e32 <menu+0x2196>
		   		devirmeYukariIleriLimit = 1;
 8002e24:	496b      	ldr	r1, [pc, #428]	@ (8002fd4 <menu+0x2338>)
 8002e26:	f04f 0201 	mov.w	r2, #1
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8002e32:	f001 f961 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e36:	2108      	movs	r1, #8
 8002e38:	4868      	ldr	r0, [pc, #416]	@ (8002fdc <menu+0x2340>)
 8002e3a:	f007 fd1f 	bl	800a87c <HAL_GPIO_ReadPin>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d10f      	bne.n	8002e64 <menu+0x21c8>
 8002e44:	4b66      	ldr	r3, [pc, #408]	@ (8002fe0 <menu+0x2344>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	f083 0301 	eor.w	r3, r3, #1
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <menu+0x21c8>
			eepromData[16] = devirmeYukariIleriLimit;
 8002e52:	4b60      	ldr	r3, [pc, #384]	@ (8002fd4 <menu+0x2338>)
 8002e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e58:	4962      	ldr	r1, [pc, #392]	@ (8002fe4 <menu+0x2348>)
 8002e5a:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
			hafizaYaz = 1;
 8002e5e:	4a62      	ldr	r2, [pc, #392]	@ (8002fe8 <menu+0x234c>)
 8002e60:	2301      	movs	r3, #1
 8002e62:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 19) {
 8002e64:	4b61      	ldr	r3, [pc, #388]	@ (8002fec <menu+0x2350>)
 8002e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6a:	f1a2 0113 	sub.w	r1, r2, #19
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	f040 809c 	bne.w	8002fac <menu+0x2310>
		if(devirmeYuruyusSecim == 2) {
 8002e74:	4b5e      	ldr	r3, [pc, #376]	@ (8002ff0 <menu+0x2354>)
 8002e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7a:	1e91      	subs	r1, r2, #2
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	d105      	bne.n	8002e8c <menu+0x21f0>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002e80:	4a5c      	ldr	r2, [pc, #368]	@ (8002ff4 <menu+0x2358>)
 8002e82:	2101      	movs	r1, #1
 8002e84:	2001      	movs	r0, #1
 8002e86:	f006 fb9e 	bl	80095c6 <lcd_print>
 8002e8a:	e00a      	b.n	8002ea2 <menu+0x2206>
		} else if(devirmeYuruyusSecim == 1) {
 8002e8c:	4b58      	ldr	r3, [pc, #352]	@ (8002ff0 <menu+0x2354>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	1e51      	subs	r1, r2, #1
 8002e94:	430b      	orrs	r3, r1
 8002e96:	d104      	bne.n	8002ea2 <menu+0x2206>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002e98:	4a57      	ldr	r2, [pc, #348]	@ (8002ff8 <menu+0x235c>)
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	f006 fb92 	bl	80095c6 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002ea2:	4b56      	ldr	r3, [pc, #344]	@ (8002ffc <menu+0x2360>)
 8002ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	d105      	bne.n	8002eb8 <menu+0x221c>
			lcd_print(2, 1, pasifText);
 8002eac:	4a54      	ldr	r2, [pc, #336]	@ (8003000 <menu+0x2364>)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	2002      	movs	r0, #2
 8002eb2:	f006 fb88 	bl	80095c6 <lcd_print>
 8002eb6:	e00a      	b.n	8002ece <menu+0x2232>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002eb8:	4b50      	ldr	r3, [pc, #320]	@ (8002ffc <menu+0x2360>)
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	1e51      	subs	r1, r2, #1
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	d104      	bne.n	8002ece <menu+0x2232>
			lcd_print(2, 1, aktifText);
 8002ec4:	4a44      	ldr	r2, [pc, #272]	@ (8002fd8 <menu+0x233c>)
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	2002      	movs	r0, #2
 8002eca:	f006 fb7c 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ece:	2102      	movs	r1, #2
 8002ed0:	4842      	ldr	r0, [pc, #264]	@ (8002fdc <menu+0x2340>)
 8002ed2:	f007 fcd3 	bl	800a87c <HAL_GPIO_ReadPin>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d125      	bne.n	8002f28 <menu+0x228c>
 8002edc:	4b40      	ldr	r3, [pc, #256]	@ (8002fe0 <menu+0x2344>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	f083 0301 	eor.w	r3, r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01e      	beq.n	8002f28 <menu+0x228c>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002eea:	4b44      	ldr	r3, [pc, #272]	@ (8002ffc <menu+0x2360>)
 8002eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef0:	1c51      	adds	r1, r2, #1
 8002ef2:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8002ef6:	f143 0300 	adc.w	r3, r3, #0
 8002efa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002efe:	4b3f      	ldr	r3, [pc, #252]	@ (8002ffc <menu+0x2360>)
 8002f00:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002f04:	e9c3 1200 	strd	r1, r2, [r3]

			if(devirmeAsagiGeriLimit > 1) {
 8002f08:	4b3c      	ldr	r3, [pc, #240]	@ (8002ffc <menu+0x2360>)
 8002f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0e:	2a02      	cmp	r2, #2
 8002f10:	f173 0300 	sbcs.w	r3, r3, #0
 8002f14:	d306      	bcc.n	8002f24 <menu+0x2288>
				devirmeAsagiGeriLimit = 0;
 8002f16:	4939      	ldr	r1, [pc, #228]	@ (8002ffc <menu+0x2360>)
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8002f24:	f001 f8e8 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f28:	2104      	movs	r1, #4
 8002f2a:	482c      	ldr	r0, [pc, #176]	@ (8002fdc <menu+0x2340>)
 8002f2c:	f007 fca6 	bl	800a87c <HAL_GPIO_ReadPin>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d123      	bne.n	8002f7e <menu+0x22e2>
 8002f36:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe0 <menu+0x2344>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	f083 0301 	eor.w	r3, r3, #1
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01c      	beq.n	8002f7e <menu+0x22e2>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002f44:	4b2d      	ldr	r3, [pc, #180]	@ (8002ffc <menu+0x2360>)
 8002f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4a:	1e51      	subs	r1, r2, #1
 8002f4c:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8002f50:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8002f54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f58:	4b28      	ldr	r3, [pc, #160]	@ (8002ffc <menu+0x2360>)
 8002f5a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002f5e:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002f62:	4b26      	ldr	r3, [pc, #152]	@ (8002ffc <menu+0x2360>)
 8002f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	d006      	beq.n	8002f7a <menu+0x22de>
		   		devirmeAsagiGeriLimit = 1;
 8002f6c:	4923      	ldr	r1, [pc, #140]	@ (8002ffc <menu+0x2360>)
 8002f6e:	f04f 0201 	mov.w	r2, #1
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8002f7a:	f001 f8bd 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f7e:	2108      	movs	r1, #8
 8002f80:	4816      	ldr	r0, [pc, #88]	@ (8002fdc <menu+0x2340>)
 8002f82:	f007 fc7b 	bl	800a87c <HAL_GPIO_ReadPin>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d10f      	bne.n	8002fac <menu+0x2310>
 8002f8c:	4b14      	ldr	r3, [pc, #80]	@ (8002fe0 <menu+0x2344>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	f083 0301 	eor.w	r3, r3, #1
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <menu+0x2310>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002f9a:	4b18      	ldr	r3, [pc, #96]	@ (8002ffc <menu+0x2360>)
 8002f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa0:	4910      	ldr	r1, [pc, #64]	@ (8002fe4 <menu+0x2348>)
 8002fa2:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
			hafizaYaz = 1;
 8002fa6:	4a10      	ldr	r2, [pc, #64]	@ (8002fe8 <menu+0x234c>)
 8002fa8:	2301      	movs	r3, #1
 8002faa:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 20){
 8002fac:	4b0f      	ldr	r3, [pc, #60]	@ (8002fec <menu+0x2350>)
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	f1a2 0114 	sub.w	r1, r2, #20
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	f040 80c2 	bne.w	8003140 <menu+0x24a4>
		if(devirmeYuruyusSecim == 1) {
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff0 <menu+0x2354>)
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	1e51      	subs	r1, r2, #1
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	d11f      	bne.n	8003008 <menu+0x236c>
			lcd_print(1, 1, yuruyusSecildiText);
 8002fc8:	4a0e      	ldr	r2, [pc, #56]	@ (8003004 <menu+0x2368>)
 8002fca:	2101      	movs	r1, #1
 8002fcc:	2001      	movs	r0, #1
 8002fce:	f006 fafa 	bl	80095c6 <lcd_print>
 8002fd2:	e024      	b.n	800301e <menu+0x2382>
 8002fd4:	20001138 	.word	0x20001138
 8002fd8:	200013e4 	.word	0x200013e4
 8002fdc:	40010800 	.word	0x40010800
 8002fe0:	2000121b 	.word	0x2000121b
 8002fe4:	20000d08 	.word	0x20000d08
 8002fe8:	20001218 	.word	0x20001218
 8002fec:	200010b8 	.word	0x200010b8
 8002ff0:	20001130 	.word	0x20001130
 8002ff4:	20001628 	.word	0x20001628
 8002ff8:	2000163c 	.word	0x2000163c
 8002ffc:	20001140 	.word	0x20001140
 8003000:	200013d0 	.word	0x200013d0
 8003004:	20001650 	.word	0x20001650
		} else if(devirmeYuruyusSecim == 2) {
 8003008:	4b59      	ldr	r3, [pc, #356]	@ (8003170 <menu+0x24d4>)
 800300a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300e:	1e91      	subs	r1, r2, #2
 8003010:	430b      	orrs	r3, r1
 8003012:	d104      	bne.n	800301e <menu+0x2382>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8003014:	4a57      	ldr	r2, [pc, #348]	@ (8003174 <menu+0x24d8>)
 8003016:	2101      	movs	r1, #1
 8003018:	2001      	movs	r0, #1
 800301a:	f006 fad4 	bl	80095c6 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 800301e:	4b56      	ldr	r3, [pc, #344]	@ (8003178 <menu+0x24dc>)
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	4313      	orrs	r3, r2
 8003026:	d105      	bne.n	8003034 <menu+0x2398>
			lcd_print(2, 1, tekTesirText);
 8003028:	4a54      	ldr	r2, [pc, #336]	@ (800317c <menu+0x24e0>)
 800302a:	2101      	movs	r1, #1
 800302c:	2002      	movs	r0, #2
 800302e:	f006 faca 	bl	80095c6 <lcd_print>
 8003032:	e00a      	b.n	800304a <menu+0x23ae>
		} else if(devirmeSilindirTipi == 1) {
 8003034:	4b50      	ldr	r3, [pc, #320]	@ (8003178 <menu+0x24dc>)
 8003036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303a:	1e51      	subs	r1, r2, #1
 800303c:	430b      	orrs	r3, r1
 800303e:	d104      	bne.n	800304a <menu+0x23ae>
			lcd_print(2, 1, ciftTesirText);
 8003040:	4a4f      	ldr	r2, [pc, #316]	@ (8003180 <menu+0x24e4>)
 8003042:	2101      	movs	r1, #1
 8003044:	2002      	movs	r0, #2
 8003046:	f006 fabe 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800304a:	2102      	movs	r1, #2
 800304c:	484d      	ldr	r0, [pc, #308]	@ (8003184 <menu+0x24e8>)
 800304e:	f007 fc15 	bl	800a87c <HAL_GPIO_ReadPin>
 8003052:	4603      	mov	r3, r0
 8003054:	2b01      	cmp	r3, #1
 8003056:	d12b      	bne.n	80030b0 <menu+0x2414>
 8003058:	4b4b      	ldr	r3, [pc, #300]	@ (8003188 <menu+0x24ec>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	f083 0301 	eor.w	r3, r3, #1
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d024      	beq.n	80030b0 <menu+0x2414>
 8003066:	4b42      	ldr	r3, [pc, #264]	@ (8003170 <menu+0x24d4>)
 8003068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306c:	1e91      	subs	r1, r2, #2
 800306e:	430b      	orrs	r3, r1
 8003070:	d11e      	bne.n	80030b0 <menu+0x2414>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003072:	4b41      	ldr	r3, [pc, #260]	@ (8003178 <menu+0x24dc>)
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	1c51      	adds	r1, r2, #1
 800307a:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800307e:	f143 0300 	adc.w	r3, r3, #0
 8003082:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003086:	4b3c      	ldr	r3, [pc, #240]	@ (8003178 <menu+0x24dc>)
 8003088:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800308c:	e9c3 1200 	strd	r1, r2, [r3]

			if(devirmeSilindirTipi > 1) {
 8003090:	4b39      	ldr	r3, [pc, #228]	@ (8003178 <menu+0x24dc>)
 8003092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003096:	2a02      	cmp	r2, #2
 8003098:	f173 0300 	sbcs.w	r3, r3, #0
 800309c:	d306      	bcc.n	80030ac <menu+0x2410>
				devirmeSilindirTipi = 0;
 800309e:	4936      	ldr	r1, [pc, #216]	@ (8003178 <menu+0x24dc>)
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 80030ac:	f001 f824 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80030b0:	2104      	movs	r1, #4
 80030b2:	4834      	ldr	r0, [pc, #208]	@ (8003184 <menu+0x24e8>)
 80030b4:	f007 fbe2 	bl	800a87c <HAL_GPIO_ReadPin>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d129      	bne.n	8003112 <menu+0x2476>
 80030be:	4b32      	ldr	r3, [pc, #200]	@ (8003188 <menu+0x24ec>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	f083 0301 	eor.w	r3, r3, #1
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d022      	beq.n	8003112 <menu+0x2476>
 80030cc:	4b28      	ldr	r3, [pc, #160]	@ (8003170 <menu+0x24d4>)
 80030ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d2:	1e91      	subs	r1, r2, #2
 80030d4:	430b      	orrs	r3, r1
 80030d6:	d11c      	bne.n	8003112 <menu+0x2476>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80030d8:	4b27      	ldr	r3, [pc, #156]	@ (8003178 <menu+0x24dc>)
 80030da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030de:	1e51      	subs	r1, r2, #1
 80030e0:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80030e4:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 80030e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80030ec:	4b22      	ldr	r3, [pc, #136]	@ (8003178 <menu+0x24dc>)
 80030ee:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80030f2:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(devirmeSilindirTipi > 0) {
 80030f6:	4b20      	ldr	r3, [pc, #128]	@ (8003178 <menu+0x24dc>)
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	d006      	beq.n	800310e <menu+0x2472>
		   		devirmeSilindirTipi = 1;
 8003100:	491d      	ldr	r1, [pc, #116]	@ (8003178 <menu+0x24dc>)
 8003102:	f04f 0201 	mov.w	r2, #1
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 800310e:	f000 fff3 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003112:	2108      	movs	r1, #8
 8003114:	481b      	ldr	r0, [pc, #108]	@ (8003184 <menu+0x24e8>)
 8003116:	f007 fbb1 	bl	800a87c <HAL_GPIO_ReadPin>
 800311a:	4603      	mov	r3, r0
 800311c:	2b01      	cmp	r3, #1
 800311e:	d10f      	bne.n	8003140 <menu+0x24a4>
 8003120:	4b19      	ldr	r3, [pc, #100]	@ (8003188 <menu+0x24ec>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	f083 0301 	eor.w	r3, r3, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <menu+0x24a4>
			eepromData[18] = devirmeSilindirTipi;
 800312e:	4b12      	ldr	r3, [pc, #72]	@ (8003178 <menu+0x24dc>)
 8003130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003134:	4915      	ldr	r1, [pc, #84]	@ (800318c <menu+0x24f0>)
 8003136:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
			hafizaYaz = 1;
 800313a:	4a15      	ldr	r2, [pc, #84]	@ (8003190 <menu+0x24f4>)
 800313c:	2301      	movs	r3, #1
 800313e:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 21) {
 8003140:	4b14      	ldr	r3, [pc, #80]	@ (8003194 <menu+0x24f8>)
 8003142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003146:	f1a2 0115 	sub.w	r1, r2, #21
 800314a:	430b      	orrs	r3, r1
 800314c:	f040 80b5 	bne.w	80032ba <menu+0x261e>
		lcd_print(1, 1, platformSilindirTipiText);
 8003150:	4a11      	ldr	r2, [pc, #68]	@ (8003198 <menu+0x24fc>)
 8003152:	2101      	movs	r1, #1
 8003154:	2001      	movs	r0, #1
 8003156:	f006 fa36 	bl	80095c6 <lcd_print>

		if(platformSilindirTipi == 0) {
 800315a:	4b10      	ldr	r3, [pc, #64]	@ (800319c <menu+0x2500>)
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	4313      	orrs	r3, r2
 8003162:	d11d      	bne.n	80031a0 <menu+0x2504>
			lcd_print(2, 1, tekTesirText);
 8003164:	4a05      	ldr	r2, [pc, #20]	@ (800317c <menu+0x24e0>)
 8003166:	2101      	movs	r1, #1
 8003168:	2002      	movs	r0, #2
 800316a:	f006 fa2c 	bl	80095c6 <lcd_print>
 800316e:	e022      	b.n	80031b6 <menu+0x251a>
 8003170:	20001130 	.word	0x20001130
 8003174:	20001664 	.word	0x20001664
 8003178:	20001148 	.word	0x20001148
 800317c:	20001678 	.word	0x20001678
 8003180:	2000168c 	.word	0x2000168c
 8003184:	40010800 	.word	0x40010800
 8003188:	2000121b 	.word	0x2000121b
 800318c:	20000d08 	.word	0x20000d08
 8003190:	20001218 	.word	0x20001218
 8003194:	200010b8 	.word	0x200010b8
 8003198:	200016a0 	.word	0x200016a0
 800319c:	20001150 	.word	0x20001150
		} else if(platformSilindirTipi == 1) {
 80031a0:	4ba6      	ldr	r3, [pc, #664]	@ (800343c <menu+0x27a0>)
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	1e51      	subs	r1, r2, #1
 80031a8:	430b      	orrs	r3, r1
 80031aa:	d104      	bne.n	80031b6 <menu+0x251a>
			lcd_print(2, 1, ciftTesirText);
 80031ac:	4aa4      	ldr	r2, [pc, #656]	@ (8003440 <menu+0x27a4>)
 80031ae:	2101      	movs	r1, #1
 80031b0:	2002      	movs	r0, #2
 80031b2:	f006 fa08 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031b6:	2102      	movs	r1, #2
 80031b8:	48a2      	ldr	r0, [pc, #648]	@ (8003444 <menu+0x27a8>)
 80031ba:	f007 fb5f 	bl	800a87c <HAL_GPIO_ReadPin>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d125      	bne.n	8003210 <menu+0x2574>
 80031c4:	4ba0      	ldr	r3, [pc, #640]	@ (8003448 <menu+0x27ac>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	f083 0301 	eor.w	r3, r3, #1
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d01e      	beq.n	8003210 <menu+0x2574>
			platformSilindirTipi = platformSilindirTipi + 1;
 80031d2:	4b9a      	ldr	r3, [pc, #616]	@ (800343c <menu+0x27a0>)
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	1c51      	adds	r1, r2, #1
 80031da:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80031de:	f143 0300 	adc.w	r3, r3, #0
 80031e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031e6:	4b95      	ldr	r3, [pc, #596]	@ (800343c <menu+0x27a0>)
 80031e8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80031ec:	e9c3 1200 	strd	r1, r2, [r3]

			if(platformSilindirTipi > 1) {
 80031f0:	4b92      	ldr	r3, [pc, #584]	@ (800343c <menu+0x27a0>)
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	2a02      	cmp	r2, #2
 80031f8:	f173 0300 	sbcs.w	r3, r3, #0
 80031fc:	d306      	bcc.n	800320c <menu+0x2570>
				platformSilindirTipi = 0;
 80031fe:	498f      	ldr	r1, [pc, #572]	@ (800343c <menu+0x27a0>)
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 800320c:	f000 ff74 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003210:	2104      	movs	r1, #4
 8003212:	488c      	ldr	r0, [pc, #560]	@ (8003444 <menu+0x27a8>)
 8003214:	f007 fb32 	bl	800a87c <HAL_GPIO_ReadPin>
 8003218:	4603      	mov	r3, r0
 800321a:	2b01      	cmp	r3, #1
 800321c:	d123      	bne.n	8003266 <menu+0x25ca>
 800321e:	4b8a      	ldr	r3, [pc, #552]	@ (8003448 <menu+0x27ac>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	f083 0301 	eor.w	r3, r3, #1
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01c      	beq.n	8003266 <menu+0x25ca>
			platformSilindirTipi = platformSilindirTipi - 1;
 800322c:	4b83      	ldr	r3, [pc, #524]	@ (800343c <menu+0x27a0>)
 800322e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003232:	1e51      	subs	r1, r2, #1
 8003234:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8003238:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 800323c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003240:	4b7e      	ldr	r3, [pc, #504]	@ (800343c <menu+0x27a0>)
 8003242:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003246:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(platformSilindirTipi > 0) {
 800324a:	4b7c      	ldr	r3, [pc, #496]	@ (800343c <menu+0x27a0>)
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	4313      	orrs	r3, r2
 8003252:	d006      	beq.n	8003262 <menu+0x25c6>
		   		platformSilindirTipi = 1;
 8003254:	4979      	ldr	r1, [pc, #484]	@ (800343c <menu+0x27a0>)
 8003256:	f04f 0201 	mov.w	r2, #1
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8003262:	f000 ff49 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003266:	2108      	movs	r1, #8
 8003268:	4876      	ldr	r0, [pc, #472]	@ (8003444 <menu+0x27a8>)
 800326a:	f007 fb07 	bl	800a87c <HAL_GPIO_ReadPin>
 800326e:	4603      	mov	r3, r0
 8003270:	2b01      	cmp	r3, #1
 8003272:	d122      	bne.n	80032ba <menu+0x261e>
 8003274:	4b74      	ldr	r3, [pc, #464]	@ (8003448 <menu+0x27ac>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	f083 0301 	eor.w	r3, r3, #1
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01b      	beq.n	80032ba <menu+0x261e>
			eepromData[19] = platformSilindirTipi;
 8003282:	4b6e      	ldr	r3, [pc, #440]	@ (800343c <menu+0x27a0>)
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	4970      	ldr	r1, [pc, #448]	@ (800344c <menu+0x27b0>)
 800328a:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

			if(platformSilindirTipi == 1) {
 800328e:	4b6b      	ldr	r3, [pc, #428]	@ (800343c <menu+0x27a0>)
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	1e51      	subs	r1, r2, #1
 8003296:	430b      	orrs	r3, r1
 8003298:	d10c      	bne.n	80032b4 <menu+0x2618>
				altLimit = 1;
 800329a:	496d      	ldr	r1, [pc, #436]	@ (8003450 <menu+0x27b4>)
 800329c:	f04f 0201 	mov.w	r2, #1
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[5] = altLimit;
 80032a8:	4b69      	ldr	r3, [pc, #420]	@ (8003450 <menu+0x27b4>)
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	4967      	ldr	r1, [pc, #412]	@ (800344c <menu+0x27b0>)
 80032b0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
			}
			hafizaYaz = 1;
 80032b4:	4a67      	ldr	r2, [pc, #412]	@ (8003454 <menu+0x27b8>)
 80032b6:	2301      	movs	r3, #1
 80032b8:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 22) {
 80032ba:	4b67      	ldr	r3, [pc, #412]	@ (8003458 <menu+0x27bc>)
 80032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c0:	f1a2 0116 	sub.w	r1, r2, #22
 80032c4:	430b      	orrs	r3, r1
 80032c6:	f040 8089 	bne.w	80033dc <menu+0x2740>
		lcd_print(1, 1, yukariValfSureText);
 80032ca:	4a64      	ldr	r2, [pc, #400]	@ (800345c <menu+0x27c0>)
 80032cc:	2101      	movs	r1, #1
 80032ce:	2001      	movs	r0, #1
 80032d0:	f006 f979 	bl	80095c6 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80032d4:	4a62      	ldr	r2, [pc, #392]	@ (8003460 <menu+0x27c4>)
 80032d6:	2101      	movs	r1, #1
 80032d8:	2002      	movs	r0, #2
 80032da:	f006 f974 	bl	80095c6 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 80032de:	4b61      	ldr	r3, [pc, #388]	@ (8003464 <menu+0x27c8>)
 80032e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e4:	4613      	mov	r3, r2
 80032e6:	220a      	movs	r2, #10
 80032e8:	495f      	ldr	r1, [pc, #380]	@ (8003468 <menu+0x27cc>)
 80032ea:	4618      	mov	r0, r3
 80032ec:	f009 fe68 	bl	800cfc0 <itoa>
		lcd_print(2,16,snum);
 80032f0:	4a5d      	ldr	r2, [pc, #372]	@ (8003468 <menu+0x27cc>)
 80032f2:	2110      	movs	r1, #16
 80032f4:	2002      	movs	r0, #2
 80032f6:	f006 f966 	bl	80095c6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032fa:	2102      	movs	r1, #2
 80032fc:	4851      	ldr	r0, [pc, #324]	@ (8003444 <menu+0x27a8>)
 80032fe:	f007 fabd 	bl	800a87c <HAL_GPIO_ReadPin>
 8003302:	4603      	mov	r3, r0
 8003304:	2b01      	cmp	r3, #1
 8003306:	d125      	bne.n	8003354 <menu+0x26b8>
 8003308:	4b4f      	ldr	r3, [pc, #316]	@ (8003448 <menu+0x27ac>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	f083 0301 	eor.w	r3, r3, #1
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d01e      	beq.n	8003354 <menu+0x26b8>
			yukariValfTmr = yukariValfTmr + 1;
 8003316:	4b53      	ldr	r3, [pc, #332]	@ (8003464 <menu+0x27c8>)
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	1c51      	adds	r1, r2, #1
 800331e:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8003322:	f143 0300 	adc.w	r3, r3, #0
 8003326:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800332a:	4b4e      	ldr	r3, [pc, #312]	@ (8003464 <menu+0x27c8>)
 800332c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003330:	e9c3 1200 	strd	r1, r2, [r3]

			if(yukariValfTmr > 5) {
 8003334:	4b4b      	ldr	r3, [pc, #300]	@ (8003464 <menu+0x27c8>)
 8003336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333a:	2a06      	cmp	r2, #6
 800333c:	f173 0300 	sbcs.w	r3, r3, #0
 8003340:	d306      	bcc.n	8003350 <menu+0x26b4>
				yukariValfTmr = 0;
 8003342:	4948      	ldr	r1, [pc, #288]	@ (8003464 <menu+0x27c8>)
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8003350:	f000 fed2 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003354:	2104      	movs	r1, #4
 8003356:	483b      	ldr	r0, [pc, #236]	@ (8003444 <menu+0x27a8>)
 8003358:	f007 fa90 	bl	800a87c <HAL_GPIO_ReadPin>
 800335c:	4603      	mov	r3, r0
 800335e:	2b01      	cmp	r3, #1
 8003360:	d125      	bne.n	80033ae <menu+0x2712>
 8003362:	4b39      	ldr	r3, [pc, #228]	@ (8003448 <menu+0x27ac>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	f083 0301 	eor.w	r3, r3, #1
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01e      	beq.n	80033ae <menu+0x2712>
			yukariValfTmr = yukariValfTmr - 1;
 8003370:	4b3c      	ldr	r3, [pc, #240]	@ (8003464 <menu+0x27c8>)
 8003372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003376:	1e51      	subs	r1, r2, #1
 8003378:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800337c:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8003380:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003384:	4b37      	ldr	r3, [pc, #220]	@ (8003464 <menu+0x27c8>)
 8003386:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800338a:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(yukariValfTmr > 6) {
 800338e:	4b35      	ldr	r3, [pc, #212]	@ (8003464 <menu+0x27c8>)
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	2a07      	cmp	r2, #7
 8003396:	f173 0300 	sbcs.w	r3, r3, #0
 800339a:	d306      	bcc.n	80033aa <menu+0x270e>
		   		yukariValfTmr = 5;
 800339c:	4931      	ldr	r1, [pc, #196]	@ (8003464 <menu+0x27c8>)
 800339e:	f04f 0205 	mov.w	r2, #5
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 80033aa:	f000 fea5 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033ae:	2108      	movs	r1, #8
 80033b0:	4824      	ldr	r0, [pc, #144]	@ (8003444 <menu+0x27a8>)
 80033b2:	f007 fa63 	bl	800a87c <HAL_GPIO_ReadPin>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d10f      	bne.n	80033dc <menu+0x2740>
 80033bc:	4b22      	ldr	r3, [pc, #136]	@ (8003448 <menu+0x27ac>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	f083 0301 	eor.w	r3, r3, #1
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <menu+0x2740>
			eepromData[20] = yukariValfTmr;
 80033ca:	4b26      	ldr	r3, [pc, #152]	@ (8003464 <menu+0x27c8>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	491e      	ldr	r1, [pc, #120]	@ (800344c <menu+0x27b0>)
 80033d2:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
			hafizaYaz = 1;
 80033d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003454 <menu+0x27b8>)
 80033d8:	2301      	movs	r3, #1
 80033da:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 23) {
 80033dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003458 <menu+0x27bc>)
 80033de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e2:	f1a2 0117 	sub.w	r1, r2, #23
 80033e6:	430b      	orrs	r3, r1
 80033e8:	f040 80a3 	bne.w	8003532 <menu+0x2896>
		lcd_print(1, 1, asagiValfSureText);
 80033ec:	4a1f      	ldr	r2, [pc, #124]	@ (800346c <menu+0x27d0>)
 80033ee:	2101      	movs	r1, #1
 80033f0:	2001      	movs	r0, #1
 80033f2:	f006 f8e8 	bl	80095c6 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80033f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003460 <menu+0x27c4>)
 80033f8:	2101      	movs	r1, #1
 80033fa:	2002      	movs	r0, #2
 80033fc:	f006 f8e3 	bl	80095c6 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 8003400:	4b1b      	ldr	r3, [pc, #108]	@ (8003470 <menu+0x27d4>)
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	4613      	mov	r3, r2
 8003408:	220a      	movs	r2, #10
 800340a:	4917      	ldr	r1, [pc, #92]	@ (8003468 <menu+0x27cc>)
 800340c:	4618      	mov	r0, r3
 800340e:	f009 fdd7 	bl	800cfc0 <itoa>
		lcd_print(2,16,snum);
 8003412:	4a15      	ldr	r2, [pc, #84]	@ (8003468 <menu+0x27cc>)
 8003414:	2110      	movs	r1, #16
 8003416:	2002      	movs	r0, #2
 8003418:	f006 f8d5 	bl	80095c6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800341c:	2102      	movs	r1, #2
 800341e:	4809      	ldr	r0, [pc, #36]	@ (8003444 <menu+0x27a8>)
 8003420:	f007 fa2c 	bl	800a87c <HAL_GPIO_ReadPin>
 8003424:	4603      	mov	r3, r0
 8003426:	2b01      	cmp	r3, #1
 8003428:	d141      	bne.n	80034ae <menu+0x2812>
 800342a:	4b07      	ldr	r3, [pc, #28]	@ (8003448 <menu+0x27ac>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	f083 0301 	eor.w	r3, r3, #1
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d03a      	beq.n	80034ae <menu+0x2812>
 8003438:	e01c      	b.n	8003474 <menu+0x27d8>
 800343a:	bf00      	nop
 800343c:	20001150 	.word	0x20001150
 8003440:	2000168c 	.word	0x2000168c
 8003444:	40010800 	.word	0x40010800
 8003448:	2000121b 	.word	0x2000121b
 800344c:	20000d08 	.word	0x20000d08
 8003450:	200010e8 	.word	0x200010e8
 8003454:	20001218 	.word	0x20001218
 8003458:	200010b8 	.word	0x200010b8
 800345c:	200016b4 	.word	0x200016b4
 8003460:	200014fc 	.word	0x200014fc
 8003464:	20001158 	.word	0x20001158
 8003468:	20001078 	.word	0x20001078
 800346c:	200016c8 	.word	0x200016c8
 8003470:	20001160 	.word	0x20001160
			asagiValfTmr = asagiValfTmr + 1;
 8003474:	4b88      	ldr	r3, [pc, #544]	@ (8003698 <menu+0x29fc>)
 8003476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347a:	1c51      	adds	r1, r2, #1
 800347c:	67b9      	str	r1, [r7, #120]	@ 0x78
 800347e:	f143 0300 	adc.w	r3, r3, #0
 8003482:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003484:	4b84      	ldr	r3, [pc, #528]	@ (8003698 <menu+0x29fc>)
 8003486:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800348a:	e9c3 1200 	strd	r1, r2, [r3]

			if(asagiValfTmr > 5) {
 800348e:	4b82      	ldr	r3, [pc, #520]	@ (8003698 <menu+0x29fc>)
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	2a06      	cmp	r2, #6
 8003496:	f173 0300 	sbcs.w	r3, r3, #0
 800349a:	d306      	bcc.n	80034aa <menu+0x280e>
				asagiValfTmr = 0;
 800349c:	497e      	ldr	r1, [pc, #504]	@ (8003698 <menu+0x29fc>)
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 80034aa:	f000 fe25 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80034ae:	2104      	movs	r1, #4
 80034b0:	487a      	ldr	r0, [pc, #488]	@ (800369c <menu+0x2a00>)
 80034b2:	f007 f9e3 	bl	800a87c <HAL_GPIO_ReadPin>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d123      	bne.n	8003504 <menu+0x2868>
 80034bc:	4b78      	ldr	r3, [pc, #480]	@ (80036a0 <menu+0x2a04>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	f083 0301 	eor.w	r3, r3, #1
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d01c      	beq.n	8003504 <menu+0x2868>
			asagiValfTmr = asagiValfTmr - 1;
 80034ca:	4b73      	ldr	r3, [pc, #460]	@ (8003698 <menu+0x29fc>)
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	1e51      	subs	r1, r2, #1
 80034d2:	6739      	str	r1, [r7, #112]	@ 0x70
 80034d4:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 80034d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80034da:	4b6f      	ldr	r3, [pc, #444]	@ (8003698 <menu+0x29fc>)
 80034dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80034e0:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(asagiValfTmr > 6) {
 80034e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003698 <menu+0x29fc>)
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	2a07      	cmp	r2, #7
 80034ec:	f173 0300 	sbcs.w	r3, r3, #0
 80034f0:	d306      	bcc.n	8003500 <menu+0x2864>
		   		asagiValfTmr = 5;
 80034f2:	4969      	ldr	r1, [pc, #420]	@ (8003698 <menu+0x29fc>)
 80034f4:	f04f 0205 	mov.w	r2, #5
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8003500:	f000 fdfa 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003504:	2108      	movs	r1, #8
 8003506:	4865      	ldr	r0, [pc, #404]	@ (800369c <menu+0x2a00>)
 8003508:	f007 f9b8 	bl	800a87c <HAL_GPIO_ReadPin>
 800350c:	4603      	mov	r3, r0
 800350e:	2b01      	cmp	r3, #1
 8003510:	d10f      	bne.n	8003532 <menu+0x2896>
 8003512:	4b63      	ldr	r3, [pc, #396]	@ (80036a0 <menu+0x2a04>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	f083 0301 	eor.w	r3, r3, #1
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <menu+0x2896>
			eepromData[21] = asagiValfTmr;
 8003520:	4b5d      	ldr	r3, [pc, #372]	@ (8003698 <menu+0x29fc>)
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	495f      	ldr	r1, [pc, #380]	@ (80036a4 <menu+0x2a08>)
 8003528:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
			hafizaYaz = 1;
 800352c:	4a5e      	ldr	r2, [pc, #376]	@ (80036a8 <menu+0x2a0c>)
 800352e:	2301      	movs	r3, #1
 8003530:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 24) {
 8003532:	4b5e      	ldr	r3, [pc, #376]	@ (80036ac <menu+0x2a10>)
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f1a2 0118 	sub.w	r1, r2, #24
 800353c:	430b      	orrs	r3, r1
 800353e:	f040 8097 	bne.w	8003670 <menu+0x29d4>
		if(devirmeYuruyusSecim == 2) {
 8003542:	4b5b      	ldr	r3, [pc, #364]	@ (80036b0 <menu+0x2a14>)
 8003544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003548:	1e91      	subs	r1, r2, #2
 800354a:	430b      	orrs	r3, r1
 800354c:	d105      	bne.n	800355a <menu+0x28be>
			lcd_print(1, 1, devirmeYukariValfSureText);
 800354e:	4a59      	ldr	r2, [pc, #356]	@ (80036b4 <menu+0x2a18>)
 8003550:	2101      	movs	r1, #1
 8003552:	2001      	movs	r0, #1
 8003554:	f006 f837 	bl	80095c6 <lcd_print>
 8003558:	e00a      	b.n	8003570 <menu+0x28d4>
		} else if(devirmeYuruyusSecim == 1) {
 800355a:	4b55      	ldr	r3, [pc, #340]	@ (80036b0 <menu+0x2a14>)
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	1e51      	subs	r1, r2, #1
 8003562:	430b      	orrs	r3, r1
 8003564:	d104      	bne.n	8003570 <menu+0x28d4>
			lcd_print(1, 1, ileriValfSureText);
 8003566:	4a54      	ldr	r2, [pc, #336]	@ (80036b8 <menu+0x2a1c>)
 8003568:	2101      	movs	r1, #1
 800356a:	2001      	movs	r0, #1
 800356c:	f006 f82b 	bl	80095c6 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003570:	4a52      	ldr	r2, [pc, #328]	@ (80036bc <menu+0x2a20>)
 8003572:	2101      	movs	r1, #1
 8003574:	2002      	movs	r0, #2
 8003576:	f006 f826 	bl	80095c6 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 800357a:	4b51      	ldr	r3, [pc, #324]	@ (80036c0 <menu+0x2a24>)
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	4613      	mov	r3, r2
 8003582:	220a      	movs	r2, #10
 8003584:	494f      	ldr	r1, [pc, #316]	@ (80036c4 <menu+0x2a28>)
 8003586:	4618      	mov	r0, r3
 8003588:	f009 fd1a 	bl	800cfc0 <itoa>
		lcd_print(2, 16, snum);
 800358c:	4a4d      	ldr	r2, [pc, #308]	@ (80036c4 <menu+0x2a28>)
 800358e:	2110      	movs	r1, #16
 8003590:	2002      	movs	r0, #2
 8003592:	f006 f818 	bl	80095c6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003596:	2102      	movs	r1, #2
 8003598:	4840      	ldr	r0, [pc, #256]	@ (800369c <menu+0x2a00>)
 800359a:	f007 f96f 	bl	800a87c <HAL_GPIO_ReadPin>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d123      	bne.n	80035ec <menu+0x2950>
 80035a4:	4b3e      	ldr	r3, [pc, #248]	@ (80036a0 <menu+0x2a04>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	f083 0301 	eor.w	r3, r3, #1
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d01c      	beq.n	80035ec <menu+0x2950>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 80035b2:	4b43      	ldr	r3, [pc, #268]	@ (80036c0 <menu+0x2a24>)
 80035b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b8:	1c51      	adds	r1, r2, #1
 80035ba:	66b9      	str	r1, [r7, #104]	@ 0x68
 80035bc:	f143 0300 	adc.w	r3, r3, #0
 80035c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035c2:	4b3f      	ldr	r3, [pc, #252]	@ (80036c0 <menu+0x2a24>)
 80035c4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80035c8:	e9c3 1200 	strd	r1, r2, [r3]

			if(devirmeYukariIleriTmr > 5) {
 80035cc:	4b3c      	ldr	r3, [pc, #240]	@ (80036c0 <menu+0x2a24>)
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	2a06      	cmp	r2, #6
 80035d4:	f173 0300 	sbcs.w	r3, r3, #0
 80035d8:	d306      	bcc.n	80035e8 <menu+0x294c>
				devirmeYukariIleriTmr = 0;
 80035da:	4939      	ldr	r1, [pc, #228]	@ (80036c0 <menu+0x2a24>)
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 80035e8:	f000 fd86 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035ec:	2104      	movs	r1, #4
 80035ee:	482b      	ldr	r0, [pc, #172]	@ (800369c <menu+0x2a00>)
 80035f0:	f007 f944 	bl	800a87c <HAL_GPIO_ReadPin>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d123      	bne.n	8003642 <menu+0x29a6>
 80035fa:	4b29      	ldr	r3, [pc, #164]	@ (80036a0 <menu+0x2a04>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	f083 0301 	eor.w	r3, r3, #1
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01c      	beq.n	8003642 <menu+0x29a6>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003608:	4b2d      	ldr	r3, [pc, #180]	@ (80036c0 <menu+0x2a24>)
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	1e51      	subs	r1, r2, #1
 8003610:	6639      	str	r1, [r7, #96]	@ 0x60
 8003612:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8003616:	667b      	str	r3, [r7, #100]	@ 0x64
 8003618:	4b29      	ldr	r3, [pc, #164]	@ (80036c0 <menu+0x2a24>)
 800361a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800361e:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(devirmeYukariIleriTmr > 6) {
 8003622:	4b27      	ldr	r3, [pc, #156]	@ (80036c0 <menu+0x2a24>)
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	2a07      	cmp	r2, #7
 800362a:	f173 0300 	sbcs.w	r3, r3, #0
 800362e:	d306      	bcc.n	800363e <menu+0x29a2>
		   		devirmeYukariIleriTmr = 5;
 8003630:	4923      	ldr	r1, [pc, #140]	@ (80036c0 <menu+0x2a24>)
 8003632:	f04f 0205 	mov.w	r2, #5
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 800363e:	f000 fd5b 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003642:	2108      	movs	r1, #8
 8003644:	4815      	ldr	r0, [pc, #84]	@ (800369c <menu+0x2a00>)
 8003646:	f007 f919 	bl	800a87c <HAL_GPIO_ReadPin>
 800364a:	4603      	mov	r3, r0
 800364c:	2b01      	cmp	r3, #1
 800364e:	d10f      	bne.n	8003670 <menu+0x29d4>
 8003650:	4b13      	ldr	r3, [pc, #76]	@ (80036a0 <menu+0x2a04>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	f083 0301 	eor.w	r3, r3, #1
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <menu+0x29d4>
			eepromData[22] = devirmeYukariIleriTmr;
 800365e:	4b18      	ldr	r3, [pc, #96]	@ (80036c0 <menu+0x2a24>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	490f      	ldr	r1, [pc, #60]	@ (80036a4 <menu+0x2a08>)
 8003666:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
			hafizaYaz = 1;
 800366a:	4a0f      	ldr	r2, [pc, #60]	@ (80036a8 <menu+0x2a0c>)
 800366c:	2301      	movs	r3, #1
 800366e:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 25) {
 8003670:	4b0e      	ldr	r3, [pc, #56]	@ (80036ac <menu+0x2a10>)
 8003672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003676:	f1a2 0119 	sub.w	r1, r2, #25
 800367a:	430b      	orrs	r3, r1
 800367c:	f040 80b1 	bne.w	80037e2 <menu+0x2b46>
		if(devirmeYuruyusSecim == 2) {
 8003680:	4b0b      	ldr	r3, [pc, #44]	@ (80036b0 <menu+0x2a14>)
 8003682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003686:	1e91      	subs	r1, r2, #2
 8003688:	430b      	orrs	r3, r1
 800368a:	d11f      	bne.n	80036cc <menu+0x2a30>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 800368c:	4a0e      	ldr	r2, [pc, #56]	@ (80036c8 <menu+0x2a2c>)
 800368e:	2101      	movs	r1, #1
 8003690:	2001      	movs	r0, #1
 8003692:	f005 ff98 	bl	80095c6 <lcd_print>
 8003696:	e024      	b.n	80036e2 <menu+0x2a46>
 8003698:	20001160 	.word	0x20001160
 800369c:	40010800 	.word	0x40010800
 80036a0:	2000121b 	.word	0x2000121b
 80036a4:	20000d08 	.word	0x20000d08
 80036a8:	20001218 	.word	0x20001218
 80036ac:	200010b8 	.word	0x200010b8
 80036b0:	20001130 	.word	0x20001130
 80036b4:	200016dc 	.word	0x200016dc
 80036b8:	200016f0 	.word	0x200016f0
 80036bc:	200014fc 	.word	0x200014fc
 80036c0:	20001168 	.word	0x20001168
 80036c4:	20001078 	.word	0x20001078
 80036c8:	20001704 	.word	0x20001704
		} else if(devirmeYuruyusSecim == 1) {
 80036cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003878 <menu+0x2bdc>)
 80036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d2:	1e51      	subs	r1, r2, #1
 80036d4:	430b      	orrs	r3, r1
 80036d6:	d104      	bne.n	80036e2 <menu+0x2a46>
			lcd_print(1, 1, geriValfSureText);
 80036d8:	4a68      	ldr	r2, [pc, #416]	@ (800387c <menu+0x2be0>)
 80036da:	2101      	movs	r1, #1
 80036dc:	2001      	movs	r0, #1
 80036de:	f005 ff72 	bl	80095c6 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80036e2:	4a67      	ldr	r2, [pc, #412]	@ (8003880 <menu+0x2be4>)
 80036e4:	2101      	movs	r1, #1
 80036e6:	2002      	movs	r0, #2
 80036e8:	f005 ff6d 	bl	80095c6 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80036ec:	4b65      	ldr	r3, [pc, #404]	@ (8003884 <menu+0x2be8>)
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	4613      	mov	r3, r2
 80036f4:	220a      	movs	r2, #10
 80036f6:	4964      	ldr	r1, [pc, #400]	@ (8003888 <menu+0x2bec>)
 80036f8:	4618      	mov	r0, r3
 80036fa:	f009 fc61 	bl	800cfc0 <itoa>
		lcd_print(2,16,snum);
 80036fe:	4a62      	ldr	r2, [pc, #392]	@ (8003888 <menu+0x2bec>)
 8003700:	2110      	movs	r1, #16
 8003702:	2002      	movs	r0, #2
 8003704:	f005 ff5f 	bl	80095c6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003708:	2102      	movs	r1, #2
 800370a:	4860      	ldr	r0, [pc, #384]	@ (800388c <menu+0x2bf0>)
 800370c:	f007 f8b6 	bl	800a87c <HAL_GPIO_ReadPin>
 8003710:	4603      	mov	r3, r0
 8003712:	2b01      	cmp	r3, #1
 8003714:	d123      	bne.n	800375e <menu+0x2ac2>
 8003716:	4b5e      	ldr	r3, [pc, #376]	@ (8003890 <menu+0x2bf4>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	f083 0301 	eor.w	r3, r3, #1
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01c      	beq.n	800375e <menu+0x2ac2>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003724:	4b57      	ldr	r3, [pc, #348]	@ (8003884 <menu+0x2be8>)
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	1c51      	adds	r1, r2, #1
 800372c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800372e:	f143 0300 	adc.w	r3, r3, #0
 8003732:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003734:	4b53      	ldr	r3, [pc, #332]	@ (8003884 <menu+0x2be8>)
 8003736:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800373a:	e9c3 1200 	strd	r1, r2, [r3]

			if(devirmeAsagiGeriTmr > 5) {
 800373e:	4b51      	ldr	r3, [pc, #324]	@ (8003884 <menu+0x2be8>)
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	2a06      	cmp	r2, #6
 8003746:	f173 0300 	sbcs.w	r3, r3, #0
 800374a:	d306      	bcc.n	800375a <menu+0x2abe>
				devirmeAsagiGeriTmr = 0;
 800374c:	494d      	ldr	r1, [pc, #308]	@ (8003884 <menu+0x2be8>)
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 800375a:	f000 fccd 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800375e:	2104      	movs	r1, #4
 8003760:	484a      	ldr	r0, [pc, #296]	@ (800388c <menu+0x2bf0>)
 8003762:	f007 f88b 	bl	800a87c <HAL_GPIO_ReadPin>
 8003766:	4603      	mov	r3, r0
 8003768:	2b01      	cmp	r3, #1
 800376a:	d123      	bne.n	80037b4 <menu+0x2b18>
 800376c:	4b48      	ldr	r3, [pc, #288]	@ (8003890 <menu+0x2bf4>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	f083 0301 	eor.w	r3, r3, #1
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d01c      	beq.n	80037b4 <menu+0x2b18>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 800377a:	4b42      	ldr	r3, [pc, #264]	@ (8003884 <menu+0x2be8>)
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	1e51      	subs	r1, r2, #1
 8003782:	6539      	str	r1, [r7, #80]	@ 0x50
 8003784:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8003788:	657b      	str	r3, [r7, #84]	@ 0x54
 800378a:	4b3e      	ldr	r3, [pc, #248]	@ (8003884 <menu+0x2be8>)
 800378c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003790:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003794:	4b3b      	ldr	r3, [pc, #236]	@ (8003884 <menu+0x2be8>)
 8003796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379a:	2a07      	cmp	r2, #7
 800379c:	f173 0300 	sbcs.w	r3, r3, #0
 80037a0:	d306      	bcc.n	80037b0 <menu+0x2b14>
		   		devirmeAsagiGeriTmr = 5;
 80037a2:	4938      	ldr	r1, [pc, #224]	@ (8003884 <menu+0x2be8>)
 80037a4:	f04f 0205 	mov.w	r2, #5
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 80037b0:	f000 fca2 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037b4:	2108      	movs	r1, #8
 80037b6:	4835      	ldr	r0, [pc, #212]	@ (800388c <menu+0x2bf0>)
 80037b8:	f007 f860 	bl	800a87c <HAL_GPIO_ReadPin>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d10f      	bne.n	80037e2 <menu+0x2b46>
 80037c2:	4b33      	ldr	r3, [pc, #204]	@ (8003890 <menu+0x2bf4>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	f083 0301 	eor.w	r3, r3, #1
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <menu+0x2b46>
			eepromData[23] = devirmeAsagiGeriTmr;
 80037d0:	4b2c      	ldr	r3, [pc, #176]	@ (8003884 <menu+0x2be8>)
 80037d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d6:	492f      	ldr	r1, [pc, #188]	@ (8003894 <menu+0x2bf8>)
 80037d8:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8
			hafizaYaz = 1;
 80037dc:	4a2e      	ldr	r2, [pc, #184]	@ (8003898 <menu+0x2bfc>)
 80037de:	2301      	movs	r3, #1
 80037e0:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 26) {
 80037e2:	4b2e      	ldr	r3, [pc, #184]	@ (800389c <menu+0x2c00>)
 80037e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e8:	f1a2 011a 	sub.w	r1, r2, #26
 80037ec:	430b      	orrs	r3, r1
 80037ee:	f040 80e2 	bne.w	80039b6 <menu+0x2d1a>
		lcd_print(1, 1, calismaSuresiText);
 80037f2:	4a2b      	ldr	r2, [pc, #172]	@ (80038a0 <menu+0x2c04>)
 80037f4:	2101      	movs	r1, #1
 80037f6:	2001      	movs	r0, #1
 80037f8:	f005 fee5 	bl	80095c6 <lcd_print>

		if(makineCalismaTmr > 99) {
 80037fc:	4b29      	ldr	r3, [pc, #164]	@ (80038a4 <menu+0x2c08>)
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	2a64      	cmp	r2, #100	@ 0x64
 8003804:	f173 0300 	sbcs.w	r3, r3, #0
 8003808:	d313      	bcc.n	8003832 <menu+0x2b96>
			lcd_print(2, 1, kacSaniyeText);
 800380a:	4a1d      	ldr	r2, [pc, #116]	@ (8003880 <menu+0x2be4>)
 800380c:	2101      	movs	r1, #1
 800380e:	2002      	movs	r0, #2
 8003810:	f005 fed9 	bl	80095c6 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003814:	4b23      	ldr	r3, [pc, #140]	@ (80038a4 <menu+0x2c08>)
 8003816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381a:	4613      	mov	r3, r2
 800381c:	220a      	movs	r2, #10
 800381e:	491a      	ldr	r1, [pc, #104]	@ (8003888 <menu+0x2bec>)
 8003820:	4618      	mov	r0, r3
 8003822:	f009 fbcd 	bl	800cfc0 <itoa>
			lcd_print(2,14,snum);
 8003826:	4a18      	ldr	r2, [pc, #96]	@ (8003888 <menu+0x2bec>)
 8003828:	210e      	movs	r1, #14
 800382a:	2002      	movs	r0, #2
 800382c:	f005 fecb 	bl	80095c6 <lcd_print>
 8003830:	e054      	b.n	80038dc <menu+0x2c40>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003832:	4b1c      	ldr	r3, [pc, #112]	@ (80038a4 <menu+0x2c08>)
 8003834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003838:	2a0a      	cmp	r2, #10
 800383a:	f173 0300 	sbcs.w	r3, r3, #0
 800383e:	d333      	bcc.n	80038a8 <menu+0x2c0c>
 8003840:	4b18      	ldr	r3, [pc, #96]	@ (80038a4 <menu+0x2c08>)
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	2a64      	cmp	r2, #100	@ 0x64
 8003848:	f173 0300 	sbcs.w	r3, r3, #0
 800384c:	d22c      	bcs.n	80038a8 <menu+0x2c0c>
			lcd_print(2, 1, kacSaniyeText);
 800384e:	4a0c      	ldr	r2, [pc, #48]	@ (8003880 <menu+0x2be4>)
 8003850:	2101      	movs	r1, #1
 8003852:	2002      	movs	r0, #2
 8003854:	f005 feb7 	bl	80095c6 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003858:	4b12      	ldr	r3, [pc, #72]	@ (80038a4 <menu+0x2c08>)
 800385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385e:	4613      	mov	r3, r2
 8003860:	220a      	movs	r2, #10
 8003862:	4909      	ldr	r1, [pc, #36]	@ (8003888 <menu+0x2bec>)
 8003864:	4618      	mov	r0, r3
 8003866:	f009 fbab 	bl	800cfc0 <itoa>
			lcd_print(2, 15, snum);
 800386a:	4a07      	ldr	r2, [pc, #28]	@ (8003888 <menu+0x2bec>)
 800386c:	210f      	movs	r1, #15
 800386e:	2002      	movs	r0, #2
 8003870:	f005 fea9 	bl	80095c6 <lcd_print>
 8003874:	e032      	b.n	80038dc <menu+0x2c40>
 8003876:	bf00      	nop
 8003878:	20001130 	.word	0x20001130
 800387c:	20001718 	.word	0x20001718
 8003880:	200014fc 	.word	0x200014fc
 8003884:	20001170 	.word	0x20001170
 8003888:	20001078 	.word	0x20001078
 800388c:	40010800 	.word	0x40010800
 8003890:	2000121b 	.word	0x2000121b
 8003894:	20000d08 	.word	0x20000d08
 8003898:	20001218 	.word	0x20001218
 800389c:	200010b8 	.word	0x200010b8
 80038a0:	2000172c 	.word	0x2000172c
 80038a4:	20001178 	.word	0x20001178
		} else if(makineCalismaTmr <=  9) {
 80038a8:	4b99      	ldr	r3, [pc, #612]	@ (8003b10 <menu+0x2e74>)
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	2a0a      	cmp	r2, #10
 80038b0:	f173 0300 	sbcs.w	r3, r3, #0
 80038b4:	d212      	bcs.n	80038dc <menu+0x2c40>
			lcd_print(2, 1, kacSaniyeText);
 80038b6:	4a97      	ldr	r2, [pc, #604]	@ (8003b14 <menu+0x2e78>)
 80038b8:	2101      	movs	r1, #1
 80038ba:	2002      	movs	r0, #2
 80038bc:	f005 fe83 	bl	80095c6 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80038c0:	4b93      	ldr	r3, [pc, #588]	@ (8003b10 <menu+0x2e74>)
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	4613      	mov	r3, r2
 80038c8:	220a      	movs	r2, #10
 80038ca:	4993      	ldr	r1, [pc, #588]	@ (8003b18 <menu+0x2e7c>)
 80038cc:	4618      	mov	r0, r3
 80038ce:	f009 fb77 	bl	800cfc0 <itoa>
			lcd_print(2, 16, snum);
 80038d2:	4a91      	ldr	r2, [pc, #580]	@ (8003b18 <menu+0x2e7c>)
 80038d4:	2110      	movs	r1, #16
 80038d6:	2002      	movs	r0, #2
 80038d8:	f005 fe75 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038dc:	2102      	movs	r1, #2
 80038de:	488f      	ldr	r0, [pc, #572]	@ (8003b1c <menu+0x2e80>)
 80038e0:	f006 ffcc 	bl	800a87c <HAL_GPIO_ReadPin>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d123      	bne.n	8003932 <menu+0x2c96>
 80038ea:	4b8d      	ldr	r3, [pc, #564]	@ (8003b20 <menu+0x2e84>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	f083 0301 	eor.w	r3, r3, #1
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01c      	beq.n	8003932 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr + 1;
 80038f8:	4b85      	ldr	r3, [pc, #532]	@ (8003b10 <menu+0x2e74>)
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	1c51      	adds	r1, r2, #1
 8003900:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003902:	f143 0300 	adc.w	r3, r3, #0
 8003906:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003908:	4b81      	ldr	r3, [pc, #516]	@ (8003b10 <menu+0x2e74>)
 800390a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800390e:	e9c3 1200 	strd	r1, r2, [r3]

			if(makineCalismaTmr > 180) {
 8003912:	4b7f      	ldr	r3, [pc, #508]	@ (8003b10 <menu+0x2e74>)
 8003914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003918:	2ab5      	cmp	r2, #181	@ 0xb5
 800391a:	f173 0300 	sbcs.w	r3, r3, #0
 800391e:	d306      	bcc.n	800392e <menu+0x2c92>
				makineCalismaTmr = 0;
 8003920:	497b      	ldr	r1, [pc, #492]	@ (8003b10 <menu+0x2e74>)
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 800392e:	f000 fbe3 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003932:	2104      	movs	r1, #4
 8003934:	4879      	ldr	r0, [pc, #484]	@ (8003b1c <menu+0x2e80>)
 8003936:	f006 ffa1 	bl	800a87c <HAL_GPIO_ReadPin>
 800393a:	4603      	mov	r3, r0
 800393c:	2b01      	cmp	r3, #1
 800393e:	d123      	bne.n	8003988 <menu+0x2cec>
 8003940:	4b77      	ldr	r3, [pc, #476]	@ (8003b20 <menu+0x2e84>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	f083 0301 	eor.w	r3, r3, #1
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d01c      	beq.n	8003988 <menu+0x2cec>
			makineCalismaTmr = makineCalismaTmr - 1;
 800394e:	4b70      	ldr	r3, [pc, #448]	@ (8003b10 <menu+0x2e74>)
 8003950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003954:	1e51      	subs	r1, r2, #1
 8003956:	6439      	str	r1, [r7, #64]	@ 0x40
 8003958:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 800395c:	647b      	str	r3, [r7, #68]	@ 0x44
 800395e:	4b6c      	ldr	r3, [pc, #432]	@ (8003b10 <menu+0x2e74>)
 8003960:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003964:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(makineCalismaTmr > 181) {
 8003968:	4b69      	ldr	r3, [pc, #420]	@ (8003b10 <menu+0x2e74>)
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	2ab6      	cmp	r2, #182	@ 0xb6
 8003970:	f173 0300 	sbcs.w	r3, r3, #0
 8003974:	d306      	bcc.n	8003984 <menu+0x2ce8>
		   		makineCalismaTmr = 180;
 8003976:	4966      	ldr	r1, [pc, #408]	@ (8003b10 <menu+0x2e74>)
 8003978:	f04f 02b4 	mov.w	r2, #180	@ 0xb4
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8003984:	f000 fbb8 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003988:	2108      	movs	r1, #8
 800398a:	4864      	ldr	r0, [pc, #400]	@ (8003b1c <menu+0x2e80>)
 800398c:	f006 ff76 	bl	800a87c <HAL_GPIO_ReadPin>
 8003990:	4603      	mov	r3, r0
 8003992:	2b01      	cmp	r3, #1
 8003994:	d10f      	bne.n	80039b6 <menu+0x2d1a>
 8003996:	4b62      	ldr	r3, [pc, #392]	@ (8003b20 <menu+0x2e84>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	f083 0301 	eor.w	r3, r3, #1
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <menu+0x2d1a>
			eepromData[24] = makineCalismaTmr;
 80039a4:	4b5a      	ldr	r3, [pc, #360]	@ (8003b10 <menu+0x2e74>)
 80039a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039aa:	495e      	ldr	r1, [pc, #376]	@ (8003b24 <menu+0x2e88>)
 80039ac:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
			hafizaYaz = 1;
 80039b0:	4a5d      	ldr	r2, [pc, #372]	@ (8003b28 <menu+0x2e8c>)
 80039b2:	2301      	movs	r3, #1
 80039b4:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 27) {
 80039b6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b2c <menu+0x2e90>)
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f1a2 011b 	sub.w	r1, r2, #27
 80039c0:	430b      	orrs	r3, r1
 80039c2:	f040 8086 	bne.w	8003ad2 <menu+0x2e36>
		lcd_print(1, 1, buzzerTextGN);
 80039c6:	4a5a      	ldr	r2, [pc, #360]	@ (8003b30 <menu+0x2e94>)
 80039c8:	2101      	movs	r1, #1
 80039ca:	2001      	movs	r0, #1
 80039cc:	f005 fdfb 	bl	80095c6 <lcd_print>

		if(buzzer == 0) {
 80039d0:	4b58      	ldr	r3, [pc, #352]	@ (8003b34 <menu+0x2e98>)
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	d105      	bne.n	80039e6 <menu+0x2d4a>
			lcd_print(2, 1, pasifText);
 80039da:	4a57      	ldr	r2, [pc, #348]	@ (8003b38 <menu+0x2e9c>)
 80039dc:	2101      	movs	r1, #1
 80039de:	2002      	movs	r0, #2
 80039e0:	f005 fdf1 	bl	80095c6 <lcd_print>
 80039e4:	e00a      	b.n	80039fc <menu+0x2d60>
		} else if(buzzer == 1) {
 80039e6:	4b53      	ldr	r3, [pc, #332]	@ (8003b34 <menu+0x2e98>)
 80039e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ec:	1e51      	subs	r1, r2, #1
 80039ee:	430b      	orrs	r3, r1
 80039f0:	d104      	bne.n	80039fc <menu+0x2d60>
			lcd_print(2, 1, aktifText);
 80039f2:	4a52      	ldr	r2, [pc, #328]	@ (8003b3c <menu+0x2ea0>)
 80039f4:	2101      	movs	r1, #1
 80039f6:	2002      	movs	r0, #2
 80039f8:	f005 fde5 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039fc:	2102      	movs	r1, #2
 80039fe:	4847      	ldr	r0, [pc, #284]	@ (8003b1c <menu+0x2e80>)
 8003a00:	f006 ff3c 	bl	800a87c <HAL_GPIO_ReadPin>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d123      	bne.n	8003a52 <menu+0x2db6>
 8003a0a:	4b45      	ldr	r3, [pc, #276]	@ (8003b20 <menu+0x2e84>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	f083 0301 	eor.w	r3, r3, #1
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d01c      	beq.n	8003a52 <menu+0x2db6>
			buzzer = buzzer + 1;
 8003a18:	4b46      	ldr	r3, [pc, #280]	@ (8003b34 <menu+0x2e98>)
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	1c51      	adds	r1, r2, #1
 8003a20:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a22:	f143 0300 	adc.w	r3, r3, #0
 8003a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a28:	4b42      	ldr	r3, [pc, #264]	@ (8003b34 <menu+0x2e98>)
 8003a2a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003a2e:	e9c3 1200 	strd	r1, r2, [r3]
			if(buzzer > 1){
 8003a32:	4b40      	ldr	r3, [pc, #256]	@ (8003b34 <menu+0x2e98>)
 8003a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a38:	2a02      	cmp	r2, #2
 8003a3a:	f173 0300 	sbcs.w	r3, r3, #0
 8003a3e:	d306      	bcc.n	8003a4e <menu+0x2db2>
				buzzer = 0;
 8003a40:	493c      	ldr	r1, [pc, #240]	@ (8003b34 <menu+0x2e98>)
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8003a4e:	f000 fb53 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a52:	2104      	movs	r1, #4
 8003a54:	4831      	ldr	r0, [pc, #196]	@ (8003b1c <menu+0x2e80>)
 8003a56:	f006 ff11 	bl	800a87c <HAL_GPIO_ReadPin>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d121      	bne.n	8003aa4 <menu+0x2e08>
 8003a60:	4b2f      	ldr	r3, [pc, #188]	@ (8003b20 <menu+0x2e84>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	f083 0301 	eor.w	r3, r3, #1
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01a      	beq.n	8003aa4 <menu+0x2e08>
			buzzer = buzzer - 1;
 8003a6e:	4b31      	ldr	r3, [pc, #196]	@ (8003b34 <menu+0x2e98>)
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	1e51      	subs	r1, r2, #1
 8003a76:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a78:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8003a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8003b34 <menu+0x2e98>)
 8003a80:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003a84:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(buzzer > 0){
 8003a88:	4b2a      	ldr	r3, [pc, #168]	@ (8003b34 <menu+0x2e98>)
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	d006      	beq.n	8003aa0 <menu+0x2e04>
		   		buzzer = 1;
 8003a92:	4928      	ldr	r1, [pc, #160]	@ (8003b34 <menu+0x2e98>)
 8003a94:	f04f 0201 	mov.w	r2, #1
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8003aa0:	f000 fb2a 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aa4:	2108      	movs	r1, #8
 8003aa6:	481d      	ldr	r0, [pc, #116]	@ (8003b1c <menu+0x2e80>)
 8003aa8:	f006 fee8 	bl	800a87c <HAL_GPIO_ReadPin>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d10f      	bne.n	8003ad2 <menu+0x2e36>
 8003ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b20 <menu+0x2e84>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	f083 0301 	eor.w	r3, r3, #1
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <menu+0x2e36>
			eepromData[25] = buzzer;
 8003ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b34 <menu+0x2e98>)
 8003ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac6:	4917      	ldr	r1, [pc, #92]	@ (8003b24 <menu+0x2e88>)
 8003ac8:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
			hafizaYaz = 1;
 8003acc:	4a16      	ldr	r2, [pc, #88]	@ (8003b28 <menu+0x2e8c>)
 8003ace:	2301      	movs	r3, #1
 8003ad0:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 28) {
 8003ad2:	4b16      	ldr	r3, [pc, #88]	@ (8003b2c <menu+0x2e90>)
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f1a2 011c 	sub.w	r1, r2, #28
 8003adc:	430b      	orrs	r3, r1
 8003ade:	f040 80ab 	bne.w	8003c38 <menu+0x2f9c>
		calismaSayModu = 0;
 8003ae2:	4917      	ldr	r1, [pc, #92]	@ (8003b40 <menu+0x2ea4>)
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	e9c1 2300 	strd	r2, r3, [r1]
		lcd_print(1, 1, demoModTextGN);
 8003af0:	4a14      	ldr	r2, [pc, #80]	@ (8003b44 <menu+0x2ea8>)
 8003af2:	2101      	movs	r1, #1
 8003af4:	2001      	movs	r0, #1
 8003af6:	f005 fd66 	bl	80095c6 <lcd_print>

		if(demoMode == 0) {
 8003afa:	4b13      	ldr	r3, [pc, #76]	@ (8003b48 <menu+0x2eac>)
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	d123      	bne.n	8003b4c <menu+0x2eb0>
			lcd_print(2, 1, pasifText);
 8003b04:	4a0c      	ldr	r2, [pc, #48]	@ (8003b38 <menu+0x2e9c>)
 8003b06:	2101      	movs	r1, #1
 8003b08:	2002      	movs	r0, #2
 8003b0a:	f005 fd5c 	bl	80095c6 <lcd_print>
 8003b0e:	e028      	b.n	8003b62 <menu+0x2ec6>
 8003b10:	20001178 	.word	0x20001178
 8003b14:	200014fc 	.word	0x200014fc
 8003b18:	20001078 	.word	0x20001078
 8003b1c:	40010800 	.word	0x40010800
 8003b20:	2000121b 	.word	0x2000121b
 8003b24:	20000d08 	.word	0x20000d08
 8003b28:	20001218 	.word	0x20001218
 8003b2c:	200010b8 	.word	0x200010b8
 8003b30:	200000bc 	.word	0x200000bc
 8003b34:	20001198 	.word	0x20001198
 8003b38:	200013d0 	.word	0x200013d0
 8003b3c:	200013e4 	.word	0x200013e4
 8003b40:	200011b8 	.word	0x200011b8
 8003b44:	200000d0 	.word	0x200000d0
 8003b48:	200011a8 	.word	0x200011a8
		} else if(demoMode == 1) {
 8003b4c:	4b9d      	ldr	r3, [pc, #628]	@ (8003dc4 <menu+0x3128>)
 8003b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b52:	1e51      	subs	r1, r2, #1
 8003b54:	430b      	orrs	r3, r1
 8003b56:	d104      	bne.n	8003b62 <menu+0x2ec6>
			lcd_print(2, 1, aktifText);
 8003b58:	4a9b      	ldr	r2, [pc, #620]	@ (8003dc8 <menu+0x312c>)
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	2002      	movs	r0, #2
 8003b5e:	f005 fd32 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b62:	2102      	movs	r1, #2
 8003b64:	4899      	ldr	r0, [pc, #612]	@ (8003dcc <menu+0x3130>)
 8003b66:	f006 fe89 	bl	800a87c <HAL_GPIO_ReadPin>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d123      	bne.n	8003bb8 <menu+0x2f1c>
 8003b70:	4b97      	ldr	r3, [pc, #604]	@ (8003dd0 <menu+0x3134>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	f083 0301 	eor.w	r3, r3, #1
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01c      	beq.n	8003bb8 <menu+0x2f1c>
			demoMode = demoMode + 1;
 8003b7e:	4b91      	ldr	r3, [pc, #580]	@ (8003dc4 <menu+0x3128>)
 8003b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b84:	1c51      	adds	r1, r2, #1
 8003b86:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b88:	f143 0300 	adc.w	r3, r3, #0
 8003b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b8e:	4b8d      	ldr	r3, [pc, #564]	@ (8003dc4 <menu+0x3128>)
 8003b90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003b94:	e9c3 1200 	strd	r1, r2, [r3]

			if(demoMode > 1){
 8003b98:	4b8a      	ldr	r3, [pc, #552]	@ (8003dc4 <menu+0x3128>)
 8003b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9e:	2a02      	cmp	r2, #2
 8003ba0:	f173 0300 	sbcs.w	r3, r3, #0
 8003ba4:	d306      	bcc.n	8003bb4 <menu+0x2f18>
				demoMode = 0;
 8003ba6:	4987      	ldr	r1, [pc, #540]	@ (8003dc4 <menu+0x3128>)
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8003bb4:	f000 faa0 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bb8:	2104      	movs	r1, #4
 8003bba:	4884      	ldr	r0, [pc, #528]	@ (8003dcc <menu+0x3130>)
 8003bbc:	f006 fe5e 	bl	800a87c <HAL_GPIO_ReadPin>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d121      	bne.n	8003c0a <menu+0x2f6e>
 8003bc6:	4b82      	ldr	r3, [pc, #520]	@ (8003dd0 <menu+0x3134>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	f083 0301 	eor.w	r3, r3, #1
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01a      	beq.n	8003c0a <menu+0x2f6e>
			demoMode = demoMode - 1;
 8003bd4:	4b7b      	ldr	r3, [pc, #492]	@ (8003dc4 <menu+0x3128>)
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	1e51      	subs	r1, r2, #1
 8003bdc:	6239      	str	r1, [r7, #32]
 8003bde:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8003be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be4:	4b77      	ldr	r3, [pc, #476]	@ (8003dc4 <menu+0x3128>)
 8003be6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003bea:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(demoMode > 0) {
 8003bee:	4b75      	ldr	r3, [pc, #468]	@ (8003dc4 <menu+0x3128>)
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	d006      	beq.n	8003c06 <menu+0x2f6a>
		   		demoMode = 1;
 8003bf8:	4972      	ldr	r1, [pc, #456]	@ (8003dc4 <menu+0x3128>)
 8003bfa:	f04f 0201 	mov.w	r2, #1
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8003c06:	f000 fa77 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c0a:	2108      	movs	r1, #8
 8003c0c:	486f      	ldr	r0, [pc, #444]	@ (8003dcc <menu+0x3130>)
 8003c0e:	f006 fe35 	bl	800a87c <HAL_GPIO_ReadPin>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d10f      	bne.n	8003c38 <menu+0x2f9c>
 8003c18:	4b6d      	ldr	r3, [pc, #436]	@ (8003dd0 <menu+0x3134>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	f083 0301 	eor.w	r3, r3, #1
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <menu+0x2f9c>
			eepromData[26] = demoMode;
 8003c26:	4b67      	ldr	r3, [pc, #412]	@ (8003dc4 <menu+0x3128>)
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	4969      	ldr	r1, [pc, #420]	@ (8003dd4 <menu+0x3138>)
 8003c2e:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
			hafizaYaz = 1;
 8003c32:	4b69      	ldr	r3, [pc, #420]	@ (8003dd8 <menu+0x313c>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003c38:	4b68      	ldr	r3, [pc, #416]	@ (8003ddc <menu+0x3140>)
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	f1a2 011d 	sub.w	r1, r2, #29
 8003c42:	430b      	orrs	r3, r1
 8003c44:	f040 80f4 	bne.w	8003e30 <menu+0x3194>
		if(calismaSayModu == 0) {
 8003c48:	4b65      	ldr	r3, [pc, #404]	@ (8003de0 <menu+0x3144>)
 8003c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	d128      	bne.n	8003ca4 <menu+0x3008>
			lcd_print(1, 1, calismaSayisiText);
 8003c52:	4a64      	ldr	r2, [pc, #400]	@ (8003de4 <menu+0x3148>)
 8003c54:	2101      	movs	r1, #1
 8003c56:	2001      	movs	r0, #1
 8003c58:	f005 fcb5 	bl	80095c6 <lcd_print>

			if(demoMode == 1) {
 8003c5c:	4b59      	ldr	r3, [pc, #356]	@ (8003dc4 <menu+0x3128>)
 8003c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c62:	1e51      	subs	r1, r2, #1
 8003c64:	430b      	orrs	r3, r1
 8003c66:	d109      	bne.n	8003c7c <menu+0x2fe0>
				itoa(calismaSayisiDemo, snum, 10);
 8003c68:	4b5f      	ldr	r3, [pc, #380]	@ (8003de8 <menu+0x314c>)
 8003c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	220a      	movs	r2, #10
 8003c72:	495e      	ldr	r1, [pc, #376]	@ (8003dec <menu+0x3150>)
 8003c74:	4618      	mov	r0, r3
 8003c76:	f009 f9a3 	bl	800cfc0 <itoa>
 8003c7a:	e008      	b.n	8003c8e <menu+0x2ff2>
			} else {
				itoa(calismaSayisi, snum, 10);
 8003c7c:	4b5c      	ldr	r3, [pc, #368]	@ (8003df0 <menu+0x3154>)
 8003c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c82:	4613      	mov	r3, r2
 8003c84:	220a      	movs	r2, #10
 8003c86:	4959      	ldr	r1, [pc, #356]	@ (8003dec <menu+0x3150>)
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f009 f999 	bl	800cfc0 <itoa>
			}
			lcd_print(2, 16, snum);
 8003c8e:	4a57      	ldr	r2, [pc, #348]	@ (8003dec <menu+0x3150>)
 8003c90:	2110      	movs	r1, #16
 8003c92:	2002      	movs	r0, #2
 8003c94:	f005 fc97 	bl	80095c6 <lcd_print>

			lcd_print(2, 1, "           ");
 8003c98:	4a56      	ldr	r2, [pc, #344]	@ (8003df4 <menu+0x3158>)
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	2002      	movs	r0, #2
 8003c9e:	f005 fc92 	bl	80095c6 <lcd_print>
 8003ca2:	e00f      	b.n	8003cc4 <menu+0x3028>
		} else if(calismaSayModu == 1) {
 8003ca4:	4b4e      	ldr	r3, [pc, #312]	@ (8003de0 <menu+0x3144>)
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	1e51      	subs	r1, r2, #1
 8003cac:	430b      	orrs	r3, r1
 8003cae:	d109      	bne.n	8003cc4 <menu+0x3028>
			lcd_print(1, 1, calismaSayisiText);
 8003cb0:	4a4c      	ldr	r2, [pc, #304]	@ (8003de4 <menu+0x3148>)
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	f005 fc86 	bl	80095c6 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8003cba:	4a4f      	ldr	r2, [pc, #316]	@ (8003df8 <menu+0x315c>)
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	2002      	movs	r0, #2
 8003cc0:	f005 fc81 	bl	80095c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003cc4:	2102      	movs	r1, #2
 8003cc6:	4841      	ldr	r0, [pc, #260]	@ (8003dcc <menu+0x3130>)
 8003cc8:	f006 fdd8 	bl	800a87c <HAL_GPIO_ReadPin>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d127      	bne.n	8003d22 <menu+0x3086>
 8003cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd0 <menu+0x3134>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	f083 0301 	eor.w	r3, r3, #1
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d020      	beq.n	8003d22 <menu+0x3086>
 8003ce0:	4b46      	ldr	r3, [pc, #280]	@ (8003dfc <menu+0x3160>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01c      	beq.n	8003d22 <menu+0x3086>
			calismaSayModu = calismaSayModu + 1;
 8003ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8003de0 <menu+0x3144>)
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	1c51      	adds	r1, r2, #1
 8003cf0:	61b9      	str	r1, [r7, #24]
 8003cf2:	f143 0300 	adc.w	r3, r3, #0
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	4b39      	ldr	r3, [pc, #228]	@ (8003de0 <menu+0x3144>)
 8003cfa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003cfe:	e9c3 1200 	strd	r1, r2, [r3]

			if(calismaSayModu > 1){
 8003d02:	4b37      	ldr	r3, [pc, #220]	@ (8003de0 <menu+0x3144>)
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	2a02      	cmp	r2, #2
 8003d0a:	f173 0300 	sbcs.w	r3, r3, #0
 8003d0e:	d306      	bcc.n	8003d1e <menu+0x3082>
				calismaSayModu = 0;
 8003d10:	4933      	ldr	r1, [pc, #204]	@ (8003de0 <menu+0x3144>)
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8003d1e:	f000 f9eb 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003d22:	2104      	movs	r1, #4
 8003d24:	4829      	ldr	r0, [pc, #164]	@ (8003dcc <menu+0x3130>)
 8003d26:	f006 fda9 	bl	800a87c <HAL_GPIO_ReadPin>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d125      	bne.n	8003d7c <menu+0x30e0>
 8003d30:	4b27      	ldr	r3, [pc, #156]	@ (8003dd0 <menu+0x3134>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	f083 0301 	eor.w	r3, r3, #1
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01e      	beq.n	8003d7c <menu+0x30e0>
 8003d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8003dfc <menu+0x3160>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01a      	beq.n	8003d7c <menu+0x30e0>
			calismaSayModu = calismaSayModu - 1;
 8003d46:	4b26      	ldr	r3, [pc, #152]	@ (8003de0 <menu+0x3144>)
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	1e51      	subs	r1, r2, #1
 8003d4e:	6139      	str	r1, [r7, #16]
 8003d50:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	4b22      	ldr	r3, [pc, #136]	@ (8003de0 <menu+0x3144>)
 8003d58:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d5c:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(calismaSayModu > 0) {
 8003d60:	4b1f      	ldr	r3, [pc, #124]	@ (8003de0 <menu+0x3144>)
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	d006      	beq.n	8003d78 <menu+0x30dc>
		   		calismaSayModu = 1;
 8003d6a:	491d      	ldr	r1, [pc, #116]	@ (8003de0 <menu+0x3144>)
 8003d6c:	f04f 0201 	mov.w	r2, #1
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8003d78:	f000 f9be 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d7c:	2108      	movs	r1, #8
 8003d7e:	4813      	ldr	r0, [pc, #76]	@ (8003dcc <menu+0x3130>)
 8003d80:	f006 fd7c 	bl	800a87c <HAL_GPIO_ReadPin>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d152      	bne.n	8003e30 <menu+0x3194>
 8003d8a:	4b11      	ldr	r3, [pc, #68]	@ (8003dd0 <menu+0x3134>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	f083 0301 	eor.w	r3, r3, #1
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d04b      	beq.n	8003e30 <menu+0x3194>
			if(demoMode == 1) {
 8003d98:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc4 <menu+0x3128>)
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	1e51      	subs	r1, r2, #1
 8003da0:	430b      	orrs	r3, r1
 8003da2:	d12d      	bne.n	8003e00 <menu+0x3164>
				calismaSayisiDemo = 0;
 8003da4:	4910      	ldr	r1, [pc, #64]	@ (8003de8 <menu+0x314c>)
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[28] = 0;
 8003db2:	4908      	ldr	r1, [pc, #32]	@ (8003dd4 <menu+0x3138>)
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
 8003dc0:	e02c      	b.n	8003e1c <menu+0x3180>
 8003dc2:	bf00      	nop
 8003dc4:	200011a8 	.word	0x200011a8
 8003dc8:	200013e4 	.word	0x200013e4
 8003dcc:	40010800 	.word	0x40010800
 8003dd0:	2000121b 	.word	0x2000121b
 8003dd4:	20000d08 	.word	0x20000d08
 8003dd8:	20001218 	.word	0x20001218
 8003ddc:	200010b8 	.word	0x200010b8
 8003de0:	200011b8 	.word	0x200011b8
 8003de4:	20001740 	.word	0x20001740
 8003de8:	200010b0 	.word	0x200010b0
 8003dec:	20001078 	.word	0x20001078
 8003df0:	200010a8 	.word	0x200010a8
 8003df4:	0800d0e8 	.word	0x0800d0e8
 8003df8:	20001754 	.word	0x20001754
 8003dfc:	2000122d 	.word	0x2000122d
			} else {
				calismaSayisi = 0;
 8003e00:	497a      	ldr	r1, [pc, #488]	@ (8003fec <menu+0x3350>)
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[27] = 0;
 8003e0e:	4978      	ldr	r1, [pc, #480]	@ (8003ff0 <menu+0x3354>)
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
			}
			calismaSayModu = 0;
 8003e1c:	4975      	ldr	r1, [pc, #468]	@ (8003ff4 <menu+0x3358>)
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	e9c1 2300 	strd	r2, r3, [r1]
			hafizaYaz = 1;
 8003e2a:	4b73      	ldr	r3, [pc, #460]	@ (8003ff8 <menu+0x335c>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003e30:	4b72      	ldr	r3, [pc, #456]	@ (8003ffc <menu+0x3360>)
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e36:	f1a2 011e 	sub.w	r1, r2, #30
 8003e3a:	430b      	orrs	r3, r1
 8003e3c:	f040 808a 	bne.w	8003f54 <menu+0x32b8>
		calismaSayModu = 0;
 8003e40:	496c      	ldr	r1, [pc, #432]	@ (8003ff4 <menu+0x3358>)
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	e9c1 2300 	strd	r2, r3, [r1]

		lcd_print(1, 1, dilSecimText);
 8003e4e:	4a6c      	ldr	r2, [pc, #432]	@ (8004000 <menu+0x3364>)
 8003e50:	2101      	movs	r1, #1
 8003e52:	2001      	movs	r0, #1
 8003e54:	f005 fbb7 	bl	80095c6 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 8003e58:	4a6a      	ldr	r2, [pc, #424]	@ (8004004 <menu+0x3368>)
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	2002      	movs	r0, #2
 8003e5e:	f005 fbb2 	bl	80095c6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e62:	2102      	movs	r1, #2
 8003e64:	4868      	ldr	r0, [pc, #416]	@ (8004008 <menu+0x336c>)
 8003e66:	f006 fd09 	bl	800a87c <HAL_GPIO_ReadPin>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d12a      	bne.n	8003ec6 <menu+0x322a>
 8003e70:	4b66      	ldr	r3, [pc, #408]	@ (800400c <menu+0x3370>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	f083 0301 	eor.w	r3, r3, #1
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d023      	beq.n	8003ec6 <menu+0x322a>
			dilSecim = dilSecim + 1;
 8003e7e:	4b64      	ldr	r3, [pc, #400]	@ (8004010 <menu+0x3374>)
 8003e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e84:	1c51      	adds	r1, r2, #1
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	f143 0300 	adc.w	r3, r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	4b60      	ldr	r3, [pc, #384]	@ (8004010 <menu+0x3374>)
 8003e90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e94:	e9c3 1200 	strd	r1, r2, [r3]

			if(dilSecim > 1) {
 8003e98:	4b5d      	ldr	r3, [pc, #372]	@ (8004010 <menu+0x3374>)
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	2a02      	cmp	r2, #2
 8003ea0:	f173 0300 	sbcs.w	r3, r3, #0
 8003ea4:	d306      	bcc.n	8003eb4 <menu+0x3218>
				dilSecim = 0;
 8003ea6:	495a      	ldr	r1, [pc, #360]	@ (8004010 <menu+0x3374>)
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	e9c1 2300 	strd	r2, r3, [r1]
			}
			loadMenuTexts(dilSecim);
 8003eb4:	4b56      	ldr	r3, [pc, #344]	@ (8004010 <menu+0x3374>)
 8003eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eba:	b2d3      	uxtb	r3, r2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f003 ffbf 	bl	8007e40 <loadMenuTexts>

			bekle();
 8003ec2:	f000 f919 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ec6:	2104      	movs	r1, #4
 8003ec8:	484f      	ldr	r0, [pc, #316]	@ (8004008 <menu+0x336c>)
 8003eca:	f006 fcd7 	bl	800a87c <HAL_GPIO_ReadPin>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d128      	bne.n	8003f26 <menu+0x328a>
 8003ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800400c <menu+0x3370>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	f083 0301 	eor.w	r3, r3, #1
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d021      	beq.n	8003f26 <menu+0x328a>
			dilSecim = dilSecim - 1;
 8003ee2:	4b4b      	ldr	r3, [pc, #300]	@ (8004010 <menu+0x3374>)
 8003ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee8:	1e51      	subs	r1, r2, #1
 8003eea:	6039      	str	r1, [r7, #0]
 8003eec:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8003ef0:	607b      	str	r3, [r7, #4]
 8003ef2:	4b47      	ldr	r3, [pc, #284]	@ (8004010 <menu+0x3374>)
 8003ef4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003ef8:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(dilSecim > 0) {
 8003efc:	4b44      	ldr	r3, [pc, #272]	@ (8004010 <menu+0x3374>)
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	d006      	beq.n	8003f14 <menu+0x3278>
		   		dilSecim = 1;
 8003f06:	4942      	ldr	r1, [pc, #264]	@ (8004010 <menu+0x3374>)
 8003f08:	f04f 0201 	mov.w	r2, #1
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
		   	loadMenuTexts(dilSecim);
 8003f14:	4b3e      	ldr	r3, [pc, #248]	@ (8004010 <menu+0x3374>)
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	b2d3      	uxtb	r3, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f003 ff8f 	bl	8007e40 <loadMenuTexts>

			bekle();
 8003f22:	f000 f8e9 	bl	80040f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f26:	2108      	movs	r1, #8
 8003f28:	4837      	ldr	r0, [pc, #220]	@ (8004008 <menu+0x336c>)
 8003f2a:	f006 fca7 	bl	800a87c <HAL_GPIO_ReadPin>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d10f      	bne.n	8003f54 <menu+0x32b8>
 8003f34:	4b35      	ldr	r3, [pc, #212]	@ (800400c <menu+0x3370>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	f083 0301 	eor.w	r3, r3, #1
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <menu+0x32b8>
			eepromData[33] = dilSecim;
 8003f42:	4b33      	ldr	r3, [pc, #204]	@ (8004010 <menu+0x3374>)
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	4929      	ldr	r1, [pc, #164]	@ (8003ff0 <menu+0x3354>)
 8003f4a:	e9c1 2342 	strd	r2, r3, [r1, #264]	@ 0x108
			hafizaYaz = 1;
 8003f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff8 <menu+0x335c>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003f54:	4b29      	ldr	r3, [pc, #164]	@ (8003ffc <menu+0x3360>)
 8003f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5a:	f1a2 011f 	sub.w	r1, r2, #31
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	d13e      	bne.n	8003fe0 <menu+0x3344>
		lcd_print(1, 1, menudenCikisText);
 8003f62:	4a2c      	ldr	r2, [pc, #176]	@ (8004014 <menu+0x3378>)
 8003f64:	2101      	movs	r1, #1
 8003f66:	2001      	movs	r0, #1
 8003f68:	f005 fb2d 	bl	80095c6 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003f6c:	4a2a      	ldr	r2, [pc, #168]	@ (8004018 <menu+0x337c>)
 8003f6e:	2101      	movs	r1, #1
 8003f70:	2002      	movs	r0, #2
 8003f72:	f005 fb28 	bl	80095c6 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003f76:	2108      	movs	r1, #8
 8003f78:	4823      	ldr	r0, [pc, #140]	@ (8004008 <menu+0x336c>)
 8003f7a:	f006 fc7f 	bl	800a87c <HAL_GPIO_ReadPin>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d12d      	bne.n	8003fe0 <menu+0x3344>
			menuGiris = 0;
 8003f84:	4925      	ldr	r1, [pc, #148]	@ (800401c <menu+0x3380>)
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	e9c1 2300 	strd	r2, r3, [r1]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8003f92:	bf00      	nop
 8003f94:	4822      	ldr	r0, [pc, #136]	@ (8004020 <menu+0x3384>)
 8003f96:	f007 fa9a 	bl	800b4ce <HAL_I2C_GetError>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d0f9      	beq.n	8003f94 <menu+0x32f8>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8003fa0:	bf00      	nop
 8003fa2:	481f      	ldr	r0, [pc, #124]	@ (8004020 <menu+0x3384>)
 8003fa4:	f007 fa86 	bl	800b4b4 <HAL_I2C_GetState>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d1f9      	bne.n	8003fa2 <menu+0x3306>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8003fae:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003fb2:	9302      	str	r3, [sp, #8]
 8003fb4:	236e      	movs	r3, #110	@ 0x6e
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff0 <menu+0x3354>)
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	236e      	movs	r3, #110	@ 0x6e
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	21a0      	movs	r1, #160	@ 0xa0
 8003fc2:	4817      	ldr	r0, [pc, #92]	@ (8004020 <menu+0x3384>)
 8003fc4:	f006 ff14 	bl	800adf0 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8003fc8:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8003fcc:	f005 ffc8 	bl	8009f60 <HAL_Delay>

			lcd_clear();
 8003fd0:	f005 fb0e 	bl	80095f0 <lcd_clear>
			HAL_Delay(500);
 8003fd4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003fd8:	f005 ffc2 	bl	8009f60 <HAL_Delay>
			NVIC_SystemReset();
 8003fdc:	f7fc fe48 	bl	8000c70 <__NVIC_SystemReset>
		}
	}
}
 8003fe0:	bf00      	nop
 8003fe2:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fec:	200010a8 	.word	0x200010a8
 8003ff0:	20000d08 	.word	0x20000d08
 8003ff4:	200011b8 	.word	0x200011b8
 8003ff8:	20001218 	.word	0x20001218
 8003ffc:	200010b8 	.word	0x200010b8
 8004000:	20001768 	.word	0x20001768
 8004004:	2000177c 	.word	0x2000177c
 8004008:	40010800 	.word	0x40010800
 800400c:	2000121b 	.word	0x2000121b
 8004010:	200011c0 	.word	0x200011c0
 8004014:	20001790 	.word	0x20001790
 8004018:	200017a4 	.word	0x200017a4
 800401c:	200011a0 	.word	0x200011a0
 8004020:	20001858 	.word	0x20001858

08004024 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d105      	bne.n	8004040 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004034:	4a22      	ldr	r2, [pc, #136]	@ (80040c0 <lcdUpdate+0x9c>)
 8004036:	2101      	movs	r1, #1
 8004038:	2002      	movs	r0, #2
 800403a:	f005 fac4 	bl	80095c6 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
	}
}
 800403e:	e03b      	b.n	80040b8 <lcdUpdate+0x94>
	} else if(y==2) {
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d105      	bne.n	8004052 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004046:	4a1e      	ldr	r2, [pc, #120]	@ (80040c0 <lcdUpdate+0x9c>)
 8004048:	2102      	movs	r1, #2
 800404a:	2002      	movs	r0, #2
 800404c:	f005 fabb 	bl	80095c6 <lcd_print>
}
 8004050:	e032      	b.n	80040b8 <lcdUpdate+0x94>
	} else if(y==3) {
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d105      	bne.n	8004064 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004058:	4a19      	ldr	r2, [pc, #100]	@ (80040c0 <lcdUpdate+0x9c>)
 800405a:	2103      	movs	r1, #3
 800405c:	2002      	movs	r0, #2
 800405e:	f005 fab2 	bl	80095c6 <lcd_print>
}
 8004062:	e029      	b.n	80040b8 <lcdUpdate+0x94>
	} else if(y==4) {
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	2b04      	cmp	r3, #4
 8004068:	d105      	bne.n	8004076 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 800406a:	4a15      	ldr	r2, [pc, #84]	@ (80040c0 <lcdUpdate+0x9c>)
 800406c:	2104      	movs	r1, #4
 800406e:	2002      	movs	r0, #2
 8004070:	f005 faa9 	bl	80095c6 <lcd_print>
}
 8004074:	e020      	b.n	80040b8 <lcdUpdate+0x94>
	} else if(y==5) {
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	2b05      	cmp	r3, #5
 800407a:	d105      	bne.n	8004088 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 800407c:	4a10      	ldr	r2, [pc, #64]	@ (80040c0 <lcdUpdate+0x9c>)
 800407e:	2105      	movs	r1, #5
 8004080:	2002      	movs	r0, #2
 8004082:	f005 faa0 	bl	80095c6 <lcd_print>
}
 8004086:	e017      	b.n	80040b8 <lcdUpdate+0x94>
	} else if(y==6) {
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	2b06      	cmp	r3, #6
 800408c:	d105      	bne.n	800409a <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 800408e:	4a0c      	ldr	r2, [pc, #48]	@ (80040c0 <lcdUpdate+0x9c>)
 8004090:	2106      	movs	r1, #6
 8004092:	2002      	movs	r0, #2
 8004094:	f005 fa97 	bl	80095c6 <lcd_print>
}
 8004098:	e00e      	b.n	80040b8 <lcdUpdate+0x94>
	} else if (y==7) {
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	2b07      	cmp	r3, #7
 800409e:	d10b      	bne.n	80040b8 <lcdUpdate+0x94>
		lcd_clear();
 80040a0:	f005 faa6 	bl	80095f0 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 80040a4:	4a07      	ldr	r2, [pc, #28]	@ (80040c4 <lcdUpdate+0xa0>)
 80040a6:	2101      	movs	r1, #1
 80040a8:	2001      	movs	r0, #1
 80040aa:	f005 fa8c 	bl	80095c6 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 80040ae:	4a06      	ldr	r2, [pc, #24]	@ (80040c8 <lcdUpdate+0xa4>)
 80040b0:	2101      	movs	r1, #1
 80040b2:	2002      	movs	r0, #2
 80040b4:	f005 fa87 	bl	80095c6 <lcd_print>
}
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	0800d0f4 	.word	0x0800d0f4
 80040c4:	20000058 	.word	0x20000058
 80040c8:	2000006c 	.word	0x2000006c

080040cc <checkLCDBacklight>:

void checkLCDBacklight() {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 80040d0:	4b07      	ldr	r3, [pc, #28]	@ (80040f0 <checkLCDBacklight+0x24>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4b07      	ldr	r3, [pc, #28]	@ (80040f4 <checkLCDBacklight+0x28>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b3b      	cmp	r3, #59	@ 0x3b
 80040dc:	d903      	bls.n	80040e6 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 80040de:	2000      	movs	r0, #0
 80040e0:	f005 fa90 	bl	8009604 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 80040e4:	e002      	b.n	80040ec <checkLCDBacklight+0x20>
		lcd_backlight(1);
 80040e6:	2001      	movs	r0, #1
 80040e8:	f005 fa8c 	bl	8009604 <lcd_backlight>
}
 80040ec:	bf00      	nop
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20001088 	.word	0x20001088
 80040f4:	200010a4 	.word	0x200010a4

080040f8 <bekle>:

void bekle() {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
	timer1=millis;
 80040fc:	4b47      	ldr	r3, [pc, #284]	@ (800421c <bekle+0x124>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a47      	ldr	r2, [pc, #284]	@ (8004220 <bekle+0x128>)
 8004102:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004104:	e002      	b.n	800410c <bekle+0x14>
    	butonKontrol = 1;
 8004106:	4b47      	ldr	r3, [pc, #284]	@ (8004224 <bekle+0x12c>)
 8004108:	2201      	movs	r2, #1
 800410a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800410c:	2101      	movs	r1, #1
 800410e:	4846      	ldr	r0, [pc, #280]	@ (8004228 <bekle+0x130>)
 8004110:	f006 fbb4 	bl	800a87c <HAL_GPIO_ReadPin>
 8004114:	4603      	mov	r3, r0
 8004116:	2b01      	cmp	r3, #1
 8004118:	d109      	bne.n	800412e <bekle+0x36>
 800411a:	4b40      	ldr	r3, [pc, #256]	@ (800421c <bekle+0x124>)
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	4b40      	ldr	r3, [pc, #256]	@ (8004220 <bekle+0x128>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d0ef      	beq.n	8004106 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004126:	e002      	b.n	800412e <bekle+0x36>
    	butonKontrol = 1;
 8004128:	4b3e      	ldr	r3, [pc, #248]	@ (8004224 <bekle+0x12c>)
 800412a:	2201      	movs	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800412e:	2108      	movs	r1, #8
 8004130:	483e      	ldr	r0, [pc, #248]	@ (800422c <bekle+0x134>)
 8004132:	f006 fba3 	bl	800a87c <HAL_GPIO_ReadPin>
 8004136:	4603      	mov	r3, r0
 8004138:	2b01      	cmp	r3, #1
 800413a:	d109      	bne.n	8004150 <bekle+0x58>
 800413c:	4b37      	ldr	r3, [pc, #220]	@ (800421c <bekle+0x124>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b37      	ldr	r3, [pc, #220]	@ (8004220 <bekle+0x128>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d0ef      	beq.n	8004128 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004148:	e002      	b.n	8004150 <bekle+0x58>
    	butonKontrol = 1;
 800414a:	4b36      	ldr	r3, [pc, #216]	@ (8004224 <bekle+0x12c>)
 800414c:	2201      	movs	r2, #1
 800414e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004150:	2102      	movs	r1, #2
 8004152:	4835      	ldr	r0, [pc, #212]	@ (8004228 <bekle+0x130>)
 8004154:	f006 fb92 	bl	800a87c <HAL_GPIO_ReadPin>
 8004158:	4603      	mov	r3, r0
 800415a:	2b01      	cmp	r3, #1
 800415c:	d109      	bne.n	8004172 <bekle+0x7a>
 800415e:	4b2f      	ldr	r3, [pc, #188]	@ (800421c <bekle+0x124>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4b2f      	ldr	r3, [pc, #188]	@ (8004220 <bekle+0x128>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d0ef      	beq.n	800414a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800416a:	e002      	b.n	8004172 <bekle+0x7a>
    	butonKontrol = 1;
 800416c:	4b2d      	ldr	r3, [pc, #180]	@ (8004224 <bekle+0x12c>)
 800416e:	2201      	movs	r2, #1
 8004170:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004172:	2104      	movs	r1, #4
 8004174:	482c      	ldr	r0, [pc, #176]	@ (8004228 <bekle+0x130>)
 8004176:	f006 fb81 	bl	800a87c <HAL_GPIO_ReadPin>
 800417a:	4603      	mov	r3, r0
 800417c:	2b01      	cmp	r3, #1
 800417e:	d109      	bne.n	8004194 <bekle+0x9c>
 8004180:	4b26      	ldr	r3, [pc, #152]	@ (800421c <bekle+0x124>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4b26      	ldr	r3, [pc, #152]	@ (8004220 <bekle+0x128>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d0ef      	beq.n	800416c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800418c:	e002      	b.n	8004194 <bekle+0x9c>
    	butonKontrol = 1;
 800418e:	4b25      	ldr	r3, [pc, #148]	@ (8004224 <bekle+0x12c>)
 8004190:	2201      	movs	r2, #1
 8004192:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004194:	2108      	movs	r1, #8
 8004196:	4824      	ldr	r0, [pc, #144]	@ (8004228 <bekle+0x130>)
 8004198:	f006 fb70 	bl	800a87c <HAL_GPIO_ReadPin>
 800419c:	4603      	mov	r3, r0
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d109      	bne.n	80041b6 <bekle+0xbe>
 80041a2:	4b1e      	ldr	r3, [pc, #120]	@ (800421c <bekle+0x124>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004220 <bekle+0x128>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d0ef      	beq.n	800418e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80041ae:	e002      	b.n	80041b6 <bekle+0xbe>
    	butonKontrol = 1;
 80041b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004224 <bekle+0x12c>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80041b6:	2180      	movs	r1, #128	@ 0x80
 80041b8:	481c      	ldr	r0, [pc, #112]	@ (800422c <bekle+0x134>)
 80041ba:	f006 fb5f 	bl	800a87c <HAL_GPIO_ReadPin>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d109      	bne.n	80041d8 <bekle+0xe0>
 80041c4:	4b15      	ldr	r3, [pc, #84]	@ (800421c <bekle+0x124>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b15      	ldr	r3, [pc, #84]	@ (8004220 <bekle+0x128>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d0ef      	beq.n	80041b0 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80041d0:	e002      	b.n	80041d8 <bekle+0xe0>
    	butonKontrol = 1;
 80041d2:	4b14      	ldr	r3, [pc, #80]	@ (8004224 <bekle+0x12c>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80041d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80041dc:	4813      	ldr	r0, [pc, #76]	@ (800422c <bekle+0x134>)
 80041de:	f006 fb4d 	bl	800a87c <HAL_GPIO_ReadPin>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <bekle+0x104>
 80041e8:	4b0c      	ldr	r3, [pc, #48]	@ (800421c <bekle+0x124>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004220 <bekle+0x128>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d0ee      	beq.n	80041d2 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80041f4:	e002      	b.n	80041fc <bekle+0x104>
    	butonKontrol = 1;
 80041f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004224 <bekle+0x12c>)
 80041f8:	2201      	movs	r2, #1
 80041fa:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80041fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004200:	480a      	ldr	r0, [pc, #40]	@ (800422c <bekle+0x134>)
 8004202:	f006 fb3b 	bl	800a87c <HAL_GPIO_ReadPin>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d105      	bne.n	8004218 <bekle+0x120>
 800420c:	4b03      	ldr	r3, [pc, #12]	@ (800421c <bekle+0x124>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	4b03      	ldr	r3, [pc, #12]	@ (8004220 <bekle+0x128>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d0ee      	beq.n	80041f6 <bekle+0xfe>
    }

}
 8004218:	bf00      	nop
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20001088 	.word	0x20001088
 8004220:	20001090 	.word	0x20001090
 8004224:	2000121b 	.word	0x2000121b
 8004228:	40010800 	.word	0x40010800
 800422c:	40011000 	.word	0x40011000

08004230 <buttonCheck>:

uint8_t buttonCheck(void) {
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8004234:	2101      	movs	r1, #1
 8004236:	4815      	ldr	r0, [pc, #84]	@ (800428c <buttonCheck+0x5c>)
 8004238:	f006 fb20 	bl	800a87c <HAL_GPIO_ReadPin>
 800423c:	4603      	mov	r3, r0
 800423e:	2b01      	cmp	r3, #1
 8004240:	d01b      	beq.n	800427a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8004242:	2108      	movs	r1, #8
 8004244:	4812      	ldr	r0, [pc, #72]	@ (8004290 <buttonCheck+0x60>)
 8004246:	f006 fb19 	bl	800a87c <HAL_GPIO_ReadPin>
 800424a:	4603      	mov	r3, r0
 800424c:	2b01      	cmp	r3, #1
 800424e:	d014      	beq.n	800427a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8004250:	2102      	movs	r1, #2
 8004252:	480e      	ldr	r0, [pc, #56]	@ (800428c <buttonCheck+0x5c>)
 8004254:	f006 fb12 	bl	800a87c <HAL_GPIO_ReadPin>
 8004258:	4603      	mov	r3, r0
 800425a:	2b01      	cmp	r3, #1
 800425c:	d00d      	beq.n	800427a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 800425e:	2104      	movs	r1, #4
 8004260:	480a      	ldr	r0, [pc, #40]	@ (800428c <buttonCheck+0x5c>)
 8004262:	f006 fb0b 	bl	800a87c <HAL_GPIO_ReadPin>
 8004266:	4603      	mov	r3, r0
 8004268:	2b01      	cmp	r3, #1
 800426a:	d006      	beq.n	800427a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 800426c:	2108      	movs	r1, #8
 800426e:	4807      	ldr	r0, [pc, #28]	@ (800428c <buttonCheck+0x5c>)
 8004270:	f006 fb04 	bl	800a87c <HAL_GPIO_ReadPin>
 8004274:	4603      	mov	r3, r0
 8004276:	2b01      	cmp	r3, #1
 8004278:	d104      	bne.n	8004284 <buttonCheck+0x54>
		backLightTimer = 0;
 800427a:	4b06      	ldr	r3, [pc, #24]	@ (8004294 <buttonCheck+0x64>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
		return 1;
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <buttonCheck+0x56>
	}
	return 0;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40010800 	.word	0x40010800
 8004290:	40011000 	.word	0x40011000
 8004294:	200010a4 	.word	0x200010a4

08004298 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 800429c:	4b1a      	ldr	r3, [pc, #104]	@ (8004308 <checkBasincSalteri+0x70>)
 800429e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	d106      	bne.n	80042b4 <checkBasincSalteri+0x1c>
		basincVar=1;
 80042a6:	4919      	ldr	r1, [pc, #100]	@ (800430c <checkBasincSalteri+0x74>)
 80042a8:	f04f 0201 	mov.w	r2, #1
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(basincSalteri==1) {
 80042b4:	4b14      	ldr	r3, [pc, #80]	@ (8004308 <checkBasincSalteri+0x70>)
 80042b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ba:	1e51      	subs	r1, r2, #1
 80042bc:	430b      	orrs	r3, r1
 80042be:	d121      	bne.n	8004304 <checkBasincSalteri+0x6c>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80042c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042c4:	4812      	ldr	r0, [pc, #72]	@ (8004310 <checkBasincSalteri+0x78>)
 80042c6:	f006 fad9 	bl	800a87c <HAL_GPIO_ReadPin>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10e      	bne.n	80042ee <checkBasincSalteri+0x56>
			if(millis-timer5>=3) {
 80042d0:	4b10      	ldr	r3, [pc, #64]	@ (8004314 <checkBasincSalteri+0x7c>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	4b10      	ldr	r3, [pc, #64]	@ (8004318 <checkBasincSalteri+0x80>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d912      	bls.n	8004304 <checkBasincSalteri+0x6c>
				basincVar=1;
 80042de:	490b      	ldr	r1, [pc, #44]	@ (800430c <checkBasincSalteri+0x74>)
 80042e0:	f04f 0201 	mov.w	r2, #1
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	e9c1 2300 	strd	r2, r3, [r1]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80042ec:	e00a      	b.n	8004304 <checkBasincSalteri+0x6c>
			timer5=millis;
 80042ee:	4b09      	ldr	r3, [pc, #36]	@ (8004314 <checkBasincSalteri+0x7c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a09      	ldr	r2, [pc, #36]	@ (8004318 <checkBasincSalteri+0x80>)
 80042f4:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80042f6:	4905      	ldr	r1, [pc, #20]	@ (800430c <checkBasincSalteri+0x74>)
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004304:	bf00      	nop
 8004306:	bd80      	pop	{r7, pc}
 8004308:	200010f0 	.word	0x200010f0
 800430c:	200010d0 	.word	0x200010d0
 8004310:	40011000 	.word	0x40011000
 8004314:	20001088 	.word	0x20001088
 8004318:	200010a0 	.word	0x200010a0

0800431c <checkBasGonder>:

void checkBasGonder() {
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004320:	4b1e      	ldr	r3, [pc, #120]	@ (800439c <checkBasGonder+0x80>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	1e51      	subs	r1, r2, #1
 8004328:	430b      	orrs	r3, r1
 800432a:	d10c      	bne.n	8004346 <checkBasGonder+0x2a>
 800432c:	4b1c      	ldr	r3, [pc, #112]	@ (80043a0 <checkBasGonder+0x84>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <checkBasGonder+0x2a>
 8004334:	4b1b      	ldr	r3, [pc, #108]	@ (80043a4 <checkBasGonder+0x88>)
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	4313      	orrs	r3, r2
 800433c:	d103      	bne.n	8004346 <checkBasGonder+0x2a>
		basgondercalisyukari=1;
 800433e:	4b1a      	ldr	r3, [pc, #104]	@ (80043a8 <checkBasGonder+0x8c>)
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	e009      	b.n	800435a <checkBasGonder+0x3e>
	} else if(yukarimotorcalisiyor==0) {
 8004346:	4b16      	ldr	r3, [pc, #88]	@ (80043a0 <checkBasGonder+0x84>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	f083 0301 	eor.w	r3, r3, #1
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <checkBasGonder+0x3e>
		basgondercalisyukari=0;
 8004354:	4b14      	ldr	r3, [pc, #80]	@ (80043a8 <checkBasGonder+0x8c>)
 8004356:	2200      	movs	r2, #0
 8004358:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 800435a:	4b10      	ldr	r3, [pc, #64]	@ (800439c <checkBasGonder+0x80>)
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	1e51      	subs	r1, r2, #1
 8004362:	430b      	orrs	r3, r1
 8004364:	d10c      	bne.n	8004380 <checkBasGonder+0x64>
 8004366:	4b11      	ldr	r3, [pc, #68]	@ (80043ac <checkBasGonder+0x90>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d008      	beq.n	8004380 <checkBasGonder+0x64>
 800436e:	4b0d      	ldr	r3, [pc, #52]	@ (80043a4 <checkBasGonder+0x88>)
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	4313      	orrs	r3, r2
 8004376:	d103      	bne.n	8004380 <checkBasGonder+0x64>
		basgondercalisasagi=1;
 8004378:	4b0d      	ldr	r3, [pc, #52]	@ (80043b0 <checkBasGonder+0x94>)
 800437a:	2201      	movs	r2, #1
 800437c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 800437e:	e009      	b.n	8004394 <checkBasGonder+0x78>
	} else if(asagivalfcalisiyor==0) {
 8004380:	4b0a      	ldr	r3, [pc, #40]	@ (80043ac <checkBasGonder+0x90>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	f083 0301 	eor.w	r3, r3, #1
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <checkBasGonder+0x78>
		basgondercalisasagi=0;
 800438e:	4b08      	ldr	r3, [pc, #32]	@ (80043b0 <checkBasGonder+0x94>)
 8004390:	2200      	movs	r2, #0
 8004392:	701a      	strb	r2, [r3, #0]
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr
 800439c:	200010c0 	.word	0x200010c0
 80043a0:	20001221 	.word	0x20001221
 80043a4:	20001130 	.word	0x20001130
 80043a8:	20001228 	.word	0x20001228
 80043ac:	20001224 	.word	0x20001224
 80043b0:	20001229 	.word	0x20001229

080043b4 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80043b8:	4b28      	ldr	r3, [pc, #160]	@ (800445c <checkKapiSecimleri+0xa8>)
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	4313      	orrs	r3, r2
 80043c0:	d102      	bne.n	80043c8 <checkKapiSecimleri+0x14>
		kapiSivicVar=1;
 80043c2:	4b27      	ldr	r3, [pc, #156]	@ (8004460 <checkKapiSecimleri+0xac>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80043c8:	4b24      	ldr	r3, [pc, #144]	@ (800445c <checkKapiSecimleri+0xa8>)
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	1e51      	subs	r1, r2, #1
 80043d0:	430b      	orrs	r3, r1
 80043d2:	d10e      	bne.n	80043f2 <checkKapiSecimleri+0x3e>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80043d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043d8:	4822      	ldr	r0, [pc, #136]	@ (8004464 <checkKapiSecimleri+0xb0>)
 80043da:	f006 fa4f 	bl	800a87c <HAL_GPIO_ReadPin>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d103      	bne.n	80043ec <checkKapiSecimleri+0x38>
			kapiSivicVar=1;
 80043e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004460 <checkKapiSecimleri+0xac>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	701a      	strb	r2, [r3, #0]
 80043ea:	e002      	b.n	80043f2 <checkKapiSecimleri+0x3e>
		} else {
			kapiSivicVar=0;
 80043ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004460 <checkKapiSecimleri+0xac>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80043f2:	4b1a      	ldr	r3, [pc, #104]	@ (800445c <checkKapiSecimleri+0xa8>)
 80043f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f8:	1e91      	subs	r1, r2, #2
 80043fa:	430b      	orrs	r3, r1
 80043fc:	d10e      	bne.n	800441c <checkKapiSecimleri+0x68>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80043fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004402:	4818      	ldr	r0, [pc, #96]	@ (8004464 <checkKapiSecimleri+0xb0>)
 8004404:	f006 fa3a 	bl	800a87c <HAL_GPIO_ReadPin>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d103      	bne.n	8004416 <checkKapiSecimleri+0x62>
			kapiSivicVar=1;
 800440e:	4b14      	ldr	r3, [pc, #80]	@ (8004460 <checkKapiSecimleri+0xac>)
 8004410:	2201      	movs	r2, #1
 8004412:	701a      	strb	r2, [r3, #0]
 8004414:	e002      	b.n	800441c <checkKapiSecimleri+0x68>
		} else {
			kapiSivicVar=0;
 8004416:	4b12      	ldr	r3, [pc, #72]	@ (8004460 <checkKapiSecimleri+0xac>)
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800441c:	4b0f      	ldr	r3, [pc, #60]	@ (800445c <checkKapiSecimleri+0xa8>)
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	1ed1      	subs	r1, r2, #3
 8004424:	430b      	orrs	r3, r1
 8004426:	d116      	bne.n	8004456 <checkKapiSecimleri+0xa2>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004428:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800442c:	480d      	ldr	r0, [pc, #52]	@ (8004464 <checkKapiSecimleri+0xb0>)
 800442e:	f006 fa25 	bl	800a87c <HAL_GPIO_ReadPin>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10b      	bne.n	8004450 <checkKapiSecimleri+0x9c>
 8004438:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800443c:	4809      	ldr	r0, [pc, #36]	@ (8004464 <checkKapiSecimleri+0xb0>)
 800443e:	f006 fa1d 	bl	800a87c <HAL_GPIO_ReadPin>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d103      	bne.n	8004450 <checkKapiSecimleri+0x9c>
			kapiSivicVar=1;
 8004448:	4b05      	ldr	r3, [pc, #20]	@ (8004460 <checkKapiSecimleri+0xac>)
 800444a:	2201      	movs	r2, #1
 800444c:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 800444e:	e002      	b.n	8004456 <checkKapiSecimleri+0xa2>
			kapiSivicVar=0;
 8004450:	4b03      	ldr	r3, [pc, #12]	@ (8004460 <checkKapiSecimleri+0xac>)
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
}
 8004456:	bf00      	nop
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	200010f8 	.word	0x200010f8
 8004460:	2000123f 	.word	0x2000123f
 8004464:	40010800 	.word	0x40010800

08004468 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800446c:	b08c      	sub	sp, #48	@ 0x30
 800446e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004470:	4b6b      	ldr	r3, [pc, #428]	@ (8004620 <checkAktifCalisma+0x1b8>)
 8004472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004476:	4313      	orrs	r3, r2
 8004478:	f041 8460 	bne.w	8005d3c <checkAktifCalisma+0x18d4>
 800447c:	4b69      	ldr	r3, [pc, #420]	@ (8004624 <checkAktifCalisma+0x1bc>)
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	4313      	orrs	r3, r2
 8004484:	f041 845a 	bne.w	8005d3c <checkAktifCalisma+0x18d4>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8004488:	4b67      	ldr	r3, [pc, #412]	@ (8004628 <checkAktifCalisma+0x1c0>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d11e      	bne.n	80044ce <checkAktifCalisma+0x66>
 8004490:	4b66      	ldr	r3, [pc, #408]	@ (800462c <checkAktifCalisma+0x1c4>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d11a      	bne.n	80044ce <checkAktifCalisma+0x66>
 8004498:	4b65      	ldr	r3, [pc, #404]	@ (8004630 <checkAktifCalisma+0x1c8>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00c      	beq.n	80044ba <checkAktifCalisma+0x52>
 80044a0:	4b64      	ldr	r3, [pc, #400]	@ (8004634 <checkAktifCalisma+0x1cc>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	f083 0301 	eor.w	r3, r3, #1
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <checkAktifCalisma+0x52>
 80044ae:	4b62      	ldr	r3, [pc, #392]	@ (8004638 <checkAktifCalisma+0x1d0>)
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	1e51      	subs	r1, r2, #1
 80044b6:	430b      	orrs	r3, r1
 80044b8:	d009      	beq.n	80044ce <checkAktifCalisma+0x66>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 80044ba:	4b60      	ldr	r3, [pc, #384]	@ (800463c <checkAktifCalisma+0x1d4>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d01e      	beq.n	8004500 <checkAktifCalisma+0x98>
 80044c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004640 <checkAktifCalisma+0x1d8>)
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	1e51      	subs	r1, r2, #1
 80044ca:	430b      	orrs	r3, r1
 80044cc:	d118      	bne.n	8004500 <checkAktifCalisma+0x98>
 80044ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004644 <checkAktifCalisma+0x1dc>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d103      	bne.n	80044de <checkAktifCalisma+0x76>
 80044d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004648 <checkAktifCalisma+0x1e0>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d010      	beq.n	8004500 <checkAktifCalisma+0x98>
 80044de:	4b5b      	ldr	r3, [pc, #364]	@ (800464c <checkAktifCalisma+0x1e4>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00c      	beq.n	8004500 <checkAktifCalisma+0x98>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80044e6:	2201      	movs	r2, #1
 80044e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80044ec:	4858      	ldr	r0, [pc, #352]	@ (8004650 <checkAktifCalisma+0x1e8>)
 80044ee:	f006 f9dc 	bl	800a8aa <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 80044f2:	4a58      	ldr	r2, [pc, #352]	@ (8004654 <checkAktifCalisma+0x1ec>)
 80044f4:	2301      	movs	r3, #1
 80044f6:	7013      	strb	r3, [r2, #0]
					CalismaSayisiYukari=1;
 80044f8:	4a57      	ldr	r2, [pc, #348]	@ (8004658 <checkAktifCalisma+0x1f0>)
 80044fa:	2301      	movs	r3, #1
 80044fc:	7013      	strb	r3, [r2, #0]
 80044fe:	e008      	b.n	8004512 <checkAktifCalisma+0xaa>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004500:	2200      	movs	r2, #0
 8004502:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004506:	4852      	ldr	r0, [pc, #328]	@ (8004650 <checkAktifCalisma+0x1e8>)
 8004508:	f006 f9cf 	bl	800a8aa <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 800450c:	4a51      	ldr	r2, [pc, #324]	@ (8004654 <checkAktifCalisma+0x1ec>)
 800450e:	2300      	movs	r3, #0
 8004510:	7013      	strb	r3, [r2, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8004512:	4b44      	ldr	r3, [pc, #272]	@ (8004624 <checkAktifCalisma+0x1bc>)
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	4313      	orrs	r3, r2
 800451a:	d165      	bne.n	80045e8 <checkAktifCalisma+0x180>
 800451c:	4b4a      	ldr	r3, [pc, #296]	@ (8004648 <checkAktifCalisma+0x1e0>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d103      	bne.n	800452c <checkAktifCalisma+0xc4>
 8004524:	4b47      	ldr	r3, [pc, #284]	@ (8004644 <checkAktifCalisma+0x1dc>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d05d      	beq.n	80045e8 <checkAktifCalisma+0x180>
 800452c:	4b47      	ldr	r3, [pc, #284]	@ (800464c <checkAktifCalisma+0x1e4>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d059      	beq.n	80045e8 <checkAktifCalisma+0x180>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004534:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004538:	4845      	ldr	r0, [pc, #276]	@ (8004650 <checkAktifCalisma+0x1e8>)
 800453a:	f006 f99f 	bl	800a87c <HAL_GPIO_ReadPin>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <checkAktifCalisma+0xe4>
 8004544:	4b45      	ldr	r3, [pc, #276]	@ (800465c <checkAktifCalisma+0x1f4>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d04d      	beq.n	80045e8 <checkAktifCalisma+0x180>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800454c:	2102      	movs	r1, #2
 800454e:	4844      	ldr	r0, [pc, #272]	@ (8004660 <checkAktifCalisma+0x1f8>)
 8004550:	f006 f994 	bl	800a87c <HAL_GPIO_ReadPin>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d146      	bne.n	80045e8 <checkAktifCalisma+0x180>
							&& (basincVar)
 800455a:	4b42      	ldr	r3, [pc, #264]	@ (8004664 <checkAktifCalisma+0x1fc>)
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	4313      	orrs	r3, r2
 8004562:	d041      	beq.n	80045e8 <checkAktifCalisma+0x180>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004564:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004568:	4839      	ldr	r0, [pc, #228]	@ (8004650 <checkAktifCalisma+0x1e8>)
 800456a:	f006 f987 	bl	800a87c <HAL_GPIO_ReadPin>
 800456e:	4603      	mov	r3, r0
 8004570:	2b01      	cmp	r3, #1
 8004572:	d10e      	bne.n	8004592 <checkAktifCalisma+0x12a>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004574:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004578:	4835      	ldr	r0, [pc, #212]	@ (8004650 <checkAktifCalisma+0x1e8>)
 800457a:	f006 f97f 	bl	800a87c <HAL_GPIO_ReadPin>
 800457e:	4603      	mov	r3, r0
 8004580:	2b01      	cmp	r3, #1
 8004582:	d106      	bne.n	8004592 <checkAktifCalisma+0x12a>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004584:	2140      	movs	r1, #64	@ 0x40
 8004586:	4836      	ldr	r0, [pc, #216]	@ (8004660 <checkAktifCalisma+0x1f8>)
 8004588:	f006 f978 	bl	800a87c <HAL_GPIO_ReadPin>
 800458c:	4603      	mov	r3, r0
 800458e:	2b01      	cmp	r3, #1
 8004590:	d003      	beq.n	800459a <checkAktifCalisma+0x132>
 8004592:	4b25      	ldr	r3, [pc, #148]	@ (8004628 <checkAktifCalisma+0x1c0>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d026      	beq.n	80045e8 <checkAktifCalisma+0x180>
							&& (asagivalfcalisiyor==0)
 800459a:	4b25      	ldr	r3, [pc, #148]	@ (8004630 <checkAktifCalisma+0x1c8>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	f083 0301 	eor.w	r3, r3, #1
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01f      	beq.n	80045e8 <checkAktifCalisma+0x180>
							&& (devmotoryukaricalisiyor==0)
 80045a8:	4b20      	ldr	r3, [pc, #128]	@ (800462c <checkAktifCalisma+0x1c4>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	f083 0301 	eor.w	r3, r3, #1
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d018      	beq.n	80045e8 <checkAktifCalisma+0x180>
							&& (devmotorasagicalisiyor==0)
 80045b6:	4b21      	ldr	r3, [pc, #132]	@ (800463c <checkAktifCalisma+0x1d4>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	f083 0301 	eor.w	r3, r3, #1
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d011      	beq.n	80045e8 <checkAktifCalisma+0x180>
							&&(devyukarivalfcalisiyor==0)
 80045c4:	4b28      	ldr	r3, [pc, #160]	@ (8004668 <checkAktifCalisma+0x200>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	f083 0301 	eor.w	r3, r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <checkAktifCalisma+0x180>
							&&(devasagivalfcalisiyor==0)) {
 80045d2:	4b26      	ldr	r3, [pc, #152]	@ (800466c <checkAktifCalisma+0x204>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	f083 0301 	eor.w	r3, r3, #1
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <checkAktifCalisma+0x180>
					yukarimotorcalisiyor=1;
 80045e0:	4a11      	ldr	r2, [pc, #68]	@ (8004628 <checkAktifCalisma+0x1c0>)
 80045e2:	2301      	movs	r3, #1
 80045e4:	7013      	strb	r3, [r2, #0]
 80045e6:	e002      	b.n	80045ee <checkAktifCalisma+0x186>
				} else {
					yukarimotorcalisiyor=0;
 80045e8:	4a0f      	ldr	r2, [pc, #60]	@ (8004628 <checkAktifCalisma+0x1c0>)
 80045ea:	2300      	movs	r3, #0
 80045ec:	7013      	strb	r3, [r2, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80045ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004628 <checkAktifCalisma+0x1c0>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d03e      	beq.n	8004674 <checkAktifCalisma+0x20c>
 80045f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80045fa:	4819      	ldr	r0, [pc, #100]	@ (8004660 <checkAktifCalisma+0x1f8>)
 80045fc:	f006 f93e 	bl	800a87c <HAL_GPIO_ReadPin>
 8004600:	4603      	mov	r3, r0
 8004602:	2b01      	cmp	r3, #1
 8004604:	d136      	bne.n	8004674 <checkAktifCalisma+0x20c>
 8004606:	4b1a      	ldr	r3, [pc, #104]	@ (8004670 <checkAktifCalisma+0x208>)
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	4313      	orrs	r3, r2
 800460e:	d031      	beq.n	8004674 <checkAktifCalisma+0x20c>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004610:	2201      	movs	r2, #1
 8004612:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004616:	480e      	ldr	r0, [pc, #56]	@ (8004650 <checkAktifCalisma+0x1e8>)
 8004618:	f006 f947 	bl	800a8aa <HAL_GPIO_WritePin>
 800461c:	e030      	b.n	8004680 <checkAktifCalisma+0x218>
 800461e:	bf00      	nop
 8004620:	200011a8 	.word	0x200011a8
 8004624:	200011a0 	.word	0x200011a0
 8004628:	20001221 	.word	0x20001221
 800462c:	20001222 	.word	0x20001222
 8004630:	20001224 	.word	0x20001224
 8004634:	2000121c 	.word	0x2000121c
 8004638:	20001150 	.word	0x20001150
 800463c:	20001223 	.word	0x20001223
 8004640:	20001148 	.word	0x20001148
 8004644:	2000123e 	.word	0x2000123e
 8004648:	20001251 	.word	0x20001251
 800464c:	2000123f 	.word	0x2000123f
 8004650:	40010c00 	.word	0x40010c00
 8004654:	20001240 	.word	0x20001240
 8004658:	2000122b 	.word	0x2000122b
 800465c:	20001228 	.word	0x20001228
 8004660:	40011000 	.word	0x40011000
 8004664:	200010d0 	.word	0x200010d0
 8004668:	20001226 	.word	0x20001226
 800466c:	20001227 	.word	0x20001227
 8004670:	20001128 	.word	0x20001128
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004674:	2200      	movs	r2, #0
 8004676:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800467a:	4872      	ldr	r0, [pc, #456]	@ (8004844 <checkAktifCalisma+0x3dc>)
 800467c:	f006 f915 	bl	800a8aa <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004680:	4b71      	ldr	r3, [pc, #452]	@ (8004848 <checkAktifCalisma+0x3e0>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d019      	beq.n	80046bc <checkAktifCalisma+0x254>
 8004688:	4b70      	ldr	r3, [pc, #448]	@ (800484c <checkAktifCalisma+0x3e4>)
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	1e51      	subs	r1, r2, #1
 8004690:	430b      	orrs	r3, r1
 8004692:	d00b      	beq.n	80046ac <checkAktifCalisma+0x244>
 8004694:	4b6d      	ldr	r3, [pc, #436]	@ (800484c <checkAktifCalisma+0x3e4>)
 8004696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469a:	1e91      	subs	r1, r2, #2
 800469c:	430b      	orrs	r3, r1
 800469e:	d005      	beq.n	80046ac <checkAktifCalisma+0x244>
 80046a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004850 <checkAktifCalisma+0x3e8>)
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	1e51      	subs	r1, r2, #1
 80046a8:	430b      	orrs	r3, r1
 80046aa:	d107      	bne.n	80046bc <checkAktifCalisma+0x254>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80046ac:	2201      	movs	r2, #1
 80046ae:	2104      	movs	r1, #4
 80046b0:	4864      	ldr	r0, [pc, #400]	@ (8004844 <checkAktifCalisma+0x3dc>)
 80046b2:	f006 f8fa 	bl	800a8aa <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 80046b6:	4a67      	ldr	r2, [pc, #412]	@ (8004854 <checkAktifCalisma+0x3ec>)
 80046b8:	2301      	movs	r3, #1
 80046ba:	7013      	strb	r3, [r2, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80046bc:	4b65      	ldr	r3, [pc, #404]	@ (8004854 <checkAktifCalisma+0x3ec>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d034      	beq.n	800472e <checkAktifCalisma+0x2c6>
 80046c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80046c8:	485e      	ldr	r0, [pc, #376]	@ (8004844 <checkAktifCalisma+0x3dc>)
 80046ca:	f006 f8d7 	bl	800a87c <HAL_GPIO_ReadPin>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d106      	bne.n	80046e2 <checkAktifCalisma+0x27a>
 80046d4:	4b60      	ldr	r3, [pc, #384]	@ (8004858 <checkAktifCalisma+0x3f0>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	f083 0301 	eor.w	r3, r3, #1
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <checkAktifCalisma+0x288>
 80046e2:	2102      	movs	r1, #2
 80046e4:	485d      	ldr	r0, [pc, #372]	@ (800485c <checkAktifCalisma+0x3f4>)
 80046e6:	f006 f8c9 	bl	800a87c <HAL_GPIO_ReadPin>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d11e      	bne.n	800472e <checkAktifCalisma+0x2c6>
 80046f0:	4b5b      	ldr	r3, [pc, #364]	@ (8004860 <checkAktifCalisma+0x3f8>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d103      	bne.n	8004700 <checkAktifCalisma+0x298>
 80046f8:	4b5a      	ldr	r3, [pc, #360]	@ (8004864 <checkAktifCalisma+0x3fc>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d016      	beq.n	800472e <checkAktifCalisma+0x2c6>
 8004700:	4b59      	ldr	r3, [pc, #356]	@ (8004868 <checkAktifCalisma+0x400>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d012      	beq.n	800472e <checkAktifCalisma+0x2c6>
 8004708:	4b58      	ldr	r3, [pc, #352]	@ (800486c <checkAktifCalisma+0x404>)
 800470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470e:	4313      	orrs	r3, r2
 8004710:	d00d      	beq.n	800472e <checkAktifCalisma+0x2c6>
 8004712:	4b57      	ldr	r3, [pc, #348]	@ (8004870 <checkAktifCalisma+0x408>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	f083 0301 	eor.w	r3, r3, #1
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d006      	beq.n	800472e <checkAktifCalisma+0x2c6>
					timer2=millis;
 8004720:	4b54      	ldr	r3, [pc, #336]	@ (8004874 <checkAktifCalisma+0x40c>)
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b54      	ldr	r3, [pc, #336]	@ (8004878 <checkAktifCalisma+0x410>)
 8004726:	601a      	str	r2, [r3, #0]
					butonKontrol3=1;
 8004728:	4a51      	ldr	r2, [pc, #324]	@ (8004870 <checkAktifCalisma+0x408>)
 800472a:	2301      	movs	r3, #1
 800472c:	7013      	strb	r3, [r2, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 800472e:	4b51      	ldr	r3, [pc, #324]	@ (8004874 <checkAktifCalisma+0x40c>)
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4b51      	ldr	r3, [pc, #324]	@ (8004878 <checkAktifCalisma+0x410>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2200      	movs	r2, #0
 800473a:	461c      	mov	r4, r3
 800473c:	4615      	mov	r5, r2
 800473e:	4b4f      	ldr	r3, [pc, #316]	@ (800487c <checkAktifCalisma+0x414>)
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	4294      	cmp	r4, r2
 8004746:	eb75 0303 	sbcs.w	r3, r5, r3
 800474a:	d303      	bcc.n	8004754 <checkAktifCalisma+0x2ec>
 800474c:	4b48      	ldr	r3, [pc, #288]	@ (8004870 <checkAktifCalisma+0x408>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d119      	bne.n	8004788 <checkAktifCalisma+0x320>
 8004754:	4b42      	ldr	r3, [pc, #264]	@ (8004860 <checkAktifCalisma+0x3f8>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	f083 0301 	eor.w	r3, r3, #1
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d006      	beq.n	8004770 <checkAktifCalisma+0x308>
 8004762:	4b40      	ldr	r3, [pc, #256]	@ (8004864 <checkAktifCalisma+0x3fc>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	f083 0301 	eor.w	r3, r3, #1
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10b      	bne.n	8004788 <checkAktifCalisma+0x320>
 8004770:	4b3d      	ldr	r3, [pc, #244]	@ (8004868 <checkAktifCalisma+0x400>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	f083 0301 	eor.w	r3, r3, #1
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <checkAktifCalisma+0x320>
 800477e:	4b3b      	ldr	r3, [pc, #236]	@ (800486c <checkAktifCalisma+0x404>)
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	4313      	orrs	r3, r2
 8004786:	d10a      	bne.n	800479e <checkAktifCalisma+0x336>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004788:	2200      	movs	r2, #0
 800478a:	2104      	movs	r1, #4
 800478c:	482d      	ldr	r0, [pc, #180]	@ (8004844 <checkAktifCalisma+0x3dc>)
 800478e:	f006 f88c 	bl	800a8aa <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 8004792:	4a30      	ldr	r2, [pc, #192]	@ (8004854 <checkAktifCalisma+0x3ec>)
 8004794:	2300      	movs	r3, #0
 8004796:	7013      	strb	r3, [r2, #0]
					butonKontrol3=0;
 8004798:	4a35      	ldr	r2, [pc, #212]	@ (8004870 <checkAktifCalisma+0x408>)
 800479a:	2300      	movs	r3, #0
 800479c:	7013      	strb	r3, [r2, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 800479e:	4b38      	ldr	r3, [pc, #224]	@ (8004880 <checkAktifCalisma+0x418>)
 80047a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	d102      	bne.n	80047ae <checkAktifCalisma+0x346>
					cerceveVar=1;
 80047a8:	4a36      	ldr	r2, [pc, #216]	@ (8004884 <checkAktifCalisma+0x41c>)
 80047aa:	2301      	movs	r3, #1
 80047ac:	7013      	strb	r3, [r2, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80047ae:	4b34      	ldr	r3, [pc, #208]	@ (8004880 <checkAktifCalisma+0x418>)
 80047b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b4:	1e51      	subs	r1, r2, #1
 80047b6:	430b      	orrs	r3, r1
 80047b8:	d117      	bne.n	80047ea <checkAktifCalisma+0x382>
 80047ba:	4b33      	ldr	r3, [pc, #204]	@ (8004888 <checkAktifCalisma+0x420>)
 80047bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	d112      	bne.n	80047ea <checkAktifCalisma+0x382>
 80047c4:	2101      	movs	r1, #1
 80047c6:	4825      	ldr	r0, [pc, #148]	@ (800485c <checkAktifCalisma+0x3f4>)
 80047c8:	f006 f858 	bl	800a87c <HAL_GPIO_ReadPin>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10b      	bne.n	80047ea <checkAktifCalisma+0x382>
 80047d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80047d6:	481b      	ldr	r0, [pc, #108]	@ (8004844 <checkAktifCalisma+0x3dc>)
 80047d8:	f006 f850 	bl	800a87c <HAL_GPIO_ReadPin>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d103      	bne.n	80047ea <checkAktifCalisma+0x382>
					cerceveVar=1;
 80047e2:	4a28      	ldr	r2, [pc, #160]	@ (8004884 <checkAktifCalisma+0x41c>)
 80047e4:	2301      	movs	r3, #1
 80047e6:	7013      	strb	r3, [r2, #0]
 80047e8:	e014      	b.n	8004814 <checkAktifCalisma+0x3ac>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80047ea:	4b25      	ldr	r3, [pc, #148]	@ (8004880 <checkAktifCalisma+0x418>)
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	1e51      	subs	r1, r2, #1
 80047f2:	430b      	orrs	r3, r1
 80047f4:	d10e      	bne.n	8004814 <checkAktifCalisma+0x3ac>
 80047f6:	2101      	movs	r1, #1
 80047f8:	4818      	ldr	r0, [pc, #96]	@ (800485c <checkAktifCalisma+0x3f4>)
 80047fa:	f006 f83f 	bl	800a87c <HAL_GPIO_ReadPin>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b01      	cmp	r3, #1
 8004802:	d107      	bne.n	8004814 <checkAktifCalisma+0x3ac>
 8004804:	4b20      	ldr	r3, [pc, #128]	@ (8004888 <checkAktifCalisma+0x420>)
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	4313      	orrs	r3, r2
 800480c:	d102      	bne.n	8004814 <checkAktifCalisma+0x3ac>
					cerceveVar=0;
 800480e:	4a1d      	ldr	r2, [pc, #116]	@ (8004884 <checkAktifCalisma+0x41c>)
 8004810:	2300      	movs	r3, #0
 8004812:	7013      	strb	r3, [r2, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8004814:	4b1a      	ldr	r3, [pc, #104]	@ (8004880 <checkAktifCalisma+0x418>)
 8004816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481a:	1e51      	subs	r1, r2, #1
 800481c:	430b      	orrs	r3, r1
 800481e:	d138      	bne.n	8004892 <checkAktifCalisma+0x42a>
 8004820:	4b19      	ldr	r3, [pc, #100]	@ (8004888 <checkAktifCalisma+0x420>)
 8004822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004826:	1e51      	subs	r1, r2, #1
 8004828:	430b      	orrs	r3, r1
 800482a:	d132      	bne.n	8004892 <checkAktifCalisma+0x42a>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800482c:	2101      	movs	r1, #1
 800482e:	480b      	ldr	r0, [pc, #44]	@ (800485c <checkAktifCalisma+0x3f4>)
 8004830:	f006 f824 	bl	800a87c <HAL_GPIO_ReadPin>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d128      	bne.n	800488c <checkAktifCalisma+0x424>
						cerceveVar=1;
 800483a:	4a12      	ldr	r2, [pc, #72]	@ (8004884 <checkAktifCalisma+0x41c>)
 800483c:	2301      	movs	r3, #1
 800483e:	7013      	strb	r3, [r2, #0]
 8004840:	e027      	b.n	8004892 <checkAktifCalisma+0x42a>
 8004842:	bf00      	nop
 8004844:	40010c00 	.word	0x40010c00
 8004848:	20001221 	.word	0x20001221
 800484c:	20001130 	.word	0x20001130
 8004850:	20001150 	.word	0x20001150
 8004854:	20001225 	.word	0x20001225
 8004858:	20001228 	.word	0x20001228
 800485c:	40011000 	.word	0x40011000
 8004860:	2000123e 	.word	0x2000123e
 8004864:	20001251 	.word	0x20001251
 8004868:	2000123f 	.word	0x2000123f
 800486c:	200010d0 	.word	0x200010d0
 8004870:	2000121d 	.word	0x2000121d
 8004874:	20001088 	.word	0x20001088
 8004878:	20001094 	.word	0x20001094
 800487c:	20001158 	.word	0x20001158
 8004880:	200010d8 	.word	0x200010d8
 8004884:	20001243 	.word	0x20001243
 8004888:	200010c0 	.word	0x200010c0
					} else {
						cerceveVar=0;
 800488c:	4a84      	ldr	r2, [pc, #528]	@ (8004aa0 <checkAktifCalisma+0x638>)
 800488e:	2300      	movs	r3, #0
 8004890:	7013      	strb	r3, [r2, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004892:	4b84      	ldr	r3, [pc, #528]	@ (8004aa4 <checkAktifCalisma+0x63c>)
 8004894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004898:	4313      	orrs	r3, r2
 800489a:	d17d      	bne.n	8004998 <checkAktifCalisma+0x530>
 800489c:	4b82      	ldr	r3, [pc, #520]	@ (8004aa8 <checkAktifCalisma+0x640>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d079      	beq.n	8004998 <checkAktifCalisma+0x530>
 80048a4:	4b81      	ldr	r3, [pc, #516]	@ (8004aac <checkAktifCalisma+0x644>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d075      	beq.n	8004998 <checkAktifCalisma+0x530>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80048ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80048b0:	487f      	ldr	r0, [pc, #508]	@ (8004ab0 <checkAktifCalisma+0x648>)
 80048b2:	f005 ffe3 	bl	800a87c <HAL_GPIO_ReadPin>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <checkAktifCalisma+0x45c>
 80048bc:	4b7d      	ldr	r3, [pc, #500]	@ (8004ab4 <checkAktifCalisma+0x64c>)
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d069      	beq.n	8004998 <checkAktifCalisma+0x530>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80048c4:	4b76      	ldr	r3, [pc, #472]	@ (8004aa0 <checkAktifCalisma+0x638>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d065      	beq.n	8004998 <checkAktifCalisma+0x530>
 80048cc:	4b7a      	ldr	r3, [pc, #488]	@ (8004ab8 <checkAktifCalisma+0x650>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	f083 0301 	eor.w	r3, r3, #1
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d05e      	beq.n	8004998 <checkAktifCalisma+0x530>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80048da:	2104      	movs	r1, #4
 80048dc:	4877      	ldr	r0, [pc, #476]	@ (8004abc <checkAktifCalisma+0x654>)
 80048de:	f005 ffcd 	bl	800a87c <HAL_GPIO_ReadPin>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d004      	beq.n	80048f2 <checkAktifCalisma+0x48a>
 80048e8:	4b75      	ldr	r3, [pc, #468]	@ (8004ac0 <checkAktifCalisma+0x658>)
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	d152      	bne.n	8004998 <checkAktifCalisma+0x530>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80048f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80048f6:	486e      	ldr	r0, [pc, #440]	@ (8004ab0 <checkAktifCalisma+0x648>)
 80048f8:	f005 ffc0 	bl	800a87c <HAL_GPIO_ReadPin>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d10e      	bne.n	8004920 <checkAktifCalisma+0x4b8>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004902:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004906:	486a      	ldr	r0, [pc, #424]	@ (8004ab0 <checkAktifCalisma+0x648>)
 8004908:	f005 ffb8 	bl	800a87c <HAL_GPIO_ReadPin>
 800490c:	4603      	mov	r3, r0
 800490e:	2b01      	cmp	r3, #1
 8004910:	d106      	bne.n	8004920 <checkAktifCalisma+0x4b8>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004912:	2140      	movs	r1, #64	@ 0x40
 8004914:	4869      	ldr	r0, [pc, #420]	@ (8004abc <checkAktifCalisma+0x654>)
 8004916:	f005 ffb1 	bl	800a87c <HAL_GPIO_ReadPin>
 800491a:	4603      	mov	r3, r0
 800491c:	2b01      	cmp	r3, #1
 800491e:	d003      	beq.n	8004928 <checkAktifCalisma+0x4c0>
 8004920:	4b68      	ldr	r3, [pc, #416]	@ (8004ac4 <checkAktifCalisma+0x65c>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d037      	beq.n	8004998 <checkAktifCalisma+0x530>
						&& (yukarimotorcalisiyor==0)
 8004928:	4b67      	ldr	r3, [pc, #412]	@ (8004ac8 <checkAktifCalisma+0x660>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	f083 0301 	eor.w	r3, r3, #1
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d030      	beq.n	8004998 <checkAktifCalisma+0x530>
						&& (yukarivalfcalisiyor==0)
 8004936:	4b65      	ldr	r3, [pc, #404]	@ (8004acc <checkAktifCalisma+0x664>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	f083 0301 	eor.w	r3, r3, #1
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d029      	beq.n	8004998 <checkAktifCalisma+0x530>
				  	  	&& (devmotoryukaricalisiyor==0)
 8004944:	4b62      	ldr	r3, [pc, #392]	@ (8004ad0 <checkAktifCalisma+0x668>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	f083 0301 	eor.w	r3, r3, #1
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d022      	beq.n	8004998 <checkAktifCalisma+0x530>
						&& (devmotorasagicalisiyor==0)
 8004952:	4b60      	ldr	r3, [pc, #384]	@ (8004ad4 <checkAktifCalisma+0x66c>)
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	f083 0301 	eor.w	r3, r3, #1
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d01b      	beq.n	8004998 <checkAktifCalisma+0x530>
						&& (devyukarivalfcalisiyor==0)
 8004960:	4b5d      	ldr	r3, [pc, #372]	@ (8004ad8 <checkAktifCalisma+0x670>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	f083 0301 	eor.w	r3, r3, #1
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d014      	beq.n	8004998 <checkAktifCalisma+0x530>
						&& (devasagivalfcalisiyor==0)) {
 800496e:	4b5b      	ldr	r3, [pc, #364]	@ (8004adc <checkAktifCalisma+0x674>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	f083 0301 	eor.w	r3, r3, #1
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00d      	beq.n	8004998 <checkAktifCalisma+0x530>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800497c:	2201      	movs	r2, #1
 800497e:	2102      	movs	r1, #2
 8004980:	484b      	ldr	r0, [pc, #300]	@ (8004ab0 <checkAktifCalisma+0x648>)
 8004982:	f005 ff92 	bl	800a8aa <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 8004986:	4a4f      	ldr	r2, [pc, #316]	@ (8004ac4 <checkAktifCalisma+0x65c>)
 8004988:	2301      	movs	r3, #1
 800498a:	7013      	strb	r3, [r2, #0]
					CalismaSayisiAsagi=1;
 800498c:	4a54      	ldr	r2, [pc, #336]	@ (8004ae0 <checkAktifCalisma+0x678>)
 800498e:	2301      	movs	r3, #1
 8004990:	7013      	strb	r3, [r2, #0]
					cercevesasagicalisma=1;
 8004992:	4a54      	ldr	r2, [pc, #336]	@ (8004ae4 <checkAktifCalisma+0x67c>)
 8004994:	2301      	movs	r3, #1
 8004996:	7013      	strb	r3, [r2, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004998:	4b4a      	ldr	r3, [pc, #296]	@ (8004ac4 <checkAktifCalisma+0x65c>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d034      	beq.n	8004a0a <checkAktifCalisma+0x5a2>
 80049a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80049a4:	4842      	ldr	r0, [pc, #264]	@ (8004ab0 <checkAktifCalisma+0x648>)
 80049a6:	f005 ff69 	bl	800a87c <HAL_GPIO_ReadPin>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d106      	bne.n	80049be <checkAktifCalisma+0x556>
 80049b0:	4b40      	ldr	r3, [pc, #256]	@ (8004ab4 <checkAktifCalisma+0x64c>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	f083 0301 	eor.w	r3, r3, #1
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10b      	bne.n	80049d6 <checkAktifCalisma+0x56e>
 80049be:	2104      	movs	r1, #4
 80049c0:	483e      	ldr	r0, [pc, #248]	@ (8004abc <checkAktifCalisma+0x654>)
 80049c2:	f005 ff5b 	bl	800a87c <HAL_GPIO_ReadPin>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d11e      	bne.n	8004a0a <checkAktifCalisma+0x5a2>
 80049cc:	4b3c      	ldr	r3, [pc, #240]	@ (8004ac0 <checkAktifCalisma+0x658>)
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	d019      	beq.n	8004a0a <checkAktifCalisma+0x5a2>
 80049d6:	4b34      	ldr	r3, [pc, #208]	@ (8004aa8 <checkAktifCalisma+0x640>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d015      	beq.n	8004a0a <checkAktifCalisma+0x5a2>
 80049de:	4b33      	ldr	r3, [pc, #204]	@ (8004aac <checkAktifCalisma+0x644>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d011      	beq.n	8004a0a <checkAktifCalisma+0x5a2>
 80049e6:	4b2e      	ldr	r3, [pc, #184]	@ (8004aa0 <checkAktifCalisma+0x638>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00d      	beq.n	8004a0a <checkAktifCalisma+0x5a2>
 80049ee:	4b3e      	ldr	r3, [pc, #248]	@ (8004ae8 <checkAktifCalisma+0x680>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	f083 0301 	eor.w	r3, r3, #1
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d006      	beq.n	8004a0a <checkAktifCalisma+0x5a2>
					timer2=millis;
 80049fc:	4b3b      	ldr	r3, [pc, #236]	@ (8004aec <checkAktifCalisma+0x684>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	4b3b      	ldr	r3, [pc, #236]	@ (8004af0 <checkAktifCalisma+0x688>)
 8004a02:	601a      	str	r2, [r3, #0]
					butonKontrol2=1;
 8004a04:	4a38      	ldr	r2, [pc, #224]	@ (8004ae8 <checkAktifCalisma+0x680>)
 8004a06:	2301      	movs	r3, #1
 8004a08:	7013      	strb	r3, [r2, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8004a0a:	4b38      	ldr	r3, [pc, #224]	@ (8004aec <checkAktifCalisma+0x684>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4b38      	ldr	r3, [pc, #224]	@ (8004af0 <checkAktifCalisma+0x688>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2200      	movs	r2, #0
 8004a16:	4698      	mov	r8, r3
 8004a18:	4691      	mov	r9, r2
 8004a1a:	4b36      	ldr	r3, [pc, #216]	@ (8004af4 <checkAktifCalisma+0x68c>)
 8004a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a20:	4590      	cmp	r8, r2
 8004a22:	eb79 0303 	sbcs.w	r3, r9, r3
 8004a26:	d303      	bcc.n	8004a30 <checkAktifCalisma+0x5c8>
 8004a28:	4b2f      	ldr	r3, [pc, #188]	@ (8004ae8 <checkAktifCalisma+0x680>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d114      	bne.n	8004a5a <checkAktifCalisma+0x5f2>
 8004a30:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa8 <checkAktifCalisma+0x640>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	f083 0301 	eor.w	r3, r3, #1
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10d      	bne.n	8004a5a <checkAktifCalisma+0x5f2>
 8004a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004aac <checkAktifCalisma+0x644>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	f083 0301 	eor.w	r3, r3, #1
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d106      	bne.n	8004a5a <checkAktifCalisma+0x5f2>
 8004a4c:	4b14      	ldr	r3, [pc, #80]	@ (8004aa0 <checkAktifCalisma+0x638>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	f083 0301 	eor.w	r3, r3, #1
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <checkAktifCalisma+0x608>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2102      	movs	r1, #2
 8004a5e:	4814      	ldr	r0, [pc, #80]	@ (8004ab0 <checkAktifCalisma+0x648>)
 8004a60:	f005 ff23 	bl	800a8aa <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8004a64:	4a17      	ldr	r2, [pc, #92]	@ (8004ac4 <checkAktifCalisma+0x65c>)
 8004a66:	2300      	movs	r3, #0
 8004a68:	7013      	strb	r3, [r2, #0]
					butonKontrol2=0;
 8004a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ae8 <checkAktifCalisma+0x680>)
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	7013      	strb	r3, [r2, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8004a70:	4b14      	ldr	r3, [pc, #80]	@ (8004ac4 <checkAktifCalisma+0x65c>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d041      	beq.n	8004afc <checkAktifCalisma+0x694>
 8004a78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a7c:	480f      	ldr	r0, [pc, #60]	@ (8004abc <checkAktifCalisma+0x654>)
 8004a7e:	f005 fefd 	bl	800a87c <HAL_GPIO_ReadPin>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d139      	bne.n	8004afc <checkAktifCalisma+0x694>
 8004a88:	4b1b      	ldr	r3, [pc, #108]	@ (8004af8 <checkAktifCalisma+0x690>)
 8004a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	d034      	beq.n	8004afc <checkAktifCalisma+0x694>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8004a92:	2201      	movs	r2, #1
 8004a94:	2101      	movs	r1, #1
 8004a96:	4806      	ldr	r0, [pc, #24]	@ (8004ab0 <checkAktifCalisma+0x648>)
 8004a98:	f005 ff07 	bl	800a8aa <HAL_GPIO_WritePin>
 8004a9c:	e033      	b.n	8004b06 <checkAktifCalisma+0x69e>
 8004a9e:	bf00      	nop
 8004aa0:	20001243 	.word	0x20001243
 8004aa4:	200011a0 	.word	0x200011a0
 8004aa8:	2000123e 	.word	0x2000123e
 8004aac:	2000123f 	.word	0x2000123f
 8004ab0:	40010c00 	.word	0x40010c00
 8004ab4:	20001229 	.word	0x20001229
 8004ab8:	2000123d 	.word	0x2000123d
 8004abc:	40011000 	.word	0x40011000
 8004ac0:	200010e8 	.word	0x200010e8
 8004ac4:	20001224 	.word	0x20001224
 8004ac8:	20001221 	.word	0x20001221
 8004acc:	20001225 	.word	0x20001225
 8004ad0:	20001222 	.word	0x20001222
 8004ad4:	20001223 	.word	0x20001223
 8004ad8:	20001226 	.word	0x20001226
 8004adc:	20001227 	.word	0x20001227
 8004ae0:	2000122c 	.word	0x2000122c
 8004ae4:	2000124d 	.word	0x2000124d
 8004ae8:	2000121c 	.word	0x2000121c
 8004aec:	20001088 	.word	0x20001088
 8004af0:	20001094 	.word	0x20001094
 8004af4:	20001160 	.word	0x20001160
 8004af8:	200010e0 	.word	0x200010e0
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004afc:	2200      	movs	r2, #0
 8004afe:	2101      	movs	r1, #1
 8004b00:	4839      	ldr	r0, [pc, #228]	@ (8004be8 <checkAktifCalisma+0x780>)
 8004b02:	f005 fed2 	bl	800a8aa <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8004b06:	4b39      	ldr	r3, [pc, #228]	@ (8004bec <checkAktifCalisma+0x784>)
 8004b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f040 8085 	bne.w	8004c1c <checkAktifCalisma+0x7b4>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004b12:	4b37      	ldr	r3, [pc, #220]	@ (8004bf0 <checkAktifCalisma+0x788>)
 8004b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b18:	1e51      	subs	r1, r2, #1
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	d005      	beq.n	8004b2a <checkAktifCalisma+0x6c2>
 8004b1e:	4b34      	ldr	r3, [pc, #208]	@ (8004bf0 <checkAktifCalisma+0x788>)
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	1e91      	subs	r1, r2, #2
 8004b26:	430b      	orrs	r3, r1
 8004b28:	d178      	bne.n	8004c1c <checkAktifCalisma+0x7b4>
						&& (stopVar) && (kapiSivicVar)
 8004b2a:	4b32      	ldr	r3, [pc, #200]	@ (8004bf4 <checkAktifCalisma+0x78c>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d074      	beq.n	8004c1c <checkAktifCalisma+0x7b4>
 8004b32:	4b31      	ldr	r3, [pc, #196]	@ (8004bf8 <checkAktifCalisma+0x790>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d070      	beq.n	8004c1c <checkAktifCalisma+0x7b4>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004b3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b3e:	482a      	ldr	r0, [pc, #168]	@ (8004be8 <checkAktifCalisma+0x780>)
 8004b40:	f005 fe9c 	bl	800a87c <HAL_GPIO_ReadPin>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d168      	bne.n	8004c1c <checkAktifCalisma+0x7b4>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004b4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004b4e:	482b      	ldr	r0, [pc, #172]	@ (8004bfc <checkAktifCalisma+0x794>)
 8004b50:	f005 fe94 	bl	800a87c <HAL_GPIO_ReadPin>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d004      	beq.n	8004b64 <checkAktifCalisma+0x6fc>
 8004b5a:	4b29      	ldr	r3, [pc, #164]	@ (8004c00 <checkAktifCalisma+0x798>)
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	d15b      	bne.n	8004c1c <checkAktifCalisma+0x7b4>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8004b64:	2140      	movs	r1, #64	@ 0x40
 8004b66:	4825      	ldr	r0, [pc, #148]	@ (8004bfc <checkAktifCalisma+0x794>)
 8004b68:	f005 fe88 	bl	800a87c <HAL_GPIO_ReadPin>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d10f      	bne.n	8004b92 <checkAktifCalisma+0x72a>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004b72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004b76:	481c      	ldr	r0, [pc, #112]	@ (8004be8 <checkAktifCalisma+0x780>)
 8004b78:	f005 fe80 	bl	800a87c <HAL_GPIO_ReadPin>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d107      	bne.n	8004b92 <checkAktifCalisma+0x72a>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8004b82:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b86:	4818      	ldr	r0, [pc, #96]	@ (8004be8 <checkAktifCalisma+0x780>)
 8004b88:	f005 fe78 	bl	800a87c <HAL_GPIO_ReadPin>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d003      	beq.n	8004b9a <checkAktifCalisma+0x732>
 8004b92:	4b1c      	ldr	r3, [pc, #112]	@ (8004c04 <checkAktifCalisma+0x79c>)
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d040      	beq.n	8004c1c <checkAktifCalisma+0x7b4>
						&& (yukarimotorcalisiyor==0)
 8004b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c08 <checkAktifCalisma+0x7a0>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	f083 0301 	eor.w	r3, r3, #1
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d039      	beq.n	8004c1c <checkAktifCalisma+0x7b4>
						&& (yukarivalfcalisiyor==0)
 8004ba8:	4b18      	ldr	r3, [pc, #96]	@ (8004c0c <checkAktifCalisma+0x7a4>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	f083 0301 	eor.w	r3, r3, #1
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d032      	beq.n	8004c1c <checkAktifCalisma+0x7b4>
						&& (asagivalfcalisiyor==0)
 8004bb6:	4b16      	ldr	r3, [pc, #88]	@ (8004c10 <checkAktifCalisma+0x7a8>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	f083 0301 	eor.w	r3, r3, #1
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d02b      	beq.n	8004c1c <checkAktifCalisma+0x7b4>
						&& (devmotorasagicalisiyor==0)
 8004bc4:	4b13      	ldr	r3, [pc, #76]	@ (8004c14 <checkAktifCalisma+0x7ac>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	f083 0301 	eor.w	r3, r3, #1
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d024      	beq.n	8004c1c <checkAktifCalisma+0x7b4>
						&&(devasagivalfcalisiyor==0)) {
 8004bd2:	4b11      	ldr	r3, [pc, #68]	@ (8004c18 <checkAktifCalisma+0x7b0>)
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	f083 0301 	eor.w	r3, r3, #1
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01d      	beq.n	8004c1c <checkAktifCalisma+0x7b4>

					devmotoryukaricalisiyor=1;
 8004be0:	4a08      	ldr	r2, [pc, #32]	@ (8004c04 <checkAktifCalisma+0x79c>)
 8004be2:	2301      	movs	r3, #1
 8004be4:	7013      	strb	r3, [r2, #0]
 8004be6:	e01c      	b.n	8004c22 <checkAktifCalisma+0x7ba>
 8004be8:	40010c00 	.word	0x40010c00
 8004bec:	200011a0 	.word	0x200011a0
 8004bf0:	20001130 	.word	0x20001130
 8004bf4:	2000123e 	.word	0x2000123e
 8004bf8:	2000123f 	.word	0x2000123f
 8004bfc:	40011000 	.word	0x40011000
 8004c00:	20001138 	.word	0x20001138
 8004c04:	20001222 	.word	0x20001222
 8004c08:	20001221 	.word	0x20001221
 8004c0c:	20001225 	.word	0x20001225
 8004c10:	20001224 	.word	0x20001224
 8004c14:	20001223 	.word	0x20001223
 8004c18:	20001227 	.word	0x20001227
				} else {
					devmotoryukaricalisiyor=0;
 8004c1c:	4a6b      	ldr	r2, [pc, #428]	@ (8004dcc <checkAktifCalisma+0x964>)
 8004c1e:	2300      	movs	r3, #0
 8004c20:	7013      	strb	r3, [r2, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8004c22:	4b6a      	ldr	r3, [pc, #424]	@ (8004dcc <checkAktifCalisma+0x964>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <checkAktifCalisma+0x7d2>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	2120      	movs	r1, #32
 8004c2e:	4868      	ldr	r0, [pc, #416]	@ (8004dd0 <checkAktifCalisma+0x968>)
 8004c30:	f005 fe3b 	bl	800a8aa <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8004c34:	4a67      	ldr	r2, [pc, #412]	@ (8004dd4 <checkAktifCalisma+0x96c>)
 8004c36:	2301      	movs	r3, #1
 8004c38:	7013      	strb	r3, [r2, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004c3a:	4b66      	ldr	r3, [pc, #408]	@ (8004dd4 <checkAktifCalisma+0x96c>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d025      	beq.n	8004c8e <checkAktifCalisma+0x826>
 8004c42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c46:	4864      	ldr	r0, [pc, #400]	@ (8004dd8 <checkAktifCalisma+0x970>)
 8004c48:	f005 fe18 	bl	800a87c <HAL_GPIO_ReadPin>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d007      	beq.n	8004c62 <checkAktifCalisma+0x7fa>
 8004c52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004c56:	485e      	ldr	r0, [pc, #376]	@ (8004dd0 <checkAktifCalisma+0x968>)
 8004c58:	f005 fe10 	bl	800a87c <HAL_GPIO_ReadPin>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d115      	bne.n	8004c8e <checkAktifCalisma+0x826>
 8004c62:	4b5e      	ldr	r3, [pc, #376]	@ (8004ddc <checkAktifCalisma+0x974>)
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d011      	beq.n	8004c8e <checkAktifCalisma+0x826>
 8004c6a:	4b5d      	ldr	r3, [pc, #372]	@ (8004de0 <checkAktifCalisma+0x978>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00d      	beq.n	8004c8e <checkAktifCalisma+0x826>
 8004c72:	4b5c      	ldr	r3, [pc, #368]	@ (8004de4 <checkAktifCalisma+0x97c>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	f083 0301 	eor.w	r3, r3, #1
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d006      	beq.n	8004c8e <checkAktifCalisma+0x826>
					timer2=millis;
 8004c80:	4b59      	ldr	r3, [pc, #356]	@ (8004de8 <checkAktifCalisma+0x980>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	4b59      	ldr	r3, [pc, #356]	@ (8004dec <checkAktifCalisma+0x984>)
 8004c86:	601a      	str	r2, [r3, #0]
					butonKontrol4=1;
 8004c88:	4a56      	ldr	r2, [pc, #344]	@ (8004de4 <checkAktifCalisma+0x97c>)
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	7013      	strb	r3, [r2, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004c8e:	4b56      	ldr	r3, [pc, #344]	@ (8004de8 <checkAktifCalisma+0x980>)
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4b56      	ldr	r3, [pc, #344]	@ (8004dec <checkAktifCalisma+0x984>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2200      	movs	r2, #0
 8004c9a:	469a      	mov	sl, r3
 8004c9c:	4693      	mov	fp, r2
 8004c9e:	4b54      	ldr	r3, [pc, #336]	@ (8004df0 <checkAktifCalisma+0x988>)
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	4592      	cmp	sl, r2
 8004ca6:	eb7b 0303 	sbcs.w	r3, fp, r3
 8004caa:	d303      	bcc.n	8004cb4 <checkAktifCalisma+0x84c>
 8004cac:	4b4d      	ldr	r3, [pc, #308]	@ (8004de4 <checkAktifCalisma+0x97c>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10d      	bne.n	8004cd0 <checkAktifCalisma+0x868>
 8004cb4:	4b49      	ldr	r3, [pc, #292]	@ (8004ddc <checkAktifCalisma+0x974>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	f083 0301 	eor.w	r3, r3, #1
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <checkAktifCalisma+0x868>
 8004cc2:	4b47      	ldr	r3, [pc, #284]	@ (8004de0 <checkAktifCalisma+0x978>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	f083 0301 	eor.w	r3, r3, #1
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <checkAktifCalisma+0x87e>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2120      	movs	r1, #32
 8004cd4:	483e      	ldr	r0, [pc, #248]	@ (8004dd0 <checkAktifCalisma+0x968>)
 8004cd6:	f005 fde8 	bl	800a8aa <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8004cda:	4a3e      	ldr	r2, [pc, #248]	@ (8004dd4 <checkAktifCalisma+0x96c>)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	7013      	strb	r3, [r2, #0]
					butonKontrol4=0;
 8004ce0:	4a40      	ldr	r2, [pc, #256]	@ (8004de4 <checkAktifCalisma+0x97c>)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	7013      	strb	r3, [r2, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8004ce6:	4b43      	ldr	r3, [pc, #268]	@ (8004df4 <checkAktifCalisma+0x98c>)
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f040 808f 	bne.w	8004e10 <checkAktifCalisma+0x9a8>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004cf2:	4b41      	ldr	r3, [pc, #260]	@ (8004df8 <checkAktifCalisma+0x990>)
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	1e51      	subs	r1, r2, #1
 8004cfa:	430b      	orrs	r3, r1
 8004cfc:	d006      	beq.n	8004d0c <checkAktifCalisma+0x8a4>
 8004cfe:	4b3e      	ldr	r3, [pc, #248]	@ (8004df8 <checkAktifCalisma+0x990>)
 8004d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d04:	1e91      	subs	r1, r2, #2
 8004d06:	430b      	orrs	r3, r1
 8004d08:	f040 8082 	bne.w	8004e10 <checkAktifCalisma+0x9a8>
						&& (stopVar) && (kapiSivicVar)
 8004d0c:	4b33      	ldr	r3, [pc, #204]	@ (8004ddc <checkAktifCalisma+0x974>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d07d      	beq.n	8004e10 <checkAktifCalisma+0x9a8>
 8004d14:	4b32      	ldr	r3, [pc, #200]	@ (8004de0 <checkAktifCalisma+0x978>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d079      	beq.n	8004e10 <checkAktifCalisma+0x9a8>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004d1c:	2140      	movs	r1, #64	@ 0x40
 8004d1e:	482c      	ldr	r0, [pc, #176]	@ (8004dd0 <checkAktifCalisma+0x968>)
 8004d20:	f005 fdac 	bl	800a87c <HAL_GPIO_ReadPin>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d172      	bne.n	8004e10 <checkAktifCalisma+0x9a8>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004d2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d2e:	4828      	ldr	r0, [pc, #160]	@ (8004dd0 <checkAktifCalisma+0x968>)
 8004d30:	f005 fda4 	bl	800a87c <HAL_GPIO_ReadPin>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d004      	beq.n	8004d44 <checkAktifCalisma+0x8dc>
 8004d3a:	4b30      	ldr	r3, [pc, #192]	@ (8004dfc <checkAktifCalisma+0x994>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	d165      	bne.n	8004e10 <checkAktifCalisma+0x9a8>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004d44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d48:	4823      	ldr	r0, [pc, #140]	@ (8004dd8 <checkAktifCalisma+0x970>)
 8004d4a:	f005 fd97 	bl	800a87c <HAL_GPIO_ReadPin>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d10f      	bne.n	8004d74 <checkAktifCalisma+0x90c>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004d54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004d58:	481f      	ldr	r0, [pc, #124]	@ (8004dd8 <checkAktifCalisma+0x970>)
 8004d5a:	f005 fd8f 	bl	800a87c <HAL_GPIO_ReadPin>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d107      	bne.n	8004d74 <checkAktifCalisma+0x90c>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004d64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004d68:	481b      	ldr	r0, [pc, #108]	@ (8004dd8 <checkAktifCalisma+0x970>)
 8004d6a:	f005 fd87 	bl	800a87c <HAL_GPIO_ReadPin>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d003      	beq.n	8004d7c <checkAktifCalisma+0x914>
 8004d74:	4b22      	ldr	r3, [pc, #136]	@ (8004e00 <checkAktifCalisma+0x998>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d049      	beq.n	8004e10 <checkAktifCalisma+0x9a8>
						&& (yukarimotorcalisiyor==0)
 8004d7c:	4b21      	ldr	r3, [pc, #132]	@ (8004e04 <checkAktifCalisma+0x99c>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	f083 0301 	eor.w	r3, r3, #1
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d042      	beq.n	8004e10 <checkAktifCalisma+0x9a8>
						&& (yukarivalfcalisiyor==0)
 8004d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004e08 <checkAktifCalisma+0x9a0>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	f083 0301 	eor.w	r3, r3, #1
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d03b      	beq.n	8004e10 <checkAktifCalisma+0x9a8>
						&& (asagivalfcalisiyor==0)
 8004d98:	4b1c      	ldr	r3, [pc, #112]	@ (8004e0c <checkAktifCalisma+0x9a4>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	f083 0301 	eor.w	r3, r3, #1
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d034      	beq.n	8004e10 <checkAktifCalisma+0x9a8>
						&& (devyukarivalfcalisiyor==0)
 8004da6:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <checkAktifCalisma+0x96c>)
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	f083 0301 	eor.w	r3, r3, #1
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d02d      	beq.n	8004e10 <checkAktifCalisma+0x9a8>
						&& (devmotoryukaricalisiyor==0)) {
 8004db4:	4b05      	ldr	r3, [pc, #20]	@ (8004dcc <checkAktifCalisma+0x964>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	f083 0301 	eor.w	r3, r3, #1
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d026      	beq.n	8004e10 <checkAktifCalisma+0x9a8>

					devmotorasagicalisiyor=1;
 8004dc2:	4a0f      	ldr	r2, [pc, #60]	@ (8004e00 <checkAktifCalisma+0x998>)
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	7013      	strb	r3, [r2, #0]
 8004dc8:	e025      	b.n	8004e16 <checkAktifCalisma+0x9ae>
 8004dca:	bf00      	nop
 8004dcc:	20001222 	.word	0x20001222
 8004dd0:	40011000 	.word	0x40011000
 8004dd4:	20001226 	.word	0x20001226
 8004dd8:	40010c00 	.word	0x40010c00
 8004ddc:	2000123e 	.word	0x2000123e
 8004de0:	2000123f 	.word	0x2000123f
 8004de4:	2000121e 	.word	0x2000121e
 8004de8:	20001088 	.word	0x20001088
 8004dec:	20001094 	.word	0x20001094
 8004df0:	20001168 	.word	0x20001168
 8004df4:	200011a0 	.word	0x200011a0
 8004df8:	20001130 	.word	0x20001130
 8004dfc:	20001140 	.word	0x20001140
 8004e00:	20001223 	.word	0x20001223
 8004e04:	20001221 	.word	0x20001221
 8004e08:	20001225 	.word	0x20001225
 8004e0c:	20001224 	.word	0x20001224
				} else {
					devmotorasagicalisiyor=0;
 8004e10:	4a47      	ldr	r2, [pc, #284]	@ (8004f30 <checkAktifCalisma+0xac8>)
 8004e12:	2300      	movs	r3, #0
 8004e14:	7013      	strb	r3, [r2, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8004e16:	4b46      	ldr	r3, [pc, #280]	@ (8004f30 <checkAktifCalisma+0xac8>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d007      	beq.n	8004e2e <checkAktifCalisma+0x9c6>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004e1e:	2201      	movs	r2, #1
 8004e20:	2110      	movs	r1, #16
 8004e22:	4844      	ldr	r0, [pc, #272]	@ (8004f34 <checkAktifCalisma+0xacc>)
 8004e24:	f005 fd41 	bl	800a8aa <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004e28:	4a43      	ldr	r2, [pc, #268]	@ (8004f38 <checkAktifCalisma+0xad0>)
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	7013      	strb	r3, [r2, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004e2e:	4b42      	ldr	r3, [pc, #264]	@ (8004f38 <checkAktifCalisma+0xad0>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d024      	beq.n	8004e80 <checkAktifCalisma+0xa18>
 8004e36:	2140      	movs	r1, #64	@ 0x40
 8004e38:	483e      	ldr	r0, [pc, #248]	@ (8004f34 <checkAktifCalisma+0xacc>)
 8004e3a:	f005 fd1f 	bl	800a87c <HAL_GPIO_ReadPin>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d007      	beq.n	8004e54 <checkAktifCalisma+0x9ec>
 8004e44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004e48:	483a      	ldr	r0, [pc, #232]	@ (8004f34 <checkAktifCalisma+0xacc>)
 8004e4a:	f005 fd17 	bl	800a87c <HAL_GPIO_ReadPin>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d115      	bne.n	8004e80 <checkAktifCalisma+0xa18>
 8004e54:	4b39      	ldr	r3, [pc, #228]	@ (8004f3c <checkAktifCalisma+0xad4>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d011      	beq.n	8004e80 <checkAktifCalisma+0xa18>
 8004e5c:	4b38      	ldr	r3, [pc, #224]	@ (8004f40 <checkAktifCalisma+0xad8>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00d      	beq.n	8004e80 <checkAktifCalisma+0xa18>
 8004e64:	4b37      	ldr	r3, [pc, #220]	@ (8004f44 <checkAktifCalisma+0xadc>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	f083 0301 	eor.w	r3, r3, #1
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d006      	beq.n	8004e80 <checkAktifCalisma+0xa18>
					timer2=millis;
 8004e72:	4b35      	ldr	r3, [pc, #212]	@ (8004f48 <checkAktifCalisma+0xae0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a35      	ldr	r2, [pc, #212]	@ (8004f4c <checkAktifCalisma+0xae4>)
 8004e78:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004e7a:	4a32      	ldr	r2, [pc, #200]	@ (8004f44 <checkAktifCalisma+0xadc>)
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	7013      	strb	r3, [r2, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004e80:	4b31      	ldr	r3, [pc, #196]	@ (8004f48 <checkAktifCalisma+0xae0>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	4b31      	ldr	r3, [pc, #196]	@ (8004f4c <checkAktifCalisma+0xae4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e90:	4b2f      	ldr	r3, [pc, #188]	@ (8004f50 <checkAktifCalisma+0xae8>)
 8004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	4294      	cmp	r4, r2
 8004e9e:	4199      	sbcs	r1, r3
 8004ea0:	d303      	bcc.n	8004eaa <checkAktifCalisma+0xa42>
 8004ea2:	4b28      	ldr	r3, [pc, #160]	@ (8004f44 <checkAktifCalisma+0xadc>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10d      	bne.n	8004ec6 <checkAktifCalisma+0xa5e>
 8004eaa:	4b24      	ldr	r3, [pc, #144]	@ (8004f3c <checkAktifCalisma+0xad4>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	f083 0301 	eor.w	r3, r3, #1
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <checkAktifCalisma+0xa5e>
 8004eb8:	4b21      	ldr	r3, [pc, #132]	@ (8004f40 <checkAktifCalisma+0xad8>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	f083 0301 	eor.w	r3, r3, #1
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <checkAktifCalisma+0xa74>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2110      	movs	r1, #16
 8004eca:	481a      	ldr	r0, [pc, #104]	@ (8004f34 <checkAktifCalisma+0xacc>)
 8004ecc:	f005 fced 	bl	800a8aa <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004ed0:	4b19      	ldr	r3, [pc, #100]	@ (8004f38 <checkAktifCalisma+0xad0>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8004ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8004f44 <checkAktifCalisma+0xadc>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004edc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004ee0:	481c      	ldr	r0, [pc, #112]	@ (8004f54 <checkAktifCalisma+0xaec>)
 8004ee2:	f005 fccb 	bl	800a87c <HAL_GPIO_ReadPin>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d137      	bne.n	8004f5c <checkAktifCalisma+0xaf4>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004eec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004ef0:	4818      	ldr	r0, [pc, #96]	@ (8004f54 <checkAktifCalisma+0xaec>)
 8004ef2:	f005 fcc3 	bl	800a87c <HAL_GPIO_ReadPin>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d12f      	bne.n	8004f5c <checkAktifCalisma+0xaf4>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004efc:	2104      	movs	r1, #4
 8004efe:	4815      	ldr	r0, [pc, #84]	@ (8004f54 <checkAktifCalisma+0xaec>)
 8004f00:	f005 fcbc 	bl	800a87c <HAL_GPIO_ReadPin>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d128      	bne.n	8004f5c <checkAktifCalisma+0xaf4>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004f0a:	2102      	movs	r1, #2
 8004f0c:	4811      	ldr	r0, [pc, #68]	@ (8004f54 <checkAktifCalisma+0xaec>)
 8004f0e:	f005 fcb5 	bl	800a87c <HAL_GPIO_ReadPin>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d121      	bne.n	8004f5c <checkAktifCalisma+0xaf4>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004f18:	2101      	movs	r1, #1
 8004f1a:	480e      	ldr	r0, [pc, #56]	@ (8004f54 <checkAktifCalisma+0xaec>)
 8004f1c:	f005 fcae 	bl	800a87c <HAL_GPIO_ReadPin>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d11a      	bne.n	8004f5c <checkAktifCalisma+0xaf4>
					makineStop=1;
 8004f26:	4b0c      	ldr	r3, [pc, #48]	@ (8004f58 <checkAktifCalisma+0xaf0>)
 8004f28:	2201      	movs	r2, #1
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	e019      	b.n	8004f62 <checkAktifCalisma+0xafa>
 8004f2e:	bf00      	nop
 8004f30:	20001223 	.word	0x20001223
 8004f34:	40011000 	.word	0x40011000
 8004f38:	20001227 	.word	0x20001227
 8004f3c:	2000123e 	.word	0x2000123e
 8004f40:	2000123f 	.word	0x2000123f
 8004f44:	2000121f 	.word	0x2000121f
 8004f48:	20001088 	.word	0x20001088
 8004f4c:	20001094 	.word	0x20001094
 8004f50:	20001168 	.word	0x20001168
 8004f54:	40010c00 	.word	0x40010c00
 8004f58:	2000122e 	.word	0x2000122e
				} else {
					makineStop=0;
 8004f5c:	4b83      	ldr	r3, [pc, #524]	@ (800516c <checkAktifCalisma+0xd04>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004f62:	4b83      	ldr	r3, [pc, #524]	@ (8005170 <checkAktifCalisma+0xd08>)
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	d14c      	bne.n	8005006 <checkAktifCalisma+0xb9e>
 8004f6c:	4b81      	ldr	r3, [pc, #516]	@ (8005174 <checkAktifCalisma+0xd0c>)
 8004f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f72:	1e51      	subs	r1, r2, #1
 8004f74:	430b      	orrs	r3, r1
 8004f76:	d005      	beq.n	8004f84 <checkAktifCalisma+0xb1c>
 8004f78:	4b7e      	ldr	r3, [pc, #504]	@ (8005174 <checkAktifCalisma+0xd0c>)
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	1ed1      	subs	r1, r2, #3
 8004f80:	430b      	orrs	r3, r1
 8004f82:	d140      	bne.n	8005006 <checkAktifCalisma+0xb9e>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004f84:	2180      	movs	r1, #128	@ 0x80
 8004f86:	487c      	ldr	r0, [pc, #496]	@ (8005178 <checkAktifCalisma+0xd10>)
 8004f88:	f005 fc78 	bl	800a87c <HAL_GPIO_ReadPin>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d104      	bne.n	8004f9c <checkAktifCalisma+0xb34>
 8004f92:	4b7a      	ldr	r3, [pc, #488]	@ (800517c <checkAktifCalisma+0xd14>)
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	d00d      	beq.n	8004fb8 <checkAktifCalisma+0xb50>
 8004f9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004fa0:	4877      	ldr	r0, [pc, #476]	@ (8005180 <checkAktifCalisma+0xd18>)
 8004fa2:	f005 fc6b 	bl	800a87c <HAL_GPIO_ReadPin>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d12c      	bne.n	8005006 <checkAktifCalisma+0xb9e>
 8004fac:	4b73      	ldr	r3, [pc, #460]	@ (800517c <checkAktifCalisma+0xd14>)
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	1e51      	subs	r1, r2, #1
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	d126      	bne.n	8005006 <checkAktifCalisma+0xb9e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004fb8:	2104      	movs	r1, #4
 8004fba:	486f      	ldr	r0, [pc, #444]	@ (8005178 <checkAktifCalisma+0xd10>)
 8004fbc:	f005 fc5e 	bl	800a87c <HAL_GPIO_ReadPin>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d004      	beq.n	8004fd0 <checkAktifCalisma+0xb68>
 8004fc6:	4b6f      	ldr	r3, [pc, #444]	@ (8005184 <checkAktifCalisma+0xd1c>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	d11a      	bne.n	8005006 <checkAktifCalisma+0xb9e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004fd0:	2102      	movs	r1, #2
 8004fd2:	4869      	ldr	r0, [pc, #420]	@ (8005178 <checkAktifCalisma+0xd10>)
 8004fd4:	f005 fc52 	bl	800a87c <HAL_GPIO_ReadPin>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d113      	bne.n	8005006 <checkAktifCalisma+0xb9e>
						&&(butonKontrol==0)
 8004fde:	4b6a      	ldr	r3, [pc, #424]	@ (8005188 <checkAktifCalisma+0xd20>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	f083 0301 	eor.w	r3, r3, #1
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00c      	beq.n	8005006 <checkAktifCalisma+0xb9e>
						&&(makineStop==1)) {
 8004fec:	4b5f      	ldr	r3, [pc, #380]	@ (800516c <checkAktifCalisma+0xd04>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d008      	beq.n	8005006 <checkAktifCalisma+0xb9e>

					kapi1prudhome=1;
 8004ff4:	4b65      	ldr	r3, [pc, #404]	@ (800518c <checkAktifCalisma+0xd24>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004ffa:	4b65      	ldr	r3, [pc, #404]	@ (8005190 <checkAktifCalisma+0xd28>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a65      	ldr	r2, [pc, #404]	@ (8005194 <checkAktifCalisma+0xd2c>)
 8005000:	6013      	str	r3, [r2, #0]
					bekle();
 8005002:	f7ff f879 	bl	80040f8 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005006:	4b62      	ldr	r3, [pc, #392]	@ (8005190 <checkAktifCalisma+0xd28>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4b62      	ldr	r3, [pc, #392]	@ (8005194 <checkAktifCalisma+0xd2c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2200      	movs	r2, #0
 8005012:	623b      	str	r3, [r7, #32]
 8005014:	627a      	str	r2, [r7, #36]	@ 0x24
 8005016:	4b60      	ldr	r3, [pc, #384]	@ (8005198 <checkAktifCalisma+0xd30>)
 8005018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005020:	4604      	mov	r4, r0
 8005022:	4294      	cmp	r4, r2
 8005024:	4199      	sbcs	r1, r3
 8005026:	d212      	bcs.n	800504e <checkAktifCalisma+0xbe6>
 8005028:	2104      	movs	r1, #4
 800502a:	4853      	ldr	r0, [pc, #332]	@ (8005178 <checkAktifCalisma+0xd10>)
 800502c:	f005 fc26 	bl	800a87c <HAL_GPIO_ReadPin>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00b      	beq.n	800504e <checkAktifCalisma+0xbe6>
 8005036:	4b53      	ldr	r3, [pc, #332]	@ (8005184 <checkAktifCalisma+0xd1c>)
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	4313      	orrs	r3, r2
 800503e:	d006      	beq.n	800504e <checkAktifCalisma+0xbe6>
 8005040:	4b4a      	ldr	r3, [pc, #296]	@ (800516c <checkAktifCalisma+0xd04>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	f083 0301 	eor.w	r3, r3, #1
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <checkAktifCalisma+0xbec>
					kapi1prudhome=0;
 800504e:	4b4f      	ldr	r3, [pc, #316]	@ (800518c <checkAktifCalisma+0xd24>)
 8005050:	2200      	movs	r2, #0
 8005052:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005054:	4b46      	ldr	r3, [pc, #280]	@ (8005170 <checkAktifCalisma+0xd08>)
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	1e51      	subs	r1, r2, #1
 800505c:	430b      	orrs	r3, r1
 800505e:	d140      	bne.n	80050e2 <checkAktifCalisma+0xc7a>
 8005060:	4b44      	ldr	r3, [pc, #272]	@ (8005174 <checkAktifCalisma+0xd0c>)
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	1e51      	subs	r1, r2, #1
 8005068:	430b      	orrs	r3, r1
 800506a:	d005      	beq.n	8005078 <checkAktifCalisma+0xc10>
 800506c:	4b41      	ldr	r3, [pc, #260]	@ (8005174 <checkAktifCalisma+0xd0c>)
 800506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005072:	1ed1      	subs	r1, r2, #3
 8005074:	430b      	orrs	r3, r1
 8005076:	d134      	bne.n	80050e2 <checkAktifCalisma+0xc7a>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005078:	2104      	movs	r1, #4
 800507a:	483f      	ldr	r0, [pc, #252]	@ (8005178 <checkAktifCalisma+0xd10>)
 800507c:	f005 fbfe 	bl	800a87c <HAL_GPIO_ReadPin>
 8005080:	4603      	mov	r3, r0
 8005082:	2b01      	cmp	r3, #1
 8005084:	d004      	beq.n	8005090 <checkAktifCalisma+0xc28>
 8005086:	4b3f      	ldr	r3, [pc, #252]	@ (8005184 <checkAktifCalisma+0xd1c>)
 8005088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508c:	4313      	orrs	r3, r2
 800508e:	d128      	bne.n	80050e2 <checkAktifCalisma+0xc7a>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005090:	2102      	movs	r1, #2
 8005092:	4839      	ldr	r0, [pc, #228]	@ (8005178 <checkAktifCalisma+0xd10>)
 8005094:	f005 fbf2 	bl	800a87c <HAL_GPIO_ReadPin>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d121      	bne.n	80050e2 <checkAktifCalisma+0xc7a>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800509e:	2180      	movs	r1, #128	@ 0x80
 80050a0:	4835      	ldr	r0, [pc, #212]	@ (8005178 <checkAktifCalisma+0xd10>)
 80050a2:	f005 fbeb 	bl	800a87c <HAL_GPIO_ReadPin>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d104      	bne.n	80050b6 <checkAktifCalisma+0xc4e>
 80050ac:	4b33      	ldr	r3, [pc, #204]	@ (800517c <checkAktifCalisma+0xd14>)
 80050ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	d00d      	beq.n	80050d2 <checkAktifCalisma+0xc6a>
 80050b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80050ba:	4831      	ldr	r0, [pc, #196]	@ (8005180 <checkAktifCalisma+0xd18>)
 80050bc:	f005 fbde 	bl	800a87c <HAL_GPIO_ReadPin>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10d      	bne.n	80050e2 <checkAktifCalisma+0xc7a>
 80050c6:	4b2d      	ldr	r3, [pc, #180]	@ (800517c <checkAktifCalisma+0xd14>)
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	1e51      	subs	r1, r2, #1
 80050ce:	430b      	orrs	r3, r1
 80050d0:	d107      	bne.n	80050e2 <checkAktifCalisma+0xc7a>
						&&(makineStop==1)) {
 80050d2:	4b26      	ldr	r3, [pc, #152]	@ (800516c <checkAktifCalisma+0xd04>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <checkAktifCalisma+0xc7a>

					kapi1butonkontrol=1;
 80050da:	4b30      	ldr	r3, [pc, #192]	@ (800519c <checkAktifCalisma+0xd34>)
 80050dc:	2201      	movs	r2, #1
 80050de:	701a      	strb	r2, [r3, #0]
 80050e0:	e002      	b.n	80050e8 <checkAktifCalisma+0xc80>
				} else {
					kapi1butonkontrol=0;
 80050e2:	4b2e      	ldr	r3, [pc, #184]	@ (800519c <checkAktifCalisma+0xd34>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80050e8:	4b21      	ldr	r3, [pc, #132]	@ (8005170 <checkAktifCalisma+0xd08>)
 80050ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ee:	1e91      	subs	r1, r2, #2
 80050f0:	430b      	orrs	r3, r1
 80050f2:	d126      	bne.n	8005142 <checkAktifCalisma+0xcda>
 80050f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005174 <checkAktifCalisma+0xd0c>)
 80050f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fa:	1e51      	subs	r1, r2, #1
 80050fc:	430b      	orrs	r3, r1
 80050fe:	d005      	beq.n	800510c <checkAktifCalisma+0xca4>
 8005100:	4b1c      	ldr	r3, [pc, #112]	@ (8005174 <checkAktifCalisma+0xd0c>)
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	1ed1      	subs	r1, r2, #3
 8005108:	430b      	orrs	r3, r1
 800510a:	d11a      	bne.n	8005142 <checkAktifCalisma+0xcda>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800510c:	2104      	movs	r1, #4
 800510e:	481a      	ldr	r0, [pc, #104]	@ (8005178 <checkAktifCalisma+0xd10>)
 8005110:	f005 fbb4 	bl	800a87c <HAL_GPIO_ReadPin>
 8005114:	4603      	mov	r3, r0
 8005116:	2b01      	cmp	r3, #1
 8005118:	d004      	beq.n	8005124 <checkAktifCalisma+0xcbc>
 800511a:	4b1a      	ldr	r3, [pc, #104]	@ (8005184 <checkAktifCalisma+0xd1c>)
 800511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005120:	4313      	orrs	r3, r2
 8005122:	d10e      	bne.n	8005142 <checkAktifCalisma+0xcda>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005124:	2102      	movs	r1, #2
 8005126:	4814      	ldr	r0, [pc, #80]	@ (8005178 <checkAktifCalisma+0xd10>)
 8005128:	f005 fba8 	bl	800a87c <HAL_GPIO_ReadPin>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d107      	bne.n	8005142 <checkAktifCalisma+0xcda>
						&&(makineStop==1)) {
 8005132:	4b0e      	ldr	r3, [pc, #56]	@ (800516c <checkAktifCalisma+0xd04>)
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <checkAktifCalisma+0xcda>

					kapi1pizzato=1;
 800513a:	4b19      	ldr	r3, [pc, #100]	@ (80051a0 <checkAktifCalisma+0xd38>)
 800513c:	2201      	movs	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	e002      	b.n	8005148 <checkAktifCalisma+0xce0>
				} else {
					kapi1pizzato=0;
 8005142:	4b17      	ldr	r3, [pc, #92]	@ (80051a0 <checkAktifCalisma+0xd38>)
 8005144:	2200      	movs	r2, #0
 8005146:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005148:	4b14      	ldr	r3, [pc, #80]	@ (800519c <checkAktifCalisma+0xd34>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d107      	bne.n	8005160 <checkAktifCalisma+0xcf8>
 8005150:	4b13      	ldr	r3, [pc, #76]	@ (80051a0 <checkAktifCalisma+0xd38>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d103      	bne.n	8005160 <checkAktifCalisma+0xcf8>
 8005158:	4b0c      	ldr	r3, [pc, #48]	@ (800518c <checkAktifCalisma+0xd24>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d023      	beq.n	80051a8 <checkAktifCalisma+0xd40>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005160:	2201      	movs	r2, #1
 8005162:	2180      	movs	r1, #128	@ 0x80
 8005164:	480f      	ldr	r0, [pc, #60]	@ (80051a4 <checkAktifCalisma+0xd3c>)
 8005166:	f005 fba0 	bl	800a8aa <HAL_GPIO_WritePin>
 800516a:	e022      	b.n	80051b2 <checkAktifCalisma+0xd4a>
 800516c:	2000122e 	.word	0x2000122e
 8005170:	20001100 	.word	0x20001100
 8005174:	200010f8 	.word	0x200010f8
 8005178:	40011000 	.word	0x40011000
 800517c:	20001118 	.word	0x20001118
 8005180:	40010c00 	.word	0x40010c00
 8005184:	200010e8 	.word	0x200010e8
 8005188:	2000121b 	.word	0x2000121b
 800518c:	2000122f 	.word	0x2000122f
 8005190:	20001088 	.word	0x20001088
 8005194:	2000108c 	.word	0x2000108c
 8005198:	20001180 	.word	0x20001180
 800519c:	20001230 	.word	0x20001230
 80051a0:	20001231 	.word	0x20001231
 80051a4:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80051a8:	2200      	movs	r2, #0
 80051aa:	2180      	movs	r1, #128	@ 0x80
 80051ac:	488e      	ldr	r0, [pc, #568]	@ (80053e8 <checkAktifCalisma+0xf80>)
 80051ae:	f005 fb7c 	bl	800a8aa <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80051b2:	4b8e      	ldr	r3, [pc, #568]	@ (80053ec <checkAktifCalisma+0xf84>)
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	d148      	bne.n	800524e <checkAktifCalisma+0xde6>
 80051bc:	4b8c      	ldr	r3, [pc, #560]	@ (80053f0 <checkAktifCalisma+0xf88>)
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	1e51      	subs	r1, r2, #1
 80051c4:	430b      	orrs	r3, r1
 80051c6:	d005      	beq.n	80051d4 <checkAktifCalisma+0xd6c>
 80051c8:	4b89      	ldr	r3, [pc, #548]	@ (80053f0 <checkAktifCalisma+0xf88>)
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	1ed1      	subs	r1, r2, #3
 80051d0:	430b      	orrs	r3, r1
 80051d2:	d13c      	bne.n	800524e <checkAktifCalisma+0xde6>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80051d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80051d8:	4886      	ldr	r0, [pc, #536]	@ (80053f4 <checkAktifCalisma+0xf8c>)
 80051da:	f005 fb4f 	bl	800a87c <HAL_GPIO_ReadPin>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d104      	bne.n	80051ee <checkAktifCalisma+0xd86>
 80051e4:	4b84      	ldr	r3, [pc, #528]	@ (80053f8 <checkAktifCalisma+0xf90>)
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	d00d      	beq.n	800520a <checkAktifCalisma+0xda2>
 80051ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80051f2:	4882      	ldr	r0, [pc, #520]	@ (80053fc <checkAktifCalisma+0xf94>)
 80051f4:	f005 fb42 	bl	800a87c <HAL_GPIO_ReadPin>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d127      	bne.n	800524e <checkAktifCalisma+0xde6>
 80051fe:	4b7e      	ldr	r3, [pc, #504]	@ (80053f8 <checkAktifCalisma+0xf90>)
 8005200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005204:	1e51      	subs	r1, r2, #1
 8005206:	430b      	orrs	r3, r1
 8005208:	d121      	bne.n	800524e <checkAktifCalisma+0xde6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800520a:	2102      	movs	r1, #2
 800520c:	4879      	ldr	r0, [pc, #484]	@ (80053f4 <checkAktifCalisma+0xf8c>)
 800520e:	f005 fb35 	bl	800a87c <HAL_GPIO_ReadPin>
 8005212:	4603      	mov	r3, r0
 8005214:	2b01      	cmp	r3, #1
 8005216:	d11a      	bne.n	800524e <checkAktifCalisma+0xde6>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005218:	2104      	movs	r1, #4
 800521a:	4876      	ldr	r0, [pc, #472]	@ (80053f4 <checkAktifCalisma+0xf8c>)
 800521c:	f005 fb2e 	bl	800a87c <HAL_GPIO_ReadPin>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d113      	bne.n	800524e <checkAktifCalisma+0xde6>
						&&(makineStop==1)
 8005226:	4b76      	ldr	r3, [pc, #472]	@ (8005400 <checkAktifCalisma+0xf98>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00f      	beq.n	800524e <checkAktifCalisma+0xde6>
						&&(butonKontrol==0)) {
 800522e:	4b75      	ldr	r3, [pc, #468]	@ (8005404 <checkAktifCalisma+0xf9c>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	f083 0301 	eor.w	r3, r3, #1
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d008      	beq.n	800524e <checkAktifCalisma+0xde6>

					kapi2prudhome=1;
 800523c:	4b72      	ldr	r3, [pc, #456]	@ (8005408 <checkAktifCalisma+0xfa0>)
 800523e:	2201      	movs	r2, #1
 8005240:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005242:	4b72      	ldr	r3, [pc, #456]	@ (800540c <checkAktifCalisma+0xfa4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a72      	ldr	r2, [pc, #456]	@ (8005410 <checkAktifCalisma+0xfa8>)
 8005248:	6013      	str	r3, [r2, #0]
					bekle();
 800524a:	f7fe ff55 	bl	80040f8 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800524e:	4b6f      	ldr	r3, [pc, #444]	@ (800540c <checkAktifCalisma+0xfa4>)
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4b6f      	ldr	r3, [pc, #444]	@ (8005410 <checkAktifCalisma+0xfa8>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2200      	movs	r2, #0
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	61fa      	str	r2, [r7, #28]
 800525e:	4b6d      	ldr	r3, [pc, #436]	@ (8005414 <checkAktifCalisma+0xfac>)
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005268:	4604      	mov	r4, r0
 800526a:	4294      	cmp	r4, r2
 800526c:	4199      	sbcs	r1, r3
 800526e:	d20d      	bcs.n	800528c <checkAktifCalisma+0xe24>
 8005270:	2102      	movs	r1, #2
 8005272:	4860      	ldr	r0, [pc, #384]	@ (80053f4 <checkAktifCalisma+0xf8c>)
 8005274:	f005 fb02 	bl	800a87c <HAL_GPIO_ReadPin>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d006      	beq.n	800528c <checkAktifCalisma+0xe24>
 800527e:	4b60      	ldr	r3, [pc, #384]	@ (8005400 <checkAktifCalisma+0xf98>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	f083 0301 	eor.w	r3, r3, #1
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <checkAktifCalisma+0xe2a>
					kapi2prudhome=0;
 800528c:	4b5e      	ldr	r3, [pc, #376]	@ (8005408 <checkAktifCalisma+0xfa0>)
 800528e:	2200      	movs	r2, #0
 8005290:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005292:	4b56      	ldr	r3, [pc, #344]	@ (80053ec <checkAktifCalisma+0xf84>)
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	1e51      	subs	r1, r2, #1
 800529a:	430b      	orrs	r3, r1
 800529c:	d13c      	bne.n	8005318 <checkAktifCalisma+0xeb0>
 800529e:	4b54      	ldr	r3, [pc, #336]	@ (80053f0 <checkAktifCalisma+0xf88>)
 80052a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a4:	1e51      	subs	r1, r2, #1
 80052a6:	430b      	orrs	r3, r1
 80052a8:	d005      	beq.n	80052b6 <checkAktifCalisma+0xe4e>
 80052aa:	4b51      	ldr	r3, [pc, #324]	@ (80053f0 <checkAktifCalisma+0xf88>)
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	1ed1      	subs	r1, r2, #3
 80052b2:	430b      	orrs	r3, r1
 80052b4:	d130      	bne.n	8005318 <checkAktifCalisma+0xeb0>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80052b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80052ba:	484e      	ldr	r0, [pc, #312]	@ (80053f4 <checkAktifCalisma+0xf8c>)
 80052bc:	f005 fade 	bl	800a87c <HAL_GPIO_ReadPin>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d104      	bne.n	80052d0 <checkAktifCalisma+0xe68>
 80052c6:	4b4c      	ldr	r3, [pc, #304]	@ (80053f8 <checkAktifCalisma+0xf90>)
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	d00d      	beq.n	80052ec <checkAktifCalisma+0xe84>
 80052d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80052d4:	4849      	ldr	r0, [pc, #292]	@ (80053fc <checkAktifCalisma+0xf94>)
 80052d6:	f005 fad1 	bl	800a87c <HAL_GPIO_ReadPin>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d11b      	bne.n	8005318 <checkAktifCalisma+0xeb0>
 80052e0:	4b45      	ldr	r3, [pc, #276]	@ (80053f8 <checkAktifCalisma+0xf90>)
 80052e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e6:	1e51      	subs	r1, r2, #1
 80052e8:	430b      	orrs	r3, r1
 80052ea:	d115      	bne.n	8005318 <checkAktifCalisma+0xeb0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80052ec:	2102      	movs	r1, #2
 80052ee:	4841      	ldr	r0, [pc, #260]	@ (80053f4 <checkAktifCalisma+0xf8c>)
 80052f0:	f005 fac4 	bl	800a87c <HAL_GPIO_ReadPin>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d10e      	bne.n	8005318 <checkAktifCalisma+0xeb0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80052fa:	2104      	movs	r1, #4
 80052fc:	483d      	ldr	r0, [pc, #244]	@ (80053f4 <checkAktifCalisma+0xf8c>)
 80052fe:	f005 fabd 	bl	800a87c <HAL_GPIO_ReadPin>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d107      	bne.n	8005318 <checkAktifCalisma+0xeb0>
						&&(makineStop==1)) {
 8005308:	4b3d      	ldr	r3, [pc, #244]	@ (8005400 <checkAktifCalisma+0xf98>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <checkAktifCalisma+0xeb0>

					kapi2butonkontrol=1;
 8005310:	4b41      	ldr	r3, [pc, #260]	@ (8005418 <checkAktifCalisma+0xfb0>)
 8005312:	2201      	movs	r2, #1
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	e002      	b.n	800531e <checkAktifCalisma+0xeb6>
				} else {
					kapi2butonkontrol=0;
 8005318:	4b3f      	ldr	r3, [pc, #252]	@ (8005418 <checkAktifCalisma+0xfb0>)
 800531a:	2200      	movs	r2, #0
 800531c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800531e:	4b33      	ldr	r3, [pc, #204]	@ (80053ec <checkAktifCalisma+0xf84>)
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	1e91      	subs	r1, r2, #2
 8005326:	430b      	orrs	r3, r1
 8005328:	d121      	bne.n	800536e <checkAktifCalisma+0xf06>
 800532a:	4b31      	ldr	r3, [pc, #196]	@ (80053f0 <checkAktifCalisma+0xf88>)
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	1e51      	subs	r1, r2, #1
 8005332:	430b      	orrs	r3, r1
 8005334:	d005      	beq.n	8005342 <checkAktifCalisma+0xeda>
 8005336:	4b2e      	ldr	r3, [pc, #184]	@ (80053f0 <checkAktifCalisma+0xf88>)
 8005338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533c:	1ed1      	subs	r1, r2, #3
 800533e:	430b      	orrs	r3, r1
 8005340:	d115      	bne.n	800536e <checkAktifCalisma+0xf06>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005342:	2102      	movs	r1, #2
 8005344:	482b      	ldr	r0, [pc, #172]	@ (80053f4 <checkAktifCalisma+0xf8c>)
 8005346:	f005 fa99 	bl	800a87c <HAL_GPIO_ReadPin>
 800534a:	4603      	mov	r3, r0
 800534c:	2b01      	cmp	r3, #1
 800534e:	d10e      	bne.n	800536e <checkAktifCalisma+0xf06>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005350:	2104      	movs	r1, #4
 8005352:	4828      	ldr	r0, [pc, #160]	@ (80053f4 <checkAktifCalisma+0xf8c>)
 8005354:	f005 fa92 	bl	800a87c <HAL_GPIO_ReadPin>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d107      	bne.n	800536e <checkAktifCalisma+0xf06>
						&&(makineStop==1)) {
 800535e:	4b28      	ldr	r3, [pc, #160]	@ (8005400 <checkAktifCalisma+0xf98>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <checkAktifCalisma+0xf06>

					kapi2pizzato=1;
 8005366:	4b2d      	ldr	r3, [pc, #180]	@ (800541c <checkAktifCalisma+0xfb4>)
 8005368:	2201      	movs	r2, #1
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	e002      	b.n	8005374 <checkAktifCalisma+0xf0c>
				} else {
					kapi2pizzato=0;
 800536e:	4b2b      	ldr	r3, [pc, #172]	@ (800541c <checkAktifCalisma+0xfb4>)
 8005370:	2200      	movs	r2, #0
 8005372:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005374:	4b28      	ldr	r3, [pc, #160]	@ (8005418 <checkAktifCalisma+0xfb0>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d107      	bne.n	800538c <checkAktifCalisma+0xf24>
 800537c:	4b27      	ldr	r3, [pc, #156]	@ (800541c <checkAktifCalisma+0xfb4>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d103      	bne.n	800538c <checkAktifCalisma+0xf24>
 8005384:	4b20      	ldr	r3, [pc, #128]	@ (8005408 <checkAktifCalisma+0xfa0>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <checkAktifCalisma+0xf30>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800538c:	2201      	movs	r2, #1
 800538e:	2140      	movs	r1, #64	@ 0x40
 8005390:	4815      	ldr	r0, [pc, #84]	@ (80053e8 <checkAktifCalisma+0xf80>)
 8005392:	f005 fa8a 	bl	800a8aa <HAL_GPIO_WritePin>
 8005396:	e004      	b.n	80053a2 <checkAktifCalisma+0xf3a>
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005398:	2200      	movs	r2, #0
 800539a:	2140      	movs	r1, #64	@ 0x40
 800539c:	4812      	ldr	r0, [pc, #72]	@ (80053e8 <checkAktifCalisma+0xf80>)
 800539e:	f005 fa84 	bl	800a8aa <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 80053a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005420 <checkAktifCalisma+0xfb8>)
 80053a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	d005      	beq.n	80053b8 <checkAktifCalisma+0xf50>
 80053ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005420 <checkAktifCalisma+0xfb8>)
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	1e91      	subs	r1, r2, #2
 80053b4:	430b      	orrs	r3, r1
 80053b6:	d139      	bne.n	800542c <checkAktifCalisma+0xfc4>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80053b8:	2104      	movs	r1, #4
 80053ba:	480e      	ldr	r0, [pc, #56]	@ (80053f4 <checkAktifCalisma+0xf8c>)
 80053bc:	f005 fa5e 	bl	800a87c <HAL_GPIO_ReadPin>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d004      	beq.n	80053d0 <checkAktifCalisma+0xf68>
 80053c6:	4b17      	ldr	r3, [pc, #92]	@ (8005424 <checkAktifCalisma+0xfbc>)
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	d12d      	bne.n	800542c <checkAktifCalisma+0xfc4>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80053d0:	2102      	movs	r1, #2
 80053d2:	4808      	ldr	r0, [pc, #32]	@ (80053f4 <checkAktifCalisma+0xf8c>)
 80053d4:	f005 fa52 	bl	800a87c <HAL_GPIO_ReadPin>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d126      	bne.n	800542c <checkAktifCalisma+0xfc4>

					kapiTablaAcKonumKat1=1;
 80053de:	4b12      	ldr	r3, [pc, #72]	@ (8005428 <checkAktifCalisma+0xfc0>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	701a      	strb	r2, [r3, #0]
 80053e4:	e025      	b.n	8005432 <checkAktifCalisma+0xfca>
 80053e6:	bf00      	nop
 80053e8:	40010800 	.word	0x40010800
 80053ec:	20001108 	.word	0x20001108
 80053f0:	200010f8 	.word	0x200010f8
 80053f4:	40011000 	.word	0x40011000
 80053f8:	20001118 	.word	0x20001118
 80053fc:	40010c00 	.word	0x40010c00
 8005400:	2000122e 	.word	0x2000122e
 8005404:	2000121b 	.word	0x2000121b
 8005408:	20001232 	.word	0x20001232
 800540c:	20001088 	.word	0x20001088
 8005410:	2000108c 	.word	0x2000108c
 8005414:	20001188 	.word	0x20001188
 8005418:	20001233 	.word	0x20001233
 800541c:	20001234 	.word	0x20001234
 8005420:	20001120 	.word	0x20001120
 8005424:	200010e8 	.word	0x200010e8
 8005428:	20001238 	.word	0x20001238
				} else {
					kapiTablaAcKonumKat1=0;
 800542c:	4b98      	ldr	r3, [pc, #608]	@ (8005690 <checkAktifCalisma+0x1228>)
 800542e:	2200      	movs	r2, #0
 8005430:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005432:	4b98      	ldr	r3, [pc, #608]	@ (8005694 <checkAktifCalisma+0x122c>)
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	1e51      	subs	r1, r2, #1
 800543a:	430b      	orrs	r3, r1
 800543c:	d005      	beq.n	800544a <checkAktifCalisma+0xfe2>
 800543e:	4b95      	ldr	r3, [pc, #596]	@ (8005694 <checkAktifCalisma+0x122c>)
 8005440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005444:	1e91      	subs	r1, r2, #2
 8005446:	430b      	orrs	r3, r1
 8005448:	d111      	bne.n	800546e <checkAktifCalisma+0x1006>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800544a:	2102      	movs	r1, #2
 800544c:	4892      	ldr	r0, [pc, #584]	@ (8005698 <checkAktifCalisma+0x1230>)
 800544e:	f005 fa15 	bl	800a87c <HAL_GPIO_ReadPin>
 8005452:	4603      	mov	r3, r0
 8005454:	2b01      	cmp	r3, #1
 8005456:	d10a      	bne.n	800546e <checkAktifCalisma+0x1006>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005458:	2104      	movs	r1, #4
 800545a:	488f      	ldr	r0, [pc, #572]	@ (8005698 <checkAktifCalisma+0x1230>)
 800545c:	f005 fa0e 	bl	800a87c <HAL_GPIO_ReadPin>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d103      	bne.n	800546e <checkAktifCalisma+0x1006>

					kapiTablaAcKonumKat2=1;
 8005466:	4b8d      	ldr	r3, [pc, #564]	@ (800569c <checkAktifCalisma+0x1234>)
 8005468:	2201      	movs	r2, #1
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	e002      	b.n	8005474 <checkAktifCalisma+0x100c>
				} else {
					kapiTablaAcKonumKat2=0;
 800546e:	4b8b      	ldr	r3, [pc, #556]	@ (800569c <checkAktifCalisma+0x1234>)
 8005470:	2200      	movs	r2, #0
 8005472:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8005474:	4b86      	ldr	r3, [pc, #536]	@ (8005690 <checkAktifCalisma+0x1228>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d011      	beq.n	80054a0 <checkAktifCalisma+0x1038>
						&& kapiAcTipi==1
 800547c:	4b88      	ldr	r3, [pc, #544]	@ (80056a0 <checkAktifCalisma+0x1238>)
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	1e51      	subs	r1, r2, #1
 8005484:	430b      	orrs	r3, r1
 8005486:	d10b      	bne.n	80054a0 <checkAktifCalisma+0x1038>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005488:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800548c:	4885      	ldr	r0, [pc, #532]	@ (80056a4 <checkAktifCalisma+0x123c>)
 800548e:	f005 f9f5 	bl	800a87c <HAL_GPIO_ReadPin>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d103      	bne.n	80054a0 <checkAktifCalisma+0x1038>

					kapiactablaesp1=1;
 8005498:	4b83      	ldr	r3, [pc, #524]	@ (80056a8 <checkAktifCalisma+0x1240>)
 800549a:	2201      	movs	r2, #1
 800549c:	701a      	strb	r2, [r3, #0]
 800549e:	e002      	b.n	80054a6 <checkAktifCalisma+0x103e>
				} else {
					kapiactablaesp1=0;
 80054a0:	4b81      	ldr	r3, [pc, #516]	@ (80056a8 <checkAktifCalisma+0x1240>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 80054a6:	4b7d      	ldr	r3, [pc, #500]	@ (800569c <checkAktifCalisma+0x1234>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d011      	beq.n	80054d2 <checkAktifCalisma+0x106a>
						&& kapiAcTipi==1
 80054ae:	4b7c      	ldr	r3, [pc, #496]	@ (80056a0 <checkAktifCalisma+0x1238>)
 80054b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b4:	1e51      	subs	r1, r2, #1
 80054b6:	430b      	orrs	r3, r1
 80054b8:	d10b      	bne.n	80054d2 <checkAktifCalisma+0x106a>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80054ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80054be:	4879      	ldr	r0, [pc, #484]	@ (80056a4 <checkAktifCalisma+0x123c>)
 80054c0:	f005 f9dc 	bl	800a87c <HAL_GPIO_ReadPin>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d103      	bne.n	80054d2 <checkAktifCalisma+0x106a>

					kapiactablaesp2=1;
 80054ca:	4b78      	ldr	r3, [pc, #480]	@ (80056ac <checkAktifCalisma+0x1244>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	701a      	strb	r2, [r3, #0]
 80054d0:	e002      	b.n	80054d8 <checkAktifCalisma+0x1070>
				} else {
					kapiactablaesp2=0;
 80054d2:	4b76      	ldr	r3, [pc, #472]	@ (80056ac <checkAktifCalisma+0x1244>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80054d8:	4b75      	ldr	r3, [pc, #468]	@ (80056b0 <checkAktifCalisma+0x1248>)
 80054da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054de:	4313      	orrs	r3, r2
 80054e0:	d159      	bne.n	8005596 <checkAktifCalisma+0x112e>
 80054e2:	4b74      	ldr	r3, [pc, #464]	@ (80056b4 <checkAktifCalisma+0x124c>)
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	1e91      	subs	r1, r2, #2
 80054ea:	430b      	orrs	r3, r1
 80054ec:	d005      	beq.n	80054fa <checkAktifCalisma+0x1092>
 80054ee:	4b71      	ldr	r3, [pc, #452]	@ (80056b4 <checkAktifCalisma+0x124c>)
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	1ed1      	subs	r1, r2, #3
 80054f6:	430b      	orrs	r3, r1
 80054f8:	d14d      	bne.n	8005596 <checkAktifCalisma+0x112e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80054fa:	4b65      	ldr	r3, [pc, #404]	@ (8005690 <checkAktifCalisma+0x1228>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d103      	bne.n	800550a <checkAktifCalisma+0x10a2>
 8005502:	4b66      	ldr	r3, [pc, #408]	@ (800569c <checkAktifCalisma+0x1234>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d045      	beq.n	8005596 <checkAktifCalisma+0x112e>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 800550a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800550e:	4862      	ldr	r0, [pc, #392]	@ (8005698 <checkAktifCalisma+0x1230>)
 8005510:	f005 f9b4 	bl	800a87c <HAL_GPIO_ReadPin>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d01c      	beq.n	8005554 <checkAktifCalisma+0x10ec>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 800551a:	2180      	movs	r1, #128	@ 0x80
 800551c:	485e      	ldr	r0, [pc, #376]	@ (8005698 <checkAktifCalisma+0x1230>)
 800551e:	f005 f9ad 	bl	800a87c <HAL_GPIO_ReadPin>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d106      	bne.n	8005536 <checkAktifCalisma+0x10ce>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005528:	2104      	movs	r1, #4
 800552a:	485b      	ldr	r0, [pc, #364]	@ (8005698 <checkAktifCalisma+0x1230>)
 800552c:	f005 f9a6 	bl	800a87c <HAL_GPIO_ReadPin>
 8005530:	4603      	mov	r3, r0
 8005532:	2b01      	cmp	r3, #1
 8005534:	d00e      	beq.n	8005554 <checkAktifCalisma+0x10ec>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005536:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800553a:	4857      	ldr	r0, [pc, #348]	@ (8005698 <checkAktifCalisma+0x1230>)
 800553c:	f005 f99e 	bl	800a87c <HAL_GPIO_ReadPin>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10b      	bne.n	800555e <checkAktifCalisma+0x10f6>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005546:	2102      	movs	r1, #2
 8005548:	4853      	ldr	r0, [pc, #332]	@ (8005698 <checkAktifCalisma+0x1230>)
 800554a:	f005 f997 	bl	800a87c <HAL_GPIO_ReadPin>
 800554e:	4603      	mov	r3, r0
 8005550:	2b01      	cmp	r3, #1
 8005552:	d104      	bne.n	800555e <checkAktifCalisma+0x10f6>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005554:	4b52      	ldr	r3, [pc, #328]	@ (80056a0 <checkAktifCalisma+0x1238>)
 8005556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555a:	4313      	orrs	r3, r2
 800555c:	d007      	beq.n	800556e <checkAktifCalisma+0x1106>
 800555e:	4b52      	ldr	r3, [pc, #328]	@ (80056a8 <checkAktifCalisma+0x1240>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d103      	bne.n	800556e <checkAktifCalisma+0x1106>
 8005566:	4b51      	ldr	r3, [pc, #324]	@ (80056ac <checkAktifCalisma+0x1244>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d013      	beq.n	8005596 <checkAktifCalisma+0x112e>
						&&(makineStop==1)
 800556e:	4b52      	ldr	r3, [pc, #328]	@ (80056b8 <checkAktifCalisma+0x1250>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00f      	beq.n	8005596 <checkAktifCalisma+0x112e>
						&&(butonKontrol==0)) {
 8005576:	4b51      	ldr	r3, [pc, #324]	@ (80056bc <checkAktifCalisma+0x1254>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	f083 0301 	eor.w	r3, r3, #1
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d008      	beq.n	8005596 <checkAktifCalisma+0x112e>

					kapiTablaprudhome=1;
 8005584:	4b4e      	ldr	r3, [pc, #312]	@ (80056c0 <checkAktifCalisma+0x1258>)
 8005586:	2201      	movs	r2, #1
 8005588:	701a      	strb	r2, [r3, #0]
					timer = millis;
 800558a:	4b4e      	ldr	r3, [pc, #312]	@ (80056c4 <checkAktifCalisma+0x125c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a4e      	ldr	r2, [pc, #312]	@ (80056c8 <checkAktifCalisma+0x1260>)
 8005590:	6013      	str	r3, [r2, #0]
					bekle();
 8005592:	f7fe fdb1 	bl	80040f8 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005596:	4b4b      	ldr	r3, [pc, #300]	@ (80056c4 <checkAktifCalisma+0x125c>)
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	4b4b      	ldr	r3, [pc, #300]	@ (80056c8 <checkAktifCalisma+0x1260>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2200      	movs	r2, #0
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	617a      	str	r2, [r7, #20]
 80055a6:	4b49      	ldr	r3, [pc, #292]	@ (80056cc <checkAktifCalisma+0x1264>)
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80055b0:	4604      	mov	r4, r0
 80055b2:	4294      	cmp	r4, r2
 80055b4:	4199      	sbcs	r1, r3
 80055b6:	d214      	bcs.n	80055e2 <checkAktifCalisma+0x117a>
 80055b8:	4b35      	ldr	r3, [pc, #212]	@ (8005690 <checkAktifCalisma+0x1228>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	f083 0301 	eor.w	r3, r3, #1
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d006      	beq.n	80055d4 <checkAktifCalisma+0x116c>
 80055c6:	4b35      	ldr	r3, [pc, #212]	@ (800569c <checkAktifCalisma+0x1234>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	f083 0301 	eor.w	r3, r3, #1
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d106      	bne.n	80055e2 <checkAktifCalisma+0x117a>
 80055d4:	4b38      	ldr	r3, [pc, #224]	@ (80056b8 <checkAktifCalisma+0x1250>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	f083 0301 	eor.w	r3, r3, #1
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <checkAktifCalisma+0x1180>
					kapiTablaprudhome=0;
 80055e2:	4b37      	ldr	r3, [pc, #220]	@ (80056c0 <checkAktifCalisma+0x1258>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80055e8:	4b31      	ldr	r3, [pc, #196]	@ (80056b0 <checkAktifCalisma+0x1248>)
 80055ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ee:	1e51      	subs	r1, r2, #1
 80055f0:	430b      	orrs	r3, r1
 80055f2:	d16f      	bne.n	80056d4 <checkAktifCalisma+0x126c>
 80055f4:	4b2f      	ldr	r3, [pc, #188]	@ (80056b4 <checkAktifCalisma+0x124c>)
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	1e91      	subs	r1, r2, #2
 80055fc:	430b      	orrs	r3, r1
 80055fe:	d005      	beq.n	800560c <checkAktifCalisma+0x11a4>
 8005600:	4b2c      	ldr	r3, [pc, #176]	@ (80056b4 <checkAktifCalisma+0x124c>)
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	1ed1      	subs	r1, r2, #3
 8005608:	430b      	orrs	r3, r1
 800560a:	d163      	bne.n	80056d4 <checkAktifCalisma+0x126c>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800560c:	4b20      	ldr	r3, [pc, #128]	@ (8005690 <checkAktifCalisma+0x1228>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <checkAktifCalisma+0x11b4>
 8005614:	4b21      	ldr	r3, [pc, #132]	@ (800569c <checkAktifCalisma+0x1234>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d05b      	beq.n	80056d4 <checkAktifCalisma+0x126c>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 800561c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005620:	481d      	ldr	r0, [pc, #116]	@ (8005698 <checkAktifCalisma+0x1230>)
 8005622:	f005 f92b 	bl	800a87c <HAL_GPIO_ReadPin>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d01c      	beq.n	8005666 <checkAktifCalisma+0x11fe>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 800562c:	2180      	movs	r1, #128	@ 0x80
 800562e:	481a      	ldr	r0, [pc, #104]	@ (8005698 <checkAktifCalisma+0x1230>)
 8005630:	f005 f924 	bl	800a87c <HAL_GPIO_ReadPin>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <checkAktifCalisma+0x11e0>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 800563a:	2104      	movs	r1, #4
 800563c:	4816      	ldr	r0, [pc, #88]	@ (8005698 <checkAktifCalisma+0x1230>)
 800563e:	f005 f91d 	bl	800a87c <HAL_GPIO_ReadPin>
 8005642:	4603      	mov	r3, r0
 8005644:	2b01      	cmp	r3, #1
 8005646:	d00e      	beq.n	8005666 <checkAktifCalisma+0x11fe>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005648:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800564c:	4812      	ldr	r0, [pc, #72]	@ (8005698 <checkAktifCalisma+0x1230>)
 800564e:	f005 f915 	bl	800a87c <HAL_GPIO_ReadPin>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10b      	bne.n	8005670 <checkAktifCalisma+0x1208>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005658:	2102      	movs	r1, #2
 800565a:	480f      	ldr	r0, [pc, #60]	@ (8005698 <checkAktifCalisma+0x1230>)
 800565c:	f005 f90e 	bl	800a87c <HAL_GPIO_ReadPin>
 8005660:	4603      	mov	r3, r0
 8005662:	2b01      	cmp	r3, #1
 8005664:	d104      	bne.n	8005670 <checkAktifCalisma+0x1208>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005666:	4b0e      	ldr	r3, [pc, #56]	@ (80056a0 <checkAktifCalisma+0x1238>)
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	4313      	orrs	r3, r2
 800566e:	d007      	beq.n	8005680 <checkAktifCalisma+0x1218>
 8005670:	4b0d      	ldr	r3, [pc, #52]	@ (80056a8 <checkAktifCalisma+0x1240>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d103      	bne.n	8005680 <checkAktifCalisma+0x1218>
 8005678:	4b0c      	ldr	r3, [pc, #48]	@ (80056ac <checkAktifCalisma+0x1244>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d029      	beq.n	80056d4 <checkAktifCalisma+0x126c>
						&&(makineStop==1)) {
 8005680:	4b0d      	ldr	r3, [pc, #52]	@ (80056b8 <checkAktifCalisma+0x1250>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d025      	beq.n	80056d4 <checkAktifCalisma+0x126c>

					kapiTablabutonkontrol=1;
 8005688:	4b11      	ldr	r3, [pc, #68]	@ (80056d0 <checkAktifCalisma+0x1268>)
 800568a:	2201      	movs	r2, #1
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	e024      	b.n	80056da <checkAktifCalisma+0x1272>
 8005690:	20001238 	.word	0x20001238
 8005694:	20001120 	.word	0x20001120
 8005698:	40011000 	.word	0x40011000
 800569c:	20001239 	.word	0x20001239
 80056a0:	20001118 	.word	0x20001118
 80056a4:	40010c00 	.word	0x40010c00
 80056a8:	20001248 	.word	0x20001248
 80056ac:	20001249 	.word	0x20001249
 80056b0:	20001110 	.word	0x20001110
 80056b4:	200010f8 	.word	0x200010f8
 80056b8:	2000122e 	.word	0x2000122e
 80056bc:	2000121b 	.word	0x2000121b
 80056c0:	20001235 	.word	0x20001235
 80056c4:	20001088 	.word	0x20001088
 80056c8:	2000108c 	.word	0x2000108c
 80056cc:	20001190 	.word	0x20001190
 80056d0:	20001236 	.word	0x20001236
				} else {
					kapiTablabutonkontrol=0;
 80056d4:	4b83      	ldr	r3, [pc, #524]	@ (80058e4 <checkAktifCalisma+0x147c>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80056da:	4b83      	ldr	r3, [pc, #524]	@ (80058e8 <checkAktifCalisma+0x1480>)
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	1e91      	subs	r1, r2, #2
 80056e2:	430b      	orrs	r3, r1
 80056e4:	d11b      	bne.n	800571e <checkAktifCalisma+0x12b6>
 80056e6:	4b81      	ldr	r3, [pc, #516]	@ (80058ec <checkAktifCalisma+0x1484>)
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	1e91      	subs	r1, r2, #2
 80056ee:	430b      	orrs	r3, r1
 80056f0:	d005      	beq.n	80056fe <checkAktifCalisma+0x1296>
 80056f2:	4b7e      	ldr	r3, [pc, #504]	@ (80058ec <checkAktifCalisma+0x1484>)
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	1ed1      	subs	r1, r2, #3
 80056fa:	430b      	orrs	r3, r1
 80056fc:	d10f      	bne.n	800571e <checkAktifCalisma+0x12b6>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80056fe:	4b7c      	ldr	r3, [pc, #496]	@ (80058f0 <checkAktifCalisma+0x1488>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d103      	bne.n	800570e <checkAktifCalisma+0x12a6>
 8005706:	4b7b      	ldr	r3, [pc, #492]	@ (80058f4 <checkAktifCalisma+0x148c>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d007      	beq.n	800571e <checkAktifCalisma+0x12b6>
						&&(makineStop==1)) {
 800570e:	4b7a      	ldr	r3, [pc, #488]	@ (80058f8 <checkAktifCalisma+0x1490>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <checkAktifCalisma+0x12b6>

					kapiTablapizzato=1;
 8005716:	4b79      	ldr	r3, [pc, #484]	@ (80058fc <checkAktifCalisma+0x1494>)
 8005718:	2201      	movs	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	e002      	b.n	8005724 <checkAktifCalisma+0x12bc>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 800571e:	4b77      	ldr	r3, [pc, #476]	@ (80058fc <checkAktifCalisma+0x1494>)
 8005720:	2200      	movs	r2, #0
 8005722:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005724:	4b6f      	ldr	r3, [pc, #444]	@ (80058e4 <checkAktifCalisma+0x147c>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d107      	bne.n	800573c <checkAktifCalisma+0x12d4>
 800572c:	4b74      	ldr	r3, [pc, #464]	@ (8005900 <checkAktifCalisma+0x1498>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d103      	bne.n	800573c <checkAktifCalisma+0x12d4>
 8005734:	4b71      	ldr	r3, [pc, #452]	@ (80058fc <checkAktifCalisma+0x1494>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <checkAktifCalisma+0x12e0>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800573c:	2201      	movs	r2, #1
 800573e:	2120      	movs	r1, #32
 8005740:	4870      	ldr	r0, [pc, #448]	@ (8005904 <checkAktifCalisma+0x149c>)
 8005742:	f005 f8b2 	bl	800a8aa <HAL_GPIO_WritePin>
 8005746:	e004      	b.n	8005752 <checkAktifCalisma+0x12ea>
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005748:	2200      	movs	r2, #0
 800574a:	2120      	movs	r1, #32
 800574c:	486d      	ldr	r0, [pc, #436]	@ (8005904 <checkAktifCalisma+0x149c>)
 800574e:	f005 f8ac 	bl	800a8aa <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005752:	4b6d      	ldr	r3, [pc, #436]	@ (8005908 <checkAktifCalisma+0x14a0>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00f      	beq.n	800577a <checkAktifCalisma+0x1312>
 800575a:	2102      	movs	r1, #2
 800575c:	486b      	ldr	r0, [pc, #428]	@ (800590c <checkAktifCalisma+0x14a4>)
 800575e:	f005 f88d 	bl	800a87c <HAL_GPIO_ReadPin>
 8005762:	4603      	mov	r3, r0
 8005764:	2b01      	cmp	r3, #1
 8005766:	d108      	bne.n	800577a <checkAktifCalisma+0x1312>
 8005768:	4b69      	ldr	r3, [pc, #420]	@ (8005910 <checkAktifCalisma+0x14a8>)
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	4313      	orrs	r3, r2
 8005770:	d103      	bne.n	800577a <checkAktifCalisma+0x1312>
 8005772:	4b61      	ldr	r3, [pc, #388]	@ (80058f8 <checkAktifCalisma+0x1490>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d113      	bne.n	80057a2 <checkAktifCalisma+0x133a>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 800577a:	4b66      	ldr	r3, [pc, #408]	@ (8005914 <checkAktifCalisma+0x14ac>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d02b      	beq.n	80057da <checkAktifCalisma+0x1372>
 8005782:	2104      	movs	r1, #4
 8005784:	4861      	ldr	r0, [pc, #388]	@ (800590c <checkAktifCalisma+0x14a4>)
 8005786:	f005 f879 	bl	800a87c <HAL_GPIO_ReadPin>
 800578a:	4603      	mov	r3, r0
 800578c:	2b01      	cmp	r3, #1
 800578e:	d124      	bne.n	80057da <checkAktifCalisma+0x1372>
 8005790:	4b5f      	ldr	r3, [pc, #380]	@ (8005910 <checkAktifCalisma+0x14a8>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	4313      	orrs	r3, r2
 8005798:	d01f      	beq.n	80057da <checkAktifCalisma+0x1372>
 800579a:	4b57      	ldr	r3, [pc, #348]	@ (80058f8 <checkAktifCalisma+0x1490>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01b      	beq.n	80057da <checkAktifCalisma+0x1372>



					calismaSayisi++;
 80057a2:	4b5d      	ldr	r3, [pc, #372]	@ (8005918 <checkAktifCalisma+0x14b0>)
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	1c51      	adds	r1, r2, #1
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	f143 0300 	adc.w	r3, r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	4b59      	ldr	r3, [pc, #356]	@ (8005918 <checkAktifCalisma+0x14b0>)
 80057b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80057b8:	e9c3 1200 	strd	r1, r2, [r3]
					eepromData[27]=calismaSayisi;
 80057bc:	4b56      	ldr	r3, [pc, #344]	@ (8005918 <checkAktifCalisma+0x14b0>)
 80057be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c2:	4956      	ldr	r1, [pc, #344]	@ (800591c <checkAktifCalisma+0x14b4>)
 80057c4:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8

					hafizaYaz=1;
 80057c8:	4b55      	ldr	r3, [pc, #340]	@ (8005920 <checkAktifCalisma+0x14b8>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 80057ce:	4b4e      	ldr	r3, [pc, #312]	@ (8005908 <checkAktifCalisma+0x14a0>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 80057d4:	4b4f      	ldr	r3, [pc, #316]	@ (8005914 <checkAktifCalisma+0x14ac>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80057da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80057de:	4851      	ldr	r0, [pc, #324]	@ (8005924 <checkAktifCalisma+0x14bc>)
 80057e0:	f005 f84c 	bl	800a87c <HAL_GPIO_ReadPin>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d016      	beq.n	8005818 <checkAktifCalisma+0x13b0>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80057ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80057ee:	484d      	ldr	r0, [pc, #308]	@ (8005924 <checkAktifCalisma+0x14bc>)
 80057f0:	f005 f844 	bl	800a87c <HAL_GPIO_ReadPin>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00e      	beq.n	8005818 <checkAktifCalisma+0x13b0>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80057fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057fe:	4849      	ldr	r0, [pc, #292]	@ (8005924 <checkAktifCalisma+0x14bc>)
 8005800:	f005 f83c 	bl	800a87c <HAL_GPIO_ReadPin>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d006      	beq.n	8005818 <checkAktifCalisma+0x13b0>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800580a:	2140      	movs	r1, #64	@ 0x40
 800580c:	483f      	ldr	r0, [pc, #252]	@ (800590c <checkAktifCalisma+0x14a4>)
 800580e:	f005 f835 	bl	800a87c <HAL_GPIO_ReadPin>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d103      	bne.n	8005820 <checkAktifCalisma+0x13b8>

					startBasili=1;
 8005818:	4b43      	ldr	r3, [pc, #268]	@ (8005928 <checkAktifCalisma+0x14c0>)
 800581a:	2201      	movs	r2, #1
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	e002      	b.n	8005826 <checkAktifCalisma+0x13be>
				} else {
					startBasili=0;
 8005820:	4b41      	ldr	r3, [pc, #260]	@ (8005928 <checkAktifCalisma+0x14c0>)
 8005822:	2200      	movs	r2, #0
 8005824:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005826:	4b40      	ldr	r3, [pc, #256]	@ (8005928 <checkAktifCalisma+0x14c0>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d014      	beq.n	8005858 <checkAktifCalisma+0x13f0>
 800582e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005832:	483c      	ldr	r0, [pc, #240]	@ (8005924 <checkAktifCalisma+0x14bc>)
 8005834:	f005 f822 	bl	800a87c <HAL_GPIO_ReadPin>
 8005838:	4603      	mov	r3, r0
 800583a:	2b01      	cmp	r3, #1
 800583c:	d10c      	bne.n	8005858 <checkAktifCalisma+0x13f0>

					hataVar=1;
 800583e:	4b3b      	ldr	r3, [pc, #236]	@ (800592c <checkAktifCalisma+0x14c4>)
 8005840:	2201      	movs	r2, #1
 8005842:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8005844:	2001      	movs	r0, #1
 8005846:	f7fb f8b3 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(1);
 800584a:	2001      	movs	r0, #1
 800584c:	f7fb f84a 	bl	80008e4 <hata2EEPROM>
					acilstophatasi=1;
 8005850:	4b37      	ldr	r3, [pc, #220]	@ (8005930 <checkAktifCalisma+0x14c8>)
 8005852:	2201      	movs	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	e018      	b.n	800588a <checkAktifCalisma+0x1422>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005858:	4b35      	ldr	r3, [pc, #212]	@ (8005930 <checkAktifCalisma+0x14c8>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d014      	beq.n	800588a <checkAktifCalisma+0x1422>
 8005860:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005864:	482f      	ldr	r0, [pc, #188]	@ (8005924 <checkAktifCalisma+0x14bc>)
 8005866:	f005 f809 	bl	800a87c <HAL_GPIO_ReadPin>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10c      	bne.n	800588a <checkAktifCalisma+0x1422>
 8005870:	4b2d      	ldr	r3, [pc, #180]	@ (8005928 <checkAktifCalisma+0x14c0>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	f083 0301 	eor.w	r3, r3, #1
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d005      	beq.n	800588a <checkAktifCalisma+0x1422>
					acilstophatasi=0;
 800587e:	4b2c      	ldr	r3, [pc, #176]	@ (8005930 <checkAktifCalisma+0x14c8>)
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 8005884:	2001      	movs	r0, #1
 8005886:	f7fe fbcd 	bl	8004024 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 800588a:	4b2a      	ldr	r3, [pc, #168]	@ (8005934 <checkAktifCalisma+0x14cc>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	f083 0301 	eor.w	r3, r3, #1
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d055      	beq.n	8005944 <checkAktifCalisma+0x14dc>
 8005898:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800589c:	4821      	ldr	r0, [pc, #132]	@ (8005924 <checkAktifCalisma+0x14bc>)
 800589e:	f004 ffed 	bl	800a87c <HAL_GPIO_ReadPin>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <checkAktifCalisma+0x1448>
 80058a8:	4b23      	ldr	r3, [pc, #140]	@ (8005938 <checkAktifCalisma+0x14d0>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d049      	beq.n	8005944 <checkAktifCalisma+0x14dc>
 80058b0:	4b22      	ldr	r3, [pc, #136]	@ (800593c <checkAktifCalisma+0x14d4>)
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	1e51      	subs	r1, r2, #1
 80058b8:	430b      	orrs	r3, r1
 80058ba:	d143      	bne.n	8005944 <checkAktifCalisma+0x14dc>
 80058bc:	4b20      	ldr	r3, [pc, #128]	@ (8005940 <checkAktifCalisma+0x14d8>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	f083 0301 	eor.w	r3, r3, #1
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d03c      	beq.n	8005944 <checkAktifCalisma+0x14dc>
					hataVar=1;
 80058ca:	4b18      	ldr	r3, [pc, #96]	@ (800592c <checkAktifCalisma+0x14c4>)
 80058cc:	2201      	movs	r2, #1
 80058ce:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 80058d0:	2002      	movs	r0, #2
 80058d2:	f7fb f86d 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(2);
 80058d6:	2002      	movs	r0, #2
 80058d8:	f7fb f804 	bl	80008e4 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 80058dc:	4b18      	ldr	r3, [pc, #96]	@ (8005940 <checkAktifCalisma+0x14d8>)
 80058de:	2201      	movs	r2, #1
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	e047      	b.n	8005974 <checkAktifCalisma+0x150c>
 80058e4:	20001236 	.word	0x20001236
 80058e8:	20001110 	.word	0x20001110
 80058ec:	200010f8 	.word	0x200010f8
 80058f0:	20001238 	.word	0x20001238
 80058f4:	20001239 	.word	0x20001239
 80058f8:	2000122e 	.word	0x2000122e
 80058fc:	20001237 	.word	0x20001237
 8005900:	20001235 	.word	0x20001235
 8005904:	40010800 	.word	0x40010800
 8005908:	2000122b 	.word	0x2000122b
 800590c:	40011000 	.word	0x40011000
 8005910:	200010e8 	.word	0x200010e8
 8005914:	2000122c 	.word	0x2000122c
 8005918:	200010a8 	.word	0x200010a8
 800591c:	20000d08 	.word	0x20000d08
 8005920:	20001218 	.word	0x20001218
 8005924:	40010c00 	.word	0x40010c00
 8005928:	2000123a 	.word	0x2000123a
 800592c:	20001241 	.word	0x20001241
 8005930:	2000123c 	.word	0x2000123c
 8005934:	20001243 	.word	0x20001243
 8005938:	2000124d 	.word	0x2000124d
 800593c:	200010d8 	.word	0x200010d8
 8005940:	2000123d 	.word	0x2000123d
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005944:	4b6d      	ldr	r3, [pc, #436]	@ (8005afc <checkAktifCalisma+0x1694>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d013      	beq.n	8005974 <checkAktifCalisma+0x150c>
 800594c:	4b6c      	ldr	r3, [pc, #432]	@ (8005b00 <checkAktifCalisma+0x1698>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00f      	beq.n	8005974 <checkAktifCalisma+0x150c>
 8005954:	4b6b      	ldr	r3, [pc, #428]	@ (8005b04 <checkAktifCalisma+0x169c>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	f083 0301 	eor.w	r3, r3, #1
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d008      	beq.n	8005974 <checkAktifCalisma+0x150c>
					emniyetCercevesihatasi=0;
 8005962:	4b66      	ldr	r3, [pc, #408]	@ (8005afc <checkAktifCalisma+0x1694>)
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8005968:	4b67      	ldr	r3, [pc, #412]	@ (8005b08 <checkAktifCalisma+0x16a0>)
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 800596e:	2002      	movs	r0, #2
 8005970:	f7fe fb58 	bl	8004024 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 8005974:	4b65      	ldr	r3, [pc, #404]	@ (8005b0c <checkAktifCalisma+0x16a4>)
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	4313      	orrs	r3, r2
 800597c:	d125      	bne.n	80059ca <checkAktifCalisma+0x1562>
 800597e:	4b64      	ldr	r3, [pc, #400]	@ (8005b10 <checkAktifCalisma+0x16a8>)
 8005980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005984:	1e51      	subs	r1, r2, #1
 8005986:	430b      	orrs	r3, r1
 8005988:	d11f      	bne.n	80059ca <checkAktifCalisma+0x1562>
 800598a:	4b62      	ldr	r3, [pc, #392]	@ (8005b14 <checkAktifCalisma+0x16ac>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d01b      	beq.n	80059ca <checkAktifCalisma+0x1562>
 8005992:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005996:	4860      	ldr	r0, [pc, #384]	@ (8005b18 <checkAktifCalisma+0x16b0>)
 8005998:	f004 ff70 	bl	800a87c <HAL_GPIO_ReadPin>
 800599c:	4603      	mov	r3, r0
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d113      	bne.n	80059ca <checkAktifCalisma+0x1562>
 80059a2:	4b5e      	ldr	r3, [pc, #376]	@ (8005b1c <checkAktifCalisma+0x16b4>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	f083 0301 	eor.w	r3, r3, #1
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00c      	beq.n	80059ca <checkAktifCalisma+0x1562>
					hataVar=1;
 80059b0:	4b5b      	ldr	r3, [pc, #364]	@ (8005b20 <checkAktifCalisma+0x16b8>)
 80059b2:	2201      	movs	r2, #1
 80059b4:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 80059b6:	2003      	movs	r0, #3
 80059b8:	f7fa fffa 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(3);
 80059bc:	2003      	movs	r0, #3
 80059be:	f7fa ff91 	bl	80008e4 <hata2EEPROM>
					basinchatasi=1;
 80059c2:	4b56      	ldr	r3, [pc, #344]	@ (8005b1c <checkAktifCalisma+0x16b4>)
 80059c4:	2201      	movs	r2, #1
 80059c6:	701a      	strb	r2, [r3, #0]
 80059c8:	e017      	b.n	80059fa <checkAktifCalisma+0x1592>
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80059ca:	4b54      	ldr	r3, [pc, #336]	@ (8005b1c <checkAktifCalisma+0x16b4>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d013      	beq.n	80059fa <checkAktifCalisma+0x1592>
 80059d2:	4b4e      	ldr	r3, [pc, #312]	@ (8005b0c <checkAktifCalisma+0x16a4>)
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	1e51      	subs	r1, r2, #1
 80059da:	430b      	orrs	r3, r1
 80059dc:	d10d      	bne.n	80059fa <checkAktifCalisma+0x1592>
 80059de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80059e2:	4850      	ldr	r0, [pc, #320]	@ (8005b24 <checkAktifCalisma+0x16bc>)
 80059e4:	f004 ff4a 	bl	800a87c <HAL_GPIO_ReadPin>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d105      	bne.n	80059fa <checkAktifCalisma+0x1592>
					basinchatasi=0;
 80059ee:	4b4b      	ldr	r3, [pc, #300]	@ (8005b1c <checkAktifCalisma+0x16b4>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 80059f4:	2003      	movs	r0, #3
 80059f6:	f7fe fb15 	bl	8004024 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 80059fa:	4b4b      	ldr	r3, [pc, #300]	@ (8005b28 <checkAktifCalisma+0x16c0>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d103      	bne.n	8005a0a <checkAktifCalisma+0x15a2>
 8005a02:	4b4a      	ldr	r3, [pc, #296]	@ (8005b2c <checkAktifCalisma+0x16c4>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d027      	beq.n	8005a5a <checkAktifCalisma+0x15f2>
 8005a0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a0e:	4848      	ldr	r0, [pc, #288]	@ (8005b30 <checkAktifCalisma+0x16c8>)
 8005a10:	f004 ff34 	bl	800a87c <HAL_GPIO_ReadPin>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d11f      	bne.n	8005a5a <checkAktifCalisma+0x15f2>
 8005a1a:	4b46      	ldr	r3, [pc, #280]	@ (8005b34 <checkAktifCalisma+0x16cc>)
 8005a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a20:	1e51      	subs	r1, r2, #1
 8005a22:	430b      	orrs	r3, r1
 8005a24:	d005      	beq.n	8005a32 <checkAktifCalisma+0x15ca>
 8005a26:	4b43      	ldr	r3, [pc, #268]	@ (8005b34 <checkAktifCalisma+0x16cc>)
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	1ed1      	subs	r1, r2, #3
 8005a2e:	430b      	orrs	r3, r1
 8005a30:	d113      	bne.n	8005a5a <checkAktifCalisma+0x15f2>
 8005a32:	4b41      	ldr	r3, [pc, #260]	@ (8005b38 <checkAktifCalisma+0x16d0>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	f083 0301 	eor.w	r3, r3, #1
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00c      	beq.n	8005a5a <checkAktifCalisma+0x15f2>
					hataVar=1;
 8005a40:	4b37      	ldr	r3, [pc, #220]	@ (8005b20 <checkAktifCalisma+0x16b8>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8005a46:	2004      	movs	r0, #4
 8005a48:	f7fa ffb2 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(4);
 8005a4c:	2004      	movs	r0, #4
 8005a4e:	f7fa ff49 	bl	80008e4 <hata2EEPROM>
					katkapisivicihatasi=1;
 8005a52:	4b39      	ldr	r3, [pc, #228]	@ (8005b38 <checkAktifCalisma+0x16d0>)
 8005a54:	2201      	movs	r2, #1
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	e01f      	b.n	8005a9a <checkAktifCalisma+0x1632>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005a5a:	4b37      	ldr	r3, [pc, #220]	@ (8005b38 <checkAktifCalisma+0x16d0>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d01b      	beq.n	8005a9a <checkAktifCalisma+0x1632>
 8005a62:	4b36      	ldr	r3, [pc, #216]	@ (8005b3c <checkAktifCalisma+0x16d4>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d017      	beq.n	8005a9a <checkAktifCalisma+0x1632>
 8005a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b28 <checkAktifCalisma+0x16c0>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	f083 0301 	eor.w	r3, r3, #1
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d010      	beq.n	8005a9a <checkAktifCalisma+0x1632>
 8005a78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a7c:	482c      	ldr	r0, [pc, #176]	@ (8005b30 <checkAktifCalisma+0x16c8>)
 8005a7e:	f004 fefd 	bl	800a87c <HAL_GPIO_ReadPin>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d108      	bne.n	8005a9a <checkAktifCalisma+0x1632>

					katkapisivicihatasi=0;
 8005a88:	4b2b      	ldr	r3, [pc, #172]	@ (8005b38 <checkAktifCalisma+0x16d0>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8005a8e:	4b27      	ldr	r3, [pc, #156]	@ (8005b2c <checkAktifCalisma+0x16c4>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8005a94:	2004      	movs	r0, #4
 8005a96:	f7fe fac5 	bl	8004024 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8005a9a:	4b23      	ldr	r3, [pc, #140]	@ (8005b28 <checkAktifCalisma+0x16c0>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d103      	bne.n	8005aaa <checkAktifCalisma+0x1642>
 8005aa2:	4b27      	ldr	r3, [pc, #156]	@ (8005b40 <checkAktifCalisma+0x16d8>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d04e      	beq.n	8005b48 <checkAktifCalisma+0x16e0>
 8005aaa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005aae:	4820      	ldr	r0, [pc, #128]	@ (8005b30 <checkAktifCalisma+0x16c8>)
 8005ab0:	f004 fee4 	bl	800a87c <HAL_GPIO_ReadPin>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d146      	bne.n	8005b48 <checkAktifCalisma+0x16e0>
 8005aba:	4b1e      	ldr	r3, [pc, #120]	@ (8005b34 <checkAktifCalisma+0x16cc>)
 8005abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac0:	1e51      	subs	r1, r2, #1
 8005ac2:	430b      	orrs	r3, r1
 8005ac4:	d005      	beq.n	8005ad2 <checkAktifCalisma+0x166a>
 8005ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8005b34 <checkAktifCalisma+0x16cc>)
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	1ed1      	subs	r1, r2, #3
 8005ace:	430b      	orrs	r3, r1
 8005ad0:	d13a      	bne.n	8005b48 <checkAktifCalisma+0x16e0>
 8005ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8005b44 <checkAktifCalisma+0x16dc>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	f083 0301 	eor.w	r3, r3, #1
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d033      	beq.n	8005b48 <checkAktifCalisma+0x16e0>

					hataVar=1;
 8005ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8005b20 <checkAktifCalisma+0x16b8>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8005ae6:	2005      	movs	r0, #5
 8005ae8:	f7fa ff62 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(5);
 8005aec:	2005      	movs	r0, #5
 8005aee:	f7fa fef9 	bl	80008e4 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8005af2:	4b14      	ldr	r3, [pc, #80]	@ (8005b44 <checkAktifCalisma+0x16dc>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	701a      	strb	r2, [r3, #0]
 8005af8:	e04a      	b.n	8005b90 <checkAktifCalisma+0x1728>
 8005afa:	bf00      	nop
 8005afc:	2000123d 	.word	0x2000123d
 8005b00:	20001243 	.word	0x20001243
 8005b04:	20001224 	.word	0x20001224
 8005b08:	2000124d 	.word	0x2000124d
 8005b0c:	200010d0 	.word	0x200010d0
 8005b10:	200010f0 	.word	0x200010f0
 8005b14:	20001240 	.word	0x20001240
 8005b18:	40011000 	.word	0x40011000
 8005b1c:	2000124a 	.word	0x2000124a
 8005b20:	20001241 	.word	0x20001241
 8005b24:	40010c00 	.word	0x40010c00
 8005b28:	2000123a 	.word	0x2000123a
 8005b2c:	2000124e 	.word	0x2000124e
 8005b30:	40010800 	.word	0x40010800
 8005b34:	200010f8 	.word	0x200010f8
 8005b38:	2000124b 	.word	0x2000124b
 8005b3c:	2000122e 	.word	0x2000122e
 8005b40:	2000124f 	.word	0x2000124f
 8005b44:	2000124c 	.word	0x2000124c
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005b48:	4b7f      	ldr	r3, [pc, #508]	@ (8005d48 <checkAktifCalisma+0x18e0>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01f      	beq.n	8005b90 <checkAktifCalisma+0x1728>
 8005b50:	4b7e      	ldr	r3, [pc, #504]	@ (8005d4c <checkAktifCalisma+0x18e4>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01b      	beq.n	8005b90 <checkAktifCalisma+0x1728>
 8005b58:	4b7d      	ldr	r3, [pc, #500]	@ (8005d50 <checkAktifCalisma+0x18e8>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	f083 0301 	eor.w	r3, r3, #1
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d014      	beq.n	8005b90 <checkAktifCalisma+0x1728>
 8005b66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005b6a:	487a      	ldr	r0, [pc, #488]	@ (8005d54 <checkAktifCalisma+0x18ec>)
 8005b6c:	f004 fe86 	bl	800a87c <HAL_GPIO_ReadPin>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10c      	bne.n	8005b90 <checkAktifCalisma+0x1728>
 8005b76:	4b75      	ldr	r3, [pc, #468]	@ (8005d4c <checkAktifCalisma+0x18e4>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d008      	beq.n	8005b90 <checkAktifCalisma+0x1728>
					tablakapisivicihatasi=0;
 8005b7e:	4b72      	ldr	r3, [pc, #456]	@ (8005d48 <checkAktifCalisma+0x18e0>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8005b84:	4b74      	ldr	r3, [pc, #464]	@ (8005d58 <checkAktifCalisma+0x18f0>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8005b8a:	2005      	movs	r0, #5
 8005b8c:	f7fe fa4a 	bl	8004024 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8005b90:	4b72      	ldr	r3, [pc, #456]	@ (8005d5c <checkAktifCalisma+0x18f4>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d107      	bne.n	8005ba8 <checkAktifCalisma+0x1740>
 8005b98:	4b71      	ldr	r3, [pc, #452]	@ (8005d60 <checkAktifCalisma+0x18f8>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d103      	bne.n	8005ba8 <checkAktifCalisma+0x1740>
 8005ba0:	4b70      	ldr	r3, [pc, #448]	@ (8005d64 <checkAktifCalisma+0x18fc>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d023      	beq.n	8005bf0 <checkAktifCalisma+0x1788>
 8005ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8005d68 <checkAktifCalisma+0x1900>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	f083 0301 	eor.w	r3, r3, #1
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d01c      	beq.n	8005bf0 <checkAktifCalisma+0x1788>
				    if(millis-timer4>=makineCalismaTmr) {
 8005bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8005d6c <checkAktifCalisma+0x1904>)
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4b6d      	ldr	r3, [pc, #436]	@ (8005d70 <checkAktifCalisma+0x1908>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	607a      	str	r2, [r7, #4]
 8005bc6:	4b6b      	ldr	r3, [pc, #428]	@ (8005d74 <checkAktifCalisma+0x190c>)
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	4294      	cmp	r4, r2
 8005bd4:	4199      	sbcs	r1, r3
 8005bd6:	d30b      	bcc.n	8005bf0 <checkAktifCalisma+0x1788>
					  	hataVar=1;
 8005bd8:	4b67      	ldr	r3, [pc, #412]	@ (8005d78 <checkAktifCalisma+0x1910>)
 8005bda:	2201      	movs	r2, #1
 8005bdc:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 8005bde:	2006      	movs	r0, #6
 8005be0:	f7fa fee6 	bl	80009b0 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8005be4:	2006      	movs	r0, #6
 8005be6:	f7fa fe7d 	bl	80008e4 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8005bea:	4b5f      	ldr	r3, [pc, #380]	@ (8005d68 <checkAktifCalisma+0x1900>)
 8005bec:	2201      	movs	r2, #1
 8005bee:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005bf0:	4b5d      	ldr	r3, [pc, #372]	@ (8005d68 <checkAktifCalisma+0x1900>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d013      	beq.n	8005c20 <checkAktifCalisma+0x17b8>
 8005bf8:	2108      	movs	r1, #8
 8005bfa:	4856      	ldr	r0, [pc, #344]	@ (8005d54 <checkAktifCalisma+0x18ec>)
 8005bfc:	f004 fe3e 	bl	800a87c <HAL_GPIO_ReadPin>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00c      	beq.n	8005c20 <checkAktifCalisma+0x17b8>
 8005c06:	4b52      	ldr	r3, [pc, #328]	@ (8005d50 <checkAktifCalisma+0x18e8>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	f083 0301 	eor.w	r3, r3, #1
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <checkAktifCalisma+0x17b8>
					maksimumcalismahatasi=0;
 8005c14:	4b54      	ldr	r3, [pc, #336]	@ (8005d68 <checkAktifCalisma+0x1900>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8005c1a:	2006      	movs	r0, #6
 8005c1c:	f7fe fa02 	bl	8004024 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005c20:	4b56      	ldr	r3, [pc, #344]	@ (8005d7c <checkAktifCalisma+0x1914>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10b      	bne.n	8005c40 <checkAktifCalisma+0x17d8>
 8005c28:	4b4d      	ldr	r3, [pc, #308]	@ (8005d60 <checkAktifCalisma+0x18f8>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d107      	bne.n	8005c40 <checkAktifCalisma+0x17d8>
 8005c30:	4b53      	ldr	r3, [pc, #332]	@ (8005d80 <checkAktifCalisma+0x1918>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d103      	bne.n	8005c40 <checkAktifCalisma+0x17d8>
 8005c38:	4b4a      	ldr	r3, [pc, #296]	@ (8005d64 <checkAktifCalisma+0x18fc>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d009      	beq.n	8005c54 <checkAktifCalisma+0x17ec>
					makineCalisiyor=0;
 8005c40:	4b50      	ldr	r3, [pc, #320]	@ (8005d84 <checkAktifCalisma+0x191c>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8005c46:	4b50      	ldr	r3, [pc, #320]	@ (8005d88 <checkAktifCalisma+0x1920>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8005c4c:	4b42      	ldr	r3, [pc, #264]	@ (8005d58 <checkAktifCalisma+0x18f0>)
 8005c4e:	2201      	movs	r2, #1
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	e006      	b.n	8005c62 <checkAktifCalisma+0x17fa>
				} else {
					makineCalisiyor=1;
 8005c54:	4b4b      	ldr	r3, [pc, #300]	@ (8005d84 <checkAktifCalisma+0x191c>)
 8005c56:	2201      	movs	r2, #1
 8005c58:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8005c5a:	4b44      	ldr	r3, [pc, #272]	@ (8005d6c <checkAktifCalisma+0x1904>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a44      	ldr	r2, [pc, #272]	@ (8005d70 <checkAktifCalisma+0x1908>)
 8005c60:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8005c62:	4b45      	ldr	r3, [pc, #276]	@ (8005d78 <checkAktifCalisma+0x1910>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d02f      	beq.n	8005cca <checkAktifCalisma+0x1862>
 8005c6a:	4b48      	ldr	r3, [pc, #288]	@ (8005d8c <checkAktifCalisma+0x1924>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	f083 0301 	eor.w	r3, r3, #1
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d028      	beq.n	8005cca <checkAktifCalisma+0x1862>
 8005c78:	4b45      	ldr	r3, [pc, #276]	@ (8005d90 <checkAktifCalisma+0x1928>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	f083 0301 	eor.w	r3, r3, #1
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d021      	beq.n	8005cca <checkAktifCalisma+0x1862>
 8005c86:	4b43      	ldr	r3, [pc, #268]	@ (8005d94 <checkAktifCalisma+0x192c>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	f083 0301 	eor.w	r3, r3, #1
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d01a      	beq.n	8005cca <checkAktifCalisma+0x1862>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005c94:	4b40      	ldr	r3, [pc, #256]	@ (8005d98 <checkAktifCalisma+0x1930>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	f083 0301 	eor.w	r3, r3, #1
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d013      	beq.n	8005cca <checkAktifCalisma+0x1862>
 8005ca2:	4b29      	ldr	r3, [pc, #164]	@ (8005d48 <checkAktifCalisma+0x18e0>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	f083 0301 	eor.w	r3, r3, #1
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00c      	beq.n	8005cca <checkAktifCalisma+0x1862>
 8005cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8005d68 <checkAktifCalisma+0x1900>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	f083 0301 	eor.w	r3, r3, #1
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <checkAktifCalisma+0x1862>

					hataVar=0;
 8005cbe:	4b2e      	ldr	r3, [pc, #184]	@ (8005d78 <checkAktifCalisma+0x1910>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8005cc4:	2007      	movs	r0, #7
 8005cc6:	f7fe f9ad 	bl	8004024 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8005cca:	4b2b      	ldr	r3, [pc, #172]	@ (8005d78 <checkAktifCalisma+0x1910>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d02a      	beq.n	8005d28 <checkAktifCalisma+0x18c0>
 8005cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8005d8c <checkAktifCalisma+0x1924>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	f083 0301 	eor.w	r3, r3, #1
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d023      	beq.n	8005d28 <checkAktifCalisma+0x18c0>
 8005ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8005d90 <checkAktifCalisma+0x1928>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01f      	beq.n	8005d28 <checkAktifCalisma+0x18c0>
 8005ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8005d94 <checkAktifCalisma+0x192c>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	f083 0301 	eor.w	r3, r3, #1
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d018      	beq.n	8005d28 <checkAktifCalisma+0x18c0>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8005cf6:	4b28      	ldr	r3, [pc, #160]	@ (8005d98 <checkAktifCalisma+0x1930>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	f083 0301 	eor.w	r3, r3, #1
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d011      	beq.n	8005d28 <checkAktifCalisma+0x18c0>
 8005d04:	4b10      	ldr	r3, [pc, #64]	@ (8005d48 <checkAktifCalisma+0x18e0>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	f083 0301 	eor.w	r3, r3, #1
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <checkAktifCalisma+0x18c0>
 8005d12:	4b15      	ldr	r3, [pc, #84]	@ (8005d68 <checkAktifCalisma+0x1900>)
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	f083 0301 	eor.w	r3, r3, #1
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <checkAktifCalisma+0x18c0>
				{
					EmnCerHataMakYukariCalis=1;
 8005d20:	4b1e      	ldr	r3, [pc, #120]	@ (8005d9c <checkAktifCalisma+0x1934>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 8005d26:	e009      	b.n	8005d3c <checkAktifCalisma+0x18d4>
				else if(emniyetCercevesihatasi==0)
 8005d28:	4b19      	ldr	r3, [pc, #100]	@ (8005d90 <checkAktifCalisma+0x1928>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	f083 0301 	eor.w	r3, r3, #1
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <checkAktifCalisma+0x18d4>
					EmnCerHataMakYukariCalis=0;
 8005d36:	4b19      	ldr	r3, [pc, #100]	@ (8005d9c <checkAktifCalisma+0x1934>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	701a      	strb	r2, [r3, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	3730      	adds	r7, #48	@ 0x30
 8005d40:	46bd      	mov	sp, r7
 8005d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d46:	bf00      	nop
 8005d48:	2000124c 	.word	0x2000124c
 8005d4c:	2000122e 	.word	0x2000122e
 8005d50:	2000123a 	.word	0x2000123a
 8005d54:	40010800 	.word	0x40010800
 8005d58:	2000124f 	.word	0x2000124f
 8005d5c:	20001240 	.word	0x20001240
 8005d60:	20001224 	.word	0x20001224
 8005d64:	20001223 	.word	0x20001223
 8005d68:	2000123b 	.word	0x2000123b
 8005d6c:	20001088 	.word	0x20001088
 8005d70:	2000109c 	.word	0x2000109c
 8005d74:	20001178 	.word	0x20001178
 8005d78:	20001241 	.word	0x20001241
 8005d7c:	20001221 	.word	0x20001221
 8005d80:	20001222 	.word	0x20001222
 8005d84:	20001242 	.word	0x20001242
 8005d88:	2000124e 	.word	0x2000124e
 8005d8c:	2000123c 	.word	0x2000123c
 8005d90:	2000123d 	.word	0x2000123d
 8005d94:	2000124a 	.word	0x2000124a
 8005d98:	2000124b 	.word	0x2000124b
 8005d9c:	20001250 	.word	0x20001250

08005da0 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8005da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005da4:	b08e      	sub	sp, #56	@ 0x38
 8005da6:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8005da8:	4b6b      	ldr	r3, [pc, #428]	@ (8005f58 <checkDemoModCalisma+0x1b8>)
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f041 8460 	bne.w	8007674 <checkDemoModCalisma+0x18d4>
 8005db4:	4b69      	ldr	r3, [pc, #420]	@ (8005f5c <checkDemoModCalisma+0x1bc>)
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f041 845a 	bne.w	8007674 <checkDemoModCalisma+0x18d4>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8005dc0:	4b67      	ldr	r3, [pc, #412]	@ (8005f60 <checkDemoModCalisma+0x1c0>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d11e      	bne.n	8005e06 <checkDemoModCalisma+0x66>
 8005dc8:	4b66      	ldr	r3, [pc, #408]	@ (8005f64 <checkDemoModCalisma+0x1c4>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d11a      	bne.n	8005e06 <checkDemoModCalisma+0x66>
 8005dd0:	4b65      	ldr	r3, [pc, #404]	@ (8005f68 <checkDemoModCalisma+0x1c8>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00c      	beq.n	8005df2 <checkDemoModCalisma+0x52>
 8005dd8:	4b64      	ldr	r3, [pc, #400]	@ (8005f6c <checkDemoModCalisma+0x1cc>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	f083 0301 	eor.w	r3, r3, #1
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d005      	beq.n	8005df2 <checkDemoModCalisma+0x52>
 8005de6:	4b62      	ldr	r3, [pc, #392]	@ (8005f70 <checkDemoModCalisma+0x1d0>)
 8005de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dec:	1e51      	subs	r1, r2, #1
 8005dee:	430b      	orrs	r3, r1
 8005df0:	d009      	beq.n	8005e06 <checkDemoModCalisma+0x66>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8005df2:	4b60      	ldr	r3, [pc, #384]	@ (8005f74 <checkDemoModCalisma+0x1d4>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d01e      	beq.n	8005e38 <checkDemoModCalisma+0x98>
 8005dfa:	4b5f      	ldr	r3, [pc, #380]	@ (8005f78 <checkDemoModCalisma+0x1d8>)
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	1e51      	subs	r1, r2, #1
 8005e02:	430b      	orrs	r3, r1
 8005e04:	d118      	bne.n	8005e38 <checkDemoModCalisma+0x98>
 8005e06:	4b5d      	ldr	r3, [pc, #372]	@ (8005f7c <checkDemoModCalisma+0x1dc>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d103      	bne.n	8005e16 <checkDemoModCalisma+0x76>
 8005e0e:	4b5c      	ldr	r3, [pc, #368]	@ (8005f80 <checkDemoModCalisma+0x1e0>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d010      	beq.n	8005e38 <checkDemoModCalisma+0x98>
 8005e16:	4b5b      	ldr	r3, [pc, #364]	@ (8005f84 <checkDemoModCalisma+0x1e4>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00c      	beq.n	8005e38 <checkDemoModCalisma+0x98>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e24:	4858      	ldr	r0, [pc, #352]	@ (8005f88 <checkDemoModCalisma+0x1e8>)
 8005e26:	f004 fd40 	bl	800a8aa <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8005e2a:	4a58      	ldr	r2, [pc, #352]	@ (8005f8c <checkDemoModCalisma+0x1ec>)
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	7013      	strb	r3, [r2, #0]
					CalismaSayisiYukari=1;
 8005e30:	4a57      	ldr	r2, [pc, #348]	@ (8005f90 <checkDemoModCalisma+0x1f0>)
 8005e32:	2301      	movs	r3, #1
 8005e34:	7013      	strb	r3, [r2, #0]
 8005e36:	e008      	b.n	8005e4a <checkDemoModCalisma+0xaa>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e3e:	4852      	ldr	r0, [pc, #328]	@ (8005f88 <checkDemoModCalisma+0x1e8>)
 8005e40:	f004 fd33 	bl	800a8aa <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8005e44:	4a51      	ldr	r2, [pc, #324]	@ (8005f8c <checkDemoModCalisma+0x1ec>)
 8005e46:	2300      	movs	r3, #0
 8005e48:	7013      	strb	r3, [r2, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8005e4a:	4b44      	ldr	r3, [pc, #272]	@ (8005f5c <checkDemoModCalisma+0x1bc>)
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	d165      	bne.n	8005f20 <checkDemoModCalisma+0x180>
 8005e54:	4b4a      	ldr	r3, [pc, #296]	@ (8005f80 <checkDemoModCalisma+0x1e0>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d103      	bne.n	8005e64 <checkDemoModCalisma+0xc4>
 8005e5c:	4b47      	ldr	r3, [pc, #284]	@ (8005f7c <checkDemoModCalisma+0x1dc>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d05d      	beq.n	8005f20 <checkDemoModCalisma+0x180>
 8005e64:	4b47      	ldr	r3, [pc, #284]	@ (8005f84 <checkDemoModCalisma+0x1e4>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d059      	beq.n	8005f20 <checkDemoModCalisma+0x180>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8005e6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005e70:	4845      	ldr	r0, [pc, #276]	@ (8005f88 <checkDemoModCalisma+0x1e8>)
 8005e72:	f004 fd03 	bl	800a87c <HAL_GPIO_ReadPin>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <checkDemoModCalisma+0xe4>
 8005e7c:	4b45      	ldr	r3, [pc, #276]	@ (8005f94 <checkDemoModCalisma+0x1f4>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d04d      	beq.n	8005f20 <checkDemoModCalisma+0x180>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005e84:	2102      	movs	r1, #2
 8005e86:	4844      	ldr	r0, [pc, #272]	@ (8005f98 <checkDemoModCalisma+0x1f8>)
 8005e88:	f004 fcf8 	bl	800a87c <HAL_GPIO_ReadPin>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d146      	bne.n	8005f20 <checkDemoModCalisma+0x180>
							&& (basincVar)
 8005e92:	4b42      	ldr	r3, [pc, #264]	@ (8005f9c <checkDemoModCalisma+0x1fc>)
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	d041      	beq.n	8005f20 <checkDemoModCalisma+0x180>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8005e9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005ea0:	4839      	ldr	r0, [pc, #228]	@ (8005f88 <checkDemoModCalisma+0x1e8>)
 8005ea2:	f004 fceb 	bl	800a87c <HAL_GPIO_ReadPin>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d10e      	bne.n	8005eca <checkDemoModCalisma+0x12a>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005eac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005eb0:	4835      	ldr	r0, [pc, #212]	@ (8005f88 <checkDemoModCalisma+0x1e8>)
 8005eb2:	f004 fce3 	bl	800a87c <HAL_GPIO_ReadPin>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d106      	bne.n	8005eca <checkDemoModCalisma+0x12a>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005ebc:	2140      	movs	r1, #64	@ 0x40
 8005ebe:	4836      	ldr	r0, [pc, #216]	@ (8005f98 <checkDemoModCalisma+0x1f8>)
 8005ec0:	f004 fcdc 	bl	800a87c <HAL_GPIO_ReadPin>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d003      	beq.n	8005ed2 <checkDemoModCalisma+0x132>
 8005eca:	4b25      	ldr	r3, [pc, #148]	@ (8005f60 <checkDemoModCalisma+0x1c0>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d026      	beq.n	8005f20 <checkDemoModCalisma+0x180>
							&& (asagivalfcalisiyor==0)
 8005ed2:	4b25      	ldr	r3, [pc, #148]	@ (8005f68 <checkDemoModCalisma+0x1c8>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	f083 0301 	eor.w	r3, r3, #1
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d01f      	beq.n	8005f20 <checkDemoModCalisma+0x180>
							&& (devmotoryukaricalisiyor==0)
 8005ee0:	4b20      	ldr	r3, [pc, #128]	@ (8005f64 <checkDemoModCalisma+0x1c4>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	f083 0301 	eor.w	r3, r3, #1
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d018      	beq.n	8005f20 <checkDemoModCalisma+0x180>
							&& (devmotorasagicalisiyor==0)
 8005eee:	4b21      	ldr	r3, [pc, #132]	@ (8005f74 <checkDemoModCalisma+0x1d4>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	f083 0301 	eor.w	r3, r3, #1
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d011      	beq.n	8005f20 <checkDemoModCalisma+0x180>
							&&(devyukarivalfcalisiyor==0)
 8005efc:	4b28      	ldr	r3, [pc, #160]	@ (8005fa0 <checkDemoModCalisma+0x200>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	f083 0301 	eor.w	r3, r3, #1
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <checkDemoModCalisma+0x180>
							&&(devasagivalfcalisiyor==0)) {
 8005f0a:	4b26      	ldr	r3, [pc, #152]	@ (8005fa4 <checkDemoModCalisma+0x204>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	f083 0301 	eor.w	r3, r3, #1
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <checkDemoModCalisma+0x180>
					yukarimotorcalisiyor=1;
 8005f18:	4a11      	ldr	r2, [pc, #68]	@ (8005f60 <checkDemoModCalisma+0x1c0>)
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	7013      	strb	r3, [r2, #0]
 8005f1e:	e002      	b.n	8005f26 <checkDemoModCalisma+0x186>
				} else {
					yukarimotorcalisiyor=0;
 8005f20:	4a0f      	ldr	r2, [pc, #60]	@ (8005f60 <checkDemoModCalisma+0x1c0>)
 8005f22:	2300      	movs	r3, #0
 8005f24:	7013      	strb	r3, [r2, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005f26:	4b0e      	ldr	r3, [pc, #56]	@ (8005f60 <checkDemoModCalisma+0x1c0>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d03e      	beq.n	8005fac <checkDemoModCalisma+0x20c>
 8005f2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005f32:	4819      	ldr	r0, [pc, #100]	@ (8005f98 <checkDemoModCalisma+0x1f8>)
 8005f34:	f004 fca2 	bl	800a87c <HAL_GPIO_ReadPin>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d136      	bne.n	8005fac <checkDemoModCalisma+0x20c>
 8005f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005fa8 <checkDemoModCalisma+0x208>)
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	d031      	beq.n	8005fac <checkDemoModCalisma+0x20c>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005f4e:	480e      	ldr	r0, [pc, #56]	@ (8005f88 <checkDemoModCalisma+0x1e8>)
 8005f50:	f004 fcab 	bl	800a8aa <HAL_GPIO_WritePin>
 8005f54:	e030      	b.n	8005fb8 <checkDemoModCalisma+0x218>
 8005f56:	bf00      	nop
 8005f58:	200011a8 	.word	0x200011a8
 8005f5c:	200011a0 	.word	0x200011a0
 8005f60:	20001221 	.word	0x20001221
 8005f64:	20001222 	.word	0x20001222
 8005f68:	20001224 	.word	0x20001224
 8005f6c:	2000121c 	.word	0x2000121c
 8005f70:	20001150 	.word	0x20001150
 8005f74:	20001223 	.word	0x20001223
 8005f78:	20001148 	.word	0x20001148
 8005f7c:	2000123e 	.word	0x2000123e
 8005f80:	20001251 	.word	0x20001251
 8005f84:	2000123f 	.word	0x2000123f
 8005f88:	40010c00 	.word	0x40010c00
 8005f8c:	20001240 	.word	0x20001240
 8005f90:	2000122b 	.word	0x2000122b
 8005f94:	20001228 	.word	0x20001228
 8005f98:	40011000 	.word	0x40011000
 8005f9c:	200010d0 	.word	0x200010d0
 8005fa0:	20001226 	.word	0x20001226
 8005fa4:	20001227 	.word	0x20001227
 8005fa8:	20001128 	.word	0x20001128
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005fac:	2200      	movs	r2, #0
 8005fae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005fb2:	4872      	ldr	r0, [pc, #456]	@ (800617c <checkDemoModCalisma+0x3dc>)
 8005fb4:	f004 fc79 	bl	800a8aa <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005fb8:	4b71      	ldr	r3, [pc, #452]	@ (8006180 <checkDemoModCalisma+0x3e0>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d019      	beq.n	8005ff4 <checkDemoModCalisma+0x254>
 8005fc0:	4b70      	ldr	r3, [pc, #448]	@ (8006184 <checkDemoModCalisma+0x3e4>)
 8005fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc6:	1e51      	subs	r1, r2, #1
 8005fc8:	430b      	orrs	r3, r1
 8005fca:	d00b      	beq.n	8005fe4 <checkDemoModCalisma+0x244>
 8005fcc:	4b6d      	ldr	r3, [pc, #436]	@ (8006184 <checkDemoModCalisma+0x3e4>)
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	1e91      	subs	r1, r2, #2
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	d005      	beq.n	8005fe4 <checkDemoModCalisma+0x244>
 8005fd8:	4b6b      	ldr	r3, [pc, #428]	@ (8006188 <checkDemoModCalisma+0x3e8>)
 8005fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fde:	1e51      	subs	r1, r2, #1
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	d107      	bne.n	8005ff4 <checkDemoModCalisma+0x254>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	2104      	movs	r1, #4
 8005fe8:	4864      	ldr	r0, [pc, #400]	@ (800617c <checkDemoModCalisma+0x3dc>)
 8005fea:	f004 fc5e 	bl	800a8aa <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8005fee:	4a67      	ldr	r2, [pc, #412]	@ (800618c <checkDemoModCalisma+0x3ec>)
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	7013      	strb	r3, [r2, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005ff4:	4b65      	ldr	r3, [pc, #404]	@ (800618c <checkDemoModCalisma+0x3ec>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d034      	beq.n	8006066 <checkDemoModCalisma+0x2c6>
 8005ffc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006000:	485e      	ldr	r0, [pc, #376]	@ (800617c <checkDemoModCalisma+0x3dc>)
 8006002:	f004 fc3b 	bl	800a87c <HAL_GPIO_ReadPin>
 8006006:	4603      	mov	r3, r0
 8006008:	2b01      	cmp	r3, #1
 800600a:	d106      	bne.n	800601a <checkDemoModCalisma+0x27a>
 800600c:	4b60      	ldr	r3, [pc, #384]	@ (8006190 <checkDemoModCalisma+0x3f0>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	f083 0301 	eor.w	r3, r3, #1
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d106      	bne.n	8006028 <checkDemoModCalisma+0x288>
 800601a:	2102      	movs	r1, #2
 800601c:	485d      	ldr	r0, [pc, #372]	@ (8006194 <checkDemoModCalisma+0x3f4>)
 800601e:	f004 fc2d 	bl	800a87c <HAL_GPIO_ReadPin>
 8006022:	4603      	mov	r3, r0
 8006024:	2b01      	cmp	r3, #1
 8006026:	d11e      	bne.n	8006066 <checkDemoModCalisma+0x2c6>
 8006028:	4b5b      	ldr	r3, [pc, #364]	@ (8006198 <checkDemoModCalisma+0x3f8>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d103      	bne.n	8006038 <checkDemoModCalisma+0x298>
 8006030:	4b5a      	ldr	r3, [pc, #360]	@ (800619c <checkDemoModCalisma+0x3fc>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d016      	beq.n	8006066 <checkDemoModCalisma+0x2c6>
 8006038:	4b59      	ldr	r3, [pc, #356]	@ (80061a0 <checkDemoModCalisma+0x400>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d012      	beq.n	8006066 <checkDemoModCalisma+0x2c6>
 8006040:	4b58      	ldr	r3, [pc, #352]	@ (80061a4 <checkDemoModCalisma+0x404>)
 8006042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006046:	4313      	orrs	r3, r2
 8006048:	d00d      	beq.n	8006066 <checkDemoModCalisma+0x2c6>
 800604a:	4b57      	ldr	r3, [pc, #348]	@ (80061a8 <checkDemoModCalisma+0x408>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	f083 0301 	eor.w	r3, r3, #1
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d006      	beq.n	8006066 <checkDemoModCalisma+0x2c6>
					timer2=millis;
 8006058:	4b54      	ldr	r3, [pc, #336]	@ (80061ac <checkDemoModCalisma+0x40c>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	4b54      	ldr	r3, [pc, #336]	@ (80061b0 <checkDemoModCalisma+0x410>)
 800605e:	601a      	str	r2, [r3, #0]
					butonKontrol3=1;
 8006060:	4a51      	ldr	r2, [pc, #324]	@ (80061a8 <checkDemoModCalisma+0x408>)
 8006062:	2301      	movs	r3, #1
 8006064:	7013      	strb	r3, [r2, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8006066:	4b51      	ldr	r3, [pc, #324]	@ (80061ac <checkDemoModCalisma+0x40c>)
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	4b51      	ldr	r3, [pc, #324]	@ (80061b0 <checkDemoModCalisma+0x410>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2200      	movs	r2, #0
 8006072:	461c      	mov	r4, r3
 8006074:	4615      	mov	r5, r2
 8006076:	4b4f      	ldr	r3, [pc, #316]	@ (80061b4 <checkDemoModCalisma+0x414>)
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	4294      	cmp	r4, r2
 800607e:	eb75 0303 	sbcs.w	r3, r5, r3
 8006082:	d303      	bcc.n	800608c <checkDemoModCalisma+0x2ec>
 8006084:	4b48      	ldr	r3, [pc, #288]	@ (80061a8 <checkDemoModCalisma+0x408>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d119      	bne.n	80060c0 <checkDemoModCalisma+0x320>
 800608c:	4b42      	ldr	r3, [pc, #264]	@ (8006198 <checkDemoModCalisma+0x3f8>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	f083 0301 	eor.w	r3, r3, #1
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d006      	beq.n	80060a8 <checkDemoModCalisma+0x308>
 800609a:	4b40      	ldr	r3, [pc, #256]	@ (800619c <checkDemoModCalisma+0x3fc>)
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	f083 0301 	eor.w	r3, r3, #1
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10b      	bne.n	80060c0 <checkDemoModCalisma+0x320>
 80060a8:	4b3d      	ldr	r3, [pc, #244]	@ (80061a0 <checkDemoModCalisma+0x400>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	f083 0301 	eor.w	r3, r3, #1
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d104      	bne.n	80060c0 <checkDemoModCalisma+0x320>
 80060b6:	4b3b      	ldr	r3, [pc, #236]	@ (80061a4 <checkDemoModCalisma+0x404>)
 80060b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060bc:	4313      	orrs	r3, r2
 80060be:	d10a      	bne.n	80060d6 <checkDemoModCalisma+0x336>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80060c0:	2200      	movs	r2, #0
 80060c2:	2104      	movs	r1, #4
 80060c4:	482d      	ldr	r0, [pc, #180]	@ (800617c <checkDemoModCalisma+0x3dc>)
 80060c6:	f004 fbf0 	bl	800a8aa <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 80060ca:	4a30      	ldr	r2, [pc, #192]	@ (800618c <checkDemoModCalisma+0x3ec>)
 80060cc:	2300      	movs	r3, #0
 80060ce:	7013      	strb	r3, [r2, #0]
					butonKontrol3=0;
 80060d0:	4a35      	ldr	r2, [pc, #212]	@ (80061a8 <checkDemoModCalisma+0x408>)
 80060d2:	2300      	movs	r3, #0
 80060d4:	7013      	strb	r3, [r2, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 80060d6:	4b38      	ldr	r3, [pc, #224]	@ (80061b8 <checkDemoModCalisma+0x418>)
 80060d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060dc:	4313      	orrs	r3, r2
 80060de:	d102      	bne.n	80060e6 <checkDemoModCalisma+0x346>
					cerceveVar=1;
 80060e0:	4a36      	ldr	r2, [pc, #216]	@ (80061bc <checkDemoModCalisma+0x41c>)
 80060e2:	2301      	movs	r3, #1
 80060e4:	7013      	strb	r3, [r2, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80060e6:	4b34      	ldr	r3, [pc, #208]	@ (80061b8 <checkDemoModCalisma+0x418>)
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	1e51      	subs	r1, r2, #1
 80060ee:	430b      	orrs	r3, r1
 80060f0:	d117      	bne.n	8006122 <checkDemoModCalisma+0x382>
 80060f2:	4b33      	ldr	r3, [pc, #204]	@ (80061c0 <checkDemoModCalisma+0x420>)
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	d112      	bne.n	8006122 <checkDemoModCalisma+0x382>
 80060fc:	2101      	movs	r1, #1
 80060fe:	4825      	ldr	r0, [pc, #148]	@ (8006194 <checkDemoModCalisma+0x3f4>)
 8006100:	f004 fbbc 	bl	800a87c <HAL_GPIO_ReadPin>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10b      	bne.n	8006122 <checkDemoModCalisma+0x382>
 800610a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800610e:	481b      	ldr	r0, [pc, #108]	@ (800617c <checkDemoModCalisma+0x3dc>)
 8006110:	f004 fbb4 	bl	800a87c <HAL_GPIO_ReadPin>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d103      	bne.n	8006122 <checkDemoModCalisma+0x382>
					cerceveVar=1;
 800611a:	4a28      	ldr	r2, [pc, #160]	@ (80061bc <checkDemoModCalisma+0x41c>)
 800611c:	2301      	movs	r3, #1
 800611e:	7013      	strb	r3, [r2, #0]
 8006120:	e014      	b.n	800614c <checkDemoModCalisma+0x3ac>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8006122:	4b25      	ldr	r3, [pc, #148]	@ (80061b8 <checkDemoModCalisma+0x418>)
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	1e51      	subs	r1, r2, #1
 800612a:	430b      	orrs	r3, r1
 800612c:	d10e      	bne.n	800614c <checkDemoModCalisma+0x3ac>
 800612e:	2101      	movs	r1, #1
 8006130:	4818      	ldr	r0, [pc, #96]	@ (8006194 <checkDemoModCalisma+0x3f4>)
 8006132:	f004 fba3 	bl	800a87c <HAL_GPIO_ReadPin>
 8006136:	4603      	mov	r3, r0
 8006138:	2b01      	cmp	r3, #1
 800613a:	d107      	bne.n	800614c <checkDemoModCalisma+0x3ac>
 800613c:	4b20      	ldr	r3, [pc, #128]	@ (80061c0 <checkDemoModCalisma+0x420>)
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	4313      	orrs	r3, r2
 8006144:	d102      	bne.n	800614c <checkDemoModCalisma+0x3ac>
					cerceveVar=0;
 8006146:	4a1d      	ldr	r2, [pc, #116]	@ (80061bc <checkDemoModCalisma+0x41c>)
 8006148:	2300      	movs	r3, #0
 800614a:	7013      	strb	r3, [r2, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 800614c:	4b1a      	ldr	r3, [pc, #104]	@ (80061b8 <checkDemoModCalisma+0x418>)
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	1e51      	subs	r1, r2, #1
 8006154:	430b      	orrs	r3, r1
 8006156:	d138      	bne.n	80061ca <checkDemoModCalisma+0x42a>
 8006158:	4b19      	ldr	r3, [pc, #100]	@ (80061c0 <checkDemoModCalisma+0x420>)
 800615a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615e:	1e51      	subs	r1, r2, #1
 8006160:	430b      	orrs	r3, r1
 8006162:	d132      	bne.n	80061ca <checkDemoModCalisma+0x42a>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8006164:	2101      	movs	r1, #1
 8006166:	480b      	ldr	r0, [pc, #44]	@ (8006194 <checkDemoModCalisma+0x3f4>)
 8006168:	f004 fb88 	bl	800a87c <HAL_GPIO_ReadPin>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d128      	bne.n	80061c4 <checkDemoModCalisma+0x424>
						cerceveVar=1;
 8006172:	4a12      	ldr	r2, [pc, #72]	@ (80061bc <checkDemoModCalisma+0x41c>)
 8006174:	2301      	movs	r3, #1
 8006176:	7013      	strb	r3, [r2, #0]
 8006178:	e027      	b.n	80061ca <checkDemoModCalisma+0x42a>
 800617a:	bf00      	nop
 800617c:	40010c00 	.word	0x40010c00
 8006180:	20001221 	.word	0x20001221
 8006184:	20001130 	.word	0x20001130
 8006188:	20001150 	.word	0x20001150
 800618c:	20001225 	.word	0x20001225
 8006190:	20001228 	.word	0x20001228
 8006194:	40011000 	.word	0x40011000
 8006198:	2000123e 	.word	0x2000123e
 800619c:	20001251 	.word	0x20001251
 80061a0:	2000123f 	.word	0x2000123f
 80061a4:	200010d0 	.word	0x200010d0
 80061a8:	2000121d 	.word	0x2000121d
 80061ac:	20001088 	.word	0x20001088
 80061b0:	20001094 	.word	0x20001094
 80061b4:	20001158 	.word	0x20001158
 80061b8:	200010d8 	.word	0x200010d8
 80061bc:	20001243 	.word	0x20001243
 80061c0:	200010c0 	.word	0x200010c0
					} else {
						cerceveVar=0;
 80061c4:	4a84      	ldr	r2, [pc, #528]	@ (80063d8 <checkDemoModCalisma+0x638>)
 80061c6:	2300      	movs	r3, #0
 80061c8:	7013      	strb	r3, [r2, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80061ca:	4b84      	ldr	r3, [pc, #528]	@ (80063dc <checkDemoModCalisma+0x63c>)
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	d17d      	bne.n	80062d0 <checkDemoModCalisma+0x530>
 80061d4:	4b82      	ldr	r3, [pc, #520]	@ (80063e0 <checkDemoModCalisma+0x640>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d079      	beq.n	80062d0 <checkDemoModCalisma+0x530>
 80061dc:	4b81      	ldr	r3, [pc, #516]	@ (80063e4 <checkDemoModCalisma+0x644>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d075      	beq.n	80062d0 <checkDemoModCalisma+0x530>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80061e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80061e8:	487f      	ldr	r0, [pc, #508]	@ (80063e8 <checkDemoModCalisma+0x648>)
 80061ea:	f004 fb47 	bl	800a87c <HAL_GPIO_ReadPin>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <checkDemoModCalisma+0x45c>
 80061f4:	4b7d      	ldr	r3, [pc, #500]	@ (80063ec <checkDemoModCalisma+0x64c>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d069      	beq.n	80062d0 <checkDemoModCalisma+0x530>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80061fc:	4b76      	ldr	r3, [pc, #472]	@ (80063d8 <checkDemoModCalisma+0x638>)
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d065      	beq.n	80062d0 <checkDemoModCalisma+0x530>
 8006204:	4b7a      	ldr	r3, [pc, #488]	@ (80063f0 <checkDemoModCalisma+0x650>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	f083 0301 	eor.w	r3, r3, #1
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d05e      	beq.n	80062d0 <checkDemoModCalisma+0x530>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8006212:	2104      	movs	r1, #4
 8006214:	4877      	ldr	r0, [pc, #476]	@ (80063f4 <checkDemoModCalisma+0x654>)
 8006216:	f004 fb31 	bl	800a87c <HAL_GPIO_ReadPin>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d004      	beq.n	800622a <checkDemoModCalisma+0x48a>
 8006220:	4b75      	ldr	r3, [pc, #468]	@ (80063f8 <checkDemoModCalisma+0x658>)
 8006222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006226:	4313      	orrs	r3, r2
 8006228:	d152      	bne.n	80062d0 <checkDemoModCalisma+0x530>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800622a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800622e:	486e      	ldr	r0, [pc, #440]	@ (80063e8 <checkDemoModCalisma+0x648>)
 8006230:	f004 fb24 	bl	800a87c <HAL_GPIO_ReadPin>
 8006234:	4603      	mov	r3, r0
 8006236:	2b01      	cmp	r3, #1
 8006238:	d10e      	bne.n	8006258 <checkDemoModCalisma+0x4b8>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800623a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800623e:	486a      	ldr	r0, [pc, #424]	@ (80063e8 <checkDemoModCalisma+0x648>)
 8006240:	f004 fb1c 	bl	800a87c <HAL_GPIO_ReadPin>
 8006244:	4603      	mov	r3, r0
 8006246:	2b01      	cmp	r3, #1
 8006248:	d106      	bne.n	8006258 <checkDemoModCalisma+0x4b8>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800624a:	2140      	movs	r1, #64	@ 0x40
 800624c:	4869      	ldr	r0, [pc, #420]	@ (80063f4 <checkDemoModCalisma+0x654>)
 800624e:	f004 fb15 	bl	800a87c <HAL_GPIO_ReadPin>
 8006252:	4603      	mov	r3, r0
 8006254:	2b01      	cmp	r3, #1
 8006256:	d003      	beq.n	8006260 <checkDemoModCalisma+0x4c0>
 8006258:	4b68      	ldr	r3, [pc, #416]	@ (80063fc <checkDemoModCalisma+0x65c>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d037      	beq.n	80062d0 <checkDemoModCalisma+0x530>
						&& (yukarimotorcalisiyor==0)
 8006260:	4b67      	ldr	r3, [pc, #412]	@ (8006400 <checkDemoModCalisma+0x660>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	f083 0301 	eor.w	r3, r3, #1
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d030      	beq.n	80062d0 <checkDemoModCalisma+0x530>
						&& (yukarivalfcalisiyor==0)
 800626e:	4b65      	ldr	r3, [pc, #404]	@ (8006404 <checkDemoModCalisma+0x664>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	f083 0301 	eor.w	r3, r3, #1
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d029      	beq.n	80062d0 <checkDemoModCalisma+0x530>
				  	  	&& (devmotoryukaricalisiyor==0)
 800627c:	4b62      	ldr	r3, [pc, #392]	@ (8006408 <checkDemoModCalisma+0x668>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	f083 0301 	eor.w	r3, r3, #1
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d022      	beq.n	80062d0 <checkDemoModCalisma+0x530>
						&& (devmotorasagicalisiyor==0)
 800628a:	4b60      	ldr	r3, [pc, #384]	@ (800640c <checkDemoModCalisma+0x66c>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	f083 0301 	eor.w	r3, r3, #1
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01b      	beq.n	80062d0 <checkDemoModCalisma+0x530>
						&& (devyukarivalfcalisiyor==0)
 8006298:	4b5d      	ldr	r3, [pc, #372]	@ (8006410 <checkDemoModCalisma+0x670>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	f083 0301 	eor.w	r3, r3, #1
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d014      	beq.n	80062d0 <checkDemoModCalisma+0x530>
						&& (devasagivalfcalisiyor==0)) {
 80062a6:	4b5b      	ldr	r3, [pc, #364]	@ (8006414 <checkDemoModCalisma+0x674>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	f083 0301 	eor.w	r3, r3, #1
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00d      	beq.n	80062d0 <checkDemoModCalisma+0x530>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80062b4:	2201      	movs	r2, #1
 80062b6:	2102      	movs	r1, #2
 80062b8:	484b      	ldr	r0, [pc, #300]	@ (80063e8 <checkDemoModCalisma+0x648>)
 80062ba:	f004 faf6 	bl	800a8aa <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 80062be:	4a4f      	ldr	r2, [pc, #316]	@ (80063fc <checkDemoModCalisma+0x65c>)
 80062c0:	2301      	movs	r3, #1
 80062c2:	7013      	strb	r3, [r2, #0]
					CalismaSayisiAsagi=1;
 80062c4:	4a54      	ldr	r2, [pc, #336]	@ (8006418 <checkDemoModCalisma+0x678>)
 80062c6:	2301      	movs	r3, #1
 80062c8:	7013      	strb	r3, [r2, #0]
					cercevesasagicalisma=1;
 80062ca:	4a54      	ldr	r2, [pc, #336]	@ (800641c <checkDemoModCalisma+0x67c>)
 80062cc:	2301      	movs	r3, #1
 80062ce:	7013      	strb	r3, [r2, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80062d0:	4b4a      	ldr	r3, [pc, #296]	@ (80063fc <checkDemoModCalisma+0x65c>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d034      	beq.n	8006342 <checkDemoModCalisma+0x5a2>
 80062d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80062dc:	4842      	ldr	r0, [pc, #264]	@ (80063e8 <checkDemoModCalisma+0x648>)
 80062de:	f004 facd 	bl	800a87c <HAL_GPIO_ReadPin>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d106      	bne.n	80062f6 <checkDemoModCalisma+0x556>
 80062e8:	4b40      	ldr	r3, [pc, #256]	@ (80063ec <checkDemoModCalisma+0x64c>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	f083 0301 	eor.w	r3, r3, #1
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10b      	bne.n	800630e <checkDemoModCalisma+0x56e>
 80062f6:	2104      	movs	r1, #4
 80062f8:	483e      	ldr	r0, [pc, #248]	@ (80063f4 <checkDemoModCalisma+0x654>)
 80062fa:	f004 fabf 	bl	800a87c <HAL_GPIO_ReadPin>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b01      	cmp	r3, #1
 8006302:	d11e      	bne.n	8006342 <checkDemoModCalisma+0x5a2>
 8006304:	4b3c      	ldr	r3, [pc, #240]	@ (80063f8 <checkDemoModCalisma+0x658>)
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	4313      	orrs	r3, r2
 800630c:	d019      	beq.n	8006342 <checkDemoModCalisma+0x5a2>
 800630e:	4b34      	ldr	r3, [pc, #208]	@ (80063e0 <checkDemoModCalisma+0x640>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d015      	beq.n	8006342 <checkDemoModCalisma+0x5a2>
 8006316:	4b33      	ldr	r3, [pc, #204]	@ (80063e4 <checkDemoModCalisma+0x644>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d011      	beq.n	8006342 <checkDemoModCalisma+0x5a2>
 800631e:	4b2e      	ldr	r3, [pc, #184]	@ (80063d8 <checkDemoModCalisma+0x638>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00d      	beq.n	8006342 <checkDemoModCalisma+0x5a2>
 8006326:	4b3e      	ldr	r3, [pc, #248]	@ (8006420 <checkDemoModCalisma+0x680>)
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	f083 0301 	eor.w	r3, r3, #1
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d006      	beq.n	8006342 <checkDemoModCalisma+0x5a2>
					timer2=millis;
 8006334:	4b3b      	ldr	r3, [pc, #236]	@ (8006424 <checkDemoModCalisma+0x684>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	4b3b      	ldr	r3, [pc, #236]	@ (8006428 <checkDemoModCalisma+0x688>)
 800633a:	601a      	str	r2, [r3, #0]
					butonKontrol2=1;
 800633c:	4a38      	ldr	r2, [pc, #224]	@ (8006420 <checkDemoModCalisma+0x680>)
 800633e:	2301      	movs	r3, #1
 8006340:	7013      	strb	r3, [r2, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8006342:	4b38      	ldr	r3, [pc, #224]	@ (8006424 <checkDemoModCalisma+0x684>)
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	4b38      	ldr	r3, [pc, #224]	@ (8006428 <checkDemoModCalisma+0x688>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	2200      	movs	r2, #0
 800634e:	4698      	mov	r8, r3
 8006350:	4691      	mov	r9, r2
 8006352:	4b36      	ldr	r3, [pc, #216]	@ (800642c <checkDemoModCalisma+0x68c>)
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	4590      	cmp	r8, r2
 800635a:	eb79 0303 	sbcs.w	r3, r9, r3
 800635e:	d303      	bcc.n	8006368 <checkDemoModCalisma+0x5c8>
 8006360:	4b2f      	ldr	r3, [pc, #188]	@ (8006420 <checkDemoModCalisma+0x680>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d114      	bne.n	8006392 <checkDemoModCalisma+0x5f2>
 8006368:	4b1d      	ldr	r3, [pc, #116]	@ (80063e0 <checkDemoModCalisma+0x640>)
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	f083 0301 	eor.w	r3, r3, #1
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10d      	bne.n	8006392 <checkDemoModCalisma+0x5f2>
 8006376:	4b1b      	ldr	r3, [pc, #108]	@ (80063e4 <checkDemoModCalisma+0x644>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	f083 0301 	eor.w	r3, r3, #1
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	d106      	bne.n	8006392 <checkDemoModCalisma+0x5f2>
 8006384:	4b14      	ldr	r3, [pc, #80]	@ (80063d8 <checkDemoModCalisma+0x638>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	f083 0301 	eor.w	r3, r3, #1
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00a      	beq.n	80063a8 <checkDemoModCalisma+0x608>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006392:	2200      	movs	r2, #0
 8006394:	2102      	movs	r1, #2
 8006396:	4814      	ldr	r0, [pc, #80]	@ (80063e8 <checkDemoModCalisma+0x648>)
 8006398:	f004 fa87 	bl	800a8aa <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 800639c:	4a17      	ldr	r2, [pc, #92]	@ (80063fc <checkDemoModCalisma+0x65c>)
 800639e:	2300      	movs	r3, #0
 80063a0:	7013      	strb	r3, [r2, #0]
					butonKontrol2=0;
 80063a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006420 <checkDemoModCalisma+0x680>)
 80063a4:	2300      	movs	r3, #0
 80063a6:	7013      	strb	r3, [r2, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80063a8:	4b14      	ldr	r3, [pc, #80]	@ (80063fc <checkDemoModCalisma+0x65c>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d041      	beq.n	8006434 <checkDemoModCalisma+0x694>
 80063b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80063b4:	480f      	ldr	r0, [pc, #60]	@ (80063f4 <checkDemoModCalisma+0x654>)
 80063b6:	f004 fa61 	bl	800a87c <HAL_GPIO_ReadPin>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d139      	bne.n	8006434 <checkDemoModCalisma+0x694>
 80063c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006430 <checkDemoModCalisma+0x690>)
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	d034      	beq.n	8006434 <checkDemoModCalisma+0x694>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80063ca:	2201      	movs	r2, #1
 80063cc:	2101      	movs	r1, #1
 80063ce:	4806      	ldr	r0, [pc, #24]	@ (80063e8 <checkDemoModCalisma+0x648>)
 80063d0:	f004 fa6b 	bl	800a8aa <HAL_GPIO_WritePin>
 80063d4:	e033      	b.n	800643e <checkDemoModCalisma+0x69e>
 80063d6:	bf00      	nop
 80063d8:	20001243 	.word	0x20001243
 80063dc:	200011a0 	.word	0x200011a0
 80063e0:	2000123e 	.word	0x2000123e
 80063e4:	2000123f 	.word	0x2000123f
 80063e8:	40010c00 	.word	0x40010c00
 80063ec:	20001229 	.word	0x20001229
 80063f0:	2000123d 	.word	0x2000123d
 80063f4:	40011000 	.word	0x40011000
 80063f8:	200010e8 	.word	0x200010e8
 80063fc:	20001224 	.word	0x20001224
 8006400:	20001221 	.word	0x20001221
 8006404:	20001225 	.word	0x20001225
 8006408:	20001222 	.word	0x20001222
 800640c:	20001223 	.word	0x20001223
 8006410:	20001226 	.word	0x20001226
 8006414:	20001227 	.word	0x20001227
 8006418:	2000122c 	.word	0x2000122c
 800641c:	2000124d 	.word	0x2000124d
 8006420:	2000121c 	.word	0x2000121c
 8006424:	20001088 	.word	0x20001088
 8006428:	20001094 	.word	0x20001094
 800642c:	20001160 	.word	0x20001160
 8006430:	200010e0 	.word	0x200010e0
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006434:	2200      	movs	r2, #0
 8006436:	2101      	movs	r1, #1
 8006438:	4839      	ldr	r0, [pc, #228]	@ (8006520 <checkDemoModCalisma+0x780>)
 800643a:	f004 fa36 	bl	800a8aa <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 800643e:	4b39      	ldr	r3, [pc, #228]	@ (8006524 <checkDemoModCalisma+0x784>)
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	4313      	orrs	r3, r2
 8006446:	f040 8085 	bne.w	8006554 <checkDemoModCalisma+0x7b4>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800644a:	4b37      	ldr	r3, [pc, #220]	@ (8006528 <checkDemoModCalisma+0x788>)
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	1e51      	subs	r1, r2, #1
 8006452:	430b      	orrs	r3, r1
 8006454:	d005      	beq.n	8006462 <checkDemoModCalisma+0x6c2>
 8006456:	4b34      	ldr	r3, [pc, #208]	@ (8006528 <checkDemoModCalisma+0x788>)
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	1e91      	subs	r1, r2, #2
 800645e:	430b      	orrs	r3, r1
 8006460:	d178      	bne.n	8006554 <checkDemoModCalisma+0x7b4>
						&& (stopVar) && (kapiSivicVar)
 8006462:	4b32      	ldr	r3, [pc, #200]	@ (800652c <checkDemoModCalisma+0x78c>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d074      	beq.n	8006554 <checkDemoModCalisma+0x7b4>
 800646a:	4b31      	ldr	r3, [pc, #196]	@ (8006530 <checkDemoModCalisma+0x790>)
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d070      	beq.n	8006554 <checkDemoModCalisma+0x7b4>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006472:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006476:	482a      	ldr	r0, [pc, #168]	@ (8006520 <checkDemoModCalisma+0x780>)
 8006478:	f004 fa00 	bl	800a87c <HAL_GPIO_ReadPin>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d168      	bne.n	8006554 <checkDemoModCalisma+0x7b4>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006482:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006486:	482b      	ldr	r0, [pc, #172]	@ (8006534 <checkDemoModCalisma+0x794>)
 8006488:	f004 f9f8 	bl	800a87c <HAL_GPIO_ReadPin>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d004      	beq.n	800649c <checkDemoModCalisma+0x6fc>
 8006492:	4b29      	ldr	r3, [pc, #164]	@ (8006538 <checkDemoModCalisma+0x798>)
 8006494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006498:	4313      	orrs	r3, r2
 800649a:	d15b      	bne.n	8006554 <checkDemoModCalisma+0x7b4>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 800649c:	2140      	movs	r1, #64	@ 0x40
 800649e:	4825      	ldr	r0, [pc, #148]	@ (8006534 <checkDemoModCalisma+0x794>)
 80064a0:	f004 f9ec 	bl	800a87c <HAL_GPIO_ReadPin>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d10f      	bne.n	80064ca <checkDemoModCalisma+0x72a>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80064aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80064ae:	481c      	ldr	r0, [pc, #112]	@ (8006520 <checkDemoModCalisma+0x780>)
 80064b0:	f004 f9e4 	bl	800a87c <HAL_GPIO_ReadPin>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d107      	bne.n	80064ca <checkDemoModCalisma+0x72a>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80064ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80064be:	4818      	ldr	r0, [pc, #96]	@ (8006520 <checkDemoModCalisma+0x780>)
 80064c0:	f004 f9dc 	bl	800a87c <HAL_GPIO_ReadPin>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d003      	beq.n	80064d2 <checkDemoModCalisma+0x732>
 80064ca:	4b1c      	ldr	r3, [pc, #112]	@ (800653c <checkDemoModCalisma+0x79c>)
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d040      	beq.n	8006554 <checkDemoModCalisma+0x7b4>
						&& (yukarimotorcalisiyor==0)
 80064d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006540 <checkDemoModCalisma+0x7a0>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	f083 0301 	eor.w	r3, r3, #1
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d039      	beq.n	8006554 <checkDemoModCalisma+0x7b4>
						&& (yukarivalfcalisiyor==0)
 80064e0:	4b18      	ldr	r3, [pc, #96]	@ (8006544 <checkDemoModCalisma+0x7a4>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	f083 0301 	eor.w	r3, r3, #1
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d032      	beq.n	8006554 <checkDemoModCalisma+0x7b4>
						&& (asagivalfcalisiyor==0)
 80064ee:	4b16      	ldr	r3, [pc, #88]	@ (8006548 <checkDemoModCalisma+0x7a8>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	f083 0301 	eor.w	r3, r3, #1
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d02b      	beq.n	8006554 <checkDemoModCalisma+0x7b4>
						&& (devmotorasagicalisiyor==0)
 80064fc:	4b13      	ldr	r3, [pc, #76]	@ (800654c <checkDemoModCalisma+0x7ac>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	f083 0301 	eor.w	r3, r3, #1
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d024      	beq.n	8006554 <checkDemoModCalisma+0x7b4>
						&&(devasagivalfcalisiyor==0)) {
 800650a:	4b11      	ldr	r3, [pc, #68]	@ (8006550 <checkDemoModCalisma+0x7b0>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	f083 0301 	eor.w	r3, r3, #1
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01d      	beq.n	8006554 <checkDemoModCalisma+0x7b4>

					devmotoryukaricalisiyor=1;
 8006518:	4a08      	ldr	r2, [pc, #32]	@ (800653c <checkDemoModCalisma+0x79c>)
 800651a:	2301      	movs	r3, #1
 800651c:	7013      	strb	r3, [r2, #0]
 800651e:	e01c      	b.n	800655a <checkDemoModCalisma+0x7ba>
 8006520:	40010c00 	.word	0x40010c00
 8006524:	200011a0 	.word	0x200011a0
 8006528:	20001130 	.word	0x20001130
 800652c:	2000123e 	.word	0x2000123e
 8006530:	2000123f 	.word	0x2000123f
 8006534:	40011000 	.word	0x40011000
 8006538:	20001138 	.word	0x20001138
 800653c:	20001222 	.word	0x20001222
 8006540:	20001221 	.word	0x20001221
 8006544:	20001225 	.word	0x20001225
 8006548:	20001224 	.word	0x20001224
 800654c:	20001223 	.word	0x20001223
 8006550:	20001227 	.word	0x20001227
				} else {
					devmotoryukaricalisiyor=0;
 8006554:	4a6b      	ldr	r2, [pc, #428]	@ (8006704 <checkDemoModCalisma+0x964>)
 8006556:	2300      	movs	r3, #0
 8006558:	7013      	strb	r3, [r2, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 800655a:	4b6a      	ldr	r3, [pc, #424]	@ (8006704 <checkDemoModCalisma+0x964>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d007      	beq.n	8006572 <checkDemoModCalisma+0x7d2>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006562:	2201      	movs	r2, #1
 8006564:	2120      	movs	r1, #32
 8006566:	4868      	ldr	r0, [pc, #416]	@ (8006708 <checkDemoModCalisma+0x968>)
 8006568:	f004 f99f 	bl	800a8aa <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 800656c:	4a67      	ldr	r2, [pc, #412]	@ (800670c <checkDemoModCalisma+0x96c>)
 800656e:	2301      	movs	r3, #1
 8006570:	7013      	strb	r3, [r2, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006572:	4b66      	ldr	r3, [pc, #408]	@ (800670c <checkDemoModCalisma+0x96c>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d025      	beq.n	80065c6 <checkDemoModCalisma+0x826>
 800657a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800657e:	4864      	ldr	r0, [pc, #400]	@ (8006710 <checkDemoModCalisma+0x970>)
 8006580:	f004 f97c 	bl	800a87c <HAL_GPIO_ReadPin>
 8006584:	4603      	mov	r3, r0
 8006586:	2b01      	cmp	r3, #1
 8006588:	d007      	beq.n	800659a <checkDemoModCalisma+0x7fa>
 800658a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800658e:	485e      	ldr	r0, [pc, #376]	@ (8006708 <checkDemoModCalisma+0x968>)
 8006590:	f004 f974 	bl	800a87c <HAL_GPIO_ReadPin>
 8006594:	4603      	mov	r3, r0
 8006596:	2b01      	cmp	r3, #1
 8006598:	d115      	bne.n	80065c6 <checkDemoModCalisma+0x826>
 800659a:	4b5e      	ldr	r3, [pc, #376]	@ (8006714 <checkDemoModCalisma+0x974>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d011      	beq.n	80065c6 <checkDemoModCalisma+0x826>
 80065a2:	4b5d      	ldr	r3, [pc, #372]	@ (8006718 <checkDemoModCalisma+0x978>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00d      	beq.n	80065c6 <checkDemoModCalisma+0x826>
 80065aa:	4b5c      	ldr	r3, [pc, #368]	@ (800671c <checkDemoModCalisma+0x97c>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	f083 0301 	eor.w	r3, r3, #1
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d006      	beq.n	80065c6 <checkDemoModCalisma+0x826>
					timer2=millis;
 80065b8:	4b59      	ldr	r3, [pc, #356]	@ (8006720 <checkDemoModCalisma+0x980>)
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	4b59      	ldr	r3, [pc, #356]	@ (8006724 <checkDemoModCalisma+0x984>)
 80065be:	601a      	str	r2, [r3, #0]
					butonKontrol4=1;
 80065c0:	4a56      	ldr	r2, [pc, #344]	@ (800671c <checkDemoModCalisma+0x97c>)
 80065c2:	2301      	movs	r3, #1
 80065c4:	7013      	strb	r3, [r2, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80065c6:	4b56      	ldr	r3, [pc, #344]	@ (8006720 <checkDemoModCalisma+0x980>)
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	4b56      	ldr	r3, [pc, #344]	@ (8006724 <checkDemoModCalisma+0x984>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2200      	movs	r2, #0
 80065d2:	469a      	mov	sl, r3
 80065d4:	4693      	mov	fp, r2
 80065d6:	4b54      	ldr	r3, [pc, #336]	@ (8006728 <checkDemoModCalisma+0x988>)
 80065d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065dc:	4592      	cmp	sl, r2
 80065de:	eb7b 0303 	sbcs.w	r3, fp, r3
 80065e2:	d303      	bcc.n	80065ec <checkDemoModCalisma+0x84c>
 80065e4:	4b4d      	ldr	r3, [pc, #308]	@ (800671c <checkDemoModCalisma+0x97c>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10d      	bne.n	8006608 <checkDemoModCalisma+0x868>
 80065ec:	4b49      	ldr	r3, [pc, #292]	@ (8006714 <checkDemoModCalisma+0x974>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	f083 0301 	eor.w	r3, r3, #1
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d106      	bne.n	8006608 <checkDemoModCalisma+0x868>
 80065fa:	4b47      	ldr	r3, [pc, #284]	@ (8006718 <checkDemoModCalisma+0x978>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	f083 0301 	eor.w	r3, r3, #1
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <checkDemoModCalisma+0x87e>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006608:	2200      	movs	r2, #0
 800660a:	2120      	movs	r1, #32
 800660c:	483e      	ldr	r0, [pc, #248]	@ (8006708 <checkDemoModCalisma+0x968>)
 800660e:	f004 f94c 	bl	800a8aa <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8006612:	4a3e      	ldr	r2, [pc, #248]	@ (800670c <checkDemoModCalisma+0x96c>)
 8006614:	2300      	movs	r3, #0
 8006616:	7013      	strb	r3, [r2, #0]
					butonKontrol4=0;
 8006618:	4a40      	ldr	r2, [pc, #256]	@ (800671c <checkDemoModCalisma+0x97c>)
 800661a:	2300      	movs	r3, #0
 800661c:	7013      	strb	r3, [r2, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 800661e:	4b43      	ldr	r3, [pc, #268]	@ (800672c <checkDemoModCalisma+0x98c>)
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	4313      	orrs	r3, r2
 8006626:	f040 808f 	bne.w	8006748 <checkDemoModCalisma+0x9a8>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800662a:	4b41      	ldr	r3, [pc, #260]	@ (8006730 <checkDemoModCalisma+0x990>)
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	1e51      	subs	r1, r2, #1
 8006632:	430b      	orrs	r3, r1
 8006634:	d006      	beq.n	8006644 <checkDemoModCalisma+0x8a4>
 8006636:	4b3e      	ldr	r3, [pc, #248]	@ (8006730 <checkDemoModCalisma+0x990>)
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	1e91      	subs	r1, r2, #2
 800663e:	430b      	orrs	r3, r1
 8006640:	f040 8082 	bne.w	8006748 <checkDemoModCalisma+0x9a8>
						&& (stopVar) && (kapiSivicVar)
 8006644:	4b33      	ldr	r3, [pc, #204]	@ (8006714 <checkDemoModCalisma+0x974>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d07d      	beq.n	8006748 <checkDemoModCalisma+0x9a8>
 800664c:	4b32      	ldr	r3, [pc, #200]	@ (8006718 <checkDemoModCalisma+0x978>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d079      	beq.n	8006748 <checkDemoModCalisma+0x9a8>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006654:	2140      	movs	r1, #64	@ 0x40
 8006656:	482c      	ldr	r0, [pc, #176]	@ (8006708 <checkDemoModCalisma+0x968>)
 8006658:	f004 f910 	bl	800a87c <HAL_GPIO_ReadPin>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d172      	bne.n	8006748 <checkDemoModCalisma+0x9a8>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006662:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006666:	4828      	ldr	r0, [pc, #160]	@ (8006708 <checkDemoModCalisma+0x968>)
 8006668:	f004 f908 	bl	800a87c <HAL_GPIO_ReadPin>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d004      	beq.n	800667c <checkDemoModCalisma+0x8dc>
 8006672:	4b30      	ldr	r3, [pc, #192]	@ (8006734 <checkDemoModCalisma+0x994>)
 8006674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006678:	4313      	orrs	r3, r2
 800667a:	d165      	bne.n	8006748 <checkDemoModCalisma+0x9a8>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800667c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006680:	4823      	ldr	r0, [pc, #140]	@ (8006710 <checkDemoModCalisma+0x970>)
 8006682:	f004 f8fb 	bl	800a87c <HAL_GPIO_ReadPin>
 8006686:	4603      	mov	r3, r0
 8006688:	2b01      	cmp	r3, #1
 800668a:	d10f      	bne.n	80066ac <checkDemoModCalisma+0x90c>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800668c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006690:	481f      	ldr	r0, [pc, #124]	@ (8006710 <checkDemoModCalisma+0x970>)
 8006692:	f004 f8f3 	bl	800a87c <HAL_GPIO_ReadPin>
 8006696:	4603      	mov	r3, r0
 8006698:	2b01      	cmp	r3, #1
 800669a:	d107      	bne.n	80066ac <checkDemoModCalisma+0x90c>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800669c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80066a0:	481b      	ldr	r0, [pc, #108]	@ (8006710 <checkDemoModCalisma+0x970>)
 80066a2:	f004 f8eb 	bl	800a87c <HAL_GPIO_ReadPin>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d003      	beq.n	80066b4 <checkDemoModCalisma+0x914>
 80066ac:	4b22      	ldr	r3, [pc, #136]	@ (8006738 <checkDemoModCalisma+0x998>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d049      	beq.n	8006748 <checkDemoModCalisma+0x9a8>
						&& (yukarimotorcalisiyor==0)
 80066b4:	4b21      	ldr	r3, [pc, #132]	@ (800673c <checkDemoModCalisma+0x99c>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	f083 0301 	eor.w	r3, r3, #1
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d042      	beq.n	8006748 <checkDemoModCalisma+0x9a8>
						&& (yukarivalfcalisiyor==0)
 80066c2:	4b1f      	ldr	r3, [pc, #124]	@ (8006740 <checkDemoModCalisma+0x9a0>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	f083 0301 	eor.w	r3, r3, #1
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d03b      	beq.n	8006748 <checkDemoModCalisma+0x9a8>
						&& (asagivalfcalisiyor==0)
 80066d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006744 <checkDemoModCalisma+0x9a4>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	f083 0301 	eor.w	r3, r3, #1
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d034      	beq.n	8006748 <checkDemoModCalisma+0x9a8>
						&& (devyukarivalfcalisiyor==0)
 80066de:	4b0b      	ldr	r3, [pc, #44]	@ (800670c <checkDemoModCalisma+0x96c>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	f083 0301 	eor.w	r3, r3, #1
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d02d      	beq.n	8006748 <checkDemoModCalisma+0x9a8>
						&& (devmotoryukaricalisiyor==0)) {
 80066ec:	4b05      	ldr	r3, [pc, #20]	@ (8006704 <checkDemoModCalisma+0x964>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	f083 0301 	eor.w	r3, r3, #1
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d026      	beq.n	8006748 <checkDemoModCalisma+0x9a8>

					devmotorasagicalisiyor=1;
 80066fa:	4a0f      	ldr	r2, [pc, #60]	@ (8006738 <checkDemoModCalisma+0x998>)
 80066fc:	2301      	movs	r3, #1
 80066fe:	7013      	strb	r3, [r2, #0]
 8006700:	e025      	b.n	800674e <checkDemoModCalisma+0x9ae>
 8006702:	bf00      	nop
 8006704:	20001222 	.word	0x20001222
 8006708:	40011000 	.word	0x40011000
 800670c:	20001226 	.word	0x20001226
 8006710:	40010c00 	.word	0x40010c00
 8006714:	2000123e 	.word	0x2000123e
 8006718:	2000123f 	.word	0x2000123f
 800671c:	2000121e 	.word	0x2000121e
 8006720:	20001088 	.word	0x20001088
 8006724:	20001094 	.word	0x20001094
 8006728:	20001168 	.word	0x20001168
 800672c:	200011a0 	.word	0x200011a0
 8006730:	20001130 	.word	0x20001130
 8006734:	20001140 	.word	0x20001140
 8006738:	20001223 	.word	0x20001223
 800673c:	20001221 	.word	0x20001221
 8006740:	20001225 	.word	0x20001225
 8006744:	20001224 	.word	0x20001224
				} else {
					devmotorasagicalisiyor=0;
 8006748:	4a47      	ldr	r2, [pc, #284]	@ (8006868 <checkDemoModCalisma+0xac8>)
 800674a:	2300      	movs	r3, #0
 800674c:	7013      	strb	r3, [r2, #0]
				}

				if(devmotorasagicalisiyor==1) {
 800674e:	4b46      	ldr	r3, [pc, #280]	@ (8006868 <checkDemoModCalisma+0xac8>)
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d007      	beq.n	8006766 <checkDemoModCalisma+0x9c6>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006756:	2201      	movs	r2, #1
 8006758:	2110      	movs	r1, #16
 800675a:	4844      	ldr	r0, [pc, #272]	@ (800686c <checkDemoModCalisma+0xacc>)
 800675c:	f004 f8a5 	bl	800a8aa <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8006760:	4a43      	ldr	r2, [pc, #268]	@ (8006870 <checkDemoModCalisma+0xad0>)
 8006762:	2301      	movs	r3, #1
 8006764:	7013      	strb	r3, [r2, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006766:	4b42      	ldr	r3, [pc, #264]	@ (8006870 <checkDemoModCalisma+0xad0>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d024      	beq.n	80067b8 <checkDemoModCalisma+0xa18>
 800676e:	2140      	movs	r1, #64	@ 0x40
 8006770:	483e      	ldr	r0, [pc, #248]	@ (800686c <checkDemoModCalisma+0xacc>)
 8006772:	f004 f883 	bl	800a87c <HAL_GPIO_ReadPin>
 8006776:	4603      	mov	r3, r0
 8006778:	2b01      	cmp	r3, #1
 800677a:	d007      	beq.n	800678c <checkDemoModCalisma+0x9ec>
 800677c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006780:	483a      	ldr	r0, [pc, #232]	@ (800686c <checkDemoModCalisma+0xacc>)
 8006782:	f004 f87b 	bl	800a87c <HAL_GPIO_ReadPin>
 8006786:	4603      	mov	r3, r0
 8006788:	2b01      	cmp	r3, #1
 800678a:	d115      	bne.n	80067b8 <checkDemoModCalisma+0xa18>
 800678c:	4b39      	ldr	r3, [pc, #228]	@ (8006874 <checkDemoModCalisma+0xad4>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d011      	beq.n	80067b8 <checkDemoModCalisma+0xa18>
 8006794:	4b38      	ldr	r3, [pc, #224]	@ (8006878 <checkDemoModCalisma+0xad8>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00d      	beq.n	80067b8 <checkDemoModCalisma+0xa18>
 800679c:	4b37      	ldr	r3, [pc, #220]	@ (800687c <checkDemoModCalisma+0xadc>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	f083 0301 	eor.w	r3, r3, #1
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d006      	beq.n	80067b8 <checkDemoModCalisma+0xa18>
					timer2=millis;
 80067aa:	4b35      	ldr	r3, [pc, #212]	@ (8006880 <checkDemoModCalisma+0xae0>)
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	4b35      	ldr	r3, [pc, #212]	@ (8006884 <checkDemoModCalisma+0xae4>)
 80067b0:	601a      	str	r2, [r3, #0]
					butonKontrol5=1;
 80067b2:	4a32      	ldr	r2, [pc, #200]	@ (800687c <checkDemoModCalisma+0xadc>)
 80067b4:	2301      	movs	r3, #1
 80067b6:	7013      	strb	r3, [r2, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80067b8:	4b31      	ldr	r3, [pc, #196]	@ (8006880 <checkDemoModCalisma+0xae0>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	4b31      	ldr	r3, [pc, #196]	@ (8006884 <checkDemoModCalisma+0xae4>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2200      	movs	r2, #0
 80067c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80067c6:	637a      	str	r2, [r7, #52]	@ 0x34
 80067c8:	4b2f      	ldr	r3, [pc, #188]	@ (8006888 <checkDemoModCalisma+0xae8>)
 80067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80067d2:	4604      	mov	r4, r0
 80067d4:	4294      	cmp	r4, r2
 80067d6:	4199      	sbcs	r1, r3
 80067d8:	d303      	bcc.n	80067e2 <checkDemoModCalisma+0xa42>
 80067da:	4b28      	ldr	r3, [pc, #160]	@ (800687c <checkDemoModCalisma+0xadc>)
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10d      	bne.n	80067fe <checkDemoModCalisma+0xa5e>
 80067e2:	4b24      	ldr	r3, [pc, #144]	@ (8006874 <checkDemoModCalisma+0xad4>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	f083 0301 	eor.w	r3, r3, #1
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d106      	bne.n	80067fe <checkDemoModCalisma+0xa5e>
 80067f0:	4b21      	ldr	r3, [pc, #132]	@ (8006878 <checkDemoModCalisma+0xad8>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	f083 0301 	eor.w	r3, r3, #1
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <checkDemoModCalisma+0xa74>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80067fe:	2200      	movs	r2, #0
 8006800:	2110      	movs	r1, #16
 8006802:	481a      	ldr	r0, [pc, #104]	@ (800686c <checkDemoModCalisma+0xacc>)
 8006804:	f004 f851 	bl	800a8aa <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8006808:	4a19      	ldr	r2, [pc, #100]	@ (8006870 <checkDemoModCalisma+0xad0>)
 800680a:	2300      	movs	r3, #0
 800680c:	7013      	strb	r3, [r2, #0]
					butonKontrol5=0;
 800680e:	4a1b      	ldr	r2, [pc, #108]	@ (800687c <checkDemoModCalisma+0xadc>)
 8006810:	2300      	movs	r3, #0
 8006812:	7013      	strb	r3, [r2, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006814:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006818:	481c      	ldr	r0, [pc, #112]	@ (800688c <checkDemoModCalisma+0xaec>)
 800681a:	f004 f82f 	bl	800a87c <HAL_GPIO_ReadPin>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d137      	bne.n	8006894 <checkDemoModCalisma+0xaf4>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006824:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006828:	4818      	ldr	r0, [pc, #96]	@ (800688c <checkDemoModCalisma+0xaec>)
 800682a:	f004 f827 	bl	800a87c <HAL_GPIO_ReadPin>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d12f      	bne.n	8006894 <checkDemoModCalisma+0xaf4>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006834:	2104      	movs	r1, #4
 8006836:	4815      	ldr	r0, [pc, #84]	@ (800688c <checkDemoModCalisma+0xaec>)
 8006838:	f004 f820 	bl	800a87c <HAL_GPIO_ReadPin>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d128      	bne.n	8006894 <checkDemoModCalisma+0xaf4>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006842:	2102      	movs	r1, #2
 8006844:	4811      	ldr	r0, [pc, #68]	@ (800688c <checkDemoModCalisma+0xaec>)
 8006846:	f004 f819 	bl	800a87c <HAL_GPIO_ReadPin>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d121      	bne.n	8006894 <checkDemoModCalisma+0xaf4>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006850:	2101      	movs	r1, #1
 8006852:	480e      	ldr	r0, [pc, #56]	@ (800688c <checkDemoModCalisma+0xaec>)
 8006854:	f004 f812 	bl	800a87c <HAL_GPIO_ReadPin>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d11a      	bne.n	8006894 <checkDemoModCalisma+0xaf4>
					makineStop=1;
 800685e:	4a0c      	ldr	r2, [pc, #48]	@ (8006890 <checkDemoModCalisma+0xaf0>)
 8006860:	2301      	movs	r3, #1
 8006862:	7013      	strb	r3, [r2, #0]
 8006864:	e019      	b.n	800689a <checkDemoModCalisma+0xafa>
 8006866:	bf00      	nop
 8006868:	20001223 	.word	0x20001223
 800686c:	40011000 	.word	0x40011000
 8006870:	20001227 	.word	0x20001227
 8006874:	2000123e 	.word	0x2000123e
 8006878:	2000123f 	.word	0x2000123f
 800687c:	2000121f 	.word	0x2000121f
 8006880:	20001088 	.word	0x20001088
 8006884:	20001094 	.word	0x20001094
 8006888:	20001168 	.word	0x20001168
 800688c:	40010c00 	.word	0x40010c00
 8006890:	2000122e 	.word	0x2000122e
				} else {
					makineStop=0;
 8006894:	4a83      	ldr	r2, [pc, #524]	@ (8006aa4 <checkDemoModCalisma+0xd04>)
 8006896:	2300      	movs	r3, #0
 8006898:	7013      	strb	r3, [r2, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800689a:	4b83      	ldr	r3, [pc, #524]	@ (8006aa8 <checkDemoModCalisma+0xd08>)
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	d14c      	bne.n	800693e <checkDemoModCalisma+0xb9e>
 80068a4:	4b81      	ldr	r3, [pc, #516]	@ (8006aac <checkDemoModCalisma+0xd0c>)
 80068a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068aa:	1e51      	subs	r1, r2, #1
 80068ac:	430b      	orrs	r3, r1
 80068ae:	d005      	beq.n	80068bc <checkDemoModCalisma+0xb1c>
 80068b0:	4b7e      	ldr	r3, [pc, #504]	@ (8006aac <checkDemoModCalisma+0xd0c>)
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	1ed1      	subs	r1, r2, #3
 80068b8:	430b      	orrs	r3, r1
 80068ba:	d140      	bne.n	800693e <checkDemoModCalisma+0xb9e>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80068bc:	2180      	movs	r1, #128	@ 0x80
 80068be:	487c      	ldr	r0, [pc, #496]	@ (8006ab0 <checkDemoModCalisma+0xd10>)
 80068c0:	f003 ffdc 	bl	800a87c <HAL_GPIO_ReadPin>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d104      	bne.n	80068d4 <checkDemoModCalisma+0xb34>
 80068ca:	4b7a      	ldr	r3, [pc, #488]	@ (8006ab4 <checkDemoModCalisma+0xd14>)
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	d00d      	beq.n	80068f0 <checkDemoModCalisma+0xb50>
 80068d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80068d8:	4877      	ldr	r0, [pc, #476]	@ (8006ab8 <checkDemoModCalisma+0xd18>)
 80068da:	f003 ffcf 	bl	800a87c <HAL_GPIO_ReadPin>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d12c      	bne.n	800693e <checkDemoModCalisma+0xb9e>
 80068e4:	4b73      	ldr	r3, [pc, #460]	@ (8006ab4 <checkDemoModCalisma+0xd14>)
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	1e51      	subs	r1, r2, #1
 80068ec:	430b      	orrs	r3, r1
 80068ee:	d126      	bne.n	800693e <checkDemoModCalisma+0xb9e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80068f0:	2104      	movs	r1, #4
 80068f2:	486f      	ldr	r0, [pc, #444]	@ (8006ab0 <checkDemoModCalisma+0xd10>)
 80068f4:	f003 ffc2 	bl	800a87c <HAL_GPIO_ReadPin>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d004      	beq.n	8006908 <checkDemoModCalisma+0xb68>
 80068fe:	4b6f      	ldr	r3, [pc, #444]	@ (8006abc <checkDemoModCalisma+0xd1c>)
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	4313      	orrs	r3, r2
 8006906:	d11a      	bne.n	800693e <checkDemoModCalisma+0xb9e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006908:	2102      	movs	r1, #2
 800690a:	4869      	ldr	r0, [pc, #420]	@ (8006ab0 <checkDemoModCalisma+0xd10>)
 800690c:	f003 ffb6 	bl	800a87c <HAL_GPIO_ReadPin>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d113      	bne.n	800693e <checkDemoModCalisma+0xb9e>
						&&(butonKontrol==0)
 8006916:	4b6a      	ldr	r3, [pc, #424]	@ (8006ac0 <checkDemoModCalisma+0xd20>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	f083 0301 	eor.w	r3, r3, #1
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00c      	beq.n	800693e <checkDemoModCalisma+0xb9e>
						&&(makineStop==1)) {
 8006924:	4b5f      	ldr	r3, [pc, #380]	@ (8006aa4 <checkDemoModCalisma+0xd04>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d008      	beq.n	800693e <checkDemoModCalisma+0xb9e>

					kapi1prudhome=1;
 800692c:	4a65      	ldr	r2, [pc, #404]	@ (8006ac4 <checkDemoModCalisma+0xd24>)
 800692e:	2301      	movs	r3, #1
 8006930:	7013      	strb	r3, [r2, #0]
					timer = millis;
 8006932:	4b65      	ldr	r3, [pc, #404]	@ (8006ac8 <checkDemoModCalisma+0xd28>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a65      	ldr	r2, [pc, #404]	@ (8006acc <checkDemoModCalisma+0xd2c>)
 8006938:	6013      	str	r3, [r2, #0]
					bekle();
 800693a:	f7fd fbdd 	bl	80040f8 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800693e:	4b62      	ldr	r3, [pc, #392]	@ (8006ac8 <checkDemoModCalisma+0xd28>)
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	4b62      	ldr	r3, [pc, #392]	@ (8006acc <checkDemoModCalisma+0xd2c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2200      	movs	r2, #0
 800694a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800694c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800694e:	4b60      	ldr	r3, [pc, #384]	@ (8006ad0 <checkDemoModCalisma+0xd30>)
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006958:	4604      	mov	r4, r0
 800695a:	4294      	cmp	r4, r2
 800695c:	4199      	sbcs	r1, r3
 800695e:	d212      	bcs.n	8006986 <checkDemoModCalisma+0xbe6>
 8006960:	2104      	movs	r1, #4
 8006962:	4853      	ldr	r0, [pc, #332]	@ (8006ab0 <checkDemoModCalisma+0xd10>)
 8006964:	f003 ff8a 	bl	800a87c <HAL_GPIO_ReadPin>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <checkDemoModCalisma+0xbe6>
 800696e:	4b53      	ldr	r3, [pc, #332]	@ (8006abc <checkDemoModCalisma+0xd1c>)
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	4313      	orrs	r3, r2
 8006976:	d006      	beq.n	8006986 <checkDemoModCalisma+0xbe6>
 8006978:	4b4a      	ldr	r3, [pc, #296]	@ (8006aa4 <checkDemoModCalisma+0xd04>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	f083 0301 	eor.w	r3, r3, #1
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <checkDemoModCalisma+0xbec>
					kapi1prudhome=0;
 8006986:	4b4f      	ldr	r3, [pc, #316]	@ (8006ac4 <checkDemoModCalisma+0xd24>)
 8006988:	2200      	movs	r2, #0
 800698a:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800698c:	4b46      	ldr	r3, [pc, #280]	@ (8006aa8 <checkDemoModCalisma+0xd08>)
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	1e51      	subs	r1, r2, #1
 8006994:	430b      	orrs	r3, r1
 8006996:	d140      	bne.n	8006a1a <checkDemoModCalisma+0xc7a>
 8006998:	4b44      	ldr	r3, [pc, #272]	@ (8006aac <checkDemoModCalisma+0xd0c>)
 800699a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699e:	1e51      	subs	r1, r2, #1
 80069a0:	430b      	orrs	r3, r1
 80069a2:	d005      	beq.n	80069b0 <checkDemoModCalisma+0xc10>
 80069a4:	4b41      	ldr	r3, [pc, #260]	@ (8006aac <checkDemoModCalisma+0xd0c>)
 80069a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069aa:	1ed1      	subs	r1, r2, #3
 80069ac:	430b      	orrs	r3, r1
 80069ae:	d134      	bne.n	8006a1a <checkDemoModCalisma+0xc7a>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80069b0:	2104      	movs	r1, #4
 80069b2:	483f      	ldr	r0, [pc, #252]	@ (8006ab0 <checkDemoModCalisma+0xd10>)
 80069b4:	f003 ff62 	bl	800a87c <HAL_GPIO_ReadPin>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d004      	beq.n	80069c8 <checkDemoModCalisma+0xc28>
 80069be:	4b3f      	ldr	r3, [pc, #252]	@ (8006abc <checkDemoModCalisma+0xd1c>)
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	d128      	bne.n	8006a1a <checkDemoModCalisma+0xc7a>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80069c8:	2102      	movs	r1, #2
 80069ca:	4839      	ldr	r0, [pc, #228]	@ (8006ab0 <checkDemoModCalisma+0xd10>)
 80069cc:	f003 ff56 	bl	800a87c <HAL_GPIO_ReadPin>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d121      	bne.n	8006a1a <checkDemoModCalisma+0xc7a>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80069d6:	2180      	movs	r1, #128	@ 0x80
 80069d8:	4835      	ldr	r0, [pc, #212]	@ (8006ab0 <checkDemoModCalisma+0xd10>)
 80069da:	f003 ff4f 	bl	800a87c <HAL_GPIO_ReadPin>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d104      	bne.n	80069ee <checkDemoModCalisma+0xc4e>
 80069e4:	4b33      	ldr	r3, [pc, #204]	@ (8006ab4 <checkDemoModCalisma+0xd14>)
 80069e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	d00d      	beq.n	8006a0a <checkDemoModCalisma+0xc6a>
 80069ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80069f2:	4831      	ldr	r0, [pc, #196]	@ (8006ab8 <checkDemoModCalisma+0xd18>)
 80069f4:	f003 ff42 	bl	800a87c <HAL_GPIO_ReadPin>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10d      	bne.n	8006a1a <checkDemoModCalisma+0xc7a>
 80069fe:	4b2d      	ldr	r3, [pc, #180]	@ (8006ab4 <checkDemoModCalisma+0xd14>)
 8006a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a04:	1e51      	subs	r1, r2, #1
 8006a06:	430b      	orrs	r3, r1
 8006a08:	d107      	bne.n	8006a1a <checkDemoModCalisma+0xc7a>
						&&(makineStop==1)) {
 8006a0a:	4b26      	ldr	r3, [pc, #152]	@ (8006aa4 <checkDemoModCalisma+0xd04>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <checkDemoModCalisma+0xc7a>

					kapi1butonkontrol=1;
 8006a12:	4b30      	ldr	r3, [pc, #192]	@ (8006ad4 <checkDemoModCalisma+0xd34>)
 8006a14:	2201      	movs	r2, #1
 8006a16:	701a      	strb	r2, [r3, #0]
 8006a18:	e002      	b.n	8006a20 <checkDemoModCalisma+0xc80>
				} else {
					kapi1butonkontrol=0;
 8006a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8006ad4 <checkDemoModCalisma+0xd34>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006a20:	4b21      	ldr	r3, [pc, #132]	@ (8006aa8 <checkDemoModCalisma+0xd08>)
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	1e91      	subs	r1, r2, #2
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	d126      	bne.n	8006a7a <checkDemoModCalisma+0xcda>
 8006a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8006aac <checkDemoModCalisma+0xd0c>)
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	1e51      	subs	r1, r2, #1
 8006a34:	430b      	orrs	r3, r1
 8006a36:	d005      	beq.n	8006a44 <checkDemoModCalisma+0xca4>
 8006a38:	4b1c      	ldr	r3, [pc, #112]	@ (8006aac <checkDemoModCalisma+0xd0c>)
 8006a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3e:	1ed1      	subs	r1, r2, #3
 8006a40:	430b      	orrs	r3, r1
 8006a42:	d11a      	bne.n	8006a7a <checkDemoModCalisma+0xcda>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006a44:	2104      	movs	r1, #4
 8006a46:	481a      	ldr	r0, [pc, #104]	@ (8006ab0 <checkDemoModCalisma+0xd10>)
 8006a48:	f003 ff18 	bl	800a87c <HAL_GPIO_ReadPin>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d004      	beq.n	8006a5c <checkDemoModCalisma+0xcbc>
 8006a52:	4b1a      	ldr	r3, [pc, #104]	@ (8006abc <checkDemoModCalisma+0xd1c>)
 8006a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	d10e      	bne.n	8006a7a <checkDemoModCalisma+0xcda>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006a5c:	2102      	movs	r1, #2
 8006a5e:	4814      	ldr	r0, [pc, #80]	@ (8006ab0 <checkDemoModCalisma+0xd10>)
 8006a60:	f003 ff0c 	bl	800a87c <HAL_GPIO_ReadPin>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d107      	bne.n	8006a7a <checkDemoModCalisma+0xcda>
						&&(makineStop==1)) {
 8006a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006aa4 <checkDemoModCalisma+0xd04>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <checkDemoModCalisma+0xcda>

					kapi1pizzato=1;
 8006a72:	4b19      	ldr	r3, [pc, #100]	@ (8006ad8 <checkDemoModCalisma+0xd38>)
 8006a74:	2201      	movs	r2, #1
 8006a76:	701a      	strb	r2, [r3, #0]
 8006a78:	e002      	b.n	8006a80 <checkDemoModCalisma+0xce0>
				} else {
					kapi1pizzato=0;
 8006a7a:	4b17      	ldr	r3, [pc, #92]	@ (8006ad8 <checkDemoModCalisma+0xd38>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8006a80:	4b14      	ldr	r3, [pc, #80]	@ (8006ad4 <checkDemoModCalisma+0xd34>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d107      	bne.n	8006a98 <checkDemoModCalisma+0xcf8>
 8006a88:	4b13      	ldr	r3, [pc, #76]	@ (8006ad8 <checkDemoModCalisma+0xd38>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d103      	bne.n	8006a98 <checkDemoModCalisma+0xcf8>
 8006a90:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac4 <checkDemoModCalisma+0xd24>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d023      	beq.n	8006ae0 <checkDemoModCalisma+0xd40>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006a98:	2201      	movs	r2, #1
 8006a9a:	2180      	movs	r1, #128	@ 0x80
 8006a9c:	480f      	ldr	r0, [pc, #60]	@ (8006adc <checkDemoModCalisma+0xd3c>)
 8006a9e:	f003 ff04 	bl	800a8aa <HAL_GPIO_WritePin>
 8006aa2:	e022      	b.n	8006aea <checkDemoModCalisma+0xd4a>
 8006aa4:	2000122e 	.word	0x2000122e
 8006aa8:	20001100 	.word	0x20001100
 8006aac:	200010f8 	.word	0x200010f8
 8006ab0:	40011000 	.word	0x40011000
 8006ab4:	20001118 	.word	0x20001118
 8006ab8:	40010c00 	.word	0x40010c00
 8006abc:	200010e8 	.word	0x200010e8
 8006ac0:	2000121b 	.word	0x2000121b
 8006ac4:	2000122f 	.word	0x2000122f
 8006ac8:	20001088 	.word	0x20001088
 8006acc:	2000108c 	.word	0x2000108c
 8006ad0:	20001180 	.word	0x20001180
 8006ad4:	20001230 	.word	0x20001230
 8006ad8:	20001231 	.word	0x20001231
 8006adc:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2180      	movs	r1, #128	@ 0x80
 8006ae4:	488e      	ldr	r0, [pc, #568]	@ (8006d20 <checkDemoModCalisma+0xf80>)
 8006ae6:	f003 fee0 	bl	800a8aa <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006aea:	4b8e      	ldr	r3, [pc, #568]	@ (8006d24 <checkDemoModCalisma+0xf84>)
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	d148      	bne.n	8006b86 <checkDemoModCalisma+0xde6>
 8006af4:	4b8c      	ldr	r3, [pc, #560]	@ (8006d28 <checkDemoModCalisma+0xf88>)
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	1e51      	subs	r1, r2, #1
 8006afc:	430b      	orrs	r3, r1
 8006afe:	d005      	beq.n	8006b0c <checkDemoModCalisma+0xd6c>
 8006b00:	4b89      	ldr	r3, [pc, #548]	@ (8006d28 <checkDemoModCalisma+0xf88>)
 8006b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b06:	1ed1      	subs	r1, r2, #3
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	d13c      	bne.n	8006b86 <checkDemoModCalisma+0xde6>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006b0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b10:	4886      	ldr	r0, [pc, #536]	@ (8006d2c <checkDemoModCalisma+0xf8c>)
 8006b12:	f003 feb3 	bl	800a87c <HAL_GPIO_ReadPin>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d104      	bne.n	8006b26 <checkDemoModCalisma+0xd86>
 8006b1c:	4b84      	ldr	r3, [pc, #528]	@ (8006d30 <checkDemoModCalisma+0xf90>)
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	d00d      	beq.n	8006b42 <checkDemoModCalisma+0xda2>
 8006b26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006b2a:	4882      	ldr	r0, [pc, #520]	@ (8006d34 <checkDemoModCalisma+0xf94>)
 8006b2c:	f003 fea6 	bl	800a87c <HAL_GPIO_ReadPin>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d127      	bne.n	8006b86 <checkDemoModCalisma+0xde6>
 8006b36:	4b7e      	ldr	r3, [pc, #504]	@ (8006d30 <checkDemoModCalisma+0xf90>)
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	1e51      	subs	r1, r2, #1
 8006b3e:	430b      	orrs	r3, r1
 8006b40:	d121      	bne.n	8006b86 <checkDemoModCalisma+0xde6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006b42:	2102      	movs	r1, #2
 8006b44:	4879      	ldr	r0, [pc, #484]	@ (8006d2c <checkDemoModCalisma+0xf8c>)
 8006b46:	f003 fe99 	bl	800a87c <HAL_GPIO_ReadPin>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d11a      	bne.n	8006b86 <checkDemoModCalisma+0xde6>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006b50:	2104      	movs	r1, #4
 8006b52:	4876      	ldr	r0, [pc, #472]	@ (8006d2c <checkDemoModCalisma+0xf8c>)
 8006b54:	f003 fe92 	bl	800a87c <HAL_GPIO_ReadPin>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d113      	bne.n	8006b86 <checkDemoModCalisma+0xde6>
						&&(makineStop==1)
 8006b5e:	4b76      	ldr	r3, [pc, #472]	@ (8006d38 <checkDemoModCalisma+0xf98>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00f      	beq.n	8006b86 <checkDemoModCalisma+0xde6>
						&&(butonKontrol==0)) {
 8006b66:	4b75      	ldr	r3, [pc, #468]	@ (8006d3c <checkDemoModCalisma+0xf9c>)
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	f083 0301 	eor.w	r3, r3, #1
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d008      	beq.n	8006b86 <checkDemoModCalisma+0xde6>

					kapi2prudhome=1;
 8006b74:	4b72      	ldr	r3, [pc, #456]	@ (8006d40 <checkDemoModCalisma+0xfa0>)
 8006b76:	2201      	movs	r2, #1
 8006b78:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8006b7a:	4b72      	ldr	r3, [pc, #456]	@ (8006d44 <checkDemoModCalisma+0xfa4>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a72      	ldr	r2, [pc, #456]	@ (8006d48 <checkDemoModCalisma+0xfa8>)
 8006b80:	6013      	str	r3, [r2, #0]
					bekle();
 8006b82:	f7fd fab9 	bl	80040f8 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8006b86:	4b6f      	ldr	r3, [pc, #444]	@ (8006d44 <checkDemoModCalisma+0xfa4>)
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	4b6f      	ldr	r3, [pc, #444]	@ (8006d48 <checkDemoModCalisma+0xfa8>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	2200      	movs	r2, #0
 8006b92:	623b      	str	r3, [r7, #32]
 8006b94:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b96:	4b6d      	ldr	r3, [pc, #436]	@ (8006d4c <checkDemoModCalisma+0xfac>)
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	4294      	cmp	r4, r2
 8006ba4:	4199      	sbcs	r1, r3
 8006ba6:	d20d      	bcs.n	8006bc4 <checkDemoModCalisma+0xe24>
 8006ba8:	2102      	movs	r1, #2
 8006baa:	4860      	ldr	r0, [pc, #384]	@ (8006d2c <checkDemoModCalisma+0xf8c>)
 8006bac:	f003 fe66 	bl	800a87c <HAL_GPIO_ReadPin>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d006      	beq.n	8006bc4 <checkDemoModCalisma+0xe24>
 8006bb6:	4b60      	ldr	r3, [pc, #384]	@ (8006d38 <checkDemoModCalisma+0xf98>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	f083 0301 	eor.w	r3, r3, #1
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <checkDemoModCalisma+0xe2a>
					kapi2prudhome=0;
 8006bc4:	4b5e      	ldr	r3, [pc, #376]	@ (8006d40 <checkDemoModCalisma+0xfa0>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006bca:	4b56      	ldr	r3, [pc, #344]	@ (8006d24 <checkDemoModCalisma+0xf84>)
 8006bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd0:	1e51      	subs	r1, r2, #1
 8006bd2:	430b      	orrs	r3, r1
 8006bd4:	d13c      	bne.n	8006c50 <checkDemoModCalisma+0xeb0>
 8006bd6:	4b54      	ldr	r3, [pc, #336]	@ (8006d28 <checkDemoModCalisma+0xf88>)
 8006bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bdc:	1e51      	subs	r1, r2, #1
 8006bde:	430b      	orrs	r3, r1
 8006be0:	d005      	beq.n	8006bee <checkDemoModCalisma+0xe4e>
 8006be2:	4b51      	ldr	r3, [pc, #324]	@ (8006d28 <checkDemoModCalisma+0xf88>)
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	1ed1      	subs	r1, r2, #3
 8006bea:	430b      	orrs	r3, r1
 8006bec:	d130      	bne.n	8006c50 <checkDemoModCalisma+0xeb0>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006bee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006bf2:	484e      	ldr	r0, [pc, #312]	@ (8006d2c <checkDemoModCalisma+0xf8c>)
 8006bf4:	f003 fe42 	bl	800a87c <HAL_GPIO_ReadPin>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d104      	bne.n	8006c08 <checkDemoModCalisma+0xe68>
 8006bfe:	4b4c      	ldr	r3, [pc, #304]	@ (8006d30 <checkDemoModCalisma+0xf90>)
 8006c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	d00d      	beq.n	8006c24 <checkDemoModCalisma+0xe84>
 8006c08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006c0c:	4849      	ldr	r0, [pc, #292]	@ (8006d34 <checkDemoModCalisma+0xf94>)
 8006c0e:	f003 fe35 	bl	800a87c <HAL_GPIO_ReadPin>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d11b      	bne.n	8006c50 <checkDemoModCalisma+0xeb0>
 8006c18:	4b45      	ldr	r3, [pc, #276]	@ (8006d30 <checkDemoModCalisma+0xf90>)
 8006c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1e:	1e51      	subs	r1, r2, #1
 8006c20:	430b      	orrs	r3, r1
 8006c22:	d115      	bne.n	8006c50 <checkDemoModCalisma+0xeb0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006c24:	2102      	movs	r1, #2
 8006c26:	4841      	ldr	r0, [pc, #260]	@ (8006d2c <checkDemoModCalisma+0xf8c>)
 8006c28:	f003 fe28 	bl	800a87c <HAL_GPIO_ReadPin>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d10e      	bne.n	8006c50 <checkDemoModCalisma+0xeb0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006c32:	2104      	movs	r1, #4
 8006c34:	483d      	ldr	r0, [pc, #244]	@ (8006d2c <checkDemoModCalisma+0xf8c>)
 8006c36:	f003 fe21 	bl	800a87c <HAL_GPIO_ReadPin>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d107      	bne.n	8006c50 <checkDemoModCalisma+0xeb0>
						&&(makineStop==1)) {
 8006c40:	4b3d      	ldr	r3, [pc, #244]	@ (8006d38 <checkDemoModCalisma+0xf98>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <checkDemoModCalisma+0xeb0>

					kapi2butonkontrol=1;
 8006c48:	4b41      	ldr	r3, [pc, #260]	@ (8006d50 <checkDemoModCalisma+0xfb0>)
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	e002      	b.n	8006c56 <checkDemoModCalisma+0xeb6>
				} else {
					kapi2butonkontrol=0;
 8006c50:	4b3f      	ldr	r3, [pc, #252]	@ (8006d50 <checkDemoModCalisma+0xfb0>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006c56:	4b33      	ldr	r3, [pc, #204]	@ (8006d24 <checkDemoModCalisma+0xf84>)
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	1e91      	subs	r1, r2, #2
 8006c5e:	430b      	orrs	r3, r1
 8006c60:	d121      	bne.n	8006ca6 <checkDemoModCalisma+0xf06>
 8006c62:	4b31      	ldr	r3, [pc, #196]	@ (8006d28 <checkDemoModCalisma+0xf88>)
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	1e51      	subs	r1, r2, #1
 8006c6a:	430b      	orrs	r3, r1
 8006c6c:	d005      	beq.n	8006c7a <checkDemoModCalisma+0xeda>
 8006c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8006d28 <checkDemoModCalisma+0xf88>)
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	1ed1      	subs	r1, r2, #3
 8006c76:	430b      	orrs	r3, r1
 8006c78:	d115      	bne.n	8006ca6 <checkDemoModCalisma+0xf06>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006c7a:	2102      	movs	r1, #2
 8006c7c:	482b      	ldr	r0, [pc, #172]	@ (8006d2c <checkDemoModCalisma+0xf8c>)
 8006c7e:	f003 fdfd 	bl	800a87c <HAL_GPIO_ReadPin>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d10e      	bne.n	8006ca6 <checkDemoModCalisma+0xf06>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006c88:	2104      	movs	r1, #4
 8006c8a:	4828      	ldr	r0, [pc, #160]	@ (8006d2c <checkDemoModCalisma+0xf8c>)
 8006c8c:	f003 fdf6 	bl	800a87c <HAL_GPIO_ReadPin>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d107      	bne.n	8006ca6 <checkDemoModCalisma+0xf06>
						&&(makineStop==1)) {
 8006c96:	4b28      	ldr	r3, [pc, #160]	@ (8006d38 <checkDemoModCalisma+0xf98>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <checkDemoModCalisma+0xf06>

					kapi2pizzato=1;
 8006c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8006d54 <checkDemoModCalisma+0xfb4>)
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	701a      	strb	r2, [r3, #0]
 8006ca4:	e002      	b.n	8006cac <checkDemoModCalisma+0xf0c>
				} else {
					kapi2pizzato=0;
 8006ca6:	4b2b      	ldr	r3, [pc, #172]	@ (8006d54 <checkDemoModCalisma+0xfb4>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8006cac:	4b28      	ldr	r3, [pc, #160]	@ (8006d50 <checkDemoModCalisma+0xfb0>)
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d107      	bne.n	8006cc4 <checkDemoModCalisma+0xf24>
 8006cb4:	4b27      	ldr	r3, [pc, #156]	@ (8006d54 <checkDemoModCalisma+0xfb4>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d103      	bne.n	8006cc4 <checkDemoModCalisma+0xf24>
 8006cbc:	4b20      	ldr	r3, [pc, #128]	@ (8006d40 <checkDemoModCalisma+0xfa0>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <checkDemoModCalisma+0xf30>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	2140      	movs	r1, #64	@ 0x40
 8006cc8:	4815      	ldr	r0, [pc, #84]	@ (8006d20 <checkDemoModCalisma+0xf80>)
 8006cca:	f003 fdee 	bl	800a8aa <HAL_GPIO_WritePin>
 8006cce:	e004      	b.n	8006cda <checkDemoModCalisma+0xf3a>
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2140      	movs	r1, #64	@ 0x40
 8006cd4:	4812      	ldr	r0, [pc, #72]	@ (8006d20 <checkDemoModCalisma+0xf80>)
 8006cd6:	f003 fde8 	bl	800a8aa <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 8006cda:	4b1f      	ldr	r3, [pc, #124]	@ (8006d58 <checkDemoModCalisma+0xfb8>)
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	d005      	beq.n	8006cf0 <checkDemoModCalisma+0xf50>
 8006ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8006d58 <checkDemoModCalisma+0xfb8>)
 8006ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cea:	1e91      	subs	r1, r2, #2
 8006cec:	430b      	orrs	r3, r1
 8006cee:	d139      	bne.n	8006d64 <checkDemoModCalisma+0xfc4>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006cf0:	2104      	movs	r1, #4
 8006cf2:	480e      	ldr	r0, [pc, #56]	@ (8006d2c <checkDemoModCalisma+0xf8c>)
 8006cf4:	f003 fdc2 	bl	800a87c <HAL_GPIO_ReadPin>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d004      	beq.n	8006d08 <checkDemoModCalisma+0xf68>
 8006cfe:	4b17      	ldr	r3, [pc, #92]	@ (8006d5c <checkDemoModCalisma+0xfbc>)
 8006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	d12d      	bne.n	8006d64 <checkDemoModCalisma+0xfc4>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8006d08:	2102      	movs	r1, #2
 8006d0a:	4808      	ldr	r0, [pc, #32]	@ (8006d2c <checkDemoModCalisma+0xf8c>)
 8006d0c:	f003 fdb6 	bl	800a87c <HAL_GPIO_ReadPin>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d126      	bne.n	8006d64 <checkDemoModCalisma+0xfc4>

					kapiTablaAcKonumKat1=1;
 8006d16:	4b12      	ldr	r3, [pc, #72]	@ (8006d60 <checkDemoModCalisma+0xfc0>)
 8006d18:	2201      	movs	r2, #1
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	e025      	b.n	8006d6a <checkDemoModCalisma+0xfca>
 8006d1e:	bf00      	nop
 8006d20:	40010800 	.word	0x40010800
 8006d24:	20001108 	.word	0x20001108
 8006d28:	200010f8 	.word	0x200010f8
 8006d2c:	40011000 	.word	0x40011000
 8006d30:	20001118 	.word	0x20001118
 8006d34:	40010c00 	.word	0x40010c00
 8006d38:	2000122e 	.word	0x2000122e
 8006d3c:	2000121b 	.word	0x2000121b
 8006d40:	20001232 	.word	0x20001232
 8006d44:	20001088 	.word	0x20001088
 8006d48:	2000108c 	.word	0x2000108c
 8006d4c:	20001188 	.word	0x20001188
 8006d50:	20001233 	.word	0x20001233
 8006d54:	20001234 	.word	0x20001234
 8006d58:	20001120 	.word	0x20001120
 8006d5c:	200010e8 	.word	0x200010e8
 8006d60:	20001238 	.word	0x20001238
				} else {
					kapiTablaAcKonumKat1=0;
 8006d64:	4b98      	ldr	r3, [pc, #608]	@ (8006fc8 <checkDemoModCalisma+0x1228>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8006d6a:	4b98      	ldr	r3, [pc, #608]	@ (8006fcc <checkDemoModCalisma+0x122c>)
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	1e51      	subs	r1, r2, #1
 8006d72:	430b      	orrs	r3, r1
 8006d74:	d005      	beq.n	8006d82 <checkDemoModCalisma+0xfe2>
 8006d76:	4b95      	ldr	r3, [pc, #596]	@ (8006fcc <checkDemoModCalisma+0x122c>)
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	1e91      	subs	r1, r2, #2
 8006d7e:	430b      	orrs	r3, r1
 8006d80:	d111      	bne.n	8006da6 <checkDemoModCalisma+0x1006>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006d82:	2102      	movs	r1, #2
 8006d84:	4892      	ldr	r0, [pc, #584]	@ (8006fd0 <checkDemoModCalisma+0x1230>)
 8006d86:	f003 fd79 	bl	800a87c <HAL_GPIO_ReadPin>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d10a      	bne.n	8006da6 <checkDemoModCalisma+0x1006>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8006d90:	2104      	movs	r1, #4
 8006d92:	488f      	ldr	r0, [pc, #572]	@ (8006fd0 <checkDemoModCalisma+0x1230>)
 8006d94:	f003 fd72 	bl	800a87c <HAL_GPIO_ReadPin>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d103      	bne.n	8006da6 <checkDemoModCalisma+0x1006>

					kapiTablaAcKonumKat2=1;
 8006d9e:	4b8d      	ldr	r3, [pc, #564]	@ (8006fd4 <checkDemoModCalisma+0x1234>)
 8006da0:	2201      	movs	r2, #1
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	e002      	b.n	8006dac <checkDemoModCalisma+0x100c>
				} else {
					kapiTablaAcKonumKat2=0;
 8006da6:	4b8b      	ldr	r3, [pc, #556]	@ (8006fd4 <checkDemoModCalisma+0x1234>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8006dac:	4b86      	ldr	r3, [pc, #536]	@ (8006fc8 <checkDemoModCalisma+0x1228>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d011      	beq.n	8006dd8 <checkDemoModCalisma+0x1038>
						&& kapiAcTipi==1
 8006db4:	4b88      	ldr	r3, [pc, #544]	@ (8006fd8 <checkDemoModCalisma+0x1238>)
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	1e51      	subs	r1, r2, #1
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	d10b      	bne.n	8006dd8 <checkDemoModCalisma+0x1038>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8006dc0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006dc4:	4885      	ldr	r0, [pc, #532]	@ (8006fdc <checkDemoModCalisma+0x123c>)
 8006dc6:	f003 fd59 	bl	800a87c <HAL_GPIO_ReadPin>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d103      	bne.n	8006dd8 <checkDemoModCalisma+0x1038>

					kapiactablaesp1=1;
 8006dd0:	4b83      	ldr	r3, [pc, #524]	@ (8006fe0 <checkDemoModCalisma+0x1240>)
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	701a      	strb	r2, [r3, #0]
 8006dd6:	e002      	b.n	8006dde <checkDemoModCalisma+0x103e>
				} else {
					kapiactablaesp1=0;
 8006dd8:	4b81      	ldr	r3, [pc, #516]	@ (8006fe0 <checkDemoModCalisma+0x1240>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8006dde:	4b7d      	ldr	r3, [pc, #500]	@ (8006fd4 <checkDemoModCalisma+0x1234>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d011      	beq.n	8006e0a <checkDemoModCalisma+0x106a>
						&& kapiAcTipi==1
 8006de6:	4b7c      	ldr	r3, [pc, #496]	@ (8006fd8 <checkDemoModCalisma+0x1238>)
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	1e51      	subs	r1, r2, #1
 8006dee:	430b      	orrs	r3, r1
 8006df0:	d10b      	bne.n	8006e0a <checkDemoModCalisma+0x106a>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8006df2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006df6:	4879      	ldr	r0, [pc, #484]	@ (8006fdc <checkDemoModCalisma+0x123c>)
 8006df8:	f003 fd40 	bl	800a87c <HAL_GPIO_ReadPin>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d103      	bne.n	8006e0a <checkDemoModCalisma+0x106a>

					kapiactablaesp2=1;
 8006e02:	4b78      	ldr	r3, [pc, #480]	@ (8006fe4 <checkDemoModCalisma+0x1244>)
 8006e04:	2201      	movs	r2, #1
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	e002      	b.n	8006e10 <checkDemoModCalisma+0x1070>
				} else {
					kapiactablaesp2=0;
 8006e0a:	4b76      	ldr	r3, [pc, #472]	@ (8006fe4 <checkDemoModCalisma+0x1244>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006e10:	4b75      	ldr	r3, [pc, #468]	@ (8006fe8 <checkDemoModCalisma+0x1248>)
 8006e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	d159      	bne.n	8006ece <checkDemoModCalisma+0x112e>
 8006e1a:	4b74      	ldr	r3, [pc, #464]	@ (8006fec <checkDemoModCalisma+0x124c>)
 8006e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e20:	1e91      	subs	r1, r2, #2
 8006e22:	430b      	orrs	r3, r1
 8006e24:	d005      	beq.n	8006e32 <checkDemoModCalisma+0x1092>
 8006e26:	4b71      	ldr	r3, [pc, #452]	@ (8006fec <checkDemoModCalisma+0x124c>)
 8006e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2c:	1ed1      	subs	r1, r2, #3
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	d14d      	bne.n	8006ece <checkDemoModCalisma+0x112e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006e32:	4b65      	ldr	r3, [pc, #404]	@ (8006fc8 <checkDemoModCalisma+0x1228>)
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d103      	bne.n	8006e42 <checkDemoModCalisma+0x10a2>
 8006e3a:	4b66      	ldr	r3, [pc, #408]	@ (8006fd4 <checkDemoModCalisma+0x1234>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d045      	beq.n	8006ece <checkDemoModCalisma+0x112e>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8006e42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006e46:	4862      	ldr	r0, [pc, #392]	@ (8006fd0 <checkDemoModCalisma+0x1230>)
 8006e48:	f003 fd18 	bl	800a87c <HAL_GPIO_ReadPin>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01c      	beq.n	8006e8c <checkDemoModCalisma+0x10ec>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8006e52:	2180      	movs	r1, #128	@ 0x80
 8006e54:	485e      	ldr	r0, [pc, #376]	@ (8006fd0 <checkDemoModCalisma+0x1230>)
 8006e56:	f003 fd11 	bl	800a87c <HAL_GPIO_ReadPin>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d106      	bne.n	8006e6e <checkDemoModCalisma+0x10ce>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8006e60:	2104      	movs	r1, #4
 8006e62:	485b      	ldr	r0, [pc, #364]	@ (8006fd0 <checkDemoModCalisma+0x1230>)
 8006e64:	f003 fd0a 	bl	800a87c <HAL_GPIO_ReadPin>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d00e      	beq.n	8006e8c <checkDemoModCalisma+0x10ec>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8006e6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006e72:	4857      	ldr	r0, [pc, #348]	@ (8006fd0 <checkDemoModCalisma+0x1230>)
 8006e74:	f003 fd02 	bl	800a87c <HAL_GPIO_ReadPin>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10b      	bne.n	8006e96 <checkDemoModCalisma+0x10f6>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8006e7e:	2102      	movs	r1, #2
 8006e80:	4853      	ldr	r0, [pc, #332]	@ (8006fd0 <checkDemoModCalisma+0x1230>)
 8006e82:	f003 fcfb 	bl	800a87c <HAL_GPIO_ReadPin>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d104      	bne.n	8006e96 <checkDemoModCalisma+0x10f6>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006e8c:	4b52      	ldr	r3, [pc, #328]	@ (8006fd8 <checkDemoModCalisma+0x1238>)
 8006e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	d007      	beq.n	8006ea6 <checkDemoModCalisma+0x1106>
 8006e96:	4b52      	ldr	r3, [pc, #328]	@ (8006fe0 <checkDemoModCalisma+0x1240>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d103      	bne.n	8006ea6 <checkDemoModCalisma+0x1106>
 8006e9e:	4b51      	ldr	r3, [pc, #324]	@ (8006fe4 <checkDemoModCalisma+0x1244>)
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d013      	beq.n	8006ece <checkDemoModCalisma+0x112e>
						&&(makineStop==1)
 8006ea6:	4b52      	ldr	r3, [pc, #328]	@ (8006ff0 <checkDemoModCalisma+0x1250>)
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00f      	beq.n	8006ece <checkDemoModCalisma+0x112e>
						&&(butonKontrol==0)) {
 8006eae:	4b51      	ldr	r3, [pc, #324]	@ (8006ff4 <checkDemoModCalisma+0x1254>)
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	f083 0301 	eor.w	r3, r3, #1
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d008      	beq.n	8006ece <checkDemoModCalisma+0x112e>

					kapiTablaprudhome=1;
 8006ebc:	4b4e      	ldr	r3, [pc, #312]	@ (8006ff8 <checkDemoModCalisma+0x1258>)
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8006ec2:	4b4e      	ldr	r3, [pc, #312]	@ (8006ffc <checkDemoModCalisma+0x125c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a4e      	ldr	r2, [pc, #312]	@ (8007000 <checkDemoModCalisma+0x1260>)
 8006ec8:	6013      	str	r3, [r2, #0]
					bekle();
 8006eca:	f7fd f915 	bl	80040f8 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8006ece:	4b4b      	ldr	r3, [pc, #300]	@ (8006ffc <checkDemoModCalisma+0x125c>)
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	4b4b      	ldr	r3, [pc, #300]	@ (8007000 <checkDemoModCalisma+0x1260>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2200      	movs	r2, #0
 8006eda:	61bb      	str	r3, [r7, #24]
 8006edc:	61fa      	str	r2, [r7, #28]
 8006ede:	4b49      	ldr	r3, [pc, #292]	@ (8007004 <checkDemoModCalisma+0x1264>)
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006ee8:	4604      	mov	r4, r0
 8006eea:	4294      	cmp	r4, r2
 8006eec:	4199      	sbcs	r1, r3
 8006eee:	d214      	bcs.n	8006f1a <checkDemoModCalisma+0x117a>
 8006ef0:	4b35      	ldr	r3, [pc, #212]	@ (8006fc8 <checkDemoModCalisma+0x1228>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	f083 0301 	eor.w	r3, r3, #1
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d006      	beq.n	8006f0c <checkDemoModCalisma+0x116c>
 8006efe:	4b35      	ldr	r3, [pc, #212]	@ (8006fd4 <checkDemoModCalisma+0x1234>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	f083 0301 	eor.w	r3, r3, #1
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d106      	bne.n	8006f1a <checkDemoModCalisma+0x117a>
 8006f0c:	4b38      	ldr	r3, [pc, #224]	@ (8006ff0 <checkDemoModCalisma+0x1250>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	f083 0301 	eor.w	r3, r3, #1
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <checkDemoModCalisma+0x1180>
					kapiTablaprudhome=0;
 8006f1a:	4b37      	ldr	r3, [pc, #220]	@ (8006ff8 <checkDemoModCalisma+0x1258>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006f20:	4b31      	ldr	r3, [pc, #196]	@ (8006fe8 <checkDemoModCalisma+0x1248>)
 8006f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f26:	1e51      	subs	r1, r2, #1
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	d16f      	bne.n	800700c <checkDemoModCalisma+0x126c>
 8006f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8006fec <checkDemoModCalisma+0x124c>)
 8006f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f32:	1e91      	subs	r1, r2, #2
 8006f34:	430b      	orrs	r3, r1
 8006f36:	d005      	beq.n	8006f44 <checkDemoModCalisma+0x11a4>
 8006f38:	4b2c      	ldr	r3, [pc, #176]	@ (8006fec <checkDemoModCalisma+0x124c>)
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	1ed1      	subs	r1, r2, #3
 8006f40:	430b      	orrs	r3, r1
 8006f42:	d163      	bne.n	800700c <checkDemoModCalisma+0x126c>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006f44:	4b20      	ldr	r3, [pc, #128]	@ (8006fc8 <checkDemoModCalisma+0x1228>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d103      	bne.n	8006f54 <checkDemoModCalisma+0x11b4>
 8006f4c:	4b21      	ldr	r3, [pc, #132]	@ (8006fd4 <checkDemoModCalisma+0x1234>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d05b      	beq.n	800700c <checkDemoModCalisma+0x126c>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8006f54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006f58:	481d      	ldr	r0, [pc, #116]	@ (8006fd0 <checkDemoModCalisma+0x1230>)
 8006f5a:	f003 fc8f 	bl	800a87c <HAL_GPIO_ReadPin>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d01c      	beq.n	8006f9e <checkDemoModCalisma+0x11fe>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8006f64:	2180      	movs	r1, #128	@ 0x80
 8006f66:	481a      	ldr	r0, [pc, #104]	@ (8006fd0 <checkDemoModCalisma+0x1230>)
 8006f68:	f003 fc88 	bl	800a87c <HAL_GPIO_ReadPin>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d106      	bne.n	8006f80 <checkDemoModCalisma+0x11e0>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8006f72:	2104      	movs	r1, #4
 8006f74:	4816      	ldr	r0, [pc, #88]	@ (8006fd0 <checkDemoModCalisma+0x1230>)
 8006f76:	f003 fc81 	bl	800a87c <HAL_GPIO_ReadPin>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d00e      	beq.n	8006f9e <checkDemoModCalisma+0x11fe>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8006f80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006f84:	4812      	ldr	r0, [pc, #72]	@ (8006fd0 <checkDemoModCalisma+0x1230>)
 8006f86:	f003 fc79 	bl	800a87c <HAL_GPIO_ReadPin>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10b      	bne.n	8006fa8 <checkDemoModCalisma+0x1208>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8006f90:	2102      	movs	r1, #2
 8006f92:	480f      	ldr	r0, [pc, #60]	@ (8006fd0 <checkDemoModCalisma+0x1230>)
 8006f94:	f003 fc72 	bl	800a87c <HAL_GPIO_ReadPin>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d104      	bne.n	8006fa8 <checkDemoModCalisma+0x1208>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006fd8 <checkDemoModCalisma+0x1238>)
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	d007      	beq.n	8006fb8 <checkDemoModCalisma+0x1218>
 8006fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe0 <checkDemoModCalisma+0x1240>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d103      	bne.n	8006fb8 <checkDemoModCalisma+0x1218>
 8006fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe4 <checkDemoModCalisma+0x1244>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d029      	beq.n	800700c <checkDemoModCalisma+0x126c>
						&&(makineStop==1)) {
 8006fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff0 <checkDemoModCalisma+0x1250>)
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d025      	beq.n	800700c <checkDemoModCalisma+0x126c>

					kapiTablabutonkontrol=1;
 8006fc0:	4b11      	ldr	r3, [pc, #68]	@ (8007008 <checkDemoModCalisma+0x1268>)
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	e024      	b.n	8007012 <checkDemoModCalisma+0x1272>
 8006fc8:	20001238 	.word	0x20001238
 8006fcc:	20001120 	.word	0x20001120
 8006fd0:	40011000 	.word	0x40011000
 8006fd4:	20001239 	.word	0x20001239
 8006fd8:	20001118 	.word	0x20001118
 8006fdc:	40010c00 	.word	0x40010c00
 8006fe0:	20001248 	.word	0x20001248
 8006fe4:	20001249 	.word	0x20001249
 8006fe8:	20001110 	.word	0x20001110
 8006fec:	200010f8 	.word	0x200010f8
 8006ff0:	2000122e 	.word	0x2000122e
 8006ff4:	2000121b 	.word	0x2000121b
 8006ff8:	20001235 	.word	0x20001235
 8006ffc:	20001088 	.word	0x20001088
 8007000:	2000108c 	.word	0x2000108c
 8007004:	20001190 	.word	0x20001190
 8007008:	20001236 	.word	0x20001236
				} else {
					kapiTablabutonkontrol=0;
 800700c:	4b83      	ldr	r3, [pc, #524]	@ (800721c <checkDemoModCalisma+0x147c>)
 800700e:	2200      	movs	r2, #0
 8007010:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007012:	4b83      	ldr	r3, [pc, #524]	@ (8007220 <checkDemoModCalisma+0x1480>)
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	1e91      	subs	r1, r2, #2
 800701a:	430b      	orrs	r3, r1
 800701c:	d11b      	bne.n	8007056 <checkDemoModCalisma+0x12b6>
 800701e:	4b81      	ldr	r3, [pc, #516]	@ (8007224 <checkDemoModCalisma+0x1484>)
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	1e91      	subs	r1, r2, #2
 8007026:	430b      	orrs	r3, r1
 8007028:	d005      	beq.n	8007036 <checkDemoModCalisma+0x1296>
 800702a:	4b7e      	ldr	r3, [pc, #504]	@ (8007224 <checkDemoModCalisma+0x1484>)
 800702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007030:	1ed1      	subs	r1, r2, #3
 8007032:	430b      	orrs	r3, r1
 8007034:	d10f      	bne.n	8007056 <checkDemoModCalisma+0x12b6>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007036:	4b7c      	ldr	r3, [pc, #496]	@ (8007228 <checkDemoModCalisma+0x1488>)
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d103      	bne.n	8007046 <checkDemoModCalisma+0x12a6>
 800703e:	4b7b      	ldr	r3, [pc, #492]	@ (800722c <checkDemoModCalisma+0x148c>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <checkDemoModCalisma+0x12b6>
						&&(makineStop==1)) {
 8007046:	4b7a      	ldr	r3, [pc, #488]	@ (8007230 <checkDemoModCalisma+0x1490>)
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <checkDemoModCalisma+0x12b6>

					kapiTablapizzato=1;
 800704e:	4b79      	ldr	r3, [pc, #484]	@ (8007234 <checkDemoModCalisma+0x1494>)
 8007050:	2201      	movs	r2, #1
 8007052:	701a      	strb	r2, [r3, #0]
 8007054:	e002      	b.n	800705c <checkDemoModCalisma+0x12bc>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8007056:	4b77      	ldr	r3, [pc, #476]	@ (8007234 <checkDemoModCalisma+0x1494>)
 8007058:	2200      	movs	r2, #0
 800705a:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800705c:	4b6f      	ldr	r3, [pc, #444]	@ (800721c <checkDemoModCalisma+0x147c>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d107      	bne.n	8007074 <checkDemoModCalisma+0x12d4>
 8007064:	4b74      	ldr	r3, [pc, #464]	@ (8007238 <checkDemoModCalisma+0x1498>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d103      	bne.n	8007074 <checkDemoModCalisma+0x12d4>
 800706c:	4b71      	ldr	r3, [pc, #452]	@ (8007234 <checkDemoModCalisma+0x1494>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d005      	beq.n	8007080 <checkDemoModCalisma+0x12e0>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007074:	2201      	movs	r2, #1
 8007076:	2120      	movs	r1, #32
 8007078:	4870      	ldr	r0, [pc, #448]	@ (800723c <checkDemoModCalisma+0x149c>)
 800707a:	f003 fc16 	bl	800a8aa <HAL_GPIO_WritePin>
 800707e:	e004      	b.n	800708a <checkDemoModCalisma+0x12ea>
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007080:	2200      	movs	r2, #0
 8007082:	2120      	movs	r1, #32
 8007084:	486d      	ldr	r0, [pc, #436]	@ (800723c <checkDemoModCalisma+0x149c>)
 8007086:	f003 fc10 	bl	800a8aa <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 800708a:	4b6d      	ldr	r3, [pc, #436]	@ (8007240 <checkDemoModCalisma+0x14a0>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00f      	beq.n	80070b2 <checkDemoModCalisma+0x1312>
 8007092:	2102      	movs	r1, #2
 8007094:	486b      	ldr	r0, [pc, #428]	@ (8007244 <checkDemoModCalisma+0x14a4>)
 8007096:	f003 fbf1 	bl	800a87c <HAL_GPIO_ReadPin>
 800709a:	4603      	mov	r3, r0
 800709c:	2b01      	cmp	r3, #1
 800709e:	d108      	bne.n	80070b2 <checkDemoModCalisma+0x1312>
 80070a0:	4b69      	ldr	r3, [pc, #420]	@ (8007248 <checkDemoModCalisma+0x14a8>)
 80070a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	d103      	bne.n	80070b2 <checkDemoModCalisma+0x1312>
 80070aa:	4b61      	ldr	r3, [pc, #388]	@ (8007230 <checkDemoModCalisma+0x1490>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d113      	bne.n	80070da <checkDemoModCalisma+0x133a>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80070b2:	4b66      	ldr	r3, [pc, #408]	@ (800724c <checkDemoModCalisma+0x14ac>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d02b      	beq.n	8007112 <checkDemoModCalisma+0x1372>
 80070ba:	2104      	movs	r1, #4
 80070bc:	4861      	ldr	r0, [pc, #388]	@ (8007244 <checkDemoModCalisma+0x14a4>)
 80070be:	f003 fbdd 	bl	800a87c <HAL_GPIO_ReadPin>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d124      	bne.n	8007112 <checkDemoModCalisma+0x1372>
 80070c8:	4b5f      	ldr	r3, [pc, #380]	@ (8007248 <checkDemoModCalisma+0x14a8>)
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	d01f      	beq.n	8007112 <checkDemoModCalisma+0x1372>
 80070d2:	4b57      	ldr	r3, [pc, #348]	@ (8007230 <checkDemoModCalisma+0x1490>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d01b      	beq.n	8007112 <checkDemoModCalisma+0x1372>


					calismaSayisiDemo++;
 80070da:	4b5d      	ldr	r3, [pc, #372]	@ (8007250 <checkDemoModCalisma+0x14b0>)
 80070dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e0:	1c51      	adds	r1, r2, #1
 80070e2:	6139      	str	r1, [r7, #16]
 80070e4:	f143 0300 	adc.w	r3, r3, #0
 80070e8:	617b      	str	r3, [r7, #20]
 80070ea:	4b59      	ldr	r3, [pc, #356]	@ (8007250 <checkDemoModCalisma+0x14b0>)
 80070ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80070f0:	e9c3 1200 	strd	r1, r2, [r3]
					eepromData[28]=calismaSayisiDemo;
 80070f4:	4b56      	ldr	r3, [pc, #344]	@ (8007250 <checkDemoModCalisma+0x14b0>)
 80070f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fa:	4956      	ldr	r1, [pc, #344]	@ (8007254 <checkDemoModCalisma+0x14b4>)
 80070fc:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0

					hafizaYaz=1;
 8007100:	4b55      	ldr	r3, [pc, #340]	@ (8007258 <checkDemoModCalisma+0x14b8>)
 8007102:	2201      	movs	r2, #1
 8007104:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 8007106:	4b4e      	ldr	r3, [pc, #312]	@ (8007240 <checkDemoModCalisma+0x14a0>)
 8007108:	2200      	movs	r2, #0
 800710a:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 800710c:	4b4f      	ldr	r3, [pc, #316]	@ (800724c <checkDemoModCalisma+0x14ac>)
 800710e:	2200      	movs	r2, #0
 8007110:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8007112:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007116:	4851      	ldr	r0, [pc, #324]	@ (800725c <checkDemoModCalisma+0x14bc>)
 8007118:	f003 fbb0 	bl	800a87c <HAL_GPIO_ReadPin>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d016      	beq.n	8007150 <checkDemoModCalisma+0x13b0>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8007122:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007126:	484d      	ldr	r0, [pc, #308]	@ (800725c <checkDemoModCalisma+0x14bc>)
 8007128:	f003 fba8 	bl	800a87c <HAL_GPIO_ReadPin>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00e      	beq.n	8007150 <checkDemoModCalisma+0x13b0>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8007132:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007136:	4849      	ldr	r0, [pc, #292]	@ (800725c <checkDemoModCalisma+0x14bc>)
 8007138:	f003 fba0 	bl	800a87c <HAL_GPIO_ReadPin>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d006      	beq.n	8007150 <checkDemoModCalisma+0x13b0>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8007142:	2140      	movs	r1, #64	@ 0x40
 8007144:	483f      	ldr	r0, [pc, #252]	@ (8007244 <checkDemoModCalisma+0x14a4>)
 8007146:	f003 fb99 	bl	800a87c <HAL_GPIO_ReadPin>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d103      	bne.n	8007158 <checkDemoModCalisma+0x13b8>

					startBasili=1;
 8007150:	4b43      	ldr	r3, [pc, #268]	@ (8007260 <checkDemoModCalisma+0x14c0>)
 8007152:	2201      	movs	r2, #1
 8007154:	701a      	strb	r2, [r3, #0]
 8007156:	e002      	b.n	800715e <checkDemoModCalisma+0x13be>
				} else {
					startBasili=0;
 8007158:	4b41      	ldr	r3, [pc, #260]	@ (8007260 <checkDemoModCalisma+0x14c0>)
 800715a:	2200      	movs	r2, #0
 800715c:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 800715e:	4b40      	ldr	r3, [pc, #256]	@ (8007260 <checkDemoModCalisma+0x14c0>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d014      	beq.n	8007190 <checkDemoModCalisma+0x13f0>
 8007166:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800716a:	483c      	ldr	r0, [pc, #240]	@ (800725c <checkDemoModCalisma+0x14bc>)
 800716c:	f003 fb86 	bl	800a87c <HAL_GPIO_ReadPin>
 8007170:	4603      	mov	r3, r0
 8007172:	2b01      	cmp	r3, #1
 8007174:	d10c      	bne.n	8007190 <checkDemoModCalisma+0x13f0>

					hataVar=1;
 8007176:	4b3b      	ldr	r3, [pc, #236]	@ (8007264 <checkDemoModCalisma+0x14c4>)
 8007178:	2201      	movs	r2, #1
 800717a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 800717c:	2001      	movs	r0, #1
 800717e:	f7f9 fc17 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(1);
 8007182:	2001      	movs	r0, #1
 8007184:	f7f9 fbae 	bl	80008e4 <hata2EEPROM>
					acilstophatasi=1;
 8007188:	4b37      	ldr	r3, [pc, #220]	@ (8007268 <checkDemoModCalisma+0x14c8>)
 800718a:	2201      	movs	r2, #1
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	e018      	b.n	80071c2 <checkDemoModCalisma+0x1422>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8007190:	4b35      	ldr	r3, [pc, #212]	@ (8007268 <checkDemoModCalisma+0x14c8>)
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d014      	beq.n	80071c2 <checkDemoModCalisma+0x1422>
 8007198:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800719c:	482f      	ldr	r0, [pc, #188]	@ (800725c <checkDemoModCalisma+0x14bc>)
 800719e:	f003 fb6d 	bl	800a87c <HAL_GPIO_ReadPin>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10c      	bne.n	80071c2 <checkDemoModCalisma+0x1422>
 80071a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007260 <checkDemoModCalisma+0x14c0>)
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	f083 0301 	eor.w	r3, r3, #1
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <checkDemoModCalisma+0x1422>
					acilstophatasi=0;
 80071b6:	4b2c      	ldr	r3, [pc, #176]	@ (8007268 <checkDemoModCalisma+0x14c8>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 80071bc:	2001      	movs	r0, #1
 80071be:	f7fc ff31 	bl	8004024 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 80071c2:	4b2a      	ldr	r3, [pc, #168]	@ (800726c <checkDemoModCalisma+0x14cc>)
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	f083 0301 	eor.w	r3, r3, #1
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d055      	beq.n	800727c <checkDemoModCalisma+0x14dc>
 80071d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80071d4:	4821      	ldr	r0, [pc, #132]	@ (800725c <checkDemoModCalisma+0x14bc>)
 80071d6:	f003 fb51 	bl	800a87c <HAL_GPIO_ReadPin>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <checkDemoModCalisma+0x1448>
 80071e0:	4b23      	ldr	r3, [pc, #140]	@ (8007270 <checkDemoModCalisma+0x14d0>)
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d049      	beq.n	800727c <checkDemoModCalisma+0x14dc>
 80071e8:	4b22      	ldr	r3, [pc, #136]	@ (8007274 <checkDemoModCalisma+0x14d4>)
 80071ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ee:	1e51      	subs	r1, r2, #1
 80071f0:	430b      	orrs	r3, r1
 80071f2:	d143      	bne.n	800727c <checkDemoModCalisma+0x14dc>
 80071f4:	4b20      	ldr	r3, [pc, #128]	@ (8007278 <checkDemoModCalisma+0x14d8>)
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	f083 0301 	eor.w	r3, r3, #1
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d03c      	beq.n	800727c <checkDemoModCalisma+0x14dc>
					hataVar=1;
 8007202:	4b18      	ldr	r3, [pc, #96]	@ (8007264 <checkDemoModCalisma+0x14c4>)
 8007204:	2201      	movs	r2, #1
 8007206:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8007208:	2002      	movs	r0, #2
 800720a:	f7f9 fbd1 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(2);
 800720e:	2002      	movs	r0, #2
 8007210:	f7f9 fb68 	bl	80008e4 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8007214:	4b18      	ldr	r3, [pc, #96]	@ (8007278 <checkDemoModCalisma+0x14d8>)
 8007216:	2201      	movs	r2, #1
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	e047      	b.n	80072ac <checkDemoModCalisma+0x150c>
 800721c:	20001236 	.word	0x20001236
 8007220:	20001110 	.word	0x20001110
 8007224:	200010f8 	.word	0x200010f8
 8007228:	20001238 	.word	0x20001238
 800722c:	20001239 	.word	0x20001239
 8007230:	2000122e 	.word	0x2000122e
 8007234:	20001237 	.word	0x20001237
 8007238:	20001235 	.word	0x20001235
 800723c:	40010800 	.word	0x40010800
 8007240:	2000122b 	.word	0x2000122b
 8007244:	40011000 	.word	0x40011000
 8007248:	200010e8 	.word	0x200010e8
 800724c:	2000122c 	.word	0x2000122c
 8007250:	200010b0 	.word	0x200010b0
 8007254:	20000d08 	.word	0x20000d08
 8007258:	20001218 	.word	0x20001218
 800725c:	40010c00 	.word	0x40010c00
 8007260:	2000123a 	.word	0x2000123a
 8007264:	20001241 	.word	0x20001241
 8007268:	2000123c 	.word	0x2000123c
 800726c:	20001243 	.word	0x20001243
 8007270:	2000124d 	.word	0x2000124d
 8007274:	200010d8 	.word	0x200010d8
 8007278:	2000123d 	.word	0x2000123d
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 800727c:	4b6d      	ldr	r3, [pc, #436]	@ (8007434 <checkDemoModCalisma+0x1694>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d013      	beq.n	80072ac <checkDemoModCalisma+0x150c>
 8007284:	4b6c      	ldr	r3, [pc, #432]	@ (8007438 <checkDemoModCalisma+0x1698>)
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00f      	beq.n	80072ac <checkDemoModCalisma+0x150c>
 800728c:	4b6b      	ldr	r3, [pc, #428]	@ (800743c <checkDemoModCalisma+0x169c>)
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	f083 0301 	eor.w	r3, r3, #1
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d008      	beq.n	80072ac <checkDemoModCalisma+0x150c>
					emniyetCercevesihatasi=0;
 800729a:	4b66      	ldr	r3, [pc, #408]	@ (8007434 <checkDemoModCalisma+0x1694>)
 800729c:	2200      	movs	r2, #0
 800729e:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 80072a0:	4b67      	ldr	r3, [pc, #412]	@ (8007440 <checkDemoModCalisma+0x16a0>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 80072a6:	2002      	movs	r0, #2
 80072a8:	f7fc febc 	bl	8004024 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 80072ac:	4b65      	ldr	r3, [pc, #404]	@ (8007444 <checkDemoModCalisma+0x16a4>)
 80072ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	d125      	bne.n	8007302 <checkDemoModCalisma+0x1562>
 80072b6:	4b64      	ldr	r3, [pc, #400]	@ (8007448 <checkDemoModCalisma+0x16a8>)
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	1e51      	subs	r1, r2, #1
 80072be:	430b      	orrs	r3, r1
 80072c0:	d11f      	bne.n	8007302 <checkDemoModCalisma+0x1562>
 80072c2:	4b62      	ldr	r3, [pc, #392]	@ (800744c <checkDemoModCalisma+0x16ac>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d01b      	beq.n	8007302 <checkDemoModCalisma+0x1562>
 80072ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80072ce:	4860      	ldr	r0, [pc, #384]	@ (8007450 <checkDemoModCalisma+0x16b0>)
 80072d0:	f003 fad4 	bl	800a87c <HAL_GPIO_ReadPin>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d113      	bne.n	8007302 <checkDemoModCalisma+0x1562>
 80072da:	4b5e      	ldr	r3, [pc, #376]	@ (8007454 <checkDemoModCalisma+0x16b4>)
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	f083 0301 	eor.w	r3, r3, #1
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00c      	beq.n	8007302 <checkDemoModCalisma+0x1562>
					hataVar=1;
 80072e8:	4b5b      	ldr	r3, [pc, #364]	@ (8007458 <checkDemoModCalisma+0x16b8>)
 80072ea:	2201      	movs	r2, #1
 80072ec:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 80072ee:	2003      	movs	r0, #3
 80072f0:	f7f9 fb5e 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(3);
 80072f4:	2003      	movs	r0, #3
 80072f6:	f7f9 faf5 	bl	80008e4 <hata2EEPROM>
					basinchatasi=1;
 80072fa:	4b56      	ldr	r3, [pc, #344]	@ (8007454 <checkDemoModCalisma+0x16b4>)
 80072fc:	2201      	movs	r2, #1
 80072fe:	701a      	strb	r2, [r3, #0]
 8007300:	e017      	b.n	8007332 <checkDemoModCalisma+0x1592>
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8007302:	4b54      	ldr	r3, [pc, #336]	@ (8007454 <checkDemoModCalisma+0x16b4>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d013      	beq.n	8007332 <checkDemoModCalisma+0x1592>
 800730a:	4b4e      	ldr	r3, [pc, #312]	@ (8007444 <checkDemoModCalisma+0x16a4>)
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	1e51      	subs	r1, r2, #1
 8007312:	430b      	orrs	r3, r1
 8007314:	d10d      	bne.n	8007332 <checkDemoModCalisma+0x1592>
 8007316:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800731a:	4850      	ldr	r0, [pc, #320]	@ (800745c <checkDemoModCalisma+0x16bc>)
 800731c:	f003 faae 	bl	800a87c <HAL_GPIO_ReadPin>
 8007320:	4603      	mov	r3, r0
 8007322:	2b01      	cmp	r3, #1
 8007324:	d105      	bne.n	8007332 <checkDemoModCalisma+0x1592>
					basinchatasi=0;
 8007326:	4b4b      	ldr	r3, [pc, #300]	@ (8007454 <checkDemoModCalisma+0x16b4>)
 8007328:	2200      	movs	r2, #0
 800732a:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 800732c:	2003      	movs	r0, #3
 800732e:	f7fc fe79 	bl	8004024 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8007332:	4b4b      	ldr	r3, [pc, #300]	@ (8007460 <checkDemoModCalisma+0x16c0>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d103      	bne.n	8007342 <checkDemoModCalisma+0x15a2>
 800733a:	4b4a      	ldr	r3, [pc, #296]	@ (8007464 <checkDemoModCalisma+0x16c4>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d027      	beq.n	8007392 <checkDemoModCalisma+0x15f2>
 8007342:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007346:	4848      	ldr	r0, [pc, #288]	@ (8007468 <checkDemoModCalisma+0x16c8>)
 8007348:	f003 fa98 	bl	800a87c <HAL_GPIO_ReadPin>
 800734c:	4603      	mov	r3, r0
 800734e:	2b01      	cmp	r3, #1
 8007350:	d11f      	bne.n	8007392 <checkDemoModCalisma+0x15f2>
 8007352:	4b46      	ldr	r3, [pc, #280]	@ (800746c <checkDemoModCalisma+0x16cc>)
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	1e51      	subs	r1, r2, #1
 800735a:	430b      	orrs	r3, r1
 800735c:	d005      	beq.n	800736a <checkDemoModCalisma+0x15ca>
 800735e:	4b43      	ldr	r3, [pc, #268]	@ (800746c <checkDemoModCalisma+0x16cc>)
 8007360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007364:	1ed1      	subs	r1, r2, #3
 8007366:	430b      	orrs	r3, r1
 8007368:	d113      	bne.n	8007392 <checkDemoModCalisma+0x15f2>
 800736a:	4b41      	ldr	r3, [pc, #260]	@ (8007470 <checkDemoModCalisma+0x16d0>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	f083 0301 	eor.w	r3, r3, #1
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00c      	beq.n	8007392 <checkDemoModCalisma+0x15f2>
					hataVar=1;
 8007378:	4b37      	ldr	r3, [pc, #220]	@ (8007458 <checkDemoModCalisma+0x16b8>)
 800737a:	2201      	movs	r2, #1
 800737c:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 800737e:	2004      	movs	r0, #4
 8007380:	f7f9 fb16 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(4);
 8007384:	2004      	movs	r0, #4
 8007386:	f7f9 faad 	bl	80008e4 <hata2EEPROM>
					katkapisivicihatasi=1;
 800738a:	4b39      	ldr	r3, [pc, #228]	@ (8007470 <checkDemoModCalisma+0x16d0>)
 800738c:	2201      	movs	r2, #1
 800738e:	701a      	strb	r2, [r3, #0]
 8007390:	e01f      	b.n	80073d2 <checkDemoModCalisma+0x1632>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8007392:	4b37      	ldr	r3, [pc, #220]	@ (8007470 <checkDemoModCalisma+0x16d0>)
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d01b      	beq.n	80073d2 <checkDemoModCalisma+0x1632>
 800739a:	4b36      	ldr	r3, [pc, #216]	@ (8007474 <checkDemoModCalisma+0x16d4>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d017      	beq.n	80073d2 <checkDemoModCalisma+0x1632>
 80073a2:	4b2f      	ldr	r3, [pc, #188]	@ (8007460 <checkDemoModCalisma+0x16c0>)
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	f083 0301 	eor.w	r3, r3, #1
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d010      	beq.n	80073d2 <checkDemoModCalisma+0x1632>
 80073b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80073b4:	482c      	ldr	r0, [pc, #176]	@ (8007468 <checkDemoModCalisma+0x16c8>)
 80073b6:	f003 fa61 	bl	800a87c <HAL_GPIO_ReadPin>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d108      	bne.n	80073d2 <checkDemoModCalisma+0x1632>

					katkapisivicihatasi=0;
 80073c0:	4b2b      	ldr	r3, [pc, #172]	@ (8007470 <checkDemoModCalisma+0x16d0>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 80073c6:	4b27      	ldr	r3, [pc, #156]	@ (8007464 <checkDemoModCalisma+0x16c4>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 80073cc:	2004      	movs	r0, #4
 80073ce:	f7fc fe29 	bl	8004024 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 80073d2:	4b23      	ldr	r3, [pc, #140]	@ (8007460 <checkDemoModCalisma+0x16c0>)
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d103      	bne.n	80073e2 <checkDemoModCalisma+0x1642>
 80073da:	4b27      	ldr	r3, [pc, #156]	@ (8007478 <checkDemoModCalisma+0x16d8>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d04e      	beq.n	8007480 <checkDemoModCalisma+0x16e0>
 80073e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80073e6:	4820      	ldr	r0, [pc, #128]	@ (8007468 <checkDemoModCalisma+0x16c8>)
 80073e8:	f003 fa48 	bl	800a87c <HAL_GPIO_ReadPin>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d146      	bne.n	8007480 <checkDemoModCalisma+0x16e0>
 80073f2:	4b1e      	ldr	r3, [pc, #120]	@ (800746c <checkDemoModCalisma+0x16cc>)
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	1e51      	subs	r1, r2, #1
 80073fa:	430b      	orrs	r3, r1
 80073fc:	d005      	beq.n	800740a <checkDemoModCalisma+0x166a>
 80073fe:	4b1b      	ldr	r3, [pc, #108]	@ (800746c <checkDemoModCalisma+0x16cc>)
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	1ed1      	subs	r1, r2, #3
 8007406:	430b      	orrs	r3, r1
 8007408:	d13a      	bne.n	8007480 <checkDemoModCalisma+0x16e0>
 800740a:	4b1c      	ldr	r3, [pc, #112]	@ (800747c <checkDemoModCalisma+0x16dc>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	f083 0301 	eor.w	r3, r3, #1
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d033      	beq.n	8007480 <checkDemoModCalisma+0x16e0>

					hataVar=1;
 8007418:	4b0f      	ldr	r3, [pc, #60]	@ (8007458 <checkDemoModCalisma+0x16b8>)
 800741a:	2201      	movs	r2, #1
 800741c:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 800741e:	2005      	movs	r0, #5
 8007420:	f7f9 fac6 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(5);
 8007424:	2005      	movs	r0, #5
 8007426:	f7f9 fa5d 	bl	80008e4 <hata2EEPROM>
					tablakapisivicihatasi=1;
 800742a:	4b14      	ldr	r3, [pc, #80]	@ (800747c <checkDemoModCalisma+0x16dc>)
 800742c:	2201      	movs	r2, #1
 800742e:	701a      	strb	r2, [r3, #0]
 8007430:	e04a      	b.n	80074c8 <checkDemoModCalisma+0x1728>
 8007432:	bf00      	nop
 8007434:	2000123d 	.word	0x2000123d
 8007438:	20001243 	.word	0x20001243
 800743c:	20001224 	.word	0x20001224
 8007440:	2000124d 	.word	0x2000124d
 8007444:	200010d0 	.word	0x200010d0
 8007448:	200010f0 	.word	0x200010f0
 800744c:	20001240 	.word	0x20001240
 8007450:	40011000 	.word	0x40011000
 8007454:	2000124a 	.word	0x2000124a
 8007458:	20001241 	.word	0x20001241
 800745c:	40010c00 	.word	0x40010c00
 8007460:	2000123a 	.word	0x2000123a
 8007464:	2000124e 	.word	0x2000124e
 8007468:	40010800 	.word	0x40010800
 800746c:	200010f8 	.word	0x200010f8
 8007470:	2000124b 	.word	0x2000124b
 8007474:	2000122e 	.word	0x2000122e
 8007478:	2000124f 	.word	0x2000124f
 800747c:	2000124c 	.word	0x2000124c
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8007480:	4b98      	ldr	r3, [pc, #608]	@ (80076e4 <checkDemoModCalisma+0x1944>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01f      	beq.n	80074c8 <checkDemoModCalisma+0x1728>
 8007488:	4b97      	ldr	r3, [pc, #604]	@ (80076e8 <checkDemoModCalisma+0x1948>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01b      	beq.n	80074c8 <checkDemoModCalisma+0x1728>
 8007490:	4b96      	ldr	r3, [pc, #600]	@ (80076ec <checkDemoModCalisma+0x194c>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	f083 0301 	eor.w	r3, r3, #1
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d014      	beq.n	80074c8 <checkDemoModCalisma+0x1728>
 800749e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80074a2:	4893      	ldr	r0, [pc, #588]	@ (80076f0 <checkDemoModCalisma+0x1950>)
 80074a4:	f003 f9ea 	bl	800a87c <HAL_GPIO_ReadPin>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10c      	bne.n	80074c8 <checkDemoModCalisma+0x1728>
 80074ae:	4b8e      	ldr	r3, [pc, #568]	@ (80076e8 <checkDemoModCalisma+0x1948>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d008      	beq.n	80074c8 <checkDemoModCalisma+0x1728>
					tablakapisivicihatasi=0;
 80074b6:	4b8b      	ldr	r3, [pc, #556]	@ (80076e4 <checkDemoModCalisma+0x1944>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 80074bc:	4b8d      	ldr	r3, [pc, #564]	@ (80076f4 <checkDemoModCalisma+0x1954>)
 80074be:	2200      	movs	r2, #0
 80074c0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 80074c2:	2005      	movs	r0, #5
 80074c4:	f7fc fdae 	bl	8004024 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 80074c8:	4b8b      	ldr	r3, [pc, #556]	@ (80076f8 <checkDemoModCalisma+0x1958>)
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d107      	bne.n	80074e0 <checkDemoModCalisma+0x1740>
 80074d0:	4b8a      	ldr	r3, [pc, #552]	@ (80076fc <checkDemoModCalisma+0x195c>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d103      	bne.n	80074e0 <checkDemoModCalisma+0x1740>
 80074d8:	4b89      	ldr	r3, [pc, #548]	@ (8007700 <checkDemoModCalisma+0x1960>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d023      	beq.n	8007528 <checkDemoModCalisma+0x1788>
 80074e0:	4b88      	ldr	r3, [pc, #544]	@ (8007704 <checkDemoModCalisma+0x1964>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	f083 0301 	eor.w	r3, r3, #1
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d01c      	beq.n	8007528 <checkDemoModCalisma+0x1788>
				    if(millis-timer4>=makineCalismaTmr) {
 80074ee:	4b86      	ldr	r3, [pc, #536]	@ (8007708 <checkDemoModCalisma+0x1968>)
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	4b86      	ldr	r3, [pc, #536]	@ (800770c <checkDemoModCalisma+0x196c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2200      	movs	r2, #0
 80074fa:	60bb      	str	r3, [r7, #8]
 80074fc:	60fa      	str	r2, [r7, #12]
 80074fe:	4b84      	ldr	r3, [pc, #528]	@ (8007710 <checkDemoModCalisma+0x1970>)
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007508:	4604      	mov	r4, r0
 800750a:	4294      	cmp	r4, r2
 800750c:	4199      	sbcs	r1, r3
 800750e:	d30b      	bcc.n	8007528 <checkDemoModCalisma+0x1788>
					  	hataVar=1;
 8007510:	4b80      	ldr	r3, [pc, #512]	@ (8007714 <checkDemoModCalisma+0x1974>)
 8007512:	2201      	movs	r2, #1
 8007514:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 8007516:	2006      	movs	r0, #6
 8007518:	f7f9 fa4a 	bl	80009b0 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 800751c:	2006      	movs	r0, #6
 800751e:	f7f9 f9e1 	bl	80008e4 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8007522:	4b78      	ldr	r3, [pc, #480]	@ (8007704 <checkDemoModCalisma+0x1964>)
 8007524:	2201      	movs	r2, #1
 8007526:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007528:	4b76      	ldr	r3, [pc, #472]	@ (8007704 <checkDemoModCalisma+0x1964>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d013      	beq.n	8007558 <checkDemoModCalisma+0x17b8>
 8007530:	2108      	movs	r1, #8
 8007532:	486f      	ldr	r0, [pc, #444]	@ (80076f0 <checkDemoModCalisma+0x1950>)
 8007534:	f003 f9a2 	bl	800a87c <HAL_GPIO_ReadPin>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00c      	beq.n	8007558 <checkDemoModCalisma+0x17b8>
 800753e:	4b6b      	ldr	r3, [pc, #428]	@ (80076ec <checkDemoModCalisma+0x194c>)
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	f083 0301 	eor.w	r3, r3, #1
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	d005      	beq.n	8007558 <checkDemoModCalisma+0x17b8>
					maksimumcalismahatasi=0;
 800754c:	4b6d      	ldr	r3, [pc, #436]	@ (8007704 <checkDemoModCalisma+0x1964>)
 800754e:	2200      	movs	r2, #0
 8007550:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8007552:	2006      	movs	r0, #6
 8007554:	f7fc fd66 	bl	8004024 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007558:	4b6f      	ldr	r3, [pc, #444]	@ (8007718 <checkDemoModCalisma+0x1978>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10b      	bne.n	8007578 <checkDemoModCalisma+0x17d8>
 8007560:	4b66      	ldr	r3, [pc, #408]	@ (80076fc <checkDemoModCalisma+0x195c>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d107      	bne.n	8007578 <checkDemoModCalisma+0x17d8>
 8007568:	4b6c      	ldr	r3, [pc, #432]	@ (800771c <checkDemoModCalisma+0x197c>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d103      	bne.n	8007578 <checkDemoModCalisma+0x17d8>
 8007570:	4b63      	ldr	r3, [pc, #396]	@ (8007700 <checkDemoModCalisma+0x1960>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d009      	beq.n	800758c <checkDemoModCalisma+0x17ec>
					makineCalisiyor=0;
 8007578:	4b69      	ldr	r3, [pc, #420]	@ (8007720 <checkDemoModCalisma+0x1980>)
 800757a:	2200      	movs	r2, #0
 800757c:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 800757e:	4b69      	ldr	r3, [pc, #420]	@ (8007724 <checkDemoModCalisma+0x1984>)
 8007580:	2201      	movs	r2, #1
 8007582:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8007584:	4b5b      	ldr	r3, [pc, #364]	@ (80076f4 <checkDemoModCalisma+0x1954>)
 8007586:	2201      	movs	r2, #1
 8007588:	701a      	strb	r2, [r3, #0]
 800758a:	e006      	b.n	800759a <checkDemoModCalisma+0x17fa>
				} else {
					makineCalisiyor=1;
 800758c:	4b64      	ldr	r3, [pc, #400]	@ (8007720 <checkDemoModCalisma+0x1980>)
 800758e:	2201      	movs	r2, #1
 8007590:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8007592:	4b5d      	ldr	r3, [pc, #372]	@ (8007708 <checkDemoModCalisma+0x1968>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a5d      	ldr	r2, [pc, #372]	@ (800770c <checkDemoModCalisma+0x196c>)
 8007598:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800759a:	4b5e      	ldr	r3, [pc, #376]	@ (8007714 <checkDemoModCalisma+0x1974>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d02f      	beq.n	8007602 <checkDemoModCalisma+0x1862>
 80075a2:	4b61      	ldr	r3, [pc, #388]	@ (8007728 <checkDemoModCalisma+0x1988>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	f083 0301 	eor.w	r3, r3, #1
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d028      	beq.n	8007602 <checkDemoModCalisma+0x1862>
 80075b0:	4b5e      	ldr	r3, [pc, #376]	@ (800772c <checkDemoModCalisma+0x198c>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	f083 0301 	eor.w	r3, r3, #1
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d021      	beq.n	8007602 <checkDemoModCalisma+0x1862>
 80075be:	4b5c      	ldr	r3, [pc, #368]	@ (8007730 <checkDemoModCalisma+0x1990>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	f083 0301 	eor.w	r3, r3, #1
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d01a      	beq.n	8007602 <checkDemoModCalisma+0x1862>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80075cc:	4b59      	ldr	r3, [pc, #356]	@ (8007734 <checkDemoModCalisma+0x1994>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	f083 0301 	eor.w	r3, r3, #1
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d013      	beq.n	8007602 <checkDemoModCalisma+0x1862>
 80075da:	4b42      	ldr	r3, [pc, #264]	@ (80076e4 <checkDemoModCalisma+0x1944>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	f083 0301 	eor.w	r3, r3, #1
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00c      	beq.n	8007602 <checkDemoModCalisma+0x1862>
 80075e8:	4b46      	ldr	r3, [pc, #280]	@ (8007704 <checkDemoModCalisma+0x1964>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	f083 0301 	eor.w	r3, r3, #1
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d005      	beq.n	8007602 <checkDemoModCalisma+0x1862>

					hataVar=0;
 80075f6:	4b47      	ldr	r3, [pc, #284]	@ (8007714 <checkDemoModCalisma+0x1974>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 80075fc:	2007      	movs	r0, #7
 80075fe:	f7fc fd11 	bl	8004024 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8007602:	4b44      	ldr	r3, [pc, #272]	@ (8007714 <checkDemoModCalisma+0x1974>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d02a      	beq.n	8007660 <checkDemoModCalisma+0x18c0>
 800760a:	4b47      	ldr	r3, [pc, #284]	@ (8007728 <checkDemoModCalisma+0x1988>)
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	f083 0301 	eor.w	r3, r3, #1
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d023      	beq.n	8007660 <checkDemoModCalisma+0x18c0>
 8007618:	4b44      	ldr	r3, [pc, #272]	@ (800772c <checkDemoModCalisma+0x198c>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d01f      	beq.n	8007660 <checkDemoModCalisma+0x18c0>
 8007620:	4b43      	ldr	r3, [pc, #268]	@ (8007730 <checkDemoModCalisma+0x1990>)
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	f083 0301 	eor.w	r3, r3, #1
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d018      	beq.n	8007660 <checkDemoModCalisma+0x18c0>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 800762e:	4b41      	ldr	r3, [pc, #260]	@ (8007734 <checkDemoModCalisma+0x1994>)
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	f083 0301 	eor.w	r3, r3, #1
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	d011      	beq.n	8007660 <checkDemoModCalisma+0x18c0>
 800763c:	4b29      	ldr	r3, [pc, #164]	@ (80076e4 <checkDemoModCalisma+0x1944>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	f083 0301 	eor.w	r3, r3, #1
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <checkDemoModCalisma+0x18c0>
 800764a:	4b2e      	ldr	r3, [pc, #184]	@ (8007704 <checkDemoModCalisma+0x1964>)
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	f083 0301 	eor.w	r3, r3, #1
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	d003      	beq.n	8007660 <checkDemoModCalisma+0x18c0>
				{
					EmnCerHataMakYukariCalis=1;
 8007658:	4b37      	ldr	r3, [pc, #220]	@ (8007738 <checkDemoModCalisma+0x1998>)
 800765a:	2201      	movs	r2, #1
 800765c:	701a      	strb	r2, [r3, #0]
 800765e:	e009      	b.n	8007674 <checkDemoModCalisma+0x18d4>
				}
				else if(emniyetCercevesihatasi==0)
 8007660:	4b32      	ldr	r3, [pc, #200]	@ (800772c <checkDemoModCalisma+0x198c>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	f083 0301 	eor.w	r3, r3, #1
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d002      	beq.n	8007674 <checkDemoModCalisma+0x18d4>
				{
					EmnCerHataMakYukariCalis=0;
 800766e:	4b32      	ldr	r3, [pc, #200]	@ (8007738 <checkDemoModCalisma+0x1998>)
 8007670:	2200      	movs	r2, #0
 8007672:	701a      	strb	r2, [r3, #0]

			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007674:	4b31      	ldr	r3, [pc, #196]	@ (800773c <checkDemoModCalisma+0x199c>)
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	1e51      	subs	r1, r2, #1
 800767c:	430b      	orrs	r3, r1
 800767e:	f040 81f9 	bne.w	8007a74 <checkDemoModCalisma+0x1cd4>
 8007682:	4b2f      	ldr	r3, [pc, #188]	@ (8007740 <checkDemoModCalisma+0x19a0>)
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 81f4 	beq.w	8007a74 <checkDemoModCalisma+0x1cd4>
 800768c:	4b2d      	ldr	r3, [pc, #180]	@ (8007744 <checkDemoModCalisma+0x19a4>)
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	4313      	orrs	r3, r2
 8007694:	f040 81ee 	bne.w	8007a74 <checkDemoModCalisma+0x1cd4>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007698:	2102      	movs	r1, #2
 800769a:	482b      	ldr	r0, [pc, #172]	@ (8007748 <checkDemoModCalisma+0x19a8>)
 800769c:	f003 f8ee 	bl	800a87c <HAL_GPIO_ReadPin>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d15c      	bne.n	8007760 <checkDemoModCalisma+0x19c0>
						&& (demoAsagiCalis==0)
 80076a6:	4b29      	ldr	r3, [pc, #164]	@ (800774c <checkDemoModCalisma+0x19ac>)
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	f083 0301 	eor.w	r3, r3, #1
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d055      	beq.n	8007760 <checkDemoModCalisma+0x19c0>
						&& (demoDevYukari==0)
 80076b4:	4b26      	ldr	r3, [pc, #152]	@ (8007750 <checkDemoModCalisma+0x19b0>)
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	f083 0301 	eor.w	r3, r3, #1
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d04e      	beq.n	8007760 <checkDemoModCalisma+0x19c0>
						&& (demoDevAsagi==0)) {
 80076c2:	4b24      	ldr	r3, [pc, #144]	@ (8007754 <checkDemoModCalisma+0x19b4>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	f083 0301 	eor.w	r3, r3, #1
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d047      	beq.n	8007760 <checkDemoModCalisma+0x19c0>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80076d0:	2201      	movs	r2, #1
 80076d2:	2104      	movs	r1, #4
 80076d4:	4820      	ldr	r0, [pc, #128]	@ (8007758 <checkDemoModCalisma+0x19b8>)
 80076d6:	f003 f8e8 	bl	800a8aa <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 80076da:	4b20      	ldr	r3, [pc, #128]	@ (800775c <checkDemoModCalisma+0x19bc>)
 80076dc:	2201      	movs	r2, #1
 80076de:	701a      	strb	r2, [r3, #0]
 80076e0:	e04d      	b.n	800777e <checkDemoModCalisma+0x19de>
 80076e2:	bf00      	nop
 80076e4:	2000124c 	.word	0x2000124c
 80076e8:	2000122e 	.word	0x2000122e
 80076ec:	2000123a 	.word	0x2000123a
 80076f0:	40010800 	.word	0x40010800
 80076f4:	2000124f 	.word	0x2000124f
 80076f8:	20001240 	.word	0x20001240
 80076fc:	20001224 	.word	0x20001224
 8007700:	20001223 	.word	0x20001223
 8007704:	2000123b 	.word	0x2000123b
 8007708:	20001088 	.word	0x20001088
 800770c:	2000109c 	.word	0x2000109c
 8007710:	20001178 	.word	0x20001178
 8007714:	20001241 	.word	0x20001241
 8007718:	20001221 	.word	0x20001221
 800771c:	20001222 	.word	0x20001222
 8007720:	20001242 	.word	0x20001242
 8007724:	2000124e 	.word	0x2000124e
 8007728:	2000123c 	.word	0x2000123c
 800772c:	2000123d 	.word	0x2000123d
 8007730:	2000124a 	.word	0x2000124a
 8007734:	2000124b 	.word	0x2000124b
 8007738:	20001250 	.word	0x20001250
 800773c:	200011a8 	.word	0x200011a8
 8007740:	2000123e 	.word	0x2000123e
 8007744:	200011a0 	.word	0x200011a0
 8007748:	40011000 	.word	0x40011000
 800774c:	20001245 	.word	0x20001245
 8007750:	20001246 	.word	0x20001246
 8007754:	20001247 	.word	0x20001247
 8007758:	40010c00 	.word	0x40010c00
 800775c:	20001244 	.word	0x20001244
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007760:	2102      	movs	r1, #2
 8007762:	4871      	ldr	r0, [pc, #452]	@ (8007928 <checkDemoModCalisma+0x1b88>)
 8007764:	f003 f88a 	bl	800a87c <HAL_GPIO_ReadPin>
 8007768:	4603      	mov	r3, r0
 800776a:	2b01      	cmp	r3, #1
 800776c:	d107      	bne.n	800777e <checkDemoModCalisma+0x19de>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800776e:	2200      	movs	r2, #0
 8007770:	2104      	movs	r1, #4
 8007772:	486e      	ldr	r0, [pc, #440]	@ (800792c <checkDemoModCalisma+0x1b8c>)
 8007774:	f003 f899 	bl	800a8aa <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8007778:	4b6d      	ldr	r3, [pc, #436]	@ (8007930 <checkDemoModCalisma+0x1b90>)
 800777a:	2200      	movs	r2, #0
 800777c:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800777e:	4b6c      	ldr	r3, [pc, #432]	@ (8007930 <checkDemoModCalisma+0x1b90>)
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10b      	bne.n	800779e <checkDemoModCalisma+0x19fe>
 8007786:	4b6b      	ldr	r3, [pc, #428]	@ (8007934 <checkDemoModCalisma+0x1b94>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d107      	bne.n	800779e <checkDemoModCalisma+0x19fe>
 800778e:	4b6a      	ldr	r3, [pc, #424]	@ (8007938 <checkDemoModCalisma+0x1b98>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d103      	bne.n	800779e <checkDemoModCalisma+0x19fe>
 8007796:	4b69      	ldr	r3, [pc, #420]	@ (800793c <checkDemoModCalisma+0x1b9c>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00c      	beq.n	80077b8 <checkDemoModCalisma+0x1a18>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800779e:	2201      	movs	r2, #1
 80077a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80077a4:	4861      	ldr	r0, [pc, #388]	@ (800792c <checkDemoModCalisma+0x1b8c>)
 80077a6:	f003 f880 	bl	800a8aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80077aa:	2201      	movs	r2, #1
 80077ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80077b0:	485e      	ldr	r0, [pc, #376]	@ (800792c <checkDemoModCalisma+0x1b8c>)
 80077b2:	f003 f87a 	bl	800a8aa <HAL_GPIO_WritePin>
 80077b6:	e00b      	b.n	80077d0 <checkDemoModCalisma+0x1a30>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80077b8:	2200      	movs	r2, #0
 80077ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80077be:	485b      	ldr	r0, [pc, #364]	@ (800792c <checkDemoModCalisma+0x1b8c>)
 80077c0:	f003 f873 	bl	800a8aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80077c4:	2200      	movs	r2, #0
 80077c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80077ca:	4858      	ldr	r0, [pc, #352]	@ (800792c <checkDemoModCalisma+0x1b8c>)
 80077cc:	f003 f86d 	bl	800a8aa <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80077d0:	2102      	movs	r1, #2
 80077d2:	4855      	ldr	r0, [pc, #340]	@ (8007928 <checkDemoModCalisma+0x1b88>)
 80077d4:	f003 f852 	bl	800a87c <HAL_GPIO_ReadPin>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d10d      	bne.n	80077fa <checkDemoModCalisma+0x1a5a>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80077de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80077e2:	4851      	ldr	r0, [pc, #324]	@ (8007928 <checkDemoModCalisma+0x1b88>)
 80077e4:	f003 f84a 	bl	800a87c <HAL_GPIO_ReadPin>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d105      	bne.n	80077fa <checkDemoModCalisma+0x1a5a>
						&& (demoYukariCalis==0)
 80077ee:	4b50      	ldr	r3, [pc, #320]	@ (8007930 <checkDemoModCalisma+0x1b90>)
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	f083 0301 	eor.w	r3, r3, #1
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80077fa:	2102      	movs	r1, #2
 80077fc:	484a      	ldr	r0, [pc, #296]	@ (8007928 <checkDemoModCalisma+0x1b88>)
 80077fe:	f003 f83d 	bl	800a87c <HAL_GPIO_ReadPin>
 8007802:	4603      	mov	r3, r0
 8007804:	2b01      	cmp	r3, #1
 8007806:	d125      	bne.n	8007854 <checkDemoModCalisma+0x1ab4>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007808:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800780c:	4846      	ldr	r0, [pc, #280]	@ (8007928 <checkDemoModCalisma+0x1b88>)
 800780e:	f003 f835 	bl	800a87c <HAL_GPIO_ReadPin>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d11d      	bne.n	8007854 <checkDemoModCalisma+0x1ab4>
						&&(demoYukariCalis==0)
 8007818:	4b45      	ldr	r3, [pc, #276]	@ (8007930 <checkDemoModCalisma+0x1b90>)
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	f083 0301 	eor.w	r3, r3, #1
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d016      	beq.n	8007854 <checkDemoModCalisma+0x1ab4>
						&&(demoAsagiCalis==0)
 8007826:	4b45      	ldr	r3, [pc, #276]	@ (800793c <checkDemoModCalisma+0x1b9c>)
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	f083 0301 	eor.w	r3, r3, #1
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00f      	beq.n	8007854 <checkDemoModCalisma+0x1ab4>
						&& (demoDevAsagi==0)) {
 8007834:	4b40      	ldr	r3, [pc, #256]	@ (8007938 <checkDemoModCalisma+0x1b98>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	f083 0301 	eor.w	r3, r3, #1
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d008      	beq.n	8007854 <checkDemoModCalisma+0x1ab4>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007842:	2201      	movs	r2, #1
 8007844:	2120      	movs	r1, #32
 8007846:	4838      	ldr	r0, [pc, #224]	@ (8007928 <checkDemoModCalisma+0x1b88>)
 8007848:	f003 f82f 	bl	800a8aa <HAL_GPIO_WritePin>
					demoDevYukari=1;
 800784c:	4b39      	ldr	r3, [pc, #228]	@ (8007934 <checkDemoModCalisma+0x1b94>)
 800784e:	2201      	movs	r2, #1
 8007850:	701a      	strb	r2, [r3, #0]
 8007852:	e007      	b.n	8007864 <checkDemoModCalisma+0x1ac4>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007854:	2200      	movs	r2, #0
 8007856:	2120      	movs	r1, #32
 8007858:	4833      	ldr	r0, [pc, #204]	@ (8007928 <checkDemoModCalisma+0x1b88>)
 800785a:	f003 f826 	bl	800a8aa <HAL_GPIO_WritePin>
					demoDevYukari=0;
 800785e:	4b35      	ldr	r3, [pc, #212]	@ (8007934 <checkDemoModCalisma+0x1b94>)
 8007860:	2200      	movs	r2, #0
 8007862:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007864:	2102      	movs	r1, #2
 8007866:	4830      	ldr	r0, [pc, #192]	@ (8007928 <checkDemoModCalisma+0x1b88>)
 8007868:	f003 f808 	bl	800a87c <HAL_GPIO_ReadPin>
 800786c:	4603      	mov	r3, r0
 800786e:	2b01      	cmp	r3, #1
 8007870:	d125      	bne.n	80078be <checkDemoModCalisma+0x1b1e>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007872:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007876:	482c      	ldr	r0, [pc, #176]	@ (8007928 <checkDemoModCalisma+0x1b88>)
 8007878:	f003 f800 	bl	800a87c <HAL_GPIO_ReadPin>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d11d      	bne.n	80078be <checkDemoModCalisma+0x1b1e>
						&&(demoYukariCalis==0)
 8007882:	4b2b      	ldr	r3, [pc, #172]	@ (8007930 <checkDemoModCalisma+0x1b90>)
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	f083 0301 	eor.w	r3, r3, #1
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	d016      	beq.n	80078be <checkDemoModCalisma+0x1b1e>
						&&(demoDevYukari==0)
 8007890:	4b28      	ldr	r3, [pc, #160]	@ (8007934 <checkDemoModCalisma+0x1b94>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	f083 0301 	eor.w	r3, r3, #1
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00f      	beq.n	80078be <checkDemoModCalisma+0x1b1e>
						&& (demoAsagiCalis==0)) {
 800789e:	4b27      	ldr	r3, [pc, #156]	@ (800793c <checkDemoModCalisma+0x1b9c>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	f083 0301 	eor.w	r3, r3, #1
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d008      	beq.n	80078be <checkDemoModCalisma+0x1b1e>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80078ac:	2201      	movs	r2, #1
 80078ae:	2110      	movs	r1, #16
 80078b0:	481d      	ldr	r0, [pc, #116]	@ (8007928 <checkDemoModCalisma+0x1b88>)
 80078b2:	f002 fffa 	bl	800a8aa <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 80078b6:	4b20      	ldr	r3, [pc, #128]	@ (8007938 <checkDemoModCalisma+0x1b98>)
 80078b8:	2201      	movs	r2, #1
 80078ba:	701a      	strb	r2, [r3, #0]
 80078bc:	e007      	b.n	80078ce <checkDemoModCalisma+0x1b2e>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80078be:	2200      	movs	r2, #0
 80078c0:	2110      	movs	r1, #16
 80078c2:	4819      	ldr	r0, [pc, #100]	@ (8007928 <checkDemoModCalisma+0x1b88>)
 80078c4:	f002 fff1 	bl	800a8aa <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 80078c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007938 <checkDemoModCalisma+0x1b98>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80078ce:	2104      	movs	r1, #4
 80078d0:	4815      	ldr	r0, [pc, #84]	@ (8007928 <checkDemoModCalisma+0x1b88>)
 80078d2:	f002 ffd3 	bl	800a87c <HAL_GPIO_ReadPin>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d133      	bne.n	8007944 <checkDemoModCalisma+0x1ba4>
						&& (demoYukariCalis==0)
 80078dc:	4b14      	ldr	r3, [pc, #80]	@ (8007930 <checkDemoModCalisma+0x1b90>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	f083 0301 	eor.w	r3, r3, #1
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d02c      	beq.n	8007944 <checkDemoModCalisma+0x1ba4>
						&& (demoDevAsagi==0)
 80078ea:	4b13      	ldr	r3, [pc, #76]	@ (8007938 <checkDemoModCalisma+0x1b98>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	f083 0301 	eor.w	r3, r3, #1
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d025      	beq.n	8007944 <checkDemoModCalisma+0x1ba4>
						&& (demoDevYukari==0)) {
 80078f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007934 <checkDemoModCalisma+0x1b94>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	f083 0301 	eor.w	r3, r3, #1
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d01e      	beq.n	8007944 <checkDemoModCalisma+0x1ba4>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007906:	2201      	movs	r2, #1
 8007908:	2102      	movs	r1, #2
 800790a:	4808      	ldr	r0, [pc, #32]	@ (800792c <checkDemoModCalisma+0x1b8c>)
 800790c:	f002 ffcd 	bl	800a8aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007910:	2201      	movs	r2, #1
 8007912:	2101      	movs	r1, #1
 8007914:	4805      	ldr	r0, [pc, #20]	@ (800792c <checkDemoModCalisma+0x1b8c>)
 8007916:	f002 ffc8 	bl	800a8aa <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 800791a:	4b08      	ldr	r3, [pc, #32]	@ (800793c <checkDemoModCalisma+0x1b9c>)
 800791c:	2201      	movs	r2, #1
 800791e:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8007920:	4b07      	ldr	r3, [pc, #28]	@ (8007940 <checkDemoModCalisma+0x1ba0>)
 8007922:	2201      	movs	r2, #1
 8007924:	701a      	strb	r2, [r3, #0]
 8007926:	e021      	b.n	800796c <checkDemoModCalisma+0x1bcc>
 8007928:	40011000 	.word	0x40011000
 800792c:	40010c00 	.word	0x40010c00
 8007930:	20001244 	.word	0x20001244
 8007934:	20001246 	.word	0x20001246
 8007938:	20001247 	.word	0x20001247
 800793c:	20001245 	.word	0x20001245
 8007940:	2000122a 	.word	0x2000122a
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007944:	2104      	movs	r1, #4
 8007946:	486e      	ldr	r0, [pc, #440]	@ (8007b00 <checkDemoModCalisma+0x1d60>)
 8007948:	f002 ff98 	bl	800a87c <HAL_GPIO_ReadPin>
 800794c:	4603      	mov	r3, r0
 800794e:	2b01      	cmp	r3, #1
 8007950:	d10c      	bne.n	800796c <checkDemoModCalisma+0x1bcc>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007952:	2200      	movs	r2, #0
 8007954:	2102      	movs	r1, #2
 8007956:	486b      	ldr	r0, [pc, #428]	@ (8007b04 <checkDemoModCalisma+0x1d64>)
 8007958:	f002 ffa7 	bl	800a8aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800795c:	2200      	movs	r2, #0
 800795e:	2101      	movs	r1, #1
 8007960:	4868      	ldr	r0, [pc, #416]	@ (8007b04 <checkDemoModCalisma+0x1d64>)
 8007962:	f002 ffa2 	bl	800a8aa <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8007966:	4b68      	ldr	r3, [pc, #416]	@ (8007b08 <checkDemoModCalisma+0x1d68>)
 8007968:	2200      	movs	r2, #0
 800796a:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 800796c:	2104      	movs	r1, #4
 800796e:	4864      	ldr	r0, [pc, #400]	@ (8007b00 <checkDemoModCalisma+0x1d60>)
 8007970:	f002 ff84 	bl	800a87c <HAL_GPIO_ReadPin>
 8007974:	4603      	mov	r3, r0
 8007976:	2b01      	cmp	r3, #1
 8007978:	d10d      	bne.n	8007996 <checkDemoModCalisma+0x1bf6>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800797a:	2201      	movs	r2, #1
 800797c:	2180      	movs	r1, #128	@ 0x80
 800797e:	4863      	ldr	r0, [pc, #396]	@ (8007b0c <checkDemoModCalisma+0x1d6c>)
 8007980:	f002 ff93 	bl	800a8aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007984:	2201      	movs	r2, #1
 8007986:	2120      	movs	r1, #32
 8007988:	4860      	ldr	r0, [pc, #384]	@ (8007b0c <checkDemoModCalisma+0x1d6c>)
 800798a:	f002 ff8e 	bl	800a8aa <HAL_GPIO_WritePin>
					timer3 = millis;
 800798e:	4b60      	ldr	r3, [pc, #384]	@ (8007b10 <checkDemoModCalisma+0x1d70>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a60      	ldr	r2, [pc, #384]	@ (8007b14 <checkDemoModCalisma+0x1d74>)
 8007994:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8007996:	4b5e      	ldr	r3, [pc, #376]	@ (8007b10 <checkDemoModCalisma+0x1d70>)
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	4b5e      	ldr	r3, [pc, #376]	@ (8007b14 <checkDemoModCalisma+0x1d74>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	2b04      	cmp	r3, #4
 80079a2:	d909      	bls.n	80079b8 <checkDemoModCalisma+0x1c18>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80079a4:	2200      	movs	r2, #0
 80079a6:	2180      	movs	r1, #128	@ 0x80
 80079a8:	4858      	ldr	r0, [pc, #352]	@ (8007b0c <checkDemoModCalisma+0x1d6c>)
 80079aa:	f002 ff7e 	bl	800a8aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80079ae:	2200      	movs	r2, #0
 80079b0:	2120      	movs	r1, #32
 80079b2:	4856      	ldr	r0, [pc, #344]	@ (8007b0c <checkDemoModCalisma+0x1d6c>)
 80079b4:	f002 ff79 	bl	800a8aa <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80079b8:	2102      	movs	r1, #2
 80079ba:	4851      	ldr	r0, [pc, #324]	@ (8007b00 <checkDemoModCalisma+0x1d60>)
 80079bc:	f002 ff5e 	bl	800a87c <HAL_GPIO_ReadPin>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d108      	bne.n	80079d8 <checkDemoModCalisma+0x1c38>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80079c6:	2201      	movs	r2, #1
 80079c8:	2140      	movs	r1, #64	@ 0x40
 80079ca:	4850      	ldr	r0, [pc, #320]	@ (8007b0c <checkDemoModCalisma+0x1d6c>)
 80079cc:	f002 ff6d 	bl	800a8aa <HAL_GPIO_WritePin>
					timer3 = millis;
 80079d0:	4b4f      	ldr	r3, [pc, #316]	@ (8007b10 <checkDemoModCalisma+0x1d70>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a4f      	ldr	r2, [pc, #316]	@ (8007b14 <checkDemoModCalisma+0x1d74>)
 80079d6:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 80079d8:	4b4d      	ldr	r3, [pc, #308]	@ (8007b10 <checkDemoModCalisma+0x1d70>)
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	4b4d      	ldr	r3, [pc, #308]	@ (8007b14 <checkDemoModCalisma+0x1d74>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d904      	bls.n	80079f0 <checkDemoModCalisma+0x1c50>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80079e6:	2200      	movs	r2, #0
 80079e8:	2140      	movs	r1, #64	@ 0x40
 80079ea:	4848      	ldr	r0, [pc, #288]	@ (8007b0c <checkDemoModCalisma+0x1d6c>)
 80079ec:	f002 ff5d 	bl	800a8aa <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80079f0:	4b49      	ldr	r3, [pc, #292]	@ (8007b18 <checkDemoModCalisma+0x1d78>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d01c      	beq.n	8007a32 <checkDemoModCalisma+0x1c92>
 80079f8:	4b48      	ldr	r3, [pc, #288]	@ (8007b1c <checkDemoModCalisma+0x1d7c>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d018      	beq.n	8007a32 <checkDemoModCalisma+0x1c92>

					calismaSayisiDemo++;
 8007a00:	4b47      	ldr	r3, [pc, #284]	@ (8007b20 <checkDemoModCalisma+0x1d80>)
 8007a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a06:	1c51      	adds	r1, r2, #1
 8007a08:	6039      	str	r1, [r7, #0]
 8007a0a:	f143 0300 	adc.w	r3, r3, #0
 8007a0e:	607b      	str	r3, [r7, #4]
 8007a10:	4b43      	ldr	r3, [pc, #268]	@ (8007b20 <checkDemoModCalisma+0x1d80>)
 8007a12:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007a16:	e9c3 1200 	strd	r1, r2, [r3]
					eepromData[28]=calismaSayisiDemo;
 8007a1a:	4b41      	ldr	r3, [pc, #260]	@ (8007b20 <checkDemoModCalisma+0x1d80>)
 8007a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a20:	4940      	ldr	r1, [pc, #256]	@ (8007b24 <checkDemoModCalisma+0x1d84>)
 8007a22:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0

					hafizaYaz=1;
 8007a26:	4b40      	ldr	r3, [pc, #256]	@ (8007b28 <checkDemoModCalisma+0x1d88>)
 8007a28:	2201      	movs	r2, #1
 8007a2a:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 8007a2c:	4b3b      	ldr	r3, [pc, #236]	@ (8007b1c <checkDemoModCalisma+0x1d7c>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8007a32:	4b3e      	ldr	r3, [pc, #248]	@ (8007b2c <checkDemoModCalisma+0x1d8c>)
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	d15c      	bne.n	8007af6 <checkDemoModCalisma+0x1d56>
					lcd_print(2,1,"Cycle     ");
 8007a3c:	4a3c      	ldr	r2, [pc, #240]	@ (8007b30 <checkDemoModCalisma+0x1d90>)
 8007a3e:	2101      	movs	r1, #1
 8007a40:	2002      	movs	r0, #2
 8007a42:	f001 fdc0 	bl	80095c6 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8007a46:	4a3b      	ldr	r2, [pc, #236]	@ (8007b34 <checkDemoModCalisma+0x1d94>)
 8007a48:	2101      	movs	r1, #1
 8007a4a:	2001      	movs	r0, #1
 8007a4c:	f001 fdbb 	bl	80095c6 <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 8007a50:	4b33      	ldr	r3, [pc, #204]	@ (8007b20 <checkDemoModCalisma+0x1d80>)
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a56:	4613      	mov	r3, r2
 8007a58:	220a      	movs	r2, #10
 8007a5a:	4937      	ldr	r1, [pc, #220]	@ (8007b38 <checkDemoModCalisma+0x1d98>)
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f005 faaf 	bl	800cfc0 <itoa>
					lcd_print(2,11,snum);
 8007a62:	4a35      	ldr	r2, [pc, #212]	@ (8007b38 <checkDemoModCalisma+0x1d98>)
 8007a64:	210b      	movs	r1, #11
 8007a66:	2002      	movs	r0, #2
 8007a68:	f001 fdad 	bl	80095c6 <lcd_print>
					mesajYazildi=1;
 8007a6c:	4b33      	ldr	r3, [pc, #204]	@ (8007b3c <checkDemoModCalisma+0x1d9c>)
 8007a6e:	2201      	movs	r2, #1
 8007a70:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8007a72:	e040      	b.n	8007af6 <checkDemoModCalisma+0x1d56>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8007a74:	4b32      	ldr	r3, [pc, #200]	@ (8007b40 <checkDemoModCalisma+0x1da0>)
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	1e51      	subs	r1, r2, #1
 8007a7c:	430b      	orrs	r3, r1
 8007a7e:	d005      	beq.n	8007a8c <checkDemoModCalisma+0x1cec>
 8007a80:	4b2a      	ldr	r3, [pc, #168]	@ (8007b2c <checkDemoModCalisma+0x1d8c>)
 8007a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a86:	1e51      	subs	r1, r2, #1
 8007a88:	430b      	orrs	r3, r1
 8007a8a:	d134      	bne.n	8007af6 <checkDemoModCalisma+0x1d56>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007a92:	481c      	ldr	r0, [pc, #112]	@ (8007b04 <checkDemoModCalisma+0x1d64>)
 8007a94:	f002 ff09 	bl	800a8aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007a9e:	4819      	ldr	r0, [pc, #100]	@ (8007b04 <checkDemoModCalisma+0x1d64>)
 8007aa0:	f002 ff03 	bl	800a8aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	2104      	movs	r1, #4
 8007aa8:	4816      	ldr	r0, [pc, #88]	@ (8007b04 <checkDemoModCalisma+0x1d64>)
 8007aaa:	f002 fefe 	bl	800a8aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2102      	movs	r1, #2
 8007ab2:	4814      	ldr	r0, [pc, #80]	@ (8007b04 <checkDemoModCalisma+0x1d64>)
 8007ab4:	f002 fef9 	bl	800a8aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2101      	movs	r1, #1
 8007abc:	4811      	ldr	r0, [pc, #68]	@ (8007b04 <checkDemoModCalisma+0x1d64>)
 8007abe:	f002 fef4 	bl	800a8aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2120      	movs	r1, #32
 8007ac6:	480e      	ldr	r0, [pc, #56]	@ (8007b00 <checkDemoModCalisma+0x1d60>)
 8007ac8:	f002 feef 	bl	800a8aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007acc:	2200      	movs	r2, #0
 8007ace:	2110      	movs	r1, #16
 8007ad0:	480b      	ldr	r0, [pc, #44]	@ (8007b00 <checkDemoModCalisma+0x1d60>)
 8007ad2:	f002 feea 	bl	800a8aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2180      	movs	r1, #128	@ 0x80
 8007ada:	480c      	ldr	r0, [pc, #48]	@ (8007b0c <checkDemoModCalisma+0x1d6c>)
 8007adc:	f002 fee5 	bl	800a8aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	2140      	movs	r1, #64	@ 0x40
 8007ae4:	4809      	ldr	r0, [pc, #36]	@ (8007b0c <checkDemoModCalisma+0x1d6c>)
 8007ae6:	f002 fee0 	bl	800a8aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007aea:	2200      	movs	r2, #0
 8007aec:	2120      	movs	r1, #32
 8007aee:	4807      	ldr	r0, [pc, #28]	@ (8007b0c <checkDemoModCalisma+0x1d6c>)
 8007af0:	f002 fedb 	bl	800a8aa <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8007af4:	e7ff      	b.n	8007af6 <checkDemoModCalisma+0x1d56>
 8007af6:	bf00      	nop
 8007af8:	3738      	adds	r7, #56	@ 0x38
 8007afa:	46bd      	mov	sp, r7
 8007afc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b00:	40011000 	.word	0x40011000
 8007b04:	40010c00 	.word	0x40010c00
 8007b08:	20001245 	.word	0x20001245
 8007b0c:	40010800 	.word	0x40010800
 8007b10:	20001088 	.word	0x20001088
 8007b14:	20001098 	.word	0x20001098
 8007b18:	20001244 	.word	0x20001244
 8007b1c:	2000122a 	.word	0x2000122a
 8007b20:	200010b0 	.word	0x200010b0
 8007b24:	20000d08 	.word	0x20000d08
 8007b28:	20001218 	.word	0x20001218
 8007b2c:	200011a0 	.word	0x200011a0
 8007b30:	0800d0f8 	.word	0x0800d0f8
 8007b34:	0800d104 	.word	0x0800d104
 8007b38:	20001078 	.word	0x20001078
 8007b3c:	20001220 	.word	0x20001220
 8007b40:	200011a8 	.word	0x200011a8

08007b44 <mainLoop>:

void mainLoop() {
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8007b4a:	f7fc fabf 	bl	80040cc <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8007b4e:	2101      	movs	r1, #1
 8007b50:	48a2      	ldr	r0, [pc, #648]	@ (8007ddc <mainLoop+0x298>)
 8007b52:	f002 fe93 	bl	800a87c <HAL_GPIO_ReadPin>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d136      	bne.n	8007bca <mainLoop+0x86>
 8007b5c:	2108      	movs	r1, #8
 8007b5e:	48a0      	ldr	r0, [pc, #640]	@ (8007de0 <mainLoop+0x29c>)
 8007b60:	f002 fe8c 	bl	800a87c <HAL_GPIO_ReadPin>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d12f      	bne.n	8007bca <mainLoop+0x86>
 8007b6a:	2102      	movs	r1, #2
 8007b6c:	489b      	ldr	r0, [pc, #620]	@ (8007ddc <mainLoop+0x298>)
 8007b6e:	f002 fe85 	bl	800a87c <HAL_GPIO_ReadPin>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d128      	bne.n	8007bca <mainLoop+0x86>
 8007b78:	2104      	movs	r1, #4
 8007b7a:	4898      	ldr	r0, [pc, #608]	@ (8007ddc <mainLoop+0x298>)
 8007b7c:	f002 fe7e 	bl	800a87c <HAL_GPIO_ReadPin>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d121      	bne.n	8007bca <mainLoop+0x86>
 8007b86:	2108      	movs	r1, #8
 8007b88:	4894      	ldr	r0, [pc, #592]	@ (8007ddc <mainLoop+0x298>)
 8007b8a:	f002 fe77 	bl	800a87c <HAL_GPIO_ReadPin>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d11a      	bne.n	8007bca <mainLoop+0x86>
 8007b94:	2180      	movs	r1, #128	@ 0x80
 8007b96:	4892      	ldr	r0, [pc, #584]	@ (8007de0 <mainLoop+0x29c>)
 8007b98:	f002 fe70 	bl	800a87c <HAL_GPIO_ReadPin>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d113      	bne.n	8007bca <mainLoop+0x86>
 8007ba2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007ba6:	488e      	ldr	r0, [pc, #568]	@ (8007de0 <mainLoop+0x29c>)
 8007ba8:	f002 fe68 	bl	800a87c <HAL_GPIO_ReadPin>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d10b      	bne.n	8007bca <mainLoop+0x86>
 8007bb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007bb6:	488a      	ldr	r0, [pc, #552]	@ (8007de0 <mainLoop+0x29c>)
 8007bb8:	f002 fe60 	bl	800a87c <HAL_GPIO_ReadPin>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d103      	bne.n	8007bca <mainLoop+0x86>
			butonKontrol=0;
 8007bc2:	4b88      	ldr	r3, [pc, #544]	@ (8007de4 <mainLoop+0x2a0>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	701a      	strb	r2, [r3, #0]
 8007bc8:	e003      	b.n	8007bd2 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8007bca:	4b87      	ldr	r3, [pc, #540]	@ (8007de8 <mainLoop+0x2a4>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a87      	ldr	r2, [pc, #540]	@ (8007dec <mainLoop+0x2a8>)
 8007bd0:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8007bd2:	f7fc fb2d 	bl	8004230 <buttonCheck>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d103      	bne.n	8007be4 <mainLoop+0xa0>
			backLightTimer = millis;
 8007bdc:	4b82      	ldr	r3, [pc, #520]	@ (8007de8 <mainLoop+0x2a4>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a82      	ldr	r2, [pc, #520]	@ (8007dec <mainLoop+0x2a8>)
 8007be2:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8007be4:	4b82      	ldr	r3, [pc, #520]	@ (8007df0 <mainLoop+0x2ac>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d02c      	beq.n	8007c46 <mainLoop+0x102>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007bec:	bf00      	nop
 8007bee:	4881      	ldr	r0, [pc, #516]	@ (8007df4 <mainLoop+0x2b0>)
 8007bf0:	f003 fc6d 	bl	800b4ce <HAL_I2C_GetError>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b04      	cmp	r3, #4
 8007bf8:	d0f9      	beq.n	8007bee <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007bfa:	bf00      	nop
 8007bfc:	487d      	ldr	r0, [pc, #500]	@ (8007df4 <mainLoop+0x2b0>)
 8007bfe:	f003 fc59 	bl	800b4b4 <HAL_I2C_GetState>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b20      	cmp	r3, #32
 8007c06:	d1f9      	bne.n	8007bfc <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007c08:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007c0c:	9302      	str	r3, [sp, #8]
 8007c0e:	236e      	movs	r3, #110	@ 0x6e
 8007c10:	9301      	str	r3, [sp, #4]
 8007c12:	4b79      	ldr	r3, [pc, #484]	@ (8007df8 <mainLoop+0x2b4>)
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	236e      	movs	r3, #110	@ 0x6e
 8007c18:	2200      	movs	r2, #0
 8007c1a:	21a0      	movs	r1, #160	@ 0xa0
 8007c1c:	4875      	ldr	r0, [pc, #468]	@ (8007df4 <mainLoop+0x2b0>)
 8007c1e:	f003 f8e7 	bl	800adf0 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8007c22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007c26:	f002 f99b 	bl	8009f60 <HAL_Delay>

		  hafizaYaz=0;
 8007c2a:	4b71      	ldr	r3, [pc, #452]	@ (8007df0 <mainLoop+0x2ac>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	701a      	strb	r2, [r3, #0]
		  lcd_print(2, 1, dataYazildiText);
 8007c30:	4a72      	ldr	r2, [pc, #456]	@ (8007dfc <mainLoop+0x2b8>)
 8007c32:	2101      	movs	r1, #1
 8007c34:	2002      	movs	r0, #2
 8007c36:	f001 fcc6 	bl	80095c6 <lcd_print>

		  HAL_Delay(1000);
 8007c3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007c3e:	f002 f98f 	bl	8009f60 <HAL_Delay>
		  lcd_clear();
 8007c42:	f001 fcd5 	bl	80095f0 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8007c46:	4b6e      	ldr	r3, [pc, #440]	@ (8007e00 <mainLoop+0x2bc>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	f083 0301 	eor.w	r3, r3, #1
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d043      	beq.n	8007cdc <mainLoop+0x198>
 8007c54:	4867      	ldr	r0, [pc, #412]	@ (8007df4 <mainLoop+0x2b0>)
 8007c56:	f003 fc2d 	bl	800b4b4 <HAL_I2C_GetState>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b20      	cmp	r3, #32
 8007c5e:	d13d      	bne.n	8007cdc <mainLoop+0x198>
		  if(ilkOkuma==0) {
 8007c60:	4b68      	ldr	r3, [pc, #416]	@ (8007e04 <mainLoop+0x2c0>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	f083 0301 	eor.w	r3, r3, #1
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d028      	beq.n	8007cc0 <mainLoop+0x17c>
			  lcd_print(1, 1, eepromTextGN);
 8007c6e:	4a66      	ldr	r2, [pc, #408]	@ (8007e08 <mainLoop+0x2c4>)
 8007c70:	2101      	movs	r1, #1
 8007c72:	2001      	movs	r0, #1
 8007c74:	f001 fca7 	bl	80095c6 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8007c78:	4a64      	ldr	r2, [pc, #400]	@ (8007e0c <mainLoop+0x2c8>)
 8007c7a:	2101      	movs	r1, #1
 8007c7c:	2002      	movs	r0, #2
 8007c7e:	f001 fca2 	bl	80095c6 <lcd_print>
			  HAL_Delay(1000);
 8007c82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007c86:	f002 f96b 	bl	8009f60 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007c8a:	bf00      	nop
 8007c8c:	4859      	ldr	r0, [pc, #356]	@ (8007df4 <mainLoop+0x2b0>)
 8007c8e:	f003 fc1e 	bl	800b4ce <HAL_I2C_GetError>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d0f9      	beq.n	8007c8c <mainLoop+0x148>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007c98:	e003      	b.n	8007ca2 <mainLoop+0x15e>
				  HAL_Delay(1000);
 8007c9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007c9e:	f002 f95f 	bl	8009f60 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007ca2:	4854      	ldr	r0, [pc, #336]	@ (8007df4 <mainLoop+0x2b0>)
 8007ca4:	f003 fc06 	bl	800b4b4 <HAL_I2C_GetState>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b20      	cmp	r3, #32
 8007cac:	d1f5      	bne.n	8007c9a <mainLoop+0x156>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8007cae:	4a58      	ldr	r2, [pc, #352]	@ (8007e10 <mainLoop+0x2cc>)
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	2002      	movs	r0, #2
 8007cb4:	f001 fc87 	bl	80095c6 <lcd_print>

			  ilkOkuma=1;
 8007cb8:	4b52      	ldr	r3, [pc, #328]	@ (8007e04 <mainLoop+0x2c0>)
 8007cba:	2201      	movs	r2, #1
 8007cbc:	701a      	strb	r2, [r3, #0]
 8007cbe:	e006      	b.n	8007cce <mainLoop+0x18a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8007cc0:	4a54      	ldr	r2, [pc, #336]	@ (8007e14 <mainLoop+0x2d0>)
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	2002      	movs	r0, #2
 8007cc6:	f001 fc7e 	bl	80095c6 <lcd_print>
			  lcd_clear();
 8007cca:	f001 fc91 	bl	80095f0 <lcd_clear>
		  }

		  lcd_clear();
 8007cce:	f001 fc8f 	bl	80095f0 <lcd_clear>

		  eepromKontrol();
 8007cd2:	f7f8 faa7 	bl	8000224 <eepromKontrol>
		  hafizaOku=1;
 8007cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8007e00 <mainLoop+0x2bc>)
 8007cd8:	2201      	movs	r2, #1
 8007cda:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8007cdc:	4b4e      	ldr	r3, [pc, #312]	@ (8007e18 <mainLoop+0x2d4>)
 8007cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	d11d      	bne.n	8007d22 <mainLoop+0x1de>
 8007ce6:	4b4d      	ldr	r3, [pc, #308]	@ (8007e1c <mainLoop+0x2d8>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	f083 0301 	eor.w	r3, r3, #1
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d016      	beq.n	8007d22 <mainLoop+0x1de>
 8007cf4:	4b4a      	ldr	r3, [pc, #296]	@ (8007e20 <mainLoop+0x2dc>)
 8007cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	d111      	bne.n	8007d22 <mainLoop+0x1de>
			lcd_clear();
 8007cfe:	f001 fc77 	bl	80095f0 <lcd_clear>
			HAL_Delay(10);
 8007d02:	200a      	movs	r0, #10
 8007d04:	f002 f92c 	bl	8009f60 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8007d08:	4a46      	ldr	r2, [pc, #280]	@ (8007e24 <mainLoop+0x2e0>)
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	2001      	movs	r0, #1
 8007d0e:	f001 fc5a 	bl	80095c6 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8007d12:	4a45      	ldr	r2, [pc, #276]	@ (8007e28 <mainLoop+0x2e4>)
 8007d14:	2101      	movs	r1, #1
 8007d16:	2002      	movs	r0, #2
 8007d18:	f001 fc55 	bl	80095c6 <lcd_print>
			mesajYazildi=1;
 8007d1c:	4b3f      	ldr	r3, [pc, #252]	@ (8007e1c <mainLoop+0x2d8>)
 8007d1e:	2201      	movs	r2, #1
 8007d20:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8007d22:	4b3d      	ldr	r3, [pc, #244]	@ (8007e18 <mainLoop+0x2d4>)
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	d116      	bne.n	8007d5a <mainLoop+0x216>
 8007d2c:	2102      	movs	r1, #2
 8007d2e:	482b      	ldr	r0, [pc, #172]	@ (8007ddc <mainLoop+0x298>)
 8007d30:	f002 fda4 	bl	800a87c <HAL_GPIO_ReadPin>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d10f      	bne.n	8007d5a <mainLoop+0x216>
 8007d3a:	2104      	movs	r1, #4
 8007d3c:	4827      	ldr	r0, [pc, #156]	@ (8007ddc <mainLoop+0x298>)
 8007d3e:	f002 fd9d 	bl	800a87c <HAL_GPIO_ReadPin>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d108      	bne.n	8007d5a <mainLoop+0x216>
			menuGiris=1;
 8007d48:	4933      	ldr	r1, [pc, #204]	@ (8007e18 <mainLoop+0x2d4>)
 8007d4a:	f04f 0201 	mov.w	r2, #1
 8007d4e:	f04f 0300 	mov.w	r3, #0
 8007d52:	e9c1 2300 	strd	r2, r3, [r1]
			lcd_clear();
 8007d56:	f001 fc4b 	bl	80095f0 <lcd_clear>
		}

		if(menuGiris==1) {
 8007d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8007e18 <mainLoop+0x2d4>)
 8007d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d60:	1e51      	subs	r1, r2, #1
 8007d62:	430b      	orrs	r3, r1
 8007d64:	d101      	bne.n	8007d6a <mainLoop+0x226>
			menu();
 8007d66:	f7f8 ff99 	bl	8000c9c <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8007d6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007d6e:	481c      	ldr	r0, [pc, #112]	@ (8007de0 <mainLoop+0x29c>)
 8007d70:	f002 fdb3 	bl	800a8da <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8007d74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007d78:	482c      	ldr	r0, [pc, #176]	@ (8007e2c <mainLoop+0x2e8>)
 8007d7a:	f002 fd7f 	bl	800a87c <HAL_GPIO_ReadPin>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10a      	bne.n	8007d9a <mainLoop+0x256>
 8007d84:	4b2a      	ldr	r3, [pc, #168]	@ (8007e30 <mainLoop+0x2ec>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	f083 0301 	eor.w	r3, r3, #1
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <mainLoop+0x256>
			stopVar=1;
 8007d92:	4b28      	ldr	r3, [pc, #160]	@ (8007e34 <mainLoop+0x2f0>)
 8007d94:	2201      	movs	r2, #1
 8007d96:	701a      	strb	r2, [r3, #0]
 8007d98:	e002      	b.n	8007da0 <mainLoop+0x25c>
		} else {
			stopVar=0;
 8007d9a:	4b26      	ldr	r3, [pc, #152]	@ (8007e34 <mainLoop+0x2f0>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 8007da0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007da4:	4821      	ldr	r0, [pc, #132]	@ (8007e2c <mainLoop+0x2e8>)
 8007da6:	f002 fd69 	bl	800a87c <HAL_GPIO_ReadPin>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d107      	bne.n	8007dc0 <mainLoop+0x27c>
 8007db0:	4b21      	ldr	r3, [pc, #132]	@ (8007e38 <mainLoop+0x2f4>)
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <mainLoop+0x27c>
			EmnStopVar=1;
 8007db8:	4b20      	ldr	r3, [pc, #128]	@ (8007e3c <mainLoop+0x2f8>)
 8007dba:	2201      	movs	r2, #1
 8007dbc:	701a      	strb	r2, [r3, #0]
 8007dbe:	e002      	b.n	8007dc6 <mainLoop+0x282>
		} else {
			EmnStopVar=0;
 8007dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8007e3c <mainLoop+0x2f8>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8007dc6:	f7fc fa67 	bl	8004298 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8007dca:	f7fc faa7 	bl	800431c <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8007dce:	f7fc faf1 	bl	80043b4 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8007dd2:	f7fc fb49 	bl	8004468 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8007dd6:	f7fd ffe3 	bl	8005da0 <checkDemoModCalisma>
		checkLCDBacklight();
 8007dda:	e6b6      	b.n	8007b4a <mainLoop+0x6>
 8007ddc:	40010800 	.word	0x40010800
 8007de0:	40011000 	.word	0x40011000
 8007de4:	2000121b 	.word	0x2000121b
 8007de8:	20001088 	.word	0x20001088
 8007dec:	200010a4 	.word	0x200010a4
 8007df0:	20001218 	.word	0x20001218
 8007df4:	20001858 	.word	0x20001858
 8007df8:	20000d08 	.word	0x20000d08
 8007dfc:	200017cc 	.word	0x200017cc
 8007e00:	20001219 	.word	0x20001219
 8007e04:	2000121a 	.word	0x2000121a
 8007e08:	2000010c 	.word	0x2000010c
 8007e0c:	200017e0 	.word	0x200017e0
 8007e10:	200017f4 	.word	0x200017f4
 8007e14:	20001808 	.word	0x20001808
 8007e18:	200011a0 	.word	0x200011a0
 8007e1c:	20001220 	.word	0x20001220
 8007e20:	200011a8 	.word	0x200011a8
 8007e24:	20000058 	.word	0x20000058
 8007e28:	2000006c 	.word	0x2000006c
 8007e2c:	40010c00 	.word	0x40010c00
 8007e30:	20001241 	.word	0x20001241
 8007e34:	2000123e 	.word	0x2000123e
 8007e38:	20001250 	.word	0x20001250
 8007e3c:	20001251 	.word	0x20001251

08007e40 <loadMenuTexts>:
char degerKaydedildiText[17];

//Error Code:
char errorCodeText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8007e40:	b5b0      	push	{r4, r5, r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8007e4a:	79fb      	ldrb	r3, [r7, #7]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f040 846b 	bne.w	8008728 <loadMenuTexts+0x8e8>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8007e52:	4ac7      	ldr	r2, [pc, #796]	@ (8008170 <loadMenuTexts+0x330>)
 8007e54:	4bc7      	ldr	r3, [pc, #796]	@ (8008174 <loadMenuTexts+0x334>)
 8007e56:	4614      	mov	r4, r2
 8007e58:	461d      	mov	r5, r3
 8007e5a:	6828      	ldr	r0, [r5, #0]
 8007e5c:	6869      	ldr	r1, [r5, #4]
 8007e5e:	68aa      	ldr	r2, [r5, #8]
 8007e60:	68eb      	ldr	r3, [r5, #12]
 8007e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e64:	7c2b      	ldrb	r3, [r5, #16]
 8007e66:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8007e68:	4ac3      	ldr	r2, [pc, #780]	@ (8008178 <loadMenuTexts+0x338>)
 8007e6a:	4bc4      	ldr	r3, [pc, #784]	@ (800817c <loadMenuTexts+0x33c>)
 8007e6c:	4614      	mov	r4, r2
 8007e6e:	461d      	mov	r5, r3
 8007e70:	6828      	ldr	r0, [r5, #0]
 8007e72:	6869      	ldr	r1, [r5, #4]
 8007e74:	68aa      	ldr	r2, [r5, #8]
 8007e76:	68eb      	ldr	r3, [r5, #12]
 8007e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e7a:	7c2b      	ldrb	r3, [r5, #16]
 8007e7c:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8007e7e:	4ac0      	ldr	r2, [pc, #768]	@ (8008180 <loadMenuTexts+0x340>)
 8007e80:	4bc0      	ldr	r3, [pc, #768]	@ (8008184 <loadMenuTexts+0x344>)
 8007e82:	4614      	mov	r4, r2
 8007e84:	461d      	mov	r5, r3
 8007e86:	6828      	ldr	r0, [r5, #0]
 8007e88:	6869      	ldr	r1, [r5, #4]
 8007e8a:	68aa      	ldr	r2, [r5, #8]
 8007e8c:	68eb      	ldr	r3, [r5, #12]
 8007e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e90:	7c2b      	ldrb	r3, [r5, #16]
 8007e92:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8007e94:	4abc      	ldr	r2, [pc, #752]	@ (8008188 <loadMenuTexts+0x348>)
 8007e96:	4bbd      	ldr	r3, [pc, #756]	@ (800818c <loadMenuTexts+0x34c>)
 8007e98:	4614      	mov	r4, r2
 8007e9a:	461d      	mov	r5, r3
 8007e9c:	6828      	ldr	r0, [r5, #0]
 8007e9e:	6869      	ldr	r1, [r5, #4]
 8007ea0:	68aa      	ldr	r2, [r5, #8]
 8007ea2:	68eb      	ldr	r3, [r5, #12]
 8007ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ea6:	7c2b      	ldrb	r3, [r5, #16]
 8007ea8:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8007eaa:	4ab9      	ldr	r2, [pc, #740]	@ (8008190 <loadMenuTexts+0x350>)
 8007eac:	4bb9      	ldr	r3, [pc, #740]	@ (8008194 <loadMenuTexts+0x354>)
 8007eae:	4614      	mov	r4, r2
 8007eb0:	461d      	mov	r5, r3
 8007eb2:	6828      	ldr	r0, [r5, #0]
 8007eb4:	6869      	ldr	r1, [r5, #4]
 8007eb6:	68aa      	ldr	r2, [r5, #8]
 8007eb8:	68eb      	ldr	r3, [r5, #12]
 8007eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ebc:	7c2b      	ldrb	r3, [r5, #16]
 8007ebe:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8007ec0:	4ab5      	ldr	r2, [pc, #724]	@ (8008198 <loadMenuTexts+0x358>)
 8007ec2:	4bb6      	ldr	r3, [pc, #728]	@ (800819c <loadMenuTexts+0x35c>)
 8007ec4:	4614      	mov	r4, r2
 8007ec6:	461d      	mov	r5, r3
 8007ec8:	6828      	ldr	r0, [r5, #0]
 8007eca:	6869      	ldr	r1, [r5, #4]
 8007ecc:	68aa      	ldr	r2, [r5, #8]
 8007ece:	68eb      	ldr	r3, [r5, #12]
 8007ed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ed2:	7c2b      	ldrb	r3, [r5, #16]
 8007ed4:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 8007ed6:	4ab2      	ldr	r2, [pc, #712]	@ (80081a0 <loadMenuTexts+0x360>)
 8007ed8:	4bb2      	ldr	r3, [pc, #712]	@ (80081a4 <loadMenuTexts+0x364>)
 8007eda:	4614      	mov	r4, r2
 8007edc:	461d      	mov	r5, r3
 8007ede:	6828      	ldr	r0, [r5, #0]
 8007ee0:	6869      	ldr	r1, [r5, #4]
 8007ee2:	68aa      	ldr	r2, [r5, #8]
 8007ee4:	68eb      	ldr	r3, [r5, #12]
 8007ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ee8:	7c2b      	ldrb	r3, [r5, #16]
 8007eea:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8007eec:	4aae      	ldr	r2, [pc, #696]	@ (80081a8 <loadMenuTexts+0x368>)
 8007eee:	4baf      	ldr	r3, [pc, #700]	@ (80081ac <loadMenuTexts+0x36c>)
 8007ef0:	4614      	mov	r4, r2
 8007ef2:	461d      	mov	r5, r3
 8007ef4:	6828      	ldr	r0, [r5, #0]
 8007ef6:	6869      	ldr	r1, [r5, #4]
 8007ef8:	68aa      	ldr	r2, [r5, #8]
 8007efa:	68eb      	ldr	r3, [r5, #12]
 8007efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007efe:	7c2b      	ldrb	r3, [r5, #16]
 8007f00:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8007f02:	4aab      	ldr	r2, [pc, #684]	@ (80081b0 <loadMenuTexts+0x370>)
 8007f04:	4bab      	ldr	r3, [pc, #684]	@ (80081b4 <loadMenuTexts+0x374>)
 8007f06:	4614      	mov	r4, r2
 8007f08:	461d      	mov	r5, r3
 8007f0a:	6828      	ldr	r0, [r5, #0]
 8007f0c:	6869      	ldr	r1, [r5, #4]
 8007f0e:	68aa      	ldr	r2, [r5, #8]
 8007f10:	68eb      	ldr	r3, [r5, #12]
 8007f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f14:	7c2b      	ldrb	r3, [r5, #16]
 8007f16:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8007f18:	4aa7      	ldr	r2, [pc, #668]	@ (80081b8 <loadMenuTexts+0x378>)
 8007f1a:	4ba8      	ldr	r3, [pc, #672]	@ (80081bc <loadMenuTexts+0x37c>)
 8007f1c:	4614      	mov	r4, r2
 8007f1e:	461d      	mov	r5, r3
 8007f20:	6828      	ldr	r0, [r5, #0]
 8007f22:	6869      	ldr	r1, [r5, #4]
 8007f24:	68aa      	ldr	r2, [r5, #8]
 8007f26:	68eb      	ldr	r3, [r5, #12]
 8007f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f2a:	7c2b      	ldrb	r3, [r5, #16]
 8007f2c:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8007f2e:	4aa4      	ldr	r2, [pc, #656]	@ (80081c0 <loadMenuTexts+0x380>)
 8007f30:	4ba4      	ldr	r3, [pc, #656]	@ (80081c4 <loadMenuTexts+0x384>)
 8007f32:	4614      	mov	r4, r2
 8007f34:	461d      	mov	r5, r3
 8007f36:	6828      	ldr	r0, [r5, #0]
 8007f38:	6869      	ldr	r1, [r5, #4]
 8007f3a:	68aa      	ldr	r2, [r5, #8]
 8007f3c:	68eb      	ldr	r3, [r5, #12]
 8007f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f40:	7c2b      	ldrb	r3, [r5, #16]
 8007f42:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8007f44:	4aa0      	ldr	r2, [pc, #640]	@ (80081c8 <loadMenuTexts+0x388>)
 8007f46:	4ba1      	ldr	r3, [pc, #644]	@ (80081cc <loadMenuTexts+0x38c>)
 8007f48:	4614      	mov	r4, r2
 8007f4a:	461d      	mov	r5, r3
 8007f4c:	6828      	ldr	r0, [r5, #0]
 8007f4e:	6869      	ldr	r1, [r5, #4]
 8007f50:	68aa      	ldr	r2, [r5, #8]
 8007f52:	68eb      	ldr	r3, [r5, #12]
 8007f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f56:	7c2b      	ldrb	r3, [r5, #16]
 8007f58:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8007f5a:	4a9d      	ldr	r2, [pc, #628]	@ (80081d0 <loadMenuTexts+0x390>)
 8007f5c:	4b9d      	ldr	r3, [pc, #628]	@ (80081d4 <loadMenuTexts+0x394>)
 8007f5e:	4614      	mov	r4, r2
 8007f60:	461d      	mov	r5, r3
 8007f62:	6828      	ldr	r0, [r5, #0]
 8007f64:	6869      	ldr	r1, [r5, #4]
 8007f66:	68aa      	ldr	r2, [r5, #8]
 8007f68:	68eb      	ldr	r3, [r5, #12]
 8007f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f6c:	7c2b      	ldrb	r3, [r5, #16]
 8007f6e:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8007f70:	4a99      	ldr	r2, [pc, #612]	@ (80081d8 <loadMenuTexts+0x398>)
 8007f72:	4b9a      	ldr	r3, [pc, #616]	@ (80081dc <loadMenuTexts+0x39c>)
 8007f74:	4614      	mov	r4, r2
 8007f76:	461d      	mov	r5, r3
 8007f78:	6828      	ldr	r0, [r5, #0]
 8007f7a:	6869      	ldr	r1, [r5, #4]
 8007f7c:	68aa      	ldr	r2, [r5, #8]
 8007f7e:	68eb      	ldr	r3, [r5, #12]
 8007f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f82:	7c2b      	ldrb	r3, [r5, #16]
 8007f84:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 8007f86:	4a96      	ldr	r2, [pc, #600]	@ (80081e0 <loadMenuTexts+0x3a0>)
 8007f88:	4b96      	ldr	r3, [pc, #600]	@ (80081e4 <loadMenuTexts+0x3a4>)
 8007f8a:	4614      	mov	r4, r2
 8007f8c:	461d      	mov	r5, r3
 8007f8e:	6828      	ldr	r0, [r5, #0]
 8007f90:	6869      	ldr	r1, [r5, #4]
 8007f92:	68aa      	ldr	r2, [r5, #8]
 8007f94:	68eb      	ldr	r3, [r5, #12]
 8007f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f98:	7c2b      	ldrb	r3, [r5, #16]
 8007f9a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8007f9c:	4a92      	ldr	r2, [pc, #584]	@ (80081e8 <loadMenuTexts+0x3a8>)
 8007f9e:	4b93      	ldr	r3, [pc, #588]	@ (80081ec <loadMenuTexts+0x3ac>)
 8007fa0:	4614      	mov	r4, r2
 8007fa2:	461d      	mov	r5, r3
 8007fa4:	6828      	ldr	r0, [r5, #0]
 8007fa6:	6869      	ldr	r1, [r5, #4]
 8007fa8:	68aa      	ldr	r2, [r5, #8]
 8007faa:	68eb      	ldr	r3, [r5, #12]
 8007fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fae:	7c2b      	ldrb	r3, [r5, #16]
 8007fb0:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 8007fb2:	4a8f      	ldr	r2, [pc, #572]	@ (80081f0 <loadMenuTexts+0x3b0>)
 8007fb4:	4b8f      	ldr	r3, [pc, #572]	@ (80081f4 <loadMenuTexts+0x3b4>)
 8007fb6:	4614      	mov	r4, r2
 8007fb8:	461d      	mov	r5, r3
 8007fba:	6828      	ldr	r0, [r5, #0]
 8007fbc:	6869      	ldr	r1, [r5, #4]
 8007fbe:	68aa      	ldr	r2, [r5, #8]
 8007fc0:	68eb      	ldr	r3, [r5, #12]
 8007fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fc4:	7c2b      	ldrb	r3, [r5, #16]
 8007fc6:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 8007fc8:	4a8b      	ldr	r2, [pc, #556]	@ (80081f8 <loadMenuTexts+0x3b8>)
 8007fca:	4b8c      	ldr	r3, [pc, #560]	@ (80081fc <loadMenuTexts+0x3bc>)
 8007fcc:	4614      	mov	r4, r2
 8007fce:	461d      	mov	r5, r3
 8007fd0:	6828      	ldr	r0, [r5, #0]
 8007fd2:	6869      	ldr	r1, [r5, #4]
 8007fd4:	68aa      	ldr	r2, [r5, #8]
 8007fd6:	68eb      	ldr	r3, [r5, #12]
 8007fd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fda:	7c2b      	ldrb	r3, [r5, #16]
 8007fdc:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 8007fde:	4a88      	ldr	r2, [pc, #544]	@ (8008200 <loadMenuTexts+0x3c0>)
 8007fe0:	4b88      	ldr	r3, [pc, #544]	@ (8008204 <loadMenuTexts+0x3c4>)
 8007fe2:	4614      	mov	r4, r2
 8007fe4:	461d      	mov	r5, r3
 8007fe6:	6828      	ldr	r0, [r5, #0]
 8007fe8:	6869      	ldr	r1, [r5, #4]
 8007fea:	68aa      	ldr	r2, [r5, #8]
 8007fec:	68eb      	ldr	r3, [r5, #12]
 8007fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ff0:	7c2b      	ldrb	r3, [r5, #16]
 8007ff2:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 8007ff4:	4a84      	ldr	r2, [pc, #528]	@ (8008208 <loadMenuTexts+0x3c8>)
 8007ff6:	4b85      	ldr	r3, [pc, #532]	@ (800820c <loadMenuTexts+0x3cc>)
 8007ff8:	4614      	mov	r4, r2
 8007ffa:	461d      	mov	r5, r3
 8007ffc:	6828      	ldr	r0, [r5, #0]
 8007ffe:	6869      	ldr	r1, [r5, #4]
 8008000:	68aa      	ldr	r2, [r5, #8]
 8008002:	68eb      	ldr	r3, [r5, #12]
 8008004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008006:	7c2b      	ldrb	r3, [r5, #16]
 8008008:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 800800a:	4a81      	ldr	r2, [pc, #516]	@ (8008210 <loadMenuTexts+0x3d0>)
 800800c:	4b81      	ldr	r3, [pc, #516]	@ (8008214 <loadMenuTexts+0x3d4>)
 800800e:	4614      	mov	r4, r2
 8008010:	461d      	mov	r5, r3
 8008012:	6828      	ldr	r0, [r5, #0]
 8008014:	6869      	ldr	r1, [r5, #4]
 8008016:	68aa      	ldr	r2, [r5, #8]
 8008018:	68eb      	ldr	r3, [r5, #12]
 800801a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800801c:	7c2b      	ldrb	r3, [r5, #16]
 800801e:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 8008020:	4a7d      	ldr	r2, [pc, #500]	@ (8008218 <loadMenuTexts+0x3d8>)
 8008022:	4b7e      	ldr	r3, [pc, #504]	@ (800821c <loadMenuTexts+0x3dc>)
 8008024:	4614      	mov	r4, r2
 8008026:	461d      	mov	r5, r3
 8008028:	6828      	ldr	r0, [r5, #0]
 800802a:	6869      	ldr	r1, [r5, #4]
 800802c:	68aa      	ldr	r2, [r5, #8]
 800802e:	68eb      	ldr	r3, [r5, #12]
 8008030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008032:	7c2b      	ldrb	r3, [r5, #16]
 8008034:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 8008036:	4a7a      	ldr	r2, [pc, #488]	@ (8008220 <loadMenuTexts+0x3e0>)
 8008038:	4b7a      	ldr	r3, [pc, #488]	@ (8008224 <loadMenuTexts+0x3e4>)
 800803a:	4614      	mov	r4, r2
 800803c:	461d      	mov	r5, r3
 800803e:	6828      	ldr	r0, [r5, #0]
 8008040:	6869      	ldr	r1, [r5, #4]
 8008042:	68aa      	ldr	r2, [r5, #8]
 8008044:	68eb      	ldr	r3, [r5, #12]
 8008046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008048:	7c2b      	ldrb	r3, [r5, #16]
 800804a:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 800804c:	4a76      	ldr	r2, [pc, #472]	@ (8008228 <loadMenuTexts+0x3e8>)
 800804e:	4b77      	ldr	r3, [pc, #476]	@ (800822c <loadMenuTexts+0x3ec>)
 8008050:	4614      	mov	r4, r2
 8008052:	461d      	mov	r5, r3
 8008054:	6828      	ldr	r0, [r5, #0]
 8008056:	6869      	ldr	r1, [r5, #4]
 8008058:	68aa      	ldr	r2, [r5, #8]
 800805a:	68eb      	ldr	r3, [r5, #12]
 800805c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800805e:	7c2b      	ldrb	r3, [r5, #16]
 8008060:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 8008062:	4a73      	ldr	r2, [pc, #460]	@ (8008230 <loadMenuTexts+0x3f0>)
 8008064:	4b73      	ldr	r3, [pc, #460]	@ (8008234 <loadMenuTexts+0x3f4>)
 8008066:	4614      	mov	r4, r2
 8008068:	461d      	mov	r5, r3
 800806a:	6828      	ldr	r0, [r5, #0]
 800806c:	6869      	ldr	r1, [r5, #4]
 800806e:	68aa      	ldr	r2, [r5, #8]
 8008070:	68eb      	ldr	r3, [r5, #12]
 8008072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008074:	7c2b      	ldrb	r3, [r5, #16]
 8008076:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8008078:	4a6f      	ldr	r2, [pc, #444]	@ (8008238 <loadMenuTexts+0x3f8>)
 800807a:	4b70      	ldr	r3, [pc, #448]	@ (800823c <loadMenuTexts+0x3fc>)
 800807c:	4614      	mov	r4, r2
 800807e:	461d      	mov	r5, r3
 8008080:	6828      	ldr	r0, [r5, #0]
 8008082:	6869      	ldr	r1, [r5, #4]
 8008084:	68aa      	ldr	r2, [r5, #8]
 8008086:	68eb      	ldr	r3, [r5, #12]
 8008088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800808a:	7c2b      	ldrb	r3, [r5, #16]
 800808c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 800808e:	4a6c      	ldr	r2, [pc, #432]	@ (8008240 <loadMenuTexts+0x400>)
 8008090:	4b6c      	ldr	r3, [pc, #432]	@ (8008244 <loadMenuTexts+0x404>)
 8008092:	4614      	mov	r4, r2
 8008094:	461d      	mov	r5, r3
 8008096:	6828      	ldr	r0, [r5, #0]
 8008098:	6869      	ldr	r1, [r5, #4]
 800809a:	68aa      	ldr	r2, [r5, #8]
 800809c:	68eb      	ldr	r3, [r5, #12]
 800809e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080a0:	7c2b      	ldrb	r3, [r5, #16]
 80080a2:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 80080a4:	4a68      	ldr	r2, [pc, #416]	@ (8008248 <loadMenuTexts+0x408>)
 80080a6:	4b69      	ldr	r3, [pc, #420]	@ (800824c <loadMenuTexts+0x40c>)
 80080a8:	4614      	mov	r4, r2
 80080aa:	461d      	mov	r5, r3
 80080ac:	6828      	ldr	r0, [r5, #0]
 80080ae:	6869      	ldr	r1, [r5, #4]
 80080b0:	68aa      	ldr	r2, [r5, #8]
 80080b2:	68eb      	ldr	r3, [r5, #12]
 80080b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080b6:	7c2b      	ldrb	r3, [r5, #16]
 80080b8:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 80080ba:	4a65      	ldr	r2, [pc, #404]	@ (8008250 <loadMenuTexts+0x410>)
 80080bc:	4b65      	ldr	r3, [pc, #404]	@ (8008254 <loadMenuTexts+0x414>)
 80080be:	4614      	mov	r4, r2
 80080c0:	461d      	mov	r5, r3
 80080c2:	6828      	ldr	r0, [r5, #0]
 80080c4:	6869      	ldr	r1, [r5, #4]
 80080c6:	68aa      	ldr	r2, [r5, #8]
 80080c8:	68eb      	ldr	r3, [r5, #12]
 80080ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080cc:	7c2b      	ldrb	r3, [r5, #16]
 80080ce:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 80080d0:	4a61      	ldr	r2, [pc, #388]	@ (8008258 <loadMenuTexts+0x418>)
 80080d2:	4b62      	ldr	r3, [pc, #392]	@ (800825c <loadMenuTexts+0x41c>)
 80080d4:	4614      	mov	r4, r2
 80080d6:	461d      	mov	r5, r3
 80080d8:	6828      	ldr	r0, [r5, #0]
 80080da:	6869      	ldr	r1, [r5, #4]
 80080dc:	68aa      	ldr	r2, [r5, #8]
 80080de:	68eb      	ldr	r3, [r5, #12]
 80080e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080e2:	7c2b      	ldrb	r3, [r5, #16]
 80080e4:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 80080e6:	4a5e      	ldr	r2, [pc, #376]	@ (8008260 <loadMenuTexts+0x420>)
 80080e8:	4b5e      	ldr	r3, [pc, #376]	@ (8008264 <loadMenuTexts+0x424>)
 80080ea:	4614      	mov	r4, r2
 80080ec:	461d      	mov	r5, r3
 80080ee:	6828      	ldr	r0, [r5, #0]
 80080f0:	6869      	ldr	r1, [r5, #4]
 80080f2:	68aa      	ldr	r2, [r5, #8]
 80080f4:	68eb      	ldr	r3, [r5, #12]
 80080f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080f8:	7c2b      	ldrb	r3, [r5, #16]
 80080fa:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 80080fc:	4a5a      	ldr	r2, [pc, #360]	@ (8008268 <loadMenuTexts+0x428>)
 80080fe:	4b5b      	ldr	r3, [pc, #364]	@ (800826c <loadMenuTexts+0x42c>)
 8008100:	4614      	mov	r4, r2
 8008102:	461d      	mov	r5, r3
 8008104:	6828      	ldr	r0, [r5, #0]
 8008106:	6869      	ldr	r1, [r5, #4]
 8008108:	68aa      	ldr	r2, [r5, #8]
 800810a:	68eb      	ldr	r3, [r5, #12]
 800810c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800810e:	7c2b      	ldrb	r3, [r5, #16]
 8008110:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 8008112:	4a57      	ldr	r2, [pc, #348]	@ (8008270 <loadMenuTexts+0x430>)
 8008114:	4b57      	ldr	r3, [pc, #348]	@ (8008274 <loadMenuTexts+0x434>)
 8008116:	4614      	mov	r4, r2
 8008118:	461d      	mov	r5, r3
 800811a:	6828      	ldr	r0, [r5, #0]
 800811c:	6869      	ldr	r1, [r5, #4]
 800811e:	68aa      	ldr	r2, [r5, #8]
 8008120:	68eb      	ldr	r3, [r5, #12]
 8008122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008124:	7c2b      	ldrb	r3, [r5, #16]
 8008126:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 8008128:	4a53      	ldr	r2, [pc, #332]	@ (8008278 <loadMenuTexts+0x438>)
 800812a:	4b54      	ldr	r3, [pc, #336]	@ (800827c <loadMenuTexts+0x43c>)
 800812c:	4614      	mov	r4, r2
 800812e:	461d      	mov	r5, r3
 8008130:	6828      	ldr	r0, [r5, #0]
 8008132:	6869      	ldr	r1, [r5, #4]
 8008134:	68aa      	ldr	r2, [r5, #8]
 8008136:	68eb      	ldr	r3, [r5, #12]
 8008138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800813a:	7c2b      	ldrb	r3, [r5, #16]
 800813c:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 800813e:	4a50      	ldr	r2, [pc, #320]	@ (8008280 <loadMenuTexts+0x440>)
 8008140:	4b50      	ldr	r3, [pc, #320]	@ (8008284 <loadMenuTexts+0x444>)
 8008142:	4614      	mov	r4, r2
 8008144:	461d      	mov	r5, r3
 8008146:	6828      	ldr	r0, [r5, #0]
 8008148:	6869      	ldr	r1, [r5, #4]
 800814a:	68aa      	ldr	r2, [r5, #8]
 800814c:	68eb      	ldr	r3, [r5, #12]
 800814e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008150:	7c2b      	ldrb	r3, [r5, #16]
 8008152:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 8008154:	4a4c      	ldr	r2, [pc, #304]	@ (8008288 <loadMenuTexts+0x448>)
 8008156:	4b4d      	ldr	r3, [pc, #308]	@ (800828c <loadMenuTexts+0x44c>)
 8008158:	4614      	mov	r4, r2
 800815a:	461d      	mov	r5, r3
 800815c:	6828      	ldr	r0, [r5, #0]
 800815e:	6869      	ldr	r1, [r5, #4]
 8008160:	68aa      	ldr	r2, [r5, #8]
 8008162:	68eb      	ldr	r3, [r5, #12]
 8008164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008166:	7c2b      	ldrb	r3, [r5, #16]
 8008168:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 800816a:	4a49      	ldr	r2, [pc, #292]	@ (8008290 <loadMenuTexts+0x450>)
 800816c:	e092      	b.n	8008294 <loadMenuTexts+0x454>
 800816e:	bf00      	nop
 8008170:	20001254 	.word	0x20001254
 8008174:	20000120 	.word	0x20000120
 8008178:	20001268 	.word	0x20001268
 800817c:	20000134 	.word	0x20000134
 8008180:	2000127c 	.word	0x2000127c
 8008184:	20000148 	.word	0x20000148
 8008188:	20001290 	.word	0x20001290
 800818c:	2000015c 	.word	0x2000015c
 8008190:	200012a4 	.word	0x200012a4
 8008194:	20000170 	.word	0x20000170
 8008198:	200012b8 	.word	0x200012b8
 800819c:	20000184 	.word	0x20000184
 80081a0:	200012cc 	.word	0x200012cc
 80081a4:	20000198 	.word	0x20000198
 80081a8:	200012e0 	.word	0x200012e0
 80081ac:	200001ac 	.word	0x200001ac
 80081b0:	200012f4 	.word	0x200012f4
 80081b4:	200001c0 	.word	0x200001c0
 80081b8:	20001308 	.word	0x20001308
 80081bc:	200001d4 	.word	0x200001d4
 80081c0:	2000131c 	.word	0x2000131c
 80081c4:	200001e8 	.word	0x200001e8
 80081c8:	20001330 	.word	0x20001330
 80081cc:	200001fc 	.word	0x200001fc
 80081d0:	20001344 	.word	0x20001344
 80081d4:	20000210 	.word	0x20000210
 80081d8:	20001358 	.word	0x20001358
 80081dc:	20000224 	.word	0x20000224
 80081e0:	2000136c 	.word	0x2000136c
 80081e4:	20000238 	.word	0x20000238
 80081e8:	20001380 	.word	0x20001380
 80081ec:	2000024c 	.word	0x2000024c
 80081f0:	20001394 	.word	0x20001394
 80081f4:	20000260 	.word	0x20000260
 80081f8:	200013a8 	.word	0x200013a8
 80081fc:	20000274 	.word	0x20000274
 8008200:	200013bc 	.word	0x200013bc
 8008204:	20000288 	.word	0x20000288
 8008208:	200013d0 	.word	0x200013d0
 800820c:	2000029c 	.word	0x2000029c
 8008210:	200013e4 	.word	0x200013e4
 8008214:	200002b0 	.word	0x200002b0
 8008218:	200013f8 	.word	0x200013f8
 800821c:	200002c4 	.word	0x200002c4
 8008220:	2000140c 	.word	0x2000140c
 8008224:	200002d8 	.word	0x200002d8
 8008228:	20001420 	.word	0x20001420
 800822c:	200002ec 	.word	0x200002ec
 8008230:	20001434 	.word	0x20001434
 8008234:	20000300 	.word	0x20000300
 8008238:	20001448 	.word	0x20001448
 800823c:	20000314 	.word	0x20000314
 8008240:	2000145c 	.word	0x2000145c
 8008244:	20000328 	.word	0x20000328
 8008248:	20001470 	.word	0x20001470
 800824c:	2000033c 	.word	0x2000033c
 8008250:	20001484 	.word	0x20001484
 8008254:	20000350 	.word	0x20000350
 8008258:	20001498 	.word	0x20001498
 800825c:	20000364 	.word	0x20000364
 8008260:	200014ac 	.word	0x200014ac
 8008264:	20000378 	.word	0x20000378
 8008268:	200014c0 	.word	0x200014c0
 800826c:	2000038c 	.word	0x2000038c
 8008270:	200014d4 	.word	0x200014d4
 8008274:	200003a0 	.word	0x200003a0
 8008278:	200014e8 	.word	0x200014e8
 800827c:	200003b4 	.word	0x200003b4
 8008280:	200014fc 	.word	0x200014fc
 8008284:	200003c8 	.word	0x200003c8
 8008288:	20001510 	.word	0x20001510
 800828c:	200003dc 	.word	0x200003dc
 8008290:	20001524 	.word	0x20001524
 8008294:	4bc7      	ldr	r3, [pc, #796]	@ (80085b4 <loadMenuTexts+0x774>)
 8008296:	4614      	mov	r4, r2
 8008298:	461d      	mov	r5, r3
 800829a:	6828      	ldr	r0, [r5, #0]
 800829c:	6869      	ldr	r1, [r5, #4]
 800829e:	68aa      	ldr	r2, [r5, #8]
 80082a0:	68eb      	ldr	r3, [r5, #12]
 80082a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082a4:	7c2b      	ldrb	r3, [r5, #16]
 80082a6:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 80082a8:	4ac3      	ldr	r2, [pc, #780]	@ (80085b8 <loadMenuTexts+0x778>)
 80082aa:	4bc4      	ldr	r3, [pc, #784]	@ (80085bc <loadMenuTexts+0x77c>)
 80082ac:	4614      	mov	r4, r2
 80082ae:	461d      	mov	r5, r3
 80082b0:	6828      	ldr	r0, [r5, #0]
 80082b2:	6869      	ldr	r1, [r5, #4]
 80082b4:	68aa      	ldr	r2, [r5, #8]
 80082b6:	68eb      	ldr	r3, [r5, #12]
 80082b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082ba:	7c2b      	ldrb	r3, [r5, #16]
 80082bc:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 80082be:	4ac0      	ldr	r2, [pc, #768]	@ (80085c0 <loadMenuTexts+0x780>)
 80082c0:	4bc0      	ldr	r3, [pc, #768]	@ (80085c4 <loadMenuTexts+0x784>)
 80082c2:	4614      	mov	r4, r2
 80082c4:	461d      	mov	r5, r3
 80082c6:	6828      	ldr	r0, [r5, #0]
 80082c8:	6869      	ldr	r1, [r5, #4]
 80082ca:	68aa      	ldr	r2, [r5, #8]
 80082cc:	68eb      	ldr	r3, [r5, #12]
 80082ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082d0:	7c2b      	ldrb	r3, [r5, #16]
 80082d2:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 80082d4:	4abc      	ldr	r2, [pc, #752]	@ (80085c8 <loadMenuTexts+0x788>)
 80082d6:	4bbd      	ldr	r3, [pc, #756]	@ (80085cc <loadMenuTexts+0x78c>)
 80082d8:	4614      	mov	r4, r2
 80082da:	461d      	mov	r5, r3
 80082dc:	6828      	ldr	r0, [r5, #0]
 80082de:	6869      	ldr	r1, [r5, #4]
 80082e0:	68aa      	ldr	r2, [r5, #8]
 80082e2:	68eb      	ldr	r3, [r5, #12]
 80082e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082e6:	7c2b      	ldrb	r3, [r5, #16]
 80082e8:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 80082ea:	4ab9      	ldr	r2, [pc, #740]	@ (80085d0 <loadMenuTexts+0x790>)
 80082ec:	4bb9      	ldr	r3, [pc, #740]	@ (80085d4 <loadMenuTexts+0x794>)
 80082ee:	4614      	mov	r4, r2
 80082f0:	461d      	mov	r5, r3
 80082f2:	6828      	ldr	r0, [r5, #0]
 80082f4:	6869      	ldr	r1, [r5, #4]
 80082f6:	68aa      	ldr	r2, [r5, #8]
 80082f8:	68eb      	ldr	r3, [r5, #12]
 80082fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082fc:	7c2b      	ldrb	r3, [r5, #16]
 80082fe:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 8008300:	4ab5      	ldr	r2, [pc, #724]	@ (80085d8 <loadMenuTexts+0x798>)
 8008302:	4bb6      	ldr	r3, [pc, #728]	@ (80085dc <loadMenuTexts+0x79c>)
 8008304:	4614      	mov	r4, r2
 8008306:	461d      	mov	r5, r3
 8008308:	6828      	ldr	r0, [r5, #0]
 800830a:	6869      	ldr	r1, [r5, #4]
 800830c:	68aa      	ldr	r2, [r5, #8]
 800830e:	68eb      	ldr	r3, [r5, #12]
 8008310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008312:	7c2b      	ldrb	r3, [r5, #16]
 8008314:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 8008316:	4ab2      	ldr	r2, [pc, #712]	@ (80085e0 <loadMenuTexts+0x7a0>)
 8008318:	4bb2      	ldr	r3, [pc, #712]	@ (80085e4 <loadMenuTexts+0x7a4>)
 800831a:	4614      	mov	r4, r2
 800831c:	461d      	mov	r5, r3
 800831e:	6828      	ldr	r0, [r5, #0]
 8008320:	6869      	ldr	r1, [r5, #4]
 8008322:	68aa      	ldr	r2, [r5, #8]
 8008324:	68eb      	ldr	r3, [r5, #12]
 8008326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008328:	7c2b      	ldrb	r3, [r5, #16]
 800832a:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 800832c:	4aae      	ldr	r2, [pc, #696]	@ (80085e8 <loadMenuTexts+0x7a8>)
 800832e:	4baf      	ldr	r3, [pc, #700]	@ (80085ec <loadMenuTexts+0x7ac>)
 8008330:	4614      	mov	r4, r2
 8008332:	461d      	mov	r5, r3
 8008334:	6828      	ldr	r0, [r5, #0]
 8008336:	6869      	ldr	r1, [r5, #4]
 8008338:	68aa      	ldr	r2, [r5, #8]
 800833a:	68eb      	ldr	r3, [r5, #12]
 800833c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800833e:	7c2b      	ldrb	r3, [r5, #16]
 8008340:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 8008342:	4aab      	ldr	r2, [pc, #684]	@ (80085f0 <loadMenuTexts+0x7b0>)
 8008344:	4bab      	ldr	r3, [pc, #684]	@ (80085f4 <loadMenuTexts+0x7b4>)
 8008346:	4614      	mov	r4, r2
 8008348:	461d      	mov	r5, r3
 800834a:	6828      	ldr	r0, [r5, #0]
 800834c:	6869      	ldr	r1, [r5, #4]
 800834e:	68aa      	ldr	r2, [r5, #8]
 8008350:	68eb      	ldr	r3, [r5, #12]
 8008352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008354:	7c2b      	ldrb	r3, [r5, #16]
 8008356:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8008358:	4aa7      	ldr	r2, [pc, #668]	@ (80085f8 <loadMenuTexts+0x7b8>)
 800835a:	4ba8      	ldr	r3, [pc, #672]	@ (80085fc <loadMenuTexts+0x7bc>)
 800835c:	4614      	mov	r4, r2
 800835e:	461d      	mov	r5, r3
 8008360:	6828      	ldr	r0, [r5, #0]
 8008362:	6869      	ldr	r1, [r5, #4]
 8008364:	68aa      	ldr	r2, [r5, #8]
 8008366:	68eb      	ldr	r3, [r5, #12]
 8008368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800836a:	7c2b      	ldrb	r3, [r5, #16]
 800836c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 800836e:	4aa4      	ldr	r2, [pc, #656]	@ (8008600 <loadMenuTexts+0x7c0>)
 8008370:	4ba4      	ldr	r3, [pc, #656]	@ (8008604 <loadMenuTexts+0x7c4>)
 8008372:	4614      	mov	r4, r2
 8008374:	461d      	mov	r5, r3
 8008376:	6828      	ldr	r0, [r5, #0]
 8008378:	6869      	ldr	r1, [r5, #4]
 800837a:	68aa      	ldr	r2, [r5, #8]
 800837c:	68eb      	ldr	r3, [r5, #12]
 800837e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008380:	7c2b      	ldrb	r3, [r5, #16]
 8008382:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 8008384:	4aa0      	ldr	r2, [pc, #640]	@ (8008608 <loadMenuTexts+0x7c8>)
 8008386:	4ba1      	ldr	r3, [pc, #644]	@ (800860c <loadMenuTexts+0x7cc>)
 8008388:	4614      	mov	r4, r2
 800838a:	461d      	mov	r5, r3
 800838c:	6828      	ldr	r0, [r5, #0]
 800838e:	6869      	ldr	r1, [r5, #4]
 8008390:	68aa      	ldr	r2, [r5, #8]
 8008392:	68eb      	ldr	r3, [r5, #12]
 8008394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008396:	7c2b      	ldrb	r3, [r5, #16]
 8008398:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 800839a:	4a9d      	ldr	r2, [pc, #628]	@ (8008610 <loadMenuTexts+0x7d0>)
 800839c:	4b9d      	ldr	r3, [pc, #628]	@ (8008614 <loadMenuTexts+0x7d4>)
 800839e:	4614      	mov	r4, r2
 80083a0:	461d      	mov	r5, r3
 80083a2:	6828      	ldr	r0, [r5, #0]
 80083a4:	6869      	ldr	r1, [r5, #4]
 80083a6:	68aa      	ldr	r2, [r5, #8]
 80083a8:	68eb      	ldr	r3, [r5, #12]
 80083aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083ac:	7c2b      	ldrb	r3, [r5, #16]
 80083ae:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 80083b0:	4a99      	ldr	r2, [pc, #612]	@ (8008618 <loadMenuTexts+0x7d8>)
 80083b2:	4b9a      	ldr	r3, [pc, #616]	@ (800861c <loadMenuTexts+0x7dc>)
 80083b4:	4614      	mov	r4, r2
 80083b6:	461d      	mov	r5, r3
 80083b8:	6828      	ldr	r0, [r5, #0]
 80083ba:	6869      	ldr	r1, [r5, #4]
 80083bc:	68aa      	ldr	r2, [r5, #8]
 80083be:	68eb      	ldr	r3, [r5, #12]
 80083c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083c2:	7c2b      	ldrb	r3, [r5, #16]
 80083c4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 80083c6:	4a96      	ldr	r2, [pc, #600]	@ (8008620 <loadMenuTexts+0x7e0>)
 80083c8:	4b96      	ldr	r3, [pc, #600]	@ (8008624 <loadMenuTexts+0x7e4>)
 80083ca:	4614      	mov	r4, r2
 80083cc:	461d      	mov	r5, r3
 80083ce:	6828      	ldr	r0, [r5, #0]
 80083d0:	6869      	ldr	r1, [r5, #4]
 80083d2:	68aa      	ldr	r2, [r5, #8]
 80083d4:	68eb      	ldr	r3, [r5, #12]
 80083d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083d8:	7c2b      	ldrb	r3, [r5, #16]
 80083da:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 80083dc:	4a92      	ldr	r2, [pc, #584]	@ (8008628 <loadMenuTexts+0x7e8>)
 80083de:	4b93      	ldr	r3, [pc, #588]	@ (800862c <loadMenuTexts+0x7ec>)
 80083e0:	4614      	mov	r4, r2
 80083e2:	461d      	mov	r5, r3
 80083e4:	6828      	ldr	r0, [r5, #0]
 80083e6:	6869      	ldr	r1, [r5, #4]
 80083e8:	68aa      	ldr	r2, [r5, #8]
 80083ea:	68eb      	ldr	r3, [r5, #12]
 80083ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083ee:	7c2b      	ldrb	r3, [r5, #16]
 80083f0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 80083f2:	4a8f      	ldr	r2, [pc, #572]	@ (8008630 <loadMenuTexts+0x7f0>)
 80083f4:	4b8f      	ldr	r3, [pc, #572]	@ (8008634 <loadMenuTexts+0x7f4>)
 80083f6:	4614      	mov	r4, r2
 80083f8:	461d      	mov	r5, r3
 80083fa:	6828      	ldr	r0, [r5, #0]
 80083fc:	6869      	ldr	r1, [r5, #4]
 80083fe:	68aa      	ldr	r2, [r5, #8]
 8008400:	68eb      	ldr	r3, [r5, #12]
 8008402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008404:	7c2b      	ldrb	r3, [r5, #16]
 8008406:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 8008408:	4a8b      	ldr	r2, [pc, #556]	@ (8008638 <loadMenuTexts+0x7f8>)
 800840a:	4b8c      	ldr	r3, [pc, #560]	@ (800863c <loadMenuTexts+0x7fc>)
 800840c:	4614      	mov	r4, r2
 800840e:	461d      	mov	r5, r3
 8008410:	6828      	ldr	r0, [r5, #0]
 8008412:	6869      	ldr	r1, [r5, #4]
 8008414:	68aa      	ldr	r2, [r5, #8]
 8008416:	68eb      	ldr	r3, [r5, #12]
 8008418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800841a:	7c2b      	ldrb	r3, [r5, #16]
 800841c:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 800841e:	4a88      	ldr	r2, [pc, #544]	@ (8008640 <loadMenuTexts+0x800>)
 8008420:	4b88      	ldr	r3, [pc, #544]	@ (8008644 <loadMenuTexts+0x804>)
 8008422:	4614      	mov	r4, r2
 8008424:	461d      	mov	r5, r3
 8008426:	6828      	ldr	r0, [r5, #0]
 8008428:	6869      	ldr	r1, [r5, #4]
 800842a:	68aa      	ldr	r2, [r5, #8]
 800842c:	68eb      	ldr	r3, [r5, #12]
 800842e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008430:	7c2b      	ldrb	r3, [r5, #16]
 8008432:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8008434:	4a84      	ldr	r2, [pc, #528]	@ (8008648 <loadMenuTexts+0x808>)
 8008436:	4b85      	ldr	r3, [pc, #532]	@ (800864c <loadMenuTexts+0x80c>)
 8008438:	4614      	mov	r4, r2
 800843a:	461d      	mov	r5, r3
 800843c:	6828      	ldr	r0, [r5, #0]
 800843e:	6869      	ldr	r1, [r5, #4]
 8008440:	68aa      	ldr	r2, [r5, #8]
 8008442:	68eb      	ldr	r3, [r5, #12]
 8008444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008446:	7c2b      	ldrb	r3, [r5, #16]
 8008448:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 800844a:	4a81      	ldr	r2, [pc, #516]	@ (8008650 <loadMenuTexts+0x810>)
 800844c:	4b81      	ldr	r3, [pc, #516]	@ (8008654 <loadMenuTexts+0x814>)
 800844e:	4614      	mov	r4, r2
 8008450:	461d      	mov	r5, r3
 8008452:	6828      	ldr	r0, [r5, #0]
 8008454:	6869      	ldr	r1, [r5, #4]
 8008456:	68aa      	ldr	r2, [r5, #8]
 8008458:	68eb      	ldr	r3, [r5, #12]
 800845a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800845c:	7c2b      	ldrb	r3, [r5, #16]
 800845e:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 8008460:	4a7d      	ldr	r2, [pc, #500]	@ (8008658 <loadMenuTexts+0x818>)
 8008462:	4b7e      	ldr	r3, [pc, #504]	@ (800865c <loadMenuTexts+0x81c>)
 8008464:	4614      	mov	r4, r2
 8008466:	461d      	mov	r5, r3
 8008468:	6828      	ldr	r0, [r5, #0]
 800846a:	6869      	ldr	r1, [r5, #4]
 800846c:	68aa      	ldr	r2, [r5, #8]
 800846e:	68eb      	ldr	r3, [r5, #12]
 8008470:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008472:	7c2b      	ldrb	r3, [r5, #16]
 8008474:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 8008476:	4a7a      	ldr	r2, [pc, #488]	@ (8008660 <loadMenuTexts+0x820>)
 8008478:	4b7a      	ldr	r3, [pc, #488]	@ (8008664 <loadMenuTexts+0x824>)
 800847a:	4614      	mov	r4, r2
 800847c:	461d      	mov	r5, r3
 800847e:	6828      	ldr	r0, [r5, #0]
 8008480:	6869      	ldr	r1, [r5, #4]
 8008482:	68aa      	ldr	r2, [r5, #8]
 8008484:	68eb      	ldr	r3, [r5, #12]
 8008486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008488:	7c2b      	ldrb	r3, [r5, #16]
 800848a:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 800848c:	4a76      	ldr	r2, [pc, #472]	@ (8008668 <loadMenuTexts+0x828>)
 800848e:	4b77      	ldr	r3, [pc, #476]	@ (800866c <loadMenuTexts+0x82c>)
 8008490:	4614      	mov	r4, r2
 8008492:	461d      	mov	r5, r3
 8008494:	6828      	ldr	r0, [r5, #0]
 8008496:	6869      	ldr	r1, [r5, #4]
 8008498:	68aa      	ldr	r2, [r5, #8]
 800849a:	68eb      	ldr	r3, [r5, #12]
 800849c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800849e:	7c2b      	ldrb	r3, [r5, #16]
 80084a0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 80084a2:	4a73      	ldr	r2, [pc, #460]	@ (8008670 <loadMenuTexts+0x830>)
 80084a4:	4b73      	ldr	r3, [pc, #460]	@ (8008674 <loadMenuTexts+0x834>)
 80084a6:	4614      	mov	r4, r2
 80084a8:	461d      	mov	r5, r3
 80084aa:	6828      	ldr	r0, [r5, #0]
 80084ac:	6869      	ldr	r1, [r5, #4]
 80084ae:	68aa      	ldr	r2, [r5, #8]
 80084b0:	68eb      	ldr	r3, [r5, #12]
 80084b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084b4:	7c2b      	ldrb	r3, [r5, #16]
 80084b6:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 80084b8:	4a6f      	ldr	r2, [pc, #444]	@ (8008678 <loadMenuTexts+0x838>)
 80084ba:	4b70      	ldr	r3, [pc, #448]	@ (800867c <loadMenuTexts+0x83c>)
 80084bc:	4614      	mov	r4, r2
 80084be:	461d      	mov	r5, r3
 80084c0:	6828      	ldr	r0, [r5, #0]
 80084c2:	6869      	ldr	r1, [r5, #4]
 80084c4:	68aa      	ldr	r2, [r5, #8]
 80084c6:	68eb      	ldr	r3, [r5, #12]
 80084c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084ca:	7c2b      	ldrb	r3, [r5, #16]
 80084cc:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 80084ce:	4a6c      	ldr	r2, [pc, #432]	@ (8008680 <loadMenuTexts+0x840>)
 80084d0:	4b6c      	ldr	r3, [pc, #432]	@ (8008684 <loadMenuTexts+0x844>)
 80084d2:	4614      	mov	r4, r2
 80084d4:	461d      	mov	r5, r3
 80084d6:	6828      	ldr	r0, [r5, #0]
 80084d8:	6869      	ldr	r1, [r5, #4]
 80084da:	68aa      	ldr	r2, [r5, #8]
 80084dc:	68eb      	ldr	r3, [r5, #12]
 80084de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084e0:	7c2b      	ldrb	r3, [r5, #16]
 80084e2:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 80084e4:	4a68      	ldr	r2, [pc, #416]	@ (8008688 <loadMenuTexts+0x848>)
 80084e6:	4b69      	ldr	r3, [pc, #420]	@ (800868c <loadMenuTexts+0x84c>)
 80084e8:	4614      	mov	r4, r2
 80084ea:	461d      	mov	r5, r3
 80084ec:	6828      	ldr	r0, [r5, #0]
 80084ee:	6869      	ldr	r1, [r5, #4]
 80084f0:	68aa      	ldr	r2, [r5, #8]
 80084f2:	68eb      	ldr	r3, [r5, #12]
 80084f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084f6:	7c2b      	ldrb	r3, [r5, #16]
 80084f8:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 80084fa:	4a65      	ldr	r2, [pc, #404]	@ (8008690 <loadMenuTexts+0x850>)
 80084fc:	4b65      	ldr	r3, [pc, #404]	@ (8008694 <loadMenuTexts+0x854>)
 80084fe:	4614      	mov	r4, r2
 8008500:	461d      	mov	r5, r3
 8008502:	6828      	ldr	r0, [r5, #0]
 8008504:	6869      	ldr	r1, [r5, #4]
 8008506:	68aa      	ldr	r2, [r5, #8]
 8008508:	68eb      	ldr	r3, [r5, #12]
 800850a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800850c:	7c2b      	ldrb	r3, [r5, #16]
 800850e:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 8008510:	4a61      	ldr	r2, [pc, #388]	@ (8008698 <loadMenuTexts+0x858>)
 8008512:	4b62      	ldr	r3, [pc, #392]	@ (800869c <loadMenuTexts+0x85c>)
 8008514:	4614      	mov	r4, r2
 8008516:	461d      	mov	r5, r3
 8008518:	6828      	ldr	r0, [r5, #0]
 800851a:	6869      	ldr	r1, [r5, #4]
 800851c:	68aa      	ldr	r2, [r5, #8]
 800851e:	68eb      	ldr	r3, [r5, #12]
 8008520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008522:	7c2b      	ldrb	r3, [r5, #16]
 8008524:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 8008526:	4a5e      	ldr	r2, [pc, #376]	@ (80086a0 <loadMenuTexts+0x860>)
 8008528:	4b5e      	ldr	r3, [pc, #376]	@ (80086a4 <loadMenuTexts+0x864>)
 800852a:	4614      	mov	r4, r2
 800852c:	461d      	mov	r5, r3
 800852e:	6828      	ldr	r0, [r5, #0]
 8008530:	6869      	ldr	r1, [r5, #4]
 8008532:	68aa      	ldr	r2, [r5, #8]
 8008534:	68eb      	ldr	r3, [r5, #12]
 8008536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008538:	7c2b      	ldrb	r3, [r5, #16]
 800853a:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 800853c:	4a5a      	ldr	r2, [pc, #360]	@ (80086a8 <loadMenuTexts+0x868>)
 800853e:	4b5b      	ldr	r3, [pc, #364]	@ (80086ac <loadMenuTexts+0x86c>)
 8008540:	4614      	mov	r4, r2
 8008542:	461d      	mov	r5, r3
 8008544:	6828      	ldr	r0, [r5, #0]
 8008546:	6869      	ldr	r1, [r5, #4]
 8008548:	68aa      	ldr	r2, [r5, #8]
 800854a:	68eb      	ldr	r3, [r5, #12]
 800854c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800854e:	7c2b      	ldrb	r3, [r5, #16]
 8008550:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 8008552:	4a57      	ldr	r2, [pc, #348]	@ (80086b0 <loadMenuTexts+0x870>)
 8008554:	4b57      	ldr	r3, [pc, #348]	@ (80086b4 <loadMenuTexts+0x874>)
 8008556:	4614      	mov	r4, r2
 8008558:	461d      	mov	r5, r3
 800855a:	6828      	ldr	r0, [r5, #0]
 800855c:	6869      	ldr	r1, [r5, #4]
 800855e:	68aa      	ldr	r2, [r5, #8]
 8008560:	68eb      	ldr	r3, [r5, #12]
 8008562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008564:	7c2b      	ldrb	r3, [r5, #16]
 8008566:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8008568:	4a53      	ldr	r2, [pc, #332]	@ (80086b8 <loadMenuTexts+0x878>)
 800856a:	4b54      	ldr	r3, [pc, #336]	@ (80086bc <loadMenuTexts+0x87c>)
 800856c:	4614      	mov	r4, r2
 800856e:	461d      	mov	r5, r3
 8008570:	6828      	ldr	r0, [r5, #0]
 8008572:	6869      	ldr	r1, [r5, #4]
 8008574:	68aa      	ldr	r2, [r5, #8]
 8008576:	68eb      	ldr	r3, [r5, #12]
 8008578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800857a:	7c2b      	ldrb	r3, [r5, #16]
 800857c:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 800857e:	4a50      	ldr	r2, [pc, #320]	@ (80086c0 <loadMenuTexts+0x880>)
 8008580:	4b50      	ldr	r3, [pc, #320]	@ (80086c4 <loadMenuTexts+0x884>)
 8008582:	4614      	mov	r4, r2
 8008584:	461d      	mov	r5, r3
 8008586:	6828      	ldr	r0, [r5, #0]
 8008588:	6869      	ldr	r1, [r5, #4]
 800858a:	68aa      	ldr	r2, [r5, #8]
 800858c:	68eb      	ldr	r3, [r5, #12]
 800858e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008590:	7c2b      	ldrb	r3, [r5, #16]
 8008592:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8008594:	4a4c      	ldr	r2, [pc, #304]	@ (80086c8 <loadMenuTexts+0x888>)
 8008596:	4b4d      	ldr	r3, [pc, #308]	@ (80086cc <loadMenuTexts+0x88c>)
 8008598:	4614      	mov	r4, r2
 800859a:	461d      	mov	r5, r3
 800859c:	6828      	ldr	r0, [r5, #0]
 800859e:	6869      	ldr	r1, [r5, #4]
 80085a0:	68aa      	ldr	r2, [r5, #8]
 80085a2:	68eb      	ldr	r3, [r5, #12]
 80085a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085a6:	7c2b      	ldrb	r3, [r5, #16]
 80085a8:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 80085aa:	4a49      	ldr	r2, [pc, #292]	@ (80086d0 <loadMenuTexts+0x890>)
 80085ac:	4b49      	ldr	r3, [pc, #292]	@ (80086d4 <loadMenuTexts+0x894>)
 80085ae:	4614      	mov	r4, r2
 80085b0:	461d      	mov	r5, r3
 80085b2:	e091      	b.n	80086d8 <loadMenuTexts+0x898>
 80085b4:	200003f0 	.word	0x200003f0
 80085b8:	20001538 	.word	0x20001538
 80085bc:	20000404 	.word	0x20000404
 80085c0:	2000154c 	.word	0x2000154c
 80085c4:	20000418 	.word	0x20000418
 80085c8:	20001560 	.word	0x20001560
 80085cc:	2000042c 	.word	0x2000042c
 80085d0:	20001574 	.word	0x20001574
 80085d4:	20000440 	.word	0x20000440
 80085d8:	20001588 	.word	0x20001588
 80085dc:	20000454 	.word	0x20000454
 80085e0:	2000159c 	.word	0x2000159c
 80085e4:	20000468 	.word	0x20000468
 80085e8:	200015b0 	.word	0x200015b0
 80085ec:	2000047c 	.word	0x2000047c
 80085f0:	200015c4 	.word	0x200015c4
 80085f4:	20000490 	.word	0x20000490
 80085f8:	200015d8 	.word	0x200015d8
 80085fc:	200004a4 	.word	0x200004a4
 8008600:	200015ec 	.word	0x200015ec
 8008604:	200004b8 	.word	0x200004b8
 8008608:	20001600 	.word	0x20001600
 800860c:	200004cc 	.word	0x200004cc
 8008610:	20001614 	.word	0x20001614
 8008614:	200004e0 	.word	0x200004e0
 8008618:	20001628 	.word	0x20001628
 800861c:	200004f4 	.word	0x200004f4
 8008620:	2000163c 	.word	0x2000163c
 8008624:	20000508 	.word	0x20000508
 8008628:	20001650 	.word	0x20001650
 800862c:	2000051c 	.word	0x2000051c
 8008630:	20001664 	.word	0x20001664
 8008634:	20000530 	.word	0x20000530
 8008638:	20001678 	.word	0x20001678
 800863c:	20000544 	.word	0x20000544
 8008640:	2000168c 	.word	0x2000168c
 8008644:	20000558 	.word	0x20000558
 8008648:	200016a0 	.word	0x200016a0
 800864c:	2000056c 	.word	0x2000056c
 8008650:	200016b4 	.word	0x200016b4
 8008654:	20000580 	.word	0x20000580
 8008658:	200016c8 	.word	0x200016c8
 800865c:	20000594 	.word	0x20000594
 8008660:	200016dc 	.word	0x200016dc
 8008664:	200005a8 	.word	0x200005a8
 8008668:	200016f0 	.word	0x200016f0
 800866c:	200005bc 	.word	0x200005bc
 8008670:	20001704 	.word	0x20001704
 8008674:	200005d0 	.word	0x200005d0
 8008678:	20001718 	.word	0x20001718
 800867c:	200005e4 	.word	0x200005e4
 8008680:	2000172c 	.word	0x2000172c
 8008684:	200005f8 	.word	0x200005f8
 8008688:	20001740 	.word	0x20001740
 800868c:	2000060c 	.word	0x2000060c
 8008690:	20001754 	.word	0x20001754
 8008694:	20000620 	.word	0x20000620
 8008698:	20001768 	.word	0x20001768
 800869c:	20000634 	.word	0x20000634
 80086a0:	2000177c 	.word	0x2000177c
 80086a4:	20000648 	.word	0x20000648
 80086a8:	20001790 	.word	0x20001790
 80086ac:	2000065c 	.word	0x2000065c
 80086b0:	200017a4 	.word	0x200017a4
 80086b4:	20000670 	.word	0x20000670
 80086b8:	200017b8 	.word	0x200017b8
 80086bc:	20000684 	.word	0x20000684
 80086c0:	200017cc 	.word	0x200017cc
 80086c4:	20000c10 	.word	0x20000c10
 80086c8:	200017e0 	.word	0x200017e0
 80086cc:	20000c38 	.word	0x20000c38
 80086d0:	200017f4 	.word	0x200017f4
 80086d4:	20000c60 	.word	0x20000c60
 80086d8:	6828      	ldr	r0, [r5, #0]
 80086da:	6869      	ldr	r1, [r5, #4]
 80086dc:	68aa      	ldr	r2, [r5, #8]
 80086de:	68eb      	ldr	r3, [r5, #12]
 80086e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086e2:	7c2b      	ldrb	r3, [r5, #16]
 80086e4:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 80086e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008718 <loadMenuTexts+0x8d8>)
 80086e8:	4b0c      	ldr	r3, [pc, #48]	@ (800871c <loadMenuTexts+0x8dc>)
 80086ea:	4614      	mov	r4, r2
 80086ec:	461d      	mov	r5, r3
 80086ee:	6828      	ldr	r0, [r5, #0]
 80086f0:	6869      	ldr	r1, [r5, #4]
 80086f2:	68aa      	ldr	r2, [r5, #8]
 80086f4:	68eb      	ldr	r3, [r5, #12]
 80086f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086f8:	7c2b      	ldrb	r3, [r5, #16]
 80086fa:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 80086fc:	4a08      	ldr	r2, [pc, #32]	@ (8008720 <loadMenuTexts+0x8e0>)
 80086fe:	4b09      	ldr	r3, [pc, #36]	@ (8008724 <loadMenuTexts+0x8e4>)
 8008700:	4614      	mov	r4, r2
 8008702:	461d      	mov	r5, r3
 8008704:	6828      	ldr	r0, [r5, #0]
 8008706:	6869      	ldr	r1, [r5, #4]
 8008708:	68aa      	ldr	r2, [r5, #8]
 800870a:	68eb      	ldr	r3, [r5, #12]
 800870c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800870e:	7c2b      	ldrb	r3, [r5, #16]
 8008710:	7023      	strb	r3, [r4, #0]
 8008712:	f000 bc68 	b.w	8008fe6 <loadMenuTexts+0x11a6>
 8008716:	bf00      	nop
 8008718:	20001808 	.word	0x20001808
 800871c:	20000c88 	.word	0x20000c88
 8008720:	2000181c 	.word	0x2000181c
 8008724:	20000cb0 	.word	0x20000cb0
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8008728:	4ac6      	ldr	r2, [pc, #792]	@ (8008a44 <loadMenuTexts+0xc04>)
 800872a:	4bc7      	ldr	r3, [pc, #796]	@ (8008a48 <loadMenuTexts+0xc08>)
 800872c:	4614      	mov	r4, r2
 800872e:	461d      	mov	r5, r3
 8008730:	6828      	ldr	r0, [r5, #0]
 8008732:	6869      	ldr	r1, [r5, #4]
 8008734:	68aa      	ldr	r2, [r5, #8]
 8008736:	68eb      	ldr	r3, [r5, #12]
 8008738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800873a:	7c2b      	ldrb	r3, [r5, #16]
 800873c:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 800873e:	4ac3      	ldr	r2, [pc, #780]	@ (8008a4c <loadMenuTexts+0xc0c>)
 8008740:	4bc3      	ldr	r3, [pc, #780]	@ (8008a50 <loadMenuTexts+0xc10>)
 8008742:	4614      	mov	r4, r2
 8008744:	461d      	mov	r5, r3
 8008746:	6828      	ldr	r0, [r5, #0]
 8008748:	6869      	ldr	r1, [r5, #4]
 800874a:	68aa      	ldr	r2, [r5, #8]
 800874c:	68eb      	ldr	r3, [r5, #12]
 800874e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008750:	7c2b      	ldrb	r3, [r5, #16]
 8008752:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8008754:	4abf      	ldr	r2, [pc, #764]	@ (8008a54 <loadMenuTexts+0xc14>)
 8008756:	4bc0      	ldr	r3, [pc, #768]	@ (8008a58 <loadMenuTexts+0xc18>)
 8008758:	4614      	mov	r4, r2
 800875a:	461d      	mov	r5, r3
 800875c:	6828      	ldr	r0, [r5, #0]
 800875e:	6869      	ldr	r1, [r5, #4]
 8008760:	68aa      	ldr	r2, [r5, #8]
 8008762:	68eb      	ldr	r3, [r5, #12]
 8008764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008766:	7c2b      	ldrb	r3, [r5, #16]
 8008768:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 800876a:	4abc      	ldr	r2, [pc, #752]	@ (8008a5c <loadMenuTexts+0xc1c>)
 800876c:	4bbc      	ldr	r3, [pc, #752]	@ (8008a60 <loadMenuTexts+0xc20>)
 800876e:	4614      	mov	r4, r2
 8008770:	461d      	mov	r5, r3
 8008772:	6828      	ldr	r0, [r5, #0]
 8008774:	6869      	ldr	r1, [r5, #4]
 8008776:	68aa      	ldr	r2, [r5, #8]
 8008778:	68eb      	ldr	r3, [r5, #12]
 800877a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800877c:	7c2b      	ldrb	r3, [r5, #16]
 800877e:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8008780:	4ab8      	ldr	r2, [pc, #736]	@ (8008a64 <loadMenuTexts+0xc24>)
 8008782:	4bb9      	ldr	r3, [pc, #740]	@ (8008a68 <loadMenuTexts+0xc28>)
 8008784:	4614      	mov	r4, r2
 8008786:	461d      	mov	r5, r3
 8008788:	6828      	ldr	r0, [r5, #0]
 800878a:	6869      	ldr	r1, [r5, #4]
 800878c:	68aa      	ldr	r2, [r5, #8]
 800878e:	68eb      	ldr	r3, [r5, #12]
 8008790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008792:	7c2b      	ldrb	r3, [r5, #16]
 8008794:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8008796:	4ab5      	ldr	r2, [pc, #724]	@ (8008a6c <loadMenuTexts+0xc2c>)
 8008798:	4bb5      	ldr	r3, [pc, #724]	@ (8008a70 <loadMenuTexts+0xc30>)
 800879a:	4614      	mov	r4, r2
 800879c:	461d      	mov	r5, r3
 800879e:	6828      	ldr	r0, [r5, #0]
 80087a0:	6869      	ldr	r1, [r5, #4]
 80087a2:	68aa      	ldr	r2, [r5, #8]
 80087a4:	68eb      	ldr	r3, [r5, #12]
 80087a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087a8:	7c2b      	ldrb	r3, [r5, #16]
 80087aa:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 80087ac:	4ab1      	ldr	r2, [pc, #708]	@ (8008a74 <loadMenuTexts+0xc34>)
 80087ae:	4bb2      	ldr	r3, [pc, #712]	@ (8008a78 <loadMenuTexts+0xc38>)
 80087b0:	4614      	mov	r4, r2
 80087b2:	461d      	mov	r5, r3
 80087b4:	6828      	ldr	r0, [r5, #0]
 80087b6:	6869      	ldr	r1, [r5, #4]
 80087b8:	68aa      	ldr	r2, [r5, #8]
 80087ba:	68eb      	ldr	r3, [r5, #12]
 80087bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087be:	7c2b      	ldrb	r3, [r5, #16]
 80087c0:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 80087c2:	4aae      	ldr	r2, [pc, #696]	@ (8008a7c <loadMenuTexts+0xc3c>)
 80087c4:	4bae      	ldr	r3, [pc, #696]	@ (8008a80 <loadMenuTexts+0xc40>)
 80087c6:	4614      	mov	r4, r2
 80087c8:	461d      	mov	r5, r3
 80087ca:	6828      	ldr	r0, [r5, #0]
 80087cc:	6869      	ldr	r1, [r5, #4]
 80087ce:	68aa      	ldr	r2, [r5, #8]
 80087d0:	68eb      	ldr	r3, [r5, #12]
 80087d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087d4:	7c2b      	ldrb	r3, [r5, #16]
 80087d6:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 80087d8:	4aaa      	ldr	r2, [pc, #680]	@ (8008a84 <loadMenuTexts+0xc44>)
 80087da:	4bab      	ldr	r3, [pc, #684]	@ (8008a88 <loadMenuTexts+0xc48>)
 80087dc:	4614      	mov	r4, r2
 80087de:	461d      	mov	r5, r3
 80087e0:	6828      	ldr	r0, [r5, #0]
 80087e2:	6869      	ldr	r1, [r5, #4]
 80087e4:	68aa      	ldr	r2, [r5, #8]
 80087e6:	68eb      	ldr	r3, [r5, #12]
 80087e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087ea:	7c2b      	ldrb	r3, [r5, #16]
 80087ec:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 80087ee:	4aa7      	ldr	r2, [pc, #668]	@ (8008a8c <loadMenuTexts+0xc4c>)
 80087f0:	4ba7      	ldr	r3, [pc, #668]	@ (8008a90 <loadMenuTexts+0xc50>)
 80087f2:	4614      	mov	r4, r2
 80087f4:	461d      	mov	r5, r3
 80087f6:	6828      	ldr	r0, [r5, #0]
 80087f8:	6869      	ldr	r1, [r5, #4]
 80087fa:	68aa      	ldr	r2, [r5, #8]
 80087fc:	68eb      	ldr	r3, [r5, #12]
 80087fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008800:	7c2b      	ldrb	r3, [r5, #16]
 8008802:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8008804:	4aa3      	ldr	r2, [pc, #652]	@ (8008a94 <loadMenuTexts+0xc54>)
 8008806:	4ba4      	ldr	r3, [pc, #656]	@ (8008a98 <loadMenuTexts+0xc58>)
 8008808:	4614      	mov	r4, r2
 800880a:	461d      	mov	r5, r3
 800880c:	6828      	ldr	r0, [r5, #0]
 800880e:	6869      	ldr	r1, [r5, #4]
 8008810:	68aa      	ldr	r2, [r5, #8]
 8008812:	68eb      	ldr	r3, [r5, #12]
 8008814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008816:	7c2b      	ldrb	r3, [r5, #16]
 8008818:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 800881a:	4aa0      	ldr	r2, [pc, #640]	@ (8008a9c <loadMenuTexts+0xc5c>)
 800881c:	4ba0      	ldr	r3, [pc, #640]	@ (8008aa0 <loadMenuTexts+0xc60>)
 800881e:	4614      	mov	r4, r2
 8008820:	461d      	mov	r5, r3
 8008822:	6828      	ldr	r0, [r5, #0]
 8008824:	6869      	ldr	r1, [r5, #4]
 8008826:	68aa      	ldr	r2, [r5, #8]
 8008828:	68eb      	ldr	r3, [r5, #12]
 800882a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800882c:	7c2b      	ldrb	r3, [r5, #16]
 800882e:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8008830:	4a9c      	ldr	r2, [pc, #624]	@ (8008aa4 <loadMenuTexts+0xc64>)
 8008832:	4b9d      	ldr	r3, [pc, #628]	@ (8008aa8 <loadMenuTexts+0xc68>)
 8008834:	4614      	mov	r4, r2
 8008836:	461d      	mov	r5, r3
 8008838:	6828      	ldr	r0, [r5, #0]
 800883a:	6869      	ldr	r1, [r5, #4]
 800883c:	68aa      	ldr	r2, [r5, #8]
 800883e:	68eb      	ldr	r3, [r5, #12]
 8008840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008842:	7c2b      	ldrb	r3, [r5, #16]
 8008844:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8008846:	4a99      	ldr	r2, [pc, #612]	@ (8008aac <loadMenuTexts+0xc6c>)
 8008848:	4b99      	ldr	r3, [pc, #612]	@ (8008ab0 <loadMenuTexts+0xc70>)
 800884a:	4614      	mov	r4, r2
 800884c:	461d      	mov	r5, r3
 800884e:	6828      	ldr	r0, [r5, #0]
 8008850:	6869      	ldr	r1, [r5, #4]
 8008852:	68aa      	ldr	r2, [r5, #8]
 8008854:	68eb      	ldr	r3, [r5, #12]
 8008856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008858:	7c2b      	ldrb	r3, [r5, #16]
 800885a:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 800885c:	4a95      	ldr	r2, [pc, #596]	@ (8008ab4 <loadMenuTexts+0xc74>)
 800885e:	4b96      	ldr	r3, [pc, #600]	@ (8008ab8 <loadMenuTexts+0xc78>)
 8008860:	4614      	mov	r4, r2
 8008862:	461d      	mov	r5, r3
 8008864:	6828      	ldr	r0, [r5, #0]
 8008866:	6869      	ldr	r1, [r5, #4]
 8008868:	68aa      	ldr	r2, [r5, #8]
 800886a:	68eb      	ldr	r3, [r5, #12]
 800886c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800886e:	7c2b      	ldrb	r3, [r5, #16]
 8008870:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8008872:	4a92      	ldr	r2, [pc, #584]	@ (8008abc <loadMenuTexts+0xc7c>)
 8008874:	4b92      	ldr	r3, [pc, #584]	@ (8008ac0 <loadMenuTexts+0xc80>)
 8008876:	4614      	mov	r4, r2
 8008878:	461d      	mov	r5, r3
 800887a:	6828      	ldr	r0, [r5, #0]
 800887c:	6869      	ldr	r1, [r5, #4]
 800887e:	68aa      	ldr	r2, [r5, #8]
 8008880:	68eb      	ldr	r3, [r5, #12]
 8008882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008884:	7c2b      	ldrb	r3, [r5, #16]
 8008886:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8008888:	4a8e      	ldr	r2, [pc, #568]	@ (8008ac4 <loadMenuTexts+0xc84>)
 800888a:	4b8f      	ldr	r3, [pc, #572]	@ (8008ac8 <loadMenuTexts+0xc88>)
 800888c:	4614      	mov	r4, r2
 800888e:	461d      	mov	r5, r3
 8008890:	6828      	ldr	r0, [r5, #0]
 8008892:	6869      	ldr	r1, [r5, #4]
 8008894:	68aa      	ldr	r2, [r5, #8]
 8008896:	68eb      	ldr	r3, [r5, #12]
 8008898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800889a:	7c2b      	ldrb	r3, [r5, #16]
 800889c:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 800889e:	4a8b      	ldr	r2, [pc, #556]	@ (8008acc <loadMenuTexts+0xc8c>)
 80088a0:	4b8b      	ldr	r3, [pc, #556]	@ (8008ad0 <loadMenuTexts+0xc90>)
 80088a2:	4614      	mov	r4, r2
 80088a4:	461d      	mov	r5, r3
 80088a6:	6828      	ldr	r0, [r5, #0]
 80088a8:	6869      	ldr	r1, [r5, #4]
 80088aa:	68aa      	ldr	r2, [r5, #8]
 80088ac:	68eb      	ldr	r3, [r5, #12]
 80088ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088b0:	7c2b      	ldrb	r3, [r5, #16]
 80088b2:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 80088b4:	4a87      	ldr	r2, [pc, #540]	@ (8008ad4 <loadMenuTexts+0xc94>)
 80088b6:	4b88      	ldr	r3, [pc, #544]	@ (8008ad8 <loadMenuTexts+0xc98>)
 80088b8:	4614      	mov	r4, r2
 80088ba:	461d      	mov	r5, r3
 80088bc:	6828      	ldr	r0, [r5, #0]
 80088be:	6869      	ldr	r1, [r5, #4]
 80088c0:	68aa      	ldr	r2, [r5, #8]
 80088c2:	68eb      	ldr	r3, [r5, #12]
 80088c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088c6:	7c2b      	ldrb	r3, [r5, #16]
 80088c8:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 80088ca:	4a84      	ldr	r2, [pc, #528]	@ (8008adc <loadMenuTexts+0xc9c>)
 80088cc:	4b84      	ldr	r3, [pc, #528]	@ (8008ae0 <loadMenuTexts+0xca0>)
 80088ce:	4614      	mov	r4, r2
 80088d0:	461d      	mov	r5, r3
 80088d2:	6828      	ldr	r0, [r5, #0]
 80088d4:	6869      	ldr	r1, [r5, #4]
 80088d6:	68aa      	ldr	r2, [r5, #8]
 80088d8:	68eb      	ldr	r3, [r5, #12]
 80088da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088dc:	7c2b      	ldrb	r3, [r5, #16]
 80088de:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 80088e0:	4a80      	ldr	r2, [pc, #512]	@ (8008ae4 <loadMenuTexts+0xca4>)
 80088e2:	4b81      	ldr	r3, [pc, #516]	@ (8008ae8 <loadMenuTexts+0xca8>)
 80088e4:	4614      	mov	r4, r2
 80088e6:	461d      	mov	r5, r3
 80088e8:	6828      	ldr	r0, [r5, #0]
 80088ea:	6869      	ldr	r1, [r5, #4]
 80088ec:	68aa      	ldr	r2, [r5, #8]
 80088ee:	68eb      	ldr	r3, [r5, #12]
 80088f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088f2:	7c2b      	ldrb	r3, [r5, #16]
 80088f4:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 80088f6:	4a7d      	ldr	r2, [pc, #500]	@ (8008aec <loadMenuTexts+0xcac>)
 80088f8:	4b7d      	ldr	r3, [pc, #500]	@ (8008af0 <loadMenuTexts+0xcb0>)
 80088fa:	4614      	mov	r4, r2
 80088fc:	461d      	mov	r5, r3
 80088fe:	6828      	ldr	r0, [r5, #0]
 8008900:	6869      	ldr	r1, [r5, #4]
 8008902:	68aa      	ldr	r2, [r5, #8]
 8008904:	68eb      	ldr	r3, [r5, #12]
 8008906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008908:	7c2b      	ldrb	r3, [r5, #16]
 800890a:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 800890c:	4a79      	ldr	r2, [pc, #484]	@ (8008af4 <loadMenuTexts+0xcb4>)
 800890e:	4b7a      	ldr	r3, [pc, #488]	@ (8008af8 <loadMenuTexts+0xcb8>)
 8008910:	4614      	mov	r4, r2
 8008912:	461d      	mov	r5, r3
 8008914:	6828      	ldr	r0, [r5, #0]
 8008916:	6869      	ldr	r1, [r5, #4]
 8008918:	68aa      	ldr	r2, [r5, #8]
 800891a:	68eb      	ldr	r3, [r5, #12]
 800891c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800891e:	7c2b      	ldrb	r3, [r5, #16]
 8008920:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8008922:	4a76      	ldr	r2, [pc, #472]	@ (8008afc <loadMenuTexts+0xcbc>)
 8008924:	4b76      	ldr	r3, [pc, #472]	@ (8008b00 <loadMenuTexts+0xcc0>)
 8008926:	4614      	mov	r4, r2
 8008928:	461d      	mov	r5, r3
 800892a:	6828      	ldr	r0, [r5, #0]
 800892c:	6869      	ldr	r1, [r5, #4]
 800892e:	68aa      	ldr	r2, [r5, #8]
 8008930:	68eb      	ldr	r3, [r5, #12]
 8008932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008934:	7c2b      	ldrb	r3, [r5, #16]
 8008936:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8008938:	4a72      	ldr	r2, [pc, #456]	@ (8008b04 <loadMenuTexts+0xcc4>)
 800893a:	4b73      	ldr	r3, [pc, #460]	@ (8008b08 <loadMenuTexts+0xcc8>)
 800893c:	4614      	mov	r4, r2
 800893e:	461d      	mov	r5, r3
 8008940:	6828      	ldr	r0, [r5, #0]
 8008942:	6869      	ldr	r1, [r5, #4]
 8008944:	68aa      	ldr	r2, [r5, #8]
 8008946:	68eb      	ldr	r3, [r5, #12]
 8008948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800894a:	7c2b      	ldrb	r3, [r5, #16]
 800894c:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 800894e:	4a6f      	ldr	r2, [pc, #444]	@ (8008b0c <loadMenuTexts+0xccc>)
 8008950:	4b6f      	ldr	r3, [pc, #444]	@ (8008b10 <loadMenuTexts+0xcd0>)
 8008952:	4614      	mov	r4, r2
 8008954:	461d      	mov	r5, r3
 8008956:	6828      	ldr	r0, [r5, #0]
 8008958:	6869      	ldr	r1, [r5, #4]
 800895a:	68aa      	ldr	r2, [r5, #8]
 800895c:	68eb      	ldr	r3, [r5, #12]
 800895e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008960:	7c2b      	ldrb	r3, [r5, #16]
 8008962:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8008964:	4a6b      	ldr	r2, [pc, #428]	@ (8008b14 <loadMenuTexts+0xcd4>)
 8008966:	4b6c      	ldr	r3, [pc, #432]	@ (8008b18 <loadMenuTexts+0xcd8>)
 8008968:	4614      	mov	r4, r2
 800896a:	461d      	mov	r5, r3
 800896c:	6828      	ldr	r0, [r5, #0]
 800896e:	6869      	ldr	r1, [r5, #4]
 8008970:	68aa      	ldr	r2, [r5, #8]
 8008972:	68eb      	ldr	r3, [r5, #12]
 8008974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008976:	7c2b      	ldrb	r3, [r5, #16]
 8008978:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 800897a:	4a68      	ldr	r2, [pc, #416]	@ (8008b1c <loadMenuTexts+0xcdc>)
 800897c:	4b68      	ldr	r3, [pc, #416]	@ (8008b20 <loadMenuTexts+0xce0>)
 800897e:	4614      	mov	r4, r2
 8008980:	461d      	mov	r5, r3
 8008982:	6828      	ldr	r0, [r5, #0]
 8008984:	6869      	ldr	r1, [r5, #4]
 8008986:	68aa      	ldr	r2, [r5, #8]
 8008988:	68eb      	ldr	r3, [r5, #12]
 800898a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800898c:	7c2b      	ldrb	r3, [r5, #16]
 800898e:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8008990:	4a64      	ldr	r2, [pc, #400]	@ (8008b24 <loadMenuTexts+0xce4>)
 8008992:	4b65      	ldr	r3, [pc, #404]	@ (8008b28 <loadMenuTexts+0xce8>)
 8008994:	4614      	mov	r4, r2
 8008996:	461d      	mov	r5, r3
 8008998:	6828      	ldr	r0, [r5, #0]
 800899a:	6869      	ldr	r1, [r5, #4]
 800899c:	68aa      	ldr	r2, [r5, #8]
 800899e:	68eb      	ldr	r3, [r5, #12]
 80089a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089a2:	7c2b      	ldrb	r3, [r5, #16]
 80089a4:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 80089a6:	4a61      	ldr	r2, [pc, #388]	@ (8008b2c <loadMenuTexts+0xcec>)
 80089a8:	4b61      	ldr	r3, [pc, #388]	@ (8008b30 <loadMenuTexts+0xcf0>)
 80089aa:	4614      	mov	r4, r2
 80089ac:	461d      	mov	r5, r3
 80089ae:	6828      	ldr	r0, [r5, #0]
 80089b0:	6869      	ldr	r1, [r5, #4]
 80089b2:	68aa      	ldr	r2, [r5, #8]
 80089b4:	68eb      	ldr	r3, [r5, #12]
 80089b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089b8:	7c2b      	ldrb	r3, [r5, #16]
 80089ba:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 80089bc:	4a5d      	ldr	r2, [pc, #372]	@ (8008b34 <loadMenuTexts+0xcf4>)
 80089be:	4b5e      	ldr	r3, [pc, #376]	@ (8008b38 <loadMenuTexts+0xcf8>)
 80089c0:	4614      	mov	r4, r2
 80089c2:	461d      	mov	r5, r3
 80089c4:	6828      	ldr	r0, [r5, #0]
 80089c6:	6869      	ldr	r1, [r5, #4]
 80089c8:	68aa      	ldr	r2, [r5, #8]
 80089ca:	68eb      	ldr	r3, [r5, #12]
 80089cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089ce:	7c2b      	ldrb	r3, [r5, #16]
 80089d0:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 80089d2:	4a5a      	ldr	r2, [pc, #360]	@ (8008b3c <loadMenuTexts+0xcfc>)
 80089d4:	4b5a      	ldr	r3, [pc, #360]	@ (8008b40 <loadMenuTexts+0xd00>)
 80089d6:	4614      	mov	r4, r2
 80089d8:	461d      	mov	r5, r3
 80089da:	6828      	ldr	r0, [r5, #0]
 80089dc:	6869      	ldr	r1, [r5, #4]
 80089de:	68aa      	ldr	r2, [r5, #8]
 80089e0:	68eb      	ldr	r3, [r5, #12]
 80089e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089e4:	7c2b      	ldrb	r3, [r5, #16]
 80089e6:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 80089e8:	4a56      	ldr	r2, [pc, #344]	@ (8008b44 <loadMenuTexts+0xd04>)
 80089ea:	4b57      	ldr	r3, [pc, #348]	@ (8008b48 <loadMenuTexts+0xd08>)
 80089ec:	4614      	mov	r4, r2
 80089ee:	461d      	mov	r5, r3
 80089f0:	6828      	ldr	r0, [r5, #0]
 80089f2:	6869      	ldr	r1, [r5, #4]
 80089f4:	68aa      	ldr	r2, [r5, #8]
 80089f6:	68eb      	ldr	r3, [r5, #12]
 80089f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089fa:	7c2b      	ldrb	r3, [r5, #16]
 80089fc:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 80089fe:	4a53      	ldr	r2, [pc, #332]	@ (8008b4c <loadMenuTexts+0xd0c>)
 8008a00:	4b53      	ldr	r3, [pc, #332]	@ (8008b50 <loadMenuTexts+0xd10>)
 8008a02:	4614      	mov	r4, r2
 8008a04:	461d      	mov	r5, r3
 8008a06:	6828      	ldr	r0, [r5, #0]
 8008a08:	6869      	ldr	r1, [r5, #4]
 8008a0a:	68aa      	ldr	r2, [r5, #8]
 8008a0c:	68eb      	ldr	r3, [r5, #12]
 8008a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a10:	7c2b      	ldrb	r3, [r5, #16]
 8008a12:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8008a14:	4a4f      	ldr	r2, [pc, #316]	@ (8008b54 <loadMenuTexts+0xd14>)
 8008a16:	4b50      	ldr	r3, [pc, #320]	@ (8008b58 <loadMenuTexts+0xd18>)
 8008a18:	4614      	mov	r4, r2
 8008a1a:	461d      	mov	r5, r3
 8008a1c:	6828      	ldr	r0, [r5, #0]
 8008a1e:	6869      	ldr	r1, [r5, #4]
 8008a20:	68aa      	ldr	r2, [r5, #8]
 8008a22:	68eb      	ldr	r3, [r5, #12]
 8008a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a26:	7c2b      	ldrb	r3, [r5, #16]
 8008a28:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8008a2a:	4a4c      	ldr	r2, [pc, #304]	@ (8008b5c <loadMenuTexts+0xd1c>)
 8008a2c:	4b4c      	ldr	r3, [pc, #304]	@ (8008b60 <loadMenuTexts+0xd20>)
 8008a2e:	4614      	mov	r4, r2
 8008a30:	461d      	mov	r5, r3
 8008a32:	6828      	ldr	r0, [r5, #0]
 8008a34:	6869      	ldr	r1, [r5, #4]
 8008a36:	68aa      	ldr	r2, [r5, #8]
 8008a38:	68eb      	ldr	r3, [r5, #12]
 8008a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a3c:	7c2b      	ldrb	r3, [r5, #16]
 8008a3e:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8008a40:	4a48      	ldr	r2, [pc, #288]	@ (8008b64 <loadMenuTexts+0xd24>)
 8008a42:	e091      	b.n	8008b68 <loadMenuTexts+0xd28>
 8008a44:	20001254 	.word	0x20001254
 8008a48:	20000698 	.word	0x20000698
 8008a4c:	20001268 	.word	0x20001268
 8008a50:	200006ac 	.word	0x200006ac
 8008a54:	2000127c 	.word	0x2000127c
 8008a58:	200006c0 	.word	0x200006c0
 8008a5c:	20001290 	.word	0x20001290
 8008a60:	200006d4 	.word	0x200006d4
 8008a64:	200012a4 	.word	0x200012a4
 8008a68:	200006e8 	.word	0x200006e8
 8008a6c:	200012b8 	.word	0x200012b8
 8008a70:	200006fc 	.word	0x200006fc
 8008a74:	200012cc 	.word	0x200012cc
 8008a78:	20000710 	.word	0x20000710
 8008a7c:	200012e0 	.word	0x200012e0
 8008a80:	20000724 	.word	0x20000724
 8008a84:	200012f4 	.word	0x200012f4
 8008a88:	20000738 	.word	0x20000738
 8008a8c:	20001308 	.word	0x20001308
 8008a90:	2000074c 	.word	0x2000074c
 8008a94:	2000131c 	.word	0x2000131c
 8008a98:	20000760 	.word	0x20000760
 8008a9c:	20001330 	.word	0x20001330
 8008aa0:	20000774 	.word	0x20000774
 8008aa4:	20001344 	.word	0x20001344
 8008aa8:	20000788 	.word	0x20000788
 8008aac:	20001358 	.word	0x20001358
 8008ab0:	2000079c 	.word	0x2000079c
 8008ab4:	2000136c 	.word	0x2000136c
 8008ab8:	200007b0 	.word	0x200007b0
 8008abc:	20001380 	.word	0x20001380
 8008ac0:	200007c4 	.word	0x200007c4
 8008ac4:	20001394 	.word	0x20001394
 8008ac8:	200007d8 	.word	0x200007d8
 8008acc:	200013a8 	.word	0x200013a8
 8008ad0:	200007ec 	.word	0x200007ec
 8008ad4:	200013bc 	.word	0x200013bc
 8008ad8:	20000800 	.word	0x20000800
 8008adc:	200013d0 	.word	0x200013d0
 8008ae0:	20000814 	.word	0x20000814
 8008ae4:	200013e4 	.word	0x200013e4
 8008ae8:	20000828 	.word	0x20000828
 8008aec:	200013f8 	.word	0x200013f8
 8008af0:	2000083c 	.word	0x2000083c
 8008af4:	2000140c 	.word	0x2000140c
 8008af8:	20000850 	.word	0x20000850
 8008afc:	20001420 	.word	0x20001420
 8008b00:	20000864 	.word	0x20000864
 8008b04:	20001434 	.word	0x20001434
 8008b08:	20000878 	.word	0x20000878
 8008b0c:	20001448 	.word	0x20001448
 8008b10:	2000088c 	.word	0x2000088c
 8008b14:	2000145c 	.word	0x2000145c
 8008b18:	200008a0 	.word	0x200008a0
 8008b1c:	20001470 	.word	0x20001470
 8008b20:	200008b4 	.word	0x200008b4
 8008b24:	20001484 	.word	0x20001484
 8008b28:	200008c8 	.word	0x200008c8
 8008b2c:	20001498 	.word	0x20001498
 8008b30:	200008dc 	.word	0x200008dc
 8008b34:	200014ac 	.word	0x200014ac
 8008b38:	200008f0 	.word	0x200008f0
 8008b3c:	200014c0 	.word	0x200014c0
 8008b40:	20000904 	.word	0x20000904
 8008b44:	200014d4 	.word	0x200014d4
 8008b48:	20000918 	.word	0x20000918
 8008b4c:	200014e8 	.word	0x200014e8
 8008b50:	2000092c 	.word	0x2000092c
 8008b54:	200014fc 	.word	0x200014fc
 8008b58:	20000940 	.word	0x20000940
 8008b5c:	20001510 	.word	0x20001510
 8008b60:	20000954 	.word	0x20000954
 8008b64:	20001524 	.word	0x20001524
 8008b68:	4bc7      	ldr	r3, [pc, #796]	@ (8008e88 <loadMenuTexts+0x1048>)
 8008b6a:	4614      	mov	r4, r2
 8008b6c:	461d      	mov	r5, r3
 8008b6e:	6828      	ldr	r0, [r5, #0]
 8008b70:	6869      	ldr	r1, [r5, #4]
 8008b72:	68aa      	ldr	r2, [r5, #8]
 8008b74:	68eb      	ldr	r3, [r5, #12]
 8008b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b78:	7c2b      	ldrb	r3, [r5, #16]
 8008b7a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8008b7c:	4ac3      	ldr	r2, [pc, #780]	@ (8008e8c <loadMenuTexts+0x104c>)
 8008b7e:	4bc4      	ldr	r3, [pc, #784]	@ (8008e90 <loadMenuTexts+0x1050>)
 8008b80:	4614      	mov	r4, r2
 8008b82:	461d      	mov	r5, r3
 8008b84:	6828      	ldr	r0, [r5, #0]
 8008b86:	6869      	ldr	r1, [r5, #4]
 8008b88:	68aa      	ldr	r2, [r5, #8]
 8008b8a:	68eb      	ldr	r3, [r5, #12]
 8008b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b8e:	7c2b      	ldrb	r3, [r5, #16]
 8008b90:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8008b92:	4ac0      	ldr	r2, [pc, #768]	@ (8008e94 <loadMenuTexts+0x1054>)
 8008b94:	4bc0      	ldr	r3, [pc, #768]	@ (8008e98 <loadMenuTexts+0x1058>)
 8008b96:	4614      	mov	r4, r2
 8008b98:	461d      	mov	r5, r3
 8008b9a:	6828      	ldr	r0, [r5, #0]
 8008b9c:	6869      	ldr	r1, [r5, #4]
 8008b9e:	68aa      	ldr	r2, [r5, #8]
 8008ba0:	68eb      	ldr	r3, [r5, #12]
 8008ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ba4:	7c2b      	ldrb	r3, [r5, #16]
 8008ba6:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8008ba8:	4abc      	ldr	r2, [pc, #752]	@ (8008e9c <loadMenuTexts+0x105c>)
 8008baa:	4bbd      	ldr	r3, [pc, #756]	@ (8008ea0 <loadMenuTexts+0x1060>)
 8008bac:	4614      	mov	r4, r2
 8008bae:	461d      	mov	r5, r3
 8008bb0:	6828      	ldr	r0, [r5, #0]
 8008bb2:	6869      	ldr	r1, [r5, #4]
 8008bb4:	68aa      	ldr	r2, [r5, #8]
 8008bb6:	68eb      	ldr	r3, [r5, #12]
 8008bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bba:	7c2b      	ldrb	r3, [r5, #16]
 8008bbc:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8008bbe:	4ab9      	ldr	r2, [pc, #740]	@ (8008ea4 <loadMenuTexts+0x1064>)
 8008bc0:	4bb9      	ldr	r3, [pc, #740]	@ (8008ea8 <loadMenuTexts+0x1068>)
 8008bc2:	4614      	mov	r4, r2
 8008bc4:	461d      	mov	r5, r3
 8008bc6:	6828      	ldr	r0, [r5, #0]
 8008bc8:	6869      	ldr	r1, [r5, #4]
 8008bca:	68aa      	ldr	r2, [r5, #8]
 8008bcc:	68eb      	ldr	r3, [r5, #12]
 8008bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bd0:	7c2b      	ldrb	r3, [r5, #16]
 8008bd2:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8008bd4:	4ab5      	ldr	r2, [pc, #724]	@ (8008eac <loadMenuTexts+0x106c>)
 8008bd6:	4bb6      	ldr	r3, [pc, #728]	@ (8008eb0 <loadMenuTexts+0x1070>)
 8008bd8:	4614      	mov	r4, r2
 8008bda:	461d      	mov	r5, r3
 8008bdc:	6828      	ldr	r0, [r5, #0]
 8008bde:	6869      	ldr	r1, [r5, #4]
 8008be0:	68aa      	ldr	r2, [r5, #8]
 8008be2:	68eb      	ldr	r3, [r5, #12]
 8008be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008be6:	7c2b      	ldrb	r3, [r5, #16]
 8008be8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8008bea:	4ab2      	ldr	r2, [pc, #712]	@ (8008eb4 <loadMenuTexts+0x1074>)
 8008bec:	4bb2      	ldr	r3, [pc, #712]	@ (8008eb8 <loadMenuTexts+0x1078>)
 8008bee:	4614      	mov	r4, r2
 8008bf0:	461d      	mov	r5, r3
 8008bf2:	6828      	ldr	r0, [r5, #0]
 8008bf4:	6869      	ldr	r1, [r5, #4]
 8008bf6:	68aa      	ldr	r2, [r5, #8]
 8008bf8:	68eb      	ldr	r3, [r5, #12]
 8008bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bfc:	7c2b      	ldrb	r3, [r5, #16]
 8008bfe:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8008c00:	4aae      	ldr	r2, [pc, #696]	@ (8008ebc <loadMenuTexts+0x107c>)
 8008c02:	4baf      	ldr	r3, [pc, #700]	@ (8008ec0 <loadMenuTexts+0x1080>)
 8008c04:	4614      	mov	r4, r2
 8008c06:	461d      	mov	r5, r3
 8008c08:	6828      	ldr	r0, [r5, #0]
 8008c0a:	6869      	ldr	r1, [r5, #4]
 8008c0c:	68aa      	ldr	r2, [r5, #8]
 8008c0e:	68eb      	ldr	r3, [r5, #12]
 8008c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c12:	7c2b      	ldrb	r3, [r5, #16]
 8008c14:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8008c16:	4aab      	ldr	r2, [pc, #684]	@ (8008ec4 <loadMenuTexts+0x1084>)
 8008c18:	4bab      	ldr	r3, [pc, #684]	@ (8008ec8 <loadMenuTexts+0x1088>)
 8008c1a:	4614      	mov	r4, r2
 8008c1c:	461d      	mov	r5, r3
 8008c1e:	6828      	ldr	r0, [r5, #0]
 8008c20:	6869      	ldr	r1, [r5, #4]
 8008c22:	68aa      	ldr	r2, [r5, #8]
 8008c24:	68eb      	ldr	r3, [r5, #12]
 8008c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c28:	7c2b      	ldrb	r3, [r5, #16]
 8008c2a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8008c2c:	4aa7      	ldr	r2, [pc, #668]	@ (8008ecc <loadMenuTexts+0x108c>)
 8008c2e:	4ba8      	ldr	r3, [pc, #672]	@ (8008ed0 <loadMenuTexts+0x1090>)
 8008c30:	4614      	mov	r4, r2
 8008c32:	461d      	mov	r5, r3
 8008c34:	6828      	ldr	r0, [r5, #0]
 8008c36:	6869      	ldr	r1, [r5, #4]
 8008c38:	68aa      	ldr	r2, [r5, #8]
 8008c3a:	68eb      	ldr	r3, [r5, #12]
 8008c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c3e:	7c2b      	ldrb	r3, [r5, #16]
 8008c40:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8008c42:	4aa4      	ldr	r2, [pc, #656]	@ (8008ed4 <loadMenuTexts+0x1094>)
 8008c44:	4ba4      	ldr	r3, [pc, #656]	@ (8008ed8 <loadMenuTexts+0x1098>)
 8008c46:	4614      	mov	r4, r2
 8008c48:	461d      	mov	r5, r3
 8008c4a:	6828      	ldr	r0, [r5, #0]
 8008c4c:	6869      	ldr	r1, [r5, #4]
 8008c4e:	68aa      	ldr	r2, [r5, #8]
 8008c50:	68eb      	ldr	r3, [r5, #12]
 8008c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c54:	7c2b      	ldrb	r3, [r5, #16]
 8008c56:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8008c58:	4aa0      	ldr	r2, [pc, #640]	@ (8008edc <loadMenuTexts+0x109c>)
 8008c5a:	4ba1      	ldr	r3, [pc, #644]	@ (8008ee0 <loadMenuTexts+0x10a0>)
 8008c5c:	4614      	mov	r4, r2
 8008c5e:	461d      	mov	r5, r3
 8008c60:	6828      	ldr	r0, [r5, #0]
 8008c62:	6869      	ldr	r1, [r5, #4]
 8008c64:	68aa      	ldr	r2, [r5, #8]
 8008c66:	68eb      	ldr	r3, [r5, #12]
 8008c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c6a:	7c2b      	ldrb	r3, [r5, #16]
 8008c6c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8008c6e:	4a9d      	ldr	r2, [pc, #628]	@ (8008ee4 <loadMenuTexts+0x10a4>)
 8008c70:	4b9d      	ldr	r3, [pc, #628]	@ (8008ee8 <loadMenuTexts+0x10a8>)
 8008c72:	4614      	mov	r4, r2
 8008c74:	461d      	mov	r5, r3
 8008c76:	6828      	ldr	r0, [r5, #0]
 8008c78:	6869      	ldr	r1, [r5, #4]
 8008c7a:	68aa      	ldr	r2, [r5, #8]
 8008c7c:	68eb      	ldr	r3, [r5, #12]
 8008c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c80:	7c2b      	ldrb	r3, [r5, #16]
 8008c82:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8008c84:	4a99      	ldr	r2, [pc, #612]	@ (8008eec <loadMenuTexts+0x10ac>)
 8008c86:	4b9a      	ldr	r3, [pc, #616]	@ (8008ef0 <loadMenuTexts+0x10b0>)
 8008c88:	4614      	mov	r4, r2
 8008c8a:	461d      	mov	r5, r3
 8008c8c:	6828      	ldr	r0, [r5, #0]
 8008c8e:	6869      	ldr	r1, [r5, #4]
 8008c90:	68aa      	ldr	r2, [r5, #8]
 8008c92:	68eb      	ldr	r3, [r5, #12]
 8008c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c96:	7c2b      	ldrb	r3, [r5, #16]
 8008c98:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8008c9a:	4a96      	ldr	r2, [pc, #600]	@ (8008ef4 <loadMenuTexts+0x10b4>)
 8008c9c:	4b96      	ldr	r3, [pc, #600]	@ (8008ef8 <loadMenuTexts+0x10b8>)
 8008c9e:	4614      	mov	r4, r2
 8008ca0:	461d      	mov	r5, r3
 8008ca2:	6828      	ldr	r0, [r5, #0]
 8008ca4:	6869      	ldr	r1, [r5, #4]
 8008ca6:	68aa      	ldr	r2, [r5, #8]
 8008ca8:	68eb      	ldr	r3, [r5, #12]
 8008caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cac:	7c2b      	ldrb	r3, [r5, #16]
 8008cae:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8008cb0:	4a92      	ldr	r2, [pc, #584]	@ (8008efc <loadMenuTexts+0x10bc>)
 8008cb2:	4b93      	ldr	r3, [pc, #588]	@ (8008f00 <loadMenuTexts+0x10c0>)
 8008cb4:	4614      	mov	r4, r2
 8008cb6:	461d      	mov	r5, r3
 8008cb8:	6828      	ldr	r0, [r5, #0]
 8008cba:	6869      	ldr	r1, [r5, #4]
 8008cbc:	68aa      	ldr	r2, [r5, #8]
 8008cbe:	68eb      	ldr	r3, [r5, #12]
 8008cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cc2:	7c2b      	ldrb	r3, [r5, #16]
 8008cc4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8008cc6:	4a8f      	ldr	r2, [pc, #572]	@ (8008f04 <loadMenuTexts+0x10c4>)
 8008cc8:	4b8f      	ldr	r3, [pc, #572]	@ (8008f08 <loadMenuTexts+0x10c8>)
 8008cca:	4614      	mov	r4, r2
 8008ccc:	461d      	mov	r5, r3
 8008cce:	6828      	ldr	r0, [r5, #0]
 8008cd0:	6869      	ldr	r1, [r5, #4]
 8008cd2:	68aa      	ldr	r2, [r5, #8]
 8008cd4:	68eb      	ldr	r3, [r5, #12]
 8008cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cd8:	7c2b      	ldrb	r3, [r5, #16]
 8008cda:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8008cdc:	4a8b      	ldr	r2, [pc, #556]	@ (8008f0c <loadMenuTexts+0x10cc>)
 8008cde:	4b8c      	ldr	r3, [pc, #560]	@ (8008f10 <loadMenuTexts+0x10d0>)
 8008ce0:	4614      	mov	r4, r2
 8008ce2:	461d      	mov	r5, r3
 8008ce4:	6828      	ldr	r0, [r5, #0]
 8008ce6:	6869      	ldr	r1, [r5, #4]
 8008ce8:	68aa      	ldr	r2, [r5, #8]
 8008cea:	68eb      	ldr	r3, [r5, #12]
 8008cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cee:	7c2b      	ldrb	r3, [r5, #16]
 8008cf0:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8008cf2:	4a88      	ldr	r2, [pc, #544]	@ (8008f14 <loadMenuTexts+0x10d4>)
 8008cf4:	4b88      	ldr	r3, [pc, #544]	@ (8008f18 <loadMenuTexts+0x10d8>)
 8008cf6:	4614      	mov	r4, r2
 8008cf8:	461d      	mov	r5, r3
 8008cfa:	6828      	ldr	r0, [r5, #0]
 8008cfc:	6869      	ldr	r1, [r5, #4]
 8008cfe:	68aa      	ldr	r2, [r5, #8]
 8008d00:	68eb      	ldr	r3, [r5, #12]
 8008d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d04:	7c2b      	ldrb	r3, [r5, #16]
 8008d06:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8008d08:	4a84      	ldr	r2, [pc, #528]	@ (8008f1c <loadMenuTexts+0x10dc>)
 8008d0a:	4b85      	ldr	r3, [pc, #532]	@ (8008f20 <loadMenuTexts+0x10e0>)
 8008d0c:	4614      	mov	r4, r2
 8008d0e:	461d      	mov	r5, r3
 8008d10:	6828      	ldr	r0, [r5, #0]
 8008d12:	6869      	ldr	r1, [r5, #4]
 8008d14:	68aa      	ldr	r2, [r5, #8]
 8008d16:	68eb      	ldr	r3, [r5, #12]
 8008d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d1a:	7c2b      	ldrb	r3, [r5, #16]
 8008d1c:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8008d1e:	4a81      	ldr	r2, [pc, #516]	@ (8008f24 <loadMenuTexts+0x10e4>)
 8008d20:	4b81      	ldr	r3, [pc, #516]	@ (8008f28 <loadMenuTexts+0x10e8>)
 8008d22:	4614      	mov	r4, r2
 8008d24:	461d      	mov	r5, r3
 8008d26:	6828      	ldr	r0, [r5, #0]
 8008d28:	6869      	ldr	r1, [r5, #4]
 8008d2a:	68aa      	ldr	r2, [r5, #8]
 8008d2c:	68eb      	ldr	r3, [r5, #12]
 8008d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d30:	7c2b      	ldrb	r3, [r5, #16]
 8008d32:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8008d34:	4a7d      	ldr	r2, [pc, #500]	@ (8008f2c <loadMenuTexts+0x10ec>)
 8008d36:	4b7e      	ldr	r3, [pc, #504]	@ (8008f30 <loadMenuTexts+0x10f0>)
 8008d38:	4614      	mov	r4, r2
 8008d3a:	461d      	mov	r5, r3
 8008d3c:	6828      	ldr	r0, [r5, #0]
 8008d3e:	6869      	ldr	r1, [r5, #4]
 8008d40:	68aa      	ldr	r2, [r5, #8]
 8008d42:	68eb      	ldr	r3, [r5, #12]
 8008d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d46:	7c2b      	ldrb	r3, [r5, #16]
 8008d48:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8008d4a:	4a7a      	ldr	r2, [pc, #488]	@ (8008f34 <loadMenuTexts+0x10f4>)
 8008d4c:	4b7a      	ldr	r3, [pc, #488]	@ (8008f38 <loadMenuTexts+0x10f8>)
 8008d4e:	4614      	mov	r4, r2
 8008d50:	461d      	mov	r5, r3
 8008d52:	6828      	ldr	r0, [r5, #0]
 8008d54:	6869      	ldr	r1, [r5, #4]
 8008d56:	68aa      	ldr	r2, [r5, #8]
 8008d58:	68eb      	ldr	r3, [r5, #12]
 8008d5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d5c:	7c2b      	ldrb	r3, [r5, #16]
 8008d5e:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8008d60:	4a76      	ldr	r2, [pc, #472]	@ (8008f3c <loadMenuTexts+0x10fc>)
 8008d62:	4b77      	ldr	r3, [pc, #476]	@ (8008f40 <loadMenuTexts+0x1100>)
 8008d64:	4614      	mov	r4, r2
 8008d66:	461d      	mov	r5, r3
 8008d68:	6828      	ldr	r0, [r5, #0]
 8008d6a:	6869      	ldr	r1, [r5, #4]
 8008d6c:	68aa      	ldr	r2, [r5, #8]
 8008d6e:	68eb      	ldr	r3, [r5, #12]
 8008d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d72:	7c2b      	ldrb	r3, [r5, #16]
 8008d74:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8008d76:	4a73      	ldr	r2, [pc, #460]	@ (8008f44 <loadMenuTexts+0x1104>)
 8008d78:	4b73      	ldr	r3, [pc, #460]	@ (8008f48 <loadMenuTexts+0x1108>)
 8008d7a:	4614      	mov	r4, r2
 8008d7c:	461d      	mov	r5, r3
 8008d7e:	6828      	ldr	r0, [r5, #0]
 8008d80:	6869      	ldr	r1, [r5, #4]
 8008d82:	68aa      	ldr	r2, [r5, #8]
 8008d84:	68eb      	ldr	r3, [r5, #12]
 8008d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d88:	7c2b      	ldrb	r3, [r5, #16]
 8008d8a:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8008d8c:	4a6f      	ldr	r2, [pc, #444]	@ (8008f4c <loadMenuTexts+0x110c>)
 8008d8e:	4b70      	ldr	r3, [pc, #448]	@ (8008f50 <loadMenuTexts+0x1110>)
 8008d90:	4614      	mov	r4, r2
 8008d92:	461d      	mov	r5, r3
 8008d94:	6828      	ldr	r0, [r5, #0]
 8008d96:	6869      	ldr	r1, [r5, #4]
 8008d98:	68aa      	ldr	r2, [r5, #8]
 8008d9a:	68eb      	ldr	r3, [r5, #12]
 8008d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d9e:	7c2b      	ldrb	r3, [r5, #16]
 8008da0:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8008da2:	4a6c      	ldr	r2, [pc, #432]	@ (8008f54 <loadMenuTexts+0x1114>)
 8008da4:	4b6c      	ldr	r3, [pc, #432]	@ (8008f58 <loadMenuTexts+0x1118>)
 8008da6:	4614      	mov	r4, r2
 8008da8:	461d      	mov	r5, r3
 8008daa:	6828      	ldr	r0, [r5, #0]
 8008dac:	6869      	ldr	r1, [r5, #4]
 8008dae:	68aa      	ldr	r2, [r5, #8]
 8008db0:	68eb      	ldr	r3, [r5, #12]
 8008db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008db4:	7c2b      	ldrb	r3, [r5, #16]
 8008db6:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8008db8:	4a68      	ldr	r2, [pc, #416]	@ (8008f5c <loadMenuTexts+0x111c>)
 8008dba:	4b69      	ldr	r3, [pc, #420]	@ (8008f60 <loadMenuTexts+0x1120>)
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	461d      	mov	r5, r3
 8008dc0:	6828      	ldr	r0, [r5, #0]
 8008dc2:	6869      	ldr	r1, [r5, #4]
 8008dc4:	68aa      	ldr	r2, [r5, #8]
 8008dc6:	68eb      	ldr	r3, [r5, #12]
 8008dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dca:	7c2b      	ldrb	r3, [r5, #16]
 8008dcc:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 8008dce:	4a65      	ldr	r2, [pc, #404]	@ (8008f64 <loadMenuTexts+0x1124>)
 8008dd0:	4b65      	ldr	r3, [pc, #404]	@ (8008f68 <loadMenuTexts+0x1128>)
 8008dd2:	4614      	mov	r4, r2
 8008dd4:	461d      	mov	r5, r3
 8008dd6:	6828      	ldr	r0, [r5, #0]
 8008dd8:	6869      	ldr	r1, [r5, #4]
 8008dda:	68aa      	ldr	r2, [r5, #8]
 8008ddc:	68eb      	ldr	r3, [r5, #12]
 8008dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008de0:	7c2b      	ldrb	r3, [r5, #16]
 8008de2:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8008de4:	4a61      	ldr	r2, [pc, #388]	@ (8008f6c <loadMenuTexts+0x112c>)
 8008de6:	4b62      	ldr	r3, [pc, #392]	@ (8008f70 <loadMenuTexts+0x1130>)
 8008de8:	4614      	mov	r4, r2
 8008dea:	461d      	mov	r5, r3
 8008dec:	6828      	ldr	r0, [r5, #0]
 8008dee:	6869      	ldr	r1, [r5, #4]
 8008df0:	68aa      	ldr	r2, [r5, #8]
 8008df2:	68eb      	ldr	r3, [r5, #12]
 8008df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008df6:	7c2b      	ldrb	r3, [r5, #16]
 8008df8:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 8008dfa:	4a5e      	ldr	r2, [pc, #376]	@ (8008f74 <loadMenuTexts+0x1134>)
 8008dfc:	4b5e      	ldr	r3, [pc, #376]	@ (8008f78 <loadMenuTexts+0x1138>)
 8008dfe:	4614      	mov	r4, r2
 8008e00:	461d      	mov	r5, r3
 8008e02:	6828      	ldr	r0, [r5, #0]
 8008e04:	6869      	ldr	r1, [r5, #4]
 8008e06:	68aa      	ldr	r2, [r5, #8]
 8008e08:	68eb      	ldr	r3, [r5, #12]
 8008e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e0c:	7c2b      	ldrb	r3, [r5, #16]
 8008e0e:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 8008e10:	4a5a      	ldr	r2, [pc, #360]	@ (8008f7c <loadMenuTexts+0x113c>)
 8008e12:	4b5b      	ldr	r3, [pc, #364]	@ (8008f80 <loadMenuTexts+0x1140>)
 8008e14:	4614      	mov	r4, r2
 8008e16:	461d      	mov	r5, r3
 8008e18:	6828      	ldr	r0, [r5, #0]
 8008e1a:	6869      	ldr	r1, [r5, #4]
 8008e1c:	68aa      	ldr	r2, [r5, #8]
 8008e1e:	68eb      	ldr	r3, [r5, #12]
 8008e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e22:	7c2b      	ldrb	r3, [r5, #16]
 8008e24:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 8008e26:	4a57      	ldr	r2, [pc, #348]	@ (8008f84 <loadMenuTexts+0x1144>)
 8008e28:	4b57      	ldr	r3, [pc, #348]	@ (8008f88 <loadMenuTexts+0x1148>)
 8008e2a:	4614      	mov	r4, r2
 8008e2c:	461d      	mov	r5, r3
 8008e2e:	6828      	ldr	r0, [r5, #0]
 8008e30:	6869      	ldr	r1, [r5, #4]
 8008e32:	68aa      	ldr	r2, [r5, #8]
 8008e34:	68eb      	ldr	r3, [r5, #12]
 8008e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e38:	7c2b      	ldrb	r3, [r5, #16]
 8008e3a:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8008e3c:	4a53      	ldr	r2, [pc, #332]	@ (8008f8c <loadMenuTexts+0x114c>)
 8008e3e:	4b54      	ldr	r3, [pc, #336]	@ (8008f90 <loadMenuTexts+0x1150>)
 8008e40:	4614      	mov	r4, r2
 8008e42:	461d      	mov	r5, r3
 8008e44:	6828      	ldr	r0, [r5, #0]
 8008e46:	6869      	ldr	r1, [r5, #4]
 8008e48:	68aa      	ldr	r2, [r5, #8]
 8008e4a:	68eb      	ldr	r3, [r5, #12]
 8008e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e4e:	7c2b      	ldrb	r3, [r5, #16]
 8008e50:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 8008e52:	4a50      	ldr	r2, [pc, #320]	@ (8008f94 <loadMenuTexts+0x1154>)
 8008e54:	4b50      	ldr	r3, [pc, #320]	@ (8008f98 <loadMenuTexts+0x1158>)
 8008e56:	4614      	mov	r4, r2
 8008e58:	461d      	mov	r5, r3
 8008e5a:	6828      	ldr	r0, [r5, #0]
 8008e5c:	6869      	ldr	r1, [r5, #4]
 8008e5e:	68aa      	ldr	r2, [r5, #8]
 8008e60:	68eb      	ldr	r3, [r5, #12]
 8008e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e64:	7c2b      	ldrb	r3, [r5, #16]
 8008e66:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 8008e68:	4a4c      	ldr	r2, [pc, #304]	@ (8008f9c <loadMenuTexts+0x115c>)
 8008e6a:	4b4d      	ldr	r3, [pc, #308]	@ (8008fa0 <loadMenuTexts+0x1160>)
 8008e6c:	4614      	mov	r4, r2
 8008e6e:	461d      	mov	r5, r3
 8008e70:	6828      	ldr	r0, [r5, #0]
 8008e72:	6869      	ldr	r1, [r5, #4]
 8008e74:	68aa      	ldr	r2, [r5, #8]
 8008e76:	68eb      	ldr	r3, [r5, #12]
 8008e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e7a:	7c2b      	ldrb	r3, [r5, #16]
 8008e7c:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 8008e7e:	4a49      	ldr	r2, [pc, #292]	@ (8008fa4 <loadMenuTexts+0x1164>)
 8008e80:	4b49      	ldr	r3, [pc, #292]	@ (8008fa8 <loadMenuTexts+0x1168>)
 8008e82:	4614      	mov	r4, r2
 8008e84:	461d      	mov	r5, r3
 8008e86:	e091      	b.n	8008fac <loadMenuTexts+0x116c>
 8008e88:	20000968 	.word	0x20000968
 8008e8c:	20001538 	.word	0x20001538
 8008e90:	2000097c 	.word	0x2000097c
 8008e94:	2000154c 	.word	0x2000154c
 8008e98:	20000990 	.word	0x20000990
 8008e9c:	20001560 	.word	0x20001560
 8008ea0:	200009a4 	.word	0x200009a4
 8008ea4:	20001574 	.word	0x20001574
 8008ea8:	200009b8 	.word	0x200009b8
 8008eac:	20001588 	.word	0x20001588
 8008eb0:	200009cc 	.word	0x200009cc
 8008eb4:	2000159c 	.word	0x2000159c
 8008eb8:	200009e0 	.word	0x200009e0
 8008ebc:	200015b0 	.word	0x200015b0
 8008ec0:	200009f4 	.word	0x200009f4
 8008ec4:	200015c4 	.word	0x200015c4
 8008ec8:	20000a08 	.word	0x20000a08
 8008ecc:	200015d8 	.word	0x200015d8
 8008ed0:	20000a1c 	.word	0x20000a1c
 8008ed4:	200015ec 	.word	0x200015ec
 8008ed8:	20000a30 	.word	0x20000a30
 8008edc:	20001600 	.word	0x20001600
 8008ee0:	20000a44 	.word	0x20000a44
 8008ee4:	20001614 	.word	0x20001614
 8008ee8:	20000a58 	.word	0x20000a58
 8008eec:	20001628 	.word	0x20001628
 8008ef0:	20000a6c 	.word	0x20000a6c
 8008ef4:	2000163c 	.word	0x2000163c
 8008ef8:	20000a80 	.word	0x20000a80
 8008efc:	20001650 	.word	0x20001650
 8008f00:	20000a94 	.word	0x20000a94
 8008f04:	20001664 	.word	0x20001664
 8008f08:	20000aa8 	.word	0x20000aa8
 8008f0c:	20001678 	.word	0x20001678
 8008f10:	20000abc 	.word	0x20000abc
 8008f14:	2000168c 	.word	0x2000168c
 8008f18:	20000ad0 	.word	0x20000ad0
 8008f1c:	200016a0 	.word	0x200016a0
 8008f20:	20000ae4 	.word	0x20000ae4
 8008f24:	200016b4 	.word	0x200016b4
 8008f28:	20000af8 	.word	0x20000af8
 8008f2c:	200016c8 	.word	0x200016c8
 8008f30:	20000b0c 	.word	0x20000b0c
 8008f34:	200016dc 	.word	0x200016dc
 8008f38:	20000b20 	.word	0x20000b20
 8008f3c:	200016f0 	.word	0x200016f0
 8008f40:	20000b34 	.word	0x20000b34
 8008f44:	20001704 	.word	0x20001704
 8008f48:	20000b48 	.word	0x20000b48
 8008f4c:	20001718 	.word	0x20001718
 8008f50:	20000b5c 	.word	0x20000b5c
 8008f54:	2000172c 	.word	0x2000172c
 8008f58:	20000b70 	.word	0x20000b70
 8008f5c:	20001740 	.word	0x20001740
 8008f60:	20000b84 	.word	0x20000b84
 8008f64:	20001754 	.word	0x20001754
 8008f68:	20000b98 	.word	0x20000b98
 8008f6c:	20001768 	.word	0x20001768
 8008f70:	20000bac 	.word	0x20000bac
 8008f74:	2000177c 	.word	0x2000177c
 8008f78:	20000bc0 	.word	0x20000bc0
 8008f7c:	20001790 	.word	0x20001790
 8008f80:	20000bd4 	.word	0x20000bd4
 8008f84:	200017a4 	.word	0x200017a4
 8008f88:	20000be8 	.word	0x20000be8
 8008f8c:	200017b8 	.word	0x200017b8
 8008f90:	20000bfc 	.word	0x20000bfc
 8008f94:	200017cc 	.word	0x200017cc
 8008f98:	20000c24 	.word	0x20000c24
 8008f9c:	200017e0 	.word	0x200017e0
 8008fa0:	20000c4c 	.word	0x20000c4c
 8008fa4:	200017f4 	.word	0x200017f4
 8008fa8:	20000c74 	.word	0x20000c74
 8008fac:	6828      	ldr	r0, [r5, #0]
 8008fae:	6869      	ldr	r1, [r5, #4]
 8008fb0:	68aa      	ldr	r2, [r5, #8]
 8008fb2:	68eb      	ldr	r3, [r5, #12]
 8008fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fb6:	7c2b      	ldrb	r3, [r5, #16]
 8008fb8:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 8008fba:	4a0e      	ldr	r2, [pc, #56]	@ (8008ff4 <loadMenuTexts+0x11b4>)
 8008fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8008ff8 <loadMenuTexts+0x11b8>)
 8008fbe:	4614      	mov	r4, r2
 8008fc0:	461d      	mov	r5, r3
 8008fc2:	6828      	ldr	r0, [r5, #0]
 8008fc4:	6869      	ldr	r1, [r5, #4]
 8008fc6:	68aa      	ldr	r2, [r5, #8]
 8008fc8:	68eb      	ldr	r3, [r5, #12]
 8008fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fcc:	7c2b      	ldrb	r3, [r5, #16]
 8008fce:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 8008fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8008ffc <loadMenuTexts+0x11bc>)
 8008fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8009000 <loadMenuTexts+0x11c0>)
 8008fd4:	4614      	mov	r4, r2
 8008fd6:	461d      	mov	r5, r3
 8008fd8:	6828      	ldr	r0, [r5, #0]
 8008fda:	6869      	ldr	r1, [r5, #4]
 8008fdc:	68aa      	ldr	r2, [r5, #8]
 8008fde:	68eb      	ldr	r3, [r5, #12]
 8008fe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fe2:	7c2b      	ldrb	r3, [r5, #16]
 8008fe4:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 8008fe6:	f000 f80d 	bl	8009004 <menuVariableFinisher>
}
 8008fea:	bf00      	nop
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	20001808 	.word	0x20001808
 8008ff8:	20000c9c 	.word	0x20000c9c
 8008ffc:	2000181c 	.word	0x2000181c
 8009000:	20000cc4 	.word	0x20000cc4

08009004 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8009004:	b480      	push	{r7}
 8009006:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 8009008:	4b84      	ldr	r3, [pc, #528]	@ (800921c <menuVariableFinisher+0x218>)
 800900a:	2200      	movs	r2, #0
 800900c:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 800900e:	4b84      	ldr	r3, [pc, #528]	@ (8009220 <menuVariableFinisher+0x21c>)
 8009010:	2200      	movs	r2, #0
 8009012:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8009014:	4b83      	ldr	r3, [pc, #524]	@ (8009224 <menuVariableFinisher+0x220>)
 8009016:	2200      	movs	r2, #0
 8009018:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 800901a:	4b83      	ldr	r3, [pc, #524]	@ (8009228 <menuVariableFinisher+0x224>)
 800901c:	2200      	movs	r2, #0
 800901e:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 8009020:	4b82      	ldr	r3, [pc, #520]	@ (800922c <menuVariableFinisher+0x228>)
 8009022:	2200      	movs	r2, #0
 8009024:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 8009026:	4b82      	ldr	r3, [pc, #520]	@ (8009230 <menuVariableFinisher+0x22c>)
 8009028:	2200      	movs	r2, #0
 800902a:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 800902c:	4b81      	ldr	r3, [pc, #516]	@ (8009234 <menuVariableFinisher+0x230>)
 800902e:	2200      	movs	r2, #0
 8009030:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 8009032:	4b81      	ldr	r3, [pc, #516]	@ (8009238 <menuVariableFinisher+0x234>)
 8009034:	2200      	movs	r2, #0
 8009036:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8009038:	4b80      	ldr	r3, [pc, #512]	@ (800923c <menuVariableFinisher+0x238>)
 800903a:	2200      	movs	r2, #0
 800903c:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 800903e:	4b80      	ldr	r3, [pc, #512]	@ (8009240 <menuVariableFinisher+0x23c>)
 8009040:	2200      	movs	r2, #0
 8009042:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8009044:	4b7f      	ldr	r3, [pc, #508]	@ (8009244 <menuVariableFinisher+0x240>)
 8009046:	2200      	movs	r2, #0
 8009048:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 800904a:	4b7f      	ldr	r3, [pc, #508]	@ (8009248 <menuVariableFinisher+0x244>)
 800904c:	2200      	movs	r2, #0
 800904e:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8009050:	4b7e      	ldr	r3, [pc, #504]	@ (800924c <menuVariableFinisher+0x248>)
 8009052:	2200      	movs	r2, #0
 8009054:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 8009056:	4b7e      	ldr	r3, [pc, #504]	@ (8009250 <menuVariableFinisher+0x24c>)
 8009058:	2200      	movs	r2, #0
 800905a:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 800905c:	4b7d      	ldr	r3, [pc, #500]	@ (8009254 <menuVariableFinisher+0x250>)
 800905e:	2200      	movs	r2, #0
 8009060:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 8009062:	4b7d      	ldr	r3, [pc, #500]	@ (8009258 <menuVariableFinisher+0x254>)
 8009064:	2200      	movs	r2, #0
 8009066:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8009068:	4b7c      	ldr	r3, [pc, #496]	@ (800925c <menuVariableFinisher+0x258>)
 800906a:	2200      	movs	r2, #0
 800906c:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 800906e:	4b7c      	ldr	r3, [pc, #496]	@ (8009260 <menuVariableFinisher+0x25c>)
 8009070:	2200      	movs	r2, #0
 8009072:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8009074:	4b7b      	ldr	r3, [pc, #492]	@ (8009264 <menuVariableFinisher+0x260>)
 8009076:	2200      	movs	r2, #0
 8009078:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 800907a:	4b7b      	ldr	r3, [pc, #492]	@ (8009268 <menuVariableFinisher+0x264>)
 800907c:	2200      	movs	r2, #0
 800907e:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 8009080:	4b7a      	ldr	r3, [pc, #488]	@ (800926c <menuVariableFinisher+0x268>)
 8009082:	2200      	movs	r2, #0
 8009084:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 8009086:	4b7a      	ldr	r3, [pc, #488]	@ (8009270 <menuVariableFinisher+0x26c>)
 8009088:	2200      	movs	r2, #0
 800908a:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 800908c:	4b79      	ldr	r3, [pc, #484]	@ (8009274 <menuVariableFinisher+0x270>)
 800908e:	2200      	movs	r2, #0
 8009090:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 8009092:	4b79      	ldr	r3, [pc, #484]	@ (8009278 <menuVariableFinisher+0x274>)
 8009094:	2200      	movs	r2, #0
 8009096:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8009098:	4b78      	ldr	r3, [pc, #480]	@ (800927c <menuVariableFinisher+0x278>)
 800909a:	2200      	movs	r2, #0
 800909c:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 800909e:	4b78      	ldr	r3, [pc, #480]	@ (8009280 <menuVariableFinisher+0x27c>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 80090a4:	4b77      	ldr	r3, [pc, #476]	@ (8009284 <menuVariableFinisher+0x280>)
 80090a6:	2200      	movs	r2, #0
 80090a8:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 80090aa:	4b77      	ldr	r3, [pc, #476]	@ (8009288 <menuVariableFinisher+0x284>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 80090b0:	4b76      	ldr	r3, [pc, #472]	@ (800928c <menuVariableFinisher+0x288>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 80090b6:	4b76      	ldr	r3, [pc, #472]	@ (8009290 <menuVariableFinisher+0x28c>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 80090bc:	4b75      	ldr	r3, [pc, #468]	@ (8009294 <menuVariableFinisher+0x290>)
 80090be:	2200      	movs	r2, #0
 80090c0:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 80090c2:	4b75      	ldr	r3, [pc, #468]	@ (8009298 <menuVariableFinisher+0x294>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 80090c8:	4b74      	ldr	r3, [pc, #464]	@ (800929c <menuVariableFinisher+0x298>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 80090ce:	4b74      	ldr	r3, [pc, #464]	@ (80092a0 <menuVariableFinisher+0x29c>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 80090d4:	4b73      	ldr	r3, [pc, #460]	@ (80092a4 <menuVariableFinisher+0x2a0>)
 80090d6:	2200      	movs	r2, #0
 80090d8:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 80090da:	4b73      	ldr	r3, [pc, #460]	@ (80092a8 <menuVariableFinisher+0x2a4>)
 80090dc:	2200      	movs	r2, #0
 80090de:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 80090e0:	4b72      	ldr	r3, [pc, #456]	@ (80092ac <menuVariableFinisher+0x2a8>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 80090e6:	4b72      	ldr	r3, [pc, #456]	@ (80092b0 <menuVariableFinisher+0x2ac>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 80090ec:	4b71      	ldr	r3, [pc, #452]	@ (80092b4 <menuVariableFinisher+0x2b0>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 80090f2:	4b71      	ldr	r3, [pc, #452]	@ (80092b8 <menuVariableFinisher+0x2b4>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 80090f8:	4b70      	ldr	r3, [pc, #448]	@ (80092bc <menuVariableFinisher+0x2b8>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 80090fe:	4b70      	ldr	r3, [pc, #448]	@ (80092c0 <menuVariableFinisher+0x2bc>)
 8009100:	2200      	movs	r2, #0
 8009102:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8009104:	4b6f      	ldr	r3, [pc, #444]	@ (80092c4 <menuVariableFinisher+0x2c0>)
 8009106:	2200      	movs	r2, #0
 8009108:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 800910a:	4b6f      	ldr	r3, [pc, #444]	@ (80092c8 <menuVariableFinisher+0x2c4>)
 800910c:	2200      	movs	r2, #0
 800910e:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8009110:	4b6e      	ldr	r3, [pc, #440]	@ (80092cc <menuVariableFinisher+0x2c8>)
 8009112:	2200      	movs	r2, #0
 8009114:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 8009116:	4b6e      	ldr	r3, [pc, #440]	@ (80092d0 <menuVariableFinisher+0x2cc>)
 8009118:	2200      	movs	r2, #0
 800911a:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 800911c:	4b6d      	ldr	r3, [pc, #436]	@ (80092d4 <menuVariableFinisher+0x2d0>)
 800911e:	2200      	movs	r2, #0
 8009120:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 8009122:	4b6d      	ldr	r3, [pc, #436]	@ (80092d8 <menuVariableFinisher+0x2d4>)
 8009124:	2200      	movs	r2, #0
 8009126:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 8009128:	4b6c      	ldr	r3, [pc, #432]	@ (80092dc <menuVariableFinisher+0x2d8>)
 800912a:	2200      	movs	r2, #0
 800912c:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 800912e:	4b6c      	ldr	r3, [pc, #432]	@ (80092e0 <menuVariableFinisher+0x2dc>)
 8009130:	2200      	movs	r2, #0
 8009132:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8009134:	4b6b      	ldr	r3, [pc, #428]	@ (80092e4 <menuVariableFinisher+0x2e0>)
 8009136:	2200      	movs	r2, #0
 8009138:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 800913a:	4b6b      	ldr	r3, [pc, #428]	@ (80092e8 <menuVariableFinisher+0x2e4>)
 800913c:	2200      	movs	r2, #0
 800913e:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8009140:	4b6a      	ldr	r3, [pc, #424]	@ (80092ec <menuVariableFinisher+0x2e8>)
 8009142:	2200      	movs	r2, #0
 8009144:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 8009146:	4b6a      	ldr	r3, [pc, #424]	@ (80092f0 <menuVariableFinisher+0x2ec>)
 8009148:	2200      	movs	r2, #0
 800914a:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 800914c:	4b69      	ldr	r3, [pc, #420]	@ (80092f4 <menuVariableFinisher+0x2f0>)
 800914e:	2200      	movs	r2, #0
 8009150:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8009152:	4b69      	ldr	r3, [pc, #420]	@ (80092f8 <menuVariableFinisher+0x2f4>)
 8009154:	2200      	movs	r2, #0
 8009156:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8009158:	4b68      	ldr	r3, [pc, #416]	@ (80092fc <menuVariableFinisher+0x2f8>)
 800915a:	2200      	movs	r2, #0
 800915c:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 800915e:	4b68      	ldr	r3, [pc, #416]	@ (8009300 <menuVariableFinisher+0x2fc>)
 8009160:	2200      	movs	r2, #0
 8009162:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8009164:	4b67      	ldr	r3, [pc, #412]	@ (8009304 <menuVariableFinisher+0x300>)
 8009166:	2200      	movs	r2, #0
 8009168:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 800916a:	4b67      	ldr	r3, [pc, #412]	@ (8009308 <menuVariableFinisher+0x304>)
 800916c:	2200      	movs	r2, #0
 800916e:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 8009170:	4b66      	ldr	r3, [pc, #408]	@ (800930c <menuVariableFinisher+0x308>)
 8009172:	2200      	movs	r2, #0
 8009174:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 8009176:	4b66      	ldr	r3, [pc, #408]	@ (8009310 <menuVariableFinisher+0x30c>)
 8009178:	2200      	movs	r2, #0
 800917a:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 800917c:	4b65      	ldr	r3, [pc, #404]	@ (8009314 <menuVariableFinisher+0x310>)
 800917e:	2200      	movs	r2, #0
 8009180:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 8009182:	4b65      	ldr	r3, [pc, #404]	@ (8009318 <menuVariableFinisher+0x314>)
 8009184:	2200      	movs	r2, #0
 8009186:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8009188:	4b64      	ldr	r3, [pc, #400]	@ (800931c <menuVariableFinisher+0x318>)
 800918a:	2200      	movs	r2, #0
 800918c:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 800918e:	4b64      	ldr	r3, [pc, #400]	@ (8009320 <menuVariableFinisher+0x31c>)
 8009190:	2200      	movs	r2, #0
 8009192:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8009194:	4b63      	ldr	r3, [pc, #396]	@ (8009324 <menuVariableFinisher+0x320>)
 8009196:	2200      	movs	r2, #0
 8009198:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 800919a:	4b63      	ldr	r3, [pc, #396]	@ (8009328 <menuVariableFinisher+0x324>)
 800919c:	2200      	movs	r2, #0
 800919e:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 80091a0:	4b62      	ldr	r3, [pc, #392]	@ (800932c <menuVariableFinisher+0x328>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 80091a6:	4b62      	ldr	r3, [pc, #392]	@ (8009330 <menuVariableFinisher+0x32c>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 80091ac:	4b61      	ldr	r3, [pc, #388]	@ (8009334 <menuVariableFinisher+0x330>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 80091b2:	4b61      	ldr	r3, [pc, #388]	@ (8009338 <menuVariableFinisher+0x334>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 80091b8:	4b60      	ldr	r3, [pc, #384]	@ (800933c <menuVariableFinisher+0x338>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 80091be:	4b60      	ldr	r3, [pc, #384]	@ (8009340 <menuVariableFinisher+0x33c>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 80091c4:	4b5f      	ldr	r3, [pc, #380]	@ (8009344 <menuVariableFinisher+0x340>)
 80091c6:	2200      	movs	r2, #0
 80091c8:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 80091ca:	4b5f      	ldr	r3, [pc, #380]	@ (8009348 <menuVariableFinisher+0x344>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 80091d0:	4b5e      	ldr	r3, [pc, #376]	@ (800934c <menuVariableFinisher+0x348>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 80091d6:	4b5e      	ldr	r3, [pc, #376]	@ (8009350 <menuVariableFinisher+0x34c>)
 80091d8:	2200      	movs	r2, #0
 80091da:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 80091dc:	4b5d      	ldr	r3, [pc, #372]	@ (8009354 <menuVariableFinisher+0x350>)
 80091de:	2200      	movs	r2, #0
 80091e0:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 80091e2:	4b5d      	ldr	r3, [pc, #372]	@ (8009358 <menuVariableFinisher+0x354>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 80091e8:	4b5c      	ldr	r3, [pc, #368]	@ (800935c <menuVariableFinisher+0x358>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 80091ee:	4b5c      	ldr	r3, [pc, #368]	@ (8009360 <menuVariableFinisher+0x35c>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 80091f4:	4b5b      	ldr	r3, [pc, #364]	@ (8009364 <menuVariableFinisher+0x360>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 80091fa:	4b5b      	ldr	r3, [pc, #364]	@ (8009368 <menuVariableFinisher+0x364>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8009200:	4b5a      	ldr	r3, [pc, #360]	@ (800936c <menuVariableFinisher+0x368>)
 8009202:	2200      	movs	r2, #0
 8009204:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8009206:	4b5a      	ldr	r3, [pc, #360]	@ (8009370 <menuVariableFinisher+0x36c>)
 8009208:	2200      	movs	r2, #0
 800920a:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 800920c:	4b59      	ldr	r3, [pc, #356]	@ (8009374 <menuVariableFinisher+0x370>)
 800920e:	2200      	movs	r2, #0
 8009210:	741a      	strb	r2, [r3, #16]
}
 8009212:	bf00      	nop
 8009214:	46bd      	mov	sp, r7
 8009216:	bc80      	pop	{r7}
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	20000030 	.word	0x20000030
 8009220:	20000044 	.word	0x20000044
 8009224:	20000058 	.word	0x20000058
 8009228:	2000006c 	.word	0x2000006c
 800922c:	20000080 	.word	0x20000080
 8009230:	20000094 	.word	0x20000094
 8009234:	200000a8 	.word	0x200000a8
 8009238:	200000bc 	.word	0x200000bc
 800923c:	200000d0 	.word	0x200000d0
 8009240:	200000e4 	.word	0x200000e4
 8009244:	200000f8 	.word	0x200000f8
 8009248:	2000010c 	.word	0x2000010c
 800924c:	20001254 	.word	0x20001254
 8009250:	20001268 	.word	0x20001268
 8009254:	2000127c 	.word	0x2000127c
 8009258:	20001290 	.word	0x20001290
 800925c:	200012a4 	.word	0x200012a4
 8009260:	200012b8 	.word	0x200012b8
 8009264:	200012cc 	.word	0x200012cc
 8009268:	200012e0 	.word	0x200012e0
 800926c:	200012f4 	.word	0x200012f4
 8009270:	20001308 	.word	0x20001308
 8009274:	2000131c 	.word	0x2000131c
 8009278:	20001330 	.word	0x20001330
 800927c:	20001344 	.word	0x20001344
 8009280:	20001358 	.word	0x20001358
 8009284:	2000136c 	.word	0x2000136c
 8009288:	20001380 	.word	0x20001380
 800928c:	20001394 	.word	0x20001394
 8009290:	200013a8 	.word	0x200013a8
 8009294:	200013bc 	.word	0x200013bc
 8009298:	200013d0 	.word	0x200013d0
 800929c:	200013e4 	.word	0x200013e4
 80092a0:	200013f8 	.word	0x200013f8
 80092a4:	2000140c 	.word	0x2000140c
 80092a8:	20001420 	.word	0x20001420
 80092ac:	20001434 	.word	0x20001434
 80092b0:	20001448 	.word	0x20001448
 80092b4:	2000145c 	.word	0x2000145c
 80092b8:	20001470 	.word	0x20001470
 80092bc:	20001484 	.word	0x20001484
 80092c0:	20001498 	.word	0x20001498
 80092c4:	200014ac 	.word	0x200014ac
 80092c8:	200014c0 	.word	0x200014c0
 80092cc:	200014d4 	.word	0x200014d4
 80092d0:	200014e8 	.word	0x200014e8
 80092d4:	200014fc 	.word	0x200014fc
 80092d8:	20001510 	.word	0x20001510
 80092dc:	20001524 	.word	0x20001524
 80092e0:	20001538 	.word	0x20001538
 80092e4:	2000154c 	.word	0x2000154c
 80092e8:	20001560 	.word	0x20001560
 80092ec:	20001574 	.word	0x20001574
 80092f0:	20001588 	.word	0x20001588
 80092f4:	2000159c 	.word	0x2000159c
 80092f8:	200015b0 	.word	0x200015b0
 80092fc:	200015c4 	.word	0x200015c4
 8009300:	200015d8 	.word	0x200015d8
 8009304:	200015ec 	.word	0x200015ec
 8009308:	20001600 	.word	0x20001600
 800930c:	20001614 	.word	0x20001614
 8009310:	20001628 	.word	0x20001628
 8009314:	2000163c 	.word	0x2000163c
 8009318:	20001650 	.word	0x20001650
 800931c:	20001664 	.word	0x20001664
 8009320:	20001678 	.word	0x20001678
 8009324:	2000168c 	.word	0x2000168c
 8009328:	200016a0 	.word	0x200016a0
 800932c:	200016b4 	.word	0x200016b4
 8009330:	200016c8 	.word	0x200016c8
 8009334:	200016dc 	.word	0x200016dc
 8009338:	200016f0 	.word	0x200016f0
 800933c:	20001704 	.word	0x20001704
 8009340:	20001718 	.word	0x20001718
 8009344:	2000172c 	.word	0x2000172c
 8009348:	20001740 	.word	0x20001740
 800934c:	20001754 	.word	0x20001754
 8009350:	20001768 	.word	0x20001768
 8009354:	2000177c 	.word	0x2000177c
 8009358:	20001790 	.word	0x20001790
 800935c:	200017a4 	.word	0x200017a4
 8009360:	200017b8 	.word	0x200017b8
 8009364:	200017cc 	.word	0x200017cc
 8009368:	200017e0 	.word	0x200017e0
 800936c:	200017f4 	.word	0x200017f4
 8009370:	20001808 	.word	0x20001808
 8009374:	2000181c 	.word	0x2000181c

08009378 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af02      	add	r7, sp, #8
 800937e:	4603      	mov	r3, r0
 8009380:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8009382:	79fb      	ldrb	r3, [r7, #7]
 8009384:	f023 030f 	bic.w	r3, r3, #15
 8009388:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800938a:	79fb      	ldrb	r3, [r7, #7]
 800938c:	011b      	lsls	r3, r3, #4
 800938e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8009390:	7b7b      	ldrb	r3, [r7, #13]
 8009392:	f043 030c 	orr.w	r3, r3, #12
 8009396:	b2db      	uxtb	r3, r3
 8009398:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800939a:	7b7b      	ldrb	r3, [r7, #13]
 800939c:	f043 0308 	orr.w	r3, r3, #8
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80093a4:	7b3b      	ldrb	r3, [r7, #12]
 80093a6:	f043 030c 	orr.w	r3, r3, #12
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80093ae:	7b3b      	ldrb	r3, [r7, #12]
 80093b0:	f043 0308 	orr.w	r3, r3, #8
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80093b8:	bf00      	nop
 80093ba:	4825      	ldr	r0, [pc, #148]	@ (8009450 <lcd_send_cmd+0xd8>)
 80093bc:	f002 f887 	bl	800b4ce <HAL_I2C_GetError>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b04      	cmp	r3, #4
 80093c4:	d0f9      	beq.n	80093ba <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80093c6:	bf00      	nop
 80093c8:	4821      	ldr	r0, [pc, #132]	@ (8009450 <lcd_send_cmd+0xd8>)
 80093ca:	f002 f873 	bl	800b4b4 <HAL_I2C_GetState>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b20      	cmp	r3, #32
 80093d2:	d1f9      	bne.n	80093c8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80093d4:	4b1f      	ldr	r3, [pc, #124]	@ (8009454 <lcd_send_cmd+0xdc>)
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d116      	bne.n	800940a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80093dc:	2300      	movs	r3, #0
 80093de:	73fb      	strb	r3, [r7, #15]
 80093e0:	e00f      	b.n	8009402 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
 80093e4:	3310      	adds	r3, #16
 80093e6:	443b      	add	r3, r7
 80093e8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
 80093ee:	f022 0208 	bic.w	r2, r2, #8
 80093f2:	b2d2      	uxtb	r2, r2
 80093f4:	3310      	adds	r3, #16
 80093f6:	443b      	add	r3, r7
 80093f8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
 80093fe:	3301      	adds	r3, #1
 8009400:	73fb      	strb	r3, [r7, #15]
 8009402:	7bfb      	ldrb	r3, [r7, #15]
 8009404:	2b03      	cmp	r3, #3
 8009406:	d9ec      	bls.n	80093e2 <lcd_send_cmd+0x6a>
 8009408:	e015      	b.n	8009436 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800940a:	2300      	movs	r3, #0
 800940c:	73bb      	strb	r3, [r7, #14]
 800940e:	e00f      	b.n	8009430 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8009410:	7bbb      	ldrb	r3, [r7, #14]
 8009412:	3310      	adds	r3, #16
 8009414:	443b      	add	r3, r7
 8009416:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800941a:	7bbb      	ldrb	r3, [r7, #14]
 800941c:	f042 0208 	orr.w	r2, r2, #8
 8009420:	b2d2      	uxtb	r2, r2
 8009422:	3310      	adds	r3, #16
 8009424:	443b      	add	r3, r7
 8009426:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800942a:	7bbb      	ldrb	r3, [r7, #14]
 800942c:	3301      	adds	r3, #1
 800942e:	73bb      	strb	r3, [r7, #14]
 8009430:	7bbb      	ldrb	r3, [r7, #14]
 8009432:	2b03      	cmp	r3, #3
 8009434:	d9ec      	bls.n	8009410 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8009436:	f107 0208 	add.w	r2, r7, #8
 800943a:	2364      	movs	r3, #100	@ 0x64
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	2304      	movs	r3, #4
 8009440:	214e      	movs	r1, #78	@ 0x4e
 8009442:	4803      	ldr	r0, [pc, #12]	@ (8009450 <lcd_send_cmd+0xd8>)
 8009444:	f001 fbd6 	bl	800abf4 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8009448:	bf00      	nop
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	20001858 	.word	0x20001858
 8009454:	2000182d 	.word	0x2000182d

08009458 <lcd_send_data>:

void lcd_send_data (char data) {
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af02      	add	r7, sp, #8
 800945e:	4603      	mov	r3, r0
 8009460:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8009462:	79fb      	ldrb	r3, [r7, #7]
 8009464:	f023 030f 	bic.w	r3, r3, #15
 8009468:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800946a:	79fb      	ldrb	r3, [r7, #7]
 800946c:	011b      	lsls	r3, r3, #4
 800946e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8009470:	7b7b      	ldrb	r3, [r7, #13]
 8009472:	f043 030d 	orr.w	r3, r3, #13
 8009476:	b2db      	uxtb	r3, r3
 8009478:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800947a:	7b7b      	ldrb	r3, [r7, #13]
 800947c:	f043 0309 	orr.w	r3, r3, #9
 8009480:	b2db      	uxtb	r3, r3
 8009482:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8009484:	7b3b      	ldrb	r3, [r7, #12]
 8009486:	f043 030d 	orr.w	r3, r3, #13
 800948a:	b2db      	uxtb	r3, r3
 800948c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800948e:	7b3b      	ldrb	r3, [r7, #12]
 8009490:	f043 0309 	orr.w	r3, r3, #9
 8009494:	b2db      	uxtb	r3, r3
 8009496:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009498:	bf00      	nop
 800949a:	4825      	ldr	r0, [pc, #148]	@ (8009530 <lcd_send_data+0xd8>)
 800949c:	f002 f817 	bl	800b4ce <HAL_I2C_GetError>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b04      	cmp	r3, #4
 80094a4:	d0f9      	beq.n	800949a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80094a6:	bf00      	nop
 80094a8:	4821      	ldr	r0, [pc, #132]	@ (8009530 <lcd_send_data+0xd8>)
 80094aa:	f002 f803 	bl	800b4b4 <HAL_I2C_GetState>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b20      	cmp	r3, #32
 80094b2:	d1f9      	bne.n	80094a8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80094b4:	4b1f      	ldr	r3, [pc, #124]	@ (8009534 <lcd_send_data+0xdc>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d116      	bne.n	80094ea <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80094bc:	2300      	movs	r3, #0
 80094be:	73fb      	strb	r3, [r7, #15]
 80094c0:	e00f      	b.n	80094e2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
 80094c4:	3310      	adds	r3, #16
 80094c6:	443b      	add	r3, r7
 80094c8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
 80094ce:	f022 0208 	bic.w	r2, r2, #8
 80094d2:	b2d2      	uxtb	r2, r2
 80094d4:	3310      	adds	r3, #16
 80094d6:	443b      	add	r3, r7
 80094d8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
 80094de:	3301      	adds	r3, #1
 80094e0:	73fb      	strb	r3, [r7, #15]
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	2b03      	cmp	r3, #3
 80094e6:	d9ec      	bls.n	80094c2 <lcd_send_data+0x6a>
 80094e8:	e015      	b.n	8009516 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80094ea:	2300      	movs	r3, #0
 80094ec:	73bb      	strb	r3, [r7, #14]
 80094ee:	e00f      	b.n	8009510 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80094f0:	7bbb      	ldrb	r3, [r7, #14]
 80094f2:	3310      	adds	r3, #16
 80094f4:	443b      	add	r3, r7
 80094f6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80094fa:	7bbb      	ldrb	r3, [r7, #14]
 80094fc:	f042 0208 	orr.w	r2, r2, #8
 8009500:	b2d2      	uxtb	r2, r2
 8009502:	3310      	adds	r3, #16
 8009504:	443b      	add	r3, r7
 8009506:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800950a:	7bbb      	ldrb	r3, [r7, #14]
 800950c:	3301      	adds	r3, #1
 800950e:	73bb      	strb	r3, [r7, #14]
 8009510:	7bbb      	ldrb	r3, [r7, #14]
 8009512:	2b03      	cmp	r3, #3
 8009514:	d9ec      	bls.n	80094f0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8009516:	f107 0208 	add.w	r2, r7, #8
 800951a:	2364      	movs	r3, #100	@ 0x64
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	2304      	movs	r3, #4
 8009520:	214e      	movs	r1, #78	@ 0x4e
 8009522:	4803      	ldr	r0, [pc, #12]	@ (8009530 <lcd_send_data+0xd8>)
 8009524:	f001 fb66 	bl	800abf4 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8009528:	bf00      	nop
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	20001858 	.word	0x20001858
 8009534:	2000182d 	.word	0x2000182d

08009538 <lcd_send_string>:

void lcd_send_string (char *str) {
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8009540:	e006      	b.n	8009550 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	1c5a      	adds	r2, r3, #1
 8009546:	607a      	str	r2, [r7, #4]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	4618      	mov	r0, r3
 800954c:	f7ff ff84 	bl	8009458 <lcd_send_data>
	while (*str) {
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1f4      	bne.n	8009542 <lcd_send_string+0xa>
	}
}
 8009558:	bf00      	nop
 800955a:	bf00      	nop
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <lcd_init>:

void lcd_init (void) {
 8009562:	b580      	push	{r7, lr}
 8009564:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8009566:	2002      	movs	r0, #2
 8009568:	f7ff ff06 	bl	8009378 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800956c:	2028      	movs	r0, #40	@ 0x28
 800956e:	f7ff ff03 	bl	8009378 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8009572:	200c      	movs	r0, #12
 8009574:	f7ff ff00 	bl	8009378 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8009578:	2080      	movs	r0, #128	@ 0x80
 800957a:	f7ff fefd 	bl	8009378 <lcd_send_cmd>
	lcd_backlight(1);
 800957e:	2001      	movs	r0, #1
 8009580:	f000 f840 	bl	8009604 <lcd_backlight>
}
 8009584:	bf00      	nop
 8009586:	bd80      	pop	{r7, pc}

08009588 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	460a      	mov	r2, r1
 8009592:	71fb      	strb	r3, [r7, #7]
 8009594:	4613      	mov	r3, r2
 8009596:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8009598:	79fb      	ldrb	r3, [r7, #7]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d106      	bne.n	80095ac <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 800959e:	79bb      	ldrb	r3, [r7, #6]
 80095a0:	337f      	adds	r3, #127	@ 0x7f
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7ff fee7 	bl	8009378 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80095aa:	e008      	b.n	80095be <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80095ac:	79fb      	ldrb	r3, [r7, #7]
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d105      	bne.n	80095be <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80095b2:	79bb      	ldrb	r3, [r7, #6]
 80095b4:	3b41      	subs	r3, #65	@ 0x41
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7ff fedd 	bl	8009378 <lcd_send_cmd>
}
 80095be:	bf00      	nop
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b082      	sub	sp, #8
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	4603      	mov	r3, r0
 80095ce:	603a      	str	r2, [r7, #0]
 80095d0:	71fb      	strb	r3, [r7, #7]
 80095d2:	460b      	mov	r3, r1
 80095d4:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80095d6:	79ba      	ldrb	r2, [r7, #6]
 80095d8:	79fb      	ldrb	r3, [r7, #7]
 80095da:	4611      	mov	r1, r2
 80095dc:	4618      	mov	r0, r3
 80095de:	f7ff ffd3 	bl	8009588 <lcd_gotoxy>
	lcd_send_string(str);
 80095e2:	6838      	ldr	r0, [r7, #0]
 80095e4:	f7ff ffa8 	bl	8009538 <lcd_send_string>
}
 80095e8:	bf00      	nop
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <lcd_clear>:

void lcd_clear(void) {
 80095f0:	b580      	push	{r7, lr}
 80095f2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80095f4:	2001      	movs	r0, #1
 80095f6:	f7ff febf 	bl	8009378 <lcd_send_cmd>
    HAL_Delay(2);
 80095fa:	2002      	movs	r0, #2
 80095fc:	f000 fcb0 	bl	8009f60 <HAL_Delay>

}
 8009600:	bf00      	nop
 8009602:	bd80      	pop	{r7, pc}

08009604 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800960e:	4a05      	ldr	r2, [pc, #20]	@ (8009624 <lcd_backlight+0x20>)
 8009610:	79fb      	ldrb	r3, [r7, #7]
 8009612:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8009614:	2000      	movs	r0, #0
 8009616:	f7ff feaf 	bl	8009378 <lcd_send_cmd>
}
 800961a:	bf00      	nop
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	2000182d 	.word	0x2000182d

08009628 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8009630:	4b04      	ldr	r3, [pc, #16]	@ (8009644 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	3301      	adds	r3, #1
 8009636:	4a03      	ldr	r2, [pc, #12]	@ (8009644 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009638:	6013      	str	r3, [r2, #0]
}
 800963a:	bf00      	nop
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	bc80      	pop	{r7}
 8009642:	4770      	bx	lr
 8009644:	20001088 	.word	0x20001088

08009648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800964c:	f000 fc26 	bl	8009e9c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8009650:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009654:	f000 fc84 	bl	8009f60 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009658:	f000 f89a 	bl	8009790 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800965c:	f000 f9bc 	bl	80099d8 <MX_GPIO_Init>
  MX_CAN_Init();
 8009660:	f000 f8dc 	bl	800981c <MX_CAN_Init>
  MX_I2C1_Init();
 8009664:	f000 f90e 	bl	8009884 <MX_I2C1_Init>
  MX_TIM1_Init();
 8009668:	f000 f93a 	bl	80098e0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800966c:	f000 f98a 	bl	8009984 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009670:	2201      	movs	r2, #1
 8009672:	2140      	movs	r1, #64	@ 0x40
 8009674:	483d      	ldr	r0, [pc, #244]	@ (800976c <main+0x124>)
 8009676:	f001 f918 	bl	800a8aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800967a:	2201      	movs	r2, #1
 800967c:	2180      	movs	r1, #128	@ 0x80
 800967e:	483b      	ldr	r0, [pc, #236]	@ (800976c <main+0x124>)
 8009680:	f001 f913 	bl	800a8aa <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8009684:	200a      	movs	r0, #10
 8009686:	f000 fc6b 	bl	8009f60 <HAL_Delay>
  lcd_init();
 800968a:	f7ff ff6a 	bl	8009562 <lcd_init>
  HAL_Delay(10);
 800968e:	200a      	movs	r0, #10
 8009690:	f000 fc66 	bl	8009f60 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8009694:	4836      	ldr	r0, [pc, #216]	@ (8009770 <main+0x128>)
 8009696:	f002 ffbb 	bl	800c610 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800969a:	bf00      	nop
 800969c:	4835      	ldr	r0, [pc, #212]	@ (8009774 <main+0x12c>)
 800969e:	f001 ff16 	bl	800b4ce <HAL_I2C_GetError>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b04      	cmp	r3, #4
 80096a6:	d0f9      	beq.n	800969c <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80096a8:	bf00      	nop
 80096aa:	4832      	ldr	r0, [pc, #200]	@ (8009774 <main+0x12c>)
 80096ac:	f001 ff02 	bl	800b4b4 <HAL_I2C_GetState>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b20      	cmp	r3, #32
 80096b4:	d1f9      	bne.n	80096aa <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80096b6:	2200      	movs	r2, #0
 80096b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80096bc:	482b      	ldr	r0, [pc, #172]	@ (800976c <main+0x124>)
 80096be:	f001 f8f4 	bl	800a8aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80096c2:	2200      	movs	r2, #0
 80096c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80096c8:	4828      	ldr	r0, [pc, #160]	@ (800976c <main+0x124>)
 80096ca:	f001 f8ee 	bl	800a8aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80096ce:	2200      	movs	r2, #0
 80096d0:	2104      	movs	r1, #4
 80096d2:	4826      	ldr	r0, [pc, #152]	@ (800976c <main+0x124>)
 80096d4:	f001 f8e9 	bl	800a8aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80096d8:	2200      	movs	r2, #0
 80096da:	2102      	movs	r1, #2
 80096dc:	4823      	ldr	r0, [pc, #140]	@ (800976c <main+0x124>)
 80096de:	f001 f8e4 	bl	800a8aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80096e2:	2200      	movs	r2, #0
 80096e4:	2101      	movs	r1, #1
 80096e6:	4821      	ldr	r0, [pc, #132]	@ (800976c <main+0x124>)
 80096e8:	f001 f8df 	bl	800a8aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80096ec:	2200      	movs	r2, #0
 80096ee:	2120      	movs	r1, #32
 80096f0:	4821      	ldr	r0, [pc, #132]	@ (8009778 <main+0x130>)
 80096f2:	f001 f8da 	bl	800a8aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80096f6:	2200      	movs	r2, #0
 80096f8:	2110      	movs	r1, #16
 80096fa:	481f      	ldr	r0, [pc, #124]	@ (8009778 <main+0x130>)
 80096fc:	f001 f8d5 	bl	800a8aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8009700:	2200      	movs	r2, #0
 8009702:	2180      	movs	r1, #128	@ 0x80
 8009704:	481d      	ldr	r0, [pc, #116]	@ (800977c <main+0x134>)
 8009706:	f001 f8d0 	bl	800a8aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800970a:	2200      	movs	r2, #0
 800970c:	2140      	movs	r1, #64	@ 0x40
 800970e:	481b      	ldr	r0, [pc, #108]	@ (800977c <main+0x134>)
 8009710:	f001 f8cb 	bl	800a8aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8009714:	2200      	movs	r2, #0
 8009716:	2120      	movs	r1, #32
 8009718:	4818      	ldr	r0, [pc, #96]	@ (800977c <main+0x134>)
 800971a:	f001 f8c6 	bl	800a8aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800971e:	2200      	movs	r2, #0
 8009720:	2110      	movs	r1, #16
 8009722:	4816      	ldr	r0, [pc, #88]	@ (800977c <main+0x134>)
 8009724:	f001 f8c1 	bl	800a8aa <HAL_GPIO_WritePin>

  i2cTest();
 8009728:	f7f7 f9f4 	bl	8000b14 <i2cTest>
  HAL_Delay(100);
 800972c:	2064      	movs	r0, #100	@ 0x64
 800972e:	f000 fc17 	bl	8009f60 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8009732:	4a13      	ldr	r2, [pc, #76]	@ (8009780 <main+0x138>)
 8009734:	2101      	movs	r1, #1
 8009736:	2001      	movs	r0, #1
 8009738:	f7ff ff45 	bl	80095c6 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 800973c:	4a11      	ldr	r2, [pc, #68]	@ (8009784 <main+0x13c>)
 800973e:	2101      	movs	r1, #1
 8009740:	2002      	movs	r0, #2
 8009742:	f7ff ff40 	bl	80095c6 <lcd_print>
  HAL_Delay(1000);
 8009746:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800974a:	f000 fc09 	bl	8009f60 <HAL_Delay>
  lcd_clear();
 800974e:	f7ff ff4f 	bl	80095f0 <lcd_clear>

  eepromKontrol();
 8009752:	f7f6 fd67 	bl	8000224 <eepromKontrol>
  HAL_Delay(500);
 8009756:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800975a:	f000 fc01 	bl	8009f60 <HAL_Delay>

  backLightTimer = millis;
 800975e:	4b0a      	ldr	r3, [pc, #40]	@ (8009788 <main+0x140>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a0a      	ldr	r2, [pc, #40]	@ (800978c <main+0x144>)
 8009764:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8009766:	f7fe f9ed 	bl	8007b44 <mainLoop>
 800976a:	e7fc      	b.n	8009766 <main+0x11e>
 800976c:	40010c00 	.word	0x40010c00
 8009770:	200018ac 	.word	0x200018ac
 8009774:	20001858 	.word	0x20001858
 8009778:	40011000 	.word	0x40011000
 800977c:	40010800 	.word	0x40010800
 8009780:	20000030 	.word	0x20000030
 8009784:	20000044 	.word	0x20000044
 8009788:	20001088 	.word	0x20001088
 800978c:	200010a4 	.word	0x200010a4

08009790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b090      	sub	sp, #64	@ 0x40
 8009794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009796:	f107 0318 	add.w	r3, r7, #24
 800979a:	2228      	movs	r2, #40	@ 0x28
 800979c:	2100      	movs	r1, #0
 800979e:	4618      	mov	r0, r3
 80097a0:	f003 fc52 	bl	800d048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80097a4:	1d3b      	adds	r3, r7, #4
 80097a6:	2200      	movs	r2, #0
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	605a      	str	r2, [r3, #4]
 80097ac:	609a      	str	r2, [r3, #8]
 80097ae:	60da      	str	r2, [r3, #12]
 80097b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80097b2:	2301      	movs	r3, #1
 80097b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80097b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80097ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80097bc:	2300      	movs	r3, #0
 80097be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80097c0:	2301      	movs	r3, #1
 80097c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80097c4:	2302      	movs	r3, #2
 80097c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80097c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80097cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80097ce:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80097d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80097d4:	f107 0318 	add.w	r3, r7, #24
 80097d8:	4618      	mov	r0, r3
 80097da:	f002 fab9 	bl	800bd50 <HAL_RCC_OscConfig>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d001      	beq.n	80097e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80097e4:	f000 f9a2 	bl	8009b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80097e8:	230f      	movs	r3, #15
 80097ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80097ec:	2302      	movs	r3, #2
 80097ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80097f0:	2300      	movs	r3, #0
 80097f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80097f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80097fa:	2300      	movs	r3, #0
 80097fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80097fe:	1d3b      	adds	r3, r7, #4
 8009800:	2102      	movs	r1, #2
 8009802:	4618      	mov	r0, r3
 8009804:	f002 fd26 	bl	800c254 <HAL_RCC_ClockConfig>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800980e:	f000 f98d 	bl	8009b2c <Error_Handler>
  }
}
 8009812:	bf00      	nop
 8009814:	3740      	adds	r7, #64	@ 0x40
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
	...

0800981c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8009820:	4b16      	ldr	r3, [pc, #88]	@ (800987c <MX_CAN_Init+0x60>)
 8009822:	4a17      	ldr	r2, [pc, #92]	@ (8009880 <MX_CAN_Init+0x64>)
 8009824:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8009826:	4b15      	ldr	r3, [pc, #84]	@ (800987c <MX_CAN_Init+0x60>)
 8009828:	2210      	movs	r2, #16
 800982a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800982c:	4b13      	ldr	r3, [pc, #76]	@ (800987c <MX_CAN_Init+0x60>)
 800982e:	2200      	movs	r2, #0
 8009830:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009832:	4b12      	ldr	r3, [pc, #72]	@ (800987c <MX_CAN_Init+0x60>)
 8009834:	2200      	movs	r2, #0
 8009836:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8009838:	4b10      	ldr	r3, [pc, #64]	@ (800987c <MX_CAN_Init+0x60>)
 800983a:	2200      	movs	r2, #0
 800983c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800983e:	4b0f      	ldr	r3, [pc, #60]	@ (800987c <MX_CAN_Init+0x60>)
 8009840:	2200      	movs	r2, #0
 8009842:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8009844:	4b0d      	ldr	r3, [pc, #52]	@ (800987c <MX_CAN_Init+0x60>)
 8009846:	2200      	movs	r2, #0
 8009848:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800984a:	4b0c      	ldr	r3, [pc, #48]	@ (800987c <MX_CAN_Init+0x60>)
 800984c:	2200      	movs	r2, #0
 800984e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8009850:	4b0a      	ldr	r3, [pc, #40]	@ (800987c <MX_CAN_Init+0x60>)
 8009852:	2200      	movs	r2, #0
 8009854:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8009856:	4b09      	ldr	r3, [pc, #36]	@ (800987c <MX_CAN_Init+0x60>)
 8009858:	2200      	movs	r2, #0
 800985a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800985c:	4b07      	ldr	r3, [pc, #28]	@ (800987c <MX_CAN_Init+0x60>)
 800985e:	2200      	movs	r2, #0
 8009860:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8009862:	4b06      	ldr	r3, [pc, #24]	@ (800987c <MX_CAN_Init+0x60>)
 8009864:	2200      	movs	r2, #0
 8009866:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8009868:	4804      	ldr	r0, [pc, #16]	@ (800987c <MX_CAN_Init+0x60>)
 800986a:	f000 fb9d 	bl	8009fa8 <HAL_CAN_Init>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8009874:	f000 f95a 	bl	8009b2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8009878:	bf00      	nop
 800987a:	bd80      	pop	{r7, pc}
 800987c:	20001830 	.word	0x20001830
 8009880:	40006400 	.word	0x40006400

08009884 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009888:	4b12      	ldr	r3, [pc, #72]	@ (80098d4 <MX_I2C1_Init+0x50>)
 800988a:	4a13      	ldr	r2, [pc, #76]	@ (80098d8 <MX_I2C1_Init+0x54>)
 800988c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800988e:	4b11      	ldr	r3, [pc, #68]	@ (80098d4 <MX_I2C1_Init+0x50>)
 8009890:	4a12      	ldr	r2, [pc, #72]	@ (80098dc <MX_I2C1_Init+0x58>)
 8009892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009894:	4b0f      	ldr	r3, [pc, #60]	@ (80098d4 <MX_I2C1_Init+0x50>)
 8009896:	2200      	movs	r2, #0
 8009898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800989a:	4b0e      	ldr	r3, [pc, #56]	@ (80098d4 <MX_I2C1_Init+0x50>)
 800989c:	2200      	movs	r2, #0
 800989e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80098a0:	4b0c      	ldr	r3, [pc, #48]	@ (80098d4 <MX_I2C1_Init+0x50>)
 80098a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80098a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80098a8:	4b0a      	ldr	r3, [pc, #40]	@ (80098d4 <MX_I2C1_Init+0x50>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80098ae:	4b09      	ldr	r3, [pc, #36]	@ (80098d4 <MX_I2C1_Init+0x50>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80098b4:	4b07      	ldr	r3, [pc, #28]	@ (80098d4 <MX_I2C1_Init+0x50>)
 80098b6:	2200      	movs	r2, #0
 80098b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80098ba:	4b06      	ldr	r3, [pc, #24]	@ (80098d4 <MX_I2C1_Init+0x50>)
 80098bc:	2200      	movs	r2, #0
 80098be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80098c0:	4804      	ldr	r0, [pc, #16]	@ (80098d4 <MX_I2C1_Init+0x50>)
 80098c2:	f001 f823 	bl	800a90c <HAL_I2C_Init>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80098cc:	f000 f92e 	bl	8009b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80098d0:	bf00      	nop
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	20001858 	.word	0x20001858
 80098d8:	40005400 	.word	0x40005400
 80098dc:	00061a80 	.word	0x00061a80

080098e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80098e6:	f107 0308 	add.w	r3, r7, #8
 80098ea:	2200      	movs	r2, #0
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	605a      	str	r2, [r3, #4]
 80098f0:	609a      	str	r2, [r3, #8]
 80098f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80098f4:	463b      	mov	r3, r7
 80098f6:	2200      	movs	r2, #0
 80098f8:	601a      	str	r2, [r3, #0]
 80098fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80098fc:	4b1f      	ldr	r3, [pc, #124]	@ (800997c <MX_TIM1_Init+0x9c>)
 80098fe:	4a20      	ldr	r2, [pc, #128]	@ (8009980 <MX_TIM1_Init+0xa0>)
 8009900:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8009902:	4b1e      	ldr	r3, [pc, #120]	@ (800997c <MX_TIM1_Init+0x9c>)
 8009904:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8009908:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800990a:	4b1c      	ldr	r3, [pc, #112]	@ (800997c <MX_TIM1_Init+0x9c>)
 800990c:	2200      	movs	r2, #0
 800990e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8009910:	4b1a      	ldr	r3, [pc, #104]	@ (800997c <MX_TIM1_Init+0x9c>)
 8009912:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8009916:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009918:	4b18      	ldr	r3, [pc, #96]	@ (800997c <MX_TIM1_Init+0x9c>)
 800991a:	2200      	movs	r2, #0
 800991c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800991e:	4b17      	ldr	r3, [pc, #92]	@ (800997c <MX_TIM1_Init+0x9c>)
 8009920:	2200      	movs	r2, #0
 8009922:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009924:	4b15      	ldr	r3, [pc, #84]	@ (800997c <MX_TIM1_Init+0x9c>)
 8009926:	2200      	movs	r2, #0
 8009928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800992a:	4814      	ldr	r0, [pc, #80]	@ (800997c <MX_TIM1_Init+0x9c>)
 800992c:	f002 fe20 	bl	800c570 <HAL_TIM_Base_Init>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d001      	beq.n	800993a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8009936:	f000 f8f9 	bl	8009b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800993a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800993e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009940:	f107 0308 	add.w	r3, r7, #8
 8009944:	4619      	mov	r1, r3
 8009946:	480d      	ldr	r0, [pc, #52]	@ (800997c <MX_TIM1_Init+0x9c>)
 8009948:	f002 ffca 	bl	800c8e0 <HAL_TIM_ConfigClockSource>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d001      	beq.n	8009956 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8009952:	f000 f8eb 	bl	8009b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009956:	2300      	movs	r3, #0
 8009958:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800995a:	2300      	movs	r3, #0
 800995c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800995e:	463b      	mov	r3, r7
 8009960:	4619      	mov	r1, r3
 8009962:	4806      	ldr	r0, [pc, #24]	@ (800997c <MX_TIM1_Init+0x9c>)
 8009964:	f003 f9b8 	bl	800ccd8 <HAL_TIMEx_MasterConfigSynchronization>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d001      	beq.n	8009972 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800996e:	f000 f8dd 	bl	8009b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8009972:	bf00      	nop
 8009974:	3718      	adds	r7, #24
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	200018ac 	.word	0x200018ac
 8009980:	40012c00 	.word	0x40012c00

08009984 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009988:	4b11      	ldr	r3, [pc, #68]	@ (80099d0 <MX_USART1_UART_Init+0x4c>)
 800998a:	4a12      	ldr	r2, [pc, #72]	@ (80099d4 <MX_USART1_UART_Init+0x50>)
 800998c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800998e:	4b10      	ldr	r3, [pc, #64]	@ (80099d0 <MX_USART1_UART_Init+0x4c>)
 8009990:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009994:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009996:	4b0e      	ldr	r3, [pc, #56]	@ (80099d0 <MX_USART1_UART_Init+0x4c>)
 8009998:	2200      	movs	r2, #0
 800999a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800999c:	4b0c      	ldr	r3, [pc, #48]	@ (80099d0 <MX_USART1_UART_Init+0x4c>)
 800999e:	2200      	movs	r2, #0
 80099a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80099a2:	4b0b      	ldr	r3, [pc, #44]	@ (80099d0 <MX_USART1_UART_Init+0x4c>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80099a8:	4b09      	ldr	r3, [pc, #36]	@ (80099d0 <MX_USART1_UART_Init+0x4c>)
 80099aa:	220c      	movs	r2, #12
 80099ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80099ae:	4b08      	ldr	r3, [pc, #32]	@ (80099d0 <MX_USART1_UART_Init+0x4c>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80099b4:	4b06      	ldr	r3, [pc, #24]	@ (80099d0 <MX_USART1_UART_Init+0x4c>)
 80099b6:	2200      	movs	r2, #0
 80099b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80099ba:	4805      	ldr	r0, [pc, #20]	@ (80099d0 <MX_USART1_UART_Init+0x4c>)
 80099bc:	f003 fa0a 	bl	800cdd4 <HAL_UART_Init>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d001      	beq.n	80099ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80099c6:	f000 f8b1 	bl	8009b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80099ca:	bf00      	nop
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	200018f4 	.word	0x200018f4
 80099d4:	40013800 	.word	0x40013800

080099d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b088      	sub	sp, #32
 80099dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099de:	f107 0310 	add.w	r3, r7, #16
 80099e2:	2200      	movs	r2, #0
 80099e4:	601a      	str	r2, [r3, #0]
 80099e6:	605a      	str	r2, [r3, #4]
 80099e8:	609a      	str	r2, [r3, #8]
 80099ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80099ec:	4b4b      	ldr	r3, [pc, #300]	@ (8009b1c <MX_GPIO_Init+0x144>)
 80099ee:	699b      	ldr	r3, [r3, #24]
 80099f0:	4a4a      	ldr	r2, [pc, #296]	@ (8009b1c <MX_GPIO_Init+0x144>)
 80099f2:	f043 0310 	orr.w	r3, r3, #16
 80099f6:	6193      	str	r3, [r2, #24]
 80099f8:	4b48      	ldr	r3, [pc, #288]	@ (8009b1c <MX_GPIO_Init+0x144>)
 80099fa:	699b      	ldr	r3, [r3, #24]
 80099fc:	f003 0310 	and.w	r3, r3, #16
 8009a00:	60fb      	str	r3, [r7, #12]
 8009a02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009a04:	4b45      	ldr	r3, [pc, #276]	@ (8009b1c <MX_GPIO_Init+0x144>)
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	4a44      	ldr	r2, [pc, #272]	@ (8009b1c <MX_GPIO_Init+0x144>)
 8009a0a:	f043 0320 	orr.w	r3, r3, #32
 8009a0e:	6193      	str	r3, [r2, #24]
 8009a10:	4b42      	ldr	r3, [pc, #264]	@ (8009b1c <MX_GPIO_Init+0x144>)
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	f003 0320 	and.w	r3, r3, #32
 8009a18:	60bb      	str	r3, [r7, #8]
 8009a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a1c:	4b3f      	ldr	r3, [pc, #252]	@ (8009b1c <MX_GPIO_Init+0x144>)
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	4a3e      	ldr	r2, [pc, #248]	@ (8009b1c <MX_GPIO_Init+0x144>)
 8009a22:	f043 0304 	orr.w	r3, r3, #4
 8009a26:	6193      	str	r3, [r2, #24]
 8009a28:	4b3c      	ldr	r3, [pc, #240]	@ (8009b1c <MX_GPIO_Init+0x144>)
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	f003 0304 	and.w	r3, r3, #4
 8009a30:	607b      	str	r3, [r7, #4]
 8009a32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a34:	4b39      	ldr	r3, [pc, #228]	@ (8009b1c <MX_GPIO_Init+0x144>)
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	4a38      	ldr	r2, [pc, #224]	@ (8009b1c <MX_GPIO_Init+0x144>)
 8009a3a:	f043 0308 	orr.w	r3, r3, #8
 8009a3e:	6193      	str	r3, [r2, #24]
 8009a40:	4b36      	ldr	r3, [pc, #216]	@ (8009b1c <MX_GPIO_Init+0x144>)
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	f003 0308 	and.w	r3, r3, #8
 8009a48:	603b      	str	r3, [r7, #0]
 8009a4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	21f0      	movs	r1, #240	@ 0xf0
 8009a50:	4833      	ldr	r0, [pc, #204]	@ (8009b20 <MX_GPIO_Init+0x148>)
 8009a52:	f000 ff2a 	bl	800a8aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8009a56:	2200      	movs	r2, #0
 8009a58:	f241 0130 	movw	r1, #4144	@ 0x1030
 8009a5c:	4831      	ldr	r0, [pc, #196]	@ (8009b24 <MX_GPIO_Init+0x14c>)
 8009a5e:	f000 ff24 	bl	800a8aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009a62:	2200      	movs	r2, #0
 8009a64:	f640 4107 	movw	r1, #3079	@ 0xc07
 8009a68:	482f      	ldr	r0, [pc, #188]	@ (8009b28 <MX_GPIO_Init+0x150>)
 8009a6a:	f000 ff1e 	bl	800a8aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8009a6e:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8009a72:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a74:	2300      	movs	r3, #0
 8009a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009a7c:	f107 0310 	add.w	r3, r7, #16
 8009a80:	4619      	mov	r1, r3
 8009a82:	4828      	ldr	r0, [pc, #160]	@ (8009b24 <MX_GPIO_Init+0x14c>)
 8009a84:	f000 fc9a 	bl	800a3bc <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8009a88:	f248 130f 	movw	r3, #33039	@ 0x810f
 8009a8c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a92:	2300      	movs	r3, #0
 8009a94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a96:	f107 0310 	add.w	r3, r7, #16
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	4820      	ldr	r0, [pc, #128]	@ (8009b20 <MX_GPIO_Init+0x148>)
 8009a9e:	f000 fc8d 	bl	800a3bc <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8009aa2:	23f0      	movs	r3, #240	@ 0xf0
 8009aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009aae:	2302      	movs	r3, #2
 8009ab0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ab2:	f107 0310 	add.w	r3, r7, #16
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	4819      	ldr	r0, [pc, #100]	@ (8009b20 <MX_GPIO_Init+0x148>)
 8009aba:	f000 fc7f 	bl	800a3bc <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8009abe:	f241 0330 	movw	r3, #4144	@ 0x1030
 8009ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009acc:	2302      	movs	r3, #2
 8009ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ad0:	f107 0310 	add.w	r3, r7, #16
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4813      	ldr	r0, [pc, #76]	@ (8009b24 <MX_GPIO_Init+0x14c>)
 8009ad8:	f000 fc70 	bl	800a3bc <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009adc:	f640 4307 	movw	r3, #3079	@ 0xc07
 8009ae0:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009aea:	2302      	movs	r3, #2
 8009aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009aee:	f107 0310 	add.w	r3, r7, #16
 8009af2:	4619      	mov	r1, r3
 8009af4:	480c      	ldr	r0, [pc, #48]	@ (8009b28 <MX_GPIO_Init+0x150>)
 8009af6:	f000 fc61 	bl	800a3bc <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8009afa:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8009afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b00:	2300      	movs	r3, #0
 8009b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b04:	2300      	movs	r3, #0
 8009b06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b08:	f107 0310 	add.w	r3, r7, #16
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	4806      	ldr	r0, [pc, #24]	@ (8009b28 <MX_GPIO_Init+0x150>)
 8009b10:	f000 fc54 	bl	800a3bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009b14:	bf00      	nop
 8009b16:	3720      	adds	r7, #32
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	40021000 	.word	0x40021000
 8009b20:	40010800 	.word	0x40010800
 8009b24:	40011000 	.word	0x40011000
 8009b28:	40010c00 	.word	0x40010c00

08009b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8009b30:	bf00      	nop
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bc80      	pop	{r7}
 8009b36:	4770      	bx	lr

08009b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8009b3e:	4b15      	ldr	r3, [pc, #84]	@ (8009b94 <HAL_MspInit+0x5c>)
 8009b40:	699b      	ldr	r3, [r3, #24]
 8009b42:	4a14      	ldr	r2, [pc, #80]	@ (8009b94 <HAL_MspInit+0x5c>)
 8009b44:	f043 0301 	orr.w	r3, r3, #1
 8009b48:	6193      	str	r3, [r2, #24]
 8009b4a:	4b12      	ldr	r3, [pc, #72]	@ (8009b94 <HAL_MspInit+0x5c>)
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	f003 0301 	and.w	r3, r3, #1
 8009b52:	60bb      	str	r3, [r7, #8]
 8009b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009b56:	4b0f      	ldr	r3, [pc, #60]	@ (8009b94 <HAL_MspInit+0x5c>)
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8009b94 <HAL_MspInit+0x5c>)
 8009b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b60:	61d3      	str	r3, [r2, #28]
 8009b62:	4b0c      	ldr	r3, [pc, #48]	@ (8009b94 <HAL_MspInit+0x5c>)
 8009b64:	69db      	ldr	r3, [r3, #28]
 8009b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b6a:	607b      	str	r3, [r7, #4]
 8009b6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8009b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8009b98 <HAL_MspInit+0x60>)
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	60fb      	str	r3, [r7, #12]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009b82:	60fb      	str	r3, [r7, #12]
 8009b84:	4a04      	ldr	r2, [pc, #16]	@ (8009b98 <HAL_MspInit+0x60>)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009b8a:	bf00      	nop
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bc80      	pop	{r7}
 8009b92:	4770      	bx	lr
 8009b94:	40021000 	.word	0x40021000
 8009b98:	40010000 	.word	0x40010000

08009b9c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b088      	sub	sp, #32
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ba4:	f107 0310 	add.w	r3, r7, #16
 8009ba8:	2200      	movs	r2, #0
 8009baa:	601a      	str	r2, [r3, #0]
 8009bac:	605a      	str	r2, [r3, #4]
 8009bae:	609a      	str	r2, [r3, #8]
 8009bb0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8009c28 <HAL_CAN_MspInit+0x8c>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d131      	bne.n	8009c20 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8009bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8009c2c <HAL_CAN_MspInit+0x90>)
 8009bbe:	69db      	ldr	r3, [r3, #28]
 8009bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8009c2c <HAL_CAN_MspInit+0x90>)
 8009bc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009bc6:	61d3      	str	r3, [r2, #28]
 8009bc8:	4b18      	ldr	r3, [pc, #96]	@ (8009c2c <HAL_CAN_MspInit+0x90>)
 8009bca:	69db      	ldr	r3, [r3, #28]
 8009bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bd0:	60fb      	str	r3, [r7, #12]
 8009bd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bd4:	4b15      	ldr	r3, [pc, #84]	@ (8009c2c <HAL_CAN_MspInit+0x90>)
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	4a14      	ldr	r2, [pc, #80]	@ (8009c2c <HAL_CAN_MspInit+0x90>)
 8009bda:	f043 0304 	orr.w	r3, r3, #4
 8009bde:	6193      	str	r3, [r2, #24]
 8009be0:	4b12      	ldr	r3, [pc, #72]	@ (8009c2c <HAL_CAN_MspInit+0x90>)
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	f003 0304 	and.w	r3, r3, #4
 8009be8:	60bb      	str	r3, [r7, #8]
 8009bea:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009bec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009bf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bfa:	f107 0310 	add.w	r3, r7, #16
 8009bfe:	4619      	mov	r1, r3
 8009c00:	480b      	ldr	r0, [pc, #44]	@ (8009c30 <HAL_CAN_MspInit+0x94>)
 8009c02:	f000 fbdb 	bl	800a3bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009c06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009c10:	2303      	movs	r3, #3
 8009c12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c14:	f107 0310 	add.w	r3, r7, #16
 8009c18:	4619      	mov	r1, r3
 8009c1a:	4805      	ldr	r0, [pc, #20]	@ (8009c30 <HAL_CAN_MspInit+0x94>)
 8009c1c:	f000 fbce 	bl	800a3bc <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8009c20:	bf00      	nop
 8009c22:	3720      	adds	r7, #32
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	40006400 	.word	0x40006400
 8009c2c:	40021000 	.word	0x40021000
 8009c30:	40010800 	.word	0x40010800

08009c34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b088      	sub	sp, #32
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c3c:	f107 0310 	add.w	r3, r7, #16
 8009c40:	2200      	movs	r2, #0
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	605a      	str	r2, [r3, #4]
 8009c46:	609a      	str	r2, [r3, #8]
 8009c48:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a15      	ldr	r2, [pc, #84]	@ (8009ca4 <HAL_I2C_MspInit+0x70>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d123      	bne.n	8009c9c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c54:	4b14      	ldr	r3, [pc, #80]	@ (8009ca8 <HAL_I2C_MspInit+0x74>)
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	4a13      	ldr	r2, [pc, #76]	@ (8009ca8 <HAL_I2C_MspInit+0x74>)
 8009c5a:	f043 0308 	orr.w	r3, r3, #8
 8009c5e:	6193      	str	r3, [r2, #24]
 8009c60:	4b11      	ldr	r3, [pc, #68]	@ (8009ca8 <HAL_I2C_MspInit+0x74>)
 8009c62:	699b      	ldr	r3, [r3, #24]
 8009c64:	f003 0308 	and.w	r3, r3, #8
 8009c68:	60fb      	str	r3, [r7, #12]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009c6c:	23c0      	movs	r3, #192	@ 0xc0
 8009c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009c70:	2312      	movs	r3, #18
 8009c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009c74:	2303      	movs	r3, #3
 8009c76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009c78:	f107 0310 	add.w	r3, r7, #16
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	480b      	ldr	r0, [pc, #44]	@ (8009cac <HAL_I2C_MspInit+0x78>)
 8009c80:	f000 fb9c 	bl	800a3bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009c84:	4b08      	ldr	r3, [pc, #32]	@ (8009ca8 <HAL_I2C_MspInit+0x74>)
 8009c86:	69db      	ldr	r3, [r3, #28]
 8009c88:	4a07      	ldr	r2, [pc, #28]	@ (8009ca8 <HAL_I2C_MspInit+0x74>)
 8009c8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009c8e:	61d3      	str	r3, [r2, #28]
 8009c90:	4b05      	ldr	r3, [pc, #20]	@ (8009ca8 <HAL_I2C_MspInit+0x74>)
 8009c92:	69db      	ldr	r3, [r3, #28]
 8009c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c98:	60bb      	str	r3, [r7, #8]
 8009c9a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8009c9c:	bf00      	nop
 8009c9e:	3720      	adds	r7, #32
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	40005400 	.word	0x40005400
 8009ca8:	40021000 	.word	0x40021000
 8009cac:	40010c00 	.word	0x40010c00

08009cb0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8009ce8 <HAL_I2C_MspDeInit+0x38>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d10d      	bne.n	8009cde <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8009cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8009cec <HAL_I2C_MspDeInit+0x3c>)
 8009cc4:	69db      	ldr	r3, [r3, #28]
 8009cc6:	4a09      	ldr	r2, [pc, #36]	@ (8009cec <HAL_I2C_MspDeInit+0x3c>)
 8009cc8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009ccc:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8009cce:	2140      	movs	r1, #64	@ 0x40
 8009cd0:	4807      	ldr	r0, [pc, #28]	@ (8009cf0 <HAL_I2C_MspDeInit+0x40>)
 8009cd2:	f000 fd07 	bl	800a6e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8009cd6:	2180      	movs	r1, #128	@ 0x80
 8009cd8:	4805      	ldr	r0, [pc, #20]	@ (8009cf0 <HAL_I2C_MspDeInit+0x40>)
 8009cda:	f000 fd03 	bl	800a6e4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	40005400 	.word	0x40005400
 8009cec:	40021000 	.word	0x40021000
 8009cf0:	40010c00 	.word	0x40010c00

08009cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a0d      	ldr	r2, [pc, #52]	@ (8009d38 <HAL_TIM_Base_MspInit+0x44>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d113      	bne.n	8009d2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009d06:	4b0d      	ldr	r3, [pc, #52]	@ (8009d3c <HAL_TIM_Base_MspInit+0x48>)
 8009d08:	699b      	ldr	r3, [r3, #24]
 8009d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8009d3c <HAL_TIM_Base_MspInit+0x48>)
 8009d0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009d10:	6193      	str	r3, [r2, #24]
 8009d12:	4b0a      	ldr	r3, [pc, #40]	@ (8009d3c <HAL_TIM_Base_MspInit+0x48>)
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8009d1e:	2200      	movs	r2, #0
 8009d20:	2100      	movs	r1, #0
 8009d22:	2019      	movs	r0, #25
 8009d24:	f000 fb13 	bl	800a34e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8009d28:	2019      	movs	r0, #25
 8009d2a:	f000 fb2c 	bl	800a386 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8009d2e:	bf00      	nop
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	40012c00 	.word	0x40012c00
 8009d3c:	40021000 	.word	0x40021000

08009d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b088      	sub	sp, #32
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d48:	f107 0310 	add.w	r3, r7, #16
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	601a      	str	r2, [r3, #0]
 8009d50:	605a      	str	r2, [r3, #4]
 8009d52:	609a      	str	r2, [r3, #8]
 8009d54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8009dcc <HAL_UART_MspInit+0x8c>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d131      	bne.n	8009dc4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009d60:	4b1b      	ldr	r3, [pc, #108]	@ (8009dd0 <HAL_UART_MspInit+0x90>)
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	4a1a      	ldr	r2, [pc, #104]	@ (8009dd0 <HAL_UART_MspInit+0x90>)
 8009d66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009d6a:	6193      	str	r3, [r2, #24]
 8009d6c:	4b18      	ldr	r3, [pc, #96]	@ (8009dd0 <HAL_UART_MspInit+0x90>)
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d74:	60fb      	str	r3, [r7, #12]
 8009d76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d78:	4b15      	ldr	r3, [pc, #84]	@ (8009dd0 <HAL_UART_MspInit+0x90>)
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	4a14      	ldr	r2, [pc, #80]	@ (8009dd0 <HAL_UART_MspInit+0x90>)
 8009d7e:	f043 0304 	orr.w	r3, r3, #4
 8009d82:	6193      	str	r3, [r2, #24]
 8009d84:	4b12      	ldr	r3, [pc, #72]	@ (8009dd0 <HAL_UART_MspInit+0x90>)
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	f003 0304 	and.w	r3, r3, #4
 8009d8c:	60bb      	str	r3, [r7, #8]
 8009d8e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009d90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d96:	2302      	movs	r3, #2
 8009d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d9e:	f107 0310 	add.w	r3, r7, #16
 8009da2:	4619      	mov	r1, r3
 8009da4:	480b      	ldr	r0, [pc, #44]	@ (8009dd4 <HAL_UART_MspInit+0x94>)
 8009da6:	f000 fb09 	bl	800a3bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009daa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009db0:	2300      	movs	r3, #0
 8009db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009db4:	2300      	movs	r3, #0
 8009db6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009db8:	f107 0310 	add.w	r3, r7, #16
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	4805      	ldr	r0, [pc, #20]	@ (8009dd4 <HAL_UART_MspInit+0x94>)
 8009dc0:	f000 fafc 	bl	800a3bc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8009dc4:	bf00      	nop
 8009dc6:	3720      	adds	r7, #32
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	40013800 	.word	0x40013800
 8009dd0:	40021000 	.word	0x40021000
 8009dd4:	40010800 	.word	0x40010800

08009dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009ddc:	bf00      	nop
 8009dde:	e7fd      	b.n	8009ddc <NMI_Handler+0x4>

08009de0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009de0:	b480      	push	{r7}
 8009de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009de4:	bf00      	nop
 8009de6:	e7fd      	b.n	8009de4 <HardFault_Handler+0x4>

08009de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009de8:	b480      	push	{r7}
 8009dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009dec:	bf00      	nop
 8009dee:	e7fd      	b.n	8009dec <MemManage_Handler+0x4>

08009df0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009df0:	b480      	push	{r7}
 8009df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009df4:	bf00      	nop
 8009df6:	e7fd      	b.n	8009df4 <BusFault_Handler+0x4>

08009df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009dfc:	bf00      	nop
 8009dfe:	e7fd      	b.n	8009dfc <UsageFault_Handler+0x4>

08009e00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009e00:	b480      	push	{r7}
 8009e02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009e04:	bf00      	nop
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bc80      	pop	{r7}
 8009e0a:	4770      	bx	lr

08009e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009e10:	bf00      	nop
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bc80      	pop	{r7}
 8009e16:	4770      	bx	lr

08009e18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009e1c:	bf00      	nop
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bc80      	pop	{r7}
 8009e22:	4770      	bx	lr

08009e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009e28:	f000 f87e 	bl	8009f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009e2c:	bf00      	nop
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009e34:	4802      	ldr	r0, [pc, #8]	@ (8009e40 <TIM1_UP_IRQHandler+0x10>)
 8009e36:	f002 fc4b 	bl	800c6d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009e3a:	bf00      	nop
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	200018ac 	.word	0x200018ac

08009e44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009e44:	b480      	push	{r7}
 8009e46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009e48:	bf00      	nop
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bc80      	pop	{r7}
 8009e4e:	4770      	bx	lr

08009e50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009e50:	480c      	ldr	r0, [pc, #48]	@ (8009e84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009e52:	490d      	ldr	r1, [pc, #52]	@ (8009e88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009e54:	4a0d      	ldr	r2, [pc, #52]	@ (8009e8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009e58:	e002      	b.n	8009e60 <LoopCopyDataInit>

08009e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009e5e:	3304      	adds	r3, #4

08009e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009e64:	d3f9      	bcc.n	8009e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009e66:	4a0a      	ldr	r2, [pc, #40]	@ (8009e90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009e68:	4c0a      	ldr	r4, [pc, #40]	@ (8009e94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009e6c:	e001      	b.n	8009e72 <LoopFillZerobss>

08009e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009e70:	3204      	adds	r2, #4

08009e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009e74:	d3fb      	bcc.n	8009e6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009e76:	f7ff ffe5 	bl	8009e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009e7a:	f003 f8ed 	bl	800d058 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009e7e:	f7ff fbe3 	bl	8009648 <main>
  bx lr
 8009e82:	4770      	bx	lr
  ldr r0, =_sdata
 8009e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009e88:	20000ce4 	.word	0x20000ce4
  ldr r2, =_sidata
 8009e8c:	0800d170 	.word	0x0800d170
  ldr r2, =_sbss
 8009e90:	20000ce8 	.word	0x20000ce8
  ldr r4, =_ebss
 8009e94:	20001940 	.word	0x20001940

08009e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009e98:	e7fe      	b.n	8009e98 <ADC1_2_IRQHandler>
	...

08009e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009ea0:	4b08      	ldr	r3, [pc, #32]	@ (8009ec4 <HAL_Init+0x28>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a07      	ldr	r2, [pc, #28]	@ (8009ec4 <HAL_Init+0x28>)
 8009ea6:	f043 0310 	orr.w	r3, r3, #16
 8009eaa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009eac:	2003      	movs	r0, #3
 8009eae:	f000 fa43 	bl	800a338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009eb2:	200f      	movs	r0, #15
 8009eb4:	f000 f808 	bl	8009ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009eb8:	f7ff fe3e 	bl	8009b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	40022000 	.word	0x40022000

08009ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009ed0:	4b12      	ldr	r3, [pc, #72]	@ (8009f1c <HAL_InitTick+0x54>)
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	4b12      	ldr	r3, [pc, #72]	@ (8009f20 <HAL_InitTick+0x58>)
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	4619      	mov	r1, r3
 8009eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f000 fa5b 	bl	800a3a2 <HAL_SYSTICK_Config>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d001      	beq.n	8009ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e00e      	b.n	8009f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b0f      	cmp	r3, #15
 8009efa:	d80a      	bhi.n	8009f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009efc:	2200      	movs	r2, #0
 8009efe:	6879      	ldr	r1, [r7, #4]
 8009f00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f04:	f000 fa23 	bl	800a34e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009f08:	4a06      	ldr	r2, [pc, #24]	@ (8009f24 <HAL_InitTick+0x5c>)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	e000      	b.n	8009f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3708      	adds	r7, #8
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	20000cd8 	.word	0x20000cd8
 8009f20:	20000ce0 	.word	0x20000ce0
 8009f24:	20000cdc 	.word	0x20000cdc

08009f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009f2c:	4b05      	ldr	r3, [pc, #20]	@ (8009f44 <HAL_IncTick+0x1c>)
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	461a      	mov	r2, r3
 8009f32:	4b05      	ldr	r3, [pc, #20]	@ (8009f48 <HAL_IncTick+0x20>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4413      	add	r3, r2
 8009f38:	4a03      	ldr	r2, [pc, #12]	@ (8009f48 <HAL_IncTick+0x20>)
 8009f3a:	6013      	str	r3, [r2, #0]
}
 8009f3c:	bf00      	nop
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bc80      	pop	{r7}
 8009f42:	4770      	bx	lr
 8009f44:	20000ce0 	.word	0x20000ce0
 8009f48:	2000193c 	.word	0x2000193c

08009f4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8009f50:	4b02      	ldr	r3, [pc, #8]	@ (8009f5c <HAL_GetTick+0x10>)
 8009f52:	681b      	ldr	r3, [r3, #0]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bc80      	pop	{r7}
 8009f5a:	4770      	bx	lr
 8009f5c:	2000193c 	.word	0x2000193c

08009f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009f68:	f7ff fff0 	bl	8009f4c <HAL_GetTick>
 8009f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f78:	d005      	beq.n	8009f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8009fa4 <HAL_Delay+0x44>)
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	4413      	add	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009f86:	bf00      	nop
 8009f88:	f7ff ffe0 	bl	8009f4c <HAL_GetTick>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d8f7      	bhi.n	8009f88 <HAL_Delay+0x28>
  {
  }
}
 8009f98:	bf00      	nop
 8009f9a:	bf00      	nop
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	20000ce0 	.word	0x20000ce0

08009fa8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d101      	bne.n	8009fba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e0ed      	b.n	800a196 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d102      	bne.n	8009fcc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7ff fde8 	bl	8009b9c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f042 0201 	orr.w	r2, r2, #1
 8009fda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009fdc:	f7ff ffb6 	bl	8009f4c <HAL_GetTick>
 8009fe0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009fe2:	e012      	b.n	800a00a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009fe4:	f7ff ffb2 	bl	8009f4c <HAL_GetTick>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	2b0a      	cmp	r3, #10
 8009ff0:	d90b      	bls.n	800a00a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2205      	movs	r2, #5
 800a002:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	e0c5      	b.n	800a196 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	f003 0301 	and.w	r3, r3, #1
 800a014:	2b00      	cmp	r3, #0
 800a016:	d0e5      	beq.n	8009fe4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f022 0202 	bic.w	r2, r2, #2
 800a026:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a028:	f7ff ff90 	bl	8009f4c <HAL_GetTick>
 800a02c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a02e:	e012      	b.n	800a056 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a030:	f7ff ff8c 	bl	8009f4c <HAL_GetTick>
 800a034:	4602      	mov	r2, r0
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	2b0a      	cmp	r3, #10
 800a03c:	d90b      	bls.n	800a056 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a042:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2205      	movs	r2, #5
 800a04e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	e09f      	b.n	800a196 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	f003 0302 	and.w	r3, r3, #2
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1e5      	bne.n	800a030 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	7e1b      	ldrb	r3, [r3, #24]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d108      	bne.n	800a07e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	e007      	b.n	800a08e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a08c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	7e5b      	ldrb	r3, [r3, #25]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d108      	bne.n	800a0a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0a4:	601a      	str	r2, [r3, #0]
 800a0a6:	e007      	b.n	800a0b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	7e9b      	ldrb	r3, [r3, #26]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d108      	bne.n	800a0d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f042 0220 	orr.w	r2, r2, #32
 800a0ce:	601a      	str	r2, [r3, #0]
 800a0d0:	e007      	b.n	800a0e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f022 0220 	bic.w	r2, r2, #32
 800a0e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	7edb      	ldrb	r3, [r3, #27]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d108      	bne.n	800a0fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f022 0210 	bic.w	r2, r2, #16
 800a0f8:	601a      	str	r2, [r3, #0]
 800a0fa:	e007      	b.n	800a10c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f042 0210 	orr.w	r2, r2, #16
 800a10a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	7f1b      	ldrb	r3, [r3, #28]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d108      	bne.n	800a126 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f042 0208 	orr.w	r2, r2, #8
 800a122:	601a      	str	r2, [r3, #0]
 800a124:	e007      	b.n	800a136 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f022 0208 	bic.w	r2, r2, #8
 800a134:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	7f5b      	ldrb	r3, [r3, #29]
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d108      	bne.n	800a150 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f042 0204 	orr.w	r2, r2, #4
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	e007      	b.n	800a160 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f022 0204 	bic.w	r2, r2, #4
 800a15e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	689a      	ldr	r2, [r3, #8]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	431a      	orrs	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	431a      	orrs	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	695b      	ldr	r3, [r3, #20]
 800a174:	ea42 0103 	orr.w	r1, r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	1e5a      	subs	r2, r3, #1
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	430a      	orrs	r2, r1
 800a184:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
	...

0800a1a0 <__NVIC_SetPriorityGrouping>:
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f003 0307 	and.w	r3, r3, #7
 800a1ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a1b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e4 <__NVIC_SetPriorityGrouping+0x44>)
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a1bc:	4013      	ands	r3, r2
 800a1be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a1c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a1cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a1d2:	4a04      	ldr	r2, [pc, #16]	@ (800a1e4 <__NVIC_SetPriorityGrouping+0x44>)
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	60d3      	str	r3, [r2, #12]
}
 800a1d8:	bf00      	nop
 800a1da:	3714      	adds	r7, #20
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bc80      	pop	{r7}
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	e000ed00 	.word	0xe000ed00

0800a1e8 <__NVIC_GetPriorityGrouping>:
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a1ec:	4b04      	ldr	r3, [pc, #16]	@ (800a200 <__NVIC_GetPriorityGrouping+0x18>)
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	0a1b      	lsrs	r3, r3, #8
 800a1f2:	f003 0307 	and.w	r3, r3, #7
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bc80      	pop	{r7}
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	e000ed00 	.word	0xe000ed00

0800a204 <__NVIC_EnableIRQ>:
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	4603      	mov	r3, r0
 800a20c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a20e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a212:	2b00      	cmp	r3, #0
 800a214:	db0b      	blt.n	800a22e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a216:	79fb      	ldrb	r3, [r7, #7]
 800a218:	f003 021f 	and.w	r2, r3, #31
 800a21c:	4906      	ldr	r1, [pc, #24]	@ (800a238 <__NVIC_EnableIRQ+0x34>)
 800a21e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a222:	095b      	lsrs	r3, r3, #5
 800a224:	2001      	movs	r0, #1
 800a226:	fa00 f202 	lsl.w	r2, r0, r2
 800a22a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a22e:	bf00      	nop
 800a230:	370c      	adds	r7, #12
 800a232:	46bd      	mov	sp, r7
 800a234:	bc80      	pop	{r7}
 800a236:	4770      	bx	lr
 800a238:	e000e100 	.word	0xe000e100

0800a23c <__NVIC_SetPriority>:
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	4603      	mov	r3, r0
 800a244:	6039      	str	r1, [r7, #0]
 800a246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	db0a      	blt.n	800a266 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	b2da      	uxtb	r2, r3
 800a254:	490c      	ldr	r1, [pc, #48]	@ (800a288 <__NVIC_SetPriority+0x4c>)
 800a256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a25a:	0112      	lsls	r2, r2, #4
 800a25c:	b2d2      	uxtb	r2, r2
 800a25e:	440b      	add	r3, r1
 800a260:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a264:	e00a      	b.n	800a27c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	b2da      	uxtb	r2, r3
 800a26a:	4908      	ldr	r1, [pc, #32]	@ (800a28c <__NVIC_SetPriority+0x50>)
 800a26c:	79fb      	ldrb	r3, [r7, #7]
 800a26e:	f003 030f 	and.w	r3, r3, #15
 800a272:	3b04      	subs	r3, #4
 800a274:	0112      	lsls	r2, r2, #4
 800a276:	b2d2      	uxtb	r2, r2
 800a278:	440b      	add	r3, r1
 800a27a:	761a      	strb	r2, [r3, #24]
}
 800a27c:	bf00      	nop
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	bc80      	pop	{r7}
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	e000e100 	.word	0xe000e100
 800a28c:	e000ed00 	.word	0xe000ed00

0800a290 <NVIC_EncodePriority>:
{
 800a290:	b480      	push	{r7}
 800a292:	b089      	sub	sp, #36	@ 0x24
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f003 0307 	and.w	r3, r3, #7
 800a2a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	f1c3 0307 	rsb	r3, r3, #7
 800a2aa:	2b04      	cmp	r3, #4
 800a2ac:	bf28      	it	cs
 800a2ae:	2304      	movcs	r3, #4
 800a2b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	3304      	adds	r3, #4
 800a2b6:	2b06      	cmp	r3, #6
 800a2b8:	d902      	bls.n	800a2c0 <NVIC_EncodePriority+0x30>
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	3b03      	subs	r3, #3
 800a2be:	e000      	b.n	800a2c2 <NVIC_EncodePriority+0x32>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ce:	43da      	mvns	r2, r3
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	401a      	ands	r2, r3
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a2d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	fa01 f303 	lsl.w	r3, r1, r3
 800a2e2:	43d9      	mvns	r1, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2e8:	4313      	orrs	r3, r2
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3724      	adds	r7, #36	@ 0x24
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bc80      	pop	{r7}
 800a2f2:	4770      	bx	lr

0800a2f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	3b01      	subs	r3, #1
 800a300:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a304:	d301      	bcc.n	800a30a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a306:	2301      	movs	r3, #1
 800a308:	e00f      	b.n	800a32a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a30a:	4a0a      	ldr	r2, [pc, #40]	@ (800a334 <SysTick_Config+0x40>)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	3b01      	subs	r3, #1
 800a310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a312:	210f      	movs	r1, #15
 800a314:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a318:	f7ff ff90 	bl	800a23c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a31c:	4b05      	ldr	r3, [pc, #20]	@ (800a334 <SysTick_Config+0x40>)
 800a31e:	2200      	movs	r2, #0
 800a320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a322:	4b04      	ldr	r3, [pc, #16]	@ (800a334 <SysTick_Config+0x40>)
 800a324:	2207      	movs	r2, #7
 800a326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	e000e010 	.word	0xe000e010

0800a338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f7ff ff2d 	bl	800a1a0 <__NVIC_SetPriorityGrouping>
}
 800a346:	bf00      	nop
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a34e:	b580      	push	{r7, lr}
 800a350:	b086      	sub	sp, #24
 800a352:	af00      	add	r7, sp, #0
 800a354:	4603      	mov	r3, r0
 800a356:	60b9      	str	r1, [r7, #8]
 800a358:	607a      	str	r2, [r7, #4]
 800a35a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a35c:	2300      	movs	r3, #0
 800a35e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a360:	f7ff ff42 	bl	800a1e8 <__NVIC_GetPriorityGrouping>
 800a364:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	68b9      	ldr	r1, [r7, #8]
 800a36a:	6978      	ldr	r0, [r7, #20]
 800a36c:	f7ff ff90 	bl	800a290 <NVIC_EncodePriority>
 800a370:	4602      	mov	r2, r0
 800a372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a376:	4611      	mov	r1, r2
 800a378:	4618      	mov	r0, r3
 800a37a:	f7ff ff5f 	bl	800a23c <__NVIC_SetPriority>
}
 800a37e:	bf00      	nop
 800a380:	3718      	adds	r7, #24
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b082      	sub	sp, #8
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	4603      	mov	r3, r0
 800a38e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a394:	4618      	mov	r0, r3
 800a396:	f7ff ff35 	bl	800a204 <__NVIC_EnableIRQ>
}
 800a39a:	bf00      	nop
 800a39c:	3708      	adds	r7, #8
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b082      	sub	sp, #8
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7ff ffa2 	bl	800a2f4 <SysTick_Config>
 800a3b0:	4603      	mov	r3, r0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
	...

0800a3bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b08b      	sub	sp, #44	@ 0x2c
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a3ce:	e179      	b.n	800a6c4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a3d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	69fa      	ldr	r2, [r7, #28]
 800a3e0:	4013      	ands	r3, r2
 800a3e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a3e4:	69ba      	ldr	r2, [r7, #24]
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	f040 8168 	bne.w	800a6be <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	4a96      	ldr	r2, [pc, #600]	@ (800a64c <HAL_GPIO_Init+0x290>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d05e      	beq.n	800a4b6 <HAL_GPIO_Init+0xfa>
 800a3f8:	4a94      	ldr	r2, [pc, #592]	@ (800a64c <HAL_GPIO_Init+0x290>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d875      	bhi.n	800a4ea <HAL_GPIO_Init+0x12e>
 800a3fe:	4a94      	ldr	r2, [pc, #592]	@ (800a650 <HAL_GPIO_Init+0x294>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d058      	beq.n	800a4b6 <HAL_GPIO_Init+0xfa>
 800a404:	4a92      	ldr	r2, [pc, #584]	@ (800a650 <HAL_GPIO_Init+0x294>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d86f      	bhi.n	800a4ea <HAL_GPIO_Init+0x12e>
 800a40a:	4a92      	ldr	r2, [pc, #584]	@ (800a654 <HAL_GPIO_Init+0x298>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d052      	beq.n	800a4b6 <HAL_GPIO_Init+0xfa>
 800a410:	4a90      	ldr	r2, [pc, #576]	@ (800a654 <HAL_GPIO_Init+0x298>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d869      	bhi.n	800a4ea <HAL_GPIO_Init+0x12e>
 800a416:	4a90      	ldr	r2, [pc, #576]	@ (800a658 <HAL_GPIO_Init+0x29c>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d04c      	beq.n	800a4b6 <HAL_GPIO_Init+0xfa>
 800a41c:	4a8e      	ldr	r2, [pc, #568]	@ (800a658 <HAL_GPIO_Init+0x29c>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d863      	bhi.n	800a4ea <HAL_GPIO_Init+0x12e>
 800a422:	4a8e      	ldr	r2, [pc, #568]	@ (800a65c <HAL_GPIO_Init+0x2a0>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d046      	beq.n	800a4b6 <HAL_GPIO_Init+0xfa>
 800a428:	4a8c      	ldr	r2, [pc, #560]	@ (800a65c <HAL_GPIO_Init+0x2a0>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d85d      	bhi.n	800a4ea <HAL_GPIO_Init+0x12e>
 800a42e:	2b12      	cmp	r3, #18
 800a430:	d82a      	bhi.n	800a488 <HAL_GPIO_Init+0xcc>
 800a432:	2b12      	cmp	r3, #18
 800a434:	d859      	bhi.n	800a4ea <HAL_GPIO_Init+0x12e>
 800a436:	a201      	add	r2, pc, #4	@ (adr r2, 800a43c <HAL_GPIO_Init+0x80>)
 800a438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a43c:	0800a4b7 	.word	0x0800a4b7
 800a440:	0800a491 	.word	0x0800a491
 800a444:	0800a4a3 	.word	0x0800a4a3
 800a448:	0800a4e5 	.word	0x0800a4e5
 800a44c:	0800a4eb 	.word	0x0800a4eb
 800a450:	0800a4eb 	.word	0x0800a4eb
 800a454:	0800a4eb 	.word	0x0800a4eb
 800a458:	0800a4eb 	.word	0x0800a4eb
 800a45c:	0800a4eb 	.word	0x0800a4eb
 800a460:	0800a4eb 	.word	0x0800a4eb
 800a464:	0800a4eb 	.word	0x0800a4eb
 800a468:	0800a4eb 	.word	0x0800a4eb
 800a46c:	0800a4eb 	.word	0x0800a4eb
 800a470:	0800a4eb 	.word	0x0800a4eb
 800a474:	0800a4eb 	.word	0x0800a4eb
 800a478:	0800a4eb 	.word	0x0800a4eb
 800a47c:	0800a4eb 	.word	0x0800a4eb
 800a480:	0800a499 	.word	0x0800a499
 800a484:	0800a4ad 	.word	0x0800a4ad
 800a488:	4a75      	ldr	r2, [pc, #468]	@ (800a660 <HAL_GPIO_Init+0x2a4>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d013      	beq.n	800a4b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a48e:	e02c      	b.n	800a4ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	623b      	str	r3, [r7, #32]
          break;
 800a496:	e029      	b.n	800a4ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	3304      	adds	r3, #4
 800a49e:	623b      	str	r3, [r7, #32]
          break;
 800a4a0:	e024      	b.n	800a4ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	3308      	adds	r3, #8
 800a4a8:	623b      	str	r3, [r7, #32]
          break;
 800a4aa:	e01f      	b.n	800a4ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	330c      	adds	r3, #12
 800a4b2:	623b      	str	r3, [r7, #32]
          break;
 800a4b4:	e01a      	b.n	800a4ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d102      	bne.n	800a4c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a4be:	2304      	movs	r3, #4
 800a4c0:	623b      	str	r3, [r7, #32]
          break;
 800a4c2:	e013      	b.n	800a4ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d105      	bne.n	800a4d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a4cc:	2308      	movs	r3, #8
 800a4ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	69fa      	ldr	r2, [r7, #28]
 800a4d4:	611a      	str	r2, [r3, #16]
          break;
 800a4d6:	e009      	b.n	800a4ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a4d8:	2308      	movs	r3, #8
 800a4da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	69fa      	ldr	r2, [r7, #28]
 800a4e0:	615a      	str	r2, [r3, #20]
          break;
 800a4e2:	e003      	b.n	800a4ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	623b      	str	r3, [r7, #32]
          break;
 800a4e8:	e000      	b.n	800a4ec <HAL_GPIO_Init+0x130>
          break;
 800a4ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	2bff      	cmp	r3, #255	@ 0xff
 800a4f0:	d801      	bhi.n	800a4f6 <HAL_GPIO_Init+0x13a>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	e001      	b.n	800a4fa <HAL_GPIO_Init+0x13e>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	3304      	adds	r3, #4
 800a4fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	2bff      	cmp	r3, #255	@ 0xff
 800a500:	d802      	bhi.n	800a508 <HAL_GPIO_Init+0x14c>
 800a502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	e002      	b.n	800a50e <HAL_GPIO_Init+0x152>
 800a508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50a:	3b08      	subs	r3, #8
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	210f      	movs	r1, #15
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	fa01 f303 	lsl.w	r3, r1, r3
 800a51c:	43db      	mvns	r3, r3
 800a51e:	401a      	ands	r2, r3
 800a520:	6a39      	ldr	r1, [r7, #32]
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	fa01 f303 	lsl.w	r3, r1, r3
 800a528:	431a      	orrs	r2, r3
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a536:	2b00      	cmp	r3, #0
 800a538:	f000 80c1 	beq.w	800a6be <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a53c:	4b49      	ldr	r3, [pc, #292]	@ (800a664 <HAL_GPIO_Init+0x2a8>)
 800a53e:	699b      	ldr	r3, [r3, #24]
 800a540:	4a48      	ldr	r2, [pc, #288]	@ (800a664 <HAL_GPIO_Init+0x2a8>)
 800a542:	f043 0301 	orr.w	r3, r3, #1
 800a546:	6193      	str	r3, [r2, #24]
 800a548:	4b46      	ldr	r3, [pc, #280]	@ (800a664 <HAL_GPIO_Init+0x2a8>)
 800a54a:	699b      	ldr	r3, [r3, #24]
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	60bb      	str	r3, [r7, #8]
 800a552:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a554:	4a44      	ldr	r2, [pc, #272]	@ (800a668 <HAL_GPIO_Init+0x2ac>)
 800a556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a558:	089b      	lsrs	r3, r3, #2
 800a55a:	3302      	adds	r3, #2
 800a55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a560:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a564:	f003 0303 	and.w	r3, r3, #3
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	220f      	movs	r2, #15
 800a56c:	fa02 f303 	lsl.w	r3, r2, r3
 800a570:	43db      	mvns	r3, r3
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	4013      	ands	r3, r2
 800a576:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a3c      	ldr	r2, [pc, #240]	@ (800a66c <HAL_GPIO_Init+0x2b0>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d01f      	beq.n	800a5c0 <HAL_GPIO_Init+0x204>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a3b      	ldr	r2, [pc, #236]	@ (800a670 <HAL_GPIO_Init+0x2b4>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d019      	beq.n	800a5bc <HAL_GPIO_Init+0x200>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a3a      	ldr	r2, [pc, #232]	@ (800a674 <HAL_GPIO_Init+0x2b8>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d013      	beq.n	800a5b8 <HAL_GPIO_Init+0x1fc>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a39      	ldr	r2, [pc, #228]	@ (800a678 <HAL_GPIO_Init+0x2bc>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d00d      	beq.n	800a5b4 <HAL_GPIO_Init+0x1f8>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a38      	ldr	r2, [pc, #224]	@ (800a67c <HAL_GPIO_Init+0x2c0>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d007      	beq.n	800a5b0 <HAL_GPIO_Init+0x1f4>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a37      	ldr	r2, [pc, #220]	@ (800a680 <HAL_GPIO_Init+0x2c4>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d101      	bne.n	800a5ac <HAL_GPIO_Init+0x1f0>
 800a5a8:	2305      	movs	r3, #5
 800a5aa:	e00a      	b.n	800a5c2 <HAL_GPIO_Init+0x206>
 800a5ac:	2306      	movs	r3, #6
 800a5ae:	e008      	b.n	800a5c2 <HAL_GPIO_Init+0x206>
 800a5b0:	2304      	movs	r3, #4
 800a5b2:	e006      	b.n	800a5c2 <HAL_GPIO_Init+0x206>
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	e004      	b.n	800a5c2 <HAL_GPIO_Init+0x206>
 800a5b8:	2302      	movs	r3, #2
 800a5ba:	e002      	b.n	800a5c2 <HAL_GPIO_Init+0x206>
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e000      	b.n	800a5c2 <HAL_GPIO_Init+0x206>
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5c4:	f002 0203 	and.w	r2, r2, #3
 800a5c8:	0092      	lsls	r2, r2, #2
 800a5ca:	4093      	lsls	r3, r2
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a5d2:	4925      	ldr	r1, [pc, #148]	@ (800a668 <HAL_GPIO_Init+0x2ac>)
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d6:	089b      	lsrs	r3, r3, #2
 800a5d8:	3302      	adds	r3, #2
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d006      	beq.n	800a5fa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a5ec:	4b25      	ldr	r3, [pc, #148]	@ (800a684 <HAL_GPIO_Init+0x2c8>)
 800a5ee:	689a      	ldr	r2, [r3, #8]
 800a5f0:	4924      	ldr	r1, [pc, #144]	@ (800a684 <HAL_GPIO_Init+0x2c8>)
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	608b      	str	r3, [r1, #8]
 800a5f8:	e006      	b.n	800a608 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a5fa:	4b22      	ldr	r3, [pc, #136]	@ (800a684 <HAL_GPIO_Init+0x2c8>)
 800a5fc:	689a      	ldr	r2, [r3, #8]
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	43db      	mvns	r3, r3
 800a602:	4920      	ldr	r1, [pc, #128]	@ (800a684 <HAL_GPIO_Init+0x2c8>)
 800a604:	4013      	ands	r3, r2
 800a606:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a610:	2b00      	cmp	r3, #0
 800a612:	d006      	beq.n	800a622 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a614:	4b1b      	ldr	r3, [pc, #108]	@ (800a684 <HAL_GPIO_Init+0x2c8>)
 800a616:	68da      	ldr	r2, [r3, #12]
 800a618:	491a      	ldr	r1, [pc, #104]	@ (800a684 <HAL_GPIO_Init+0x2c8>)
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	60cb      	str	r3, [r1, #12]
 800a620:	e006      	b.n	800a630 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a622:	4b18      	ldr	r3, [pc, #96]	@ (800a684 <HAL_GPIO_Init+0x2c8>)
 800a624:	68da      	ldr	r2, [r3, #12]
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	43db      	mvns	r3, r3
 800a62a:	4916      	ldr	r1, [pc, #88]	@ (800a684 <HAL_GPIO_Init+0x2c8>)
 800a62c:	4013      	ands	r3, r2
 800a62e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d025      	beq.n	800a688 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a63c:	4b11      	ldr	r3, [pc, #68]	@ (800a684 <HAL_GPIO_Init+0x2c8>)
 800a63e:	685a      	ldr	r2, [r3, #4]
 800a640:	4910      	ldr	r1, [pc, #64]	@ (800a684 <HAL_GPIO_Init+0x2c8>)
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	4313      	orrs	r3, r2
 800a646:	604b      	str	r3, [r1, #4]
 800a648:	e025      	b.n	800a696 <HAL_GPIO_Init+0x2da>
 800a64a:	bf00      	nop
 800a64c:	10320000 	.word	0x10320000
 800a650:	10310000 	.word	0x10310000
 800a654:	10220000 	.word	0x10220000
 800a658:	10210000 	.word	0x10210000
 800a65c:	10120000 	.word	0x10120000
 800a660:	10110000 	.word	0x10110000
 800a664:	40021000 	.word	0x40021000
 800a668:	40010000 	.word	0x40010000
 800a66c:	40010800 	.word	0x40010800
 800a670:	40010c00 	.word	0x40010c00
 800a674:	40011000 	.word	0x40011000
 800a678:	40011400 	.word	0x40011400
 800a67c:	40011800 	.word	0x40011800
 800a680:	40011c00 	.word	0x40011c00
 800a684:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a688:	4b15      	ldr	r3, [pc, #84]	@ (800a6e0 <HAL_GPIO_Init+0x324>)
 800a68a:	685a      	ldr	r2, [r3, #4]
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	43db      	mvns	r3, r3
 800a690:	4913      	ldr	r1, [pc, #76]	@ (800a6e0 <HAL_GPIO_Init+0x324>)
 800a692:	4013      	ands	r3, r2
 800a694:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d006      	beq.n	800a6b0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a6a2:	4b0f      	ldr	r3, [pc, #60]	@ (800a6e0 <HAL_GPIO_Init+0x324>)
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	490e      	ldr	r1, [pc, #56]	@ (800a6e0 <HAL_GPIO_Init+0x324>)
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	600b      	str	r3, [r1, #0]
 800a6ae:	e006      	b.n	800a6be <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a6b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a6e0 <HAL_GPIO_Init+0x324>)
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	43db      	mvns	r3, r3
 800a6b8:	4909      	ldr	r1, [pc, #36]	@ (800a6e0 <HAL_GPIO_Init+0x324>)
 800a6ba:	4013      	ands	r3, r2
 800a6bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	f47f ae7e 	bne.w	800a3d0 <HAL_GPIO_Init+0x14>
  }
}
 800a6d4:	bf00      	nop
 800a6d6:	bf00      	nop
 800a6d8:	372c      	adds	r7, #44	@ 0x2c
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bc80      	pop	{r7}
 800a6de:	4770      	bx	lr
 800a6e0:	40010400 	.word	0x40010400

0800a6e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b089      	sub	sp, #36	@ 0x24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a6f2:	e0a6      	b.n	800a842 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	4013      	ands	r3, r2
 800a700:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 8099 	beq.w	800a83c <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a70a:	4a54      	ldr	r2, [pc, #336]	@ (800a85c <HAL_GPIO_DeInit+0x178>)
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	089b      	lsrs	r3, r3, #2
 800a710:	3302      	adds	r3, #2
 800a712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a716:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	f003 0303 	and.w	r3, r3, #3
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	220f      	movs	r2, #15
 800a722:	fa02 f303 	lsl.w	r3, r2, r3
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	4013      	ands	r3, r2
 800a72a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a4c      	ldr	r2, [pc, #304]	@ (800a860 <HAL_GPIO_DeInit+0x17c>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d01f      	beq.n	800a774 <HAL_GPIO_DeInit+0x90>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4a4b      	ldr	r2, [pc, #300]	@ (800a864 <HAL_GPIO_DeInit+0x180>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d019      	beq.n	800a770 <HAL_GPIO_DeInit+0x8c>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4a4a      	ldr	r2, [pc, #296]	@ (800a868 <HAL_GPIO_DeInit+0x184>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d013      	beq.n	800a76c <HAL_GPIO_DeInit+0x88>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a49      	ldr	r2, [pc, #292]	@ (800a86c <HAL_GPIO_DeInit+0x188>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d00d      	beq.n	800a768 <HAL_GPIO_DeInit+0x84>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a48      	ldr	r2, [pc, #288]	@ (800a870 <HAL_GPIO_DeInit+0x18c>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d007      	beq.n	800a764 <HAL_GPIO_DeInit+0x80>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a47      	ldr	r2, [pc, #284]	@ (800a874 <HAL_GPIO_DeInit+0x190>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d101      	bne.n	800a760 <HAL_GPIO_DeInit+0x7c>
 800a75c:	2305      	movs	r3, #5
 800a75e:	e00a      	b.n	800a776 <HAL_GPIO_DeInit+0x92>
 800a760:	2306      	movs	r3, #6
 800a762:	e008      	b.n	800a776 <HAL_GPIO_DeInit+0x92>
 800a764:	2304      	movs	r3, #4
 800a766:	e006      	b.n	800a776 <HAL_GPIO_DeInit+0x92>
 800a768:	2303      	movs	r3, #3
 800a76a:	e004      	b.n	800a776 <HAL_GPIO_DeInit+0x92>
 800a76c:	2302      	movs	r3, #2
 800a76e:	e002      	b.n	800a776 <HAL_GPIO_DeInit+0x92>
 800a770:	2301      	movs	r3, #1
 800a772:	e000      	b.n	800a776 <HAL_GPIO_DeInit+0x92>
 800a774:	2300      	movs	r3, #0
 800a776:	69fa      	ldr	r2, [r7, #28]
 800a778:	f002 0203 	and.w	r2, r2, #3
 800a77c:	0092      	lsls	r2, r2, #2
 800a77e:	4093      	lsls	r3, r2
 800a780:	697a      	ldr	r2, [r7, #20]
 800a782:	429a      	cmp	r2, r3
 800a784:	d132      	bne.n	800a7ec <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a786:	4b3c      	ldr	r3, [pc, #240]	@ (800a878 <HAL_GPIO_DeInit+0x194>)
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	43db      	mvns	r3, r3
 800a78e:	493a      	ldr	r1, [pc, #232]	@ (800a878 <HAL_GPIO_DeInit+0x194>)
 800a790:	4013      	ands	r3, r2
 800a792:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a794:	4b38      	ldr	r3, [pc, #224]	@ (800a878 <HAL_GPIO_DeInit+0x194>)
 800a796:	685a      	ldr	r2, [r3, #4]
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	43db      	mvns	r3, r3
 800a79c:	4936      	ldr	r1, [pc, #216]	@ (800a878 <HAL_GPIO_DeInit+0x194>)
 800a79e:	4013      	ands	r3, r2
 800a7a0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a7a2:	4b35      	ldr	r3, [pc, #212]	@ (800a878 <HAL_GPIO_DeInit+0x194>)
 800a7a4:	68da      	ldr	r2, [r3, #12]
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	43db      	mvns	r3, r3
 800a7aa:	4933      	ldr	r1, [pc, #204]	@ (800a878 <HAL_GPIO_DeInit+0x194>)
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a7b0:	4b31      	ldr	r3, [pc, #196]	@ (800a878 <HAL_GPIO_DeInit+0x194>)
 800a7b2:	689a      	ldr	r2, [r3, #8]
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	43db      	mvns	r3, r3
 800a7b8:	492f      	ldr	r1, [pc, #188]	@ (800a878 <HAL_GPIO_DeInit+0x194>)
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	f003 0303 	and.w	r3, r3, #3
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	220f      	movs	r2, #15
 800a7c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7cc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a7ce:	4a23      	ldr	r2, [pc, #140]	@ (800a85c <HAL_GPIO_DeInit+0x178>)
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	089b      	lsrs	r3, r3, #2
 800a7d4:	3302      	adds	r3, #2
 800a7d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	43da      	mvns	r2, r3
 800a7de:	481f      	ldr	r0, [pc, #124]	@ (800a85c <HAL_GPIO_DeInit+0x178>)
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	089b      	lsrs	r3, r3, #2
 800a7e4:	400a      	ands	r2, r1
 800a7e6:	3302      	adds	r3, #2
 800a7e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	2bff      	cmp	r3, #255	@ 0xff
 800a7f0:	d801      	bhi.n	800a7f6 <HAL_GPIO_DeInit+0x112>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	e001      	b.n	800a7fa <HAL_GPIO_DeInit+0x116>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	2bff      	cmp	r3, #255	@ 0xff
 800a800:	d802      	bhi.n	800a808 <HAL_GPIO_DeInit+0x124>
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	e002      	b.n	800a80e <HAL_GPIO_DeInit+0x12a>
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	3b08      	subs	r3, #8
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	210f      	movs	r1, #15
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	fa01 f303 	lsl.w	r3, r1, r3
 800a81c:	43db      	mvns	r3, r3
 800a81e:	401a      	ands	r2, r3
 800a820:	2104      	movs	r1, #4
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	fa01 f303 	lsl.w	r3, r1, r3
 800a828:	431a      	orrs	r2, r3
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	68da      	ldr	r2, [r3, #12]
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	43db      	mvns	r3, r3
 800a836:	401a      	ands	r2, r3
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	3301      	adds	r3, #1
 800a840:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	fa22 f303 	lsr.w	r3, r2, r3
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f47f af52 	bne.w	800a6f4 <HAL_GPIO_DeInit+0x10>
  }
}
 800a850:	bf00      	nop
 800a852:	bf00      	nop
 800a854:	3724      	adds	r7, #36	@ 0x24
 800a856:	46bd      	mov	sp, r7
 800a858:	bc80      	pop	{r7}
 800a85a:	4770      	bx	lr
 800a85c:	40010000 	.word	0x40010000
 800a860:	40010800 	.word	0x40010800
 800a864:	40010c00 	.word	0x40010c00
 800a868:	40011000 	.word	0x40011000
 800a86c:	40011400 	.word	0x40011400
 800a870:	40011800 	.word	0x40011800
 800a874:	40011c00 	.word	0x40011c00
 800a878:	40010400 	.word	0x40010400

0800a87c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	460b      	mov	r3, r1
 800a886:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	689a      	ldr	r2, [r3, #8]
 800a88c:	887b      	ldrh	r3, [r7, #2]
 800a88e:	4013      	ands	r3, r2
 800a890:	2b00      	cmp	r3, #0
 800a892:	d002      	beq.n	800a89a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a894:	2301      	movs	r3, #1
 800a896:	73fb      	strb	r3, [r7, #15]
 800a898:	e001      	b.n	800a89e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a89a:	2300      	movs	r3, #0
 800a89c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a89e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3714      	adds	r7, #20
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bc80      	pop	{r7}
 800a8a8:	4770      	bx	lr

0800a8aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a8aa:	b480      	push	{r7}
 800a8ac:	b083      	sub	sp, #12
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	807b      	strh	r3, [r7, #2]
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a8ba:	787b      	ldrb	r3, [r7, #1]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d003      	beq.n	800a8c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a8c0:	887a      	ldrh	r2, [r7, #2]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a8c6:	e003      	b.n	800a8d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a8c8:	887b      	ldrh	r3, [r7, #2]
 800a8ca:	041a      	lsls	r2, r3, #16
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	611a      	str	r2, [r3, #16]
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bc80      	pop	{r7}
 800a8d8:	4770      	bx	lr

0800a8da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b085      	sub	sp, #20
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a8ec:	887a      	ldrh	r2, [r7, #2]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	041a      	lsls	r2, r3, #16
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	43d9      	mvns	r1, r3
 800a8f8:	887b      	ldrh	r3, [r7, #2]
 800a8fa:	400b      	ands	r3, r1
 800a8fc:	431a      	orrs	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	611a      	str	r2, [r3, #16]
}
 800a902:	bf00      	nop
 800a904:	3714      	adds	r7, #20
 800a906:	46bd      	mov	sp, r7
 800a908:	bc80      	pop	{r7}
 800a90a:	4770      	bx	lr

0800a90c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d101      	bne.n	800a91e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	e12b      	b.n	800ab76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a924:	b2db      	uxtb	r3, r3
 800a926:	2b00      	cmp	r3, #0
 800a928:	d106      	bne.n	800a938 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f7ff f97e 	bl	8009c34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2224      	movs	r2, #36	@ 0x24
 800a93c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f022 0201 	bic.w	r2, r2, #1
 800a94e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a95e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a96e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a970:	f001 fdb8 	bl	800c4e4 <HAL_RCC_GetPCLK1Freq>
 800a974:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	4a81      	ldr	r2, [pc, #516]	@ (800ab80 <HAL_I2C_Init+0x274>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d807      	bhi.n	800a990 <HAL_I2C_Init+0x84>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	4a80      	ldr	r2, [pc, #512]	@ (800ab84 <HAL_I2C_Init+0x278>)
 800a984:	4293      	cmp	r3, r2
 800a986:	bf94      	ite	ls
 800a988:	2301      	movls	r3, #1
 800a98a:	2300      	movhi	r3, #0
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	e006      	b.n	800a99e <HAL_I2C_Init+0x92>
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	4a7d      	ldr	r2, [pc, #500]	@ (800ab88 <HAL_I2C_Init+0x27c>)
 800a994:	4293      	cmp	r3, r2
 800a996:	bf94      	ite	ls
 800a998:	2301      	movls	r3, #1
 800a99a:	2300      	movhi	r3, #0
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d001      	beq.n	800a9a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e0e7      	b.n	800ab76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	4a78      	ldr	r2, [pc, #480]	@ (800ab8c <HAL_I2C_Init+0x280>)
 800a9aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ae:	0c9b      	lsrs	r3, r3, #18
 800a9b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	430a      	orrs	r2, r1
 800a9c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	6a1b      	ldr	r3, [r3, #32]
 800a9cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	4a6a      	ldr	r2, [pc, #424]	@ (800ab80 <HAL_I2C_Init+0x274>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d802      	bhi.n	800a9e0 <HAL_I2C_Init+0xd4>
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	e009      	b.n	800a9f4 <HAL_I2C_Init+0xe8>
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a9e6:	fb02 f303 	mul.w	r3, r2, r3
 800a9ea:	4a69      	ldr	r2, [pc, #420]	@ (800ab90 <HAL_I2C_Init+0x284>)
 800a9ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a9f0:	099b      	lsrs	r3, r3, #6
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	6812      	ldr	r2, [r2, #0]
 800a9f8:	430b      	orrs	r3, r1
 800a9fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	69db      	ldr	r3, [r3, #28]
 800aa02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800aa06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	495c      	ldr	r1, [pc, #368]	@ (800ab80 <HAL_I2C_Init+0x274>)
 800aa10:	428b      	cmp	r3, r1
 800aa12:	d819      	bhi.n	800aa48 <HAL_I2C_Init+0x13c>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	1e59      	subs	r1, r3, #1
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	005b      	lsls	r3, r3, #1
 800aa1e:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa22:	1c59      	adds	r1, r3, #1
 800aa24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800aa28:	400b      	ands	r3, r1
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00a      	beq.n	800aa44 <HAL_I2C_Init+0x138>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	1e59      	subs	r1, r3, #1
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	005b      	lsls	r3, r3, #1
 800aa38:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa42:	e051      	b.n	800aae8 <HAL_I2C_Init+0x1dc>
 800aa44:	2304      	movs	r3, #4
 800aa46:	e04f      	b.n	800aae8 <HAL_I2C_Init+0x1dc>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d111      	bne.n	800aa74 <HAL_I2C_Init+0x168>
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	1e58      	subs	r0, r3, #1
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6859      	ldr	r1, [r3, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	005b      	lsls	r3, r3, #1
 800aa5c:	440b      	add	r3, r1
 800aa5e:	fbb0 f3f3 	udiv	r3, r0, r3
 800aa62:	3301      	adds	r3, #1
 800aa64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	bf0c      	ite	eq
 800aa6c:	2301      	moveq	r3, #1
 800aa6e:	2300      	movne	r3, #0
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	e012      	b.n	800aa9a <HAL_I2C_Init+0x18e>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	1e58      	subs	r0, r3, #1
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6859      	ldr	r1, [r3, #4]
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	440b      	add	r3, r1
 800aa82:	0099      	lsls	r1, r3, #2
 800aa84:	440b      	add	r3, r1
 800aa86:	fbb0 f3f3 	udiv	r3, r0, r3
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	bf0c      	ite	eq
 800aa94:	2301      	moveq	r3, #1
 800aa96:	2300      	movne	r3, #0
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d001      	beq.n	800aaa2 <HAL_I2C_Init+0x196>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e022      	b.n	800aae8 <HAL_I2C_Init+0x1dc>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10e      	bne.n	800aac8 <HAL_I2C_Init+0x1bc>
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	1e58      	subs	r0, r3, #1
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6859      	ldr	r1, [r3, #4]
 800aab2:	460b      	mov	r3, r1
 800aab4:	005b      	lsls	r3, r3, #1
 800aab6:	440b      	add	r3, r1
 800aab8:	fbb0 f3f3 	udiv	r3, r0, r3
 800aabc:	3301      	adds	r3, #1
 800aabe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aac2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aac6:	e00f      	b.n	800aae8 <HAL_I2C_Init+0x1dc>
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	1e58      	subs	r0, r3, #1
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6859      	ldr	r1, [r3, #4]
 800aad0:	460b      	mov	r3, r1
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	440b      	add	r3, r1
 800aad6:	0099      	lsls	r1, r3, #2
 800aad8:	440b      	add	r3, r1
 800aada:	fbb0 f3f3 	udiv	r3, r0, r3
 800aade:	3301      	adds	r3, #1
 800aae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aae4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aae8:	6879      	ldr	r1, [r7, #4]
 800aaea:	6809      	ldr	r1, [r1, #0]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	69da      	ldr	r2, [r3, #28]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6a1b      	ldr	r3, [r3, #32]
 800ab02:	431a      	orrs	r2, r3
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	430a      	orrs	r2, r1
 800ab0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800ab16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	6911      	ldr	r1, [r2, #16]
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	68d2      	ldr	r2, [r2, #12]
 800ab22:	4311      	orrs	r1, r2
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	6812      	ldr	r2, [r2, #0]
 800ab28:	430b      	orrs	r3, r1
 800ab2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	695a      	ldr	r2, [r3, #20]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	699b      	ldr	r3, [r3, #24]
 800ab3e:	431a      	orrs	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	430a      	orrs	r2, r1
 800ab46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f042 0201 	orr.w	r2, r2, #1
 800ab56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2220      	movs	r2, #32
 800ab62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	000186a0 	.word	0x000186a0
 800ab84:	001e847f 	.word	0x001e847f
 800ab88:	003d08ff 	.word	0x003d08ff
 800ab8c:	431bde83 	.word	0x431bde83
 800ab90:	10624dd3 	.word	0x10624dd3

0800ab94 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d101      	bne.n	800aba6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e021      	b.n	800abea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2224      	movs	r2, #36	@ 0x24
 800abaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f022 0201 	bic.w	r2, r2, #1
 800abbc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7ff f876 	bl	8009cb0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3708      	adds	r7, #8
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
	...

0800abf4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b088      	sub	sp, #32
 800abf8:	af02      	add	r7, sp, #8
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	607a      	str	r2, [r7, #4]
 800abfe:	461a      	mov	r2, r3
 800ac00:	460b      	mov	r3, r1
 800ac02:	817b      	strh	r3, [r7, #10]
 800ac04:	4613      	mov	r3, r2
 800ac06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ac08:	f7ff f9a0 	bl	8009f4c <HAL_GetTick>
 800ac0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	2b20      	cmp	r3, #32
 800ac18:	f040 80e0 	bne.w	800addc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	2319      	movs	r3, #25
 800ac22:	2201      	movs	r2, #1
 800ac24:	4970      	ldr	r1, [pc, #448]	@ (800ade8 <HAL_I2C_Master_Transmit+0x1f4>)
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f000 fe5c 	bl	800b8e4 <I2C_WaitOnFlagUntilTimeout>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800ac32:	2302      	movs	r3, #2
 800ac34:	e0d3      	b.n	800adde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d101      	bne.n	800ac44 <HAL_I2C_Master_Transmit+0x50>
 800ac40:	2302      	movs	r3, #2
 800ac42:	e0cc      	b.n	800adde <HAL_I2C_Master_Transmit+0x1ea>
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 0301 	and.w	r3, r3, #1
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d007      	beq.n	800ac6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f042 0201 	orr.w	r2, r2, #1
 800ac68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ac78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2221      	movs	r2, #33	@ 0x21
 800ac7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2210      	movs	r2, #16
 800ac86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	893a      	ldrh	r2, [r7, #8]
 800ac9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	4a50      	ldr	r2, [pc, #320]	@ (800adec <HAL_I2C_Master_Transmit+0x1f8>)
 800acaa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800acac:	8979      	ldrh	r1, [r7, #10]
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	6a3a      	ldr	r2, [r7, #32]
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 fc16 	bl	800b4e4 <I2C_MasterRequestWrite>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d001      	beq.n	800acc2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800acbe:	2301      	movs	r3, #1
 800acc0:	e08d      	b.n	800adde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800acc2:	2300      	movs	r3, #0
 800acc4:	613b      	str	r3, [r7, #16]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	695b      	ldr	r3, [r3, #20]
 800accc:	613b      	str	r3, [r7, #16]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	699b      	ldr	r3, [r3, #24]
 800acd4:	613b      	str	r3, [r7, #16]
 800acd6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800acd8:	e066      	b.n	800ada8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800acda:	697a      	ldr	r2, [r7, #20]
 800acdc:	6a39      	ldr	r1, [r7, #32]
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f000 ff1a 	bl	800bb18 <I2C_WaitOnTXEFlagUntilTimeout>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00d      	beq.n	800ad06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acee:	2b04      	cmp	r3, #4
 800acf0:	d107      	bne.n	800ad02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	e06b      	b.n	800adde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad0a:	781a      	ldrb	r2, [r3, #0]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad16:	1c5a      	adds	r2, r3, #1
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	3b01      	subs	r3, #1
 800ad24:	b29a      	uxth	r2, r3
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	b29a      	uxth	r2, r3
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	695b      	ldr	r3, [r3, #20]
 800ad3c:	f003 0304 	and.w	r3, r3, #4
 800ad40:	2b04      	cmp	r3, #4
 800ad42:	d11b      	bne.n	800ad7c <HAL_I2C_Master_Transmit+0x188>
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d017      	beq.n	800ad7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad50:	781a      	ldrb	r2, [r3, #0]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad5c:	1c5a      	adds	r2, r3, #1
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad74:	3b01      	subs	r3, #1
 800ad76:	b29a      	uxth	r2, r3
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad7c:	697a      	ldr	r2, [r7, #20]
 800ad7e:	6a39      	ldr	r1, [r7, #32]
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f000 ff11 	bl	800bba8 <I2C_WaitOnBTFFlagUntilTimeout>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00d      	beq.n	800ada8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad90:	2b04      	cmp	r3, #4
 800ad92:	d107      	bne.n	800ada4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ada2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e01a      	b.n	800adde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800adac:	2b00      	cmp	r3, #0
 800adae:	d194      	bne.n	800acda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800adbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2220      	movs	r2, #32
 800adc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2200      	movs	r2, #0
 800add4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800add8:	2300      	movs	r3, #0
 800adda:	e000      	b.n	800adde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800addc:	2302      	movs	r3, #2
  }
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3718      	adds	r7, #24
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	00100002 	.word	0x00100002
 800adec:	ffff0000 	.word	0xffff0000

0800adf0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b088      	sub	sp, #32
 800adf4:	af02      	add	r7, sp, #8
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	4608      	mov	r0, r1
 800adfa:	4611      	mov	r1, r2
 800adfc:	461a      	mov	r2, r3
 800adfe:	4603      	mov	r3, r0
 800ae00:	817b      	strh	r3, [r7, #10]
 800ae02:	460b      	mov	r3, r1
 800ae04:	813b      	strh	r3, [r7, #8]
 800ae06:	4613      	mov	r3, r2
 800ae08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ae0a:	f7ff f89f 	bl	8009f4c <HAL_GetTick>
 800ae0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	2b20      	cmp	r3, #32
 800ae1a:	f040 80d9 	bne.w	800afd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	2319      	movs	r3, #25
 800ae24:	2201      	movs	r2, #1
 800ae26:	496d      	ldr	r1, [pc, #436]	@ (800afdc <HAL_I2C_Mem_Write+0x1ec>)
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f000 fd5b 	bl	800b8e4 <I2C_WaitOnFlagUntilTimeout>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d001      	beq.n	800ae38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ae34:	2302      	movs	r3, #2
 800ae36:	e0cc      	b.n	800afd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d101      	bne.n	800ae46 <HAL_I2C_Mem_Write+0x56>
 800ae42:	2302      	movs	r3, #2
 800ae44:	e0c5      	b.n	800afd2 <HAL_I2C_Mem_Write+0x1e2>
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 0301 	and.w	r3, r3, #1
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d007      	beq.n	800ae6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f042 0201 	orr.w	r2, r2, #1
 800ae6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ae7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2221      	movs	r2, #33	@ 0x21
 800ae80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2240      	movs	r2, #64	@ 0x40
 800ae88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6a3a      	ldr	r2, [r7, #32]
 800ae96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ae9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aea2:	b29a      	uxth	r2, r3
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	4a4d      	ldr	r2, [pc, #308]	@ (800afe0 <HAL_I2C_Mem_Write+0x1f0>)
 800aeac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aeae:	88f8      	ldrh	r0, [r7, #6]
 800aeb0:	893a      	ldrh	r2, [r7, #8]
 800aeb2:	8979      	ldrh	r1, [r7, #10]
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	9301      	str	r3, [sp, #4]
 800aeb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	4603      	mov	r3, r0
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f000 fb92 	bl	800b5e8 <I2C_RequestMemoryWrite>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d052      	beq.n	800af70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800aeca:	2301      	movs	r3, #1
 800aecc:	e081      	b.n	800afd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	f000 fe20 	bl	800bb18 <I2C_WaitOnTXEFlagUntilTimeout>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d00d      	beq.n	800aefa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aee2:	2b04      	cmp	r3, #4
 800aee4:	d107      	bne.n	800aef6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aef4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	e06b      	b.n	800afd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aefe:	781a      	ldrb	r2, [r3, #0]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af0a:	1c5a      	adds	r2, r3, #1
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af14:	3b01      	subs	r3, #1
 800af16:	b29a      	uxth	r2, r3
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af20:	b29b      	uxth	r3, r3
 800af22:	3b01      	subs	r3, #1
 800af24:	b29a      	uxth	r2, r3
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	f003 0304 	and.w	r3, r3, #4
 800af34:	2b04      	cmp	r3, #4
 800af36:	d11b      	bne.n	800af70 <HAL_I2C_Mem_Write+0x180>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d017      	beq.n	800af70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af44:	781a      	ldrb	r2, [r3, #0]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af50:	1c5a      	adds	r2, r3, #1
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af5a:	3b01      	subs	r3, #1
 800af5c:	b29a      	uxth	r2, r3
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af66:	b29b      	uxth	r3, r3
 800af68:	3b01      	subs	r3, #1
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1aa      	bne.n	800aece <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	f000 fe13 	bl	800bba8 <I2C_WaitOnBTFFlagUntilTimeout>
 800af82:	4603      	mov	r3, r0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d00d      	beq.n	800afa4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af8c:	2b04      	cmp	r3, #4
 800af8e:	d107      	bne.n	800afa0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	e016      	b.n	800afd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2220      	movs	r2, #32
 800afb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	e000      	b.n	800afd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800afd0:	2302      	movs	r3, #2
  }
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	00100002 	.word	0x00100002
 800afe0:	ffff0000 	.word	0xffff0000

0800afe4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b08c      	sub	sp, #48	@ 0x30
 800afe8:	af02      	add	r7, sp, #8
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	4608      	mov	r0, r1
 800afee:	4611      	mov	r1, r2
 800aff0:	461a      	mov	r2, r3
 800aff2:	4603      	mov	r3, r0
 800aff4:	817b      	strh	r3, [r7, #10]
 800aff6:	460b      	mov	r3, r1
 800aff8:	813b      	strh	r3, [r7, #8]
 800affa:	4613      	mov	r3, r2
 800affc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800affe:	2300      	movs	r3, #0
 800b000:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b002:	f7fe ffa3 	bl	8009f4c <HAL_GetTick>
 800b006:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b20      	cmp	r3, #32
 800b012:	f040 8244 	bne.w	800b49e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b018:	9300      	str	r3, [sp, #0]
 800b01a:	2319      	movs	r3, #25
 800b01c:	2201      	movs	r2, #1
 800b01e:	4982      	ldr	r1, [pc, #520]	@ (800b228 <HAL_I2C_Mem_Read+0x244>)
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f000 fc5f 	bl	800b8e4 <I2C_WaitOnFlagUntilTimeout>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800b02c:	2302      	movs	r3, #2
 800b02e:	e237      	b.n	800b4a0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b036:	2b01      	cmp	r3, #1
 800b038:	d101      	bne.n	800b03e <HAL_I2C_Mem_Read+0x5a>
 800b03a:	2302      	movs	r3, #2
 800b03c:	e230      	b.n	800b4a0 <HAL_I2C_Mem_Read+0x4bc>
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2201      	movs	r2, #1
 800b042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f003 0301 	and.w	r3, r3, #1
 800b050:	2b01      	cmp	r3, #1
 800b052:	d007      	beq.n	800b064 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f042 0201 	orr.w	r2, r2, #1
 800b062:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b072:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2222      	movs	r2, #34	@ 0x22
 800b078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2240      	movs	r2, #64	@ 0x40
 800b080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2200      	movs	r2, #0
 800b088:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b08e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800b094:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b09a:	b29a      	uxth	r2, r3
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	4a62      	ldr	r2, [pc, #392]	@ (800b22c <HAL_I2C_Mem_Read+0x248>)
 800b0a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b0a6:	88f8      	ldrh	r0, [r7, #6]
 800b0a8:	893a      	ldrh	r2, [r7, #8]
 800b0aa:	8979      	ldrh	r1, [r7, #10]
 800b0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ae:	9301      	str	r3, [sp, #4]
 800b0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	f000 fb2c 	bl	800b714 <I2C_RequestMemoryRead>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d001      	beq.n	800b0c6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e1ec      	b.n	800b4a0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d113      	bne.n	800b0f6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	61fb      	str	r3, [r7, #28]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	695b      	ldr	r3, [r3, #20]
 800b0d8:	61fb      	str	r3, [r7, #28]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	699b      	ldr	r3, [r3, #24]
 800b0e0:	61fb      	str	r3, [r7, #28]
 800b0e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0f2:	601a      	str	r2, [r3, #0]
 800b0f4:	e1c0      	b.n	800b478 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d11e      	bne.n	800b13c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b10c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b10e:	b672      	cpsid	i
}
 800b110:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b112:	2300      	movs	r3, #0
 800b114:	61bb      	str	r3, [r7, #24]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	695b      	ldr	r3, [r3, #20]
 800b11c:	61bb      	str	r3, [r7, #24]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	699b      	ldr	r3, [r3, #24]
 800b124:	61bb      	str	r3, [r7, #24]
 800b126:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b136:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b138:	b662      	cpsie	i
}
 800b13a:	e035      	b.n	800b1a8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b140:	2b02      	cmp	r3, #2
 800b142:	d11e      	bne.n	800b182 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b152:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b154:	b672      	cpsid	i
}
 800b156:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b158:	2300      	movs	r3, #0
 800b15a:	617b      	str	r3, [r7, #20]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	695b      	ldr	r3, [r3, #20]
 800b162:	617b      	str	r3, [r7, #20]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	699b      	ldr	r3, [r3, #24]
 800b16a:	617b      	str	r3, [r7, #20]
 800b16c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b17c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b17e:	b662      	cpsie	i
}
 800b180:	e012      	b.n	800b1a8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b190:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b192:	2300      	movs	r3, #0
 800b194:	613b      	str	r3, [r7, #16]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	695b      	ldr	r3, [r3, #20]
 800b19c:	613b      	str	r3, [r7, #16]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	699b      	ldr	r3, [r3, #24]
 800b1a4:	613b      	str	r3, [r7, #16]
 800b1a6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800b1a8:	e166      	b.n	800b478 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1ae:	2b03      	cmp	r3, #3
 800b1b0:	f200 811f 	bhi.w	800b3f2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d123      	bne.n	800b204 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b1bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 fd39 	bl	800bc38 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e167      	b.n	800b4a0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	691a      	ldr	r2, [r3, #16]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1da:	b2d2      	uxtb	r2, r2
 800b1dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1e2:	1c5a      	adds	r2, r3, #1
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1ec:	3b01      	subs	r3, #1
 800b1ee:	b29a      	uxth	r2, r3
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b202:	e139      	b.n	800b478 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b208:	2b02      	cmp	r3, #2
 800b20a:	d152      	bne.n	800b2b2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20e:	9300      	str	r3, [sp, #0]
 800b210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b212:	2200      	movs	r2, #0
 800b214:	4906      	ldr	r1, [pc, #24]	@ (800b230 <HAL_I2C_Mem_Read+0x24c>)
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	f000 fb64 	bl	800b8e4 <I2C_WaitOnFlagUntilTimeout>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d008      	beq.n	800b234 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800b222:	2301      	movs	r3, #1
 800b224:	e13c      	b.n	800b4a0 <HAL_I2C_Mem_Read+0x4bc>
 800b226:	bf00      	nop
 800b228:	00100002 	.word	0x00100002
 800b22c:	ffff0000 	.word	0xffff0000
 800b230:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800b234:	b672      	cpsid	i
}
 800b236:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	691a      	ldr	r2, [r3, #16]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b252:	b2d2      	uxtb	r2, r2
 800b254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b25a:	1c5a      	adds	r2, r3, #1
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b264:	3b01      	subs	r3, #1
 800b266:	b29a      	uxth	r2, r3
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b270:	b29b      	uxth	r3, r3
 800b272:	3b01      	subs	r3, #1
 800b274:	b29a      	uxth	r2, r3
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b27a:	b662      	cpsie	i
}
 800b27c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	691a      	ldr	r2, [r3, #16]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b288:	b2d2      	uxtb	r2, r2
 800b28a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b290:	1c5a      	adds	r2, r3, #1
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b29a:	3b01      	subs	r3, #1
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b2b0:	e0e2      	b.n	800b478 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	497b      	ldr	r1, [pc, #492]	@ (800b4a8 <HAL_I2C_Mem_Read+0x4c4>)
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f000 fb11 	bl	800b8e4 <I2C_WaitOnFlagUntilTimeout>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d001      	beq.n	800b2cc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e0e9      	b.n	800b4a0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b2da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2dc:	b672      	cpsid	i
}
 800b2de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	691a      	ldr	r2, [r3, #16]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ea:	b2d2      	uxtb	r2, r2
 800b2ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2f2:	1c5a      	adds	r2, r3, #1
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	b29a      	uxth	r2, r3
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b308:	b29b      	uxth	r3, r3
 800b30a:	3b01      	subs	r3, #1
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b312:	4b66      	ldr	r3, [pc, #408]	@ (800b4ac <HAL_I2C_Mem_Read+0x4c8>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	08db      	lsrs	r3, r3, #3
 800b318:	4a65      	ldr	r2, [pc, #404]	@ (800b4b0 <HAL_I2C_Mem_Read+0x4cc>)
 800b31a:	fba2 2303 	umull	r2, r3, r2, r3
 800b31e:	0a1a      	lsrs	r2, r3, #8
 800b320:	4613      	mov	r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4413      	add	r3, r2
 800b326:	00da      	lsls	r2, r3, #3
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800b32c:	6a3b      	ldr	r3, [r7, #32]
 800b32e:	3b01      	subs	r3, #1
 800b330:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800b332:	6a3b      	ldr	r3, [r7, #32]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d118      	bne.n	800b36a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2200      	movs	r2, #0
 800b33c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2220      	movs	r2, #32
 800b342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b352:	f043 0220 	orr.w	r2, r3, #32
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800b35a:	b662      	cpsie	i
}
 800b35c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2200      	movs	r2, #0
 800b362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e09a      	b.n	800b4a0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	695b      	ldr	r3, [r3, #20]
 800b370:	f003 0304 	and.w	r3, r3, #4
 800b374:	2b04      	cmp	r3, #4
 800b376:	d1d9      	bne.n	800b32c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	691a      	ldr	r2, [r3, #16]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b392:	b2d2      	uxtb	r2, r2
 800b394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b3ba:	b662      	cpsie	i
}
 800b3bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	691a      	ldr	r2, [r3, #16]
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3c8:	b2d2      	uxtb	r2, r2
 800b3ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d0:	1c5a      	adds	r2, r3, #1
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b3f0:	e042      	b.n	800b478 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b3f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b3f6:	68f8      	ldr	r0, [r7, #12]
 800b3f8:	f000 fc1e 	bl	800bc38 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800b402:	2301      	movs	r3, #1
 800b404:	e04c      	b.n	800b4a0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	691a      	ldr	r2, [r3, #16]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b410:	b2d2      	uxtb	r2, r2
 800b412:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b418:	1c5a      	adds	r2, r3, #1
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b422:	3b01      	subs	r3, #1
 800b424:	b29a      	uxth	r2, r3
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b42e:	b29b      	uxth	r3, r3
 800b430:	3b01      	subs	r3, #1
 800b432:	b29a      	uxth	r2, r3
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	695b      	ldr	r3, [r3, #20]
 800b43e:	f003 0304 	and.w	r3, r3, #4
 800b442:	2b04      	cmp	r3, #4
 800b444:	d118      	bne.n	800b478 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	691a      	ldr	r2, [r3, #16]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b450:	b2d2      	uxtb	r2, r2
 800b452:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b458:	1c5a      	adds	r2, r3, #1
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b462:	3b01      	subs	r3, #1
 800b464:	b29a      	uxth	r2, r3
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b46e:	b29b      	uxth	r3, r3
 800b470:	3b01      	subs	r3, #1
 800b472:	b29a      	uxth	r2, r3
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f47f ae94 	bne.w	800b1aa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2220      	movs	r2, #32
 800b486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2200      	movs	r2, #0
 800b496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b49a:	2300      	movs	r3, #0
 800b49c:	e000      	b.n	800b4a0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800b49e:	2302      	movs	r3, #2
  }
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3728      	adds	r7, #40	@ 0x28
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	00010004 	.word	0x00010004
 800b4ac:	20000cd8 	.word	0x20000cd8
 800b4b0:	14f8b589 	.word	0x14f8b589

0800b4b4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4c2:	b2db      	uxtb	r3, r3
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	370c      	adds	r7, #12
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bc80      	pop	{r7}
 800b4cc:	4770      	bx	lr

0800b4ce <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b4ce:	b480      	push	{r7}
 800b4d0:	b083      	sub	sp, #12
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bc80      	pop	{r7}
 800b4e2:	4770      	bx	lr

0800b4e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b088      	sub	sp, #32
 800b4e8:	af02      	add	r7, sp, #8
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	607a      	str	r2, [r7, #4]
 800b4ee:	603b      	str	r3, [r7, #0]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	2b08      	cmp	r3, #8
 800b4fe:	d006      	beq.n	800b50e <I2C_MasterRequestWrite+0x2a>
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	2b01      	cmp	r3, #1
 800b504:	d003      	beq.n	800b50e <I2C_MasterRequestWrite+0x2a>
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b50c:	d108      	bne.n	800b520 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b51c:	601a      	str	r2, [r3, #0]
 800b51e:	e00b      	b.n	800b538 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b524:	2b12      	cmp	r3, #18
 800b526:	d107      	bne.n	800b538 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b536:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f000 f9cd 	bl	800b8e4 <I2C_WaitOnFlagUntilTimeout>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00d      	beq.n	800b56c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b55a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b55e:	d103      	bne.n	800b568 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b566:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b568:	2303      	movs	r3, #3
 800b56a:	e035      	b.n	800b5d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	691b      	ldr	r3, [r3, #16]
 800b570:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b574:	d108      	bne.n	800b588 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b576:	897b      	ldrh	r3, [r7, #10]
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	461a      	mov	r2, r3
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b584:	611a      	str	r2, [r3, #16]
 800b586:	e01b      	b.n	800b5c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b588:	897b      	ldrh	r3, [r7, #10]
 800b58a:	11db      	asrs	r3, r3, #7
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	f003 0306 	and.w	r3, r3, #6
 800b592:	b2db      	uxtb	r3, r3
 800b594:	f063 030f 	orn	r3, r3, #15
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	490e      	ldr	r1, [pc, #56]	@ (800b5e0 <I2C_MasterRequestWrite+0xfc>)
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f000 fa16 	bl	800b9d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d001      	beq.n	800b5b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e010      	b.n	800b5d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b5b6:	897b      	ldrh	r3, [r7, #10]
 800b5b8:	b2da      	uxtb	r2, r3
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	4907      	ldr	r1, [pc, #28]	@ (800b5e4 <I2C_MasterRequestWrite+0x100>)
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f000 fa06 	bl	800b9d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e000      	b.n	800b5d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3718      	adds	r7, #24
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	00010008 	.word	0x00010008
 800b5e4:	00010002 	.word	0x00010002

0800b5e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b088      	sub	sp, #32
 800b5ec:	af02      	add	r7, sp, #8
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	4608      	mov	r0, r1
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	817b      	strh	r3, [r7, #10]
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	813b      	strh	r3, [r7, #8]
 800b5fe:	4613      	mov	r3, r2
 800b600:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b610:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b614:	9300      	str	r3, [sp, #0]
 800b616:	6a3b      	ldr	r3, [r7, #32]
 800b618:	2200      	movs	r2, #0
 800b61a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f000 f960 	bl	800b8e4 <I2C_WaitOnFlagUntilTimeout>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00d      	beq.n	800b646 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b638:	d103      	bne.n	800b642 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b640:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b642:	2303      	movs	r3, #3
 800b644:	e05f      	b.n	800b706 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b646:	897b      	ldrh	r3, [r7, #10]
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	461a      	mov	r2, r3
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b654:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b658:	6a3a      	ldr	r2, [r7, #32]
 800b65a:	492d      	ldr	r1, [pc, #180]	@ (800b710 <I2C_RequestMemoryWrite+0x128>)
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f000 f9bb 	bl	800b9d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d001      	beq.n	800b66c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b668:	2301      	movs	r3, #1
 800b66a:	e04c      	b.n	800b706 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b66c:	2300      	movs	r3, #0
 800b66e:	617b      	str	r3, [r7, #20]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	695b      	ldr	r3, [r3, #20]
 800b676:	617b      	str	r3, [r7, #20]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	699b      	ldr	r3, [r3, #24]
 800b67e:	617b      	str	r3, [r7, #20]
 800b680:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b684:	6a39      	ldr	r1, [r7, #32]
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f000 fa46 	bl	800bb18 <I2C_WaitOnTXEFlagUntilTimeout>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00d      	beq.n	800b6ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b696:	2b04      	cmp	r3, #4
 800b698:	d107      	bne.n	800b6aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b6a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e02b      	b.n	800b706 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b6ae:	88fb      	ldrh	r3, [r7, #6]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d105      	bne.n	800b6c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b6b4:	893b      	ldrh	r3, [r7, #8]
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	611a      	str	r2, [r3, #16]
 800b6be:	e021      	b.n	800b704 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b6c0:	893b      	ldrh	r3, [r7, #8]
 800b6c2:	0a1b      	lsrs	r3, r3, #8
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	b2da      	uxtb	r2, r3
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6d0:	6a39      	ldr	r1, [r7, #32]
 800b6d2:	68f8      	ldr	r0, [r7, #12]
 800b6d4:	f000 fa20 	bl	800bb18 <I2C_WaitOnTXEFlagUntilTimeout>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00d      	beq.n	800b6fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6e2:	2b04      	cmp	r3, #4
 800b6e4:	d107      	bne.n	800b6f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b6f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e005      	b.n	800b706 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b6fa:	893b      	ldrh	r3, [r7, #8]
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3718      	adds	r7, #24
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	00010002 	.word	0x00010002

0800b714 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b088      	sub	sp, #32
 800b718:	af02      	add	r7, sp, #8
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	4608      	mov	r0, r1
 800b71e:	4611      	mov	r1, r2
 800b720:	461a      	mov	r2, r3
 800b722:	4603      	mov	r3, r0
 800b724:	817b      	strh	r3, [r7, #10]
 800b726:	460b      	mov	r3, r1
 800b728:	813b      	strh	r3, [r7, #8]
 800b72a:	4613      	mov	r3, r2
 800b72c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b73c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b74c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	6a3b      	ldr	r3, [r7, #32]
 800b754:	2200      	movs	r2, #0
 800b756:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f000 f8c2 	bl	800b8e4 <I2C_WaitOnFlagUntilTimeout>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00d      	beq.n	800b782 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b774:	d103      	bne.n	800b77e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b77c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b77e:	2303      	movs	r3, #3
 800b780:	e0aa      	b.n	800b8d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b782:	897b      	ldrh	r3, [r7, #10]
 800b784:	b2db      	uxtb	r3, r3
 800b786:	461a      	mov	r2, r3
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b790:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b794:	6a3a      	ldr	r2, [r7, #32]
 800b796:	4952      	ldr	r1, [pc, #328]	@ (800b8e0 <I2C_RequestMemoryRead+0x1cc>)
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f000 f91d 	bl	800b9d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e097      	b.n	800b8d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	617b      	str	r3, [r7, #20]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	695b      	ldr	r3, [r3, #20]
 800b7b2:	617b      	str	r3, [r7, #20]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	699b      	ldr	r3, [r3, #24]
 800b7ba:	617b      	str	r3, [r7, #20]
 800b7bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b7be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7c0:	6a39      	ldr	r1, [r7, #32]
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f000 f9a8 	bl	800bb18 <I2C_WaitOnTXEFlagUntilTimeout>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00d      	beq.n	800b7ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7d2:	2b04      	cmp	r3, #4
 800b7d4:	d107      	bne.n	800b7e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b7e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e076      	b.n	800b8d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b7ea:	88fb      	ldrh	r3, [r7, #6]
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d105      	bne.n	800b7fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b7f0:	893b      	ldrh	r3, [r7, #8]
 800b7f2:	b2da      	uxtb	r2, r3
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	611a      	str	r2, [r3, #16]
 800b7fa:	e021      	b.n	800b840 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b7fc:	893b      	ldrh	r3, [r7, #8]
 800b7fe:	0a1b      	lsrs	r3, r3, #8
 800b800:	b29b      	uxth	r3, r3
 800b802:	b2da      	uxtb	r2, r3
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b80a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b80c:	6a39      	ldr	r1, [r7, #32]
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f000 f982 	bl	800bb18 <I2C_WaitOnTXEFlagUntilTimeout>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d00d      	beq.n	800b836 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b81e:	2b04      	cmp	r3, #4
 800b820:	d107      	bne.n	800b832 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b830:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b832:	2301      	movs	r3, #1
 800b834:	e050      	b.n	800b8d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b836:	893b      	ldrh	r3, [r7, #8]
 800b838:	b2da      	uxtb	r2, r3
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b842:	6a39      	ldr	r1, [r7, #32]
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f000 f967 	bl	800bb18 <I2C_WaitOnTXEFlagUntilTimeout>
 800b84a:	4603      	mov	r3, r0
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00d      	beq.n	800b86c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b854:	2b04      	cmp	r3, #4
 800b856:	d107      	bne.n	800b868 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b866:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	e035      	b.n	800b8d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b87a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	6a3b      	ldr	r3, [r7, #32]
 800b882:	2200      	movs	r2, #0
 800b884:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f000 f82b 	bl	800b8e4 <I2C_WaitOnFlagUntilTimeout>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00d      	beq.n	800b8b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b89e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8a2:	d103      	bne.n	800b8ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b8aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	e013      	b.n	800b8d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b8b0:	897b      	ldrh	r3, [r7, #10]
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	f043 0301 	orr.w	r3, r3, #1
 800b8b8:	b2da      	uxtb	r2, r3
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c2:	6a3a      	ldr	r2, [r7, #32]
 800b8c4:	4906      	ldr	r1, [pc, #24]	@ (800b8e0 <I2C_RequestMemoryRead+0x1cc>)
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	f000 f886 	bl	800b9d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d001      	beq.n	800b8d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e000      	b.n	800b8d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3718      	adds	r7, #24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	00010002 	.word	0x00010002

0800b8e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	603b      	str	r3, [r7, #0]
 800b8f0:	4613      	mov	r3, r2
 800b8f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b8f4:	e048      	b.n	800b988 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b8fc:	d044      	beq.n	800b988 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8fe:	f7fe fb25 	bl	8009f4c <HAL_GetTick>
 800b902:	4602      	mov	r2, r0
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	1ad3      	subs	r3, r2, r3
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d302      	bcc.n	800b914 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d139      	bne.n	800b988 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	0c1b      	lsrs	r3, r3, #16
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d10d      	bne.n	800b93a <I2C_WaitOnFlagUntilTimeout+0x56>
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	695b      	ldr	r3, [r3, #20]
 800b924:	43da      	mvns	r2, r3
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	4013      	ands	r3, r2
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	bf0c      	ite	eq
 800b930:	2301      	moveq	r3, #1
 800b932:	2300      	movne	r3, #0
 800b934:	b2db      	uxtb	r3, r3
 800b936:	461a      	mov	r2, r3
 800b938:	e00c      	b.n	800b954 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	699b      	ldr	r3, [r3, #24]
 800b940:	43da      	mvns	r2, r3
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	4013      	ands	r3, r2
 800b946:	b29b      	uxth	r3, r3
 800b948:	2b00      	cmp	r3, #0
 800b94a:	bf0c      	ite	eq
 800b94c:	2301      	moveq	r3, #1
 800b94e:	2300      	movne	r3, #0
 800b950:	b2db      	uxtb	r3, r3
 800b952:	461a      	mov	r2, r3
 800b954:	79fb      	ldrb	r3, [r7, #7]
 800b956:	429a      	cmp	r2, r3
 800b958:	d116      	bne.n	800b988 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2220      	movs	r2, #32
 800b964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2200      	movs	r2, #0
 800b96c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b974:	f043 0220 	orr.w	r2, r3, #32
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b984:	2301      	movs	r3, #1
 800b986:	e023      	b.n	800b9d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	0c1b      	lsrs	r3, r3, #16
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d10d      	bne.n	800b9ae <I2C_WaitOnFlagUntilTimeout+0xca>
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	695b      	ldr	r3, [r3, #20]
 800b998:	43da      	mvns	r2, r3
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	4013      	ands	r3, r2
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	bf0c      	ite	eq
 800b9a4:	2301      	moveq	r3, #1
 800b9a6:	2300      	movne	r3, #0
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	e00c      	b.n	800b9c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	699b      	ldr	r3, [r3, #24]
 800b9b4:	43da      	mvns	r2, r3
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	4013      	ands	r3, r2
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	bf0c      	ite	eq
 800b9c0:	2301      	moveq	r3, #1
 800b9c2:	2300      	movne	r3, #0
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	79fb      	ldrb	r3, [r7, #7]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d093      	beq.n	800b8f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3710      	adds	r7, #16
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	607a      	str	r2, [r7, #4]
 800b9e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b9e6:	e071      	b.n	800bacc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	695b      	ldr	r3, [r3, #20]
 800b9ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b9f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9f6:	d123      	bne.n	800ba40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ba10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2200      	movs	r2, #0
 800ba16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2220      	movs	r2, #32
 800ba1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba2c:	f043 0204 	orr.w	r2, r3, #4
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e067      	b.n	800bb10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba46:	d041      	beq.n	800bacc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba48:	f7fe fa80 	bl	8009f4c <HAL_GetTick>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	1ad3      	subs	r3, r2, r3
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d302      	bcc.n	800ba5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d136      	bne.n	800bacc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	0c1b      	lsrs	r3, r3, #16
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d10c      	bne.n	800ba82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	695b      	ldr	r3, [r3, #20]
 800ba6e:	43da      	mvns	r2, r3
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	4013      	ands	r3, r2
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	bf14      	ite	ne
 800ba7a:	2301      	movne	r3, #1
 800ba7c:	2300      	moveq	r3, #0
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	e00b      	b.n	800ba9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	699b      	ldr	r3, [r3, #24]
 800ba88:	43da      	mvns	r2, r3
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	4013      	ands	r3, r2
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	bf14      	ite	ne
 800ba94:	2301      	movne	r3, #1
 800ba96:	2300      	moveq	r3, #0
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d016      	beq.n	800bacc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2200      	movs	r2, #0
 800baa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2220      	movs	r2, #32
 800baa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2200      	movs	r2, #0
 800bab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bab8:	f043 0220 	orr.w	r2, r3, #32
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bac8:	2301      	movs	r3, #1
 800baca:	e021      	b.n	800bb10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	0c1b      	lsrs	r3, r3, #16
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d10c      	bne.n	800baf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	695b      	ldr	r3, [r3, #20]
 800badc:	43da      	mvns	r2, r3
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	4013      	ands	r3, r2
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	bf14      	ite	ne
 800bae8:	2301      	movne	r3, #1
 800baea:	2300      	moveq	r3, #0
 800baec:	b2db      	uxtb	r3, r3
 800baee:	e00b      	b.n	800bb08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	699b      	ldr	r3, [r3, #24]
 800baf6:	43da      	mvns	r2, r3
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	4013      	ands	r3, r2
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	bf14      	ite	ne
 800bb02:	2301      	movne	r3, #1
 800bb04:	2300      	moveq	r3, #0
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f47f af6d 	bne.w	800b9e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bb24:	e034      	b.n	800bb90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bb26:	68f8      	ldr	r0, [r7, #12]
 800bb28:	f000 f8e3 	bl	800bcf2 <I2C_IsAcknowledgeFailed>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d001      	beq.n	800bb36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bb32:	2301      	movs	r3, #1
 800bb34:	e034      	b.n	800bba0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb3c:	d028      	beq.n	800bb90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb3e:	f7fe fa05 	bl	8009f4c <HAL_GetTick>
 800bb42:	4602      	mov	r2, r0
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	1ad3      	subs	r3, r2, r3
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d302      	bcc.n	800bb54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d11d      	bne.n	800bb90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	695b      	ldr	r3, [r3, #20]
 800bb5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb5e:	2b80      	cmp	r3, #128	@ 0x80
 800bb60:	d016      	beq.n	800bb90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2220      	movs	r2, #32
 800bb6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb7c:	f043 0220 	orr.w	r2, r3, #32
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e007      	b.n	800bba0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	695b      	ldr	r3, [r3, #20]
 800bb96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb9a:	2b80      	cmp	r3, #128	@ 0x80
 800bb9c:	d1c3      	bne.n	800bb26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3710      	adds	r7, #16
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b084      	sub	sp, #16
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bbb4:	e034      	b.n	800bc20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f000 f89b 	bl	800bcf2 <I2C_IsAcknowledgeFailed>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d001      	beq.n	800bbc6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e034      	b.n	800bc30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bbcc:	d028      	beq.n	800bc20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbce:	f7fe f9bd 	bl	8009f4c <HAL_GetTick>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	68ba      	ldr	r2, [r7, #8]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d302      	bcc.n	800bbe4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d11d      	bne.n	800bc20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	695b      	ldr	r3, [r3, #20]
 800bbea:	f003 0304 	and.w	r3, r3, #4
 800bbee:	2b04      	cmp	r3, #4
 800bbf0:	d016      	beq.n	800bc20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2220      	movs	r2, #32
 800bbfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc0c:	f043 0220 	orr.w	r2, r3, #32
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2200      	movs	r2, #0
 800bc18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	e007      	b.n	800bc30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	695b      	ldr	r3, [r3, #20]
 800bc26:	f003 0304 	and.w	r3, r3, #4
 800bc2a:	2b04      	cmp	r3, #4
 800bc2c:	d1c3      	bne.n	800bbb6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bc44:	e049      	b.n	800bcda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	695b      	ldr	r3, [r3, #20]
 800bc4c:	f003 0310 	and.w	r3, r3, #16
 800bc50:	2b10      	cmp	r3, #16
 800bc52:	d119      	bne.n	800bc88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f06f 0210 	mvn.w	r2, #16
 800bc5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2200      	movs	r2, #0
 800bc62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2220      	movs	r2, #32
 800bc68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	e030      	b.n	800bcea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc88:	f7fe f960 	bl	8009f4c <HAL_GetTick>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	1ad3      	subs	r3, r2, r3
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d302      	bcc.n	800bc9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d11d      	bne.n	800bcda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	695b      	ldr	r3, [r3, #20]
 800bca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bca8:	2b40      	cmp	r3, #64	@ 0x40
 800bcaa:	d016      	beq.n	800bcda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2220      	movs	r2, #32
 800bcb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcc6:	f043 0220 	orr.w	r2, r3, #32
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e007      	b.n	800bcea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	695b      	ldr	r3, [r3, #20]
 800bce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bce4:	2b40      	cmp	r3, #64	@ 0x40
 800bce6:	d1ae      	bne.n	800bc46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bce8:	2300      	movs	r3, #0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bcf2:	b480      	push	{r7}
 800bcf4:	b083      	sub	sp, #12
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	695b      	ldr	r3, [r3, #20]
 800bd00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd08:	d11b      	bne.n	800bd42 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800bd12:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2220      	movs	r2, #32
 800bd1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd2e:	f043 0204 	orr.w	r2, r3, #4
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e000      	b.n	800bd44 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bc80      	pop	{r7}
 800bd4c:	4770      	bx	lr
	...

0800bd50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d101      	bne.n	800bd62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e272      	b.n	800c248 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f003 0301 	and.w	r3, r3, #1
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f000 8087 	beq.w	800be7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bd70:	4b92      	ldr	r3, [pc, #584]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	f003 030c 	and.w	r3, r3, #12
 800bd78:	2b04      	cmp	r3, #4
 800bd7a:	d00c      	beq.n	800bd96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800bd7c:	4b8f      	ldr	r3, [pc, #572]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	f003 030c 	and.w	r3, r3, #12
 800bd84:	2b08      	cmp	r3, #8
 800bd86:	d112      	bne.n	800bdae <HAL_RCC_OscConfig+0x5e>
 800bd88:	4b8c      	ldr	r3, [pc, #560]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bd90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd94:	d10b      	bne.n	800bdae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd96:	4b89      	ldr	r3, [pc, #548]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d06c      	beq.n	800be7c <HAL_RCC_OscConfig+0x12c>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d168      	bne.n	800be7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e24c      	b.n	800c248 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdb6:	d106      	bne.n	800bdc6 <HAL_RCC_OscConfig+0x76>
 800bdb8:	4b80      	ldr	r3, [pc, #512]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a7f      	ldr	r2, [pc, #508]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bdbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bdc2:	6013      	str	r3, [r2, #0]
 800bdc4:	e02e      	b.n	800be24 <HAL_RCC_OscConfig+0xd4>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d10c      	bne.n	800bde8 <HAL_RCC_OscConfig+0x98>
 800bdce:	4b7b      	ldr	r3, [pc, #492]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4a7a      	ldr	r2, [pc, #488]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bdd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bdd8:	6013      	str	r3, [r2, #0]
 800bdda:	4b78      	ldr	r3, [pc, #480]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4a77      	ldr	r2, [pc, #476]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bde0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bde4:	6013      	str	r3, [r2, #0]
 800bde6:	e01d      	b.n	800be24 <HAL_RCC_OscConfig+0xd4>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bdf0:	d10c      	bne.n	800be0c <HAL_RCC_OscConfig+0xbc>
 800bdf2:	4b72      	ldr	r3, [pc, #456]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a71      	ldr	r2, [pc, #452]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bdf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bdfc:	6013      	str	r3, [r2, #0]
 800bdfe:	4b6f      	ldr	r3, [pc, #444]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a6e      	ldr	r2, [pc, #440]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800be04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be08:	6013      	str	r3, [r2, #0]
 800be0a:	e00b      	b.n	800be24 <HAL_RCC_OscConfig+0xd4>
 800be0c:	4b6b      	ldr	r3, [pc, #428]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a6a      	ldr	r2, [pc, #424]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800be12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be16:	6013      	str	r3, [r2, #0]
 800be18:	4b68      	ldr	r3, [pc, #416]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a67      	ldr	r2, [pc, #412]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800be1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d013      	beq.n	800be54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be2c:	f7fe f88e 	bl	8009f4c <HAL_GetTick>
 800be30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be32:	e008      	b.n	800be46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be34:	f7fe f88a 	bl	8009f4c <HAL_GetTick>
 800be38:	4602      	mov	r2, r0
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	2b64      	cmp	r3, #100	@ 0x64
 800be40:	d901      	bls.n	800be46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800be42:	2303      	movs	r3, #3
 800be44:	e200      	b.n	800c248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be46:	4b5d      	ldr	r3, [pc, #372]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d0f0      	beq.n	800be34 <HAL_RCC_OscConfig+0xe4>
 800be52:	e014      	b.n	800be7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be54:	f7fe f87a 	bl	8009f4c <HAL_GetTick>
 800be58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800be5a:	e008      	b.n	800be6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be5c:	f7fe f876 	bl	8009f4c <HAL_GetTick>
 800be60:	4602      	mov	r2, r0
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	1ad3      	subs	r3, r2, r3
 800be66:	2b64      	cmp	r3, #100	@ 0x64
 800be68:	d901      	bls.n	800be6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800be6a:	2303      	movs	r3, #3
 800be6c:	e1ec      	b.n	800c248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800be6e:	4b53      	ldr	r3, [pc, #332]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1f0      	bne.n	800be5c <HAL_RCC_OscConfig+0x10c>
 800be7a:	e000      	b.n	800be7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f003 0302 	and.w	r3, r3, #2
 800be86:	2b00      	cmp	r3, #0
 800be88:	d063      	beq.n	800bf52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800be8a:	4b4c      	ldr	r3, [pc, #304]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	f003 030c 	and.w	r3, r3, #12
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00b      	beq.n	800beae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800be96:	4b49      	ldr	r3, [pc, #292]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	f003 030c 	and.w	r3, r3, #12
 800be9e:	2b08      	cmp	r3, #8
 800bea0:	d11c      	bne.n	800bedc <HAL_RCC_OscConfig+0x18c>
 800bea2:	4b46      	ldr	r3, [pc, #280]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d116      	bne.n	800bedc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800beae:	4b43      	ldr	r3, [pc, #268]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f003 0302 	and.w	r3, r3, #2
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d005      	beq.n	800bec6 <HAL_RCC_OscConfig+0x176>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d001      	beq.n	800bec6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800bec2:	2301      	movs	r3, #1
 800bec4:	e1c0      	b.n	800c248 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bec6:	4b3d      	ldr	r3, [pc, #244]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	695b      	ldr	r3, [r3, #20]
 800bed2:	00db      	lsls	r3, r3, #3
 800bed4:	4939      	ldr	r1, [pc, #228]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bed6:	4313      	orrs	r3, r2
 800bed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800beda:	e03a      	b.n	800bf52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	691b      	ldr	r3, [r3, #16]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d020      	beq.n	800bf26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bee4:	4b36      	ldr	r3, [pc, #216]	@ (800bfc0 <HAL_RCC_OscConfig+0x270>)
 800bee6:	2201      	movs	r2, #1
 800bee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800beea:	f7fe f82f 	bl	8009f4c <HAL_GetTick>
 800beee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bef0:	e008      	b.n	800bf04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bef2:	f7fe f82b 	bl	8009f4c <HAL_GetTick>
 800bef6:	4602      	mov	r2, r0
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	1ad3      	subs	r3, r2, r3
 800befc:	2b02      	cmp	r3, #2
 800befe:	d901      	bls.n	800bf04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800bf00:	2303      	movs	r3, #3
 800bf02:	e1a1      	b.n	800c248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf04:	4b2d      	ldr	r3, [pc, #180]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 0302 	and.w	r3, r3, #2
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d0f0      	beq.n	800bef2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf10:	4b2a      	ldr	r3, [pc, #168]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	695b      	ldr	r3, [r3, #20]
 800bf1c:	00db      	lsls	r3, r3, #3
 800bf1e:	4927      	ldr	r1, [pc, #156]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bf20:	4313      	orrs	r3, r2
 800bf22:	600b      	str	r3, [r1, #0]
 800bf24:	e015      	b.n	800bf52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bf26:	4b26      	ldr	r3, [pc, #152]	@ (800bfc0 <HAL_RCC_OscConfig+0x270>)
 800bf28:	2200      	movs	r2, #0
 800bf2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf2c:	f7fe f80e 	bl	8009f4c <HAL_GetTick>
 800bf30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf32:	e008      	b.n	800bf46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf34:	f7fe f80a 	bl	8009f4c <HAL_GetTick>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	1ad3      	subs	r3, r2, r3
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	d901      	bls.n	800bf46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800bf42:	2303      	movs	r3, #3
 800bf44:	e180      	b.n	800c248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf46:	4b1d      	ldr	r3, [pc, #116]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f003 0302 	and.w	r3, r3, #2
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1f0      	bne.n	800bf34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f003 0308 	and.w	r3, r3, #8
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d03a      	beq.n	800bfd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	699b      	ldr	r3, [r3, #24]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d019      	beq.n	800bf9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bf66:	4b17      	ldr	r3, [pc, #92]	@ (800bfc4 <HAL_RCC_OscConfig+0x274>)
 800bf68:	2201      	movs	r2, #1
 800bf6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bf6c:	f7fd ffee 	bl	8009f4c <HAL_GetTick>
 800bf70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bf72:	e008      	b.n	800bf86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bf74:	f7fd ffea 	bl	8009f4c <HAL_GetTick>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	2b02      	cmp	r3, #2
 800bf80:	d901      	bls.n	800bf86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800bf82:	2303      	movs	r3, #3
 800bf84:	e160      	b.n	800c248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bf86:	4b0d      	ldr	r3, [pc, #52]	@ (800bfbc <HAL_RCC_OscConfig+0x26c>)
 800bf88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf8a:	f003 0302 	and.w	r3, r3, #2
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d0f0      	beq.n	800bf74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800bf92:	2001      	movs	r0, #1
 800bf94:	f000 face 	bl	800c534 <RCC_Delay>
 800bf98:	e01c      	b.n	800bfd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bf9a:	4b0a      	ldr	r3, [pc, #40]	@ (800bfc4 <HAL_RCC_OscConfig+0x274>)
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bfa0:	f7fd ffd4 	bl	8009f4c <HAL_GetTick>
 800bfa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bfa6:	e00f      	b.n	800bfc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bfa8:	f7fd ffd0 	bl	8009f4c <HAL_GetTick>
 800bfac:	4602      	mov	r2, r0
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	d908      	bls.n	800bfc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800bfb6:	2303      	movs	r3, #3
 800bfb8:	e146      	b.n	800c248 <HAL_RCC_OscConfig+0x4f8>
 800bfba:	bf00      	nop
 800bfbc:	40021000 	.word	0x40021000
 800bfc0:	42420000 	.word	0x42420000
 800bfc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bfc8:	4b92      	ldr	r3, [pc, #584]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800bfca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfcc:	f003 0302 	and.w	r3, r3, #2
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1e9      	bne.n	800bfa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f003 0304 	and.w	r3, r3, #4
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f000 80a6 	beq.w	800c12e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bfe6:	4b8b      	ldr	r3, [pc, #556]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800bfe8:	69db      	ldr	r3, [r3, #28]
 800bfea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d10d      	bne.n	800c00e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bff2:	4b88      	ldr	r3, [pc, #544]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800bff4:	69db      	ldr	r3, [r3, #28]
 800bff6:	4a87      	ldr	r2, [pc, #540]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800bff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bffc:	61d3      	str	r3, [r2, #28]
 800bffe:	4b85      	ldr	r3, [pc, #532]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c000:	69db      	ldr	r3, [r3, #28]
 800c002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c006:	60bb      	str	r3, [r7, #8]
 800c008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c00a:	2301      	movs	r3, #1
 800c00c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c00e:	4b82      	ldr	r3, [pc, #520]	@ (800c218 <HAL_RCC_OscConfig+0x4c8>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c016:	2b00      	cmp	r3, #0
 800c018:	d118      	bne.n	800c04c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c01a:	4b7f      	ldr	r3, [pc, #508]	@ (800c218 <HAL_RCC_OscConfig+0x4c8>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4a7e      	ldr	r2, [pc, #504]	@ (800c218 <HAL_RCC_OscConfig+0x4c8>)
 800c020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c026:	f7fd ff91 	bl	8009f4c <HAL_GetTick>
 800c02a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c02c:	e008      	b.n	800c040 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c02e:	f7fd ff8d 	bl	8009f4c <HAL_GetTick>
 800c032:	4602      	mov	r2, r0
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	1ad3      	subs	r3, r2, r3
 800c038:	2b64      	cmp	r3, #100	@ 0x64
 800c03a:	d901      	bls.n	800c040 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800c03c:	2303      	movs	r3, #3
 800c03e:	e103      	b.n	800c248 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c040:	4b75      	ldr	r3, [pc, #468]	@ (800c218 <HAL_RCC_OscConfig+0x4c8>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d0f0      	beq.n	800c02e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	2b01      	cmp	r3, #1
 800c052:	d106      	bne.n	800c062 <HAL_RCC_OscConfig+0x312>
 800c054:	4b6f      	ldr	r3, [pc, #444]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c056:	6a1b      	ldr	r3, [r3, #32]
 800c058:	4a6e      	ldr	r2, [pc, #440]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c05a:	f043 0301 	orr.w	r3, r3, #1
 800c05e:	6213      	str	r3, [r2, #32]
 800c060:	e02d      	b.n	800c0be <HAL_RCC_OscConfig+0x36e>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d10c      	bne.n	800c084 <HAL_RCC_OscConfig+0x334>
 800c06a:	4b6a      	ldr	r3, [pc, #424]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c06c:	6a1b      	ldr	r3, [r3, #32]
 800c06e:	4a69      	ldr	r2, [pc, #420]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c070:	f023 0301 	bic.w	r3, r3, #1
 800c074:	6213      	str	r3, [r2, #32]
 800c076:	4b67      	ldr	r3, [pc, #412]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c078:	6a1b      	ldr	r3, [r3, #32]
 800c07a:	4a66      	ldr	r2, [pc, #408]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c07c:	f023 0304 	bic.w	r3, r3, #4
 800c080:	6213      	str	r3, [r2, #32]
 800c082:	e01c      	b.n	800c0be <HAL_RCC_OscConfig+0x36e>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	2b05      	cmp	r3, #5
 800c08a:	d10c      	bne.n	800c0a6 <HAL_RCC_OscConfig+0x356>
 800c08c:	4b61      	ldr	r3, [pc, #388]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c08e:	6a1b      	ldr	r3, [r3, #32]
 800c090:	4a60      	ldr	r2, [pc, #384]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c092:	f043 0304 	orr.w	r3, r3, #4
 800c096:	6213      	str	r3, [r2, #32]
 800c098:	4b5e      	ldr	r3, [pc, #376]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c09a:	6a1b      	ldr	r3, [r3, #32]
 800c09c:	4a5d      	ldr	r2, [pc, #372]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c09e:	f043 0301 	orr.w	r3, r3, #1
 800c0a2:	6213      	str	r3, [r2, #32]
 800c0a4:	e00b      	b.n	800c0be <HAL_RCC_OscConfig+0x36e>
 800c0a6:	4b5b      	ldr	r3, [pc, #364]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c0a8:	6a1b      	ldr	r3, [r3, #32]
 800c0aa:	4a5a      	ldr	r2, [pc, #360]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c0ac:	f023 0301 	bic.w	r3, r3, #1
 800c0b0:	6213      	str	r3, [r2, #32]
 800c0b2:	4b58      	ldr	r3, [pc, #352]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c0b4:	6a1b      	ldr	r3, [r3, #32]
 800c0b6:	4a57      	ldr	r2, [pc, #348]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c0b8:	f023 0304 	bic.w	r3, r3, #4
 800c0bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d015      	beq.n	800c0f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c0c6:	f7fd ff41 	bl	8009f4c <HAL_GetTick>
 800c0ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c0cc:	e00a      	b.n	800c0e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0ce:	f7fd ff3d 	bl	8009f4c <HAL_GetTick>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	1ad3      	subs	r3, r2, r3
 800c0d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d901      	bls.n	800c0e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	e0b1      	b.n	800c248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c0e4:	4b4b      	ldr	r3, [pc, #300]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c0e6:	6a1b      	ldr	r3, [r3, #32]
 800c0e8:	f003 0302 	and.w	r3, r3, #2
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d0ee      	beq.n	800c0ce <HAL_RCC_OscConfig+0x37e>
 800c0f0:	e014      	b.n	800c11c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c0f2:	f7fd ff2b 	bl	8009f4c <HAL_GetTick>
 800c0f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c0f8:	e00a      	b.n	800c110 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0fa:	f7fd ff27 	bl	8009f4c <HAL_GetTick>
 800c0fe:	4602      	mov	r2, r0
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	1ad3      	subs	r3, r2, r3
 800c104:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c108:	4293      	cmp	r3, r2
 800c10a:	d901      	bls.n	800c110 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800c10c:	2303      	movs	r3, #3
 800c10e:	e09b      	b.n	800c248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c110:	4b40      	ldr	r3, [pc, #256]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c112:	6a1b      	ldr	r3, [r3, #32]
 800c114:	f003 0302 	and.w	r3, r3, #2
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d1ee      	bne.n	800c0fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c11c:	7dfb      	ldrb	r3, [r7, #23]
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d105      	bne.n	800c12e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c122:	4b3c      	ldr	r3, [pc, #240]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c124:	69db      	ldr	r3, [r3, #28]
 800c126:	4a3b      	ldr	r2, [pc, #236]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c128:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c12c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	69db      	ldr	r3, [r3, #28]
 800c132:	2b00      	cmp	r3, #0
 800c134:	f000 8087 	beq.w	800c246 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c138:	4b36      	ldr	r3, [pc, #216]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	f003 030c 	and.w	r3, r3, #12
 800c140:	2b08      	cmp	r3, #8
 800c142:	d061      	beq.n	800c208 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	69db      	ldr	r3, [r3, #28]
 800c148:	2b02      	cmp	r3, #2
 800c14a:	d146      	bne.n	800c1da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c14c:	4b33      	ldr	r3, [pc, #204]	@ (800c21c <HAL_RCC_OscConfig+0x4cc>)
 800c14e:	2200      	movs	r2, #0
 800c150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c152:	f7fd fefb 	bl	8009f4c <HAL_GetTick>
 800c156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c158:	e008      	b.n	800c16c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c15a:	f7fd fef7 	bl	8009f4c <HAL_GetTick>
 800c15e:	4602      	mov	r2, r0
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	1ad3      	subs	r3, r2, r3
 800c164:	2b02      	cmp	r3, #2
 800c166:	d901      	bls.n	800c16c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800c168:	2303      	movs	r3, #3
 800c16a:	e06d      	b.n	800c248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c16c:	4b29      	ldr	r3, [pc, #164]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1f0      	bne.n	800c15a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6a1b      	ldr	r3, [r3, #32]
 800c17c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c180:	d108      	bne.n	800c194 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c182:	4b24      	ldr	r3, [pc, #144]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	4921      	ldr	r1, [pc, #132]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c190:	4313      	orrs	r3, r2
 800c192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c194:	4b1f      	ldr	r3, [pc, #124]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6a19      	ldr	r1, [r3, #32]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1a4:	430b      	orrs	r3, r1
 800c1a6:	491b      	ldr	r1, [pc, #108]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c1ac:	4b1b      	ldr	r3, [pc, #108]	@ (800c21c <HAL_RCC_OscConfig+0x4cc>)
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1b2:	f7fd fecb 	bl	8009f4c <HAL_GetTick>
 800c1b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c1b8:	e008      	b.n	800c1cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1ba:	f7fd fec7 	bl	8009f4c <HAL_GetTick>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	1ad3      	subs	r3, r2, r3
 800c1c4:	2b02      	cmp	r3, #2
 800c1c6:	d901      	bls.n	800c1cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800c1c8:	2303      	movs	r3, #3
 800c1ca:	e03d      	b.n	800c248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c1cc:	4b11      	ldr	r3, [pc, #68]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d0f0      	beq.n	800c1ba <HAL_RCC_OscConfig+0x46a>
 800c1d8:	e035      	b.n	800c246 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c1da:	4b10      	ldr	r3, [pc, #64]	@ (800c21c <HAL_RCC_OscConfig+0x4cc>)
 800c1dc:	2200      	movs	r2, #0
 800c1de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1e0:	f7fd feb4 	bl	8009f4c <HAL_GetTick>
 800c1e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c1e6:	e008      	b.n	800c1fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1e8:	f7fd feb0 	bl	8009f4c <HAL_GetTick>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	1ad3      	subs	r3, r2, r3
 800c1f2:	2b02      	cmp	r3, #2
 800c1f4:	d901      	bls.n	800c1fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	e026      	b.n	800c248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c1fa:	4b06      	ldr	r3, [pc, #24]	@ (800c214 <HAL_RCC_OscConfig+0x4c4>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c202:	2b00      	cmp	r3, #0
 800c204:	d1f0      	bne.n	800c1e8 <HAL_RCC_OscConfig+0x498>
 800c206:	e01e      	b.n	800c246 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	69db      	ldr	r3, [r3, #28]
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d107      	bne.n	800c220 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800c210:	2301      	movs	r3, #1
 800c212:	e019      	b.n	800c248 <HAL_RCC_OscConfig+0x4f8>
 800c214:	40021000 	.word	0x40021000
 800c218:	40007000 	.word	0x40007000
 800c21c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800c220:	4b0b      	ldr	r3, [pc, #44]	@ (800c250 <HAL_RCC_OscConfig+0x500>)
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a1b      	ldr	r3, [r3, #32]
 800c230:	429a      	cmp	r2, r3
 800c232:	d106      	bne.n	800c242 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c23e:	429a      	cmp	r2, r3
 800c240:	d001      	beq.n	800c246 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800c242:	2301      	movs	r3, #1
 800c244:	e000      	b.n	800c248 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3718      	adds	r7, #24
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	40021000 	.word	0x40021000

0800c254 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d101      	bne.n	800c268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c264:	2301      	movs	r3, #1
 800c266:	e0d0      	b.n	800c40a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c268:	4b6a      	ldr	r3, [pc, #424]	@ (800c414 <HAL_RCC_ClockConfig+0x1c0>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f003 0307 	and.w	r3, r3, #7
 800c270:	683a      	ldr	r2, [r7, #0]
 800c272:	429a      	cmp	r2, r3
 800c274:	d910      	bls.n	800c298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c276:	4b67      	ldr	r3, [pc, #412]	@ (800c414 <HAL_RCC_ClockConfig+0x1c0>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f023 0207 	bic.w	r2, r3, #7
 800c27e:	4965      	ldr	r1, [pc, #404]	@ (800c414 <HAL_RCC_ClockConfig+0x1c0>)
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	4313      	orrs	r3, r2
 800c284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c286:	4b63      	ldr	r3, [pc, #396]	@ (800c414 <HAL_RCC_ClockConfig+0x1c0>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f003 0307 	and.w	r3, r3, #7
 800c28e:	683a      	ldr	r2, [r7, #0]
 800c290:	429a      	cmp	r2, r3
 800c292:	d001      	beq.n	800c298 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800c294:	2301      	movs	r3, #1
 800c296:	e0b8      	b.n	800c40a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f003 0302 	and.w	r3, r3, #2
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d020      	beq.n	800c2e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f003 0304 	and.w	r3, r3, #4
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d005      	beq.n	800c2bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c2b0:	4b59      	ldr	r3, [pc, #356]	@ (800c418 <HAL_RCC_ClockConfig+0x1c4>)
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	4a58      	ldr	r2, [pc, #352]	@ (800c418 <HAL_RCC_ClockConfig+0x1c4>)
 800c2b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800c2ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f003 0308 	and.w	r3, r3, #8
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d005      	beq.n	800c2d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c2c8:	4b53      	ldr	r3, [pc, #332]	@ (800c418 <HAL_RCC_ClockConfig+0x1c4>)
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	4a52      	ldr	r2, [pc, #328]	@ (800c418 <HAL_RCC_ClockConfig+0x1c4>)
 800c2ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800c2d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c2d4:	4b50      	ldr	r3, [pc, #320]	@ (800c418 <HAL_RCC_ClockConfig+0x1c4>)
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	494d      	ldr	r1, [pc, #308]	@ (800c418 <HAL_RCC_ClockConfig+0x1c4>)
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f003 0301 	and.w	r3, r3, #1
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d040      	beq.n	800c374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d107      	bne.n	800c30a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c2fa:	4b47      	ldr	r3, [pc, #284]	@ (800c418 <HAL_RCC_ClockConfig+0x1c4>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c302:	2b00      	cmp	r3, #0
 800c304:	d115      	bne.n	800c332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	e07f      	b.n	800c40a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	2b02      	cmp	r3, #2
 800c310:	d107      	bne.n	800c322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c312:	4b41      	ldr	r3, [pc, #260]	@ (800c418 <HAL_RCC_ClockConfig+0x1c4>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d109      	bne.n	800c332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c31e:	2301      	movs	r3, #1
 800c320:	e073      	b.n	800c40a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c322:	4b3d      	ldr	r3, [pc, #244]	@ (800c418 <HAL_RCC_ClockConfig+0x1c4>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f003 0302 	and.w	r3, r3, #2
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d101      	bne.n	800c332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c32e:	2301      	movs	r3, #1
 800c330:	e06b      	b.n	800c40a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c332:	4b39      	ldr	r3, [pc, #228]	@ (800c418 <HAL_RCC_ClockConfig+0x1c4>)
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	f023 0203 	bic.w	r2, r3, #3
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	4936      	ldr	r1, [pc, #216]	@ (800c418 <HAL_RCC_ClockConfig+0x1c4>)
 800c340:	4313      	orrs	r3, r2
 800c342:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c344:	f7fd fe02 	bl	8009f4c <HAL_GetTick>
 800c348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c34a:	e00a      	b.n	800c362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c34c:	f7fd fdfe 	bl	8009f4c <HAL_GetTick>
 800c350:	4602      	mov	r2, r0
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	1ad3      	subs	r3, r2, r3
 800c356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d901      	bls.n	800c362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c35e:	2303      	movs	r3, #3
 800c360:	e053      	b.n	800c40a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c362:	4b2d      	ldr	r3, [pc, #180]	@ (800c418 <HAL_RCC_ClockConfig+0x1c4>)
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	f003 020c 	and.w	r2, r3, #12
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	429a      	cmp	r2, r3
 800c372:	d1eb      	bne.n	800c34c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c374:	4b27      	ldr	r3, [pc, #156]	@ (800c414 <HAL_RCC_ClockConfig+0x1c0>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f003 0307 	and.w	r3, r3, #7
 800c37c:	683a      	ldr	r2, [r7, #0]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d210      	bcs.n	800c3a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c382:	4b24      	ldr	r3, [pc, #144]	@ (800c414 <HAL_RCC_ClockConfig+0x1c0>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f023 0207 	bic.w	r2, r3, #7
 800c38a:	4922      	ldr	r1, [pc, #136]	@ (800c414 <HAL_RCC_ClockConfig+0x1c0>)
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	4313      	orrs	r3, r2
 800c390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c392:	4b20      	ldr	r3, [pc, #128]	@ (800c414 <HAL_RCC_ClockConfig+0x1c0>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f003 0307 	and.w	r3, r3, #7
 800c39a:	683a      	ldr	r2, [r7, #0]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d001      	beq.n	800c3a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e032      	b.n	800c40a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 0304 	and.w	r3, r3, #4
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d008      	beq.n	800c3c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c3b0:	4b19      	ldr	r3, [pc, #100]	@ (800c418 <HAL_RCC_ClockConfig+0x1c4>)
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	4916      	ldr	r1, [pc, #88]	@ (800c418 <HAL_RCC_ClockConfig+0x1c4>)
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f003 0308 	and.w	r3, r3, #8
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d009      	beq.n	800c3e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c3ce:	4b12      	ldr	r3, [pc, #72]	@ (800c418 <HAL_RCC_ClockConfig+0x1c4>)
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	00db      	lsls	r3, r3, #3
 800c3dc:	490e      	ldr	r1, [pc, #56]	@ (800c418 <HAL_RCC_ClockConfig+0x1c4>)
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c3e2:	f000 f821 	bl	800c428 <HAL_RCC_GetSysClockFreq>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	4b0b      	ldr	r3, [pc, #44]	@ (800c418 <HAL_RCC_ClockConfig+0x1c4>)
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	091b      	lsrs	r3, r3, #4
 800c3ee:	f003 030f 	and.w	r3, r3, #15
 800c3f2:	490a      	ldr	r1, [pc, #40]	@ (800c41c <HAL_RCC_ClockConfig+0x1c8>)
 800c3f4:	5ccb      	ldrb	r3, [r1, r3]
 800c3f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c3fa:	4a09      	ldr	r2, [pc, #36]	@ (800c420 <HAL_RCC_ClockConfig+0x1cc>)
 800c3fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c3fe:	4b09      	ldr	r3, [pc, #36]	@ (800c424 <HAL_RCC_ClockConfig+0x1d0>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4618      	mov	r0, r3
 800c404:	f7fd fd60 	bl	8009ec8 <HAL_InitTick>

  return HAL_OK;
 800c408:	2300      	movs	r3, #0
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	40022000 	.word	0x40022000
 800c418:	40021000 	.word	0x40021000
 800c41c:	0800d118 	.word	0x0800d118
 800c420:	20000cd8 	.word	0x20000cd8
 800c424:	20000cdc 	.word	0x20000cdc

0800c428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c428:	b480      	push	{r7}
 800c42a:	b087      	sub	sp, #28
 800c42c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c42e:	2300      	movs	r3, #0
 800c430:	60fb      	str	r3, [r7, #12]
 800c432:	2300      	movs	r3, #0
 800c434:	60bb      	str	r3, [r7, #8]
 800c436:	2300      	movs	r3, #0
 800c438:	617b      	str	r3, [r7, #20]
 800c43a:	2300      	movs	r3, #0
 800c43c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c43e:	2300      	movs	r3, #0
 800c440:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c442:	4b1e      	ldr	r3, [pc, #120]	@ (800c4bc <HAL_RCC_GetSysClockFreq+0x94>)
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f003 030c 	and.w	r3, r3, #12
 800c44e:	2b04      	cmp	r3, #4
 800c450:	d002      	beq.n	800c458 <HAL_RCC_GetSysClockFreq+0x30>
 800c452:	2b08      	cmp	r3, #8
 800c454:	d003      	beq.n	800c45e <HAL_RCC_GetSysClockFreq+0x36>
 800c456:	e027      	b.n	800c4a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c458:	4b19      	ldr	r3, [pc, #100]	@ (800c4c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800c45a:	613b      	str	r3, [r7, #16]
      break;
 800c45c:	e027      	b.n	800c4ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	0c9b      	lsrs	r3, r3, #18
 800c462:	f003 030f 	and.w	r3, r3, #15
 800c466:	4a17      	ldr	r2, [pc, #92]	@ (800c4c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800c468:	5cd3      	ldrb	r3, [r2, r3]
 800c46a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c472:	2b00      	cmp	r3, #0
 800c474:	d010      	beq.n	800c498 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c476:	4b11      	ldr	r3, [pc, #68]	@ (800c4bc <HAL_RCC_GetSysClockFreq+0x94>)
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	0c5b      	lsrs	r3, r3, #17
 800c47c:	f003 0301 	and.w	r3, r3, #1
 800c480:	4a11      	ldr	r2, [pc, #68]	@ (800c4c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800c482:	5cd3      	ldrb	r3, [r2, r3]
 800c484:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a0d      	ldr	r2, [pc, #52]	@ (800c4c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800c48a:	fb03 f202 	mul.w	r2, r3, r2
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	fbb2 f3f3 	udiv	r3, r2, r3
 800c494:	617b      	str	r3, [r7, #20]
 800c496:	e004      	b.n	800c4a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	4a0c      	ldr	r2, [pc, #48]	@ (800c4cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800c49c:	fb02 f303 	mul.w	r3, r2, r3
 800c4a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	613b      	str	r3, [r7, #16]
      break;
 800c4a6:	e002      	b.n	800c4ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c4a8:	4b05      	ldr	r3, [pc, #20]	@ (800c4c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800c4aa:	613b      	str	r3, [r7, #16]
      break;
 800c4ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c4ae:	693b      	ldr	r3, [r7, #16]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	371c      	adds	r7, #28
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bc80      	pop	{r7}
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	40021000 	.word	0x40021000
 800c4c0:	007a1200 	.word	0x007a1200
 800c4c4:	0800d130 	.word	0x0800d130
 800c4c8:	0800d140 	.word	0x0800d140
 800c4cc:	003d0900 	.word	0x003d0900

0800c4d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c4d4:	4b02      	ldr	r3, [pc, #8]	@ (800c4e0 <HAL_RCC_GetHCLKFreq+0x10>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bc80      	pop	{r7}
 800c4de:	4770      	bx	lr
 800c4e0:	20000cd8 	.word	0x20000cd8

0800c4e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c4e8:	f7ff fff2 	bl	800c4d0 <HAL_RCC_GetHCLKFreq>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	4b05      	ldr	r3, [pc, #20]	@ (800c504 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	0a1b      	lsrs	r3, r3, #8
 800c4f4:	f003 0307 	and.w	r3, r3, #7
 800c4f8:	4903      	ldr	r1, [pc, #12]	@ (800c508 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c4fa:	5ccb      	ldrb	r3, [r1, r3]
 800c4fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c500:	4618      	mov	r0, r3
 800c502:	bd80      	pop	{r7, pc}
 800c504:	40021000 	.word	0x40021000
 800c508:	0800d128 	.word	0x0800d128

0800c50c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c510:	f7ff ffde 	bl	800c4d0 <HAL_RCC_GetHCLKFreq>
 800c514:	4602      	mov	r2, r0
 800c516:	4b05      	ldr	r3, [pc, #20]	@ (800c52c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	0adb      	lsrs	r3, r3, #11
 800c51c:	f003 0307 	and.w	r3, r3, #7
 800c520:	4903      	ldr	r1, [pc, #12]	@ (800c530 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c522:	5ccb      	ldrb	r3, [r1, r3]
 800c524:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c528:	4618      	mov	r0, r3
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	40021000 	.word	0x40021000
 800c530:	0800d128 	.word	0x0800d128

0800c534 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c53c:	4b0a      	ldr	r3, [pc, #40]	@ (800c568 <RCC_Delay+0x34>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a0a      	ldr	r2, [pc, #40]	@ (800c56c <RCC_Delay+0x38>)
 800c542:	fba2 2303 	umull	r2, r3, r2, r3
 800c546:	0a5b      	lsrs	r3, r3, #9
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	fb02 f303 	mul.w	r3, r2, r3
 800c54e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c550:	bf00      	nop
  }
  while (Delay --);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	1e5a      	subs	r2, r3, #1
 800c556:	60fa      	str	r2, [r7, #12]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d1f9      	bne.n	800c550 <RCC_Delay+0x1c>
}
 800c55c:	bf00      	nop
 800c55e:	bf00      	nop
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	bc80      	pop	{r7}
 800c566:	4770      	bx	lr
 800c568:	20000cd8 	.word	0x20000cd8
 800c56c:	10624dd3 	.word	0x10624dd3

0800c570 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d101      	bne.n	800c582 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	e041      	b.n	800c606 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d106      	bne.n	800c59c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7fd fbac 	bl	8009cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2202      	movs	r2, #2
 800c5a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	3304      	adds	r3, #4
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	4610      	mov	r0, r2
 800c5b0:	f000 fa82 	bl	800cab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2201      	movs	r2, #1
 800c600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c604:	2300      	movs	r3, #0
}
 800c606:	4618      	mov	r0, r3
 800c608:	3708      	adds	r7, #8
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
	...

0800c610 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c610:	b480      	push	{r7}
 800c612:	b085      	sub	sp, #20
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	2b01      	cmp	r3, #1
 800c622:	d001      	beq.n	800c628 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c624:	2301      	movs	r3, #1
 800c626:	e044      	b.n	800c6b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2202      	movs	r2, #2
 800c62c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	68da      	ldr	r2, [r3, #12]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f042 0201 	orr.w	r2, r2, #1
 800c63e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a1d      	ldr	r2, [pc, #116]	@ (800c6bc <HAL_TIM_Base_Start_IT+0xac>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d018      	beq.n	800c67c <HAL_TIM_Base_Start_IT+0x6c>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a1c      	ldr	r2, [pc, #112]	@ (800c6c0 <HAL_TIM_Base_Start_IT+0xb0>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d013      	beq.n	800c67c <HAL_TIM_Base_Start_IT+0x6c>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c65c:	d00e      	beq.n	800c67c <HAL_TIM_Base_Start_IT+0x6c>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4a18      	ldr	r2, [pc, #96]	@ (800c6c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d009      	beq.n	800c67c <HAL_TIM_Base_Start_IT+0x6c>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4a16      	ldr	r2, [pc, #88]	@ (800c6c8 <HAL_TIM_Base_Start_IT+0xb8>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d004      	beq.n	800c67c <HAL_TIM_Base_Start_IT+0x6c>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4a15      	ldr	r2, [pc, #84]	@ (800c6cc <HAL_TIM_Base_Start_IT+0xbc>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d111      	bne.n	800c6a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	689b      	ldr	r3, [r3, #8]
 800c682:	f003 0307 	and.w	r3, r3, #7
 800c686:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2b06      	cmp	r3, #6
 800c68c:	d010      	beq.n	800c6b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f042 0201 	orr.w	r2, r2, #1
 800c69c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c69e:	e007      	b.n	800c6b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f042 0201 	orr.w	r2, r2, #1
 800c6ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3714      	adds	r7, #20
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bc80      	pop	{r7}
 800c6ba:	4770      	bx	lr
 800c6bc:	40012c00 	.word	0x40012c00
 800c6c0:	40013400 	.word	0x40013400
 800c6c4:	40000400 	.word	0x40000400
 800c6c8:	40000800 	.word	0x40000800
 800c6cc:	40000c00 	.word	0x40000c00

0800c6d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	691b      	ldr	r3, [r3, #16]
 800c6de:	f003 0302 	and.w	r3, r3, #2
 800c6e2:	2b02      	cmp	r3, #2
 800c6e4:	d122      	bne.n	800c72c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	f003 0302 	and.w	r3, r3, #2
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	d11b      	bne.n	800c72c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f06f 0202 	mvn.w	r2, #2
 800c6fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2201      	movs	r2, #1
 800c702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	699b      	ldr	r3, [r3, #24]
 800c70a:	f003 0303 	and.w	r3, r3, #3
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d003      	beq.n	800c71a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 f9b4 	bl	800ca80 <HAL_TIM_IC_CaptureCallback>
 800c718:	e005      	b.n	800c726 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 f9a7 	bl	800ca6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f000 f9b6 	bl	800ca92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	691b      	ldr	r3, [r3, #16]
 800c732:	f003 0304 	and.w	r3, r3, #4
 800c736:	2b04      	cmp	r3, #4
 800c738:	d122      	bne.n	800c780 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	68db      	ldr	r3, [r3, #12]
 800c740:	f003 0304 	and.w	r3, r3, #4
 800c744:	2b04      	cmp	r3, #4
 800c746:	d11b      	bne.n	800c780 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f06f 0204 	mvn.w	r2, #4
 800c750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2202      	movs	r2, #2
 800c756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	699b      	ldr	r3, [r3, #24]
 800c75e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c762:	2b00      	cmp	r3, #0
 800c764:	d003      	beq.n	800c76e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 f98a 	bl	800ca80 <HAL_TIM_IC_CaptureCallback>
 800c76c:	e005      	b.n	800c77a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 f97d 	bl	800ca6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 f98c 	bl	800ca92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2200      	movs	r2, #0
 800c77e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	f003 0308 	and.w	r3, r3, #8
 800c78a:	2b08      	cmp	r3, #8
 800c78c:	d122      	bne.n	800c7d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	f003 0308 	and.w	r3, r3, #8
 800c798:	2b08      	cmp	r3, #8
 800c79a:	d11b      	bne.n	800c7d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f06f 0208 	mvn.w	r2, #8
 800c7a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2204      	movs	r2, #4
 800c7aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	69db      	ldr	r3, [r3, #28]
 800c7b2:	f003 0303 	and.w	r3, r3, #3
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d003      	beq.n	800c7c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 f960 	bl	800ca80 <HAL_TIM_IC_CaptureCallback>
 800c7c0:	e005      	b.n	800c7ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 f953 	bl	800ca6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 f962 	bl	800ca92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	691b      	ldr	r3, [r3, #16]
 800c7da:	f003 0310 	and.w	r3, r3, #16
 800c7de:	2b10      	cmp	r3, #16
 800c7e0:	d122      	bne.n	800c828 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	68db      	ldr	r3, [r3, #12]
 800c7e8:	f003 0310 	and.w	r3, r3, #16
 800c7ec:	2b10      	cmp	r3, #16
 800c7ee:	d11b      	bne.n	800c828 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f06f 0210 	mvn.w	r2, #16
 800c7f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2208      	movs	r2, #8
 800c7fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	69db      	ldr	r3, [r3, #28]
 800c806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d003      	beq.n	800c816 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 f936 	bl	800ca80 <HAL_TIM_IC_CaptureCallback>
 800c814:	e005      	b.n	800c822 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 f929 	bl	800ca6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 f938 	bl	800ca92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2200      	movs	r2, #0
 800c826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	f003 0301 	and.w	r3, r3, #1
 800c832:	2b01      	cmp	r3, #1
 800c834:	d10e      	bne.n	800c854 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	f003 0301 	and.w	r3, r3, #1
 800c840:	2b01      	cmp	r3, #1
 800c842:	d107      	bne.n	800c854 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f06f 0201 	mvn.w	r2, #1
 800c84c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f7fc feea 	bl	8009628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	691b      	ldr	r3, [r3, #16]
 800c85a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c85e:	2b80      	cmp	r3, #128	@ 0x80
 800c860:	d10e      	bne.n	800c880 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c86c:	2b80      	cmp	r3, #128	@ 0x80
 800c86e:	d107      	bne.n	800c880 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 faa1 	bl	800cdc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	691b      	ldr	r3, [r3, #16]
 800c886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c88a:	2b40      	cmp	r3, #64	@ 0x40
 800c88c:	d10e      	bne.n	800c8ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c898:	2b40      	cmp	r3, #64	@ 0x40
 800c89a:	d107      	bne.n	800c8ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c8a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 f8fc 	bl	800caa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	691b      	ldr	r3, [r3, #16]
 800c8b2:	f003 0320 	and.w	r3, r3, #32
 800c8b6:	2b20      	cmp	r3, #32
 800c8b8:	d10e      	bne.n	800c8d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	f003 0320 	and.w	r3, r3, #32
 800c8c4:	2b20      	cmp	r3, #32
 800c8c6:	d107      	bne.n	800c8d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f06f 0220 	mvn.w	r2, #32
 800c8d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 fa6c 	bl	800cdb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c8d8:	bf00      	nop
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d101      	bne.n	800c8fc <HAL_TIM_ConfigClockSource+0x1c>
 800c8f8:	2302      	movs	r3, #2
 800c8fa:	e0b4      	b.n	800ca66 <HAL_TIM_ConfigClockSource+0x186>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2201      	movs	r2, #1
 800c900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2202      	movs	r2, #2
 800c908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c91a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c922:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	68ba      	ldr	r2, [r7, #8]
 800c92a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c934:	d03e      	beq.n	800c9b4 <HAL_TIM_ConfigClockSource+0xd4>
 800c936:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c93a:	f200 8087 	bhi.w	800ca4c <HAL_TIM_ConfigClockSource+0x16c>
 800c93e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c942:	f000 8086 	beq.w	800ca52 <HAL_TIM_ConfigClockSource+0x172>
 800c946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c94a:	d87f      	bhi.n	800ca4c <HAL_TIM_ConfigClockSource+0x16c>
 800c94c:	2b70      	cmp	r3, #112	@ 0x70
 800c94e:	d01a      	beq.n	800c986 <HAL_TIM_ConfigClockSource+0xa6>
 800c950:	2b70      	cmp	r3, #112	@ 0x70
 800c952:	d87b      	bhi.n	800ca4c <HAL_TIM_ConfigClockSource+0x16c>
 800c954:	2b60      	cmp	r3, #96	@ 0x60
 800c956:	d050      	beq.n	800c9fa <HAL_TIM_ConfigClockSource+0x11a>
 800c958:	2b60      	cmp	r3, #96	@ 0x60
 800c95a:	d877      	bhi.n	800ca4c <HAL_TIM_ConfigClockSource+0x16c>
 800c95c:	2b50      	cmp	r3, #80	@ 0x50
 800c95e:	d03c      	beq.n	800c9da <HAL_TIM_ConfigClockSource+0xfa>
 800c960:	2b50      	cmp	r3, #80	@ 0x50
 800c962:	d873      	bhi.n	800ca4c <HAL_TIM_ConfigClockSource+0x16c>
 800c964:	2b40      	cmp	r3, #64	@ 0x40
 800c966:	d058      	beq.n	800ca1a <HAL_TIM_ConfigClockSource+0x13a>
 800c968:	2b40      	cmp	r3, #64	@ 0x40
 800c96a:	d86f      	bhi.n	800ca4c <HAL_TIM_ConfigClockSource+0x16c>
 800c96c:	2b30      	cmp	r3, #48	@ 0x30
 800c96e:	d064      	beq.n	800ca3a <HAL_TIM_ConfigClockSource+0x15a>
 800c970:	2b30      	cmp	r3, #48	@ 0x30
 800c972:	d86b      	bhi.n	800ca4c <HAL_TIM_ConfigClockSource+0x16c>
 800c974:	2b20      	cmp	r3, #32
 800c976:	d060      	beq.n	800ca3a <HAL_TIM_ConfigClockSource+0x15a>
 800c978:	2b20      	cmp	r3, #32
 800c97a:	d867      	bhi.n	800ca4c <HAL_TIM_ConfigClockSource+0x16c>
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d05c      	beq.n	800ca3a <HAL_TIM_ConfigClockSource+0x15a>
 800c980:	2b10      	cmp	r3, #16
 800c982:	d05a      	beq.n	800ca3a <HAL_TIM_ConfigClockSource+0x15a>
 800c984:	e062      	b.n	800ca4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c996:	f000 f980 	bl	800cc9a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c9a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	68ba      	ldr	r2, [r7, #8]
 800c9b0:	609a      	str	r2, [r3, #8]
      break;
 800c9b2:	e04f      	b.n	800ca54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c9c4:	f000 f969 	bl	800cc9a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	689a      	ldr	r2, [r3, #8]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c9d6:	609a      	str	r2, [r3, #8]
      break;
 800c9d8:	e03c      	b.n	800ca54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	f000 f8e0 	bl	800cbac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2150      	movs	r1, #80	@ 0x50
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f000 f937 	bl	800cc66 <TIM_ITRx_SetConfig>
      break;
 800c9f8:	e02c      	b.n	800ca54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca06:	461a      	mov	r2, r3
 800ca08:	f000 f8fe 	bl	800cc08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2160      	movs	r1, #96	@ 0x60
 800ca12:	4618      	mov	r0, r3
 800ca14:	f000 f927 	bl	800cc66 <TIM_ITRx_SetConfig>
      break;
 800ca18:	e01c      	b.n	800ca54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca26:	461a      	mov	r2, r3
 800ca28:	f000 f8c0 	bl	800cbac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	2140      	movs	r1, #64	@ 0x40
 800ca32:	4618      	mov	r0, r3
 800ca34:	f000 f917 	bl	800cc66 <TIM_ITRx_SetConfig>
      break;
 800ca38:	e00c      	b.n	800ca54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4619      	mov	r1, r3
 800ca44:	4610      	mov	r0, r2
 800ca46:	f000 f90e 	bl	800cc66 <TIM_ITRx_SetConfig>
      break;
 800ca4a:	e003      	b.n	800ca54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	73fb      	strb	r3, [r7, #15]
      break;
 800ca50:	e000      	b.n	800ca54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ca52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2201      	movs	r2, #1
 800ca58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ca64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3710      	adds	r7, #16
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca6e:	b480      	push	{r7}
 800ca70:	b083      	sub	sp, #12
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ca76:	bf00      	nop
 800ca78:	370c      	adds	r7, #12
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bc80      	pop	{r7}
 800ca7e:	4770      	bx	lr

0800ca80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca88:	bf00      	nop
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bc80      	pop	{r7}
 800ca90:	4770      	bx	lr

0800ca92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ca92:	b480      	push	{r7}
 800ca94:	b083      	sub	sp, #12
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ca9a:	bf00      	nop
 800ca9c:	370c      	adds	r7, #12
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bc80      	pop	{r7}
 800caa2:	4770      	bx	lr

0800caa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800caac:	bf00      	nop
 800caae:	370c      	adds	r7, #12
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bc80      	pop	{r7}
 800cab4:	4770      	bx	lr
	...

0800cab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4a33      	ldr	r2, [pc, #204]	@ (800cb98 <TIM_Base_SetConfig+0xe0>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d013      	beq.n	800caf8 <TIM_Base_SetConfig+0x40>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	4a32      	ldr	r2, [pc, #200]	@ (800cb9c <TIM_Base_SetConfig+0xe4>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d00f      	beq.n	800caf8 <TIM_Base_SetConfig+0x40>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cade:	d00b      	beq.n	800caf8 <TIM_Base_SetConfig+0x40>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	4a2f      	ldr	r2, [pc, #188]	@ (800cba0 <TIM_Base_SetConfig+0xe8>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d007      	beq.n	800caf8 <TIM_Base_SetConfig+0x40>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	4a2e      	ldr	r2, [pc, #184]	@ (800cba4 <TIM_Base_SetConfig+0xec>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d003      	beq.n	800caf8 <TIM_Base_SetConfig+0x40>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	4a2d      	ldr	r2, [pc, #180]	@ (800cba8 <TIM_Base_SetConfig+0xf0>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d108      	bne.n	800cb0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cafe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	4313      	orrs	r3, r2
 800cb08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4a22      	ldr	r2, [pc, #136]	@ (800cb98 <TIM_Base_SetConfig+0xe0>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d013      	beq.n	800cb3a <TIM_Base_SetConfig+0x82>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	4a21      	ldr	r2, [pc, #132]	@ (800cb9c <TIM_Base_SetConfig+0xe4>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d00f      	beq.n	800cb3a <TIM_Base_SetConfig+0x82>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb20:	d00b      	beq.n	800cb3a <TIM_Base_SetConfig+0x82>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	4a1e      	ldr	r2, [pc, #120]	@ (800cba0 <TIM_Base_SetConfig+0xe8>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d007      	beq.n	800cb3a <TIM_Base_SetConfig+0x82>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	4a1d      	ldr	r2, [pc, #116]	@ (800cba4 <TIM_Base_SetConfig+0xec>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d003      	beq.n	800cb3a <TIM_Base_SetConfig+0x82>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4a1c      	ldr	r2, [pc, #112]	@ (800cba8 <TIM_Base_SetConfig+0xf0>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d108      	bne.n	800cb4c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	68db      	ldr	r3, [r3, #12]
 800cb46:	68fa      	ldr	r2, [r7, #12]
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	695b      	ldr	r3, [r3, #20]
 800cb56:	4313      	orrs	r3, r2
 800cb58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	689a      	ldr	r2, [r3, #8]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	4a09      	ldr	r2, [pc, #36]	@ (800cb98 <TIM_Base_SetConfig+0xe0>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d003      	beq.n	800cb80 <TIM_Base_SetConfig+0xc8>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	4a08      	ldr	r2, [pc, #32]	@ (800cb9c <TIM_Base_SetConfig+0xe4>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d103      	bne.n	800cb88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	691a      	ldr	r2, [r3, #16]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	615a      	str	r2, [r3, #20]
}
 800cb8e:	bf00      	nop
 800cb90:	3714      	adds	r7, #20
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bc80      	pop	{r7}
 800cb96:	4770      	bx	lr
 800cb98:	40012c00 	.word	0x40012c00
 800cb9c:	40013400 	.word	0x40013400
 800cba0:	40000400 	.word	0x40000400
 800cba4:	40000800 	.word	0x40000800
 800cba8:	40000c00 	.word	0x40000c00

0800cbac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b087      	sub	sp, #28
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6a1b      	ldr	r3, [r3, #32]
 800cbbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	6a1b      	ldr	r3, [r3, #32]
 800cbc2:	f023 0201 	bic.w	r2, r3, #1
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	699b      	ldr	r3, [r3, #24]
 800cbce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cbd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	011b      	lsls	r3, r3, #4
 800cbdc:	693a      	ldr	r2, [r7, #16]
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	f023 030a 	bic.w	r3, r3, #10
 800cbe8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cbea:	697a      	ldr	r2, [r7, #20]
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	693a      	ldr	r2, [r7, #16]
 800cbf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	697a      	ldr	r2, [r7, #20]
 800cbfc:	621a      	str	r2, [r3, #32]
}
 800cbfe:	bf00      	nop
 800cc00:	371c      	adds	r7, #28
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bc80      	pop	{r7}
 800cc06:	4770      	bx	lr

0800cc08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b087      	sub	sp, #28
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	60f8      	str	r0, [r7, #12]
 800cc10:	60b9      	str	r1, [r7, #8]
 800cc12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	6a1b      	ldr	r3, [r3, #32]
 800cc18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	6a1b      	ldr	r3, [r3, #32]
 800cc1e:	f023 0210 	bic.w	r2, r3, #16
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	699b      	ldr	r3, [r3, #24]
 800cc2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cc32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	031b      	lsls	r3, r3, #12
 800cc38:	693a      	ldr	r2, [r7, #16]
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cc44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	011b      	lsls	r3, r3, #4
 800cc4a:	697a      	ldr	r2, [r7, #20]
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	693a      	ldr	r2, [r7, #16]
 800cc54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	697a      	ldr	r2, [r7, #20]
 800cc5a:	621a      	str	r2, [r3, #32]
}
 800cc5c:	bf00      	nop
 800cc5e:	371c      	adds	r7, #28
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bc80      	pop	{r7}
 800cc64:	4770      	bx	lr

0800cc66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc66:	b480      	push	{r7}
 800cc68:	b085      	sub	sp, #20
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
 800cc6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	689b      	ldr	r3, [r3, #8]
 800cc74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc7e:	683a      	ldr	r2, [r7, #0]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	4313      	orrs	r3, r2
 800cc84:	f043 0307 	orr.w	r3, r3, #7
 800cc88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	68fa      	ldr	r2, [r7, #12]
 800cc8e:	609a      	str	r2, [r3, #8]
}
 800cc90:	bf00      	nop
 800cc92:	3714      	adds	r7, #20
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bc80      	pop	{r7}
 800cc98:	4770      	bx	lr

0800cc9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cc9a:	b480      	push	{r7}
 800cc9c:	b087      	sub	sp, #28
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	60f8      	str	r0, [r7, #12]
 800cca2:	60b9      	str	r1, [r7, #8]
 800cca4:	607a      	str	r2, [r7, #4]
 800cca6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ccb4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	021a      	lsls	r2, r3, #8
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	431a      	orrs	r2, r3
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	697a      	ldr	r2, [r7, #20]
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	697a      	ldr	r2, [r7, #20]
 800cccc:	609a      	str	r2, [r3, #8]
}
 800ccce:	bf00      	nop
 800ccd0:	371c      	adds	r7, #28
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bc80      	pop	{r7}
 800ccd6:	4770      	bx	lr

0800ccd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b085      	sub	sp, #20
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d101      	bne.n	800ccf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ccec:	2302      	movs	r3, #2
 800ccee:	e050      	b.n	800cd92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2202      	movs	r2, #2
 800ccfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	689b      	ldr	r3, [r3, #8]
 800cd0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	68fa      	ldr	r2, [r7, #12]
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4a1b      	ldr	r2, [pc, #108]	@ (800cd9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d018      	beq.n	800cd66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a19      	ldr	r2, [pc, #100]	@ (800cda0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d013      	beq.n	800cd66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd46:	d00e      	beq.n	800cd66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a15      	ldr	r2, [pc, #84]	@ (800cda4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d009      	beq.n	800cd66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4a14      	ldr	r2, [pc, #80]	@ (800cda8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d004      	beq.n	800cd66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a12      	ldr	r2, [pc, #72]	@ (800cdac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d10c      	bne.n	800cd80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	4313      	orrs	r3, r2
 800cd76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	68ba      	ldr	r2, [r7, #8]
 800cd7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2201      	movs	r2, #1
 800cd84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3714      	adds	r7, #20
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bc80      	pop	{r7}
 800cd9a:	4770      	bx	lr
 800cd9c:	40012c00 	.word	0x40012c00
 800cda0:	40013400 	.word	0x40013400
 800cda4:	40000400 	.word	0x40000400
 800cda8:	40000800 	.word	0x40000800
 800cdac:	40000c00 	.word	0x40000c00

0800cdb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b083      	sub	sp, #12
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cdb8:	bf00      	nop
 800cdba:	370c      	adds	r7, #12
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bc80      	pop	{r7}
 800cdc0:	4770      	bx	lr

0800cdc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cdc2:	b480      	push	{r7}
 800cdc4:	b083      	sub	sp, #12
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cdca:	bf00      	nop
 800cdcc:	370c      	adds	r7, #12
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bc80      	pop	{r7}
 800cdd2:	4770      	bx	lr

0800cdd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d101      	bne.n	800cde6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cde2:	2301      	movs	r3, #1
 800cde4:	e042      	b.n	800ce6c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d106      	bne.n	800ce00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f7fc ffa0 	bl	8009d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2224      	movs	r2, #36	@ 0x24
 800ce04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	68da      	ldr	r2, [r3, #12]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ce16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 f82b 	bl	800ce74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	691a      	ldr	r2, [r3, #16]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ce2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	695a      	ldr	r2, [r3, #20]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ce3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	68da      	ldr	r2, [r3, #12]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ce4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2220      	movs	r2, #32
 800ce58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2220      	movs	r2, #32
 800ce60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2200      	movs	r2, #0
 800ce68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3708      	adds	r7, #8
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	691b      	ldr	r3, [r3, #16]
 800ce82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	68da      	ldr	r2, [r3, #12]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	430a      	orrs	r2, r1
 800ce90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	689a      	ldr	r2, [r3, #8]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	691b      	ldr	r3, [r3, #16]
 800ce9a:	431a      	orrs	r2, r3
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	695b      	ldr	r3, [r3, #20]
 800cea0:	4313      	orrs	r3, r2
 800cea2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800ceae:	f023 030c 	bic.w	r3, r3, #12
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	6812      	ldr	r2, [r2, #0]
 800ceb6:	68b9      	ldr	r1, [r7, #8]
 800ceb8:	430b      	orrs	r3, r1
 800ceba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	695b      	ldr	r3, [r3, #20]
 800cec2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	699a      	ldr	r2, [r3, #24]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	430a      	orrs	r2, r1
 800ced0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4a2c      	ldr	r2, [pc, #176]	@ (800cf88 <UART_SetConfig+0x114>)
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d103      	bne.n	800cee4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cedc:	f7ff fb16 	bl	800c50c <HAL_RCC_GetPCLK2Freq>
 800cee0:	60f8      	str	r0, [r7, #12]
 800cee2:	e002      	b.n	800ceea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cee4:	f7ff fafe 	bl	800c4e4 <HAL_RCC_GetPCLK1Freq>
 800cee8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ceea:	68fa      	ldr	r2, [r7, #12]
 800ceec:	4613      	mov	r3, r2
 800ceee:	009b      	lsls	r3, r3, #2
 800cef0:	4413      	add	r3, r2
 800cef2:	009a      	lsls	r2, r3, #2
 800cef4:	441a      	add	r2, r3
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf00:	4a22      	ldr	r2, [pc, #136]	@ (800cf8c <UART_SetConfig+0x118>)
 800cf02:	fba2 2303 	umull	r2, r3, r2, r3
 800cf06:	095b      	lsrs	r3, r3, #5
 800cf08:	0119      	lsls	r1, r3, #4
 800cf0a:	68fa      	ldr	r2, [r7, #12]
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	4413      	add	r3, r2
 800cf12:	009a      	lsls	r2, r3, #2
 800cf14:	441a      	add	r2, r3
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	fbb2 f2f3 	udiv	r2, r2, r3
 800cf20:	4b1a      	ldr	r3, [pc, #104]	@ (800cf8c <UART_SetConfig+0x118>)
 800cf22:	fba3 0302 	umull	r0, r3, r3, r2
 800cf26:	095b      	lsrs	r3, r3, #5
 800cf28:	2064      	movs	r0, #100	@ 0x64
 800cf2a:	fb00 f303 	mul.w	r3, r0, r3
 800cf2e:	1ad3      	subs	r3, r2, r3
 800cf30:	011b      	lsls	r3, r3, #4
 800cf32:	3332      	adds	r3, #50	@ 0x32
 800cf34:	4a15      	ldr	r2, [pc, #84]	@ (800cf8c <UART_SetConfig+0x118>)
 800cf36:	fba2 2303 	umull	r2, r3, r2, r3
 800cf3a:	095b      	lsrs	r3, r3, #5
 800cf3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cf40:	4419      	add	r1, r3
 800cf42:	68fa      	ldr	r2, [r7, #12]
 800cf44:	4613      	mov	r3, r2
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	4413      	add	r3, r2
 800cf4a:	009a      	lsls	r2, r3, #2
 800cf4c:	441a      	add	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	fbb2 f2f3 	udiv	r2, r2, r3
 800cf58:	4b0c      	ldr	r3, [pc, #48]	@ (800cf8c <UART_SetConfig+0x118>)
 800cf5a:	fba3 0302 	umull	r0, r3, r3, r2
 800cf5e:	095b      	lsrs	r3, r3, #5
 800cf60:	2064      	movs	r0, #100	@ 0x64
 800cf62:	fb00 f303 	mul.w	r3, r0, r3
 800cf66:	1ad3      	subs	r3, r2, r3
 800cf68:	011b      	lsls	r3, r3, #4
 800cf6a:	3332      	adds	r3, #50	@ 0x32
 800cf6c:	4a07      	ldr	r2, [pc, #28]	@ (800cf8c <UART_SetConfig+0x118>)
 800cf6e:	fba2 2303 	umull	r2, r3, r2, r3
 800cf72:	095b      	lsrs	r3, r3, #5
 800cf74:	f003 020f 	and.w	r2, r3, #15
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	440a      	add	r2, r1
 800cf7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cf80:	bf00      	nop
 800cf82:	3710      	adds	r7, #16
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	40013800 	.word	0x40013800
 800cf8c:	51eb851f 	.word	0x51eb851f

0800cf90 <__itoa>:
 800cf90:	1e93      	subs	r3, r2, #2
 800cf92:	2b22      	cmp	r3, #34	@ 0x22
 800cf94:	b510      	push	{r4, lr}
 800cf96:	460c      	mov	r4, r1
 800cf98:	d904      	bls.n	800cfa4 <__itoa+0x14>
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	461c      	mov	r4, r3
 800cf9e:	700b      	strb	r3, [r1, #0]
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	bd10      	pop	{r4, pc}
 800cfa4:	2a0a      	cmp	r2, #10
 800cfa6:	d109      	bne.n	800cfbc <__itoa+0x2c>
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	da07      	bge.n	800cfbc <__itoa+0x2c>
 800cfac:	232d      	movs	r3, #45	@ 0x2d
 800cfae:	700b      	strb	r3, [r1, #0]
 800cfb0:	2101      	movs	r1, #1
 800cfb2:	4240      	negs	r0, r0
 800cfb4:	4421      	add	r1, r4
 800cfb6:	f000 f805 	bl	800cfc4 <__utoa>
 800cfba:	e7f1      	b.n	800cfa0 <__itoa+0x10>
 800cfbc:	2100      	movs	r1, #0
 800cfbe:	e7f9      	b.n	800cfb4 <__itoa+0x24>

0800cfc0 <itoa>:
 800cfc0:	f7ff bfe6 	b.w	800cf90 <__itoa>

0800cfc4 <__utoa>:
 800cfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfc6:	b08b      	sub	sp, #44	@ 0x2c
 800cfc8:	4605      	mov	r5, r0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	466e      	mov	r6, sp
 800cfce:	4c1d      	ldr	r4, [pc, #116]	@ (800d044 <__utoa+0x80>)
 800cfd0:	f104 0c20 	add.w	ip, r4, #32
 800cfd4:	4637      	mov	r7, r6
 800cfd6:	6820      	ldr	r0, [r4, #0]
 800cfd8:	6861      	ldr	r1, [r4, #4]
 800cfda:	3408      	adds	r4, #8
 800cfdc:	c703      	stmia	r7!, {r0, r1}
 800cfde:	4564      	cmp	r4, ip
 800cfe0:	463e      	mov	r6, r7
 800cfe2:	d1f7      	bne.n	800cfd4 <__utoa+0x10>
 800cfe4:	7921      	ldrb	r1, [r4, #4]
 800cfe6:	6820      	ldr	r0, [r4, #0]
 800cfe8:	7139      	strb	r1, [r7, #4]
 800cfea:	1e91      	subs	r1, r2, #2
 800cfec:	2922      	cmp	r1, #34	@ 0x22
 800cfee:	6038      	str	r0, [r7, #0]
 800cff0:	f04f 0100 	mov.w	r1, #0
 800cff4:	d904      	bls.n	800d000 <__utoa+0x3c>
 800cff6:	7019      	strb	r1, [r3, #0]
 800cff8:	460b      	mov	r3, r1
 800cffa:	4618      	mov	r0, r3
 800cffc:	b00b      	add	sp, #44	@ 0x2c
 800cffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d000:	1e58      	subs	r0, r3, #1
 800d002:	4684      	mov	ip, r0
 800d004:	fbb5 f7f2 	udiv	r7, r5, r2
 800d008:	fb02 5617 	mls	r6, r2, r7, r5
 800d00c:	3628      	adds	r6, #40	@ 0x28
 800d00e:	446e      	add	r6, sp
 800d010:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d014:	460c      	mov	r4, r1
 800d016:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d01a:	462e      	mov	r6, r5
 800d01c:	42b2      	cmp	r2, r6
 800d01e:	463d      	mov	r5, r7
 800d020:	f101 0101 	add.w	r1, r1, #1
 800d024:	d9ee      	bls.n	800d004 <__utoa+0x40>
 800d026:	2200      	movs	r2, #0
 800d028:	545a      	strb	r2, [r3, r1]
 800d02a:	1919      	adds	r1, r3, r4
 800d02c:	1aa5      	subs	r5, r4, r2
 800d02e:	42aa      	cmp	r2, r5
 800d030:	dae3      	bge.n	800cffa <__utoa+0x36>
 800d032:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d036:	780e      	ldrb	r6, [r1, #0]
 800d038:	3201      	adds	r2, #1
 800d03a:	7006      	strb	r6, [r0, #0]
 800d03c:	f801 5901 	strb.w	r5, [r1], #-1
 800d040:	e7f4      	b.n	800d02c <__utoa+0x68>
 800d042:	bf00      	nop
 800d044:	0800d142 	.word	0x0800d142

0800d048 <memset>:
 800d048:	4603      	mov	r3, r0
 800d04a:	4402      	add	r2, r0
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d100      	bne.n	800d052 <memset+0xa>
 800d050:	4770      	bx	lr
 800d052:	f803 1b01 	strb.w	r1, [r3], #1
 800d056:	e7f9      	b.n	800d04c <memset+0x4>

0800d058 <__libc_init_array>:
 800d058:	b570      	push	{r4, r5, r6, lr}
 800d05a:	2600      	movs	r6, #0
 800d05c:	4d0c      	ldr	r5, [pc, #48]	@ (800d090 <__libc_init_array+0x38>)
 800d05e:	4c0d      	ldr	r4, [pc, #52]	@ (800d094 <__libc_init_array+0x3c>)
 800d060:	1b64      	subs	r4, r4, r5
 800d062:	10a4      	asrs	r4, r4, #2
 800d064:	42a6      	cmp	r6, r4
 800d066:	d109      	bne.n	800d07c <__libc_init_array+0x24>
 800d068:	f000 f81a 	bl	800d0a0 <_init>
 800d06c:	2600      	movs	r6, #0
 800d06e:	4d0a      	ldr	r5, [pc, #40]	@ (800d098 <__libc_init_array+0x40>)
 800d070:	4c0a      	ldr	r4, [pc, #40]	@ (800d09c <__libc_init_array+0x44>)
 800d072:	1b64      	subs	r4, r4, r5
 800d074:	10a4      	asrs	r4, r4, #2
 800d076:	42a6      	cmp	r6, r4
 800d078:	d105      	bne.n	800d086 <__libc_init_array+0x2e>
 800d07a:	bd70      	pop	{r4, r5, r6, pc}
 800d07c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d080:	4798      	blx	r3
 800d082:	3601      	adds	r6, #1
 800d084:	e7ee      	b.n	800d064 <__libc_init_array+0xc>
 800d086:	f855 3b04 	ldr.w	r3, [r5], #4
 800d08a:	4798      	blx	r3
 800d08c:	3601      	adds	r6, #1
 800d08e:	e7f2      	b.n	800d076 <__libc_init_array+0x1e>
 800d090:	0800d168 	.word	0x0800d168
 800d094:	0800d168 	.word	0x0800d168
 800d098:	0800d168 	.word	0x0800d168
 800d09c:	0800d16c 	.word	0x0800d16c

0800d0a0 <_init>:
 800d0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a2:	bf00      	nop
 800d0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0a6:	bc08      	pop	{r3}
 800d0a8:	469e      	mov	lr, r3
 800d0aa:	4770      	bx	lr

0800d0ac <_fini>:
 800d0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ae:	bf00      	nop
 800d0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0b2:	bc08      	pop	{r3}
 800d0b4:	469e      	mov	lr, r3
 800d0b6:	4770      	bx	lr
