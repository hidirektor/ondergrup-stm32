
ESP_Version_3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c15c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800c340  0800c340  0000d340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c40c  0800c40c  0000ece4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c40c  0800c40c  0000d40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c414  0800c414  0000ece4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c414  0800c414  0000d414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c418  0800c418  0000d418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ce4  20000000  0800c41c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000810  20000ce4  0800d100  0000ece4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014f4  0800d100  0000f4f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000ece4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160de  00000000  00000000  0000ed0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd9  00000000  00000000  00024deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00027bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7d  00000000  00000000  00028d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b9b1  00000000  00000000  00029ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a147  00000000  00000000  00045466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f920  00000000  00000000  0005f5ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000feecd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004810  00000000  00000000  000fef10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00103720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000ce4 	.word	0x20000ce4
 8000200:	00000000 	.word	0x00000000
 8000204:	0800c328 	.word	0x0800c328

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000ce8 	.word	0x20000ce8
 8000220:	0800c328 	.word	0x0800c328

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	@ 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9a      	ldr	r3, [pc, #616]	@ (80004b0 <eepromKontrol+0x27c>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	@ 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	@ 0xa0
 800024e:	4899      	ldr	r0, [pc, #612]	@ (80004b4 <eepromKontrol+0x280>)
 8000250:	f00a f80c 	bl	800a26c <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000258:	f008 ffc6 	bl	80091e8 <HAL_Delay>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	setupCompleted = eepromData[0];
 800025c:	4b94      	ldr	r3, [pc, #592]	@ (80004b0 <eepromKontrol+0x27c>)
 800025e:	781a      	ldrb	r2, [r3, #0]
 8000260:	4b95      	ldr	r3, [pc, #596]	@ (80004b8 <eepromKontrol+0x284>)
 8000262:	701a      	strb	r2, [r3, #0]
	kaydedilenDeger = eepromData[3];
 8000264:	4b92      	ldr	r3, [pc, #584]	@ (80004b0 <eepromKontrol+0x27c>)
 8000266:	78da      	ldrb	r2, [r3, #3]
 8000268:	4b94      	ldr	r3, [pc, #592]	@ (80004bc <eepromKontrol+0x288>)
 800026a:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800026c:	4b90      	ldr	r3, [pc, #576]	@ (80004b0 <eepromKontrol+0x27c>)
 800026e:	785a      	ldrb	r2, [r3, #1]
 8000270:	4b93      	ldr	r3, [pc, #588]	@ (80004c0 <eepromKontrol+0x28c>)
 8000272:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000274:	4b8e      	ldr	r3, [pc, #568]	@ (80004b0 <eepromKontrol+0x27c>)
 8000276:	789a      	ldrb	r2, [r3, #2]
 8000278:	4b92      	ldr	r3, [pc, #584]	@ (80004c4 <eepromKontrol+0x290>)
 800027a:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800027c:	4b8c      	ldr	r3, [pc, #560]	@ (80004b0 <eepromKontrol+0x27c>)
 800027e:	791a      	ldrb	r2, [r3, #4]
 8000280:	4b91      	ldr	r3, [pc, #580]	@ (80004c8 <eepromKontrol+0x294>)
 8000282:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000284:	4b8a      	ldr	r3, [pc, #552]	@ (80004b0 <eepromKontrol+0x27c>)
 8000286:	795a      	ldrb	r2, [r3, #5]
 8000288:	4b90      	ldr	r3, [pc, #576]	@ (80004cc <eepromKontrol+0x298>)
 800028a:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800028c:	4b88      	ldr	r3, [pc, #544]	@ (80004b0 <eepromKontrol+0x27c>)
 800028e:	799a      	ldrb	r2, [r3, #6]
 8000290:	4b8f      	ldr	r3, [pc, #572]	@ (80004d0 <eepromKontrol+0x29c>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8000294:	4b86      	ldr	r3, [pc, #536]	@ (80004b0 <eepromKontrol+0x27c>)
 8000296:	79da      	ldrb	r2, [r3, #7]
 8000298:	4b8e      	ldr	r3, [pc, #568]	@ (80004d4 <eepromKontrol+0x2a0>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800029c:	4b84      	ldr	r3, [pc, #528]	@ (80004b0 <eepromKontrol+0x27c>)
 800029e:	7a1a      	ldrb	r2, [r3, #8]
 80002a0:	4b8d      	ldr	r3, [pc, #564]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80002a4:	4b82      	ldr	r3, [pc, #520]	@ (80004b0 <eepromKontrol+0x27c>)
 80002a6:	7a5a      	ldrb	r2, [r3, #9]
 80002a8:	4b8c      	ldr	r3, [pc, #560]	@ (80004dc <eepromKontrol+0x2a8>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002ac:	4b80      	ldr	r3, [pc, #512]	@ (80004b0 <eepromKontrol+0x27c>)
 80002ae:	7a9a      	ldrb	r2, [r3, #10]
 80002b0:	4b8b      	ldr	r3, [pc, #556]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002b4:	4b7e      	ldr	r3, [pc, #504]	@ (80004b0 <eepromKontrol+0x27c>)
 80002b6:	7ada      	ldrb	r2, [r3, #11]
 80002b8:	4b8a      	ldr	r3, [pc, #552]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002bc:	4b7c      	ldr	r3, [pc, #496]	@ (80004b0 <eepromKontrol+0x27c>)
 80002be:	7b1a      	ldrb	r2, [r3, #12]
 80002c0:	4b89      	ldr	r3, [pc, #548]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002c2:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002c4:	4b7a      	ldr	r3, [pc, #488]	@ (80004b0 <eepromKontrol+0x27c>)
 80002c6:	7b5a      	ldrb	r2, [r3, #13]
 80002c8:	4b88      	ldr	r3, [pc, #544]	@ (80004ec <eepromKontrol+0x2b8>)
 80002ca:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002cc:	4b78      	ldr	r3, [pc, #480]	@ (80004b0 <eepromKontrol+0x27c>)
 80002ce:	7b9a      	ldrb	r2, [r3, #14]
 80002d0:	4b87      	ldr	r3, [pc, #540]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002d4:	4b76      	ldr	r3, [pc, #472]	@ (80004b0 <eepromKontrol+0x27c>)
 80002d6:	7bda      	ldrb	r2, [r3, #15]
 80002d8:	4b86      	ldr	r3, [pc, #536]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002dc:	4b74      	ldr	r3, [pc, #464]	@ (80004b0 <eepromKontrol+0x27c>)
 80002de:	7c1a      	ldrb	r2, [r3, #16]
 80002e0:	4b85      	ldr	r3, [pc, #532]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002e4:	4b72      	ldr	r3, [pc, #456]	@ (80004b0 <eepromKontrol+0x27c>)
 80002e6:	7c5a      	ldrb	r2, [r3, #17]
 80002e8:	4b84      	ldr	r3, [pc, #528]	@ (80004fc <eepromKontrol+0x2c8>)
 80002ea:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002ec:	4b70      	ldr	r3, [pc, #448]	@ (80004b0 <eepromKontrol+0x27c>)
 80002ee:	7c9a      	ldrb	r2, [r3, #18]
 80002f0:	4b83      	ldr	r3, [pc, #524]	@ (8000500 <eepromKontrol+0x2cc>)
 80002f2:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002f4:	4b6e      	ldr	r3, [pc, #440]	@ (80004b0 <eepromKontrol+0x27c>)
 80002f6:	7cda      	ldrb	r2, [r3, #19]
 80002f8:	4b82      	ldr	r3, [pc, #520]	@ (8000504 <eepromKontrol+0x2d0>)
 80002fa:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002fc:	4b6c      	ldr	r3, [pc, #432]	@ (80004b0 <eepromKontrol+0x27c>)
 80002fe:	7d1a      	ldrb	r2, [r3, #20]
 8000300:	4b81      	ldr	r3, [pc, #516]	@ (8000508 <eepromKontrol+0x2d4>)
 8000302:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8000304:	4b6a      	ldr	r3, [pc, #424]	@ (80004b0 <eepromKontrol+0x27c>)
 8000306:	7d5a      	ldrb	r2, [r3, #21]
 8000308:	4b80      	ldr	r3, [pc, #512]	@ (800050c <eepromKontrol+0x2d8>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 800030c:	4b68      	ldr	r3, [pc, #416]	@ (80004b0 <eepromKontrol+0x27c>)
 800030e:	7d9a      	ldrb	r2, [r3, #22]
 8000310:	4b7f      	ldr	r3, [pc, #508]	@ (8000510 <eepromKontrol+0x2dc>)
 8000312:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000314:	4b66      	ldr	r3, [pc, #408]	@ (80004b0 <eepromKontrol+0x27c>)
 8000316:	7dda      	ldrb	r2, [r3, #23]
 8000318:	4b7e      	ldr	r3, [pc, #504]	@ (8000514 <eepromKontrol+0x2e0>)
 800031a:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 800031c:	4b64      	ldr	r3, [pc, #400]	@ (80004b0 <eepromKontrol+0x27c>)
 800031e:	7e1a      	ldrb	r2, [r3, #24]
 8000320:	4b7d      	ldr	r3, [pc, #500]	@ (8000518 <eepromKontrol+0x2e4>)
 8000322:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000324:	4b62      	ldr	r3, [pc, #392]	@ (80004b0 <eepromKontrol+0x27c>)
 8000326:	7e5a      	ldrb	r2, [r3, #25]
 8000328:	4b7c      	ldr	r3, [pc, #496]	@ (800051c <eepromKontrol+0x2e8>)
 800032a:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 800032c:	4b60      	ldr	r3, [pc, #384]	@ (80004b0 <eepromKontrol+0x27c>)
 800032e:	7e9a      	ldrb	r2, [r3, #26]
 8000330:	4b7b      	ldr	r3, [pc, #492]	@ (8000520 <eepromKontrol+0x2ec>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000334:	4b5e      	ldr	r3, [pc, #376]	@ (80004b0 <eepromKontrol+0x27c>)
 8000336:	7eda      	ldrb	r2, [r3, #27]
 8000338:	4b7a      	ldr	r3, [pc, #488]	@ (8000524 <eepromKontrol+0x2f0>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 800033c:	4b5c      	ldr	r3, [pc, #368]	@ (80004b0 <eepromKontrol+0x27c>)
 800033e:	7f1a      	ldrb	r2, [r3, #28]
 8000340:	4b79      	ldr	r3, [pc, #484]	@ (8000528 <eepromKontrol+0x2f4>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000344:	4b5a      	ldr	r3, [pc, #360]	@ (80004b0 <eepromKontrol+0x27c>)
 8000346:	7f5a      	ldrb	r2, [r3, #29]
 8000348:	4b78      	ldr	r3, [pc, #480]	@ (800052c <eepromKontrol+0x2f8>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 800034c:	4b58      	ldr	r3, [pc, #352]	@ (80004b0 <eepromKontrol+0x27c>)
 800034e:	7f9a      	ldrb	r2, [r3, #30]
 8000350:	4b77      	ldr	r3, [pc, #476]	@ (8000530 <eepromKontrol+0x2fc>)
 8000352:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000354:	4b56      	ldr	r3, [pc, #344]	@ (80004b0 <eepromKontrol+0x27c>)
 8000356:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800035a:	4b76      	ldr	r3, [pc, #472]	@ (8000534 <eepromKontrol+0x300>)
 800035c:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 800035e:	4b54      	ldr	r3, [pc, #336]	@ (80004b0 <eepromKontrol+0x27c>)
 8000360:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000364:	4b74      	ldr	r3, [pc, #464]	@ (8000538 <eepromKontrol+0x304>)
 8000366:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8000368:	4b51      	ldr	r3, [pc, #324]	@ (80004b0 <eepromKontrol+0x27c>)
 800036a:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800036e:	4b73      	ldr	r3, [pc, #460]	@ (800053c <eepromKontrol+0x308>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000372:	4b4f      	ldr	r3, [pc, #316]	@ (80004b0 <eepromKontrol+0x27c>)
 8000374:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000378:	4b71      	ldr	r3, [pc, #452]	@ (8000540 <eepromKontrol+0x30c>)
 800037a:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800037c:	4b4c      	ldr	r3, [pc, #304]	@ (80004b0 <eepromKontrol+0x27c>)
 800037e:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000382:	4b70      	ldr	r3, [pc, #448]	@ (8000544 <eepromKontrol+0x310>)
 8000384:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000386:	4b4a      	ldr	r3, [pc, #296]	@ (80004b0 <eepromKontrol+0x27c>)
 8000388:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800038c:	4b6e      	ldr	r3, [pc, #440]	@ (8000548 <eepromKontrol+0x314>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8000390:	4b47      	ldr	r3, [pc, #284]	@ (80004b0 <eepromKontrol+0x27c>)
 8000392:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8000396:	4b6d      	ldr	r3, [pc, #436]	@ (800054c <eepromKontrol+0x318>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800039a:	4b45      	ldr	r3, [pc, #276]	@ (80004b0 <eepromKontrol+0x27c>)
 800039c:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80003a0:	4b6b      	ldr	r3, [pc, #428]	@ (8000550 <eepromKontrol+0x31c>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003a4:	4b42      	ldr	r3, [pc, #264]	@ (80004b0 <eepromKontrol+0x27c>)
 80003a6:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003aa:	4b6a      	ldr	r3, [pc, #424]	@ (8000554 <eepromKontrol+0x320>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003ae:	4b40      	ldr	r3, [pc, #256]	@ (80004b0 <eepromKontrol+0x27c>)
 80003b0:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003b4:	4b68      	ldr	r3, [pc, #416]	@ (8000558 <eepromKontrol+0x324>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003b8:	4b3d      	ldr	r3, [pc, #244]	@ (80004b0 <eepromKontrol+0x27c>)
 80003ba:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003be:	4b67      	ldr	r3, [pc, #412]	@ (800055c <eepromKontrol+0x328>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003c2:	4b3b      	ldr	r3, [pc, #236]	@ (80004b0 <eepromKontrol+0x27c>)
 80003c4:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003c8:	4b65      	ldr	r3, [pc, #404]	@ (8000560 <eepromKontrol+0x32c>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003cc:	4b38      	ldr	r3, [pc, #224]	@ (80004b0 <eepromKontrol+0x27c>)
 80003ce:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003d2:	4b64      	ldr	r3, [pc, #400]	@ (8000564 <eepromKontrol+0x330>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003d6:	4b36      	ldr	r3, [pc, #216]	@ (80004b0 <eepromKontrol+0x27c>)
 80003d8:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003dc:	4b62      	ldr	r3, [pc, #392]	@ (8000568 <eepromKontrol+0x334>)
 80003de:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003e0:	4b37      	ldr	r3, [pc, #220]	@ (80004c0 <eepromKontrol+0x28c>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d902      	bls.n	80003ee <eepromKontrol+0x1ba>
	    calismaSekli=0;
 80003e8:	4b35      	ldr	r3, [pc, #212]	@ (80004c0 <eepromKontrol+0x28c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003ee:	4b35      	ldr	r3, [pc, #212]	@ (80004c4 <eepromKontrol+0x290>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d902      	bls.n	80003fc <eepromKontrol+0x1c8>
	    emniyetCercevesi=1;
 80003f6:	4b33      	ldr	r3, [pc, #204]	@ (80004c4 <eepromKontrol+0x290>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80003fc:	4b32      	ldr	r3, [pc, #200]	@ (80004c8 <eepromKontrol+0x294>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d902      	bls.n	800040a <eepromKontrol+0x1d6>
	    yavaslamaLimit=0;
 8000404:	4b30      	ldr	r3, [pc, #192]	@ (80004c8 <eepromKontrol+0x294>)
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800040a:	4b30      	ldr	r3, [pc, #192]	@ (80004cc <eepromKontrol+0x298>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d902      	bls.n	8000418 <eepromKontrol+0x1e4>
	    altLimit=1;
 8000412:	4b2e      	ldr	r3, [pc, #184]	@ (80004cc <eepromKontrol+0x298>)
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8000418:	4b2d      	ldr	r3, [pc, #180]	@ (80004d0 <eepromKontrol+0x29c>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d902      	bls.n	8000426 <eepromKontrol+0x1f2>
	    basincSalteri=1;
 8000420:	4b2b      	ldr	r3, [pc, #172]	@ (80004d0 <eepromKontrol+0x29c>)
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000426:	4b2b      	ldr	r3, [pc, #172]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b03      	cmp	r3, #3
 800042c:	d902      	bls.n	8000434 <eepromKontrol+0x200>
	    kapiSecimleri=3;
 800042e:	4b29      	ldr	r3, [pc, #164]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000430:	2203      	movs	r2, #3
 8000432:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000434:	4b42      	ldr	r3, [pc, #264]	@ (8000540 <eepromKontrol+0x30c>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d902      	bls.n	8000442 <eepromKontrol+0x20e>
	    kapiAcTipi=0;
 800043c:	4b40      	ldr	r3, [pc, #256]	@ (8000540 <eepromKontrol+0x30c>)
 800043e:	2200      	movs	r2, #0
 8000440:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8000442:	4b25      	ldr	r3, [pc, #148]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b02      	cmp	r3, #2
 8000448:	d902      	bls.n	8000450 <eepromKontrol+0x21c>
	    kapi1Tip=1;
 800044a:	4b23      	ldr	r3, [pc, #140]	@ (80004d8 <eepromKontrol+0x2a4>)
 800044c:	2201      	movs	r2, #1
 800044e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8000450:	4b22      	ldr	r3, [pc, #136]	@ (80004dc <eepromKontrol+0x2a8>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b05      	cmp	r3, #5
 8000456:	d902      	bls.n	800045e <eepromKontrol+0x22a>
	    kapi1AcSure=5;
 8000458:	4b20      	ldr	r3, [pc, #128]	@ (80004dc <eepromKontrol+0x2a8>)
 800045a:	2205      	movs	r2, #5
 800045c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800045e:	4b20      	ldr	r3, [pc, #128]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b02      	cmp	r3, #2
 8000464:	d902      	bls.n	800046c <eepromKontrol+0x238>
	    kapi2Tip=1;
 8000466:	4b1e      	ldr	r3, [pc, #120]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000468:	2201      	movs	r2, #1
 800046a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800046c:	4b1d      	ldr	r3, [pc, #116]	@ (80004e4 <eepromKontrol+0x2b0>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b05      	cmp	r3, #5
 8000472:	d902      	bls.n	800047a <eepromKontrol+0x246>
	    kapi2AcSure=5;
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000476:	2205      	movs	r2, #5
 8000478:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800047a:	4b1b      	ldr	r3, [pc, #108]	@ (80004e8 <eepromKontrol+0x2b4>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d902      	bls.n	8000488 <eepromKontrol+0x254>
	    kapitablaTip=1;
 8000482:	4b19      	ldr	r3, [pc, #100]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000484:	2201      	movs	r2, #1
 8000486:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8000488:	4b2b      	ldr	r3, [pc, #172]	@ (8000538 <eepromKontrol+0x304>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b02      	cmp	r3, #2
 800048e:	d902      	bls.n	8000496 <eepromKontrol+0x262>
	    kapiTablaAcKonum=2;
 8000490:	4b29      	ldr	r3, [pc, #164]	@ (8000538 <eepromKontrol+0x304>)
 8000492:	2202      	movs	r2, #2
 8000494:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8000496:	4b15      	ldr	r3, [pc, #84]	@ (80004ec <eepromKontrol+0x2b8>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b05      	cmp	r3, #5
 800049c:	d902      	bls.n	80004a4 <eepromKontrol+0x270>
	    kapiTablaAcSure=5;
 800049e:	4b13      	ldr	r3, [pc, #76]	@ (80004ec <eepromKontrol+0x2b8>)
 80004a0:	2205      	movs	r2, #5
 80004a2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80004a4:	4b12      	ldr	r3, [pc, #72]	@ (80004f0 <eepromKontrol+0x2bc>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d962      	bls.n	8000572 <eepromKontrol+0x33e>
 80004ac:	e05e      	b.n	800056c <eepromKontrol+0x338>
 80004ae:	bf00      	nop
 80004b0:	20000d00 	.word	0x20000d00
 80004b4:	2000140c 	.word	0x2000140c
 80004b8:	20000d75 	.word	0x20000d75
 80004bc:	20000d76 	.word	0x20000d76
 80004c0:	20000da1 	.word	0x20000da1
 80004c4:	20000da4 	.word	0x20000da4
 80004c8:	20000da5 	.word	0x20000da5
 80004cc:	20000da6 	.word	0x20000da6
 80004d0:	20000da7 	.word	0x20000da7
 80004d4:	20000da8 	.word	0x20000da8
 80004d8:	20000da9 	.word	0x20000da9
 80004dc:	20000db9 	.word	0x20000db9
 80004e0:	20000daa 	.word	0x20000daa
 80004e4:	20000dba 	.word	0x20000dba
 80004e8:	20000dab 	.word	0x20000dab
 80004ec:	20000dbb 	.word	0x20000dbb
 80004f0:	20000dae 	.word	0x20000dae
 80004f4:	20000daf 	.word	0x20000daf
 80004f8:	20000db0 	.word	0x20000db0
 80004fc:	20000db1 	.word	0x20000db1
 8000500:	20000db2 	.word	0x20000db2
 8000504:	20000db3 	.word	0x20000db3
 8000508:	20000db4 	.word	0x20000db4
 800050c:	20000db5 	.word	0x20000db5
 8000510:	20000db6 	.word	0x20000db6
 8000514:	20000db7 	.word	0x20000db7
 8000518:	20000db8 	.word	0x20000db8
 800051c:	20000dbc 	.word	0x20000dbc
 8000520:	20000dbe 	.word	0x20000dbe
 8000524:	20000d98 	.word	0x20000d98
 8000528:	20000d99 	.word	0x20000d99
 800052c:	20000d9a 	.word	0x20000d9a
 8000530:	20000d9b 	.word	0x20000d9b
 8000534:	20000dc1 	.word	0x20000dc1
 8000538:	20000dad 	.word	0x20000dad
 800053c:	20000dc0 	.word	0x20000dc0
 8000540:	20000dac 	.word	0x20000dac
 8000544:	20000dc2 	.word	0x20000dc2
 8000548:	20000dc3 	.word	0x20000dc3
 800054c:	20000dc4 	.word	0x20000dc4
 8000550:	20000dc5 	.word	0x20000dc5
 8000554:	20000dc6 	.word	0x20000dc6
 8000558:	20000dc7 	.word	0x20000dc7
 800055c:	20000dc8 	.word	0x20000dc8
 8000560:	20000dc9 	.word	0x20000dc9
 8000564:	20000dca 	.word	0x20000dca
 8000568:	20000dcb 	.word	0x20000dcb
	    yukariYavasLimit=0;
 800056c:	4b39      	ldr	r3, [pc, #228]	@ (8000654 <eepromKontrol+0x420>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8000572:	4b39      	ldr	r3, [pc, #228]	@ (8000658 <eepromKontrol+0x424>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b02      	cmp	r3, #2
 8000578:	d902      	bls.n	8000580 <eepromKontrol+0x34c>
	    devirmeYuruyusSecim=0;
 800057a:	4b37      	ldr	r3, [pc, #220]	@ (8000658 <eepromKontrol+0x424>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000580:	4b36      	ldr	r3, [pc, #216]	@ (800065c <eepromKontrol+0x428>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    devirmeYukariIleriLimit=1;
 8000588:	4b34      	ldr	r3, [pc, #208]	@ (800065c <eepromKontrol+0x428>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 800058e:	4b34      	ldr	r3, [pc, #208]	@ (8000660 <eepromKontrol+0x42c>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    devirmeAsagiGeriLimit=1;
 8000596:	4b32      	ldr	r3, [pc, #200]	@ (8000660 <eepromKontrol+0x42c>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800059c:	4b31      	ldr	r3, [pc, #196]	@ (8000664 <eepromKontrol+0x430>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    devirmeSilindirTipi=0;
 80005a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000664 <eepromKontrol+0x430>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 80005aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000668 <eepromKontrol+0x434>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    platformSilindirTipi=0;
 80005b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <eepromKontrol+0x434>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005b8:	4b2c      	ldr	r3, [pc, #176]	@ (800066c <eepromKontrol+0x438>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b05      	cmp	r3, #5
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    yukariValfTmr=0;
 80005c0:	4b2a      	ldr	r3, [pc, #168]	@ (800066c <eepromKontrol+0x438>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000670 <eepromKontrol+0x43c>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    asagiValfTmr=0;
 80005ce:	4b28      	ldr	r3, [pc, #160]	@ (8000670 <eepromKontrol+0x43c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005d4:	4b27      	ldr	r3, [pc, #156]	@ (8000674 <eepromKontrol+0x440>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    devirmeYukariIleriTmr=0;
 80005dc:	4b25      	ldr	r3, [pc, #148]	@ (8000674 <eepromKontrol+0x440>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005e2:	4b25      	ldr	r3, [pc, #148]	@ (8000678 <eepromKontrol+0x444>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b05      	cmp	r3, #5
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeAsagiGeriTmr=0;
 80005ea:	4b23      	ldr	r3, [pc, #140]	@ (8000678 <eepromKontrol+0x444>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80005f0:	4b22      	ldr	r3, [pc, #136]	@ (800067c <eepromKontrol+0x448>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2bb4      	cmp	r3, #180	@ 0xb4
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    makineCalismaTmr=60;
 80005f8:	4b20      	ldr	r3, [pc, #128]	@ (800067c <eepromKontrol+0x448>)
 80005fa:	223c      	movs	r2, #60	@ 0x3c
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80005fe:	4b20      	ldr	r3, [pc, #128]	@ (8000680 <eepromKontrol+0x44c>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    buzzer=0;
 8000606:	4b1e      	ldr	r3, [pc, #120]	@ (8000680 <eepromKontrol+0x44c>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800060c:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <eepromKontrol+0x450>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    demoMode=0;
 8000614:	4b1b      	ldr	r3, [pc, #108]	@ (8000684 <eepromKontrol+0x450>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800061a:	4b1b      	ldr	r3, [pc, #108]	@ (8000688 <eepromKontrol+0x454>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    calismaSayModu=0;
 8000622:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <eepromKontrol+0x454>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000628:	4b18      	ldr	r3, [pc, #96]	@ (800068c <eepromKontrol+0x458>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    dilSecim=0;
 8000630:	4b16      	ldr	r3, [pc, #88]	@ (800068c <eepromKontrol+0x458>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000636:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <eepromKontrol+0x45c>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
		iotMode=0;
 800063e:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <eepromKontrol+0x45c>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	loadMenuTexts(dilSecim);
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <eepromKontrol+0x458>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f006 fb2b 	bl	8006ca4 <loadMenuTexts>
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000dae 	.word	0x20000dae
 8000658:	20000daf 	.word	0x20000daf
 800065c:	20000db0 	.word	0x20000db0
 8000660:	20000db1 	.word	0x20000db1
 8000664:	20000db2 	.word	0x20000db2
 8000668:	20000db3 	.word	0x20000db3
 800066c:	20000db4 	.word	0x20000db4
 8000670:	20000db5 	.word	0x20000db5
 8000674:	20000db6 	.word	0x20000db6
 8000678:	20000db7 	.word	0x20000db7
 800067c:	20000db8 	.word	0x20000db8
 8000680:	20000dbc 	.word	0x20000dbc
 8000684:	20000dbe 	.word	0x20000dbe
 8000688:	20000dc0 	.word	0x20000dc0
 800068c:	20000dc1 	.word	0x20000dc1
 8000690:	20000dbf 	.word	0x20000dbf

08000694 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM(int resultText) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	EEPROM_Write(0, 0, eepromData, 110);
 800069c:	236e      	movs	r3, #110	@ 0x6e
 800069e:	4a0b      	ldr	r2, [pc, #44]	@ (80006cc <saveEEPROM+0x38>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 f816 	bl	80006d4 <EEPROM_Write>

    if(resultText == 1) {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d104      	bne.n	80006b8 <saveEEPROM+0x24>
    	lcd_print(2, 1, dataYazildiText);
 80006ae:	4a08      	ldr	r2, [pc, #32]	@ (80006d0 <saveEEPROM+0x3c>)
 80006b0:	2101      	movs	r1, #1
 80006b2:	2002      	movs	r0, #2
 80006b4:	f008 f8cb 	bl	800884e <lcd_print>
    }

    // Ekranı temizle
    HAL_Delay(500);
 80006b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006bc:	f008 fd94 	bl	80091e8 <HAL_Delay>
    lcd_clear();
 80006c0:	f008 f8da 	bl	8008878 <lcd_clear>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000d00 	.word	0x20000d00
 80006d0:	20001380 	.word	0x20001380

080006d4 <EEPROM_Write>:

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08e      	sub	sp, #56	@ 0x38
 80006d8:	af04      	add	r7, sp, #16
 80006da:	60ba      	str	r2, [r7, #8]
 80006dc:	461a      	mov	r2, r3
 80006de:	4603      	mov	r3, r0
 80006e0:	81fb      	strh	r3, [r7, #14]
 80006e2:	460b      	mov	r3, r1
 80006e4:	81bb      	strh	r3, [r7, #12]
 80006e6:	4613      	mov	r3, r2
 80006e8:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80006ea:	2306      	movs	r3, #6
 80006ec:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80006ee:	89fb      	ldrh	r3, [r7, #14]
 80006f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80006f2:	88fa      	ldrh	r2, [r7, #6]
 80006f4:	89bb      	ldrh	r3, [r7, #12]
 80006f6:	4413      	add	r3, r2
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	da00      	bge.n	80006fe <EEPROM_Write+0x2a>
 80006fc:	333f      	adds	r3, #63	@ 0x3f
 80006fe:	119b      	asrs	r3, r3, #6
 8000700:	b29a      	uxth	r2, r3
 8000702:	89fb      	ldrh	r3, [r7, #14]
 8000704:	4413      	add	r3, r2
 8000706:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 8000708:	8afa      	ldrh	r2, [r7, #22]
 800070a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	b29b      	uxth	r3, r3
 8000710:	3301      	adds	r3, #1
 8000712:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
 800071c:	e041      	b.n	80007a2 <EEPROM_Write+0xce>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 800071e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	b21a      	sxth	r2, r3
 8000728:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800072c:	4313      	orrs	r3, r2
 800072e:	b21b      	sxth	r3, r3
 8000730:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000732:	89bb      	ldrh	r3, [r7, #12]
 8000734:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000738:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800073a:	8bfa      	ldrh	r2, [r7, #30]
 800073c:	88fb      	ldrh	r3, [r7, #6]
 800073e:	429a      	cmp	r2, r3
 8000740:	d901      	bls.n	8000746 <EEPROM_Write+0x72>
            bytesremaining = size;
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 8000746:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000748:	68ba      	ldr	r2, [r7, #8]
 800074a:	4413      	add	r3, r2
 800074c:	8a79      	ldrh	r1, [r7, #18]
 800074e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000752:	9202      	str	r2, [sp, #8]
 8000754:	8bfa      	ldrh	r2, [r7, #30]
 8000756:	9201      	str	r2, [sp, #4]
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2310      	movs	r3, #16
 800075c:	460a      	mov	r2, r1
 800075e:	21a0      	movs	r1, #160	@ 0xa0
 8000760:	4813      	ldr	r0, [pc, #76]	@ (80007b0 <EEPROM_Write+0xdc>)
 8000762:	f009 fc89 	bl	800a078 <HAL_I2C_Mem_Write>
 8000766:	4603      	mov	r3, r0
 8000768:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800076a:	7c7b      	ldrb	r3, [r7, #17]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d005      	beq.n	800077c <EEPROM_Write+0xa8>
            lcd_print(2, 1, "Hata: EEPROM    ");
 8000770:	4a10      	ldr	r2, [pc, #64]	@ (80007b4 <EEPROM_Write+0xe0>)
 8000772:	2101      	movs	r1, #1
 8000774:	2002      	movs	r0, #2
 8000776:	f008 f86a 	bl	800884e <lcd_print>
            return;
 800077a:	e016      	b.n	80007aa <EEPROM_Write+0xd6>
        }

        startPage += 1;
 800077c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800077e:	3301      	adds	r3, #1
 8000780:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 8000786:	88fa      	ldrh	r2, [r7, #6]
 8000788:	8bfb      	ldrh	r3, [r7, #30]
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 800078e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000790:	8bfb      	ldrh	r3, [r7, #30]
 8000792:	4413      	add	r3, r2
 8000794:	84bb      	strh	r3, [r7, #36]	@ 0x24

        HAL_Delay(5);
 8000796:	2005      	movs	r0, #5
 8000798:	f008 fd26 	bl	80091e8 <HAL_Delay>
    for (int i = 0; i < numofpages; i++) {
 800079c:	6a3b      	ldr	r3, [r7, #32]
 800079e:	3301      	adds	r3, #1
 80007a0:	623b      	str	r3, [r7, #32]
 80007a2:	8abb      	ldrh	r3, [r7, #20]
 80007a4:	6a3a      	ldr	r2, [r7, #32]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	dbb9      	blt.n	800071e <EEPROM_Write+0x4a>
    }
}
 80007aa:	3728      	adds	r7, #40	@ 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000140c 	.word	0x2000140c
 80007b4:	0800c340 	.word	0x0800c340

080007b8 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b089      	sub	sp, #36	@ 0x24
 80007bc:	af04      	add	r7, sp, #16
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80007c2:	4b25      	ldr	r3, [pc, #148]	@ (8000858 <hata2EEPROM+0xa0>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	1e5a      	subs	r2, r3, #1
 80007c8:	4b24      	ldr	r3, [pc, #144]	@ (800085c <hata2EEPROM+0xa4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	4a24      	ldr	r2, [pc, #144]	@ (8000860 <hata2EEPROM+0xa8>)
 80007d0:	5cd3      	ldrb	r3, [r2, r3]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d002      	beq.n	80007dc <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80007d6:	f000 f8d1 	bl	800097c <eepromDataFillWithEmpty>
		goto veriEkleme;
 80007da:	e000      	b.n	80007de <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80007dc:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	e012      	b.n	800080a <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80007e4:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <hata2EEPROM+0xa4>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000860 <hata2EEPROM+0xa8>)
 80007ee:	5cd3      	ldrb	r3, [r2, r3]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d107      	bne.n	8000804 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80007f4:	4b19      	ldr	r3, [pc, #100]	@ (800085c <hata2EEPROM+0xa4>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	4918      	ldr	r1, [pc, #96]	@ (8000860 <hata2EEPROM+0xa8>)
 80007fe:	79fa      	ldrb	r2, [r7, #7]
 8000800:	54ca      	strb	r2, [r1, r3]
					break;
 8000802:	e007      	b.n	8000814 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3301      	adds	r3, #1
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <hata2EEPROM+0xa0>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	dbe7      	blt.n	80007e4 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000814:	4b11      	ldr	r3, [pc, #68]	@ (800085c <hata2EEPROM+0xa4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	b299      	uxth	r1, r3
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <hata2EEPROM+0xa0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	b298      	uxth	r0, r3
 8000820:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <hata2EEPROM+0xa4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a0e      	ldr	r2, [pc, #56]	@ (8000860 <hata2EEPROM+0xa8>)
 8000826:	4413      	add	r3, r2
 8000828:	4a0b      	ldr	r2, [pc, #44]	@ (8000858 <hata2EEPROM+0xa0>)
 800082a:	6812      	ldr	r2, [r2, #0]
 800082c:	b292      	uxth	r2, r2
 800082e:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8000832:	9402      	str	r4, [sp, #8]
 8000834:	9201      	str	r2, [sp, #4]
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	4603      	mov	r3, r0
 800083a:	460a      	mov	r2, r1
 800083c:	21a0      	movs	r1, #160	@ 0xa0
 800083e:	4809      	ldr	r0, [pc, #36]	@ (8000864 <hata2EEPROM+0xac>)
 8000840:	f009 fc1a 	bl	800a078 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000844:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000848:	f008 fcce 	bl	80091e8 <HAL_Delay>
	eepromKontrol();
 800084c:	f7ff fcf2 	bl	8000234 <eepromKontrol>
}
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	bd90      	pop	{r4, r7, pc}
 8000858:	20000028 	.word	0x20000028
 800085c:	2000002c 	.word	0x2000002c
 8000860:	20000d00 	.word	0x20000d00
 8000864:	2000140c 	.word	0x2000140c

08000868 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d10f      	bne.n	8000898 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000878:	4a38      	ldr	r2, [pc, #224]	@ (800095c <hataKoduLcdGoster+0xf4>)
 800087a:	2101      	movs	r1, #1
 800087c:	2001      	movs	r0, #1
 800087e:	f007 ffe6 	bl	800884e <lcd_print>
		lcd_print(2, 1, "1");
 8000882:	4a37      	ldr	r2, [pc, #220]	@ (8000960 <hataKoduLcdGoster+0xf8>)
 8000884:	2101      	movs	r1, #1
 8000886:	2002      	movs	r0, #2
 8000888:	f007 ffe1 	bl	800884e <lcd_print>
		lcd_print(2, 7, "          ");
 800088c:	4a35      	ldr	r2, [pc, #212]	@ (8000964 <hataKoduLcdGoster+0xfc>)
 800088e:	2107      	movs	r1, #7
 8000890:	2002      	movs	r0, #2
 8000892:	f007 ffdc 	bl	800884e <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000896:	e05d      	b.n	8000954 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b02      	cmp	r3, #2
 800089c:	d10f      	bne.n	80008be <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 800089e:	4a2f      	ldr	r2, [pc, #188]	@ (800095c <hataKoduLcdGoster+0xf4>)
 80008a0:	2101      	movs	r1, #1
 80008a2:	2001      	movs	r0, #1
 80008a4:	f007 ffd3 	bl	800884e <lcd_print>
		lcd_print(2, 2, "2");
 80008a8:	4a2f      	ldr	r2, [pc, #188]	@ (8000968 <hataKoduLcdGoster+0x100>)
 80008aa:	2102      	movs	r1, #2
 80008ac:	2002      	movs	r0, #2
 80008ae:	f007 ffce 	bl	800884e <lcd_print>
		lcd_print(2, 7, "          ");
 80008b2:	4a2c      	ldr	r2, [pc, #176]	@ (8000964 <hataKoduLcdGoster+0xfc>)
 80008b4:	2107      	movs	r1, #7
 80008b6:	2002      	movs	r0, #2
 80008b8:	f007 ffc9 	bl	800884e <lcd_print>
}
 80008bc:	e04a      	b.n	8000954 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	d10f      	bne.n	80008e4 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 80008c4:	4a25      	ldr	r2, [pc, #148]	@ (800095c <hataKoduLcdGoster+0xf4>)
 80008c6:	2101      	movs	r1, #1
 80008c8:	2001      	movs	r0, #1
 80008ca:	f007 ffc0 	bl	800884e <lcd_print>
		lcd_print(2, 3, "3");
 80008ce:	4a27      	ldr	r2, [pc, #156]	@ (800096c <hataKoduLcdGoster+0x104>)
 80008d0:	2103      	movs	r1, #3
 80008d2:	2002      	movs	r0, #2
 80008d4:	f007 ffbb 	bl	800884e <lcd_print>
		lcd_print(2, 7, "          ");
 80008d8:	4a22      	ldr	r2, [pc, #136]	@ (8000964 <hataKoduLcdGoster+0xfc>)
 80008da:	2107      	movs	r1, #7
 80008dc:	2002      	movs	r0, #2
 80008de:	f007 ffb6 	bl	800884e <lcd_print>
}
 80008e2:	e037      	b.n	8000954 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d10f      	bne.n	800090a <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 80008ea:	4a1c      	ldr	r2, [pc, #112]	@ (800095c <hataKoduLcdGoster+0xf4>)
 80008ec:	2101      	movs	r1, #1
 80008ee:	2001      	movs	r0, #1
 80008f0:	f007 ffad 	bl	800884e <lcd_print>
		lcd_print(2, 4, "4");
 80008f4:	4a1e      	ldr	r2, [pc, #120]	@ (8000970 <hataKoduLcdGoster+0x108>)
 80008f6:	2104      	movs	r1, #4
 80008f8:	2002      	movs	r0, #2
 80008fa:	f007 ffa8 	bl	800884e <lcd_print>
		lcd_print(2, 7, "          ");
 80008fe:	4a19      	ldr	r2, [pc, #100]	@ (8000964 <hataKoduLcdGoster+0xfc>)
 8000900:	2107      	movs	r1, #7
 8000902:	2002      	movs	r0, #2
 8000904:	f007 ffa3 	bl	800884e <lcd_print>
}
 8000908:	e024      	b.n	8000954 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b05      	cmp	r3, #5
 800090e:	d10f      	bne.n	8000930 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000910:	4a12      	ldr	r2, [pc, #72]	@ (800095c <hataKoduLcdGoster+0xf4>)
 8000912:	2101      	movs	r1, #1
 8000914:	2001      	movs	r0, #1
 8000916:	f007 ff9a 	bl	800884e <lcd_print>
		lcd_print(2, 5, "5");
 800091a:	4a16      	ldr	r2, [pc, #88]	@ (8000974 <hataKoduLcdGoster+0x10c>)
 800091c:	2105      	movs	r1, #5
 800091e:	2002      	movs	r0, #2
 8000920:	f007 ff95 	bl	800884e <lcd_print>
		lcd_print(2, 7, "          ");
 8000924:	4a0f      	ldr	r2, [pc, #60]	@ (8000964 <hataKoduLcdGoster+0xfc>)
 8000926:	2107      	movs	r1, #7
 8000928:	2002      	movs	r0, #2
 800092a:	f007 ff90 	bl	800884e <lcd_print>
}
 800092e:	e011      	b.n	8000954 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	2b06      	cmp	r3, #6
 8000934:	d10e      	bne.n	8000954 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000936:	4a09      	ldr	r2, [pc, #36]	@ (800095c <hataKoduLcdGoster+0xf4>)
 8000938:	2101      	movs	r1, #1
 800093a:	2001      	movs	r0, #1
 800093c:	f007 ff87 	bl	800884e <lcd_print>
		lcd_print(2, 6, "6");
 8000940:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <hataKoduLcdGoster+0x110>)
 8000942:	2106      	movs	r1, #6
 8000944:	2002      	movs	r0, #2
 8000946:	f007 ff82 	bl	800884e <lcd_print>
		lcd_print(2, 7, "          ");
 800094a:	4a06      	ldr	r2, [pc, #24]	@ (8000964 <hataKoduLcdGoster+0xfc>)
 800094c:	2107      	movs	r1, #7
 800094e:	2002      	movs	r0, #2
 8000950:	f007 ff7d 	bl	800884e <lcd_print>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200013d0 	.word	0x200013d0
 8000960:	0800c368 	.word	0x0800c368
 8000964:	0800c36c 	.word	0x0800c36c
 8000968:	0800c378 	.word	0x0800c378
 800096c:	0800c37c 	.word	0x0800c37c
 8000970:	0800c380 	.word	0x0800c380
 8000974:	0800c384 	.word	0x0800c384
 8000978:	0800c388 	.word	0x0800c388

0800097c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	e009      	b.n	800099c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000988:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <eepromDataFillWithEmpty+0x38>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000990:	4a09      	ldr	r2, [pc, #36]	@ (80009b8 <eepromDataFillWithEmpty+0x3c>)
 8000992:	2100      	movs	r1, #0
 8000994:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3301      	adds	r3, #1
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <eepromDataFillWithEmpty+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	dbf0      	blt.n	8000988 <eepromDataFillWithEmpty+0xc>
	}
}
 80009a6:	bf00      	nop
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000d00 	.word	0x20000d00
 80009bc:	20000028 	.word	0x20000028

080009c0 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80009c6:	463b      	mov	r3, r7
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80009d2:	4b50      	ldr	r3, [pc, #320]	@ (8000b14 <i2cTest+0x154>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b4e      	ldr	r3, [pc, #312]	@ (8000b14 <i2cTest+0x154>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f022 0201 	bic.w	r2, r2, #1
 80009e0:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80009e2:	484c      	ldr	r0, [pc, #304]	@ (8000b14 <i2cTest+0x154>)
 80009e4:	f009 fa1a 	bl	8009e1c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009e8:	23c0      	movs	r3, #192	@ 0xc0
 80009ea:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80009ec:	2311      	movs	r3, #17
 80009ee:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80009f8:	463b      	mov	r3, r7
 80009fa:	4619      	mov	r1, r3
 80009fc:	4846      	ldr	r0, [pc, #280]	@ (8000b18 <i2cTest+0x158>)
 80009fe:	f008 fe21 	bl	8009644 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2140      	movs	r1, #64	@ 0x40
 8000a06:	4844      	ldr	r0, [pc, #272]	@ (8000b18 <i2cTest+0x158>)
 8000a08:	f009 f893 	bl	8009b32 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2180      	movs	r1, #128	@ 0x80
 8000a10:	4841      	ldr	r0, [pc, #260]	@ (8000b18 <i2cTest+0x158>)
 8000a12:	f009 f88e 	bl	8009b32 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000a16:	200a      	movs	r0, #10
 8000a18:	f008 fbe6 	bl	80091e8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000a1c:	bf00      	nop
 8000a1e:	2140      	movs	r1, #64	@ 0x40
 8000a20:	483d      	ldr	r0, [pc, #244]	@ (8000b18 <i2cTest+0x158>)
 8000a22:	f009 f86f 	bl	8009b04 <HAL_GPIO_ReadPin>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d006      	beq.n	8000a3a <i2cTest+0x7a>
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	483a      	ldr	r0, [pc, #232]	@ (8000b18 <i2cTest+0x158>)
 8000a30:	f009 f868 	bl	8009b04 <HAL_GPIO_ReadPin>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d1f1      	bne.n	8000a1e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2180      	movs	r1, #128	@ 0x80
 8000a3e:	4836      	ldr	r0, [pc, #216]	@ (8000b18 <i2cTest+0x158>)
 8000a40:	f009 f877 	bl	8009b32 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000a44:	200a      	movs	r0, #10
 8000a46:	f008 fbcf 	bl	80091e8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000a4a:	bf00      	nop
 8000a4c:	2180      	movs	r1, #128	@ 0x80
 8000a4e:	4832      	ldr	r0, [pc, #200]	@ (8000b18 <i2cTest+0x158>)
 8000a50:	f009 f858 	bl	8009b04 <HAL_GPIO_ReadPin>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d0f8      	beq.n	8000a4c <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2140      	movs	r1, #64	@ 0x40
 8000a5e:	482e      	ldr	r0, [pc, #184]	@ (8000b18 <i2cTest+0x158>)
 8000a60:	f009 f867 	bl	8009b32 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000a64:	200a      	movs	r0, #10
 8000a66:	f008 fbbf 	bl	80091e8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000a6a:	bf00      	nop
 8000a6c:	2140      	movs	r1, #64	@ 0x40
 8000a6e:	482a      	ldr	r0, [pc, #168]	@ (8000b18 <i2cTest+0x158>)
 8000a70:	f009 f848 	bl	8009b04 <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d0f8      	beq.n	8000a6c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2140      	movs	r1, #64	@ 0x40
 8000a7e:	4826      	ldr	r0, [pc, #152]	@ (8000b18 <i2cTest+0x158>)
 8000a80:	f009 f857 	bl	8009b32 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000a84:	200a      	movs	r0, #10
 8000a86:	f008 fbaf 	bl	80091e8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000a8a:	bf00      	nop
 8000a8c:	2140      	movs	r1, #64	@ 0x40
 8000a8e:	4822      	ldr	r0, [pc, #136]	@ (8000b18 <i2cTest+0x158>)
 8000a90:	f009 f838 	bl	8009b04 <HAL_GPIO_ReadPin>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d1f8      	bne.n	8000a8c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2180      	movs	r1, #128	@ 0x80
 8000a9e:	481e      	ldr	r0, [pc, #120]	@ (8000b18 <i2cTest+0x158>)
 8000aa0:	f009 f847 	bl	8009b32 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000aa4:	200a      	movs	r0, #10
 8000aa6:	f008 fb9f 	bl	80091e8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000aaa:	bf00      	nop
 8000aac:	2180      	movs	r1, #128	@ 0x80
 8000aae:	481a      	ldr	r0, [pc, #104]	@ (8000b18 <i2cTest+0x158>)
 8000ab0:	f009 f828 	bl	8009b04 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d1f8      	bne.n	8000aac <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aba:	23c0      	movs	r3, #192	@ 0xc0
 8000abc:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000abe:	2312      	movs	r3, #18
 8000ac0:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000aca:	463b      	mov	r3, r7
 8000acc:	4619      	mov	r1, r3
 8000ace:	4812      	ldr	r0, [pc, #72]	@ (8000b18 <i2cTest+0x158>)
 8000ad0:	f008 fdb8 	bl	8009644 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <i2cTest+0x154>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <i2cTest+0x154>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000ae2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <i2cTest+0x154>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <i2cTest+0x154>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000af2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000af4:	4b07      	ldr	r3, [pc, #28]	@ (8000b14 <i2cTest+0x154>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <i2cTest+0x154>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f042 0201 	orr.w	r2, r2, #1
 8000b02:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000b04:	4803      	ldr	r0, [pc, #12]	@ (8000b14 <i2cTest+0x154>)
 8000b06:	f009 f845 	bl	8009b94 <HAL_I2C_Init>
}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000140c 	.word	0x2000140c
 8000b18:	40010c00 	.word	0x40010c00

08000b1c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b20:	f3bf 8f4f 	dsb	sy
}
 8000b24:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <__NVIC_SystemReset+0x24>)
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000b2e:	4904      	ldr	r1, [pc, #16]	@ (8000b40 <__NVIC_SystemReset+0x24>)
 8000b30:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <__NVIC_SystemReset+0x28>)
 8000b32:	4313      	orrs	r3, r2
 8000b34:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b36:	f3bf 8f4f 	dsb	sy
}
 8000b3a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <__NVIC_SystemReset+0x20>
 8000b40:	e000ed00 	.word	0xe000ed00
 8000b44:	05fa0004 	.word	0x05fa0004

08000b48 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000b4e:	2101      	movs	r1, #1
 8000b50:	4890      	ldr	r0, [pc, #576]	@ (8000d94 <menu+0x24c>)
 8000b52:	f008 ffd7 	bl	8009b04 <HAL_GPIO_ReadPin>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	f040 808e 	bne.w	8000c7a <menu+0x132>
 8000b5e:	4b8e      	ldr	r3, [pc, #568]	@ (8000d98 <menu+0x250>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	f083 0301 	eor.w	r3, r3, #1
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f000 8086 	beq.w	8000c7a <menu+0x132>
		menuSayac = menuSayac+1;
 8000b6e:	4b8b      	ldr	r3, [pc, #556]	@ (8000d9c <menu+0x254>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	3301      	adds	r3, #1
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4b89      	ldr	r3, [pc, #548]	@ (8000d9c <menu+0x254>)
 8000b78:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 32) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8000b7a:	4b88      	ldr	r3, [pc, #544]	@ (8000d9c <menu+0x254>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b20      	cmp	r3, #32
 8000b80:	d102      	bne.n	8000b88 <menu+0x40>
			menuSayac = 1;
 8000b82:	4b86      	ldr	r3, [pc, #536]	@ (8000d9c <menu+0x254>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8000b88:	4b84      	ldr	r3, [pc, #528]	@ (8000d9c <menu+0x254>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b12      	cmp	r3, #18
 8000b8e:	d106      	bne.n	8000b9e <menu+0x56>
 8000b90:	4b83      	ldr	r3, [pc, #524]	@ (8000da0 <menu+0x258>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <menu+0x56>
			menuSayac = 21;
 8000b98:	4b80      	ldr	r3, [pc, #512]	@ (8000d9c <menu+0x254>)
 8000b9a:	2215      	movs	r2, #21
 8000b9c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8000b9e:	4b7f      	ldr	r3, [pc, #508]	@ (8000d9c <menu+0x254>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b08      	cmp	r3, #8
 8000ba4:	d106      	bne.n	8000bb4 <menu+0x6c>
 8000ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8000da4 <menu+0x25c>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d102      	bne.n	8000bb4 <menu+0x6c>
			menuSayac = 16;
 8000bae:	4b7b      	ldr	r3, [pc, #492]	@ (8000d9c <menu+0x254>)
 8000bb0:	2210      	movs	r2, #16
 8000bb2:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8000bb4:	4b79      	ldr	r3, [pc, #484]	@ (8000d9c <menu+0x254>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b0d      	cmp	r3, #13
 8000bba:	d106      	bne.n	8000bca <menu+0x82>
 8000bbc:	4b79      	ldr	r3, [pc, #484]	@ (8000da4 <menu+0x25c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d102      	bne.n	8000bca <menu+0x82>
			menuSayac = 16;
 8000bc4:	4b75      	ldr	r3, [pc, #468]	@ (8000d9c <menu+0x254>)
 8000bc6:	2210      	movs	r2, #16
 8000bc8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000bca:	4b74      	ldr	r3, [pc, #464]	@ (8000d9c <menu+0x254>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b09      	cmp	r3, #9
 8000bd0:	d106      	bne.n	8000be0 <menu+0x98>
 8000bd2:	4b74      	ldr	r3, [pc, #464]	@ (8000da4 <menu+0x25c>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d102      	bne.n	8000be0 <menu+0x98>
			menuSayac = 13;
 8000bda:	4b70      	ldr	r3, [pc, #448]	@ (8000d9c <menu+0x254>)
 8000bdc:	220d      	movs	r2, #13
 8000bde:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000be0:	4b6e      	ldr	r3, [pc, #440]	@ (8000d9c <menu+0x254>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b0a      	cmp	r3, #10
 8000be6:	d10a      	bne.n	8000bfe <menu+0xb6>
 8000be8:	4b6f      	ldr	r3, [pc, #444]	@ (8000da8 <menu+0x260>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d003      	beq.n	8000bf8 <menu+0xb0>
 8000bf0:	4b6d      	ldr	r3, [pc, #436]	@ (8000da8 <menu+0x260>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d102      	bne.n	8000bfe <menu+0xb6>
			menuSayac = 11;
 8000bf8:	4b68      	ldr	r3, [pc, #416]	@ (8000d9c <menu+0x254>)
 8000bfa:	220b      	movs	r2, #11
 8000bfc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8000bfe:	4b67      	ldr	r3, [pc, #412]	@ (8000d9c <menu+0x254>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b0c      	cmp	r3, #12
 8000c04:	d10e      	bne.n	8000c24 <menu+0xdc>
 8000c06:	4b69      	ldr	r3, [pc, #420]	@ (8000dac <menu+0x264>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d003      	beq.n	8000c16 <menu+0xce>
 8000c0e:	4b67      	ldr	r3, [pc, #412]	@ (8000dac <menu+0x264>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d106      	bne.n	8000c24 <menu+0xdc>
 8000c16:	4b63      	ldr	r3, [pc, #396]	@ (8000da4 <menu+0x25c>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d102      	bne.n	8000c24 <menu+0xdc>
			menuSayac = 16;
 8000c1e:	4b5f      	ldr	r3, [pc, #380]	@ (8000d9c <menu+0x254>)
 8000c20:	2210      	movs	r2, #16
 8000c22:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8000c24:	4b5d      	ldr	r3, [pc, #372]	@ (8000d9c <menu+0x254>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b0c      	cmp	r3, #12
 8000c2a:	d10e      	bne.n	8000c4a <menu+0x102>
 8000c2c:	4b5f      	ldr	r3, [pc, #380]	@ (8000dac <menu+0x264>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d003      	beq.n	8000c3c <menu+0xf4>
 8000c34:	4b5d      	ldr	r3, [pc, #372]	@ (8000dac <menu+0x264>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d106      	bne.n	8000c4a <menu+0x102>
 8000c3c:	4b59      	ldr	r3, [pc, #356]	@ (8000da4 <menu+0x25c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b03      	cmp	r3, #3
 8000c42:	d102      	bne.n	8000c4a <menu+0x102>
			menuSayac = 13;
 8000c44:	4b55      	ldr	r3, [pc, #340]	@ (8000d9c <menu+0x254>)
 8000c46:	220d      	movs	r2, #13
 8000c48:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000c4a:	4b54      	ldr	r3, [pc, #336]	@ (8000d9c <menu+0x254>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b0f      	cmp	r3, #15
 8000c50:	d106      	bne.n	8000c60 <menu+0x118>
 8000c52:	4b57      	ldr	r3, [pc, #348]	@ (8000db0 <menu+0x268>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d102      	bne.n	8000c60 <menu+0x118>
			menuSayac = 16;
 8000c5a:	4b50      	ldr	r3, [pc, #320]	@ (8000d9c <menu+0x254>)
 8000c5c:	2210      	movs	r2, #16
 8000c5e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8000c60:	4b4e      	ldr	r3, [pc, #312]	@ (8000d9c <menu+0x254>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b18      	cmp	r3, #24
 8000c66:	d106      	bne.n	8000c76 <menu+0x12e>
 8000c68:	4b4d      	ldr	r3, [pc, #308]	@ (8000da0 <menu+0x258>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <menu+0x12e>
			menuSayac = 26;
 8000c70:	4b4a      	ldr	r3, [pc, #296]	@ (8000d9c <menu+0x254>)
 8000c72:	221a      	movs	r2, #26
 8000c74:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8000c76:	f002 fb6b 	bl	8003350 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000c7a:	2108      	movs	r1, #8
 8000c7c:	484d      	ldr	r0, [pc, #308]	@ (8000db4 <menu+0x26c>)
 8000c7e:	f008 ff41 	bl	8009b04 <HAL_GPIO_ReadPin>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d175      	bne.n	8000d74 <menu+0x22c>
 8000c88:	4b43      	ldr	r3, [pc, #268]	@ (8000d98 <menu+0x250>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	f083 0301 	eor.w	r3, r3, #1
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d06e      	beq.n	8000d74 <menu+0x22c>
		if (menuSayac <= 1) {
 8000c96:	4b41      	ldr	r3, [pc, #260]	@ (8000d9c <menu+0x254>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d802      	bhi.n	8000ca4 <menu+0x15c>
			menuSayac = 32;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8000c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d9c <menu+0x254>)
 8000ca0:	2220      	movs	r2, #32
 8000ca2:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8000ca4:	4b3d      	ldr	r3, [pc, #244]	@ (8000d9c <menu+0x254>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b3b      	ldr	r3, [pc, #236]	@ (8000d9c <menu+0x254>)
 8000cae:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8000cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8000d9c <menu+0x254>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b14      	cmp	r3, #20
 8000cb6:	d106      	bne.n	8000cc6 <menu+0x17e>
 8000cb8:	4b39      	ldr	r3, [pc, #228]	@ (8000da0 <menu+0x258>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <menu+0x17e>
			menuSayac = 17;
 8000cc0:	4b36      	ldr	r3, [pc, #216]	@ (8000d9c <menu+0x254>)
 8000cc2:	2211      	movs	r2, #17
 8000cc4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8000cc6:	4b35      	ldr	r3, [pc, #212]	@ (8000d9c <menu+0x254>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b0f      	cmp	r3, #15
 8000ccc:	d106      	bne.n	8000cdc <menu+0x194>
 8000cce:	4b35      	ldr	r3, [pc, #212]	@ (8000da4 <menu+0x25c>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d102      	bne.n	8000cdc <menu+0x194>
			menuSayac = 7;
 8000cd6:	4b31      	ldr	r3, [pc, #196]	@ (8000d9c <menu+0x254>)
 8000cd8:	2207      	movs	r2, #7
 8000cda:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8000cdc:	4b2f      	ldr	r3, [pc, #188]	@ (8000d9c <menu+0x254>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d106      	bne.n	8000cf2 <menu+0x1aa>
 8000ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8000da4 <menu+0x25c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d102      	bne.n	8000cf2 <menu+0x1aa>
			menuSayac = 12;
 8000cec:	4b2b      	ldr	r3, [pc, #172]	@ (8000d9c <menu+0x254>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8000cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d9c <menu+0x254>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b0c      	cmp	r3, #12
 8000cf8:	d106      	bne.n	8000d08 <menu+0x1c0>
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000da4 <menu+0x25c>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d102      	bne.n	8000d08 <menu+0x1c0>
			menuSayac = 8;
 8000d02:	4b26      	ldr	r3, [pc, #152]	@ (8000d9c <menu+0x254>)
 8000d04:	2208      	movs	r2, #8
 8000d06:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000d08:	4b24      	ldr	r3, [pc, #144]	@ (8000d9c <menu+0x254>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b0a      	cmp	r3, #10
 8000d0e:	d10a      	bne.n	8000d26 <menu+0x1de>
 8000d10:	4b25      	ldr	r3, [pc, #148]	@ (8000da8 <menu+0x260>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d003      	beq.n	8000d20 <menu+0x1d8>
 8000d18:	4b23      	ldr	r3, [pc, #140]	@ (8000da8 <menu+0x260>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d102      	bne.n	8000d26 <menu+0x1de>
			menuSayac = 9;
 8000d20:	4b1e      	ldr	r3, [pc, #120]	@ (8000d9c <menu+0x254>)
 8000d22:	2209      	movs	r2, #9
 8000d24:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8000d26:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <menu+0x254>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b0c      	cmp	r3, #12
 8000d2c:	d10a      	bne.n	8000d44 <menu+0x1fc>
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dac <menu+0x264>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d003      	beq.n	8000d3e <menu+0x1f6>
 8000d36:	4b1d      	ldr	r3, [pc, #116]	@ (8000dac <menu+0x264>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d102      	bne.n	8000d44 <menu+0x1fc>
			menuSayac = 11;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <menu+0x254>)
 8000d40:	220b      	movs	r2, #11
 8000d42:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000d44:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <menu+0x254>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d106      	bne.n	8000d5a <menu+0x212>
 8000d4c:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <menu+0x268>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d102      	bne.n	8000d5a <menu+0x212>
			menuSayac = 14;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <menu+0x254>)
 8000d56:	220e      	movs	r2, #14
 8000d58:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <menu+0x254>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b19      	cmp	r3, #25
 8000d60:	d106      	bne.n	8000d70 <menu+0x228>
 8000d62:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <menu+0x258>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d102      	bne.n	8000d70 <menu+0x228>
			menuSayac = 23;
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <menu+0x254>)
 8000d6c:	2217      	movs	r2, #23
 8000d6e:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8000d70:	f002 faee 	bl	8003350 <bekle>
	}

	if (menuSayac == 0) {
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <menu+0x254>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d121      	bne.n	8000dc0 <menu+0x278>
		lcd_print(1, 1, menuyeGirildiText);
 8000d7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000db8 <menu+0x270>)
 8000d7e:	2101      	movs	r1, #1
 8000d80:	2001      	movs	r0, #1
 8000d82:	f007 fd64 	bl	800884e <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8000d86:	4a0d      	ldr	r2, [pc, #52]	@ (8000dbc <menu+0x274>)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f007 fd5f 	bl	800884e <lcd_print>
 8000d90:	e016      	b.n	8000dc0 <menu+0x278>
 8000d92:	bf00      	nop
 8000d94:	40010800 	.word	0x40010800
 8000d98:	20000dcf 	.word	0x20000dcf
 8000d9c:	20000da0 	.word	0x20000da0
 8000da0:	20000daf 	.word	0x20000daf
 8000da4:	20000da8 	.word	0x20000da8
 8000da8:	20000da9 	.word	0x20000da9
 8000dac:	20000daa 	.word	0x20000daa
 8000db0:	20000dab 	.word	0x20000dab
 8000db4:	40011000 	.word	0x40011000
 8000db8:	20000e08 	.word	0x20000e08
 8000dbc:	20000e1c 	.word	0x20000e1c
	}

	if (menuSayac == 1) {
 8000dc0:	4bb0      	ldr	r3, [pc, #704]	@ (8001084 <menu+0x53c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	f040 81ef 	bne.w	80011a8 <menu+0x660>
		lcd_print(1, 1, hataKayitListText);
 8000dca:	4aaf      	ldr	r2, [pc, #700]	@ (8001088 <menu+0x540>)
 8000dcc:	2101      	movs	r1, #1
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f007 fd3d 	bl	800884e <lcd_print>

		if(hataGostermeSirasi == 0) {
 8000dd4:	4bad      	ldr	r3, [pc, #692]	@ (800108c <menu+0x544>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d115      	bne.n	8000e08 <menu+0x2c0>
			lcd_print(2, 1, birHataKoduText);
 8000ddc:	4aac      	ldr	r2, [pc, #688]	@ (8001090 <menu+0x548>)
 8000dde:	2101      	movs	r1, #1
 8000de0:	2002      	movs	r0, #2
 8000de2:	f007 fd34 	bl	800884e <lcd_print>
			lcd_print(2, 15, "   ");
 8000de6:	4aab      	ldr	r2, [pc, #684]	@ (8001094 <menu+0x54c>)
 8000de8:	210f      	movs	r1, #15
 8000dea:	2002      	movs	r0, #2
 8000dec:	f007 fd2f 	bl	800884e <lcd_print>
			itoa(hataKayit1, snum, 10);
 8000df0:	4ba9      	ldr	r3, [pc, #676]	@ (8001098 <menu+0x550>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	220a      	movs	r2, #10
 8000df6:	49a9      	ldr	r1, [pc, #676]	@ (800109c <menu+0x554>)
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f00b fa25 	bl	800c248 <itoa>
			lcd_print(2, 14, snum);
 8000dfe:	4aa7      	ldr	r2, [pc, #668]	@ (800109c <menu+0x554>)
 8000e00:	210e      	movs	r1, #14
 8000e02:	2002      	movs	r0, #2
 8000e04:	f007 fd23 	bl	800884e <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8000e08:	4ba0      	ldr	r3, [pc, #640]	@ (800108c <menu+0x544>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d115      	bne.n	8000e3c <menu+0x2f4>
			lcd_print(2, 1, ikiHataKoduText);
 8000e10:	4aa3      	ldr	r2, [pc, #652]	@ (80010a0 <menu+0x558>)
 8000e12:	2101      	movs	r1, #1
 8000e14:	2002      	movs	r0, #2
 8000e16:	f007 fd1a 	bl	800884e <lcd_print>
			lcd_print(2, 15, "  ");
 8000e1a:	4aa2      	ldr	r2, [pc, #648]	@ (80010a4 <menu+0x55c>)
 8000e1c:	210f      	movs	r1, #15
 8000e1e:	2002      	movs	r0, #2
 8000e20:	f007 fd15 	bl	800884e <lcd_print>
			itoa(hataKayit2, snum, 10);
 8000e24:	4ba0      	ldr	r3, [pc, #640]	@ (80010a8 <menu+0x560>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	220a      	movs	r2, #10
 8000e2a:	499c      	ldr	r1, [pc, #624]	@ (800109c <menu+0x554>)
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f00b fa0b 	bl	800c248 <itoa>
			lcd_print(2, 14, snum);
 8000e32:	4a9a      	ldr	r2, [pc, #616]	@ (800109c <menu+0x554>)
 8000e34:	210e      	movs	r1, #14
 8000e36:	2002      	movs	r0, #2
 8000e38:	f007 fd09 	bl	800884e <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8000e3c:	4b93      	ldr	r3, [pc, #588]	@ (800108c <menu+0x544>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d115      	bne.n	8000e70 <menu+0x328>
			lcd_print(2, 1, ucHataKoduText);
 8000e44:	4a99      	ldr	r2, [pc, #612]	@ (80010ac <menu+0x564>)
 8000e46:	2101      	movs	r1, #1
 8000e48:	2002      	movs	r0, #2
 8000e4a:	f007 fd00 	bl	800884e <lcd_print>
			lcd_print(2, 15, "  ");
 8000e4e:	4a95      	ldr	r2, [pc, #596]	@ (80010a4 <menu+0x55c>)
 8000e50:	210f      	movs	r1, #15
 8000e52:	2002      	movs	r0, #2
 8000e54:	f007 fcfb 	bl	800884e <lcd_print>
			itoa(hataKayit3, snum, 10);
 8000e58:	4b95      	ldr	r3, [pc, #596]	@ (80010b0 <menu+0x568>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	220a      	movs	r2, #10
 8000e5e:	498f      	ldr	r1, [pc, #572]	@ (800109c <menu+0x554>)
 8000e60:	4618      	mov	r0, r3
 8000e62:	f00b f9f1 	bl	800c248 <itoa>
			lcd_print(2, 14, snum);
 8000e66:	4a8d      	ldr	r2, [pc, #564]	@ (800109c <menu+0x554>)
 8000e68:	210e      	movs	r1, #14
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	f007 fcef 	bl	800884e <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8000e70:	4b86      	ldr	r3, [pc, #536]	@ (800108c <menu+0x544>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d115      	bne.n	8000ea4 <menu+0x35c>
			lcd_print(2, 1, dortHataKoduText);
 8000e78:	4a8e      	ldr	r2, [pc, #568]	@ (80010b4 <menu+0x56c>)
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	2002      	movs	r0, #2
 8000e7e:	f007 fce6 	bl	800884e <lcd_print>
			lcd_print(2, 15, "  ");
 8000e82:	4a88      	ldr	r2, [pc, #544]	@ (80010a4 <menu+0x55c>)
 8000e84:	210f      	movs	r1, #15
 8000e86:	2002      	movs	r0, #2
 8000e88:	f007 fce1 	bl	800884e <lcd_print>
			itoa(hataKayit4, snum, 10);
 8000e8c:	4b8a      	ldr	r3, [pc, #552]	@ (80010b8 <menu+0x570>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	220a      	movs	r2, #10
 8000e92:	4982      	ldr	r1, [pc, #520]	@ (800109c <menu+0x554>)
 8000e94:	4618      	mov	r0, r3
 8000e96:	f00b f9d7 	bl	800c248 <itoa>
			lcd_print(2, 14, snum);
 8000e9a:	4a80      	ldr	r2, [pc, #512]	@ (800109c <menu+0x554>)
 8000e9c:	210e      	movs	r1, #14
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	f007 fcd5 	bl	800884e <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8000ea4:	4b79      	ldr	r3, [pc, #484]	@ (800108c <menu+0x544>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b04      	cmp	r3, #4
 8000eaa:	d115      	bne.n	8000ed8 <menu+0x390>
			lcd_print(2, 1, besHataKoduText);
 8000eac:	4a83      	ldr	r2, [pc, #524]	@ (80010bc <menu+0x574>)
 8000eae:	2101      	movs	r1, #1
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f007 fccc 	bl	800884e <lcd_print>
			lcd_print(2, 15, "  ");
 8000eb6:	4a7b      	ldr	r2, [pc, #492]	@ (80010a4 <menu+0x55c>)
 8000eb8:	210f      	movs	r1, #15
 8000eba:	2002      	movs	r0, #2
 8000ebc:	f007 fcc7 	bl	800884e <lcd_print>
			itoa(hataKayit5, snum, 10);
 8000ec0:	4b7f      	ldr	r3, [pc, #508]	@ (80010c0 <menu+0x578>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	220a      	movs	r2, #10
 8000ec6:	4975      	ldr	r1, [pc, #468]	@ (800109c <menu+0x554>)
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f00b f9bd 	bl	800c248 <itoa>
			lcd_print(2, 14, snum);
 8000ece:	4a73      	ldr	r2, [pc, #460]	@ (800109c <menu+0x554>)
 8000ed0:	210e      	movs	r1, #14
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	f007 fcbb 	bl	800884e <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8000ed8:	4b6c      	ldr	r3, [pc, #432]	@ (800108c <menu+0x544>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b05      	cmp	r3, #5
 8000ede:	d115      	bne.n	8000f0c <menu+0x3c4>
			lcd_print(2, 1, altiHataKoduText);
 8000ee0:	4a78      	ldr	r2, [pc, #480]	@ (80010c4 <menu+0x57c>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f007 fcb2 	bl	800884e <lcd_print>
			lcd_print(2, 15, "  ");
 8000eea:	4a6e      	ldr	r2, [pc, #440]	@ (80010a4 <menu+0x55c>)
 8000eec:	210f      	movs	r1, #15
 8000eee:	2002      	movs	r0, #2
 8000ef0:	f007 fcad 	bl	800884e <lcd_print>
			itoa(hataKayit6, snum, 10);
 8000ef4:	4b74      	ldr	r3, [pc, #464]	@ (80010c8 <menu+0x580>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	220a      	movs	r2, #10
 8000efa:	4968      	ldr	r1, [pc, #416]	@ (800109c <menu+0x554>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	f00b f9a3 	bl	800c248 <itoa>
			lcd_print(2, 14, snum);
 8000f02:	4a66      	ldr	r2, [pc, #408]	@ (800109c <menu+0x554>)
 8000f04:	210e      	movs	r1, #14
 8000f06:	2002      	movs	r0, #2
 8000f08:	f007 fca1 	bl	800884e <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8000f0c:	4b5f      	ldr	r3, [pc, #380]	@ (800108c <menu+0x544>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b06      	cmp	r3, #6
 8000f12:	d115      	bne.n	8000f40 <menu+0x3f8>
			lcd_print(2, 1, yediHataKoduText);
 8000f14:	4a6d      	ldr	r2, [pc, #436]	@ (80010cc <menu+0x584>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f007 fc98 	bl	800884e <lcd_print>
			lcd_print(2, 15, "  ");
 8000f1e:	4a61      	ldr	r2, [pc, #388]	@ (80010a4 <menu+0x55c>)
 8000f20:	210f      	movs	r1, #15
 8000f22:	2002      	movs	r0, #2
 8000f24:	f007 fc93 	bl	800884e <lcd_print>
			itoa(hataKayit7, snum, 10);
 8000f28:	4b69      	ldr	r3, [pc, #420]	@ (80010d0 <menu+0x588>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	220a      	movs	r2, #10
 8000f2e:	495b      	ldr	r1, [pc, #364]	@ (800109c <menu+0x554>)
 8000f30:	4618      	mov	r0, r3
 8000f32:	f00b f989 	bl	800c248 <itoa>
			lcd_print(2, 14, snum);
 8000f36:	4a59      	ldr	r2, [pc, #356]	@ (800109c <menu+0x554>)
 8000f38:	210e      	movs	r1, #14
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f007 fc87 	bl	800884e <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8000f40:	4b52      	ldr	r3, [pc, #328]	@ (800108c <menu+0x544>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b07      	cmp	r3, #7
 8000f46:	d115      	bne.n	8000f74 <menu+0x42c>
			lcd_print(2, 1, sekizHataKoduText);
 8000f48:	4a62      	ldr	r2, [pc, #392]	@ (80010d4 <menu+0x58c>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	2002      	movs	r0, #2
 8000f4e:	f007 fc7e 	bl	800884e <lcd_print>
			lcd_print(2, 15, "  ");
 8000f52:	4a54      	ldr	r2, [pc, #336]	@ (80010a4 <menu+0x55c>)
 8000f54:	210f      	movs	r1, #15
 8000f56:	2002      	movs	r0, #2
 8000f58:	f007 fc79 	bl	800884e <lcd_print>
			itoa(hataKayit8, snum, 10);
 8000f5c:	4b5e      	ldr	r3, [pc, #376]	@ (80010d8 <menu+0x590>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	220a      	movs	r2, #10
 8000f62:	494e      	ldr	r1, [pc, #312]	@ (800109c <menu+0x554>)
 8000f64:	4618      	mov	r0, r3
 8000f66:	f00b f96f 	bl	800c248 <itoa>
			lcd_print(2, 14, snum);
 8000f6a:	4a4c      	ldr	r2, [pc, #304]	@ (800109c <menu+0x554>)
 8000f6c:	210e      	movs	r1, #14
 8000f6e:	2002      	movs	r0, #2
 8000f70:	f007 fc6d 	bl	800884e <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8000f74:	4b45      	ldr	r3, [pc, #276]	@ (800108c <menu+0x544>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b08      	cmp	r3, #8
 8000f7a:	d115      	bne.n	8000fa8 <menu+0x460>
			lcd_print(2, 1, dokuzHataKoduText);
 8000f7c:	4a57      	ldr	r2, [pc, #348]	@ (80010dc <menu+0x594>)
 8000f7e:	2101      	movs	r1, #1
 8000f80:	2002      	movs	r0, #2
 8000f82:	f007 fc64 	bl	800884e <lcd_print>
			lcd_print(2, 15, "  ");
 8000f86:	4a47      	ldr	r2, [pc, #284]	@ (80010a4 <menu+0x55c>)
 8000f88:	210f      	movs	r1, #15
 8000f8a:	2002      	movs	r0, #2
 8000f8c:	f007 fc5f 	bl	800884e <lcd_print>
			itoa(hataKayit9, snum, 10);
 8000f90:	4b53      	ldr	r3, [pc, #332]	@ (80010e0 <menu+0x598>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	220a      	movs	r2, #10
 8000f96:	4941      	ldr	r1, [pc, #260]	@ (800109c <menu+0x554>)
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f00b f955 	bl	800c248 <itoa>
			lcd_print(2, 14, snum);
 8000f9e:	4a3f      	ldr	r2, [pc, #252]	@ (800109c <menu+0x554>)
 8000fa0:	210e      	movs	r1, #14
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f007 fc53 	bl	800884e <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8000fa8:	4b38      	ldr	r3, [pc, #224]	@ (800108c <menu+0x544>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b09      	cmp	r3, #9
 8000fae:	d115      	bne.n	8000fdc <menu+0x494>
			lcd_print(2, 1, onHataKoduText);
 8000fb0:	4a4c      	ldr	r2, [pc, #304]	@ (80010e4 <menu+0x59c>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f007 fc4a 	bl	800884e <lcd_print>
			lcd_print(2, 16, " ");
 8000fba:	4a4b      	ldr	r2, [pc, #300]	@ (80010e8 <menu+0x5a0>)
 8000fbc:	2110      	movs	r1, #16
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	f007 fc45 	bl	800884e <lcd_print>
			itoa(hataKayit10, snum, 10);
 8000fc4:	4b49      	ldr	r3, [pc, #292]	@ (80010ec <menu+0x5a4>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	220a      	movs	r2, #10
 8000fca:	4934      	ldr	r1, [pc, #208]	@ (800109c <menu+0x554>)
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00b f93b 	bl	800c248 <itoa>
			lcd_print(2, 15, snum);
 8000fd2:	4a32      	ldr	r2, [pc, #200]	@ (800109c <menu+0x554>)
 8000fd4:	210f      	movs	r1, #15
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f007 fc39 	bl	800884e <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800108c <menu+0x544>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b0a      	cmp	r3, #10
 8000fe2:	d104      	bne.n	8000fee <menu+0x4a6>
			lcd_print(2, 1, silmekIcinText);
 8000fe4:	4a42      	ldr	r2, [pc, #264]	@ (80010f0 <menu+0x5a8>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f007 fc30 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000fee:	2102      	movs	r1, #2
 8000ff0:	4840      	ldr	r0, [pc, #256]	@ (80010f4 <menu+0x5ac>)
 8000ff2:	f008 fd87 	bl	8009b04 <HAL_GPIO_ReadPin>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d119      	bne.n	8001030 <menu+0x4e8>
 8000ffc:	4b3e      	ldr	r3, [pc, #248]	@ (80010f8 <menu+0x5b0>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	f083 0301 	eor.w	r3, r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d012      	beq.n	8001030 <menu+0x4e8>
 800100a:	4b3c      	ldr	r3, [pc, #240]	@ (80010fc <menu+0x5b4>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10e      	bne.n	8001030 <menu+0x4e8>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <menu+0x544>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	3301      	adds	r3, #1
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <menu+0x544>)
 800101c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 800101e:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <menu+0x544>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b0a      	cmp	r3, #10
 8001024:	d902      	bls.n	800102c <menu+0x4e4>
				hataGostermeSirasi = 0;
 8001026:	4b19      	ldr	r3, [pc, #100]	@ (800108c <menu+0x544>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800102c:	f002 f990 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001030:	2104      	movs	r1, #4
 8001032:	4830      	ldr	r0, [pc, #192]	@ (80010f4 <menu+0x5ac>)
 8001034:	f008 fd66 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	2b01      	cmp	r3, #1
 800103c:	d119      	bne.n	8001072 <menu+0x52a>
 800103e:	4b2e      	ldr	r3, [pc, #184]	@ (80010f8 <menu+0x5b0>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	f083 0301 	eor.w	r3, r3, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d012      	beq.n	8001072 <menu+0x52a>
 800104c:	4b2b      	ldr	r3, [pc, #172]	@ (80010fc <menu+0x5b4>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d10e      	bne.n	8001072 <menu+0x52a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001054:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <menu+0x544>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	3b01      	subs	r3, #1
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <menu+0x544>)
 800105e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <menu+0x544>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b0b      	cmp	r3, #11
 8001066:	d902      	bls.n	800106e <menu+0x526>
	    		hataGostermeSirasi = 10;
 8001068:	4b08      	ldr	r3, [pc, #32]	@ (800108c <menu+0x544>)
 800106a:	220a      	movs	r2, #10
 800106c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800106e:	f002 f96f 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001072:	2108      	movs	r1, #8
 8001074:	481f      	ldr	r0, [pc, #124]	@ (80010f4 <menu+0x5ac>)
 8001076:	f008 fd45 	bl	8009b04 <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	2b01      	cmp	r3, #1
 800107e:	f040 8093 	bne.w	80011a8 <menu+0x660>
 8001082:	e03d      	b.n	8001100 <menu+0x5b8>
 8001084:	20000da0 	.word	0x20000da0
 8001088:	20000e30 	.word	0x20000e30
 800108c:	20000da2 	.word	0x20000da2
 8001090:	20000e44 	.word	0x20000e44
 8001094:	0800c38c 	.word	0x0800c38c
 8001098:	20000dc2 	.word	0x20000dc2
 800109c:	20000d70 	.word	0x20000d70
 80010a0:	20000e58 	.word	0x20000e58
 80010a4:	0800c390 	.word	0x0800c390
 80010a8:	20000dc3 	.word	0x20000dc3
 80010ac:	20000e6c 	.word	0x20000e6c
 80010b0:	20000dc4 	.word	0x20000dc4
 80010b4:	20000e80 	.word	0x20000e80
 80010b8:	20000dc5 	.word	0x20000dc5
 80010bc:	20000e94 	.word	0x20000e94
 80010c0:	20000dc6 	.word	0x20000dc6
 80010c4:	20000ea8 	.word	0x20000ea8
 80010c8:	20000dc7 	.word	0x20000dc7
 80010cc:	20000ebc 	.word	0x20000ebc
 80010d0:	20000dc8 	.word	0x20000dc8
 80010d4:	20000ed0 	.word	0x20000ed0
 80010d8:	20000dc9 	.word	0x20000dc9
 80010dc:	20000ee4 	.word	0x20000ee4
 80010e0:	20000dca 	.word	0x20000dca
 80010e4:	20000ef8 	.word	0x20000ef8
 80010e8:	0800c394 	.word	0x0800c394
 80010ec:	20000dcb 	.word	0x20000dcb
 80010f0:	20000f0c 	.word	0x20000f0c
 80010f4:	40010800 	.word	0x40010800
 80010f8:	20000dcf 	.word	0x20000dcf
 80010fc:	20000daf 	.word	0x20000daf
 8001100:	4b7d      	ldr	r3, [pc, #500]	@ (80012f8 <menu+0x7b0>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	f083 0301 	eor.w	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d04c      	beq.n	80011a8 <menu+0x660>
 800110e:	4b7b      	ldr	r3, [pc, #492]	@ (80012fc <menu+0x7b4>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b0a      	cmp	r3, #10
 8001114:	d148      	bne.n	80011a8 <menu+0x660>
			hataKayit1 = 0; eepromData[37] = 0;
 8001116:	4b7a      	ldr	r3, [pc, #488]	@ (8001300 <menu+0x7b8>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	4b79      	ldr	r3, [pc, #484]	@ (8001304 <menu+0x7bc>)
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001124:	4b78      	ldr	r3, [pc, #480]	@ (8001308 <menu+0x7c0>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	4b76      	ldr	r3, [pc, #472]	@ (8001304 <menu+0x7bc>)
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001132:	4b76      	ldr	r3, [pc, #472]	@ (800130c <menu+0x7c4>)
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
 8001138:	4b72      	ldr	r3, [pc, #456]	@ (8001304 <menu+0x7bc>)
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001140:	4b73      	ldr	r3, [pc, #460]	@ (8001310 <menu+0x7c8>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	4b6f      	ldr	r3, [pc, #444]	@ (8001304 <menu+0x7bc>)
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 800114e:	4b71      	ldr	r3, [pc, #452]	@ (8001314 <menu+0x7cc>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	4b6b      	ldr	r3, [pc, #428]	@ (8001304 <menu+0x7bc>)
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 800115c:	4b6e      	ldr	r3, [pc, #440]	@ (8001318 <menu+0x7d0>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	4b68      	ldr	r3, [pc, #416]	@ (8001304 <menu+0x7bc>)
 8001164:	2200      	movs	r2, #0
 8001166:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 800116a:	4b6c      	ldr	r3, [pc, #432]	@ (800131c <menu+0x7d4>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
 8001170:	4b64      	ldr	r3, [pc, #400]	@ (8001304 <menu+0x7bc>)
 8001172:	2200      	movs	r2, #0
 8001174:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001178:	4b69      	ldr	r3, [pc, #420]	@ (8001320 <menu+0x7d8>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	4b61      	ldr	r3, [pc, #388]	@ (8001304 <menu+0x7bc>)
 8001180:	2200      	movs	r2, #0
 8001182:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001186:	4b67      	ldr	r3, [pc, #412]	@ (8001324 <menu+0x7dc>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	4b5d      	ldr	r3, [pc, #372]	@ (8001304 <menu+0x7bc>)
 800118e:	2200      	movs	r2, #0
 8001190:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001194:	4b64      	ldr	r3, [pc, #400]	@ (8001328 <menu+0x7e0>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
 800119a:	4b5a      	ldr	r3, [pc, #360]	@ (8001304 <menu+0x7bc>)
 800119c:	2200      	movs	r2, #0
 800119e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 80011a2:	4b62      	ldr	r3, [pc, #392]	@ (800132c <menu+0x7e4>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80011a8:	4b61      	ldr	r3, [pc, #388]	@ (8001330 <menu+0x7e8>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	f040 808e 	bne.w	80012ce <menu+0x786>
		lcd_print(1, 1, calismaSekliText);
 80011b2:	4a60      	ldr	r2, [pc, #384]	@ (8001334 <menu+0x7ec>)
 80011b4:	2101      	movs	r1, #1
 80011b6:	2001      	movs	r0, #1
 80011b8:	f007 fb49 	bl	800884e <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80011bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001338 <menu+0x7f0>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d003      	beq.n	80011cc <menu+0x684>
 80011c4:	4b5c      	ldr	r3, [pc, #368]	@ (8001338 <menu+0x7f0>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d104      	bne.n	80011d6 <menu+0x68e>
			lcd_print(2, 1, devirmeYuruyusText);
 80011cc:	4a5b      	ldr	r2, [pc, #364]	@ (800133c <menu+0x7f4>)
 80011ce:	2101      	movs	r1, #1
 80011d0:	2002      	movs	r0, #2
 80011d2:	f007 fb3c 	bl	800884e <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 80011d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001340 <menu+0x7f8>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d108      	bne.n	80011f0 <menu+0x6a8>
 80011de:	4b56      	ldr	r3, [pc, #344]	@ (8001338 <menu+0x7f0>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d104      	bne.n	80011f0 <menu+0x6a8>
			lcd_print(2, 1, bastikcaCalisanText);
 80011e6:	4a57      	ldr	r2, [pc, #348]	@ (8001344 <menu+0x7fc>)
 80011e8:	2101      	movs	r1, #1
 80011ea:	2002      	movs	r0, #2
 80011ec:	f007 fb2f 	bl	800884e <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 80011f0:	4b53      	ldr	r3, [pc, #332]	@ (8001340 <menu+0x7f8>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d108      	bne.n	800120a <menu+0x6c2>
 80011f8:	4b4f      	ldr	r3, [pc, #316]	@ (8001338 <menu+0x7f0>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d104      	bne.n	800120a <menu+0x6c2>
			lcd_print(2, 1, basGonderText);
 8001200:	4a51      	ldr	r2, [pc, #324]	@ (8001348 <menu+0x800>)
 8001202:	2101      	movs	r1, #1
 8001204:	2002      	movs	r0, #2
 8001206:	f007 fb22 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800120a:	2102      	movs	r1, #2
 800120c:	484f      	ldr	r0, [pc, #316]	@ (800134c <menu+0x804>)
 800120e:	f008 fc79 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001212:	4603      	mov	r3, r0
 8001214:	2b01      	cmp	r3, #1
 8001216:	d119      	bne.n	800124c <menu+0x704>
 8001218:	4b37      	ldr	r3, [pc, #220]	@ (80012f8 <menu+0x7b0>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	f083 0301 	eor.w	r3, r3, #1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d012      	beq.n	800124c <menu+0x704>
 8001226:	4b44      	ldr	r3, [pc, #272]	@ (8001338 <menu+0x7f0>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10e      	bne.n	800124c <menu+0x704>
			calismaSekli = calismaSekli + 1;
 800122e:	4b44      	ldr	r3, [pc, #272]	@ (8001340 <menu+0x7f8>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b42      	ldr	r3, [pc, #264]	@ (8001340 <menu+0x7f8>)
 8001238:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 800123a:	4b41      	ldr	r3, [pc, #260]	@ (8001340 <menu+0x7f8>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d902      	bls.n	8001248 <menu+0x700>
				calismaSekli = 0;
 8001242:	4b3f      	ldr	r3, [pc, #252]	@ (8001340 <menu+0x7f8>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001248:	f002 f882 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800124c:	2104      	movs	r1, #4
 800124e:	483f      	ldr	r0, [pc, #252]	@ (800134c <menu+0x804>)
 8001250:	f008 fc58 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001254:	4603      	mov	r3, r0
 8001256:	2b01      	cmp	r3, #1
 8001258:	d119      	bne.n	800128e <menu+0x746>
 800125a:	4b27      	ldr	r3, [pc, #156]	@ (80012f8 <menu+0x7b0>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d012      	beq.n	800128e <menu+0x746>
 8001268:	4b33      	ldr	r3, [pc, #204]	@ (8001338 <menu+0x7f0>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10e      	bne.n	800128e <menu+0x746>
			calismaSekli = calismaSekli - 1;
 8001270:	4b33      	ldr	r3, [pc, #204]	@ (8001340 <menu+0x7f8>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	3b01      	subs	r3, #1
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b31      	ldr	r3, [pc, #196]	@ (8001340 <menu+0x7f8>)
 800127a:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 800127c:	4b30      	ldr	r3, [pc, #192]	@ (8001340 <menu+0x7f8>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <menu+0x742>
	    		calismaSekli = 1;
 8001284:	4b2e      	ldr	r3, [pc, #184]	@ (8001340 <menu+0x7f8>)
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800128a:	f002 f861 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800128e:	2108      	movs	r1, #8
 8001290:	482e      	ldr	r0, [pc, #184]	@ (800134c <menu+0x804>)
 8001292:	f008 fc37 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001296:	4603      	mov	r3, r0
 8001298:	2b01      	cmp	r3, #1
 800129a:	d118      	bne.n	80012ce <menu+0x786>
 800129c:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <menu+0x7b0>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	f083 0301 	eor.w	r3, r3, #1
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d011      	beq.n	80012ce <menu+0x786>
			eepromData[1] = calismaSekli;
 80012aa:	4b25      	ldr	r3, [pc, #148]	@ (8001340 <menu+0x7f8>)
 80012ac:	781a      	ldrb	r2, [r3, #0]
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <menu+0x7bc>)
 80012b0:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 80012b2:	4b23      	ldr	r3, [pc, #140]	@ (8001340 <menu+0x7f8>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d106      	bne.n	80012c8 <menu+0x780>
				altLimit = 1;
 80012ba:	4b25      	ldr	r3, [pc, #148]	@ (8001350 <menu+0x808>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80012c0:	4b23      	ldr	r3, [pc, #140]	@ (8001350 <menu+0x808>)
 80012c2:	781a      	ldrb	r2, [r3, #0]
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <menu+0x7bc>)
 80012c6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80012c8:	4b18      	ldr	r3, [pc, #96]	@ (800132c <menu+0x7e4>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 80012ce:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <menu+0x7e8>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	f040 809c 	bne.w	8001410 <menu+0x8c8>
		lcd_print(1, 1, emniyetCercevesiText);
 80012d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001354 <menu+0x80c>)
 80012da:	2101      	movs	r1, #1
 80012dc:	2001      	movs	r0, #1
 80012de:	f007 fab6 	bl	800884e <lcd_print>

		if(emniyetCercevesi == 0) {
 80012e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001358 <menu+0x810>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d13a      	bne.n	8001360 <menu+0x818>
			lcd_print(2, 1, pasifText);
 80012ea:	4a1c      	ldr	r2, [pc, #112]	@ (800135c <menu+0x814>)
 80012ec:	2101      	movs	r1, #1
 80012ee:	2002      	movs	r0, #2
 80012f0:	f007 faad 	bl	800884e <lcd_print>
 80012f4:	e03d      	b.n	8001372 <menu+0x82a>
 80012f6:	bf00      	nop
 80012f8:	20000dcf 	.word	0x20000dcf
 80012fc:	20000da2 	.word	0x20000da2
 8001300:	20000dc2 	.word	0x20000dc2
 8001304:	20000d00 	.word	0x20000d00
 8001308:	20000dc3 	.word	0x20000dc3
 800130c:	20000dc4 	.word	0x20000dc4
 8001310:	20000dc5 	.word	0x20000dc5
 8001314:	20000dc6 	.word	0x20000dc6
 8001318:	20000dc7 	.word	0x20000dc7
 800131c:	20000dc8 	.word	0x20000dc8
 8001320:	20000dc9 	.word	0x20000dc9
 8001324:	20000dca 	.word	0x20000dca
 8001328:	20000dcb 	.word	0x20000dcb
 800132c:	20000dcc 	.word	0x20000dcc
 8001330:	20000da0 	.word	0x20000da0
 8001334:	20000f20 	.word	0x20000f20
 8001338:	20000daf 	.word	0x20000daf
 800133c:	20000f34 	.word	0x20000f34
 8001340:	20000da1 	.word	0x20000da1
 8001344:	20000f48 	.word	0x20000f48
 8001348:	20000f5c 	.word	0x20000f5c
 800134c:	40010800 	.word	0x40010800
 8001350:	20000da6 	.word	0x20000da6
 8001354:	20000f70 	.word	0x20000f70
 8001358:	20000da4 	.word	0x20000da4
 800135c:	20000f84 	.word	0x20000f84
		} else if(emniyetCercevesi == 1) {
 8001360:	4b6b      	ldr	r3, [pc, #428]	@ (8001510 <menu+0x9c8>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d104      	bne.n	8001372 <menu+0x82a>
			lcd_print(2, 1, ondSafetyTextGN);
 8001368:	4a6a      	ldr	r2, [pc, #424]	@ (8001514 <menu+0x9cc>)
 800136a:	2101      	movs	r1, #1
 800136c:	2002      	movs	r0, #2
 800136e:	f007 fa6e 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001372:	2102      	movs	r1, #2
 8001374:	4868      	ldr	r0, [pc, #416]	@ (8001518 <menu+0x9d0>)
 8001376:	f008 fbc5 	bl	8009b04 <HAL_GPIO_ReadPin>
 800137a:	4603      	mov	r3, r0
 800137c:	2b01      	cmp	r3, #1
 800137e:	d115      	bne.n	80013ac <menu+0x864>
 8001380:	4b66      	ldr	r3, [pc, #408]	@ (800151c <menu+0x9d4>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f083 0301 	eor.w	r3, r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00e      	beq.n	80013ac <menu+0x864>
			emniyetCercevesi = emniyetCercevesi + 1;
 800138e:	4b60      	ldr	r3, [pc, #384]	@ (8001510 <menu+0x9c8>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b5e      	ldr	r3, [pc, #376]	@ (8001510 <menu+0x9c8>)
 8001398:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 800139a:	4b5d      	ldr	r3, [pc, #372]	@ (8001510 <menu+0x9c8>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d902      	bls.n	80013a8 <menu+0x860>
				emniyetCercevesi = 0;
 80013a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001510 <menu+0x9c8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80013a8:	f001 ffd2 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80013ac:	2104      	movs	r1, #4
 80013ae:	485a      	ldr	r0, [pc, #360]	@ (8001518 <menu+0x9d0>)
 80013b0:	f008 fba8 	bl	8009b04 <HAL_GPIO_ReadPin>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d115      	bne.n	80013e6 <menu+0x89e>
 80013ba:	4b58      	ldr	r3, [pc, #352]	@ (800151c <menu+0x9d4>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	f083 0301 	eor.w	r3, r3, #1
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00e      	beq.n	80013e6 <menu+0x89e>
			emniyetCercevesi = emniyetCercevesi - 1;
 80013c8:	4b51      	ldr	r3, [pc, #324]	@ (8001510 <menu+0x9c8>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001510 <menu+0x9c8>)
 80013d2:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 80013d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001510 <menu+0x9c8>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d002      	beq.n	80013e2 <menu+0x89a>
		   		emniyetCercevesi = 1;
 80013dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001510 <menu+0x9c8>)
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80013e2:	f001 ffb5 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80013e6:	2108      	movs	r1, #8
 80013e8:	484b      	ldr	r0, [pc, #300]	@ (8001518 <menu+0x9d0>)
 80013ea:	f008 fb8b 	bl	8009b04 <HAL_GPIO_ReadPin>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d10d      	bne.n	8001410 <menu+0x8c8>
 80013f4:	4b49      	ldr	r3, [pc, #292]	@ (800151c <menu+0x9d4>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	f083 0301 	eor.w	r3, r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d006      	beq.n	8001410 <menu+0x8c8>
			eepromData[2] = emniyetCercevesi;
 8001402:	4b43      	ldr	r3, [pc, #268]	@ (8001510 <menu+0x9c8>)
 8001404:	781a      	ldrb	r2, [r3, #0]
 8001406:	4b46      	ldr	r3, [pc, #280]	@ (8001520 <menu+0x9d8>)
 8001408:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 800140a:	4b46      	ldr	r3, [pc, #280]	@ (8001524 <menu+0x9dc>)
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001410:	4b45      	ldr	r3, [pc, #276]	@ (8001528 <menu+0x9e0>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b04      	cmp	r3, #4
 8001416:	d166      	bne.n	80014e6 <menu+0x99e>
		lcd_print(1, 1, yavaslamaLimitText);
 8001418:	4a44      	ldr	r2, [pc, #272]	@ (800152c <menu+0x9e4>)
 800141a:	2101      	movs	r1, #1
 800141c:	2001      	movs	r0, #1
 800141e:	f007 fa16 	bl	800884e <lcd_print>

		if(yavaslamaLimit == 0) {
 8001422:	4b43      	ldr	r3, [pc, #268]	@ (8001530 <menu+0x9e8>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d105      	bne.n	8001436 <menu+0x8ee>
			lcd_print(2, 1, pasifText);
 800142a:	4a42      	ldr	r2, [pc, #264]	@ (8001534 <menu+0x9ec>)
 800142c:	2101      	movs	r1, #1
 800142e:	2002      	movs	r0, #2
 8001430:	f007 fa0d 	bl	800884e <lcd_print>
 8001434:	e008      	b.n	8001448 <menu+0x900>
		} else if(yavaslamaLimit == 1) {
 8001436:	4b3e      	ldr	r3, [pc, #248]	@ (8001530 <menu+0x9e8>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d104      	bne.n	8001448 <menu+0x900>
			lcd_print(2, 1, aktifText);
 800143e:	4a3e      	ldr	r2, [pc, #248]	@ (8001538 <menu+0x9f0>)
 8001440:	2101      	movs	r1, #1
 8001442:	2002      	movs	r0, #2
 8001444:	f007 fa03 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001448:	2102      	movs	r1, #2
 800144a:	4833      	ldr	r0, [pc, #204]	@ (8001518 <menu+0x9d0>)
 800144c:	f008 fb5a 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001450:	4603      	mov	r3, r0
 8001452:	2b01      	cmp	r3, #1
 8001454:	d115      	bne.n	8001482 <menu+0x93a>
 8001456:	4b31      	ldr	r3, [pc, #196]	@ (800151c <menu+0x9d4>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	f083 0301 	eor.w	r3, r3, #1
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00e      	beq.n	8001482 <menu+0x93a>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001464:	4b32      	ldr	r3, [pc, #200]	@ (8001530 <menu+0x9e8>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b30      	ldr	r3, [pc, #192]	@ (8001530 <menu+0x9e8>)
 800146e:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001470:	4b2f      	ldr	r3, [pc, #188]	@ (8001530 <menu+0x9e8>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d902      	bls.n	800147e <menu+0x936>
				yavaslamaLimit = 0;
 8001478:	4b2d      	ldr	r3, [pc, #180]	@ (8001530 <menu+0x9e8>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800147e:	f001 ff67 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001482:	2104      	movs	r1, #4
 8001484:	4824      	ldr	r0, [pc, #144]	@ (8001518 <menu+0x9d0>)
 8001486:	f008 fb3d 	bl	8009b04 <HAL_GPIO_ReadPin>
 800148a:	4603      	mov	r3, r0
 800148c:	2b01      	cmp	r3, #1
 800148e:	d115      	bne.n	80014bc <menu+0x974>
 8001490:	4b22      	ldr	r3, [pc, #136]	@ (800151c <menu+0x9d4>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	f083 0301 	eor.w	r3, r3, #1
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00e      	beq.n	80014bc <menu+0x974>
			yavaslamaLimit = yavaslamaLimit - 1;
 800149e:	4b24      	ldr	r3, [pc, #144]	@ (8001530 <menu+0x9e8>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b22      	ldr	r3, [pc, #136]	@ (8001530 <menu+0x9e8>)
 80014a8:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80014aa:	4b21      	ldr	r3, [pc, #132]	@ (8001530 <menu+0x9e8>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d002      	beq.n	80014b8 <menu+0x970>
		   		yavaslamaLimit = 1;
 80014b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001530 <menu+0x9e8>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80014b8:	f001 ff4a 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80014bc:	2108      	movs	r1, #8
 80014be:	4816      	ldr	r0, [pc, #88]	@ (8001518 <menu+0x9d0>)
 80014c0:	f008 fb20 	bl	8009b04 <HAL_GPIO_ReadPin>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d10d      	bne.n	80014e6 <menu+0x99e>
 80014ca:	4b14      	ldr	r3, [pc, #80]	@ (800151c <menu+0x9d4>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	f083 0301 	eor.w	r3, r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d006      	beq.n	80014e6 <menu+0x99e>
			eepromData[4] = yavaslamaLimit;
 80014d8:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <menu+0x9e8>)
 80014da:	781a      	ldrb	r2, [r3, #0]
 80014dc:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <menu+0x9d8>)
 80014de:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80014e0:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <menu+0x9dc>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <menu+0x9e0>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b05      	cmp	r3, #5
 80014ec:	f040 80aa 	bne.w	8001644 <menu+0xafc>
		lcd_print(1, 1, altLimitText);
 80014f0:	4a12      	ldr	r2, [pc, #72]	@ (800153c <menu+0x9f4>)
 80014f2:	2101      	movs	r1, #1
 80014f4:	2001      	movs	r0, #1
 80014f6:	f007 f9aa 	bl	800884e <lcd_print>

		if(altLimit == 0) {
 80014fa:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <menu+0x9f8>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d120      	bne.n	8001544 <menu+0x9fc>
			lcd_print(2, 1, pasifText);
 8001502:	4a0c      	ldr	r2, [pc, #48]	@ (8001534 <menu+0x9ec>)
 8001504:	2101      	movs	r1, #1
 8001506:	2002      	movs	r0, #2
 8001508:	f007 f9a1 	bl	800884e <lcd_print>
 800150c:	e023      	b.n	8001556 <menu+0xa0e>
 800150e:	bf00      	nop
 8001510:	20000da4 	.word	0x20000da4
 8001514:	20000080 	.word	0x20000080
 8001518:	40010800 	.word	0x40010800
 800151c:	20000dcf 	.word	0x20000dcf
 8001520:	20000d00 	.word	0x20000d00
 8001524:	20000dcc 	.word	0x20000dcc
 8001528:	20000da0 	.word	0x20000da0
 800152c:	20000fac 	.word	0x20000fac
 8001530:	20000da5 	.word	0x20000da5
 8001534:	20000f84 	.word	0x20000f84
 8001538:	20000f98 	.word	0x20000f98
 800153c:	20000fc0 	.word	0x20000fc0
 8001540:	20000da6 	.word	0x20000da6
		} else if(altLimit == 1) {
 8001544:	4b89      	ldr	r3, [pc, #548]	@ (800176c <menu+0xc24>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d104      	bne.n	8001556 <menu+0xa0e>
			lcd_print(2, 1, aktifText);
 800154c:	4a88      	ldr	r2, [pc, #544]	@ (8001770 <menu+0xc28>)
 800154e:	2101      	movs	r1, #1
 8001550:	2002      	movs	r0, #2
 8001552:	f007 f97c 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001556:	2102      	movs	r1, #2
 8001558:	4886      	ldr	r0, [pc, #536]	@ (8001774 <menu+0xc2c>)
 800155a:	f008 fad3 	bl	8009b04 <HAL_GPIO_ReadPin>
 800155e:	4603      	mov	r3, r0
 8001560:	2b01      	cmp	r3, #1
 8001562:	d119      	bne.n	8001598 <menu+0xa50>
 8001564:	4b84      	ldr	r3, [pc, #528]	@ (8001778 <menu+0xc30>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	f083 0301 	eor.w	r3, r3, #1
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d012      	beq.n	8001598 <menu+0xa50>
 8001572:	4b82      	ldr	r3, [pc, #520]	@ (800177c <menu+0xc34>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10e      	bne.n	8001598 <menu+0xa50>
			altLimit = altLimit + 1;
 800157a:	4b7c      	ldr	r3, [pc, #496]	@ (800176c <menu+0xc24>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4b7a      	ldr	r3, [pc, #488]	@ (800176c <menu+0xc24>)
 8001584:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001586:	4b79      	ldr	r3, [pc, #484]	@ (800176c <menu+0xc24>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d902      	bls.n	8001594 <menu+0xa4c>
				altLimit = 0;
 800158e:	4b77      	ldr	r3, [pc, #476]	@ (800176c <menu+0xc24>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001594:	f001 fedc 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001598:	2104      	movs	r1, #4
 800159a:	4876      	ldr	r0, [pc, #472]	@ (8001774 <menu+0xc2c>)
 800159c:	f008 fab2 	bl	8009b04 <HAL_GPIO_ReadPin>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d119      	bne.n	80015da <menu+0xa92>
 80015a6:	4b74      	ldr	r3, [pc, #464]	@ (8001778 <menu+0xc30>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	f083 0301 	eor.w	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d012      	beq.n	80015da <menu+0xa92>
 80015b4:	4b71      	ldr	r3, [pc, #452]	@ (800177c <menu+0xc34>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10e      	bne.n	80015da <menu+0xa92>
			altLimit = altLimit - 1;
 80015bc:	4b6b      	ldr	r3, [pc, #428]	@ (800176c <menu+0xc24>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	4b69      	ldr	r3, [pc, #420]	@ (800176c <menu+0xc24>)
 80015c6:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80015c8:	4b68      	ldr	r3, [pc, #416]	@ (800176c <menu+0xc24>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <menu+0xa8e>
		   		altLimit = 1;
 80015d0:	4b66      	ldr	r3, [pc, #408]	@ (800176c <menu+0xc24>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80015d6:	f001 febb 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80015da:	2108      	movs	r1, #8
 80015dc:	4865      	ldr	r0, [pc, #404]	@ (8001774 <menu+0xc2c>)
 80015de:	f008 fa91 	bl	8009b04 <HAL_GPIO_ReadPin>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d12d      	bne.n	8001644 <menu+0xafc>
 80015e8:	4b63      	ldr	r3, [pc, #396]	@ (8001778 <menu+0xc30>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	f083 0301 	eor.w	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d026      	beq.n	8001644 <menu+0xafc>
			eepromData[5] = altLimit;
 80015f6:	4b5d      	ldr	r3, [pc, #372]	@ (800176c <menu+0xc24>)
 80015f8:	781a      	ldrb	r2, [r3, #0]
 80015fa:	4b61      	ldr	r3, [pc, #388]	@ (8001780 <menu+0xc38>)
 80015fc:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80015fe:	4b5b      	ldr	r3, [pc, #364]	@ (800176c <menu+0xc24>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d110      	bne.n	8001628 <menu+0xae0>
 8001606:	4b5f      	ldr	r3, [pc, #380]	@ (8001784 <menu+0xc3c>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <menu+0xace>
 800160e:	4b5d      	ldr	r3, [pc, #372]	@ (8001784 <menu+0xc3c>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d108      	bne.n	8001628 <menu+0xae0>
				kapiTablaAcKonum = 3;
 8001616:	4b5b      	ldr	r3, [pc, #364]	@ (8001784 <menu+0xc3c>)
 8001618:	2203      	movs	r2, #3
 800161a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 800161c:	4b59      	ldr	r3, [pc, #356]	@ (8001784 <menu+0xc3c>)
 800161e:	781a      	ldrb	r2, [r3, #0]
 8001620:	4b57      	ldr	r3, [pc, #348]	@ (8001780 <menu+0xc38>)
 8001622:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001626:	e00a      	b.n	800163e <menu+0xaf6>
			} else if(altLimit == 0) {
 8001628:	4b50      	ldr	r3, [pc, #320]	@ (800176c <menu+0xc24>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d106      	bne.n	800163e <menu+0xaf6>
				platformSilindirTipi = 0;
 8001630:	4b55      	ldr	r3, [pc, #340]	@ (8001788 <menu+0xc40>)
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001636:	4b54      	ldr	r3, [pc, #336]	@ (8001788 <menu+0xc40>)
 8001638:	781a      	ldrb	r2, [r3, #0]
 800163a:	4b51      	ldr	r3, [pc, #324]	@ (8001780 <menu+0xc38>)
 800163c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800163e:	4b53      	ldr	r3, [pc, #332]	@ (800178c <menu+0xc44>)
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001644:	4b52      	ldr	r3, [pc, #328]	@ (8001790 <menu+0xc48>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b06      	cmp	r3, #6
 800164a:	d166      	bne.n	800171a <menu+0xbd2>
		lcd_print(1, 1, basincSalteriText);
 800164c:	4a51      	ldr	r2, [pc, #324]	@ (8001794 <menu+0xc4c>)
 800164e:	2101      	movs	r1, #1
 8001650:	2001      	movs	r0, #1
 8001652:	f007 f8fc 	bl	800884e <lcd_print>

		if(basincSalteri == 0) {
 8001656:	4b50      	ldr	r3, [pc, #320]	@ (8001798 <menu+0xc50>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d105      	bne.n	800166a <menu+0xb22>
			lcd_print(2, 1, pasifText);
 800165e:	4a4f      	ldr	r2, [pc, #316]	@ (800179c <menu+0xc54>)
 8001660:	2101      	movs	r1, #1
 8001662:	2002      	movs	r0, #2
 8001664:	f007 f8f3 	bl	800884e <lcd_print>
 8001668:	e008      	b.n	800167c <menu+0xb34>
		} else if(basincSalteri == 1) {
 800166a:	4b4b      	ldr	r3, [pc, #300]	@ (8001798 <menu+0xc50>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d104      	bne.n	800167c <menu+0xb34>
			lcd_print(2, 1, aktifText);
 8001672:	4a3f      	ldr	r2, [pc, #252]	@ (8001770 <menu+0xc28>)
 8001674:	2101      	movs	r1, #1
 8001676:	2002      	movs	r0, #2
 8001678:	f007 f8e9 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800167c:	2102      	movs	r1, #2
 800167e:	483d      	ldr	r0, [pc, #244]	@ (8001774 <menu+0xc2c>)
 8001680:	f008 fa40 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001684:	4603      	mov	r3, r0
 8001686:	2b01      	cmp	r3, #1
 8001688:	d115      	bne.n	80016b6 <menu+0xb6e>
 800168a:	4b3b      	ldr	r3, [pc, #236]	@ (8001778 <menu+0xc30>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	f083 0301 	eor.w	r3, r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00e      	beq.n	80016b6 <menu+0xb6e>
			basincSalteri = basincSalteri + 1;
 8001698:	4b3f      	ldr	r3, [pc, #252]	@ (8001798 <menu+0xc50>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001798 <menu+0xc50>)
 80016a2:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80016a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001798 <menu+0xc50>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d902      	bls.n	80016b2 <menu+0xb6a>
				basincSalteri = 0;
 80016ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001798 <menu+0xc50>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80016b2:	f001 fe4d 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80016b6:	2104      	movs	r1, #4
 80016b8:	482e      	ldr	r0, [pc, #184]	@ (8001774 <menu+0xc2c>)
 80016ba:	f008 fa23 	bl	8009b04 <HAL_GPIO_ReadPin>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d115      	bne.n	80016f0 <menu+0xba8>
 80016c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001778 <menu+0xc30>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	f083 0301 	eor.w	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00e      	beq.n	80016f0 <menu+0xba8>
			basincSalteri = basincSalteri - 1;
 80016d2:	4b31      	ldr	r3, [pc, #196]	@ (8001798 <menu+0xc50>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4b2f      	ldr	r3, [pc, #188]	@ (8001798 <menu+0xc50>)
 80016dc:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80016de:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <menu+0xc50>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <menu+0xba4>
		   		basincSalteri = 1;
 80016e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001798 <menu+0xc50>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80016ec:	f001 fe30 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80016f0:	2108      	movs	r1, #8
 80016f2:	4820      	ldr	r0, [pc, #128]	@ (8001774 <menu+0xc2c>)
 80016f4:	f008 fa06 	bl	8009b04 <HAL_GPIO_ReadPin>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d10d      	bne.n	800171a <menu+0xbd2>
 80016fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001778 <menu+0xc30>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	f083 0301 	eor.w	r3, r3, #1
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	d006      	beq.n	800171a <menu+0xbd2>
			eepromData[6] = basincSalteri;
 800170c:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <menu+0xc50>)
 800170e:	781a      	ldrb	r2, [r3, #0]
 8001710:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <menu+0xc38>)
 8001712:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001714:	4b1d      	ldr	r3, [pc, #116]	@ (800178c <menu+0xc44>)
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800171a:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <menu+0xc48>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b07      	cmp	r3, #7
 8001720:	f040 80a9 	bne.w	8001876 <menu+0xd2e>
		lcd_print(1, 1, kapiSecimleriText);
 8001724:	4a1e      	ldr	r2, [pc, #120]	@ (80017a0 <menu+0xc58>)
 8001726:	2101      	movs	r1, #1
 8001728:	2001      	movs	r0, #1
 800172a:	f007 f890 	bl	800884e <lcd_print>

		if(kapiSecimleri == 0) {
 800172e:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <menu+0xc5c>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d105      	bne.n	8001742 <menu+0xbfa>
			lcd_print(2, 1, pasifText);
 8001736:	4a19      	ldr	r2, [pc, #100]	@ (800179c <menu+0xc54>)
 8001738:	2101      	movs	r1, #1
 800173a:	2002      	movs	r0, #2
 800173c:	f007 f887 	bl	800884e <lcd_print>
 8001740:	e03f      	b.n	80017c2 <menu+0xc7a>
		} else if(kapiSecimleri == 1) {
 8001742:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <menu+0xc5c>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d105      	bne.n	8001756 <menu+0xc0e>
			lcd_print(2, 1, katKapisiAktifText);
 800174a:	4a17      	ldr	r2, [pc, #92]	@ (80017a8 <menu+0xc60>)
 800174c:	2101      	movs	r1, #1
 800174e:	2002      	movs	r0, #2
 8001750:	f007 f87d 	bl	800884e <lcd_print>
 8001754:	e035      	b.n	80017c2 <menu+0xc7a>
		} else if(kapiSecimleri == 2) {
 8001756:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <menu+0xc5c>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d128      	bne.n	80017b0 <menu+0xc68>
			lcd_print(2, 1, tablaKapiAktifText);
 800175e:	4a13      	ldr	r2, [pc, #76]	@ (80017ac <menu+0xc64>)
 8001760:	2101      	movs	r1, #1
 8001762:	2002      	movs	r0, #2
 8001764:	f007 f873 	bl	800884e <lcd_print>
 8001768:	e02b      	b.n	80017c2 <menu+0xc7a>
 800176a:	bf00      	nop
 800176c:	20000da6 	.word	0x20000da6
 8001770:	20000f98 	.word	0x20000f98
 8001774:	40010800 	.word	0x40010800
 8001778:	20000dcf 	.word	0x20000dcf
 800177c:	20000da1 	.word	0x20000da1
 8001780:	20000d00 	.word	0x20000d00
 8001784:	20000dad 	.word	0x20000dad
 8001788:	20000db3 	.word	0x20000db3
 800178c:	20000dcc 	.word	0x20000dcc
 8001790:	20000da0 	.word	0x20000da0
 8001794:	20000fd4 	.word	0x20000fd4
 8001798:	20000da7 	.word	0x20000da7
 800179c:	20000f84 	.word	0x20000f84
 80017a0:	20000fe8 	.word	0x20000fe8
 80017a4:	20000da8 	.word	0x20000da8
 80017a8:	20000ffc 	.word	0x20000ffc
 80017ac:	20001010 	.word	0x20001010
		} else if(kapiSecimleri == 3) {
 80017b0:	4b76      	ldr	r3, [pc, #472]	@ (800198c <menu+0xe44>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d104      	bne.n	80017c2 <menu+0xc7a>
			lcd_print(2, 1, katArtiTablaAktifText);
 80017b8:	4a75      	ldr	r2, [pc, #468]	@ (8001990 <menu+0xe48>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	2002      	movs	r0, #2
 80017be:	f007 f846 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80017c2:	2102      	movs	r1, #2
 80017c4:	4873      	ldr	r0, [pc, #460]	@ (8001994 <menu+0xe4c>)
 80017c6:	f008 f99d 	bl	8009b04 <HAL_GPIO_ReadPin>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d115      	bne.n	80017fc <menu+0xcb4>
 80017d0:	4b71      	ldr	r3, [pc, #452]	@ (8001998 <menu+0xe50>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	f083 0301 	eor.w	r3, r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00e      	beq.n	80017fc <menu+0xcb4>
			kapiSecimleri = kapiSecimleri + 1;
 80017de:	4b6b      	ldr	r3, [pc, #428]	@ (800198c <menu+0xe44>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4b69      	ldr	r3, [pc, #420]	@ (800198c <menu+0xe44>)
 80017e8:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80017ea:	4b68      	ldr	r3, [pc, #416]	@ (800198c <menu+0xe44>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d902      	bls.n	80017f8 <menu+0xcb0>
				kapiSecimleri = 0;
 80017f2:	4b66      	ldr	r3, [pc, #408]	@ (800198c <menu+0xe44>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80017f8:	f001 fdaa 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80017fc:	2104      	movs	r1, #4
 80017fe:	4865      	ldr	r0, [pc, #404]	@ (8001994 <menu+0xe4c>)
 8001800:	f008 f980 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001804:	4603      	mov	r3, r0
 8001806:	2b01      	cmp	r3, #1
 8001808:	d115      	bne.n	8001836 <menu+0xcee>
 800180a:	4b63      	ldr	r3, [pc, #396]	@ (8001998 <menu+0xe50>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	f083 0301 	eor.w	r3, r3, #1
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00e      	beq.n	8001836 <menu+0xcee>
			kapiSecimleri = kapiSecimleri - 1;
 8001818:	4b5c      	ldr	r3, [pc, #368]	@ (800198c <menu+0xe44>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	3b01      	subs	r3, #1
 800181e:	b2da      	uxtb	r2, r3
 8001820:	4b5a      	ldr	r3, [pc, #360]	@ (800198c <menu+0xe44>)
 8001822:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8001824:	4b59      	ldr	r3, [pc, #356]	@ (800198c <menu+0xe44>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b04      	cmp	r3, #4
 800182a:	d902      	bls.n	8001832 <menu+0xcea>
		   		kapiSecimleri = 3;
 800182c:	4b57      	ldr	r3, [pc, #348]	@ (800198c <menu+0xe44>)
 800182e:	2203      	movs	r2, #3
 8001830:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001832:	f001 fd8d 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001836:	2108      	movs	r1, #8
 8001838:	4856      	ldr	r0, [pc, #344]	@ (8001994 <menu+0xe4c>)
 800183a:	f008 f963 	bl	8009b04 <HAL_GPIO_ReadPin>
 800183e:	4603      	mov	r3, r0
 8001840:	2b01      	cmp	r3, #1
 8001842:	d118      	bne.n	8001876 <menu+0xd2e>
 8001844:	4b54      	ldr	r3, [pc, #336]	@ (8001998 <menu+0xe50>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	f083 0301 	eor.w	r3, r3, #1
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d011      	beq.n	8001876 <menu+0xd2e>
			eepromData[7] = kapiSecimleri;
 8001852:	4b4e      	ldr	r3, [pc, #312]	@ (800198c <menu+0xe44>)
 8001854:	781a      	ldrb	r2, [r3, #0]
 8001856:	4b51      	ldr	r3, [pc, #324]	@ (800199c <menu+0xe54>)
 8001858:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800185a:	4b4c      	ldr	r3, [pc, #304]	@ (800198c <menu+0xe44>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <menu+0xd28>
				altLimit = 1;
 8001862:	4b4f      	ldr	r3, [pc, #316]	@ (80019a0 <menu+0xe58>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001868:	4b4d      	ldr	r3, [pc, #308]	@ (80019a0 <menu+0xe58>)
 800186a:	781a      	ldrb	r2, [r3, #0]
 800186c:	4b4b      	ldr	r3, [pc, #300]	@ (800199c <menu+0xe54>)
 800186e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001870:	4b4c      	ldr	r3, [pc, #304]	@ (80019a4 <menu+0xe5c>)
 8001872:	2201      	movs	r2, #1
 8001874:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001876:	4b4c      	ldr	r3, [pc, #304]	@ (80019a8 <menu+0xe60>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b08      	cmp	r3, #8
 800187c:	d167      	bne.n	800194e <menu+0xe06>
		lcd_print(1, 1, kapiAcmaTipiText);
 800187e:	4a4b      	ldr	r2, [pc, #300]	@ (80019ac <menu+0xe64>)
 8001880:	2101      	movs	r1, #1
 8001882:	2001      	movs	r0, #1
 8001884:	f006 ffe3 	bl	800884e <lcd_print>

		if(kapiAcTipi == 0) {
 8001888:	4b49      	ldr	r3, [pc, #292]	@ (80019b0 <menu+0xe68>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d105      	bne.n	800189c <menu+0xd54>
			lcd_print(2, 1, kapiButonuESPText);
 8001890:	4a48      	ldr	r2, [pc, #288]	@ (80019b4 <menu+0xe6c>)
 8001892:	2101      	movs	r1, #1
 8001894:	2002      	movs	r0, #2
 8001896:	f006 ffda 	bl	800884e <lcd_print>
 800189a:	e008      	b.n	80018ae <menu+0xd66>
		} else if(kapiAcTipi == 1){
 800189c:	4b44      	ldr	r3, [pc, #272]	@ (80019b0 <menu+0xe68>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d104      	bne.n	80018ae <menu+0xd66>
			lcd_print(2, 1, katButonuEXTText);
 80018a4:	4a44      	ldr	r2, [pc, #272]	@ (80019b8 <menu+0xe70>)
 80018a6:	2101      	movs	r1, #1
 80018a8:	2002      	movs	r0, #2
 80018aa:	f006 ffd0 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80018ae:	2102      	movs	r1, #2
 80018b0:	4838      	ldr	r0, [pc, #224]	@ (8001994 <menu+0xe4c>)
 80018b2:	f008 f927 	bl	8009b04 <HAL_GPIO_ReadPin>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d115      	bne.n	80018e8 <menu+0xda0>
 80018bc:	4b36      	ldr	r3, [pc, #216]	@ (8001998 <menu+0xe50>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	f083 0301 	eor.w	r3, r3, #1
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00e      	beq.n	80018e8 <menu+0xda0>
			kapiAcTipi = kapiAcTipi + 1;
 80018ca:	4b39      	ldr	r3, [pc, #228]	@ (80019b0 <menu+0xe68>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4b37      	ldr	r3, [pc, #220]	@ (80019b0 <menu+0xe68>)
 80018d4:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80018d6:	4b36      	ldr	r3, [pc, #216]	@ (80019b0 <menu+0xe68>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d902      	bls.n	80018e4 <menu+0xd9c>
				kapiAcTipi = 0;
 80018de:	4b34      	ldr	r3, [pc, #208]	@ (80019b0 <menu+0xe68>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80018e4:	f001 fd34 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80018e8:	2104      	movs	r1, #4
 80018ea:	482a      	ldr	r0, [pc, #168]	@ (8001994 <menu+0xe4c>)
 80018ec:	f008 f90a 	bl	8009b04 <HAL_GPIO_ReadPin>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d115      	bne.n	8001922 <menu+0xdda>
 80018f6:	4b28      	ldr	r3, [pc, #160]	@ (8001998 <menu+0xe50>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	f083 0301 	eor.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00e      	beq.n	8001922 <menu+0xdda>
			kapiAcTipi = kapiAcTipi - 1;
 8001904:	4b2a      	ldr	r3, [pc, #168]	@ (80019b0 <menu+0xe68>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	3b01      	subs	r3, #1
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b28      	ldr	r3, [pc, #160]	@ (80019b0 <menu+0xe68>)
 800190e:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8001910:	4b27      	ldr	r3, [pc, #156]	@ (80019b0 <menu+0xe68>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <menu+0xdd6>
		   		kapiAcTipi = 1;
 8001918:	4b25      	ldr	r3, [pc, #148]	@ (80019b0 <menu+0xe68>)
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800191e:	f001 fd17 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001922:	2108      	movs	r1, #8
 8001924:	481b      	ldr	r0, [pc, #108]	@ (8001994 <menu+0xe4c>)
 8001926:	f008 f8ed 	bl	8009b04 <HAL_GPIO_ReadPin>
 800192a:	4603      	mov	r3, r0
 800192c:	2b01      	cmp	r3, #1
 800192e:	d10e      	bne.n	800194e <menu+0xe06>
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <menu+0xe50>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	f083 0301 	eor.w	r3, r3, #1
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <menu+0xe06>
			eepromData[36] = kapiAcTipi;
 800193e:	4b1c      	ldr	r3, [pc, #112]	@ (80019b0 <menu+0xe68>)
 8001940:	781a      	ldrb	r2, [r3, #0]
 8001942:	4b16      	ldr	r3, [pc, #88]	@ (800199c <menu+0xe54>)
 8001944:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 8001948:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <menu+0xe5c>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800194e:	4b16      	ldr	r3, [pc, #88]	@ (80019a8 <menu+0xe60>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b09      	cmp	r3, #9
 8001954:	f040 8092 	bne.w	8001a7c <menu+0xf34>
		lcd_print(1, 1, birKatKapiTipiText);
 8001958:	4a18      	ldr	r2, [pc, #96]	@ (80019bc <menu+0xe74>)
 800195a:	2101      	movs	r1, #1
 800195c:	2001      	movs	r0, #1
 800195e:	f006 ff76 	bl	800884e <lcd_print>

		if(kapi1Tip == 0) {
 8001962:	4b17      	ldr	r3, [pc, #92]	@ (80019c0 <menu+0xe78>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d105      	bne.n	8001976 <menu+0xe2e>
			lcd_print(2, 1, prudhomeTextGN);
 800196a:	4a16      	ldr	r2, [pc, #88]	@ (80019c4 <menu+0xe7c>)
 800196c:	2101      	movs	r1, #1
 800196e:	2002      	movs	r0, #2
 8001970:	f006 ff6d 	bl	800884e <lcd_print>
 8001974:	e033      	b.n	80019de <menu+0xe96>
		} else if(kapi1Tip == 1) {
 8001976:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <menu+0xe78>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d126      	bne.n	80019cc <menu+0xe84>
			lcd_print(2, 1, butonKontrolluText);
 800197e:	4a12      	ldr	r2, [pc, #72]	@ (80019c8 <menu+0xe80>)
 8001980:	2101      	movs	r1, #1
 8001982:	2002      	movs	r0, #2
 8001984:	f006 ff63 	bl	800884e <lcd_print>
 8001988:	e029      	b.n	80019de <menu+0xe96>
 800198a:	bf00      	nop
 800198c:	20000da8 	.word	0x20000da8
 8001990:	20001024 	.word	0x20001024
 8001994:	40010800 	.word	0x40010800
 8001998:	20000dcf 	.word	0x20000dcf
 800199c:	20000d00 	.word	0x20000d00
 80019a0:	20000da6 	.word	0x20000da6
 80019a4:	20000dcc 	.word	0x20000dcc
 80019a8:	20000da0 	.word	0x20000da0
 80019ac:	20001038 	.word	0x20001038
 80019b0:	20000dac 	.word	0x20000dac
 80019b4:	2000104c 	.word	0x2000104c
 80019b8:	20001060 	.word	0x20001060
 80019bc:	20001074 	.word	0x20001074
 80019c0:	20000da9 	.word	0x20000da9
 80019c4:	20000094 	.word	0x20000094
 80019c8:	20001088 	.word	0x20001088
		} else if(kapi1Tip == 2) {
 80019cc:	4b73      	ldr	r3, [pc, #460]	@ (8001b9c <menu+0x1054>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d104      	bne.n	80019de <menu+0xe96>
			lcd_print(2, 1, pizzattoTextGN);
 80019d4:	4a72      	ldr	r2, [pc, #456]	@ (8001ba0 <menu+0x1058>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	2002      	movs	r0, #2
 80019da:	f006 ff38 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80019de:	2102      	movs	r1, #2
 80019e0:	4870      	ldr	r0, [pc, #448]	@ (8001ba4 <menu+0x105c>)
 80019e2:	f008 f88f 	bl	8009b04 <HAL_GPIO_ReadPin>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d115      	bne.n	8001a18 <menu+0xed0>
 80019ec:	4b6e      	ldr	r3, [pc, #440]	@ (8001ba8 <menu+0x1060>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	f083 0301 	eor.w	r3, r3, #1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00e      	beq.n	8001a18 <menu+0xed0>
			kapi1Tip = kapi1Tip + 1;
 80019fa:	4b68      	ldr	r3, [pc, #416]	@ (8001b9c <menu+0x1054>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b66      	ldr	r3, [pc, #408]	@ (8001b9c <menu+0x1054>)
 8001a04:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8001a06:	4b65      	ldr	r3, [pc, #404]	@ (8001b9c <menu+0x1054>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d902      	bls.n	8001a14 <menu+0xecc>
				kapi1Tip = 0;
 8001a0e:	4b63      	ldr	r3, [pc, #396]	@ (8001b9c <menu+0x1054>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a14:	f001 fc9c 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a18:	2104      	movs	r1, #4
 8001a1a:	4862      	ldr	r0, [pc, #392]	@ (8001ba4 <menu+0x105c>)
 8001a1c:	f008 f872 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d115      	bne.n	8001a52 <menu+0xf0a>
 8001a26:	4b60      	ldr	r3, [pc, #384]	@ (8001ba8 <menu+0x1060>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	f083 0301 	eor.w	r3, r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00e      	beq.n	8001a52 <menu+0xf0a>
			kapi1Tip = kapi1Tip - 1;
 8001a34:	4b59      	ldr	r3, [pc, #356]	@ (8001b9c <menu+0x1054>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	4b57      	ldr	r3, [pc, #348]	@ (8001b9c <menu+0x1054>)
 8001a3e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8001a40:	4b56      	ldr	r3, [pc, #344]	@ (8001b9c <menu+0x1054>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d902      	bls.n	8001a4e <menu+0xf06>
		   		kapi1Tip = 2;
 8001a48:	4b54      	ldr	r3, [pc, #336]	@ (8001b9c <menu+0x1054>)
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001a4e:	f001 fc7f 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a52:	2108      	movs	r1, #8
 8001a54:	4853      	ldr	r0, [pc, #332]	@ (8001ba4 <menu+0x105c>)
 8001a56:	f008 f855 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d10d      	bne.n	8001a7c <menu+0xf34>
 8001a60:	4b51      	ldr	r3, [pc, #324]	@ (8001ba8 <menu+0x1060>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	f083 0301 	eor.w	r3, r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d006      	beq.n	8001a7c <menu+0xf34>
			eepromData[8] = kapi1Tip;
 8001a6e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b9c <menu+0x1054>)
 8001a70:	781a      	ldrb	r2, [r3, #0]
 8001a72:	4b4e      	ldr	r3, [pc, #312]	@ (8001bac <menu+0x1064>)
 8001a74:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8001a76:	4b4e      	ldr	r3, [pc, #312]	@ (8001bb0 <menu+0x1068>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8001a7c:	4b4d      	ldr	r3, [pc, #308]	@ (8001bb4 <menu+0x106c>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b0a      	cmp	r3, #10
 8001a82:	d16c      	bne.n	8001b5e <menu+0x1016>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 8001a84:	4a4c      	ldr	r2, [pc, #304]	@ (8001bb8 <menu+0x1070>)
 8001a86:	2101      	movs	r1, #1
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f006 fee0 	bl	800884e <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8001a8e:	4a4b      	ldr	r2, [pc, #300]	@ (8001bbc <menu+0x1074>)
 8001a90:	2101      	movs	r1, #1
 8001a92:	2002      	movs	r0, #2
 8001a94:	f006 fedb 	bl	800884e <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 8001a98:	4b49      	ldr	r3, [pc, #292]	@ (8001bc0 <menu+0x1078>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	220a      	movs	r2, #10
 8001a9e:	4949      	ldr	r1, [pc, #292]	@ (8001bc4 <menu+0x107c>)
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f00a fbd1 	bl	800c248 <itoa>
		lcd_print(2,16,snum);
 8001aa6:	4a47      	ldr	r2, [pc, #284]	@ (8001bc4 <menu+0x107c>)
 8001aa8:	2110      	movs	r1, #16
 8001aaa:	2002      	movs	r0, #2
 8001aac:	f006 fecf 	bl	800884e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	483c      	ldr	r0, [pc, #240]	@ (8001ba4 <menu+0x105c>)
 8001ab4:	f008 f826 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d119      	bne.n	8001af2 <menu+0xfaa>
 8001abe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba8 <menu+0x1060>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	f083 0301 	eor.w	r3, r3, #1
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d012      	beq.n	8001af2 <menu+0xfaa>
 8001acc:	4b33      	ldr	r3, [pc, #204]	@ (8001b9c <menu+0x1054>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10e      	bne.n	8001af2 <menu+0xfaa>
			kapi1AcSure = kapi1AcSure + 1;
 8001ad4:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc0 <menu+0x1078>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	4b38      	ldr	r3, [pc, #224]	@ (8001bc0 <menu+0x1078>)
 8001ade:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8001ae0:	4b37      	ldr	r3, [pc, #220]	@ (8001bc0 <menu+0x1078>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d902      	bls.n	8001aee <menu+0xfa6>
				kapi1AcSure = 0;
 8001ae8:	4b35      	ldr	r3, [pc, #212]	@ (8001bc0 <menu+0x1078>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001aee:	f001 fc2f 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001af2:	2104      	movs	r1, #4
 8001af4:	482b      	ldr	r0, [pc, #172]	@ (8001ba4 <menu+0x105c>)
 8001af6:	f008 f805 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d119      	bne.n	8001b34 <menu+0xfec>
 8001b00:	4b29      	ldr	r3, [pc, #164]	@ (8001ba8 <menu+0x1060>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	f083 0301 	eor.w	r3, r3, #1
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d012      	beq.n	8001b34 <menu+0xfec>
 8001b0e:	4b23      	ldr	r3, [pc, #140]	@ (8001b9c <menu+0x1054>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10e      	bne.n	8001b34 <menu+0xfec>
			kapi1AcSure = kapi1AcSure - 1;
 8001b16:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc0 <menu+0x1078>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4b28      	ldr	r3, [pc, #160]	@ (8001bc0 <menu+0x1078>)
 8001b20:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8001b22:	4b27      	ldr	r3, [pc, #156]	@ (8001bc0 <menu+0x1078>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d902      	bls.n	8001b30 <menu+0xfe8>
		   		kapi1AcSure = 5;
 8001b2a:	4b25      	ldr	r3, [pc, #148]	@ (8001bc0 <menu+0x1078>)
 8001b2c:	2205      	movs	r2, #5
 8001b2e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b30:	f001 fc0e 	bl	8003350 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b34:	2108      	movs	r1, #8
 8001b36:	481b      	ldr	r0, [pc, #108]	@ (8001ba4 <menu+0x105c>)
 8001b38:	f007 ffe4 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d10d      	bne.n	8001b5e <menu+0x1016>
 8001b42:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <menu+0x1060>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	f083 0301 	eor.w	r3, r3, #1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <menu+0x1016>
			eepromData[9] = kapi1AcSure;
 8001b50:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <menu+0x1078>)
 8001b52:	781a      	ldrb	r2, [r3, #0]
 8001b54:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <menu+0x1064>)
 8001b56:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8001b58:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <menu+0x1068>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <menu+0x106c>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b0b      	cmp	r3, #11
 8001b64:	f040 8090 	bne.w	8001c88 <menu+0x1140>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 8001b68:	4a17      	ldr	r2, [pc, #92]	@ (8001bc8 <menu+0x1080>)
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f006 fe6e 	bl	800884e <lcd_print>

		if(kapi2Tip == 0) {
 8001b72:	4b16      	ldr	r3, [pc, #88]	@ (8001bcc <menu+0x1084>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d105      	bne.n	8001b86 <menu+0x103e>
			lcd_print(2, 1, prudhomeTextGN);
 8001b7a:	4a15      	ldr	r2, [pc, #84]	@ (8001bd0 <menu+0x1088>)
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	2002      	movs	r0, #2
 8001b80:	f006 fe65 	bl	800884e <lcd_print>
 8001b84:	e031      	b.n	8001bea <menu+0x10a2>
		} else if(kapi2Tip == 1) {
 8001b86:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <menu+0x1084>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d124      	bne.n	8001bd8 <menu+0x1090>
			lcd_print(2, 1, butonKontrolluText);
 8001b8e:	4a11      	ldr	r2, [pc, #68]	@ (8001bd4 <menu+0x108c>)
 8001b90:	2101      	movs	r1, #1
 8001b92:	2002      	movs	r0, #2
 8001b94:	f006 fe5b 	bl	800884e <lcd_print>
 8001b98:	e027      	b.n	8001bea <menu+0x10a2>
 8001b9a:	bf00      	nop
 8001b9c:	20000da9 	.word	0x20000da9
 8001ba0:	200000a8 	.word	0x200000a8
 8001ba4:	40010800 	.word	0x40010800
 8001ba8:	20000dcf 	.word	0x20000dcf
 8001bac:	20000d00 	.word	0x20000d00
 8001bb0:	20000dcc 	.word	0x20000dcc
 8001bb4:	20000da0 	.word	0x20000da0
 8001bb8:	2000109c 	.word	0x2000109c
 8001bbc:	200010b0 	.word	0x200010b0
 8001bc0:	20000db9 	.word	0x20000db9
 8001bc4:	20000d70 	.word	0x20000d70
 8001bc8:	200010c4 	.word	0x200010c4
 8001bcc:	20000daa 	.word	0x20000daa
 8001bd0:	20000094 	.word	0x20000094
 8001bd4:	20001088 	.word	0x20001088
		} else if(kapi2Tip == 2) {
 8001bd8:	4b73      	ldr	r3, [pc, #460]	@ (8001da8 <menu+0x1260>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d104      	bne.n	8001bea <menu+0x10a2>
			lcd_print(2, 1, pizzattoTextGN);
 8001be0:	4a72      	ldr	r2, [pc, #456]	@ (8001dac <menu+0x1264>)
 8001be2:	2101      	movs	r1, #1
 8001be4:	2002      	movs	r0, #2
 8001be6:	f006 fe32 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bea:	2102      	movs	r1, #2
 8001bec:	4870      	ldr	r0, [pc, #448]	@ (8001db0 <menu+0x1268>)
 8001bee:	f007 ff89 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d115      	bne.n	8001c24 <menu+0x10dc>
 8001bf8:	4b6e      	ldr	r3, [pc, #440]	@ (8001db4 <menu+0x126c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	f083 0301 	eor.w	r3, r3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00e      	beq.n	8001c24 <menu+0x10dc>
			kapi2Tip = kapi2Tip + 1;
 8001c06:	4b68      	ldr	r3, [pc, #416]	@ (8001da8 <menu+0x1260>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4b66      	ldr	r3, [pc, #408]	@ (8001da8 <menu+0x1260>)
 8001c10:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8001c12:	4b65      	ldr	r3, [pc, #404]	@ (8001da8 <menu+0x1260>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d902      	bls.n	8001c20 <menu+0x10d8>
				kapi2Tip = 0;
 8001c1a:	4b63      	ldr	r3, [pc, #396]	@ (8001da8 <menu+0x1260>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c20:	f001 fb96 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c24:	2104      	movs	r1, #4
 8001c26:	4862      	ldr	r0, [pc, #392]	@ (8001db0 <menu+0x1268>)
 8001c28:	f007 ff6c 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d115      	bne.n	8001c5e <menu+0x1116>
 8001c32:	4b60      	ldr	r3, [pc, #384]	@ (8001db4 <menu+0x126c>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	f083 0301 	eor.w	r3, r3, #1
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00e      	beq.n	8001c5e <menu+0x1116>
			kapi2Tip = kapi2Tip - 1;
 8001c40:	4b59      	ldr	r3, [pc, #356]	@ (8001da8 <menu+0x1260>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	4b57      	ldr	r3, [pc, #348]	@ (8001da8 <menu+0x1260>)
 8001c4a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8001c4c:	4b56      	ldr	r3, [pc, #344]	@ (8001da8 <menu+0x1260>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d902      	bls.n	8001c5a <menu+0x1112>
		   		kapi2Tip = 2;
 8001c54:	4b54      	ldr	r3, [pc, #336]	@ (8001da8 <menu+0x1260>)
 8001c56:	2202      	movs	r2, #2
 8001c58:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c5a:	f001 fb79 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c5e:	2108      	movs	r1, #8
 8001c60:	4853      	ldr	r0, [pc, #332]	@ (8001db0 <menu+0x1268>)
 8001c62:	f007 ff4f 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10d      	bne.n	8001c88 <menu+0x1140>
 8001c6c:	4b51      	ldr	r3, [pc, #324]	@ (8001db4 <menu+0x126c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	f083 0301 	eor.w	r3, r3, #1
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d006      	beq.n	8001c88 <menu+0x1140>
			eepromData[10] = kapi2Tip;
 8001c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8001da8 <menu+0x1260>)
 8001c7c:	781a      	ldrb	r2, [r3, #0]
 8001c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001db8 <menu+0x1270>)
 8001c80:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8001c82:	4b4e      	ldr	r3, [pc, #312]	@ (8001dbc <menu+0x1274>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8001c88:	4b4d      	ldr	r3, [pc, #308]	@ (8001dc0 <menu+0x1278>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b0c      	cmp	r3, #12
 8001c8e:	d16c      	bne.n	8001d6a <menu+0x1222>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 8001c90:	4a4c      	ldr	r2, [pc, #304]	@ (8001dc4 <menu+0x127c>)
 8001c92:	2101      	movs	r1, #1
 8001c94:	2001      	movs	r0, #1
 8001c96:	f006 fdda 	bl	800884e <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8001c9a:	4a4b      	ldr	r2, [pc, #300]	@ (8001dc8 <menu+0x1280>)
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	f006 fdd5 	bl	800884e <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 8001ca4:	4b49      	ldr	r3, [pc, #292]	@ (8001dcc <menu+0x1284>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	220a      	movs	r2, #10
 8001caa:	4949      	ldr	r1, [pc, #292]	@ (8001dd0 <menu+0x1288>)
 8001cac:	4618      	mov	r0, r3
 8001cae:	f00a facb 	bl	800c248 <itoa>
		lcd_print(2,16,snum);
 8001cb2:	4a47      	ldr	r2, [pc, #284]	@ (8001dd0 <menu+0x1288>)
 8001cb4:	2110      	movs	r1, #16
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f006 fdc9 	bl	800884e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	483c      	ldr	r0, [pc, #240]	@ (8001db0 <menu+0x1268>)
 8001cc0:	f007 ff20 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d119      	bne.n	8001cfe <menu+0x11b6>
 8001cca:	4b3a      	ldr	r3, [pc, #232]	@ (8001db4 <menu+0x126c>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	f083 0301 	eor.w	r3, r3, #1
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d012      	beq.n	8001cfe <menu+0x11b6>
 8001cd8:	4b33      	ldr	r3, [pc, #204]	@ (8001da8 <menu+0x1260>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10e      	bne.n	8001cfe <menu+0x11b6>
			kapi2AcSure = kapi2AcSure + 1;
 8001ce0:	4b3a      	ldr	r3, [pc, #232]	@ (8001dcc <menu+0x1284>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b38      	ldr	r3, [pc, #224]	@ (8001dcc <menu+0x1284>)
 8001cea:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8001cec:	4b37      	ldr	r3, [pc, #220]	@ (8001dcc <menu+0x1284>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b05      	cmp	r3, #5
 8001cf2:	d902      	bls.n	8001cfa <menu+0x11b2>
				kapi2AcSure = 0;
 8001cf4:	4b35      	ldr	r3, [pc, #212]	@ (8001dcc <menu+0x1284>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cfa:	f001 fb29 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001cfe:	2104      	movs	r1, #4
 8001d00:	482b      	ldr	r0, [pc, #172]	@ (8001db0 <menu+0x1268>)
 8001d02:	f007 feff 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d119      	bne.n	8001d40 <menu+0x11f8>
 8001d0c:	4b29      	ldr	r3, [pc, #164]	@ (8001db4 <menu+0x126c>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	f083 0301 	eor.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d012      	beq.n	8001d40 <menu+0x11f8>
 8001d1a:	4b23      	ldr	r3, [pc, #140]	@ (8001da8 <menu+0x1260>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10e      	bne.n	8001d40 <menu+0x11f8>
			kapi2AcSure = kapi2AcSure - 1;
 8001d22:	4b2a      	ldr	r3, [pc, #168]	@ (8001dcc <menu+0x1284>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b28      	ldr	r3, [pc, #160]	@ (8001dcc <menu+0x1284>)
 8001d2c:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8001d2e:	4b27      	ldr	r3, [pc, #156]	@ (8001dcc <menu+0x1284>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d902      	bls.n	8001d3c <menu+0x11f4>
		   		kapi2AcSure = 5;
 8001d36:	4b25      	ldr	r3, [pc, #148]	@ (8001dcc <menu+0x1284>)
 8001d38:	2205      	movs	r2, #5
 8001d3a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d3c:	f001 fb08 	bl	8003350 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d40:	2108      	movs	r1, #8
 8001d42:	481b      	ldr	r0, [pc, #108]	@ (8001db0 <menu+0x1268>)
 8001d44:	f007 fede 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d10d      	bne.n	8001d6a <menu+0x1222>
 8001d4e:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <menu+0x126c>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	f083 0301 	eor.w	r3, r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d006      	beq.n	8001d6a <menu+0x1222>
			eepromData[11] = kapi2AcSure;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <menu+0x1284>)
 8001d5e:	781a      	ldrb	r2, [r3, #0]
 8001d60:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <menu+0x1270>)
 8001d62:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8001d64:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <menu+0x1274>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8001d6a:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <menu+0x1278>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b0d      	cmp	r3, #13
 8001d70:	f040 8090 	bne.w	8001e94 <menu+0x134c>
		lcd_print(1, 1, tablaKapiTipiText);
 8001d74:	4a17      	ldr	r2, [pc, #92]	@ (8001dd4 <menu+0x128c>)
 8001d76:	2101      	movs	r1, #1
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f006 fd68 	bl	800884e <lcd_print>

		if(kapitablaTip == 0) {
 8001d7e:	4b16      	ldr	r3, [pc, #88]	@ (8001dd8 <menu+0x1290>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d105      	bne.n	8001d92 <menu+0x124a>
			lcd_print(2, 1, prudhomeTextGN);
 8001d86:	4a15      	ldr	r2, [pc, #84]	@ (8001ddc <menu+0x1294>)
 8001d88:	2101      	movs	r1, #1
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	f006 fd5f 	bl	800884e <lcd_print>
 8001d90:	e031      	b.n	8001df6 <menu+0x12ae>
		} else if(kapitablaTip == 1) {
 8001d92:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <menu+0x1290>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d124      	bne.n	8001de4 <menu+0x129c>
			lcd_print(2, 1, butonKontrolluText);
 8001d9a:	4a11      	ldr	r2, [pc, #68]	@ (8001de0 <menu+0x1298>)
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	2002      	movs	r0, #2
 8001da0:	f006 fd55 	bl	800884e <lcd_print>
 8001da4:	e027      	b.n	8001df6 <menu+0x12ae>
 8001da6:	bf00      	nop
 8001da8:	20000daa 	.word	0x20000daa
 8001dac:	200000a8 	.word	0x200000a8
 8001db0:	40010800 	.word	0x40010800
 8001db4:	20000dcf 	.word	0x20000dcf
 8001db8:	20000d00 	.word	0x20000d00
 8001dbc:	20000dcc 	.word	0x20000dcc
 8001dc0:	20000da0 	.word	0x20000da0
 8001dc4:	200010d8 	.word	0x200010d8
 8001dc8:	200010b0 	.word	0x200010b0
 8001dcc:	20000dba 	.word	0x20000dba
 8001dd0:	20000d70 	.word	0x20000d70
 8001dd4:	200010ec 	.word	0x200010ec
 8001dd8:	20000dab 	.word	0x20000dab
 8001ddc:	20000094 	.word	0x20000094
 8001de0:	20001088 	.word	0x20001088
		} else if(kapitablaTip == 2) {
 8001de4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ee4 <menu+0x139c>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d104      	bne.n	8001df6 <menu+0x12ae>
			lcd_print(2, 1, pizzattoTextGN);
 8001dec:	4a3e      	ldr	r2, [pc, #248]	@ (8001ee8 <menu+0x13a0>)
 8001dee:	2101      	movs	r1, #1
 8001df0:	2002      	movs	r0, #2
 8001df2:	f006 fd2c 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001df6:	2102      	movs	r1, #2
 8001df8:	483c      	ldr	r0, [pc, #240]	@ (8001eec <menu+0x13a4>)
 8001dfa:	f007 fe83 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d115      	bne.n	8001e30 <menu+0x12e8>
 8001e04:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef0 <menu+0x13a8>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	f083 0301 	eor.w	r3, r3, #1
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00e      	beq.n	8001e30 <menu+0x12e8>
			kapitablaTip = kapitablaTip + 1;
 8001e12:	4b34      	ldr	r3, [pc, #208]	@ (8001ee4 <menu+0x139c>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4b32      	ldr	r3, [pc, #200]	@ (8001ee4 <menu+0x139c>)
 8001e1c:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8001e1e:	4b31      	ldr	r3, [pc, #196]	@ (8001ee4 <menu+0x139c>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d902      	bls.n	8001e2c <menu+0x12e4>
				kapitablaTip = 0;
 8001e26:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee4 <menu+0x139c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e2c:	f001 fa90 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e30:	2104      	movs	r1, #4
 8001e32:	482e      	ldr	r0, [pc, #184]	@ (8001eec <menu+0x13a4>)
 8001e34:	f007 fe66 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d115      	bne.n	8001e6a <menu+0x1322>
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef0 <menu+0x13a8>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	f083 0301 	eor.w	r3, r3, #1
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00e      	beq.n	8001e6a <menu+0x1322>
			kapitablaTip = kapitablaTip - 1;
 8001e4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ee4 <menu+0x139c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	4b23      	ldr	r3, [pc, #140]	@ (8001ee4 <menu+0x139c>)
 8001e56:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8001e58:	4b22      	ldr	r3, [pc, #136]	@ (8001ee4 <menu+0x139c>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d902      	bls.n	8001e66 <menu+0x131e>
		   		kapitablaTip = 2;
 8001e60:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <menu+0x139c>)
 8001e62:	2202      	movs	r2, #2
 8001e64:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e66:	f001 fa73 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e6a:	2108      	movs	r1, #8
 8001e6c:	481f      	ldr	r0, [pc, #124]	@ (8001eec <menu+0x13a4>)
 8001e6e:	f007 fe49 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d10d      	bne.n	8001e94 <menu+0x134c>
 8001e78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <menu+0x13a8>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	f083 0301 	eor.w	r3, r3, #1
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d006      	beq.n	8001e94 <menu+0x134c>
			eepromData[12] = kapitablaTip;
 8001e86:	4b17      	ldr	r3, [pc, #92]	@ (8001ee4 <menu+0x139c>)
 8001e88:	781a      	ldrb	r2, [r3, #0]
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <menu+0x13ac>)
 8001e8c:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <menu+0x13b0>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8001e94:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <menu+0x13b4>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b0e      	cmp	r3, #14
 8001e9a:	f040 80a3 	bne.w	8001fe4 <menu+0x149c>
		lcd_print(1, 1, tablaKapiAcKonumText);
 8001e9e:	4a18      	ldr	r2, [pc, #96]	@ (8001f00 <menu+0x13b8>)
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	f006 fcd3 	bl	800884e <lcd_print>

		if(kapiTablaAcKonum == 0) {
 8001ea8:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <menu+0x13bc>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d105      	bne.n	8001ebc <menu+0x1374>
			lcd_print(2, 1, birinciKattaAcText);
 8001eb0:	4a15      	ldr	r2, [pc, #84]	@ (8001f08 <menu+0x13c0>)
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	2002      	movs	r0, #2
 8001eb6:	f006 fcca 	bl	800884e <lcd_print>
 8001eba:	e034      	b.n	8001f26 <menu+0x13de>
		} else if(kapiTablaAcKonum == 1) {
 8001ebc:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <menu+0x13bc>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d105      	bne.n	8001ed0 <menu+0x1388>
			lcd_print(2, 1, ikinciKattaAcText);
 8001ec4:	4a11      	ldr	r2, [pc, #68]	@ (8001f0c <menu+0x13c4>)
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	2002      	movs	r0, #2
 8001eca:	f006 fcc0 	bl	800884e <lcd_print>
 8001ece:	e02a      	b.n	8001f26 <menu+0x13de>
		} else if(kapiTablaAcKonum == 2) {
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <menu+0x13bc>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d11d      	bne.n	8001f14 <menu+0x13cc>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f10 <menu+0x13c8>)
 8001eda:	2101      	movs	r1, #1
 8001edc:	2002      	movs	r0, #2
 8001ede:	f006 fcb6 	bl	800884e <lcd_print>
 8001ee2:	e020      	b.n	8001f26 <menu+0x13de>
 8001ee4:	20000dab 	.word	0x20000dab
 8001ee8:	200000a8 	.word	0x200000a8
 8001eec:	40010800 	.word	0x40010800
 8001ef0:	20000dcf 	.word	0x20000dcf
 8001ef4:	20000d00 	.word	0x20000d00
 8001ef8:	20000dcc 	.word	0x20000dcc
 8001efc:	20000da0 	.word	0x20000da0
 8001f00:	20001100 	.word	0x20001100
 8001f04:	20000dad 	.word	0x20000dad
 8001f08:	20001114 	.word	0x20001114
 8001f0c:	20001128 	.word	0x20001128
 8001f10:	2000113c 	.word	0x2000113c
		} else if(kapiTablaAcKonum == 3) {
 8001f14:	4b76      	ldr	r3, [pc, #472]	@ (80020f0 <menu+0x15a8>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d104      	bne.n	8001f26 <menu+0x13de>
			lcd_print(2, 1, pasifText);
 8001f1c:	4a75      	ldr	r2, [pc, #468]	@ (80020f4 <menu+0x15ac>)
 8001f1e:	2101      	movs	r1, #1
 8001f20:	2002      	movs	r0, #2
 8001f22:	f006 fc94 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f26:	2102      	movs	r1, #2
 8001f28:	4873      	ldr	r0, [pc, #460]	@ (80020f8 <menu+0x15b0>)
 8001f2a:	f007 fdeb 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d115      	bne.n	8001f60 <menu+0x1418>
 8001f34:	4b71      	ldr	r3, [pc, #452]	@ (80020fc <menu+0x15b4>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	f083 0301 	eor.w	r3, r3, #1
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00e      	beq.n	8001f60 <menu+0x1418>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8001f42:	4b6b      	ldr	r3, [pc, #428]	@ (80020f0 <menu+0x15a8>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b69      	ldr	r3, [pc, #420]	@ (80020f0 <menu+0x15a8>)
 8001f4c:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8001f4e:	4b68      	ldr	r3, [pc, #416]	@ (80020f0 <menu+0x15a8>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d902      	bls.n	8001f5c <menu+0x1414>
				kapiTablaAcKonum = 0;
 8001f56:	4b66      	ldr	r3, [pc, #408]	@ (80020f0 <menu+0x15a8>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f5c:	f001 f9f8 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f60:	2104      	movs	r1, #4
 8001f62:	4865      	ldr	r0, [pc, #404]	@ (80020f8 <menu+0x15b0>)
 8001f64:	f007 fdce 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d115      	bne.n	8001f9a <menu+0x1452>
 8001f6e:	4b63      	ldr	r3, [pc, #396]	@ (80020fc <menu+0x15b4>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	f083 0301 	eor.w	r3, r3, #1
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00e      	beq.n	8001f9a <menu+0x1452>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8001f7c:	4b5c      	ldr	r3, [pc, #368]	@ (80020f0 <menu+0x15a8>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	4b5a      	ldr	r3, [pc, #360]	@ (80020f0 <menu+0x15a8>)
 8001f86:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8001f88:	4b59      	ldr	r3, [pc, #356]	@ (80020f0 <menu+0x15a8>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d902      	bls.n	8001f96 <menu+0x144e>
		   		kapiTablaAcKonum = 2;
 8001f90:	4b57      	ldr	r3, [pc, #348]	@ (80020f0 <menu+0x15a8>)
 8001f92:	2202      	movs	r2, #2
 8001f94:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f96:	f001 f9db 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f9a:	2108      	movs	r1, #8
 8001f9c:	4856      	ldr	r0, [pc, #344]	@ (80020f8 <menu+0x15b0>)
 8001f9e:	f007 fdb1 	bl	8009b04 <HAL_GPIO_ReadPin>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d11d      	bne.n	8001fe4 <menu+0x149c>
 8001fa8:	4b54      	ldr	r3, [pc, #336]	@ (80020fc <menu+0x15b4>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	f083 0301 	eor.w	r3, r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d016      	beq.n	8001fe4 <menu+0x149c>
			eepromData[34] = kapiTablaAcKonum;
 8001fb6:	4b4e      	ldr	r3, [pc, #312]	@ (80020f0 <menu+0x15a8>)
 8001fb8:	781a      	ldrb	r2, [r3, #0]
 8001fba:	4b51      	ldr	r3, [pc, #324]	@ (8002100 <menu+0x15b8>)
 8001fbc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8001fc0:	4b4b      	ldr	r3, [pc, #300]	@ (80020f0 <menu+0x15a8>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <menu+0x1488>
 8001fc8:	4b49      	ldr	r3, [pc, #292]	@ (80020f0 <menu+0x15a8>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d106      	bne.n	8001fde <menu+0x1496>
				altLimit = 1;
 8001fd0:	4b4c      	ldr	r3, [pc, #304]	@ (8002104 <menu+0x15bc>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001fd6:	4b4b      	ldr	r3, [pc, #300]	@ (8002104 <menu+0x15bc>)
 8001fd8:	781a      	ldrb	r2, [r3, #0]
 8001fda:	4b49      	ldr	r3, [pc, #292]	@ (8002100 <menu+0x15b8>)
 8001fdc:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8001fde:	4b4a      	ldr	r3, [pc, #296]	@ (8002108 <menu+0x15c0>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8001fe4:	4b49      	ldr	r3, [pc, #292]	@ (800210c <menu+0x15c4>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b0f      	cmp	r3, #15
 8001fea:	d16c      	bne.n	80020c6 <menu+0x157e>
		lcd_print(1, 1, tablaKapiAcSureText);
 8001fec:	4a48      	ldr	r2, [pc, #288]	@ (8002110 <menu+0x15c8>)
 8001fee:	2101      	movs	r1, #1
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	f006 fc2c 	bl	800884e <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8001ff6:	4a47      	ldr	r2, [pc, #284]	@ (8002114 <menu+0x15cc>)
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	2002      	movs	r0, #2
 8001ffc:	f006 fc27 	bl	800884e <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002000:	4b45      	ldr	r3, [pc, #276]	@ (8002118 <menu+0x15d0>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	220a      	movs	r2, #10
 8002006:	4945      	ldr	r1, [pc, #276]	@ (800211c <menu+0x15d4>)
 8002008:	4618      	mov	r0, r3
 800200a:	f00a f91d 	bl	800c248 <itoa>
		lcd_print(2,16,snum);
 800200e:	4a43      	ldr	r2, [pc, #268]	@ (800211c <menu+0x15d4>)
 8002010:	2110      	movs	r1, #16
 8002012:	2002      	movs	r0, #2
 8002014:	f006 fc1b 	bl	800884e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002018:	2102      	movs	r1, #2
 800201a:	4837      	ldr	r0, [pc, #220]	@ (80020f8 <menu+0x15b0>)
 800201c:	f007 fd72 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002020:	4603      	mov	r3, r0
 8002022:	2b01      	cmp	r3, #1
 8002024:	d119      	bne.n	800205a <menu+0x1512>
 8002026:	4b35      	ldr	r3, [pc, #212]	@ (80020fc <menu+0x15b4>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	f083 0301 	eor.w	r3, r3, #1
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d012      	beq.n	800205a <menu+0x1512>
 8002034:	4b3a      	ldr	r3, [pc, #232]	@ (8002120 <menu+0x15d8>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10e      	bne.n	800205a <menu+0x1512>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 800203c:	4b36      	ldr	r3, [pc, #216]	@ (8002118 <menu+0x15d0>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	b2da      	uxtb	r2, r3
 8002044:	4b34      	ldr	r3, [pc, #208]	@ (8002118 <menu+0x15d0>)
 8002046:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002048:	4b33      	ldr	r3, [pc, #204]	@ (8002118 <menu+0x15d0>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b05      	cmp	r3, #5
 800204e:	d902      	bls.n	8002056 <menu+0x150e>
				kapiTablaAcSure = 0;
 8002050:	4b31      	ldr	r3, [pc, #196]	@ (8002118 <menu+0x15d0>)
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002056:	f001 f97b 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800205a:	2104      	movs	r1, #4
 800205c:	4826      	ldr	r0, [pc, #152]	@ (80020f8 <menu+0x15b0>)
 800205e:	f007 fd51 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002062:	4603      	mov	r3, r0
 8002064:	2b01      	cmp	r3, #1
 8002066:	d119      	bne.n	800209c <menu+0x1554>
 8002068:	4b24      	ldr	r3, [pc, #144]	@ (80020fc <menu+0x15b4>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	f083 0301 	eor.w	r3, r3, #1
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d012      	beq.n	800209c <menu+0x1554>
 8002076:	4b2a      	ldr	r3, [pc, #168]	@ (8002120 <menu+0x15d8>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10e      	bne.n	800209c <menu+0x1554>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800207e:	4b26      	ldr	r3, [pc, #152]	@ (8002118 <menu+0x15d0>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	3b01      	subs	r3, #1
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4b24      	ldr	r3, [pc, #144]	@ (8002118 <menu+0x15d0>)
 8002088:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800208a:	4b23      	ldr	r3, [pc, #140]	@ (8002118 <menu+0x15d0>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b06      	cmp	r3, #6
 8002090:	d902      	bls.n	8002098 <menu+0x1550>
		   		kapiTablaAcSure = 5;
 8002092:	4b21      	ldr	r3, [pc, #132]	@ (8002118 <menu+0x15d0>)
 8002094:	2205      	movs	r2, #5
 8002096:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002098:	f001 f95a 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800209c:	2108      	movs	r1, #8
 800209e:	4816      	ldr	r0, [pc, #88]	@ (80020f8 <menu+0x15b0>)
 80020a0:	f007 fd30 	bl	8009b04 <HAL_GPIO_ReadPin>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10d      	bne.n	80020c6 <menu+0x157e>
 80020aa:	4b14      	ldr	r3, [pc, #80]	@ (80020fc <menu+0x15b4>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	f083 0301 	eor.w	r3, r3, #1
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d006      	beq.n	80020c6 <menu+0x157e>
			eepromData[13] = kapiTablaAcSure;
 80020b8:	4b17      	ldr	r3, [pc, #92]	@ (8002118 <menu+0x15d0>)
 80020ba:	781a      	ldrb	r2, [r3, #0]
 80020bc:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <menu+0x15b8>)
 80020be:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80020c0:	4b11      	ldr	r3, [pc, #68]	@ (8002108 <menu+0x15c0>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80020c6:	4b11      	ldr	r3, [pc, #68]	@ (800210c <menu+0x15c4>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b10      	cmp	r3, #16
 80020cc:	f040 8086 	bne.w	80021dc <menu+0x1694>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 80020d0:	4a14      	ldr	r2, [pc, #80]	@ (8002124 <menu+0x15dc>)
 80020d2:	2101      	movs	r1, #1
 80020d4:	2001      	movs	r0, #1
 80020d6:	f006 fbba 	bl	800884e <lcd_print>

		if(yukariYavasLimit == 0) {
 80020da:	4b13      	ldr	r3, [pc, #76]	@ (8002128 <menu+0x15e0>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d124      	bne.n	800212c <menu+0x15e4>
			lcd_print(2, 1, pasifText);
 80020e2:	4a04      	ldr	r2, [pc, #16]	@ (80020f4 <menu+0x15ac>)
 80020e4:	2101      	movs	r1, #1
 80020e6:	2002      	movs	r0, #2
 80020e8:	f006 fbb1 	bl	800884e <lcd_print>
 80020ec:	e027      	b.n	800213e <menu+0x15f6>
 80020ee:	bf00      	nop
 80020f0:	20000dad 	.word	0x20000dad
 80020f4:	20000f84 	.word	0x20000f84
 80020f8:	40010800 	.word	0x40010800
 80020fc:	20000dcf 	.word	0x20000dcf
 8002100:	20000d00 	.word	0x20000d00
 8002104:	20000da6 	.word	0x20000da6
 8002108:	20000dcc 	.word	0x20000dcc
 800210c:	20000da0 	.word	0x20000da0
 8002110:	20001150 	.word	0x20001150
 8002114:	200010b0 	.word	0x200010b0
 8002118:	20000dbb 	.word	0x20000dbb
 800211c:	20000d70 	.word	0x20000d70
 8002120:	20000dab 	.word	0x20000dab
 8002124:	20001164 	.word	0x20001164
 8002128:	20000dae 	.word	0x20000dae
		} else if(yukariYavasLimit == 1) {
 800212c:	4b84      	ldr	r3, [pc, #528]	@ (8002340 <menu+0x17f8>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d104      	bne.n	800213e <menu+0x15f6>
			lcd_print(2, 1, aktifText);
 8002134:	4a83      	ldr	r2, [pc, #524]	@ (8002344 <menu+0x17fc>)
 8002136:	2101      	movs	r1, #1
 8002138:	2002      	movs	r0, #2
 800213a:	f006 fb88 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800213e:	2102      	movs	r1, #2
 8002140:	4881      	ldr	r0, [pc, #516]	@ (8002348 <menu+0x1800>)
 8002142:	f007 fcdf 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002146:	4603      	mov	r3, r0
 8002148:	2b01      	cmp	r3, #1
 800214a:	d115      	bne.n	8002178 <menu+0x1630>
 800214c:	4b7f      	ldr	r3, [pc, #508]	@ (800234c <menu+0x1804>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	f083 0301 	eor.w	r3, r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00e      	beq.n	8002178 <menu+0x1630>
			yukariYavasLimit = yukariYavasLimit + 1;
 800215a:	4b79      	ldr	r3, [pc, #484]	@ (8002340 <menu+0x17f8>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	3301      	adds	r3, #1
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4b77      	ldr	r3, [pc, #476]	@ (8002340 <menu+0x17f8>)
 8002164:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002166:	4b76      	ldr	r3, [pc, #472]	@ (8002340 <menu+0x17f8>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d902      	bls.n	8002174 <menu+0x162c>
				yukariYavasLimit = 0;
 800216e:	4b74      	ldr	r3, [pc, #464]	@ (8002340 <menu+0x17f8>)
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002174:	f001 f8ec 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002178:	2104      	movs	r1, #4
 800217a:	4873      	ldr	r0, [pc, #460]	@ (8002348 <menu+0x1800>)
 800217c:	f007 fcc2 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002180:	4603      	mov	r3, r0
 8002182:	2b01      	cmp	r3, #1
 8002184:	d115      	bne.n	80021b2 <menu+0x166a>
 8002186:	4b71      	ldr	r3, [pc, #452]	@ (800234c <menu+0x1804>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	f083 0301 	eor.w	r3, r3, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00e      	beq.n	80021b2 <menu+0x166a>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002194:	4b6a      	ldr	r3, [pc, #424]	@ (8002340 <menu+0x17f8>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	3b01      	subs	r3, #1
 800219a:	b2da      	uxtb	r2, r3
 800219c:	4b68      	ldr	r3, [pc, #416]	@ (8002340 <menu+0x17f8>)
 800219e:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80021a0:	4b67      	ldr	r3, [pc, #412]	@ (8002340 <menu+0x17f8>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <menu+0x1666>
		   		yukariYavasLimit = 1;
 80021a8:	4b65      	ldr	r3, [pc, #404]	@ (8002340 <menu+0x17f8>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021ae:	f001 f8cf 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021b2:	2108      	movs	r1, #8
 80021b4:	4864      	ldr	r0, [pc, #400]	@ (8002348 <menu+0x1800>)
 80021b6:	f007 fca5 	bl	8009b04 <HAL_GPIO_ReadPin>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d10d      	bne.n	80021dc <menu+0x1694>
 80021c0:	4b62      	ldr	r3, [pc, #392]	@ (800234c <menu+0x1804>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	f083 0301 	eor.w	r3, r3, #1
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <menu+0x1694>
			eepromData[14] = yukariYavasLimit;
 80021ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002340 <menu+0x17f8>)
 80021d0:	781a      	ldrb	r2, [r3, #0]
 80021d2:	4b5f      	ldr	r3, [pc, #380]	@ (8002350 <menu+0x1808>)
 80021d4:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80021d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002354 <menu+0x180c>)
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80021dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002358 <menu+0x1810>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b11      	cmp	r3, #17
 80021e2:	f040 808b 	bne.w	80022fc <menu+0x17b4>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 80021e6:	4a5d      	ldr	r2, [pc, #372]	@ (800235c <menu+0x1814>)
 80021e8:	2101      	movs	r1, #1
 80021ea:	2001      	movs	r0, #1
 80021ec:	f006 fb2f 	bl	800884e <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 80021f0:	4b5b      	ldr	r3, [pc, #364]	@ (8002360 <menu+0x1818>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d105      	bne.n	8002204 <menu+0x16bc>
			lcd_print(2, 1, devirmeAktifText);
 80021f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002364 <menu+0x181c>)
 80021fa:	2101      	movs	r1, #1
 80021fc:	2002      	movs	r0, #2
 80021fe:	f006 fb26 	bl	800884e <lcd_print>
 8002202:	e012      	b.n	800222a <menu+0x16e2>
		} else if(devirmeYuruyusSecim == 1) {
 8002204:	4b56      	ldr	r3, [pc, #344]	@ (8002360 <menu+0x1818>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d105      	bne.n	8002218 <menu+0x16d0>
			lcd_print(2, 1, yuruyusAktifText);
 800220c:	4a56      	ldr	r2, [pc, #344]	@ (8002368 <menu+0x1820>)
 800220e:	2101      	movs	r1, #1
 8002210:	2002      	movs	r0, #2
 8002212:	f006 fb1c 	bl	800884e <lcd_print>
 8002216:	e008      	b.n	800222a <menu+0x16e2>
		} else if(devirmeYuruyusSecim == 0) {
 8002218:	4b51      	ldr	r3, [pc, #324]	@ (8002360 <menu+0x1818>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d104      	bne.n	800222a <menu+0x16e2>
			lcd_print(2, 1, pasifText);
 8002220:	4a52      	ldr	r2, [pc, #328]	@ (800236c <menu+0x1824>)
 8002222:	2101      	movs	r1, #1
 8002224:	2002      	movs	r0, #2
 8002226:	f006 fb12 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800222a:	2102      	movs	r1, #2
 800222c:	4846      	ldr	r0, [pc, #280]	@ (8002348 <menu+0x1800>)
 800222e:	f007 fc69 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002232:	4603      	mov	r3, r0
 8002234:	2b01      	cmp	r3, #1
 8002236:	d115      	bne.n	8002264 <menu+0x171c>
 8002238:	4b44      	ldr	r3, [pc, #272]	@ (800234c <menu+0x1804>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	f083 0301 	eor.w	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00e      	beq.n	8002264 <menu+0x171c>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002246:	4b46      	ldr	r3, [pc, #280]	@ (8002360 <menu+0x1818>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b44      	ldr	r3, [pc, #272]	@ (8002360 <menu+0x1818>)
 8002250:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002252:	4b43      	ldr	r3, [pc, #268]	@ (8002360 <menu+0x1818>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d902      	bls.n	8002260 <menu+0x1718>
				devirmeYuruyusSecim = 0;
 800225a:	4b41      	ldr	r3, [pc, #260]	@ (8002360 <menu+0x1818>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002260:	f001 f876 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002264:	2104      	movs	r1, #4
 8002266:	4838      	ldr	r0, [pc, #224]	@ (8002348 <menu+0x1800>)
 8002268:	f007 fc4c 	bl	8009b04 <HAL_GPIO_ReadPin>
 800226c:	4603      	mov	r3, r0
 800226e:	2b01      	cmp	r3, #1
 8002270:	d115      	bne.n	800229e <menu+0x1756>
 8002272:	4b36      	ldr	r3, [pc, #216]	@ (800234c <menu+0x1804>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	f083 0301 	eor.w	r3, r3, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00e      	beq.n	800229e <menu+0x1756>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002280:	4b37      	ldr	r3, [pc, #220]	@ (8002360 <menu+0x1818>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	3b01      	subs	r3, #1
 8002286:	b2da      	uxtb	r2, r3
 8002288:	4b35      	ldr	r3, [pc, #212]	@ (8002360 <menu+0x1818>)
 800228a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 800228c:	4b34      	ldr	r3, [pc, #208]	@ (8002360 <menu+0x1818>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d902      	bls.n	800229a <menu+0x1752>
		   		devirmeYuruyusSecim = 2;
 8002294:	4b32      	ldr	r3, [pc, #200]	@ (8002360 <menu+0x1818>)
 8002296:	2202      	movs	r2, #2
 8002298:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800229a:	f001 f859 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800229e:	2108      	movs	r1, #8
 80022a0:	4829      	ldr	r0, [pc, #164]	@ (8002348 <menu+0x1800>)
 80022a2:	f007 fc2f 	bl	8009b04 <HAL_GPIO_ReadPin>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d127      	bne.n	80022fc <menu+0x17b4>
 80022ac:	4b27      	ldr	r3, [pc, #156]	@ (800234c <menu+0x1804>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	f083 0301 	eor.w	r3, r3, #1
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d020      	beq.n	80022fc <menu+0x17b4>
			eepromData[15] = devirmeYuruyusSecim;
 80022ba:	4b29      	ldr	r3, [pc, #164]	@ (8002360 <menu+0x1818>)
 80022bc:	781a      	ldrb	r2, [r3, #0]
 80022be:	4b24      	ldr	r3, [pc, #144]	@ (8002350 <menu+0x1808>)
 80022c0:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80022c2:	4b27      	ldr	r3, [pc, #156]	@ (8002360 <menu+0x1818>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d003      	beq.n	80022d2 <menu+0x178a>
 80022ca:	4b25      	ldr	r3, [pc, #148]	@ (8002360 <menu+0x1818>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d106      	bne.n	80022e0 <menu+0x1798>
				calismaSekli = 0;
 80022d2:	4b27      	ldr	r3, [pc, #156]	@ (8002370 <menu+0x1828>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80022d8:	4b25      	ldr	r3, [pc, #148]	@ (8002370 <menu+0x1828>)
 80022da:	781a      	ldrb	r2, [r3, #0]
 80022dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002350 <menu+0x1808>)
 80022de:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80022e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002360 <menu+0x1818>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d106      	bne.n	80022f6 <menu+0x17ae>
				devirmeSilindirTipi = 1;
 80022e8:	4b22      	ldr	r3, [pc, #136]	@ (8002374 <menu+0x182c>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80022ee:	4b21      	ldr	r3, [pc, #132]	@ (8002374 <menu+0x182c>)
 80022f0:	781a      	ldrb	r2, [r3, #0]
 80022f2:	4b17      	ldr	r3, [pc, #92]	@ (8002350 <menu+0x1808>)
 80022f4:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80022f6:	4b17      	ldr	r3, [pc, #92]	@ (8002354 <menu+0x180c>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80022fc:	4b16      	ldr	r3, [pc, #88]	@ (8002358 <menu+0x1810>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b12      	cmp	r3, #18
 8002302:	f040 8097 	bne.w	8002434 <menu+0x18ec>
		if(devirmeYuruyusSecim == 2) {
 8002306:	4b16      	ldr	r3, [pc, #88]	@ (8002360 <menu+0x1818>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d105      	bne.n	800231a <menu+0x17d2>
			lcd_print(1, 1, devirmeYukariText);
 800230e:	4a1a      	ldr	r2, [pc, #104]	@ (8002378 <menu+0x1830>)
 8002310:	2101      	movs	r1, #1
 8002312:	2001      	movs	r0, #1
 8002314:	f006 fa9b 	bl	800884e <lcd_print>
 8002318:	e008      	b.n	800232c <menu+0x17e4>
		} else if(devirmeYuruyusSecim == 1) {
 800231a:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <menu+0x1818>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d104      	bne.n	800232c <menu+0x17e4>
			lcd_print(1, 1, yuruyusIleriText);
 8002322:	4a16      	ldr	r2, [pc, #88]	@ (800237c <menu+0x1834>)
 8002324:	2101      	movs	r1, #1
 8002326:	2001      	movs	r0, #1
 8002328:	f006 fa91 	bl	800884e <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 800232c:	4b14      	ldr	r3, [pc, #80]	@ (8002380 <menu+0x1838>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d127      	bne.n	8002384 <menu+0x183c>
			lcd_print(2, 1, pasifText);
 8002334:	4a0d      	ldr	r2, [pc, #52]	@ (800236c <menu+0x1824>)
 8002336:	2101      	movs	r1, #1
 8002338:	2002      	movs	r0, #2
 800233a:	f006 fa88 	bl	800884e <lcd_print>
 800233e:	e02a      	b.n	8002396 <menu+0x184e>
 8002340:	20000dae 	.word	0x20000dae
 8002344:	20000f98 	.word	0x20000f98
 8002348:	40010800 	.word	0x40010800
 800234c:	20000dcf 	.word	0x20000dcf
 8002350:	20000d00 	.word	0x20000d00
 8002354:	20000dcc 	.word	0x20000dcc
 8002358:	20000da0 	.word	0x20000da0
 800235c:	20001178 	.word	0x20001178
 8002360:	20000daf 	.word	0x20000daf
 8002364:	2000118c 	.word	0x2000118c
 8002368:	200011a0 	.word	0x200011a0
 800236c:	20000f84 	.word	0x20000f84
 8002370:	20000da1 	.word	0x20000da1
 8002374:	20000db2 	.word	0x20000db2
 8002378:	200011b4 	.word	0x200011b4
 800237c:	200011c8 	.word	0x200011c8
 8002380:	20000db0 	.word	0x20000db0
		} else if(devirmeYukariIleriLimit == 1){
 8002384:	4b79      	ldr	r3, [pc, #484]	@ (800256c <menu+0x1a24>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d104      	bne.n	8002396 <menu+0x184e>
			lcd_print(2, 1, aktifText);
 800238c:	4a78      	ldr	r2, [pc, #480]	@ (8002570 <menu+0x1a28>)
 800238e:	2101      	movs	r1, #1
 8002390:	2002      	movs	r0, #2
 8002392:	f006 fa5c 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002396:	2102      	movs	r1, #2
 8002398:	4876      	ldr	r0, [pc, #472]	@ (8002574 <menu+0x1a2c>)
 800239a:	f007 fbb3 	bl	8009b04 <HAL_GPIO_ReadPin>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d115      	bne.n	80023d0 <menu+0x1888>
 80023a4:	4b74      	ldr	r3, [pc, #464]	@ (8002578 <menu+0x1a30>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	f083 0301 	eor.w	r3, r3, #1
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00e      	beq.n	80023d0 <menu+0x1888>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80023b2:	4b6e      	ldr	r3, [pc, #440]	@ (800256c <menu+0x1a24>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	3301      	adds	r3, #1
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4b6c      	ldr	r3, [pc, #432]	@ (800256c <menu+0x1a24>)
 80023bc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80023be:	4b6b      	ldr	r3, [pc, #428]	@ (800256c <menu+0x1a24>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d902      	bls.n	80023cc <menu+0x1884>
				devirmeYukariIleriLimit = 0;
 80023c6:	4b69      	ldr	r3, [pc, #420]	@ (800256c <menu+0x1a24>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023cc:	f000 ffc0 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023d0:	2104      	movs	r1, #4
 80023d2:	4868      	ldr	r0, [pc, #416]	@ (8002574 <menu+0x1a2c>)
 80023d4:	f007 fb96 	bl	8009b04 <HAL_GPIO_ReadPin>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d115      	bne.n	800240a <menu+0x18c2>
 80023de:	4b66      	ldr	r3, [pc, #408]	@ (8002578 <menu+0x1a30>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	f083 0301 	eor.w	r3, r3, #1
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00e      	beq.n	800240a <menu+0x18c2>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80023ec:	4b5f      	ldr	r3, [pc, #380]	@ (800256c <menu+0x1a24>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	4b5d      	ldr	r3, [pc, #372]	@ (800256c <menu+0x1a24>)
 80023f6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80023f8:	4b5c      	ldr	r3, [pc, #368]	@ (800256c <menu+0x1a24>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <menu+0x18be>
		   		devirmeYukariIleriLimit = 1;
 8002400:	4b5a      	ldr	r3, [pc, #360]	@ (800256c <menu+0x1a24>)
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002406:	f000 ffa3 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800240a:	2108      	movs	r1, #8
 800240c:	4859      	ldr	r0, [pc, #356]	@ (8002574 <menu+0x1a2c>)
 800240e:	f007 fb79 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002412:	4603      	mov	r3, r0
 8002414:	2b01      	cmp	r3, #1
 8002416:	d10d      	bne.n	8002434 <menu+0x18ec>
 8002418:	4b57      	ldr	r3, [pc, #348]	@ (8002578 <menu+0x1a30>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	f083 0301 	eor.w	r3, r3, #1
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d006      	beq.n	8002434 <menu+0x18ec>
			eepromData[16] = devirmeYukariIleriLimit;
 8002426:	4b51      	ldr	r3, [pc, #324]	@ (800256c <menu+0x1a24>)
 8002428:	781a      	ldrb	r2, [r3, #0]
 800242a:	4b54      	ldr	r3, [pc, #336]	@ (800257c <menu+0x1a34>)
 800242c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800242e:	4b54      	ldr	r3, [pc, #336]	@ (8002580 <menu+0x1a38>)
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002434:	4b53      	ldr	r3, [pc, #332]	@ (8002584 <menu+0x1a3c>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b13      	cmp	r3, #19
 800243a:	d174      	bne.n	8002526 <menu+0x19de>
		if(devirmeYuruyusSecim == 2) {
 800243c:	4b52      	ldr	r3, [pc, #328]	@ (8002588 <menu+0x1a40>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d105      	bne.n	8002450 <menu+0x1908>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002444:	4a51      	ldr	r2, [pc, #324]	@ (800258c <menu+0x1a44>)
 8002446:	2101      	movs	r1, #1
 8002448:	2001      	movs	r0, #1
 800244a:	f006 fa00 	bl	800884e <lcd_print>
 800244e:	e008      	b.n	8002462 <menu+0x191a>
		} else if(devirmeYuruyusSecim == 1) {
 8002450:	4b4d      	ldr	r3, [pc, #308]	@ (8002588 <menu+0x1a40>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d104      	bne.n	8002462 <menu+0x191a>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002458:	4a4d      	ldr	r2, [pc, #308]	@ (8002590 <menu+0x1a48>)
 800245a:	2101      	movs	r1, #1
 800245c:	2001      	movs	r0, #1
 800245e:	f006 f9f6 	bl	800884e <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002462:	4b4c      	ldr	r3, [pc, #304]	@ (8002594 <menu+0x1a4c>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d105      	bne.n	8002476 <menu+0x192e>
			lcd_print(2, 1, pasifText);
 800246a:	4a4b      	ldr	r2, [pc, #300]	@ (8002598 <menu+0x1a50>)
 800246c:	2101      	movs	r1, #1
 800246e:	2002      	movs	r0, #2
 8002470:	f006 f9ed 	bl	800884e <lcd_print>
 8002474:	e008      	b.n	8002488 <menu+0x1940>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002476:	4b47      	ldr	r3, [pc, #284]	@ (8002594 <menu+0x1a4c>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d104      	bne.n	8002488 <menu+0x1940>
			lcd_print(2, 1, aktifText);
 800247e:	4a3c      	ldr	r2, [pc, #240]	@ (8002570 <menu+0x1a28>)
 8002480:	2101      	movs	r1, #1
 8002482:	2002      	movs	r0, #2
 8002484:	f006 f9e3 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002488:	2102      	movs	r1, #2
 800248a:	483a      	ldr	r0, [pc, #232]	@ (8002574 <menu+0x1a2c>)
 800248c:	f007 fb3a 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002490:	4603      	mov	r3, r0
 8002492:	2b01      	cmp	r3, #1
 8002494:	d115      	bne.n	80024c2 <menu+0x197a>
 8002496:	4b38      	ldr	r3, [pc, #224]	@ (8002578 <menu+0x1a30>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	f083 0301 	eor.w	r3, r3, #1
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00e      	beq.n	80024c2 <menu+0x197a>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80024a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002594 <menu+0x1a4c>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	3301      	adds	r3, #1
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	4b39      	ldr	r3, [pc, #228]	@ (8002594 <menu+0x1a4c>)
 80024ae:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80024b0:	4b38      	ldr	r3, [pc, #224]	@ (8002594 <menu+0x1a4c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d902      	bls.n	80024be <menu+0x1976>
				devirmeAsagiGeriLimit = 0;
 80024b8:	4b36      	ldr	r3, [pc, #216]	@ (8002594 <menu+0x1a4c>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024be:	f000 ff47 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024c2:	2104      	movs	r1, #4
 80024c4:	482b      	ldr	r0, [pc, #172]	@ (8002574 <menu+0x1a2c>)
 80024c6:	f007 fb1d 	bl	8009b04 <HAL_GPIO_ReadPin>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d115      	bne.n	80024fc <menu+0x19b4>
 80024d0:	4b29      	ldr	r3, [pc, #164]	@ (8002578 <menu+0x1a30>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	f083 0301 	eor.w	r3, r3, #1
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00e      	beq.n	80024fc <menu+0x19b4>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80024de:	4b2d      	ldr	r3, [pc, #180]	@ (8002594 <menu+0x1a4c>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002594 <menu+0x1a4c>)
 80024e8:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80024ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002594 <menu+0x1a4c>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <menu+0x19b0>
		   		devirmeAsagiGeriLimit = 1;
 80024f2:	4b28      	ldr	r3, [pc, #160]	@ (8002594 <menu+0x1a4c>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024f8:	f000 ff2a 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024fc:	2108      	movs	r1, #8
 80024fe:	481d      	ldr	r0, [pc, #116]	@ (8002574 <menu+0x1a2c>)
 8002500:	f007 fb00 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002504:	4603      	mov	r3, r0
 8002506:	2b01      	cmp	r3, #1
 8002508:	d10d      	bne.n	8002526 <menu+0x19de>
 800250a:	4b1b      	ldr	r3, [pc, #108]	@ (8002578 <menu+0x1a30>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	f083 0301 	eor.w	r3, r3, #1
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d006      	beq.n	8002526 <menu+0x19de>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002518:	4b1e      	ldr	r3, [pc, #120]	@ (8002594 <menu+0x1a4c>)
 800251a:	781a      	ldrb	r2, [r3, #0]
 800251c:	4b17      	ldr	r3, [pc, #92]	@ (800257c <menu+0x1a34>)
 800251e:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002520:	4b17      	ldr	r3, [pc, #92]	@ (8002580 <menu+0x1a38>)
 8002522:	2201      	movs	r2, #1
 8002524:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002526:	4b17      	ldr	r3, [pc, #92]	@ (8002584 <menu+0x1a3c>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b14      	cmp	r3, #20
 800252c:	f040 809e 	bne.w	800266c <menu+0x1b24>
		if(devirmeYuruyusSecim == 1) {
 8002530:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <menu+0x1a40>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d105      	bne.n	8002544 <menu+0x19fc>
			lcd_print(1, 1, yuruyusSecildiText);
 8002538:	4a18      	ldr	r2, [pc, #96]	@ (800259c <menu+0x1a54>)
 800253a:	2101      	movs	r1, #1
 800253c:	2001      	movs	r0, #1
 800253e:	f006 f986 	bl	800884e <lcd_print>
 8002542:	e008      	b.n	8002556 <menu+0x1a0e>
		} else if(devirmeYuruyusSecim == 2) {
 8002544:	4b10      	ldr	r3, [pc, #64]	@ (8002588 <menu+0x1a40>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d104      	bne.n	8002556 <menu+0x1a0e>
			lcd_print(1, 1, devirmeSilindirTipiText);
 800254c:	4a14      	ldr	r2, [pc, #80]	@ (80025a0 <menu+0x1a58>)
 800254e:	2101      	movs	r1, #1
 8002550:	2001      	movs	r0, #1
 8002552:	f006 f97c 	bl	800884e <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002556:	4b13      	ldr	r3, [pc, #76]	@ (80025a4 <menu+0x1a5c>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d126      	bne.n	80025ac <menu+0x1a64>
			lcd_print(2, 1, tekTesirText);
 800255e:	4a12      	ldr	r2, [pc, #72]	@ (80025a8 <menu+0x1a60>)
 8002560:	2101      	movs	r1, #1
 8002562:	2002      	movs	r0, #2
 8002564:	f006 f973 	bl	800884e <lcd_print>
 8002568:	e029      	b.n	80025be <menu+0x1a76>
 800256a:	bf00      	nop
 800256c:	20000db0 	.word	0x20000db0
 8002570:	20000f98 	.word	0x20000f98
 8002574:	40010800 	.word	0x40010800
 8002578:	20000dcf 	.word	0x20000dcf
 800257c:	20000d00 	.word	0x20000d00
 8002580:	20000dcc 	.word	0x20000dcc
 8002584:	20000da0 	.word	0x20000da0
 8002588:	20000daf 	.word	0x20000daf
 800258c:	200011dc 	.word	0x200011dc
 8002590:	200011f0 	.word	0x200011f0
 8002594:	20000db1 	.word	0x20000db1
 8002598:	20000f84 	.word	0x20000f84
 800259c:	20001204 	.word	0x20001204
 80025a0:	20001218 	.word	0x20001218
 80025a4:	20000db2 	.word	0x20000db2
 80025a8:	2000122c 	.word	0x2000122c
		} else if(devirmeSilindirTipi == 1) {
 80025ac:	4b39      	ldr	r3, [pc, #228]	@ (8002694 <menu+0x1b4c>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d104      	bne.n	80025be <menu+0x1a76>
			lcd_print(2, 1, ciftTesirText);
 80025b4:	4a38      	ldr	r2, [pc, #224]	@ (8002698 <menu+0x1b50>)
 80025b6:	2101      	movs	r1, #1
 80025b8:	2002      	movs	r0, #2
 80025ba:	f006 f948 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80025be:	2102      	movs	r1, #2
 80025c0:	4836      	ldr	r0, [pc, #216]	@ (800269c <menu+0x1b54>)
 80025c2:	f007 fa9f 	bl	8009b04 <HAL_GPIO_ReadPin>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d119      	bne.n	8002600 <menu+0x1ab8>
 80025cc:	4b34      	ldr	r3, [pc, #208]	@ (80026a0 <menu+0x1b58>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	f083 0301 	eor.w	r3, r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d012      	beq.n	8002600 <menu+0x1ab8>
 80025da:	4b32      	ldr	r3, [pc, #200]	@ (80026a4 <menu+0x1b5c>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d10e      	bne.n	8002600 <menu+0x1ab8>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80025e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002694 <menu+0x1b4c>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002694 <menu+0x1b4c>)
 80025ec:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80025ee:	4b29      	ldr	r3, [pc, #164]	@ (8002694 <menu+0x1b4c>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d902      	bls.n	80025fc <menu+0x1ab4>
				devirmeSilindirTipi = 0;
 80025f6:	4b27      	ldr	r3, [pc, #156]	@ (8002694 <menu+0x1b4c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025fc:	f000 fea8 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002600:	2104      	movs	r1, #4
 8002602:	4826      	ldr	r0, [pc, #152]	@ (800269c <menu+0x1b54>)
 8002604:	f007 fa7e 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002608:	4603      	mov	r3, r0
 800260a:	2b01      	cmp	r3, #1
 800260c:	d119      	bne.n	8002642 <menu+0x1afa>
 800260e:	4b24      	ldr	r3, [pc, #144]	@ (80026a0 <menu+0x1b58>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	f083 0301 	eor.w	r3, r3, #1
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d012      	beq.n	8002642 <menu+0x1afa>
 800261c:	4b21      	ldr	r3, [pc, #132]	@ (80026a4 <menu+0x1b5c>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d10e      	bne.n	8002642 <menu+0x1afa>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002624:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <menu+0x1b4c>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	3b01      	subs	r3, #1
 800262a:	b2da      	uxtb	r2, r3
 800262c:	4b19      	ldr	r3, [pc, #100]	@ (8002694 <menu+0x1b4c>)
 800262e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002630:	4b18      	ldr	r3, [pc, #96]	@ (8002694 <menu+0x1b4c>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <menu+0x1af6>
		   		devirmeSilindirTipi = 1;
 8002638:	4b16      	ldr	r3, [pc, #88]	@ (8002694 <menu+0x1b4c>)
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800263e:	f000 fe87 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002642:	2108      	movs	r1, #8
 8002644:	4815      	ldr	r0, [pc, #84]	@ (800269c <menu+0x1b54>)
 8002646:	f007 fa5d 	bl	8009b04 <HAL_GPIO_ReadPin>
 800264a:	4603      	mov	r3, r0
 800264c:	2b01      	cmp	r3, #1
 800264e:	d10d      	bne.n	800266c <menu+0x1b24>
 8002650:	4b13      	ldr	r3, [pc, #76]	@ (80026a0 <menu+0x1b58>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	f083 0301 	eor.w	r3, r3, #1
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <menu+0x1b24>
			eepromData[18] = devirmeSilindirTipi;
 800265e:	4b0d      	ldr	r3, [pc, #52]	@ (8002694 <menu+0x1b4c>)
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	4b11      	ldr	r3, [pc, #68]	@ (80026a8 <menu+0x1b60>)
 8002664:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002666:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <menu+0x1b64>)
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800266c:	4b10      	ldr	r3, [pc, #64]	@ (80026b0 <menu+0x1b68>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b15      	cmp	r3, #21
 8002672:	f040 8088 	bne.w	8002786 <menu+0x1c3e>
		lcd_print(1, 1, platformSilindirTipiText);
 8002676:	4a0f      	ldr	r2, [pc, #60]	@ (80026b4 <menu+0x1b6c>)
 8002678:	2101      	movs	r1, #1
 800267a:	2001      	movs	r0, #1
 800267c:	f006 f8e7 	bl	800884e <lcd_print>

		if(platformSilindirTipi == 0) {
 8002680:	4b0d      	ldr	r3, [pc, #52]	@ (80026b8 <menu+0x1b70>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d11b      	bne.n	80026c0 <menu+0x1b78>
			lcd_print(2, 1, tekTesirText);
 8002688:	4a0c      	ldr	r2, [pc, #48]	@ (80026bc <menu+0x1b74>)
 800268a:	2101      	movs	r1, #1
 800268c:	2002      	movs	r0, #2
 800268e:	f006 f8de 	bl	800884e <lcd_print>
 8002692:	e01e      	b.n	80026d2 <menu+0x1b8a>
 8002694:	20000db2 	.word	0x20000db2
 8002698:	20001240 	.word	0x20001240
 800269c:	40010800 	.word	0x40010800
 80026a0:	20000dcf 	.word	0x20000dcf
 80026a4:	20000daf 	.word	0x20000daf
 80026a8:	20000d00 	.word	0x20000d00
 80026ac:	20000dcc 	.word	0x20000dcc
 80026b0:	20000da0 	.word	0x20000da0
 80026b4:	20001254 	.word	0x20001254
 80026b8:	20000db3 	.word	0x20000db3
 80026bc:	2000122c 	.word	0x2000122c
		} else if(platformSilindirTipi == 1) {
 80026c0:	4ba1      	ldr	r3, [pc, #644]	@ (8002948 <menu+0x1e00>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d104      	bne.n	80026d2 <menu+0x1b8a>
			lcd_print(2, 1, ciftTesirText);
 80026c8:	4aa0      	ldr	r2, [pc, #640]	@ (800294c <menu+0x1e04>)
 80026ca:	2101      	movs	r1, #1
 80026cc:	2002      	movs	r0, #2
 80026ce:	f006 f8be 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026d2:	2102      	movs	r1, #2
 80026d4:	489e      	ldr	r0, [pc, #632]	@ (8002950 <menu+0x1e08>)
 80026d6:	f007 fa15 	bl	8009b04 <HAL_GPIO_ReadPin>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d115      	bne.n	800270c <menu+0x1bc4>
 80026e0:	4b9c      	ldr	r3, [pc, #624]	@ (8002954 <menu+0x1e0c>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	f083 0301 	eor.w	r3, r3, #1
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00e      	beq.n	800270c <menu+0x1bc4>
			platformSilindirTipi = platformSilindirTipi + 1;
 80026ee:	4b96      	ldr	r3, [pc, #600]	@ (8002948 <menu+0x1e00>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	3301      	adds	r3, #1
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4b94      	ldr	r3, [pc, #592]	@ (8002948 <menu+0x1e00>)
 80026f8:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80026fa:	4b93      	ldr	r3, [pc, #588]	@ (8002948 <menu+0x1e00>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d902      	bls.n	8002708 <menu+0x1bc0>
				platformSilindirTipi = 0;
 8002702:	4b91      	ldr	r3, [pc, #580]	@ (8002948 <menu+0x1e00>)
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002708:	f000 fe22 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800270c:	2104      	movs	r1, #4
 800270e:	4890      	ldr	r0, [pc, #576]	@ (8002950 <menu+0x1e08>)
 8002710:	f007 f9f8 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002714:	4603      	mov	r3, r0
 8002716:	2b01      	cmp	r3, #1
 8002718:	d115      	bne.n	8002746 <menu+0x1bfe>
 800271a:	4b8e      	ldr	r3, [pc, #568]	@ (8002954 <menu+0x1e0c>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	f083 0301 	eor.w	r3, r3, #1
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00e      	beq.n	8002746 <menu+0x1bfe>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002728:	4b87      	ldr	r3, [pc, #540]	@ (8002948 <menu+0x1e00>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	3b01      	subs	r3, #1
 800272e:	b2da      	uxtb	r2, r3
 8002730:	4b85      	ldr	r3, [pc, #532]	@ (8002948 <menu+0x1e00>)
 8002732:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002734:	4b84      	ldr	r3, [pc, #528]	@ (8002948 <menu+0x1e00>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <menu+0x1bfa>
		   		platformSilindirTipi = 1;
 800273c:	4b82      	ldr	r3, [pc, #520]	@ (8002948 <menu+0x1e00>)
 800273e:	2201      	movs	r2, #1
 8002740:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002742:	f000 fe05 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002746:	2108      	movs	r1, #8
 8002748:	4881      	ldr	r0, [pc, #516]	@ (8002950 <menu+0x1e08>)
 800274a:	f007 f9db 	bl	8009b04 <HAL_GPIO_ReadPin>
 800274e:	4603      	mov	r3, r0
 8002750:	2b01      	cmp	r3, #1
 8002752:	d118      	bne.n	8002786 <menu+0x1c3e>
 8002754:	4b7f      	ldr	r3, [pc, #508]	@ (8002954 <menu+0x1e0c>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	f083 0301 	eor.w	r3, r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d011      	beq.n	8002786 <menu+0x1c3e>
			eepromData[19] = platformSilindirTipi;
 8002762:	4b79      	ldr	r3, [pc, #484]	@ (8002948 <menu+0x1e00>)
 8002764:	781a      	ldrb	r2, [r3, #0]
 8002766:	4b7c      	ldr	r3, [pc, #496]	@ (8002958 <menu+0x1e10>)
 8002768:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800276a:	4b77      	ldr	r3, [pc, #476]	@ (8002948 <menu+0x1e00>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d106      	bne.n	8002780 <menu+0x1c38>
				altLimit = 1;
 8002772:	4b7a      	ldr	r3, [pc, #488]	@ (800295c <menu+0x1e14>)
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002778:	4b78      	ldr	r3, [pc, #480]	@ (800295c <menu+0x1e14>)
 800277a:	781a      	ldrb	r2, [r3, #0]
 800277c:	4b76      	ldr	r3, [pc, #472]	@ (8002958 <menu+0x1e10>)
 800277e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002780:	4b77      	ldr	r3, [pc, #476]	@ (8002960 <menu+0x1e18>)
 8002782:	2201      	movs	r2, #1
 8002784:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002786:	4b77      	ldr	r3, [pc, #476]	@ (8002964 <menu+0x1e1c>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b16      	cmp	r3, #22
 800278c:	d164      	bne.n	8002858 <menu+0x1d10>
		lcd_print(1, 1, yukariValfSureText);
 800278e:	4a76      	ldr	r2, [pc, #472]	@ (8002968 <menu+0x1e20>)
 8002790:	2101      	movs	r1, #1
 8002792:	2001      	movs	r0, #1
 8002794:	f006 f85b 	bl	800884e <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002798:	4a74      	ldr	r2, [pc, #464]	@ (800296c <menu+0x1e24>)
 800279a:	2101      	movs	r1, #1
 800279c:	2002      	movs	r0, #2
 800279e:	f006 f856 	bl	800884e <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 80027a2:	4b73      	ldr	r3, [pc, #460]	@ (8002970 <menu+0x1e28>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	220a      	movs	r2, #10
 80027a8:	4972      	ldr	r1, [pc, #456]	@ (8002974 <menu+0x1e2c>)
 80027aa:	4618      	mov	r0, r3
 80027ac:	f009 fd4c 	bl	800c248 <itoa>
		lcd_print(2,16,snum);
 80027b0:	4a70      	ldr	r2, [pc, #448]	@ (8002974 <menu+0x1e2c>)
 80027b2:	2110      	movs	r1, #16
 80027b4:	2002      	movs	r0, #2
 80027b6:	f006 f84a 	bl	800884e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027ba:	2102      	movs	r1, #2
 80027bc:	4864      	ldr	r0, [pc, #400]	@ (8002950 <menu+0x1e08>)
 80027be:	f007 f9a1 	bl	8009b04 <HAL_GPIO_ReadPin>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d115      	bne.n	80027f4 <menu+0x1cac>
 80027c8:	4b62      	ldr	r3, [pc, #392]	@ (8002954 <menu+0x1e0c>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	f083 0301 	eor.w	r3, r3, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00e      	beq.n	80027f4 <menu+0x1cac>
			yukariValfTmr = yukariValfTmr + 1;
 80027d6:	4b66      	ldr	r3, [pc, #408]	@ (8002970 <menu+0x1e28>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	3301      	adds	r3, #1
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4b64      	ldr	r3, [pc, #400]	@ (8002970 <menu+0x1e28>)
 80027e0:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80027e2:	4b63      	ldr	r3, [pc, #396]	@ (8002970 <menu+0x1e28>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b05      	cmp	r3, #5
 80027e8:	d902      	bls.n	80027f0 <menu+0x1ca8>
				yukariValfTmr = 0;
 80027ea:	4b61      	ldr	r3, [pc, #388]	@ (8002970 <menu+0x1e28>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027f0:	f000 fdae 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027f4:	2104      	movs	r1, #4
 80027f6:	4856      	ldr	r0, [pc, #344]	@ (8002950 <menu+0x1e08>)
 80027f8:	f007 f984 	bl	8009b04 <HAL_GPIO_ReadPin>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d115      	bne.n	800282e <menu+0x1ce6>
 8002802:	4b54      	ldr	r3, [pc, #336]	@ (8002954 <menu+0x1e0c>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	f083 0301 	eor.w	r3, r3, #1
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00e      	beq.n	800282e <menu+0x1ce6>
			yukariValfTmr = yukariValfTmr - 1;
 8002810:	4b57      	ldr	r3, [pc, #348]	@ (8002970 <menu+0x1e28>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	3b01      	subs	r3, #1
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b55      	ldr	r3, [pc, #340]	@ (8002970 <menu+0x1e28>)
 800281a:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800281c:	4b54      	ldr	r3, [pc, #336]	@ (8002970 <menu+0x1e28>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b06      	cmp	r3, #6
 8002822:	d902      	bls.n	800282a <menu+0x1ce2>
		   		yukariValfTmr = 5;
 8002824:	4b52      	ldr	r3, [pc, #328]	@ (8002970 <menu+0x1e28>)
 8002826:	2205      	movs	r2, #5
 8002828:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800282a:	f000 fd91 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800282e:	2108      	movs	r1, #8
 8002830:	4847      	ldr	r0, [pc, #284]	@ (8002950 <menu+0x1e08>)
 8002832:	f007 f967 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002836:	4603      	mov	r3, r0
 8002838:	2b01      	cmp	r3, #1
 800283a:	d10d      	bne.n	8002858 <menu+0x1d10>
 800283c:	4b45      	ldr	r3, [pc, #276]	@ (8002954 <menu+0x1e0c>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	f083 0301 	eor.w	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d006      	beq.n	8002858 <menu+0x1d10>
			eepromData[20] = yukariValfTmr;
 800284a:	4b49      	ldr	r3, [pc, #292]	@ (8002970 <menu+0x1e28>)
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	4b42      	ldr	r3, [pc, #264]	@ (8002958 <menu+0x1e10>)
 8002850:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002852:	4b43      	ldr	r3, [pc, #268]	@ (8002960 <menu+0x1e18>)
 8002854:	2201      	movs	r2, #1
 8002856:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002858:	4b42      	ldr	r3, [pc, #264]	@ (8002964 <menu+0x1e1c>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b17      	cmp	r3, #23
 800285e:	d164      	bne.n	800292a <menu+0x1de2>
		lcd_print(1, 1, asagiValfSureText);
 8002860:	4a45      	ldr	r2, [pc, #276]	@ (8002978 <menu+0x1e30>)
 8002862:	2101      	movs	r1, #1
 8002864:	2001      	movs	r0, #1
 8002866:	f005 fff2 	bl	800884e <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 800286a:	4a40      	ldr	r2, [pc, #256]	@ (800296c <menu+0x1e24>)
 800286c:	2101      	movs	r1, #1
 800286e:	2002      	movs	r0, #2
 8002870:	f005 ffed 	bl	800884e <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 8002874:	4b41      	ldr	r3, [pc, #260]	@ (800297c <menu+0x1e34>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	220a      	movs	r2, #10
 800287a:	493e      	ldr	r1, [pc, #248]	@ (8002974 <menu+0x1e2c>)
 800287c:	4618      	mov	r0, r3
 800287e:	f009 fce3 	bl	800c248 <itoa>
		lcd_print(2,16,snum);
 8002882:	4a3c      	ldr	r2, [pc, #240]	@ (8002974 <menu+0x1e2c>)
 8002884:	2110      	movs	r1, #16
 8002886:	2002      	movs	r0, #2
 8002888:	f005 ffe1 	bl	800884e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800288c:	2102      	movs	r1, #2
 800288e:	4830      	ldr	r0, [pc, #192]	@ (8002950 <menu+0x1e08>)
 8002890:	f007 f938 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d115      	bne.n	80028c6 <menu+0x1d7e>
 800289a:	4b2e      	ldr	r3, [pc, #184]	@ (8002954 <menu+0x1e0c>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	f083 0301 	eor.w	r3, r3, #1
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00e      	beq.n	80028c6 <menu+0x1d7e>
			asagiValfTmr = asagiValfTmr + 1;
 80028a8:	4b34      	ldr	r3, [pc, #208]	@ (800297c <menu+0x1e34>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	3301      	adds	r3, #1
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	4b32      	ldr	r3, [pc, #200]	@ (800297c <menu+0x1e34>)
 80028b2:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 80028b4:	4b31      	ldr	r3, [pc, #196]	@ (800297c <menu+0x1e34>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d902      	bls.n	80028c2 <menu+0x1d7a>
				asagiValfTmr = 0;
 80028bc:	4b2f      	ldr	r3, [pc, #188]	@ (800297c <menu+0x1e34>)
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028c2:	f000 fd45 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028c6:	2104      	movs	r1, #4
 80028c8:	4821      	ldr	r0, [pc, #132]	@ (8002950 <menu+0x1e08>)
 80028ca:	f007 f91b 	bl	8009b04 <HAL_GPIO_ReadPin>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d115      	bne.n	8002900 <menu+0x1db8>
 80028d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002954 <menu+0x1e0c>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	f083 0301 	eor.w	r3, r3, #1
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00e      	beq.n	8002900 <menu+0x1db8>
			asagiValfTmr = asagiValfTmr - 1;
 80028e2:	4b26      	ldr	r3, [pc, #152]	@ (800297c <menu+0x1e34>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4b24      	ldr	r3, [pc, #144]	@ (800297c <menu+0x1e34>)
 80028ec:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 80028ee:	4b23      	ldr	r3, [pc, #140]	@ (800297c <menu+0x1e34>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b06      	cmp	r3, #6
 80028f4:	d902      	bls.n	80028fc <menu+0x1db4>
		   		asagiValfTmr = 5;
 80028f6:	4b21      	ldr	r3, [pc, #132]	@ (800297c <menu+0x1e34>)
 80028f8:	2205      	movs	r2, #5
 80028fa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028fc:	f000 fd28 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002900:	2108      	movs	r1, #8
 8002902:	4813      	ldr	r0, [pc, #76]	@ (8002950 <menu+0x1e08>)
 8002904:	f007 f8fe 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002908:	4603      	mov	r3, r0
 800290a:	2b01      	cmp	r3, #1
 800290c:	d10d      	bne.n	800292a <menu+0x1de2>
 800290e:	4b11      	ldr	r3, [pc, #68]	@ (8002954 <menu+0x1e0c>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	f083 0301 	eor.w	r3, r3, #1
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d006      	beq.n	800292a <menu+0x1de2>
			eepromData[21] = asagiValfTmr;
 800291c:	4b17      	ldr	r3, [pc, #92]	@ (800297c <menu+0x1e34>)
 800291e:	781a      	ldrb	r2, [r3, #0]
 8002920:	4b0d      	ldr	r3, [pc, #52]	@ (8002958 <menu+0x1e10>)
 8002922:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002924:	4b0e      	ldr	r3, [pc, #56]	@ (8002960 <menu+0x1e18>)
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 800292a:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <menu+0x1e1c>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b18      	cmp	r3, #24
 8002930:	f040 8093 	bne.w	8002a5a <menu+0x1f12>
		if(devirmeYuruyusSecim == 2) {
 8002934:	4b12      	ldr	r3, [pc, #72]	@ (8002980 <menu+0x1e38>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d125      	bne.n	8002988 <menu+0x1e40>
			lcd_print(1, 1, devirmeYukariValfSureText);
 800293c:	4a11      	ldr	r2, [pc, #68]	@ (8002984 <menu+0x1e3c>)
 800293e:	2101      	movs	r1, #1
 8002940:	2001      	movs	r0, #1
 8002942:	f005 ff84 	bl	800884e <lcd_print>
 8002946:	e028      	b.n	800299a <menu+0x1e52>
 8002948:	20000db3 	.word	0x20000db3
 800294c:	20001240 	.word	0x20001240
 8002950:	40010800 	.word	0x40010800
 8002954:	20000dcf 	.word	0x20000dcf
 8002958:	20000d00 	.word	0x20000d00
 800295c:	20000da6 	.word	0x20000da6
 8002960:	20000dcc 	.word	0x20000dcc
 8002964:	20000da0 	.word	0x20000da0
 8002968:	20001268 	.word	0x20001268
 800296c:	200010b0 	.word	0x200010b0
 8002970:	20000db4 	.word	0x20000db4
 8002974:	20000d70 	.word	0x20000d70
 8002978:	2000127c 	.word	0x2000127c
 800297c:	20000db5 	.word	0x20000db5
 8002980:	20000daf 	.word	0x20000daf
 8002984:	20001290 	.word	0x20001290
		} else if(devirmeYuruyusSecim == 1) {
 8002988:	4b8c      	ldr	r3, [pc, #560]	@ (8002bbc <menu+0x2074>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d104      	bne.n	800299a <menu+0x1e52>
			lcd_print(1, 1, ileriValfSureText);
 8002990:	4a8b      	ldr	r2, [pc, #556]	@ (8002bc0 <menu+0x2078>)
 8002992:	2101      	movs	r1, #1
 8002994:	2001      	movs	r0, #1
 8002996:	f005 ff5a 	bl	800884e <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 800299a:	4a8a      	ldr	r2, [pc, #552]	@ (8002bc4 <menu+0x207c>)
 800299c:	2101      	movs	r1, #1
 800299e:	2002      	movs	r0, #2
 80029a0:	f005 ff55 	bl	800884e <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 80029a4:	4b88      	ldr	r3, [pc, #544]	@ (8002bc8 <menu+0x2080>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	220a      	movs	r2, #10
 80029aa:	4988      	ldr	r1, [pc, #544]	@ (8002bcc <menu+0x2084>)
 80029ac:	4618      	mov	r0, r3
 80029ae:	f009 fc4b 	bl	800c248 <itoa>
		lcd_print(2, 16, snum);
 80029b2:	4a86      	ldr	r2, [pc, #536]	@ (8002bcc <menu+0x2084>)
 80029b4:	2110      	movs	r1, #16
 80029b6:	2002      	movs	r0, #2
 80029b8:	f005 ff49 	bl	800884e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029bc:	2102      	movs	r1, #2
 80029be:	4884      	ldr	r0, [pc, #528]	@ (8002bd0 <menu+0x2088>)
 80029c0:	f007 f8a0 	bl	8009b04 <HAL_GPIO_ReadPin>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d115      	bne.n	80029f6 <menu+0x1eae>
 80029ca:	4b82      	ldr	r3, [pc, #520]	@ (8002bd4 <menu+0x208c>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	f083 0301 	eor.w	r3, r3, #1
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00e      	beq.n	80029f6 <menu+0x1eae>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 80029d8:	4b7b      	ldr	r3, [pc, #492]	@ (8002bc8 <menu+0x2080>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	3301      	adds	r3, #1
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	4b79      	ldr	r3, [pc, #484]	@ (8002bc8 <menu+0x2080>)
 80029e2:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 80029e4:	4b78      	ldr	r3, [pc, #480]	@ (8002bc8 <menu+0x2080>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	d902      	bls.n	80029f2 <menu+0x1eaa>
				devirmeYukariIleriTmr = 0;
 80029ec:	4b76      	ldr	r3, [pc, #472]	@ (8002bc8 <menu+0x2080>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029f2:	f000 fcad 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029f6:	2104      	movs	r1, #4
 80029f8:	4875      	ldr	r0, [pc, #468]	@ (8002bd0 <menu+0x2088>)
 80029fa:	f007 f883 	bl	8009b04 <HAL_GPIO_ReadPin>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d115      	bne.n	8002a30 <menu+0x1ee8>
 8002a04:	4b73      	ldr	r3, [pc, #460]	@ (8002bd4 <menu+0x208c>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	f083 0301 	eor.w	r3, r3, #1
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00e      	beq.n	8002a30 <menu+0x1ee8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8002a12:	4b6d      	ldr	r3, [pc, #436]	@ (8002bc8 <menu+0x2080>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	4b6b      	ldr	r3, [pc, #428]	@ (8002bc8 <menu+0x2080>)
 8002a1c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8002a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8002bc8 <menu+0x2080>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b06      	cmp	r3, #6
 8002a24:	d902      	bls.n	8002a2c <menu+0x1ee4>
		   		devirmeYukariIleriTmr = 5;
 8002a26:	4b68      	ldr	r3, [pc, #416]	@ (8002bc8 <menu+0x2080>)
 8002a28:	2205      	movs	r2, #5
 8002a2a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a2c:	f000 fc90 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a30:	2108      	movs	r1, #8
 8002a32:	4867      	ldr	r0, [pc, #412]	@ (8002bd0 <menu+0x2088>)
 8002a34:	f007 f866 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d10d      	bne.n	8002a5a <menu+0x1f12>
 8002a3e:	4b65      	ldr	r3, [pc, #404]	@ (8002bd4 <menu+0x208c>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	f083 0301 	eor.w	r3, r3, #1
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d006      	beq.n	8002a5a <menu+0x1f12>
			eepromData[22] = devirmeYukariIleriTmr;
 8002a4c:	4b5e      	ldr	r3, [pc, #376]	@ (8002bc8 <menu+0x2080>)
 8002a4e:	781a      	ldrb	r2, [r3, #0]
 8002a50:	4b61      	ldr	r3, [pc, #388]	@ (8002bd8 <menu+0x2090>)
 8002a52:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8002a54:	4b61      	ldr	r3, [pc, #388]	@ (8002bdc <menu+0x2094>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8002a5a:	4b61      	ldr	r3, [pc, #388]	@ (8002be0 <menu+0x2098>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b19      	cmp	r3, #25
 8002a60:	d172      	bne.n	8002b48 <menu+0x2000>
		if(devirmeYuruyusSecim == 2) {
 8002a62:	4b56      	ldr	r3, [pc, #344]	@ (8002bbc <menu+0x2074>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d105      	bne.n	8002a76 <menu+0x1f2e>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 8002a6a:	4a5e      	ldr	r2, [pc, #376]	@ (8002be4 <menu+0x209c>)
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f005 feed 	bl	800884e <lcd_print>
 8002a74:	e008      	b.n	8002a88 <menu+0x1f40>
		} else if(devirmeYuruyusSecim == 1) {
 8002a76:	4b51      	ldr	r3, [pc, #324]	@ (8002bbc <menu+0x2074>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d104      	bne.n	8002a88 <menu+0x1f40>
			lcd_print(1, 1, geriValfSureText);
 8002a7e:	4a5a      	ldr	r2, [pc, #360]	@ (8002be8 <menu+0x20a0>)
 8002a80:	2101      	movs	r1, #1
 8002a82:	2001      	movs	r0, #1
 8002a84:	f005 fee3 	bl	800884e <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002a88:	4a4e      	ldr	r2, [pc, #312]	@ (8002bc4 <menu+0x207c>)
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	2002      	movs	r0, #2
 8002a8e:	f005 fede 	bl	800884e <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8002a92:	4b56      	ldr	r3, [pc, #344]	@ (8002bec <menu+0x20a4>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	220a      	movs	r2, #10
 8002a98:	494c      	ldr	r1, [pc, #304]	@ (8002bcc <menu+0x2084>)
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f009 fbd4 	bl	800c248 <itoa>
		lcd_print(2,16,snum);
 8002aa0:	4a4a      	ldr	r2, [pc, #296]	@ (8002bcc <menu+0x2084>)
 8002aa2:	2110      	movs	r1, #16
 8002aa4:	2002      	movs	r0, #2
 8002aa6:	f005 fed2 	bl	800884e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aaa:	2102      	movs	r1, #2
 8002aac:	4848      	ldr	r0, [pc, #288]	@ (8002bd0 <menu+0x2088>)
 8002aae:	f007 f829 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d115      	bne.n	8002ae4 <menu+0x1f9c>
 8002ab8:	4b46      	ldr	r3, [pc, #280]	@ (8002bd4 <menu+0x208c>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	f083 0301 	eor.w	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00e      	beq.n	8002ae4 <menu+0x1f9c>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8002ac6:	4b49      	ldr	r3, [pc, #292]	@ (8002bec <menu+0x20a4>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4b47      	ldr	r3, [pc, #284]	@ (8002bec <menu+0x20a4>)
 8002ad0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8002ad2:	4b46      	ldr	r3, [pc, #280]	@ (8002bec <menu+0x20a4>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b05      	cmp	r3, #5
 8002ad8:	d902      	bls.n	8002ae0 <menu+0x1f98>
				devirmeAsagiGeriTmr = 0;
 8002ada:	4b44      	ldr	r3, [pc, #272]	@ (8002bec <menu+0x20a4>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ae0:	f000 fc36 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ae4:	2104      	movs	r1, #4
 8002ae6:	483a      	ldr	r0, [pc, #232]	@ (8002bd0 <menu+0x2088>)
 8002ae8:	f007 f80c 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d115      	bne.n	8002b1e <menu+0x1fd6>
 8002af2:	4b38      	ldr	r3, [pc, #224]	@ (8002bd4 <menu+0x208c>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	f083 0301 	eor.w	r3, r3, #1
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00e      	beq.n	8002b1e <menu+0x1fd6>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8002b00:	4b3a      	ldr	r3, [pc, #232]	@ (8002bec <menu+0x20a4>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	4b38      	ldr	r3, [pc, #224]	@ (8002bec <menu+0x20a4>)
 8002b0a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8002b0c:	4b37      	ldr	r3, [pc, #220]	@ (8002bec <menu+0x20a4>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b06      	cmp	r3, #6
 8002b12:	d902      	bls.n	8002b1a <menu+0x1fd2>
		   		devirmeAsagiGeriTmr = 5;
 8002b14:	4b35      	ldr	r3, [pc, #212]	@ (8002bec <menu+0x20a4>)
 8002b16:	2205      	movs	r2, #5
 8002b18:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b1a:	f000 fc19 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b1e:	2108      	movs	r1, #8
 8002b20:	482b      	ldr	r0, [pc, #172]	@ (8002bd0 <menu+0x2088>)
 8002b22:	f006 ffef 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d10d      	bne.n	8002b48 <menu+0x2000>
 8002b2c:	4b29      	ldr	r3, [pc, #164]	@ (8002bd4 <menu+0x208c>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	f083 0301 	eor.w	r3, r3, #1
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d006      	beq.n	8002b48 <menu+0x2000>
			eepromData[23] = devirmeAsagiGeriTmr;
 8002b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bec <menu+0x20a4>)
 8002b3c:	781a      	ldrb	r2, [r3, #0]
 8002b3e:	4b26      	ldr	r3, [pc, #152]	@ (8002bd8 <menu+0x2090>)
 8002b40:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8002b42:	4b26      	ldr	r3, [pc, #152]	@ (8002bdc <menu+0x2094>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8002b48:	4b25      	ldr	r3, [pc, #148]	@ (8002be0 <menu+0x2098>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b1a      	cmp	r3, #26
 8002b4e:	f040 80b7 	bne.w	8002cc0 <menu+0x2178>
		lcd_print(1, 1, calismaSuresiText);
 8002b52:	4a27      	ldr	r2, [pc, #156]	@ (8002bf0 <menu+0x20a8>)
 8002b54:	2101      	movs	r1, #1
 8002b56:	2001      	movs	r0, #1
 8002b58:	f005 fe79 	bl	800884e <lcd_print>

		if(makineCalismaTmr > 99) {
 8002b5c:	4b25      	ldr	r3, [pc, #148]	@ (8002bf4 <menu+0x20ac>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b63      	cmp	r3, #99	@ 0x63
 8002b62:	d911      	bls.n	8002b88 <menu+0x2040>
			lcd_print(2, 1, kacSaniyeText);
 8002b64:	4a17      	ldr	r2, [pc, #92]	@ (8002bc4 <menu+0x207c>)
 8002b66:	2101      	movs	r1, #1
 8002b68:	2002      	movs	r0, #2
 8002b6a:	f005 fe70 	bl	800884e <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8002b6e:	4b21      	ldr	r3, [pc, #132]	@ (8002bf4 <menu+0x20ac>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	220a      	movs	r2, #10
 8002b74:	4915      	ldr	r1, [pc, #84]	@ (8002bcc <menu+0x2084>)
 8002b76:	4618      	mov	r0, r3
 8002b78:	f009 fb66 	bl	800c248 <itoa>
			lcd_print(2,14,snum);
 8002b7c:	4a13      	ldr	r2, [pc, #76]	@ (8002bcc <menu+0x2084>)
 8002b7e:	210e      	movs	r1, #14
 8002b80:	2002      	movs	r0, #2
 8002b82:	f005 fe64 	bl	800884e <lcd_print>
 8002b86:	e04c      	b.n	8002c22 <menu+0x20da>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8002b88:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf4 <menu+0x20ac>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b09      	cmp	r3, #9
 8002b8e:	d933      	bls.n	8002bf8 <menu+0x20b0>
 8002b90:	4b18      	ldr	r3, [pc, #96]	@ (8002bf4 <menu+0x20ac>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b63      	cmp	r3, #99	@ 0x63
 8002b96:	d82f      	bhi.n	8002bf8 <menu+0x20b0>
			lcd_print(2, 1, kacSaniyeText);
 8002b98:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc4 <menu+0x207c>)
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	2002      	movs	r0, #2
 8002b9e:	f005 fe56 	bl	800884e <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8002ba2:	4b14      	ldr	r3, [pc, #80]	@ (8002bf4 <menu+0x20ac>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	220a      	movs	r2, #10
 8002ba8:	4908      	ldr	r1, [pc, #32]	@ (8002bcc <menu+0x2084>)
 8002baa:	4618      	mov	r0, r3
 8002bac:	f009 fb4c 	bl	800c248 <itoa>
			lcd_print(2, 15, snum);
 8002bb0:	4a06      	ldr	r2, [pc, #24]	@ (8002bcc <menu+0x2084>)
 8002bb2:	210f      	movs	r1, #15
 8002bb4:	2002      	movs	r0, #2
 8002bb6:	f005 fe4a 	bl	800884e <lcd_print>
 8002bba:	e032      	b.n	8002c22 <menu+0x20da>
 8002bbc:	20000daf 	.word	0x20000daf
 8002bc0:	200012a4 	.word	0x200012a4
 8002bc4:	200010b0 	.word	0x200010b0
 8002bc8:	20000db6 	.word	0x20000db6
 8002bcc:	20000d70 	.word	0x20000d70
 8002bd0:	40010800 	.word	0x40010800
 8002bd4:	20000dcf 	.word	0x20000dcf
 8002bd8:	20000d00 	.word	0x20000d00
 8002bdc:	20000dcc 	.word	0x20000dcc
 8002be0:	20000da0 	.word	0x20000da0
 8002be4:	200012b8 	.word	0x200012b8
 8002be8:	200012cc 	.word	0x200012cc
 8002bec:	20000db7 	.word	0x20000db7
 8002bf0:	200012e0 	.word	0x200012e0
 8002bf4:	20000db8 	.word	0x20000db8
		} else if(makineCalismaTmr <=  9) {
 8002bf8:	4b72      	ldr	r3, [pc, #456]	@ (8002dc4 <menu+0x227c>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b09      	cmp	r3, #9
 8002bfe:	d810      	bhi.n	8002c22 <menu+0x20da>
			lcd_print(2, 1, kacSaniyeText);
 8002c00:	4a71      	ldr	r2, [pc, #452]	@ (8002dc8 <menu+0x2280>)
 8002c02:	2101      	movs	r1, #1
 8002c04:	2002      	movs	r0, #2
 8002c06:	f005 fe22 	bl	800884e <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8002c0a:	4b6e      	ldr	r3, [pc, #440]	@ (8002dc4 <menu+0x227c>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	220a      	movs	r2, #10
 8002c10:	496e      	ldr	r1, [pc, #440]	@ (8002dcc <menu+0x2284>)
 8002c12:	4618      	mov	r0, r3
 8002c14:	f009 fb18 	bl	800c248 <itoa>
			lcd_print(2, 16, snum);
 8002c18:	4a6c      	ldr	r2, [pc, #432]	@ (8002dcc <menu+0x2284>)
 8002c1a:	2110      	movs	r1, #16
 8002c1c:	2002      	movs	r0, #2
 8002c1e:	f005 fe16 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c22:	2102      	movs	r1, #2
 8002c24:	486a      	ldr	r0, [pc, #424]	@ (8002dd0 <menu+0x2288>)
 8002c26:	f006 ff6d 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d115      	bne.n	8002c5c <menu+0x2114>
 8002c30:	4b68      	ldr	r3, [pc, #416]	@ (8002dd4 <menu+0x228c>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	f083 0301 	eor.w	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00e      	beq.n	8002c5c <menu+0x2114>
			makineCalismaTmr = makineCalismaTmr + 1;
 8002c3e:	4b61      	ldr	r3, [pc, #388]	@ (8002dc4 <menu+0x227c>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	3301      	adds	r3, #1
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4b5f      	ldr	r3, [pc, #380]	@ (8002dc4 <menu+0x227c>)
 8002c48:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8002c4a:	4b5e      	ldr	r3, [pc, #376]	@ (8002dc4 <menu+0x227c>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2bb4      	cmp	r3, #180	@ 0xb4
 8002c50:	d902      	bls.n	8002c58 <menu+0x2110>
				makineCalismaTmr = 0;
 8002c52:	4b5c      	ldr	r3, [pc, #368]	@ (8002dc4 <menu+0x227c>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c58:	f000 fb7a 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c5c:	2104      	movs	r1, #4
 8002c5e:	485c      	ldr	r0, [pc, #368]	@ (8002dd0 <menu+0x2288>)
 8002c60:	f006 ff50 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d115      	bne.n	8002c96 <menu+0x214e>
 8002c6a:	4b5a      	ldr	r3, [pc, #360]	@ (8002dd4 <menu+0x228c>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	f083 0301 	eor.w	r3, r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00e      	beq.n	8002c96 <menu+0x214e>
			makineCalismaTmr = makineCalismaTmr - 1;
 8002c78:	4b52      	ldr	r3, [pc, #328]	@ (8002dc4 <menu+0x227c>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	4b50      	ldr	r3, [pc, #320]	@ (8002dc4 <menu+0x227c>)
 8002c82:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8002c84:	4b4f      	ldr	r3, [pc, #316]	@ (8002dc4 <menu+0x227c>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2bb5      	cmp	r3, #181	@ 0xb5
 8002c8a:	d902      	bls.n	8002c92 <menu+0x214a>
		   		makineCalismaTmr = 180;
 8002c8c:	4b4d      	ldr	r3, [pc, #308]	@ (8002dc4 <menu+0x227c>)
 8002c8e:	22b4      	movs	r2, #180	@ 0xb4
 8002c90:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c92:	f000 fb5d 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c96:	2108      	movs	r1, #8
 8002c98:	484d      	ldr	r0, [pc, #308]	@ (8002dd0 <menu+0x2288>)
 8002c9a:	f006 ff33 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d10d      	bne.n	8002cc0 <menu+0x2178>
 8002ca4:	4b4b      	ldr	r3, [pc, #300]	@ (8002dd4 <menu+0x228c>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	f083 0301 	eor.w	r3, r3, #1
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d006      	beq.n	8002cc0 <menu+0x2178>
			eepromData[24] = makineCalismaTmr;
 8002cb2:	4b44      	ldr	r3, [pc, #272]	@ (8002dc4 <menu+0x227c>)
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	4b48      	ldr	r3, [pc, #288]	@ (8002dd8 <menu+0x2290>)
 8002cb8:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8002cba:	4b48      	ldr	r3, [pc, #288]	@ (8002ddc <menu+0x2294>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8002cc0:	4b47      	ldr	r3, [pc, #284]	@ (8002de0 <menu+0x2298>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b1b      	cmp	r3, #27
 8002cc6:	d166      	bne.n	8002d96 <menu+0x224e>
		lcd_print(1, 1, buzzerTextGN);
 8002cc8:	4a46      	ldr	r2, [pc, #280]	@ (8002de4 <menu+0x229c>)
 8002cca:	2101      	movs	r1, #1
 8002ccc:	2001      	movs	r0, #1
 8002cce:	f005 fdbe 	bl	800884e <lcd_print>

		if(buzzer == 0) {
 8002cd2:	4b45      	ldr	r3, [pc, #276]	@ (8002de8 <menu+0x22a0>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d105      	bne.n	8002ce6 <menu+0x219e>
			lcd_print(2, 1, pasifText);
 8002cda:	4a44      	ldr	r2, [pc, #272]	@ (8002dec <menu+0x22a4>)
 8002cdc:	2101      	movs	r1, #1
 8002cde:	2002      	movs	r0, #2
 8002ce0:	f005 fdb5 	bl	800884e <lcd_print>
 8002ce4:	e008      	b.n	8002cf8 <menu+0x21b0>
		} else if(buzzer == 1) {
 8002ce6:	4b40      	ldr	r3, [pc, #256]	@ (8002de8 <menu+0x22a0>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d104      	bne.n	8002cf8 <menu+0x21b0>
			lcd_print(2, 1, aktifText);
 8002cee:	4a40      	ldr	r2, [pc, #256]	@ (8002df0 <menu+0x22a8>)
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	2002      	movs	r0, #2
 8002cf4:	f005 fdab 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	4835      	ldr	r0, [pc, #212]	@ (8002dd0 <menu+0x2288>)
 8002cfc:	f006 ff02 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d115      	bne.n	8002d32 <menu+0x21ea>
 8002d06:	4b33      	ldr	r3, [pc, #204]	@ (8002dd4 <menu+0x228c>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	f083 0301 	eor.w	r3, r3, #1
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00e      	beq.n	8002d32 <menu+0x21ea>
			buzzer = buzzer + 1;
 8002d14:	4b34      	ldr	r3, [pc, #208]	@ (8002de8 <menu+0x22a0>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	4b32      	ldr	r3, [pc, #200]	@ (8002de8 <menu+0x22a0>)
 8002d1e:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8002d20:	4b31      	ldr	r3, [pc, #196]	@ (8002de8 <menu+0x22a0>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d902      	bls.n	8002d2e <menu+0x21e6>
				buzzer = 0;
 8002d28:	4b2f      	ldr	r3, [pc, #188]	@ (8002de8 <menu+0x22a0>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d2e:	f000 fb0f 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d32:	2104      	movs	r1, #4
 8002d34:	4826      	ldr	r0, [pc, #152]	@ (8002dd0 <menu+0x2288>)
 8002d36:	f006 fee5 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d115      	bne.n	8002d6c <menu+0x2224>
 8002d40:	4b24      	ldr	r3, [pc, #144]	@ (8002dd4 <menu+0x228c>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	f083 0301 	eor.w	r3, r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00e      	beq.n	8002d6c <menu+0x2224>
			buzzer = buzzer - 1;
 8002d4e:	4b26      	ldr	r3, [pc, #152]	@ (8002de8 <menu+0x22a0>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	4b24      	ldr	r3, [pc, #144]	@ (8002de8 <menu+0x22a0>)
 8002d58:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8002d5a:	4b23      	ldr	r3, [pc, #140]	@ (8002de8 <menu+0x22a0>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <menu+0x2220>
		   		buzzer = 1;
 8002d62:	4b21      	ldr	r3, [pc, #132]	@ (8002de8 <menu+0x22a0>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d68:	f000 faf2 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d6c:	2108      	movs	r1, #8
 8002d6e:	4818      	ldr	r0, [pc, #96]	@ (8002dd0 <menu+0x2288>)
 8002d70:	f006 fec8 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d10d      	bne.n	8002d96 <menu+0x224e>
 8002d7a:	4b16      	ldr	r3, [pc, #88]	@ (8002dd4 <menu+0x228c>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	f083 0301 	eor.w	r3, r3, #1
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d006      	beq.n	8002d96 <menu+0x224e>
			eepromData[25] = buzzer;
 8002d88:	4b17      	ldr	r3, [pc, #92]	@ (8002de8 <menu+0x22a0>)
 8002d8a:	781a      	ldrb	r2, [r3, #0]
 8002d8c:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <menu+0x2290>)
 8002d8e:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8002d90:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <menu+0x2294>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8002d96:	4b12      	ldr	r3, [pc, #72]	@ (8002de0 <menu+0x2298>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b1c      	cmp	r3, #28
 8002d9c:	f040 8088 	bne.w	8002eb0 <menu+0x2368>
		calismaSayModu = 0;
 8002da0:	4b14      	ldr	r3, [pc, #80]	@ (8002df4 <menu+0x22ac>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 8002da6:	4a14      	ldr	r2, [pc, #80]	@ (8002df8 <menu+0x22b0>)
 8002da8:	2101      	movs	r1, #1
 8002daa:	2001      	movs	r0, #1
 8002dac:	f005 fd4f 	bl	800884e <lcd_print>

		if(demoMode == 0) {
 8002db0:	4b12      	ldr	r3, [pc, #72]	@ (8002dfc <menu+0x22b4>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d123      	bne.n	8002e00 <menu+0x22b8>
			lcd_print(2, 1, pasifText);
 8002db8:	4a0c      	ldr	r2, [pc, #48]	@ (8002dec <menu+0x22a4>)
 8002dba:	2101      	movs	r1, #1
 8002dbc:	2002      	movs	r0, #2
 8002dbe:	f005 fd46 	bl	800884e <lcd_print>
 8002dc2:	e026      	b.n	8002e12 <menu+0x22ca>
 8002dc4:	20000db8 	.word	0x20000db8
 8002dc8:	200010b0 	.word	0x200010b0
 8002dcc:	20000d70 	.word	0x20000d70
 8002dd0:	40010800 	.word	0x40010800
 8002dd4:	20000dcf 	.word	0x20000dcf
 8002dd8:	20000d00 	.word	0x20000d00
 8002ddc:	20000dcc 	.word	0x20000dcc
 8002de0:	20000da0 	.word	0x20000da0
 8002de4:	200000bc 	.word	0x200000bc
 8002de8:	20000dbc 	.word	0x20000dbc
 8002dec:	20000f84 	.word	0x20000f84
 8002df0:	20000f98 	.word	0x20000f98
 8002df4:	20000dc0 	.word	0x20000dc0
 8002df8:	200000d0 	.word	0x200000d0
 8002dfc:	20000dbe 	.word	0x20000dbe
		} else if(demoMode == 1) {
 8002e00:	4b7d      	ldr	r3, [pc, #500]	@ (8002ff8 <menu+0x24b0>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d104      	bne.n	8002e12 <menu+0x22ca>
			lcd_print(2, 1, aktifText);
 8002e08:	4a7c      	ldr	r2, [pc, #496]	@ (8002ffc <menu+0x24b4>)
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	2002      	movs	r0, #2
 8002e0e:	f005 fd1e 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e12:	2102      	movs	r1, #2
 8002e14:	487a      	ldr	r0, [pc, #488]	@ (8003000 <menu+0x24b8>)
 8002e16:	f006 fe75 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d115      	bne.n	8002e4c <menu+0x2304>
 8002e20:	4b78      	ldr	r3, [pc, #480]	@ (8003004 <menu+0x24bc>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	f083 0301 	eor.w	r3, r3, #1
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00e      	beq.n	8002e4c <menu+0x2304>
			demoMode = demoMode + 1;
 8002e2e:	4b72      	ldr	r3, [pc, #456]	@ (8002ff8 <menu+0x24b0>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	3301      	adds	r3, #1
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4b70      	ldr	r3, [pc, #448]	@ (8002ff8 <menu+0x24b0>)
 8002e38:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8002e3a:	4b6f      	ldr	r3, [pc, #444]	@ (8002ff8 <menu+0x24b0>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d902      	bls.n	8002e48 <menu+0x2300>
				demoMode = 0;
 8002e42:	4b6d      	ldr	r3, [pc, #436]	@ (8002ff8 <menu+0x24b0>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e48:	f000 fa82 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e4c:	2104      	movs	r1, #4
 8002e4e:	486c      	ldr	r0, [pc, #432]	@ (8003000 <menu+0x24b8>)
 8002e50:	f006 fe58 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d115      	bne.n	8002e86 <menu+0x233e>
 8002e5a:	4b6a      	ldr	r3, [pc, #424]	@ (8003004 <menu+0x24bc>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	f083 0301 	eor.w	r3, r3, #1
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00e      	beq.n	8002e86 <menu+0x233e>
			demoMode = demoMode - 1;
 8002e68:	4b63      	ldr	r3, [pc, #396]	@ (8002ff8 <menu+0x24b0>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	4b61      	ldr	r3, [pc, #388]	@ (8002ff8 <menu+0x24b0>)
 8002e72:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8002e74:	4b60      	ldr	r3, [pc, #384]	@ (8002ff8 <menu+0x24b0>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <menu+0x233a>
		   		demoMode = 1;
 8002e7c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ff8 <menu+0x24b0>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e82:	f000 fa65 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e86:	2108      	movs	r1, #8
 8002e88:	485d      	ldr	r0, [pc, #372]	@ (8003000 <menu+0x24b8>)
 8002e8a:	f006 fe3b 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d10d      	bne.n	8002eb0 <menu+0x2368>
 8002e94:	4b5b      	ldr	r3, [pc, #364]	@ (8003004 <menu+0x24bc>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	f083 0301 	eor.w	r3, r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d006      	beq.n	8002eb0 <menu+0x2368>
			eepromData[26] = demoMode;
 8002ea2:	4b55      	ldr	r3, [pc, #340]	@ (8002ff8 <menu+0x24b0>)
 8002ea4:	781a      	ldrb	r2, [r3, #0]
 8002ea6:	4b58      	ldr	r3, [pc, #352]	@ (8003008 <menu+0x24c0>)
 8002ea8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8002eaa:	4b58      	ldr	r3, [pc, #352]	@ (800300c <menu+0x24c4>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8002eb0:	4b57      	ldr	r3, [pc, #348]	@ (8003010 <menu+0x24c8>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b1d      	cmp	r3, #29
 8002eb6:	f040 80c9 	bne.w	800304c <menu+0x2504>
		finalCount=0;
 8002eba:	4b56      	ldr	r3, [pc, #344]	@ (8003014 <menu+0x24cc>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 8002ec0:	4b55      	ldr	r3, [pc, #340]	@ (8003018 <menu+0x24d0>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d135      	bne.n	8002f34 <menu+0x23ec>
			lcd_print(1, 1, calismaSayisiText);
 8002ec8:	4a54      	ldr	r2, [pc, #336]	@ (800301c <menu+0x24d4>)
 8002eca:	2101      	movs	r1, #1
 8002ecc:	2001      	movs	r0, #1
 8002ece:	f005 fcbe 	bl	800884e <lcd_print>

			if(demoMode == 1) {
 8002ed2:	4b49      	ldr	r3, [pc, #292]	@ (8002ff8 <menu+0x24b0>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d113      	bne.n	8002f02 <menu+0x23ba>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 8002eda:	4b51      	ldr	r3, [pc, #324]	@ (8003020 <menu+0x24d8>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	1a9a      	subs	r2, r3, r2
 8002ee6:	4b4b      	ldr	r3, [pc, #300]	@ (8003014 <menu+0x24cc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4413      	add	r3, r2
 8002eec:	4a49      	ldr	r2, [pc, #292]	@ (8003014 <menu+0x24cc>)
 8002eee:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8002ef0:	4b4c      	ldr	r3, [pc, #304]	@ (8003024 <menu+0x24dc>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b47      	ldr	r3, [pc, #284]	@ (8003014 <menu+0x24cc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	4a45      	ldr	r2, [pc, #276]	@ (8003014 <menu+0x24cc>)
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	e012      	b.n	8002f28 <menu+0x23e0>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 8002f02:	4b49      	ldr	r3, [pc, #292]	@ (8003028 <menu+0x24e0>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	4613      	mov	r3, r2
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	1a9a      	subs	r2, r3, r2
 8002f0e:	4b41      	ldr	r3, [pc, #260]	@ (8003014 <menu+0x24cc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	4a3f      	ldr	r2, [pc, #252]	@ (8003014 <menu+0x24cc>)
 8002f16:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 8002f18:	4b44      	ldr	r3, [pc, #272]	@ (800302c <menu+0x24e4>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003014 <menu+0x24cc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	4a3b      	ldr	r2, [pc, #236]	@ (8003014 <menu+0x24cc>)
 8002f26:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 8002f28:	4b3a      	ldr	r3, [pc, #232]	@ (8003014 <menu+0x24cc>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 f965 	bl	80031fc <displayCycleOnLCD>
 8002f32:	e00d      	b.n	8002f50 <menu+0x2408>
		} else if(calismaSayModu == 1) {
 8002f34:	4b38      	ldr	r3, [pc, #224]	@ (8003018 <menu+0x24d0>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d109      	bne.n	8002f50 <menu+0x2408>
			lcd_print(1, 1, calismaSayisiText);
 8002f3c:	4a37      	ldr	r2, [pc, #220]	@ (800301c <menu+0x24d4>)
 8002f3e:	2101      	movs	r1, #1
 8002f40:	2001      	movs	r0, #1
 8002f42:	f005 fc84 	bl	800884e <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8002f46:	4a3a      	ldr	r2, [pc, #232]	@ (8003030 <menu+0x24e8>)
 8002f48:	2101      	movs	r1, #1
 8002f4a:	2002      	movs	r0, #2
 8002f4c:	f005 fc7f 	bl	800884e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f50:	2102      	movs	r1, #2
 8002f52:	482b      	ldr	r0, [pc, #172]	@ (8003000 <menu+0x24b8>)
 8002f54:	f006 fdd6 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d115      	bne.n	8002f8a <menu+0x2442>
 8002f5e:	4b29      	ldr	r3, [pc, #164]	@ (8003004 <menu+0x24bc>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	f083 0301 	eor.w	r3, r3, #1
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00e      	beq.n	8002f8a <menu+0x2442>
			calismaSayModu = calismaSayModu + 1;
 8002f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8003018 <menu+0x24d0>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	3301      	adds	r3, #1
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	4b28      	ldr	r3, [pc, #160]	@ (8003018 <menu+0x24d0>)
 8002f76:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8002f78:	4b27      	ldr	r3, [pc, #156]	@ (8003018 <menu+0x24d0>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d902      	bls.n	8002f86 <menu+0x243e>
				calismaSayModu = 0;
 8002f80:	4b25      	ldr	r3, [pc, #148]	@ (8003018 <menu+0x24d0>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f86:	f000 f9e3 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f8a:	2104      	movs	r1, #4
 8002f8c:	481c      	ldr	r0, [pc, #112]	@ (8003000 <menu+0x24b8>)
 8002f8e:	f006 fdb9 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d115      	bne.n	8002fc4 <menu+0x247c>
 8002f98:	4b1a      	ldr	r3, [pc, #104]	@ (8003004 <menu+0x24bc>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	f083 0301 	eor.w	r3, r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00e      	beq.n	8002fc4 <menu+0x247c>
			calismaSayModu = calismaSayModu - 1;
 8002fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8003018 <menu+0x24d0>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4b1a      	ldr	r3, [pc, #104]	@ (8003018 <menu+0x24d0>)
 8002fb0:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8002fb2:	4b19      	ldr	r3, [pc, #100]	@ (8003018 <menu+0x24d0>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <menu+0x2478>
		   		calismaSayModu = 1;
 8002fba:	4b17      	ldr	r3, [pc, #92]	@ (8003018 <menu+0x24d0>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fc0:	f000 f9c6 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fc4:	2108      	movs	r1, #8
 8002fc6:	480e      	ldr	r0, [pc, #56]	@ (8003000 <menu+0x24b8>)
 8002fc8:	f006 fd9c 	bl	8009b04 <HAL_GPIO_ReadPin>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d13c      	bne.n	800304c <menu+0x2504>
 8002fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003004 <menu+0x24bc>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	f083 0301 	eor.w	r3, r3, #1
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d035      	beq.n	800304c <menu+0x2504>
			if(demoMode == 1) {
 8002fe0:	4b05      	ldr	r3, [pc, #20]	@ (8002ff8 <menu+0x24b0>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d125      	bne.n	8003034 <menu+0x24ec>
				eepromData[28] = 0;
 8002fe8:	4b07      	ldr	r3, [pc, #28]	@ (8003008 <menu+0x24c0>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 8002fee:	4b06      	ldr	r3, [pc, #24]	@ (8003008 <menu+0x24c0>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	779a      	strb	r2, [r3, #30]
 8002ff4:	e024      	b.n	8003040 <menu+0x24f8>
 8002ff6:	bf00      	nop
 8002ff8:	20000dbe 	.word	0x20000dbe
 8002ffc:	20000f98 	.word	0x20000f98
 8003000:	40010800 	.word	0x40010800
 8003004:	20000dcf 	.word	0x20000dcf
 8003008:	20000d00 	.word	0x20000d00
 800300c:	20000dcc 	.word	0x20000dcc
 8003010:	20000da0 	.word	0x20000da0
 8003014:	20000d9c 	.word	0x20000d9c
 8003018:	20000dc0 	.word	0x20000dc0
 800301c:	200012f4 	.word	0x200012f4
 8003020:	20000d9b 	.word	0x20000d9b
 8003024:	20000d99 	.word	0x20000d99
 8003028:	20000d9a 	.word	0x20000d9a
 800302c:	20000d98 	.word	0x20000d98
 8003030:	20001308 	.word	0x20001308
			} else {
				eepromData[27] = 0;
 8003034:	4b64      	ldr	r3, [pc, #400]	@ (80031c8 <menu+0x2680>)
 8003036:	2200      	movs	r2, #0
 8003038:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 800303a:	4b63      	ldr	r3, [pc, #396]	@ (80031c8 <menu+0x2680>)
 800303c:	2200      	movs	r2, #0
 800303e:	775a      	strb	r2, [r3, #29]
			}
			calismaSayModu = 0;
 8003040:	4b62      	ldr	r3, [pc, #392]	@ (80031cc <menu+0x2684>)
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003046:	4b62      	ldr	r3, [pc, #392]	@ (80031d0 <menu+0x2688>)
 8003048:	2201      	movs	r2, #1
 800304a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800304c:	4b61      	ldr	r3, [pc, #388]	@ (80031d4 <menu+0x268c>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b1e      	cmp	r3, #30
 8003052:	d16a      	bne.n	800312a <menu+0x25e2>
		calismaSayModu = 0;
 8003054:	4b5d      	ldr	r3, [pc, #372]	@ (80031cc <menu+0x2684>)
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 800305a:	4a5f      	ldr	r2, [pc, #380]	@ (80031d8 <menu+0x2690>)
 800305c:	2101      	movs	r1, #1
 800305e:	2001      	movs	r0, #1
 8003060:	f005 fbf5 	bl	800884e <lcd_print>
		lcd_print(2, 1, secilenDilText);
 8003064:	4a5d      	ldr	r2, [pc, #372]	@ (80031dc <menu+0x2694>)
 8003066:	2101      	movs	r1, #1
 8003068:	2002      	movs	r0, #2
 800306a:	f005 fbf0 	bl	800884e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800306e:	2102      	movs	r1, #2
 8003070:	485b      	ldr	r0, [pc, #364]	@ (80031e0 <menu+0x2698>)
 8003072:	f006 fd47 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003076:	4603      	mov	r3, r0
 8003078:	2b01      	cmp	r3, #1
 800307a:	d11c      	bne.n	80030b6 <menu+0x256e>
 800307c:	4b59      	ldr	r3, [pc, #356]	@ (80031e4 <menu+0x269c>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	f083 0301 	eor.w	r3, r3, #1
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d015      	beq.n	80030b6 <menu+0x256e>
			dilSecim = dilSecim + 1;
 800308a:	4b57      	ldr	r3, [pc, #348]	@ (80031e8 <menu+0x26a0>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	3301      	adds	r3, #1
 8003090:	b2da      	uxtb	r2, r3
 8003092:	4b55      	ldr	r3, [pc, #340]	@ (80031e8 <menu+0x26a0>)
 8003094:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003096:	4b54      	ldr	r3, [pc, #336]	@ (80031e8 <menu+0x26a0>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d902      	bls.n	80030a4 <menu+0x255c>
				dilSecim = 0;
 800309e:	4b52      	ldr	r3, [pc, #328]	@ (80031e8 <menu+0x26a0>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
			}
			resetMenuTexts();
 80030a4:	f005 f89a 	bl	80081dc <resetMenuTexts>
			loadMenuTexts(dilSecim);
 80030a8:	4b4f      	ldr	r3, [pc, #316]	@ (80031e8 <menu+0x26a0>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f003 fdf9 	bl	8006ca4 <loadMenuTexts>

			bekle();
 80030b2:	f000 f94d 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030b6:	2104      	movs	r1, #4
 80030b8:	4849      	ldr	r0, [pc, #292]	@ (80031e0 <menu+0x2698>)
 80030ba:	f006 fd23 	bl	8009b04 <HAL_GPIO_ReadPin>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d11c      	bne.n	80030fe <menu+0x25b6>
 80030c4:	4b47      	ldr	r3, [pc, #284]	@ (80031e4 <menu+0x269c>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	f083 0301 	eor.w	r3, r3, #1
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d015      	beq.n	80030fe <menu+0x25b6>
			dilSecim = dilSecim - 1;
 80030d2:	4b45      	ldr	r3, [pc, #276]	@ (80031e8 <menu+0x26a0>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	4b43      	ldr	r3, [pc, #268]	@ (80031e8 <menu+0x26a0>)
 80030dc:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80030de:	4b42      	ldr	r3, [pc, #264]	@ (80031e8 <menu+0x26a0>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <menu+0x25a4>
		   		dilSecim = 1;
 80030e6:	4b40      	ldr	r3, [pc, #256]	@ (80031e8 <menu+0x26a0>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	701a      	strb	r2, [r3, #0]
		   	}
		   	resetMenuTexts();
 80030ec:	f005 f876 	bl	80081dc <resetMenuTexts>
		   	loadMenuTexts(dilSecim);
 80030f0:	4b3d      	ldr	r3, [pc, #244]	@ (80031e8 <menu+0x26a0>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 fdd5 	bl	8006ca4 <loadMenuTexts>

			bekle();
 80030fa:	f000 f929 	bl	8003350 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030fe:	2108      	movs	r1, #8
 8003100:	4837      	ldr	r0, [pc, #220]	@ (80031e0 <menu+0x2698>)
 8003102:	f006 fcff 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003106:	4603      	mov	r3, r0
 8003108:	2b01      	cmp	r3, #1
 800310a:	d10e      	bne.n	800312a <menu+0x25e2>
 800310c:	4b35      	ldr	r3, [pc, #212]	@ (80031e4 <menu+0x269c>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	f083 0301 	eor.w	r3, r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <menu+0x25e2>
			eepromData[33] = dilSecim;
 800311a:	4b33      	ldr	r3, [pc, #204]	@ (80031e8 <menu+0x26a0>)
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	4b2a      	ldr	r3, [pc, #168]	@ (80031c8 <menu+0x2680>)
 8003120:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 8003124:	4b2a      	ldr	r3, [pc, #168]	@ (80031d0 <menu+0x2688>)
 8003126:	2201      	movs	r2, #1
 8003128:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800312a:	4b2a      	ldr	r3, [pc, #168]	@ (80031d4 <menu+0x268c>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b1f      	cmp	r3, #31
 8003130:	d146      	bne.n	80031c0 <menu+0x2678>
		lcd_print(1, 1, menudenCikisText);
 8003132:	4a2e      	ldr	r2, [pc, #184]	@ (80031ec <menu+0x26a4>)
 8003134:	2101      	movs	r1, #1
 8003136:	2001      	movs	r0, #1
 8003138:	f005 fb89 	bl	800884e <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 800313c:	4a2c      	ldr	r2, [pc, #176]	@ (80031f0 <menu+0x26a8>)
 800313e:	2101      	movs	r1, #1
 8003140:	2002      	movs	r0, #2
 8003142:	f005 fb84 	bl	800884e <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003146:	2108      	movs	r1, #8
 8003148:	4825      	ldr	r0, [pc, #148]	@ (80031e0 <menu+0x2698>)
 800314a:	f006 fcdb 	bl	8009b04 <HAL_GPIO_ReadPin>
 800314e:	4603      	mov	r3, r0
 8003150:	2b01      	cmp	r3, #1
 8003152:	d135      	bne.n	80031c0 <menu+0x2678>
			menuGiris = 0;
 8003154:	4b27      	ldr	r3, [pc, #156]	@ (80031f4 <menu+0x26ac>)
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 800315a:	f006 f83b 	bl	80091d4 <HAL_GetTick>
 800315e:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003160:	e007      	b.n	8003172 <menu+0x262a>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003162:	f006 f837 	bl	80091d4 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003170:	d806      	bhi.n	8003180 <menu+0x2638>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003172:	4821      	ldr	r0, [pc, #132]	@ (80031f8 <menu+0x26b0>)
 8003174:	f007 faef 	bl	800a756 <HAL_I2C_GetError>
 8003178:	4603      	mov	r3, r0
 800317a:	2b04      	cmp	r3, #4
 800317c:	d0f1      	beq.n	8003162 <menu+0x261a>
 800317e:	e000      	b.n	8003182 <menu+0x263a>
			        break;
 8003180:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 8003182:	f006 f827 	bl	80091d4 <HAL_GetTick>
 8003186:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003188:	e007      	b.n	800319a <menu+0x2652>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 800318a:	f006 f823 	bl	80091d4 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003198:	d806      	bhi.n	80031a8 <menu+0x2660>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800319a:	4817      	ldr	r0, [pc, #92]	@ (80031f8 <menu+0x26b0>)
 800319c:	f007 face 	bl	800a73c <HAL_I2C_GetState>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d1f1      	bne.n	800318a <menu+0x2642>
 80031a6:	e000      	b.n	80031aa <menu+0x2662>
			        break;
 80031a8:	bf00      	nop
			    }
			}

			saveEEPROM(0);
 80031aa:	2000      	movs	r0, #0
 80031ac:	f7fd fa72 	bl	8000694 <saveEEPROM>

			lcd_clear();
 80031b0:	f005 fb62 	bl	8008878 <lcd_clear>
			HAL_Delay(500);
 80031b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80031b8:	f006 f816 	bl	80091e8 <HAL_Delay>
			NVIC_SystemReset();
 80031bc:	f7fd fcae 	bl	8000b1c <__NVIC_SystemReset>
		}
	}
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20000d00 	.word	0x20000d00
 80031cc:	20000dc0 	.word	0x20000dc0
 80031d0:	20000dcc 	.word	0x20000dcc
 80031d4:	20000da0 	.word	0x20000da0
 80031d8:	2000131c 	.word	0x2000131c
 80031dc:	20001330 	.word	0x20001330
 80031e0:	40010800 	.word	0x40010800
 80031e4:	20000dcf 	.word	0x20000dcf
 80031e8:	20000dc1 	.word	0x20000dc1
 80031ec:	20001344 	.word	0x20001344
 80031f0:	20001358 	.word	0x20001358
 80031f4:	20000dbd 	.word	0x20000dbd
 80031f8:	2000140c 	.word	0x2000140c

080031fc <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	@ 0x28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 8003204:	220a      	movs	r2, #10
 8003206:	491c      	ldr	r1, [pc, #112]	@ (8003278 <displayCycleOnLCD+0x7c>)
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f009 f81d 	bl	800c248 <itoa>

    int length = strlen(snum);
 800320e:	481a      	ldr	r0, [pc, #104]	@ (8003278 <displayCycleOnLCD+0x7c>)
 8003210:	f7fd f808 	bl	8000224 <strlen>
 8003214:	4603      	mov	r3, r0
 8003216:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	f1c3 0310 	rsb	r3, r3, #16
 800321e:	0fda      	lsrs	r2, r3, #31
 8003220:	4413      	add	r3, r2
 8003222:	105b      	asrs	r3, r3, #1
 8003224:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 8003226:	f107 0308 	add.w	r3, r7, #8
 800322a:	2210      	movs	r2, #16
 800322c:	2120      	movs	r1, #32
 800322e:	4618      	mov	r0, r3
 8003230:	f009 f84e 	bl	800c2d0 <memset>
    displayLine[16] = '\0'; // Null terminator
 8003234:	2300      	movs	r3, #0
 8003236:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 8003238:	2300      	movs	r3, #0
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
 800323c:	e00d      	b.n	800325a <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003242:	4413      	add	r3, r2
 8003244:	490c      	ldr	r1, [pc, #48]	@ (8003278 <displayCycleOnLCD+0x7c>)
 8003246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003248:	440a      	add	r2, r1
 800324a:	7812      	ldrb	r2, [r2, #0]
 800324c:	3328      	adds	r3, #40	@ 0x28
 800324e:	443b      	add	r3, r7
 8003250:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 8003254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003256:	3301      	adds	r3, #1
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24
 800325a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	429a      	cmp	r2, r3
 8003260:	dbed      	blt.n	800323e <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 8003262:	f107 0308 	add.w	r3, r7, #8
 8003266:	461a      	mov	r2, r3
 8003268:	2101      	movs	r1, #1
 800326a:	2002      	movs	r0, #2
 800326c:	f005 faef 	bl	800884e <lcd_print>
}
 8003270:	bf00      	nop
 8003272:	3728      	adds	r7, #40	@ 0x28
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20000d70 	.word	0x20000d70

0800327c <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d105      	bne.n	8003298 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 800328c:	4a22      	ldr	r2, [pc, #136]	@ (8003318 <lcdUpdate+0x9c>)
 800328e:	2101      	movs	r1, #1
 8003290:	2002      	movs	r0, #2
 8003292:	f005 fadc 	bl	800884e <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
	}
}
 8003296:	e03b      	b.n	8003310 <lcdUpdate+0x94>
	} else if(y==2) {
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d105      	bne.n	80032aa <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 800329e:	4a1e      	ldr	r2, [pc, #120]	@ (8003318 <lcdUpdate+0x9c>)
 80032a0:	2102      	movs	r1, #2
 80032a2:	2002      	movs	r0, #2
 80032a4:	f005 fad3 	bl	800884e <lcd_print>
}
 80032a8:	e032      	b.n	8003310 <lcdUpdate+0x94>
	} else if(y==3) {
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d105      	bne.n	80032bc <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80032b0:	4a19      	ldr	r2, [pc, #100]	@ (8003318 <lcdUpdate+0x9c>)
 80032b2:	2103      	movs	r1, #3
 80032b4:	2002      	movs	r0, #2
 80032b6:	f005 faca 	bl	800884e <lcd_print>
}
 80032ba:	e029      	b.n	8003310 <lcdUpdate+0x94>
	} else if(y==4) {
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d105      	bne.n	80032ce <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80032c2:	4a15      	ldr	r2, [pc, #84]	@ (8003318 <lcdUpdate+0x9c>)
 80032c4:	2104      	movs	r1, #4
 80032c6:	2002      	movs	r0, #2
 80032c8:	f005 fac1 	bl	800884e <lcd_print>
}
 80032cc:	e020      	b.n	8003310 <lcdUpdate+0x94>
	} else if(y==5) {
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	2b05      	cmp	r3, #5
 80032d2:	d105      	bne.n	80032e0 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80032d4:	4a10      	ldr	r2, [pc, #64]	@ (8003318 <lcdUpdate+0x9c>)
 80032d6:	2105      	movs	r1, #5
 80032d8:	2002      	movs	r0, #2
 80032da:	f005 fab8 	bl	800884e <lcd_print>
}
 80032de:	e017      	b.n	8003310 <lcdUpdate+0x94>
	} else if(y==6) {
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d105      	bne.n	80032f2 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80032e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003318 <lcdUpdate+0x9c>)
 80032e8:	2106      	movs	r1, #6
 80032ea:	2002      	movs	r0, #2
 80032ec:	f005 faaf 	bl	800884e <lcd_print>
}
 80032f0:	e00e      	b.n	8003310 <lcdUpdate+0x94>
	} else if (y==7) {
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	2b07      	cmp	r3, #7
 80032f6:	d10b      	bne.n	8003310 <lcdUpdate+0x94>
		lcd_clear();
 80032f8:	f005 fabe 	bl	8008878 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 80032fc:	4a07      	ldr	r2, [pc, #28]	@ (800331c <lcdUpdate+0xa0>)
 80032fe:	2101      	movs	r1, #1
 8003300:	2001      	movs	r0, #1
 8003302:	f005 faa4 	bl	800884e <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003306:	4a06      	ldr	r2, [pc, #24]	@ (8003320 <lcdUpdate+0xa4>)
 8003308:	2101      	movs	r1, #1
 800330a:	2002      	movs	r0, #2
 800330c:	f005 fa9f 	bl	800884e <lcd_print>
}
 8003310:	bf00      	nop
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	0800c398 	.word	0x0800c398
 800331c:	20000058 	.word	0x20000058
 8003320:	2000006c 	.word	0x2000006c

08003324 <checkLCDBacklight>:

void checkLCDBacklight() {
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8003328:	4b07      	ldr	r3, [pc, #28]	@ (8003348 <checkLCDBacklight+0x24>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4b07      	ldr	r3, [pc, #28]	@ (800334c <checkLCDBacklight+0x28>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b3b      	cmp	r3, #59	@ 0x3b
 8003334:	d903      	bls.n	800333e <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003336:	2000      	movs	r0, #0
 8003338:	f005 faa8 	bl	800888c <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 800333c:	e002      	b.n	8003344 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 800333e:	2001      	movs	r0, #1
 8003340:	f005 faa4 	bl	800888c <lcd_backlight>
}
 8003344:	bf00      	nop
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000d78 	.word	0x20000d78
 800334c:	20000d94 	.word	0x20000d94

08003350 <bekle>:

void bekle() {
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
	timer1=millis;
 8003354:	4b47      	ldr	r3, [pc, #284]	@ (8003474 <bekle+0x124>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a47      	ldr	r2, [pc, #284]	@ (8003478 <bekle+0x128>)
 800335a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800335c:	e002      	b.n	8003364 <bekle+0x14>
    	butonKontrol = 1;
 800335e:	4b47      	ldr	r3, [pc, #284]	@ (800347c <bekle+0x12c>)
 8003360:	2201      	movs	r2, #1
 8003362:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003364:	2101      	movs	r1, #1
 8003366:	4846      	ldr	r0, [pc, #280]	@ (8003480 <bekle+0x130>)
 8003368:	f006 fbcc 	bl	8009b04 <HAL_GPIO_ReadPin>
 800336c:	4603      	mov	r3, r0
 800336e:	2b01      	cmp	r3, #1
 8003370:	d109      	bne.n	8003386 <bekle+0x36>
 8003372:	4b40      	ldr	r3, [pc, #256]	@ (8003474 <bekle+0x124>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4b40      	ldr	r3, [pc, #256]	@ (8003478 <bekle+0x128>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d0ef      	beq.n	800335e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800337e:	e002      	b.n	8003386 <bekle+0x36>
    	butonKontrol = 1;
 8003380:	4b3e      	ldr	r3, [pc, #248]	@ (800347c <bekle+0x12c>)
 8003382:	2201      	movs	r2, #1
 8003384:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003386:	2108      	movs	r1, #8
 8003388:	483e      	ldr	r0, [pc, #248]	@ (8003484 <bekle+0x134>)
 800338a:	f006 fbbb 	bl	8009b04 <HAL_GPIO_ReadPin>
 800338e:	4603      	mov	r3, r0
 8003390:	2b01      	cmp	r3, #1
 8003392:	d109      	bne.n	80033a8 <bekle+0x58>
 8003394:	4b37      	ldr	r3, [pc, #220]	@ (8003474 <bekle+0x124>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b37      	ldr	r3, [pc, #220]	@ (8003478 <bekle+0x128>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d0ef      	beq.n	8003380 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80033a0:	e002      	b.n	80033a8 <bekle+0x58>
    	butonKontrol = 1;
 80033a2:	4b36      	ldr	r3, [pc, #216]	@ (800347c <bekle+0x12c>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80033a8:	2102      	movs	r1, #2
 80033aa:	4835      	ldr	r0, [pc, #212]	@ (8003480 <bekle+0x130>)
 80033ac:	f006 fbaa 	bl	8009b04 <HAL_GPIO_ReadPin>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d109      	bne.n	80033ca <bekle+0x7a>
 80033b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003474 <bekle+0x124>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003478 <bekle+0x128>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d0ef      	beq.n	80033a2 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80033c2:	e002      	b.n	80033ca <bekle+0x7a>
    	butonKontrol = 1;
 80033c4:	4b2d      	ldr	r3, [pc, #180]	@ (800347c <bekle+0x12c>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80033ca:	2104      	movs	r1, #4
 80033cc:	482c      	ldr	r0, [pc, #176]	@ (8003480 <bekle+0x130>)
 80033ce:	f006 fb99 	bl	8009b04 <HAL_GPIO_ReadPin>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d109      	bne.n	80033ec <bekle+0x9c>
 80033d8:	4b26      	ldr	r3, [pc, #152]	@ (8003474 <bekle+0x124>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b26      	ldr	r3, [pc, #152]	@ (8003478 <bekle+0x128>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d0ef      	beq.n	80033c4 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80033e4:	e002      	b.n	80033ec <bekle+0x9c>
    	butonKontrol = 1;
 80033e6:	4b25      	ldr	r3, [pc, #148]	@ (800347c <bekle+0x12c>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80033ec:	2108      	movs	r1, #8
 80033ee:	4824      	ldr	r0, [pc, #144]	@ (8003480 <bekle+0x130>)
 80033f0:	f006 fb88 	bl	8009b04 <HAL_GPIO_ReadPin>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d109      	bne.n	800340e <bekle+0xbe>
 80033fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003474 <bekle+0x124>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003478 <bekle+0x128>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d0ef      	beq.n	80033e6 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003406:	e002      	b.n	800340e <bekle+0xbe>
    	butonKontrol = 1;
 8003408:	4b1c      	ldr	r3, [pc, #112]	@ (800347c <bekle+0x12c>)
 800340a:	2201      	movs	r2, #1
 800340c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800340e:	2180      	movs	r1, #128	@ 0x80
 8003410:	481c      	ldr	r0, [pc, #112]	@ (8003484 <bekle+0x134>)
 8003412:	f006 fb77 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d109      	bne.n	8003430 <bekle+0xe0>
 800341c:	4b15      	ldr	r3, [pc, #84]	@ (8003474 <bekle+0x124>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4b15      	ldr	r3, [pc, #84]	@ (8003478 <bekle+0x128>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d0ef      	beq.n	8003408 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003428:	e002      	b.n	8003430 <bekle+0xe0>
    	butonKontrol = 1;
 800342a:	4b14      	ldr	r3, [pc, #80]	@ (800347c <bekle+0x12c>)
 800342c:	2201      	movs	r2, #1
 800342e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003430:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003434:	4813      	ldr	r0, [pc, #76]	@ (8003484 <bekle+0x134>)
 8003436:	f006 fb65 	bl	8009b04 <HAL_GPIO_ReadPin>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <bekle+0x104>
 8003440:	4b0c      	ldr	r3, [pc, #48]	@ (8003474 <bekle+0x124>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	4b0c      	ldr	r3, [pc, #48]	@ (8003478 <bekle+0x128>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d0ee      	beq.n	800342a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800344c:	e002      	b.n	8003454 <bekle+0x104>
    	butonKontrol = 1;
 800344e:	4b0b      	ldr	r3, [pc, #44]	@ (800347c <bekle+0x12c>)
 8003450:	2201      	movs	r2, #1
 8003452:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003454:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003458:	480a      	ldr	r0, [pc, #40]	@ (8003484 <bekle+0x134>)
 800345a:	f006 fb53 	bl	8009b04 <HAL_GPIO_ReadPin>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d105      	bne.n	8003470 <bekle+0x120>
 8003464:	4b03      	ldr	r3, [pc, #12]	@ (8003474 <bekle+0x124>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4b03      	ldr	r3, [pc, #12]	@ (8003478 <bekle+0x128>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d0ee      	beq.n	800344e <bekle+0xfe>
    }

}
 8003470:	bf00      	nop
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000d78 	.word	0x20000d78
 8003478:	20000d80 	.word	0x20000d80
 800347c:	20000dcf 	.word	0x20000dcf
 8003480:	40010800 	.word	0x40010800
 8003484:	40011000 	.word	0x40011000

08003488 <buttonCheck>:

uint8_t buttonCheck(void) {
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 800348c:	2101      	movs	r1, #1
 800348e:	4815      	ldr	r0, [pc, #84]	@ (80034e4 <buttonCheck+0x5c>)
 8003490:	f006 fb38 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003494:	4603      	mov	r3, r0
 8003496:	2b01      	cmp	r3, #1
 8003498:	d01b      	beq.n	80034d2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 800349a:	2108      	movs	r1, #8
 800349c:	4812      	ldr	r0, [pc, #72]	@ (80034e8 <buttonCheck+0x60>)
 800349e:	f006 fb31 	bl	8009b04 <HAL_GPIO_ReadPin>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d014      	beq.n	80034d2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 80034a8:	2102      	movs	r1, #2
 80034aa:	480e      	ldr	r0, [pc, #56]	@ (80034e4 <buttonCheck+0x5c>)
 80034ac:	f006 fb2a 	bl	8009b04 <HAL_GPIO_ReadPin>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d00d      	beq.n	80034d2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 80034b6:	2104      	movs	r1, #4
 80034b8:	480a      	ldr	r0, [pc, #40]	@ (80034e4 <buttonCheck+0x5c>)
 80034ba:	f006 fb23 	bl	8009b04 <HAL_GPIO_ReadPin>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d006      	beq.n	80034d2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 80034c4:	2108      	movs	r1, #8
 80034c6:	4807      	ldr	r0, [pc, #28]	@ (80034e4 <buttonCheck+0x5c>)
 80034c8:	f006 fb1c 	bl	8009b04 <HAL_GPIO_ReadPin>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d104      	bne.n	80034dc <buttonCheck+0x54>
		backLightTimer = 0;
 80034d2:	4b06      	ldr	r3, [pc, #24]	@ (80034ec <buttonCheck+0x64>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
		return 1;
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <buttonCheck+0x56>
	}
	return 0;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40010800 	.word	0x40010800
 80034e8:	40011000 	.word	0x40011000
 80034ec:	20000d94 	.word	0x20000d94

080034f0 <checkBasincSalteri>:

void checkBasincSalteri() {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80034f4:	4b13      	ldr	r3, [pc, #76]	@ (8003544 <checkBasincSalteri+0x54>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d102      	bne.n	8003502 <checkBasincSalteri+0x12>
		basincVar=1;
 80034fc:	4b12      	ldr	r3, [pc, #72]	@ (8003548 <checkBasincSalteri+0x58>)
 80034fe:	2201      	movs	r2, #1
 8003500:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8003502:	4b10      	ldr	r3, [pc, #64]	@ (8003544 <checkBasincSalteri+0x54>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d119      	bne.n	800353e <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 800350a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800350e:	480f      	ldr	r0, [pc, #60]	@ (800354c <checkBasincSalteri+0x5c>)
 8003510:	f006 faf8 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 800351a:	4b0d      	ldr	r3, [pc, #52]	@ (8003550 <checkBasincSalteri+0x60>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4b0d      	ldr	r3, [pc, #52]	@ (8003554 <checkBasincSalteri+0x64>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d90a      	bls.n	800353e <checkBasincSalteri+0x4e>
				basincVar=1;
 8003528:	4b07      	ldr	r3, [pc, #28]	@ (8003548 <checkBasincSalteri+0x58>)
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 800352e:	e006      	b.n	800353e <checkBasincSalteri+0x4e>
			timer5=millis;
 8003530:	4b07      	ldr	r3, [pc, #28]	@ (8003550 <checkBasincSalteri+0x60>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a07      	ldr	r2, [pc, #28]	@ (8003554 <checkBasincSalteri+0x64>)
 8003536:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8003538:	4b03      	ldr	r3, [pc, #12]	@ (8003548 <checkBasincSalteri+0x58>)
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000da7 	.word	0x20000da7
 8003548:	20000da3 	.word	0x20000da3
 800354c:	40011000 	.word	0x40011000
 8003550:	20000d78 	.word	0x20000d78
 8003554:	20000d90 	.word	0x20000d90

08003558 <checkBasGonder>:

void checkBasGonder() {
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 800355c:	4b1b      	ldr	r3, [pc, #108]	@ (80035cc <checkBasGonder+0x74>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d10b      	bne.n	800357c <checkBasGonder+0x24>
 8003564:	4b1a      	ldr	r3, [pc, #104]	@ (80035d0 <checkBasGonder+0x78>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <checkBasGonder+0x24>
 800356c:	4b19      	ldr	r3, [pc, #100]	@ (80035d4 <checkBasGonder+0x7c>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d103      	bne.n	800357c <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8003574:	4b18      	ldr	r3, [pc, #96]	@ (80035d8 <checkBasGonder+0x80>)
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
 800357a:	e009      	b.n	8003590 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 800357c:	4b14      	ldr	r3, [pc, #80]	@ (80035d0 <checkBasGonder+0x78>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	f083 0301 	eor.w	r3, r3, #1
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800358a:	4b13      	ldr	r3, [pc, #76]	@ (80035d8 <checkBasGonder+0x80>)
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003590:	4b0e      	ldr	r3, [pc, #56]	@ (80035cc <checkBasGonder+0x74>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d10b      	bne.n	80035b0 <checkBasGonder+0x58>
 8003598:	4b10      	ldr	r3, [pc, #64]	@ (80035dc <checkBasGonder+0x84>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <checkBasGonder+0x58>
 80035a0:	4b0c      	ldr	r3, [pc, #48]	@ (80035d4 <checkBasGonder+0x7c>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d103      	bne.n	80035b0 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 80035a8:	4b0d      	ldr	r3, [pc, #52]	@ (80035e0 <checkBasGonder+0x88>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 80035ae:	e009      	b.n	80035c4 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 80035b0:	4b0a      	ldr	r3, [pc, #40]	@ (80035dc <checkBasGonder+0x84>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	f083 0301 	eor.w	r3, r3, #1
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 80035be:	4b08      	ldr	r3, [pc, #32]	@ (80035e0 <checkBasGonder+0x88>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
}
 80035c4:	bf00      	nop
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr
 80035cc:	20000da1 	.word	0x20000da1
 80035d0:	20000dd5 	.word	0x20000dd5
 80035d4:	20000daf 	.word	0x20000daf
 80035d8:	20000ddc 	.word	0x20000ddc
 80035dc:	20000dd8 	.word	0x20000dd8
 80035e0:	20000ddd 	.word	0x20000ddd

080035e4 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80035e8:	4b24      	ldr	r3, [pc, #144]	@ (800367c <checkKapiSecimleri+0x98>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d102      	bne.n	80035f6 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80035f0:	4b23      	ldr	r3, [pc, #140]	@ (8003680 <checkKapiSecimleri+0x9c>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80035f6:	4b21      	ldr	r3, [pc, #132]	@ (800367c <checkKapiSecimleri+0x98>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d10e      	bne.n	800361c <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80035fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003602:	4820      	ldr	r0, [pc, #128]	@ (8003684 <checkKapiSecimleri+0xa0>)
 8003604:	f006 fa7e 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d103      	bne.n	8003616 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 800360e:	4b1c      	ldr	r3, [pc, #112]	@ (8003680 <checkKapiSecimleri+0x9c>)
 8003610:	2201      	movs	r2, #1
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	e002      	b.n	800361c <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8003616:	4b1a      	ldr	r3, [pc, #104]	@ (8003680 <checkKapiSecimleri+0x9c>)
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 800361c:	4b17      	ldr	r3, [pc, #92]	@ (800367c <checkKapiSecimleri+0x98>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d10e      	bne.n	8003642 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8003624:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003628:	4816      	ldr	r0, [pc, #88]	@ (8003684 <checkKapiSecimleri+0xa0>)
 800362a:	f006 fa6b 	bl	8009b04 <HAL_GPIO_ReadPin>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d103      	bne.n	800363c <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8003634:	4b12      	ldr	r3, [pc, #72]	@ (8003680 <checkKapiSecimleri+0x9c>)
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e002      	b.n	8003642 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 800363c:	4b10      	ldr	r3, [pc, #64]	@ (8003680 <checkKapiSecimleri+0x9c>)
 800363e:	2200      	movs	r2, #0
 8003640:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8003642:	4b0e      	ldr	r3, [pc, #56]	@ (800367c <checkKapiSecimleri+0x98>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b03      	cmp	r3, #3
 8003648:	d116      	bne.n	8003678 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 800364a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800364e:	480d      	ldr	r0, [pc, #52]	@ (8003684 <checkKapiSecimleri+0xa0>)
 8003650:	f006 fa58 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10b      	bne.n	8003672 <checkKapiSecimleri+0x8e>
 800365a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800365e:	4809      	ldr	r0, [pc, #36]	@ (8003684 <checkKapiSecimleri+0xa0>)
 8003660:	f006 fa50 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 800366a:	4b05      	ldr	r3, [pc, #20]	@ (8003680 <checkKapiSecimleri+0x9c>)
 800366c:	2201      	movs	r2, #1
 800366e:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8003670:	e002      	b.n	8003678 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8003672:	4b03      	ldr	r3, [pc, #12]	@ (8003680 <checkKapiSecimleri+0x9c>)
 8003674:	2200      	movs	r2, #0
 8003676:	701a      	strb	r2, [r3, #0]
}
 8003678:	bf00      	nop
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20000da8 	.word	0x20000da8
 8003680:	20000df2 	.word	0x20000df2
 8003684:	40010800 	.word	0x40010800

08003688 <checkAktifCalisma>:

void checkAktifCalisma() {
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 800368c:	4b66      	ldr	r3, [pc, #408]	@ (8003828 <checkAktifCalisma+0x1a0>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f041 83ab 	bne.w	8004dec <checkAktifCalisma+0x1764>
 8003696:	4b65      	ldr	r3, [pc, #404]	@ (800382c <checkAktifCalisma+0x1a4>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	f041 83a6 	bne.w	8004dec <checkAktifCalisma+0x1764>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 80036a0:	4b63      	ldr	r3, [pc, #396]	@ (8003830 <checkAktifCalisma+0x1a8>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d11a      	bne.n	80036de <checkAktifCalisma+0x56>
 80036a8:	4b62      	ldr	r3, [pc, #392]	@ (8003834 <checkAktifCalisma+0x1ac>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d116      	bne.n	80036de <checkAktifCalisma+0x56>
 80036b0:	4b61      	ldr	r3, [pc, #388]	@ (8003838 <checkAktifCalisma+0x1b0>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <checkAktifCalisma+0x46>
 80036b8:	4b60      	ldr	r3, [pc, #384]	@ (800383c <checkAktifCalisma+0x1b4>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	f083 0301 	eor.w	r3, r3, #1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <checkAktifCalisma+0x46>
 80036c6:	4b5e      	ldr	r3, [pc, #376]	@ (8003840 <checkAktifCalisma+0x1b8>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d007      	beq.n	80036de <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 80036ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003844 <checkAktifCalisma+0x1bc>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d01c      	beq.n	8003710 <checkAktifCalisma+0x88>
 80036d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003848 <checkAktifCalisma+0x1c0>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d118      	bne.n	8003710 <checkAktifCalisma+0x88>
 80036de:	4b5b      	ldr	r3, [pc, #364]	@ (800384c <checkAktifCalisma+0x1c4>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d103      	bne.n	80036ee <checkAktifCalisma+0x66>
 80036e6:	4b5a      	ldr	r3, [pc, #360]	@ (8003850 <checkAktifCalisma+0x1c8>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d010      	beq.n	8003710 <checkAktifCalisma+0x88>
 80036ee:	4b59      	ldr	r3, [pc, #356]	@ (8003854 <checkAktifCalisma+0x1cc>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00c      	beq.n	8003710 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80036f6:	2201      	movs	r2, #1
 80036f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80036fc:	4856      	ldr	r0, [pc, #344]	@ (8003858 <checkAktifCalisma+0x1d0>)
 80036fe:	f006 fa18 	bl	8009b32 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8003702:	4b56      	ldr	r3, [pc, #344]	@ (800385c <checkAktifCalisma+0x1d4>)
 8003704:	2201      	movs	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8003708:	4b55      	ldr	r3, [pc, #340]	@ (8003860 <checkAktifCalisma+0x1d8>)
 800370a:	2201      	movs	r2, #1
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	e008      	b.n	8003722 <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8003710:	2200      	movs	r2, #0
 8003712:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003716:	4850      	ldr	r0, [pc, #320]	@ (8003858 <checkAktifCalisma+0x1d0>)
 8003718:	f006 fa0b 	bl	8009b32 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 800371c:	4b4f      	ldr	r3, [pc, #316]	@ (800385c <checkAktifCalisma+0x1d4>)
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8003722:	4b42      	ldr	r3, [pc, #264]	@ (800382c <checkAktifCalisma+0x1a4>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d164      	bne.n	80037f4 <checkAktifCalisma+0x16c>
 800372a:	4b49      	ldr	r3, [pc, #292]	@ (8003850 <checkAktifCalisma+0x1c8>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d103      	bne.n	800373a <checkAktifCalisma+0xb2>
 8003732:	4b46      	ldr	r3, [pc, #280]	@ (800384c <checkAktifCalisma+0x1c4>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d05c      	beq.n	80037f4 <checkAktifCalisma+0x16c>
 800373a:	4b46      	ldr	r3, [pc, #280]	@ (8003854 <checkAktifCalisma+0x1cc>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d058      	beq.n	80037f4 <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8003742:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003746:	4844      	ldr	r0, [pc, #272]	@ (8003858 <checkAktifCalisma+0x1d0>)
 8003748:	f006 f9dc 	bl	8009b04 <HAL_GPIO_ReadPin>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <checkAktifCalisma+0xd2>
 8003752:	4b44      	ldr	r3, [pc, #272]	@ (8003864 <checkAktifCalisma+0x1dc>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d04c      	beq.n	80037f4 <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800375a:	2102      	movs	r1, #2
 800375c:	4842      	ldr	r0, [pc, #264]	@ (8003868 <checkAktifCalisma+0x1e0>)
 800375e:	f006 f9d1 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d145      	bne.n	80037f4 <checkAktifCalisma+0x16c>
							&& (basincVar)
 8003768:	4b40      	ldr	r3, [pc, #256]	@ (800386c <checkAktifCalisma+0x1e4>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d041      	beq.n	80037f4 <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8003770:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003774:	4838      	ldr	r0, [pc, #224]	@ (8003858 <checkAktifCalisma+0x1d0>)
 8003776:	f006 f9c5 	bl	8009b04 <HAL_GPIO_ReadPin>
 800377a:	4603      	mov	r3, r0
 800377c:	2b01      	cmp	r3, #1
 800377e:	d10e      	bne.n	800379e <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8003780:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003784:	4834      	ldr	r0, [pc, #208]	@ (8003858 <checkAktifCalisma+0x1d0>)
 8003786:	f006 f9bd 	bl	8009b04 <HAL_GPIO_ReadPin>
 800378a:	4603      	mov	r3, r0
 800378c:	2b01      	cmp	r3, #1
 800378e:	d106      	bne.n	800379e <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8003790:	2140      	movs	r1, #64	@ 0x40
 8003792:	4835      	ldr	r0, [pc, #212]	@ (8003868 <checkAktifCalisma+0x1e0>)
 8003794:	f006 f9b6 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003798:	4603      	mov	r3, r0
 800379a:	2b01      	cmp	r3, #1
 800379c:	d003      	beq.n	80037a6 <checkAktifCalisma+0x11e>
 800379e:	4b24      	ldr	r3, [pc, #144]	@ (8003830 <checkAktifCalisma+0x1a8>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d026      	beq.n	80037f4 <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 80037a6:	4b24      	ldr	r3, [pc, #144]	@ (8003838 <checkAktifCalisma+0x1b0>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	f083 0301 	eor.w	r3, r3, #1
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d01f      	beq.n	80037f4 <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 80037b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003834 <checkAktifCalisma+0x1ac>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	f083 0301 	eor.w	r3, r3, #1
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d018      	beq.n	80037f4 <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 80037c2:	4b20      	ldr	r3, [pc, #128]	@ (8003844 <checkAktifCalisma+0x1bc>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	f083 0301 	eor.w	r3, r3, #1
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d011      	beq.n	80037f4 <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 80037d0:	4b27      	ldr	r3, [pc, #156]	@ (8003870 <checkAktifCalisma+0x1e8>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	f083 0301 	eor.w	r3, r3, #1
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 80037de:	4b25      	ldr	r3, [pc, #148]	@ (8003874 <checkAktifCalisma+0x1ec>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	f083 0301 	eor.w	r3, r3, #1
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 80037ec:	4b10      	ldr	r3, [pc, #64]	@ (8003830 <checkAktifCalisma+0x1a8>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	e002      	b.n	80037fa <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 80037f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003830 <checkAktifCalisma+0x1a8>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80037fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003830 <checkAktifCalisma+0x1a8>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d03c      	beq.n	800387c <checkAktifCalisma+0x1f4>
 8003802:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003806:	4818      	ldr	r0, [pc, #96]	@ (8003868 <checkAktifCalisma+0x1e0>)
 8003808:	f006 f97c 	bl	8009b04 <HAL_GPIO_ReadPin>
 800380c:	4603      	mov	r3, r0
 800380e:	2b01      	cmp	r3, #1
 8003810:	d134      	bne.n	800387c <checkAktifCalisma+0x1f4>
 8003812:	4b19      	ldr	r3, [pc, #100]	@ (8003878 <checkAktifCalisma+0x1f0>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d030      	beq.n	800387c <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800381a:	2201      	movs	r2, #1
 800381c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003820:	480d      	ldr	r0, [pc, #52]	@ (8003858 <checkAktifCalisma+0x1d0>)
 8003822:	f006 f986 	bl	8009b32 <HAL_GPIO_WritePin>
 8003826:	e02f      	b.n	8003888 <checkAktifCalisma+0x200>
 8003828:	20000dbe 	.word	0x20000dbe
 800382c:	20000dbd 	.word	0x20000dbd
 8003830:	20000dd5 	.word	0x20000dd5
 8003834:	20000dd6 	.word	0x20000dd6
 8003838:	20000dd8 	.word	0x20000dd8
 800383c:	20000dd0 	.word	0x20000dd0
 8003840:	20000db3 	.word	0x20000db3
 8003844:	20000dd7 	.word	0x20000dd7
 8003848:	20000db2 	.word	0x20000db2
 800384c:	20000df1 	.word	0x20000df1
 8003850:	20000e04 	.word	0x20000e04
 8003854:	20000df2 	.word	0x20000df2
 8003858:	40010c00 	.word	0x40010c00
 800385c:	20000df3 	.word	0x20000df3
 8003860:	20000ddf 	.word	0x20000ddf
 8003864:	20000ddc 	.word	0x20000ddc
 8003868:	40011000 	.word	0x40011000
 800386c:	20000da3 	.word	0x20000da3
 8003870:	20000dda 	.word	0x20000dda
 8003874:	20000ddb 	.word	0x20000ddb
 8003878:	20000dae 	.word	0x20000dae
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800387c:	2200      	movs	r2, #0
 800387e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003882:	4865      	ldr	r0, [pc, #404]	@ (8003a18 <checkAktifCalisma+0x390>)
 8003884:	f006 f955 	bl	8009b32 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8003888:	4b64      	ldr	r3, [pc, #400]	@ (8003a1c <checkAktifCalisma+0x394>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d013      	beq.n	80038b8 <checkAktifCalisma+0x230>
 8003890:	4b63      	ldr	r3, [pc, #396]	@ (8003a20 <checkAktifCalisma+0x398>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d007      	beq.n	80038a8 <checkAktifCalisma+0x220>
 8003898:	4b61      	ldr	r3, [pc, #388]	@ (8003a20 <checkAktifCalisma+0x398>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d003      	beq.n	80038a8 <checkAktifCalisma+0x220>
 80038a0:	4b60      	ldr	r3, [pc, #384]	@ (8003a24 <checkAktifCalisma+0x39c>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d107      	bne.n	80038b8 <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80038a8:	2201      	movs	r2, #1
 80038aa:	2104      	movs	r1, #4
 80038ac:	485a      	ldr	r0, [pc, #360]	@ (8003a18 <checkAktifCalisma+0x390>)
 80038ae:	f006 f940 	bl	8009b32 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 80038b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003a28 <checkAktifCalisma+0x3a0>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80038b8:	4b5b      	ldr	r3, [pc, #364]	@ (8003a28 <checkAktifCalisma+0x3a0>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d033      	beq.n	8003928 <checkAktifCalisma+0x2a0>
 80038c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80038c4:	4854      	ldr	r0, [pc, #336]	@ (8003a18 <checkAktifCalisma+0x390>)
 80038c6:	f006 f91d 	bl	8009b04 <HAL_GPIO_ReadPin>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d106      	bne.n	80038de <checkAktifCalisma+0x256>
 80038d0:	4b56      	ldr	r3, [pc, #344]	@ (8003a2c <checkAktifCalisma+0x3a4>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	f083 0301 	eor.w	r3, r3, #1
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <checkAktifCalisma+0x264>
 80038de:	2102      	movs	r1, #2
 80038e0:	4853      	ldr	r0, [pc, #332]	@ (8003a30 <checkAktifCalisma+0x3a8>)
 80038e2:	f006 f90f 	bl	8009b04 <HAL_GPIO_ReadPin>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d11d      	bne.n	8003928 <checkAktifCalisma+0x2a0>
 80038ec:	4b51      	ldr	r3, [pc, #324]	@ (8003a34 <checkAktifCalisma+0x3ac>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d103      	bne.n	80038fc <checkAktifCalisma+0x274>
 80038f4:	4b50      	ldr	r3, [pc, #320]	@ (8003a38 <checkAktifCalisma+0x3b0>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d015      	beq.n	8003928 <checkAktifCalisma+0x2a0>
 80038fc:	4b4f      	ldr	r3, [pc, #316]	@ (8003a3c <checkAktifCalisma+0x3b4>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d011      	beq.n	8003928 <checkAktifCalisma+0x2a0>
 8003904:	4b4e      	ldr	r3, [pc, #312]	@ (8003a40 <checkAktifCalisma+0x3b8>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00d      	beq.n	8003928 <checkAktifCalisma+0x2a0>
 800390c:	4b4d      	ldr	r3, [pc, #308]	@ (8003a44 <checkAktifCalisma+0x3bc>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	f083 0301 	eor.w	r3, r3, #1
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d006      	beq.n	8003928 <checkAktifCalisma+0x2a0>
					timer2=millis;
 800391a:	4b4b      	ldr	r3, [pc, #300]	@ (8003a48 <checkAktifCalisma+0x3c0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a4b      	ldr	r2, [pc, #300]	@ (8003a4c <checkAktifCalisma+0x3c4>)
 8003920:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 8003922:	4b48      	ldr	r3, [pc, #288]	@ (8003a44 <checkAktifCalisma+0x3bc>)
 8003924:	2201      	movs	r2, #1
 8003926:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8003928:	4b47      	ldr	r3, [pc, #284]	@ (8003a48 <checkAktifCalisma+0x3c0>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4b47      	ldr	r3, [pc, #284]	@ (8003a4c <checkAktifCalisma+0x3c4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	4a47      	ldr	r2, [pc, #284]	@ (8003a50 <checkAktifCalisma+0x3c8>)
 8003934:	7812      	ldrb	r2, [r2, #0]
 8003936:	4293      	cmp	r3, r2
 8003938:	d303      	bcc.n	8003942 <checkAktifCalisma+0x2ba>
 800393a:	4b42      	ldr	r3, [pc, #264]	@ (8003a44 <checkAktifCalisma+0x3bc>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d118      	bne.n	8003974 <checkAktifCalisma+0x2ec>
 8003942:	4b3c      	ldr	r3, [pc, #240]	@ (8003a34 <checkAktifCalisma+0x3ac>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	f083 0301 	eor.w	r3, r3, #1
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d006      	beq.n	800395e <checkAktifCalisma+0x2d6>
 8003950:	4b39      	ldr	r3, [pc, #228]	@ (8003a38 <checkAktifCalisma+0x3b0>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	f083 0301 	eor.w	r3, r3, #1
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <checkAktifCalisma+0x2ec>
 800395e:	4b37      	ldr	r3, [pc, #220]	@ (8003a3c <checkAktifCalisma+0x3b4>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	f083 0301 	eor.w	r3, r3, #1
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d103      	bne.n	8003974 <checkAktifCalisma+0x2ec>
 800396c:	4b34      	ldr	r3, [pc, #208]	@ (8003a40 <checkAktifCalisma+0x3b8>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8003974:	2200      	movs	r2, #0
 8003976:	2104      	movs	r1, #4
 8003978:	4827      	ldr	r0, [pc, #156]	@ (8003a18 <checkAktifCalisma+0x390>)
 800397a:	f006 f8da 	bl	8009b32 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 800397e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a28 <checkAktifCalisma+0x3a0>)
 8003980:	2200      	movs	r2, #0
 8003982:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 8003984:	4b2f      	ldr	r3, [pc, #188]	@ (8003a44 <checkAktifCalisma+0x3bc>)
 8003986:	2200      	movs	r2, #0
 8003988:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 800398a:	4b32      	ldr	r3, [pc, #200]	@ (8003a54 <checkAktifCalisma+0x3cc>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d102      	bne.n	8003998 <checkAktifCalisma+0x310>
					cerceveVar=1;
 8003992:	4b31      	ldr	r3, [pc, #196]	@ (8003a58 <checkAktifCalisma+0x3d0>)
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8003998:	4b2e      	ldr	r3, [pc, #184]	@ (8003a54 <checkAktifCalisma+0x3cc>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d116      	bne.n	80039ce <checkAktifCalisma+0x346>
 80039a0:	4b2e      	ldr	r3, [pc, #184]	@ (8003a5c <checkAktifCalisma+0x3d4>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d112      	bne.n	80039ce <checkAktifCalisma+0x346>
 80039a8:	2101      	movs	r1, #1
 80039aa:	4821      	ldr	r0, [pc, #132]	@ (8003a30 <checkAktifCalisma+0x3a8>)
 80039ac:	f006 f8aa 	bl	8009b04 <HAL_GPIO_ReadPin>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10b      	bne.n	80039ce <checkAktifCalisma+0x346>
 80039b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80039ba:	4817      	ldr	r0, [pc, #92]	@ (8003a18 <checkAktifCalisma+0x390>)
 80039bc:	f006 f8a2 	bl	8009b04 <HAL_GPIO_ReadPin>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d103      	bne.n	80039ce <checkAktifCalisma+0x346>
					cerceveVar=1;
 80039c6:	4b24      	ldr	r3, [pc, #144]	@ (8003a58 <checkAktifCalisma+0x3d0>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	701a      	strb	r2, [r3, #0]
 80039cc:	e011      	b.n	80039f2 <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80039ce:	4b21      	ldr	r3, [pc, #132]	@ (8003a54 <checkAktifCalisma+0x3cc>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d10d      	bne.n	80039f2 <checkAktifCalisma+0x36a>
 80039d6:	2101      	movs	r1, #1
 80039d8:	4815      	ldr	r0, [pc, #84]	@ (8003a30 <checkAktifCalisma+0x3a8>)
 80039da:	f006 f893 	bl	8009b04 <HAL_GPIO_ReadPin>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d106      	bne.n	80039f2 <checkAktifCalisma+0x36a>
 80039e4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a5c <checkAktifCalisma+0x3d4>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <checkAktifCalisma+0x36a>
					cerceveVar=0;
 80039ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003a58 <checkAktifCalisma+0x3d0>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 80039f2:	4b18      	ldr	r3, [pc, #96]	@ (8003a54 <checkAktifCalisma+0x3cc>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d135      	bne.n	8003a66 <checkAktifCalisma+0x3de>
 80039fa:	4b18      	ldr	r3, [pc, #96]	@ (8003a5c <checkAktifCalisma+0x3d4>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d131      	bne.n	8003a66 <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8003a02:	2101      	movs	r1, #1
 8003a04:	480a      	ldr	r0, [pc, #40]	@ (8003a30 <checkAktifCalisma+0x3a8>)
 8003a06:	f006 f87d 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d127      	bne.n	8003a60 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 8003a10:	4b11      	ldr	r3, [pc, #68]	@ (8003a58 <checkAktifCalisma+0x3d0>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	701a      	strb	r2, [r3, #0]
 8003a16:	e026      	b.n	8003a66 <checkAktifCalisma+0x3de>
 8003a18:	40010c00 	.word	0x40010c00
 8003a1c:	20000dd5 	.word	0x20000dd5
 8003a20:	20000daf 	.word	0x20000daf
 8003a24:	20000db3 	.word	0x20000db3
 8003a28:	20000dd9 	.word	0x20000dd9
 8003a2c:	20000ddc 	.word	0x20000ddc
 8003a30:	40011000 	.word	0x40011000
 8003a34:	20000df1 	.word	0x20000df1
 8003a38:	20000e04 	.word	0x20000e04
 8003a3c:	20000df2 	.word	0x20000df2
 8003a40:	20000da3 	.word	0x20000da3
 8003a44:	20000dd1 	.word	0x20000dd1
 8003a48:	20000d78 	.word	0x20000d78
 8003a4c:	20000d84 	.word	0x20000d84
 8003a50:	20000db4 	.word	0x20000db4
 8003a54:	20000da4 	.word	0x20000da4
 8003a58:	20000df6 	.word	0x20000df6
 8003a5c:	20000da1 	.word	0x20000da1
					} else {
						cerceveVar=0;
 8003a60:	4b7f      	ldr	r3, [pc, #508]	@ (8003c60 <checkAktifCalisma+0x5d8>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8003a66:	4b7f      	ldr	r3, [pc, #508]	@ (8003c64 <checkAktifCalisma+0x5dc>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d17c      	bne.n	8003b68 <checkAktifCalisma+0x4e0>
 8003a6e:	4b7e      	ldr	r3, [pc, #504]	@ (8003c68 <checkAktifCalisma+0x5e0>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d078      	beq.n	8003b68 <checkAktifCalisma+0x4e0>
 8003a76:	4b7d      	ldr	r3, [pc, #500]	@ (8003c6c <checkAktifCalisma+0x5e4>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d074      	beq.n	8003b68 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8003a7e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a82:	487b      	ldr	r0, [pc, #492]	@ (8003c70 <checkAktifCalisma+0x5e8>)
 8003a84:	f006 f83e 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <checkAktifCalisma+0x40e>
 8003a8e:	4b79      	ldr	r3, [pc, #484]	@ (8003c74 <checkAktifCalisma+0x5ec>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d068      	beq.n	8003b68 <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8003a96:	4b72      	ldr	r3, [pc, #456]	@ (8003c60 <checkAktifCalisma+0x5d8>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d064      	beq.n	8003b68 <checkAktifCalisma+0x4e0>
 8003a9e:	4b76      	ldr	r3, [pc, #472]	@ (8003c78 <checkAktifCalisma+0x5f0>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	f083 0301 	eor.w	r3, r3, #1
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d05d      	beq.n	8003b68 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8003aac:	2104      	movs	r1, #4
 8003aae:	4873      	ldr	r0, [pc, #460]	@ (8003c7c <checkAktifCalisma+0x5f4>)
 8003ab0:	f006 f828 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <checkAktifCalisma+0x43a>
 8003aba:	4b71      	ldr	r3, [pc, #452]	@ (8003c80 <checkAktifCalisma+0x5f8>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d152      	bne.n	8003b68 <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8003ac2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003ac6:	486a      	ldr	r0, [pc, #424]	@ (8003c70 <checkAktifCalisma+0x5e8>)
 8003ac8:	f006 f81c 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d10e      	bne.n	8003af0 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8003ad2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ad6:	4866      	ldr	r0, [pc, #408]	@ (8003c70 <checkAktifCalisma+0x5e8>)
 8003ad8:	f006 f814 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d106      	bne.n	8003af0 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8003ae2:	2140      	movs	r1, #64	@ 0x40
 8003ae4:	4865      	ldr	r0, [pc, #404]	@ (8003c7c <checkAktifCalisma+0x5f4>)
 8003ae6:	f006 f80d 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d003      	beq.n	8003af8 <checkAktifCalisma+0x470>
 8003af0:	4b64      	ldr	r3, [pc, #400]	@ (8003c84 <checkAktifCalisma+0x5fc>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d037      	beq.n	8003b68 <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 8003af8:	4b63      	ldr	r3, [pc, #396]	@ (8003c88 <checkAktifCalisma+0x600>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	f083 0301 	eor.w	r3, r3, #1
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d030      	beq.n	8003b68 <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 8003b06:	4b61      	ldr	r3, [pc, #388]	@ (8003c8c <checkAktifCalisma+0x604>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	f083 0301 	eor.w	r3, r3, #1
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d029      	beq.n	8003b68 <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 8003b14:	4b5e      	ldr	r3, [pc, #376]	@ (8003c90 <checkAktifCalisma+0x608>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	f083 0301 	eor.w	r3, r3, #1
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d022      	beq.n	8003b68 <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 8003b22:	4b5c      	ldr	r3, [pc, #368]	@ (8003c94 <checkAktifCalisma+0x60c>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	f083 0301 	eor.w	r3, r3, #1
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01b      	beq.n	8003b68 <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8003b30:	4b59      	ldr	r3, [pc, #356]	@ (8003c98 <checkAktifCalisma+0x610>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	f083 0301 	eor.w	r3, r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d014      	beq.n	8003b68 <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 8003b3e:	4b57      	ldr	r3, [pc, #348]	@ (8003c9c <checkAktifCalisma+0x614>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	f083 0301 	eor.w	r3, r3, #1
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00d      	beq.n	8003b68 <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	2102      	movs	r1, #2
 8003b50:	4847      	ldr	r0, [pc, #284]	@ (8003c70 <checkAktifCalisma+0x5e8>)
 8003b52:	f005 ffee 	bl	8009b32 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 8003b56:	4b4b      	ldr	r3, [pc, #300]	@ (8003c84 <checkAktifCalisma+0x5fc>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8003b5c:	4b50      	ldr	r3, [pc, #320]	@ (8003ca0 <checkAktifCalisma+0x618>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 8003b62:	4b50      	ldr	r3, [pc, #320]	@ (8003ca4 <checkAktifCalisma+0x61c>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8003b68:	4b46      	ldr	r3, [pc, #280]	@ (8003c84 <checkAktifCalisma+0x5fc>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d033      	beq.n	8003bd8 <checkAktifCalisma+0x550>
 8003b70:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b74:	483e      	ldr	r0, [pc, #248]	@ (8003c70 <checkAktifCalisma+0x5e8>)
 8003b76:	f005 ffc5 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d106      	bne.n	8003b8e <checkAktifCalisma+0x506>
 8003b80:	4b3c      	ldr	r3, [pc, #240]	@ (8003c74 <checkAktifCalisma+0x5ec>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	f083 0301 	eor.w	r3, r3, #1
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10a      	bne.n	8003ba4 <checkAktifCalisma+0x51c>
 8003b8e:	2104      	movs	r1, #4
 8003b90:	483a      	ldr	r0, [pc, #232]	@ (8003c7c <checkAktifCalisma+0x5f4>)
 8003b92:	f005 ffb7 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d11d      	bne.n	8003bd8 <checkAktifCalisma+0x550>
 8003b9c:	4b38      	ldr	r3, [pc, #224]	@ (8003c80 <checkAktifCalisma+0x5f8>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d019      	beq.n	8003bd8 <checkAktifCalisma+0x550>
 8003ba4:	4b30      	ldr	r3, [pc, #192]	@ (8003c68 <checkAktifCalisma+0x5e0>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d015      	beq.n	8003bd8 <checkAktifCalisma+0x550>
 8003bac:	4b2f      	ldr	r3, [pc, #188]	@ (8003c6c <checkAktifCalisma+0x5e4>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d011      	beq.n	8003bd8 <checkAktifCalisma+0x550>
 8003bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c60 <checkAktifCalisma+0x5d8>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00d      	beq.n	8003bd8 <checkAktifCalisma+0x550>
 8003bbc:	4b3a      	ldr	r3, [pc, #232]	@ (8003ca8 <checkAktifCalisma+0x620>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	f083 0301 	eor.w	r3, r3, #1
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d006      	beq.n	8003bd8 <checkAktifCalisma+0x550>
					timer2=millis;
 8003bca:	4b38      	ldr	r3, [pc, #224]	@ (8003cac <checkAktifCalisma+0x624>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a38      	ldr	r2, [pc, #224]	@ (8003cb0 <checkAktifCalisma+0x628>)
 8003bd0:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 8003bd2:	4b35      	ldr	r3, [pc, #212]	@ (8003ca8 <checkAktifCalisma+0x620>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8003bd8:	4b34      	ldr	r3, [pc, #208]	@ (8003cac <checkAktifCalisma+0x624>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4b34      	ldr	r3, [pc, #208]	@ (8003cb0 <checkAktifCalisma+0x628>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	4a34      	ldr	r2, [pc, #208]	@ (8003cb4 <checkAktifCalisma+0x62c>)
 8003be4:	7812      	ldrb	r2, [r2, #0]
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d303      	bcc.n	8003bf2 <checkAktifCalisma+0x56a>
 8003bea:	4b2f      	ldr	r3, [pc, #188]	@ (8003ca8 <checkAktifCalisma+0x620>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d114      	bne.n	8003c1c <checkAktifCalisma+0x594>
 8003bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c68 <checkAktifCalisma+0x5e0>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	f083 0301 	eor.w	r3, r3, #1
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10d      	bne.n	8003c1c <checkAktifCalisma+0x594>
 8003c00:	4b1a      	ldr	r3, [pc, #104]	@ (8003c6c <checkAktifCalisma+0x5e4>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	f083 0301 	eor.w	r3, r3, #1
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <checkAktifCalisma+0x594>
 8003c0e:	4b14      	ldr	r3, [pc, #80]	@ (8003c60 <checkAktifCalisma+0x5d8>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	f083 0301 	eor.w	r3, r3, #1
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2102      	movs	r1, #2
 8003c20:	4813      	ldr	r0, [pc, #76]	@ (8003c70 <checkAktifCalisma+0x5e8>)
 8003c22:	f005 ff86 	bl	8009b32 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8003c26:	4b17      	ldr	r3, [pc, #92]	@ (8003c84 <checkAktifCalisma+0x5fc>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8003c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ca8 <checkAktifCalisma+0x620>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8003c32:	4b14      	ldr	r3, [pc, #80]	@ (8003c84 <checkAktifCalisma+0x5fc>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d040      	beq.n	8003cbc <checkAktifCalisma+0x634>
 8003c3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c3e:	480f      	ldr	r0, [pc, #60]	@ (8003c7c <checkAktifCalisma+0x5f4>)
 8003c40:	f005 ff60 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d138      	bne.n	8003cbc <checkAktifCalisma+0x634>
 8003c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb8 <checkAktifCalisma+0x630>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d034      	beq.n	8003cbc <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8003c52:	2201      	movs	r2, #1
 8003c54:	2101      	movs	r1, #1
 8003c56:	4806      	ldr	r0, [pc, #24]	@ (8003c70 <checkAktifCalisma+0x5e8>)
 8003c58:	f005 ff6b 	bl	8009b32 <HAL_GPIO_WritePin>
 8003c5c:	e033      	b.n	8003cc6 <checkAktifCalisma+0x63e>
 8003c5e:	bf00      	nop
 8003c60:	20000df6 	.word	0x20000df6
 8003c64:	20000dbd 	.word	0x20000dbd
 8003c68:	20000df1 	.word	0x20000df1
 8003c6c:	20000df2 	.word	0x20000df2
 8003c70:	40010c00 	.word	0x40010c00
 8003c74:	20000ddd 	.word	0x20000ddd
 8003c78:	20000df0 	.word	0x20000df0
 8003c7c:	40011000 	.word	0x40011000
 8003c80:	20000da6 	.word	0x20000da6
 8003c84:	20000dd8 	.word	0x20000dd8
 8003c88:	20000dd5 	.word	0x20000dd5
 8003c8c:	20000dd9 	.word	0x20000dd9
 8003c90:	20000dd6 	.word	0x20000dd6
 8003c94:	20000dd7 	.word	0x20000dd7
 8003c98:	20000dda 	.word	0x20000dda
 8003c9c:	20000ddb 	.word	0x20000ddb
 8003ca0:	20000de0 	.word	0x20000de0
 8003ca4:	20000e00 	.word	0x20000e00
 8003ca8:	20000dd0 	.word	0x20000dd0
 8003cac:	20000d78 	.word	0x20000d78
 8003cb0:	20000d84 	.word	0x20000d84
 8003cb4:	20000db5 	.word	0x20000db5
 8003cb8:	20000da5 	.word	0x20000da5
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	4836      	ldr	r0, [pc, #216]	@ (8003d9c <checkAktifCalisma+0x714>)
 8003cc2:	f005 ff36 	bl	8009b32 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8003cc6:	4b36      	ldr	r3, [pc, #216]	@ (8003da0 <checkAktifCalisma+0x718>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f040 8080 	bne.w	8003dd0 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8003cd0:	4b34      	ldr	r3, [pc, #208]	@ (8003da4 <checkAktifCalisma+0x71c>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d003      	beq.n	8003ce0 <checkAktifCalisma+0x658>
 8003cd8:	4b32      	ldr	r3, [pc, #200]	@ (8003da4 <checkAktifCalisma+0x71c>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d177      	bne.n	8003dd0 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8003ce0:	4b31      	ldr	r3, [pc, #196]	@ (8003da8 <checkAktifCalisma+0x720>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d073      	beq.n	8003dd0 <checkAktifCalisma+0x748>
 8003ce8:	4b30      	ldr	r3, [pc, #192]	@ (8003dac <checkAktifCalisma+0x724>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d06f      	beq.n	8003dd0 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8003cf0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cf4:	4829      	ldr	r0, [pc, #164]	@ (8003d9c <checkAktifCalisma+0x714>)
 8003cf6:	f005 ff05 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d167      	bne.n	8003dd0 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8003d00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003d04:	482a      	ldr	r0, [pc, #168]	@ (8003db0 <checkAktifCalisma+0x728>)
 8003d06:	f005 fefd 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <checkAktifCalisma+0x690>
 8003d10:	4b28      	ldr	r3, [pc, #160]	@ (8003db4 <checkAktifCalisma+0x72c>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d15b      	bne.n	8003dd0 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8003d18:	2140      	movs	r1, #64	@ 0x40
 8003d1a:	4825      	ldr	r0, [pc, #148]	@ (8003db0 <checkAktifCalisma+0x728>)
 8003d1c:	f005 fef2 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d10f      	bne.n	8003d46 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8003d26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d2a:	481c      	ldr	r0, [pc, #112]	@ (8003d9c <checkAktifCalisma+0x714>)
 8003d2c:	f005 feea 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d107      	bne.n	8003d46 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8003d36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003d3a:	4818      	ldr	r0, [pc, #96]	@ (8003d9c <checkAktifCalisma+0x714>)
 8003d3c:	f005 fee2 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d003      	beq.n	8003d4e <checkAktifCalisma+0x6c6>
 8003d46:	4b1c      	ldr	r3, [pc, #112]	@ (8003db8 <checkAktifCalisma+0x730>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d040      	beq.n	8003dd0 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8003d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dbc <checkAktifCalisma+0x734>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	f083 0301 	eor.w	r3, r3, #1
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d039      	beq.n	8003dd0 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8003d5c:	4b18      	ldr	r3, [pc, #96]	@ (8003dc0 <checkAktifCalisma+0x738>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	f083 0301 	eor.w	r3, r3, #1
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d032      	beq.n	8003dd0 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8003d6a:	4b16      	ldr	r3, [pc, #88]	@ (8003dc4 <checkAktifCalisma+0x73c>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	f083 0301 	eor.w	r3, r3, #1
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d02b      	beq.n	8003dd0 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8003d78:	4b13      	ldr	r3, [pc, #76]	@ (8003dc8 <checkAktifCalisma+0x740>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	f083 0301 	eor.w	r3, r3, #1
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d024      	beq.n	8003dd0 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8003d86:	4b11      	ldr	r3, [pc, #68]	@ (8003dcc <checkAktifCalisma+0x744>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	f083 0301 	eor.w	r3, r3, #1
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01d      	beq.n	8003dd0 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8003d94:	4b08      	ldr	r3, [pc, #32]	@ (8003db8 <checkAktifCalisma+0x730>)
 8003d96:	2201      	movs	r2, #1
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	e01c      	b.n	8003dd6 <checkAktifCalisma+0x74e>
 8003d9c:	40010c00 	.word	0x40010c00
 8003da0:	20000dbd 	.word	0x20000dbd
 8003da4:	20000daf 	.word	0x20000daf
 8003da8:	20000df1 	.word	0x20000df1
 8003dac:	20000df2 	.word	0x20000df2
 8003db0:	40011000 	.word	0x40011000
 8003db4:	20000db0 	.word	0x20000db0
 8003db8:	20000dd6 	.word	0x20000dd6
 8003dbc:	20000dd5 	.word	0x20000dd5
 8003dc0:	20000dd9 	.word	0x20000dd9
 8003dc4:	20000dd8 	.word	0x20000dd8
 8003dc8:	20000dd7 	.word	0x20000dd7
 8003dcc:	20000ddb 	.word	0x20000ddb
				} else {
					devmotoryukaricalisiyor=0;
 8003dd0:	4b64      	ldr	r3, [pc, #400]	@ (8003f64 <checkAktifCalisma+0x8dc>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8003dd6:	4b63      	ldr	r3, [pc, #396]	@ (8003f64 <checkAktifCalisma+0x8dc>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d007      	beq.n	8003dee <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8003dde:	2201      	movs	r2, #1
 8003de0:	2120      	movs	r1, #32
 8003de2:	4861      	ldr	r0, [pc, #388]	@ (8003f68 <checkAktifCalisma+0x8e0>)
 8003de4:	f005 fea5 	bl	8009b32 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8003de8:	4b60      	ldr	r3, [pc, #384]	@ (8003f6c <checkAktifCalisma+0x8e4>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8003dee:	4b5f      	ldr	r3, [pc, #380]	@ (8003f6c <checkAktifCalisma+0x8e4>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d025      	beq.n	8003e42 <checkAktifCalisma+0x7ba>
 8003df6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003dfa:	485d      	ldr	r0, [pc, #372]	@ (8003f70 <checkAktifCalisma+0x8e8>)
 8003dfc:	f005 fe82 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d007      	beq.n	8003e16 <checkAktifCalisma+0x78e>
 8003e06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003e0a:	4857      	ldr	r0, [pc, #348]	@ (8003f68 <checkAktifCalisma+0x8e0>)
 8003e0c:	f005 fe7a 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d115      	bne.n	8003e42 <checkAktifCalisma+0x7ba>
 8003e16:	4b57      	ldr	r3, [pc, #348]	@ (8003f74 <checkAktifCalisma+0x8ec>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d011      	beq.n	8003e42 <checkAktifCalisma+0x7ba>
 8003e1e:	4b56      	ldr	r3, [pc, #344]	@ (8003f78 <checkAktifCalisma+0x8f0>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00d      	beq.n	8003e42 <checkAktifCalisma+0x7ba>
 8003e26:	4b55      	ldr	r3, [pc, #340]	@ (8003f7c <checkAktifCalisma+0x8f4>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	f083 0301 	eor.w	r3, r3, #1
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d006      	beq.n	8003e42 <checkAktifCalisma+0x7ba>
					timer2=millis;
 8003e34:	4b52      	ldr	r3, [pc, #328]	@ (8003f80 <checkAktifCalisma+0x8f8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a52      	ldr	r2, [pc, #328]	@ (8003f84 <checkAktifCalisma+0x8fc>)
 8003e3a:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8003e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8003f7c <checkAktifCalisma+0x8f4>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8003e42:	4b4f      	ldr	r3, [pc, #316]	@ (8003f80 <checkAktifCalisma+0x8f8>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	4b4f      	ldr	r3, [pc, #316]	@ (8003f84 <checkAktifCalisma+0x8fc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	4a4e      	ldr	r2, [pc, #312]	@ (8003f88 <checkAktifCalisma+0x900>)
 8003e4e:	7812      	ldrb	r2, [r2, #0]
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d303      	bcc.n	8003e5c <checkAktifCalisma+0x7d4>
 8003e54:	4b49      	ldr	r3, [pc, #292]	@ (8003f7c <checkAktifCalisma+0x8f4>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10d      	bne.n	8003e78 <checkAktifCalisma+0x7f0>
 8003e5c:	4b45      	ldr	r3, [pc, #276]	@ (8003f74 <checkAktifCalisma+0x8ec>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	f083 0301 	eor.w	r3, r3, #1
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <checkAktifCalisma+0x7f0>
 8003e6a:	4b43      	ldr	r3, [pc, #268]	@ (8003f78 <checkAktifCalisma+0x8f0>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	f083 0301 	eor.w	r3, r3, #1
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2120      	movs	r1, #32
 8003e7c:	483a      	ldr	r0, [pc, #232]	@ (8003f68 <checkAktifCalisma+0x8e0>)
 8003e7e:	f005 fe58 	bl	8009b32 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8003e82:	4b3a      	ldr	r3, [pc, #232]	@ (8003f6c <checkAktifCalisma+0x8e4>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8003e88:	4b3c      	ldr	r3, [pc, #240]	@ (8003f7c <checkAktifCalisma+0x8f4>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8003e8e:	4b3f      	ldr	r3, [pc, #252]	@ (8003f8c <checkAktifCalisma+0x904>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f040 8088 	bne.w	8003fa8 <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8003e98:	4b3d      	ldr	r3, [pc, #244]	@ (8003f90 <checkAktifCalisma+0x908>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d003      	beq.n	8003ea8 <checkAktifCalisma+0x820>
 8003ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8003f90 <checkAktifCalisma+0x908>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d17f      	bne.n	8003fa8 <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8003ea8:	4b32      	ldr	r3, [pc, #200]	@ (8003f74 <checkAktifCalisma+0x8ec>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d07b      	beq.n	8003fa8 <checkAktifCalisma+0x920>
 8003eb0:	4b31      	ldr	r3, [pc, #196]	@ (8003f78 <checkAktifCalisma+0x8f0>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d077      	beq.n	8003fa8 <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8003eb8:	2140      	movs	r1, #64	@ 0x40
 8003eba:	482b      	ldr	r0, [pc, #172]	@ (8003f68 <checkAktifCalisma+0x8e0>)
 8003ebc:	f005 fe22 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d170      	bne.n	8003fa8 <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8003ec6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003eca:	4827      	ldr	r0, [pc, #156]	@ (8003f68 <checkAktifCalisma+0x8e0>)
 8003ecc:	f005 fe1a 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <checkAktifCalisma+0x856>
 8003ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8003f94 <checkAktifCalisma+0x90c>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d164      	bne.n	8003fa8 <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8003ede:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ee2:	4823      	ldr	r0, [pc, #140]	@ (8003f70 <checkAktifCalisma+0x8e8>)
 8003ee4:	f005 fe0e 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d10f      	bne.n	8003f0e <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8003eee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003ef2:	481f      	ldr	r0, [pc, #124]	@ (8003f70 <checkAktifCalisma+0x8e8>)
 8003ef4:	f005 fe06 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d107      	bne.n	8003f0e <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8003efe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003f02:	481b      	ldr	r0, [pc, #108]	@ (8003f70 <checkAktifCalisma+0x8e8>)
 8003f04:	f005 fdfe 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d003      	beq.n	8003f16 <checkAktifCalisma+0x88e>
 8003f0e:	4b22      	ldr	r3, [pc, #136]	@ (8003f98 <checkAktifCalisma+0x910>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d048      	beq.n	8003fa8 <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8003f16:	4b21      	ldr	r3, [pc, #132]	@ (8003f9c <checkAktifCalisma+0x914>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	f083 0301 	eor.w	r3, r3, #1
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d041      	beq.n	8003fa8 <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8003f24:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa0 <checkAktifCalisma+0x918>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	f083 0301 	eor.w	r3, r3, #1
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d03a      	beq.n	8003fa8 <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8003f32:	4b1c      	ldr	r3, [pc, #112]	@ (8003fa4 <checkAktifCalisma+0x91c>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	f083 0301 	eor.w	r3, r3, #1
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d033      	beq.n	8003fa8 <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8003f40:	4b0a      	ldr	r3, [pc, #40]	@ (8003f6c <checkAktifCalisma+0x8e4>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	f083 0301 	eor.w	r3, r3, #1
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d02c      	beq.n	8003fa8 <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8003f4e:	4b05      	ldr	r3, [pc, #20]	@ (8003f64 <checkAktifCalisma+0x8dc>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	f083 0301 	eor.w	r3, r3, #1
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d025      	beq.n	8003fa8 <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 8003f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f98 <checkAktifCalisma+0x910>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	701a      	strb	r2, [r3, #0]
 8003f62:	e024      	b.n	8003fae <checkAktifCalisma+0x926>
 8003f64:	20000dd6 	.word	0x20000dd6
 8003f68:	40011000 	.word	0x40011000
 8003f6c:	20000dda 	.word	0x20000dda
 8003f70:	40010c00 	.word	0x40010c00
 8003f74:	20000df1 	.word	0x20000df1
 8003f78:	20000df2 	.word	0x20000df2
 8003f7c:	20000dd2 	.word	0x20000dd2
 8003f80:	20000d78 	.word	0x20000d78
 8003f84:	20000d84 	.word	0x20000d84
 8003f88:	20000db6 	.word	0x20000db6
 8003f8c:	20000dbd 	.word	0x20000dbd
 8003f90:	20000daf 	.word	0x20000daf
 8003f94:	20000db1 	.word	0x20000db1
 8003f98:	20000dd7 	.word	0x20000dd7
 8003f9c:	20000dd5 	.word	0x20000dd5
 8003fa0:	20000dd9 	.word	0x20000dd9
 8003fa4:	20000dd8 	.word	0x20000dd8
				} else {
					devmotorasagicalisiyor=0;
 8003fa8:	4b96      	ldr	r3, [pc, #600]	@ (8004204 <checkAktifCalisma+0xb7c>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8003fae:	4b95      	ldr	r3, [pc, #596]	@ (8004204 <checkAktifCalisma+0xb7c>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d007      	beq.n	8003fc6 <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	2110      	movs	r1, #16
 8003fba:	4893      	ldr	r0, [pc, #588]	@ (8004208 <checkAktifCalisma+0xb80>)
 8003fbc:	f005 fdb9 	bl	8009b32 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8003fc0:	4b92      	ldr	r3, [pc, #584]	@ (800420c <checkAktifCalisma+0xb84>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8003fc6:	4b91      	ldr	r3, [pc, #580]	@ (800420c <checkAktifCalisma+0xb84>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d024      	beq.n	8004018 <checkAktifCalisma+0x990>
 8003fce:	2140      	movs	r1, #64	@ 0x40
 8003fd0:	488d      	ldr	r0, [pc, #564]	@ (8004208 <checkAktifCalisma+0xb80>)
 8003fd2:	f005 fd97 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d007      	beq.n	8003fec <checkAktifCalisma+0x964>
 8003fdc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003fe0:	4889      	ldr	r0, [pc, #548]	@ (8004208 <checkAktifCalisma+0xb80>)
 8003fe2:	f005 fd8f 	bl	8009b04 <HAL_GPIO_ReadPin>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d115      	bne.n	8004018 <checkAktifCalisma+0x990>
 8003fec:	4b88      	ldr	r3, [pc, #544]	@ (8004210 <checkAktifCalisma+0xb88>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d011      	beq.n	8004018 <checkAktifCalisma+0x990>
 8003ff4:	4b87      	ldr	r3, [pc, #540]	@ (8004214 <checkAktifCalisma+0xb8c>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00d      	beq.n	8004018 <checkAktifCalisma+0x990>
 8003ffc:	4b86      	ldr	r3, [pc, #536]	@ (8004218 <checkAktifCalisma+0xb90>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	f083 0301 	eor.w	r3, r3, #1
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d006      	beq.n	8004018 <checkAktifCalisma+0x990>
					timer2=millis;
 800400a:	4b84      	ldr	r3, [pc, #528]	@ (800421c <checkAktifCalisma+0xb94>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a84      	ldr	r2, [pc, #528]	@ (8004220 <checkAktifCalisma+0xb98>)
 8004010:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004012:	4b81      	ldr	r3, [pc, #516]	@ (8004218 <checkAktifCalisma+0xb90>)
 8004014:	2201      	movs	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004018:	4b80      	ldr	r3, [pc, #512]	@ (800421c <checkAktifCalisma+0xb94>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4b80      	ldr	r3, [pc, #512]	@ (8004220 <checkAktifCalisma+0xb98>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	4a80      	ldr	r2, [pc, #512]	@ (8004224 <checkAktifCalisma+0xb9c>)
 8004024:	7812      	ldrb	r2, [r2, #0]
 8004026:	4293      	cmp	r3, r2
 8004028:	d303      	bcc.n	8004032 <checkAktifCalisma+0x9aa>
 800402a:	4b7b      	ldr	r3, [pc, #492]	@ (8004218 <checkAktifCalisma+0xb90>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10d      	bne.n	800404e <checkAktifCalisma+0x9c6>
 8004032:	4b77      	ldr	r3, [pc, #476]	@ (8004210 <checkAktifCalisma+0xb88>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	f083 0301 	eor.w	r3, r3, #1
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d106      	bne.n	800404e <checkAktifCalisma+0x9c6>
 8004040:	4b74      	ldr	r3, [pc, #464]	@ (8004214 <checkAktifCalisma+0xb8c>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	f083 0301 	eor.w	r3, r3, #1
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800404e:	2200      	movs	r2, #0
 8004050:	2110      	movs	r1, #16
 8004052:	486d      	ldr	r0, [pc, #436]	@ (8004208 <checkAktifCalisma+0xb80>)
 8004054:	f005 fd6d 	bl	8009b32 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004058:	4b6c      	ldr	r3, [pc, #432]	@ (800420c <checkAktifCalisma+0xb84>)
 800405a:	2200      	movs	r2, #0
 800405c:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 800405e:	4b6e      	ldr	r3, [pc, #440]	@ (8004218 <checkAktifCalisma+0xb90>)
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004064:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004068:	486f      	ldr	r0, [pc, #444]	@ (8004228 <checkAktifCalisma+0xba0>)
 800406a:	f005 fd4b 	bl	8009b04 <HAL_GPIO_ReadPin>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d120      	bne.n	80040b6 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004074:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004078:	486b      	ldr	r0, [pc, #428]	@ (8004228 <checkAktifCalisma+0xba0>)
 800407a:	f005 fd43 	bl	8009b04 <HAL_GPIO_ReadPin>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d118      	bne.n	80040b6 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004084:	2104      	movs	r1, #4
 8004086:	4868      	ldr	r0, [pc, #416]	@ (8004228 <checkAktifCalisma+0xba0>)
 8004088:	f005 fd3c 	bl	8009b04 <HAL_GPIO_ReadPin>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d111      	bne.n	80040b6 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004092:	2102      	movs	r1, #2
 8004094:	4864      	ldr	r0, [pc, #400]	@ (8004228 <checkAktifCalisma+0xba0>)
 8004096:	f005 fd35 	bl	8009b04 <HAL_GPIO_ReadPin>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80040a0:	2101      	movs	r1, #1
 80040a2:	4861      	ldr	r0, [pc, #388]	@ (8004228 <checkAktifCalisma+0xba0>)
 80040a4:	f005 fd2e 	bl	8009b04 <HAL_GPIO_ReadPin>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d103      	bne.n	80040b6 <checkAktifCalisma+0xa2e>
					makineStop=1;
 80040ae:	4b5f      	ldr	r3, [pc, #380]	@ (800422c <checkAktifCalisma+0xba4>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	e002      	b.n	80040bc <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 80040b6:	4b5d      	ldr	r3, [pc, #372]	@ (800422c <checkAktifCalisma+0xba4>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80040bc:	4b5c      	ldr	r3, [pc, #368]	@ (8004230 <checkAktifCalisma+0xba8>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d144      	bne.n	800414e <checkAktifCalisma+0xac6>
 80040c4:	4b5b      	ldr	r3, [pc, #364]	@ (8004234 <checkAktifCalisma+0xbac>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d003      	beq.n	80040d4 <checkAktifCalisma+0xa4c>
 80040cc:	4b59      	ldr	r3, [pc, #356]	@ (8004234 <checkAktifCalisma+0xbac>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d13c      	bne.n	800414e <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80040d4:	2180      	movs	r1, #128	@ 0x80
 80040d6:	484c      	ldr	r0, [pc, #304]	@ (8004208 <checkAktifCalisma+0xb80>)
 80040d8:	f005 fd14 	bl	8009b04 <HAL_GPIO_ReadPin>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d103      	bne.n	80040ea <checkAktifCalisma+0xa62>
 80040e2:	4b55      	ldr	r3, [pc, #340]	@ (8004238 <checkAktifCalisma+0xbb0>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00b      	beq.n	8004102 <checkAktifCalisma+0xa7a>
 80040ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80040ee:	484e      	ldr	r0, [pc, #312]	@ (8004228 <checkAktifCalisma+0xba0>)
 80040f0:	f005 fd08 	bl	8009b04 <HAL_GPIO_ReadPin>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d129      	bne.n	800414e <checkAktifCalisma+0xac6>
 80040fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004238 <checkAktifCalisma+0xbb0>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d125      	bne.n	800414e <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004102:	2104      	movs	r1, #4
 8004104:	4840      	ldr	r0, [pc, #256]	@ (8004208 <checkAktifCalisma+0xb80>)
 8004106:	f005 fcfd 	bl	8009b04 <HAL_GPIO_ReadPin>
 800410a:	4603      	mov	r3, r0
 800410c:	2b01      	cmp	r3, #1
 800410e:	d003      	beq.n	8004118 <checkAktifCalisma+0xa90>
 8004110:	4b4a      	ldr	r3, [pc, #296]	@ (800423c <checkAktifCalisma+0xbb4>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d11a      	bne.n	800414e <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004118:	2102      	movs	r1, #2
 800411a:	483b      	ldr	r0, [pc, #236]	@ (8004208 <checkAktifCalisma+0xb80>)
 800411c:	f005 fcf2 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d113      	bne.n	800414e <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 8004126:	4b46      	ldr	r3, [pc, #280]	@ (8004240 <checkAktifCalisma+0xbb8>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	f083 0301 	eor.w	r3, r3, #1
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00c      	beq.n	800414e <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8004134:	4b3d      	ldr	r3, [pc, #244]	@ (800422c <checkAktifCalisma+0xba4>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 800413c:	4b41      	ldr	r3, [pc, #260]	@ (8004244 <checkAktifCalisma+0xbbc>)
 800413e:	2201      	movs	r2, #1
 8004140:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004142:	4b36      	ldr	r3, [pc, #216]	@ (800421c <checkAktifCalisma+0xb94>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a40      	ldr	r2, [pc, #256]	@ (8004248 <checkAktifCalisma+0xbc0>)
 8004148:	6013      	str	r3, [r2, #0]
					bekle();
 800414a:	f7ff f901 	bl	8003350 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800414e:	4b33      	ldr	r3, [pc, #204]	@ (800421c <checkAktifCalisma+0xb94>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	4b3d      	ldr	r3, [pc, #244]	@ (8004248 <checkAktifCalisma+0xbc0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	4a3c      	ldr	r2, [pc, #240]	@ (800424c <checkAktifCalisma+0xbc4>)
 800415a:	7812      	ldrb	r2, [r2, #0]
 800415c:	4293      	cmp	r3, r2
 800415e:	d211      	bcs.n	8004184 <checkAktifCalisma+0xafc>
 8004160:	2104      	movs	r1, #4
 8004162:	4829      	ldr	r0, [pc, #164]	@ (8004208 <checkAktifCalisma+0xb80>)
 8004164:	f005 fcce 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <checkAktifCalisma+0xafc>
 800416e:	4b33      	ldr	r3, [pc, #204]	@ (800423c <checkAktifCalisma+0xbb4>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d006      	beq.n	8004184 <checkAktifCalisma+0xafc>
 8004176:	4b2d      	ldr	r3, [pc, #180]	@ (800422c <checkAktifCalisma+0xba4>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	f083 0301 	eor.w	r3, r3, #1
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 8004184:	4b2f      	ldr	r3, [pc, #188]	@ (8004244 <checkAktifCalisma+0xbbc>)
 8004186:	2200      	movs	r2, #0
 8004188:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800418a:	4b29      	ldr	r3, [pc, #164]	@ (8004230 <checkAktifCalisma+0xba8>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d160      	bne.n	8004254 <checkAktifCalisma+0xbcc>
 8004192:	4b28      	ldr	r3, [pc, #160]	@ (8004234 <checkAktifCalisma+0xbac>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d003      	beq.n	80041a2 <checkAktifCalisma+0xb1a>
 800419a:	4b26      	ldr	r3, [pc, #152]	@ (8004234 <checkAktifCalisma+0xbac>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d158      	bne.n	8004254 <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80041a2:	2104      	movs	r1, #4
 80041a4:	4818      	ldr	r0, [pc, #96]	@ (8004208 <checkAktifCalisma+0xb80>)
 80041a6:	f005 fcad 	bl	8009b04 <HAL_GPIO_ReadPin>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d003      	beq.n	80041b8 <checkAktifCalisma+0xb30>
 80041b0:	4b22      	ldr	r3, [pc, #136]	@ (800423c <checkAktifCalisma+0xbb4>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d14d      	bne.n	8004254 <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80041b8:	2102      	movs	r1, #2
 80041ba:	4813      	ldr	r0, [pc, #76]	@ (8004208 <checkAktifCalisma+0xb80>)
 80041bc:	f005 fca2 	bl	8009b04 <HAL_GPIO_ReadPin>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d146      	bne.n	8004254 <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80041c6:	2180      	movs	r1, #128	@ 0x80
 80041c8:	480f      	ldr	r0, [pc, #60]	@ (8004208 <checkAktifCalisma+0xb80>)
 80041ca:	f005 fc9b 	bl	8009b04 <HAL_GPIO_ReadPin>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d103      	bne.n	80041dc <checkAktifCalisma+0xb54>
 80041d4:	4b18      	ldr	r3, [pc, #96]	@ (8004238 <checkAktifCalisma+0xbb0>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00b      	beq.n	80041f4 <checkAktifCalisma+0xb6c>
 80041dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80041e0:	4811      	ldr	r0, [pc, #68]	@ (8004228 <checkAktifCalisma+0xba0>)
 80041e2:	f005 fc8f 	bl	8009b04 <HAL_GPIO_ReadPin>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d133      	bne.n	8004254 <checkAktifCalisma+0xbcc>
 80041ec:	4b12      	ldr	r3, [pc, #72]	@ (8004238 <checkAktifCalisma+0xbb0>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d12f      	bne.n	8004254 <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 80041f4:	4b0d      	ldr	r3, [pc, #52]	@ (800422c <checkAktifCalisma+0xba4>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d02b      	beq.n	8004254 <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 80041fc:	4b14      	ldr	r3, [pc, #80]	@ (8004250 <checkAktifCalisma+0xbc8>)
 80041fe:	2201      	movs	r2, #1
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	e02a      	b.n	800425a <checkAktifCalisma+0xbd2>
 8004204:	20000dd7 	.word	0x20000dd7
 8004208:	40011000 	.word	0x40011000
 800420c:	20000ddb 	.word	0x20000ddb
 8004210:	20000df1 	.word	0x20000df1
 8004214:	20000df2 	.word	0x20000df2
 8004218:	20000dd3 	.word	0x20000dd3
 800421c:	20000d78 	.word	0x20000d78
 8004220:	20000d84 	.word	0x20000d84
 8004224:	20000db6 	.word	0x20000db6
 8004228:	40010c00 	.word	0x40010c00
 800422c:	20000de1 	.word	0x20000de1
 8004230:	20000da9 	.word	0x20000da9
 8004234:	20000da8 	.word	0x20000da8
 8004238:	20000dac 	.word	0x20000dac
 800423c:	20000da6 	.word	0x20000da6
 8004240:	20000dcf 	.word	0x20000dcf
 8004244:	20000de2 	.word	0x20000de2
 8004248:	20000d7c 	.word	0x20000d7c
 800424c:	20000db9 	.word	0x20000db9
 8004250:	20000de3 	.word	0x20000de3
				} else {
					kapi1butonkontrol=0;
 8004254:	4b8b      	ldr	r3, [pc, #556]	@ (8004484 <checkAktifCalisma+0xdfc>)
 8004256:	2200      	movs	r2, #0
 8004258:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800425a:	4b8b      	ldr	r3, [pc, #556]	@ (8004488 <checkAktifCalisma+0xe00>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d121      	bne.n	80042a6 <checkAktifCalisma+0xc1e>
 8004262:	4b8a      	ldr	r3, [pc, #552]	@ (800448c <checkAktifCalisma+0xe04>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d003      	beq.n	8004272 <checkAktifCalisma+0xbea>
 800426a:	4b88      	ldr	r3, [pc, #544]	@ (800448c <checkAktifCalisma+0xe04>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b03      	cmp	r3, #3
 8004270:	d119      	bne.n	80042a6 <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004272:	2104      	movs	r1, #4
 8004274:	4886      	ldr	r0, [pc, #536]	@ (8004490 <checkAktifCalisma+0xe08>)
 8004276:	f005 fc45 	bl	8009b04 <HAL_GPIO_ReadPin>
 800427a:	4603      	mov	r3, r0
 800427c:	2b01      	cmp	r3, #1
 800427e:	d003      	beq.n	8004288 <checkAktifCalisma+0xc00>
 8004280:	4b84      	ldr	r3, [pc, #528]	@ (8004494 <checkAktifCalisma+0xe0c>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10e      	bne.n	80042a6 <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004288:	2102      	movs	r1, #2
 800428a:	4881      	ldr	r0, [pc, #516]	@ (8004490 <checkAktifCalisma+0xe08>)
 800428c:	f005 fc3a 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d107      	bne.n	80042a6 <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 8004296:	4b80      	ldr	r3, [pc, #512]	@ (8004498 <checkAktifCalisma+0xe10>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 800429e:	4b7f      	ldr	r3, [pc, #508]	@ (800449c <checkAktifCalisma+0xe14>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	701a      	strb	r2, [r3, #0]
 80042a4:	e002      	b.n	80042ac <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 80042a6:	4b7d      	ldr	r3, [pc, #500]	@ (800449c <checkAktifCalisma+0xe14>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80042ac:	4b75      	ldr	r3, [pc, #468]	@ (8004484 <checkAktifCalisma+0xdfc>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d107      	bne.n	80042c4 <checkAktifCalisma+0xc3c>
 80042b4:	4b79      	ldr	r3, [pc, #484]	@ (800449c <checkAktifCalisma+0xe14>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d103      	bne.n	80042c4 <checkAktifCalisma+0xc3c>
 80042bc:	4b78      	ldr	r3, [pc, #480]	@ (80044a0 <checkAktifCalisma+0xe18>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80042c4:	2201      	movs	r2, #1
 80042c6:	2180      	movs	r1, #128	@ 0x80
 80042c8:	4876      	ldr	r0, [pc, #472]	@ (80044a4 <checkAktifCalisma+0xe1c>)
 80042ca:	f005 fc32 	bl	8009b32 <HAL_GPIO_WritePin>
 80042ce:	e004      	b.n	80042da <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80042d0:	2200      	movs	r2, #0
 80042d2:	2180      	movs	r1, #128	@ 0x80
 80042d4:	4873      	ldr	r0, [pc, #460]	@ (80044a4 <checkAktifCalisma+0xe1c>)
 80042d6:	f005 fc2c 	bl	8009b32 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80042da:	4b73      	ldr	r3, [pc, #460]	@ (80044a8 <checkAktifCalisma+0xe20>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d141      	bne.n	8004366 <checkAktifCalisma+0xcde>
 80042e2:	4b6a      	ldr	r3, [pc, #424]	@ (800448c <checkAktifCalisma+0xe04>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d003      	beq.n	80042f2 <checkAktifCalisma+0xc6a>
 80042ea:	4b68      	ldr	r3, [pc, #416]	@ (800448c <checkAktifCalisma+0xe04>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d139      	bne.n	8004366 <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80042f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042f6:	4866      	ldr	r0, [pc, #408]	@ (8004490 <checkAktifCalisma+0xe08>)
 80042f8:	f005 fc04 	bl	8009b04 <HAL_GPIO_ReadPin>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d103      	bne.n	800430a <checkAktifCalisma+0xc82>
 8004302:	4b6a      	ldr	r3, [pc, #424]	@ (80044ac <checkAktifCalisma+0xe24>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <checkAktifCalisma+0xc9a>
 800430a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800430e:	4868      	ldr	r0, [pc, #416]	@ (80044b0 <checkAktifCalisma+0xe28>)
 8004310:	f005 fbf8 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d125      	bne.n	8004366 <checkAktifCalisma+0xcde>
 800431a:	4b64      	ldr	r3, [pc, #400]	@ (80044ac <checkAktifCalisma+0xe24>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d121      	bne.n	8004366 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004322:	2102      	movs	r1, #2
 8004324:	485a      	ldr	r0, [pc, #360]	@ (8004490 <checkAktifCalisma+0xe08>)
 8004326:	f005 fbed 	bl	8009b04 <HAL_GPIO_ReadPin>
 800432a:	4603      	mov	r3, r0
 800432c:	2b01      	cmp	r3, #1
 800432e:	d11a      	bne.n	8004366 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004330:	2104      	movs	r1, #4
 8004332:	4857      	ldr	r0, [pc, #348]	@ (8004490 <checkAktifCalisma+0xe08>)
 8004334:	f005 fbe6 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d113      	bne.n	8004366 <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 800433e:	4b56      	ldr	r3, [pc, #344]	@ (8004498 <checkAktifCalisma+0xe10>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00f      	beq.n	8004366 <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 8004346:	4b5b      	ldr	r3, [pc, #364]	@ (80044b4 <checkAktifCalisma+0xe2c>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	f083 0301 	eor.w	r3, r3, #1
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 8004354:	4b58      	ldr	r3, [pc, #352]	@ (80044b8 <checkAktifCalisma+0xe30>)
 8004356:	2201      	movs	r2, #1
 8004358:	701a      	strb	r2, [r3, #0]
					timer = millis;
 800435a:	4b58      	ldr	r3, [pc, #352]	@ (80044bc <checkAktifCalisma+0xe34>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a58      	ldr	r2, [pc, #352]	@ (80044c0 <checkAktifCalisma+0xe38>)
 8004360:	6013      	str	r3, [r2, #0]
					bekle();
 8004362:	f7fe fff5 	bl	8003350 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004366:	4b55      	ldr	r3, [pc, #340]	@ (80044bc <checkAktifCalisma+0xe34>)
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4b55      	ldr	r3, [pc, #340]	@ (80044c0 <checkAktifCalisma+0xe38>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	4a54      	ldr	r2, [pc, #336]	@ (80044c4 <checkAktifCalisma+0xe3c>)
 8004372:	7812      	ldrb	r2, [r2, #0]
 8004374:	4293      	cmp	r3, r2
 8004376:	d20d      	bcs.n	8004394 <checkAktifCalisma+0xd0c>
 8004378:	2102      	movs	r1, #2
 800437a:	4845      	ldr	r0, [pc, #276]	@ (8004490 <checkAktifCalisma+0xe08>)
 800437c:	f005 fbc2 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d006      	beq.n	8004394 <checkAktifCalisma+0xd0c>
 8004386:	4b44      	ldr	r3, [pc, #272]	@ (8004498 <checkAktifCalisma+0xe10>)
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	f083 0301 	eor.w	r3, r3, #1
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 8004394:	4b48      	ldr	r3, [pc, #288]	@ (80044b8 <checkAktifCalisma+0xe30>)
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800439a:	4b43      	ldr	r3, [pc, #268]	@ (80044a8 <checkAktifCalisma+0xe20>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d135      	bne.n	800440e <checkAktifCalisma+0xd86>
 80043a2:	4b3a      	ldr	r3, [pc, #232]	@ (800448c <checkAktifCalisma+0xe04>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d003      	beq.n	80043b2 <checkAktifCalisma+0xd2a>
 80043aa:	4b38      	ldr	r3, [pc, #224]	@ (800448c <checkAktifCalisma+0xe04>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d12d      	bne.n	800440e <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80043b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80043b6:	4836      	ldr	r0, [pc, #216]	@ (8004490 <checkAktifCalisma+0xe08>)
 80043b8:	f005 fba4 	bl	8009b04 <HAL_GPIO_ReadPin>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d103      	bne.n	80043ca <checkAktifCalisma+0xd42>
 80043c2:	4b3a      	ldr	r3, [pc, #232]	@ (80044ac <checkAktifCalisma+0xe24>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <checkAktifCalisma+0xd5a>
 80043ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80043ce:	4838      	ldr	r0, [pc, #224]	@ (80044b0 <checkAktifCalisma+0xe28>)
 80043d0:	f005 fb98 	bl	8009b04 <HAL_GPIO_ReadPin>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d119      	bne.n	800440e <checkAktifCalisma+0xd86>
 80043da:	4b34      	ldr	r3, [pc, #208]	@ (80044ac <checkAktifCalisma+0xe24>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d115      	bne.n	800440e <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80043e2:	2102      	movs	r1, #2
 80043e4:	482a      	ldr	r0, [pc, #168]	@ (8004490 <checkAktifCalisma+0xe08>)
 80043e6:	f005 fb8d 	bl	8009b04 <HAL_GPIO_ReadPin>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d10e      	bne.n	800440e <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80043f0:	2104      	movs	r1, #4
 80043f2:	4827      	ldr	r0, [pc, #156]	@ (8004490 <checkAktifCalisma+0xe08>)
 80043f4:	f005 fb86 	bl	8009b04 <HAL_GPIO_ReadPin>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d107      	bne.n	800440e <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 80043fe:	4b26      	ldr	r3, [pc, #152]	@ (8004498 <checkAktifCalisma+0xe10>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 8004406:	4b30      	ldr	r3, [pc, #192]	@ (80044c8 <checkAktifCalisma+0xe40>)
 8004408:	2201      	movs	r2, #1
 800440a:	701a      	strb	r2, [r3, #0]
 800440c:	e002      	b.n	8004414 <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 800440e:	4b2e      	ldr	r3, [pc, #184]	@ (80044c8 <checkAktifCalisma+0xe40>)
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004414:	4b24      	ldr	r3, [pc, #144]	@ (80044a8 <checkAktifCalisma+0xe20>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d11d      	bne.n	8004458 <checkAktifCalisma+0xdd0>
 800441c:	4b1b      	ldr	r3, [pc, #108]	@ (800448c <checkAktifCalisma+0xe04>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d003      	beq.n	800442c <checkAktifCalisma+0xda4>
 8004424:	4b19      	ldr	r3, [pc, #100]	@ (800448c <checkAktifCalisma+0xe04>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b03      	cmp	r3, #3
 800442a:	d115      	bne.n	8004458 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800442c:	2102      	movs	r1, #2
 800442e:	4818      	ldr	r0, [pc, #96]	@ (8004490 <checkAktifCalisma+0xe08>)
 8004430:	f005 fb68 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004434:	4603      	mov	r3, r0
 8004436:	2b01      	cmp	r3, #1
 8004438:	d10e      	bne.n	8004458 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800443a:	2104      	movs	r1, #4
 800443c:	4814      	ldr	r0, [pc, #80]	@ (8004490 <checkAktifCalisma+0xe08>)
 800443e:	f005 fb61 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d107      	bne.n	8004458 <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 8004448:	4b13      	ldr	r3, [pc, #76]	@ (8004498 <checkAktifCalisma+0xe10>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8004450:	4b1e      	ldr	r3, [pc, #120]	@ (80044cc <checkAktifCalisma+0xe44>)
 8004452:	2201      	movs	r2, #1
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	e002      	b.n	800445e <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8004458:	4b1c      	ldr	r3, [pc, #112]	@ (80044cc <checkAktifCalisma+0xe44>)
 800445a:	2200      	movs	r2, #0
 800445c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800445e:	4b1a      	ldr	r3, [pc, #104]	@ (80044c8 <checkAktifCalisma+0xe40>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d107      	bne.n	8004476 <checkAktifCalisma+0xdee>
 8004466:	4b19      	ldr	r3, [pc, #100]	@ (80044cc <checkAktifCalisma+0xe44>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d103      	bne.n	8004476 <checkAktifCalisma+0xdee>
 800446e:	4b12      	ldr	r3, [pc, #72]	@ (80044b8 <checkAktifCalisma+0xe30>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d02c      	beq.n	80044d0 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8004476:	2201      	movs	r2, #1
 8004478:	2140      	movs	r1, #64	@ 0x40
 800447a:	480a      	ldr	r0, [pc, #40]	@ (80044a4 <checkAktifCalisma+0xe1c>)
 800447c:	f005 fb59 	bl	8009b32 <HAL_GPIO_WritePin>
 8004480:	e02b      	b.n	80044da <checkAktifCalisma+0xe52>
 8004482:	bf00      	nop
 8004484:	20000de3 	.word	0x20000de3
 8004488:	20000da9 	.word	0x20000da9
 800448c:	20000da8 	.word	0x20000da8
 8004490:	40011000 	.word	0x40011000
 8004494:	20000da6 	.word	0x20000da6
 8004498:	20000de1 	.word	0x20000de1
 800449c:	20000de4 	.word	0x20000de4
 80044a0:	20000de2 	.word	0x20000de2
 80044a4:	40010800 	.word	0x40010800
 80044a8:	20000daa 	.word	0x20000daa
 80044ac:	20000dac 	.word	0x20000dac
 80044b0:	40010c00 	.word	0x40010c00
 80044b4:	20000dcf 	.word	0x20000dcf
 80044b8:	20000de5 	.word	0x20000de5
 80044bc:	20000d78 	.word	0x20000d78
 80044c0:	20000d7c 	.word	0x20000d7c
 80044c4:	20000dba 	.word	0x20000dba
 80044c8:	20000de6 	.word	0x20000de6
 80044cc:	20000de7 	.word	0x20000de7
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80044d0:	2200      	movs	r2, #0
 80044d2:	2140      	movs	r1, #64	@ 0x40
 80044d4:	4835      	ldr	r0, [pc, #212]	@ (80045ac <checkAktifCalisma+0xf24>)
 80044d6:	f005 fb2c 	bl	8009b32 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 80044da:	4b35      	ldr	r3, [pc, #212]	@ (80045b0 <checkAktifCalisma+0xf28>)
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <checkAktifCalisma+0xe62>
 80044e2:	4b33      	ldr	r3, [pc, #204]	@ (80045b0 <checkAktifCalisma+0xf28>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d115      	bne.n	8004516 <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80044ea:	2104      	movs	r1, #4
 80044ec:	4831      	ldr	r0, [pc, #196]	@ (80045b4 <checkAktifCalisma+0xf2c>)
 80044ee:	f005 fb09 	bl	8009b04 <HAL_GPIO_ReadPin>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d003      	beq.n	8004500 <checkAktifCalisma+0xe78>
 80044f8:	4b2f      	ldr	r3, [pc, #188]	@ (80045b8 <checkAktifCalisma+0xf30>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8004500:	2102      	movs	r1, #2
 8004502:	482c      	ldr	r0, [pc, #176]	@ (80045b4 <checkAktifCalisma+0xf2c>)
 8004504:	f005 fafe 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d103      	bne.n	8004516 <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 800450e:	4b2b      	ldr	r3, [pc, #172]	@ (80045bc <checkAktifCalisma+0xf34>)
 8004510:	2201      	movs	r2, #1
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	e002      	b.n	800451c <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 8004516:	4b29      	ldr	r3, [pc, #164]	@ (80045bc <checkAktifCalisma+0xf34>)
 8004518:	2200      	movs	r2, #0
 800451a:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 800451c:	4b24      	ldr	r3, [pc, #144]	@ (80045b0 <checkAktifCalisma+0xf28>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d003      	beq.n	800452c <checkAktifCalisma+0xea4>
 8004524:	4b22      	ldr	r3, [pc, #136]	@ (80045b0 <checkAktifCalisma+0xf28>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b02      	cmp	r3, #2
 800452a:	d111      	bne.n	8004550 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800452c:	2102      	movs	r1, #2
 800452e:	4821      	ldr	r0, [pc, #132]	@ (80045b4 <checkAktifCalisma+0xf2c>)
 8004530:	f005 fae8 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d10a      	bne.n	8004550 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 800453a:	2104      	movs	r1, #4
 800453c:	481d      	ldr	r0, [pc, #116]	@ (80045b4 <checkAktifCalisma+0xf2c>)
 800453e:	f005 fae1 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d103      	bne.n	8004550 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8004548:	4b1d      	ldr	r3, [pc, #116]	@ (80045c0 <checkAktifCalisma+0xf38>)
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	e002      	b.n	8004556 <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8004550:	4b1b      	ldr	r3, [pc, #108]	@ (80045c0 <checkAktifCalisma+0xf38>)
 8004552:	2200      	movs	r2, #0
 8004554:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8004556:	4b19      	ldr	r3, [pc, #100]	@ (80045bc <checkAktifCalisma+0xf34>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00f      	beq.n	800457e <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 800455e:	4b19      	ldr	r3, [pc, #100]	@ (80045c4 <checkAktifCalisma+0xf3c>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d10b      	bne.n	800457e <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8004566:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800456a:	4817      	ldr	r0, [pc, #92]	@ (80045c8 <checkAktifCalisma+0xf40>)
 800456c:	f005 faca 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d103      	bne.n	800457e <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 8004576:	4b15      	ldr	r3, [pc, #84]	@ (80045cc <checkAktifCalisma+0xf44>)
 8004578:	2201      	movs	r2, #1
 800457a:	701a      	strb	r2, [r3, #0]
 800457c:	e002      	b.n	8004584 <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 800457e:	4b13      	ldr	r3, [pc, #76]	@ (80045cc <checkAktifCalisma+0xf44>)
 8004580:	2200      	movs	r2, #0
 8004582:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8004584:	4b0e      	ldr	r3, [pc, #56]	@ (80045c0 <checkAktifCalisma+0xf38>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d023      	beq.n	80045d4 <checkAktifCalisma+0xf4c>
						&& kapiAcTipi==1
 800458c:	4b0d      	ldr	r3, [pc, #52]	@ (80045c4 <checkAktifCalisma+0xf3c>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d11f      	bne.n	80045d4 <checkAktifCalisma+0xf4c>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8004594:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004598:	480b      	ldr	r0, [pc, #44]	@ (80045c8 <checkAktifCalisma+0xf40>)
 800459a:	f005 fab3 	bl	8009b04 <HAL_GPIO_ReadPin>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d117      	bne.n	80045d4 <checkAktifCalisma+0xf4c>

					kapiactablaesp2=1;
 80045a4:	4b0a      	ldr	r3, [pc, #40]	@ (80045d0 <checkAktifCalisma+0xf48>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	701a      	strb	r2, [r3, #0]
 80045aa:	e016      	b.n	80045da <checkAktifCalisma+0xf52>
 80045ac:	40010800 	.word	0x40010800
 80045b0:	20000dad 	.word	0x20000dad
 80045b4:	40011000 	.word	0x40011000
 80045b8:	20000da6 	.word	0x20000da6
 80045bc:	20000deb 	.word	0x20000deb
 80045c0:	20000dec 	.word	0x20000dec
 80045c4:	20000dac 	.word	0x20000dac
 80045c8:	40010c00 	.word	0x40010c00
 80045cc:	20000dfb 	.word	0x20000dfb
 80045d0:	20000dfc 	.word	0x20000dfc
				} else {
					kapiactablaesp2=0;
 80045d4:	4b7e      	ldr	r3, [pc, #504]	@ (80047d0 <checkAktifCalisma+0x1148>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80045da:	4b7e      	ldr	r3, [pc, #504]	@ (80047d4 <checkAktifCalisma+0x114c>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d154      	bne.n	800468c <checkAktifCalisma+0x1004>
 80045e2:	4b7d      	ldr	r3, [pc, #500]	@ (80047d8 <checkAktifCalisma+0x1150>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d003      	beq.n	80045f2 <checkAktifCalisma+0xf6a>
 80045ea:	4b7b      	ldr	r3, [pc, #492]	@ (80047d8 <checkAktifCalisma+0x1150>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d14c      	bne.n	800468c <checkAktifCalisma+0x1004>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80045f2:	4b7a      	ldr	r3, [pc, #488]	@ (80047dc <checkAktifCalisma+0x1154>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d103      	bne.n	8004602 <checkAktifCalisma+0xf7a>
 80045fa:	4b79      	ldr	r3, [pc, #484]	@ (80047e0 <checkAktifCalisma+0x1158>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d044      	beq.n	800468c <checkAktifCalisma+0x1004>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8004602:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004606:	4877      	ldr	r0, [pc, #476]	@ (80047e4 <checkAktifCalisma+0x115c>)
 8004608:	f005 fa7c 	bl	8009b04 <HAL_GPIO_ReadPin>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d01c      	beq.n	800464c <checkAktifCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8004612:	2180      	movs	r1, #128	@ 0x80
 8004614:	4873      	ldr	r0, [pc, #460]	@ (80047e4 <checkAktifCalisma+0x115c>)
 8004616:	f005 fa75 	bl	8009b04 <HAL_GPIO_ReadPin>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <checkAktifCalisma+0xfa6>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8004620:	2104      	movs	r1, #4
 8004622:	4870      	ldr	r0, [pc, #448]	@ (80047e4 <checkAktifCalisma+0x115c>)
 8004624:	f005 fa6e 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004628:	4603      	mov	r3, r0
 800462a:	2b01      	cmp	r3, #1
 800462c:	d00e      	beq.n	800464c <checkAktifCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 800462e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004632:	486c      	ldr	r0, [pc, #432]	@ (80047e4 <checkAktifCalisma+0x115c>)
 8004634:	f005 fa66 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10a      	bne.n	8004654 <checkAktifCalisma+0xfcc>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 800463e:	2102      	movs	r1, #2
 8004640:	4868      	ldr	r0, [pc, #416]	@ (80047e4 <checkAktifCalisma+0x115c>)
 8004642:	f005 fa5f 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004646:	4603      	mov	r3, r0
 8004648:	2b01      	cmp	r3, #1
 800464a:	d103      	bne.n	8004654 <checkAktifCalisma+0xfcc>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800464c:	4b66      	ldr	r3, [pc, #408]	@ (80047e8 <checkAktifCalisma+0x1160>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d007      	beq.n	8004664 <checkAktifCalisma+0xfdc>
 8004654:	4b65      	ldr	r3, [pc, #404]	@ (80047ec <checkAktifCalisma+0x1164>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d103      	bne.n	8004664 <checkAktifCalisma+0xfdc>
 800465c:	4b5c      	ldr	r3, [pc, #368]	@ (80047d0 <checkAktifCalisma+0x1148>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d013      	beq.n	800468c <checkAktifCalisma+0x1004>
						&&(makineStop==1)
 8004664:	4b62      	ldr	r3, [pc, #392]	@ (80047f0 <checkAktifCalisma+0x1168>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00f      	beq.n	800468c <checkAktifCalisma+0x1004>
						&&(butonKontrol==0)) {
 800466c:	4b61      	ldr	r3, [pc, #388]	@ (80047f4 <checkAktifCalisma+0x116c>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	f083 0301 	eor.w	r3, r3, #1
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <checkAktifCalisma+0x1004>

					kapiTablaprudhome=1;
 800467a:	4b5f      	ldr	r3, [pc, #380]	@ (80047f8 <checkAktifCalisma+0x1170>)
 800467c:	2201      	movs	r2, #1
 800467e:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004680:	4b5e      	ldr	r3, [pc, #376]	@ (80047fc <checkAktifCalisma+0x1174>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a5e      	ldr	r2, [pc, #376]	@ (8004800 <checkAktifCalisma+0x1178>)
 8004686:	6013      	str	r3, [r2, #0]
					bekle();
 8004688:	f7fe fe62 	bl	8003350 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 800468c:	4b5b      	ldr	r3, [pc, #364]	@ (80047fc <checkAktifCalisma+0x1174>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b5b      	ldr	r3, [pc, #364]	@ (8004800 <checkAktifCalisma+0x1178>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	4a5b      	ldr	r2, [pc, #364]	@ (8004804 <checkAktifCalisma+0x117c>)
 8004698:	7812      	ldrb	r2, [r2, #0]
 800469a:	4293      	cmp	r3, r2
 800469c:	d214      	bcs.n	80046c8 <checkAktifCalisma+0x1040>
 800469e:	4b4f      	ldr	r3, [pc, #316]	@ (80047dc <checkAktifCalisma+0x1154>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	f083 0301 	eor.w	r3, r3, #1
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d006      	beq.n	80046ba <checkAktifCalisma+0x1032>
 80046ac:	4b4c      	ldr	r3, [pc, #304]	@ (80047e0 <checkAktifCalisma+0x1158>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	f083 0301 	eor.w	r3, r3, #1
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <checkAktifCalisma+0x1040>
 80046ba:	4b4d      	ldr	r3, [pc, #308]	@ (80047f0 <checkAktifCalisma+0x1168>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	f083 0301 	eor.w	r3, r3, #1
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <checkAktifCalisma+0x1046>
					kapiTablaprudhome=0;
 80046c8:	4b4b      	ldr	r3, [pc, #300]	@ (80047f8 <checkAktifCalisma+0x1170>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80046ce:	4b41      	ldr	r3, [pc, #260]	@ (80047d4 <checkAktifCalisma+0x114c>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d148      	bne.n	8004768 <checkAktifCalisma+0x10e0>
 80046d6:	4b40      	ldr	r3, [pc, #256]	@ (80047d8 <checkAktifCalisma+0x1150>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d003      	beq.n	80046e6 <checkAktifCalisma+0x105e>
 80046de:	4b3e      	ldr	r3, [pc, #248]	@ (80047d8 <checkAktifCalisma+0x1150>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d140      	bne.n	8004768 <checkAktifCalisma+0x10e0>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80046e6:	4b3d      	ldr	r3, [pc, #244]	@ (80047dc <checkAktifCalisma+0x1154>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d103      	bne.n	80046f6 <checkAktifCalisma+0x106e>
 80046ee:	4b3c      	ldr	r3, [pc, #240]	@ (80047e0 <checkAktifCalisma+0x1158>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d038      	beq.n	8004768 <checkAktifCalisma+0x10e0>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 80046f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80046fa:	483a      	ldr	r0, [pc, #232]	@ (80047e4 <checkAktifCalisma+0x115c>)
 80046fc:	f005 fa02 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01c      	beq.n	8004740 <checkAktifCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8004706:	2180      	movs	r1, #128	@ 0x80
 8004708:	4836      	ldr	r0, [pc, #216]	@ (80047e4 <checkAktifCalisma+0x115c>)
 800470a:	f005 f9fb 	bl	8009b04 <HAL_GPIO_ReadPin>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d106      	bne.n	8004722 <checkAktifCalisma+0x109a>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8004714:	2104      	movs	r1, #4
 8004716:	4833      	ldr	r0, [pc, #204]	@ (80047e4 <checkAktifCalisma+0x115c>)
 8004718:	f005 f9f4 	bl	8009b04 <HAL_GPIO_ReadPin>
 800471c:	4603      	mov	r3, r0
 800471e:	2b01      	cmp	r3, #1
 8004720:	d00e      	beq.n	8004740 <checkAktifCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8004722:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004726:	482f      	ldr	r0, [pc, #188]	@ (80047e4 <checkAktifCalisma+0x115c>)
 8004728:	f005 f9ec 	bl	8009b04 <HAL_GPIO_ReadPin>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10a      	bne.n	8004748 <checkAktifCalisma+0x10c0>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8004732:	2102      	movs	r1, #2
 8004734:	482b      	ldr	r0, [pc, #172]	@ (80047e4 <checkAktifCalisma+0x115c>)
 8004736:	f005 f9e5 	bl	8009b04 <HAL_GPIO_ReadPin>
 800473a:	4603      	mov	r3, r0
 800473c:	2b01      	cmp	r3, #1
 800473e:	d103      	bne.n	8004748 <checkAktifCalisma+0x10c0>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8004740:	4b29      	ldr	r3, [pc, #164]	@ (80047e8 <checkAktifCalisma+0x1160>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <checkAktifCalisma+0x10d0>
 8004748:	4b28      	ldr	r3, [pc, #160]	@ (80047ec <checkAktifCalisma+0x1164>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <checkAktifCalisma+0x10d0>
 8004750:	4b1f      	ldr	r3, [pc, #124]	@ (80047d0 <checkAktifCalisma+0x1148>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <checkAktifCalisma+0x10e0>
						&&(makineStop==1)) {
 8004758:	4b25      	ldr	r3, [pc, #148]	@ (80047f0 <checkAktifCalisma+0x1168>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <checkAktifCalisma+0x10e0>

					kapiTablabutonkontrol=1;
 8004760:	4b29      	ldr	r3, [pc, #164]	@ (8004808 <checkAktifCalisma+0x1180>)
 8004762:	2201      	movs	r2, #1
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e002      	b.n	800476e <checkAktifCalisma+0x10e6>
				} else {
					kapiTablabutonkontrol=0;
 8004768:	4b27      	ldr	r3, [pc, #156]	@ (8004808 <checkAktifCalisma+0x1180>)
 800476a:	2200      	movs	r2, #0
 800476c:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800476e:	4b19      	ldr	r3, [pc, #100]	@ (80047d4 <checkAktifCalisma+0x114c>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d117      	bne.n	80047a6 <checkAktifCalisma+0x111e>
 8004776:	4b18      	ldr	r3, [pc, #96]	@ (80047d8 <checkAktifCalisma+0x1150>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d003      	beq.n	8004786 <checkAktifCalisma+0x10fe>
 800477e:	4b16      	ldr	r3, [pc, #88]	@ (80047d8 <checkAktifCalisma+0x1150>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b03      	cmp	r3, #3
 8004784:	d10f      	bne.n	80047a6 <checkAktifCalisma+0x111e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004786:	4b15      	ldr	r3, [pc, #84]	@ (80047dc <checkAktifCalisma+0x1154>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d103      	bne.n	8004796 <checkAktifCalisma+0x110e>
 800478e:	4b14      	ldr	r3, [pc, #80]	@ (80047e0 <checkAktifCalisma+0x1158>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d007      	beq.n	80047a6 <checkAktifCalisma+0x111e>
						&&(makineStop==1)) {
 8004796:	4b16      	ldr	r3, [pc, #88]	@ (80047f0 <checkAktifCalisma+0x1168>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <checkAktifCalisma+0x111e>

					kapiTablapizzato=1;
 800479e:	4b1b      	ldr	r3, [pc, #108]	@ (800480c <checkAktifCalisma+0x1184>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	701a      	strb	r2, [r3, #0]
 80047a4:	e002      	b.n	80047ac <checkAktifCalisma+0x1124>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 80047a6:	4b19      	ldr	r3, [pc, #100]	@ (800480c <checkAktifCalisma+0x1184>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80047ac:	4b16      	ldr	r3, [pc, #88]	@ (8004808 <checkAktifCalisma+0x1180>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d107      	bne.n	80047c4 <checkAktifCalisma+0x113c>
 80047b4:	4b10      	ldr	r3, [pc, #64]	@ (80047f8 <checkAktifCalisma+0x1170>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d103      	bne.n	80047c4 <checkAktifCalisma+0x113c>
 80047bc:	4b13      	ldr	r3, [pc, #76]	@ (800480c <checkAktifCalisma+0x1184>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d027      	beq.n	8004814 <checkAktifCalisma+0x118c>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80047c4:	2201      	movs	r2, #1
 80047c6:	2120      	movs	r1, #32
 80047c8:	4811      	ldr	r0, [pc, #68]	@ (8004810 <checkAktifCalisma+0x1188>)
 80047ca:	f005 f9b2 	bl	8009b32 <HAL_GPIO_WritePin>
 80047ce:	e026      	b.n	800481e <checkAktifCalisma+0x1196>
 80047d0:	20000dfc 	.word	0x20000dfc
 80047d4:	20000dab 	.word	0x20000dab
 80047d8:	20000da8 	.word	0x20000da8
 80047dc:	20000deb 	.word	0x20000deb
 80047e0:	20000dec 	.word	0x20000dec
 80047e4:	40011000 	.word	0x40011000
 80047e8:	20000dac 	.word	0x20000dac
 80047ec:	20000dfb 	.word	0x20000dfb
 80047f0:	20000de1 	.word	0x20000de1
 80047f4:	20000dcf 	.word	0x20000dcf
 80047f8:	20000de8 	.word	0x20000de8
 80047fc:	20000d78 	.word	0x20000d78
 8004800:	20000d7c 	.word	0x20000d7c
 8004804:	20000dbb 	.word	0x20000dbb
 8004808:	20000de9 	.word	0x20000de9
 800480c:	20000dea 	.word	0x20000dea
 8004810:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8004814:	2200      	movs	r2, #0
 8004816:	2120      	movs	r1, #32
 8004818:	4887      	ldr	r0, [pc, #540]	@ (8004a38 <checkAktifCalisma+0x13b0>)
 800481a:	f005 f98a 	bl	8009b32 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 800481e:	4b87      	ldr	r3, [pc, #540]	@ (8004a3c <checkAktifCalisma+0x13b4>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00e      	beq.n	8004844 <checkAktifCalisma+0x11bc>
 8004826:	2102      	movs	r1, #2
 8004828:	4885      	ldr	r0, [pc, #532]	@ (8004a40 <checkAktifCalisma+0x13b8>)
 800482a:	f005 f96b 	bl	8009b04 <HAL_GPIO_ReadPin>
 800482e:	4603      	mov	r3, r0
 8004830:	2b01      	cmp	r3, #1
 8004832:	d107      	bne.n	8004844 <checkAktifCalisma+0x11bc>
 8004834:	4b83      	ldr	r3, [pc, #524]	@ (8004a44 <checkAktifCalisma+0x13bc>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d103      	bne.n	8004844 <checkAktifCalisma+0x11bc>
 800483c:	4b82      	ldr	r3, [pc, #520]	@ (8004a48 <checkAktifCalisma+0x13c0>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d112      	bne.n	800486a <checkAktifCalisma+0x11e2>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8004844:	4b81      	ldr	r3, [pc, #516]	@ (8004a4c <checkAktifCalisma+0x13c4>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d032      	beq.n	80048b2 <checkAktifCalisma+0x122a>
 800484c:	2104      	movs	r1, #4
 800484e:	487c      	ldr	r0, [pc, #496]	@ (8004a40 <checkAktifCalisma+0x13b8>)
 8004850:	f005 f958 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004854:	4603      	mov	r3, r0
 8004856:	2b01      	cmp	r3, #1
 8004858:	d12b      	bne.n	80048b2 <checkAktifCalisma+0x122a>
 800485a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a44 <checkAktifCalisma+0x13bc>)
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d027      	beq.n	80048b2 <checkAktifCalisma+0x122a>
 8004862:	4b79      	ldr	r3, [pc, #484]	@ (8004a48 <checkAktifCalisma+0x13c0>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d023      	beq.n	80048b2 <checkAktifCalisma+0x122a>



					calismaSayisi=calismaSayisi+254;
 800486a:	4b79      	ldr	r3, [pc, #484]	@ (8004a50 <checkAktifCalisma+0x13c8>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	3b02      	subs	r3, #2
 8004870:	b2da      	uxtb	r2, r3
 8004872:	4b77      	ldr	r3, [pc, #476]	@ (8004a50 <checkAktifCalisma+0x13c8>)
 8004874:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8004876:	4b76      	ldr	r3, [pc, #472]	@ (8004a50 <checkAktifCalisma+0x13c8>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2bff      	cmp	r3, #255	@ 0xff
 800487c:	d108      	bne.n	8004890 <checkAktifCalisma+0x1208>
						calismaSayisi = 0;
 800487e:	4b74      	ldr	r3, [pc, #464]	@ (8004a50 <checkAktifCalisma+0x13c8>)
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 8004884:	4b73      	ldr	r3, [pc, #460]	@ (8004a54 <checkAktifCalisma+0x13cc>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	3301      	adds	r3, #1
 800488a:	b2da      	uxtb	r2, r3
 800488c:	4b71      	ldr	r3, [pc, #452]	@ (8004a54 <checkAktifCalisma+0x13cc>)
 800488e:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 8004890:	4b6f      	ldr	r3, [pc, #444]	@ (8004a50 <checkAktifCalisma+0x13c8>)
 8004892:	781a      	ldrb	r2, [r3, #0]
 8004894:	4b70      	ldr	r3, [pc, #448]	@ (8004a58 <checkAktifCalisma+0x13d0>)
 8004896:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 8004898:	4b6e      	ldr	r3, [pc, #440]	@ (8004a54 <checkAktifCalisma+0x13cc>)
 800489a:	781a      	ldrb	r2, [r3, #0]
 800489c:	4b6e      	ldr	r3, [pc, #440]	@ (8004a58 <checkAktifCalisma+0x13d0>)
 800489e:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 80048a0:	4b6e      	ldr	r3, [pc, #440]	@ (8004a5c <checkAktifCalisma+0x13d4>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 80048a6:	4b65      	ldr	r3, [pc, #404]	@ (8004a3c <checkAktifCalisma+0x13b4>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 80048ac:	4b67      	ldr	r3, [pc, #412]	@ (8004a4c <checkAktifCalisma+0x13c4>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80048b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80048b6:	486a      	ldr	r0, [pc, #424]	@ (8004a60 <checkAktifCalisma+0x13d8>)
 80048b8:	f005 f924 	bl	8009b04 <HAL_GPIO_ReadPin>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d016      	beq.n	80048f0 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80048c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80048c6:	4866      	ldr	r0, [pc, #408]	@ (8004a60 <checkAktifCalisma+0x13d8>)
 80048c8:	f005 f91c 	bl	8009b04 <HAL_GPIO_ReadPin>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00e      	beq.n	80048f0 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80048d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80048d6:	4862      	ldr	r0, [pc, #392]	@ (8004a60 <checkAktifCalisma+0x13d8>)
 80048d8:	f005 f914 	bl	8009b04 <HAL_GPIO_ReadPin>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d006      	beq.n	80048f0 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80048e2:	2140      	movs	r1, #64	@ 0x40
 80048e4:	4856      	ldr	r0, [pc, #344]	@ (8004a40 <checkAktifCalisma+0x13b8>)
 80048e6:	f005 f90d 	bl	8009b04 <HAL_GPIO_ReadPin>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d103      	bne.n	80048f8 <checkAktifCalisma+0x1270>

					startBasili=1;
 80048f0:	4b5c      	ldr	r3, [pc, #368]	@ (8004a64 <checkAktifCalisma+0x13dc>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	701a      	strb	r2, [r3, #0]
 80048f6:	e002      	b.n	80048fe <checkAktifCalisma+0x1276>
				} else {
					startBasili=0;
 80048f8:	4b5a      	ldr	r3, [pc, #360]	@ (8004a64 <checkAktifCalisma+0x13dc>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80048fe:	4b59      	ldr	r3, [pc, #356]	@ (8004a64 <checkAktifCalisma+0x13dc>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d014      	beq.n	8004930 <checkAktifCalisma+0x12a8>
 8004906:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800490a:	4855      	ldr	r0, [pc, #340]	@ (8004a60 <checkAktifCalisma+0x13d8>)
 800490c:	f005 f8fa 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004910:	4603      	mov	r3, r0
 8004912:	2b01      	cmp	r3, #1
 8004914:	d10c      	bne.n	8004930 <checkAktifCalisma+0x12a8>

					hataVar=1;
 8004916:	4b54      	ldr	r3, [pc, #336]	@ (8004a68 <checkAktifCalisma+0x13e0>)
 8004918:	2201      	movs	r2, #1
 800491a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 800491c:	2001      	movs	r0, #1
 800491e:	f7fb ffa3 	bl	8000868 <hataKoduLcdGoster>
					hata2EEPROM(1);
 8004922:	2001      	movs	r0, #1
 8004924:	f7fb ff48 	bl	80007b8 <hata2EEPROM>
					acilstophatasi=1;
 8004928:	4b50      	ldr	r3, [pc, #320]	@ (8004a6c <checkAktifCalisma+0x13e4>)
 800492a:	2201      	movs	r2, #1
 800492c:	701a      	strb	r2, [r3, #0]
 800492e:	e018      	b.n	8004962 <checkAktifCalisma+0x12da>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8004930:	4b4e      	ldr	r3, [pc, #312]	@ (8004a6c <checkAktifCalisma+0x13e4>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d014      	beq.n	8004962 <checkAktifCalisma+0x12da>
 8004938:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800493c:	4848      	ldr	r0, [pc, #288]	@ (8004a60 <checkAktifCalisma+0x13d8>)
 800493e:	f005 f8e1 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10c      	bne.n	8004962 <checkAktifCalisma+0x12da>
 8004948:	4b46      	ldr	r3, [pc, #280]	@ (8004a64 <checkAktifCalisma+0x13dc>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	f083 0301 	eor.w	r3, r3, #1
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d005      	beq.n	8004962 <checkAktifCalisma+0x12da>
					acilstophatasi=0;
 8004956:	4b45      	ldr	r3, [pc, #276]	@ (8004a6c <checkAktifCalisma+0x13e4>)
 8004958:	2200      	movs	r2, #0
 800495a:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 800495c:	2001      	movs	r0, #1
 800495e:	f7fe fc8d 	bl	800327c <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 8004962:	4b43      	ldr	r3, [pc, #268]	@ (8004a70 <checkAktifCalisma+0x13e8>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	f083 0301 	eor.w	r3, r3, #1
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d023      	beq.n	80049b8 <checkAktifCalisma+0x1330>
 8004970:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004974:	483a      	ldr	r0, [pc, #232]	@ (8004a60 <checkAktifCalisma+0x13d8>)
 8004976:	f005 f8c5 	bl	8009b04 <HAL_GPIO_ReadPin>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <checkAktifCalisma+0x1300>
 8004980:	4b3c      	ldr	r3, [pc, #240]	@ (8004a74 <checkAktifCalisma+0x13ec>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d017      	beq.n	80049b8 <checkAktifCalisma+0x1330>
 8004988:	4b3b      	ldr	r3, [pc, #236]	@ (8004a78 <checkAktifCalisma+0x13f0>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d113      	bne.n	80049b8 <checkAktifCalisma+0x1330>
 8004990:	4b3a      	ldr	r3, [pc, #232]	@ (8004a7c <checkAktifCalisma+0x13f4>)
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	f083 0301 	eor.w	r3, r3, #1
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00c      	beq.n	80049b8 <checkAktifCalisma+0x1330>
					hataVar=1;
 800499e:	4b32      	ldr	r3, [pc, #200]	@ (8004a68 <checkAktifCalisma+0x13e0>)
 80049a0:	2201      	movs	r2, #1
 80049a2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 80049a4:	2002      	movs	r0, #2
 80049a6:	f7fb ff5f 	bl	8000868 <hataKoduLcdGoster>
					hata2EEPROM(2);
 80049aa:	2002      	movs	r0, #2
 80049ac:	f7fb ff04 	bl	80007b8 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 80049b0:	4b32      	ldr	r3, [pc, #200]	@ (8004a7c <checkAktifCalisma+0x13f4>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	e017      	b.n	80049e8 <checkAktifCalisma+0x1360>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80049b8:	4b30      	ldr	r3, [pc, #192]	@ (8004a7c <checkAktifCalisma+0x13f4>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d013      	beq.n	80049e8 <checkAktifCalisma+0x1360>
 80049c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004a70 <checkAktifCalisma+0x13e8>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00f      	beq.n	80049e8 <checkAktifCalisma+0x1360>
 80049c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004a80 <checkAktifCalisma+0x13f8>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	f083 0301 	eor.w	r3, r3, #1
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d008      	beq.n	80049e8 <checkAktifCalisma+0x1360>
					emniyetCercevesihatasi=0;
 80049d6:	4b29      	ldr	r3, [pc, #164]	@ (8004a7c <checkAktifCalisma+0x13f4>)
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 80049dc:	4b25      	ldr	r3, [pc, #148]	@ (8004a74 <checkAktifCalisma+0x13ec>)
 80049de:	2200      	movs	r2, #0
 80049e0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 80049e2:	2002      	movs	r0, #2
 80049e4:	f7fe fc4a 	bl	800327c <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 80049e8:	4b26      	ldr	r3, [pc, #152]	@ (8004a84 <checkAktifCalisma+0x13fc>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d151      	bne.n	8004a94 <checkAktifCalisma+0x140c>
 80049f0:	4b25      	ldr	r3, [pc, #148]	@ (8004a88 <checkAktifCalisma+0x1400>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d14d      	bne.n	8004a94 <checkAktifCalisma+0x140c>
 80049f8:	4b24      	ldr	r3, [pc, #144]	@ (8004a8c <checkAktifCalisma+0x1404>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d049      	beq.n	8004a94 <checkAktifCalisma+0x140c>
 8004a00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a04:	480e      	ldr	r0, [pc, #56]	@ (8004a40 <checkAktifCalisma+0x13b8>)
 8004a06:	f005 f87d 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d141      	bne.n	8004a94 <checkAktifCalisma+0x140c>
 8004a10:	4b1f      	ldr	r3, [pc, #124]	@ (8004a90 <checkAktifCalisma+0x1408>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	f083 0301 	eor.w	r3, r3, #1
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d03a      	beq.n	8004a94 <checkAktifCalisma+0x140c>
					hataVar=1;
 8004a1e:	4b12      	ldr	r3, [pc, #72]	@ (8004a68 <checkAktifCalisma+0x13e0>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 8004a24:	2003      	movs	r0, #3
 8004a26:	f7fb ff1f 	bl	8000868 <hataKoduLcdGoster>
					hata2EEPROM(3);
 8004a2a:	2003      	movs	r0, #3
 8004a2c:	f7fb fec4 	bl	80007b8 <hata2EEPROM>
					basinchatasi=1;
 8004a30:	4b17      	ldr	r3, [pc, #92]	@ (8004a90 <checkAktifCalisma+0x1408>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	e043      	b.n	8004ac0 <checkAktifCalisma+0x1438>
 8004a38:	40010800 	.word	0x40010800
 8004a3c:	20000ddf 	.word	0x20000ddf
 8004a40:	40011000 	.word	0x40011000
 8004a44:	20000da6 	.word	0x20000da6
 8004a48:	20000de1 	.word	0x20000de1
 8004a4c:	20000de0 	.word	0x20000de0
 8004a50:	20000d98 	.word	0x20000d98
 8004a54:	20000d9a 	.word	0x20000d9a
 8004a58:	20000d00 	.word	0x20000d00
 8004a5c:	20000dcc 	.word	0x20000dcc
 8004a60:	40010c00 	.word	0x40010c00
 8004a64:	20000ded 	.word	0x20000ded
 8004a68:	20000df4 	.word	0x20000df4
 8004a6c:	20000def 	.word	0x20000def
 8004a70:	20000df6 	.word	0x20000df6
 8004a74:	20000e00 	.word	0x20000e00
 8004a78:	20000da4 	.word	0x20000da4
 8004a7c:	20000df0 	.word	0x20000df0
 8004a80:	20000dd8 	.word	0x20000dd8
 8004a84:	20000da3 	.word	0x20000da3
 8004a88:	20000da7 	.word	0x20000da7
 8004a8c:	20000df3 	.word	0x20000df3
 8004a90:	20000dfd 	.word	0x20000dfd
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8004a94:	4b85      	ldr	r3, [pc, #532]	@ (8004cac <checkAktifCalisma+0x1624>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d011      	beq.n	8004ac0 <checkAktifCalisma+0x1438>
 8004a9c:	4b84      	ldr	r3, [pc, #528]	@ (8004cb0 <checkAktifCalisma+0x1628>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d10d      	bne.n	8004ac0 <checkAktifCalisma+0x1438>
 8004aa4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004aa8:	4882      	ldr	r0, [pc, #520]	@ (8004cb4 <checkAktifCalisma+0x162c>)
 8004aaa:	f005 f82b 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d105      	bne.n	8004ac0 <checkAktifCalisma+0x1438>
					basinchatasi=0;
 8004ab4:	4b7d      	ldr	r3, [pc, #500]	@ (8004cac <checkAktifCalisma+0x1624>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 8004aba:	2003      	movs	r0, #3
 8004abc:	f7fe fbde 	bl	800327c <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8004ac0:	4b7d      	ldr	r3, [pc, #500]	@ (8004cb8 <checkAktifCalisma+0x1630>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d103      	bne.n	8004ad0 <checkAktifCalisma+0x1448>
 8004ac8:	4b7c      	ldr	r3, [pc, #496]	@ (8004cbc <checkAktifCalisma+0x1634>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d023      	beq.n	8004b18 <checkAktifCalisma+0x1490>
 8004ad0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ad4:	487a      	ldr	r0, [pc, #488]	@ (8004cc0 <checkAktifCalisma+0x1638>)
 8004ad6:	f005 f815 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d11b      	bne.n	8004b18 <checkAktifCalisma+0x1490>
 8004ae0:	4b78      	ldr	r3, [pc, #480]	@ (8004cc4 <checkAktifCalisma+0x163c>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d003      	beq.n	8004af0 <checkAktifCalisma+0x1468>
 8004ae8:	4b76      	ldr	r3, [pc, #472]	@ (8004cc4 <checkAktifCalisma+0x163c>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d113      	bne.n	8004b18 <checkAktifCalisma+0x1490>
 8004af0:	4b75      	ldr	r3, [pc, #468]	@ (8004cc8 <checkAktifCalisma+0x1640>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	f083 0301 	eor.w	r3, r3, #1
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00c      	beq.n	8004b18 <checkAktifCalisma+0x1490>
					hataVar=1;
 8004afe:	4b73      	ldr	r3, [pc, #460]	@ (8004ccc <checkAktifCalisma+0x1644>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8004b04:	2004      	movs	r0, #4
 8004b06:	f7fb feaf 	bl	8000868 <hataKoduLcdGoster>
					hata2EEPROM(4);
 8004b0a:	2004      	movs	r0, #4
 8004b0c:	f7fb fe54 	bl	80007b8 <hata2EEPROM>
					katkapisivicihatasi=1;
 8004b10:	4b6d      	ldr	r3, [pc, #436]	@ (8004cc8 <checkAktifCalisma+0x1640>)
 8004b12:	2201      	movs	r2, #1
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	e01f      	b.n	8004b58 <checkAktifCalisma+0x14d0>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004b18:	4b6b      	ldr	r3, [pc, #428]	@ (8004cc8 <checkAktifCalisma+0x1640>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01b      	beq.n	8004b58 <checkAktifCalisma+0x14d0>
 8004b20:	4b6b      	ldr	r3, [pc, #428]	@ (8004cd0 <checkAktifCalisma+0x1648>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d017      	beq.n	8004b58 <checkAktifCalisma+0x14d0>
 8004b28:	4b63      	ldr	r3, [pc, #396]	@ (8004cb8 <checkAktifCalisma+0x1630>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	f083 0301 	eor.w	r3, r3, #1
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d010      	beq.n	8004b58 <checkAktifCalisma+0x14d0>
 8004b36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b3a:	4861      	ldr	r0, [pc, #388]	@ (8004cc0 <checkAktifCalisma+0x1638>)
 8004b3c:	f004 ffe2 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d108      	bne.n	8004b58 <checkAktifCalisma+0x14d0>

					katkapisivicihatasi=0;
 8004b46:	4b60      	ldr	r3, [pc, #384]	@ (8004cc8 <checkAktifCalisma+0x1640>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8004b4c:	4b5b      	ldr	r3, [pc, #364]	@ (8004cbc <checkAktifCalisma+0x1634>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8004b52:	2004      	movs	r0, #4
 8004b54:	f7fe fb92 	bl	800327c <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8004b58:	4b57      	ldr	r3, [pc, #348]	@ (8004cb8 <checkAktifCalisma+0x1630>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <checkAktifCalisma+0x14e0>
 8004b60:	4b5c      	ldr	r3, [pc, #368]	@ (8004cd4 <checkAktifCalisma+0x164c>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d023      	beq.n	8004bb0 <checkAktifCalisma+0x1528>
 8004b68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004b6c:	4854      	ldr	r0, [pc, #336]	@ (8004cc0 <checkAktifCalisma+0x1638>)
 8004b6e:	f004 ffc9 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d11b      	bne.n	8004bb0 <checkAktifCalisma+0x1528>
 8004b78:	4b52      	ldr	r3, [pc, #328]	@ (8004cc4 <checkAktifCalisma+0x163c>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d003      	beq.n	8004b88 <checkAktifCalisma+0x1500>
 8004b80:	4b50      	ldr	r3, [pc, #320]	@ (8004cc4 <checkAktifCalisma+0x163c>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d113      	bne.n	8004bb0 <checkAktifCalisma+0x1528>
 8004b88:	4b53      	ldr	r3, [pc, #332]	@ (8004cd8 <checkAktifCalisma+0x1650>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	f083 0301 	eor.w	r3, r3, #1
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00c      	beq.n	8004bb0 <checkAktifCalisma+0x1528>

					hataVar=1;
 8004b96:	4b4d      	ldr	r3, [pc, #308]	@ (8004ccc <checkAktifCalisma+0x1644>)
 8004b98:	2201      	movs	r2, #1
 8004b9a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8004b9c:	2005      	movs	r0, #5
 8004b9e:	f7fb fe63 	bl	8000868 <hataKoduLcdGoster>
					hata2EEPROM(5);
 8004ba2:	2005      	movs	r0, #5
 8004ba4:	f7fb fe08 	bl	80007b8 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8004ba8:	4b4b      	ldr	r3, [pc, #300]	@ (8004cd8 <checkAktifCalisma+0x1650>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	e023      	b.n	8004bf8 <checkAktifCalisma+0x1570>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8004bb0:	4b49      	ldr	r3, [pc, #292]	@ (8004cd8 <checkAktifCalisma+0x1650>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01f      	beq.n	8004bf8 <checkAktifCalisma+0x1570>
 8004bb8:	4b45      	ldr	r3, [pc, #276]	@ (8004cd0 <checkAktifCalisma+0x1648>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01b      	beq.n	8004bf8 <checkAktifCalisma+0x1570>
 8004bc0:	4b3d      	ldr	r3, [pc, #244]	@ (8004cb8 <checkAktifCalisma+0x1630>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	f083 0301 	eor.w	r3, r3, #1
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d014      	beq.n	8004bf8 <checkAktifCalisma+0x1570>
 8004bce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004bd2:	483b      	ldr	r0, [pc, #236]	@ (8004cc0 <checkAktifCalisma+0x1638>)
 8004bd4:	f004 ff96 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10c      	bne.n	8004bf8 <checkAktifCalisma+0x1570>
 8004bde:	4b3c      	ldr	r3, [pc, #240]	@ (8004cd0 <checkAktifCalisma+0x1648>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d008      	beq.n	8004bf8 <checkAktifCalisma+0x1570>
					tablakapisivicihatasi=0;
 8004be6:	4b3c      	ldr	r3, [pc, #240]	@ (8004cd8 <checkAktifCalisma+0x1650>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8004bec:	4b39      	ldr	r3, [pc, #228]	@ (8004cd4 <checkAktifCalisma+0x164c>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8004bf2:	2005      	movs	r0, #5
 8004bf4:	f7fe fb42 	bl	800327c <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8004bf8:	4b38      	ldr	r3, [pc, #224]	@ (8004cdc <checkAktifCalisma+0x1654>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d107      	bne.n	8004c10 <checkAktifCalisma+0x1588>
 8004c00:	4b37      	ldr	r3, [pc, #220]	@ (8004ce0 <checkAktifCalisma+0x1658>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d103      	bne.n	8004c10 <checkAktifCalisma+0x1588>
 8004c08:	4b36      	ldr	r3, [pc, #216]	@ (8004ce4 <checkAktifCalisma+0x165c>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d01b      	beq.n	8004c48 <checkAktifCalisma+0x15c0>
 8004c10:	4b35      	ldr	r3, [pc, #212]	@ (8004ce8 <checkAktifCalisma+0x1660>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	f083 0301 	eor.w	r3, r3, #1
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d014      	beq.n	8004c48 <checkAktifCalisma+0x15c0>
				    if(millis-timer4>=makineCalismaTmr) {
 8004c1e:	4b33      	ldr	r3, [pc, #204]	@ (8004cec <checkAktifCalisma+0x1664>)
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	4b33      	ldr	r3, [pc, #204]	@ (8004cf0 <checkAktifCalisma+0x1668>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	4a32      	ldr	r2, [pc, #200]	@ (8004cf4 <checkAktifCalisma+0x166c>)
 8004c2a:	7812      	ldrb	r2, [r2, #0]
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d30b      	bcc.n	8004c48 <checkAktifCalisma+0x15c0>
					  	hataVar=1;
 8004c30:	4b26      	ldr	r3, [pc, #152]	@ (8004ccc <checkAktifCalisma+0x1644>)
 8004c32:	2201      	movs	r2, #1
 8004c34:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 8004c36:	2006      	movs	r0, #6
 8004c38:	f7fb fe16 	bl	8000868 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8004c3c:	2006      	movs	r0, #6
 8004c3e:	f7fb fdbb 	bl	80007b8 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8004c42:	4b29      	ldr	r3, [pc, #164]	@ (8004ce8 <checkAktifCalisma+0x1660>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8004c48:	4b27      	ldr	r3, [pc, #156]	@ (8004ce8 <checkAktifCalisma+0x1660>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d013      	beq.n	8004c78 <checkAktifCalisma+0x15f0>
 8004c50:	2108      	movs	r1, #8
 8004c52:	481b      	ldr	r0, [pc, #108]	@ (8004cc0 <checkAktifCalisma+0x1638>)
 8004c54:	f004 ff56 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00c      	beq.n	8004c78 <checkAktifCalisma+0x15f0>
 8004c5e:	4b16      	ldr	r3, [pc, #88]	@ (8004cb8 <checkAktifCalisma+0x1630>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	f083 0301 	eor.w	r3, r3, #1
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <checkAktifCalisma+0x15f0>
					maksimumcalismahatasi=0;
 8004c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ce8 <checkAktifCalisma+0x1660>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8004c72:	2006      	movs	r0, #6
 8004c74:	f7fe fb02 	bl	800327c <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8004c78:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf8 <checkAktifCalisma+0x1670>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10b      	bne.n	8004c98 <checkAktifCalisma+0x1610>
 8004c80:	4b17      	ldr	r3, [pc, #92]	@ (8004ce0 <checkAktifCalisma+0x1658>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d107      	bne.n	8004c98 <checkAktifCalisma+0x1610>
 8004c88:	4b1c      	ldr	r3, [pc, #112]	@ (8004cfc <checkAktifCalisma+0x1674>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d103      	bne.n	8004c98 <checkAktifCalisma+0x1610>
 8004c90:	4b14      	ldr	r3, [pc, #80]	@ (8004ce4 <checkAktifCalisma+0x165c>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d035      	beq.n	8004d04 <checkAktifCalisma+0x167c>
					makineCalisiyor=0;
 8004c98:	4b19      	ldr	r3, [pc, #100]	@ (8004d00 <checkAktifCalisma+0x1678>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8004c9e:	4b07      	ldr	r3, [pc, #28]	@ (8004cbc <checkAktifCalisma+0x1634>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd4 <checkAktifCalisma+0x164c>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	e032      	b.n	8004d12 <checkAktifCalisma+0x168a>
 8004cac:	20000dfd 	.word	0x20000dfd
 8004cb0:	20000da3 	.word	0x20000da3
 8004cb4:	40010c00 	.word	0x40010c00
 8004cb8:	20000ded 	.word	0x20000ded
 8004cbc:	20000e01 	.word	0x20000e01
 8004cc0:	40010800 	.word	0x40010800
 8004cc4:	20000da8 	.word	0x20000da8
 8004cc8:	20000dfe 	.word	0x20000dfe
 8004ccc:	20000df4 	.word	0x20000df4
 8004cd0:	20000de1 	.word	0x20000de1
 8004cd4:	20000e02 	.word	0x20000e02
 8004cd8:	20000dff 	.word	0x20000dff
 8004cdc:	20000df3 	.word	0x20000df3
 8004ce0:	20000dd8 	.word	0x20000dd8
 8004ce4:	20000dd7 	.word	0x20000dd7
 8004ce8:	20000dee 	.word	0x20000dee
 8004cec:	20000d78 	.word	0x20000d78
 8004cf0:	20000d8c 	.word	0x20000d8c
 8004cf4:	20000db8 	.word	0x20000db8
 8004cf8:	20000dd5 	.word	0x20000dd5
 8004cfc:	20000dd6 	.word	0x20000dd6
 8004d00:	20000df5 	.word	0x20000df5
				} else {
					makineCalisiyor=1;
 8004d04:	4b3a      	ldr	r3, [pc, #232]	@ (8004df0 <checkAktifCalisma+0x1768>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8004d0a:	4b3a      	ldr	r3, [pc, #232]	@ (8004df4 <checkAktifCalisma+0x176c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a3a      	ldr	r2, [pc, #232]	@ (8004df8 <checkAktifCalisma+0x1770>)
 8004d10:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8004d12:	4b3a      	ldr	r3, [pc, #232]	@ (8004dfc <checkAktifCalisma+0x1774>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d02f      	beq.n	8004d7a <checkAktifCalisma+0x16f2>
 8004d1a:	4b39      	ldr	r3, [pc, #228]	@ (8004e00 <checkAktifCalisma+0x1778>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	f083 0301 	eor.w	r3, r3, #1
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d028      	beq.n	8004d7a <checkAktifCalisma+0x16f2>
 8004d28:	4b36      	ldr	r3, [pc, #216]	@ (8004e04 <checkAktifCalisma+0x177c>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	f083 0301 	eor.w	r3, r3, #1
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d021      	beq.n	8004d7a <checkAktifCalisma+0x16f2>
 8004d36:	4b34      	ldr	r3, [pc, #208]	@ (8004e08 <checkAktifCalisma+0x1780>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	f083 0301 	eor.w	r3, r3, #1
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01a      	beq.n	8004d7a <checkAktifCalisma+0x16f2>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8004d44:	4b31      	ldr	r3, [pc, #196]	@ (8004e0c <checkAktifCalisma+0x1784>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	f083 0301 	eor.w	r3, r3, #1
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d013      	beq.n	8004d7a <checkAktifCalisma+0x16f2>
 8004d52:	4b2f      	ldr	r3, [pc, #188]	@ (8004e10 <checkAktifCalisma+0x1788>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	f083 0301 	eor.w	r3, r3, #1
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00c      	beq.n	8004d7a <checkAktifCalisma+0x16f2>
 8004d60:	4b2c      	ldr	r3, [pc, #176]	@ (8004e14 <checkAktifCalisma+0x178c>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	f083 0301 	eor.w	r3, r3, #1
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <checkAktifCalisma+0x16f2>

					hataVar=0;
 8004d6e:	4b23      	ldr	r3, [pc, #140]	@ (8004dfc <checkAktifCalisma+0x1774>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8004d74:	2007      	movs	r0, #7
 8004d76:	f7fe fa81 	bl	800327c <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8004d7a:	4b20      	ldr	r3, [pc, #128]	@ (8004dfc <checkAktifCalisma+0x1774>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d02a      	beq.n	8004dd8 <checkAktifCalisma+0x1750>
 8004d82:	4b1f      	ldr	r3, [pc, #124]	@ (8004e00 <checkAktifCalisma+0x1778>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	f083 0301 	eor.w	r3, r3, #1
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d023      	beq.n	8004dd8 <checkAktifCalisma+0x1750>
 8004d90:	4b1c      	ldr	r3, [pc, #112]	@ (8004e04 <checkAktifCalisma+0x177c>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d01f      	beq.n	8004dd8 <checkAktifCalisma+0x1750>
 8004d98:	4b1b      	ldr	r3, [pc, #108]	@ (8004e08 <checkAktifCalisma+0x1780>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	f083 0301 	eor.w	r3, r3, #1
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d018      	beq.n	8004dd8 <checkAktifCalisma+0x1750>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8004da6:	4b19      	ldr	r3, [pc, #100]	@ (8004e0c <checkAktifCalisma+0x1784>)
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	f083 0301 	eor.w	r3, r3, #1
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d011      	beq.n	8004dd8 <checkAktifCalisma+0x1750>
 8004db4:	4b16      	ldr	r3, [pc, #88]	@ (8004e10 <checkAktifCalisma+0x1788>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	f083 0301 	eor.w	r3, r3, #1
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <checkAktifCalisma+0x1750>
 8004dc2:	4b14      	ldr	r3, [pc, #80]	@ (8004e14 <checkAktifCalisma+0x178c>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	f083 0301 	eor.w	r3, r3, #1
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <checkAktifCalisma+0x1750>
				{
					EmnCerHataMakYukariCalis=1;
 8004dd0:	4b11      	ldr	r3, [pc, #68]	@ (8004e18 <checkAktifCalisma+0x1790>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 8004dd6:	e009      	b.n	8004dec <checkAktifCalisma+0x1764>
				else if(emniyetCercevesihatasi==0)
 8004dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004e04 <checkAktifCalisma+0x177c>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	f083 0301 	eor.w	r3, r3, #1
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <checkAktifCalisma+0x1764>
					EmnCerHataMakYukariCalis=0;
 8004de6:	4b0c      	ldr	r3, [pc, #48]	@ (8004e18 <checkAktifCalisma+0x1790>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]
}
 8004dec:	bf00      	nop
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20000df5 	.word	0x20000df5
 8004df4:	20000d78 	.word	0x20000d78
 8004df8:	20000d8c 	.word	0x20000d8c
 8004dfc:	20000df4 	.word	0x20000df4
 8004e00:	20000def 	.word	0x20000def
 8004e04:	20000df0 	.word	0x20000df0
 8004e08:	20000dfd 	.word	0x20000dfd
 8004e0c:	20000dfe 	.word	0x20000dfe
 8004e10:	20000dff 	.word	0x20000dff
 8004e14:	20000dee 	.word	0x20000dee
 8004e18:	20000e03 	.word	0x20000e03

08004e1c <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004e20:	4b66      	ldr	r3, [pc, #408]	@ (8004fbc <checkDemoModCalisma+0x1a0>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f041 83ab 	bne.w	8006580 <checkDemoModCalisma+0x1764>
 8004e2a:	4b65      	ldr	r3, [pc, #404]	@ (8004fc0 <checkDemoModCalisma+0x1a4>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f041 83a6 	bne.w	8006580 <checkDemoModCalisma+0x1764>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8004e34:	4b63      	ldr	r3, [pc, #396]	@ (8004fc4 <checkDemoModCalisma+0x1a8>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d11a      	bne.n	8004e72 <checkDemoModCalisma+0x56>
 8004e3c:	4b62      	ldr	r3, [pc, #392]	@ (8004fc8 <checkDemoModCalisma+0x1ac>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d116      	bne.n	8004e72 <checkDemoModCalisma+0x56>
 8004e44:	4b61      	ldr	r3, [pc, #388]	@ (8004fcc <checkDemoModCalisma+0x1b0>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <checkDemoModCalisma+0x46>
 8004e4c:	4b60      	ldr	r3, [pc, #384]	@ (8004fd0 <checkDemoModCalisma+0x1b4>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	f083 0301 	eor.w	r3, r3, #1
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <checkDemoModCalisma+0x46>
 8004e5a:	4b5e      	ldr	r3, [pc, #376]	@ (8004fd4 <checkDemoModCalisma+0x1b8>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d007      	beq.n	8004e72 <checkDemoModCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8004e62:	4b5d      	ldr	r3, [pc, #372]	@ (8004fd8 <checkDemoModCalisma+0x1bc>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d01c      	beq.n	8004ea4 <checkDemoModCalisma+0x88>
 8004e6a:	4b5c      	ldr	r3, [pc, #368]	@ (8004fdc <checkDemoModCalisma+0x1c0>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d118      	bne.n	8004ea4 <checkDemoModCalisma+0x88>
 8004e72:	4b5b      	ldr	r3, [pc, #364]	@ (8004fe0 <checkDemoModCalisma+0x1c4>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d103      	bne.n	8004e82 <checkDemoModCalisma+0x66>
 8004e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8004fe4 <checkDemoModCalisma+0x1c8>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d010      	beq.n	8004ea4 <checkDemoModCalisma+0x88>
 8004e82:	4b59      	ldr	r3, [pc, #356]	@ (8004fe8 <checkDemoModCalisma+0x1cc>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00c      	beq.n	8004ea4 <checkDemoModCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004e90:	4856      	ldr	r0, [pc, #344]	@ (8004fec <checkDemoModCalisma+0x1d0>)
 8004e92:	f004 fe4e 	bl	8009b32 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8004e96:	4b56      	ldr	r3, [pc, #344]	@ (8004ff0 <checkDemoModCalisma+0x1d4>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8004e9c:	4b55      	ldr	r3, [pc, #340]	@ (8004ff4 <checkDemoModCalisma+0x1d8>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	701a      	strb	r2, [r3, #0]
 8004ea2:	e008      	b.n	8004eb6 <checkDemoModCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004eaa:	4850      	ldr	r0, [pc, #320]	@ (8004fec <checkDemoModCalisma+0x1d0>)
 8004eac:	f004 fe41 	bl	8009b32 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8004eb0:	4b4f      	ldr	r3, [pc, #316]	@ (8004ff0 <checkDemoModCalisma+0x1d4>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8004eb6:	4b42      	ldr	r3, [pc, #264]	@ (8004fc0 <checkDemoModCalisma+0x1a4>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d164      	bne.n	8004f88 <checkDemoModCalisma+0x16c>
 8004ebe:	4b49      	ldr	r3, [pc, #292]	@ (8004fe4 <checkDemoModCalisma+0x1c8>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d103      	bne.n	8004ece <checkDemoModCalisma+0xb2>
 8004ec6:	4b46      	ldr	r3, [pc, #280]	@ (8004fe0 <checkDemoModCalisma+0x1c4>)
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d05c      	beq.n	8004f88 <checkDemoModCalisma+0x16c>
 8004ece:	4b46      	ldr	r3, [pc, #280]	@ (8004fe8 <checkDemoModCalisma+0x1cc>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d058      	beq.n	8004f88 <checkDemoModCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004ed6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004eda:	4844      	ldr	r0, [pc, #272]	@ (8004fec <checkDemoModCalisma+0x1d0>)
 8004edc:	f004 fe12 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <checkDemoModCalisma+0xd2>
 8004ee6:	4b44      	ldr	r3, [pc, #272]	@ (8004ff8 <checkDemoModCalisma+0x1dc>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d04c      	beq.n	8004f88 <checkDemoModCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004eee:	2102      	movs	r1, #2
 8004ef0:	4842      	ldr	r0, [pc, #264]	@ (8004ffc <checkDemoModCalisma+0x1e0>)
 8004ef2:	f004 fe07 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d145      	bne.n	8004f88 <checkDemoModCalisma+0x16c>
							&& (basincVar)
 8004efc:	4b40      	ldr	r3, [pc, #256]	@ (8005000 <checkDemoModCalisma+0x1e4>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d041      	beq.n	8004f88 <checkDemoModCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004f04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004f08:	4838      	ldr	r0, [pc, #224]	@ (8004fec <checkDemoModCalisma+0x1d0>)
 8004f0a:	f004 fdfb 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d10e      	bne.n	8004f32 <checkDemoModCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004f14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f18:	4834      	ldr	r0, [pc, #208]	@ (8004fec <checkDemoModCalisma+0x1d0>)
 8004f1a:	f004 fdf3 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d106      	bne.n	8004f32 <checkDemoModCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004f24:	2140      	movs	r1, #64	@ 0x40
 8004f26:	4835      	ldr	r0, [pc, #212]	@ (8004ffc <checkDemoModCalisma+0x1e0>)
 8004f28:	f004 fdec 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d003      	beq.n	8004f3a <checkDemoModCalisma+0x11e>
 8004f32:	4b24      	ldr	r3, [pc, #144]	@ (8004fc4 <checkDemoModCalisma+0x1a8>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d026      	beq.n	8004f88 <checkDemoModCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 8004f3a:	4b24      	ldr	r3, [pc, #144]	@ (8004fcc <checkDemoModCalisma+0x1b0>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	f083 0301 	eor.w	r3, r3, #1
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01f      	beq.n	8004f88 <checkDemoModCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8004f48:	4b1f      	ldr	r3, [pc, #124]	@ (8004fc8 <checkDemoModCalisma+0x1ac>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	f083 0301 	eor.w	r3, r3, #1
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d018      	beq.n	8004f88 <checkDemoModCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 8004f56:	4b20      	ldr	r3, [pc, #128]	@ (8004fd8 <checkDemoModCalisma+0x1bc>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	f083 0301 	eor.w	r3, r3, #1
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d011      	beq.n	8004f88 <checkDemoModCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8004f64:	4b27      	ldr	r3, [pc, #156]	@ (8005004 <checkDemoModCalisma+0x1e8>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	f083 0301 	eor.w	r3, r3, #1
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <checkDemoModCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 8004f72:	4b25      	ldr	r3, [pc, #148]	@ (8005008 <checkDemoModCalisma+0x1ec>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	f083 0301 	eor.w	r3, r3, #1
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <checkDemoModCalisma+0x16c>
					yukarimotorcalisiyor=1;
 8004f80:	4b10      	ldr	r3, [pc, #64]	@ (8004fc4 <checkDemoModCalisma+0x1a8>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]
 8004f86:	e002      	b.n	8004f8e <checkDemoModCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8004f88:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc4 <checkDemoModCalisma+0x1a8>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc4 <checkDemoModCalisma+0x1a8>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d03c      	beq.n	8005010 <checkDemoModCalisma+0x1f4>
 8004f96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004f9a:	4818      	ldr	r0, [pc, #96]	@ (8004ffc <checkDemoModCalisma+0x1e0>)
 8004f9c:	f004 fdb2 	bl	8009b04 <HAL_GPIO_ReadPin>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d134      	bne.n	8005010 <checkDemoModCalisma+0x1f4>
 8004fa6:	4b19      	ldr	r3, [pc, #100]	@ (800500c <checkDemoModCalisma+0x1f0>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d030      	beq.n	8005010 <checkDemoModCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004fb4:	480d      	ldr	r0, [pc, #52]	@ (8004fec <checkDemoModCalisma+0x1d0>)
 8004fb6:	f004 fdbc 	bl	8009b32 <HAL_GPIO_WritePin>
 8004fba:	e02f      	b.n	800501c <checkDemoModCalisma+0x200>
 8004fbc:	20000dbe 	.word	0x20000dbe
 8004fc0:	20000dbd 	.word	0x20000dbd
 8004fc4:	20000dd5 	.word	0x20000dd5
 8004fc8:	20000dd6 	.word	0x20000dd6
 8004fcc:	20000dd8 	.word	0x20000dd8
 8004fd0:	20000dd0 	.word	0x20000dd0
 8004fd4:	20000db3 	.word	0x20000db3
 8004fd8:	20000dd7 	.word	0x20000dd7
 8004fdc:	20000db2 	.word	0x20000db2
 8004fe0:	20000df1 	.word	0x20000df1
 8004fe4:	20000e04 	.word	0x20000e04
 8004fe8:	20000df2 	.word	0x20000df2
 8004fec:	40010c00 	.word	0x40010c00
 8004ff0:	20000df3 	.word	0x20000df3
 8004ff4:	20000ddf 	.word	0x20000ddf
 8004ff8:	20000ddc 	.word	0x20000ddc
 8004ffc:	40011000 	.word	0x40011000
 8005000:	20000da3 	.word	0x20000da3
 8005004:	20000dda 	.word	0x20000dda
 8005008:	20000ddb 	.word	0x20000ddb
 800500c:	20000dae 	.word	0x20000dae
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005010:	2200      	movs	r2, #0
 8005012:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005016:	4865      	ldr	r0, [pc, #404]	@ (80051ac <checkDemoModCalisma+0x390>)
 8005018:	f004 fd8b 	bl	8009b32 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 800501c:	4b64      	ldr	r3, [pc, #400]	@ (80051b0 <checkDemoModCalisma+0x394>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d013      	beq.n	800504c <checkDemoModCalisma+0x230>
 8005024:	4b63      	ldr	r3, [pc, #396]	@ (80051b4 <checkDemoModCalisma+0x398>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d007      	beq.n	800503c <checkDemoModCalisma+0x220>
 800502c:	4b61      	ldr	r3, [pc, #388]	@ (80051b4 <checkDemoModCalisma+0x398>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d003      	beq.n	800503c <checkDemoModCalisma+0x220>
 8005034:	4b60      	ldr	r3, [pc, #384]	@ (80051b8 <checkDemoModCalisma+0x39c>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d107      	bne.n	800504c <checkDemoModCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800503c:	2201      	movs	r2, #1
 800503e:	2104      	movs	r1, #4
 8005040:	485a      	ldr	r0, [pc, #360]	@ (80051ac <checkDemoModCalisma+0x390>)
 8005042:	f004 fd76 	bl	8009b32 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8005046:	4b5d      	ldr	r3, [pc, #372]	@ (80051bc <checkDemoModCalisma+0x3a0>)
 8005048:	2201      	movs	r2, #1
 800504a:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800504c:	4b5b      	ldr	r3, [pc, #364]	@ (80051bc <checkDemoModCalisma+0x3a0>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d033      	beq.n	80050bc <checkDemoModCalisma+0x2a0>
 8005054:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005058:	4854      	ldr	r0, [pc, #336]	@ (80051ac <checkDemoModCalisma+0x390>)
 800505a:	f004 fd53 	bl	8009b04 <HAL_GPIO_ReadPin>
 800505e:	4603      	mov	r3, r0
 8005060:	2b01      	cmp	r3, #1
 8005062:	d106      	bne.n	8005072 <checkDemoModCalisma+0x256>
 8005064:	4b56      	ldr	r3, [pc, #344]	@ (80051c0 <checkDemoModCalisma+0x3a4>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	f083 0301 	eor.w	r3, r3, #1
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <checkDemoModCalisma+0x264>
 8005072:	2102      	movs	r1, #2
 8005074:	4853      	ldr	r0, [pc, #332]	@ (80051c4 <checkDemoModCalisma+0x3a8>)
 8005076:	f004 fd45 	bl	8009b04 <HAL_GPIO_ReadPin>
 800507a:	4603      	mov	r3, r0
 800507c:	2b01      	cmp	r3, #1
 800507e:	d11d      	bne.n	80050bc <checkDemoModCalisma+0x2a0>
 8005080:	4b51      	ldr	r3, [pc, #324]	@ (80051c8 <checkDemoModCalisma+0x3ac>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d103      	bne.n	8005090 <checkDemoModCalisma+0x274>
 8005088:	4b50      	ldr	r3, [pc, #320]	@ (80051cc <checkDemoModCalisma+0x3b0>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d015      	beq.n	80050bc <checkDemoModCalisma+0x2a0>
 8005090:	4b4f      	ldr	r3, [pc, #316]	@ (80051d0 <checkDemoModCalisma+0x3b4>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d011      	beq.n	80050bc <checkDemoModCalisma+0x2a0>
 8005098:	4b4e      	ldr	r3, [pc, #312]	@ (80051d4 <checkDemoModCalisma+0x3b8>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00d      	beq.n	80050bc <checkDemoModCalisma+0x2a0>
 80050a0:	4b4d      	ldr	r3, [pc, #308]	@ (80051d8 <checkDemoModCalisma+0x3bc>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	f083 0301 	eor.w	r3, r3, #1
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d006      	beq.n	80050bc <checkDemoModCalisma+0x2a0>
					timer2=millis;
 80050ae:	4b4b      	ldr	r3, [pc, #300]	@ (80051dc <checkDemoModCalisma+0x3c0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a4b      	ldr	r2, [pc, #300]	@ (80051e0 <checkDemoModCalisma+0x3c4>)
 80050b4:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 80050b6:	4b48      	ldr	r3, [pc, #288]	@ (80051d8 <checkDemoModCalisma+0x3bc>)
 80050b8:	2201      	movs	r2, #1
 80050ba:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 80050bc:	4b47      	ldr	r3, [pc, #284]	@ (80051dc <checkDemoModCalisma+0x3c0>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	4b47      	ldr	r3, [pc, #284]	@ (80051e0 <checkDemoModCalisma+0x3c4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	4a47      	ldr	r2, [pc, #284]	@ (80051e4 <checkDemoModCalisma+0x3c8>)
 80050c8:	7812      	ldrb	r2, [r2, #0]
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d303      	bcc.n	80050d6 <checkDemoModCalisma+0x2ba>
 80050ce:	4b42      	ldr	r3, [pc, #264]	@ (80051d8 <checkDemoModCalisma+0x3bc>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d118      	bne.n	8005108 <checkDemoModCalisma+0x2ec>
 80050d6:	4b3c      	ldr	r3, [pc, #240]	@ (80051c8 <checkDemoModCalisma+0x3ac>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	f083 0301 	eor.w	r3, r3, #1
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d006      	beq.n	80050f2 <checkDemoModCalisma+0x2d6>
 80050e4:	4b39      	ldr	r3, [pc, #228]	@ (80051cc <checkDemoModCalisma+0x3b0>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	f083 0301 	eor.w	r3, r3, #1
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <checkDemoModCalisma+0x2ec>
 80050f2:	4b37      	ldr	r3, [pc, #220]	@ (80051d0 <checkDemoModCalisma+0x3b4>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	f083 0301 	eor.w	r3, r3, #1
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d103      	bne.n	8005108 <checkDemoModCalisma+0x2ec>
 8005100:	4b34      	ldr	r3, [pc, #208]	@ (80051d4 <checkDemoModCalisma+0x3b8>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <checkDemoModCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005108:	2200      	movs	r2, #0
 800510a:	2104      	movs	r1, #4
 800510c:	4827      	ldr	r0, [pc, #156]	@ (80051ac <checkDemoModCalisma+0x390>)
 800510e:	f004 fd10 	bl	8009b32 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 8005112:	4b2a      	ldr	r3, [pc, #168]	@ (80051bc <checkDemoModCalisma+0x3a0>)
 8005114:	2200      	movs	r2, #0
 8005116:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 8005118:	4b2f      	ldr	r3, [pc, #188]	@ (80051d8 <checkDemoModCalisma+0x3bc>)
 800511a:	2200      	movs	r2, #0
 800511c:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 800511e:	4b32      	ldr	r3, [pc, #200]	@ (80051e8 <checkDemoModCalisma+0x3cc>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d102      	bne.n	800512c <checkDemoModCalisma+0x310>
					cerceveVar=1;
 8005126:	4b31      	ldr	r3, [pc, #196]	@ (80051ec <checkDemoModCalisma+0x3d0>)
 8005128:	2201      	movs	r2, #1
 800512a:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800512c:	4b2e      	ldr	r3, [pc, #184]	@ (80051e8 <checkDemoModCalisma+0x3cc>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d116      	bne.n	8005162 <checkDemoModCalisma+0x346>
 8005134:	4b2e      	ldr	r3, [pc, #184]	@ (80051f0 <checkDemoModCalisma+0x3d4>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d112      	bne.n	8005162 <checkDemoModCalisma+0x346>
 800513c:	2101      	movs	r1, #1
 800513e:	4821      	ldr	r0, [pc, #132]	@ (80051c4 <checkDemoModCalisma+0x3a8>)
 8005140:	f004 fce0 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10b      	bne.n	8005162 <checkDemoModCalisma+0x346>
 800514a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800514e:	4817      	ldr	r0, [pc, #92]	@ (80051ac <checkDemoModCalisma+0x390>)
 8005150:	f004 fcd8 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d103      	bne.n	8005162 <checkDemoModCalisma+0x346>
					cerceveVar=1;
 800515a:	4b24      	ldr	r3, [pc, #144]	@ (80051ec <checkDemoModCalisma+0x3d0>)
 800515c:	2201      	movs	r2, #1
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	e011      	b.n	8005186 <checkDemoModCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005162:	4b21      	ldr	r3, [pc, #132]	@ (80051e8 <checkDemoModCalisma+0x3cc>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d10d      	bne.n	8005186 <checkDemoModCalisma+0x36a>
 800516a:	2101      	movs	r1, #1
 800516c:	4815      	ldr	r0, [pc, #84]	@ (80051c4 <checkDemoModCalisma+0x3a8>)
 800516e:	f004 fcc9 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005172:	4603      	mov	r3, r0
 8005174:	2b01      	cmp	r3, #1
 8005176:	d106      	bne.n	8005186 <checkDemoModCalisma+0x36a>
 8005178:	4b1d      	ldr	r3, [pc, #116]	@ (80051f0 <checkDemoModCalisma+0x3d4>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d102      	bne.n	8005186 <checkDemoModCalisma+0x36a>
					cerceveVar=0;
 8005180:	4b1a      	ldr	r3, [pc, #104]	@ (80051ec <checkDemoModCalisma+0x3d0>)
 8005182:	2200      	movs	r2, #0
 8005184:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8005186:	4b18      	ldr	r3, [pc, #96]	@ (80051e8 <checkDemoModCalisma+0x3cc>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d135      	bne.n	80051fa <checkDemoModCalisma+0x3de>
 800518e:	4b18      	ldr	r3, [pc, #96]	@ (80051f0 <checkDemoModCalisma+0x3d4>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d131      	bne.n	80051fa <checkDemoModCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005196:	2101      	movs	r1, #1
 8005198:	480a      	ldr	r0, [pc, #40]	@ (80051c4 <checkDemoModCalisma+0x3a8>)
 800519a:	f004 fcb3 	bl	8009b04 <HAL_GPIO_ReadPin>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d127      	bne.n	80051f4 <checkDemoModCalisma+0x3d8>
						cerceveVar=1;
 80051a4:	4b11      	ldr	r3, [pc, #68]	@ (80051ec <checkDemoModCalisma+0x3d0>)
 80051a6:	2201      	movs	r2, #1
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	e026      	b.n	80051fa <checkDemoModCalisma+0x3de>
 80051ac:	40010c00 	.word	0x40010c00
 80051b0:	20000dd5 	.word	0x20000dd5
 80051b4:	20000daf 	.word	0x20000daf
 80051b8:	20000db3 	.word	0x20000db3
 80051bc:	20000dd9 	.word	0x20000dd9
 80051c0:	20000ddc 	.word	0x20000ddc
 80051c4:	40011000 	.word	0x40011000
 80051c8:	20000df1 	.word	0x20000df1
 80051cc:	20000e04 	.word	0x20000e04
 80051d0:	20000df2 	.word	0x20000df2
 80051d4:	20000da3 	.word	0x20000da3
 80051d8:	20000dd1 	.word	0x20000dd1
 80051dc:	20000d78 	.word	0x20000d78
 80051e0:	20000d84 	.word	0x20000d84
 80051e4:	20000db4 	.word	0x20000db4
 80051e8:	20000da4 	.word	0x20000da4
 80051ec:	20000df6 	.word	0x20000df6
 80051f0:	20000da1 	.word	0x20000da1
					} else {
						cerceveVar=0;
 80051f4:	4b7f      	ldr	r3, [pc, #508]	@ (80053f4 <checkDemoModCalisma+0x5d8>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80051fa:	4b7f      	ldr	r3, [pc, #508]	@ (80053f8 <checkDemoModCalisma+0x5dc>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d17c      	bne.n	80052fc <checkDemoModCalisma+0x4e0>
 8005202:	4b7e      	ldr	r3, [pc, #504]	@ (80053fc <checkDemoModCalisma+0x5e0>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d078      	beq.n	80052fc <checkDemoModCalisma+0x4e0>
 800520a:	4b7d      	ldr	r3, [pc, #500]	@ (8005400 <checkDemoModCalisma+0x5e4>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d074      	beq.n	80052fc <checkDemoModCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005212:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005216:	487b      	ldr	r0, [pc, #492]	@ (8005404 <checkDemoModCalisma+0x5e8>)
 8005218:	f004 fc74 	bl	8009b04 <HAL_GPIO_ReadPin>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <checkDemoModCalisma+0x40e>
 8005222:	4b79      	ldr	r3, [pc, #484]	@ (8005408 <checkDemoModCalisma+0x5ec>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d068      	beq.n	80052fc <checkDemoModCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800522a:	4b72      	ldr	r3, [pc, #456]	@ (80053f4 <checkDemoModCalisma+0x5d8>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d064      	beq.n	80052fc <checkDemoModCalisma+0x4e0>
 8005232:	4b76      	ldr	r3, [pc, #472]	@ (800540c <checkDemoModCalisma+0x5f0>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	f083 0301 	eor.w	r3, r3, #1
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d05d      	beq.n	80052fc <checkDemoModCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005240:	2104      	movs	r1, #4
 8005242:	4873      	ldr	r0, [pc, #460]	@ (8005410 <checkDemoModCalisma+0x5f4>)
 8005244:	f004 fc5e 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <checkDemoModCalisma+0x43a>
 800524e:	4b71      	ldr	r3, [pc, #452]	@ (8005414 <checkDemoModCalisma+0x5f8>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d152      	bne.n	80052fc <checkDemoModCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005256:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800525a:	486a      	ldr	r0, [pc, #424]	@ (8005404 <checkDemoModCalisma+0x5e8>)
 800525c:	f004 fc52 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005260:	4603      	mov	r3, r0
 8005262:	2b01      	cmp	r3, #1
 8005264:	d10e      	bne.n	8005284 <checkDemoModCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005266:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800526a:	4866      	ldr	r0, [pc, #408]	@ (8005404 <checkDemoModCalisma+0x5e8>)
 800526c:	f004 fc4a 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005270:	4603      	mov	r3, r0
 8005272:	2b01      	cmp	r3, #1
 8005274:	d106      	bne.n	8005284 <checkDemoModCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005276:	2140      	movs	r1, #64	@ 0x40
 8005278:	4865      	ldr	r0, [pc, #404]	@ (8005410 <checkDemoModCalisma+0x5f4>)
 800527a:	f004 fc43 	bl	8009b04 <HAL_GPIO_ReadPin>
 800527e:	4603      	mov	r3, r0
 8005280:	2b01      	cmp	r3, #1
 8005282:	d003      	beq.n	800528c <checkDemoModCalisma+0x470>
 8005284:	4b64      	ldr	r3, [pc, #400]	@ (8005418 <checkDemoModCalisma+0x5fc>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d037      	beq.n	80052fc <checkDemoModCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 800528c:	4b63      	ldr	r3, [pc, #396]	@ (800541c <checkDemoModCalisma+0x600>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	f083 0301 	eor.w	r3, r3, #1
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d030      	beq.n	80052fc <checkDemoModCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 800529a:	4b61      	ldr	r3, [pc, #388]	@ (8005420 <checkDemoModCalisma+0x604>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	f083 0301 	eor.w	r3, r3, #1
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d029      	beq.n	80052fc <checkDemoModCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 80052a8:	4b5e      	ldr	r3, [pc, #376]	@ (8005424 <checkDemoModCalisma+0x608>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	f083 0301 	eor.w	r3, r3, #1
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d022      	beq.n	80052fc <checkDemoModCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 80052b6:	4b5c      	ldr	r3, [pc, #368]	@ (8005428 <checkDemoModCalisma+0x60c>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	f083 0301 	eor.w	r3, r3, #1
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01b      	beq.n	80052fc <checkDemoModCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 80052c4:	4b59      	ldr	r3, [pc, #356]	@ (800542c <checkDemoModCalisma+0x610>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	f083 0301 	eor.w	r3, r3, #1
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d014      	beq.n	80052fc <checkDemoModCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 80052d2:	4b57      	ldr	r3, [pc, #348]	@ (8005430 <checkDemoModCalisma+0x614>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	f083 0301 	eor.w	r3, r3, #1
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00d      	beq.n	80052fc <checkDemoModCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80052e0:	2201      	movs	r2, #1
 80052e2:	2102      	movs	r1, #2
 80052e4:	4847      	ldr	r0, [pc, #284]	@ (8005404 <checkDemoModCalisma+0x5e8>)
 80052e6:	f004 fc24 	bl	8009b32 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 80052ea:	4b4b      	ldr	r3, [pc, #300]	@ (8005418 <checkDemoModCalisma+0x5fc>)
 80052ec:	2201      	movs	r2, #1
 80052ee:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 80052f0:	4b50      	ldr	r3, [pc, #320]	@ (8005434 <checkDemoModCalisma+0x618>)
 80052f2:	2201      	movs	r2, #1
 80052f4:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 80052f6:	4b50      	ldr	r3, [pc, #320]	@ (8005438 <checkDemoModCalisma+0x61c>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80052fc:	4b46      	ldr	r3, [pc, #280]	@ (8005418 <checkDemoModCalisma+0x5fc>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d033      	beq.n	800536c <checkDemoModCalisma+0x550>
 8005304:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005308:	483e      	ldr	r0, [pc, #248]	@ (8005404 <checkDemoModCalisma+0x5e8>)
 800530a:	f004 fbfb 	bl	8009b04 <HAL_GPIO_ReadPin>
 800530e:	4603      	mov	r3, r0
 8005310:	2b01      	cmp	r3, #1
 8005312:	d106      	bne.n	8005322 <checkDemoModCalisma+0x506>
 8005314:	4b3c      	ldr	r3, [pc, #240]	@ (8005408 <checkDemoModCalisma+0x5ec>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	f083 0301 	eor.w	r3, r3, #1
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10a      	bne.n	8005338 <checkDemoModCalisma+0x51c>
 8005322:	2104      	movs	r1, #4
 8005324:	483a      	ldr	r0, [pc, #232]	@ (8005410 <checkDemoModCalisma+0x5f4>)
 8005326:	f004 fbed 	bl	8009b04 <HAL_GPIO_ReadPin>
 800532a:	4603      	mov	r3, r0
 800532c:	2b01      	cmp	r3, #1
 800532e:	d11d      	bne.n	800536c <checkDemoModCalisma+0x550>
 8005330:	4b38      	ldr	r3, [pc, #224]	@ (8005414 <checkDemoModCalisma+0x5f8>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d019      	beq.n	800536c <checkDemoModCalisma+0x550>
 8005338:	4b30      	ldr	r3, [pc, #192]	@ (80053fc <checkDemoModCalisma+0x5e0>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d015      	beq.n	800536c <checkDemoModCalisma+0x550>
 8005340:	4b2f      	ldr	r3, [pc, #188]	@ (8005400 <checkDemoModCalisma+0x5e4>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d011      	beq.n	800536c <checkDemoModCalisma+0x550>
 8005348:	4b2a      	ldr	r3, [pc, #168]	@ (80053f4 <checkDemoModCalisma+0x5d8>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00d      	beq.n	800536c <checkDemoModCalisma+0x550>
 8005350:	4b3a      	ldr	r3, [pc, #232]	@ (800543c <checkDemoModCalisma+0x620>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	f083 0301 	eor.w	r3, r3, #1
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d006      	beq.n	800536c <checkDemoModCalisma+0x550>
					timer2=millis;
 800535e:	4b38      	ldr	r3, [pc, #224]	@ (8005440 <checkDemoModCalisma+0x624>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a38      	ldr	r2, [pc, #224]	@ (8005444 <checkDemoModCalisma+0x628>)
 8005364:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 8005366:	4b35      	ldr	r3, [pc, #212]	@ (800543c <checkDemoModCalisma+0x620>)
 8005368:	2201      	movs	r2, #1
 800536a:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 800536c:	4b34      	ldr	r3, [pc, #208]	@ (8005440 <checkDemoModCalisma+0x624>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	4b34      	ldr	r3, [pc, #208]	@ (8005444 <checkDemoModCalisma+0x628>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	4a34      	ldr	r2, [pc, #208]	@ (8005448 <checkDemoModCalisma+0x62c>)
 8005378:	7812      	ldrb	r2, [r2, #0]
 800537a:	4293      	cmp	r3, r2
 800537c:	d303      	bcc.n	8005386 <checkDemoModCalisma+0x56a>
 800537e:	4b2f      	ldr	r3, [pc, #188]	@ (800543c <checkDemoModCalisma+0x620>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d114      	bne.n	80053b0 <checkDemoModCalisma+0x594>
 8005386:	4b1d      	ldr	r3, [pc, #116]	@ (80053fc <checkDemoModCalisma+0x5e0>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	f083 0301 	eor.w	r3, r3, #1
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10d      	bne.n	80053b0 <checkDemoModCalisma+0x594>
 8005394:	4b1a      	ldr	r3, [pc, #104]	@ (8005400 <checkDemoModCalisma+0x5e4>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	f083 0301 	eor.w	r3, r3, #1
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d106      	bne.n	80053b0 <checkDemoModCalisma+0x594>
 80053a2:	4b14      	ldr	r3, [pc, #80]	@ (80053f4 <checkDemoModCalisma+0x5d8>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	f083 0301 	eor.w	r3, r3, #1
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <checkDemoModCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80053b0:	2200      	movs	r2, #0
 80053b2:	2102      	movs	r1, #2
 80053b4:	4813      	ldr	r0, [pc, #76]	@ (8005404 <checkDemoModCalisma+0x5e8>)
 80053b6:	f004 fbbc 	bl	8009b32 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 80053ba:	4b17      	ldr	r3, [pc, #92]	@ (8005418 <checkDemoModCalisma+0x5fc>)
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 80053c0:	4b1e      	ldr	r3, [pc, #120]	@ (800543c <checkDemoModCalisma+0x620>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80053c6:	4b14      	ldr	r3, [pc, #80]	@ (8005418 <checkDemoModCalisma+0x5fc>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d040      	beq.n	8005450 <checkDemoModCalisma+0x634>
 80053ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80053d2:	480f      	ldr	r0, [pc, #60]	@ (8005410 <checkDemoModCalisma+0x5f4>)
 80053d4:	f004 fb96 	bl	8009b04 <HAL_GPIO_ReadPin>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d138      	bne.n	8005450 <checkDemoModCalisma+0x634>
 80053de:	4b1b      	ldr	r3, [pc, #108]	@ (800544c <checkDemoModCalisma+0x630>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d034      	beq.n	8005450 <checkDemoModCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80053e6:	2201      	movs	r2, #1
 80053e8:	2101      	movs	r1, #1
 80053ea:	4806      	ldr	r0, [pc, #24]	@ (8005404 <checkDemoModCalisma+0x5e8>)
 80053ec:	f004 fba1 	bl	8009b32 <HAL_GPIO_WritePin>
 80053f0:	e033      	b.n	800545a <checkDemoModCalisma+0x63e>
 80053f2:	bf00      	nop
 80053f4:	20000df6 	.word	0x20000df6
 80053f8:	20000dbd 	.word	0x20000dbd
 80053fc:	20000df1 	.word	0x20000df1
 8005400:	20000df2 	.word	0x20000df2
 8005404:	40010c00 	.word	0x40010c00
 8005408:	20000ddd 	.word	0x20000ddd
 800540c:	20000df0 	.word	0x20000df0
 8005410:	40011000 	.word	0x40011000
 8005414:	20000da6 	.word	0x20000da6
 8005418:	20000dd8 	.word	0x20000dd8
 800541c:	20000dd5 	.word	0x20000dd5
 8005420:	20000dd9 	.word	0x20000dd9
 8005424:	20000dd6 	.word	0x20000dd6
 8005428:	20000dd7 	.word	0x20000dd7
 800542c:	20000dda 	.word	0x20000dda
 8005430:	20000ddb 	.word	0x20000ddb
 8005434:	20000de0 	.word	0x20000de0
 8005438:	20000e00 	.word	0x20000e00
 800543c:	20000dd0 	.word	0x20000dd0
 8005440:	20000d78 	.word	0x20000d78
 8005444:	20000d84 	.word	0x20000d84
 8005448:	20000db5 	.word	0x20000db5
 800544c:	20000da5 	.word	0x20000da5
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005450:	2200      	movs	r2, #0
 8005452:	2101      	movs	r1, #1
 8005454:	4836      	ldr	r0, [pc, #216]	@ (8005530 <checkDemoModCalisma+0x714>)
 8005456:	f004 fb6c 	bl	8009b32 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 800545a:	4b36      	ldr	r3, [pc, #216]	@ (8005534 <checkDemoModCalisma+0x718>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	f040 8080 	bne.w	8005564 <checkDemoModCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005464:	4b34      	ldr	r3, [pc, #208]	@ (8005538 <checkDemoModCalisma+0x71c>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d003      	beq.n	8005474 <checkDemoModCalisma+0x658>
 800546c:	4b32      	ldr	r3, [pc, #200]	@ (8005538 <checkDemoModCalisma+0x71c>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d177      	bne.n	8005564 <checkDemoModCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8005474:	4b31      	ldr	r3, [pc, #196]	@ (800553c <checkDemoModCalisma+0x720>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d073      	beq.n	8005564 <checkDemoModCalisma+0x748>
 800547c:	4b30      	ldr	r3, [pc, #192]	@ (8005540 <checkDemoModCalisma+0x724>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d06f      	beq.n	8005564 <checkDemoModCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005484:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005488:	4829      	ldr	r0, [pc, #164]	@ (8005530 <checkDemoModCalisma+0x714>)
 800548a:	f004 fb3b 	bl	8009b04 <HAL_GPIO_ReadPin>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d167      	bne.n	8005564 <checkDemoModCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005494:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005498:	482a      	ldr	r0, [pc, #168]	@ (8005544 <checkDemoModCalisma+0x728>)
 800549a:	f004 fb33 	bl	8009b04 <HAL_GPIO_ReadPin>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <checkDemoModCalisma+0x690>
 80054a4:	4b28      	ldr	r3, [pc, #160]	@ (8005548 <checkDemoModCalisma+0x72c>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d15b      	bne.n	8005564 <checkDemoModCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80054ac:	2140      	movs	r1, #64	@ 0x40
 80054ae:	4825      	ldr	r0, [pc, #148]	@ (8005544 <checkDemoModCalisma+0x728>)
 80054b0:	f004 fb28 	bl	8009b04 <HAL_GPIO_ReadPin>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d10f      	bne.n	80054da <checkDemoModCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80054ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80054be:	481c      	ldr	r0, [pc, #112]	@ (8005530 <checkDemoModCalisma+0x714>)
 80054c0:	f004 fb20 	bl	8009b04 <HAL_GPIO_ReadPin>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d107      	bne.n	80054da <checkDemoModCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80054ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80054ce:	4818      	ldr	r0, [pc, #96]	@ (8005530 <checkDemoModCalisma+0x714>)
 80054d0:	f004 fb18 	bl	8009b04 <HAL_GPIO_ReadPin>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d003      	beq.n	80054e2 <checkDemoModCalisma+0x6c6>
 80054da:	4b1c      	ldr	r3, [pc, #112]	@ (800554c <checkDemoModCalisma+0x730>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d040      	beq.n	8005564 <checkDemoModCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 80054e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005550 <checkDemoModCalisma+0x734>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	f083 0301 	eor.w	r3, r3, #1
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d039      	beq.n	8005564 <checkDemoModCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 80054f0:	4b18      	ldr	r3, [pc, #96]	@ (8005554 <checkDemoModCalisma+0x738>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	f083 0301 	eor.w	r3, r3, #1
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d032      	beq.n	8005564 <checkDemoModCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 80054fe:	4b16      	ldr	r3, [pc, #88]	@ (8005558 <checkDemoModCalisma+0x73c>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	f083 0301 	eor.w	r3, r3, #1
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d02b      	beq.n	8005564 <checkDemoModCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 800550c:	4b13      	ldr	r3, [pc, #76]	@ (800555c <checkDemoModCalisma+0x740>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	f083 0301 	eor.w	r3, r3, #1
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d024      	beq.n	8005564 <checkDemoModCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 800551a:	4b11      	ldr	r3, [pc, #68]	@ (8005560 <checkDemoModCalisma+0x744>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	f083 0301 	eor.w	r3, r3, #1
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01d      	beq.n	8005564 <checkDemoModCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8005528:	4b08      	ldr	r3, [pc, #32]	@ (800554c <checkDemoModCalisma+0x730>)
 800552a:	2201      	movs	r2, #1
 800552c:	701a      	strb	r2, [r3, #0]
 800552e:	e01c      	b.n	800556a <checkDemoModCalisma+0x74e>
 8005530:	40010c00 	.word	0x40010c00
 8005534:	20000dbd 	.word	0x20000dbd
 8005538:	20000daf 	.word	0x20000daf
 800553c:	20000df1 	.word	0x20000df1
 8005540:	20000df2 	.word	0x20000df2
 8005544:	40011000 	.word	0x40011000
 8005548:	20000db0 	.word	0x20000db0
 800554c:	20000dd6 	.word	0x20000dd6
 8005550:	20000dd5 	.word	0x20000dd5
 8005554:	20000dd9 	.word	0x20000dd9
 8005558:	20000dd8 	.word	0x20000dd8
 800555c:	20000dd7 	.word	0x20000dd7
 8005560:	20000ddb 	.word	0x20000ddb
				} else {
					devmotoryukaricalisiyor=0;
 8005564:	4b64      	ldr	r3, [pc, #400]	@ (80056f8 <checkDemoModCalisma+0x8dc>)
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 800556a:	4b63      	ldr	r3, [pc, #396]	@ (80056f8 <checkDemoModCalisma+0x8dc>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d007      	beq.n	8005582 <checkDemoModCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005572:	2201      	movs	r2, #1
 8005574:	2120      	movs	r1, #32
 8005576:	4861      	ldr	r0, [pc, #388]	@ (80056fc <checkDemoModCalisma+0x8e0>)
 8005578:	f004 fadb 	bl	8009b32 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 800557c:	4b60      	ldr	r3, [pc, #384]	@ (8005700 <checkDemoModCalisma+0x8e4>)
 800557e:	2201      	movs	r2, #1
 8005580:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005582:	4b5f      	ldr	r3, [pc, #380]	@ (8005700 <checkDemoModCalisma+0x8e4>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d025      	beq.n	80055d6 <checkDemoModCalisma+0x7ba>
 800558a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800558e:	485d      	ldr	r0, [pc, #372]	@ (8005704 <checkDemoModCalisma+0x8e8>)
 8005590:	f004 fab8 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005594:	4603      	mov	r3, r0
 8005596:	2b01      	cmp	r3, #1
 8005598:	d007      	beq.n	80055aa <checkDemoModCalisma+0x78e>
 800559a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800559e:	4857      	ldr	r0, [pc, #348]	@ (80056fc <checkDemoModCalisma+0x8e0>)
 80055a0:	f004 fab0 	bl	8009b04 <HAL_GPIO_ReadPin>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d115      	bne.n	80055d6 <checkDemoModCalisma+0x7ba>
 80055aa:	4b57      	ldr	r3, [pc, #348]	@ (8005708 <checkDemoModCalisma+0x8ec>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d011      	beq.n	80055d6 <checkDemoModCalisma+0x7ba>
 80055b2:	4b56      	ldr	r3, [pc, #344]	@ (800570c <checkDemoModCalisma+0x8f0>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00d      	beq.n	80055d6 <checkDemoModCalisma+0x7ba>
 80055ba:	4b55      	ldr	r3, [pc, #340]	@ (8005710 <checkDemoModCalisma+0x8f4>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	f083 0301 	eor.w	r3, r3, #1
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d006      	beq.n	80055d6 <checkDemoModCalisma+0x7ba>
					timer2=millis;
 80055c8:	4b52      	ldr	r3, [pc, #328]	@ (8005714 <checkDemoModCalisma+0x8f8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a52      	ldr	r2, [pc, #328]	@ (8005718 <checkDemoModCalisma+0x8fc>)
 80055ce:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 80055d0:	4b4f      	ldr	r3, [pc, #316]	@ (8005710 <checkDemoModCalisma+0x8f4>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80055d6:	4b4f      	ldr	r3, [pc, #316]	@ (8005714 <checkDemoModCalisma+0x8f8>)
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	4b4f      	ldr	r3, [pc, #316]	@ (8005718 <checkDemoModCalisma+0x8fc>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	4a4e      	ldr	r2, [pc, #312]	@ (800571c <checkDemoModCalisma+0x900>)
 80055e2:	7812      	ldrb	r2, [r2, #0]
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d303      	bcc.n	80055f0 <checkDemoModCalisma+0x7d4>
 80055e8:	4b49      	ldr	r3, [pc, #292]	@ (8005710 <checkDemoModCalisma+0x8f4>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10d      	bne.n	800560c <checkDemoModCalisma+0x7f0>
 80055f0:	4b45      	ldr	r3, [pc, #276]	@ (8005708 <checkDemoModCalisma+0x8ec>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	f083 0301 	eor.w	r3, r3, #1
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <checkDemoModCalisma+0x7f0>
 80055fe:	4b43      	ldr	r3, [pc, #268]	@ (800570c <checkDemoModCalisma+0x8f0>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	f083 0301 	eor.w	r3, r3, #1
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <checkDemoModCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800560c:	2200      	movs	r2, #0
 800560e:	2120      	movs	r1, #32
 8005610:	483a      	ldr	r0, [pc, #232]	@ (80056fc <checkDemoModCalisma+0x8e0>)
 8005612:	f004 fa8e 	bl	8009b32 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8005616:	4b3a      	ldr	r3, [pc, #232]	@ (8005700 <checkDemoModCalisma+0x8e4>)
 8005618:	2200      	movs	r2, #0
 800561a:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 800561c:	4b3c      	ldr	r3, [pc, #240]	@ (8005710 <checkDemoModCalisma+0x8f4>)
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8005622:	4b3f      	ldr	r3, [pc, #252]	@ (8005720 <checkDemoModCalisma+0x904>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	f040 8088 	bne.w	800573c <checkDemoModCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800562c:	4b3d      	ldr	r3, [pc, #244]	@ (8005724 <checkDemoModCalisma+0x908>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d003      	beq.n	800563c <checkDemoModCalisma+0x820>
 8005634:	4b3b      	ldr	r3, [pc, #236]	@ (8005724 <checkDemoModCalisma+0x908>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d17f      	bne.n	800573c <checkDemoModCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 800563c:	4b32      	ldr	r3, [pc, #200]	@ (8005708 <checkDemoModCalisma+0x8ec>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d07b      	beq.n	800573c <checkDemoModCalisma+0x920>
 8005644:	4b31      	ldr	r3, [pc, #196]	@ (800570c <checkDemoModCalisma+0x8f0>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d077      	beq.n	800573c <checkDemoModCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 800564c:	2140      	movs	r1, #64	@ 0x40
 800564e:	482b      	ldr	r0, [pc, #172]	@ (80056fc <checkDemoModCalisma+0x8e0>)
 8005650:	f004 fa58 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d170      	bne.n	800573c <checkDemoModCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800565a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800565e:	4827      	ldr	r0, [pc, #156]	@ (80056fc <checkDemoModCalisma+0x8e0>)
 8005660:	f004 fa50 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <checkDemoModCalisma+0x856>
 800566a:	4b2f      	ldr	r3, [pc, #188]	@ (8005728 <checkDemoModCalisma+0x90c>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d164      	bne.n	800573c <checkDemoModCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005672:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005676:	4823      	ldr	r0, [pc, #140]	@ (8005704 <checkDemoModCalisma+0x8e8>)
 8005678:	f004 fa44 	bl	8009b04 <HAL_GPIO_ReadPin>
 800567c:	4603      	mov	r3, r0
 800567e:	2b01      	cmp	r3, #1
 8005680:	d10f      	bne.n	80056a2 <checkDemoModCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005682:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005686:	481f      	ldr	r0, [pc, #124]	@ (8005704 <checkDemoModCalisma+0x8e8>)
 8005688:	f004 fa3c 	bl	8009b04 <HAL_GPIO_ReadPin>
 800568c:	4603      	mov	r3, r0
 800568e:	2b01      	cmp	r3, #1
 8005690:	d107      	bne.n	80056a2 <checkDemoModCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005692:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005696:	481b      	ldr	r0, [pc, #108]	@ (8005704 <checkDemoModCalisma+0x8e8>)
 8005698:	f004 fa34 	bl	8009b04 <HAL_GPIO_ReadPin>
 800569c:	4603      	mov	r3, r0
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d003      	beq.n	80056aa <checkDemoModCalisma+0x88e>
 80056a2:	4b22      	ldr	r3, [pc, #136]	@ (800572c <checkDemoModCalisma+0x910>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d048      	beq.n	800573c <checkDemoModCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 80056aa:	4b21      	ldr	r3, [pc, #132]	@ (8005730 <checkDemoModCalisma+0x914>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	f083 0301 	eor.w	r3, r3, #1
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d041      	beq.n	800573c <checkDemoModCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 80056b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005734 <checkDemoModCalisma+0x918>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	f083 0301 	eor.w	r3, r3, #1
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d03a      	beq.n	800573c <checkDemoModCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 80056c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005738 <checkDemoModCalisma+0x91c>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	f083 0301 	eor.w	r3, r3, #1
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d033      	beq.n	800573c <checkDemoModCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 80056d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005700 <checkDemoModCalisma+0x8e4>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	f083 0301 	eor.w	r3, r3, #1
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d02c      	beq.n	800573c <checkDemoModCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 80056e2:	4b05      	ldr	r3, [pc, #20]	@ (80056f8 <checkDemoModCalisma+0x8dc>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	f083 0301 	eor.w	r3, r3, #1
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d025      	beq.n	800573c <checkDemoModCalisma+0x920>

					devmotorasagicalisiyor=1;
 80056f0:	4b0e      	ldr	r3, [pc, #56]	@ (800572c <checkDemoModCalisma+0x910>)
 80056f2:	2201      	movs	r2, #1
 80056f4:	701a      	strb	r2, [r3, #0]
 80056f6:	e024      	b.n	8005742 <checkDemoModCalisma+0x926>
 80056f8:	20000dd6 	.word	0x20000dd6
 80056fc:	40011000 	.word	0x40011000
 8005700:	20000dda 	.word	0x20000dda
 8005704:	40010c00 	.word	0x40010c00
 8005708:	20000df1 	.word	0x20000df1
 800570c:	20000df2 	.word	0x20000df2
 8005710:	20000dd2 	.word	0x20000dd2
 8005714:	20000d78 	.word	0x20000d78
 8005718:	20000d84 	.word	0x20000d84
 800571c:	20000db6 	.word	0x20000db6
 8005720:	20000dbd 	.word	0x20000dbd
 8005724:	20000daf 	.word	0x20000daf
 8005728:	20000db1 	.word	0x20000db1
 800572c:	20000dd7 	.word	0x20000dd7
 8005730:	20000dd5 	.word	0x20000dd5
 8005734:	20000dd9 	.word	0x20000dd9
 8005738:	20000dd8 	.word	0x20000dd8
				} else {
					devmotorasagicalisiyor=0;
 800573c:	4b96      	ldr	r3, [pc, #600]	@ (8005998 <checkDemoModCalisma+0xb7c>)
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8005742:	4b95      	ldr	r3, [pc, #596]	@ (8005998 <checkDemoModCalisma+0xb7c>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d007      	beq.n	800575a <checkDemoModCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800574a:	2201      	movs	r2, #1
 800574c:	2110      	movs	r1, #16
 800574e:	4893      	ldr	r0, [pc, #588]	@ (800599c <checkDemoModCalisma+0xb80>)
 8005750:	f004 f9ef 	bl	8009b32 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8005754:	4b92      	ldr	r3, [pc, #584]	@ (80059a0 <checkDemoModCalisma+0xb84>)
 8005756:	2201      	movs	r2, #1
 8005758:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800575a:	4b91      	ldr	r3, [pc, #580]	@ (80059a0 <checkDemoModCalisma+0xb84>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d024      	beq.n	80057ac <checkDemoModCalisma+0x990>
 8005762:	2140      	movs	r1, #64	@ 0x40
 8005764:	488d      	ldr	r0, [pc, #564]	@ (800599c <checkDemoModCalisma+0xb80>)
 8005766:	f004 f9cd 	bl	8009b04 <HAL_GPIO_ReadPin>
 800576a:	4603      	mov	r3, r0
 800576c:	2b01      	cmp	r3, #1
 800576e:	d007      	beq.n	8005780 <checkDemoModCalisma+0x964>
 8005770:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005774:	4889      	ldr	r0, [pc, #548]	@ (800599c <checkDemoModCalisma+0xb80>)
 8005776:	f004 f9c5 	bl	8009b04 <HAL_GPIO_ReadPin>
 800577a:	4603      	mov	r3, r0
 800577c:	2b01      	cmp	r3, #1
 800577e:	d115      	bne.n	80057ac <checkDemoModCalisma+0x990>
 8005780:	4b88      	ldr	r3, [pc, #544]	@ (80059a4 <checkDemoModCalisma+0xb88>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d011      	beq.n	80057ac <checkDemoModCalisma+0x990>
 8005788:	4b87      	ldr	r3, [pc, #540]	@ (80059a8 <checkDemoModCalisma+0xb8c>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00d      	beq.n	80057ac <checkDemoModCalisma+0x990>
 8005790:	4b86      	ldr	r3, [pc, #536]	@ (80059ac <checkDemoModCalisma+0xb90>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	f083 0301 	eor.w	r3, r3, #1
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d006      	beq.n	80057ac <checkDemoModCalisma+0x990>
					timer2=millis;
 800579e:	4b84      	ldr	r3, [pc, #528]	@ (80059b0 <checkDemoModCalisma+0xb94>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a84      	ldr	r2, [pc, #528]	@ (80059b4 <checkDemoModCalisma+0xb98>)
 80057a4:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 80057a6:	4b81      	ldr	r3, [pc, #516]	@ (80059ac <checkDemoModCalisma+0xb90>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80057ac:	4b80      	ldr	r3, [pc, #512]	@ (80059b0 <checkDemoModCalisma+0xb94>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	4b80      	ldr	r3, [pc, #512]	@ (80059b4 <checkDemoModCalisma+0xb98>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	4a80      	ldr	r2, [pc, #512]	@ (80059b8 <checkDemoModCalisma+0xb9c>)
 80057b8:	7812      	ldrb	r2, [r2, #0]
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d303      	bcc.n	80057c6 <checkDemoModCalisma+0x9aa>
 80057be:	4b7b      	ldr	r3, [pc, #492]	@ (80059ac <checkDemoModCalisma+0xb90>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10d      	bne.n	80057e2 <checkDemoModCalisma+0x9c6>
 80057c6:	4b77      	ldr	r3, [pc, #476]	@ (80059a4 <checkDemoModCalisma+0xb88>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	f083 0301 	eor.w	r3, r3, #1
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d106      	bne.n	80057e2 <checkDemoModCalisma+0x9c6>
 80057d4:	4b74      	ldr	r3, [pc, #464]	@ (80059a8 <checkDemoModCalisma+0xb8c>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	f083 0301 	eor.w	r3, r3, #1
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <checkDemoModCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80057e2:	2200      	movs	r2, #0
 80057e4:	2110      	movs	r1, #16
 80057e6:	486d      	ldr	r0, [pc, #436]	@ (800599c <checkDemoModCalisma+0xb80>)
 80057e8:	f004 f9a3 	bl	8009b32 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 80057ec:	4b6c      	ldr	r3, [pc, #432]	@ (80059a0 <checkDemoModCalisma+0xb84>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 80057f2:	4b6e      	ldr	r3, [pc, #440]	@ (80059ac <checkDemoModCalisma+0xb90>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80057f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057fc:	486f      	ldr	r0, [pc, #444]	@ (80059bc <checkDemoModCalisma+0xba0>)
 80057fe:	f004 f981 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d120      	bne.n	800584a <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005808:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800580c:	486b      	ldr	r0, [pc, #428]	@ (80059bc <checkDemoModCalisma+0xba0>)
 800580e:	f004 f979 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d118      	bne.n	800584a <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005818:	2104      	movs	r1, #4
 800581a:	4868      	ldr	r0, [pc, #416]	@ (80059bc <checkDemoModCalisma+0xba0>)
 800581c:	f004 f972 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d111      	bne.n	800584a <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005826:	2102      	movs	r1, #2
 8005828:	4864      	ldr	r0, [pc, #400]	@ (80059bc <checkDemoModCalisma+0xba0>)
 800582a:	f004 f96b 	bl	8009b04 <HAL_GPIO_ReadPin>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10a      	bne.n	800584a <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005834:	2101      	movs	r1, #1
 8005836:	4861      	ldr	r0, [pc, #388]	@ (80059bc <checkDemoModCalisma+0xba0>)
 8005838:	f004 f964 	bl	8009b04 <HAL_GPIO_ReadPin>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d103      	bne.n	800584a <checkDemoModCalisma+0xa2e>
					makineStop=1;
 8005842:	4b5f      	ldr	r3, [pc, #380]	@ (80059c0 <checkDemoModCalisma+0xba4>)
 8005844:	2201      	movs	r2, #1
 8005846:	701a      	strb	r2, [r3, #0]
 8005848:	e002      	b.n	8005850 <checkDemoModCalisma+0xa34>
				} else {
					makineStop=0;
 800584a:	4b5d      	ldr	r3, [pc, #372]	@ (80059c0 <checkDemoModCalisma+0xba4>)
 800584c:	2200      	movs	r2, #0
 800584e:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005850:	4b5c      	ldr	r3, [pc, #368]	@ (80059c4 <checkDemoModCalisma+0xba8>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d144      	bne.n	80058e2 <checkDemoModCalisma+0xac6>
 8005858:	4b5b      	ldr	r3, [pc, #364]	@ (80059c8 <checkDemoModCalisma+0xbac>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d003      	beq.n	8005868 <checkDemoModCalisma+0xa4c>
 8005860:	4b59      	ldr	r3, [pc, #356]	@ (80059c8 <checkDemoModCalisma+0xbac>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b03      	cmp	r3, #3
 8005866:	d13c      	bne.n	80058e2 <checkDemoModCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005868:	2180      	movs	r1, #128	@ 0x80
 800586a:	484c      	ldr	r0, [pc, #304]	@ (800599c <checkDemoModCalisma+0xb80>)
 800586c:	f004 f94a 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d103      	bne.n	800587e <checkDemoModCalisma+0xa62>
 8005876:	4b55      	ldr	r3, [pc, #340]	@ (80059cc <checkDemoModCalisma+0xbb0>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00b      	beq.n	8005896 <checkDemoModCalisma+0xa7a>
 800587e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005882:	484e      	ldr	r0, [pc, #312]	@ (80059bc <checkDemoModCalisma+0xba0>)
 8005884:	f004 f93e 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d129      	bne.n	80058e2 <checkDemoModCalisma+0xac6>
 800588e:	4b4f      	ldr	r3, [pc, #316]	@ (80059cc <checkDemoModCalisma+0xbb0>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d125      	bne.n	80058e2 <checkDemoModCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005896:	2104      	movs	r1, #4
 8005898:	4840      	ldr	r0, [pc, #256]	@ (800599c <checkDemoModCalisma+0xb80>)
 800589a:	f004 f933 	bl	8009b04 <HAL_GPIO_ReadPin>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d003      	beq.n	80058ac <checkDemoModCalisma+0xa90>
 80058a4:	4b4a      	ldr	r3, [pc, #296]	@ (80059d0 <checkDemoModCalisma+0xbb4>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d11a      	bne.n	80058e2 <checkDemoModCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058ac:	2102      	movs	r1, #2
 80058ae:	483b      	ldr	r0, [pc, #236]	@ (800599c <checkDemoModCalisma+0xb80>)
 80058b0:	f004 f928 	bl	8009b04 <HAL_GPIO_ReadPin>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d113      	bne.n	80058e2 <checkDemoModCalisma+0xac6>
						&&(butonKontrol==0)
 80058ba:	4b46      	ldr	r3, [pc, #280]	@ (80059d4 <checkDemoModCalisma+0xbb8>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	f083 0301 	eor.w	r3, r3, #1
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00c      	beq.n	80058e2 <checkDemoModCalisma+0xac6>
						&&(makineStop==1)) {
 80058c8:	4b3d      	ldr	r3, [pc, #244]	@ (80059c0 <checkDemoModCalisma+0xba4>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <checkDemoModCalisma+0xac6>

					kapi1prudhome=1;
 80058d0:	4b41      	ldr	r3, [pc, #260]	@ (80059d8 <checkDemoModCalisma+0xbbc>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80058d6:	4b36      	ldr	r3, [pc, #216]	@ (80059b0 <checkDemoModCalisma+0xb94>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a40      	ldr	r2, [pc, #256]	@ (80059dc <checkDemoModCalisma+0xbc0>)
 80058dc:	6013      	str	r3, [r2, #0]
					bekle();
 80058de:	f7fd fd37 	bl	8003350 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80058e2:	4b33      	ldr	r3, [pc, #204]	@ (80059b0 <checkDemoModCalisma+0xb94>)
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	4b3d      	ldr	r3, [pc, #244]	@ (80059dc <checkDemoModCalisma+0xbc0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	4a3c      	ldr	r2, [pc, #240]	@ (80059e0 <checkDemoModCalisma+0xbc4>)
 80058ee:	7812      	ldrb	r2, [r2, #0]
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d211      	bcs.n	8005918 <checkDemoModCalisma+0xafc>
 80058f4:	2104      	movs	r1, #4
 80058f6:	4829      	ldr	r0, [pc, #164]	@ (800599c <checkDemoModCalisma+0xb80>)
 80058f8:	f004 f904 	bl	8009b04 <HAL_GPIO_ReadPin>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <checkDemoModCalisma+0xafc>
 8005902:	4b33      	ldr	r3, [pc, #204]	@ (80059d0 <checkDemoModCalisma+0xbb4>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d006      	beq.n	8005918 <checkDemoModCalisma+0xafc>
 800590a:	4b2d      	ldr	r3, [pc, #180]	@ (80059c0 <checkDemoModCalisma+0xba4>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	f083 0301 	eor.w	r3, r3, #1
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <checkDemoModCalisma+0xb02>
					kapi1prudhome=0;
 8005918:	4b2f      	ldr	r3, [pc, #188]	@ (80059d8 <checkDemoModCalisma+0xbbc>)
 800591a:	2200      	movs	r2, #0
 800591c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800591e:	4b29      	ldr	r3, [pc, #164]	@ (80059c4 <checkDemoModCalisma+0xba8>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d160      	bne.n	80059e8 <checkDemoModCalisma+0xbcc>
 8005926:	4b28      	ldr	r3, [pc, #160]	@ (80059c8 <checkDemoModCalisma+0xbac>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d003      	beq.n	8005936 <checkDemoModCalisma+0xb1a>
 800592e:	4b26      	ldr	r3, [pc, #152]	@ (80059c8 <checkDemoModCalisma+0xbac>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b03      	cmp	r3, #3
 8005934:	d158      	bne.n	80059e8 <checkDemoModCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005936:	2104      	movs	r1, #4
 8005938:	4818      	ldr	r0, [pc, #96]	@ (800599c <checkDemoModCalisma+0xb80>)
 800593a:	f004 f8e3 	bl	8009b04 <HAL_GPIO_ReadPin>
 800593e:	4603      	mov	r3, r0
 8005940:	2b01      	cmp	r3, #1
 8005942:	d003      	beq.n	800594c <checkDemoModCalisma+0xb30>
 8005944:	4b22      	ldr	r3, [pc, #136]	@ (80059d0 <checkDemoModCalisma+0xbb4>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d14d      	bne.n	80059e8 <checkDemoModCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800594c:	2102      	movs	r1, #2
 800594e:	4813      	ldr	r0, [pc, #76]	@ (800599c <checkDemoModCalisma+0xb80>)
 8005950:	f004 f8d8 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d146      	bne.n	80059e8 <checkDemoModCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800595a:	2180      	movs	r1, #128	@ 0x80
 800595c:	480f      	ldr	r0, [pc, #60]	@ (800599c <checkDemoModCalisma+0xb80>)
 800595e:	f004 f8d1 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d103      	bne.n	8005970 <checkDemoModCalisma+0xb54>
 8005968:	4b18      	ldr	r3, [pc, #96]	@ (80059cc <checkDemoModCalisma+0xbb0>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00b      	beq.n	8005988 <checkDemoModCalisma+0xb6c>
 8005970:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005974:	4811      	ldr	r0, [pc, #68]	@ (80059bc <checkDemoModCalisma+0xba0>)
 8005976:	f004 f8c5 	bl	8009b04 <HAL_GPIO_ReadPin>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d133      	bne.n	80059e8 <checkDemoModCalisma+0xbcc>
 8005980:	4b12      	ldr	r3, [pc, #72]	@ (80059cc <checkDemoModCalisma+0xbb0>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d12f      	bne.n	80059e8 <checkDemoModCalisma+0xbcc>
						&&(makineStop==1)) {
 8005988:	4b0d      	ldr	r3, [pc, #52]	@ (80059c0 <checkDemoModCalisma+0xba4>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d02b      	beq.n	80059e8 <checkDemoModCalisma+0xbcc>

					kapi1butonkontrol=1;
 8005990:	4b14      	ldr	r3, [pc, #80]	@ (80059e4 <checkDemoModCalisma+0xbc8>)
 8005992:	2201      	movs	r2, #1
 8005994:	701a      	strb	r2, [r3, #0]
 8005996:	e02a      	b.n	80059ee <checkDemoModCalisma+0xbd2>
 8005998:	20000dd7 	.word	0x20000dd7
 800599c:	40011000 	.word	0x40011000
 80059a0:	20000ddb 	.word	0x20000ddb
 80059a4:	20000df1 	.word	0x20000df1
 80059a8:	20000df2 	.word	0x20000df2
 80059ac:	20000dd3 	.word	0x20000dd3
 80059b0:	20000d78 	.word	0x20000d78
 80059b4:	20000d84 	.word	0x20000d84
 80059b8:	20000db6 	.word	0x20000db6
 80059bc:	40010c00 	.word	0x40010c00
 80059c0:	20000de1 	.word	0x20000de1
 80059c4:	20000da9 	.word	0x20000da9
 80059c8:	20000da8 	.word	0x20000da8
 80059cc:	20000dac 	.word	0x20000dac
 80059d0:	20000da6 	.word	0x20000da6
 80059d4:	20000dcf 	.word	0x20000dcf
 80059d8:	20000de2 	.word	0x20000de2
 80059dc:	20000d7c 	.word	0x20000d7c
 80059e0:	20000db9 	.word	0x20000db9
 80059e4:	20000de3 	.word	0x20000de3
				} else {
					kapi1butonkontrol=0;
 80059e8:	4b8b      	ldr	r3, [pc, #556]	@ (8005c18 <checkDemoModCalisma+0xdfc>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059ee:	4b8b      	ldr	r3, [pc, #556]	@ (8005c1c <checkDemoModCalisma+0xe00>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d121      	bne.n	8005a3a <checkDemoModCalisma+0xc1e>
 80059f6:	4b8a      	ldr	r3, [pc, #552]	@ (8005c20 <checkDemoModCalisma+0xe04>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d003      	beq.n	8005a06 <checkDemoModCalisma+0xbea>
 80059fe:	4b88      	ldr	r3, [pc, #544]	@ (8005c20 <checkDemoModCalisma+0xe04>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d119      	bne.n	8005a3a <checkDemoModCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005a06:	2104      	movs	r1, #4
 8005a08:	4886      	ldr	r0, [pc, #536]	@ (8005c24 <checkDemoModCalisma+0xe08>)
 8005a0a:	f004 f87b 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d003      	beq.n	8005a1c <checkDemoModCalisma+0xc00>
 8005a14:	4b84      	ldr	r3, [pc, #528]	@ (8005c28 <checkDemoModCalisma+0xe0c>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10e      	bne.n	8005a3a <checkDemoModCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005a1c:	2102      	movs	r1, #2
 8005a1e:	4881      	ldr	r0, [pc, #516]	@ (8005c24 <checkDemoModCalisma+0xe08>)
 8005a20:	f004 f870 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d107      	bne.n	8005a3a <checkDemoModCalisma+0xc1e>
						&&(makineStop==1)) {
 8005a2a:	4b80      	ldr	r3, [pc, #512]	@ (8005c2c <checkDemoModCalisma+0xe10>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <checkDemoModCalisma+0xc1e>

					kapi1pizzato=1;
 8005a32:	4b7f      	ldr	r3, [pc, #508]	@ (8005c30 <checkDemoModCalisma+0xe14>)
 8005a34:	2201      	movs	r2, #1
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	e002      	b.n	8005a40 <checkDemoModCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8005a3a:	4b7d      	ldr	r3, [pc, #500]	@ (8005c30 <checkDemoModCalisma+0xe14>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005a40:	4b75      	ldr	r3, [pc, #468]	@ (8005c18 <checkDemoModCalisma+0xdfc>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d107      	bne.n	8005a58 <checkDemoModCalisma+0xc3c>
 8005a48:	4b79      	ldr	r3, [pc, #484]	@ (8005c30 <checkDemoModCalisma+0xe14>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d103      	bne.n	8005a58 <checkDemoModCalisma+0xc3c>
 8005a50:	4b78      	ldr	r3, [pc, #480]	@ (8005c34 <checkDemoModCalisma+0xe18>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <checkDemoModCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005a58:	2201      	movs	r2, #1
 8005a5a:	2180      	movs	r1, #128	@ 0x80
 8005a5c:	4876      	ldr	r0, [pc, #472]	@ (8005c38 <checkDemoModCalisma+0xe1c>)
 8005a5e:	f004 f868 	bl	8009b32 <HAL_GPIO_WritePin>
 8005a62:	e004      	b.n	8005a6e <checkDemoModCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005a64:	2200      	movs	r2, #0
 8005a66:	2180      	movs	r1, #128	@ 0x80
 8005a68:	4873      	ldr	r0, [pc, #460]	@ (8005c38 <checkDemoModCalisma+0xe1c>)
 8005a6a:	f004 f862 	bl	8009b32 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a6e:	4b73      	ldr	r3, [pc, #460]	@ (8005c3c <checkDemoModCalisma+0xe20>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d141      	bne.n	8005afa <checkDemoModCalisma+0xcde>
 8005a76:	4b6a      	ldr	r3, [pc, #424]	@ (8005c20 <checkDemoModCalisma+0xe04>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d003      	beq.n	8005a86 <checkDemoModCalisma+0xc6a>
 8005a7e:	4b68      	ldr	r3, [pc, #416]	@ (8005c20 <checkDemoModCalisma+0xe04>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d139      	bne.n	8005afa <checkDemoModCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a8a:	4866      	ldr	r0, [pc, #408]	@ (8005c24 <checkDemoModCalisma+0xe08>)
 8005a8c:	f004 f83a 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d103      	bne.n	8005a9e <checkDemoModCalisma+0xc82>
 8005a96:	4b6a      	ldr	r3, [pc, #424]	@ (8005c40 <checkDemoModCalisma+0xe24>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00b      	beq.n	8005ab6 <checkDemoModCalisma+0xc9a>
 8005a9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005aa2:	4868      	ldr	r0, [pc, #416]	@ (8005c44 <checkDemoModCalisma+0xe28>)
 8005aa4:	f004 f82e 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d125      	bne.n	8005afa <checkDemoModCalisma+0xcde>
 8005aae:	4b64      	ldr	r3, [pc, #400]	@ (8005c40 <checkDemoModCalisma+0xe24>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d121      	bne.n	8005afa <checkDemoModCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ab6:	2102      	movs	r1, #2
 8005ab8:	485a      	ldr	r0, [pc, #360]	@ (8005c24 <checkDemoModCalisma+0xe08>)
 8005aba:	f004 f823 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d11a      	bne.n	8005afa <checkDemoModCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005ac4:	2104      	movs	r1, #4
 8005ac6:	4857      	ldr	r0, [pc, #348]	@ (8005c24 <checkDemoModCalisma+0xe08>)
 8005ac8:	f004 f81c 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d113      	bne.n	8005afa <checkDemoModCalisma+0xcde>
						&&(makineStop==1)
 8005ad2:	4b56      	ldr	r3, [pc, #344]	@ (8005c2c <checkDemoModCalisma+0xe10>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00f      	beq.n	8005afa <checkDemoModCalisma+0xcde>
						&&(butonKontrol==0)) {
 8005ada:	4b5b      	ldr	r3, [pc, #364]	@ (8005c48 <checkDemoModCalisma+0xe2c>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	f083 0301 	eor.w	r3, r3, #1
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d008      	beq.n	8005afa <checkDemoModCalisma+0xcde>

					kapi2prudhome=1;
 8005ae8:	4b58      	ldr	r3, [pc, #352]	@ (8005c4c <checkDemoModCalisma+0xe30>)
 8005aea:	2201      	movs	r2, #1
 8005aec:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005aee:	4b58      	ldr	r3, [pc, #352]	@ (8005c50 <checkDemoModCalisma+0xe34>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a58      	ldr	r2, [pc, #352]	@ (8005c54 <checkDemoModCalisma+0xe38>)
 8005af4:	6013      	str	r3, [r2, #0]
					bekle();
 8005af6:	f7fd fc2b 	bl	8003350 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005afa:	4b55      	ldr	r3, [pc, #340]	@ (8005c50 <checkDemoModCalisma+0xe34>)
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	4b55      	ldr	r3, [pc, #340]	@ (8005c54 <checkDemoModCalisma+0xe38>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	4a54      	ldr	r2, [pc, #336]	@ (8005c58 <checkDemoModCalisma+0xe3c>)
 8005b06:	7812      	ldrb	r2, [r2, #0]
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d20d      	bcs.n	8005b28 <checkDemoModCalisma+0xd0c>
 8005b0c:	2102      	movs	r1, #2
 8005b0e:	4845      	ldr	r0, [pc, #276]	@ (8005c24 <checkDemoModCalisma+0xe08>)
 8005b10:	f003 fff8 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d006      	beq.n	8005b28 <checkDemoModCalisma+0xd0c>
 8005b1a:	4b44      	ldr	r3, [pc, #272]	@ (8005c2c <checkDemoModCalisma+0xe10>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	f083 0301 	eor.w	r3, r3, #1
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <checkDemoModCalisma+0xd12>
					kapi2prudhome=0;
 8005b28:	4b48      	ldr	r3, [pc, #288]	@ (8005c4c <checkDemoModCalisma+0xe30>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b2e:	4b43      	ldr	r3, [pc, #268]	@ (8005c3c <checkDemoModCalisma+0xe20>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d135      	bne.n	8005ba2 <checkDemoModCalisma+0xd86>
 8005b36:	4b3a      	ldr	r3, [pc, #232]	@ (8005c20 <checkDemoModCalisma+0xe04>)
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d003      	beq.n	8005b46 <checkDemoModCalisma+0xd2a>
 8005b3e:	4b38      	ldr	r3, [pc, #224]	@ (8005c20 <checkDemoModCalisma+0xe04>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d12d      	bne.n	8005ba2 <checkDemoModCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005b46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005b4a:	4836      	ldr	r0, [pc, #216]	@ (8005c24 <checkDemoModCalisma+0xe08>)
 8005b4c:	f003 ffda 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d103      	bne.n	8005b5e <checkDemoModCalisma+0xd42>
 8005b56:	4b3a      	ldr	r3, [pc, #232]	@ (8005c40 <checkDemoModCalisma+0xe24>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <checkDemoModCalisma+0xd5a>
 8005b5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005b62:	4838      	ldr	r0, [pc, #224]	@ (8005c44 <checkDemoModCalisma+0xe28>)
 8005b64:	f003 ffce 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d119      	bne.n	8005ba2 <checkDemoModCalisma+0xd86>
 8005b6e:	4b34      	ldr	r3, [pc, #208]	@ (8005c40 <checkDemoModCalisma+0xe24>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d115      	bne.n	8005ba2 <checkDemoModCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b76:	2102      	movs	r1, #2
 8005b78:	482a      	ldr	r0, [pc, #168]	@ (8005c24 <checkDemoModCalisma+0xe08>)
 8005b7a:	f003 ffc3 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d10e      	bne.n	8005ba2 <checkDemoModCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b84:	2104      	movs	r1, #4
 8005b86:	4827      	ldr	r0, [pc, #156]	@ (8005c24 <checkDemoModCalisma+0xe08>)
 8005b88:	f003 ffbc 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d107      	bne.n	8005ba2 <checkDemoModCalisma+0xd86>
						&&(makineStop==1)) {
 8005b92:	4b26      	ldr	r3, [pc, #152]	@ (8005c2c <checkDemoModCalisma+0xe10>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <checkDemoModCalisma+0xd86>

					kapi2butonkontrol=1;
 8005b9a:	4b30      	ldr	r3, [pc, #192]	@ (8005c5c <checkDemoModCalisma+0xe40>)
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	e002      	b.n	8005ba8 <checkDemoModCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 8005ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8005c5c <checkDemoModCalisma+0xe40>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005ba8:	4b24      	ldr	r3, [pc, #144]	@ (8005c3c <checkDemoModCalisma+0xe20>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d11d      	bne.n	8005bec <checkDemoModCalisma+0xdd0>
 8005bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c20 <checkDemoModCalisma+0xe04>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d003      	beq.n	8005bc0 <checkDemoModCalisma+0xda4>
 8005bb8:	4b19      	ldr	r3, [pc, #100]	@ (8005c20 <checkDemoModCalisma+0xe04>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d115      	bne.n	8005bec <checkDemoModCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005bc0:	2102      	movs	r1, #2
 8005bc2:	4818      	ldr	r0, [pc, #96]	@ (8005c24 <checkDemoModCalisma+0xe08>)
 8005bc4:	f003 ff9e 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d10e      	bne.n	8005bec <checkDemoModCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005bce:	2104      	movs	r1, #4
 8005bd0:	4814      	ldr	r0, [pc, #80]	@ (8005c24 <checkDemoModCalisma+0xe08>)
 8005bd2:	f003 ff97 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d107      	bne.n	8005bec <checkDemoModCalisma+0xdd0>
						&&(makineStop==1)) {
 8005bdc:	4b13      	ldr	r3, [pc, #76]	@ (8005c2c <checkDemoModCalisma+0xe10>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <checkDemoModCalisma+0xdd0>

					kapi2pizzato=1;
 8005be4:	4b1e      	ldr	r3, [pc, #120]	@ (8005c60 <checkDemoModCalisma+0xe44>)
 8005be6:	2201      	movs	r2, #1
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	e002      	b.n	8005bf2 <checkDemoModCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8005bec:	4b1c      	ldr	r3, [pc, #112]	@ (8005c60 <checkDemoModCalisma+0xe44>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8005c5c <checkDemoModCalisma+0xe40>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d107      	bne.n	8005c0a <checkDemoModCalisma+0xdee>
 8005bfa:	4b19      	ldr	r3, [pc, #100]	@ (8005c60 <checkDemoModCalisma+0xe44>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d103      	bne.n	8005c0a <checkDemoModCalisma+0xdee>
 8005c02:	4b12      	ldr	r3, [pc, #72]	@ (8005c4c <checkDemoModCalisma+0xe30>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d02c      	beq.n	8005c64 <checkDemoModCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	2140      	movs	r1, #64	@ 0x40
 8005c0e:	480a      	ldr	r0, [pc, #40]	@ (8005c38 <checkDemoModCalisma+0xe1c>)
 8005c10:	f003 ff8f 	bl	8009b32 <HAL_GPIO_WritePin>
 8005c14:	e02b      	b.n	8005c6e <checkDemoModCalisma+0xe52>
 8005c16:	bf00      	nop
 8005c18:	20000de3 	.word	0x20000de3
 8005c1c:	20000da9 	.word	0x20000da9
 8005c20:	20000da8 	.word	0x20000da8
 8005c24:	40011000 	.word	0x40011000
 8005c28:	20000da6 	.word	0x20000da6
 8005c2c:	20000de1 	.word	0x20000de1
 8005c30:	20000de4 	.word	0x20000de4
 8005c34:	20000de2 	.word	0x20000de2
 8005c38:	40010800 	.word	0x40010800
 8005c3c:	20000daa 	.word	0x20000daa
 8005c40:	20000dac 	.word	0x20000dac
 8005c44:	40010c00 	.word	0x40010c00
 8005c48:	20000dcf 	.word	0x20000dcf
 8005c4c:	20000de5 	.word	0x20000de5
 8005c50:	20000d78 	.word	0x20000d78
 8005c54:	20000d7c 	.word	0x20000d7c
 8005c58:	20000dba 	.word	0x20000dba
 8005c5c:	20000de6 	.word	0x20000de6
 8005c60:	20000de7 	.word	0x20000de7
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005c64:	2200      	movs	r2, #0
 8005c66:	2140      	movs	r1, #64	@ 0x40
 8005c68:	4835      	ldr	r0, [pc, #212]	@ (8005d40 <checkDemoModCalisma+0xf24>)
 8005c6a:	f003 ff62 	bl	8009b32 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 8005c6e:	4b35      	ldr	r3, [pc, #212]	@ (8005d44 <checkDemoModCalisma+0xf28>)
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <checkDemoModCalisma+0xe62>
 8005c76:	4b33      	ldr	r3, [pc, #204]	@ (8005d44 <checkDemoModCalisma+0xf28>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d115      	bne.n	8005caa <checkDemoModCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005c7e:	2104      	movs	r1, #4
 8005c80:	4831      	ldr	r0, [pc, #196]	@ (8005d48 <checkDemoModCalisma+0xf2c>)
 8005c82:	f003 ff3f 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d003      	beq.n	8005c94 <checkDemoModCalisma+0xe78>
 8005c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8005d4c <checkDemoModCalisma+0xf30>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10a      	bne.n	8005caa <checkDemoModCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005c94:	2102      	movs	r1, #2
 8005c96:	482c      	ldr	r0, [pc, #176]	@ (8005d48 <checkDemoModCalisma+0xf2c>)
 8005c98:	f003 ff34 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d103      	bne.n	8005caa <checkDemoModCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 8005ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8005d50 <checkDemoModCalisma+0xf34>)
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	701a      	strb	r2, [r3, #0]
 8005ca8:	e002      	b.n	8005cb0 <checkDemoModCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 8005caa:	4b29      	ldr	r3, [pc, #164]	@ (8005d50 <checkDemoModCalisma+0xf34>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005cb0:	4b24      	ldr	r3, [pc, #144]	@ (8005d44 <checkDemoModCalisma+0xf28>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d003      	beq.n	8005cc0 <checkDemoModCalisma+0xea4>
 8005cb8:	4b22      	ldr	r3, [pc, #136]	@ (8005d44 <checkDemoModCalisma+0xf28>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d111      	bne.n	8005ce4 <checkDemoModCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005cc0:	2102      	movs	r1, #2
 8005cc2:	4821      	ldr	r0, [pc, #132]	@ (8005d48 <checkDemoModCalisma+0xf2c>)
 8005cc4:	f003 ff1e 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d10a      	bne.n	8005ce4 <checkDemoModCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005cce:	2104      	movs	r1, #4
 8005cd0:	481d      	ldr	r0, [pc, #116]	@ (8005d48 <checkDemoModCalisma+0xf2c>)
 8005cd2:	f003 ff17 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d103      	bne.n	8005ce4 <checkDemoModCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8005cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8005d54 <checkDemoModCalisma+0xf38>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	701a      	strb	r2, [r3, #0]
 8005ce2:	e002      	b.n	8005cea <checkDemoModCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8005ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d54 <checkDemoModCalisma+0xf38>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8005cea:	4b19      	ldr	r3, [pc, #100]	@ (8005d50 <checkDemoModCalisma+0xf34>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00f      	beq.n	8005d12 <checkDemoModCalisma+0xef6>
						&& kapiAcTipi==1
 8005cf2:	4b19      	ldr	r3, [pc, #100]	@ (8005d58 <checkDemoModCalisma+0xf3c>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d10b      	bne.n	8005d12 <checkDemoModCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005cfa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005cfe:	4817      	ldr	r0, [pc, #92]	@ (8005d5c <checkDemoModCalisma+0xf40>)
 8005d00:	f003 ff00 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <checkDemoModCalisma+0xef6>

					kapiactablaesp1=1;
 8005d0a:	4b15      	ldr	r3, [pc, #84]	@ (8005d60 <checkDemoModCalisma+0xf44>)
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	e002      	b.n	8005d18 <checkDemoModCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8005d12:	4b13      	ldr	r3, [pc, #76]	@ (8005d60 <checkDemoModCalisma+0xf44>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8005d18:	4b0e      	ldr	r3, [pc, #56]	@ (8005d54 <checkDemoModCalisma+0xf38>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d023      	beq.n	8005d68 <checkDemoModCalisma+0xf4c>
						&& kapiAcTipi==1
 8005d20:	4b0d      	ldr	r3, [pc, #52]	@ (8005d58 <checkDemoModCalisma+0xf3c>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d11f      	bne.n	8005d68 <checkDemoModCalisma+0xf4c>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005d28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005d2c:	480b      	ldr	r0, [pc, #44]	@ (8005d5c <checkDemoModCalisma+0xf40>)
 8005d2e:	f003 fee9 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d117      	bne.n	8005d68 <checkDemoModCalisma+0xf4c>

					kapiactablaesp2=1;
 8005d38:	4b0a      	ldr	r3, [pc, #40]	@ (8005d64 <checkDemoModCalisma+0xf48>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	e016      	b.n	8005d6e <checkDemoModCalisma+0xf52>
 8005d40:	40010800 	.word	0x40010800
 8005d44:	20000dad 	.word	0x20000dad
 8005d48:	40011000 	.word	0x40011000
 8005d4c:	20000da6 	.word	0x20000da6
 8005d50:	20000deb 	.word	0x20000deb
 8005d54:	20000dec 	.word	0x20000dec
 8005d58:	20000dac 	.word	0x20000dac
 8005d5c:	40010c00 	.word	0x40010c00
 8005d60:	20000dfb 	.word	0x20000dfb
 8005d64:	20000dfc 	.word	0x20000dfc
				} else {
					kapiactablaesp2=0;
 8005d68:	4b7e      	ldr	r3, [pc, #504]	@ (8005f64 <checkDemoModCalisma+0x1148>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d6e:	4b7e      	ldr	r3, [pc, #504]	@ (8005f68 <checkDemoModCalisma+0x114c>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d154      	bne.n	8005e20 <checkDemoModCalisma+0x1004>
 8005d76:	4b7d      	ldr	r3, [pc, #500]	@ (8005f6c <checkDemoModCalisma+0x1150>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d003      	beq.n	8005d86 <checkDemoModCalisma+0xf6a>
 8005d7e:	4b7b      	ldr	r3, [pc, #492]	@ (8005f6c <checkDemoModCalisma+0x1150>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d14c      	bne.n	8005e20 <checkDemoModCalisma+0x1004>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d86:	4b7a      	ldr	r3, [pc, #488]	@ (8005f70 <checkDemoModCalisma+0x1154>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d103      	bne.n	8005d96 <checkDemoModCalisma+0xf7a>
 8005d8e:	4b79      	ldr	r3, [pc, #484]	@ (8005f74 <checkDemoModCalisma+0x1158>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d044      	beq.n	8005e20 <checkDemoModCalisma+0x1004>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8005d96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005d9a:	4877      	ldr	r0, [pc, #476]	@ (8005f78 <checkDemoModCalisma+0x115c>)
 8005d9c:	f003 feb2 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d01c      	beq.n	8005de0 <checkDemoModCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8005da6:	2180      	movs	r1, #128	@ 0x80
 8005da8:	4873      	ldr	r0, [pc, #460]	@ (8005f78 <checkDemoModCalisma+0x115c>)
 8005daa:	f003 feab 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d106      	bne.n	8005dc2 <checkDemoModCalisma+0xfa6>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005db4:	2104      	movs	r1, #4
 8005db6:	4870      	ldr	r0, [pc, #448]	@ (8005f78 <checkDemoModCalisma+0x115c>)
 8005db8:	f003 fea4 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d00e      	beq.n	8005de0 <checkDemoModCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005dc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005dc6:	486c      	ldr	r0, [pc, #432]	@ (8005f78 <checkDemoModCalisma+0x115c>)
 8005dc8:	f003 fe9c 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10a      	bne.n	8005de8 <checkDemoModCalisma+0xfcc>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005dd2:	2102      	movs	r1, #2
 8005dd4:	4868      	ldr	r0, [pc, #416]	@ (8005f78 <checkDemoModCalisma+0x115c>)
 8005dd6:	f003 fe95 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d103      	bne.n	8005de8 <checkDemoModCalisma+0xfcc>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005de0:	4b66      	ldr	r3, [pc, #408]	@ (8005f7c <checkDemoModCalisma+0x1160>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d007      	beq.n	8005df8 <checkDemoModCalisma+0xfdc>
 8005de8:	4b65      	ldr	r3, [pc, #404]	@ (8005f80 <checkDemoModCalisma+0x1164>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d103      	bne.n	8005df8 <checkDemoModCalisma+0xfdc>
 8005df0:	4b5c      	ldr	r3, [pc, #368]	@ (8005f64 <checkDemoModCalisma+0x1148>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d013      	beq.n	8005e20 <checkDemoModCalisma+0x1004>
						&&(makineStop==1)
 8005df8:	4b62      	ldr	r3, [pc, #392]	@ (8005f84 <checkDemoModCalisma+0x1168>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00f      	beq.n	8005e20 <checkDemoModCalisma+0x1004>
						&&(butonKontrol==0)) {
 8005e00:	4b61      	ldr	r3, [pc, #388]	@ (8005f88 <checkDemoModCalisma+0x116c>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	f083 0301 	eor.w	r3, r3, #1
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d008      	beq.n	8005e20 <checkDemoModCalisma+0x1004>

					kapiTablaprudhome=1;
 8005e0e:	4b5f      	ldr	r3, [pc, #380]	@ (8005f8c <checkDemoModCalisma+0x1170>)
 8005e10:	2201      	movs	r2, #1
 8005e12:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005e14:	4b5e      	ldr	r3, [pc, #376]	@ (8005f90 <checkDemoModCalisma+0x1174>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a5e      	ldr	r2, [pc, #376]	@ (8005f94 <checkDemoModCalisma+0x1178>)
 8005e1a:	6013      	str	r3, [r2, #0]
					bekle();
 8005e1c:	f7fd fa98 	bl	8003350 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005e20:	4b5b      	ldr	r3, [pc, #364]	@ (8005f90 <checkDemoModCalisma+0x1174>)
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	4b5b      	ldr	r3, [pc, #364]	@ (8005f94 <checkDemoModCalisma+0x1178>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	4a5b      	ldr	r2, [pc, #364]	@ (8005f98 <checkDemoModCalisma+0x117c>)
 8005e2c:	7812      	ldrb	r2, [r2, #0]
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d214      	bcs.n	8005e5c <checkDemoModCalisma+0x1040>
 8005e32:	4b4f      	ldr	r3, [pc, #316]	@ (8005f70 <checkDemoModCalisma+0x1154>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	f083 0301 	eor.w	r3, r3, #1
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d006      	beq.n	8005e4e <checkDemoModCalisma+0x1032>
 8005e40:	4b4c      	ldr	r3, [pc, #304]	@ (8005f74 <checkDemoModCalisma+0x1158>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	f083 0301 	eor.w	r3, r3, #1
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <checkDemoModCalisma+0x1040>
 8005e4e:	4b4d      	ldr	r3, [pc, #308]	@ (8005f84 <checkDemoModCalisma+0x1168>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	f083 0301 	eor.w	r3, r3, #1
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <checkDemoModCalisma+0x1046>
					kapiTablaprudhome=0;
 8005e5c:	4b4b      	ldr	r3, [pc, #300]	@ (8005f8c <checkDemoModCalisma+0x1170>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005e62:	4b41      	ldr	r3, [pc, #260]	@ (8005f68 <checkDemoModCalisma+0x114c>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d148      	bne.n	8005efc <checkDemoModCalisma+0x10e0>
 8005e6a:	4b40      	ldr	r3, [pc, #256]	@ (8005f6c <checkDemoModCalisma+0x1150>)
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d003      	beq.n	8005e7a <checkDemoModCalisma+0x105e>
 8005e72:	4b3e      	ldr	r3, [pc, #248]	@ (8005f6c <checkDemoModCalisma+0x1150>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d140      	bne.n	8005efc <checkDemoModCalisma+0x10e0>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8005f70 <checkDemoModCalisma+0x1154>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d103      	bne.n	8005e8a <checkDemoModCalisma+0x106e>
 8005e82:	4b3c      	ldr	r3, [pc, #240]	@ (8005f74 <checkDemoModCalisma+0x1158>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d038      	beq.n	8005efc <checkDemoModCalisma+0x10e0>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8005e8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005e8e:	483a      	ldr	r0, [pc, #232]	@ (8005f78 <checkDemoModCalisma+0x115c>)
 8005e90:	f003 fe38 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d01c      	beq.n	8005ed4 <checkDemoModCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8005e9a:	2180      	movs	r1, #128	@ 0x80
 8005e9c:	4836      	ldr	r0, [pc, #216]	@ (8005f78 <checkDemoModCalisma+0x115c>)
 8005e9e:	f003 fe31 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <checkDemoModCalisma+0x109a>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005ea8:	2104      	movs	r1, #4
 8005eaa:	4833      	ldr	r0, [pc, #204]	@ (8005f78 <checkDemoModCalisma+0x115c>)
 8005eac:	f003 fe2a 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d00e      	beq.n	8005ed4 <checkDemoModCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005eb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005eba:	482f      	ldr	r0, [pc, #188]	@ (8005f78 <checkDemoModCalisma+0x115c>)
 8005ebc:	f003 fe22 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10a      	bne.n	8005edc <checkDemoModCalisma+0x10c0>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005ec6:	2102      	movs	r1, #2
 8005ec8:	482b      	ldr	r0, [pc, #172]	@ (8005f78 <checkDemoModCalisma+0x115c>)
 8005eca:	f003 fe1b 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d103      	bne.n	8005edc <checkDemoModCalisma+0x10c0>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005ed4:	4b29      	ldr	r3, [pc, #164]	@ (8005f7c <checkDemoModCalisma+0x1160>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <checkDemoModCalisma+0x10d0>
 8005edc:	4b28      	ldr	r3, [pc, #160]	@ (8005f80 <checkDemoModCalisma+0x1164>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d103      	bne.n	8005eec <checkDemoModCalisma+0x10d0>
 8005ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8005f64 <checkDemoModCalisma+0x1148>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d007      	beq.n	8005efc <checkDemoModCalisma+0x10e0>
						&&(makineStop==1)) {
 8005eec:	4b25      	ldr	r3, [pc, #148]	@ (8005f84 <checkDemoModCalisma+0x1168>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <checkDemoModCalisma+0x10e0>

					kapiTablabutonkontrol=1;
 8005ef4:	4b29      	ldr	r3, [pc, #164]	@ (8005f9c <checkDemoModCalisma+0x1180>)
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	e002      	b.n	8005f02 <checkDemoModCalisma+0x10e6>
				} else {
					kapiTablabutonkontrol=0;
 8005efc:	4b27      	ldr	r3, [pc, #156]	@ (8005f9c <checkDemoModCalisma+0x1180>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005f02:	4b19      	ldr	r3, [pc, #100]	@ (8005f68 <checkDemoModCalisma+0x114c>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d117      	bne.n	8005f3a <checkDemoModCalisma+0x111e>
 8005f0a:	4b18      	ldr	r3, [pc, #96]	@ (8005f6c <checkDemoModCalisma+0x1150>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d003      	beq.n	8005f1a <checkDemoModCalisma+0x10fe>
 8005f12:	4b16      	ldr	r3, [pc, #88]	@ (8005f6c <checkDemoModCalisma+0x1150>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d10f      	bne.n	8005f3a <checkDemoModCalisma+0x111e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005f1a:	4b15      	ldr	r3, [pc, #84]	@ (8005f70 <checkDemoModCalisma+0x1154>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d103      	bne.n	8005f2a <checkDemoModCalisma+0x110e>
 8005f22:	4b14      	ldr	r3, [pc, #80]	@ (8005f74 <checkDemoModCalisma+0x1158>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d007      	beq.n	8005f3a <checkDemoModCalisma+0x111e>
						&&(makineStop==1)) {
 8005f2a:	4b16      	ldr	r3, [pc, #88]	@ (8005f84 <checkDemoModCalisma+0x1168>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <checkDemoModCalisma+0x111e>

					kapiTablapizzato=1;
 8005f32:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa0 <checkDemoModCalisma+0x1184>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	e002      	b.n	8005f40 <checkDemoModCalisma+0x1124>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8005f3a:	4b19      	ldr	r3, [pc, #100]	@ (8005fa0 <checkDemoModCalisma+0x1184>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005f40:	4b16      	ldr	r3, [pc, #88]	@ (8005f9c <checkDemoModCalisma+0x1180>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d107      	bne.n	8005f58 <checkDemoModCalisma+0x113c>
 8005f48:	4b10      	ldr	r3, [pc, #64]	@ (8005f8c <checkDemoModCalisma+0x1170>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d103      	bne.n	8005f58 <checkDemoModCalisma+0x113c>
 8005f50:	4b13      	ldr	r3, [pc, #76]	@ (8005fa0 <checkDemoModCalisma+0x1184>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d027      	beq.n	8005fa8 <checkDemoModCalisma+0x118c>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005f58:	2201      	movs	r2, #1
 8005f5a:	2120      	movs	r1, #32
 8005f5c:	4811      	ldr	r0, [pc, #68]	@ (8005fa4 <checkDemoModCalisma+0x1188>)
 8005f5e:	f003 fde8 	bl	8009b32 <HAL_GPIO_WritePin>
 8005f62:	e026      	b.n	8005fb2 <checkDemoModCalisma+0x1196>
 8005f64:	20000dfc 	.word	0x20000dfc
 8005f68:	20000dab 	.word	0x20000dab
 8005f6c:	20000da8 	.word	0x20000da8
 8005f70:	20000deb 	.word	0x20000deb
 8005f74:	20000dec 	.word	0x20000dec
 8005f78:	40011000 	.word	0x40011000
 8005f7c:	20000dac 	.word	0x20000dac
 8005f80:	20000dfb 	.word	0x20000dfb
 8005f84:	20000de1 	.word	0x20000de1
 8005f88:	20000dcf 	.word	0x20000dcf
 8005f8c:	20000de8 	.word	0x20000de8
 8005f90:	20000d78 	.word	0x20000d78
 8005f94:	20000d7c 	.word	0x20000d7c
 8005f98:	20000dbb 	.word	0x20000dbb
 8005f9c:	20000de9 	.word	0x20000de9
 8005fa0:	20000dea 	.word	0x20000dea
 8005fa4:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2120      	movs	r1, #32
 8005fac:	4887      	ldr	r0, [pc, #540]	@ (80061cc <checkDemoModCalisma+0x13b0>)
 8005fae:	f003 fdc0 	bl	8009b32 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005fb2:	4b87      	ldr	r3, [pc, #540]	@ (80061d0 <checkDemoModCalisma+0x13b4>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00e      	beq.n	8005fd8 <checkDemoModCalisma+0x11bc>
 8005fba:	2102      	movs	r1, #2
 8005fbc:	4885      	ldr	r0, [pc, #532]	@ (80061d4 <checkDemoModCalisma+0x13b8>)
 8005fbe:	f003 fda1 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d107      	bne.n	8005fd8 <checkDemoModCalisma+0x11bc>
 8005fc8:	4b83      	ldr	r3, [pc, #524]	@ (80061d8 <checkDemoModCalisma+0x13bc>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d103      	bne.n	8005fd8 <checkDemoModCalisma+0x11bc>
 8005fd0:	4b82      	ldr	r3, [pc, #520]	@ (80061dc <checkDemoModCalisma+0x13c0>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d112      	bne.n	8005ffe <checkDemoModCalisma+0x11e2>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005fd8:	4b81      	ldr	r3, [pc, #516]	@ (80061e0 <checkDemoModCalisma+0x13c4>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d032      	beq.n	8006046 <checkDemoModCalisma+0x122a>
 8005fe0:	2104      	movs	r1, #4
 8005fe2:	487c      	ldr	r0, [pc, #496]	@ (80061d4 <checkDemoModCalisma+0x13b8>)
 8005fe4:	f003 fd8e 	bl	8009b04 <HAL_GPIO_ReadPin>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d12b      	bne.n	8006046 <checkDemoModCalisma+0x122a>
 8005fee:	4b7a      	ldr	r3, [pc, #488]	@ (80061d8 <checkDemoModCalisma+0x13bc>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d027      	beq.n	8006046 <checkDemoModCalisma+0x122a>
 8005ff6:	4b79      	ldr	r3, [pc, #484]	@ (80061dc <checkDemoModCalisma+0x13c0>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d023      	beq.n	8006046 <checkDemoModCalisma+0x122a>


					calismaSayisi++;
 8005ffe:	4b79      	ldr	r3, [pc, #484]	@ (80061e4 <checkDemoModCalisma+0x13c8>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	3301      	adds	r3, #1
 8006004:	b2da      	uxtb	r2, r3
 8006006:	4b77      	ldr	r3, [pc, #476]	@ (80061e4 <checkDemoModCalisma+0x13c8>)
 8006008:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 800600a:	4b76      	ldr	r3, [pc, #472]	@ (80061e4 <checkDemoModCalisma+0x13c8>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2bff      	cmp	r3, #255	@ 0xff
 8006010:	d108      	bne.n	8006024 <checkDemoModCalisma+0x1208>
						calismaSayisi = 0;
 8006012:	4b74      	ldr	r3, [pc, #464]	@ (80061e4 <checkDemoModCalisma+0x13c8>)
 8006014:	2200      	movs	r2, #0
 8006016:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 8006018:	4b73      	ldr	r3, [pc, #460]	@ (80061e8 <checkDemoModCalisma+0x13cc>)
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	3301      	adds	r3, #1
 800601e:	b2da      	uxtb	r2, r3
 8006020:	4b71      	ldr	r3, [pc, #452]	@ (80061e8 <checkDemoModCalisma+0x13cc>)
 8006022:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 8006024:	4b6f      	ldr	r3, [pc, #444]	@ (80061e4 <checkDemoModCalisma+0x13c8>)
 8006026:	781a      	ldrb	r2, [r3, #0]
 8006028:	4b70      	ldr	r3, [pc, #448]	@ (80061ec <checkDemoModCalisma+0x13d0>)
 800602a:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 800602c:	4b6e      	ldr	r3, [pc, #440]	@ (80061e8 <checkDemoModCalisma+0x13cc>)
 800602e:	781a      	ldrb	r2, [r3, #0]
 8006030:	4b6e      	ldr	r3, [pc, #440]	@ (80061ec <checkDemoModCalisma+0x13d0>)
 8006032:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 8006034:	4b6e      	ldr	r3, [pc, #440]	@ (80061f0 <checkDemoModCalisma+0x13d4>)
 8006036:	2201      	movs	r2, #1
 8006038:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 800603a:	4b65      	ldr	r3, [pc, #404]	@ (80061d0 <checkDemoModCalisma+0x13b4>)
 800603c:	2200      	movs	r2, #0
 800603e:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 8006040:	4b67      	ldr	r3, [pc, #412]	@ (80061e0 <checkDemoModCalisma+0x13c4>)
 8006042:	2200      	movs	r2, #0
 8006044:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006046:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800604a:	486a      	ldr	r0, [pc, #424]	@ (80061f4 <checkDemoModCalisma+0x13d8>)
 800604c:	f003 fd5a 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d016      	beq.n	8006084 <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006056:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800605a:	4866      	ldr	r0, [pc, #408]	@ (80061f4 <checkDemoModCalisma+0x13d8>)
 800605c:	f003 fd52 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00e      	beq.n	8006084 <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006066:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800606a:	4862      	ldr	r0, [pc, #392]	@ (80061f4 <checkDemoModCalisma+0x13d8>)
 800606c:	f003 fd4a 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d006      	beq.n	8006084 <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006076:	2140      	movs	r1, #64	@ 0x40
 8006078:	4856      	ldr	r0, [pc, #344]	@ (80061d4 <checkDemoModCalisma+0x13b8>)
 800607a:	f003 fd43 	bl	8009b04 <HAL_GPIO_ReadPin>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d103      	bne.n	800608c <checkDemoModCalisma+0x1270>

					startBasili=1;
 8006084:	4b5c      	ldr	r3, [pc, #368]	@ (80061f8 <checkDemoModCalisma+0x13dc>)
 8006086:	2201      	movs	r2, #1
 8006088:	701a      	strb	r2, [r3, #0]
 800608a:	e002      	b.n	8006092 <checkDemoModCalisma+0x1276>
				} else {
					startBasili=0;
 800608c:	4b5a      	ldr	r3, [pc, #360]	@ (80061f8 <checkDemoModCalisma+0x13dc>)
 800608e:	2200      	movs	r2, #0
 8006090:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006092:	4b59      	ldr	r3, [pc, #356]	@ (80061f8 <checkDemoModCalisma+0x13dc>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d014      	beq.n	80060c4 <checkDemoModCalisma+0x12a8>
 800609a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800609e:	4855      	ldr	r0, [pc, #340]	@ (80061f4 <checkDemoModCalisma+0x13d8>)
 80060a0:	f003 fd30 	bl	8009b04 <HAL_GPIO_ReadPin>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d10c      	bne.n	80060c4 <checkDemoModCalisma+0x12a8>

					hataVar=1;
 80060aa:	4b54      	ldr	r3, [pc, #336]	@ (80061fc <checkDemoModCalisma+0x13e0>)
 80060ac:	2201      	movs	r2, #1
 80060ae:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 80060b0:	2001      	movs	r0, #1
 80060b2:	f7fa fbd9 	bl	8000868 <hataKoduLcdGoster>
					hata2EEPROM(1);
 80060b6:	2001      	movs	r0, #1
 80060b8:	f7fa fb7e 	bl	80007b8 <hata2EEPROM>
					acilstophatasi=1;
 80060bc:	4b50      	ldr	r3, [pc, #320]	@ (8006200 <checkDemoModCalisma+0x13e4>)
 80060be:	2201      	movs	r2, #1
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	e018      	b.n	80060f6 <checkDemoModCalisma+0x12da>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80060c4:	4b4e      	ldr	r3, [pc, #312]	@ (8006200 <checkDemoModCalisma+0x13e4>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d014      	beq.n	80060f6 <checkDemoModCalisma+0x12da>
 80060cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80060d0:	4848      	ldr	r0, [pc, #288]	@ (80061f4 <checkDemoModCalisma+0x13d8>)
 80060d2:	f003 fd17 	bl	8009b04 <HAL_GPIO_ReadPin>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10c      	bne.n	80060f6 <checkDemoModCalisma+0x12da>
 80060dc:	4b46      	ldr	r3, [pc, #280]	@ (80061f8 <checkDemoModCalisma+0x13dc>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	f083 0301 	eor.w	r3, r3, #1
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <checkDemoModCalisma+0x12da>
					acilstophatasi=0;
 80060ea:	4b45      	ldr	r3, [pc, #276]	@ (8006200 <checkDemoModCalisma+0x13e4>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 80060f0:	2001      	movs	r0, #1
 80060f2:	f7fd f8c3 	bl	800327c <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 80060f6:	4b43      	ldr	r3, [pc, #268]	@ (8006204 <checkDemoModCalisma+0x13e8>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	f083 0301 	eor.w	r3, r3, #1
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d023      	beq.n	800614c <checkDemoModCalisma+0x1330>
 8006104:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006108:	483a      	ldr	r0, [pc, #232]	@ (80061f4 <checkDemoModCalisma+0x13d8>)
 800610a:	f003 fcfb 	bl	8009b04 <HAL_GPIO_ReadPin>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <checkDemoModCalisma+0x1300>
 8006114:	4b3c      	ldr	r3, [pc, #240]	@ (8006208 <checkDemoModCalisma+0x13ec>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d017      	beq.n	800614c <checkDemoModCalisma+0x1330>
 800611c:	4b3b      	ldr	r3, [pc, #236]	@ (800620c <checkDemoModCalisma+0x13f0>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d113      	bne.n	800614c <checkDemoModCalisma+0x1330>
 8006124:	4b3a      	ldr	r3, [pc, #232]	@ (8006210 <checkDemoModCalisma+0x13f4>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	f083 0301 	eor.w	r3, r3, #1
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00c      	beq.n	800614c <checkDemoModCalisma+0x1330>
					hataVar=1;
 8006132:	4b32      	ldr	r3, [pc, #200]	@ (80061fc <checkDemoModCalisma+0x13e0>)
 8006134:	2201      	movs	r2, #1
 8006136:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8006138:	2002      	movs	r0, #2
 800613a:	f7fa fb95 	bl	8000868 <hataKoduLcdGoster>
					hata2EEPROM(2);
 800613e:	2002      	movs	r0, #2
 8006140:	f7fa fb3a 	bl	80007b8 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8006144:	4b32      	ldr	r3, [pc, #200]	@ (8006210 <checkDemoModCalisma+0x13f4>)
 8006146:	2201      	movs	r2, #1
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	e017      	b.n	800617c <checkDemoModCalisma+0x1360>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 800614c:	4b30      	ldr	r3, [pc, #192]	@ (8006210 <checkDemoModCalisma+0x13f4>)
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d013      	beq.n	800617c <checkDemoModCalisma+0x1360>
 8006154:	4b2b      	ldr	r3, [pc, #172]	@ (8006204 <checkDemoModCalisma+0x13e8>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00f      	beq.n	800617c <checkDemoModCalisma+0x1360>
 800615c:	4b2d      	ldr	r3, [pc, #180]	@ (8006214 <checkDemoModCalisma+0x13f8>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	f083 0301 	eor.w	r3, r3, #1
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d008      	beq.n	800617c <checkDemoModCalisma+0x1360>
					emniyetCercevesihatasi=0;
 800616a:	4b29      	ldr	r3, [pc, #164]	@ (8006210 <checkDemoModCalisma+0x13f4>)
 800616c:	2200      	movs	r2, #0
 800616e:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8006170:	4b25      	ldr	r3, [pc, #148]	@ (8006208 <checkDemoModCalisma+0x13ec>)
 8006172:	2200      	movs	r2, #0
 8006174:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 8006176:	2002      	movs	r0, #2
 8006178:	f7fd f880 	bl	800327c <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 800617c:	4b26      	ldr	r3, [pc, #152]	@ (8006218 <checkDemoModCalisma+0x13fc>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d151      	bne.n	8006228 <checkDemoModCalisma+0x140c>
 8006184:	4b25      	ldr	r3, [pc, #148]	@ (800621c <checkDemoModCalisma+0x1400>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d14d      	bne.n	8006228 <checkDemoModCalisma+0x140c>
 800618c:	4b24      	ldr	r3, [pc, #144]	@ (8006220 <checkDemoModCalisma+0x1404>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d049      	beq.n	8006228 <checkDemoModCalisma+0x140c>
 8006194:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006198:	480e      	ldr	r0, [pc, #56]	@ (80061d4 <checkDemoModCalisma+0x13b8>)
 800619a:	f003 fcb3 	bl	8009b04 <HAL_GPIO_ReadPin>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d141      	bne.n	8006228 <checkDemoModCalisma+0x140c>
 80061a4:	4b1f      	ldr	r3, [pc, #124]	@ (8006224 <checkDemoModCalisma+0x1408>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	f083 0301 	eor.w	r3, r3, #1
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d03a      	beq.n	8006228 <checkDemoModCalisma+0x140c>
					hataVar=1;
 80061b2:	4b12      	ldr	r3, [pc, #72]	@ (80061fc <checkDemoModCalisma+0x13e0>)
 80061b4:	2201      	movs	r2, #1
 80061b6:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 80061b8:	2003      	movs	r0, #3
 80061ba:	f7fa fb55 	bl	8000868 <hataKoduLcdGoster>
					hata2EEPROM(3);
 80061be:	2003      	movs	r0, #3
 80061c0:	f7fa fafa 	bl	80007b8 <hata2EEPROM>
					basinchatasi=1;
 80061c4:	4b17      	ldr	r3, [pc, #92]	@ (8006224 <checkDemoModCalisma+0x1408>)
 80061c6:	2201      	movs	r2, #1
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	e043      	b.n	8006254 <checkDemoModCalisma+0x1438>
 80061cc:	40010800 	.word	0x40010800
 80061d0:	20000ddf 	.word	0x20000ddf
 80061d4:	40011000 	.word	0x40011000
 80061d8:	20000da6 	.word	0x20000da6
 80061dc:	20000de1 	.word	0x20000de1
 80061e0:	20000de0 	.word	0x20000de0
 80061e4:	20000d98 	.word	0x20000d98
 80061e8:	20000d9a 	.word	0x20000d9a
 80061ec:	20000d00 	.word	0x20000d00
 80061f0:	20000dcc 	.word	0x20000dcc
 80061f4:	40010c00 	.word	0x40010c00
 80061f8:	20000ded 	.word	0x20000ded
 80061fc:	20000df4 	.word	0x20000df4
 8006200:	20000def 	.word	0x20000def
 8006204:	20000df6 	.word	0x20000df6
 8006208:	20000e00 	.word	0x20000e00
 800620c:	20000da4 	.word	0x20000da4
 8006210:	20000df0 	.word	0x20000df0
 8006214:	20000dd8 	.word	0x20000dd8
 8006218:	20000da3 	.word	0x20000da3
 800621c:	20000da7 	.word	0x20000da7
 8006220:	20000df3 	.word	0x20000df3
 8006224:	20000dfd 	.word	0x20000dfd
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006228:	4b85      	ldr	r3, [pc, #532]	@ (8006440 <checkDemoModCalisma+0x1624>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d011      	beq.n	8006254 <checkDemoModCalisma+0x1438>
 8006230:	4b84      	ldr	r3, [pc, #528]	@ (8006444 <checkDemoModCalisma+0x1628>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d10d      	bne.n	8006254 <checkDemoModCalisma+0x1438>
 8006238:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800623c:	4882      	ldr	r0, [pc, #520]	@ (8006448 <checkDemoModCalisma+0x162c>)
 800623e:	f003 fc61 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006242:	4603      	mov	r3, r0
 8006244:	2b01      	cmp	r3, #1
 8006246:	d105      	bne.n	8006254 <checkDemoModCalisma+0x1438>
					basinchatasi=0;
 8006248:	4b7d      	ldr	r3, [pc, #500]	@ (8006440 <checkDemoModCalisma+0x1624>)
 800624a:	2200      	movs	r2, #0
 800624c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 800624e:	2003      	movs	r0, #3
 8006250:	f7fd f814 	bl	800327c <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8006254:	4b7d      	ldr	r3, [pc, #500]	@ (800644c <checkDemoModCalisma+0x1630>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d103      	bne.n	8006264 <checkDemoModCalisma+0x1448>
 800625c:	4b7c      	ldr	r3, [pc, #496]	@ (8006450 <checkDemoModCalisma+0x1634>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d023      	beq.n	80062ac <checkDemoModCalisma+0x1490>
 8006264:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006268:	487a      	ldr	r0, [pc, #488]	@ (8006454 <checkDemoModCalisma+0x1638>)
 800626a:	f003 fc4b 	bl	8009b04 <HAL_GPIO_ReadPin>
 800626e:	4603      	mov	r3, r0
 8006270:	2b01      	cmp	r3, #1
 8006272:	d11b      	bne.n	80062ac <checkDemoModCalisma+0x1490>
 8006274:	4b78      	ldr	r3, [pc, #480]	@ (8006458 <checkDemoModCalisma+0x163c>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d003      	beq.n	8006284 <checkDemoModCalisma+0x1468>
 800627c:	4b76      	ldr	r3, [pc, #472]	@ (8006458 <checkDemoModCalisma+0x163c>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b03      	cmp	r3, #3
 8006282:	d113      	bne.n	80062ac <checkDemoModCalisma+0x1490>
 8006284:	4b75      	ldr	r3, [pc, #468]	@ (800645c <checkDemoModCalisma+0x1640>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	f083 0301 	eor.w	r3, r3, #1
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00c      	beq.n	80062ac <checkDemoModCalisma+0x1490>
					hataVar=1;
 8006292:	4b73      	ldr	r3, [pc, #460]	@ (8006460 <checkDemoModCalisma+0x1644>)
 8006294:	2201      	movs	r2, #1
 8006296:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8006298:	2004      	movs	r0, #4
 800629a:	f7fa fae5 	bl	8000868 <hataKoduLcdGoster>
					hata2EEPROM(4);
 800629e:	2004      	movs	r0, #4
 80062a0:	f7fa fa8a 	bl	80007b8 <hata2EEPROM>
					katkapisivicihatasi=1;
 80062a4:	4b6d      	ldr	r3, [pc, #436]	@ (800645c <checkDemoModCalisma+0x1640>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	e01f      	b.n	80062ec <checkDemoModCalisma+0x14d0>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80062ac:	4b6b      	ldr	r3, [pc, #428]	@ (800645c <checkDemoModCalisma+0x1640>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d01b      	beq.n	80062ec <checkDemoModCalisma+0x14d0>
 80062b4:	4b6b      	ldr	r3, [pc, #428]	@ (8006464 <checkDemoModCalisma+0x1648>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d017      	beq.n	80062ec <checkDemoModCalisma+0x14d0>
 80062bc:	4b63      	ldr	r3, [pc, #396]	@ (800644c <checkDemoModCalisma+0x1630>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	f083 0301 	eor.w	r3, r3, #1
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d010      	beq.n	80062ec <checkDemoModCalisma+0x14d0>
 80062ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80062ce:	4861      	ldr	r0, [pc, #388]	@ (8006454 <checkDemoModCalisma+0x1638>)
 80062d0:	f003 fc18 	bl	8009b04 <HAL_GPIO_ReadPin>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d108      	bne.n	80062ec <checkDemoModCalisma+0x14d0>

					katkapisivicihatasi=0;
 80062da:	4b60      	ldr	r3, [pc, #384]	@ (800645c <checkDemoModCalisma+0x1640>)
 80062dc:	2200      	movs	r2, #0
 80062de:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 80062e0:	4b5b      	ldr	r3, [pc, #364]	@ (8006450 <checkDemoModCalisma+0x1634>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 80062e6:	2004      	movs	r0, #4
 80062e8:	f7fc ffc8 	bl	800327c <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 80062ec:	4b57      	ldr	r3, [pc, #348]	@ (800644c <checkDemoModCalisma+0x1630>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d103      	bne.n	80062fc <checkDemoModCalisma+0x14e0>
 80062f4:	4b5c      	ldr	r3, [pc, #368]	@ (8006468 <checkDemoModCalisma+0x164c>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d023      	beq.n	8006344 <checkDemoModCalisma+0x1528>
 80062fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006300:	4854      	ldr	r0, [pc, #336]	@ (8006454 <checkDemoModCalisma+0x1638>)
 8006302:	f003 fbff 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006306:	4603      	mov	r3, r0
 8006308:	2b01      	cmp	r3, #1
 800630a:	d11b      	bne.n	8006344 <checkDemoModCalisma+0x1528>
 800630c:	4b52      	ldr	r3, [pc, #328]	@ (8006458 <checkDemoModCalisma+0x163c>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d003      	beq.n	800631c <checkDemoModCalisma+0x1500>
 8006314:	4b50      	ldr	r3, [pc, #320]	@ (8006458 <checkDemoModCalisma+0x163c>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b03      	cmp	r3, #3
 800631a:	d113      	bne.n	8006344 <checkDemoModCalisma+0x1528>
 800631c:	4b53      	ldr	r3, [pc, #332]	@ (800646c <checkDemoModCalisma+0x1650>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	f083 0301 	eor.w	r3, r3, #1
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00c      	beq.n	8006344 <checkDemoModCalisma+0x1528>

					hataVar=1;
 800632a:	4b4d      	ldr	r3, [pc, #308]	@ (8006460 <checkDemoModCalisma+0x1644>)
 800632c:	2201      	movs	r2, #1
 800632e:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8006330:	2005      	movs	r0, #5
 8006332:	f7fa fa99 	bl	8000868 <hataKoduLcdGoster>
					hata2EEPROM(5);
 8006336:	2005      	movs	r0, #5
 8006338:	f7fa fa3e 	bl	80007b8 <hata2EEPROM>
					tablakapisivicihatasi=1;
 800633c:	4b4b      	ldr	r3, [pc, #300]	@ (800646c <checkDemoModCalisma+0x1650>)
 800633e:	2201      	movs	r2, #1
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	e023      	b.n	800638c <checkDemoModCalisma+0x1570>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006344:	4b49      	ldr	r3, [pc, #292]	@ (800646c <checkDemoModCalisma+0x1650>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d01f      	beq.n	800638c <checkDemoModCalisma+0x1570>
 800634c:	4b45      	ldr	r3, [pc, #276]	@ (8006464 <checkDemoModCalisma+0x1648>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d01b      	beq.n	800638c <checkDemoModCalisma+0x1570>
 8006354:	4b3d      	ldr	r3, [pc, #244]	@ (800644c <checkDemoModCalisma+0x1630>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	f083 0301 	eor.w	r3, r3, #1
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d014      	beq.n	800638c <checkDemoModCalisma+0x1570>
 8006362:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006366:	483b      	ldr	r0, [pc, #236]	@ (8006454 <checkDemoModCalisma+0x1638>)
 8006368:	f003 fbcc 	bl	8009b04 <HAL_GPIO_ReadPin>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10c      	bne.n	800638c <checkDemoModCalisma+0x1570>
 8006372:	4b3c      	ldr	r3, [pc, #240]	@ (8006464 <checkDemoModCalisma+0x1648>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d008      	beq.n	800638c <checkDemoModCalisma+0x1570>
					tablakapisivicihatasi=0;
 800637a:	4b3c      	ldr	r3, [pc, #240]	@ (800646c <checkDemoModCalisma+0x1650>)
 800637c:	2200      	movs	r2, #0
 800637e:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8006380:	4b39      	ldr	r3, [pc, #228]	@ (8006468 <checkDemoModCalisma+0x164c>)
 8006382:	2200      	movs	r2, #0
 8006384:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8006386:	2005      	movs	r0, #5
 8006388:	f7fc ff78 	bl	800327c <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 800638c:	4b38      	ldr	r3, [pc, #224]	@ (8006470 <checkDemoModCalisma+0x1654>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d107      	bne.n	80063a4 <checkDemoModCalisma+0x1588>
 8006394:	4b37      	ldr	r3, [pc, #220]	@ (8006474 <checkDemoModCalisma+0x1658>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d103      	bne.n	80063a4 <checkDemoModCalisma+0x1588>
 800639c:	4b36      	ldr	r3, [pc, #216]	@ (8006478 <checkDemoModCalisma+0x165c>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01b      	beq.n	80063dc <checkDemoModCalisma+0x15c0>
 80063a4:	4b35      	ldr	r3, [pc, #212]	@ (800647c <checkDemoModCalisma+0x1660>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	f083 0301 	eor.w	r3, r3, #1
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d014      	beq.n	80063dc <checkDemoModCalisma+0x15c0>
				    if(millis-timer4>=makineCalismaTmr) {
 80063b2:	4b33      	ldr	r3, [pc, #204]	@ (8006480 <checkDemoModCalisma+0x1664>)
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	4b33      	ldr	r3, [pc, #204]	@ (8006484 <checkDemoModCalisma+0x1668>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	4a32      	ldr	r2, [pc, #200]	@ (8006488 <checkDemoModCalisma+0x166c>)
 80063be:	7812      	ldrb	r2, [r2, #0]
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d30b      	bcc.n	80063dc <checkDemoModCalisma+0x15c0>
					  	hataVar=1;
 80063c4:	4b26      	ldr	r3, [pc, #152]	@ (8006460 <checkDemoModCalisma+0x1644>)
 80063c6:	2201      	movs	r2, #1
 80063c8:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 80063ca:	2006      	movs	r0, #6
 80063cc:	f7fa fa4c 	bl	8000868 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 80063d0:	2006      	movs	r0, #6
 80063d2:	f7fa f9f1 	bl	80007b8 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 80063d6:	4b29      	ldr	r3, [pc, #164]	@ (800647c <checkDemoModCalisma+0x1660>)
 80063d8:	2201      	movs	r2, #1
 80063da:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80063dc:	4b27      	ldr	r3, [pc, #156]	@ (800647c <checkDemoModCalisma+0x1660>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d013      	beq.n	800640c <checkDemoModCalisma+0x15f0>
 80063e4:	2108      	movs	r1, #8
 80063e6:	481b      	ldr	r0, [pc, #108]	@ (8006454 <checkDemoModCalisma+0x1638>)
 80063e8:	f003 fb8c 	bl	8009b04 <HAL_GPIO_ReadPin>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00c      	beq.n	800640c <checkDemoModCalisma+0x15f0>
 80063f2:	4b16      	ldr	r3, [pc, #88]	@ (800644c <checkDemoModCalisma+0x1630>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	f083 0301 	eor.w	r3, r3, #1
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <checkDemoModCalisma+0x15f0>
					maksimumcalismahatasi=0;
 8006400:	4b1e      	ldr	r3, [pc, #120]	@ (800647c <checkDemoModCalisma+0x1660>)
 8006402:	2200      	movs	r2, #0
 8006404:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8006406:	2006      	movs	r0, #6
 8006408:	f7fc ff38 	bl	800327c <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 800640c:	4b1f      	ldr	r3, [pc, #124]	@ (800648c <checkDemoModCalisma+0x1670>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10b      	bne.n	800642c <checkDemoModCalisma+0x1610>
 8006414:	4b17      	ldr	r3, [pc, #92]	@ (8006474 <checkDemoModCalisma+0x1658>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d107      	bne.n	800642c <checkDemoModCalisma+0x1610>
 800641c:	4b1c      	ldr	r3, [pc, #112]	@ (8006490 <checkDemoModCalisma+0x1674>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d103      	bne.n	800642c <checkDemoModCalisma+0x1610>
 8006424:	4b14      	ldr	r3, [pc, #80]	@ (8006478 <checkDemoModCalisma+0x165c>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d035      	beq.n	8006498 <checkDemoModCalisma+0x167c>
					makineCalisiyor=0;
 800642c:	4b19      	ldr	r3, [pc, #100]	@ (8006494 <checkDemoModCalisma+0x1678>)
 800642e:	2200      	movs	r2, #0
 8006430:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8006432:	4b07      	ldr	r3, [pc, #28]	@ (8006450 <checkDemoModCalisma+0x1634>)
 8006434:	2201      	movs	r2, #1
 8006436:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8006438:	4b0b      	ldr	r3, [pc, #44]	@ (8006468 <checkDemoModCalisma+0x164c>)
 800643a:	2201      	movs	r2, #1
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	e032      	b.n	80064a6 <checkDemoModCalisma+0x168a>
 8006440:	20000dfd 	.word	0x20000dfd
 8006444:	20000da3 	.word	0x20000da3
 8006448:	40010c00 	.word	0x40010c00
 800644c:	20000ded 	.word	0x20000ded
 8006450:	20000e01 	.word	0x20000e01
 8006454:	40010800 	.word	0x40010800
 8006458:	20000da8 	.word	0x20000da8
 800645c:	20000dfe 	.word	0x20000dfe
 8006460:	20000df4 	.word	0x20000df4
 8006464:	20000de1 	.word	0x20000de1
 8006468:	20000e02 	.word	0x20000e02
 800646c:	20000dff 	.word	0x20000dff
 8006470:	20000df3 	.word	0x20000df3
 8006474:	20000dd8 	.word	0x20000dd8
 8006478:	20000dd7 	.word	0x20000dd7
 800647c:	20000dee 	.word	0x20000dee
 8006480:	20000d78 	.word	0x20000d78
 8006484:	20000d8c 	.word	0x20000d8c
 8006488:	20000db8 	.word	0x20000db8
 800648c:	20000dd5 	.word	0x20000dd5
 8006490:	20000dd6 	.word	0x20000dd6
 8006494:	20000df5 	.word	0x20000df5
				} else {
					makineCalisiyor=1;
 8006498:	4b90      	ldr	r3, [pc, #576]	@ (80066dc <checkDemoModCalisma+0x18c0>)
 800649a:	2201      	movs	r2, #1
 800649c:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 800649e:	4b90      	ldr	r3, [pc, #576]	@ (80066e0 <checkDemoModCalisma+0x18c4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a90      	ldr	r2, [pc, #576]	@ (80066e4 <checkDemoModCalisma+0x18c8>)
 80064a4:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80064a6:	4b90      	ldr	r3, [pc, #576]	@ (80066e8 <checkDemoModCalisma+0x18cc>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d02f      	beq.n	800650e <checkDemoModCalisma+0x16f2>
 80064ae:	4b8f      	ldr	r3, [pc, #572]	@ (80066ec <checkDemoModCalisma+0x18d0>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	f083 0301 	eor.w	r3, r3, #1
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d028      	beq.n	800650e <checkDemoModCalisma+0x16f2>
 80064bc:	4b8c      	ldr	r3, [pc, #560]	@ (80066f0 <checkDemoModCalisma+0x18d4>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	f083 0301 	eor.w	r3, r3, #1
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d021      	beq.n	800650e <checkDemoModCalisma+0x16f2>
 80064ca:	4b8a      	ldr	r3, [pc, #552]	@ (80066f4 <checkDemoModCalisma+0x18d8>)
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	f083 0301 	eor.w	r3, r3, #1
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d01a      	beq.n	800650e <checkDemoModCalisma+0x16f2>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80064d8:	4b87      	ldr	r3, [pc, #540]	@ (80066f8 <checkDemoModCalisma+0x18dc>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	f083 0301 	eor.w	r3, r3, #1
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d013      	beq.n	800650e <checkDemoModCalisma+0x16f2>
 80064e6:	4b85      	ldr	r3, [pc, #532]	@ (80066fc <checkDemoModCalisma+0x18e0>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	f083 0301 	eor.w	r3, r3, #1
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00c      	beq.n	800650e <checkDemoModCalisma+0x16f2>
 80064f4:	4b82      	ldr	r3, [pc, #520]	@ (8006700 <checkDemoModCalisma+0x18e4>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	f083 0301 	eor.w	r3, r3, #1
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <checkDemoModCalisma+0x16f2>

					hataVar=0;
 8006502:	4b79      	ldr	r3, [pc, #484]	@ (80066e8 <checkDemoModCalisma+0x18cc>)
 8006504:	2200      	movs	r2, #0
 8006506:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8006508:	2007      	movs	r0, #7
 800650a:	f7fc feb7 	bl	800327c <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 800650e:	4b76      	ldr	r3, [pc, #472]	@ (80066e8 <checkDemoModCalisma+0x18cc>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d02a      	beq.n	800656c <checkDemoModCalisma+0x1750>
 8006516:	4b75      	ldr	r3, [pc, #468]	@ (80066ec <checkDemoModCalisma+0x18d0>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	f083 0301 	eor.w	r3, r3, #1
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d023      	beq.n	800656c <checkDemoModCalisma+0x1750>
 8006524:	4b72      	ldr	r3, [pc, #456]	@ (80066f0 <checkDemoModCalisma+0x18d4>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01f      	beq.n	800656c <checkDemoModCalisma+0x1750>
 800652c:	4b71      	ldr	r3, [pc, #452]	@ (80066f4 <checkDemoModCalisma+0x18d8>)
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	f083 0301 	eor.w	r3, r3, #1
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d018      	beq.n	800656c <checkDemoModCalisma+0x1750>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 800653a:	4b6f      	ldr	r3, [pc, #444]	@ (80066f8 <checkDemoModCalisma+0x18dc>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	f083 0301 	eor.w	r3, r3, #1
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d011      	beq.n	800656c <checkDemoModCalisma+0x1750>
 8006548:	4b6c      	ldr	r3, [pc, #432]	@ (80066fc <checkDemoModCalisma+0x18e0>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	f083 0301 	eor.w	r3, r3, #1
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <checkDemoModCalisma+0x1750>
 8006556:	4b6a      	ldr	r3, [pc, #424]	@ (8006700 <checkDemoModCalisma+0x18e4>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	f083 0301 	eor.w	r3, r3, #1
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <checkDemoModCalisma+0x1750>
				{
					EmnCerHataMakYukariCalis=1;
 8006564:	4b67      	ldr	r3, [pc, #412]	@ (8006704 <checkDemoModCalisma+0x18e8>)
 8006566:	2201      	movs	r2, #1
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	e009      	b.n	8006580 <checkDemoModCalisma+0x1764>
				}
				else if(emniyetCercevesihatasi==0)
 800656c:	4b60      	ldr	r3, [pc, #384]	@ (80066f0 <checkDemoModCalisma+0x18d4>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	f083 0301 	eor.w	r3, r3, #1
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <checkDemoModCalisma+0x1764>
				{
					EmnCerHataMakYukariCalis=0;
 800657a:	4b62      	ldr	r3, [pc, #392]	@ (8006704 <checkDemoModCalisma+0x18e8>)
 800657c:	2200      	movs	r2, #0
 800657e:	701a      	strb	r2, [r3, #0]

			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006580:	4b61      	ldr	r3, [pc, #388]	@ (8006708 <checkDemoModCalisma+0x18ec>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2b01      	cmp	r3, #1
 8006586:	f040 81d8 	bne.w	800693a <checkDemoModCalisma+0x1b1e>
 800658a:	4b60      	ldr	r3, [pc, #384]	@ (800670c <checkDemoModCalisma+0x18f0>)
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 81d3 	beq.w	800693a <checkDemoModCalisma+0x1b1e>
 8006594:	4b5e      	ldr	r3, [pc, #376]	@ (8006710 <checkDemoModCalisma+0x18f4>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	f040 81ce 	bne.w	800693a <checkDemoModCalisma+0x1b1e>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800659e:	2102      	movs	r1, #2
 80065a0:	485c      	ldr	r0, [pc, #368]	@ (8006714 <checkDemoModCalisma+0x18f8>)
 80065a2:	f003 faaf 	bl	8009b04 <HAL_GPIO_ReadPin>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d11d      	bne.n	80065e8 <checkDemoModCalisma+0x17cc>
						&& (demoAsagiCalis==0)
 80065ac:	4b5a      	ldr	r3, [pc, #360]	@ (8006718 <checkDemoModCalisma+0x18fc>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	f083 0301 	eor.w	r3, r3, #1
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d016      	beq.n	80065e8 <checkDemoModCalisma+0x17cc>
						&& (demoDevYukari==0)
 80065ba:	4b58      	ldr	r3, [pc, #352]	@ (800671c <checkDemoModCalisma+0x1900>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	f083 0301 	eor.w	r3, r3, #1
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00f      	beq.n	80065e8 <checkDemoModCalisma+0x17cc>
						&& (demoDevAsagi==0)) {
 80065c8:	4b55      	ldr	r3, [pc, #340]	@ (8006720 <checkDemoModCalisma+0x1904>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	f083 0301 	eor.w	r3, r3, #1
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d008      	beq.n	80065e8 <checkDemoModCalisma+0x17cc>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80065d6:	2201      	movs	r2, #1
 80065d8:	2104      	movs	r1, #4
 80065da:	4852      	ldr	r0, [pc, #328]	@ (8006724 <checkDemoModCalisma+0x1908>)
 80065dc:	f003 faa9 	bl	8009b32 <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 80065e0:	4b51      	ldr	r3, [pc, #324]	@ (8006728 <checkDemoModCalisma+0x190c>)
 80065e2:	2201      	movs	r2, #1
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	e00e      	b.n	8006606 <checkDemoModCalisma+0x17ea>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80065e8:	2102      	movs	r1, #2
 80065ea:	484a      	ldr	r0, [pc, #296]	@ (8006714 <checkDemoModCalisma+0x18f8>)
 80065ec:	f003 fa8a 	bl	8009b04 <HAL_GPIO_ReadPin>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d107      	bne.n	8006606 <checkDemoModCalisma+0x17ea>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80065f6:	2200      	movs	r2, #0
 80065f8:	2104      	movs	r1, #4
 80065fa:	484a      	ldr	r0, [pc, #296]	@ (8006724 <checkDemoModCalisma+0x1908>)
 80065fc:	f003 fa99 	bl	8009b32 <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8006600:	4b49      	ldr	r3, [pc, #292]	@ (8006728 <checkDemoModCalisma+0x190c>)
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006606:	4b48      	ldr	r3, [pc, #288]	@ (8006728 <checkDemoModCalisma+0x190c>)
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10b      	bne.n	8006626 <checkDemoModCalisma+0x180a>
 800660e:	4b43      	ldr	r3, [pc, #268]	@ (800671c <checkDemoModCalisma+0x1900>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d107      	bne.n	8006626 <checkDemoModCalisma+0x180a>
 8006616:	4b42      	ldr	r3, [pc, #264]	@ (8006720 <checkDemoModCalisma+0x1904>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d103      	bne.n	8006626 <checkDemoModCalisma+0x180a>
 800661e:	4b3e      	ldr	r3, [pc, #248]	@ (8006718 <checkDemoModCalisma+0x18fc>)
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00c      	beq.n	8006640 <checkDemoModCalisma+0x1824>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006626:	2201      	movs	r2, #1
 8006628:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800662c:	483d      	ldr	r0, [pc, #244]	@ (8006724 <checkDemoModCalisma+0x1908>)
 800662e:	f003 fa80 	bl	8009b32 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006632:	2201      	movs	r2, #1
 8006634:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006638:	483a      	ldr	r0, [pc, #232]	@ (8006724 <checkDemoModCalisma+0x1908>)
 800663a:	f003 fa7a 	bl	8009b32 <HAL_GPIO_WritePin>
 800663e:	e00b      	b.n	8006658 <checkDemoModCalisma+0x183c>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006640:	2200      	movs	r2, #0
 8006642:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006646:	4837      	ldr	r0, [pc, #220]	@ (8006724 <checkDemoModCalisma+0x1908>)
 8006648:	f003 fa73 	bl	8009b32 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800664c:	2200      	movs	r2, #0
 800664e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006652:	4834      	ldr	r0, [pc, #208]	@ (8006724 <checkDemoModCalisma+0x1908>)
 8006654:	f003 fa6d 	bl	8009b32 <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006658:	2102      	movs	r1, #2
 800665a:	482e      	ldr	r0, [pc, #184]	@ (8006714 <checkDemoModCalisma+0x18f8>)
 800665c:	f003 fa52 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006660:	4603      	mov	r3, r0
 8006662:	2b01      	cmp	r3, #1
 8006664:	d10d      	bne.n	8006682 <checkDemoModCalisma+0x1866>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006666:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800666a:	482a      	ldr	r0, [pc, #168]	@ (8006714 <checkDemoModCalisma+0x18f8>)
 800666c:	f003 fa4a 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d105      	bne.n	8006682 <checkDemoModCalisma+0x1866>
						&& (demoYukariCalis==0)
 8006676:	4b2c      	ldr	r3, [pc, #176]	@ (8006728 <checkDemoModCalisma+0x190c>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	f083 0301 	eor.w	r3, r3, #1
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006682:	2102      	movs	r1, #2
 8006684:	4823      	ldr	r0, [pc, #140]	@ (8006714 <checkDemoModCalisma+0x18f8>)
 8006686:	f003 fa3d 	bl	8009b04 <HAL_GPIO_ReadPin>
 800668a:	4603      	mov	r3, r0
 800668c:	2b01      	cmp	r3, #1
 800668e:	d14d      	bne.n	800672c <checkDemoModCalisma+0x1910>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006690:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006694:	481f      	ldr	r0, [pc, #124]	@ (8006714 <checkDemoModCalisma+0x18f8>)
 8006696:	f003 fa35 	bl	8009b04 <HAL_GPIO_ReadPin>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d145      	bne.n	800672c <checkDemoModCalisma+0x1910>
						&&(demoYukariCalis==0)
 80066a0:	4b21      	ldr	r3, [pc, #132]	@ (8006728 <checkDemoModCalisma+0x190c>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	f083 0301 	eor.w	r3, r3, #1
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d03e      	beq.n	800672c <checkDemoModCalisma+0x1910>
						&&(demoAsagiCalis==0)
 80066ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006718 <checkDemoModCalisma+0x18fc>)
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	f083 0301 	eor.w	r3, r3, #1
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d037      	beq.n	800672c <checkDemoModCalisma+0x1910>
						&& (demoDevAsagi==0)) {
 80066bc:	4b18      	ldr	r3, [pc, #96]	@ (8006720 <checkDemoModCalisma+0x1904>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	f083 0301 	eor.w	r3, r3, #1
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d030      	beq.n	800672c <checkDemoModCalisma+0x1910>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80066ca:	2201      	movs	r2, #1
 80066cc:	2120      	movs	r1, #32
 80066ce:	4811      	ldr	r0, [pc, #68]	@ (8006714 <checkDemoModCalisma+0x18f8>)
 80066d0:	f003 fa2f 	bl	8009b32 <HAL_GPIO_WritePin>
					demoDevYukari=1;
 80066d4:	4b11      	ldr	r3, [pc, #68]	@ (800671c <checkDemoModCalisma+0x1900>)
 80066d6:	2201      	movs	r2, #1
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	e02f      	b.n	800673c <checkDemoModCalisma+0x1920>
 80066dc:	20000df5 	.word	0x20000df5
 80066e0:	20000d78 	.word	0x20000d78
 80066e4:	20000d8c 	.word	0x20000d8c
 80066e8:	20000df4 	.word	0x20000df4
 80066ec:	20000def 	.word	0x20000def
 80066f0:	20000df0 	.word	0x20000df0
 80066f4:	20000dfd 	.word	0x20000dfd
 80066f8:	20000dfe 	.word	0x20000dfe
 80066fc:	20000dff 	.word	0x20000dff
 8006700:	20000dee 	.word	0x20000dee
 8006704:	20000e03 	.word	0x20000e03
 8006708:	20000dbe 	.word	0x20000dbe
 800670c:	20000df1 	.word	0x20000df1
 8006710:	20000dbd 	.word	0x20000dbd
 8006714:	40011000 	.word	0x40011000
 8006718:	20000df8 	.word	0x20000df8
 800671c:	20000df9 	.word	0x20000df9
 8006720:	20000dfa 	.word	0x20000dfa
 8006724:	40010c00 	.word	0x40010c00
 8006728:	20000df7 	.word	0x20000df7
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800672c:	2200      	movs	r2, #0
 800672e:	2120      	movs	r1, #32
 8006730:	48a1      	ldr	r0, [pc, #644]	@ (80069b8 <checkDemoModCalisma+0x1b9c>)
 8006732:	f003 f9fe 	bl	8009b32 <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8006736:	4ba1      	ldr	r3, [pc, #644]	@ (80069bc <checkDemoModCalisma+0x1ba0>)
 8006738:	2200      	movs	r2, #0
 800673a:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800673c:	2102      	movs	r1, #2
 800673e:	489e      	ldr	r0, [pc, #632]	@ (80069b8 <checkDemoModCalisma+0x1b9c>)
 8006740:	f003 f9e0 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006744:	4603      	mov	r3, r0
 8006746:	2b01      	cmp	r3, #1
 8006748:	d125      	bne.n	8006796 <checkDemoModCalisma+0x197a>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800674a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800674e:	489a      	ldr	r0, [pc, #616]	@ (80069b8 <checkDemoModCalisma+0x1b9c>)
 8006750:	f003 f9d8 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d11d      	bne.n	8006796 <checkDemoModCalisma+0x197a>
						&&(demoYukariCalis==0)
 800675a:	4b99      	ldr	r3, [pc, #612]	@ (80069c0 <checkDemoModCalisma+0x1ba4>)
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	f083 0301 	eor.w	r3, r3, #1
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	d016      	beq.n	8006796 <checkDemoModCalisma+0x197a>
						&&(demoDevYukari==0)
 8006768:	4b94      	ldr	r3, [pc, #592]	@ (80069bc <checkDemoModCalisma+0x1ba0>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	f083 0301 	eor.w	r3, r3, #1
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00f      	beq.n	8006796 <checkDemoModCalisma+0x197a>
						&& (demoAsagiCalis==0)) {
 8006776:	4b93      	ldr	r3, [pc, #588]	@ (80069c4 <checkDemoModCalisma+0x1ba8>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	f083 0301 	eor.w	r3, r3, #1
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d008      	beq.n	8006796 <checkDemoModCalisma+0x197a>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006784:	2201      	movs	r2, #1
 8006786:	2110      	movs	r1, #16
 8006788:	488b      	ldr	r0, [pc, #556]	@ (80069b8 <checkDemoModCalisma+0x1b9c>)
 800678a:	f003 f9d2 	bl	8009b32 <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 800678e:	4b8e      	ldr	r3, [pc, #568]	@ (80069c8 <checkDemoModCalisma+0x1bac>)
 8006790:	2201      	movs	r2, #1
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	e007      	b.n	80067a6 <checkDemoModCalisma+0x198a>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006796:	2200      	movs	r2, #0
 8006798:	2110      	movs	r1, #16
 800679a:	4887      	ldr	r0, [pc, #540]	@ (80069b8 <checkDemoModCalisma+0x1b9c>)
 800679c:	f003 f9c9 	bl	8009b32 <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 80067a0:	4b89      	ldr	r3, [pc, #548]	@ (80069c8 <checkDemoModCalisma+0x1bac>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80067a6:	2104      	movs	r1, #4
 80067a8:	4883      	ldr	r0, [pc, #524]	@ (80069b8 <checkDemoModCalisma+0x1b9c>)
 80067aa:	f003 f9ab 	bl	8009b04 <HAL_GPIO_ReadPin>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d125      	bne.n	8006800 <checkDemoModCalisma+0x19e4>
						&& (demoYukariCalis==0)
 80067b4:	4b82      	ldr	r3, [pc, #520]	@ (80069c0 <checkDemoModCalisma+0x1ba4>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	f083 0301 	eor.w	r3, r3, #1
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d01e      	beq.n	8006800 <checkDemoModCalisma+0x19e4>
						&& (demoDevAsagi==0)
 80067c2:	4b81      	ldr	r3, [pc, #516]	@ (80069c8 <checkDemoModCalisma+0x1bac>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	f083 0301 	eor.w	r3, r3, #1
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d017      	beq.n	8006800 <checkDemoModCalisma+0x19e4>
						&& (demoDevYukari==0)) {
 80067d0:	4b7a      	ldr	r3, [pc, #488]	@ (80069bc <checkDemoModCalisma+0x1ba0>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	f083 0301 	eor.w	r3, r3, #1
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d010      	beq.n	8006800 <checkDemoModCalisma+0x19e4>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80067de:	2201      	movs	r2, #1
 80067e0:	2102      	movs	r1, #2
 80067e2:	487a      	ldr	r0, [pc, #488]	@ (80069cc <checkDemoModCalisma+0x1bb0>)
 80067e4:	f003 f9a5 	bl	8009b32 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80067e8:	2201      	movs	r2, #1
 80067ea:	2101      	movs	r1, #1
 80067ec:	4877      	ldr	r0, [pc, #476]	@ (80069cc <checkDemoModCalisma+0x1bb0>)
 80067ee:	f003 f9a0 	bl	8009b32 <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 80067f2:	4b74      	ldr	r3, [pc, #464]	@ (80069c4 <checkDemoModCalisma+0x1ba8>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 80067f8:	4b75      	ldr	r3, [pc, #468]	@ (80069d0 <checkDemoModCalisma+0x1bb4>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	701a      	strb	r2, [r3, #0]
 80067fe:	e013      	b.n	8006828 <checkDemoModCalisma+0x1a0c>
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006800:	2104      	movs	r1, #4
 8006802:	486d      	ldr	r0, [pc, #436]	@ (80069b8 <checkDemoModCalisma+0x1b9c>)
 8006804:	f003 f97e 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006808:	4603      	mov	r3, r0
 800680a:	2b01      	cmp	r3, #1
 800680c:	d10c      	bne.n	8006828 <checkDemoModCalisma+0x1a0c>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800680e:	2200      	movs	r2, #0
 8006810:	2102      	movs	r1, #2
 8006812:	486e      	ldr	r0, [pc, #440]	@ (80069cc <checkDemoModCalisma+0x1bb0>)
 8006814:	f003 f98d 	bl	8009b32 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006818:	2200      	movs	r2, #0
 800681a:	2101      	movs	r1, #1
 800681c:	486b      	ldr	r0, [pc, #428]	@ (80069cc <checkDemoModCalisma+0x1bb0>)
 800681e:	f003 f988 	bl	8009b32 <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8006822:	4b68      	ldr	r3, [pc, #416]	@ (80069c4 <checkDemoModCalisma+0x1ba8>)
 8006824:	2200      	movs	r2, #0
 8006826:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006828:	2104      	movs	r1, #4
 800682a:	4863      	ldr	r0, [pc, #396]	@ (80069b8 <checkDemoModCalisma+0x1b9c>)
 800682c:	f003 f96a 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006830:	4603      	mov	r3, r0
 8006832:	2b01      	cmp	r3, #1
 8006834:	d10d      	bne.n	8006852 <checkDemoModCalisma+0x1a36>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006836:	2201      	movs	r2, #1
 8006838:	2180      	movs	r1, #128	@ 0x80
 800683a:	4866      	ldr	r0, [pc, #408]	@ (80069d4 <checkDemoModCalisma+0x1bb8>)
 800683c:	f003 f979 	bl	8009b32 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006840:	2201      	movs	r2, #1
 8006842:	2120      	movs	r1, #32
 8006844:	4863      	ldr	r0, [pc, #396]	@ (80069d4 <checkDemoModCalisma+0x1bb8>)
 8006846:	f003 f974 	bl	8009b32 <HAL_GPIO_WritePin>
					timer3 = millis;
 800684a:	4b63      	ldr	r3, [pc, #396]	@ (80069d8 <checkDemoModCalisma+0x1bbc>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a63      	ldr	r2, [pc, #396]	@ (80069dc <checkDemoModCalisma+0x1bc0>)
 8006850:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8006852:	4b61      	ldr	r3, [pc, #388]	@ (80069d8 <checkDemoModCalisma+0x1bbc>)
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	4b61      	ldr	r3, [pc, #388]	@ (80069dc <checkDemoModCalisma+0x1bc0>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b04      	cmp	r3, #4
 800685e:	d909      	bls.n	8006874 <checkDemoModCalisma+0x1a58>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006860:	2200      	movs	r2, #0
 8006862:	2180      	movs	r1, #128	@ 0x80
 8006864:	485b      	ldr	r0, [pc, #364]	@ (80069d4 <checkDemoModCalisma+0x1bb8>)
 8006866:	f003 f964 	bl	8009b32 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800686a:	2200      	movs	r2, #0
 800686c:	2120      	movs	r1, #32
 800686e:	4859      	ldr	r0, [pc, #356]	@ (80069d4 <checkDemoModCalisma+0x1bb8>)
 8006870:	f003 f95f 	bl	8009b32 <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006874:	2102      	movs	r1, #2
 8006876:	4850      	ldr	r0, [pc, #320]	@ (80069b8 <checkDemoModCalisma+0x1b9c>)
 8006878:	f003 f944 	bl	8009b04 <HAL_GPIO_ReadPin>
 800687c:	4603      	mov	r3, r0
 800687e:	2b01      	cmp	r3, #1
 8006880:	d108      	bne.n	8006894 <checkDemoModCalisma+0x1a78>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006882:	2201      	movs	r2, #1
 8006884:	2140      	movs	r1, #64	@ 0x40
 8006886:	4853      	ldr	r0, [pc, #332]	@ (80069d4 <checkDemoModCalisma+0x1bb8>)
 8006888:	f003 f953 	bl	8009b32 <HAL_GPIO_WritePin>
					timer3 = millis;
 800688c:	4b52      	ldr	r3, [pc, #328]	@ (80069d8 <checkDemoModCalisma+0x1bbc>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a52      	ldr	r2, [pc, #328]	@ (80069dc <checkDemoModCalisma+0x1bc0>)
 8006892:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8006894:	4b50      	ldr	r3, [pc, #320]	@ (80069d8 <checkDemoModCalisma+0x1bbc>)
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	4b50      	ldr	r3, [pc, #320]	@ (80069dc <checkDemoModCalisma+0x1bc0>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d904      	bls.n	80068ac <checkDemoModCalisma+0x1a90>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80068a2:	2200      	movs	r2, #0
 80068a4:	2140      	movs	r1, #64	@ 0x40
 80068a6:	484b      	ldr	r0, [pc, #300]	@ (80069d4 <checkDemoModCalisma+0x1bb8>)
 80068a8:	f003 f943 	bl	8009b32 <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80068ac:	4b44      	ldr	r3, [pc, #272]	@ (80069c0 <checkDemoModCalisma+0x1ba4>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d024      	beq.n	80068fe <checkDemoModCalisma+0x1ae2>
 80068b4:	4b46      	ldr	r3, [pc, #280]	@ (80069d0 <checkDemoModCalisma+0x1bb4>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d020      	beq.n	80068fe <checkDemoModCalisma+0x1ae2>

					calismaSayisiDemo++;
 80068bc:	4b48      	ldr	r3, [pc, #288]	@ (80069e0 <checkDemoModCalisma+0x1bc4>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	3301      	adds	r3, #1
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	4b46      	ldr	r3, [pc, #280]	@ (80069e0 <checkDemoModCalisma+0x1bc4>)
 80068c6:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 80068c8:	4b46      	ldr	r3, [pc, #280]	@ (80069e4 <checkDemoModCalisma+0x1bc8>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2bff      	cmp	r3, #255	@ 0xff
 80068ce:	d108      	bne.n	80068e2 <checkDemoModCalisma+0x1ac6>
							calismaSayisi = 0;
 80068d0:	4b44      	ldr	r3, [pc, #272]	@ (80069e4 <checkDemoModCalisma+0x1bc8>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 80068d6:	4b44      	ldr	r3, [pc, #272]	@ (80069e8 <checkDemoModCalisma+0x1bcc>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	3301      	adds	r3, #1
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	4b42      	ldr	r3, [pc, #264]	@ (80069e8 <checkDemoModCalisma+0x1bcc>)
 80068e0:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 80068e2:	4b3f      	ldr	r3, [pc, #252]	@ (80069e0 <checkDemoModCalisma+0x1bc4>)
 80068e4:	781a      	ldrb	r2, [r3, #0]
 80068e6:	4b41      	ldr	r3, [pc, #260]	@ (80069ec <checkDemoModCalisma+0x1bd0>)
 80068e8:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 80068ea:	4b41      	ldr	r3, [pc, #260]	@ (80069f0 <checkDemoModCalisma+0x1bd4>)
 80068ec:	781a      	ldrb	r2, [r3, #0]
 80068ee:	4b3f      	ldr	r3, [pc, #252]	@ (80069ec <checkDemoModCalisma+0x1bd0>)
 80068f0:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 80068f2:	4b40      	ldr	r3, [pc, #256]	@ (80069f4 <checkDemoModCalisma+0x1bd8>)
 80068f4:	2201      	movs	r2, #1
 80068f6:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 80068f8:	4b35      	ldr	r3, [pc, #212]	@ (80069d0 <checkDemoModCalisma+0x1bb4>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 80068fe:	4b3e      	ldr	r3, [pc, #248]	@ (80069f8 <checkDemoModCalisma+0x1bdc>)
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d156      	bne.n	80069b4 <checkDemoModCalisma+0x1b98>
					lcd_print(2,1,"Cycle     ");
 8006906:	4a3d      	ldr	r2, [pc, #244]	@ (80069fc <checkDemoModCalisma+0x1be0>)
 8006908:	2101      	movs	r1, #1
 800690a:	2002      	movs	r0, #2
 800690c:	f001 ff9f 	bl	800884e <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8006910:	4a3b      	ldr	r2, [pc, #236]	@ (8006a00 <checkDemoModCalisma+0x1be4>)
 8006912:	2101      	movs	r1, #1
 8006914:	2001      	movs	r0, #1
 8006916:	f001 ff9a 	bl	800884e <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 800691a:	4b31      	ldr	r3, [pc, #196]	@ (80069e0 <checkDemoModCalisma+0x1bc4>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	220a      	movs	r2, #10
 8006920:	4938      	ldr	r1, [pc, #224]	@ (8006a04 <checkDemoModCalisma+0x1be8>)
 8006922:	4618      	mov	r0, r3
 8006924:	f005 fc90 	bl	800c248 <itoa>
					lcd_print(2,11,snum);
 8006928:	4a36      	ldr	r2, [pc, #216]	@ (8006a04 <checkDemoModCalisma+0x1be8>)
 800692a:	210b      	movs	r1, #11
 800692c:	2002      	movs	r0, #2
 800692e:	f001 ff8e 	bl	800884e <lcd_print>
					mesajYazildi=1;
 8006932:	4b35      	ldr	r3, [pc, #212]	@ (8006a08 <checkDemoModCalisma+0x1bec>)
 8006934:	2201      	movs	r2, #1
 8006936:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8006938:	e03c      	b.n	80069b4 <checkDemoModCalisma+0x1b98>
				}
			} else if(demoMode==1 || menuGiris==1) {
 800693a:	4b34      	ldr	r3, [pc, #208]	@ (8006a0c <checkDemoModCalisma+0x1bf0>)
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d003      	beq.n	800694a <checkDemoModCalisma+0x1b2e>
 8006942:	4b2d      	ldr	r3, [pc, #180]	@ (80069f8 <checkDemoModCalisma+0x1bdc>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d134      	bne.n	80069b4 <checkDemoModCalisma+0x1b98>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800694a:	2200      	movs	r2, #0
 800694c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006950:	481e      	ldr	r0, [pc, #120]	@ (80069cc <checkDemoModCalisma+0x1bb0>)
 8006952:	f003 f8ee 	bl	8009b32 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006956:	2200      	movs	r2, #0
 8006958:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800695c:	481b      	ldr	r0, [pc, #108]	@ (80069cc <checkDemoModCalisma+0x1bb0>)
 800695e:	f003 f8e8 	bl	8009b32 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006962:	2200      	movs	r2, #0
 8006964:	2104      	movs	r1, #4
 8006966:	4819      	ldr	r0, [pc, #100]	@ (80069cc <checkDemoModCalisma+0x1bb0>)
 8006968:	f003 f8e3 	bl	8009b32 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800696c:	2200      	movs	r2, #0
 800696e:	2102      	movs	r1, #2
 8006970:	4816      	ldr	r0, [pc, #88]	@ (80069cc <checkDemoModCalisma+0x1bb0>)
 8006972:	f003 f8de 	bl	8009b32 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006976:	2200      	movs	r2, #0
 8006978:	2101      	movs	r1, #1
 800697a:	4814      	ldr	r0, [pc, #80]	@ (80069cc <checkDemoModCalisma+0x1bb0>)
 800697c:	f003 f8d9 	bl	8009b32 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006980:	2200      	movs	r2, #0
 8006982:	2120      	movs	r1, #32
 8006984:	480c      	ldr	r0, [pc, #48]	@ (80069b8 <checkDemoModCalisma+0x1b9c>)
 8006986:	f003 f8d4 	bl	8009b32 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800698a:	2200      	movs	r2, #0
 800698c:	2110      	movs	r1, #16
 800698e:	480a      	ldr	r0, [pc, #40]	@ (80069b8 <checkDemoModCalisma+0x1b9c>)
 8006990:	f003 f8cf 	bl	8009b32 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006994:	2200      	movs	r2, #0
 8006996:	2180      	movs	r1, #128	@ 0x80
 8006998:	480e      	ldr	r0, [pc, #56]	@ (80069d4 <checkDemoModCalisma+0x1bb8>)
 800699a:	f003 f8ca 	bl	8009b32 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800699e:	2200      	movs	r2, #0
 80069a0:	2140      	movs	r1, #64	@ 0x40
 80069a2:	480c      	ldr	r0, [pc, #48]	@ (80069d4 <checkDemoModCalisma+0x1bb8>)
 80069a4:	f003 f8c5 	bl	8009b32 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80069a8:	2200      	movs	r2, #0
 80069aa:	2120      	movs	r1, #32
 80069ac:	4809      	ldr	r0, [pc, #36]	@ (80069d4 <checkDemoModCalisma+0x1bb8>)
 80069ae:	f003 f8c0 	bl	8009b32 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 80069b2:	e7ff      	b.n	80069b4 <checkDemoModCalisma+0x1b98>
 80069b4:	bf00      	nop
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	40011000 	.word	0x40011000
 80069bc:	20000df9 	.word	0x20000df9
 80069c0:	20000df7 	.word	0x20000df7
 80069c4:	20000df8 	.word	0x20000df8
 80069c8:	20000dfa 	.word	0x20000dfa
 80069cc:	40010c00 	.word	0x40010c00
 80069d0:	20000dde 	.word	0x20000dde
 80069d4:	40010800 	.word	0x40010800
 80069d8:	20000d78 	.word	0x20000d78
 80069dc:	20000d88 	.word	0x20000d88
 80069e0:	20000d99 	.word	0x20000d99
 80069e4:	20000d98 	.word	0x20000d98
 80069e8:	20000d9a 	.word	0x20000d9a
 80069ec:	20000d00 	.word	0x20000d00
 80069f0:	20000d9b 	.word	0x20000d9b
 80069f4:	20000dcc 	.word	0x20000dcc
 80069f8:	20000dbd 	.word	0x20000dbd
 80069fc:	0800c39c 	.word	0x0800c39c
 8006a00:	0800c3a8 	.word	0x0800c3a8
 8006a04:	20000d70 	.word	0x20000d70
 8006a08:	20000dd4 	.word	0x20000dd4
 8006a0c:	20000dbe 	.word	0x20000dbe

08006a10 <mainLoop>:

void mainLoop() {
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 8006a14:	f7fc fc86 	bl	8003324 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006a18:	2101      	movs	r1, #1
 8006a1a:	488b      	ldr	r0, [pc, #556]	@ (8006c48 <mainLoop+0x238>)
 8006a1c:	f003 f872 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d136      	bne.n	8006a94 <mainLoop+0x84>
 8006a26:	2108      	movs	r1, #8
 8006a28:	4888      	ldr	r0, [pc, #544]	@ (8006c4c <mainLoop+0x23c>)
 8006a2a:	f003 f86b 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d12f      	bne.n	8006a94 <mainLoop+0x84>
 8006a34:	2102      	movs	r1, #2
 8006a36:	4884      	ldr	r0, [pc, #528]	@ (8006c48 <mainLoop+0x238>)
 8006a38:	f003 f864 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d128      	bne.n	8006a94 <mainLoop+0x84>
 8006a42:	2104      	movs	r1, #4
 8006a44:	4880      	ldr	r0, [pc, #512]	@ (8006c48 <mainLoop+0x238>)
 8006a46:	f003 f85d 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d121      	bne.n	8006a94 <mainLoop+0x84>
 8006a50:	2108      	movs	r1, #8
 8006a52:	487d      	ldr	r0, [pc, #500]	@ (8006c48 <mainLoop+0x238>)
 8006a54:	f003 f856 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d11a      	bne.n	8006a94 <mainLoop+0x84>
 8006a5e:	2180      	movs	r1, #128	@ 0x80
 8006a60:	487a      	ldr	r0, [pc, #488]	@ (8006c4c <mainLoop+0x23c>)
 8006a62:	f003 f84f 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d113      	bne.n	8006a94 <mainLoop+0x84>
 8006a6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006a70:	4876      	ldr	r0, [pc, #472]	@ (8006c4c <mainLoop+0x23c>)
 8006a72:	f003 f847 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d10b      	bne.n	8006a94 <mainLoop+0x84>
 8006a7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006a80:	4872      	ldr	r0, [pc, #456]	@ (8006c4c <mainLoop+0x23c>)
 8006a82:	f003 f83f 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d103      	bne.n	8006a94 <mainLoop+0x84>
			butonKontrol=0;
 8006a8c:	4b70      	ldr	r3, [pc, #448]	@ (8006c50 <mainLoop+0x240>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	e003      	b.n	8006a9c <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 8006a94:	4b6f      	ldr	r3, [pc, #444]	@ (8006c54 <mainLoop+0x244>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a6f      	ldr	r2, [pc, #444]	@ (8006c58 <mainLoop+0x248>)
 8006a9a:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8006a9c:	f7fc fcf4 	bl	8003488 <buttonCheck>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d103      	bne.n	8006aae <mainLoop+0x9e>
			backLightTimer = millis;
 8006aa6:	4b6b      	ldr	r3, [pc, #428]	@ (8006c54 <mainLoop+0x244>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a6b      	ldr	r2, [pc, #428]	@ (8006c58 <mainLoop+0x248>)
 8006aac:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz == 1) {
 8006aae:	4b6b      	ldr	r3, [pc, #428]	@ (8006c5c <mainLoop+0x24c>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <mainLoop+0xb2>
			hafizaYaz = 0;
 8006ab6:	4b69      	ldr	r3, [pc, #420]	@ (8006c5c <mainLoop+0x24c>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	701a      	strb	r2, [r3, #0]
			saveEEPROM(1);
 8006abc:	2001      	movs	r0, #1
 8006abe:	f7f9 fde9 	bl	8000694 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006ac2:	4b67      	ldr	r3, [pc, #412]	@ (8006c60 <mainLoop+0x250>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	f083 0301 	eor.w	r3, r3, #1
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d043      	beq.n	8006b58 <mainLoop+0x148>
 8006ad0:	4864      	ldr	r0, [pc, #400]	@ (8006c64 <mainLoop+0x254>)
 8006ad2:	f003 fe33 	bl	800a73c <HAL_I2C_GetState>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	d13d      	bne.n	8006b58 <mainLoop+0x148>
		  if(ilkOkuma==0) {
 8006adc:	4b62      	ldr	r3, [pc, #392]	@ (8006c68 <mainLoop+0x258>)
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	f083 0301 	eor.w	r3, r3, #1
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d028      	beq.n	8006b3c <mainLoop+0x12c>
			  lcd_print(1, 1, eepromTextGN);
 8006aea:	4a60      	ldr	r2, [pc, #384]	@ (8006c6c <mainLoop+0x25c>)
 8006aec:	2101      	movs	r1, #1
 8006aee:	2001      	movs	r0, #1
 8006af0:	f001 fead 	bl	800884e <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8006af4:	4a5e      	ldr	r2, [pc, #376]	@ (8006c70 <mainLoop+0x260>)
 8006af6:	2101      	movs	r1, #1
 8006af8:	2002      	movs	r0, #2
 8006afa:	f001 fea8 	bl	800884e <lcd_print>
			  HAL_Delay(1000);
 8006afe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006b02:	f002 fb71 	bl	80091e8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006b06:	bf00      	nop
 8006b08:	4856      	ldr	r0, [pc, #344]	@ (8006c64 <mainLoop+0x254>)
 8006b0a:	f003 fe24 	bl	800a756 <HAL_I2C_GetError>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d0f9      	beq.n	8006b08 <mainLoop+0xf8>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b14:	e003      	b.n	8006b1e <mainLoop+0x10e>
				  HAL_Delay(1000);
 8006b16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006b1a:	f002 fb65 	bl	80091e8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b1e:	4851      	ldr	r0, [pc, #324]	@ (8006c64 <mainLoop+0x254>)
 8006b20:	f003 fe0c 	bl	800a73c <HAL_I2C_GetState>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	d1f5      	bne.n	8006b16 <mainLoop+0x106>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8006b2a:	4a52      	ldr	r2, [pc, #328]	@ (8006c74 <mainLoop+0x264>)
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	2002      	movs	r0, #2
 8006b30:	f001 fe8d 	bl	800884e <lcd_print>

			  ilkOkuma=1;
 8006b34:	4b4c      	ldr	r3, [pc, #304]	@ (8006c68 <mainLoop+0x258>)
 8006b36:	2201      	movs	r2, #1
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	e006      	b.n	8006b4a <mainLoop+0x13a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8006b3c:	4a4e      	ldr	r2, [pc, #312]	@ (8006c78 <mainLoop+0x268>)
 8006b3e:	2101      	movs	r1, #1
 8006b40:	2002      	movs	r0, #2
 8006b42:	f001 fe84 	bl	800884e <lcd_print>
			  lcd_clear();
 8006b46:	f001 fe97 	bl	8008878 <lcd_clear>
		  }

		  lcd_clear();
 8006b4a:	f001 fe95 	bl	8008878 <lcd_clear>

		  eepromKontrol();
 8006b4e:	f7f9 fb71 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006b52:	4b43      	ldr	r3, [pc, #268]	@ (8006c60 <mainLoop+0x250>)
 8006b54:	2201      	movs	r2, #1
 8006b56:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006b58:	4b48      	ldr	r3, [pc, #288]	@ (8006c7c <mainLoop+0x26c>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d11c      	bne.n	8006b9a <mainLoop+0x18a>
 8006b60:	4b47      	ldr	r3, [pc, #284]	@ (8006c80 <mainLoop+0x270>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	f083 0301 	eor.w	r3, r3, #1
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d015      	beq.n	8006b9a <mainLoop+0x18a>
 8006b6e:	4b45      	ldr	r3, [pc, #276]	@ (8006c84 <mainLoop+0x274>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d111      	bne.n	8006b9a <mainLoop+0x18a>
			lcd_clear();
 8006b76:	f001 fe7f 	bl	8008878 <lcd_clear>
			HAL_Delay(10);
 8006b7a:	200a      	movs	r0, #10
 8006b7c:	f002 fb34 	bl	80091e8 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8006b80:	4a41      	ldr	r2, [pc, #260]	@ (8006c88 <mainLoop+0x278>)
 8006b82:	2101      	movs	r1, #1
 8006b84:	2001      	movs	r0, #1
 8006b86:	f001 fe62 	bl	800884e <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8006b8a:	4a40      	ldr	r2, [pc, #256]	@ (8006c8c <mainLoop+0x27c>)
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	2002      	movs	r0, #2
 8006b90:	f001 fe5d 	bl	800884e <lcd_print>
			mesajYazildi=1;
 8006b94:	4b3a      	ldr	r3, [pc, #232]	@ (8006c80 <mainLoop+0x270>)
 8006b96:	2201      	movs	r2, #1
 8006b98:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006b9a:	4b38      	ldr	r3, [pc, #224]	@ (8006c7c <mainLoop+0x26c>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d112      	bne.n	8006bc8 <mainLoop+0x1b8>
 8006ba2:	2102      	movs	r1, #2
 8006ba4:	4828      	ldr	r0, [pc, #160]	@ (8006c48 <mainLoop+0x238>)
 8006ba6:	f002 ffad 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d10b      	bne.n	8006bc8 <mainLoop+0x1b8>
 8006bb0:	2104      	movs	r1, #4
 8006bb2:	4825      	ldr	r0, [pc, #148]	@ (8006c48 <mainLoop+0x238>)
 8006bb4:	f002 ffa6 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d104      	bne.n	8006bc8 <mainLoop+0x1b8>
			menuGiris=1;
 8006bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8006c7c <mainLoop+0x26c>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006bc4:	f001 fe58 	bl	8008878 <lcd_clear>
		}

		if(menuGiris==1) {
 8006bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8006c7c <mainLoop+0x26c>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <mainLoop+0x1c4>
			menu();
 8006bd0:	f7f9 ffba 	bl	8000b48 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006bd4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006bd8:	481c      	ldr	r0, [pc, #112]	@ (8006c4c <mainLoop+0x23c>)
 8006bda:	f002 ffc2 	bl	8009b62 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006bde:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006be2:	482b      	ldr	r0, [pc, #172]	@ (8006c90 <mainLoop+0x280>)
 8006be4:	f002 ff8e 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10a      	bne.n	8006c04 <mainLoop+0x1f4>
 8006bee:	4b29      	ldr	r3, [pc, #164]	@ (8006c94 <mainLoop+0x284>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	f083 0301 	eor.w	r3, r3, #1
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <mainLoop+0x1f4>
			stopVar=1;
 8006bfc:	4b26      	ldr	r3, [pc, #152]	@ (8006c98 <mainLoop+0x288>)
 8006bfe:	2201      	movs	r2, #1
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	e002      	b.n	8006c0a <mainLoop+0x1fa>
		} else {
			stopVar=0;
 8006c04:	4b24      	ldr	r3, [pc, #144]	@ (8006c98 <mainLoop+0x288>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 8006c0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006c0e:	4820      	ldr	r0, [pc, #128]	@ (8006c90 <mainLoop+0x280>)
 8006c10:	f002 ff78 	bl	8009b04 <HAL_GPIO_ReadPin>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d107      	bne.n	8006c2a <mainLoop+0x21a>
 8006c1a:	4b20      	ldr	r3, [pc, #128]	@ (8006c9c <mainLoop+0x28c>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <mainLoop+0x21a>
			EmnStopVar=1;
 8006c22:	4b1f      	ldr	r3, [pc, #124]	@ (8006ca0 <mainLoop+0x290>)
 8006c24:	2201      	movs	r2, #1
 8006c26:	701a      	strb	r2, [r3, #0]
 8006c28:	e002      	b.n	8006c30 <mainLoop+0x220>
		} else {
			EmnStopVar=0;
 8006c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ca0 <mainLoop+0x290>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006c30:	f7fc fc5e 	bl	80034f0 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006c34:	f7fc fc90 	bl	8003558 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006c38:	f7fc fcd4 	bl	80035e4 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006c3c:	f7fc fd24 	bl	8003688 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006c40:	f7fe f8ec 	bl	8004e1c <checkDemoModCalisma>
		checkLCDBacklight();
 8006c44:	e6e6      	b.n	8006a14 <mainLoop+0x4>
 8006c46:	bf00      	nop
 8006c48:	40010800 	.word	0x40010800
 8006c4c:	40011000 	.word	0x40011000
 8006c50:	20000dcf 	.word	0x20000dcf
 8006c54:	20000d78 	.word	0x20000d78
 8006c58:	20000d94 	.word	0x20000d94
 8006c5c:	20000dcc 	.word	0x20000dcc
 8006c60:	20000dcd 	.word	0x20000dcd
 8006c64:	2000140c 	.word	0x2000140c
 8006c68:	20000dce 	.word	0x20000dce
 8006c6c:	2000010c 	.word	0x2000010c
 8006c70:	20001394 	.word	0x20001394
 8006c74:	200013a8 	.word	0x200013a8
 8006c78:	200013bc 	.word	0x200013bc
 8006c7c:	20000dbd 	.word	0x20000dbd
 8006c80:	20000dd4 	.word	0x20000dd4
 8006c84:	20000dbe 	.word	0x20000dbe
 8006c88:	20000058 	.word	0x20000058
 8006c8c:	2000006c 	.word	0x2000006c
 8006c90:	40010c00 	.word	0x40010c00
 8006c94:	20000df4 	.word	0x20000df4
 8006c98:	20000df1 	.word	0x20000df1
 8006c9c:	20000e03 	.word	0x20000e03
 8006ca0:	20000e04 	.word	0x20000e04

08006ca4 <loadMenuTexts>:
char degerKaydedildiText[17];

//Error Code:
char errorCodeText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8006ca4:	b5b0      	push	{r4, r5, r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8006cae:	79fb      	ldrb	r3, [r7, #7]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f040 846b 	bne.w	800758c <loadMenuTexts+0x8e8>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8006cb6:	4ac7      	ldr	r2, [pc, #796]	@ (8006fd4 <loadMenuTexts+0x330>)
 8006cb8:	4bc7      	ldr	r3, [pc, #796]	@ (8006fd8 <loadMenuTexts+0x334>)
 8006cba:	4614      	mov	r4, r2
 8006cbc:	461d      	mov	r5, r3
 8006cbe:	6828      	ldr	r0, [r5, #0]
 8006cc0:	6869      	ldr	r1, [r5, #4]
 8006cc2:	68aa      	ldr	r2, [r5, #8]
 8006cc4:	68eb      	ldr	r3, [r5, #12]
 8006cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cc8:	7c2b      	ldrb	r3, [r5, #16]
 8006cca:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8006ccc:	4ac3      	ldr	r2, [pc, #780]	@ (8006fdc <loadMenuTexts+0x338>)
 8006cce:	4bc4      	ldr	r3, [pc, #784]	@ (8006fe0 <loadMenuTexts+0x33c>)
 8006cd0:	4614      	mov	r4, r2
 8006cd2:	461d      	mov	r5, r3
 8006cd4:	6828      	ldr	r0, [r5, #0]
 8006cd6:	6869      	ldr	r1, [r5, #4]
 8006cd8:	68aa      	ldr	r2, [r5, #8]
 8006cda:	68eb      	ldr	r3, [r5, #12]
 8006cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cde:	7c2b      	ldrb	r3, [r5, #16]
 8006ce0:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8006ce2:	4ac0      	ldr	r2, [pc, #768]	@ (8006fe4 <loadMenuTexts+0x340>)
 8006ce4:	4bc0      	ldr	r3, [pc, #768]	@ (8006fe8 <loadMenuTexts+0x344>)
 8006ce6:	4614      	mov	r4, r2
 8006ce8:	461d      	mov	r5, r3
 8006cea:	6828      	ldr	r0, [r5, #0]
 8006cec:	6869      	ldr	r1, [r5, #4]
 8006cee:	68aa      	ldr	r2, [r5, #8]
 8006cf0:	68eb      	ldr	r3, [r5, #12]
 8006cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cf4:	7c2b      	ldrb	r3, [r5, #16]
 8006cf6:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8006cf8:	4abc      	ldr	r2, [pc, #752]	@ (8006fec <loadMenuTexts+0x348>)
 8006cfa:	4bbd      	ldr	r3, [pc, #756]	@ (8006ff0 <loadMenuTexts+0x34c>)
 8006cfc:	4614      	mov	r4, r2
 8006cfe:	461d      	mov	r5, r3
 8006d00:	6828      	ldr	r0, [r5, #0]
 8006d02:	6869      	ldr	r1, [r5, #4]
 8006d04:	68aa      	ldr	r2, [r5, #8]
 8006d06:	68eb      	ldr	r3, [r5, #12]
 8006d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d0a:	7c2b      	ldrb	r3, [r5, #16]
 8006d0c:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8006d0e:	4ab9      	ldr	r2, [pc, #740]	@ (8006ff4 <loadMenuTexts+0x350>)
 8006d10:	4bb9      	ldr	r3, [pc, #740]	@ (8006ff8 <loadMenuTexts+0x354>)
 8006d12:	4614      	mov	r4, r2
 8006d14:	461d      	mov	r5, r3
 8006d16:	6828      	ldr	r0, [r5, #0]
 8006d18:	6869      	ldr	r1, [r5, #4]
 8006d1a:	68aa      	ldr	r2, [r5, #8]
 8006d1c:	68eb      	ldr	r3, [r5, #12]
 8006d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d20:	7c2b      	ldrb	r3, [r5, #16]
 8006d22:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8006d24:	4ab5      	ldr	r2, [pc, #724]	@ (8006ffc <loadMenuTexts+0x358>)
 8006d26:	4bb6      	ldr	r3, [pc, #728]	@ (8007000 <loadMenuTexts+0x35c>)
 8006d28:	4614      	mov	r4, r2
 8006d2a:	461d      	mov	r5, r3
 8006d2c:	6828      	ldr	r0, [r5, #0]
 8006d2e:	6869      	ldr	r1, [r5, #4]
 8006d30:	68aa      	ldr	r2, [r5, #8]
 8006d32:	68eb      	ldr	r3, [r5, #12]
 8006d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d36:	7c2b      	ldrb	r3, [r5, #16]
 8006d38:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 8006d3a:	4ab2      	ldr	r2, [pc, #712]	@ (8007004 <loadMenuTexts+0x360>)
 8006d3c:	4bb2      	ldr	r3, [pc, #712]	@ (8007008 <loadMenuTexts+0x364>)
 8006d3e:	4614      	mov	r4, r2
 8006d40:	461d      	mov	r5, r3
 8006d42:	6828      	ldr	r0, [r5, #0]
 8006d44:	6869      	ldr	r1, [r5, #4]
 8006d46:	68aa      	ldr	r2, [r5, #8]
 8006d48:	68eb      	ldr	r3, [r5, #12]
 8006d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d4c:	7c2b      	ldrb	r3, [r5, #16]
 8006d4e:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8006d50:	4aae      	ldr	r2, [pc, #696]	@ (800700c <loadMenuTexts+0x368>)
 8006d52:	4baf      	ldr	r3, [pc, #700]	@ (8007010 <loadMenuTexts+0x36c>)
 8006d54:	4614      	mov	r4, r2
 8006d56:	461d      	mov	r5, r3
 8006d58:	6828      	ldr	r0, [r5, #0]
 8006d5a:	6869      	ldr	r1, [r5, #4]
 8006d5c:	68aa      	ldr	r2, [r5, #8]
 8006d5e:	68eb      	ldr	r3, [r5, #12]
 8006d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d62:	7c2b      	ldrb	r3, [r5, #16]
 8006d64:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8006d66:	4aab      	ldr	r2, [pc, #684]	@ (8007014 <loadMenuTexts+0x370>)
 8006d68:	4bab      	ldr	r3, [pc, #684]	@ (8007018 <loadMenuTexts+0x374>)
 8006d6a:	4614      	mov	r4, r2
 8006d6c:	461d      	mov	r5, r3
 8006d6e:	6828      	ldr	r0, [r5, #0]
 8006d70:	6869      	ldr	r1, [r5, #4]
 8006d72:	68aa      	ldr	r2, [r5, #8]
 8006d74:	68eb      	ldr	r3, [r5, #12]
 8006d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d78:	7c2b      	ldrb	r3, [r5, #16]
 8006d7a:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8006d7c:	4aa7      	ldr	r2, [pc, #668]	@ (800701c <loadMenuTexts+0x378>)
 8006d7e:	4ba8      	ldr	r3, [pc, #672]	@ (8007020 <loadMenuTexts+0x37c>)
 8006d80:	4614      	mov	r4, r2
 8006d82:	461d      	mov	r5, r3
 8006d84:	6828      	ldr	r0, [r5, #0]
 8006d86:	6869      	ldr	r1, [r5, #4]
 8006d88:	68aa      	ldr	r2, [r5, #8]
 8006d8a:	68eb      	ldr	r3, [r5, #12]
 8006d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d8e:	7c2b      	ldrb	r3, [r5, #16]
 8006d90:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8006d92:	4aa4      	ldr	r2, [pc, #656]	@ (8007024 <loadMenuTexts+0x380>)
 8006d94:	4ba4      	ldr	r3, [pc, #656]	@ (8007028 <loadMenuTexts+0x384>)
 8006d96:	4614      	mov	r4, r2
 8006d98:	461d      	mov	r5, r3
 8006d9a:	6828      	ldr	r0, [r5, #0]
 8006d9c:	6869      	ldr	r1, [r5, #4]
 8006d9e:	68aa      	ldr	r2, [r5, #8]
 8006da0:	68eb      	ldr	r3, [r5, #12]
 8006da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006da4:	7c2b      	ldrb	r3, [r5, #16]
 8006da6:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8006da8:	4aa0      	ldr	r2, [pc, #640]	@ (800702c <loadMenuTexts+0x388>)
 8006daa:	4ba1      	ldr	r3, [pc, #644]	@ (8007030 <loadMenuTexts+0x38c>)
 8006dac:	4614      	mov	r4, r2
 8006dae:	461d      	mov	r5, r3
 8006db0:	6828      	ldr	r0, [r5, #0]
 8006db2:	6869      	ldr	r1, [r5, #4]
 8006db4:	68aa      	ldr	r2, [r5, #8]
 8006db6:	68eb      	ldr	r3, [r5, #12]
 8006db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dba:	7c2b      	ldrb	r3, [r5, #16]
 8006dbc:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8006dbe:	4a9d      	ldr	r2, [pc, #628]	@ (8007034 <loadMenuTexts+0x390>)
 8006dc0:	4b9d      	ldr	r3, [pc, #628]	@ (8007038 <loadMenuTexts+0x394>)
 8006dc2:	4614      	mov	r4, r2
 8006dc4:	461d      	mov	r5, r3
 8006dc6:	6828      	ldr	r0, [r5, #0]
 8006dc8:	6869      	ldr	r1, [r5, #4]
 8006dca:	68aa      	ldr	r2, [r5, #8]
 8006dcc:	68eb      	ldr	r3, [r5, #12]
 8006dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dd0:	7c2b      	ldrb	r3, [r5, #16]
 8006dd2:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8006dd4:	4a99      	ldr	r2, [pc, #612]	@ (800703c <loadMenuTexts+0x398>)
 8006dd6:	4b9a      	ldr	r3, [pc, #616]	@ (8007040 <loadMenuTexts+0x39c>)
 8006dd8:	4614      	mov	r4, r2
 8006dda:	461d      	mov	r5, r3
 8006ddc:	6828      	ldr	r0, [r5, #0]
 8006dde:	6869      	ldr	r1, [r5, #4]
 8006de0:	68aa      	ldr	r2, [r5, #8]
 8006de2:	68eb      	ldr	r3, [r5, #12]
 8006de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006de6:	7c2b      	ldrb	r3, [r5, #16]
 8006de8:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 8006dea:	4a96      	ldr	r2, [pc, #600]	@ (8007044 <loadMenuTexts+0x3a0>)
 8006dec:	4b96      	ldr	r3, [pc, #600]	@ (8007048 <loadMenuTexts+0x3a4>)
 8006dee:	4614      	mov	r4, r2
 8006df0:	461d      	mov	r5, r3
 8006df2:	6828      	ldr	r0, [r5, #0]
 8006df4:	6869      	ldr	r1, [r5, #4]
 8006df6:	68aa      	ldr	r2, [r5, #8]
 8006df8:	68eb      	ldr	r3, [r5, #12]
 8006dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dfc:	7c2b      	ldrb	r3, [r5, #16]
 8006dfe:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8006e00:	4a92      	ldr	r2, [pc, #584]	@ (800704c <loadMenuTexts+0x3a8>)
 8006e02:	4b93      	ldr	r3, [pc, #588]	@ (8007050 <loadMenuTexts+0x3ac>)
 8006e04:	4614      	mov	r4, r2
 8006e06:	461d      	mov	r5, r3
 8006e08:	6828      	ldr	r0, [r5, #0]
 8006e0a:	6869      	ldr	r1, [r5, #4]
 8006e0c:	68aa      	ldr	r2, [r5, #8]
 8006e0e:	68eb      	ldr	r3, [r5, #12]
 8006e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e12:	7c2b      	ldrb	r3, [r5, #16]
 8006e14:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 8006e16:	4a8f      	ldr	r2, [pc, #572]	@ (8007054 <loadMenuTexts+0x3b0>)
 8006e18:	4b8f      	ldr	r3, [pc, #572]	@ (8007058 <loadMenuTexts+0x3b4>)
 8006e1a:	4614      	mov	r4, r2
 8006e1c:	461d      	mov	r5, r3
 8006e1e:	6828      	ldr	r0, [r5, #0]
 8006e20:	6869      	ldr	r1, [r5, #4]
 8006e22:	68aa      	ldr	r2, [r5, #8]
 8006e24:	68eb      	ldr	r3, [r5, #12]
 8006e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e28:	7c2b      	ldrb	r3, [r5, #16]
 8006e2a:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 8006e2c:	4a8b      	ldr	r2, [pc, #556]	@ (800705c <loadMenuTexts+0x3b8>)
 8006e2e:	4b8c      	ldr	r3, [pc, #560]	@ (8007060 <loadMenuTexts+0x3bc>)
 8006e30:	4614      	mov	r4, r2
 8006e32:	461d      	mov	r5, r3
 8006e34:	6828      	ldr	r0, [r5, #0]
 8006e36:	6869      	ldr	r1, [r5, #4]
 8006e38:	68aa      	ldr	r2, [r5, #8]
 8006e3a:	68eb      	ldr	r3, [r5, #12]
 8006e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e3e:	7c2b      	ldrb	r3, [r5, #16]
 8006e40:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 8006e42:	4a88      	ldr	r2, [pc, #544]	@ (8007064 <loadMenuTexts+0x3c0>)
 8006e44:	4b88      	ldr	r3, [pc, #544]	@ (8007068 <loadMenuTexts+0x3c4>)
 8006e46:	4614      	mov	r4, r2
 8006e48:	461d      	mov	r5, r3
 8006e4a:	6828      	ldr	r0, [r5, #0]
 8006e4c:	6869      	ldr	r1, [r5, #4]
 8006e4e:	68aa      	ldr	r2, [r5, #8]
 8006e50:	68eb      	ldr	r3, [r5, #12]
 8006e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e54:	7c2b      	ldrb	r3, [r5, #16]
 8006e56:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 8006e58:	4a84      	ldr	r2, [pc, #528]	@ (800706c <loadMenuTexts+0x3c8>)
 8006e5a:	4b85      	ldr	r3, [pc, #532]	@ (8007070 <loadMenuTexts+0x3cc>)
 8006e5c:	4614      	mov	r4, r2
 8006e5e:	461d      	mov	r5, r3
 8006e60:	6828      	ldr	r0, [r5, #0]
 8006e62:	6869      	ldr	r1, [r5, #4]
 8006e64:	68aa      	ldr	r2, [r5, #8]
 8006e66:	68eb      	ldr	r3, [r5, #12]
 8006e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e6a:	7c2b      	ldrb	r3, [r5, #16]
 8006e6c:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 8006e6e:	4a81      	ldr	r2, [pc, #516]	@ (8007074 <loadMenuTexts+0x3d0>)
 8006e70:	4b81      	ldr	r3, [pc, #516]	@ (8007078 <loadMenuTexts+0x3d4>)
 8006e72:	4614      	mov	r4, r2
 8006e74:	461d      	mov	r5, r3
 8006e76:	6828      	ldr	r0, [r5, #0]
 8006e78:	6869      	ldr	r1, [r5, #4]
 8006e7a:	68aa      	ldr	r2, [r5, #8]
 8006e7c:	68eb      	ldr	r3, [r5, #12]
 8006e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e80:	7c2b      	ldrb	r3, [r5, #16]
 8006e82:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 8006e84:	4a7d      	ldr	r2, [pc, #500]	@ (800707c <loadMenuTexts+0x3d8>)
 8006e86:	4b7e      	ldr	r3, [pc, #504]	@ (8007080 <loadMenuTexts+0x3dc>)
 8006e88:	4614      	mov	r4, r2
 8006e8a:	461d      	mov	r5, r3
 8006e8c:	6828      	ldr	r0, [r5, #0]
 8006e8e:	6869      	ldr	r1, [r5, #4]
 8006e90:	68aa      	ldr	r2, [r5, #8]
 8006e92:	68eb      	ldr	r3, [r5, #12]
 8006e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e96:	7c2b      	ldrb	r3, [r5, #16]
 8006e98:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 8006e9a:	4a7a      	ldr	r2, [pc, #488]	@ (8007084 <loadMenuTexts+0x3e0>)
 8006e9c:	4b7a      	ldr	r3, [pc, #488]	@ (8007088 <loadMenuTexts+0x3e4>)
 8006e9e:	4614      	mov	r4, r2
 8006ea0:	461d      	mov	r5, r3
 8006ea2:	6828      	ldr	r0, [r5, #0]
 8006ea4:	6869      	ldr	r1, [r5, #4]
 8006ea6:	68aa      	ldr	r2, [r5, #8]
 8006ea8:	68eb      	ldr	r3, [r5, #12]
 8006eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eac:	7c2b      	ldrb	r3, [r5, #16]
 8006eae:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8006eb0:	4a76      	ldr	r2, [pc, #472]	@ (800708c <loadMenuTexts+0x3e8>)
 8006eb2:	4b77      	ldr	r3, [pc, #476]	@ (8007090 <loadMenuTexts+0x3ec>)
 8006eb4:	4614      	mov	r4, r2
 8006eb6:	461d      	mov	r5, r3
 8006eb8:	6828      	ldr	r0, [r5, #0]
 8006eba:	6869      	ldr	r1, [r5, #4]
 8006ebc:	68aa      	ldr	r2, [r5, #8]
 8006ebe:	68eb      	ldr	r3, [r5, #12]
 8006ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ec2:	7c2b      	ldrb	r3, [r5, #16]
 8006ec4:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 8006ec6:	4a73      	ldr	r2, [pc, #460]	@ (8007094 <loadMenuTexts+0x3f0>)
 8006ec8:	4b73      	ldr	r3, [pc, #460]	@ (8007098 <loadMenuTexts+0x3f4>)
 8006eca:	4614      	mov	r4, r2
 8006ecc:	461d      	mov	r5, r3
 8006ece:	6828      	ldr	r0, [r5, #0]
 8006ed0:	6869      	ldr	r1, [r5, #4]
 8006ed2:	68aa      	ldr	r2, [r5, #8]
 8006ed4:	68eb      	ldr	r3, [r5, #12]
 8006ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ed8:	7c2b      	ldrb	r3, [r5, #16]
 8006eda:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8006edc:	4a6f      	ldr	r2, [pc, #444]	@ (800709c <loadMenuTexts+0x3f8>)
 8006ede:	4b70      	ldr	r3, [pc, #448]	@ (80070a0 <loadMenuTexts+0x3fc>)
 8006ee0:	4614      	mov	r4, r2
 8006ee2:	461d      	mov	r5, r3
 8006ee4:	6828      	ldr	r0, [r5, #0]
 8006ee6:	6869      	ldr	r1, [r5, #4]
 8006ee8:	68aa      	ldr	r2, [r5, #8]
 8006eea:	68eb      	ldr	r3, [r5, #12]
 8006eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eee:	7c2b      	ldrb	r3, [r5, #16]
 8006ef0:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 8006ef2:	4a6c      	ldr	r2, [pc, #432]	@ (80070a4 <loadMenuTexts+0x400>)
 8006ef4:	4b6c      	ldr	r3, [pc, #432]	@ (80070a8 <loadMenuTexts+0x404>)
 8006ef6:	4614      	mov	r4, r2
 8006ef8:	461d      	mov	r5, r3
 8006efa:	6828      	ldr	r0, [r5, #0]
 8006efc:	6869      	ldr	r1, [r5, #4]
 8006efe:	68aa      	ldr	r2, [r5, #8]
 8006f00:	68eb      	ldr	r3, [r5, #12]
 8006f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f04:	7c2b      	ldrb	r3, [r5, #16]
 8006f06:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 8006f08:	4a68      	ldr	r2, [pc, #416]	@ (80070ac <loadMenuTexts+0x408>)
 8006f0a:	4b69      	ldr	r3, [pc, #420]	@ (80070b0 <loadMenuTexts+0x40c>)
 8006f0c:	4614      	mov	r4, r2
 8006f0e:	461d      	mov	r5, r3
 8006f10:	6828      	ldr	r0, [r5, #0]
 8006f12:	6869      	ldr	r1, [r5, #4]
 8006f14:	68aa      	ldr	r2, [r5, #8]
 8006f16:	68eb      	ldr	r3, [r5, #12]
 8006f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f1a:	7c2b      	ldrb	r3, [r5, #16]
 8006f1c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 8006f1e:	4a65      	ldr	r2, [pc, #404]	@ (80070b4 <loadMenuTexts+0x410>)
 8006f20:	4b65      	ldr	r3, [pc, #404]	@ (80070b8 <loadMenuTexts+0x414>)
 8006f22:	4614      	mov	r4, r2
 8006f24:	461d      	mov	r5, r3
 8006f26:	6828      	ldr	r0, [r5, #0]
 8006f28:	6869      	ldr	r1, [r5, #4]
 8006f2a:	68aa      	ldr	r2, [r5, #8]
 8006f2c:	68eb      	ldr	r3, [r5, #12]
 8006f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f30:	7c2b      	ldrb	r3, [r5, #16]
 8006f32:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 8006f34:	4a61      	ldr	r2, [pc, #388]	@ (80070bc <loadMenuTexts+0x418>)
 8006f36:	4b62      	ldr	r3, [pc, #392]	@ (80070c0 <loadMenuTexts+0x41c>)
 8006f38:	4614      	mov	r4, r2
 8006f3a:	461d      	mov	r5, r3
 8006f3c:	6828      	ldr	r0, [r5, #0]
 8006f3e:	6869      	ldr	r1, [r5, #4]
 8006f40:	68aa      	ldr	r2, [r5, #8]
 8006f42:	68eb      	ldr	r3, [r5, #12]
 8006f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f46:	7c2b      	ldrb	r3, [r5, #16]
 8006f48:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 8006f4a:	4a5e      	ldr	r2, [pc, #376]	@ (80070c4 <loadMenuTexts+0x420>)
 8006f4c:	4b5e      	ldr	r3, [pc, #376]	@ (80070c8 <loadMenuTexts+0x424>)
 8006f4e:	4614      	mov	r4, r2
 8006f50:	461d      	mov	r5, r3
 8006f52:	6828      	ldr	r0, [r5, #0]
 8006f54:	6869      	ldr	r1, [r5, #4]
 8006f56:	68aa      	ldr	r2, [r5, #8]
 8006f58:	68eb      	ldr	r3, [r5, #12]
 8006f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f5c:	7c2b      	ldrb	r3, [r5, #16]
 8006f5e:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8006f60:	4a5a      	ldr	r2, [pc, #360]	@ (80070cc <loadMenuTexts+0x428>)
 8006f62:	4b5b      	ldr	r3, [pc, #364]	@ (80070d0 <loadMenuTexts+0x42c>)
 8006f64:	4614      	mov	r4, r2
 8006f66:	461d      	mov	r5, r3
 8006f68:	6828      	ldr	r0, [r5, #0]
 8006f6a:	6869      	ldr	r1, [r5, #4]
 8006f6c:	68aa      	ldr	r2, [r5, #8]
 8006f6e:	68eb      	ldr	r3, [r5, #12]
 8006f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f72:	7c2b      	ldrb	r3, [r5, #16]
 8006f74:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 8006f76:	4a57      	ldr	r2, [pc, #348]	@ (80070d4 <loadMenuTexts+0x430>)
 8006f78:	4b57      	ldr	r3, [pc, #348]	@ (80070d8 <loadMenuTexts+0x434>)
 8006f7a:	4614      	mov	r4, r2
 8006f7c:	461d      	mov	r5, r3
 8006f7e:	6828      	ldr	r0, [r5, #0]
 8006f80:	6869      	ldr	r1, [r5, #4]
 8006f82:	68aa      	ldr	r2, [r5, #8]
 8006f84:	68eb      	ldr	r3, [r5, #12]
 8006f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f88:	7c2b      	ldrb	r3, [r5, #16]
 8006f8a:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 8006f8c:	4a53      	ldr	r2, [pc, #332]	@ (80070dc <loadMenuTexts+0x438>)
 8006f8e:	4b54      	ldr	r3, [pc, #336]	@ (80070e0 <loadMenuTexts+0x43c>)
 8006f90:	4614      	mov	r4, r2
 8006f92:	461d      	mov	r5, r3
 8006f94:	6828      	ldr	r0, [r5, #0]
 8006f96:	6869      	ldr	r1, [r5, #4]
 8006f98:	68aa      	ldr	r2, [r5, #8]
 8006f9a:	68eb      	ldr	r3, [r5, #12]
 8006f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f9e:	7c2b      	ldrb	r3, [r5, #16]
 8006fa0:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 8006fa2:	4a50      	ldr	r2, [pc, #320]	@ (80070e4 <loadMenuTexts+0x440>)
 8006fa4:	4b50      	ldr	r3, [pc, #320]	@ (80070e8 <loadMenuTexts+0x444>)
 8006fa6:	4614      	mov	r4, r2
 8006fa8:	461d      	mov	r5, r3
 8006faa:	6828      	ldr	r0, [r5, #0]
 8006fac:	6869      	ldr	r1, [r5, #4]
 8006fae:	68aa      	ldr	r2, [r5, #8]
 8006fb0:	68eb      	ldr	r3, [r5, #12]
 8006fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb4:	7c2b      	ldrb	r3, [r5, #16]
 8006fb6:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 8006fb8:	4a4c      	ldr	r2, [pc, #304]	@ (80070ec <loadMenuTexts+0x448>)
 8006fba:	4b4d      	ldr	r3, [pc, #308]	@ (80070f0 <loadMenuTexts+0x44c>)
 8006fbc:	4614      	mov	r4, r2
 8006fbe:	461d      	mov	r5, r3
 8006fc0:	6828      	ldr	r0, [r5, #0]
 8006fc2:	6869      	ldr	r1, [r5, #4]
 8006fc4:	68aa      	ldr	r2, [r5, #8]
 8006fc6:	68eb      	ldr	r3, [r5, #12]
 8006fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fca:	7c2b      	ldrb	r3, [r5, #16]
 8006fcc:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 8006fce:	4a49      	ldr	r2, [pc, #292]	@ (80070f4 <loadMenuTexts+0x450>)
 8006fd0:	e092      	b.n	80070f8 <loadMenuTexts+0x454>
 8006fd2:	bf00      	nop
 8006fd4:	20000e08 	.word	0x20000e08
 8006fd8:	20000120 	.word	0x20000120
 8006fdc:	20000e1c 	.word	0x20000e1c
 8006fe0:	20000134 	.word	0x20000134
 8006fe4:	20000e30 	.word	0x20000e30
 8006fe8:	20000148 	.word	0x20000148
 8006fec:	20000e44 	.word	0x20000e44
 8006ff0:	2000015c 	.word	0x2000015c
 8006ff4:	20000e58 	.word	0x20000e58
 8006ff8:	20000170 	.word	0x20000170
 8006ffc:	20000e6c 	.word	0x20000e6c
 8007000:	20000184 	.word	0x20000184
 8007004:	20000e80 	.word	0x20000e80
 8007008:	20000198 	.word	0x20000198
 800700c:	20000e94 	.word	0x20000e94
 8007010:	200001ac 	.word	0x200001ac
 8007014:	20000ea8 	.word	0x20000ea8
 8007018:	200001c0 	.word	0x200001c0
 800701c:	20000ebc 	.word	0x20000ebc
 8007020:	200001d4 	.word	0x200001d4
 8007024:	20000ed0 	.word	0x20000ed0
 8007028:	200001e8 	.word	0x200001e8
 800702c:	20000ee4 	.word	0x20000ee4
 8007030:	200001fc 	.word	0x200001fc
 8007034:	20000ef8 	.word	0x20000ef8
 8007038:	20000210 	.word	0x20000210
 800703c:	20000f0c 	.word	0x20000f0c
 8007040:	20000224 	.word	0x20000224
 8007044:	20000f20 	.word	0x20000f20
 8007048:	20000238 	.word	0x20000238
 800704c:	20000f34 	.word	0x20000f34
 8007050:	2000024c 	.word	0x2000024c
 8007054:	20000f48 	.word	0x20000f48
 8007058:	20000260 	.word	0x20000260
 800705c:	20000f5c 	.word	0x20000f5c
 8007060:	20000274 	.word	0x20000274
 8007064:	20000f70 	.word	0x20000f70
 8007068:	20000288 	.word	0x20000288
 800706c:	20000f84 	.word	0x20000f84
 8007070:	2000029c 	.word	0x2000029c
 8007074:	20000f98 	.word	0x20000f98
 8007078:	200002b0 	.word	0x200002b0
 800707c:	20000fac 	.word	0x20000fac
 8007080:	200002c4 	.word	0x200002c4
 8007084:	20000fc0 	.word	0x20000fc0
 8007088:	200002d8 	.word	0x200002d8
 800708c:	20000fd4 	.word	0x20000fd4
 8007090:	200002ec 	.word	0x200002ec
 8007094:	20000fe8 	.word	0x20000fe8
 8007098:	20000300 	.word	0x20000300
 800709c:	20000ffc 	.word	0x20000ffc
 80070a0:	20000314 	.word	0x20000314
 80070a4:	20001010 	.word	0x20001010
 80070a8:	20000328 	.word	0x20000328
 80070ac:	20001024 	.word	0x20001024
 80070b0:	2000033c 	.word	0x2000033c
 80070b4:	20001038 	.word	0x20001038
 80070b8:	20000350 	.word	0x20000350
 80070bc:	2000104c 	.word	0x2000104c
 80070c0:	20000364 	.word	0x20000364
 80070c4:	20001060 	.word	0x20001060
 80070c8:	20000378 	.word	0x20000378
 80070cc:	20001074 	.word	0x20001074
 80070d0:	2000038c 	.word	0x2000038c
 80070d4:	20001088 	.word	0x20001088
 80070d8:	200003a0 	.word	0x200003a0
 80070dc:	2000109c 	.word	0x2000109c
 80070e0:	200003b4 	.word	0x200003b4
 80070e4:	200010b0 	.word	0x200010b0
 80070e8:	200003c8 	.word	0x200003c8
 80070ec:	200010c4 	.word	0x200010c4
 80070f0:	200003dc 	.word	0x200003dc
 80070f4:	200010d8 	.word	0x200010d8
 80070f8:	4bc7      	ldr	r3, [pc, #796]	@ (8007418 <loadMenuTexts+0x774>)
 80070fa:	4614      	mov	r4, r2
 80070fc:	461d      	mov	r5, r3
 80070fe:	6828      	ldr	r0, [r5, #0]
 8007100:	6869      	ldr	r1, [r5, #4]
 8007102:	68aa      	ldr	r2, [r5, #8]
 8007104:	68eb      	ldr	r3, [r5, #12]
 8007106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007108:	7c2b      	ldrb	r3, [r5, #16]
 800710a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 800710c:	4ac3      	ldr	r2, [pc, #780]	@ (800741c <loadMenuTexts+0x778>)
 800710e:	4bc4      	ldr	r3, [pc, #784]	@ (8007420 <loadMenuTexts+0x77c>)
 8007110:	4614      	mov	r4, r2
 8007112:	461d      	mov	r5, r3
 8007114:	6828      	ldr	r0, [r5, #0]
 8007116:	6869      	ldr	r1, [r5, #4]
 8007118:	68aa      	ldr	r2, [r5, #8]
 800711a:	68eb      	ldr	r3, [r5, #12]
 800711c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800711e:	7c2b      	ldrb	r3, [r5, #16]
 8007120:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 8007122:	4ac0      	ldr	r2, [pc, #768]	@ (8007424 <loadMenuTexts+0x780>)
 8007124:	4bc0      	ldr	r3, [pc, #768]	@ (8007428 <loadMenuTexts+0x784>)
 8007126:	4614      	mov	r4, r2
 8007128:	461d      	mov	r5, r3
 800712a:	6828      	ldr	r0, [r5, #0]
 800712c:	6869      	ldr	r1, [r5, #4]
 800712e:	68aa      	ldr	r2, [r5, #8]
 8007130:	68eb      	ldr	r3, [r5, #12]
 8007132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007134:	7c2b      	ldrb	r3, [r5, #16]
 8007136:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 8007138:	4abc      	ldr	r2, [pc, #752]	@ (800742c <loadMenuTexts+0x788>)
 800713a:	4bbd      	ldr	r3, [pc, #756]	@ (8007430 <loadMenuTexts+0x78c>)
 800713c:	4614      	mov	r4, r2
 800713e:	461d      	mov	r5, r3
 8007140:	6828      	ldr	r0, [r5, #0]
 8007142:	6869      	ldr	r1, [r5, #4]
 8007144:	68aa      	ldr	r2, [r5, #8]
 8007146:	68eb      	ldr	r3, [r5, #12]
 8007148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800714a:	7c2b      	ldrb	r3, [r5, #16]
 800714c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 800714e:	4ab9      	ldr	r2, [pc, #740]	@ (8007434 <loadMenuTexts+0x790>)
 8007150:	4bb9      	ldr	r3, [pc, #740]	@ (8007438 <loadMenuTexts+0x794>)
 8007152:	4614      	mov	r4, r2
 8007154:	461d      	mov	r5, r3
 8007156:	6828      	ldr	r0, [r5, #0]
 8007158:	6869      	ldr	r1, [r5, #4]
 800715a:	68aa      	ldr	r2, [r5, #8]
 800715c:	68eb      	ldr	r3, [r5, #12]
 800715e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007160:	7c2b      	ldrb	r3, [r5, #16]
 8007162:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 8007164:	4ab5      	ldr	r2, [pc, #724]	@ (800743c <loadMenuTexts+0x798>)
 8007166:	4bb6      	ldr	r3, [pc, #728]	@ (8007440 <loadMenuTexts+0x79c>)
 8007168:	4614      	mov	r4, r2
 800716a:	461d      	mov	r5, r3
 800716c:	6828      	ldr	r0, [r5, #0]
 800716e:	6869      	ldr	r1, [r5, #4]
 8007170:	68aa      	ldr	r2, [r5, #8]
 8007172:	68eb      	ldr	r3, [r5, #12]
 8007174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007176:	7c2b      	ldrb	r3, [r5, #16]
 8007178:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 800717a:	4ab2      	ldr	r2, [pc, #712]	@ (8007444 <loadMenuTexts+0x7a0>)
 800717c:	4bb2      	ldr	r3, [pc, #712]	@ (8007448 <loadMenuTexts+0x7a4>)
 800717e:	4614      	mov	r4, r2
 8007180:	461d      	mov	r5, r3
 8007182:	6828      	ldr	r0, [r5, #0]
 8007184:	6869      	ldr	r1, [r5, #4]
 8007186:	68aa      	ldr	r2, [r5, #8]
 8007188:	68eb      	ldr	r3, [r5, #12]
 800718a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800718c:	7c2b      	ldrb	r3, [r5, #16]
 800718e:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8007190:	4aae      	ldr	r2, [pc, #696]	@ (800744c <loadMenuTexts+0x7a8>)
 8007192:	4baf      	ldr	r3, [pc, #700]	@ (8007450 <loadMenuTexts+0x7ac>)
 8007194:	4614      	mov	r4, r2
 8007196:	461d      	mov	r5, r3
 8007198:	6828      	ldr	r0, [r5, #0]
 800719a:	6869      	ldr	r1, [r5, #4]
 800719c:	68aa      	ldr	r2, [r5, #8]
 800719e:	68eb      	ldr	r3, [r5, #12]
 80071a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071a2:	7c2b      	ldrb	r3, [r5, #16]
 80071a4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 80071a6:	4aab      	ldr	r2, [pc, #684]	@ (8007454 <loadMenuTexts+0x7b0>)
 80071a8:	4bab      	ldr	r3, [pc, #684]	@ (8007458 <loadMenuTexts+0x7b4>)
 80071aa:	4614      	mov	r4, r2
 80071ac:	461d      	mov	r5, r3
 80071ae:	6828      	ldr	r0, [r5, #0]
 80071b0:	6869      	ldr	r1, [r5, #4]
 80071b2:	68aa      	ldr	r2, [r5, #8]
 80071b4:	68eb      	ldr	r3, [r5, #12]
 80071b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071b8:	7c2b      	ldrb	r3, [r5, #16]
 80071ba:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 80071bc:	4aa7      	ldr	r2, [pc, #668]	@ (800745c <loadMenuTexts+0x7b8>)
 80071be:	4ba8      	ldr	r3, [pc, #672]	@ (8007460 <loadMenuTexts+0x7bc>)
 80071c0:	4614      	mov	r4, r2
 80071c2:	461d      	mov	r5, r3
 80071c4:	6828      	ldr	r0, [r5, #0]
 80071c6:	6869      	ldr	r1, [r5, #4]
 80071c8:	68aa      	ldr	r2, [r5, #8]
 80071ca:	68eb      	ldr	r3, [r5, #12]
 80071cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071ce:	7c2b      	ldrb	r3, [r5, #16]
 80071d0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 80071d2:	4aa4      	ldr	r2, [pc, #656]	@ (8007464 <loadMenuTexts+0x7c0>)
 80071d4:	4ba4      	ldr	r3, [pc, #656]	@ (8007468 <loadMenuTexts+0x7c4>)
 80071d6:	4614      	mov	r4, r2
 80071d8:	461d      	mov	r5, r3
 80071da:	6828      	ldr	r0, [r5, #0]
 80071dc:	6869      	ldr	r1, [r5, #4]
 80071de:	68aa      	ldr	r2, [r5, #8]
 80071e0:	68eb      	ldr	r3, [r5, #12]
 80071e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071e4:	7c2b      	ldrb	r3, [r5, #16]
 80071e6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 80071e8:	4aa0      	ldr	r2, [pc, #640]	@ (800746c <loadMenuTexts+0x7c8>)
 80071ea:	4ba1      	ldr	r3, [pc, #644]	@ (8007470 <loadMenuTexts+0x7cc>)
 80071ec:	4614      	mov	r4, r2
 80071ee:	461d      	mov	r5, r3
 80071f0:	6828      	ldr	r0, [r5, #0]
 80071f2:	6869      	ldr	r1, [r5, #4]
 80071f4:	68aa      	ldr	r2, [r5, #8]
 80071f6:	68eb      	ldr	r3, [r5, #12]
 80071f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071fa:	7c2b      	ldrb	r3, [r5, #16]
 80071fc:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 80071fe:	4a9d      	ldr	r2, [pc, #628]	@ (8007474 <loadMenuTexts+0x7d0>)
 8007200:	4b9d      	ldr	r3, [pc, #628]	@ (8007478 <loadMenuTexts+0x7d4>)
 8007202:	4614      	mov	r4, r2
 8007204:	461d      	mov	r5, r3
 8007206:	6828      	ldr	r0, [r5, #0]
 8007208:	6869      	ldr	r1, [r5, #4]
 800720a:	68aa      	ldr	r2, [r5, #8]
 800720c:	68eb      	ldr	r3, [r5, #12]
 800720e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007210:	7c2b      	ldrb	r3, [r5, #16]
 8007212:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 8007214:	4a99      	ldr	r2, [pc, #612]	@ (800747c <loadMenuTexts+0x7d8>)
 8007216:	4b9a      	ldr	r3, [pc, #616]	@ (8007480 <loadMenuTexts+0x7dc>)
 8007218:	4614      	mov	r4, r2
 800721a:	461d      	mov	r5, r3
 800721c:	6828      	ldr	r0, [r5, #0]
 800721e:	6869      	ldr	r1, [r5, #4]
 8007220:	68aa      	ldr	r2, [r5, #8]
 8007222:	68eb      	ldr	r3, [r5, #12]
 8007224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007226:	7c2b      	ldrb	r3, [r5, #16]
 8007228:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 800722a:	4a96      	ldr	r2, [pc, #600]	@ (8007484 <loadMenuTexts+0x7e0>)
 800722c:	4b96      	ldr	r3, [pc, #600]	@ (8007488 <loadMenuTexts+0x7e4>)
 800722e:	4614      	mov	r4, r2
 8007230:	461d      	mov	r5, r3
 8007232:	6828      	ldr	r0, [r5, #0]
 8007234:	6869      	ldr	r1, [r5, #4]
 8007236:	68aa      	ldr	r2, [r5, #8]
 8007238:	68eb      	ldr	r3, [r5, #12]
 800723a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800723c:	7c2b      	ldrb	r3, [r5, #16]
 800723e:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 8007240:	4a92      	ldr	r2, [pc, #584]	@ (800748c <loadMenuTexts+0x7e8>)
 8007242:	4b93      	ldr	r3, [pc, #588]	@ (8007490 <loadMenuTexts+0x7ec>)
 8007244:	4614      	mov	r4, r2
 8007246:	461d      	mov	r5, r3
 8007248:	6828      	ldr	r0, [r5, #0]
 800724a:	6869      	ldr	r1, [r5, #4]
 800724c:	68aa      	ldr	r2, [r5, #8]
 800724e:	68eb      	ldr	r3, [r5, #12]
 8007250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007252:	7c2b      	ldrb	r3, [r5, #16]
 8007254:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 8007256:	4a8f      	ldr	r2, [pc, #572]	@ (8007494 <loadMenuTexts+0x7f0>)
 8007258:	4b8f      	ldr	r3, [pc, #572]	@ (8007498 <loadMenuTexts+0x7f4>)
 800725a:	4614      	mov	r4, r2
 800725c:	461d      	mov	r5, r3
 800725e:	6828      	ldr	r0, [r5, #0]
 8007260:	6869      	ldr	r1, [r5, #4]
 8007262:	68aa      	ldr	r2, [r5, #8]
 8007264:	68eb      	ldr	r3, [r5, #12]
 8007266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007268:	7c2b      	ldrb	r3, [r5, #16]
 800726a:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 800726c:	4a8b      	ldr	r2, [pc, #556]	@ (800749c <loadMenuTexts+0x7f8>)
 800726e:	4b8c      	ldr	r3, [pc, #560]	@ (80074a0 <loadMenuTexts+0x7fc>)
 8007270:	4614      	mov	r4, r2
 8007272:	461d      	mov	r5, r3
 8007274:	6828      	ldr	r0, [r5, #0]
 8007276:	6869      	ldr	r1, [r5, #4]
 8007278:	68aa      	ldr	r2, [r5, #8]
 800727a:	68eb      	ldr	r3, [r5, #12]
 800727c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800727e:	7c2b      	ldrb	r3, [r5, #16]
 8007280:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 8007282:	4a88      	ldr	r2, [pc, #544]	@ (80074a4 <loadMenuTexts+0x800>)
 8007284:	4b88      	ldr	r3, [pc, #544]	@ (80074a8 <loadMenuTexts+0x804>)
 8007286:	4614      	mov	r4, r2
 8007288:	461d      	mov	r5, r3
 800728a:	6828      	ldr	r0, [r5, #0]
 800728c:	6869      	ldr	r1, [r5, #4]
 800728e:	68aa      	ldr	r2, [r5, #8]
 8007290:	68eb      	ldr	r3, [r5, #12]
 8007292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007294:	7c2b      	ldrb	r3, [r5, #16]
 8007296:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8007298:	4a84      	ldr	r2, [pc, #528]	@ (80074ac <loadMenuTexts+0x808>)
 800729a:	4b85      	ldr	r3, [pc, #532]	@ (80074b0 <loadMenuTexts+0x80c>)
 800729c:	4614      	mov	r4, r2
 800729e:	461d      	mov	r5, r3
 80072a0:	6828      	ldr	r0, [r5, #0]
 80072a2:	6869      	ldr	r1, [r5, #4]
 80072a4:	68aa      	ldr	r2, [r5, #8]
 80072a6:	68eb      	ldr	r3, [r5, #12]
 80072a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072aa:	7c2b      	ldrb	r3, [r5, #16]
 80072ac:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 80072ae:	4a81      	ldr	r2, [pc, #516]	@ (80074b4 <loadMenuTexts+0x810>)
 80072b0:	4b81      	ldr	r3, [pc, #516]	@ (80074b8 <loadMenuTexts+0x814>)
 80072b2:	4614      	mov	r4, r2
 80072b4:	461d      	mov	r5, r3
 80072b6:	6828      	ldr	r0, [r5, #0]
 80072b8:	6869      	ldr	r1, [r5, #4]
 80072ba:	68aa      	ldr	r2, [r5, #8]
 80072bc:	68eb      	ldr	r3, [r5, #12]
 80072be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072c0:	7c2b      	ldrb	r3, [r5, #16]
 80072c2:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 80072c4:	4a7d      	ldr	r2, [pc, #500]	@ (80074bc <loadMenuTexts+0x818>)
 80072c6:	4b7e      	ldr	r3, [pc, #504]	@ (80074c0 <loadMenuTexts+0x81c>)
 80072c8:	4614      	mov	r4, r2
 80072ca:	461d      	mov	r5, r3
 80072cc:	6828      	ldr	r0, [r5, #0]
 80072ce:	6869      	ldr	r1, [r5, #4]
 80072d0:	68aa      	ldr	r2, [r5, #8]
 80072d2:	68eb      	ldr	r3, [r5, #12]
 80072d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072d6:	7c2b      	ldrb	r3, [r5, #16]
 80072d8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 80072da:	4a7a      	ldr	r2, [pc, #488]	@ (80074c4 <loadMenuTexts+0x820>)
 80072dc:	4b7a      	ldr	r3, [pc, #488]	@ (80074c8 <loadMenuTexts+0x824>)
 80072de:	4614      	mov	r4, r2
 80072e0:	461d      	mov	r5, r3
 80072e2:	6828      	ldr	r0, [r5, #0]
 80072e4:	6869      	ldr	r1, [r5, #4]
 80072e6:	68aa      	ldr	r2, [r5, #8]
 80072e8:	68eb      	ldr	r3, [r5, #12]
 80072ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ec:	7c2b      	ldrb	r3, [r5, #16]
 80072ee:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 80072f0:	4a76      	ldr	r2, [pc, #472]	@ (80074cc <loadMenuTexts+0x828>)
 80072f2:	4b77      	ldr	r3, [pc, #476]	@ (80074d0 <loadMenuTexts+0x82c>)
 80072f4:	4614      	mov	r4, r2
 80072f6:	461d      	mov	r5, r3
 80072f8:	6828      	ldr	r0, [r5, #0]
 80072fa:	6869      	ldr	r1, [r5, #4]
 80072fc:	68aa      	ldr	r2, [r5, #8]
 80072fe:	68eb      	ldr	r3, [r5, #12]
 8007300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007302:	7c2b      	ldrb	r3, [r5, #16]
 8007304:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 8007306:	4a73      	ldr	r2, [pc, #460]	@ (80074d4 <loadMenuTexts+0x830>)
 8007308:	4b73      	ldr	r3, [pc, #460]	@ (80074d8 <loadMenuTexts+0x834>)
 800730a:	4614      	mov	r4, r2
 800730c:	461d      	mov	r5, r3
 800730e:	6828      	ldr	r0, [r5, #0]
 8007310:	6869      	ldr	r1, [r5, #4]
 8007312:	68aa      	ldr	r2, [r5, #8]
 8007314:	68eb      	ldr	r3, [r5, #12]
 8007316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007318:	7c2b      	ldrb	r3, [r5, #16]
 800731a:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 800731c:	4a6f      	ldr	r2, [pc, #444]	@ (80074dc <loadMenuTexts+0x838>)
 800731e:	4b70      	ldr	r3, [pc, #448]	@ (80074e0 <loadMenuTexts+0x83c>)
 8007320:	4614      	mov	r4, r2
 8007322:	461d      	mov	r5, r3
 8007324:	6828      	ldr	r0, [r5, #0]
 8007326:	6869      	ldr	r1, [r5, #4]
 8007328:	68aa      	ldr	r2, [r5, #8]
 800732a:	68eb      	ldr	r3, [r5, #12]
 800732c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800732e:	7c2b      	ldrb	r3, [r5, #16]
 8007330:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 8007332:	4a6c      	ldr	r2, [pc, #432]	@ (80074e4 <loadMenuTexts+0x840>)
 8007334:	4b6c      	ldr	r3, [pc, #432]	@ (80074e8 <loadMenuTexts+0x844>)
 8007336:	4614      	mov	r4, r2
 8007338:	461d      	mov	r5, r3
 800733a:	6828      	ldr	r0, [r5, #0]
 800733c:	6869      	ldr	r1, [r5, #4]
 800733e:	68aa      	ldr	r2, [r5, #8]
 8007340:	68eb      	ldr	r3, [r5, #12]
 8007342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007344:	7c2b      	ldrb	r3, [r5, #16]
 8007346:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 8007348:	4a68      	ldr	r2, [pc, #416]	@ (80074ec <loadMenuTexts+0x848>)
 800734a:	4b69      	ldr	r3, [pc, #420]	@ (80074f0 <loadMenuTexts+0x84c>)
 800734c:	4614      	mov	r4, r2
 800734e:	461d      	mov	r5, r3
 8007350:	6828      	ldr	r0, [r5, #0]
 8007352:	6869      	ldr	r1, [r5, #4]
 8007354:	68aa      	ldr	r2, [r5, #8]
 8007356:	68eb      	ldr	r3, [r5, #12]
 8007358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800735a:	7c2b      	ldrb	r3, [r5, #16]
 800735c:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 800735e:	4a65      	ldr	r2, [pc, #404]	@ (80074f4 <loadMenuTexts+0x850>)
 8007360:	4b65      	ldr	r3, [pc, #404]	@ (80074f8 <loadMenuTexts+0x854>)
 8007362:	4614      	mov	r4, r2
 8007364:	461d      	mov	r5, r3
 8007366:	6828      	ldr	r0, [r5, #0]
 8007368:	6869      	ldr	r1, [r5, #4]
 800736a:	68aa      	ldr	r2, [r5, #8]
 800736c:	68eb      	ldr	r3, [r5, #12]
 800736e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007370:	7c2b      	ldrb	r3, [r5, #16]
 8007372:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 8007374:	4a61      	ldr	r2, [pc, #388]	@ (80074fc <loadMenuTexts+0x858>)
 8007376:	4b62      	ldr	r3, [pc, #392]	@ (8007500 <loadMenuTexts+0x85c>)
 8007378:	4614      	mov	r4, r2
 800737a:	461d      	mov	r5, r3
 800737c:	6828      	ldr	r0, [r5, #0]
 800737e:	6869      	ldr	r1, [r5, #4]
 8007380:	68aa      	ldr	r2, [r5, #8]
 8007382:	68eb      	ldr	r3, [r5, #12]
 8007384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007386:	7c2b      	ldrb	r3, [r5, #16]
 8007388:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 800738a:	4a5e      	ldr	r2, [pc, #376]	@ (8007504 <loadMenuTexts+0x860>)
 800738c:	4b5e      	ldr	r3, [pc, #376]	@ (8007508 <loadMenuTexts+0x864>)
 800738e:	4614      	mov	r4, r2
 8007390:	461d      	mov	r5, r3
 8007392:	6828      	ldr	r0, [r5, #0]
 8007394:	6869      	ldr	r1, [r5, #4]
 8007396:	68aa      	ldr	r2, [r5, #8]
 8007398:	68eb      	ldr	r3, [r5, #12]
 800739a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800739c:	7c2b      	ldrb	r3, [r5, #16]
 800739e:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 80073a0:	4a5a      	ldr	r2, [pc, #360]	@ (800750c <loadMenuTexts+0x868>)
 80073a2:	4b5b      	ldr	r3, [pc, #364]	@ (8007510 <loadMenuTexts+0x86c>)
 80073a4:	4614      	mov	r4, r2
 80073a6:	461d      	mov	r5, r3
 80073a8:	6828      	ldr	r0, [r5, #0]
 80073aa:	6869      	ldr	r1, [r5, #4]
 80073ac:	68aa      	ldr	r2, [r5, #8]
 80073ae:	68eb      	ldr	r3, [r5, #12]
 80073b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073b2:	7c2b      	ldrb	r3, [r5, #16]
 80073b4:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 80073b6:	4a57      	ldr	r2, [pc, #348]	@ (8007514 <loadMenuTexts+0x870>)
 80073b8:	4b57      	ldr	r3, [pc, #348]	@ (8007518 <loadMenuTexts+0x874>)
 80073ba:	4614      	mov	r4, r2
 80073bc:	461d      	mov	r5, r3
 80073be:	6828      	ldr	r0, [r5, #0]
 80073c0:	6869      	ldr	r1, [r5, #4]
 80073c2:	68aa      	ldr	r2, [r5, #8]
 80073c4:	68eb      	ldr	r3, [r5, #12]
 80073c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073c8:	7c2b      	ldrb	r3, [r5, #16]
 80073ca:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 80073cc:	4a53      	ldr	r2, [pc, #332]	@ (800751c <loadMenuTexts+0x878>)
 80073ce:	4b54      	ldr	r3, [pc, #336]	@ (8007520 <loadMenuTexts+0x87c>)
 80073d0:	4614      	mov	r4, r2
 80073d2:	461d      	mov	r5, r3
 80073d4:	6828      	ldr	r0, [r5, #0]
 80073d6:	6869      	ldr	r1, [r5, #4]
 80073d8:	68aa      	ldr	r2, [r5, #8]
 80073da:	68eb      	ldr	r3, [r5, #12]
 80073dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073de:	7c2b      	ldrb	r3, [r5, #16]
 80073e0:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 80073e2:	4a50      	ldr	r2, [pc, #320]	@ (8007524 <loadMenuTexts+0x880>)
 80073e4:	4b50      	ldr	r3, [pc, #320]	@ (8007528 <loadMenuTexts+0x884>)
 80073e6:	4614      	mov	r4, r2
 80073e8:	461d      	mov	r5, r3
 80073ea:	6828      	ldr	r0, [r5, #0]
 80073ec:	6869      	ldr	r1, [r5, #4]
 80073ee:	68aa      	ldr	r2, [r5, #8]
 80073f0:	68eb      	ldr	r3, [r5, #12]
 80073f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073f4:	7c2b      	ldrb	r3, [r5, #16]
 80073f6:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 80073f8:	4a4c      	ldr	r2, [pc, #304]	@ (800752c <loadMenuTexts+0x888>)
 80073fa:	4b4d      	ldr	r3, [pc, #308]	@ (8007530 <loadMenuTexts+0x88c>)
 80073fc:	4614      	mov	r4, r2
 80073fe:	461d      	mov	r5, r3
 8007400:	6828      	ldr	r0, [r5, #0]
 8007402:	6869      	ldr	r1, [r5, #4]
 8007404:	68aa      	ldr	r2, [r5, #8]
 8007406:	68eb      	ldr	r3, [r5, #12]
 8007408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800740a:	7c2b      	ldrb	r3, [r5, #16]
 800740c:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 800740e:	4a49      	ldr	r2, [pc, #292]	@ (8007534 <loadMenuTexts+0x890>)
 8007410:	4b49      	ldr	r3, [pc, #292]	@ (8007538 <loadMenuTexts+0x894>)
 8007412:	4614      	mov	r4, r2
 8007414:	461d      	mov	r5, r3
 8007416:	e091      	b.n	800753c <loadMenuTexts+0x898>
 8007418:	200003f0 	.word	0x200003f0
 800741c:	200010ec 	.word	0x200010ec
 8007420:	20000404 	.word	0x20000404
 8007424:	20001100 	.word	0x20001100
 8007428:	20000418 	.word	0x20000418
 800742c:	20001114 	.word	0x20001114
 8007430:	2000042c 	.word	0x2000042c
 8007434:	20001128 	.word	0x20001128
 8007438:	20000440 	.word	0x20000440
 800743c:	2000113c 	.word	0x2000113c
 8007440:	20000454 	.word	0x20000454
 8007444:	20001150 	.word	0x20001150
 8007448:	20000468 	.word	0x20000468
 800744c:	20001164 	.word	0x20001164
 8007450:	2000047c 	.word	0x2000047c
 8007454:	20001178 	.word	0x20001178
 8007458:	20000490 	.word	0x20000490
 800745c:	2000118c 	.word	0x2000118c
 8007460:	200004a4 	.word	0x200004a4
 8007464:	200011a0 	.word	0x200011a0
 8007468:	200004b8 	.word	0x200004b8
 800746c:	200011b4 	.word	0x200011b4
 8007470:	200004cc 	.word	0x200004cc
 8007474:	200011c8 	.word	0x200011c8
 8007478:	200004e0 	.word	0x200004e0
 800747c:	200011dc 	.word	0x200011dc
 8007480:	200004f4 	.word	0x200004f4
 8007484:	200011f0 	.word	0x200011f0
 8007488:	20000508 	.word	0x20000508
 800748c:	20001204 	.word	0x20001204
 8007490:	2000051c 	.word	0x2000051c
 8007494:	20001218 	.word	0x20001218
 8007498:	20000530 	.word	0x20000530
 800749c:	2000122c 	.word	0x2000122c
 80074a0:	20000544 	.word	0x20000544
 80074a4:	20001240 	.word	0x20001240
 80074a8:	20000558 	.word	0x20000558
 80074ac:	20001254 	.word	0x20001254
 80074b0:	2000056c 	.word	0x2000056c
 80074b4:	20001268 	.word	0x20001268
 80074b8:	20000580 	.word	0x20000580
 80074bc:	2000127c 	.word	0x2000127c
 80074c0:	20000594 	.word	0x20000594
 80074c4:	20001290 	.word	0x20001290
 80074c8:	200005a8 	.word	0x200005a8
 80074cc:	200012a4 	.word	0x200012a4
 80074d0:	200005bc 	.word	0x200005bc
 80074d4:	200012b8 	.word	0x200012b8
 80074d8:	200005d0 	.word	0x200005d0
 80074dc:	200012cc 	.word	0x200012cc
 80074e0:	200005e4 	.word	0x200005e4
 80074e4:	200012e0 	.word	0x200012e0
 80074e8:	200005f8 	.word	0x200005f8
 80074ec:	200012f4 	.word	0x200012f4
 80074f0:	2000060c 	.word	0x2000060c
 80074f4:	20001308 	.word	0x20001308
 80074f8:	20000620 	.word	0x20000620
 80074fc:	2000131c 	.word	0x2000131c
 8007500:	20000634 	.word	0x20000634
 8007504:	20001330 	.word	0x20001330
 8007508:	20000648 	.word	0x20000648
 800750c:	20001344 	.word	0x20001344
 8007510:	2000065c 	.word	0x2000065c
 8007514:	20001358 	.word	0x20001358
 8007518:	20000670 	.word	0x20000670
 800751c:	2000136c 	.word	0x2000136c
 8007520:	20000684 	.word	0x20000684
 8007524:	20001380 	.word	0x20001380
 8007528:	20000c10 	.word	0x20000c10
 800752c:	20001394 	.word	0x20001394
 8007530:	20000c38 	.word	0x20000c38
 8007534:	200013a8 	.word	0x200013a8
 8007538:	20000c60 	.word	0x20000c60
 800753c:	6828      	ldr	r0, [r5, #0]
 800753e:	6869      	ldr	r1, [r5, #4]
 8007540:	68aa      	ldr	r2, [r5, #8]
 8007542:	68eb      	ldr	r3, [r5, #12]
 8007544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007546:	7c2b      	ldrb	r3, [r5, #16]
 8007548:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 800754a:	4a0c      	ldr	r2, [pc, #48]	@ (800757c <loadMenuTexts+0x8d8>)
 800754c:	4b0c      	ldr	r3, [pc, #48]	@ (8007580 <loadMenuTexts+0x8dc>)
 800754e:	4614      	mov	r4, r2
 8007550:	461d      	mov	r5, r3
 8007552:	6828      	ldr	r0, [r5, #0]
 8007554:	6869      	ldr	r1, [r5, #4]
 8007556:	68aa      	ldr	r2, [r5, #8]
 8007558:	68eb      	ldr	r3, [r5, #12]
 800755a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800755c:	7c2b      	ldrb	r3, [r5, #16]
 800755e:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8007560:	4a08      	ldr	r2, [pc, #32]	@ (8007584 <loadMenuTexts+0x8e0>)
 8007562:	4b09      	ldr	r3, [pc, #36]	@ (8007588 <loadMenuTexts+0x8e4>)
 8007564:	4614      	mov	r4, r2
 8007566:	461d      	mov	r5, r3
 8007568:	6828      	ldr	r0, [r5, #0]
 800756a:	6869      	ldr	r1, [r5, #4]
 800756c:	68aa      	ldr	r2, [r5, #8]
 800756e:	68eb      	ldr	r3, [r5, #12]
 8007570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007572:	7c2b      	ldrb	r3, [r5, #16]
 8007574:	7023      	strb	r3, [r4, #0]
 8007576:	f000 bc68 	b.w	8007e4a <loadMenuTexts+0x11a6>
 800757a:	bf00      	nop
 800757c:	200013bc 	.word	0x200013bc
 8007580:	20000c88 	.word	0x20000c88
 8007584:	200013d0 	.word	0x200013d0
 8007588:	20000cb0 	.word	0x20000cb0
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 800758c:	4ac6      	ldr	r2, [pc, #792]	@ (80078a8 <loadMenuTexts+0xc04>)
 800758e:	4bc7      	ldr	r3, [pc, #796]	@ (80078ac <loadMenuTexts+0xc08>)
 8007590:	4614      	mov	r4, r2
 8007592:	461d      	mov	r5, r3
 8007594:	6828      	ldr	r0, [r5, #0]
 8007596:	6869      	ldr	r1, [r5, #4]
 8007598:	68aa      	ldr	r2, [r5, #8]
 800759a:	68eb      	ldr	r3, [r5, #12]
 800759c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800759e:	7c2b      	ldrb	r3, [r5, #16]
 80075a0:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 80075a2:	4ac3      	ldr	r2, [pc, #780]	@ (80078b0 <loadMenuTexts+0xc0c>)
 80075a4:	4bc3      	ldr	r3, [pc, #780]	@ (80078b4 <loadMenuTexts+0xc10>)
 80075a6:	4614      	mov	r4, r2
 80075a8:	461d      	mov	r5, r3
 80075aa:	6828      	ldr	r0, [r5, #0]
 80075ac:	6869      	ldr	r1, [r5, #4]
 80075ae:	68aa      	ldr	r2, [r5, #8]
 80075b0:	68eb      	ldr	r3, [r5, #12]
 80075b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075b4:	7c2b      	ldrb	r3, [r5, #16]
 80075b6:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 80075b8:	4abf      	ldr	r2, [pc, #764]	@ (80078b8 <loadMenuTexts+0xc14>)
 80075ba:	4bc0      	ldr	r3, [pc, #768]	@ (80078bc <loadMenuTexts+0xc18>)
 80075bc:	4614      	mov	r4, r2
 80075be:	461d      	mov	r5, r3
 80075c0:	6828      	ldr	r0, [r5, #0]
 80075c2:	6869      	ldr	r1, [r5, #4]
 80075c4:	68aa      	ldr	r2, [r5, #8]
 80075c6:	68eb      	ldr	r3, [r5, #12]
 80075c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075ca:	7c2b      	ldrb	r3, [r5, #16]
 80075cc:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 80075ce:	4abc      	ldr	r2, [pc, #752]	@ (80078c0 <loadMenuTexts+0xc1c>)
 80075d0:	4bbc      	ldr	r3, [pc, #752]	@ (80078c4 <loadMenuTexts+0xc20>)
 80075d2:	4614      	mov	r4, r2
 80075d4:	461d      	mov	r5, r3
 80075d6:	6828      	ldr	r0, [r5, #0]
 80075d8:	6869      	ldr	r1, [r5, #4]
 80075da:	68aa      	ldr	r2, [r5, #8]
 80075dc:	68eb      	ldr	r3, [r5, #12]
 80075de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075e0:	7c2b      	ldrb	r3, [r5, #16]
 80075e2:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 80075e4:	4ab8      	ldr	r2, [pc, #736]	@ (80078c8 <loadMenuTexts+0xc24>)
 80075e6:	4bb9      	ldr	r3, [pc, #740]	@ (80078cc <loadMenuTexts+0xc28>)
 80075e8:	4614      	mov	r4, r2
 80075ea:	461d      	mov	r5, r3
 80075ec:	6828      	ldr	r0, [r5, #0]
 80075ee:	6869      	ldr	r1, [r5, #4]
 80075f0:	68aa      	ldr	r2, [r5, #8]
 80075f2:	68eb      	ldr	r3, [r5, #12]
 80075f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075f6:	7c2b      	ldrb	r3, [r5, #16]
 80075f8:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 80075fa:	4ab5      	ldr	r2, [pc, #724]	@ (80078d0 <loadMenuTexts+0xc2c>)
 80075fc:	4bb5      	ldr	r3, [pc, #724]	@ (80078d4 <loadMenuTexts+0xc30>)
 80075fe:	4614      	mov	r4, r2
 8007600:	461d      	mov	r5, r3
 8007602:	6828      	ldr	r0, [r5, #0]
 8007604:	6869      	ldr	r1, [r5, #4]
 8007606:	68aa      	ldr	r2, [r5, #8]
 8007608:	68eb      	ldr	r3, [r5, #12]
 800760a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800760c:	7c2b      	ldrb	r3, [r5, #16]
 800760e:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8007610:	4ab1      	ldr	r2, [pc, #708]	@ (80078d8 <loadMenuTexts+0xc34>)
 8007612:	4bb2      	ldr	r3, [pc, #712]	@ (80078dc <loadMenuTexts+0xc38>)
 8007614:	4614      	mov	r4, r2
 8007616:	461d      	mov	r5, r3
 8007618:	6828      	ldr	r0, [r5, #0]
 800761a:	6869      	ldr	r1, [r5, #4]
 800761c:	68aa      	ldr	r2, [r5, #8]
 800761e:	68eb      	ldr	r3, [r5, #12]
 8007620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007622:	7c2b      	ldrb	r3, [r5, #16]
 8007624:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8007626:	4aae      	ldr	r2, [pc, #696]	@ (80078e0 <loadMenuTexts+0xc3c>)
 8007628:	4bae      	ldr	r3, [pc, #696]	@ (80078e4 <loadMenuTexts+0xc40>)
 800762a:	4614      	mov	r4, r2
 800762c:	461d      	mov	r5, r3
 800762e:	6828      	ldr	r0, [r5, #0]
 8007630:	6869      	ldr	r1, [r5, #4]
 8007632:	68aa      	ldr	r2, [r5, #8]
 8007634:	68eb      	ldr	r3, [r5, #12]
 8007636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007638:	7c2b      	ldrb	r3, [r5, #16]
 800763a:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 800763c:	4aaa      	ldr	r2, [pc, #680]	@ (80078e8 <loadMenuTexts+0xc44>)
 800763e:	4bab      	ldr	r3, [pc, #684]	@ (80078ec <loadMenuTexts+0xc48>)
 8007640:	4614      	mov	r4, r2
 8007642:	461d      	mov	r5, r3
 8007644:	6828      	ldr	r0, [r5, #0]
 8007646:	6869      	ldr	r1, [r5, #4]
 8007648:	68aa      	ldr	r2, [r5, #8]
 800764a:	68eb      	ldr	r3, [r5, #12]
 800764c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800764e:	7c2b      	ldrb	r3, [r5, #16]
 8007650:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8007652:	4aa7      	ldr	r2, [pc, #668]	@ (80078f0 <loadMenuTexts+0xc4c>)
 8007654:	4ba7      	ldr	r3, [pc, #668]	@ (80078f4 <loadMenuTexts+0xc50>)
 8007656:	4614      	mov	r4, r2
 8007658:	461d      	mov	r5, r3
 800765a:	6828      	ldr	r0, [r5, #0]
 800765c:	6869      	ldr	r1, [r5, #4]
 800765e:	68aa      	ldr	r2, [r5, #8]
 8007660:	68eb      	ldr	r3, [r5, #12]
 8007662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007664:	7c2b      	ldrb	r3, [r5, #16]
 8007666:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8007668:	4aa3      	ldr	r2, [pc, #652]	@ (80078f8 <loadMenuTexts+0xc54>)
 800766a:	4ba4      	ldr	r3, [pc, #656]	@ (80078fc <loadMenuTexts+0xc58>)
 800766c:	4614      	mov	r4, r2
 800766e:	461d      	mov	r5, r3
 8007670:	6828      	ldr	r0, [r5, #0]
 8007672:	6869      	ldr	r1, [r5, #4]
 8007674:	68aa      	ldr	r2, [r5, #8]
 8007676:	68eb      	ldr	r3, [r5, #12]
 8007678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800767a:	7c2b      	ldrb	r3, [r5, #16]
 800767c:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 800767e:	4aa0      	ldr	r2, [pc, #640]	@ (8007900 <loadMenuTexts+0xc5c>)
 8007680:	4ba0      	ldr	r3, [pc, #640]	@ (8007904 <loadMenuTexts+0xc60>)
 8007682:	4614      	mov	r4, r2
 8007684:	461d      	mov	r5, r3
 8007686:	6828      	ldr	r0, [r5, #0]
 8007688:	6869      	ldr	r1, [r5, #4]
 800768a:	68aa      	ldr	r2, [r5, #8]
 800768c:	68eb      	ldr	r3, [r5, #12]
 800768e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007690:	7c2b      	ldrb	r3, [r5, #16]
 8007692:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8007694:	4a9c      	ldr	r2, [pc, #624]	@ (8007908 <loadMenuTexts+0xc64>)
 8007696:	4b9d      	ldr	r3, [pc, #628]	@ (800790c <loadMenuTexts+0xc68>)
 8007698:	4614      	mov	r4, r2
 800769a:	461d      	mov	r5, r3
 800769c:	6828      	ldr	r0, [r5, #0]
 800769e:	6869      	ldr	r1, [r5, #4]
 80076a0:	68aa      	ldr	r2, [r5, #8]
 80076a2:	68eb      	ldr	r3, [r5, #12]
 80076a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076a6:	7c2b      	ldrb	r3, [r5, #16]
 80076a8:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 80076aa:	4a99      	ldr	r2, [pc, #612]	@ (8007910 <loadMenuTexts+0xc6c>)
 80076ac:	4b99      	ldr	r3, [pc, #612]	@ (8007914 <loadMenuTexts+0xc70>)
 80076ae:	4614      	mov	r4, r2
 80076b0:	461d      	mov	r5, r3
 80076b2:	6828      	ldr	r0, [r5, #0]
 80076b4:	6869      	ldr	r1, [r5, #4]
 80076b6:	68aa      	ldr	r2, [r5, #8]
 80076b8:	68eb      	ldr	r3, [r5, #12]
 80076ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076bc:	7c2b      	ldrb	r3, [r5, #16]
 80076be:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 80076c0:	4a95      	ldr	r2, [pc, #596]	@ (8007918 <loadMenuTexts+0xc74>)
 80076c2:	4b96      	ldr	r3, [pc, #600]	@ (800791c <loadMenuTexts+0xc78>)
 80076c4:	4614      	mov	r4, r2
 80076c6:	461d      	mov	r5, r3
 80076c8:	6828      	ldr	r0, [r5, #0]
 80076ca:	6869      	ldr	r1, [r5, #4]
 80076cc:	68aa      	ldr	r2, [r5, #8]
 80076ce:	68eb      	ldr	r3, [r5, #12]
 80076d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076d2:	7c2b      	ldrb	r3, [r5, #16]
 80076d4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 80076d6:	4a92      	ldr	r2, [pc, #584]	@ (8007920 <loadMenuTexts+0xc7c>)
 80076d8:	4b92      	ldr	r3, [pc, #584]	@ (8007924 <loadMenuTexts+0xc80>)
 80076da:	4614      	mov	r4, r2
 80076dc:	461d      	mov	r5, r3
 80076de:	6828      	ldr	r0, [r5, #0]
 80076e0:	6869      	ldr	r1, [r5, #4]
 80076e2:	68aa      	ldr	r2, [r5, #8]
 80076e4:	68eb      	ldr	r3, [r5, #12]
 80076e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076e8:	7c2b      	ldrb	r3, [r5, #16]
 80076ea:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 80076ec:	4a8e      	ldr	r2, [pc, #568]	@ (8007928 <loadMenuTexts+0xc84>)
 80076ee:	4b8f      	ldr	r3, [pc, #572]	@ (800792c <loadMenuTexts+0xc88>)
 80076f0:	4614      	mov	r4, r2
 80076f2:	461d      	mov	r5, r3
 80076f4:	6828      	ldr	r0, [r5, #0]
 80076f6:	6869      	ldr	r1, [r5, #4]
 80076f8:	68aa      	ldr	r2, [r5, #8]
 80076fa:	68eb      	ldr	r3, [r5, #12]
 80076fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076fe:	7c2b      	ldrb	r3, [r5, #16]
 8007700:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8007702:	4a8b      	ldr	r2, [pc, #556]	@ (8007930 <loadMenuTexts+0xc8c>)
 8007704:	4b8b      	ldr	r3, [pc, #556]	@ (8007934 <loadMenuTexts+0xc90>)
 8007706:	4614      	mov	r4, r2
 8007708:	461d      	mov	r5, r3
 800770a:	6828      	ldr	r0, [r5, #0]
 800770c:	6869      	ldr	r1, [r5, #4]
 800770e:	68aa      	ldr	r2, [r5, #8]
 8007710:	68eb      	ldr	r3, [r5, #12]
 8007712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007714:	7c2b      	ldrb	r3, [r5, #16]
 8007716:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8007718:	4a87      	ldr	r2, [pc, #540]	@ (8007938 <loadMenuTexts+0xc94>)
 800771a:	4b88      	ldr	r3, [pc, #544]	@ (800793c <loadMenuTexts+0xc98>)
 800771c:	4614      	mov	r4, r2
 800771e:	461d      	mov	r5, r3
 8007720:	6828      	ldr	r0, [r5, #0]
 8007722:	6869      	ldr	r1, [r5, #4]
 8007724:	68aa      	ldr	r2, [r5, #8]
 8007726:	68eb      	ldr	r3, [r5, #12]
 8007728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800772a:	7c2b      	ldrb	r3, [r5, #16]
 800772c:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 800772e:	4a84      	ldr	r2, [pc, #528]	@ (8007940 <loadMenuTexts+0xc9c>)
 8007730:	4b84      	ldr	r3, [pc, #528]	@ (8007944 <loadMenuTexts+0xca0>)
 8007732:	4614      	mov	r4, r2
 8007734:	461d      	mov	r5, r3
 8007736:	6828      	ldr	r0, [r5, #0]
 8007738:	6869      	ldr	r1, [r5, #4]
 800773a:	68aa      	ldr	r2, [r5, #8]
 800773c:	68eb      	ldr	r3, [r5, #12]
 800773e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007740:	7c2b      	ldrb	r3, [r5, #16]
 8007742:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8007744:	4a80      	ldr	r2, [pc, #512]	@ (8007948 <loadMenuTexts+0xca4>)
 8007746:	4b81      	ldr	r3, [pc, #516]	@ (800794c <loadMenuTexts+0xca8>)
 8007748:	4614      	mov	r4, r2
 800774a:	461d      	mov	r5, r3
 800774c:	6828      	ldr	r0, [r5, #0]
 800774e:	6869      	ldr	r1, [r5, #4]
 8007750:	68aa      	ldr	r2, [r5, #8]
 8007752:	68eb      	ldr	r3, [r5, #12]
 8007754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007756:	7c2b      	ldrb	r3, [r5, #16]
 8007758:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 800775a:	4a7d      	ldr	r2, [pc, #500]	@ (8007950 <loadMenuTexts+0xcac>)
 800775c:	4b7d      	ldr	r3, [pc, #500]	@ (8007954 <loadMenuTexts+0xcb0>)
 800775e:	4614      	mov	r4, r2
 8007760:	461d      	mov	r5, r3
 8007762:	6828      	ldr	r0, [r5, #0]
 8007764:	6869      	ldr	r1, [r5, #4]
 8007766:	68aa      	ldr	r2, [r5, #8]
 8007768:	68eb      	ldr	r3, [r5, #12]
 800776a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800776c:	7c2b      	ldrb	r3, [r5, #16]
 800776e:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8007770:	4a79      	ldr	r2, [pc, #484]	@ (8007958 <loadMenuTexts+0xcb4>)
 8007772:	4b7a      	ldr	r3, [pc, #488]	@ (800795c <loadMenuTexts+0xcb8>)
 8007774:	4614      	mov	r4, r2
 8007776:	461d      	mov	r5, r3
 8007778:	6828      	ldr	r0, [r5, #0]
 800777a:	6869      	ldr	r1, [r5, #4]
 800777c:	68aa      	ldr	r2, [r5, #8]
 800777e:	68eb      	ldr	r3, [r5, #12]
 8007780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007782:	7c2b      	ldrb	r3, [r5, #16]
 8007784:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8007786:	4a76      	ldr	r2, [pc, #472]	@ (8007960 <loadMenuTexts+0xcbc>)
 8007788:	4b76      	ldr	r3, [pc, #472]	@ (8007964 <loadMenuTexts+0xcc0>)
 800778a:	4614      	mov	r4, r2
 800778c:	461d      	mov	r5, r3
 800778e:	6828      	ldr	r0, [r5, #0]
 8007790:	6869      	ldr	r1, [r5, #4]
 8007792:	68aa      	ldr	r2, [r5, #8]
 8007794:	68eb      	ldr	r3, [r5, #12]
 8007796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007798:	7c2b      	ldrb	r3, [r5, #16]
 800779a:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 800779c:	4a72      	ldr	r2, [pc, #456]	@ (8007968 <loadMenuTexts+0xcc4>)
 800779e:	4b73      	ldr	r3, [pc, #460]	@ (800796c <loadMenuTexts+0xcc8>)
 80077a0:	4614      	mov	r4, r2
 80077a2:	461d      	mov	r5, r3
 80077a4:	6828      	ldr	r0, [r5, #0]
 80077a6:	6869      	ldr	r1, [r5, #4]
 80077a8:	68aa      	ldr	r2, [r5, #8]
 80077aa:	68eb      	ldr	r3, [r5, #12]
 80077ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077ae:	7c2b      	ldrb	r3, [r5, #16]
 80077b0:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 80077b2:	4a6f      	ldr	r2, [pc, #444]	@ (8007970 <loadMenuTexts+0xccc>)
 80077b4:	4b6f      	ldr	r3, [pc, #444]	@ (8007974 <loadMenuTexts+0xcd0>)
 80077b6:	4614      	mov	r4, r2
 80077b8:	461d      	mov	r5, r3
 80077ba:	6828      	ldr	r0, [r5, #0]
 80077bc:	6869      	ldr	r1, [r5, #4]
 80077be:	68aa      	ldr	r2, [r5, #8]
 80077c0:	68eb      	ldr	r3, [r5, #12]
 80077c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077c4:	7c2b      	ldrb	r3, [r5, #16]
 80077c6:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 80077c8:	4a6b      	ldr	r2, [pc, #428]	@ (8007978 <loadMenuTexts+0xcd4>)
 80077ca:	4b6c      	ldr	r3, [pc, #432]	@ (800797c <loadMenuTexts+0xcd8>)
 80077cc:	4614      	mov	r4, r2
 80077ce:	461d      	mov	r5, r3
 80077d0:	6828      	ldr	r0, [r5, #0]
 80077d2:	6869      	ldr	r1, [r5, #4]
 80077d4:	68aa      	ldr	r2, [r5, #8]
 80077d6:	68eb      	ldr	r3, [r5, #12]
 80077d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077da:	7c2b      	ldrb	r3, [r5, #16]
 80077dc:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 80077de:	4a68      	ldr	r2, [pc, #416]	@ (8007980 <loadMenuTexts+0xcdc>)
 80077e0:	4b68      	ldr	r3, [pc, #416]	@ (8007984 <loadMenuTexts+0xce0>)
 80077e2:	4614      	mov	r4, r2
 80077e4:	461d      	mov	r5, r3
 80077e6:	6828      	ldr	r0, [r5, #0]
 80077e8:	6869      	ldr	r1, [r5, #4]
 80077ea:	68aa      	ldr	r2, [r5, #8]
 80077ec:	68eb      	ldr	r3, [r5, #12]
 80077ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077f0:	7c2b      	ldrb	r3, [r5, #16]
 80077f2:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 80077f4:	4a64      	ldr	r2, [pc, #400]	@ (8007988 <loadMenuTexts+0xce4>)
 80077f6:	4b65      	ldr	r3, [pc, #404]	@ (800798c <loadMenuTexts+0xce8>)
 80077f8:	4614      	mov	r4, r2
 80077fa:	461d      	mov	r5, r3
 80077fc:	6828      	ldr	r0, [r5, #0]
 80077fe:	6869      	ldr	r1, [r5, #4]
 8007800:	68aa      	ldr	r2, [r5, #8]
 8007802:	68eb      	ldr	r3, [r5, #12]
 8007804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007806:	7c2b      	ldrb	r3, [r5, #16]
 8007808:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 800780a:	4a61      	ldr	r2, [pc, #388]	@ (8007990 <loadMenuTexts+0xcec>)
 800780c:	4b61      	ldr	r3, [pc, #388]	@ (8007994 <loadMenuTexts+0xcf0>)
 800780e:	4614      	mov	r4, r2
 8007810:	461d      	mov	r5, r3
 8007812:	6828      	ldr	r0, [r5, #0]
 8007814:	6869      	ldr	r1, [r5, #4]
 8007816:	68aa      	ldr	r2, [r5, #8]
 8007818:	68eb      	ldr	r3, [r5, #12]
 800781a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800781c:	7c2b      	ldrb	r3, [r5, #16]
 800781e:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8007820:	4a5d      	ldr	r2, [pc, #372]	@ (8007998 <loadMenuTexts+0xcf4>)
 8007822:	4b5e      	ldr	r3, [pc, #376]	@ (800799c <loadMenuTexts+0xcf8>)
 8007824:	4614      	mov	r4, r2
 8007826:	461d      	mov	r5, r3
 8007828:	6828      	ldr	r0, [r5, #0]
 800782a:	6869      	ldr	r1, [r5, #4]
 800782c:	68aa      	ldr	r2, [r5, #8]
 800782e:	68eb      	ldr	r3, [r5, #12]
 8007830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007832:	7c2b      	ldrb	r3, [r5, #16]
 8007834:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8007836:	4a5a      	ldr	r2, [pc, #360]	@ (80079a0 <loadMenuTexts+0xcfc>)
 8007838:	4b5a      	ldr	r3, [pc, #360]	@ (80079a4 <loadMenuTexts+0xd00>)
 800783a:	4614      	mov	r4, r2
 800783c:	461d      	mov	r5, r3
 800783e:	6828      	ldr	r0, [r5, #0]
 8007840:	6869      	ldr	r1, [r5, #4]
 8007842:	68aa      	ldr	r2, [r5, #8]
 8007844:	68eb      	ldr	r3, [r5, #12]
 8007846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007848:	7c2b      	ldrb	r3, [r5, #16]
 800784a:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 800784c:	4a56      	ldr	r2, [pc, #344]	@ (80079a8 <loadMenuTexts+0xd04>)
 800784e:	4b57      	ldr	r3, [pc, #348]	@ (80079ac <loadMenuTexts+0xd08>)
 8007850:	4614      	mov	r4, r2
 8007852:	461d      	mov	r5, r3
 8007854:	6828      	ldr	r0, [r5, #0]
 8007856:	6869      	ldr	r1, [r5, #4]
 8007858:	68aa      	ldr	r2, [r5, #8]
 800785a:	68eb      	ldr	r3, [r5, #12]
 800785c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800785e:	7c2b      	ldrb	r3, [r5, #16]
 8007860:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8007862:	4a53      	ldr	r2, [pc, #332]	@ (80079b0 <loadMenuTexts+0xd0c>)
 8007864:	4b53      	ldr	r3, [pc, #332]	@ (80079b4 <loadMenuTexts+0xd10>)
 8007866:	4614      	mov	r4, r2
 8007868:	461d      	mov	r5, r3
 800786a:	6828      	ldr	r0, [r5, #0]
 800786c:	6869      	ldr	r1, [r5, #4]
 800786e:	68aa      	ldr	r2, [r5, #8]
 8007870:	68eb      	ldr	r3, [r5, #12]
 8007872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007874:	7c2b      	ldrb	r3, [r5, #16]
 8007876:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8007878:	4a4f      	ldr	r2, [pc, #316]	@ (80079b8 <loadMenuTexts+0xd14>)
 800787a:	4b50      	ldr	r3, [pc, #320]	@ (80079bc <loadMenuTexts+0xd18>)
 800787c:	4614      	mov	r4, r2
 800787e:	461d      	mov	r5, r3
 8007880:	6828      	ldr	r0, [r5, #0]
 8007882:	6869      	ldr	r1, [r5, #4]
 8007884:	68aa      	ldr	r2, [r5, #8]
 8007886:	68eb      	ldr	r3, [r5, #12]
 8007888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800788a:	7c2b      	ldrb	r3, [r5, #16]
 800788c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 800788e:	4a4c      	ldr	r2, [pc, #304]	@ (80079c0 <loadMenuTexts+0xd1c>)
 8007890:	4b4c      	ldr	r3, [pc, #304]	@ (80079c4 <loadMenuTexts+0xd20>)
 8007892:	4614      	mov	r4, r2
 8007894:	461d      	mov	r5, r3
 8007896:	6828      	ldr	r0, [r5, #0]
 8007898:	6869      	ldr	r1, [r5, #4]
 800789a:	68aa      	ldr	r2, [r5, #8]
 800789c:	68eb      	ldr	r3, [r5, #12]
 800789e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078a0:	7c2b      	ldrb	r3, [r5, #16]
 80078a2:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 80078a4:	4a48      	ldr	r2, [pc, #288]	@ (80079c8 <loadMenuTexts+0xd24>)
 80078a6:	e091      	b.n	80079cc <loadMenuTexts+0xd28>
 80078a8:	20000e08 	.word	0x20000e08
 80078ac:	20000698 	.word	0x20000698
 80078b0:	20000e1c 	.word	0x20000e1c
 80078b4:	200006ac 	.word	0x200006ac
 80078b8:	20000e30 	.word	0x20000e30
 80078bc:	200006c0 	.word	0x200006c0
 80078c0:	20000e44 	.word	0x20000e44
 80078c4:	200006d4 	.word	0x200006d4
 80078c8:	20000e58 	.word	0x20000e58
 80078cc:	200006e8 	.word	0x200006e8
 80078d0:	20000e6c 	.word	0x20000e6c
 80078d4:	200006fc 	.word	0x200006fc
 80078d8:	20000e80 	.word	0x20000e80
 80078dc:	20000710 	.word	0x20000710
 80078e0:	20000e94 	.word	0x20000e94
 80078e4:	20000724 	.word	0x20000724
 80078e8:	20000ea8 	.word	0x20000ea8
 80078ec:	20000738 	.word	0x20000738
 80078f0:	20000ebc 	.word	0x20000ebc
 80078f4:	2000074c 	.word	0x2000074c
 80078f8:	20000ed0 	.word	0x20000ed0
 80078fc:	20000760 	.word	0x20000760
 8007900:	20000ee4 	.word	0x20000ee4
 8007904:	20000774 	.word	0x20000774
 8007908:	20000ef8 	.word	0x20000ef8
 800790c:	20000788 	.word	0x20000788
 8007910:	20000f0c 	.word	0x20000f0c
 8007914:	2000079c 	.word	0x2000079c
 8007918:	20000f20 	.word	0x20000f20
 800791c:	200007b0 	.word	0x200007b0
 8007920:	20000f34 	.word	0x20000f34
 8007924:	200007c4 	.word	0x200007c4
 8007928:	20000f48 	.word	0x20000f48
 800792c:	200007d8 	.word	0x200007d8
 8007930:	20000f5c 	.word	0x20000f5c
 8007934:	200007ec 	.word	0x200007ec
 8007938:	20000f70 	.word	0x20000f70
 800793c:	20000800 	.word	0x20000800
 8007940:	20000f84 	.word	0x20000f84
 8007944:	20000814 	.word	0x20000814
 8007948:	20000f98 	.word	0x20000f98
 800794c:	20000828 	.word	0x20000828
 8007950:	20000fac 	.word	0x20000fac
 8007954:	2000083c 	.word	0x2000083c
 8007958:	20000fc0 	.word	0x20000fc0
 800795c:	20000850 	.word	0x20000850
 8007960:	20000fd4 	.word	0x20000fd4
 8007964:	20000864 	.word	0x20000864
 8007968:	20000fe8 	.word	0x20000fe8
 800796c:	20000878 	.word	0x20000878
 8007970:	20000ffc 	.word	0x20000ffc
 8007974:	2000088c 	.word	0x2000088c
 8007978:	20001010 	.word	0x20001010
 800797c:	200008a0 	.word	0x200008a0
 8007980:	20001024 	.word	0x20001024
 8007984:	200008b4 	.word	0x200008b4
 8007988:	20001038 	.word	0x20001038
 800798c:	200008c8 	.word	0x200008c8
 8007990:	2000104c 	.word	0x2000104c
 8007994:	200008dc 	.word	0x200008dc
 8007998:	20001060 	.word	0x20001060
 800799c:	200008f0 	.word	0x200008f0
 80079a0:	20001074 	.word	0x20001074
 80079a4:	20000904 	.word	0x20000904
 80079a8:	20001088 	.word	0x20001088
 80079ac:	20000918 	.word	0x20000918
 80079b0:	2000109c 	.word	0x2000109c
 80079b4:	2000092c 	.word	0x2000092c
 80079b8:	200010b0 	.word	0x200010b0
 80079bc:	20000940 	.word	0x20000940
 80079c0:	200010c4 	.word	0x200010c4
 80079c4:	20000954 	.word	0x20000954
 80079c8:	200010d8 	.word	0x200010d8
 80079cc:	4bc7      	ldr	r3, [pc, #796]	@ (8007cec <loadMenuTexts+0x1048>)
 80079ce:	4614      	mov	r4, r2
 80079d0:	461d      	mov	r5, r3
 80079d2:	6828      	ldr	r0, [r5, #0]
 80079d4:	6869      	ldr	r1, [r5, #4]
 80079d6:	68aa      	ldr	r2, [r5, #8]
 80079d8:	68eb      	ldr	r3, [r5, #12]
 80079da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079dc:	7c2b      	ldrb	r3, [r5, #16]
 80079de:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 80079e0:	4ac3      	ldr	r2, [pc, #780]	@ (8007cf0 <loadMenuTexts+0x104c>)
 80079e2:	4bc4      	ldr	r3, [pc, #784]	@ (8007cf4 <loadMenuTexts+0x1050>)
 80079e4:	4614      	mov	r4, r2
 80079e6:	461d      	mov	r5, r3
 80079e8:	6828      	ldr	r0, [r5, #0]
 80079ea:	6869      	ldr	r1, [r5, #4]
 80079ec:	68aa      	ldr	r2, [r5, #8]
 80079ee:	68eb      	ldr	r3, [r5, #12]
 80079f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079f2:	7c2b      	ldrb	r3, [r5, #16]
 80079f4:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 80079f6:	4ac0      	ldr	r2, [pc, #768]	@ (8007cf8 <loadMenuTexts+0x1054>)
 80079f8:	4bc0      	ldr	r3, [pc, #768]	@ (8007cfc <loadMenuTexts+0x1058>)
 80079fa:	4614      	mov	r4, r2
 80079fc:	461d      	mov	r5, r3
 80079fe:	6828      	ldr	r0, [r5, #0]
 8007a00:	6869      	ldr	r1, [r5, #4]
 8007a02:	68aa      	ldr	r2, [r5, #8]
 8007a04:	68eb      	ldr	r3, [r5, #12]
 8007a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a08:	7c2b      	ldrb	r3, [r5, #16]
 8007a0a:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8007a0c:	4abc      	ldr	r2, [pc, #752]	@ (8007d00 <loadMenuTexts+0x105c>)
 8007a0e:	4bbd      	ldr	r3, [pc, #756]	@ (8007d04 <loadMenuTexts+0x1060>)
 8007a10:	4614      	mov	r4, r2
 8007a12:	461d      	mov	r5, r3
 8007a14:	6828      	ldr	r0, [r5, #0]
 8007a16:	6869      	ldr	r1, [r5, #4]
 8007a18:	68aa      	ldr	r2, [r5, #8]
 8007a1a:	68eb      	ldr	r3, [r5, #12]
 8007a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a1e:	7c2b      	ldrb	r3, [r5, #16]
 8007a20:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8007a22:	4ab9      	ldr	r2, [pc, #740]	@ (8007d08 <loadMenuTexts+0x1064>)
 8007a24:	4bb9      	ldr	r3, [pc, #740]	@ (8007d0c <loadMenuTexts+0x1068>)
 8007a26:	4614      	mov	r4, r2
 8007a28:	461d      	mov	r5, r3
 8007a2a:	6828      	ldr	r0, [r5, #0]
 8007a2c:	6869      	ldr	r1, [r5, #4]
 8007a2e:	68aa      	ldr	r2, [r5, #8]
 8007a30:	68eb      	ldr	r3, [r5, #12]
 8007a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a34:	7c2b      	ldrb	r3, [r5, #16]
 8007a36:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8007a38:	4ab5      	ldr	r2, [pc, #724]	@ (8007d10 <loadMenuTexts+0x106c>)
 8007a3a:	4bb6      	ldr	r3, [pc, #728]	@ (8007d14 <loadMenuTexts+0x1070>)
 8007a3c:	4614      	mov	r4, r2
 8007a3e:	461d      	mov	r5, r3
 8007a40:	6828      	ldr	r0, [r5, #0]
 8007a42:	6869      	ldr	r1, [r5, #4]
 8007a44:	68aa      	ldr	r2, [r5, #8]
 8007a46:	68eb      	ldr	r3, [r5, #12]
 8007a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a4a:	7c2b      	ldrb	r3, [r5, #16]
 8007a4c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8007a4e:	4ab2      	ldr	r2, [pc, #712]	@ (8007d18 <loadMenuTexts+0x1074>)
 8007a50:	4bb2      	ldr	r3, [pc, #712]	@ (8007d1c <loadMenuTexts+0x1078>)
 8007a52:	4614      	mov	r4, r2
 8007a54:	461d      	mov	r5, r3
 8007a56:	6828      	ldr	r0, [r5, #0]
 8007a58:	6869      	ldr	r1, [r5, #4]
 8007a5a:	68aa      	ldr	r2, [r5, #8]
 8007a5c:	68eb      	ldr	r3, [r5, #12]
 8007a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a60:	7c2b      	ldrb	r3, [r5, #16]
 8007a62:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8007a64:	4aae      	ldr	r2, [pc, #696]	@ (8007d20 <loadMenuTexts+0x107c>)
 8007a66:	4baf      	ldr	r3, [pc, #700]	@ (8007d24 <loadMenuTexts+0x1080>)
 8007a68:	4614      	mov	r4, r2
 8007a6a:	461d      	mov	r5, r3
 8007a6c:	6828      	ldr	r0, [r5, #0]
 8007a6e:	6869      	ldr	r1, [r5, #4]
 8007a70:	68aa      	ldr	r2, [r5, #8]
 8007a72:	68eb      	ldr	r3, [r5, #12]
 8007a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a76:	7c2b      	ldrb	r3, [r5, #16]
 8007a78:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8007a7a:	4aab      	ldr	r2, [pc, #684]	@ (8007d28 <loadMenuTexts+0x1084>)
 8007a7c:	4bab      	ldr	r3, [pc, #684]	@ (8007d2c <loadMenuTexts+0x1088>)
 8007a7e:	4614      	mov	r4, r2
 8007a80:	461d      	mov	r5, r3
 8007a82:	6828      	ldr	r0, [r5, #0]
 8007a84:	6869      	ldr	r1, [r5, #4]
 8007a86:	68aa      	ldr	r2, [r5, #8]
 8007a88:	68eb      	ldr	r3, [r5, #12]
 8007a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a8c:	7c2b      	ldrb	r3, [r5, #16]
 8007a8e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8007a90:	4aa7      	ldr	r2, [pc, #668]	@ (8007d30 <loadMenuTexts+0x108c>)
 8007a92:	4ba8      	ldr	r3, [pc, #672]	@ (8007d34 <loadMenuTexts+0x1090>)
 8007a94:	4614      	mov	r4, r2
 8007a96:	461d      	mov	r5, r3
 8007a98:	6828      	ldr	r0, [r5, #0]
 8007a9a:	6869      	ldr	r1, [r5, #4]
 8007a9c:	68aa      	ldr	r2, [r5, #8]
 8007a9e:	68eb      	ldr	r3, [r5, #12]
 8007aa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007aa2:	7c2b      	ldrb	r3, [r5, #16]
 8007aa4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8007aa6:	4aa4      	ldr	r2, [pc, #656]	@ (8007d38 <loadMenuTexts+0x1094>)
 8007aa8:	4ba4      	ldr	r3, [pc, #656]	@ (8007d3c <loadMenuTexts+0x1098>)
 8007aaa:	4614      	mov	r4, r2
 8007aac:	461d      	mov	r5, r3
 8007aae:	6828      	ldr	r0, [r5, #0]
 8007ab0:	6869      	ldr	r1, [r5, #4]
 8007ab2:	68aa      	ldr	r2, [r5, #8]
 8007ab4:	68eb      	ldr	r3, [r5, #12]
 8007ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ab8:	7c2b      	ldrb	r3, [r5, #16]
 8007aba:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8007abc:	4aa0      	ldr	r2, [pc, #640]	@ (8007d40 <loadMenuTexts+0x109c>)
 8007abe:	4ba1      	ldr	r3, [pc, #644]	@ (8007d44 <loadMenuTexts+0x10a0>)
 8007ac0:	4614      	mov	r4, r2
 8007ac2:	461d      	mov	r5, r3
 8007ac4:	6828      	ldr	r0, [r5, #0]
 8007ac6:	6869      	ldr	r1, [r5, #4]
 8007ac8:	68aa      	ldr	r2, [r5, #8]
 8007aca:	68eb      	ldr	r3, [r5, #12]
 8007acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ace:	7c2b      	ldrb	r3, [r5, #16]
 8007ad0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8007ad2:	4a9d      	ldr	r2, [pc, #628]	@ (8007d48 <loadMenuTexts+0x10a4>)
 8007ad4:	4b9d      	ldr	r3, [pc, #628]	@ (8007d4c <loadMenuTexts+0x10a8>)
 8007ad6:	4614      	mov	r4, r2
 8007ad8:	461d      	mov	r5, r3
 8007ada:	6828      	ldr	r0, [r5, #0]
 8007adc:	6869      	ldr	r1, [r5, #4]
 8007ade:	68aa      	ldr	r2, [r5, #8]
 8007ae0:	68eb      	ldr	r3, [r5, #12]
 8007ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ae4:	7c2b      	ldrb	r3, [r5, #16]
 8007ae6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8007ae8:	4a99      	ldr	r2, [pc, #612]	@ (8007d50 <loadMenuTexts+0x10ac>)
 8007aea:	4b9a      	ldr	r3, [pc, #616]	@ (8007d54 <loadMenuTexts+0x10b0>)
 8007aec:	4614      	mov	r4, r2
 8007aee:	461d      	mov	r5, r3
 8007af0:	6828      	ldr	r0, [r5, #0]
 8007af2:	6869      	ldr	r1, [r5, #4]
 8007af4:	68aa      	ldr	r2, [r5, #8]
 8007af6:	68eb      	ldr	r3, [r5, #12]
 8007af8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007afa:	7c2b      	ldrb	r3, [r5, #16]
 8007afc:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8007afe:	4a96      	ldr	r2, [pc, #600]	@ (8007d58 <loadMenuTexts+0x10b4>)
 8007b00:	4b96      	ldr	r3, [pc, #600]	@ (8007d5c <loadMenuTexts+0x10b8>)
 8007b02:	4614      	mov	r4, r2
 8007b04:	461d      	mov	r5, r3
 8007b06:	6828      	ldr	r0, [r5, #0]
 8007b08:	6869      	ldr	r1, [r5, #4]
 8007b0a:	68aa      	ldr	r2, [r5, #8]
 8007b0c:	68eb      	ldr	r3, [r5, #12]
 8007b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b10:	7c2b      	ldrb	r3, [r5, #16]
 8007b12:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8007b14:	4a92      	ldr	r2, [pc, #584]	@ (8007d60 <loadMenuTexts+0x10bc>)
 8007b16:	4b93      	ldr	r3, [pc, #588]	@ (8007d64 <loadMenuTexts+0x10c0>)
 8007b18:	4614      	mov	r4, r2
 8007b1a:	461d      	mov	r5, r3
 8007b1c:	6828      	ldr	r0, [r5, #0]
 8007b1e:	6869      	ldr	r1, [r5, #4]
 8007b20:	68aa      	ldr	r2, [r5, #8]
 8007b22:	68eb      	ldr	r3, [r5, #12]
 8007b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b26:	7c2b      	ldrb	r3, [r5, #16]
 8007b28:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8007b2a:	4a8f      	ldr	r2, [pc, #572]	@ (8007d68 <loadMenuTexts+0x10c4>)
 8007b2c:	4b8f      	ldr	r3, [pc, #572]	@ (8007d6c <loadMenuTexts+0x10c8>)
 8007b2e:	4614      	mov	r4, r2
 8007b30:	461d      	mov	r5, r3
 8007b32:	6828      	ldr	r0, [r5, #0]
 8007b34:	6869      	ldr	r1, [r5, #4]
 8007b36:	68aa      	ldr	r2, [r5, #8]
 8007b38:	68eb      	ldr	r3, [r5, #12]
 8007b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b3c:	7c2b      	ldrb	r3, [r5, #16]
 8007b3e:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8007b40:	4a8b      	ldr	r2, [pc, #556]	@ (8007d70 <loadMenuTexts+0x10cc>)
 8007b42:	4b8c      	ldr	r3, [pc, #560]	@ (8007d74 <loadMenuTexts+0x10d0>)
 8007b44:	4614      	mov	r4, r2
 8007b46:	461d      	mov	r5, r3
 8007b48:	6828      	ldr	r0, [r5, #0]
 8007b4a:	6869      	ldr	r1, [r5, #4]
 8007b4c:	68aa      	ldr	r2, [r5, #8]
 8007b4e:	68eb      	ldr	r3, [r5, #12]
 8007b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b52:	7c2b      	ldrb	r3, [r5, #16]
 8007b54:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8007b56:	4a88      	ldr	r2, [pc, #544]	@ (8007d78 <loadMenuTexts+0x10d4>)
 8007b58:	4b88      	ldr	r3, [pc, #544]	@ (8007d7c <loadMenuTexts+0x10d8>)
 8007b5a:	4614      	mov	r4, r2
 8007b5c:	461d      	mov	r5, r3
 8007b5e:	6828      	ldr	r0, [r5, #0]
 8007b60:	6869      	ldr	r1, [r5, #4]
 8007b62:	68aa      	ldr	r2, [r5, #8]
 8007b64:	68eb      	ldr	r3, [r5, #12]
 8007b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b68:	7c2b      	ldrb	r3, [r5, #16]
 8007b6a:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8007b6c:	4a84      	ldr	r2, [pc, #528]	@ (8007d80 <loadMenuTexts+0x10dc>)
 8007b6e:	4b85      	ldr	r3, [pc, #532]	@ (8007d84 <loadMenuTexts+0x10e0>)
 8007b70:	4614      	mov	r4, r2
 8007b72:	461d      	mov	r5, r3
 8007b74:	6828      	ldr	r0, [r5, #0]
 8007b76:	6869      	ldr	r1, [r5, #4]
 8007b78:	68aa      	ldr	r2, [r5, #8]
 8007b7a:	68eb      	ldr	r3, [r5, #12]
 8007b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b7e:	7c2b      	ldrb	r3, [r5, #16]
 8007b80:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8007b82:	4a81      	ldr	r2, [pc, #516]	@ (8007d88 <loadMenuTexts+0x10e4>)
 8007b84:	4b81      	ldr	r3, [pc, #516]	@ (8007d8c <loadMenuTexts+0x10e8>)
 8007b86:	4614      	mov	r4, r2
 8007b88:	461d      	mov	r5, r3
 8007b8a:	6828      	ldr	r0, [r5, #0]
 8007b8c:	6869      	ldr	r1, [r5, #4]
 8007b8e:	68aa      	ldr	r2, [r5, #8]
 8007b90:	68eb      	ldr	r3, [r5, #12]
 8007b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b94:	7c2b      	ldrb	r3, [r5, #16]
 8007b96:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8007b98:	4a7d      	ldr	r2, [pc, #500]	@ (8007d90 <loadMenuTexts+0x10ec>)
 8007b9a:	4b7e      	ldr	r3, [pc, #504]	@ (8007d94 <loadMenuTexts+0x10f0>)
 8007b9c:	4614      	mov	r4, r2
 8007b9e:	461d      	mov	r5, r3
 8007ba0:	6828      	ldr	r0, [r5, #0]
 8007ba2:	6869      	ldr	r1, [r5, #4]
 8007ba4:	68aa      	ldr	r2, [r5, #8]
 8007ba6:	68eb      	ldr	r3, [r5, #12]
 8007ba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007baa:	7c2b      	ldrb	r3, [r5, #16]
 8007bac:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8007bae:	4a7a      	ldr	r2, [pc, #488]	@ (8007d98 <loadMenuTexts+0x10f4>)
 8007bb0:	4b7a      	ldr	r3, [pc, #488]	@ (8007d9c <loadMenuTexts+0x10f8>)
 8007bb2:	4614      	mov	r4, r2
 8007bb4:	461d      	mov	r5, r3
 8007bb6:	6828      	ldr	r0, [r5, #0]
 8007bb8:	6869      	ldr	r1, [r5, #4]
 8007bba:	68aa      	ldr	r2, [r5, #8]
 8007bbc:	68eb      	ldr	r3, [r5, #12]
 8007bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bc0:	7c2b      	ldrb	r3, [r5, #16]
 8007bc2:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8007bc4:	4a76      	ldr	r2, [pc, #472]	@ (8007da0 <loadMenuTexts+0x10fc>)
 8007bc6:	4b77      	ldr	r3, [pc, #476]	@ (8007da4 <loadMenuTexts+0x1100>)
 8007bc8:	4614      	mov	r4, r2
 8007bca:	461d      	mov	r5, r3
 8007bcc:	6828      	ldr	r0, [r5, #0]
 8007bce:	6869      	ldr	r1, [r5, #4]
 8007bd0:	68aa      	ldr	r2, [r5, #8]
 8007bd2:	68eb      	ldr	r3, [r5, #12]
 8007bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bd6:	7c2b      	ldrb	r3, [r5, #16]
 8007bd8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8007bda:	4a73      	ldr	r2, [pc, #460]	@ (8007da8 <loadMenuTexts+0x1104>)
 8007bdc:	4b73      	ldr	r3, [pc, #460]	@ (8007dac <loadMenuTexts+0x1108>)
 8007bde:	4614      	mov	r4, r2
 8007be0:	461d      	mov	r5, r3
 8007be2:	6828      	ldr	r0, [r5, #0]
 8007be4:	6869      	ldr	r1, [r5, #4]
 8007be6:	68aa      	ldr	r2, [r5, #8]
 8007be8:	68eb      	ldr	r3, [r5, #12]
 8007bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bec:	7c2b      	ldrb	r3, [r5, #16]
 8007bee:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8007bf0:	4a6f      	ldr	r2, [pc, #444]	@ (8007db0 <loadMenuTexts+0x110c>)
 8007bf2:	4b70      	ldr	r3, [pc, #448]	@ (8007db4 <loadMenuTexts+0x1110>)
 8007bf4:	4614      	mov	r4, r2
 8007bf6:	461d      	mov	r5, r3
 8007bf8:	6828      	ldr	r0, [r5, #0]
 8007bfa:	6869      	ldr	r1, [r5, #4]
 8007bfc:	68aa      	ldr	r2, [r5, #8]
 8007bfe:	68eb      	ldr	r3, [r5, #12]
 8007c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c02:	7c2b      	ldrb	r3, [r5, #16]
 8007c04:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8007c06:	4a6c      	ldr	r2, [pc, #432]	@ (8007db8 <loadMenuTexts+0x1114>)
 8007c08:	4b6c      	ldr	r3, [pc, #432]	@ (8007dbc <loadMenuTexts+0x1118>)
 8007c0a:	4614      	mov	r4, r2
 8007c0c:	461d      	mov	r5, r3
 8007c0e:	6828      	ldr	r0, [r5, #0]
 8007c10:	6869      	ldr	r1, [r5, #4]
 8007c12:	68aa      	ldr	r2, [r5, #8]
 8007c14:	68eb      	ldr	r3, [r5, #12]
 8007c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c18:	7c2b      	ldrb	r3, [r5, #16]
 8007c1a:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8007c1c:	4a68      	ldr	r2, [pc, #416]	@ (8007dc0 <loadMenuTexts+0x111c>)
 8007c1e:	4b69      	ldr	r3, [pc, #420]	@ (8007dc4 <loadMenuTexts+0x1120>)
 8007c20:	4614      	mov	r4, r2
 8007c22:	461d      	mov	r5, r3
 8007c24:	6828      	ldr	r0, [r5, #0]
 8007c26:	6869      	ldr	r1, [r5, #4]
 8007c28:	68aa      	ldr	r2, [r5, #8]
 8007c2a:	68eb      	ldr	r3, [r5, #12]
 8007c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c2e:	7c2b      	ldrb	r3, [r5, #16]
 8007c30:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 8007c32:	4a65      	ldr	r2, [pc, #404]	@ (8007dc8 <loadMenuTexts+0x1124>)
 8007c34:	4b65      	ldr	r3, [pc, #404]	@ (8007dcc <loadMenuTexts+0x1128>)
 8007c36:	4614      	mov	r4, r2
 8007c38:	461d      	mov	r5, r3
 8007c3a:	6828      	ldr	r0, [r5, #0]
 8007c3c:	6869      	ldr	r1, [r5, #4]
 8007c3e:	68aa      	ldr	r2, [r5, #8]
 8007c40:	68eb      	ldr	r3, [r5, #12]
 8007c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c44:	7c2b      	ldrb	r3, [r5, #16]
 8007c46:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8007c48:	4a61      	ldr	r2, [pc, #388]	@ (8007dd0 <loadMenuTexts+0x112c>)
 8007c4a:	4b62      	ldr	r3, [pc, #392]	@ (8007dd4 <loadMenuTexts+0x1130>)
 8007c4c:	4614      	mov	r4, r2
 8007c4e:	461d      	mov	r5, r3
 8007c50:	6828      	ldr	r0, [r5, #0]
 8007c52:	6869      	ldr	r1, [r5, #4]
 8007c54:	68aa      	ldr	r2, [r5, #8]
 8007c56:	68eb      	ldr	r3, [r5, #12]
 8007c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c5a:	7c2b      	ldrb	r3, [r5, #16]
 8007c5c:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 8007c5e:	4a5e      	ldr	r2, [pc, #376]	@ (8007dd8 <loadMenuTexts+0x1134>)
 8007c60:	4b5e      	ldr	r3, [pc, #376]	@ (8007ddc <loadMenuTexts+0x1138>)
 8007c62:	4614      	mov	r4, r2
 8007c64:	461d      	mov	r5, r3
 8007c66:	6828      	ldr	r0, [r5, #0]
 8007c68:	6869      	ldr	r1, [r5, #4]
 8007c6a:	68aa      	ldr	r2, [r5, #8]
 8007c6c:	68eb      	ldr	r3, [r5, #12]
 8007c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c70:	7c2b      	ldrb	r3, [r5, #16]
 8007c72:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 8007c74:	4a5a      	ldr	r2, [pc, #360]	@ (8007de0 <loadMenuTexts+0x113c>)
 8007c76:	4b5b      	ldr	r3, [pc, #364]	@ (8007de4 <loadMenuTexts+0x1140>)
 8007c78:	4614      	mov	r4, r2
 8007c7a:	461d      	mov	r5, r3
 8007c7c:	6828      	ldr	r0, [r5, #0]
 8007c7e:	6869      	ldr	r1, [r5, #4]
 8007c80:	68aa      	ldr	r2, [r5, #8]
 8007c82:	68eb      	ldr	r3, [r5, #12]
 8007c84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c86:	7c2b      	ldrb	r3, [r5, #16]
 8007c88:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 8007c8a:	4a57      	ldr	r2, [pc, #348]	@ (8007de8 <loadMenuTexts+0x1144>)
 8007c8c:	4b57      	ldr	r3, [pc, #348]	@ (8007dec <loadMenuTexts+0x1148>)
 8007c8e:	4614      	mov	r4, r2
 8007c90:	461d      	mov	r5, r3
 8007c92:	6828      	ldr	r0, [r5, #0]
 8007c94:	6869      	ldr	r1, [r5, #4]
 8007c96:	68aa      	ldr	r2, [r5, #8]
 8007c98:	68eb      	ldr	r3, [r5, #12]
 8007c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c9c:	7c2b      	ldrb	r3, [r5, #16]
 8007c9e:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8007ca0:	4a53      	ldr	r2, [pc, #332]	@ (8007df0 <loadMenuTexts+0x114c>)
 8007ca2:	4b54      	ldr	r3, [pc, #336]	@ (8007df4 <loadMenuTexts+0x1150>)
 8007ca4:	4614      	mov	r4, r2
 8007ca6:	461d      	mov	r5, r3
 8007ca8:	6828      	ldr	r0, [r5, #0]
 8007caa:	6869      	ldr	r1, [r5, #4]
 8007cac:	68aa      	ldr	r2, [r5, #8]
 8007cae:	68eb      	ldr	r3, [r5, #12]
 8007cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cb2:	7c2b      	ldrb	r3, [r5, #16]
 8007cb4:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 8007cb6:	4a50      	ldr	r2, [pc, #320]	@ (8007df8 <loadMenuTexts+0x1154>)
 8007cb8:	4b50      	ldr	r3, [pc, #320]	@ (8007dfc <loadMenuTexts+0x1158>)
 8007cba:	4614      	mov	r4, r2
 8007cbc:	461d      	mov	r5, r3
 8007cbe:	6828      	ldr	r0, [r5, #0]
 8007cc0:	6869      	ldr	r1, [r5, #4]
 8007cc2:	68aa      	ldr	r2, [r5, #8]
 8007cc4:	68eb      	ldr	r3, [r5, #12]
 8007cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cc8:	7c2b      	ldrb	r3, [r5, #16]
 8007cca:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 8007ccc:	4a4c      	ldr	r2, [pc, #304]	@ (8007e00 <loadMenuTexts+0x115c>)
 8007cce:	4b4d      	ldr	r3, [pc, #308]	@ (8007e04 <loadMenuTexts+0x1160>)
 8007cd0:	4614      	mov	r4, r2
 8007cd2:	461d      	mov	r5, r3
 8007cd4:	6828      	ldr	r0, [r5, #0]
 8007cd6:	6869      	ldr	r1, [r5, #4]
 8007cd8:	68aa      	ldr	r2, [r5, #8]
 8007cda:	68eb      	ldr	r3, [r5, #12]
 8007cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cde:	7c2b      	ldrb	r3, [r5, #16]
 8007ce0:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 8007ce2:	4a49      	ldr	r2, [pc, #292]	@ (8007e08 <loadMenuTexts+0x1164>)
 8007ce4:	4b49      	ldr	r3, [pc, #292]	@ (8007e0c <loadMenuTexts+0x1168>)
 8007ce6:	4614      	mov	r4, r2
 8007ce8:	461d      	mov	r5, r3
 8007cea:	e091      	b.n	8007e10 <loadMenuTexts+0x116c>
 8007cec:	20000968 	.word	0x20000968
 8007cf0:	200010ec 	.word	0x200010ec
 8007cf4:	2000097c 	.word	0x2000097c
 8007cf8:	20001100 	.word	0x20001100
 8007cfc:	20000990 	.word	0x20000990
 8007d00:	20001114 	.word	0x20001114
 8007d04:	200009a4 	.word	0x200009a4
 8007d08:	20001128 	.word	0x20001128
 8007d0c:	200009b8 	.word	0x200009b8
 8007d10:	2000113c 	.word	0x2000113c
 8007d14:	200009cc 	.word	0x200009cc
 8007d18:	20001150 	.word	0x20001150
 8007d1c:	200009e0 	.word	0x200009e0
 8007d20:	20001164 	.word	0x20001164
 8007d24:	200009f4 	.word	0x200009f4
 8007d28:	20001178 	.word	0x20001178
 8007d2c:	20000a08 	.word	0x20000a08
 8007d30:	2000118c 	.word	0x2000118c
 8007d34:	20000a1c 	.word	0x20000a1c
 8007d38:	200011a0 	.word	0x200011a0
 8007d3c:	20000a30 	.word	0x20000a30
 8007d40:	200011b4 	.word	0x200011b4
 8007d44:	20000a44 	.word	0x20000a44
 8007d48:	200011c8 	.word	0x200011c8
 8007d4c:	20000a58 	.word	0x20000a58
 8007d50:	200011dc 	.word	0x200011dc
 8007d54:	20000a6c 	.word	0x20000a6c
 8007d58:	200011f0 	.word	0x200011f0
 8007d5c:	20000a80 	.word	0x20000a80
 8007d60:	20001204 	.word	0x20001204
 8007d64:	20000a94 	.word	0x20000a94
 8007d68:	20001218 	.word	0x20001218
 8007d6c:	20000aa8 	.word	0x20000aa8
 8007d70:	2000122c 	.word	0x2000122c
 8007d74:	20000abc 	.word	0x20000abc
 8007d78:	20001240 	.word	0x20001240
 8007d7c:	20000ad0 	.word	0x20000ad0
 8007d80:	20001254 	.word	0x20001254
 8007d84:	20000ae4 	.word	0x20000ae4
 8007d88:	20001268 	.word	0x20001268
 8007d8c:	20000af8 	.word	0x20000af8
 8007d90:	2000127c 	.word	0x2000127c
 8007d94:	20000b0c 	.word	0x20000b0c
 8007d98:	20001290 	.word	0x20001290
 8007d9c:	20000b20 	.word	0x20000b20
 8007da0:	200012a4 	.word	0x200012a4
 8007da4:	20000b34 	.word	0x20000b34
 8007da8:	200012b8 	.word	0x200012b8
 8007dac:	20000b48 	.word	0x20000b48
 8007db0:	200012cc 	.word	0x200012cc
 8007db4:	20000b5c 	.word	0x20000b5c
 8007db8:	200012e0 	.word	0x200012e0
 8007dbc:	20000b70 	.word	0x20000b70
 8007dc0:	200012f4 	.word	0x200012f4
 8007dc4:	20000b84 	.word	0x20000b84
 8007dc8:	20001308 	.word	0x20001308
 8007dcc:	20000b98 	.word	0x20000b98
 8007dd0:	2000131c 	.word	0x2000131c
 8007dd4:	20000bac 	.word	0x20000bac
 8007dd8:	20001330 	.word	0x20001330
 8007ddc:	20000bc0 	.word	0x20000bc0
 8007de0:	20001344 	.word	0x20001344
 8007de4:	20000bd4 	.word	0x20000bd4
 8007de8:	20001358 	.word	0x20001358
 8007dec:	20000be8 	.word	0x20000be8
 8007df0:	2000136c 	.word	0x2000136c
 8007df4:	20000bfc 	.word	0x20000bfc
 8007df8:	20001380 	.word	0x20001380
 8007dfc:	20000c24 	.word	0x20000c24
 8007e00:	20001394 	.word	0x20001394
 8007e04:	20000c4c 	.word	0x20000c4c
 8007e08:	200013a8 	.word	0x200013a8
 8007e0c:	20000c74 	.word	0x20000c74
 8007e10:	6828      	ldr	r0, [r5, #0]
 8007e12:	6869      	ldr	r1, [r5, #4]
 8007e14:	68aa      	ldr	r2, [r5, #8]
 8007e16:	68eb      	ldr	r3, [r5, #12]
 8007e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e1a:	7c2b      	ldrb	r3, [r5, #16]
 8007e1c:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 8007e1e:	4a0e      	ldr	r2, [pc, #56]	@ (8007e58 <loadMenuTexts+0x11b4>)
 8007e20:	4b0e      	ldr	r3, [pc, #56]	@ (8007e5c <loadMenuTexts+0x11b8>)
 8007e22:	4614      	mov	r4, r2
 8007e24:	461d      	mov	r5, r3
 8007e26:	6828      	ldr	r0, [r5, #0]
 8007e28:	6869      	ldr	r1, [r5, #4]
 8007e2a:	68aa      	ldr	r2, [r5, #8]
 8007e2c:	68eb      	ldr	r3, [r5, #12]
 8007e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e30:	7c2b      	ldrb	r3, [r5, #16]
 8007e32:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 8007e34:	4a0a      	ldr	r2, [pc, #40]	@ (8007e60 <loadMenuTexts+0x11bc>)
 8007e36:	4b0b      	ldr	r3, [pc, #44]	@ (8007e64 <loadMenuTexts+0x11c0>)
 8007e38:	4614      	mov	r4, r2
 8007e3a:	461d      	mov	r5, r3
 8007e3c:	6828      	ldr	r0, [r5, #0]
 8007e3e:	6869      	ldr	r1, [r5, #4]
 8007e40:	68aa      	ldr	r2, [r5, #8]
 8007e42:	68eb      	ldr	r3, [r5, #12]
 8007e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e46:	7c2b      	ldrb	r3, [r5, #16]
 8007e48:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 8007e4a:	f000 f80d 	bl	8007e68 <menuVariableFinisher>
}
 8007e4e:	bf00      	nop
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bdb0      	pop	{r4, r5, r7, pc}
 8007e56:	bf00      	nop
 8007e58:	200013bc 	.word	0x200013bc
 8007e5c:	20000c9c 	.word	0x20000c9c
 8007e60:	200013d0 	.word	0x200013d0
 8007e64:	20000cc4 	.word	0x20000cc4

08007e68 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8007e68:	b480      	push	{r7}
 8007e6a:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 8007e6c:	4b84      	ldr	r3, [pc, #528]	@ (8008080 <menuVariableFinisher+0x218>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 8007e72:	4b84      	ldr	r3, [pc, #528]	@ (8008084 <menuVariableFinisher+0x21c>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8007e78:	4b83      	ldr	r3, [pc, #524]	@ (8008088 <menuVariableFinisher+0x220>)
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 8007e7e:	4b83      	ldr	r3, [pc, #524]	@ (800808c <menuVariableFinisher+0x224>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 8007e84:	4b82      	ldr	r3, [pc, #520]	@ (8008090 <menuVariableFinisher+0x228>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 8007e8a:	4b82      	ldr	r3, [pc, #520]	@ (8008094 <menuVariableFinisher+0x22c>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 8007e90:	4b81      	ldr	r3, [pc, #516]	@ (8008098 <menuVariableFinisher+0x230>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 8007e96:	4b81      	ldr	r3, [pc, #516]	@ (800809c <menuVariableFinisher+0x234>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8007e9c:	4b80      	ldr	r3, [pc, #512]	@ (80080a0 <menuVariableFinisher+0x238>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 8007ea2:	4b80      	ldr	r3, [pc, #512]	@ (80080a4 <menuVariableFinisher+0x23c>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8007ea8:	4b7f      	ldr	r3, [pc, #508]	@ (80080a8 <menuVariableFinisher+0x240>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 8007eae:	4b7f      	ldr	r3, [pc, #508]	@ (80080ac <menuVariableFinisher+0x244>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8007eb4:	4b7e      	ldr	r3, [pc, #504]	@ (80080b0 <menuVariableFinisher+0x248>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 8007eba:	4b7e      	ldr	r3, [pc, #504]	@ (80080b4 <menuVariableFinisher+0x24c>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 8007ec0:	4b7d      	ldr	r3, [pc, #500]	@ (80080b8 <menuVariableFinisher+0x250>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 8007ec6:	4b7d      	ldr	r3, [pc, #500]	@ (80080bc <menuVariableFinisher+0x254>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8007ecc:	4b7c      	ldr	r3, [pc, #496]	@ (80080c0 <menuVariableFinisher+0x258>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 8007ed2:	4b7c      	ldr	r3, [pc, #496]	@ (80080c4 <menuVariableFinisher+0x25c>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8007ed8:	4b7b      	ldr	r3, [pc, #492]	@ (80080c8 <menuVariableFinisher+0x260>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 8007ede:	4b7b      	ldr	r3, [pc, #492]	@ (80080cc <menuVariableFinisher+0x264>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 8007ee4:	4b7a      	ldr	r3, [pc, #488]	@ (80080d0 <menuVariableFinisher+0x268>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 8007eea:	4b7a      	ldr	r3, [pc, #488]	@ (80080d4 <menuVariableFinisher+0x26c>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 8007ef0:	4b79      	ldr	r3, [pc, #484]	@ (80080d8 <menuVariableFinisher+0x270>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 8007ef6:	4b79      	ldr	r3, [pc, #484]	@ (80080dc <menuVariableFinisher+0x274>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8007efc:	4b78      	ldr	r3, [pc, #480]	@ (80080e0 <menuVariableFinisher+0x278>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 8007f02:	4b78      	ldr	r3, [pc, #480]	@ (80080e4 <menuVariableFinisher+0x27c>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8007f08:	4b77      	ldr	r3, [pc, #476]	@ (80080e8 <menuVariableFinisher+0x280>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 8007f0e:	4b77      	ldr	r3, [pc, #476]	@ (80080ec <menuVariableFinisher+0x284>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 8007f14:	4b76      	ldr	r3, [pc, #472]	@ (80080f0 <menuVariableFinisher+0x288>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 8007f1a:	4b76      	ldr	r3, [pc, #472]	@ (80080f4 <menuVariableFinisher+0x28c>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8007f20:	4b75      	ldr	r3, [pc, #468]	@ (80080f8 <menuVariableFinisher+0x290>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 8007f26:	4b75      	ldr	r3, [pc, #468]	@ (80080fc <menuVariableFinisher+0x294>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 8007f2c:	4b74      	ldr	r3, [pc, #464]	@ (8008100 <menuVariableFinisher+0x298>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 8007f32:	4b74      	ldr	r3, [pc, #464]	@ (8008104 <menuVariableFinisher+0x29c>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8007f38:	4b73      	ldr	r3, [pc, #460]	@ (8008108 <menuVariableFinisher+0x2a0>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 8007f3e:	4b73      	ldr	r3, [pc, #460]	@ (800810c <menuVariableFinisher+0x2a4>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 8007f44:	4b72      	ldr	r3, [pc, #456]	@ (8008110 <menuVariableFinisher+0x2a8>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 8007f4a:	4b72      	ldr	r3, [pc, #456]	@ (8008114 <menuVariableFinisher+0x2ac>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8007f50:	4b71      	ldr	r3, [pc, #452]	@ (8008118 <menuVariableFinisher+0x2b0>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 8007f56:	4b71      	ldr	r3, [pc, #452]	@ (800811c <menuVariableFinisher+0x2b4>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 8007f5c:	4b70      	ldr	r3, [pc, #448]	@ (8008120 <menuVariableFinisher+0x2b8>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 8007f62:	4b70      	ldr	r3, [pc, #448]	@ (8008124 <menuVariableFinisher+0x2bc>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8007f68:	4b6f      	ldr	r3, [pc, #444]	@ (8008128 <menuVariableFinisher+0x2c0>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 8007f6e:	4b6f      	ldr	r3, [pc, #444]	@ (800812c <menuVariableFinisher+0x2c4>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8007f74:	4b6e      	ldr	r3, [pc, #440]	@ (8008130 <menuVariableFinisher+0x2c8>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 8007f7a:	4b6e      	ldr	r3, [pc, #440]	@ (8008134 <menuVariableFinisher+0x2cc>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8007f80:	4b6d      	ldr	r3, [pc, #436]	@ (8008138 <menuVariableFinisher+0x2d0>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 8007f86:	4b6d      	ldr	r3, [pc, #436]	@ (800813c <menuVariableFinisher+0x2d4>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 8007f8c:	4b6c      	ldr	r3, [pc, #432]	@ (8008140 <menuVariableFinisher+0x2d8>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 8007f92:	4b6c      	ldr	r3, [pc, #432]	@ (8008144 <menuVariableFinisher+0x2dc>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8007f98:	4b6b      	ldr	r3, [pc, #428]	@ (8008148 <menuVariableFinisher+0x2e0>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 8007f9e:	4b6b      	ldr	r3, [pc, #428]	@ (800814c <menuVariableFinisher+0x2e4>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8007fa4:	4b6a      	ldr	r3, [pc, #424]	@ (8008150 <menuVariableFinisher+0x2e8>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 8007faa:	4b6a      	ldr	r3, [pc, #424]	@ (8008154 <menuVariableFinisher+0x2ec>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8007fb0:	4b69      	ldr	r3, [pc, #420]	@ (8008158 <menuVariableFinisher+0x2f0>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8007fb6:	4b69      	ldr	r3, [pc, #420]	@ (800815c <menuVariableFinisher+0x2f4>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8007fbc:	4b68      	ldr	r3, [pc, #416]	@ (8008160 <menuVariableFinisher+0x2f8>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 8007fc2:	4b68      	ldr	r3, [pc, #416]	@ (8008164 <menuVariableFinisher+0x2fc>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8007fc8:	4b67      	ldr	r3, [pc, #412]	@ (8008168 <menuVariableFinisher+0x300>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 8007fce:	4b67      	ldr	r3, [pc, #412]	@ (800816c <menuVariableFinisher+0x304>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 8007fd4:	4b66      	ldr	r3, [pc, #408]	@ (8008170 <menuVariableFinisher+0x308>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 8007fda:	4b66      	ldr	r3, [pc, #408]	@ (8008174 <menuVariableFinisher+0x30c>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 8007fe0:	4b65      	ldr	r3, [pc, #404]	@ (8008178 <menuVariableFinisher+0x310>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 8007fe6:	4b65      	ldr	r3, [pc, #404]	@ (800817c <menuVariableFinisher+0x314>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8007fec:	4b64      	ldr	r3, [pc, #400]	@ (8008180 <menuVariableFinisher+0x318>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 8007ff2:	4b64      	ldr	r3, [pc, #400]	@ (8008184 <menuVariableFinisher+0x31c>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8007ff8:	4b63      	ldr	r3, [pc, #396]	@ (8008188 <menuVariableFinisher+0x320>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 8007ffe:	4b63      	ldr	r3, [pc, #396]	@ (800818c <menuVariableFinisher+0x324>)
 8008000:	2200      	movs	r2, #0
 8008002:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 8008004:	4b62      	ldr	r3, [pc, #392]	@ (8008190 <menuVariableFinisher+0x328>)
 8008006:	2200      	movs	r2, #0
 8008008:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 800800a:	4b62      	ldr	r3, [pc, #392]	@ (8008194 <menuVariableFinisher+0x32c>)
 800800c:	2200      	movs	r2, #0
 800800e:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 8008010:	4b61      	ldr	r3, [pc, #388]	@ (8008198 <menuVariableFinisher+0x330>)
 8008012:	2200      	movs	r2, #0
 8008014:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 8008016:	4b61      	ldr	r3, [pc, #388]	@ (800819c <menuVariableFinisher+0x334>)
 8008018:	2200      	movs	r2, #0
 800801a:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 800801c:	4b60      	ldr	r3, [pc, #384]	@ (80081a0 <menuVariableFinisher+0x338>)
 800801e:	2200      	movs	r2, #0
 8008020:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 8008022:	4b60      	ldr	r3, [pc, #384]	@ (80081a4 <menuVariableFinisher+0x33c>)
 8008024:	2200      	movs	r2, #0
 8008026:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8008028:	4b5f      	ldr	r3, [pc, #380]	@ (80081a8 <menuVariableFinisher+0x340>)
 800802a:	2200      	movs	r2, #0
 800802c:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 800802e:	4b5f      	ldr	r3, [pc, #380]	@ (80081ac <menuVariableFinisher+0x344>)
 8008030:	2200      	movs	r2, #0
 8008032:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 8008034:	4b5e      	ldr	r3, [pc, #376]	@ (80081b0 <menuVariableFinisher+0x348>)
 8008036:	2200      	movs	r2, #0
 8008038:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 800803a:	4b5e      	ldr	r3, [pc, #376]	@ (80081b4 <menuVariableFinisher+0x34c>)
 800803c:	2200      	movs	r2, #0
 800803e:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 8008040:	4b5d      	ldr	r3, [pc, #372]	@ (80081b8 <menuVariableFinisher+0x350>)
 8008042:	2200      	movs	r2, #0
 8008044:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 8008046:	4b5d      	ldr	r3, [pc, #372]	@ (80081bc <menuVariableFinisher+0x354>)
 8008048:	2200      	movs	r2, #0
 800804a:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 800804c:	4b5c      	ldr	r3, [pc, #368]	@ (80081c0 <menuVariableFinisher+0x358>)
 800804e:	2200      	movs	r2, #0
 8008050:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 8008052:	4b5c      	ldr	r3, [pc, #368]	@ (80081c4 <menuVariableFinisher+0x35c>)
 8008054:	2200      	movs	r2, #0
 8008056:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8008058:	4b5b      	ldr	r3, [pc, #364]	@ (80081c8 <menuVariableFinisher+0x360>)
 800805a:	2200      	movs	r2, #0
 800805c:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 800805e:	4b5b      	ldr	r3, [pc, #364]	@ (80081cc <menuVariableFinisher+0x364>)
 8008060:	2200      	movs	r2, #0
 8008062:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8008064:	4b5a      	ldr	r3, [pc, #360]	@ (80081d0 <menuVariableFinisher+0x368>)
 8008066:	2200      	movs	r2, #0
 8008068:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 800806a:	4b5a      	ldr	r3, [pc, #360]	@ (80081d4 <menuVariableFinisher+0x36c>)
 800806c:	2200      	movs	r2, #0
 800806e:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8008070:	4b59      	ldr	r3, [pc, #356]	@ (80081d8 <menuVariableFinisher+0x370>)
 8008072:	2200      	movs	r2, #0
 8008074:	741a      	strb	r2, [r3, #16]
}
 8008076:	bf00      	nop
 8008078:	46bd      	mov	sp, r7
 800807a:	bc80      	pop	{r7}
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	20000030 	.word	0x20000030
 8008084:	20000044 	.word	0x20000044
 8008088:	20000058 	.word	0x20000058
 800808c:	2000006c 	.word	0x2000006c
 8008090:	20000080 	.word	0x20000080
 8008094:	20000094 	.word	0x20000094
 8008098:	200000a8 	.word	0x200000a8
 800809c:	200000bc 	.word	0x200000bc
 80080a0:	200000d0 	.word	0x200000d0
 80080a4:	200000e4 	.word	0x200000e4
 80080a8:	200000f8 	.word	0x200000f8
 80080ac:	2000010c 	.word	0x2000010c
 80080b0:	20000e08 	.word	0x20000e08
 80080b4:	20000e1c 	.word	0x20000e1c
 80080b8:	20000e30 	.word	0x20000e30
 80080bc:	20000e44 	.word	0x20000e44
 80080c0:	20000e58 	.word	0x20000e58
 80080c4:	20000e6c 	.word	0x20000e6c
 80080c8:	20000e80 	.word	0x20000e80
 80080cc:	20000e94 	.word	0x20000e94
 80080d0:	20000ea8 	.word	0x20000ea8
 80080d4:	20000ebc 	.word	0x20000ebc
 80080d8:	20000ed0 	.word	0x20000ed0
 80080dc:	20000ee4 	.word	0x20000ee4
 80080e0:	20000ef8 	.word	0x20000ef8
 80080e4:	20000f0c 	.word	0x20000f0c
 80080e8:	20000f20 	.word	0x20000f20
 80080ec:	20000f34 	.word	0x20000f34
 80080f0:	20000f48 	.word	0x20000f48
 80080f4:	20000f5c 	.word	0x20000f5c
 80080f8:	20000f70 	.word	0x20000f70
 80080fc:	20000f84 	.word	0x20000f84
 8008100:	20000f98 	.word	0x20000f98
 8008104:	20000fac 	.word	0x20000fac
 8008108:	20000fc0 	.word	0x20000fc0
 800810c:	20000fd4 	.word	0x20000fd4
 8008110:	20000fe8 	.word	0x20000fe8
 8008114:	20000ffc 	.word	0x20000ffc
 8008118:	20001010 	.word	0x20001010
 800811c:	20001024 	.word	0x20001024
 8008120:	20001038 	.word	0x20001038
 8008124:	2000104c 	.word	0x2000104c
 8008128:	20001060 	.word	0x20001060
 800812c:	20001074 	.word	0x20001074
 8008130:	20001088 	.word	0x20001088
 8008134:	2000109c 	.word	0x2000109c
 8008138:	200010b0 	.word	0x200010b0
 800813c:	200010c4 	.word	0x200010c4
 8008140:	200010d8 	.word	0x200010d8
 8008144:	200010ec 	.word	0x200010ec
 8008148:	20001100 	.word	0x20001100
 800814c:	20001114 	.word	0x20001114
 8008150:	20001128 	.word	0x20001128
 8008154:	2000113c 	.word	0x2000113c
 8008158:	20001150 	.word	0x20001150
 800815c:	20001164 	.word	0x20001164
 8008160:	20001178 	.word	0x20001178
 8008164:	2000118c 	.word	0x2000118c
 8008168:	200011a0 	.word	0x200011a0
 800816c:	200011b4 	.word	0x200011b4
 8008170:	200011c8 	.word	0x200011c8
 8008174:	200011dc 	.word	0x200011dc
 8008178:	200011f0 	.word	0x200011f0
 800817c:	20001204 	.word	0x20001204
 8008180:	20001218 	.word	0x20001218
 8008184:	2000122c 	.word	0x2000122c
 8008188:	20001240 	.word	0x20001240
 800818c:	20001254 	.word	0x20001254
 8008190:	20001268 	.word	0x20001268
 8008194:	2000127c 	.word	0x2000127c
 8008198:	20001290 	.word	0x20001290
 800819c:	200012a4 	.word	0x200012a4
 80081a0:	200012b8 	.word	0x200012b8
 80081a4:	200012cc 	.word	0x200012cc
 80081a8:	200012e0 	.word	0x200012e0
 80081ac:	200012f4 	.word	0x200012f4
 80081b0:	20001308 	.word	0x20001308
 80081b4:	2000131c 	.word	0x2000131c
 80081b8:	20001330 	.word	0x20001330
 80081bc:	20001344 	.word	0x20001344
 80081c0:	20001358 	.word	0x20001358
 80081c4:	2000136c 	.word	0x2000136c
 80081c8:	20001380 	.word	0x20001380
 80081cc:	20001394 	.word	0x20001394
 80081d0:	200013a8 	.word	0x200013a8
 80081d4:	200013bc 	.word	0x200013bc
 80081d8:	200013d0 	.word	0x200013d0

080081dc <resetMenuTexts>:

void resetMenuTexts() {
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
    memset(menuyeGirildiText, 0, 17);
 80081e0:	2211      	movs	r2, #17
 80081e2:	2100      	movs	r1, #0
 80081e4:	48bb      	ldr	r0, [pc, #748]	@ (80084d4 <resetMenuTexts+0x2f8>)
 80081e6:	f004 f873 	bl	800c2d0 <memset>
    memset(ayarlarText, 0, 17);
 80081ea:	2211      	movs	r2, #17
 80081ec:	2100      	movs	r1, #0
 80081ee:	48ba      	ldr	r0, [pc, #744]	@ (80084d8 <resetMenuTexts+0x2fc>)
 80081f0:	f004 f86e 	bl	800c2d0 <memset>
    memset(hataKayitListText, 0, 17);
 80081f4:	2211      	movs	r2, #17
 80081f6:	2100      	movs	r1, #0
 80081f8:	48b8      	ldr	r0, [pc, #736]	@ (80084dc <resetMenuTexts+0x300>)
 80081fa:	f004 f869 	bl	800c2d0 <memset>
    memset(birHataKoduText, 0, 17);
 80081fe:	2211      	movs	r2, #17
 8008200:	2100      	movs	r1, #0
 8008202:	48b7      	ldr	r0, [pc, #732]	@ (80084e0 <resetMenuTexts+0x304>)
 8008204:	f004 f864 	bl	800c2d0 <memset>
    memset(ikiHataKoduText, 0, 17);
 8008208:	2211      	movs	r2, #17
 800820a:	2100      	movs	r1, #0
 800820c:	48b5      	ldr	r0, [pc, #724]	@ (80084e4 <resetMenuTexts+0x308>)
 800820e:	f004 f85f 	bl	800c2d0 <memset>
    memset(ucHataKoduText, 0, 17);
 8008212:	2211      	movs	r2, #17
 8008214:	2100      	movs	r1, #0
 8008216:	48b4      	ldr	r0, [pc, #720]	@ (80084e8 <resetMenuTexts+0x30c>)
 8008218:	f004 f85a 	bl	800c2d0 <memset>
    memset(dortHataKoduText, 0, 17);
 800821c:	2211      	movs	r2, #17
 800821e:	2100      	movs	r1, #0
 8008220:	48b2      	ldr	r0, [pc, #712]	@ (80084ec <resetMenuTexts+0x310>)
 8008222:	f004 f855 	bl	800c2d0 <memset>
    memset(besHataKoduText, 0, 17);
 8008226:	2211      	movs	r2, #17
 8008228:	2100      	movs	r1, #0
 800822a:	48b1      	ldr	r0, [pc, #708]	@ (80084f0 <resetMenuTexts+0x314>)
 800822c:	f004 f850 	bl	800c2d0 <memset>
    memset(altiHataKoduText, 0, 17);
 8008230:	2211      	movs	r2, #17
 8008232:	2100      	movs	r1, #0
 8008234:	48af      	ldr	r0, [pc, #700]	@ (80084f4 <resetMenuTexts+0x318>)
 8008236:	f004 f84b 	bl	800c2d0 <memset>
    memset(yediHataKoduText, 0, 17);
 800823a:	2211      	movs	r2, #17
 800823c:	2100      	movs	r1, #0
 800823e:	48ae      	ldr	r0, [pc, #696]	@ (80084f8 <resetMenuTexts+0x31c>)
 8008240:	f004 f846 	bl	800c2d0 <memset>
    memset(sekizHataKoduText, 0, 17);
 8008244:	2211      	movs	r2, #17
 8008246:	2100      	movs	r1, #0
 8008248:	48ac      	ldr	r0, [pc, #688]	@ (80084fc <resetMenuTexts+0x320>)
 800824a:	f004 f841 	bl	800c2d0 <memset>
    memset(dokuzHataKoduText, 0, 17);
 800824e:	2211      	movs	r2, #17
 8008250:	2100      	movs	r1, #0
 8008252:	48ab      	ldr	r0, [pc, #684]	@ (8008500 <resetMenuTexts+0x324>)
 8008254:	f004 f83c 	bl	800c2d0 <memset>
    memset(onHataKoduText, 0, 17);
 8008258:	2211      	movs	r2, #17
 800825a:	2100      	movs	r1, #0
 800825c:	48a9      	ldr	r0, [pc, #676]	@ (8008504 <resetMenuTexts+0x328>)
 800825e:	f004 f837 	bl	800c2d0 <memset>
    memset(silmekIcinText, 0, 17);
 8008262:	2211      	movs	r2, #17
 8008264:	2100      	movs	r1, #0
 8008266:	48a8      	ldr	r0, [pc, #672]	@ (8008508 <resetMenuTexts+0x32c>)
 8008268:	f004 f832 	bl	800c2d0 <memset>
    memset(calismaSekliText, 0, 17);
 800826c:	2211      	movs	r2, #17
 800826e:	2100      	movs	r1, #0
 8008270:	48a6      	ldr	r0, [pc, #664]	@ (800850c <resetMenuTexts+0x330>)
 8008272:	f004 f82d 	bl	800c2d0 <memset>
    memset(devirmeYuruyusText, 0, 17);
 8008276:	2211      	movs	r2, #17
 8008278:	2100      	movs	r1, #0
 800827a:	48a5      	ldr	r0, [pc, #660]	@ (8008510 <resetMenuTexts+0x334>)
 800827c:	f004 f828 	bl	800c2d0 <memset>
    memset(bastikcaCalisanText, 0, 17);
 8008280:	2211      	movs	r2, #17
 8008282:	2100      	movs	r1, #0
 8008284:	48a3      	ldr	r0, [pc, #652]	@ (8008514 <resetMenuTexts+0x338>)
 8008286:	f004 f823 	bl	800c2d0 <memset>
    memset(basGonderText, 0, 17);
 800828a:	2211      	movs	r2, #17
 800828c:	2100      	movs	r1, #0
 800828e:	48a2      	ldr	r0, [pc, #648]	@ (8008518 <resetMenuTexts+0x33c>)
 8008290:	f004 f81e 	bl	800c2d0 <memset>
    memset(emniyetCercevesiText, 0, 17);
 8008294:	2211      	movs	r2, #17
 8008296:	2100      	movs	r1, #0
 8008298:	48a0      	ldr	r0, [pc, #640]	@ (800851c <resetMenuTexts+0x340>)
 800829a:	f004 f819 	bl	800c2d0 <memset>
    memset(pasifText, 0, 17);
 800829e:	2211      	movs	r2, #17
 80082a0:	2100      	movs	r1, #0
 80082a2:	489f      	ldr	r0, [pc, #636]	@ (8008520 <resetMenuTexts+0x344>)
 80082a4:	f004 f814 	bl	800c2d0 <memset>
    memset(aktifText, 0, 17);
 80082a8:	2211      	movs	r2, #17
 80082aa:	2100      	movs	r1, #0
 80082ac:	489d      	ldr	r0, [pc, #628]	@ (8008524 <resetMenuTexts+0x348>)
 80082ae:	f004 f80f 	bl	800c2d0 <memset>
    memset(yavaslamaLimitText, 0, 17);
 80082b2:	2211      	movs	r2, #17
 80082b4:	2100      	movs	r1, #0
 80082b6:	489c      	ldr	r0, [pc, #624]	@ (8008528 <resetMenuTexts+0x34c>)
 80082b8:	f004 f80a 	bl	800c2d0 <memset>
    memset(altLimitText, 0, 17);
 80082bc:	2211      	movs	r2, #17
 80082be:	2100      	movs	r1, #0
 80082c0:	489a      	ldr	r0, [pc, #616]	@ (800852c <resetMenuTexts+0x350>)
 80082c2:	f004 f805 	bl	800c2d0 <memset>
    memset(basincSalteriText, 0, 17);
 80082c6:	2211      	movs	r2, #17
 80082c8:	2100      	movs	r1, #0
 80082ca:	4899      	ldr	r0, [pc, #612]	@ (8008530 <resetMenuTexts+0x354>)
 80082cc:	f004 f800 	bl	800c2d0 <memset>
    memset(kapiSecimleriText, 0, 17);
 80082d0:	2211      	movs	r2, #17
 80082d2:	2100      	movs	r1, #0
 80082d4:	4897      	ldr	r0, [pc, #604]	@ (8008534 <resetMenuTexts+0x358>)
 80082d6:	f003 fffb 	bl	800c2d0 <memset>
    memset(katKapisiAktifText, 0, 17);
 80082da:	2211      	movs	r2, #17
 80082dc:	2100      	movs	r1, #0
 80082de:	4896      	ldr	r0, [pc, #600]	@ (8008538 <resetMenuTexts+0x35c>)
 80082e0:	f003 fff6 	bl	800c2d0 <memset>
    memset(tablaKapiAktifText, 0, 17);
 80082e4:	2211      	movs	r2, #17
 80082e6:	2100      	movs	r1, #0
 80082e8:	4894      	ldr	r0, [pc, #592]	@ (800853c <resetMenuTexts+0x360>)
 80082ea:	f003 fff1 	bl	800c2d0 <memset>
    memset(katArtiTablaAktifText, 0, 17);
 80082ee:	2211      	movs	r2, #17
 80082f0:	2100      	movs	r1, #0
 80082f2:	4893      	ldr	r0, [pc, #588]	@ (8008540 <resetMenuTexts+0x364>)
 80082f4:	f003 ffec 	bl	800c2d0 <memset>
    memset(kapiAcmaTipiText, 0, 17);
 80082f8:	2211      	movs	r2, #17
 80082fa:	2100      	movs	r1, #0
 80082fc:	4891      	ldr	r0, [pc, #580]	@ (8008544 <resetMenuTexts+0x368>)
 80082fe:	f003 ffe7 	bl	800c2d0 <memset>
    memset(kapiButonuESPText, 0, 17);
 8008302:	2211      	movs	r2, #17
 8008304:	2100      	movs	r1, #0
 8008306:	4890      	ldr	r0, [pc, #576]	@ (8008548 <resetMenuTexts+0x36c>)
 8008308:	f003 ffe2 	bl	800c2d0 <memset>
    memset(katButonuEXTText, 0, 17);
 800830c:	2211      	movs	r2, #17
 800830e:	2100      	movs	r1, #0
 8008310:	488e      	ldr	r0, [pc, #568]	@ (800854c <resetMenuTexts+0x370>)
 8008312:	f003 ffdd 	bl	800c2d0 <memset>
    memset(birKatKapiTipiText, 0, 17);
 8008316:	2211      	movs	r2, #17
 8008318:	2100      	movs	r1, #0
 800831a:	488d      	ldr	r0, [pc, #564]	@ (8008550 <resetMenuTexts+0x374>)
 800831c:	f003 ffd8 	bl	800c2d0 <memset>
    memset(butonKontrolluText, 0, 17);
 8008320:	2211      	movs	r2, #17
 8008322:	2100      	movs	r1, #0
 8008324:	488b      	ldr	r0, [pc, #556]	@ (8008554 <resetMenuTexts+0x378>)
 8008326:	f003 ffd3 	bl	800c2d0 <memset>
    memset(birinciKapiAcSuresiText, 0, 17);
 800832a:	2211      	movs	r2, #17
 800832c:	2100      	movs	r1, #0
 800832e:	488a      	ldr	r0, [pc, #552]	@ (8008558 <resetMenuTexts+0x37c>)
 8008330:	f003 ffce 	bl	800c2d0 <memset>
    memset(kacSaniyeText, 0, 17);
 8008334:	2211      	movs	r2, #17
 8008336:	2100      	movs	r1, #0
 8008338:	4888      	ldr	r0, [pc, #544]	@ (800855c <resetMenuTexts+0x380>)
 800833a:	f003 ffc9 	bl	800c2d0 <memset>
    memset(ikinciKatKapiTipiText, 0, 17);
 800833e:	2211      	movs	r2, #17
 8008340:	2100      	movs	r1, #0
 8008342:	4887      	ldr	r0, [pc, #540]	@ (8008560 <resetMenuTexts+0x384>)
 8008344:	f003 ffc4 	bl	800c2d0 <memset>
    memset(ikinciKapiAcSuresiText, 0, 17);
 8008348:	2211      	movs	r2, #17
 800834a:	2100      	movs	r1, #0
 800834c:	4885      	ldr	r0, [pc, #532]	@ (8008564 <resetMenuTexts+0x388>)
 800834e:	f003 ffbf 	bl	800c2d0 <memset>
    memset(tablaKapiTipiText, 0, 17);
 8008352:	2211      	movs	r2, #17
 8008354:	2100      	movs	r1, #0
 8008356:	4884      	ldr	r0, [pc, #528]	@ (8008568 <resetMenuTexts+0x38c>)
 8008358:	f003 ffba 	bl	800c2d0 <memset>
    memset(tablaKapiAcKonumText, 0, 17);
 800835c:	2211      	movs	r2, #17
 800835e:	2100      	movs	r1, #0
 8008360:	4882      	ldr	r0, [pc, #520]	@ (800856c <resetMenuTexts+0x390>)
 8008362:	f003 ffb5 	bl	800c2d0 <memset>
    memset(birinciKattaAcText, 0, 17);
 8008366:	2211      	movs	r2, #17
 8008368:	2100      	movs	r1, #0
 800836a:	4881      	ldr	r0, [pc, #516]	@ (8008570 <resetMenuTexts+0x394>)
 800836c:	f003 ffb0 	bl	800c2d0 <memset>
    memset(ikinciKattaAcText, 0, 17);
 8008370:	2211      	movs	r2, #17
 8008372:	2100      	movs	r1, #0
 8008374:	487f      	ldr	r0, [pc, #508]	@ (8008574 <resetMenuTexts+0x398>)
 8008376:	f003 ffab 	bl	800c2d0 <memset>
    memset(birVeIkinciKattaAcText, 0, 17);
 800837a:	2211      	movs	r2, #17
 800837c:	2100      	movs	r1, #0
 800837e:	487e      	ldr	r0, [pc, #504]	@ (8008578 <resetMenuTexts+0x39c>)
 8008380:	f003 ffa6 	bl	800c2d0 <memset>
    memset(tablaKapiAcSureText, 0, 17);
 8008384:	2211      	movs	r2, #17
 8008386:	2100      	movs	r1, #0
 8008388:	487c      	ldr	r0, [pc, #496]	@ (800857c <resetMenuTexts+0x3a0>)
 800838a:	f003 ffa1 	bl	800c2d0 <memset>
    memset(yukariYavaslamaLimitiText, 0, 17);
 800838e:	2211      	movs	r2, #17
 8008390:	2100      	movs	r1, #0
 8008392:	487b      	ldr	r0, [pc, #492]	@ (8008580 <resetMenuTexts+0x3a4>)
 8008394:	f003 ff9c 	bl	800c2d0 <memset>
    memset(devirmeYuruyusMenuText, 0, 17);
 8008398:	2211      	movs	r2, #17
 800839a:	2100      	movs	r1, #0
 800839c:	4879      	ldr	r0, [pc, #484]	@ (8008584 <resetMenuTexts+0x3a8>)
 800839e:	f003 ff97 	bl	800c2d0 <memset>
    memset(devirmeAktifText, 0, 17);
 80083a2:	2211      	movs	r2, #17
 80083a4:	2100      	movs	r1, #0
 80083a6:	4878      	ldr	r0, [pc, #480]	@ (8008588 <resetMenuTexts+0x3ac>)
 80083a8:	f003 ff92 	bl	800c2d0 <memset>
    memset(yuruyusAktifText, 0, 17);
 80083ac:	2211      	movs	r2, #17
 80083ae:	2100      	movs	r1, #0
 80083b0:	4876      	ldr	r0, [pc, #472]	@ (800858c <resetMenuTexts+0x3b0>)
 80083b2:	f003 ff8d 	bl	800c2d0 <memset>
    memset(devirmeYukariText, 0, 17);
 80083b6:	2211      	movs	r2, #17
 80083b8:	2100      	movs	r1, #0
 80083ba:	4875      	ldr	r0, [pc, #468]	@ (8008590 <resetMenuTexts+0x3b4>)
 80083bc:	f003 ff88 	bl	800c2d0 <memset>
    memset(yuruyusIleriText, 0, 17);
 80083c0:	2211      	movs	r2, #17
 80083c2:	2100      	movs	r1, #0
 80083c4:	4873      	ldr	r0, [pc, #460]	@ (8008594 <resetMenuTexts+0x3b8>)
 80083c6:	f003 ff83 	bl	800c2d0 <memset>
    memset(devirmeAsagiSivicText, 0, 17);
 80083ca:	2211      	movs	r2, #17
 80083cc:	2100      	movs	r1, #0
 80083ce:	4872      	ldr	r0, [pc, #456]	@ (8008598 <resetMenuTexts+0x3bc>)
 80083d0:	f003 ff7e 	bl	800c2d0 <memset>
    memset(yuruyusGeriSivicText, 0, 17);
 80083d4:	2211      	movs	r2, #17
 80083d6:	2100      	movs	r1, #0
 80083d8:	4870      	ldr	r0, [pc, #448]	@ (800859c <resetMenuTexts+0x3c0>)
 80083da:	f003 ff79 	bl	800c2d0 <memset>
    memset(yuruyusSecildiText, 0, 17);
 80083de:	2211      	movs	r2, #17
 80083e0:	2100      	movs	r1, #0
 80083e2:	486f      	ldr	r0, [pc, #444]	@ (80085a0 <resetMenuTexts+0x3c4>)
 80083e4:	f003 ff74 	bl	800c2d0 <memset>
    memset(devirmeSilindirTipiText, 0, 17);
 80083e8:	2211      	movs	r2, #17
 80083ea:	2100      	movs	r1, #0
 80083ec:	486d      	ldr	r0, [pc, #436]	@ (80085a4 <resetMenuTexts+0x3c8>)
 80083ee:	f003 ff6f 	bl	800c2d0 <memset>
    memset(tekTesirText, 0, 17);
 80083f2:	2211      	movs	r2, #17
 80083f4:	2100      	movs	r1, #0
 80083f6:	486c      	ldr	r0, [pc, #432]	@ (80085a8 <resetMenuTexts+0x3cc>)
 80083f8:	f003 ff6a 	bl	800c2d0 <memset>
    memset(ciftTesirText, 0, 17);
 80083fc:	2211      	movs	r2, #17
 80083fe:	2100      	movs	r1, #0
 8008400:	486a      	ldr	r0, [pc, #424]	@ (80085ac <resetMenuTexts+0x3d0>)
 8008402:	f003 ff65 	bl	800c2d0 <memset>
    memset(platformSilindirTipiText, 0, 17);
 8008406:	2211      	movs	r2, #17
 8008408:	2100      	movs	r1, #0
 800840a:	4869      	ldr	r0, [pc, #420]	@ (80085b0 <resetMenuTexts+0x3d4>)
 800840c:	f003 ff60 	bl	800c2d0 <memset>
    memset(yukariValfSureText, 0, 17);
 8008410:	2211      	movs	r2, #17
 8008412:	2100      	movs	r1, #0
 8008414:	4867      	ldr	r0, [pc, #412]	@ (80085b4 <resetMenuTexts+0x3d8>)
 8008416:	f003 ff5b 	bl	800c2d0 <memset>
    memset(asagiValfSureText, 0, 17);
 800841a:	2211      	movs	r2, #17
 800841c:	2100      	movs	r1, #0
 800841e:	4866      	ldr	r0, [pc, #408]	@ (80085b8 <resetMenuTexts+0x3dc>)
 8008420:	f003 ff56 	bl	800c2d0 <memset>
    memset(devirmeYukariValfSureText, 0, 17);
 8008424:	2211      	movs	r2, #17
 8008426:	2100      	movs	r1, #0
 8008428:	4864      	ldr	r0, [pc, #400]	@ (80085bc <resetMenuTexts+0x3e0>)
 800842a:	f003 ff51 	bl	800c2d0 <memset>
    memset(ileriValfSureText, 0, 17);
 800842e:	2211      	movs	r2, #17
 8008430:	2100      	movs	r1, #0
 8008432:	4863      	ldr	r0, [pc, #396]	@ (80085c0 <resetMenuTexts+0x3e4>)
 8008434:	f003 ff4c 	bl	800c2d0 <memset>
    memset(devirmeAsagiValfSureText, 0, 17);
 8008438:	2211      	movs	r2, #17
 800843a:	2100      	movs	r1, #0
 800843c:	4861      	ldr	r0, [pc, #388]	@ (80085c4 <resetMenuTexts+0x3e8>)
 800843e:	f003 ff47 	bl	800c2d0 <memset>
    memset(geriValfSureText, 0, 17);
 8008442:	2211      	movs	r2, #17
 8008444:	2100      	movs	r1, #0
 8008446:	4860      	ldr	r0, [pc, #384]	@ (80085c8 <resetMenuTexts+0x3ec>)
 8008448:	f003 ff42 	bl	800c2d0 <memset>
    memset(calismaSuresiText, 0, 17);
 800844c:	2211      	movs	r2, #17
 800844e:	2100      	movs	r1, #0
 8008450:	485e      	ldr	r0, [pc, #376]	@ (80085cc <resetMenuTexts+0x3f0>)
 8008452:	f003 ff3d 	bl	800c2d0 <memset>
    memset(calismaSayisiText, 0, 17);
 8008456:	2211      	movs	r2, #17
 8008458:	2100      	movs	r1, #0
 800845a:	485d      	ldr	r0, [pc, #372]	@ (80085d0 <resetMenuTexts+0x3f4>)
 800845c:	f003 ff38 	bl	800c2d0 <memset>
    memset(enterlaSifirlaText, 0, 17);
 8008460:	2211      	movs	r2, #17
 8008462:	2100      	movs	r1, #0
 8008464:	485b      	ldr	r0, [pc, #364]	@ (80085d4 <resetMenuTexts+0x3f8>)
 8008466:	f003 ff33 	bl	800c2d0 <memset>
    memset(dilSecimText, 0, 17);
 800846a:	2211      	movs	r2, #17
 800846c:	2100      	movs	r1, #0
 800846e:	485a      	ldr	r0, [pc, #360]	@ (80085d8 <resetMenuTexts+0x3fc>)
 8008470:	f003 ff2e 	bl	800c2d0 <memset>
    memset(secilenDilText, 0, 17);
 8008474:	2211      	movs	r2, #17
 8008476:	2100      	movs	r1, #0
 8008478:	4858      	ldr	r0, [pc, #352]	@ (80085dc <resetMenuTexts+0x400>)
 800847a:	f003 ff29 	bl	800c2d0 <memset>
    memset(menudenCikisText, 0, 17);
 800847e:	2211      	movs	r2, #17
 8008480:	2100      	movs	r1, #0
 8008482:	4857      	ldr	r0, [pc, #348]	@ (80085e0 <resetMenuTexts+0x404>)
 8008484:	f003 ff24 	bl	800c2d0 <memset>
    memset(enteraBasinizText, 0, 17);
 8008488:	2211      	movs	r2, #17
 800848a:	2100      	movs	r1, #0
 800848c:	4855      	ldr	r0, [pc, #340]	@ (80085e4 <resetMenuTexts+0x408>)
 800848e:	f003 ff1f 	bl	800c2d0 <memset>
    memset(hataKoduText, 0, 17);
 8008492:	2211      	movs	r2, #17
 8008494:	2100      	movs	r1, #0
 8008496:	4854      	ldr	r0, [pc, #336]	@ (80085e8 <resetMenuTexts+0x40c>)
 8008498:	f003 ff1a 	bl	800c2d0 <memset>
    memset(dataYazildiText, 0, 17);
 800849c:	2211      	movs	r2, #17
 800849e:	2100      	movs	r1, #0
 80084a0:	4852      	ldr	r0, [pc, #328]	@ (80085ec <resetMenuTexts+0x410>)
 80084a2:	f003 ff15 	bl	800c2d0 <memset>
    memset(dataOkunuyorText, 0, 17);
 80084a6:	2211      	movs	r2, #17
 80084a8:	2100      	movs	r1, #0
 80084aa:	4851      	ldr	r0, [pc, #324]	@ (80085f0 <resetMenuTexts+0x414>)
 80084ac:	f003 ff10 	bl	800c2d0 <memset>
    memset(dataOkunduText, 0, 17);
 80084b0:	2211      	movs	r2, #17
 80084b2:	2100      	movs	r1, #0
 80084b4:	484f      	ldr	r0, [pc, #316]	@ (80085f4 <resetMenuTexts+0x418>)
 80084b6:	f003 ff0b 	bl	800c2d0 <memset>
    memset(degerKaydedildiText, 0, 17);
 80084ba:	2211      	movs	r2, #17
 80084bc:	2100      	movs	r1, #0
 80084be:	484e      	ldr	r0, [pc, #312]	@ (80085f8 <resetMenuTexts+0x41c>)
 80084c0:	f003 ff06 	bl	800c2d0 <memset>
    memset(errorCodeText, 0, 17);
 80084c4:	2211      	movs	r2, #17
 80084c6:	2100      	movs	r1, #0
 80084c8:	484c      	ldr	r0, [pc, #304]	@ (80085fc <resetMenuTexts+0x420>)
 80084ca:	f003 ff01 	bl	800c2d0 <memset>
}
 80084ce:	bf00      	nop
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20000e08 	.word	0x20000e08
 80084d8:	20000e1c 	.word	0x20000e1c
 80084dc:	20000e30 	.word	0x20000e30
 80084e0:	20000e44 	.word	0x20000e44
 80084e4:	20000e58 	.word	0x20000e58
 80084e8:	20000e6c 	.word	0x20000e6c
 80084ec:	20000e80 	.word	0x20000e80
 80084f0:	20000e94 	.word	0x20000e94
 80084f4:	20000ea8 	.word	0x20000ea8
 80084f8:	20000ebc 	.word	0x20000ebc
 80084fc:	20000ed0 	.word	0x20000ed0
 8008500:	20000ee4 	.word	0x20000ee4
 8008504:	20000ef8 	.word	0x20000ef8
 8008508:	20000f0c 	.word	0x20000f0c
 800850c:	20000f20 	.word	0x20000f20
 8008510:	20000f34 	.word	0x20000f34
 8008514:	20000f48 	.word	0x20000f48
 8008518:	20000f5c 	.word	0x20000f5c
 800851c:	20000f70 	.word	0x20000f70
 8008520:	20000f84 	.word	0x20000f84
 8008524:	20000f98 	.word	0x20000f98
 8008528:	20000fac 	.word	0x20000fac
 800852c:	20000fc0 	.word	0x20000fc0
 8008530:	20000fd4 	.word	0x20000fd4
 8008534:	20000fe8 	.word	0x20000fe8
 8008538:	20000ffc 	.word	0x20000ffc
 800853c:	20001010 	.word	0x20001010
 8008540:	20001024 	.word	0x20001024
 8008544:	20001038 	.word	0x20001038
 8008548:	2000104c 	.word	0x2000104c
 800854c:	20001060 	.word	0x20001060
 8008550:	20001074 	.word	0x20001074
 8008554:	20001088 	.word	0x20001088
 8008558:	2000109c 	.word	0x2000109c
 800855c:	200010b0 	.word	0x200010b0
 8008560:	200010c4 	.word	0x200010c4
 8008564:	200010d8 	.word	0x200010d8
 8008568:	200010ec 	.word	0x200010ec
 800856c:	20001100 	.word	0x20001100
 8008570:	20001114 	.word	0x20001114
 8008574:	20001128 	.word	0x20001128
 8008578:	2000113c 	.word	0x2000113c
 800857c:	20001150 	.word	0x20001150
 8008580:	20001164 	.word	0x20001164
 8008584:	20001178 	.word	0x20001178
 8008588:	2000118c 	.word	0x2000118c
 800858c:	200011a0 	.word	0x200011a0
 8008590:	200011b4 	.word	0x200011b4
 8008594:	200011c8 	.word	0x200011c8
 8008598:	200011dc 	.word	0x200011dc
 800859c:	200011f0 	.word	0x200011f0
 80085a0:	20001204 	.word	0x20001204
 80085a4:	20001218 	.word	0x20001218
 80085a8:	2000122c 	.word	0x2000122c
 80085ac:	20001240 	.word	0x20001240
 80085b0:	20001254 	.word	0x20001254
 80085b4:	20001268 	.word	0x20001268
 80085b8:	2000127c 	.word	0x2000127c
 80085bc:	20001290 	.word	0x20001290
 80085c0:	200012a4 	.word	0x200012a4
 80085c4:	200012b8 	.word	0x200012b8
 80085c8:	200012cc 	.word	0x200012cc
 80085cc:	200012e0 	.word	0x200012e0
 80085d0:	200012f4 	.word	0x200012f4
 80085d4:	20001308 	.word	0x20001308
 80085d8:	2000131c 	.word	0x2000131c
 80085dc:	20001330 	.word	0x20001330
 80085e0:	20001344 	.word	0x20001344
 80085e4:	20001358 	.word	0x20001358
 80085e8:	2000136c 	.word	0x2000136c
 80085ec:	20001380 	.word	0x20001380
 80085f0:	20001394 	.word	0x20001394
 80085f4:	200013a8 	.word	0x200013a8
 80085f8:	200013bc 	.word	0x200013bc
 80085fc:	200013d0 	.word	0x200013d0

08008600 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af02      	add	r7, sp, #8
 8008606:	4603      	mov	r3, r0
 8008608:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	f023 030f 	bic.w	r3, r3, #15
 8008610:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8008612:	79fb      	ldrb	r3, [r7, #7]
 8008614:	011b      	lsls	r3, r3, #4
 8008616:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8008618:	7b7b      	ldrb	r3, [r7, #13]
 800861a:	f043 030c 	orr.w	r3, r3, #12
 800861e:	b2db      	uxtb	r3, r3
 8008620:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8008622:	7b7b      	ldrb	r3, [r7, #13]
 8008624:	f043 0308 	orr.w	r3, r3, #8
 8008628:	b2db      	uxtb	r3, r3
 800862a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800862c:	7b3b      	ldrb	r3, [r7, #12]
 800862e:	f043 030c 	orr.w	r3, r3, #12
 8008632:	b2db      	uxtb	r3, r3
 8008634:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8008636:	7b3b      	ldrb	r3, [r7, #12]
 8008638:	f043 0308 	orr.w	r3, r3, #8
 800863c:	b2db      	uxtb	r3, r3
 800863e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008640:	bf00      	nop
 8008642:	4825      	ldr	r0, [pc, #148]	@ (80086d8 <lcd_send_cmd+0xd8>)
 8008644:	f002 f887 	bl	800a756 <HAL_I2C_GetError>
 8008648:	4603      	mov	r3, r0
 800864a:	2b04      	cmp	r3, #4
 800864c:	d0f9      	beq.n	8008642 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800864e:	bf00      	nop
 8008650:	4821      	ldr	r0, [pc, #132]	@ (80086d8 <lcd_send_cmd+0xd8>)
 8008652:	f002 f873 	bl	800a73c <HAL_I2C_GetState>
 8008656:	4603      	mov	r3, r0
 8008658:	2b20      	cmp	r3, #32
 800865a:	d1f9      	bne.n	8008650 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 800865c:	4b1f      	ldr	r3, [pc, #124]	@ (80086dc <lcd_send_cmd+0xdc>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d116      	bne.n	8008692 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008664:	2300      	movs	r3, #0
 8008666:	73fb      	strb	r3, [r7, #15]
 8008668:	e00f      	b.n	800868a <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800866a:	7bfb      	ldrb	r3, [r7, #15]
 800866c:	3310      	adds	r3, #16
 800866e:	443b      	add	r3, r7
 8008670:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	f022 0208 	bic.w	r2, r2, #8
 800867a:	b2d2      	uxtb	r2, r2
 800867c:	3310      	adds	r3, #16
 800867e:	443b      	add	r3, r7
 8008680:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008684:	7bfb      	ldrb	r3, [r7, #15]
 8008686:	3301      	adds	r3, #1
 8008688:	73fb      	strb	r3, [r7, #15]
 800868a:	7bfb      	ldrb	r3, [r7, #15]
 800868c:	2b03      	cmp	r3, #3
 800868e:	d9ec      	bls.n	800866a <lcd_send_cmd+0x6a>
 8008690:	e015      	b.n	80086be <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008692:	2300      	movs	r3, #0
 8008694:	73bb      	strb	r3, [r7, #14]
 8008696:	e00f      	b.n	80086b8 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008698:	7bbb      	ldrb	r3, [r7, #14]
 800869a:	3310      	adds	r3, #16
 800869c:	443b      	add	r3, r7
 800869e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
 80086a4:	f042 0208 	orr.w	r2, r2, #8
 80086a8:	b2d2      	uxtb	r2, r2
 80086aa:	3310      	adds	r3, #16
 80086ac:	443b      	add	r3, r7
 80086ae:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80086b2:	7bbb      	ldrb	r3, [r7, #14]
 80086b4:	3301      	adds	r3, #1
 80086b6:	73bb      	strb	r3, [r7, #14]
 80086b8:	7bbb      	ldrb	r3, [r7, #14]
 80086ba:	2b03      	cmp	r3, #3
 80086bc:	d9ec      	bls.n	8008698 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80086be:	f107 0208 	add.w	r2, r7, #8
 80086c2:	2364      	movs	r3, #100	@ 0x64
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	2304      	movs	r3, #4
 80086c8:	214e      	movs	r1, #78	@ 0x4e
 80086ca:	4803      	ldr	r0, [pc, #12]	@ (80086d8 <lcd_send_cmd+0xd8>)
 80086cc:	f001 fbd6 	bl	8009e7c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80086d0:	bf00      	nop
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	2000140c 	.word	0x2000140c
 80086dc:	200013e1 	.word	0x200013e1

080086e0 <lcd_send_data>:

void lcd_send_data (char data) {
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af02      	add	r7, sp, #8
 80086e6:	4603      	mov	r3, r0
 80086e8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80086ea:	79fb      	ldrb	r3, [r7, #7]
 80086ec:	f023 030f 	bic.w	r3, r3, #15
 80086f0:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	011b      	lsls	r3, r3, #4
 80086f6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80086f8:	7b7b      	ldrb	r3, [r7, #13]
 80086fa:	f043 030d 	orr.w	r3, r3, #13
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8008702:	7b7b      	ldrb	r3, [r7, #13]
 8008704:	f043 0309 	orr.w	r3, r3, #9
 8008708:	b2db      	uxtb	r3, r3
 800870a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800870c:	7b3b      	ldrb	r3, [r7, #12]
 800870e:	f043 030d 	orr.w	r3, r3, #13
 8008712:	b2db      	uxtb	r3, r3
 8008714:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8008716:	7b3b      	ldrb	r3, [r7, #12]
 8008718:	f043 0309 	orr.w	r3, r3, #9
 800871c:	b2db      	uxtb	r3, r3
 800871e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008720:	bf00      	nop
 8008722:	4825      	ldr	r0, [pc, #148]	@ (80087b8 <lcd_send_data+0xd8>)
 8008724:	f002 f817 	bl	800a756 <HAL_I2C_GetError>
 8008728:	4603      	mov	r3, r0
 800872a:	2b04      	cmp	r3, #4
 800872c:	d0f9      	beq.n	8008722 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800872e:	bf00      	nop
 8008730:	4821      	ldr	r0, [pc, #132]	@ (80087b8 <lcd_send_data+0xd8>)
 8008732:	f002 f803 	bl	800a73c <HAL_I2C_GetState>
 8008736:	4603      	mov	r3, r0
 8008738:	2b20      	cmp	r3, #32
 800873a:	d1f9      	bne.n	8008730 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 800873c:	4b1f      	ldr	r3, [pc, #124]	@ (80087bc <lcd_send_data+0xdc>)
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d116      	bne.n	8008772 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]
 8008748:	e00f      	b.n	800876a <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800874a:	7bfb      	ldrb	r3, [r7, #15]
 800874c:	3310      	adds	r3, #16
 800874e:	443b      	add	r3, r7
 8008750:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008754:	7bfb      	ldrb	r3, [r7, #15]
 8008756:	f022 0208 	bic.w	r2, r2, #8
 800875a:	b2d2      	uxtb	r2, r2
 800875c:	3310      	adds	r3, #16
 800875e:	443b      	add	r3, r7
 8008760:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	3301      	adds	r3, #1
 8008768:	73fb      	strb	r3, [r7, #15]
 800876a:	7bfb      	ldrb	r3, [r7, #15]
 800876c:	2b03      	cmp	r3, #3
 800876e:	d9ec      	bls.n	800874a <lcd_send_data+0x6a>
 8008770:	e015      	b.n	800879e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008772:	2300      	movs	r3, #0
 8008774:	73bb      	strb	r3, [r7, #14]
 8008776:	e00f      	b.n	8008798 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8008778:	7bbb      	ldrb	r3, [r7, #14]
 800877a:	3310      	adds	r3, #16
 800877c:	443b      	add	r3, r7
 800877e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008782:	7bbb      	ldrb	r3, [r7, #14]
 8008784:	f042 0208 	orr.w	r2, r2, #8
 8008788:	b2d2      	uxtb	r2, r2
 800878a:	3310      	adds	r3, #16
 800878c:	443b      	add	r3, r7
 800878e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	3301      	adds	r3, #1
 8008796:	73bb      	strb	r3, [r7, #14]
 8008798:	7bbb      	ldrb	r3, [r7, #14]
 800879a:	2b03      	cmp	r3, #3
 800879c:	d9ec      	bls.n	8008778 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800879e:	f107 0208 	add.w	r2, r7, #8
 80087a2:	2364      	movs	r3, #100	@ 0x64
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	2304      	movs	r3, #4
 80087a8:	214e      	movs	r1, #78	@ 0x4e
 80087aa:	4803      	ldr	r0, [pc, #12]	@ (80087b8 <lcd_send_data+0xd8>)
 80087ac:	f001 fb66 	bl	8009e7c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80087b0:	bf00      	nop
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	2000140c 	.word	0x2000140c
 80087bc:	200013e1 	.word	0x200013e1

080087c0 <lcd_send_string>:

void lcd_send_string (char *str) {
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
	while (*str) {
 80087c8:	e006      	b.n	80087d8 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	1c5a      	adds	r2, r3, #1
 80087ce:	607a      	str	r2, [r7, #4]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff ff84 	bl	80086e0 <lcd_send_data>
	while (*str) {
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1f4      	bne.n	80087ca <lcd_send_string+0xa>
	}
}
 80087e0:	bf00      	nop
 80087e2:	bf00      	nop
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <lcd_init>:

void lcd_init (void) {
 80087ea:	b580      	push	{r7, lr}
 80087ec:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80087ee:	2002      	movs	r0, #2
 80087f0:	f7ff ff06 	bl	8008600 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80087f4:	2028      	movs	r0, #40	@ 0x28
 80087f6:	f7ff ff03 	bl	8008600 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80087fa:	200c      	movs	r0, #12
 80087fc:	f7ff ff00 	bl	8008600 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8008800:	2080      	movs	r0, #128	@ 0x80
 8008802:	f7ff fefd 	bl	8008600 <lcd_send_cmd>
	lcd_backlight(1);
 8008806:	2001      	movs	r0, #1
 8008808:	f000 f840 	bl	800888c <lcd_backlight>
}
 800880c:	bf00      	nop
 800880e:	bd80      	pop	{r7, pc}

08008810 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	460a      	mov	r2, r1
 800881a:	71fb      	strb	r3, [r7, #7]
 800881c:	4613      	mov	r3, r2
 800881e:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8008820:	79fb      	ldrb	r3, [r7, #7]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d106      	bne.n	8008834 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8008826:	79bb      	ldrb	r3, [r7, #6]
 8008828:	337f      	adds	r3, #127	@ 0x7f
 800882a:	b2db      	uxtb	r3, r3
 800882c:	4618      	mov	r0, r3
 800882e:	f7ff fee7 	bl	8008600 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8008832:	e008      	b.n	8008846 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	2b02      	cmp	r3, #2
 8008838:	d105      	bne.n	8008846 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 800883a:	79bb      	ldrb	r3, [r7, #6]
 800883c:	3b41      	subs	r3, #65	@ 0x41
 800883e:	b2db      	uxtb	r3, r3
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff fedd 	bl	8008600 <lcd_send_cmd>
}
 8008846:	bf00      	nop
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	4603      	mov	r3, r0
 8008856:	603a      	str	r2, [r7, #0]
 8008858:	71fb      	strb	r3, [r7, #7]
 800885a:	460b      	mov	r3, r1
 800885c:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 800885e:	79ba      	ldrb	r2, [r7, #6]
 8008860:	79fb      	ldrb	r3, [r7, #7]
 8008862:	4611      	mov	r1, r2
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff ffd3 	bl	8008810 <lcd_gotoxy>
	lcd_send_string(str);
 800886a:	6838      	ldr	r0, [r7, #0]
 800886c:	f7ff ffa8 	bl	80087c0 <lcd_send_string>
}
 8008870:	bf00      	nop
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <lcd_clear>:

void lcd_clear(void) {
 8008878:	b580      	push	{r7, lr}
 800887a:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 800887c:	2001      	movs	r0, #1
 800887e:	f7ff febf 	bl	8008600 <lcd_send_cmd>
    HAL_Delay(2);
 8008882:	2002      	movs	r0, #2
 8008884:	f000 fcb0 	bl	80091e8 <HAL_Delay>

}
 8008888:	bf00      	nop
 800888a:	bd80      	pop	{r7, pc}

0800888c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	4603      	mov	r3, r0
 8008894:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8008896:	4a05      	ldr	r2, [pc, #20]	@ (80088ac <lcd_backlight+0x20>)
 8008898:	79fb      	ldrb	r3, [r7, #7]
 800889a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800889c:	2000      	movs	r0, #0
 800889e:	f7ff feaf 	bl	8008600 <lcd_send_cmd>
}
 80088a2:	bf00      	nop
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	200013e1 	.word	0x200013e1

080088b0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80088b8:	4b04      	ldr	r3, [pc, #16]	@ (80088cc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3301      	adds	r3, #1
 80088be:	4a03      	ldr	r2, [pc, #12]	@ (80088cc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80088c0:	6013      	str	r3, [r2, #0]
}
 80088c2:	bf00      	nop
 80088c4:	370c      	adds	r7, #12
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bc80      	pop	{r7}
 80088ca:	4770      	bx	lr
 80088cc:	20000d78 	.word	0x20000d78

080088d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80088d4:	f000 fc26 	bl	8009124 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 80088d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80088dc:	f000 fc84 	bl	80091e8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80088e0:	f000 f89a 	bl	8008a18 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80088e4:	f000 f9bc 	bl	8008c60 <MX_GPIO_Init>
  MX_CAN_Init();
 80088e8:	f000 f8dc 	bl	8008aa4 <MX_CAN_Init>
  MX_I2C1_Init();
 80088ec:	f000 f90e 	bl	8008b0c <MX_I2C1_Init>
  MX_TIM1_Init();
 80088f0:	f000 f93a 	bl	8008b68 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80088f4:	f000 f98a 	bl	8008c0c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80088f8:	2201      	movs	r2, #1
 80088fa:	2140      	movs	r1, #64	@ 0x40
 80088fc:	483d      	ldr	r0, [pc, #244]	@ (80089f4 <main+0x124>)
 80088fe:	f001 f918 	bl	8009b32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008902:	2201      	movs	r2, #1
 8008904:	2180      	movs	r1, #128	@ 0x80
 8008906:	483b      	ldr	r0, [pc, #236]	@ (80089f4 <main+0x124>)
 8008908:	f001 f913 	bl	8009b32 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800890c:	200a      	movs	r0, #10
 800890e:	f000 fc6b 	bl	80091e8 <HAL_Delay>
  lcd_init();
 8008912:	f7ff ff6a 	bl	80087ea <lcd_init>
  HAL_Delay(10);
 8008916:	200a      	movs	r0, #10
 8008918:	f000 fc66 	bl	80091e8 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 800891c:	4836      	ldr	r0, [pc, #216]	@ (80089f8 <main+0x128>)
 800891e:	f002 ffbb 	bl	800b898 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008922:	bf00      	nop
 8008924:	4835      	ldr	r0, [pc, #212]	@ (80089fc <main+0x12c>)
 8008926:	f001 ff16 	bl	800a756 <HAL_I2C_GetError>
 800892a:	4603      	mov	r3, r0
 800892c:	2b04      	cmp	r3, #4
 800892e:	d0f9      	beq.n	8008924 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008930:	bf00      	nop
 8008932:	4832      	ldr	r0, [pc, #200]	@ (80089fc <main+0x12c>)
 8008934:	f001 ff02 	bl	800a73c <HAL_I2C_GetState>
 8008938:	4603      	mov	r3, r0
 800893a:	2b20      	cmp	r3, #32
 800893c:	d1f9      	bne.n	8008932 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800893e:	2200      	movs	r2, #0
 8008940:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008944:	482b      	ldr	r0, [pc, #172]	@ (80089f4 <main+0x124>)
 8008946:	f001 f8f4 	bl	8009b32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800894a:	2200      	movs	r2, #0
 800894c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008950:	4828      	ldr	r0, [pc, #160]	@ (80089f4 <main+0x124>)
 8008952:	f001 f8ee 	bl	8009b32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008956:	2200      	movs	r2, #0
 8008958:	2104      	movs	r1, #4
 800895a:	4826      	ldr	r0, [pc, #152]	@ (80089f4 <main+0x124>)
 800895c:	f001 f8e9 	bl	8009b32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008960:	2200      	movs	r2, #0
 8008962:	2102      	movs	r1, #2
 8008964:	4823      	ldr	r0, [pc, #140]	@ (80089f4 <main+0x124>)
 8008966:	f001 f8e4 	bl	8009b32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800896a:	2200      	movs	r2, #0
 800896c:	2101      	movs	r1, #1
 800896e:	4821      	ldr	r0, [pc, #132]	@ (80089f4 <main+0x124>)
 8008970:	f001 f8df 	bl	8009b32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008974:	2200      	movs	r2, #0
 8008976:	2120      	movs	r1, #32
 8008978:	4821      	ldr	r0, [pc, #132]	@ (8008a00 <main+0x130>)
 800897a:	f001 f8da 	bl	8009b32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800897e:	2200      	movs	r2, #0
 8008980:	2110      	movs	r1, #16
 8008982:	481f      	ldr	r0, [pc, #124]	@ (8008a00 <main+0x130>)
 8008984:	f001 f8d5 	bl	8009b32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008988:	2200      	movs	r2, #0
 800898a:	2180      	movs	r1, #128	@ 0x80
 800898c:	481d      	ldr	r0, [pc, #116]	@ (8008a04 <main+0x134>)
 800898e:	f001 f8d0 	bl	8009b32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008992:	2200      	movs	r2, #0
 8008994:	2140      	movs	r1, #64	@ 0x40
 8008996:	481b      	ldr	r0, [pc, #108]	@ (8008a04 <main+0x134>)
 8008998:	f001 f8cb 	bl	8009b32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800899c:	2200      	movs	r2, #0
 800899e:	2120      	movs	r1, #32
 80089a0:	4818      	ldr	r0, [pc, #96]	@ (8008a04 <main+0x134>)
 80089a2:	f001 f8c6 	bl	8009b32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80089a6:	2200      	movs	r2, #0
 80089a8:	2110      	movs	r1, #16
 80089aa:	4816      	ldr	r0, [pc, #88]	@ (8008a04 <main+0x134>)
 80089ac:	f001 f8c1 	bl	8009b32 <HAL_GPIO_WritePin>

  i2cTest();
 80089b0:	f7f8 f806 	bl	80009c0 <i2cTest>
  HAL_Delay(100);
 80089b4:	2064      	movs	r0, #100	@ 0x64
 80089b6:	f000 fc17 	bl	80091e8 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 80089ba:	4a13      	ldr	r2, [pc, #76]	@ (8008a08 <main+0x138>)
 80089bc:	2101      	movs	r1, #1
 80089be:	2001      	movs	r0, #1
 80089c0:	f7ff ff45 	bl	800884e <lcd_print>
  lcd_print(2, 1, splashText2GN);
 80089c4:	4a11      	ldr	r2, [pc, #68]	@ (8008a0c <main+0x13c>)
 80089c6:	2101      	movs	r1, #1
 80089c8:	2002      	movs	r0, #2
 80089ca:	f7ff ff40 	bl	800884e <lcd_print>
  HAL_Delay(1000);
 80089ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80089d2:	f000 fc09 	bl	80091e8 <HAL_Delay>
  lcd_clear();
 80089d6:	f7ff ff4f 	bl	8008878 <lcd_clear>

  eepromKontrol();
 80089da:	f7f7 fc2b 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 80089de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80089e2:	f000 fc01 	bl	80091e8 <HAL_Delay>

  backLightTimer = millis;
 80089e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008a10 <main+0x140>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008a14 <main+0x144>)
 80089ec:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80089ee:	f7fe f80f 	bl	8006a10 <mainLoop>
 80089f2:	e7fc      	b.n	80089ee <main+0x11e>
 80089f4:	40010c00 	.word	0x40010c00
 80089f8:	20001460 	.word	0x20001460
 80089fc:	2000140c 	.word	0x2000140c
 8008a00:	40011000 	.word	0x40011000
 8008a04:	40010800 	.word	0x40010800
 8008a08:	20000030 	.word	0x20000030
 8008a0c:	20000044 	.word	0x20000044
 8008a10:	20000d78 	.word	0x20000d78
 8008a14:	20000d94 	.word	0x20000d94

08008a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b090      	sub	sp, #64	@ 0x40
 8008a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008a1e:	f107 0318 	add.w	r3, r7, #24
 8008a22:	2228      	movs	r2, #40	@ 0x28
 8008a24:	2100      	movs	r1, #0
 8008a26:	4618      	mov	r0, r3
 8008a28:	f003 fc52 	bl	800c2d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008a2c:	1d3b      	adds	r3, r7, #4
 8008a2e:	2200      	movs	r2, #0
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	605a      	str	r2, [r3, #4]
 8008a34:	609a      	str	r2, [r3, #8]
 8008a36:	60da      	str	r2, [r3, #12]
 8008a38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008a3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008a42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008a44:	2300      	movs	r3, #0
 8008a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008a50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008a54:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008a56:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8008a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008a5c:	f107 0318 	add.w	r3, r7, #24
 8008a60:	4618      	mov	r0, r3
 8008a62:	f002 fab9 	bl	800afd8 <HAL_RCC_OscConfig>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d001      	beq.n	8008a70 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008a6c:	f000 f9a2 	bl	8008db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008a70:	230f      	movs	r3, #15
 8008a72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008a74:	2302      	movs	r3, #2
 8008a76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008a7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008a82:	2300      	movs	r3, #0
 8008a84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008a86:	1d3b      	adds	r3, r7, #4
 8008a88:	2102      	movs	r1, #2
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f002 fd26 	bl	800b4dc <HAL_RCC_ClockConfig>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008a96:	f000 f98d 	bl	8008db4 <Error_Handler>
  }
}
 8008a9a:	bf00      	nop
 8008a9c:	3740      	adds	r7, #64	@ 0x40
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
	...

08008aa4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008aa8:	4b16      	ldr	r3, [pc, #88]	@ (8008b04 <MX_CAN_Init+0x60>)
 8008aaa:	4a17      	ldr	r2, [pc, #92]	@ (8008b08 <MX_CAN_Init+0x64>)
 8008aac:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008aae:	4b15      	ldr	r3, [pc, #84]	@ (8008b04 <MX_CAN_Init+0x60>)
 8008ab0:	2210      	movs	r2, #16
 8008ab2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008ab4:	4b13      	ldr	r3, [pc, #76]	@ (8008b04 <MX_CAN_Init+0x60>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008aba:	4b12      	ldr	r3, [pc, #72]	@ (8008b04 <MX_CAN_Init+0x60>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008ac0:	4b10      	ldr	r3, [pc, #64]	@ (8008b04 <MX_CAN_Init+0x60>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8008b04 <MX_CAN_Init+0x60>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008acc:	4b0d      	ldr	r3, [pc, #52]	@ (8008b04 <MX_CAN_Init+0x60>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8008b04 <MX_CAN_Init+0x60>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8008b04 <MX_CAN_Init+0x60>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008ade:	4b09      	ldr	r3, [pc, #36]	@ (8008b04 <MX_CAN_Init+0x60>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008ae4:	4b07      	ldr	r3, [pc, #28]	@ (8008b04 <MX_CAN_Init+0x60>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008aea:	4b06      	ldr	r3, [pc, #24]	@ (8008b04 <MX_CAN_Init+0x60>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008af0:	4804      	ldr	r0, [pc, #16]	@ (8008b04 <MX_CAN_Init+0x60>)
 8008af2:	f000 fb9d 	bl	8009230 <HAL_CAN_Init>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008afc:	f000 f95a 	bl	8008db4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008b00:	bf00      	nop
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	200013e4 	.word	0x200013e4
 8008b08:	40006400 	.word	0x40006400

08008b0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008b10:	4b12      	ldr	r3, [pc, #72]	@ (8008b5c <MX_I2C1_Init+0x50>)
 8008b12:	4a13      	ldr	r2, [pc, #76]	@ (8008b60 <MX_I2C1_Init+0x54>)
 8008b14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008b16:	4b11      	ldr	r3, [pc, #68]	@ (8008b5c <MX_I2C1_Init+0x50>)
 8008b18:	4a12      	ldr	r2, [pc, #72]	@ (8008b64 <MX_I2C1_Init+0x58>)
 8008b1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8008b5c <MX_I2C1_Init+0x50>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008b22:	4b0e      	ldr	r3, [pc, #56]	@ (8008b5c <MX_I2C1_Init+0x50>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008b28:	4b0c      	ldr	r3, [pc, #48]	@ (8008b5c <MX_I2C1_Init+0x50>)
 8008b2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008b2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008b30:	4b0a      	ldr	r3, [pc, #40]	@ (8008b5c <MX_I2C1_Init+0x50>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008b36:	4b09      	ldr	r3, [pc, #36]	@ (8008b5c <MX_I2C1_Init+0x50>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008b3c:	4b07      	ldr	r3, [pc, #28]	@ (8008b5c <MX_I2C1_Init+0x50>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008b42:	4b06      	ldr	r3, [pc, #24]	@ (8008b5c <MX_I2C1_Init+0x50>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008b48:	4804      	ldr	r0, [pc, #16]	@ (8008b5c <MX_I2C1_Init+0x50>)
 8008b4a:	f001 f823 	bl	8009b94 <HAL_I2C_Init>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d001      	beq.n	8008b58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008b54:	f000 f92e 	bl	8008db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008b58:	bf00      	nop
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	2000140c 	.word	0x2000140c
 8008b60:	40005400 	.word	0x40005400
 8008b64:	00061a80 	.word	0x00061a80

08008b68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008b6e:	f107 0308 	add.w	r3, r7, #8
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]
 8008b76:	605a      	str	r2, [r3, #4]
 8008b78:	609a      	str	r2, [r3, #8]
 8008b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b7c:	463b      	mov	r3, r7
 8008b7e:	2200      	movs	r2, #0
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008b84:	4b1f      	ldr	r3, [pc, #124]	@ (8008c04 <MX_TIM1_Init+0x9c>)
 8008b86:	4a20      	ldr	r2, [pc, #128]	@ (8008c08 <MX_TIM1_Init+0xa0>)
 8008b88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8008c04 <MX_TIM1_Init+0x9c>)
 8008b8c:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8008b90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b92:	4b1c      	ldr	r3, [pc, #112]	@ (8008c04 <MX_TIM1_Init+0x9c>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008b98:	4b1a      	ldr	r3, [pc, #104]	@ (8008c04 <MX_TIM1_Init+0x9c>)
 8008b9a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8008b9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ba0:	4b18      	ldr	r3, [pc, #96]	@ (8008c04 <MX_TIM1_Init+0x9c>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008ba6:	4b17      	ldr	r3, [pc, #92]	@ (8008c04 <MX_TIM1_Init+0x9c>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008bac:	4b15      	ldr	r3, [pc, #84]	@ (8008c04 <MX_TIM1_Init+0x9c>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008bb2:	4814      	ldr	r0, [pc, #80]	@ (8008c04 <MX_TIM1_Init+0x9c>)
 8008bb4:	f002 fe20 	bl	800b7f8 <HAL_TIM_Base_Init>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008bbe:	f000 f8f9 	bl	8008db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008bc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008bc8:	f107 0308 	add.w	r3, r7, #8
 8008bcc:	4619      	mov	r1, r3
 8008bce:	480d      	ldr	r0, [pc, #52]	@ (8008c04 <MX_TIM1_Init+0x9c>)
 8008bd0:	f002 ffca 	bl	800bb68 <HAL_TIM_ConfigClockSource>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008bda:	f000 f8eb 	bl	8008db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008bde:	2300      	movs	r3, #0
 8008be0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008be2:	2300      	movs	r3, #0
 8008be4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008be6:	463b      	mov	r3, r7
 8008be8:	4619      	mov	r1, r3
 8008bea:	4806      	ldr	r0, [pc, #24]	@ (8008c04 <MX_TIM1_Init+0x9c>)
 8008bec:	f003 f9b8 	bl	800bf60 <HAL_TIMEx_MasterConfigSynchronization>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008bf6:	f000 f8dd 	bl	8008db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008bfa:	bf00      	nop
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20001460 	.word	0x20001460
 8008c08:	40012c00 	.word	0x40012c00

08008c0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008c10:	4b11      	ldr	r3, [pc, #68]	@ (8008c58 <MX_USART1_UART_Init+0x4c>)
 8008c12:	4a12      	ldr	r2, [pc, #72]	@ (8008c5c <MX_USART1_UART_Init+0x50>)
 8008c14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008c16:	4b10      	ldr	r3, [pc, #64]	@ (8008c58 <MX_USART1_UART_Init+0x4c>)
 8008c18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008c1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008c58 <MX_USART1_UART_Init+0x4c>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008c24:	4b0c      	ldr	r3, [pc, #48]	@ (8008c58 <MX_USART1_UART_Init+0x4c>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c58 <MX_USART1_UART_Init+0x4c>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008c30:	4b09      	ldr	r3, [pc, #36]	@ (8008c58 <MX_USART1_UART_Init+0x4c>)
 8008c32:	220c      	movs	r2, #12
 8008c34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c36:	4b08      	ldr	r3, [pc, #32]	@ (8008c58 <MX_USART1_UART_Init+0x4c>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c3c:	4b06      	ldr	r3, [pc, #24]	@ (8008c58 <MX_USART1_UART_Init+0x4c>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008c42:	4805      	ldr	r0, [pc, #20]	@ (8008c58 <MX_USART1_UART_Init+0x4c>)
 8008c44:	f003 fa0a 	bl	800c05c <HAL_UART_Init>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008c4e:	f000 f8b1 	bl	8008db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008c52:	bf00      	nop
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	200014a8 	.word	0x200014a8
 8008c5c:	40013800 	.word	0x40013800

08008c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b088      	sub	sp, #32
 8008c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c66:	f107 0310 	add.w	r3, r7, #16
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	605a      	str	r2, [r3, #4]
 8008c70:	609a      	str	r2, [r3, #8]
 8008c72:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c74:	4b4b      	ldr	r3, [pc, #300]	@ (8008da4 <MX_GPIO_Init+0x144>)
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	4a4a      	ldr	r2, [pc, #296]	@ (8008da4 <MX_GPIO_Init+0x144>)
 8008c7a:	f043 0310 	orr.w	r3, r3, #16
 8008c7e:	6193      	str	r3, [r2, #24]
 8008c80:	4b48      	ldr	r3, [pc, #288]	@ (8008da4 <MX_GPIO_Init+0x144>)
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	f003 0310 	and.w	r3, r3, #16
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008c8c:	4b45      	ldr	r3, [pc, #276]	@ (8008da4 <MX_GPIO_Init+0x144>)
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	4a44      	ldr	r2, [pc, #272]	@ (8008da4 <MX_GPIO_Init+0x144>)
 8008c92:	f043 0320 	orr.w	r3, r3, #32
 8008c96:	6193      	str	r3, [r2, #24]
 8008c98:	4b42      	ldr	r3, [pc, #264]	@ (8008da4 <MX_GPIO_Init+0x144>)
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	f003 0320 	and.w	r3, r3, #32
 8008ca0:	60bb      	str	r3, [r7, #8]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ca4:	4b3f      	ldr	r3, [pc, #252]	@ (8008da4 <MX_GPIO_Init+0x144>)
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	4a3e      	ldr	r2, [pc, #248]	@ (8008da4 <MX_GPIO_Init+0x144>)
 8008caa:	f043 0304 	orr.w	r3, r3, #4
 8008cae:	6193      	str	r3, [r2, #24]
 8008cb0:	4b3c      	ldr	r3, [pc, #240]	@ (8008da4 <MX_GPIO_Init+0x144>)
 8008cb2:	699b      	ldr	r3, [r3, #24]
 8008cb4:	f003 0304 	and.w	r3, r3, #4
 8008cb8:	607b      	str	r3, [r7, #4]
 8008cba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008cbc:	4b39      	ldr	r3, [pc, #228]	@ (8008da4 <MX_GPIO_Init+0x144>)
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	4a38      	ldr	r2, [pc, #224]	@ (8008da4 <MX_GPIO_Init+0x144>)
 8008cc2:	f043 0308 	orr.w	r3, r3, #8
 8008cc6:	6193      	str	r3, [r2, #24]
 8008cc8:	4b36      	ldr	r3, [pc, #216]	@ (8008da4 <MX_GPIO_Init+0x144>)
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	f003 0308 	and.w	r3, r3, #8
 8008cd0:	603b      	str	r3, [r7, #0]
 8008cd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	21f0      	movs	r1, #240	@ 0xf0
 8008cd8:	4833      	ldr	r0, [pc, #204]	@ (8008da8 <MX_GPIO_Init+0x148>)
 8008cda:	f000 ff2a 	bl	8009b32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f241 0130 	movw	r1, #4144	@ 0x1030
 8008ce4:	4831      	ldr	r0, [pc, #196]	@ (8008dac <MX_GPIO_Init+0x14c>)
 8008ce6:	f000 ff24 	bl	8009b32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008cea:	2200      	movs	r2, #0
 8008cec:	f640 4107 	movw	r1, #3079	@ 0xc07
 8008cf0:	482f      	ldr	r0, [pc, #188]	@ (8008db0 <MX_GPIO_Init+0x150>)
 8008cf2:	f000 ff1e 	bl	8009b32 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008cf6:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8008cfa:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d00:	2300      	movs	r3, #0
 8008d02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d04:	f107 0310 	add.w	r3, r7, #16
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4828      	ldr	r0, [pc, #160]	@ (8008dac <MX_GPIO_Init+0x14c>)
 8008d0c:	f000 fc9a 	bl	8009644 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008d10:	f248 130f 	movw	r3, #33039	@ 0x810f
 8008d14:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d16:	2300      	movs	r3, #0
 8008d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d1e:	f107 0310 	add.w	r3, r7, #16
 8008d22:	4619      	mov	r1, r3
 8008d24:	4820      	ldr	r0, [pc, #128]	@ (8008da8 <MX_GPIO_Init+0x148>)
 8008d26:	f000 fc8d 	bl	8009644 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008d2a:	23f0      	movs	r3, #240	@ 0xf0
 8008d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d32:	2300      	movs	r3, #0
 8008d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d36:	2302      	movs	r3, #2
 8008d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d3a:	f107 0310 	add.w	r3, r7, #16
 8008d3e:	4619      	mov	r1, r3
 8008d40:	4819      	ldr	r0, [pc, #100]	@ (8008da8 <MX_GPIO_Init+0x148>)
 8008d42:	f000 fc7f 	bl	8009644 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008d46:	f241 0330 	movw	r3, #4144	@ 0x1030
 8008d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d50:	2300      	movs	r3, #0
 8008d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d54:	2302      	movs	r3, #2
 8008d56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d58:	f107 0310 	add.w	r3, r7, #16
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	4813      	ldr	r0, [pc, #76]	@ (8008dac <MX_GPIO_Init+0x14c>)
 8008d60:	f000 fc70 	bl	8009644 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008d64:	f640 4307 	movw	r3, #3079	@ 0xc07
 8008d68:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d72:	2302      	movs	r3, #2
 8008d74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d76:	f107 0310 	add.w	r3, r7, #16
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	480c      	ldr	r0, [pc, #48]	@ (8008db0 <MX_GPIO_Init+0x150>)
 8008d7e:	f000 fc61 	bl	8009644 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008d82:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8008d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d90:	f107 0310 	add.w	r3, r7, #16
 8008d94:	4619      	mov	r1, r3
 8008d96:	4806      	ldr	r0, [pc, #24]	@ (8008db0 <MX_GPIO_Init+0x150>)
 8008d98:	f000 fc54 	bl	8009644 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008d9c:	bf00      	nop
 8008d9e:	3720      	adds	r7, #32
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	40021000 	.word	0x40021000
 8008da8:	40010800 	.word	0x40010800
 8008dac:	40011000 	.word	0x40011000
 8008db0:	40010c00 	.word	0x40010c00

08008db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008db4:	b480      	push	{r7}
 8008db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008db8:	bf00      	nop
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bc80      	pop	{r7}
 8008dbe:	4770      	bx	lr

08008dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008dc6:	4b15      	ldr	r3, [pc, #84]	@ (8008e1c <HAL_MspInit+0x5c>)
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	4a14      	ldr	r2, [pc, #80]	@ (8008e1c <HAL_MspInit+0x5c>)
 8008dcc:	f043 0301 	orr.w	r3, r3, #1
 8008dd0:	6193      	str	r3, [r2, #24]
 8008dd2:	4b12      	ldr	r3, [pc, #72]	@ (8008e1c <HAL_MspInit+0x5c>)
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	60bb      	str	r3, [r7, #8]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008dde:	4b0f      	ldr	r3, [pc, #60]	@ (8008e1c <HAL_MspInit+0x5c>)
 8008de0:	69db      	ldr	r3, [r3, #28]
 8008de2:	4a0e      	ldr	r2, [pc, #56]	@ (8008e1c <HAL_MspInit+0x5c>)
 8008de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008de8:	61d3      	str	r3, [r2, #28]
 8008dea:	4b0c      	ldr	r3, [pc, #48]	@ (8008e1c <HAL_MspInit+0x5c>)
 8008dec:	69db      	ldr	r3, [r3, #28]
 8008dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008df2:	607b      	str	r3, [r7, #4]
 8008df4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008df6:	4b0a      	ldr	r3, [pc, #40]	@ (8008e20 <HAL_MspInit+0x60>)
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	60fb      	str	r3, [r7, #12]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8008e02:	60fb      	str	r3, [r7, #12]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008e0a:	60fb      	str	r3, [r7, #12]
 8008e0c:	4a04      	ldr	r2, [pc, #16]	@ (8008e20 <HAL_MspInit+0x60>)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008e12:	bf00      	nop
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bc80      	pop	{r7}
 8008e1a:	4770      	bx	lr
 8008e1c:	40021000 	.word	0x40021000
 8008e20:	40010000 	.word	0x40010000

08008e24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b088      	sub	sp, #32
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e2c:	f107 0310 	add.w	r3, r7, #16
 8008e30:	2200      	movs	r2, #0
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	605a      	str	r2, [r3, #4]
 8008e36:	609a      	str	r2, [r3, #8]
 8008e38:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8008eb0 <HAL_CAN_MspInit+0x8c>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d131      	bne.n	8008ea8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008e44:	4b1b      	ldr	r3, [pc, #108]	@ (8008eb4 <HAL_CAN_MspInit+0x90>)
 8008e46:	69db      	ldr	r3, [r3, #28]
 8008e48:	4a1a      	ldr	r2, [pc, #104]	@ (8008eb4 <HAL_CAN_MspInit+0x90>)
 8008e4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008e4e:	61d3      	str	r3, [r2, #28]
 8008e50:	4b18      	ldr	r3, [pc, #96]	@ (8008eb4 <HAL_CAN_MspInit+0x90>)
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e58:	60fb      	str	r3, [r7, #12]
 8008e5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e5c:	4b15      	ldr	r3, [pc, #84]	@ (8008eb4 <HAL_CAN_MspInit+0x90>)
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	4a14      	ldr	r2, [pc, #80]	@ (8008eb4 <HAL_CAN_MspInit+0x90>)
 8008e62:	f043 0304 	orr.w	r3, r3, #4
 8008e66:	6193      	str	r3, [r2, #24]
 8008e68:	4b12      	ldr	r3, [pc, #72]	@ (8008eb4 <HAL_CAN_MspInit+0x90>)
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	f003 0304 	and.w	r3, r3, #4
 8008e70:	60bb      	str	r3, [r7, #8]
 8008e72:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008e74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008e78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e82:	f107 0310 	add.w	r3, r7, #16
 8008e86:	4619      	mov	r1, r3
 8008e88:	480b      	ldr	r0, [pc, #44]	@ (8008eb8 <HAL_CAN_MspInit+0x94>)
 8008e8a:	f000 fbdb 	bl	8009644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008e8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e94:	2302      	movs	r3, #2
 8008e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e9c:	f107 0310 	add.w	r3, r7, #16
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	4805      	ldr	r0, [pc, #20]	@ (8008eb8 <HAL_CAN_MspInit+0x94>)
 8008ea4:	f000 fbce 	bl	8009644 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8008ea8:	bf00      	nop
 8008eaa:	3720      	adds	r7, #32
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	40006400 	.word	0x40006400
 8008eb4:	40021000 	.word	0x40021000
 8008eb8:	40010800 	.word	0x40010800

08008ebc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b088      	sub	sp, #32
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ec4:	f107 0310 	add.w	r3, r7, #16
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]
 8008ecc:	605a      	str	r2, [r3, #4]
 8008ece:	609a      	str	r2, [r3, #8]
 8008ed0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a15      	ldr	r2, [pc, #84]	@ (8008f2c <HAL_I2C_MspInit+0x70>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d123      	bne.n	8008f24 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008edc:	4b14      	ldr	r3, [pc, #80]	@ (8008f30 <HAL_I2C_MspInit+0x74>)
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	4a13      	ldr	r2, [pc, #76]	@ (8008f30 <HAL_I2C_MspInit+0x74>)
 8008ee2:	f043 0308 	orr.w	r3, r3, #8
 8008ee6:	6193      	str	r3, [r2, #24]
 8008ee8:	4b11      	ldr	r3, [pc, #68]	@ (8008f30 <HAL_I2C_MspInit+0x74>)
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	f003 0308 	and.w	r3, r3, #8
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008ef4:	23c0      	movs	r3, #192	@ 0xc0
 8008ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008ef8:	2312      	movs	r3, #18
 8008efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008efc:	2303      	movs	r3, #3
 8008efe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f00:	f107 0310 	add.w	r3, r7, #16
 8008f04:	4619      	mov	r1, r3
 8008f06:	480b      	ldr	r0, [pc, #44]	@ (8008f34 <HAL_I2C_MspInit+0x78>)
 8008f08:	f000 fb9c 	bl	8009644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008f0c:	4b08      	ldr	r3, [pc, #32]	@ (8008f30 <HAL_I2C_MspInit+0x74>)
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	4a07      	ldr	r2, [pc, #28]	@ (8008f30 <HAL_I2C_MspInit+0x74>)
 8008f12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f16:	61d3      	str	r3, [r2, #28]
 8008f18:	4b05      	ldr	r3, [pc, #20]	@ (8008f30 <HAL_I2C_MspInit+0x74>)
 8008f1a:	69db      	ldr	r3, [r3, #28]
 8008f1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008f20:	60bb      	str	r3, [r7, #8]
 8008f22:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8008f24:	bf00      	nop
 8008f26:	3720      	adds	r7, #32
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	40005400 	.word	0x40005400
 8008f30:	40021000 	.word	0x40021000
 8008f34:	40010c00 	.word	0x40010c00

08008f38 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a0a      	ldr	r2, [pc, #40]	@ (8008f70 <HAL_I2C_MspDeInit+0x38>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d10d      	bne.n	8008f66 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8008f74 <HAL_I2C_MspDeInit+0x3c>)
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	4a09      	ldr	r2, [pc, #36]	@ (8008f74 <HAL_I2C_MspDeInit+0x3c>)
 8008f50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008f54:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008f56:	2140      	movs	r1, #64	@ 0x40
 8008f58:	4807      	ldr	r0, [pc, #28]	@ (8008f78 <HAL_I2C_MspDeInit+0x40>)
 8008f5a:	f000 fd07 	bl	800996c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008f5e:	2180      	movs	r1, #128	@ 0x80
 8008f60:	4805      	ldr	r0, [pc, #20]	@ (8008f78 <HAL_I2C_MspDeInit+0x40>)
 8008f62:	f000 fd03 	bl	800996c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008f66:	bf00      	nop
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	40005400 	.word	0x40005400
 8008f74:	40021000 	.word	0x40021000
 8008f78:	40010c00 	.word	0x40010c00

08008f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a0d      	ldr	r2, [pc, #52]	@ (8008fc0 <HAL_TIM_Base_MspInit+0x44>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d113      	bne.n	8008fb6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008fc4 <HAL_TIM_Base_MspInit+0x48>)
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	4a0c      	ldr	r2, [pc, #48]	@ (8008fc4 <HAL_TIM_Base_MspInit+0x48>)
 8008f94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008f98:	6193      	str	r3, [r2, #24]
 8008f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc4 <HAL_TIM_Base_MspInit+0x48>)
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fa2:	60fb      	str	r3, [r7, #12]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	2100      	movs	r1, #0
 8008faa:	2019      	movs	r0, #25
 8008fac:	f000 fb13 	bl	80095d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008fb0:	2019      	movs	r0, #25
 8008fb2:	f000 fb2c 	bl	800960e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8008fb6:	bf00      	nop
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	40012c00 	.word	0x40012c00
 8008fc4:	40021000 	.word	0x40021000

08008fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b088      	sub	sp, #32
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fd0:	f107 0310 	add.w	r3, r7, #16
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	601a      	str	r2, [r3, #0]
 8008fd8:	605a      	str	r2, [r3, #4]
 8008fda:	609a      	str	r2, [r3, #8]
 8008fdc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8009054 <HAL_UART_MspInit+0x8c>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d131      	bne.n	800904c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8009058 <HAL_UART_MspInit+0x90>)
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	4a1a      	ldr	r2, [pc, #104]	@ (8009058 <HAL_UART_MspInit+0x90>)
 8008fee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008ff2:	6193      	str	r3, [r2, #24]
 8008ff4:	4b18      	ldr	r3, [pc, #96]	@ (8009058 <HAL_UART_MspInit+0x90>)
 8008ff6:	699b      	ldr	r3, [r3, #24]
 8008ff8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ffc:	60fb      	str	r3, [r7, #12]
 8008ffe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009000:	4b15      	ldr	r3, [pc, #84]	@ (8009058 <HAL_UART_MspInit+0x90>)
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	4a14      	ldr	r2, [pc, #80]	@ (8009058 <HAL_UART_MspInit+0x90>)
 8009006:	f043 0304 	orr.w	r3, r3, #4
 800900a:	6193      	str	r3, [r2, #24]
 800900c:	4b12      	ldr	r3, [pc, #72]	@ (8009058 <HAL_UART_MspInit+0x90>)
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	f003 0304 	and.w	r3, r3, #4
 8009014:	60bb      	str	r3, [r7, #8]
 8009016:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009018:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800901c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800901e:	2302      	movs	r3, #2
 8009020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009022:	2303      	movs	r3, #3
 8009024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009026:	f107 0310 	add.w	r3, r7, #16
 800902a:	4619      	mov	r1, r3
 800902c:	480b      	ldr	r0, [pc, #44]	@ (800905c <HAL_UART_MspInit+0x94>)
 800902e:	f000 fb09 	bl	8009644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009032:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009036:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009038:	2300      	movs	r3, #0
 800903a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800903c:	2300      	movs	r3, #0
 800903e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009040:	f107 0310 	add.w	r3, r7, #16
 8009044:	4619      	mov	r1, r3
 8009046:	4805      	ldr	r0, [pc, #20]	@ (800905c <HAL_UART_MspInit+0x94>)
 8009048:	f000 fafc 	bl	8009644 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800904c:	bf00      	nop
 800904e:	3720      	adds	r7, #32
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	40013800 	.word	0x40013800
 8009058:	40021000 	.word	0x40021000
 800905c:	40010800 	.word	0x40010800

08009060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009060:	b480      	push	{r7}
 8009062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009064:	bf00      	nop
 8009066:	e7fd      	b.n	8009064 <NMI_Handler+0x4>

08009068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800906c:	bf00      	nop
 800906e:	e7fd      	b.n	800906c <HardFault_Handler+0x4>

08009070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009070:	b480      	push	{r7}
 8009072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009074:	bf00      	nop
 8009076:	e7fd      	b.n	8009074 <MemManage_Handler+0x4>

08009078 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009078:	b480      	push	{r7}
 800907a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800907c:	bf00      	nop
 800907e:	e7fd      	b.n	800907c <BusFault_Handler+0x4>

08009080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009080:	b480      	push	{r7}
 8009082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009084:	bf00      	nop
 8009086:	e7fd      	b.n	8009084 <UsageFault_Handler+0x4>

08009088 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009088:	b480      	push	{r7}
 800908a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800908c:	bf00      	nop
 800908e:	46bd      	mov	sp, r7
 8009090:	bc80      	pop	{r7}
 8009092:	4770      	bx	lr

08009094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009094:	b480      	push	{r7}
 8009096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009098:	bf00      	nop
 800909a:	46bd      	mov	sp, r7
 800909c:	bc80      	pop	{r7}
 800909e:	4770      	bx	lr

080090a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80090a0:	b480      	push	{r7}
 80090a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80090a4:	bf00      	nop
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bc80      	pop	{r7}
 80090aa:	4770      	bx	lr

080090ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80090b0:	f000 f87e 	bl	80091b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80090b4:	bf00      	nop
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80090bc:	4802      	ldr	r0, [pc, #8]	@ (80090c8 <TIM1_UP_IRQHandler+0x10>)
 80090be:	f002 fc4b 	bl	800b958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80090c2:	bf00      	nop
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	20001460 	.word	0x20001460

080090cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80090cc:	b480      	push	{r7}
 80090ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80090d0:	bf00      	nop
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bc80      	pop	{r7}
 80090d6:	4770      	bx	lr

080090d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80090d8:	480c      	ldr	r0, [pc, #48]	@ (800910c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80090da:	490d      	ldr	r1, [pc, #52]	@ (8009110 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80090dc:	4a0d      	ldr	r2, [pc, #52]	@ (8009114 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80090de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80090e0:	e002      	b.n	80090e8 <LoopCopyDataInit>

080090e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80090e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80090e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80090e6:	3304      	adds	r3, #4

080090e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80090e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80090ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80090ec:	d3f9      	bcc.n	80090e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80090ee:	4a0a      	ldr	r2, [pc, #40]	@ (8009118 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80090f0:	4c0a      	ldr	r4, [pc, #40]	@ (800911c <LoopFillZerobss+0x22>)
  movs r3, #0
 80090f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80090f4:	e001      	b.n	80090fa <LoopFillZerobss>

080090f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80090f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80090f8:	3204      	adds	r2, #4

080090fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80090fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80090fc:	d3fb      	bcc.n	80090f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80090fe:	f7ff ffe5 	bl	80090cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009102:	f003 f8ed 	bl	800c2e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009106:	f7ff fbe3 	bl	80088d0 <main>
  bx lr
 800910a:	4770      	bx	lr
  ldr r0, =_sdata
 800910c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009110:	20000ce4 	.word	0x20000ce4
  ldr r2, =_sidata
 8009114:	0800c41c 	.word	0x0800c41c
  ldr r2, =_sbss
 8009118:	20000ce4 	.word	0x20000ce4
  ldr r4, =_ebss
 800911c:	200014f4 	.word	0x200014f4

08009120 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009120:	e7fe      	b.n	8009120 <ADC1_2_IRQHandler>
	...

08009124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009128:	4b08      	ldr	r3, [pc, #32]	@ (800914c <HAL_Init+0x28>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a07      	ldr	r2, [pc, #28]	@ (800914c <HAL_Init+0x28>)
 800912e:	f043 0310 	orr.w	r3, r3, #16
 8009132:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009134:	2003      	movs	r0, #3
 8009136:	f000 fa43 	bl	80095c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800913a:	200f      	movs	r0, #15
 800913c:	f000 f808 	bl	8009150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009140:	f7ff fe3e 	bl	8008dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	40022000 	.word	0x40022000

08009150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009158:	4b12      	ldr	r3, [pc, #72]	@ (80091a4 <HAL_InitTick+0x54>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	4b12      	ldr	r3, [pc, #72]	@ (80091a8 <HAL_InitTick+0x58>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	4619      	mov	r1, r3
 8009162:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009166:	fbb3 f3f1 	udiv	r3, r3, r1
 800916a:	fbb2 f3f3 	udiv	r3, r2, r3
 800916e:	4618      	mov	r0, r3
 8009170:	f000 fa5b 	bl	800962a <HAL_SYSTICK_Config>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e00e      	b.n	800919c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b0f      	cmp	r3, #15
 8009182:	d80a      	bhi.n	800919a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009184:	2200      	movs	r2, #0
 8009186:	6879      	ldr	r1, [r7, #4]
 8009188:	f04f 30ff 	mov.w	r0, #4294967295
 800918c:	f000 fa23 	bl	80095d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009190:	4a06      	ldr	r2, [pc, #24]	@ (80091ac <HAL_InitTick+0x5c>)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	e000      	b.n	800919c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
}
 800919c:	4618      	mov	r0, r3
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	20000cd8 	.word	0x20000cd8
 80091a8:	20000ce0 	.word	0x20000ce0
 80091ac:	20000cdc 	.word	0x20000cdc

080091b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80091b0:	b480      	push	{r7}
 80091b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80091b4:	4b05      	ldr	r3, [pc, #20]	@ (80091cc <HAL_IncTick+0x1c>)
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	461a      	mov	r2, r3
 80091ba:	4b05      	ldr	r3, [pc, #20]	@ (80091d0 <HAL_IncTick+0x20>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4413      	add	r3, r2
 80091c0:	4a03      	ldr	r2, [pc, #12]	@ (80091d0 <HAL_IncTick+0x20>)
 80091c2:	6013      	str	r3, [r2, #0]
}
 80091c4:	bf00      	nop
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bc80      	pop	{r7}
 80091ca:	4770      	bx	lr
 80091cc:	20000ce0 	.word	0x20000ce0
 80091d0:	200014f0 	.word	0x200014f0

080091d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80091d4:	b480      	push	{r7}
 80091d6:	af00      	add	r7, sp, #0
  return uwTick;
 80091d8:	4b02      	ldr	r3, [pc, #8]	@ (80091e4 <HAL_GetTick+0x10>)
 80091da:	681b      	ldr	r3, [r3, #0]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	46bd      	mov	sp, r7
 80091e0:	bc80      	pop	{r7}
 80091e2:	4770      	bx	lr
 80091e4:	200014f0 	.word	0x200014f0

080091e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80091f0:	f7ff fff0 	bl	80091d4 <HAL_GetTick>
 80091f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009200:	d005      	beq.n	800920e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009202:	4b0a      	ldr	r3, [pc, #40]	@ (800922c <HAL_Delay+0x44>)
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	4413      	add	r3, r2
 800920c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800920e:	bf00      	nop
 8009210:	f7ff ffe0 	bl	80091d4 <HAL_GetTick>
 8009214:	4602      	mov	r2, r0
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	429a      	cmp	r2, r3
 800921e:	d8f7      	bhi.n	8009210 <HAL_Delay+0x28>
  {
  }
}
 8009220:	bf00      	nop
 8009222:	bf00      	nop
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	20000ce0 	.word	0x20000ce0

08009230 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e0ed      	b.n	800941e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b00      	cmp	r3, #0
 800924c:	d102      	bne.n	8009254 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7ff fde8 	bl	8008e24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f042 0201 	orr.w	r2, r2, #1
 8009262:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009264:	f7ff ffb6 	bl	80091d4 <HAL_GetTick>
 8009268:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800926a:	e012      	b.n	8009292 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800926c:	f7ff ffb2 	bl	80091d4 <HAL_GetTick>
 8009270:	4602      	mov	r2, r0
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	2b0a      	cmp	r3, #10
 8009278:	d90b      	bls.n	8009292 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800927e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2205      	movs	r2, #5
 800928a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e0c5      	b.n	800941e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	f003 0301 	and.w	r3, r3, #1
 800929c:	2b00      	cmp	r3, #0
 800929e:	d0e5      	beq.n	800926c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f022 0202 	bic.w	r2, r2, #2
 80092ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80092b0:	f7ff ff90 	bl	80091d4 <HAL_GetTick>
 80092b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80092b6:	e012      	b.n	80092de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80092b8:	f7ff ff8c 	bl	80091d4 <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	2b0a      	cmp	r3, #10
 80092c4:	d90b      	bls.n	80092de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2205      	movs	r2, #5
 80092d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e09f      	b.n	800941e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	f003 0302 	and.w	r3, r3, #2
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1e5      	bne.n	80092b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	7e1b      	ldrb	r3, [r3, #24]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d108      	bne.n	8009306 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009302:	601a      	str	r2, [r3, #0]
 8009304:	e007      	b.n	8009316 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009314:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	7e5b      	ldrb	r3, [r3, #25]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d108      	bne.n	8009330 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800932c:	601a      	str	r2, [r3, #0]
 800932e:	e007      	b.n	8009340 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800933e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	7e9b      	ldrb	r3, [r3, #26]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d108      	bne.n	800935a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0220 	orr.w	r2, r2, #32
 8009356:	601a      	str	r2, [r3, #0]
 8009358:	e007      	b.n	800936a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f022 0220 	bic.w	r2, r2, #32
 8009368:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	7edb      	ldrb	r3, [r3, #27]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d108      	bne.n	8009384 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f022 0210 	bic.w	r2, r2, #16
 8009380:	601a      	str	r2, [r3, #0]
 8009382:	e007      	b.n	8009394 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f042 0210 	orr.w	r2, r2, #16
 8009392:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	7f1b      	ldrb	r3, [r3, #28]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d108      	bne.n	80093ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f042 0208 	orr.w	r2, r2, #8
 80093aa:	601a      	str	r2, [r3, #0]
 80093ac:	e007      	b.n	80093be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 0208 	bic.w	r2, r2, #8
 80093bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	7f5b      	ldrb	r3, [r3, #29]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d108      	bne.n	80093d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f042 0204 	orr.w	r2, r2, #4
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	e007      	b.n	80093e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f022 0204 	bic.w	r2, r2, #4
 80093e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	689a      	ldr	r2, [r3, #8]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	431a      	orrs	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	431a      	orrs	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	ea42 0103 	orr.w	r1, r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	1e5a      	subs	r2, r3, #1
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	430a      	orrs	r2, r1
 800940c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
	...

08009428 <__NVIC_SetPriorityGrouping>:
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f003 0307 	and.w	r3, r3, #7
 8009436:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009438:	4b0c      	ldr	r3, [pc, #48]	@ (800946c <__NVIC_SetPriorityGrouping+0x44>)
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009444:	4013      	ands	r3, r2
 8009446:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009450:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800945a:	4a04      	ldr	r2, [pc, #16]	@ (800946c <__NVIC_SetPriorityGrouping+0x44>)
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	60d3      	str	r3, [r2, #12]
}
 8009460:	bf00      	nop
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	bc80      	pop	{r7}
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	e000ed00 	.word	0xe000ed00

08009470 <__NVIC_GetPriorityGrouping>:
{
 8009470:	b480      	push	{r7}
 8009472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009474:	4b04      	ldr	r3, [pc, #16]	@ (8009488 <__NVIC_GetPriorityGrouping+0x18>)
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	0a1b      	lsrs	r3, r3, #8
 800947a:	f003 0307 	and.w	r3, r3, #7
}
 800947e:	4618      	mov	r0, r3
 8009480:	46bd      	mov	sp, r7
 8009482:	bc80      	pop	{r7}
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	e000ed00 	.word	0xe000ed00

0800948c <__NVIC_EnableIRQ>:
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	4603      	mov	r3, r0
 8009494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800949a:	2b00      	cmp	r3, #0
 800949c:	db0b      	blt.n	80094b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800949e:	79fb      	ldrb	r3, [r7, #7]
 80094a0:	f003 021f 	and.w	r2, r3, #31
 80094a4:	4906      	ldr	r1, [pc, #24]	@ (80094c0 <__NVIC_EnableIRQ+0x34>)
 80094a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094aa:	095b      	lsrs	r3, r3, #5
 80094ac:	2001      	movs	r0, #1
 80094ae:	fa00 f202 	lsl.w	r2, r0, r2
 80094b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80094b6:	bf00      	nop
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bc80      	pop	{r7}
 80094be:	4770      	bx	lr
 80094c0:	e000e100 	.word	0xe000e100

080094c4 <__NVIC_SetPriority>:
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	4603      	mov	r3, r0
 80094cc:	6039      	str	r1, [r7, #0]
 80094ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	db0a      	blt.n	80094ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	490c      	ldr	r1, [pc, #48]	@ (8009510 <__NVIC_SetPriority+0x4c>)
 80094de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094e2:	0112      	lsls	r2, r2, #4
 80094e4:	b2d2      	uxtb	r2, r2
 80094e6:	440b      	add	r3, r1
 80094e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80094ec:	e00a      	b.n	8009504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	4908      	ldr	r1, [pc, #32]	@ (8009514 <__NVIC_SetPriority+0x50>)
 80094f4:	79fb      	ldrb	r3, [r7, #7]
 80094f6:	f003 030f 	and.w	r3, r3, #15
 80094fa:	3b04      	subs	r3, #4
 80094fc:	0112      	lsls	r2, r2, #4
 80094fe:	b2d2      	uxtb	r2, r2
 8009500:	440b      	add	r3, r1
 8009502:	761a      	strb	r2, [r3, #24]
}
 8009504:	bf00      	nop
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	bc80      	pop	{r7}
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	e000e100 	.word	0xe000e100
 8009514:	e000ed00 	.word	0xe000ed00

08009518 <NVIC_EncodePriority>:
{
 8009518:	b480      	push	{r7}
 800951a:	b089      	sub	sp, #36	@ 0x24
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f003 0307 	and.w	r3, r3, #7
 800952a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	f1c3 0307 	rsb	r3, r3, #7
 8009532:	2b04      	cmp	r3, #4
 8009534:	bf28      	it	cs
 8009536:	2304      	movcs	r3, #4
 8009538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	3304      	adds	r3, #4
 800953e:	2b06      	cmp	r3, #6
 8009540:	d902      	bls.n	8009548 <NVIC_EncodePriority+0x30>
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	3b03      	subs	r3, #3
 8009546:	e000      	b.n	800954a <NVIC_EncodePriority+0x32>
 8009548:	2300      	movs	r3, #0
 800954a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800954c:	f04f 32ff 	mov.w	r2, #4294967295
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	fa02 f303 	lsl.w	r3, r2, r3
 8009556:	43da      	mvns	r2, r3
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	401a      	ands	r2, r3
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009560:	f04f 31ff 	mov.w	r1, #4294967295
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	fa01 f303 	lsl.w	r3, r1, r3
 800956a:	43d9      	mvns	r1, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009570:	4313      	orrs	r3, r2
}
 8009572:	4618      	mov	r0, r3
 8009574:	3724      	adds	r7, #36	@ 0x24
 8009576:	46bd      	mov	sp, r7
 8009578:	bc80      	pop	{r7}
 800957a:	4770      	bx	lr

0800957c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	3b01      	subs	r3, #1
 8009588:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800958c:	d301      	bcc.n	8009592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800958e:	2301      	movs	r3, #1
 8009590:	e00f      	b.n	80095b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009592:	4a0a      	ldr	r2, [pc, #40]	@ (80095bc <SysTick_Config+0x40>)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	3b01      	subs	r3, #1
 8009598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800959a:	210f      	movs	r1, #15
 800959c:	f04f 30ff 	mov.w	r0, #4294967295
 80095a0:	f7ff ff90 	bl	80094c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80095a4:	4b05      	ldr	r3, [pc, #20]	@ (80095bc <SysTick_Config+0x40>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80095aa:	4b04      	ldr	r3, [pc, #16]	@ (80095bc <SysTick_Config+0x40>)
 80095ac:	2207      	movs	r2, #7
 80095ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	e000e010 	.word	0xe000e010

080095c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f7ff ff2d 	bl	8009428 <__NVIC_SetPriorityGrouping>
}
 80095ce:	bf00      	nop
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b086      	sub	sp, #24
 80095da:	af00      	add	r7, sp, #0
 80095dc:	4603      	mov	r3, r0
 80095de:	60b9      	str	r1, [r7, #8]
 80095e0:	607a      	str	r2, [r7, #4]
 80095e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80095e4:	2300      	movs	r3, #0
 80095e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80095e8:	f7ff ff42 	bl	8009470 <__NVIC_GetPriorityGrouping>
 80095ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	68b9      	ldr	r1, [r7, #8]
 80095f2:	6978      	ldr	r0, [r7, #20]
 80095f4:	f7ff ff90 	bl	8009518 <NVIC_EncodePriority>
 80095f8:	4602      	mov	r2, r0
 80095fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095fe:	4611      	mov	r1, r2
 8009600:	4618      	mov	r0, r3
 8009602:	f7ff ff5f 	bl	80094c4 <__NVIC_SetPriority>
}
 8009606:	bf00      	nop
 8009608:	3718      	adds	r7, #24
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b082      	sub	sp, #8
 8009612:	af00      	add	r7, sp, #0
 8009614:	4603      	mov	r3, r0
 8009616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800961c:	4618      	mov	r0, r3
 800961e:	f7ff ff35 	bl	800948c <__NVIC_EnableIRQ>
}
 8009622:	bf00      	nop
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b082      	sub	sp, #8
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f7ff ffa2 	bl	800957c <SysTick_Config>
 8009638:	4603      	mov	r3, r0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
	...

08009644 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009644:	b480      	push	{r7}
 8009646:	b08b      	sub	sp, #44	@ 0x2c
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800964e:	2300      	movs	r3, #0
 8009650:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009652:	2300      	movs	r3, #0
 8009654:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009656:	e179      	b.n	800994c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009658:	2201      	movs	r2, #1
 800965a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800965c:	fa02 f303 	lsl.w	r3, r2, r3
 8009660:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	69fa      	ldr	r2, [r7, #28]
 8009668:	4013      	ands	r3, r2
 800966a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800966c:	69ba      	ldr	r2, [r7, #24]
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	429a      	cmp	r2, r3
 8009672:	f040 8168 	bne.w	8009946 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	4a96      	ldr	r2, [pc, #600]	@ (80098d4 <HAL_GPIO_Init+0x290>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d05e      	beq.n	800973e <HAL_GPIO_Init+0xfa>
 8009680:	4a94      	ldr	r2, [pc, #592]	@ (80098d4 <HAL_GPIO_Init+0x290>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d875      	bhi.n	8009772 <HAL_GPIO_Init+0x12e>
 8009686:	4a94      	ldr	r2, [pc, #592]	@ (80098d8 <HAL_GPIO_Init+0x294>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d058      	beq.n	800973e <HAL_GPIO_Init+0xfa>
 800968c:	4a92      	ldr	r2, [pc, #584]	@ (80098d8 <HAL_GPIO_Init+0x294>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d86f      	bhi.n	8009772 <HAL_GPIO_Init+0x12e>
 8009692:	4a92      	ldr	r2, [pc, #584]	@ (80098dc <HAL_GPIO_Init+0x298>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d052      	beq.n	800973e <HAL_GPIO_Init+0xfa>
 8009698:	4a90      	ldr	r2, [pc, #576]	@ (80098dc <HAL_GPIO_Init+0x298>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d869      	bhi.n	8009772 <HAL_GPIO_Init+0x12e>
 800969e:	4a90      	ldr	r2, [pc, #576]	@ (80098e0 <HAL_GPIO_Init+0x29c>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d04c      	beq.n	800973e <HAL_GPIO_Init+0xfa>
 80096a4:	4a8e      	ldr	r2, [pc, #568]	@ (80098e0 <HAL_GPIO_Init+0x29c>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d863      	bhi.n	8009772 <HAL_GPIO_Init+0x12e>
 80096aa:	4a8e      	ldr	r2, [pc, #568]	@ (80098e4 <HAL_GPIO_Init+0x2a0>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d046      	beq.n	800973e <HAL_GPIO_Init+0xfa>
 80096b0:	4a8c      	ldr	r2, [pc, #560]	@ (80098e4 <HAL_GPIO_Init+0x2a0>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d85d      	bhi.n	8009772 <HAL_GPIO_Init+0x12e>
 80096b6:	2b12      	cmp	r3, #18
 80096b8:	d82a      	bhi.n	8009710 <HAL_GPIO_Init+0xcc>
 80096ba:	2b12      	cmp	r3, #18
 80096bc:	d859      	bhi.n	8009772 <HAL_GPIO_Init+0x12e>
 80096be:	a201      	add	r2, pc, #4	@ (adr r2, 80096c4 <HAL_GPIO_Init+0x80>)
 80096c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c4:	0800973f 	.word	0x0800973f
 80096c8:	08009719 	.word	0x08009719
 80096cc:	0800972b 	.word	0x0800972b
 80096d0:	0800976d 	.word	0x0800976d
 80096d4:	08009773 	.word	0x08009773
 80096d8:	08009773 	.word	0x08009773
 80096dc:	08009773 	.word	0x08009773
 80096e0:	08009773 	.word	0x08009773
 80096e4:	08009773 	.word	0x08009773
 80096e8:	08009773 	.word	0x08009773
 80096ec:	08009773 	.word	0x08009773
 80096f0:	08009773 	.word	0x08009773
 80096f4:	08009773 	.word	0x08009773
 80096f8:	08009773 	.word	0x08009773
 80096fc:	08009773 	.word	0x08009773
 8009700:	08009773 	.word	0x08009773
 8009704:	08009773 	.word	0x08009773
 8009708:	08009721 	.word	0x08009721
 800970c:	08009735 	.word	0x08009735
 8009710:	4a75      	ldr	r2, [pc, #468]	@ (80098e8 <HAL_GPIO_Init+0x2a4>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d013      	beq.n	800973e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009716:	e02c      	b.n	8009772 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	623b      	str	r3, [r7, #32]
          break;
 800971e:	e029      	b.n	8009774 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	3304      	adds	r3, #4
 8009726:	623b      	str	r3, [r7, #32]
          break;
 8009728:	e024      	b.n	8009774 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	3308      	adds	r3, #8
 8009730:	623b      	str	r3, [r7, #32]
          break;
 8009732:	e01f      	b.n	8009774 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	330c      	adds	r3, #12
 800973a:	623b      	str	r3, [r7, #32]
          break;
 800973c:	e01a      	b.n	8009774 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d102      	bne.n	800974c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009746:	2304      	movs	r3, #4
 8009748:	623b      	str	r3, [r7, #32]
          break;
 800974a:	e013      	b.n	8009774 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d105      	bne.n	8009760 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009754:	2308      	movs	r3, #8
 8009756:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	69fa      	ldr	r2, [r7, #28]
 800975c:	611a      	str	r2, [r3, #16]
          break;
 800975e:	e009      	b.n	8009774 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009760:	2308      	movs	r3, #8
 8009762:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	69fa      	ldr	r2, [r7, #28]
 8009768:	615a      	str	r2, [r3, #20]
          break;
 800976a:	e003      	b.n	8009774 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800976c:	2300      	movs	r3, #0
 800976e:	623b      	str	r3, [r7, #32]
          break;
 8009770:	e000      	b.n	8009774 <HAL_GPIO_Init+0x130>
          break;
 8009772:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	2bff      	cmp	r3, #255	@ 0xff
 8009778:	d801      	bhi.n	800977e <HAL_GPIO_Init+0x13a>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	e001      	b.n	8009782 <HAL_GPIO_Init+0x13e>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	3304      	adds	r3, #4
 8009782:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	2bff      	cmp	r3, #255	@ 0xff
 8009788:	d802      	bhi.n	8009790 <HAL_GPIO_Init+0x14c>
 800978a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	e002      	b.n	8009796 <HAL_GPIO_Init+0x152>
 8009790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009792:	3b08      	subs	r3, #8
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	210f      	movs	r1, #15
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	fa01 f303 	lsl.w	r3, r1, r3
 80097a4:	43db      	mvns	r3, r3
 80097a6:	401a      	ands	r2, r3
 80097a8:	6a39      	ldr	r1, [r7, #32]
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	fa01 f303 	lsl.w	r3, r1, r3
 80097b0:	431a      	orrs	r2, r3
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f000 80c1 	beq.w	8009946 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80097c4:	4b49      	ldr	r3, [pc, #292]	@ (80098ec <HAL_GPIO_Init+0x2a8>)
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	4a48      	ldr	r2, [pc, #288]	@ (80098ec <HAL_GPIO_Init+0x2a8>)
 80097ca:	f043 0301 	orr.w	r3, r3, #1
 80097ce:	6193      	str	r3, [r2, #24]
 80097d0:	4b46      	ldr	r3, [pc, #280]	@ (80098ec <HAL_GPIO_Init+0x2a8>)
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	60bb      	str	r3, [r7, #8]
 80097da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80097dc:	4a44      	ldr	r2, [pc, #272]	@ (80098f0 <HAL_GPIO_Init+0x2ac>)
 80097de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e0:	089b      	lsrs	r3, r3, #2
 80097e2:	3302      	adds	r3, #2
 80097e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80097ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ec:	f003 0303 	and.w	r3, r3, #3
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	220f      	movs	r2, #15
 80097f4:	fa02 f303 	lsl.w	r3, r2, r3
 80097f8:	43db      	mvns	r3, r3
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	4013      	ands	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a3c      	ldr	r2, [pc, #240]	@ (80098f4 <HAL_GPIO_Init+0x2b0>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d01f      	beq.n	8009848 <HAL_GPIO_Init+0x204>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a3b      	ldr	r2, [pc, #236]	@ (80098f8 <HAL_GPIO_Init+0x2b4>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d019      	beq.n	8009844 <HAL_GPIO_Init+0x200>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a3a      	ldr	r2, [pc, #232]	@ (80098fc <HAL_GPIO_Init+0x2b8>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d013      	beq.n	8009840 <HAL_GPIO_Init+0x1fc>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a39      	ldr	r2, [pc, #228]	@ (8009900 <HAL_GPIO_Init+0x2bc>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d00d      	beq.n	800983c <HAL_GPIO_Init+0x1f8>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a38      	ldr	r2, [pc, #224]	@ (8009904 <HAL_GPIO_Init+0x2c0>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d007      	beq.n	8009838 <HAL_GPIO_Init+0x1f4>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a37      	ldr	r2, [pc, #220]	@ (8009908 <HAL_GPIO_Init+0x2c4>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d101      	bne.n	8009834 <HAL_GPIO_Init+0x1f0>
 8009830:	2305      	movs	r3, #5
 8009832:	e00a      	b.n	800984a <HAL_GPIO_Init+0x206>
 8009834:	2306      	movs	r3, #6
 8009836:	e008      	b.n	800984a <HAL_GPIO_Init+0x206>
 8009838:	2304      	movs	r3, #4
 800983a:	e006      	b.n	800984a <HAL_GPIO_Init+0x206>
 800983c:	2303      	movs	r3, #3
 800983e:	e004      	b.n	800984a <HAL_GPIO_Init+0x206>
 8009840:	2302      	movs	r3, #2
 8009842:	e002      	b.n	800984a <HAL_GPIO_Init+0x206>
 8009844:	2301      	movs	r3, #1
 8009846:	e000      	b.n	800984a <HAL_GPIO_Init+0x206>
 8009848:	2300      	movs	r3, #0
 800984a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800984c:	f002 0203 	and.w	r2, r2, #3
 8009850:	0092      	lsls	r2, r2, #2
 8009852:	4093      	lsls	r3, r2
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	4313      	orrs	r3, r2
 8009858:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800985a:	4925      	ldr	r1, [pc, #148]	@ (80098f0 <HAL_GPIO_Init+0x2ac>)
 800985c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985e:	089b      	lsrs	r3, r3, #2
 8009860:	3302      	adds	r3, #2
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d006      	beq.n	8009882 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009874:	4b25      	ldr	r3, [pc, #148]	@ (800990c <HAL_GPIO_Init+0x2c8>)
 8009876:	689a      	ldr	r2, [r3, #8]
 8009878:	4924      	ldr	r1, [pc, #144]	@ (800990c <HAL_GPIO_Init+0x2c8>)
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	4313      	orrs	r3, r2
 800987e:	608b      	str	r3, [r1, #8]
 8009880:	e006      	b.n	8009890 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009882:	4b22      	ldr	r3, [pc, #136]	@ (800990c <HAL_GPIO_Init+0x2c8>)
 8009884:	689a      	ldr	r2, [r3, #8]
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	43db      	mvns	r3, r3
 800988a:	4920      	ldr	r1, [pc, #128]	@ (800990c <HAL_GPIO_Init+0x2c8>)
 800988c:	4013      	ands	r3, r2
 800988e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009898:	2b00      	cmp	r3, #0
 800989a:	d006      	beq.n	80098aa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800989c:	4b1b      	ldr	r3, [pc, #108]	@ (800990c <HAL_GPIO_Init+0x2c8>)
 800989e:	68da      	ldr	r2, [r3, #12]
 80098a0:	491a      	ldr	r1, [pc, #104]	@ (800990c <HAL_GPIO_Init+0x2c8>)
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	60cb      	str	r3, [r1, #12]
 80098a8:	e006      	b.n	80098b8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80098aa:	4b18      	ldr	r3, [pc, #96]	@ (800990c <HAL_GPIO_Init+0x2c8>)
 80098ac:	68da      	ldr	r2, [r3, #12]
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	43db      	mvns	r3, r3
 80098b2:	4916      	ldr	r1, [pc, #88]	@ (800990c <HAL_GPIO_Init+0x2c8>)
 80098b4:	4013      	ands	r3, r2
 80098b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d025      	beq.n	8009910 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80098c4:	4b11      	ldr	r3, [pc, #68]	@ (800990c <HAL_GPIO_Init+0x2c8>)
 80098c6:	685a      	ldr	r2, [r3, #4]
 80098c8:	4910      	ldr	r1, [pc, #64]	@ (800990c <HAL_GPIO_Init+0x2c8>)
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	604b      	str	r3, [r1, #4]
 80098d0:	e025      	b.n	800991e <HAL_GPIO_Init+0x2da>
 80098d2:	bf00      	nop
 80098d4:	10320000 	.word	0x10320000
 80098d8:	10310000 	.word	0x10310000
 80098dc:	10220000 	.word	0x10220000
 80098e0:	10210000 	.word	0x10210000
 80098e4:	10120000 	.word	0x10120000
 80098e8:	10110000 	.word	0x10110000
 80098ec:	40021000 	.word	0x40021000
 80098f0:	40010000 	.word	0x40010000
 80098f4:	40010800 	.word	0x40010800
 80098f8:	40010c00 	.word	0x40010c00
 80098fc:	40011000 	.word	0x40011000
 8009900:	40011400 	.word	0x40011400
 8009904:	40011800 	.word	0x40011800
 8009908:	40011c00 	.word	0x40011c00
 800990c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009910:	4b15      	ldr	r3, [pc, #84]	@ (8009968 <HAL_GPIO_Init+0x324>)
 8009912:	685a      	ldr	r2, [r3, #4]
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	43db      	mvns	r3, r3
 8009918:	4913      	ldr	r1, [pc, #76]	@ (8009968 <HAL_GPIO_Init+0x324>)
 800991a:	4013      	ands	r3, r2
 800991c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d006      	beq.n	8009938 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800992a:	4b0f      	ldr	r3, [pc, #60]	@ (8009968 <HAL_GPIO_Init+0x324>)
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	490e      	ldr	r1, [pc, #56]	@ (8009968 <HAL_GPIO_Init+0x324>)
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	4313      	orrs	r3, r2
 8009934:	600b      	str	r3, [r1, #0]
 8009936:	e006      	b.n	8009946 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009938:	4b0b      	ldr	r3, [pc, #44]	@ (8009968 <HAL_GPIO_Init+0x324>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	43db      	mvns	r3, r3
 8009940:	4909      	ldr	r1, [pc, #36]	@ (8009968 <HAL_GPIO_Init+0x324>)
 8009942:	4013      	ands	r3, r2
 8009944:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009948:	3301      	adds	r3, #1
 800994a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009952:	fa22 f303 	lsr.w	r3, r2, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	f47f ae7e 	bne.w	8009658 <HAL_GPIO_Init+0x14>
  }
}
 800995c:	bf00      	nop
 800995e:	bf00      	nop
 8009960:	372c      	adds	r7, #44	@ 0x2c
 8009962:	46bd      	mov	sp, r7
 8009964:	bc80      	pop	{r7}
 8009966:	4770      	bx	lr
 8009968:	40010400 	.word	0x40010400

0800996c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800996c:	b480      	push	{r7}
 800996e:	b089      	sub	sp, #36	@ 0x24
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009976:	2300      	movs	r3, #0
 8009978:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800997a:	e0a6      	b.n	8009aca <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800997c:	2201      	movs	r2, #1
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	fa02 f303 	lsl.w	r3, r2, r3
 8009984:	683a      	ldr	r2, [r7, #0]
 8009986:	4013      	ands	r3, r2
 8009988:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 8099 	beq.w	8009ac4 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009992:	4a54      	ldr	r2, [pc, #336]	@ (8009ae4 <HAL_GPIO_DeInit+0x178>)
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	089b      	lsrs	r3, r3, #2
 8009998:	3302      	adds	r3, #2
 800999a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800999e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	f003 0303 	and.w	r3, r3, #3
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	220f      	movs	r2, #15
 80099aa:	fa02 f303 	lsl.w	r3, r2, r3
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	4013      	ands	r3, r2
 80099b2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a4c      	ldr	r2, [pc, #304]	@ (8009ae8 <HAL_GPIO_DeInit+0x17c>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d01f      	beq.n	80099fc <HAL_GPIO_DeInit+0x90>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a4b      	ldr	r2, [pc, #300]	@ (8009aec <HAL_GPIO_DeInit+0x180>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d019      	beq.n	80099f8 <HAL_GPIO_DeInit+0x8c>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a4a      	ldr	r2, [pc, #296]	@ (8009af0 <HAL_GPIO_DeInit+0x184>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d013      	beq.n	80099f4 <HAL_GPIO_DeInit+0x88>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a49      	ldr	r2, [pc, #292]	@ (8009af4 <HAL_GPIO_DeInit+0x188>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d00d      	beq.n	80099f0 <HAL_GPIO_DeInit+0x84>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a48      	ldr	r2, [pc, #288]	@ (8009af8 <HAL_GPIO_DeInit+0x18c>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d007      	beq.n	80099ec <HAL_GPIO_DeInit+0x80>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a47      	ldr	r2, [pc, #284]	@ (8009afc <HAL_GPIO_DeInit+0x190>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d101      	bne.n	80099e8 <HAL_GPIO_DeInit+0x7c>
 80099e4:	2305      	movs	r3, #5
 80099e6:	e00a      	b.n	80099fe <HAL_GPIO_DeInit+0x92>
 80099e8:	2306      	movs	r3, #6
 80099ea:	e008      	b.n	80099fe <HAL_GPIO_DeInit+0x92>
 80099ec:	2304      	movs	r3, #4
 80099ee:	e006      	b.n	80099fe <HAL_GPIO_DeInit+0x92>
 80099f0:	2303      	movs	r3, #3
 80099f2:	e004      	b.n	80099fe <HAL_GPIO_DeInit+0x92>
 80099f4:	2302      	movs	r3, #2
 80099f6:	e002      	b.n	80099fe <HAL_GPIO_DeInit+0x92>
 80099f8:	2301      	movs	r3, #1
 80099fa:	e000      	b.n	80099fe <HAL_GPIO_DeInit+0x92>
 80099fc:	2300      	movs	r3, #0
 80099fe:	69fa      	ldr	r2, [r7, #28]
 8009a00:	f002 0203 	and.w	r2, r2, #3
 8009a04:	0092      	lsls	r2, r2, #2
 8009a06:	4093      	lsls	r3, r2
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d132      	bne.n	8009a74 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009a0e:	4b3c      	ldr	r3, [pc, #240]	@ (8009b00 <HAL_GPIO_DeInit+0x194>)
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	43db      	mvns	r3, r3
 8009a16:	493a      	ldr	r1, [pc, #232]	@ (8009b00 <HAL_GPIO_DeInit+0x194>)
 8009a18:	4013      	ands	r3, r2
 8009a1a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009a1c:	4b38      	ldr	r3, [pc, #224]	@ (8009b00 <HAL_GPIO_DeInit+0x194>)
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	43db      	mvns	r3, r3
 8009a24:	4936      	ldr	r1, [pc, #216]	@ (8009b00 <HAL_GPIO_DeInit+0x194>)
 8009a26:	4013      	ands	r3, r2
 8009a28:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009a2a:	4b35      	ldr	r3, [pc, #212]	@ (8009b00 <HAL_GPIO_DeInit+0x194>)
 8009a2c:	68da      	ldr	r2, [r3, #12]
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	43db      	mvns	r3, r3
 8009a32:	4933      	ldr	r1, [pc, #204]	@ (8009b00 <HAL_GPIO_DeInit+0x194>)
 8009a34:	4013      	ands	r3, r2
 8009a36:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009a38:	4b31      	ldr	r3, [pc, #196]	@ (8009b00 <HAL_GPIO_DeInit+0x194>)
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	43db      	mvns	r3, r3
 8009a40:	492f      	ldr	r1, [pc, #188]	@ (8009b00 <HAL_GPIO_DeInit+0x194>)
 8009a42:	4013      	ands	r3, r2
 8009a44:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	f003 0303 	and.w	r3, r3, #3
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	220f      	movs	r2, #15
 8009a50:	fa02 f303 	lsl.w	r3, r2, r3
 8009a54:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009a56:	4a23      	ldr	r2, [pc, #140]	@ (8009ae4 <HAL_GPIO_DeInit+0x178>)
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	089b      	lsrs	r3, r3, #2
 8009a5c:	3302      	adds	r3, #2
 8009a5e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	43da      	mvns	r2, r3
 8009a66:	481f      	ldr	r0, [pc, #124]	@ (8009ae4 <HAL_GPIO_DeInit+0x178>)
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	089b      	lsrs	r3, r3, #2
 8009a6c:	400a      	ands	r2, r1
 8009a6e:	3302      	adds	r3, #2
 8009a70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	2bff      	cmp	r3, #255	@ 0xff
 8009a78:	d801      	bhi.n	8009a7e <HAL_GPIO_DeInit+0x112>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	e001      	b.n	8009a82 <HAL_GPIO_DeInit+0x116>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	3304      	adds	r3, #4
 8009a82:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	2bff      	cmp	r3, #255	@ 0xff
 8009a88:	d802      	bhi.n	8009a90 <HAL_GPIO_DeInit+0x124>
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	e002      	b.n	8009a96 <HAL_GPIO_DeInit+0x12a>
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	3b08      	subs	r3, #8
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	210f      	movs	r1, #15
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8009aa4:	43db      	mvns	r3, r3
 8009aa6:	401a      	ands	r2, r3
 8009aa8:	2104      	movs	r1, #4
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	fa01 f303 	lsl.w	r3, r1, r3
 8009ab0:	431a      	orrs	r2, r3
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68da      	ldr	r2, [r3, #12]
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	43db      	mvns	r3, r3
 8009abe:	401a      	ands	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	fa22 f303 	lsr.w	r3, r2, r3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f47f af52 	bne.w	800997c <HAL_GPIO_DeInit+0x10>
  }
}
 8009ad8:	bf00      	nop
 8009ada:	bf00      	nop
 8009adc:	3724      	adds	r7, #36	@ 0x24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bc80      	pop	{r7}
 8009ae2:	4770      	bx	lr
 8009ae4:	40010000 	.word	0x40010000
 8009ae8:	40010800 	.word	0x40010800
 8009aec:	40010c00 	.word	0x40010c00
 8009af0:	40011000 	.word	0x40011000
 8009af4:	40011400 	.word	0x40011400
 8009af8:	40011800 	.word	0x40011800
 8009afc:	40011c00 	.word	0x40011c00
 8009b00:	40010400 	.word	0x40010400

08009b04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	689a      	ldr	r2, [r3, #8]
 8009b14:	887b      	ldrh	r3, [r7, #2]
 8009b16:	4013      	ands	r3, r2
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d002      	beq.n	8009b22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	73fb      	strb	r3, [r7, #15]
 8009b20:	e001      	b.n	8009b26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009b22:	2300      	movs	r3, #0
 8009b24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3714      	adds	r7, #20
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bc80      	pop	{r7}
 8009b30:	4770      	bx	lr

08009b32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009b32:	b480      	push	{r7}
 8009b34:	b083      	sub	sp, #12
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	807b      	strh	r3, [r7, #2]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009b42:	787b      	ldrb	r3, [r7, #1]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d003      	beq.n	8009b50 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009b48:	887a      	ldrh	r2, [r7, #2]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009b4e:	e003      	b.n	8009b58 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009b50:	887b      	ldrh	r3, [r7, #2]
 8009b52:	041a      	lsls	r2, r3, #16
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	611a      	str	r2, [r3, #16]
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bc80      	pop	{r7}
 8009b60:	4770      	bx	lr

08009b62 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009b62:	b480      	push	{r7}
 8009b64:	b085      	sub	sp, #20
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009b74:	887a      	ldrh	r2, [r7, #2]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	4013      	ands	r3, r2
 8009b7a:	041a      	lsls	r2, r3, #16
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	43d9      	mvns	r1, r3
 8009b80:	887b      	ldrh	r3, [r7, #2]
 8009b82:	400b      	ands	r3, r1
 8009b84:	431a      	orrs	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	611a      	str	r2, [r3, #16]
}
 8009b8a:	bf00      	nop
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bc80      	pop	{r7}
 8009b92:	4770      	bx	lr

08009b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e12b      	b.n	8009dfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d106      	bne.n	8009bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff f97e 	bl	8008ebc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2224      	movs	r2, #36	@ 0x24
 8009bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f022 0201 	bic.w	r2, r2, #1
 8009bd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009be6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009bf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009bf8:	f001 fdb8 	bl	800b76c <HAL_RCC_GetPCLK1Freq>
 8009bfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	4a81      	ldr	r2, [pc, #516]	@ (8009e08 <HAL_I2C_Init+0x274>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d807      	bhi.n	8009c18 <HAL_I2C_Init+0x84>
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	4a80      	ldr	r2, [pc, #512]	@ (8009e0c <HAL_I2C_Init+0x278>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	bf94      	ite	ls
 8009c10:	2301      	movls	r3, #1
 8009c12:	2300      	movhi	r3, #0
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	e006      	b.n	8009c26 <HAL_I2C_Init+0x92>
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	4a7d      	ldr	r2, [pc, #500]	@ (8009e10 <HAL_I2C_Init+0x27c>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	bf94      	ite	ls
 8009c20:	2301      	movls	r3, #1
 8009c22:	2300      	movhi	r3, #0
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e0e7      	b.n	8009dfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4a78      	ldr	r2, [pc, #480]	@ (8009e14 <HAL_I2C_Init+0x280>)
 8009c32:	fba2 2303 	umull	r2, r3, r2, r3
 8009c36:	0c9b      	lsrs	r3, r3, #18
 8009c38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68ba      	ldr	r2, [r7, #8]
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	4a6a      	ldr	r2, [pc, #424]	@ (8009e08 <HAL_I2C_Init+0x274>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d802      	bhi.n	8009c68 <HAL_I2C_Init+0xd4>
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	3301      	adds	r3, #1
 8009c66:	e009      	b.n	8009c7c <HAL_I2C_Init+0xe8>
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009c6e:	fb02 f303 	mul.w	r3, r2, r3
 8009c72:	4a69      	ldr	r2, [pc, #420]	@ (8009e18 <HAL_I2C_Init+0x284>)
 8009c74:	fba2 2303 	umull	r2, r3, r2, r3
 8009c78:	099b      	lsrs	r3, r3, #6
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	6812      	ldr	r2, [r2, #0]
 8009c80:	430b      	orrs	r3, r1
 8009c82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	69db      	ldr	r3, [r3, #28]
 8009c8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009c8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	495c      	ldr	r1, [pc, #368]	@ (8009e08 <HAL_I2C_Init+0x274>)
 8009c98:	428b      	cmp	r3, r1
 8009c9a:	d819      	bhi.n	8009cd0 <HAL_I2C_Init+0x13c>
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	1e59      	subs	r1, r3, #1
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	005b      	lsls	r3, r3, #1
 8009ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8009caa:	1c59      	adds	r1, r3, #1
 8009cac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009cb0:	400b      	ands	r3, r1
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00a      	beq.n	8009ccc <HAL_I2C_Init+0x138>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	1e59      	subs	r1, r3, #1
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	005b      	lsls	r3, r3, #1
 8009cc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009cca:	e051      	b.n	8009d70 <HAL_I2C_Init+0x1dc>
 8009ccc:	2304      	movs	r3, #4
 8009cce:	e04f      	b.n	8009d70 <HAL_I2C_Init+0x1dc>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d111      	bne.n	8009cfc <HAL_I2C_Init+0x168>
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	1e58      	subs	r0, r3, #1
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6859      	ldr	r1, [r3, #4]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	005b      	lsls	r3, r3, #1
 8009ce4:	440b      	add	r3, r1
 8009ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009cea:	3301      	adds	r3, #1
 8009cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	bf0c      	ite	eq
 8009cf4:	2301      	moveq	r3, #1
 8009cf6:	2300      	movne	r3, #0
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	e012      	b.n	8009d22 <HAL_I2C_Init+0x18e>
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	1e58      	subs	r0, r3, #1
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6859      	ldr	r1, [r3, #4]
 8009d04:	460b      	mov	r3, r1
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	440b      	add	r3, r1
 8009d0a:	0099      	lsls	r1, r3, #2
 8009d0c:	440b      	add	r3, r1
 8009d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d12:	3301      	adds	r3, #1
 8009d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	bf0c      	ite	eq
 8009d1c:	2301      	moveq	r3, #1
 8009d1e:	2300      	movne	r3, #0
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d001      	beq.n	8009d2a <HAL_I2C_Init+0x196>
 8009d26:	2301      	movs	r3, #1
 8009d28:	e022      	b.n	8009d70 <HAL_I2C_Init+0x1dc>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d10e      	bne.n	8009d50 <HAL_I2C_Init+0x1bc>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	1e58      	subs	r0, r3, #1
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6859      	ldr	r1, [r3, #4]
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	005b      	lsls	r3, r3, #1
 8009d3e:	440b      	add	r3, r1
 8009d40:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d44:	3301      	adds	r3, #1
 8009d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d4e:	e00f      	b.n	8009d70 <HAL_I2C_Init+0x1dc>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	1e58      	subs	r0, r3, #1
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6859      	ldr	r1, [r3, #4]
 8009d58:	460b      	mov	r3, r1
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	440b      	add	r3, r1
 8009d5e:	0099      	lsls	r1, r3, #2
 8009d60:	440b      	add	r3, r1
 8009d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d66:	3301      	adds	r3, #1
 8009d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009d70:	6879      	ldr	r1, [r7, #4]
 8009d72:	6809      	ldr	r1, [r1, #0]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	69da      	ldr	r2, [r3, #28]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6a1b      	ldr	r3, [r3, #32]
 8009d8a:	431a      	orrs	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	430a      	orrs	r2, r1
 8009d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009d9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	6911      	ldr	r1, [r2, #16]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	68d2      	ldr	r2, [r2, #12]
 8009daa:	4311      	orrs	r1, r2
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	6812      	ldr	r2, [r2, #0]
 8009db0:	430b      	orrs	r3, r1
 8009db2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	695a      	ldr	r2, [r3, #20]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	699b      	ldr	r3, [r3, #24]
 8009dc6:	431a      	orrs	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	430a      	orrs	r2, r1
 8009dce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f042 0201 	orr.w	r2, r2, #1
 8009dde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2220      	movs	r2, #32
 8009dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	000186a0 	.word	0x000186a0
 8009e0c:	001e847f 	.word	0x001e847f
 8009e10:	003d08ff 	.word	0x003d08ff
 8009e14:	431bde83 	.word	0x431bde83
 8009e18:	10624dd3 	.word	0x10624dd3

08009e1c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e021      	b.n	8009e72 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2224      	movs	r2, #36	@ 0x24
 8009e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f022 0201 	bic.w	r2, r2, #1
 8009e44:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7ff f876 	bl	8008f38 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
	...

08009e7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b088      	sub	sp, #32
 8009e80:	af02      	add	r7, sp, #8
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	607a      	str	r2, [r7, #4]
 8009e86:	461a      	mov	r2, r3
 8009e88:	460b      	mov	r3, r1
 8009e8a:	817b      	strh	r3, [r7, #10]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009e90:	f7ff f9a0 	bl	80091d4 <HAL_GetTick>
 8009e94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b20      	cmp	r3, #32
 8009ea0:	f040 80e0 	bne.w	800a064 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	2319      	movs	r3, #25
 8009eaa:	2201      	movs	r2, #1
 8009eac:	4970      	ldr	r1, [pc, #448]	@ (800a070 <HAL_I2C_Master_Transmit+0x1f4>)
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f000 fe5c 	bl	800ab6c <I2C_WaitOnFlagUntilTimeout>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d001      	beq.n	8009ebe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009eba:	2302      	movs	r3, #2
 8009ebc:	e0d3      	b.n	800a066 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d101      	bne.n	8009ecc <HAL_I2C_Master_Transmit+0x50>
 8009ec8:	2302      	movs	r3, #2
 8009eca:	e0cc      	b.n	800a066 <HAL_I2C_Master_Transmit+0x1ea>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 0301 	and.w	r3, r3, #1
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d007      	beq.n	8009ef2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f042 0201 	orr.w	r2, r2, #1
 8009ef0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2221      	movs	r2, #33	@ 0x21
 8009f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2210      	movs	r2, #16
 8009f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	893a      	ldrh	r2, [r7, #8]
 8009f22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f28:	b29a      	uxth	r2, r3
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	4a50      	ldr	r2, [pc, #320]	@ (800a074 <HAL_I2C_Master_Transmit+0x1f8>)
 8009f32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009f34:	8979      	ldrh	r1, [r7, #10]
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	6a3a      	ldr	r2, [r7, #32]
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f000 fc16 	bl	800a76c <I2C_MasterRequestWrite>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e08d      	b.n	800a066 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	613b      	str	r3, [r7, #16]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	695b      	ldr	r3, [r3, #20]
 8009f54:	613b      	str	r3, [r7, #16]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	613b      	str	r3, [r7, #16]
 8009f5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009f60:	e066      	b.n	800a030 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	6a39      	ldr	r1, [r7, #32]
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f000 ff1a 	bl	800ada0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00d      	beq.n	8009f8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f76:	2b04      	cmp	r3, #4
 8009f78:	d107      	bne.n	8009f8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e06b      	b.n	800a066 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f92:	781a      	ldrb	r2, [r3, #0]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f9e:	1c5a      	adds	r2, r3, #1
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	3b01      	subs	r3, #1
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	695b      	ldr	r3, [r3, #20]
 8009fc4:	f003 0304 	and.w	r3, r3, #4
 8009fc8:	2b04      	cmp	r3, #4
 8009fca:	d11b      	bne.n	800a004 <HAL_I2C_Master_Transmit+0x188>
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d017      	beq.n	800a004 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd8:	781a      	ldrb	r2, [r3, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe4:	1c5a      	adds	r2, r3, #1
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a004:	697a      	ldr	r2, [r7, #20]
 800a006:	6a39      	ldr	r1, [r7, #32]
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 ff11 	bl	800ae30 <I2C_WaitOnBTFFlagUntilTimeout>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00d      	beq.n	800a030 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a018:	2b04      	cmp	r3, #4
 800a01a:	d107      	bne.n	800a02c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a02a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e01a      	b.n	800a066 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a034:	2b00      	cmp	r3, #0
 800a036:	d194      	bne.n	8009f62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a060:	2300      	movs	r3, #0
 800a062:	e000      	b.n	800a066 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a064:	2302      	movs	r3, #2
  }
}
 800a066:	4618      	mov	r0, r3
 800a068:	3718      	adds	r7, #24
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	00100002 	.word	0x00100002
 800a074:	ffff0000 	.word	0xffff0000

0800a078 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b088      	sub	sp, #32
 800a07c:	af02      	add	r7, sp, #8
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	4608      	mov	r0, r1
 800a082:	4611      	mov	r1, r2
 800a084:	461a      	mov	r2, r3
 800a086:	4603      	mov	r3, r0
 800a088:	817b      	strh	r3, [r7, #10]
 800a08a:	460b      	mov	r3, r1
 800a08c:	813b      	strh	r3, [r7, #8]
 800a08e:	4613      	mov	r3, r2
 800a090:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a092:	f7ff f89f 	bl	80091d4 <HAL_GetTick>
 800a096:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	2b20      	cmp	r3, #32
 800a0a2:	f040 80d9 	bne.w	800a258 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	2319      	movs	r3, #25
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	496d      	ldr	r1, [pc, #436]	@ (800a264 <HAL_I2C_Mem_Write+0x1ec>)
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 fd5b 	bl	800ab6c <I2C_WaitOnFlagUntilTimeout>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d001      	beq.n	800a0c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a0bc:	2302      	movs	r3, #2
 800a0be:	e0cc      	b.n	800a25a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d101      	bne.n	800a0ce <HAL_I2C_Mem_Write+0x56>
 800a0ca:	2302      	movs	r3, #2
 800a0cc:	e0c5      	b.n	800a25a <HAL_I2C_Mem_Write+0x1e2>
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 0301 	and.w	r3, r3, #1
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d007      	beq.n	800a0f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f042 0201 	orr.w	r2, r2, #1
 800a0f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a102:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2221      	movs	r2, #33	@ 0x21
 800a108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2240      	movs	r2, #64	@ 0x40
 800a110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2200      	movs	r2, #0
 800a118:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6a3a      	ldr	r2, [r7, #32]
 800a11e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a124:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	4a4d      	ldr	r2, [pc, #308]	@ (800a268 <HAL_I2C_Mem_Write+0x1f0>)
 800a134:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a136:	88f8      	ldrh	r0, [r7, #6]
 800a138:	893a      	ldrh	r2, [r7, #8]
 800a13a:	8979      	ldrh	r1, [r7, #10]
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	9301      	str	r3, [sp, #4]
 800a140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	4603      	mov	r3, r0
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f000 fb92 	bl	800a870 <I2C_RequestMemoryWrite>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d052      	beq.n	800a1f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e081      	b.n	800a25a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a15a:	68f8      	ldr	r0, [r7, #12]
 800a15c:	f000 fe20 	bl	800ada0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00d      	beq.n	800a182 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a16a:	2b04      	cmp	r3, #4
 800a16c:	d107      	bne.n	800a17e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a17c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e06b      	b.n	800a25a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a186:	781a      	ldrb	r2, [r3, #0]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a192:	1c5a      	adds	r2, r3, #1
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a19c:	3b01      	subs	r3, #1
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	f003 0304 	and.w	r3, r3, #4
 800a1bc:	2b04      	cmp	r3, #4
 800a1be:	d11b      	bne.n	800a1f8 <HAL_I2C_Mem_Write+0x180>
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d017      	beq.n	800a1f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1cc:	781a      	ldrb	r2, [r3, #0]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1d8:	1c5a      	adds	r2, r3, #1
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1aa      	bne.n	800a156 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a200:	697a      	ldr	r2, [r7, #20]
 800a202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f000 fe13 	bl	800ae30 <I2C_WaitOnBTFFlagUntilTimeout>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00d      	beq.n	800a22c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a214:	2b04      	cmp	r3, #4
 800a216:	d107      	bne.n	800a228 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a226:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	e016      	b.n	800a25a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a23a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2220      	movs	r2, #32
 800a240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a254:	2300      	movs	r3, #0
 800a256:	e000      	b.n	800a25a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a258:	2302      	movs	r3, #2
  }
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3718      	adds	r7, #24
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	00100002 	.word	0x00100002
 800a268:	ffff0000 	.word	0xffff0000

0800a26c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b08c      	sub	sp, #48	@ 0x30
 800a270:	af02      	add	r7, sp, #8
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	4608      	mov	r0, r1
 800a276:	4611      	mov	r1, r2
 800a278:	461a      	mov	r2, r3
 800a27a:	4603      	mov	r3, r0
 800a27c:	817b      	strh	r3, [r7, #10]
 800a27e:	460b      	mov	r3, r1
 800a280:	813b      	strh	r3, [r7, #8]
 800a282:	4613      	mov	r3, r2
 800a284:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a286:	2300      	movs	r3, #0
 800a288:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a28a:	f7fe ffa3 	bl	80091d4 <HAL_GetTick>
 800a28e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a296:	b2db      	uxtb	r3, r3
 800a298:	2b20      	cmp	r3, #32
 800a29a:	f040 8244 	bne.w	800a726 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	2319      	movs	r3, #25
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	4982      	ldr	r1, [pc, #520]	@ (800a4b0 <HAL_I2C_Mem_Read+0x244>)
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f000 fc5f 	bl	800ab6c <I2C_WaitOnFlagUntilTimeout>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d001      	beq.n	800a2b8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	e237      	b.n	800a728 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d101      	bne.n	800a2c6 <HAL_I2C_Mem_Read+0x5a>
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	e230      	b.n	800a728 <HAL_I2C_Mem_Read+0x4bc>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 0301 	and.w	r3, r3, #1
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d007      	beq.n	800a2ec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f042 0201 	orr.w	r2, r2, #1
 800a2ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a2fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2222      	movs	r2, #34	@ 0x22
 800a300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2240      	movs	r2, #64	@ 0x40
 800a308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a316:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a31c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a322:	b29a      	uxth	r2, r3
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	4a62      	ldr	r2, [pc, #392]	@ (800a4b4 <HAL_I2C_Mem_Read+0x248>)
 800a32c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a32e:	88f8      	ldrh	r0, [r7, #6]
 800a330:	893a      	ldrh	r2, [r7, #8]
 800a332:	8979      	ldrh	r1, [r7, #10]
 800a334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a336:	9301      	str	r3, [sp, #4]
 800a338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	4603      	mov	r3, r0
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f000 fb2c 	bl	800a99c <I2C_RequestMemoryRead>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	e1ec      	b.n	800a728 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a352:	2b00      	cmp	r3, #0
 800a354:	d113      	bne.n	800a37e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a356:	2300      	movs	r3, #0
 800a358:	61fb      	str	r3, [r7, #28]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	695b      	ldr	r3, [r3, #20]
 800a360:	61fb      	str	r3, [r7, #28]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	699b      	ldr	r3, [r3, #24]
 800a368:	61fb      	str	r3, [r7, #28]
 800a36a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a37a:	601a      	str	r2, [r3, #0]
 800a37c:	e1c0      	b.n	800a700 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a382:	2b01      	cmp	r3, #1
 800a384:	d11e      	bne.n	800a3c4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a394:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a396:	b672      	cpsid	i
}
 800a398:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a39a:	2300      	movs	r3, #0
 800a39c:	61bb      	str	r3, [r7, #24]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	695b      	ldr	r3, [r3, #20]
 800a3a4:	61bb      	str	r3, [r7, #24]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	61bb      	str	r3, [r7, #24]
 800a3ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a3be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a3c0:	b662      	cpsie	i
}
 800a3c2:	e035      	b.n	800a430 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d11e      	bne.n	800a40a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a3da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3dc:	b672      	cpsid	i
}
 800a3de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	617b      	str	r3, [r7, #20]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	695b      	ldr	r3, [r3, #20]
 800a3ea:	617b      	str	r3, [r7, #20]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	699b      	ldr	r3, [r3, #24]
 800a3f2:	617b      	str	r3, [r7, #20]
 800a3f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a404:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a406:	b662      	cpsie	i
}
 800a408:	e012      	b.n	800a430 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a418:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a41a:	2300      	movs	r3, #0
 800a41c:	613b      	str	r3, [r7, #16]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	695b      	ldr	r3, [r3, #20]
 800a424:	613b      	str	r3, [r7, #16]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	699b      	ldr	r3, [r3, #24]
 800a42c:	613b      	str	r3, [r7, #16]
 800a42e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a430:	e166      	b.n	800a700 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a436:	2b03      	cmp	r3, #3
 800a438:	f200 811f 	bhi.w	800a67a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a440:	2b01      	cmp	r3, #1
 800a442:	d123      	bne.n	800a48c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a446:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a448:	68f8      	ldr	r0, [r7, #12]
 800a44a:	f000 fd39 	bl	800aec0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d001      	beq.n	800a458 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	e167      	b.n	800a728 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	691a      	ldr	r2, [r3, #16]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a462:	b2d2      	uxtb	r2, r2
 800a464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a46a:	1c5a      	adds	r2, r3, #1
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a474:	3b01      	subs	r3, #1
 800a476:	b29a      	uxth	r2, r3
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a480:	b29b      	uxth	r3, r3
 800a482:	3b01      	subs	r3, #1
 800a484:	b29a      	uxth	r2, r3
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a48a:	e139      	b.n	800a700 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a490:	2b02      	cmp	r3, #2
 800a492:	d152      	bne.n	800a53a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a49a:	2200      	movs	r2, #0
 800a49c:	4906      	ldr	r1, [pc, #24]	@ (800a4b8 <HAL_I2C_Mem_Read+0x24c>)
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f000 fb64 	bl	800ab6c <I2C_WaitOnFlagUntilTimeout>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d008      	beq.n	800a4bc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e13c      	b.n	800a728 <HAL_I2C_Mem_Read+0x4bc>
 800a4ae:	bf00      	nop
 800a4b0:	00100002 	.word	0x00100002
 800a4b4:	ffff0000 	.word	0xffff0000
 800a4b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a4bc:	b672      	cpsid	i
}
 800a4be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	691a      	ldr	r2, [r3, #16]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4da:	b2d2      	uxtb	r2, r2
 800a4dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e2:	1c5a      	adds	r2, r3, #1
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	b29a      	uxth	r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a502:	b662      	cpsie	i
}
 800a504:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	691a      	ldr	r2, [r3, #16]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a510:	b2d2      	uxtb	r2, r2
 800a512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a518:	1c5a      	adds	r2, r3, #1
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a522:	3b01      	subs	r3, #1
 800a524:	b29a      	uxth	r2, r3
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a52e:	b29b      	uxth	r3, r3
 800a530:	3b01      	subs	r3, #1
 800a532:	b29a      	uxth	r2, r3
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a538:	e0e2      	b.n	800a700 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a540:	2200      	movs	r2, #0
 800a542:	497b      	ldr	r1, [pc, #492]	@ (800a730 <HAL_I2C_Mem_Read+0x4c4>)
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f000 fb11 	bl	800ab6c <I2C_WaitOnFlagUntilTimeout>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d001      	beq.n	800a554 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	e0e9      	b.n	800a728 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a562:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a564:	b672      	cpsid	i
}
 800a566:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	691a      	ldr	r2, [r3, #16]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a572:	b2d2      	uxtb	r2, r2
 800a574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a57a:	1c5a      	adds	r2, r3, #1
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a584:	3b01      	subs	r3, #1
 800a586:	b29a      	uxth	r2, r3
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a590:	b29b      	uxth	r3, r3
 800a592:	3b01      	subs	r3, #1
 800a594:	b29a      	uxth	r2, r3
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a59a:	4b66      	ldr	r3, [pc, #408]	@ (800a734 <HAL_I2C_Mem_Read+0x4c8>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	08db      	lsrs	r3, r3, #3
 800a5a0:	4a65      	ldr	r2, [pc, #404]	@ (800a738 <HAL_I2C_Mem_Read+0x4cc>)
 800a5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5a6:	0a1a      	lsrs	r2, r3, #8
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4413      	add	r3, r2
 800a5ae:	00da      	lsls	r2, r3, #3
 800a5b0:	1ad3      	subs	r3, r2, r3
 800a5b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a5b4:	6a3b      	ldr	r3, [r7, #32]
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a5ba:	6a3b      	ldr	r3, [r7, #32]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d118      	bne.n	800a5f2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2220      	movs	r2, #32
 800a5ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5da:	f043 0220 	orr.w	r2, r3, #32
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a5e2:	b662      	cpsie	i
}
 800a5e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e09a      	b.n	800a728 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	695b      	ldr	r3, [r3, #20]
 800a5f8:	f003 0304 	and.w	r3, r3, #4
 800a5fc:	2b04      	cmp	r3, #4
 800a5fe:	d1d9      	bne.n	800a5b4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a60e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	691a      	ldr	r2, [r3, #16]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a61a:	b2d2      	uxtb	r2, r2
 800a61c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a622:	1c5a      	adds	r2, r3, #1
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a62c:	3b01      	subs	r3, #1
 800a62e:	b29a      	uxth	r2, r3
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a638:	b29b      	uxth	r3, r3
 800a63a:	3b01      	subs	r3, #1
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a642:	b662      	cpsie	i
}
 800a644:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	691a      	ldr	r2, [r3, #16]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a650:	b2d2      	uxtb	r2, r2
 800a652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a658:	1c5a      	adds	r2, r3, #1
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a662:	3b01      	subs	r3, #1
 800a664:	b29a      	uxth	r2, r3
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a66e:	b29b      	uxth	r3, r3
 800a670:	3b01      	subs	r3, #1
 800a672:	b29a      	uxth	r2, r3
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a678:	e042      	b.n	800a700 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a67a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a67c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f000 fc1e 	bl	800aec0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d001      	beq.n	800a68e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e04c      	b.n	800a728 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	691a      	ldr	r2, [r3, #16]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a698:	b2d2      	uxtb	r2, r2
 800a69a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6a0:	1c5a      	adds	r2, r3, #1
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	b29a      	uxth	r2, r3
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	695b      	ldr	r3, [r3, #20]
 800a6c6:	f003 0304 	and.w	r3, r3, #4
 800a6ca:	2b04      	cmp	r3, #4
 800a6cc:	d118      	bne.n	800a700 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	691a      	ldr	r2, [r3, #16]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d8:	b2d2      	uxtb	r2, r2
 800a6da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e0:	1c5a      	adds	r2, r3, #1
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a704:	2b00      	cmp	r3, #0
 800a706:	f47f ae94 	bne.w	800a432 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2220      	movs	r2, #32
 800a70e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	e000      	b.n	800a728 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a726:	2302      	movs	r3, #2
  }
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3728      	adds	r7, #40	@ 0x28
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	00010004 	.word	0x00010004
 800a734:	20000cd8 	.word	0x20000cd8
 800a738:	14f8b589 	.word	0x14f8b589

0800a73c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a74a:	b2db      	uxtb	r3, r3
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	bc80      	pop	{r7}
 800a754:	4770      	bx	lr

0800a756 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a756:	b480      	push	{r7}
 800a758:	b083      	sub	sp, #12
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800a762:	4618      	mov	r0, r3
 800a764:	370c      	adds	r7, #12
 800a766:	46bd      	mov	sp, r7
 800a768:	bc80      	pop	{r7}
 800a76a:	4770      	bx	lr

0800a76c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b088      	sub	sp, #32
 800a770:	af02      	add	r7, sp, #8
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	607a      	str	r2, [r7, #4]
 800a776:	603b      	str	r3, [r7, #0]
 800a778:	460b      	mov	r3, r1
 800a77a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a780:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2b08      	cmp	r3, #8
 800a786:	d006      	beq.n	800a796 <I2C_MasterRequestWrite+0x2a>
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d003      	beq.n	800a796 <I2C_MasterRequestWrite+0x2a>
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a794:	d108      	bne.n	800a7a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a7a4:	601a      	str	r2, [r3, #0]
 800a7a6:	e00b      	b.n	800a7c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7ac:	2b12      	cmp	r3, #18
 800a7ae:	d107      	bne.n	800a7c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a7be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f000 f9cd 	bl	800ab6c <I2C_WaitOnFlagUntilTimeout>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00d      	beq.n	800a7f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7e6:	d103      	bne.n	800a7f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a7ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	e035      	b.n	800a860 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	691b      	ldr	r3, [r3, #16]
 800a7f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7fc:	d108      	bne.n	800a810 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a7fe:	897b      	ldrh	r3, [r7, #10]
 800a800:	b2db      	uxtb	r3, r3
 800a802:	461a      	mov	r2, r3
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a80c:	611a      	str	r2, [r3, #16]
 800a80e:	e01b      	b.n	800a848 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a810:	897b      	ldrh	r3, [r7, #10]
 800a812:	11db      	asrs	r3, r3, #7
 800a814:	b2db      	uxtb	r3, r3
 800a816:	f003 0306 	and.w	r3, r3, #6
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	f063 030f 	orn	r3, r3, #15
 800a820:	b2da      	uxtb	r2, r3
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	490e      	ldr	r1, [pc, #56]	@ (800a868 <I2C_MasterRequestWrite+0xfc>)
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	f000 fa16 	bl	800ac60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d001      	beq.n	800a83e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e010      	b.n	800a860 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a83e:	897b      	ldrh	r3, [r7, #10]
 800a840:	b2da      	uxtb	r2, r3
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	4907      	ldr	r1, [pc, #28]	@ (800a86c <I2C_MasterRequestWrite+0x100>)
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f000 fa06 	bl	800ac60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d001      	beq.n	800a85e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e000      	b.n	800a860 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3718      	adds	r7, #24
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	00010008 	.word	0x00010008
 800a86c:	00010002 	.word	0x00010002

0800a870 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b088      	sub	sp, #32
 800a874:	af02      	add	r7, sp, #8
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	4608      	mov	r0, r1
 800a87a:	4611      	mov	r1, r2
 800a87c:	461a      	mov	r2, r3
 800a87e:	4603      	mov	r3, r0
 800a880:	817b      	strh	r3, [r7, #10]
 800a882:	460b      	mov	r3, r1
 800a884:	813b      	strh	r3, [r7, #8]
 800a886:	4613      	mov	r3, r2
 800a888:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a898:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89c:	9300      	str	r3, [sp, #0]
 800a89e:	6a3b      	ldr	r3, [r7, #32]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f000 f960 	bl	800ab6c <I2C_WaitOnFlagUntilTimeout>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00d      	beq.n	800a8ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8c0:	d103      	bne.n	800a8ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a8c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	e05f      	b.n	800a98e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a8ce:	897b      	ldrh	r3, [r7, #10]
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a8dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e0:	6a3a      	ldr	r2, [r7, #32]
 800a8e2:	492d      	ldr	r1, [pc, #180]	@ (800a998 <I2C_RequestMemoryWrite+0x128>)
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f000 f9bb 	bl	800ac60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d001      	beq.n	800a8f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e04c      	b.n	800a98e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	617b      	str	r3, [r7, #20]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	695b      	ldr	r3, [r3, #20]
 800a8fe:	617b      	str	r3, [r7, #20]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	617b      	str	r3, [r7, #20]
 800a908:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a90a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a90c:	6a39      	ldr	r1, [r7, #32]
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f000 fa46 	bl	800ada0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00d      	beq.n	800a936 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a91e:	2b04      	cmp	r3, #4
 800a920:	d107      	bne.n	800a932 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a930:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	e02b      	b.n	800a98e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a936:	88fb      	ldrh	r3, [r7, #6]
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d105      	bne.n	800a948 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a93c:	893b      	ldrh	r3, [r7, #8]
 800a93e:	b2da      	uxtb	r2, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	611a      	str	r2, [r3, #16]
 800a946:	e021      	b.n	800a98c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a948:	893b      	ldrh	r3, [r7, #8]
 800a94a:	0a1b      	lsrs	r3, r3, #8
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	b2da      	uxtb	r2, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a958:	6a39      	ldr	r1, [r7, #32]
 800a95a:	68f8      	ldr	r0, [r7, #12]
 800a95c:	f000 fa20 	bl	800ada0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00d      	beq.n	800a982 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a96a:	2b04      	cmp	r3, #4
 800a96c:	d107      	bne.n	800a97e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a97c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	e005      	b.n	800a98e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a982:	893b      	ldrh	r3, [r7, #8]
 800a984:	b2da      	uxtb	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3718      	adds	r7, #24
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	00010002 	.word	0x00010002

0800a99c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b088      	sub	sp, #32
 800a9a0:	af02      	add	r7, sp, #8
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	4608      	mov	r0, r1
 800a9a6:	4611      	mov	r1, r2
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	817b      	strh	r3, [r7, #10]
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	813b      	strh	r3, [r7, #8]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a9c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a9d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	6a3b      	ldr	r3, [r7, #32]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f000 f8c2 	bl	800ab6c <I2C_WaitOnFlagUntilTimeout>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00d      	beq.n	800aa0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9fc:	d103      	bne.n	800aa06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800aa06:	2303      	movs	r3, #3
 800aa08:	e0aa      	b.n	800ab60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aa0a:	897b      	ldrh	r3, [r7, #10]
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	461a      	mov	r2, r3
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800aa18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1c:	6a3a      	ldr	r2, [r7, #32]
 800aa1e:	4952      	ldr	r1, [pc, #328]	@ (800ab68 <I2C_RequestMemoryRead+0x1cc>)
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f000 f91d 	bl	800ac60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d001      	beq.n	800aa30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e097      	b.n	800ab60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa30:	2300      	movs	r3, #0
 800aa32:	617b      	str	r3, [r7, #20]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	695b      	ldr	r3, [r3, #20]
 800aa3a:	617b      	str	r3, [r7, #20]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	617b      	str	r3, [r7, #20]
 800aa44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa48:	6a39      	ldr	r1, [r7, #32]
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f000 f9a8 	bl	800ada0 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00d      	beq.n	800aa72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa5a:	2b04      	cmp	r3, #4
 800aa5c:	d107      	bne.n	800aa6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e076      	b.n	800ab60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aa72:	88fb      	ldrh	r3, [r7, #6]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d105      	bne.n	800aa84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aa78:	893b      	ldrh	r3, [r7, #8]
 800aa7a:	b2da      	uxtb	r2, r3
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	611a      	str	r2, [r3, #16]
 800aa82:	e021      	b.n	800aac8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aa84:	893b      	ldrh	r3, [r7, #8]
 800aa86:	0a1b      	lsrs	r3, r3, #8
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	b2da      	uxtb	r2, r3
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa94:	6a39      	ldr	r1, [r7, #32]
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f000 f982 	bl	800ada0 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00d      	beq.n	800aabe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaa6:	2b04      	cmp	r3, #4
 800aaa8:	d107      	bne.n	800aaba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aab8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e050      	b.n	800ab60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aabe:	893b      	ldrh	r3, [r7, #8]
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aaca:	6a39      	ldr	r1, [r7, #32]
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f000 f967 	bl	800ada0 <I2C_WaitOnTXEFlagUntilTimeout>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00d      	beq.n	800aaf4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aadc:	2b04      	cmp	r3, #4
 800aade:	d107      	bne.n	800aaf0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aaee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e035      	b.n	800ab60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ab04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	6a3b      	ldr	r3, [r7, #32]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f000 f82b 	bl	800ab6c <I2C_WaitOnFlagUntilTimeout>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00d      	beq.n	800ab38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab2a:	d103      	bne.n	800ab34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ab34:	2303      	movs	r3, #3
 800ab36:	e013      	b.n	800ab60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ab38:	897b      	ldrh	r3, [r7, #10]
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	f043 0301 	orr.w	r3, r3, #1
 800ab40:	b2da      	uxtb	r2, r3
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ab48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4a:	6a3a      	ldr	r2, [r7, #32]
 800ab4c:	4906      	ldr	r1, [pc, #24]	@ (800ab68 <I2C_RequestMemoryRead+0x1cc>)
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f000 f886 	bl	800ac60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d001      	beq.n	800ab5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e000      	b.n	800ab60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3718      	adds	r7, #24
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	00010002 	.word	0x00010002

0800ab6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	603b      	str	r3, [r7, #0]
 800ab78:	4613      	mov	r3, r2
 800ab7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ab7c:	e048      	b.n	800ac10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab84:	d044      	beq.n	800ac10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab86:	f7fe fb25 	bl	80091d4 <HAL_GetTick>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	69bb      	ldr	r3, [r7, #24]
 800ab8e:	1ad3      	subs	r3, r2, r3
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d302      	bcc.n	800ab9c <I2C_WaitOnFlagUntilTimeout+0x30>
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d139      	bne.n	800ac10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	0c1b      	lsrs	r3, r3, #16
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d10d      	bne.n	800abc2 <I2C_WaitOnFlagUntilTimeout+0x56>
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	695b      	ldr	r3, [r3, #20]
 800abac:	43da      	mvns	r2, r3
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	4013      	ands	r3, r2
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	bf0c      	ite	eq
 800abb8:	2301      	moveq	r3, #1
 800abba:	2300      	movne	r3, #0
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	461a      	mov	r2, r3
 800abc0:	e00c      	b.n	800abdc <I2C_WaitOnFlagUntilTimeout+0x70>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	43da      	mvns	r2, r3
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	4013      	ands	r3, r2
 800abce:	b29b      	uxth	r3, r3
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	bf0c      	ite	eq
 800abd4:	2301      	moveq	r3, #1
 800abd6:	2300      	movne	r3, #0
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	461a      	mov	r2, r3
 800abdc:	79fb      	ldrb	r3, [r7, #7]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d116      	bne.n	800ac10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2220      	movs	r2, #32
 800abec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abfc:	f043 0220 	orr.w	r2, r3, #32
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e023      	b.n	800ac58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	0c1b      	lsrs	r3, r3, #16
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d10d      	bne.n	800ac36 <I2C_WaitOnFlagUntilTimeout+0xca>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	695b      	ldr	r3, [r3, #20]
 800ac20:	43da      	mvns	r2, r3
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	4013      	ands	r3, r2
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	bf0c      	ite	eq
 800ac2c:	2301      	moveq	r3, #1
 800ac2e:	2300      	movne	r3, #0
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	461a      	mov	r2, r3
 800ac34:	e00c      	b.n	800ac50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	699b      	ldr	r3, [r3, #24]
 800ac3c:	43da      	mvns	r2, r3
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	4013      	ands	r3, r2
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	bf0c      	ite	eq
 800ac48:	2301      	moveq	r3, #1
 800ac4a:	2300      	movne	r3, #0
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	461a      	mov	r2, r3
 800ac50:	79fb      	ldrb	r3, [r7, #7]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d093      	beq.n	800ab7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	607a      	str	r2, [r7, #4]
 800ac6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ac6e:	e071      	b.n	800ad54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	695b      	ldr	r3, [r3, #20]
 800ac76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac7e:	d123      	bne.n	800acc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ac98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2220      	movs	r2, #32
 800aca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2200      	movs	r2, #0
 800acac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acb4:	f043 0204 	orr.w	r2, r3, #4
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	e067      	b.n	800ad98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acce:	d041      	beq.n	800ad54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acd0:	f7fe fa80 	bl	80091d4 <HAL_GetTick>
 800acd4:	4602      	mov	r2, r0
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d302      	bcc.n	800ace6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d136      	bne.n	800ad54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	0c1b      	lsrs	r3, r3, #16
 800acea:	b2db      	uxtb	r3, r3
 800acec:	2b01      	cmp	r3, #1
 800acee:	d10c      	bne.n	800ad0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	695b      	ldr	r3, [r3, #20]
 800acf6:	43da      	mvns	r2, r3
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	4013      	ands	r3, r2
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	bf14      	ite	ne
 800ad02:	2301      	movne	r3, #1
 800ad04:	2300      	moveq	r3, #0
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	e00b      	b.n	800ad22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	699b      	ldr	r3, [r3, #24]
 800ad10:	43da      	mvns	r2, r3
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	4013      	ands	r3, r2
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	bf14      	ite	ne
 800ad1c:	2301      	movne	r3, #1
 800ad1e:	2300      	moveq	r3, #0
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d016      	beq.n	800ad54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2220      	movs	r2, #32
 800ad30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad40:	f043 0220 	orr.w	r2, r3, #32
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	e021      	b.n	800ad98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	0c1b      	lsrs	r3, r3, #16
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d10c      	bne.n	800ad78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	695b      	ldr	r3, [r3, #20]
 800ad64:	43da      	mvns	r2, r3
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	4013      	ands	r3, r2
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	bf14      	ite	ne
 800ad70:	2301      	movne	r3, #1
 800ad72:	2300      	moveq	r3, #0
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	e00b      	b.n	800ad90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	43da      	mvns	r2, r3
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	4013      	ands	r3, r2
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	bf14      	ite	ne
 800ad8a:	2301      	movne	r3, #1
 800ad8c:	2300      	moveq	r3, #0
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f47f af6d 	bne.w	800ac70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3710      	adds	r7, #16
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800adac:	e034      	b.n	800ae18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f000 f8e3 	bl	800af7a <I2C_IsAcknowledgeFailed>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	e034      	b.n	800ae28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc4:	d028      	beq.n	800ae18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adc6:	f7fe fa05 	bl	80091d4 <HAL_GetTick>
 800adca:	4602      	mov	r2, r0
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	1ad3      	subs	r3, r2, r3
 800add0:	68ba      	ldr	r2, [r7, #8]
 800add2:	429a      	cmp	r2, r3
 800add4:	d302      	bcc.n	800addc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d11d      	bne.n	800ae18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	695b      	ldr	r3, [r3, #20]
 800ade2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ade6:	2b80      	cmp	r3, #128	@ 0x80
 800ade8:	d016      	beq.n	800ae18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2200      	movs	r2, #0
 800adee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2220      	movs	r2, #32
 800adf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae04:	f043 0220 	orr.w	r2, r3, #32
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	e007      	b.n	800ae28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae22:	2b80      	cmp	r3, #128	@ 0x80
 800ae24:	d1c3      	bne.n	800adae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ae3c:	e034      	b.n	800aea8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f000 f89b 	bl	800af7a <I2C_IsAcknowledgeFailed>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e034      	b.n	800aeb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae54:	d028      	beq.n	800aea8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae56:	f7fe f9bd 	bl	80091d4 <HAL_GetTick>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	68ba      	ldr	r2, [r7, #8]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d302      	bcc.n	800ae6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d11d      	bne.n	800aea8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	695b      	ldr	r3, [r3, #20]
 800ae72:	f003 0304 	and.w	r3, r3, #4
 800ae76:	2b04      	cmp	r3, #4
 800ae78:	d016      	beq.n	800aea8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2220      	movs	r2, #32
 800ae84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae94:	f043 0220 	orr.w	r2, r3, #32
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
 800aea6:	e007      	b.n	800aeb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	695b      	ldr	r3, [r3, #20]
 800aeae:	f003 0304 	and.w	r3, r3, #4
 800aeb2:	2b04      	cmp	r3, #4
 800aeb4:	d1c3      	bne.n	800ae3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3710      	adds	r7, #16
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aecc:	e049      	b.n	800af62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	695b      	ldr	r3, [r3, #20]
 800aed4:	f003 0310 	and.w	r3, r3, #16
 800aed8:	2b10      	cmp	r3, #16
 800aeda:	d119      	bne.n	800af10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f06f 0210 	mvn.w	r2, #16
 800aee4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2220      	movs	r2, #32
 800aef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2200      	movs	r2, #0
 800af08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800af0c:	2301      	movs	r3, #1
 800af0e:	e030      	b.n	800af72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af10:	f7fe f960 	bl	80091d4 <HAL_GetTick>
 800af14:	4602      	mov	r2, r0
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	1ad3      	subs	r3, r2, r3
 800af1a:	68ba      	ldr	r2, [r7, #8]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d302      	bcc.n	800af26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d11d      	bne.n	800af62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	695b      	ldr	r3, [r3, #20]
 800af2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af30:	2b40      	cmp	r3, #64	@ 0x40
 800af32:	d016      	beq.n	800af62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2200      	movs	r2, #0
 800af38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2220      	movs	r2, #32
 800af3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af4e:	f043 0220 	orr.w	r2, r3, #32
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2200      	movs	r2, #0
 800af5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	e007      	b.n	800af72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	695b      	ldr	r3, [r3, #20]
 800af68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af6c:	2b40      	cmp	r3, #64	@ 0x40
 800af6e:	d1ae      	bne.n	800aece <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800af7a:	b480      	push	{r7}
 800af7c:	b083      	sub	sp, #12
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	695b      	ldr	r3, [r3, #20]
 800af88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af90:	d11b      	bne.n	800afca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800af9a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2220      	movs	r2, #32
 800afa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afb6:	f043 0204 	orr.w	r2, r3, #4
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	e000      	b.n	800afcc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bc80      	pop	{r7}
 800afd4:	4770      	bx	lr
	...

0800afd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b086      	sub	sp, #24
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d101      	bne.n	800afea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	e272      	b.n	800b4d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f003 0301 	and.w	r3, r3, #1
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f000 8087 	beq.w	800b106 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800aff8:	4b92      	ldr	r3, [pc, #584]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	f003 030c 	and.w	r3, r3, #12
 800b000:	2b04      	cmp	r3, #4
 800b002:	d00c      	beq.n	800b01e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b004:	4b8f      	ldr	r3, [pc, #572]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	f003 030c 	and.w	r3, r3, #12
 800b00c:	2b08      	cmp	r3, #8
 800b00e:	d112      	bne.n	800b036 <HAL_RCC_OscConfig+0x5e>
 800b010:	4b8c      	ldr	r3, [pc, #560]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b01c:	d10b      	bne.n	800b036 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b01e:	4b89      	ldr	r3, [pc, #548]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b026:	2b00      	cmp	r3, #0
 800b028:	d06c      	beq.n	800b104 <HAL_RCC_OscConfig+0x12c>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d168      	bne.n	800b104 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e24c      	b.n	800b4d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b03e:	d106      	bne.n	800b04e <HAL_RCC_OscConfig+0x76>
 800b040:	4b80      	ldr	r3, [pc, #512]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a7f      	ldr	r2, [pc, #508]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b046:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b04a:	6013      	str	r3, [r2, #0]
 800b04c:	e02e      	b.n	800b0ac <HAL_RCC_OscConfig+0xd4>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10c      	bne.n	800b070 <HAL_RCC_OscConfig+0x98>
 800b056:	4b7b      	ldr	r3, [pc, #492]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a7a      	ldr	r2, [pc, #488]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b05c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b060:	6013      	str	r3, [r2, #0]
 800b062:	4b78      	ldr	r3, [pc, #480]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a77      	ldr	r2, [pc, #476]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b068:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b06c:	6013      	str	r3, [r2, #0]
 800b06e:	e01d      	b.n	800b0ac <HAL_RCC_OscConfig+0xd4>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b078:	d10c      	bne.n	800b094 <HAL_RCC_OscConfig+0xbc>
 800b07a:	4b72      	ldr	r3, [pc, #456]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a71      	ldr	r2, [pc, #452]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b084:	6013      	str	r3, [r2, #0]
 800b086:	4b6f      	ldr	r3, [pc, #444]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a6e      	ldr	r2, [pc, #440]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b08c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b090:	6013      	str	r3, [r2, #0]
 800b092:	e00b      	b.n	800b0ac <HAL_RCC_OscConfig+0xd4>
 800b094:	4b6b      	ldr	r3, [pc, #428]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a6a      	ldr	r2, [pc, #424]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b09a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b09e:	6013      	str	r3, [r2, #0]
 800b0a0:	4b68      	ldr	r3, [pc, #416]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a67      	ldr	r2, [pc, #412]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b0a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b0aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d013      	beq.n	800b0dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0b4:	f7fe f88e 	bl	80091d4 <HAL_GetTick>
 800b0b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b0ba:	e008      	b.n	800b0ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b0bc:	f7fe f88a 	bl	80091d4 <HAL_GetTick>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	1ad3      	subs	r3, r2, r3
 800b0c6:	2b64      	cmp	r3, #100	@ 0x64
 800b0c8:	d901      	bls.n	800b0ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	e200      	b.n	800b4d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b0ce:	4b5d      	ldr	r3, [pc, #372]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d0f0      	beq.n	800b0bc <HAL_RCC_OscConfig+0xe4>
 800b0da:	e014      	b.n	800b106 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0dc:	f7fe f87a 	bl	80091d4 <HAL_GetTick>
 800b0e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b0e2:	e008      	b.n	800b0f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b0e4:	f7fe f876 	bl	80091d4 <HAL_GetTick>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	1ad3      	subs	r3, r2, r3
 800b0ee:	2b64      	cmp	r3, #100	@ 0x64
 800b0f0:	d901      	bls.n	800b0f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b0f2:	2303      	movs	r3, #3
 800b0f4:	e1ec      	b.n	800b4d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b0f6:	4b53      	ldr	r3, [pc, #332]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1f0      	bne.n	800b0e4 <HAL_RCC_OscConfig+0x10c>
 800b102:	e000      	b.n	800b106 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f003 0302 	and.w	r3, r3, #2
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d063      	beq.n	800b1da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b112:	4b4c      	ldr	r3, [pc, #304]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	f003 030c 	and.w	r3, r3, #12
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00b      	beq.n	800b136 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b11e:	4b49      	ldr	r3, [pc, #292]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	f003 030c 	and.w	r3, r3, #12
 800b126:	2b08      	cmp	r3, #8
 800b128:	d11c      	bne.n	800b164 <HAL_RCC_OscConfig+0x18c>
 800b12a:	4b46      	ldr	r3, [pc, #280]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b132:	2b00      	cmp	r3, #0
 800b134:	d116      	bne.n	800b164 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b136:	4b43      	ldr	r3, [pc, #268]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f003 0302 	and.w	r3, r3, #2
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d005      	beq.n	800b14e <HAL_RCC_OscConfig+0x176>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	2b01      	cmp	r3, #1
 800b148:	d001      	beq.n	800b14e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	e1c0      	b.n	800b4d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b14e:	4b3d      	ldr	r3, [pc, #244]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	695b      	ldr	r3, [r3, #20]
 800b15a:	00db      	lsls	r3, r3, #3
 800b15c:	4939      	ldr	r1, [pc, #228]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b15e:	4313      	orrs	r3, r2
 800b160:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b162:	e03a      	b.n	800b1da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d020      	beq.n	800b1ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b16c:	4b36      	ldr	r3, [pc, #216]	@ (800b248 <HAL_RCC_OscConfig+0x270>)
 800b16e:	2201      	movs	r2, #1
 800b170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b172:	f7fe f82f 	bl	80091d4 <HAL_GetTick>
 800b176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b178:	e008      	b.n	800b18c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b17a:	f7fe f82b 	bl	80091d4 <HAL_GetTick>
 800b17e:	4602      	mov	r2, r0
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	1ad3      	subs	r3, r2, r3
 800b184:	2b02      	cmp	r3, #2
 800b186:	d901      	bls.n	800b18c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b188:	2303      	movs	r3, #3
 800b18a:	e1a1      	b.n	800b4d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b18c:	4b2d      	ldr	r3, [pc, #180]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f003 0302 	and.w	r3, r3, #2
 800b194:	2b00      	cmp	r3, #0
 800b196:	d0f0      	beq.n	800b17a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b198:	4b2a      	ldr	r3, [pc, #168]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	695b      	ldr	r3, [r3, #20]
 800b1a4:	00db      	lsls	r3, r3, #3
 800b1a6:	4927      	ldr	r1, [pc, #156]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	600b      	str	r3, [r1, #0]
 800b1ac:	e015      	b.n	800b1da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b1ae:	4b26      	ldr	r3, [pc, #152]	@ (800b248 <HAL_RCC_OscConfig+0x270>)
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1b4:	f7fe f80e 	bl	80091d4 <HAL_GetTick>
 800b1b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b1ba:	e008      	b.n	800b1ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b1bc:	f7fe f80a 	bl	80091d4 <HAL_GetTick>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	1ad3      	subs	r3, r2, r3
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	d901      	bls.n	800b1ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b1ca:	2303      	movs	r3, #3
 800b1cc:	e180      	b.n	800b4d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b1ce:	4b1d      	ldr	r3, [pc, #116]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f003 0302 	and.w	r3, r3, #2
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1f0      	bne.n	800b1bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f003 0308 	and.w	r3, r3, #8
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d03a      	beq.n	800b25c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d019      	beq.n	800b222 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b1ee:	4b17      	ldr	r3, [pc, #92]	@ (800b24c <HAL_RCC_OscConfig+0x274>)
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b1f4:	f7fd ffee 	bl	80091d4 <HAL_GetTick>
 800b1f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b1fa:	e008      	b.n	800b20e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b1fc:	f7fd ffea 	bl	80091d4 <HAL_GetTick>
 800b200:	4602      	mov	r2, r0
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	1ad3      	subs	r3, r2, r3
 800b206:	2b02      	cmp	r3, #2
 800b208:	d901      	bls.n	800b20e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b20a:	2303      	movs	r3, #3
 800b20c:	e160      	b.n	800b4d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b20e:	4b0d      	ldr	r3, [pc, #52]	@ (800b244 <HAL_RCC_OscConfig+0x26c>)
 800b210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b212:	f003 0302 	and.w	r3, r3, #2
 800b216:	2b00      	cmp	r3, #0
 800b218:	d0f0      	beq.n	800b1fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b21a:	2001      	movs	r0, #1
 800b21c:	f000 face 	bl	800b7bc <RCC_Delay>
 800b220:	e01c      	b.n	800b25c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b222:	4b0a      	ldr	r3, [pc, #40]	@ (800b24c <HAL_RCC_OscConfig+0x274>)
 800b224:	2200      	movs	r2, #0
 800b226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b228:	f7fd ffd4 	bl	80091d4 <HAL_GetTick>
 800b22c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b22e:	e00f      	b.n	800b250 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b230:	f7fd ffd0 	bl	80091d4 <HAL_GetTick>
 800b234:	4602      	mov	r2, r0
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	d908      	bls.n	800b250 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b23e:	2303      	movs	r3, #3
 800b240:	e146      	b.n	800b4d0 <HAL_RCC_OscConfig+0x4f8>
 800b242:	bf00      	nop
 800b244:	40021000 	.word	0x40021000
 800b248:	42420000 	.word	0x42420000
 800b24c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b250:	4b92      	ldr	r3, [pc, #584]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b254:	f003 0302 	and.w	r3, r3, #2
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d1e9      	bne.n	800b230 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 0304 	and.w	r3, r3, #4
 800b264:	2b00      	cmp	r3, #0
 800b266:	f000 80a6 	beq.w	800b3b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b26a:	2300      	movs	r3, #0
 800b26c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b26e:	4b8b      	ldr	r3, [pc, #556]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b270:	69db      	ldr	r3, [r3, #28]
 800b272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10d      	bne.n	800b296 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b27a:	4b88      	ldr	r3, [pc, #544]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b27c:	69db      	ldr	r3, [r3, #28]
 800b27e:	4a87      	ldr	r2, [pc, #540]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b284:	61d3      	str	r3, [r2, #28]
 800b286:	4b85      	ldr	r3, [pc, #532]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b288:	69db      	ldr	r3, [r3, #28]
 800b28a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b28e:	60bb      	str	r3, [r7, #8]
 800b290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b292:	2301      	movs	r3, #1
 800b294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b296:	4b82      	ldr	r3, [pc, #520]	@ (800b4a0 <HAL_RCC_OscConfig+0x4c8>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d118      	bne.n	800b2d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b2a2:	4b7f      	ldr	r3, [pc, #508]	@ (800b4a0 <HAL_RCC_OscConfig+0x4c8>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a7e      	ldr	r2, [pc, #504]	@ (800b4a0 <HAL_RCC_OscConfig+0x4c8>)
 800b2a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b2ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b2ae:	f7fd ff91 	bl	80091d4 <HAL_GetTick>
 800b2b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b2b4:	e008      	b.n	800b2c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2b6:	f7fd ff8d 	bl	80091d4 <HAL_GetTick>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	2b64      	cmp	r3, #100	@ 0x64
 800b2c2:	d901      	bls.n	800b2c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	e103      	b.n	800b4d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b2c8:	4b75      	ldr	r3, [pc, #468]	@ (800b4a0 <HAL_RCC_OscConfig+0x4c8>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d0f0      	beq.n	800b2b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d106      	bne.n	800b2ea <HAL_RCC_OscConfig+0x312>
 800b2dc:	4b6f      	ldr	r3, [pc, #444]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b2de:	6a1b      	ldr	r3, [r3, #32]
 800b2e0:	4a6e      	ldr	r2, [pc, #440]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b2e2:	f043 0301 	orr.w	r3, r3, #1
 800b2e6:	6213      	str	r3, [r2, #32]
 800b2e8:	e02d      	b.n	800b346 <HAL_RCC_OscConfig+0x36e>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10c      	bne.n	800b30c <HAL_RCC_OscConfig+0x334>
 800b2f2:	4b6a      	ldr	r3, [pc, #424]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b2f4:	6a1b      	ldr	r3, [r3, #32]
 800b2f6:	4a69      	ldr	r2, [pc, #420]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b2f8:	f023 0301 	bic.w	r3, r3, #1
 800b2fc:	6213      	str	r3, [r2, #32]
 800b2fe:	4b67      	ldr	r3, [pc, #412]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b300:	6a1b      	ldr	r3, [r3, #32]
 800b302:	4a66      	ldr	r2, [pc, #408]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b304:	f023 0304 	bic.w	r3, r3, #4
 800b308:	6213      	str	r3, [r2, #32]
 800b30a:	e01c      	b.n	800b346 <HAL_RCC_OscConfig+0x36e>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	2b05      	cmp	r3, #5
 800b312:	d10c      	bne.n	800b32e <HAL_RCC_OscConfig+0x356>
 800b314:	4b61      	ldr	r3, [pc, #388]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b316:	6a1b      	ldr	r3, [r3, #32]
 800b318:	4a60      	ldr	r2, [pc, #384]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b31a:	f043 0304 	orr.w	r3, r3, #4
 800b31e:	6213      	str	r3, [r2, #32]
 800b320:	4b5e      	ldr	r3, [pc, #376]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b322:	6a1b      	ldr	r3, [r3, #32]
 800b324:	4a5d      	ldr	r2, [pc, #372]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b326:	f043 0301 	orr.w	r3, r3, #1
 800b32a:	6213      	str	r3, [r2, #32]
 800b32c:	e00b      	b.n	800b346 <HAL_RCC_OscConfig+0x36e>
 800b32e:	4b5b      	ldr	r3, [pc, #364]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	4a5a      	ldr	r2, [pc, #360]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b334:	f023 0301 	bic.w	r3, r3, #1
 800b338:	6213      	str	r3, [r2, #32]
 800b33a:	4b58      	ldr	r3, [pc, #352]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b33c:	6a1b      	ldr	r3, [r3, #32]
 800b33e:	4a57      	ldr	r2, [pc, #348]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b340:	f023 0304 	bic.w	r3, r3, #4
 800b344:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d015      	beq.n	800b37a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b34e:	f7fd ff41 	bl	80091d4 <HAL_GetTick>
 800b352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b354:	e00a      	b.n	800b36c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b356:	f7fd ff3d 	bl	80091d4 <HAL_GetTick>
 800b35a:	4602      	mov	r2, r0
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b364:	4293      	cmp	r3, r2
 800b366:	d901      	bls.n	800b36c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b368:	2303      	movs	r3, #3
 800b36a:	e0b1      	b.n	800b4d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b36c:	4b4b      	ldr	r3, [pc, #300]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b36e:	6a1b      	ldr	r3, [r3, #32]
 800b370:	f003 0302 	and.w	r3, r3, #2
 800b374:	2b00      	cmp	r3, #0
 800b376:	d0ee      	beq.n	800b356 <HAL_RCC_OscConfig+0x37e>
 800b378:	e014      	b.n	800b3a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b37a:	f7fd ff2b 	bl	80091d4 <HAL_GetTick>
 800b37e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b380:	e00a      	b.n	800b398 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b382:	f7fd ff27 	bl	80091d4 <HAL_GetTick>
 800b386:	4602      	mov	r2, r0
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b390:	4293      	cmp	r3, r2
 800b392:	d901      	bls.n	800b398 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b394:	2303      	movs	r3, #3
 800b396:	e09b      	b.n	800b4d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b398:	4b40      	ldr	r3, [pc, #256]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b39a:	6a1b      	ldr	r3, [r3, #32]
 800b39c:	f003 0302 	and.w	r3, r3, #2
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d1ee      	bne.n	800b382 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b3a4:	7dfb      	ldrb	r3, [r7, #23]
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d105      	bne.n	800b3b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b3aa:	4b3c      	ldr	r3, [pc, #240]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b3ac:	69db      	ldr	r3, [r3, #28]
 800b3ae:	4a3b      	ldr	r2, [pc, #236]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b3b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b3b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	69db      	ldr	r3, [r3, #28]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f000 8087 	beq.w	800b4ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b3c0:	4b36      	ldr	r3, [pc, #216]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	f003 030c 	and.w	r3, r3, #12
 800b3c8:	2b08      	cmp	r3, #8
 800b3ca:	d061      	beq.n	800b490 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	69db      	ldr	r3, [r3, #28]
 800b3d0:	2b02      	cmp	r3, #2
 800b3d2:	d146      	bne.n	800b462 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b3d4:	4b33      	ldr	r3, [pc, #204]	@ (800b4a4 <HAL_RCC_OscConfig+0x4cc>)
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3da:	f7fd fefb 	bl	80091d4 <HAL_GetTick>
 800b3de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b3e0:	e008      	b.n	800b3f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3e2:	f7fd fef7 	bl	80091d4 <HAL_GetTick>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	1ad3      	subs	r3, r2, r3
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	d901      	bls.n	800b3f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	e06d      	b.n	800b4d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b3f4:	4b29      	ldr	r3, [pc, #164]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1f0      	bne.n	800b3e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6a1b      	ldr	r3, [r3, #32]
 800b404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b408:	d108      	bne.n	800b41c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b40a:	4b24      	ldr	r3, [pc, #144]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	4921      	ldr	r1, [pc, #132]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b418:	4313      	orrs	r3, r2
 800b41a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b41c:	4b1f      	ldr	r3, [pc, #124]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6a19      	ldr	r1, [r3, #32]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b42c:	430b      	orrs	r3, r1
 800b42e:	491b      	ldr	r1, [pc, #108]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b430:	4313      	orrs	r3, r2
 800b432:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b434:	4b1b      	ldr	r3, [pc, #108]	@ (800b4a4 <HAL_RCC_OscConfig+0x4cc>)
 800b436:	2201      	movs	r2, #1
 800b438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b43a:	f7fd fecb 	bl	80091d4 <HAL_GetTick>
 800b43e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b440:	e008      	b.n	800b454 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b442:	f7fd fec7 	bl	80091d4 <HAL_GetTick>
 800b446:	4602      	mov	r2, r0
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	d901      	bls.n	800b454 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b450:	2303      	movs	r3, #3
 800b452:	e03d      	b.n	800b4d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b454:	4b11      	ldr	r3, [pc, #68]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d0f0      	beq.n	800b442 <HAL_RCC_OscConfig+0x46a>
 800b460:	e035      	b.n	800b4ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b462:	4b10      	ldr	r3, [pc, #64]	@ (800b4a4 <HAL_RCC_OscConfig+0x4cc>)
 800b464:	2200      	movs	r2, #0
 800b466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b468:	f7fd feb4 	bl	80091d4 <HAL_GetTick>
 800b46c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b46e:	e008      	b.n	800b482 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b470:	f7fd feb0 	bl	80091d4 <HAL_GetTick>
 800b474:	4602      	mov	r2, r0
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	1ad3      	subs	r3, r2, r3
 800b47a:	2b02      	cmp	r3, #2
 800b47c:	d901      	bls.n	800b482 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b47e:	2303      	movs	r3, #3
 800b480:	e026      	b.n	800b4d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b482:	4b06      	ldr	r3, [pc, #24]	@ (800b49c <HAL_RCC_OscConfig+0x4c4>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1f0      	bne.n	800b470 <HAL_RCC_OscConfig+0x498>
 800b48e:	e01e      	b.n	800b4ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	69db      	ldr	r3, [r3, #28]
 800b494:	2b01      	cmp	r3, #1
 800b496:	d107      	bne.n	800b4a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b498:	2301      	movs	r3, #1
 800b49a:	e019      	b.n	800b4d0 <HAL_RCC_OscConfig+0x4f8>
 800b49c:	40021000 	.word	0x40021000
 800b4a0:	40007000 	.word	0x40007000
 800b4a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b4a8:	4b0b      	ldr	r3, [pc, #44]	@ (800b4d8 <HAL_RCC_OscConfig+0x500>)
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6a1b      	ldr	r3, [r3, #32]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d106      	bne.n	800b4ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d001      	beq.n	800b4ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e000      	b.n	800b4d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b4ce:	2300      	movs	r3, #0
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3718      	adds	r7, #24
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	40021000 	.word	0x40021000

0800b4dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d101      	bne.n	800b4f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e0d0      	b.n	800b692 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b4f0:	4b6a      	ldr	r3, [pc, #424]	@ (800b69c <HAL_RCC_ClockConfig+0x1c0>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f003 0307 	and.w	r3, r3, #7
 800b4f8:	683a      	ldr	r2, [r7, #0]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d910      	bls.n	800b520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4fe:	4b67      	ldr	r3, [pc, #412]	@ (800b69c <HAL_RCC_ClockConfig+0x1c0>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f023 0207 	bic.w	r2, r3, #7
 800b506:	4965      	ldr	r1, [pc, #404]	@ (800b69c <HAL_RCC_ClockConfig+0x1c0>)
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	4313      	orrs	r3, r2
 800b50c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b50e:	4b63      	ldr	r3, [pc, #396]	@ (800b69c <HAL_RCC_ClockConfig+0x1c0>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f003 0307 	and.w	r3, r3, #7
 800b516:	683a      	ldr	r2, [r7, #0]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d001      	beq.n	800b520 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b51c:	2301      	movs	r3, #1
 800b51e:	e0b8      	b.n	800b692 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f003 0302 	and.w	r3, r3, #2
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d020      	beq.n	800b56e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f003 0304 	and.w	r3, r3, #4
 800b534:	2b00      	cmp	r3, #0
 800b536:	d005      	beq.n	800b544 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b538:	4b59      	ldr	r3, [pc, #356]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	4a58      	ldr	r2, [pc, #352]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b53e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b542:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f003 0308 	and.w	r3, r3, #8
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d005      	beq.n	800b55c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b550:	4b53      	ldr	r3, [pc, #332]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	4a52      	ldr	r2, [pc, #328]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b556:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800b55a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b55c:	4b50      	ldr	r3, [pc, #320]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	494d      	ldr	r1, [pc, #308]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b56a:	4313      	orrs	r3, r2
 800b56c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f003 0301 	and.w	r3, r3, #1
 800b576:	2b00      	cmp	r3, #0
 800b578:	d040      	beq.n	800b5fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d107      	bne.n	800b592 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b582:	4b47      	ldr	r3, [pc, #284]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d115      	bne.n	800b5ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b58e:	2301      	movs	r3, #1
 800b590:	e07f      	b.n	800b692 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	2b02      	cmp	r3, #2
 800b598:	d107      	bne.n	800b5aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b59a:	4b41      	ldr	r3, [pc, #260]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d109      	bne.n	800b5ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e073      	b.n	800b692 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b5aa:	4b3d      	ldr	r3, [pc, #244]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f003 0302 	and.w	r3, r3, #2
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d101      	bne.n	800b5ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e06b      	b.n	800b692 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b5ba:	4b39      	ldr	r3, [pc, #228]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	f023 0203 	bic.w	r2, r3, #3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	4936      	ldr	r1, [pc, #216]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b5cc:	f7fd fe02 	bl	80091d4 <HAL_GetTick>
 800b5d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5d2:	e00a      	b.n	800b5ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b5d4:	f7fd fdfe 	bl	80091d4 <HAL_GetTick>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	1ad3      	subs	r3, r2, r3
 800b5de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d901      	bls.n	800b5ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b5e6:	2303      	movs	r3, #3
 800b5e8:	e053      	b.n	800b692 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5ea:	4b2d      	ldr	r3, [pc, #180]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	f003 020c 	and.w	r2, r3, #12
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d1eb      	bne.n	800b5d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b5fc:	4b27      	ldr	r3, [pc, #156]	@ (800b69c <HAL_RCC_ClockConfig+0x1c0>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f003 0307 	and.w	r3, r3, #7
 800b604:	683a      	ldr	r2, [r7, #0]
 800b606:	429a      	cmp	r2, r3
 800b608:	d210      	bcs.n	800b62c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b60a:	4b24      	ldr	r3, [pc, #144]	@ (800b69c <HAL_RCC_ClockConfig+0x1c0>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f023 0207 	bic.w	r2, r3, #7
 800b612:	4922      	ldr	r1, [pc, #136]	@ (800b69c <HAL_RCC_ClockConfig+0x1c0>)
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	4313      	orrs	r3, r2
 800b618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b61a:	4b20      	ldr	r3, [pc, #128]	@ (800b69c <HAL_RCC_ClockConfig+0x1c0>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f003 0307 	and.w	r3, r3, #7
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	429a      	cmp	r2, r3
 800b626:	d001      	beq.n	800b62c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	e032      	b.n	800b692 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f003 0304 	and.w	r3, r3, #4
 800b634:	2b00      	cmp	r3, #0
 800b636:	d008      	beq.n	800b64a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b638:	4b19      	ldr	r3, [pc, #100]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	4916      	ldr	r1, [pc, #88]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b646:	4313      	orrs	r3, r2
 800b648:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f003 0308 	and.w	r3, r3, #8
 800b652:	2b00      	cmp	r3, #0
 800b654:	d009      	beq.n	800b66a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b656:	4b12      	ldr	r3, [pc, #72]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	691b      	ldr	r3, [r3, #16]
 800b662:	00db      	lsls	r3, r3, #3
 800b664:	490e      	ldr	r1, [pc, #56]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b666:	4313      	orrs	r3, r2
 800b668:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b66a:	f000 f821 	bl	800b6b0 <HAL_RCC_GetSysClockFreq>
 800b66e:	4602      	mov	r2, r0
 800b670:	4b0b      	ldr	r3, [pc, #44]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	091b      	lsrs	r3, r3, #4
 800b676:	f003 030f 	and.w	r3, r3, #15
 800b67a:	490a      	ldr	r1, [pc, #40]	@ (800b6a4 <HAL_RCC_ClockConfig+0x1c8>)
 800b67c:	5ccb      	ldrb	r3, [r1, r3]
 800b67e:	fa22 f303 	lsr.w	r3, r2, r3
 800b682:	4a09      	ldr	r2, [pc, #36]	@ (800b6a8 <HAL_RCC_ClockConfig+0x1cc>)
 800b684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b686:	4b09      	ldr	r3, [pc, #36]	@ (800b6ac <HAL_RCC_ClockConfig+0x1d0>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fd fd60 	bl	8009150 <HAL_InitTick>

  return HAL_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3710      	adds	r7, #16
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	40022000 	.word	0x40022000
 800b6a0:	40021000 	.word	0x40021000
 800b6a4:	0800c3bc 	.word	0x0800c3bc
 800b6a8:	20000cd8 	.word	0x20000cd8
 800b6ac:	20000cdc 	.word	0x20000cdc

0800b6b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b087      	sub	sp, #28
 800b6b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	60fb      	str	r3, [r7, #12]
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	60bb      	str	r3, [r7, #8]
 800b6be:	2300      	movs	r3, #0
 800b6c0:	617b      	str	r3, [r7, #20]
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b6ca:	4b1e      	ldr	r3, [pc, #120]	@ (800b744 <HAL_RCC_GetSysClockFreq+0x94>)
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f003 030c 	and.w	r3, r3, #12
 800b6d6:	2b04      	cmp	r3, #4
 800b6d8:	d002      	beq.n	800b6e0 <HAL_RCC_GetSysClockFreq+0x30>
 800b6da:	2b08      	cmp	r3, #8
 800b6dc:	d003      	beq.n	800b6e6 <HAL_RCC_GetSysClockFreq+0x36>
 800b6de:	e027      	b.n	800b730 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b6e0:	4b19      	ldr	r3, [pc, #100]	@ (800b748 <HAL_RCC_GetSysClockFreq+0x98>)
 800b6e2:	613b      	str	r3, [r7, #16]
      break;
 800b6e4:	e027      	b.n	800b736 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	0c9b      	lsrs	r3, r3, #18
 800b6ea:	f003 030f 	and.w	r3, r3, #15
 800b6ee:	4a17      	ldr	r2, [pc, #92]	@ (800b74c <HAL_RCC_GetSysClockFreq+0x9c>)
 800b6f0:	5cd3      	ldrb	r3, [r2, r3]
 800b6f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d010      	beq.n	800b720 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b6fe:	4b11      	ldr	r3, [pc, #68]	@ (800b744 <HAL_RCC_GetSysClockFreq+0x94>)
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	0c5b      	lsrs	r3, r3, #17
 800b704:	f003 0301 	and.w	r3, r3, #1
 800b708:	4a11      	ldr	r2, [pc, #68]	@ (800b750 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b70a:	5cd3      	ldrb	r3, [r2, r3]
 800b70c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4a0d      	ldr	r2, [pc, #52]	@ (800b748 <HAL_RCC_GetSysClockFreq+0x98>)
 800b712:	fb03 f202 	mul.w	r2, r3, r2
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	fbb2 f3f3 	udiv	r3, r2, r3
 800b71c:	617b      	str	r3, [r7, #20]
 800b71e:	e004      	b.n	800b72a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	4a0c      	ldr	r2, [pc, #48]	@ (800b754 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b724:	fb02 f303 	mul.w	r3, r2, r3
 800b728:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	613b      	str	r3, [r7, #16]
      break;
 800b72e:	e002      	b.n	800b736 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b730:	4b05      	ldr	r3, [pc, #20]	@ (800b748 <HAL_RCC_GetSysClockFreq+0x98>)
 800b732:	613b      	str	r3, [r7, #16]
      break;
 800b734:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b736:	693b      	ldr	r3, [r7, #16]
}
 800b738:	4618      	mov	r0, r3
 800b73a:	371c      	adds	r7, #28
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bc80      	pop	{r7}
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	40021000 	.word	0x40021000
 800b748:	007a1200 	.word	0x007a1200
 800b74c:	0800c3d4 	.word	0x0800c3d4
 800b750:	0800c3e4 	.word	0x0800c3e4
 800b754:	003d0900 	.word	0x003d0900

0800b758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b758:	b480      	push	{r7}
 800b75a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b75c:	4b02      	ldr	r3, [pc, #8]	@ (800b768 <HAL_RCC_GetHCLKFreq+0x10>)
 800b75e:	681b      	ldr	r3, [r3, #0]
}
 800b760:	4618      	mov	r0, r3
 800b762:	46bd      	mov	sp, r7
 800b764:	bc80      	pop	{r7}
 800b766:	4770      	bx	lr
 800b768:	20000cd8 	.word	0x20000cd8

0800b76c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b770:	f7ff fff2 	bl	800b758 <HAL_RCC_GetHCLKFreq>
 800b774:	4602      	mov	r2, r0
 800b776:	4b05      	ldr	r3, [pc, #20]	@ (800b78c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	0a1b      	lsrs	r3, r3, #8
 800b77c:	f003 0307 	and.w	r3, r3, #7
 800b780:	4903      	ldr	r1, [pc, #12]	@ (800b790 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b782:	5ccb      	ldrb	r3, [r1, r3]
 800b784:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b788:	4618      	mov	r0, r3
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	40021000 	.word	0x40021000
 800b790:	0800c3cc 	.word	0x0800c3cc

0800b794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b798:	f7ff ffde 	bl	800b758 <HAL_RCC_GetHCLKFreq>
 800b79c:	4602      	mov	r2, r0
 800b79e:	4b05      	ldr	r3, [pc, #20]	@ (800b7b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	0adb      	lsrs	r3, r3, #11
 800b7a4:	f003 0307 	and.w	r3, r3, #7
 800b7a8:	4903      	ldr	r1, [pc, #12]	@ (800b7b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b7aa:	5ccb      	ldrb	r3, [r1, r3]
 800b7ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	40021000 	.word	0x40021000
 800b7b8:	0800c3cc 	.word	0x0800c3cc

0800b7bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b085      	sub	sp, #20
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b7c4:	4b0a      	ldr	r3, [pc, #40]	@ (800b7f0 <RCC_Delay+0x34>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a0a      	ldr	r2, [pc, #40]	@ (800b7f4 <RCC_Delay+0x38>)
 800b7ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ce:	0a5b      	lsrs	r3, r3, #9
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	fb02 f303 	mul.w	r3, r2, r3
 800b7d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b7d8:	bf00      	nop
  }
  while (Delay --);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	1e5a      	subs	r2, r3, #1
 800b7de:	60fa      	str	r2, [r7, #12]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1f9      	bne.n	800b7d8 <RCC_Delay+0x1c>
}
 800b7e4:	bf00      	nop
 800b7e6:	bf00      	nop
 800b7e8:	3714      	adds	r7, #20
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bc80      	pop	{r7}
 800b7ee:	4770      	bx	lr
 800b7f0:	20000cd8 	.word	0x20000cd8
 800b7f4:	10624dd3 	.word	0x10624dd3

0800b7f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d101      	bne.n	800b80a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	e041      	b.n	800b88e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b00      	cmp	r3, #0
 800b814:	d106      	bne.n	800b824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7fd fbac 	bl	8008f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2202      	movs	r2, #2
 800b828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	3304      	adds	r3, #4
 800b834:	4619      	mov	r1, r3
 800b836:	4610      	mov	r0, r2
 800b838:	f000 fa82 	bl	800bd40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2201      	movs	r2, #1
 800b860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2201      	movs	r2, #1
 800b878:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2201      	movs	r2, #1
 800b880:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2201      	movs	r2, #1
 800b888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
	...

0800b898 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d001      	beq.n	800b8b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	e044      	b.n	800b93a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2202      	movs	r2, #2
 800b8b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	68da      	ldr	r2, [r3, #12]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f042 0201 	orr.w	r2, r2, #1
 800b8c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a1d      	ldr	r2, [pc, #116]	@ (800b944 <HAL_TIM_Base_Start_IT+0xac>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d018      	beq.n	800b904 <HAL_TIM_Base_Start_IT+0x6c>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a1c      	ldr	r2, [pc, #112]	@ (800b948 <HAL_TIM_Base_Start_IT+0xb0>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d013      	beq.n	800b904 <HAL_TIM_Base_Start_IT+0x6c>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8e4:	d00e      	beq.n	800b904 <HAL_TIM_Base_Start_IT+0x6c>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4a18      	ldr	r2, [pc, #96]	@ (800b94c <HAL_TIM_Base_Start_IT+0xb4>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d009      	beq.n	800b904 <HAL_TIM_Base_Start_IT+0x6c>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4a16      	ldr	r2, [pc, #88]	@ (800b950 <HAL_TIM_Base_Start_IT+0xb8>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d004      	beq.n	800b904 <HAL_TIM_Base_Start_IT+0x6c>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a15      	ldr	r2, [pc, #84]	@ (800b954 <HAL_TIM_Base_Start_IT+0xbc>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d111      	bne.n	800b928 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	f003 0307 	and.w	r3, r3, #7
 800b90e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2b06      	cmp	r3, #6
 800b914:	d010      	beq.n	800b938 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f042 0201 	orr.w	r2, r2, #1
 800b924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b926:	e007      	b.n	800b938 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f042 0201 	orr.w	r2, r2, #1
 800b936:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3714      	adds	r7, #20
 800b93e:	46bd      	mov	sp, r7
 800b940:	bc80      	pop	{r7}
 800b942:	4770      	bx	lr
 800b944:	40012c00 	.word	0x40012c00
 800b948:	40013400 	.word	0x40013400
 800b94c:	40000400 	.word	0x40000400
 800b950:	40000800 	.word	0x40000800
 800b954:	40000c00 	.word	0x40000c00

0800b958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	691b      	ldr	r3, [r3, #16]
 800b966:	f003 0302 	and.w	r3, r3, #2
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d122      	bne.n	800b9b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	f003 0302 	and.w	r3, r3, #2
 800b978:	2b02      	cmp	r3, #2
 800b97a:	d11b      	bne.n	800b9b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f06f 0202 	mvn.w	r2, #2
 800b984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2201      	movs	r2, #1
 800b98a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	f003 0303 	and.w	r3, r3, #3
 800b996:	2b00      	cmp	r3, #0
 800b998:	d003      	beq.n	800b9a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f9b4 	bl	800bd08 <HAL_TIM_IC_CaptureCallback>
 800b9a0:	e005      	b.n	800b9ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f9a7 	bl	800bcf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 f9b6 	bl	800bd1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	f003 0304 	and.w	r3, r3, #4
 800b9be:	2b04      	cmp	r3, #4
 800b9c0:	d122      	bne.n	800ba08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	f003 0304 	and.w	r3, r3, #4
 800b9cc:	2b04      	cmp	r3, #4
 800b9ce:	d11b      	bne.n	800ba08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f06f 0204 	mvn.w	r2, #4
 800b9d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2202      	movs	r2, #2
 800b9de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	699b      	ldr	r3, [r3, #24]
 800b9e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d003      	beq.n	800b9f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 f98a 	bl	800bd08 <HAL_TIM_IC_CaptureCallback>
 800b9f4:	e005      	b.n	800ba02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 f97d 	bl	800bcf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 f98c 	bl	800bd1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2200      	movs	r2, #0
 800ba06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	691b      	ldr	r3, [r3, #16]
 800ba0e:	f003 0308 	and.w	r3, r3, #8
 800ba12:	2b08      	cmp	r3, #8
 800ba14:	d122      	bne.n	800ba5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	f003 0308 	and.w	r3, r3, #8
 800ba20:	2b08      	cmp	r3, #8
 800ba22:	d11b      	bne.n	800ba5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f06f 0208 	mvn.w	r2, #8
 800ba2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2204      	movs	r2, #4
 800ba32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	69db      	ldr	r3, [r3, #28]
 800ba3a:	f003 0303 	and.w	r3, r3, #3
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d003      	beq.n	800ba4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f960 	bl	800bd08 <HAL_TIM_IC_CaptureCallback>
 800ba48:	e005      	b.n	800ba56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 f953 	bl	800bcf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 f962 	bl	800bd1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	691b      	ldr	r3, [r3, #16]
 800ba62:	f003 0310 	and.w	r3, r3, #16
 800ba66:	2b10      	cmp	r3, #16
 800ba68:	d122      	bne.n	800bab0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	f003 0310 	and.w	r3, r3, #16
 800ba74:	2b10      	cmp	r3, #16
 800ba76:	d11b      	bne.n	800bab0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f06f 0210 	mvn.w	r2, #16
 800ba80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2208      	movs	r2, #8
 800ba86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	69db      	ldr	r3, [r3, #28]
 800ba8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d003      	beq.n	800ba9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 f936 	bl	800bd08 <HAL_TIM_IC_CaptureCallback>
 800ba9c:	e005      	b.n	800baaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 f929 	bl	800bcf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 f938 	bl	800bd1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	f003 0301 	and.w	r3, r3, #1
 800baba:	2b01      	cmp	r3, #1
 800babc:	d10e      	bne.n	800badc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	f003 0301 	and.w	r3, r3, #1
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d107      	bne.n	800badc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f06f 0201 	mvn.w	r2, #1
 800bad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f7fc feea 	bl	80088b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	691b      	ldr	r3, [r3, #16]
 800bae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bae6:	2b80      	cmp	r3, #128	@ 0x80
 800bae8:	d10e      	bne.n	800bb08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baf4:	2b80      	cmp	r3, #128	@ 0x80
 800baf6:	d107      	bne.n	800bb08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bb00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 faa1 	bl	800c04a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	691b      	ldr	r3, [r3, #16]
 800bb0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb12:	2b40      	cmp	r3, #64	@ 0x40
 800bb14:	d10e      	bne.n	800bb34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb20:	2b40      	cmp	r3, #64	@ 0x40
 800bb22:	d107      	bne.n	800bb34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bb2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 f8fc 	bl	800bd2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	f003 0320 	and.w	r3, r3, #32
 800bb3e:	2b20      	cmp	r3, #32
 800bb40:	d10e      	bne.n	800bb60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	f003 0320 	and.w	r3, r3, #32
 800bb4c:	2b20      	cmp	r3, #32
 800bb4e:	d107      	bne.n	800bb60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f06f 0220 	mvn.w	r2, #32
 800bb58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 fa6c 	bl	800c038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb60:	bf00      	nop
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb72:	2300      	movs	r3, #0
 800bb74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d101      	bne.n	800bb84 <HAL_TIM_ConfigClockSource+0x1c>
 800bb80:	2302      	movs	r3, #2
 800bb82:	e0b4      	b.n	800bcee <HAL_TIM_ConfigClockSource+0x186>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2202      	movs	r2, #2
 800bb90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bbaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68ba      	ldr	r2, [r7, #8]
 800bbb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbbc:	d03e      	beq.n	800bc3c <HAL_TIM_ConfigClockSource+0xd4>
 800bbbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbc2:	f200 8087 	bhi.w	800bcd4 <HAL_TIM_ConfigClockSource+0x16c>
 800bbc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbca:	f000 8086 	beq.w	800bcda <HAL_TIM_ConfigClockSource+0x172>
 800bbce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbd2:	d87f      	bhi.n	800bcd4 <HAL_TIM_ConfigClockSource+0x16c>
 800bbd4:	2b70      	cmp	r3, #112	@ 0x70
 800bbd6:	d01a      	beq.n	800bc0e <HAL_TIM_ConfigClockSource+0xa6>
 800bbd8:	2b70      	cmp	r3, #112	@ 0x70
 800bbda:	d87b      	bhi.n	800bcd4 <HAL_TIM_ConfigClockSource+0x16c>
 800bbdc:	2b60      	cmp	r3, #96	@ 0x60
 800bbde:	d050      	beq.n	800bc82 <HAL_TIM_ConfigClockSource+0x11a>
 800bbe0:	2b60      	cmp	r3, #96	@ 0x60
 800bbe2:	d877      	bhi.n	800bcd4 <HAL_TIM_ConfigClockSource+0x16c>
 800bbe4:	2b50      	cmp	r3, #80	@ 0x50
 800bbe6:	d03c      	beq.n	800bc62 <HAL_TIM_ConfigClockSource+0xfa>
 800bbe8:	2b50      	cmp	r3, #80	@ 0x50
 800bbea:	d873      	bhi.n	800bcd4 <HAL_TIM_ConfigClockSource+0x16c>
 800bbec:	2b40      	cmp	r3, #64	@ 0x40
 800bbee:	d058      	beq.n	800bca2 <HAL_TIM_ConfigClockSource+0x13a>
 800bbf0:	2b40      	cmp	r3, #64	@ 0x40
 800bbf2:	d86f      	bhi.n	800bcd4 <HAL_TIM_ConfigClockSource+0x16c>
 800bbf4:	2b30      	cmp	r3, #48	@ 0x30
 800bbf6:	d064      	beq.n	800bcc2 <HAL_TIM_ConfigClockSource+0x15a>
 800bbf8:	2b30      	cmp	r3, #48	@ 0x30
 800bbfa:	d86b      	bhi.n	800bcd4 <HAL_TIM_ConfigClockSource+0x16c>
 800bbfc:	2b20      	cmp	r3, #32
 800bbfe:	d060      	beq.n	800bcc2 <HAL_TIM_ConfigClockSource+0x15a>
 800bc00:	2b20      	cmp	r3, #32
 800bc02:	d867      	bhi.n	800bcd4 <HAL_TIM_ConfigClockSource+0x16c>
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d05c      	beq.n	800bcc2 <HAL_TIM_ConfigClockSource+0x15a>
 800bc08:	2b10      	cmp	r3, #16
 800bc0a:	d05a      	beq.n	800bcc2 <HAL_TIM_ConfigClockSource+0x15a>
 800bc0c:	e062      	b.n	800bcd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bc1e:	f000 f980 	bl	800bf22 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bc30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	68ba      	ldr	r2, [r7, #8]
 800bc38:	609a      	str	r2, [r3, #8]
      break;
 800bc3a:	e04f      	b.n	800bcdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bc4c:	f000 f969 	bl	800bf22 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	689a      	ldr	r2, [r3, #8]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bc5e:	609a      	str	r2, [r3, #8]
      break;
 800bc60:	e03c      	b.n	800bcdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc6e:	461a      	mov	r2, r3
 800bc70:	f000 f8e0 	bl	800be34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2150      	movs	r1, #80	@ 0x50
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f000 f937 	bl	800beee <TIM_ITRx_SetConfig>
      break;
 800bc80:	e02c      	b.n	800bcdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc8e:	461a      	mov	r2, r3
 800bc90:	f000 f8fe 	bl	800be90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2160      	movs	r1, #96	@ 0x60
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f000 f927 	bl	800beee <TIM_ITRx_SetConfig>
      break;
 800bca0:	e01c      	b.n	800bcdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcae:	461a      	mov	r2, r3
 800bcb0:	f000 f8c0 	bl	800be34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2140      	movs	r1, #64	@ 0x40
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f000 f917 	bl	800beee <TIM_ITRx_SetConfig>
      break;
 800bcc0:	e00c      	b.n	800bcdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4619      	mov	r1, r3
 800bccc:	4610      	mov	r0, r2
 800bcce:	f000 f90e 	bl	800beee <TIM_ITRx_SetConfig>
      break;
 800bcd2:	e003      	b.n	800bcdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	73fb      	strb	r3, [r7, #15]
      break;
 800bcd8:	e000      	b.n	800bcdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bcda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bcec:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bcf6:	b480      	push	{r7}
 800bcf8:	b083      	sub	sp, #12
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bcfe:	bf00      	nop
 800bd00:	370c      	adds	r7, #12
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bc80      	pop	{r7}
 800bd06:	4770      	bx	lr

0800bd08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd10:	bf00      	nop
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bc80      	pop	{r7}
 800bd18:	4770      	bx	lr

0800bd1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd1a:	b480      	push	{r7}
 800bd1c:	b083      	sub	sp, #12
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd22:	bf00      	nop
 800bd24:	370c      	adds	r7, #12
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bc80      	pop	{r7}
 800bd2a:	4770      	bx	lr

0800bd2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd34:	bf00      	nop
 800bd36:	370c      	adds	r7, #12
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bc80      	pop	{r7}
 800bd3c:	4770      	bx	lr
	...

0800bd40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b085      	sub	sp, #20
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	4a33      	ldr	r2, [pc, #204]	@ (800be20 <TIM_Base_SetConfig+0xe0>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d013      	beq.n	800bd80 <TIM_Base_SetConfig+0x40>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4a32      	ldr	r2, [pc, #200]	@ (800be24 <TIM_Base_SetConfig+0xe4>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d00f      	beq.n	800bd80 <TIM_Base_SetConfig+0x40>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd66:	d00b      	beq.n	800bd80 <TIM_Base_SetConfig+0x40>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4a2f      	ldr	r2, [pc, #188]	@ (800be28 <TIM_Base_SetConfig+0xe8>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d007      	beq.n	800bd80 <TIM_Base_SetConfig+0x40>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	4a2e      	ldr	r2, [pc, #184]	@ (800be2c <TIM_Base_SetConfig+0xec>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d003      	beq.n	800bd80 <TIM_Base_SetConfig+0x40>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4a2d      	ldr	r2, [pc, #180]	@ (800be30 <TIM_Base_SetConfig+0xf0>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d108      	bne.n	800bd92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	4a22      	ldr	r2, [pc, #136]	@ (800be20 <TIM_Base_SetConfig+0xe0>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d013      	beq.n	800bdc2 <TIM_Base_SetConfig+0x82>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	4a21      	ldr	r2, [pc, #132]	@ (800be24 <TIM_Base_SetConfig+0xe4>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d00f      	beq.n	800bdc2 <TIM_Base_SetConfig+0x82>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bda8:	d00b      	beq.n	800bdc2 <TIM_Base_SetConfig+0x82>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4a1e      	ldr	r2, [pc, #120]	@ (800be28 <TIM_Base_SetConfig+0xe8>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d007      	beq.n	800bdc2 <TIM_Base_SetConfig+0x82>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a1d      	ldr	r2, [pc, #116]	@ (800be2c <TIM_Base_SetConfig+0xec>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d003      	beq.n	800bdc2 <TIM_Base_SetConfig+0x82>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4a1c      	ldr	r2, [pc, #112]	@ (800be30 <TIM_Base_SetConfig+0xf0>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d108      	bne.n	800bdd4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bdc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	68fa      	ldr	r2, [r7, #12]
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	695b      	ldr	r3, [r3, #20]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	689a      	ldr	r2, [r3, #8]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a09      	ldr	r2, [pc, #36]	@ (800be20 <TIM_Base_SetConfig+0xe0>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d003      	beq.n	800be08 <TIM_Base_SetConfig+0xc8>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a08      	ldr	r2, [pc, #32]	@ (800be24 <TIM_Base_SetConfig+0xe4>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d103      	bne.n	800be10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	691a      	ldr	r2, [r3, #16]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	615a      	str	r2, [r3, #20]
}
 800be16:	bf00      	nop
 800be18:	3714      	adds	r7, #20
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bc80      	pop	{r7}
 800be1e:	4770      	bx	lr
 800be20:	40012c00 	.word	0x40012c00
 800be24:	40013400 	.word	0x40013400
 800be28:	40000400 	.word	0x40000400
 800be2c:	40000800 	.word	0x40000800
 800be30:	40000c00 	.word	0x40000c00

0800be34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be34:	b480      	push	{r7}
 800be36:	b087      	sub	sp, #28
 800be38:	af00      	add	r7, sp, #0
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6a1b      	ldr	r3, [r3, #32]
 800be44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6a1b      	ldr	r3, [r3, #32]
 800be4a:	f023 0201 	bic.w	r2, r3, #1
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	699b      	ldr	r3, [r3, #24]
 800be56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800be5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	011b      	lsls	r3, r3, #4
 800be64:	693a      	ldr	r2, [r7, #16]
 800be66:	4313      	orrs	r3, r2
 800be68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	f023 030a 	bic.w	r3, r3, #10
 800be70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be72:	697a      	ldr	r2, [r7, #20]
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	4313      	orrs	r3, r2
 800be78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	693a      	ldr	r2, [r7, #16]
 800be7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	697a      	ldr	r2, [r7, #20]
 800be84:	621a      	str	r2, [r3, #32]
}
 800be86:	bf00      	nop
 800be88:	371c      	adds	r7, #28
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bc80      	pop	{r7}
 800be8e:	4770      	bx	lr

0800be90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be90:	b480      	push	{r7}
 800be92:	b087      	sub	sp, #28
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	6a1b      	ldr	r3, [r3, #32]
 800bea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6a1b      	ldr	r3, [r3, #32]
 800bea6:	f023 0210 	bic.w	r2, r3, #16
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	699b      	ldr	r3, [r3, #24]
 800beb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800beba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	031b      	lsls	r3, r3, #12
 800bec0:	693a      	ldr	r2, [r7, #16]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800becc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	011b      	lsls	r3, r3, #4
 800bed2:	697a      	ldr	r2, [r7, #20]
 800bed4:	4313      	orrs	r3, r2
 800bed6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	693a      	ldr	r2, [r7, #16]
 800bedc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	697a      	ldr	r2, [r7, #20]
 800bee2:	621a      	str	r2, [r3, #32]
}
 800bee4:	bf00      	nop
 800bee6:	371c      	adds	r7, #28
 800bee8:	46bd      	mov	sp, r7
 800beea:	bc80      	pop	{r7}
 800beec:	4770      	bx	lr

0800beee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800beee:	b480      	push	{r7}
 800bef0:	b085      	sub	sp, #20
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
 800bef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf06:	683a      	ldr	r2, [r7, #0]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	f043 0307 	orr.w	r3, r3, #7
 800bf10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	68fa      	ldr	r2, [r7, #12]
 800bf16:	609a      	str	r2, [r3, #8]
}
 800bf18:	bf00      	nop
 800bf1a:	3714      	adds	r7, #20
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bc80      	pop	{r7}
 800bf20:	4770      	bx	lr

0800bf22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf22:	b480      	push	{r7}
 800bf24:	b087      	sub	sp, #28
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	60f8      	str	r0, [r7, #12]
 800bf2a:	60b9      	str	r1, [r7, #8]
 800bf2c:	607a      	str	r2, [r7, #4]
 800bf2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bf3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	021a      	lsls	r2, r3, #8
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	431a      	orrs	r2, r3
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	697a      	ldr	r2, [r7, #20]
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	697a      	ldr	r2, [r7, #20]
 800bf54:	609a      	str	r2, [r3, #8]
}
 800bf56:	bf00      	nop
 800bf58:	371c      	adds	r7, #28
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bc80      	pop	{r7}
 800bf5e:	4770      	bx	lr

0800bf60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b085      	sub	sp, #20
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d101      	bne.n	800bf78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf74:	2302      	movs	r3, #2
 800bf76:	e050      	b.n	800c01a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2202      	movs	r2, #2
 800bf84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	68fa      	ldr	r2, [r7, #12]
 800bfb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a1b      	ldr	r2, [pc, #108]	@ (800c024 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d018      	beq.n	800bfee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a19      	ldr	r2, [pc, #100]	@ (800c028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d013      	beq.n	800bfee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfce:	d00e      	beq.n	800bfee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a15      	ldr	r2, [pc, #84]	@ (800c02c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d009      	beq.n	800bfee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a14      	ldr	r2, [pc, #80]	@ (800c030 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d004      	beq.n	800bfee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a12      	ldr	r2, [pc, #72]	@ (800c034 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d10c      	bne.n	800c008 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3714      	adds	r7, #20
 800c01e:	46bd      	mov	sp, r7
 800c020:	bc80      	pop	{r7}
 800c022:	4770      	bx	lr
 800c024:	40012c00 	.word	0x40012c00
 800c028:	40013400 	.word	0x40013400
 800c02c:	40000400 	.word	0x40000400
 800c030:	40000800 	.word	0x40000800
 800c034:	40000c00 	.word	0x40000c00

0800c038 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	bc80      	pop	{r7}
 800c048:	4770      	bx	lr

0800c04a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c04a:	b480      	push	{r7}
 800c04c:	b083      	sub	sp, #12
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c052:	bf00      	nop
 800c054:	370c      	adds	r7, #12
 800c056:	46bd      	mov	sp, r7
 800c058:	bc80      	pop	{r7}
 800c05a:	4770      	bx	lr

0800c05c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d101      	bne.n	800c06e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c06a:	2301      	movs	r3, #1
 800c06c:	e042      	b.n	800c0f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c074:	b2db      	uxtb	r3, r3
 800c076:	2b00      	cmp	r3, #0
 800c078:	d106      	bne.n	800c088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2200      	movs	r2, #0
 800c07e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f7fc ffa0 	bl	8008fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2224      	movs	r2, #36	@ 0x24
 800c08c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	68da      	ldr	r2, [r3, #12]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c09e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 f82b 	bl	800c0fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	691a      	ldr	r2, [r3, #16]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c0b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	695a      	ldr	r2, [r3, #20]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c0c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	68da      	ldr	r2, [r3, #12]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c0d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2220      	movs	r2, #32
 800c0e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2220      	movs	r2, #32
 800c0e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c0f2:	2300      	movs	r3, #0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3708      	adds	r7, #8
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	691b      	ldr	r3, [r3, #16]
 800c10a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	68da      	ldr	r2, [r3, #12]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	430a      	orrs	r2, r1
 800c118:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	689a      	ldr	r2, [r3, #8]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	691b      	ldr	r3, [r3, #16]
 800c122:	431a      	orrs	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	695b      	ldr	r3, [r3, #20]
 800c128:	4313      	orrs	r3, r2
 800c12a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	68db      	ldr	r3, [r3, #12]
 800c132:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800c136:	f023 030c 	bic.w	r3, r3, #12
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	6812      	ldr	r2, [r2, #0]
 800c13e:	68b9      	ldr	r1, [r7, #8]
 800c140:	430b      	orrs	r3, r1
 800c142:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	695b      	ldr	r3, [r3, #20]
 800c14a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	699a      	ldr	r2, [r3, #24]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	430a      	orrs	r2, r1
 800c158:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a2c      	ldr	r2, [pc, #176]	@ (800c210 <UART_SetConfig+0x114>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d103      	bne.n	800c16c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c164:	f7ff fb16 	bl	800b794 <HAL_RCC_GetPCLK2Freq>
 800c168:	60f8      	str	r0, [r7, #12]
 800c16a:	e002      	b.n	800c172 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c16c:	f7ff fafe 	bl	800b76c <HAL_RCC_GetPCLK1Freq>
 800c170:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	4613      	mov	r3, r2
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	4413      	add	r3, r2
 800c17a:	009a      	lsls	r2, r3, #2
 800c17c:	441a      	add	r2, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	fbb2 f3f3 	udiv	r3, r2, r3
 800c188:	4a22      	ldr	r2, [pc, #136]	@ (800c214 <UART_SetConfig+0x118>)
 800c18a:	fba2 2303 	umull	r2, r3, r2, r3
 800c18e:	095b      	lsrs	r3, r3, #5
 800c190:	0119      	lsls	r1, r3, #4
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	4613      	mov	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	4413      	add	r3, r2
 800c19a:	009a      	lsls	r2, r3, #2
 800c19c:	441a      	add	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	fbb2 f2f3 	udiv	r2, r2, r3
 800c1a8:	4b1a      	ldr	r3, [pc, #104]	@ (800c214 <UART_SetConfig+0x118>)
 800c1aa:	fba3 0302 	umull	r0, r3, r3, r2
 800c1ae:	095b      	lsrs	r3, r3, #5
 800c1b0:	2064      	movs	r0, #100	@ 0x64
 800c1b2:	fb00 f303 	mul.w	r3, r0, r3
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	011b      	lsls	r3, r3, #4
 800c1ba:	3332      	adds	r3, #50	@ 0x32
 800c1bc:	4a15      	ldr	r2, [pc, #84]	@ (800c214 <UART_SetConfig+0x118>)
 800c1be:	fba2 2303 	umull	r2, r3, r2, r3
 800c1c2:	095b      	lsrs	r3, r3, #5
 800c1c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c1c8:	4419      	add	r1, r3
 800c1ca:	68fa      	ldr	r2, [r7, #12]
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	4413      	add	r3, r2
 800c1d2:	009a      	lsls	r2, r3, #2
 800c1d4:	441a      	add	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	fbb2 f2f3 	udiv	r2, r2, r3
 800c1e0:	4b0c      	ldr	r3, [pc, #48]	@ (800c214 <UART_SetConfig+0x118>)
 800c1e2:	fba3 0302 	umull	r0, r3, r3, r2
 800c1e6:	095b      	lsrs	r3, r3, #5
 800c1e8:	2064      	movs	r0, #100	@ 0x64
 800c1ea:	fb00 f303 	mul.w	r3, r0, r3
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	011b      	lsls	r3, r3, #4
 800c1f2:	3332      	adds	r3, #50	@ 0x32
 800c1f4:	4a07      	ldr	r2, [pc, #28]	@ (800c214 <UART_SetConfig+0x118>)
 800c1f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1fa:	095b      	lsrs	r3, r3, #5
 800c1fc:	f003 020f 	and.w	r2, r3, #15
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	440a      	add	r2, r1
 800c206:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c208:	bf00      	nop
 800c20a:	3710      	adds	r7, #16
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	40013800 	.word	0x40013800
 800c214:	51eb851f 	.word	0x51eb851f

0800c218 <__itoa>:
 800c218:	1e93      	subs	r3, r2, #2
 800c21a:	2b22      	cmp	r3, #34	@ 0x22
 800c21c:	b510      	push	{r4, lr}
 800c21e:	460c      	mov	r4, r1
 800c220:	d904      	bls.n	800c22c <__itoa+0x14>
 800c222:	2300      	movs	r3, #0
 800c224:	461c      	mov	r4, r3
 800c226:	700b      	strb	r3, [r1, #0]
 800c228:	4620      	mov	r0, r4
 800c22a:	bd10      	pop	{r4, pc}
 800c22c:	2a0a      	cmp	r2, #10
 800c22e:	d109      	bne.n	800c244 <__itoa+0x2c>
 800c230:	2800      	cmp	r0, #0
 800c232:	da07      	bge.n	800c244 <__itoa+0x2c>
 800c234:	232d      	movs	r3, #45	@ 0x2d
 800c236:	700b      	strb	r3, [r1, #0]
 800c238:	2101      	movs	r1, #1
 800c23a:	4240      	negs	r0, r0
 800c23c:	4421      	add	r1, r4
 800c23e:	f000 f805 	bl	800c24c <__utoa>
 800c242:	e7f1      	b.n	800c228 <__itoa+0x10>
 800c244:	2100      	movs	r1, #0
 800c246:	e7f9      	b.n	800c23c <__itoa+0x24>

0800c248 <itoa>:
 800c248:	f7ff bfe6 	b.w	800c218 <__itoa>

0800c24c <__utoa>:
 800c24c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c24e:	b08b      	sub	sp, #44	@ 0x2c
 800c250:	4605      	mov	r5, r0
 800c252:	460b      	mov	r3, r1
 800c254:	466e      	mov	r6, sp
 800c256:	4c1d      	ldr	r4, [pc, #116]	@ (800c2cc <__utoa+0x80>)
 800c258:	f104 0c20 	add.w	ip, r4, #32
 800c25c:	4637      	mov	r7, r6
 800c25e:	6820      	ldr	r0, [r4, #0]
 800c260:	6861      	ldr	r1, [r4, #4]
 800c262:	3408      	adds	r4, #8
 800c264:	c703      	stmia	r7!, {r0, r1}
 800c266:	4564      	cmp	r4, ip
 800c268:	463e      	mov	r6, r7
 800c26a:	d1f7      	bne.n	800c25c <__utoa+0x10>
 800c26c:	7921      	ldrb	r1, [r4, #4]
 800c26e:	6820      	ldr	r0, [r4, #0]
 800c270:	7139      	strb	r1, [r7, #4]
 800c272:	1e91      	subs	r1, r2, #2
 800c274:	2922      	cmp	r1, #34	@ 0x22
 800c276:	6038      	str	r0, [r7, #0]
 800c278:	f04f 0100 	mov.w	r1, #0
 800c27c:	d904      	bls.n	800c288 <__utoa+0x3c>
 800c27e:	7019      	strb	r1, [r3, #0]
 800c280:	460b      	mov	r3, r1
 800c282:	4618      	mov	r0, r3
 800c284:	b00b      	add	sp, #44	@ 0x2c
 800c286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c288:	1e58      	subs	r0, r3, #1
 800c28a:	4684      	mov	ip, r0
 800c28c:	fbb5 f7f2 	udiv	r7, r5, r2
 800c290:	fb02 5617 	mls	r6, r2, r7, r5
 800c294:	3628      	adds	r6, #40	@ 0x28
 800c296:	446e      	add	r6, sp
 800c298:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c29c:	460c      	mov	r4, r1
 800c29e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c2a2:	462e      	mov	r6, r5
 800c2a4:	42b2      	cmp	r2, r6
 800c2a6:	463d      	mov	r5, r7
 800c2a8:	f101 0101 	add.w	r1, r1, #1
 800c2ac:	d9ee      	bls.n	800c28c <__utoa+0x40>
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	545a      	strb	r2, [r3, r1]
 800c2b2:	1919      	adds	r1, r3, r4
 800c2b4:	1aa5      	subs	r5, r4, r2
 800c2b6:	42aa      	cmp	r2, r5
 800c2b8:	dae3      	bge.n	800c282 <__utoa+0x36>
 800c2ba:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c2be:	780e      	ldrb	r6, [r1, #0]
 800c2c0:	3201      	adds	r2, #1
 800c2c2:	7006      	strb	r6, [r0, #0]
 800c2c4:	f801 5901 	strb.w	r5, [r1], #-1
 800c2c8:	e7f4      	b.n	800c2b4 <__utoa+0x68>
 800c2ca:	bf00      	nop
 800c2cc:	0800c3e6 	.word	0x0800c3e6

0800c2d0 <memset>:
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	4402      	add	r2, r0
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d100      	bne.n	800c2da <memset+0xa>
 800c2d8:	4770      	bx	lr
 800c2da:	f803 1b01 	strb.w	r1, [r3], #1
 800c2de:	e7f9      	b.n	800c2d4 <memset+0x4>

0800c2e0 <__libc_init_array>:
 800c2e0:	b570      	push	{r4, r5, r6, lr}
 800c2e2:	2600      	movs	r6, #0
 800c2e4:	4d0c      	ldr	r5, [pc, #48]	@ (800c318 <__libc_init_array+0x38>)
 800c2e6:	4c0d      	ldr	r4, [pc, #52]	@ (800c31c <__libc_init_array+0x3c>)
 800c2e8:	1b64      	subs	r4, r4, r5
 800c2ea:	10a4      	asrs	r4, r4, #2
 800c2ec:	42a6      	cmp	r6, r4
 800c2ee:	d109      	bne.n	800c304 <__libc_init_array+0x24>
 800c2f0:	f000 f81a 	bl	800c328 <_init>
 800c2f4:	2600      	movs	r6, #0
 800c2f6:	4d0a      	ldr	r5, [pc, #40]	@ (800c320 <__libc_init_array+0x40>)
 800c2f8:	4c0a      	ldr	r4, [pc, #40]	@ (800c324 <__libc_init_array+0x44>)
 800c2fa:	1b64      	subs	r4, r4, r5
 800c2fc:	10a4      	asrs	r4, r4, #2
 800c2fe:	42a6      	cmp	r6, r4
 800c300:	d105      	bne.n	800c30e <__libc_init_array+0x2e>
 800c302:	bd70      	pop	{r4, r5, r6, pc}
 800c304:	f855 3b04 	ldr.w	r3, [r5], #4
 800c308:	4798      	blx	r3
 800c30a:	3601      	adds	r6, #1
 800c30c:	e7ee      	b.n	800c2ec <__libc_init_array+0xc>
 800c30e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c312:	4798      	blx	r3
 800c314:	3601      	adds	r6, #1
 800c316:	e7f2      	b.n	800c2fe <__libc_init_array+0x1e>
 800c318:	0800c414 	.word	0x0800c414
 800c31c:	0800c414 	.word	0x0800c414
 800c320:	0800c414 	.word	0x0800c414
 800c324:	0800c418 	.word	0x0800c418

0800c328 <_init>:
 800c328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c32a:	bf00      	nop
 800c32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c32e:	bc08      	pop	{r3}
 800c330:	469e      	mov	lr, r3
 800c332:	4770      	bx	lr

0800c334 <_fini>:
 800c334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c336:	bf00      	nop
 800c338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c33a:	bc08      	pop	{r3}
 800c33c:	469e      	mov	lr, r3
 800c33e:	4770      	bx	lr
