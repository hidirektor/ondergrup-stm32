
ESP_Version_3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf08  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800d0ec  0800d0ec  0001d0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d19c  0800d19c  00020ce4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d19c  0800d19c  00020ce4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d19c  0800d19c  00020ce4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d19c  0800d19c  0001d19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1a0  0800d1a0  0001d1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ce4  20000000  0800d1a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c58  20000ce8  0800de88  00020ce8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001940  0800de88  00021940  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020ce4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020d0d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015d93  00000000  00000000  00020d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c91  00000000  00000000  00036ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00039778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d56  00000000  00000000  0003a8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b95e  00000000  00000000  0003b60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019db7  00000000  00000000  00056f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f7ba  00000000  00000000  00070d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004784  00000000  00000000  001104e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00114c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000ce8 	.word	0x20000ce8
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d0d4 	.word	0x0800d0d4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000cec 	.word	0x20000cec
 8000220:	0800d0d4 	.word	0x0800d0d4

08000224 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800022a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800022e:	9302      	str	r3, [sp, #8]
 8000230:	236e      	movs	r3, #110	; 0x6e
 8000232:	9301      	str	r3, [sp, #4]
 8000234:	4b81      	ldr	r3, [pc, #516]	; (800043c <eepromKontrol+0x218>)
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	236e      	movs	r3, #110	; 0x6e
 800023a:	2200      	movs	r2, #0
 800023c:	21a0      	movs	r1, #160	; 0xa0
 800023e:	4880      	ldr	r0, [pc, #512]	; (8000440 <eepromKontrol+0x21c>)
 8000240:	f00a feea 	bl	800b018 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000244:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000248:	f009 fea4 	bl	8009f94 <HAL_Delay>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	kaydedilenDeger = eepromData[3];
 800024c:	4b7b      	ldr	r3, [pc, #492]	; (800043c <eepromKontrol+0x218>)
 800024e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000252:	497c      	ldr	r1, [pc, #496]	; (8000444 <eepromKontrol+0x220>)
 8000254:	e9c1 2300 	strd	r2, r3, [r1]
	calismaSekli = eepromData[1];
 8000258:	4b78      	ldr	r3, [pc, #480]	; (800043c <eepromKontrol+0x218>)
 800025a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800025e:	497a      	ldr	r1, [pc, #488]	; (8000448 <eepromKontrol+0x224>)
 8000260:	e9c1 2300 	strd	r2, r3, [r1]
	emniyetCercevesi = eepromData[2];
 8000264:	4b75      	ldr	r3, [pc, #468]	; (800043c <eepromKontrol+0x218>)
 8000266:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800026a:	4978      	ldr	r1, [pc, #480]	; (800044c <eepromKontrol+0x228>)
 800026c:	e9c1 2300 	strd	r2, r3, [r1]
	yavaslamaLimit = eepromData[4];
 8000270:	4b72      	ldr	r3, [pc, #456]	; (800043c <eepromKontrol+0x218>)
 8000272:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000276:	4976      	ldr	r1, [pc, #472]	; (8000450 <eepromKontrol+0x22c>)
 8000278:	e9c1 2300 	strd	r2, r3, [r1]
	altLimit = eepromData[5];
 800027c:	4b6f      	ldr	r3, [pc, #444]	; (800043c <eepromKontrol+0x218>)
 800027e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000282:	4974      	ldr	r1, [pc, #464]	; (8000454 <eepromKontrol+0x230>)
 8000284:	e9c1 2300 	strd	r2, r3, [r1]
	basincSalteri = eepromData[6];
 8000288:	4b6c      	ldr	r3, [pc, #432]	; (800043c <eepromKontrol+0x218>)
 800028a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800028e:	4972      	ldr	r1, [pc, #456]	; (8000458 <eepromKontrol+0x234>)
 8000290:	e9c1 2300 	strd	r2, r3, [r1]
	kapiSecimleri = eepromData[7];
 8000294:	4b69      	ldr	r3, [pc, #420]	; (800043c <eepromKontrol+0x218>)
 8000296:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800029a:	4970      	ldr	r1, [pc, #448]	; (800045c <eepromKontrol+0x238>)
 800029c:	e9c1 2300 	strd	r2, r3, [r1]
	kapi1Tip = eepromData[8];
 80002a0:	4b66      	ldr	r3, [pc, #408]	; (800043c <eepromKontrol+0x218>)
 80002a2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80002a6:	496e      	ldr	r1, [pc, #440]	; (8000460 <eepromKontrol+0x23c>)
 80002a8:	e9c1 2300 	strd	r2, r3, [r1]
	kapi1AcSure = eepromData[9];
 80002ac:	4b63      	ldr	r3, [pc, #396]	; (800043c <eepromKontrol+0x218>)
 80002ae:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80002b2:	496c      	ldr	r1, [pc, #432]	; (8000464 <eepromKontrol+0x240>)
 80002b4:	e9c1 2300 	strd	r2, r3, [r1]
	kapi2Tip = eepromData[10];
 80002b8:	4b60      	ldr	r3, [pc, #384]	; (800043c <eepromKontrol+0x218>)
 80002ba:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80002be:	496a      	ldr	r1, [pc, #424]	; (8000468 <eepromKontrol+0x244>)
 80002c0:	e9c1 2300 	strd	r2, r3, [r1]
	kapi2AcSure = eepromData[11];
 80002c4:	4b5d      	ldr	r3, [pc, #372]	; (800043c <eepromKontrol+0x218>)
 80002c6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80002ca:	4968      	ldr	r1, [pc, #416]	; (800046c <eepromKontrol+0x248>)
 80002cc:	e9c1 2300 	strd	r2, r3, [r1]
	kapitablaTip = eepromData[12];
 80002d0:	4b5a      	ldr	r3, [pc, #360]	; (800043c <eepromKontrol+0x218>)
 80002d2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80002d6:	4966      	ldr	r1, [pc, #408]	; (8000470 <eepromKontrol+0x24c>)
 80002d8:	e9c1 2300 	strd	r2, r3, [r1]
	kapiTablaAcSure = eepromData[13];
 80002dc:	4b57      	ldr	r3, [pc, #348]	; (800043c <eepromKontrol+0x218>)
 80002de:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80002e2:	4964      	ldr	r1, [pc, #400]	; (8000474 <eepromKontrol+0x250>)
 80002e4:	e9c1 2300 	strd	r2, r3, [r1]
	yukariYavasLimit = eepromData[14];
 80002e8:	4b54      	ldr	r3, [pc, #336]	; (800043c <eepromKontrol+0x218>)
 80002ea:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80002ee:	4962      	ldr	r1, [pc, #392]	; (8000478 <eepromKontrol+0x254>)
 80002f0:	e9c1 2300 	strd	r2, r3, [r1]
	devirmeYuruyusSecim = eepromData[15];
 80002f4:	4b51      	ldr	r3, [pc, #324]	; (800043c <eepromKontrol+0x218>)
 80002f6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80002fa:	4960      	ldr	r1, [pc, #384]	; (800047c <eepromKontrol+0x258>)
 80002fc:	e9c1 2300 	strd	r2, r3, [r1]
	devirmeYukariIleriLimit = eepromData[16];
 8000300:	4b4e      	ldr	r3, [pc, #312]	; (800043c <eepromKontrol+0x218>)
 8000302:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8000306:	495e      	ldr	r1, [pc, #376]	; (8000480 <eepromKontrol+0x25c>)
 8000308:	e9c1 2300 	strd	r2, r3, [r1]
	devirmeAsagiGeriLimit = eepromData[17];
 800030c:	4b4b      	ldr	r3, [pc, #300]	; (800043c <eepromKontrol+0x218>)
 800030e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8000312:	495c      	ldr	r1, [pc, #368]	; (8000484 <eepromKontrol+0x260>)
 8000314:	e9c1 2300 	strd	r2, r3, [r1]
	devirmeSilindirTipi = eepromData[18];
 8000318:	4b48      	ldr	r3, [pc, #288]	; (800043c <eepromKontrol+0x218>)
 800031a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800031e:	495a      	ldr	r1, [pc, #360]	; (8000488 <eepromKontrol+0x264>)
 8000320:	e9c1 2300 	strd	r2, r3, [r1]
	platformSilindirTipi = eepromData[19];
 8000324:	4b45      	ldr	r3, [pc, #276]	; (800043c <eepromKontrol+0x218>)
 8000326:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800032a:	4958      	ldr	r1, [pc, #352]	; (800048c <eepromKontrol+0x268>)
 800032c:	e9c1 2300 	strd	r2, r3, [r1]
	yukariValfTmr = eepromData[20];
 8000330:	4b42      	ldr	r3, [pc, #264]	; (800043c <eepromKontrol+0x218>)
 8000332:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8000336:	4956      	ldr	r1, [pc, #344]	; (8000490 <eepromKontrol+0x26c>)
 8000338:	e9c1 2300 	strd	r2, r3, [r1]
	asagiValfTmr = eepromData[21];
 800033c:	4b3f      	ldr	r3, [pc, #252]	; (800043c <eepromKontrol+0x218>)
 800033e:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8000342:	4954      	ldr	r1, [pc, #336]	; (8000494 <eepromKontrol+0x270>)
 8000344:	e9c1 2300 	strd	r2, r3, [r1]
	devirmeYukariIleriTmr = eepromData[22];
 8000348:	4b3c      	ldr	r3, [pc, #240]	; (800043c <eepromKontrol+0x218>)
 800034a:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 800034e:	4952      	ldr	r1, [pc, #328]	; (8000498 <eepromKontrol+0x274>)
 8000350:	e9c1 2300 	strd	r2, r3, [r1]
	devirmeAsagiGeriTmr = eepromData[23];
 8000354:	4b39      	ldr	r3, [pc, #228]	; (800043c <eepromKontrol+0x218>)
 8000356:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800035a:	4950      	ldr	r1, [pc, #320]	; (800049c <eepromKontrol+0x278>)
 800035c:	e9c1 2300 	strd	r2, r3, [r1]
	makineCalismaTmr = eepromData[24];
 8000360:	4b36      	ldr	r3, [pc, #216]	; (800043c <eepromKontrol+0x218>)
 8000362:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8000366:	494e      	ldr	r1, [pc, #312]	; (80004a0 <eepromKontrol+0x27c>)
 8000368:	e9c1 2300 	strd	r2, r3, [r1]
	buzzer = eepromData[25];
 800036c:	4b33      	ldr	r3, [pc, #204]	; (800043c <eepromKontrol+0x218>)
 800036e:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8000372:	494c      	ldr	r1, [pc, #304]	; (80004a4 <eepromKontrol+0x280>)
 8000374:	e9c1 2300 	strd	r2, r3, [r1]
	demoMode = eepromData[26];
 8000378:	4b30      	ldr	r3, [pc, #192]	; (800043c <eepromKontrol+0x218>)
 800037a:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800037e:	494a      	ldr	r1, [pc, #296]	; (80004a8 <eepromKontrol+0x284>)
 8000380:	e9c1 2300 	strd	r2, r3, [r1]
	calismaSayisi = eepromData[27];
 8000384:	4b2d      	ldr	r3, [pc, #180]	; (800043c <eepromKontrol+0x218>)
 8000386:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800038a:	4948      	ldr	r1, [pc, #288]	; (80004ac <eepromKontrol+0x288>)
 800038c:	e9c1 2300 	strd	r2, r3, [r1]
	calismaSayisiDemo = eepromData[28];
 8000390:	4b2a      	ldr	r3, [pc, #168]	; (800043c <eepromKontrol+0x218>)
 8000392:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 8000396:	4946      	ldr	r1, [pc, #280]	; (80004b0 <eepromKontrol+0x28c>)
 8000398:	e9c1 2300 	strd	r2, r3, [r1]
	dilSecim = eepromData[33];
 800039c:	4b27      	ldr	r3, [pc, #156]	; (800043c <eepromKontrol+0x218>)
 800039e:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 80003a2:	4944      	ldr	r1, [pc, #272]	; (80004b4 <eepromKontrol+0x290>)
 80003a4:	e9c1 2300 	strd	r2, r3, [r1]
	iotMode = eepromData[48];
 80003a8:	4b24      	ldr	r3, [pc, #144]	; (800043c <eepromKontrol+0x218>)
 80003aa:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 80003ae:	4942      	ldr	r1, [pc, #264]	; (80004b8 <eepromKontrol+0x294>)
 80003b0:	e9c1 2300 	strd	r2, r3, [r1]
	kapiTablaAcKonum = eepromData[34];
 80003b4:	4b21      	ldr	r3, [pc, #132]	; (800043c <eepromKontrol+0x218>)
 80003b6:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	; 0x110
 80003ba:	4940      	ldr	r1, [pc, #256]	; (80004bc <eepromKontrol+0x298>)
 80003bc:	e9c1 2300 	strd	r2, r3, [r1]
	calismaSayModu = eepromData[35];
 80003c0:	4b1e      	ldr	r3, [pc, #120]	; (800043c <eepromKontrol+0x218>)
 80003c2:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 80003c6:	493e      	ldr	r1, [pc, #248]	; (80004c0 <eepromKontrol+0x29c>)
 80003c8:	e9c1 2300 	strd	r2, r3, [r1]
	kapiAcTipi = eepromData[36];
 80003cc:	4b1b      	ldr	r3, [pc, #108]	; (800043c <eepromKontrol+0x218>)
 80003ce:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 80003d2:	493c      	ldr	r1, [pc, #240]	; (80004c4 <eepromKontrol+0x2a0>)
 80003d4:	e9c1 2300 	strd	r2, r3, [r1]
	hataKayit1 = eepromData[38];
 80003d8:	4b18      	ldr	r3, [pc, #96]	; (800043c <eepromKontrol+0x218>)
 80003da:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80003de:	493a      	ldr	r1, [pc, #232]	; (80004c8 <eepromKontrol+0x2a4>)
 80003e0:	e9c1 2300 	strd	r2, r3, [r1]
	hataKayit2 = eepromData[39];
 80003e4:	4b15      	ldr	r3, [pc, #84]	; (800043c <eepromKontrol+0x218>)
 80003e6:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 80003ea:	4938      	ldr	r1, [pc, #224]	; (80004cc <eepromKontrol+0x2a8>)
 80003ec:	e9c1 2300 	strd	r2, r3, [r1]
	hataKayit3 = eepromData[40];
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <eepromKontrol+0x218>)
 80003f2:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 80003f6:	4936      	ldr	r1, [pc, #216]	; (80004d0 <eepromKontrol+0x2ac>)
 80003f8:	e9c1 2300 	strd	r2, r3, [r1]
	hataKayit4 = eepromData[41];
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <eepromKontrol+0x218>)
 80003fe:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8000402:	4934      	ldr	r1, [pc, #208]	; (80004d4 <eepromKontrol+0x2b0>)
 8000404:	e9c1 2300 	strd	r2, r3, [r1]
	hataKayit5 = eepromData[42];
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <eepromKontrol+0x218>)
 800040a:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800040e:	4932      	ldr	r1, [pc, #200]	; (80004d8 <eepromKontrol+0x2b4>)
 8000410:	e9c1 2300 	strd	r2, r3, [r1]
	hataKayit6 = eepromData[43];
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <eepromKontrol+0x218>)
 8000416:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
 800041a:	4930      	ldr	r1, [pc, #192]	; (80004dc <eepromKontrol+0x2b8>)
 800041c:	e9c1 2300 	strd	r2, r3, [r1]
	hataKayit7 = eepromData[44];
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <eepromKontrol+0x218>)
 8000422:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	; 0x160
 8000426:	492e      	ldr	r1, [pc, #184]	; (80004e0 <eepromKontrol+0x2bc>)
 8000428:	e9c1 2300 	strd	r2, r3, [r1]
	hataKayit8 = eepromData[45];
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <eepromKontrol+0x218>)
 800042e:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8000432:	492c      	ldr	r1, [pc, #176]	; (80004e4 <eepromKontrol+0x2c0>)
 8000434:	e9c1 2300 	strd	r2, r3, [r1]
 8000438:	e056      	b.n	80004e8 <eepromKontrol+0x2c4>
 800043a:	bf00      	nop
 800043c:	20000d08 	.word	0x20000d08
 8000440:	20001858 	.word	0x20001858
 8000444:	20001080 	.word	0x20001080
 8000448:	200010c0 	.word	0x200010c0
 800044c:	200010d8 	.word	0x200010d8
 8000450:	200010e0 	.word	0x200010e0
 8000454:	200010e8 	.word	0x200010e8
 8000458:	200010f0 	.word	0x200010f0
 800045c:	200010f8 	.word	0x200010f8
 8000460:	20001100 	.word	0x20001100
 8000464:	20001180 	.word	0x20001180
 8000468:	20001108 	.word	0x20001108
 800046c:	20001188 	.word	0x20001188
 8000470:	20001110 	.word	0x20001110
 8000474:	20001190 	.word	0x20001190
 8000478:	20001128 	.word	0x20001128
 800047c:	20001130 	.word	0x20001130
 8000480:	20001138 	.word	0x20001138
 8000484:	20001140 	.word	0x20001140
 8000488:	20001148 	.word	0x20001148
 800048c:	20001150 	.word	0x20001150
 8000490:	20001158 	.word	0x20001158
 8000494:	20001160 	.word	0x20001160
 8000498:	20001168 	.word	0x20001168
 800049c:	20001170 	.word	0x20001170
 80004a0:	20001178 	.word	0x20001178
 80004a4:	20001198 	.word	0x20001198
 80004a8:	200011a8 	.word	0x200011a8
 80004ac:	200010a8 	.word	0x200010a8
 80004b0:	200010b0 	.word	0x200010b0
 80004b4:	200011c0 	.word	0x200011c0
 80004b8:	200011b0 	.word	0x200011b0
 80004bc:	20001120 	.word	0x20001120
 80004c0:	200011b8 	.word	0x200011b8
 80004c4:	20001118 	.word	0x20001118
 80004c8:	200011c8 	.word	0x200011c8
 80004cc:	200011d0 	.word	0x200011d0
 80004d0:	200011d8 	.word	0x200011d8
 80004d4:	200011e0 	.word	0x200011e0
 80004d8:	200011e8 	.word	0x200011e8
 80004dc:	200011f0 	.word	0x200011f0
 80004e0:	200011f8 	.word	0x200011f8
 80004e4:	20001200 	.word	0x20001200
	hataKayit9 = eepromData[46];
 80004e8:	4ba0      	ldr	r3, [pc, #640]	; (800076c <eepromKontrol+0x548>)
 80004ea:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	; 0x170
 80004ee:	49a0      	ldr	r1, [pc, #640]	; (8000770 <eepromKontrol+0x54c>)
 80004f0:	e9c1 2300 	strd	r2, r3, [r1]
	hataKayit10 = eepromData[47];
 80004f4:	4b9d      	ldr	r3, [pc, #628]	; (800076c <eepromKontrol+0x548>)
 80004f6:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 80004fa:	499e      	ldr	r1, [pc, #632]	; (8000774 <eepromKontrol+0x550>)
 80004fc:	e9c1 2300 	strd	r2, r3, [r1]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000500:	4b9d      	ldr	r3, [pc, #628]	; (8000778 <eepromKontrol+0x554>)
 8000502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000506:	2a02      	cmp	r2, #2
 8000508:	f173 0300 	sbcs.w	r3, r3, #0
 800050c:	d306      	bcc.n	800051c <eepromKontrol+0x2f8>
	    calismaSekli=0;
 800050e:	499a      	ldr	r1, [pc, #616]	; (8000778 <eepromKontrol+0x554>)
 8000510:	f04f 0200 	mov.w	r2, #0
 8000514:	f04f 0300 	mov.w	r3, #0
 8000518:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(emniyetCercevesi>1) {
 800051c:	4b97      	ldr	r3, [pc, #604]	; (800077c <eepromKontrol+0x558>)
 800051e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000522:	2a02      	cmp	r2, #2
 8000524:	f173 0300 	sbcs.w	r3, r3, #0
 8000528:	d306      	bcc.n	8000538 <eepromKontrol+0x314>
	    emniyetCercevesi=1;
 800052a:	4994      	ldr	r1, [pc, #592]	; (800077c <eepromKontrol+0x558>)
 800052c:	f04f 0201 	mov.w	r2, #1
 8000530:	f04f 0300 	mov.w	r3, #0
 8000534:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(yavaslamaLimit>1) {
 8000538:	4b91      	ldr	r3, [pc, #580]	; (8000780 <eepromKontrol+0x55c>)
 800053a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800053e:	2a02      	cmp	r2, #2
 8000540:	f173 0300 	sbcs.w	r3, r3, #0
 8000544:	d306      	bcc.n	8000554 <eepromKontrol+0x330>
	    yavaslamaLimit=0;
 8000546:	498e      	ldr	r1, [pc, #568]	; (8000780 <eepromKontrol+0x55c>)
 8000548:	f04f 0200 	mov.w	r2, #0
 800054c:	f04f 0300 	mov.w	r3, #0
 8000550:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(altLimit>1) {
 8000554:	4b8b      	ldr	r3, [pc, #556]	; (8000784 <eepromKontrol+0x560>)
 8000556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800055a:	2a02      	cmp	r2, #2
 800055c:	f173 0300 	sbcs.w	r3, r3, #0
 8000560:	d306      	bcc.n	8000570 <eepromKontrol+0x34c>
	    altLimit=1;
 8000562:	4988      	ldr	r1, [pc, #544]	; (8000784 <eepromKontrol+0x560>)
 8000564:	f04f 0201 	mov.w	r2, #1
 8000568:	f04f 0300 	mov.w	r3, #0
 800056c:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(basincSalteri>1) {
 8000570:	4b85      	ldr	r3, [pc, #532]	; (8000788 <eepromKontrol+0x564>)
 8000572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000576:	2a02      	cmp	r2, #2
 8000578:	f173 0300 	sbcs.w	r3, r3, #0
 800057c:	d306      	bcc.n	800058c <eepromKontrol+0x368>
	    basincSalteri=1;
 800057e:	4982      	ldr	r1, [pc, #520]	; (8000788 <eepromKontrol+0x564>)
 8000580:	f04f 0201 	mov.w	r2, #1
 8000584:	f04f 0300 	mov.w	r3, #0
 8000588:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(kapiSecimleri>3) {
 800058c:	4b7f      	ldr	r3, [pc, #508]	; (800078c <eepromKontrol+0x568>)
 800058e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000592:	2a04      	cmp	r2, #4
 8000594:	f173 0300 	sbcs.w	r3, r3, #0
 8000598:	d306      	bcc.n	80005a8 <eepromKontrol+0x384>
	    kapiSecimleri=3;
 800059a:	497c      	ldr	r1, [pc, #496]	; (800078c <eepromKontrol+0x568>)
 800059c:	f04f 0203 	mov.w	r2, #3
 80005a0:	f04f 0300 	mov.w	r3, #0
 80005a4:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(kapiAcTipi>1) {
 80005a8:	4b79      	ldr	r3, [pc, #484]	; (8000790 <eepromKontrol+0x56c>)
 80005aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ae:	2a02      	cmp	r2, #2
 80005b0:	f173 0300 	sbcs.w	r3, r3, #0
 80005b4:	d306      	bcc.n	80005c4 <eepromKontrol+0x3a0>
	    kapiAcTipi=0;
 80005b6:	4976      	ldr	r1, [pc, #472]	; (8000790 <eepromKontrol+0x56c>)
 80005b8:	f04f 0200 	mov.w	r2, #0
 80005bc:	f04f 0300 	mov.w	r3, #0
 80005c0:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(kapi1Tip>2) {
 80005c4:	4b73      	ldr	r3, [pc, #460]	; (8000794 <eepromKontrol+0x570>)
 80005c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ca:	2a03      	cmp	r2, #3
 80005cc:	f173 0300 	sbcs.w	r3, r3, #0
 80005d0:	d306      	bcc.n	80005e0 <eepromKontrol+0x3bc>
	    kapi1Tip=1;
 80005d2:	4970      	ldr	r1, [pc, #448]	; (8000794 <eepromKontrol+0x570>)
 80005d4:	f04f 0201 	mov.w	r2, #1
 80005d8:	f04f 0300 	mov.w	r3, #0
 80005dc:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(kapi1AcSure>5) {
 80005e0:	4b6d      	ldr	r3, [pc, #436]	; (8000798 <eepromKontrol+0x574>)
 80005e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005e6:	2a06      	cmp	r2, #6
 80005e8:	f173 0300 	sbcs.w	r3, r3, #0
 80005ec:	d306      	bcc.n	80005fc <eepromKontrol+0x3d8>
	    kapi1AcSure=5;
 80005ee:	496a      	ldr	r1, [pc, #424]	; (8000798 <eepromKontrol+0x574>)
 80005f0:	f04f 0205 	mov.w	r2, #5
 80005f4:	f04f 0300 	mov.w	r3, #0
 80005f8:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(kapi2Tip>2) {
 80005fc:	4b67      	ldr	r3, [pc, #412]	; (800079c <eepromKontrol+0x578>)
 80005fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000602:	2a03      	cmp	r2, #3
 8000604:	f173 0300 	sbcs.w	r3, r3, #0
 8000608:	d306      	bcc.n	8000618 <eepromKontrol+0x3f4>
	    kapi2Tip=1;
 800060a:	4964      	ldr	r1, [pc, #400]	; (800079c <eepromKontrol+0x578>)
 800060c:	f04f 0201 	mov.w	r2, #1
 8000610:	f04f 0300 	mov.w	r3, #0
 8000614:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(kapi2AcSure>5) {
 8000618:	4b61      	ldr	r3, [pc, #388]	; (80007a0 <eepromKontrol+0x57c>)
 800061a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800061e:	2a06      	cmp	r2, #6
 8000620:	f173 0300 	sbcs.w	r3, r3, #0
 8000624:	d306      	bcc.n	8000634 <eepromKontrol+0x410>
	    kapi2AcSure=5;
 8000626:	495e      	ldr	r1, [pc, #376]	; (80007a0 <eepromKontrol+0x57c>)
 8000628:	f04f 0205 	mov.w	r2, #5
 800062c:	f04f 0300 	mov.w	r3, #0
 8000630:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(kapitablaTip>2) {
 8000634:	4b5b      	ldr	r3, [pc, #364]	; (80007a4 <eepromKontrol+0x580>)
 8000636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800063a:	2a03      	cmp	r2, #3
 800063c:	f173 0300 	sbcs.w	r3, r3, #0
 8000640:	d306      	bcc.n	8000650 <eepromKontrol+0x42c>
	    kapitablaTip=1;
 8000642:	4958      	ldr	r1, [pc, #352]	; (80007a4 <eepromKontrol+0x580>)
 8000644:	f04f 0201 	mov.w	r2, #1
 8000648:	f04f 0300 	mov.w	r3, #0
 800064c:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(kapiTablaAcKonum>2) {
 8000650:	4b55      	ldr	r3, [pc, #340]	; (80007a8 <eepromKontrol+0x584>)
 8000652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000656:	2a03      	cmp	r2, #3
 8000658:	f173 0300 	sbcs.w	r3, r3, #0
 800065c:	d306      	bcc.n	800066c <eepromKontrol+0x448>
	    kapiTablaAcKonum=2;
 800065e:	4952      	ldr	r1, [pc, #328]	; (80007a8 <eepromKontrol+0x584>)
 8000660:	f04f 0202 	mov.w	r2, #2
 8000664:	f04f 0300 	mov.w	r3, #0
 8000668:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(kapiTablaAcSure>5) {
 800066c:	4b4f      	ldr	r3, [pc, #316]	; (80007ac <eepromKontrol+0x588>)
 800066e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000672:	2a06      	cmp	r2, #6
 8000674:	f173 0300 	sbcs.w	r3, r3, #0
 8000678:	d306      	bcc.n	8000688 <eepromKontrol+0x464>
	    kapiTablaAcSure=5;
 800067a:	494c      	ldr	r1, [pc, #304]	; (80007ac <eepromKontrol+0x588>)
 800067c:	f04f 0205 	mov.w	r2, #5
 8000680:	f04f 0300 	mov.w	r3, #0
 8000684:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(yukariYavasLimit>1) {
 8000688:	4b49      	ldr	r3, [pc, #292]	; (80007b0 <eepromKontrol+0x58c>)
 800068a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800068e:	2a02      	cmp	r2, #2
 8000690:	f173 0300 	sbcs.w	r3, r3, #0
 8000694:	d306      	bcc.n	80006a4 <eepromKontrol+0x480>
	    yukariYavasLimit=0;
 8000696:	4946      	ldr	r1, [pc, #280]	; (80007b0 <eepromKontrol+0x58c>)
 8000698:	f04f 0200 	mov.w	r2, #0
 800069c:	f04f 0300 	mov.w	r3, #0
 80006a0:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(devirmeYuruyusSecim>2) {
 80006a4:	4b43      	ldr	r3, [pc, #268]	; (80007b4 <eepromKontrol+0x590>)
 80006a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006aa:	2a03      	cmp	r2, #3
 80006ac:	f173 0300 	sbcs.w	r3, r3, #0
 80006b0:	d306      	bcc.n	80006c0 <eepromKontrol+0x49c>
	    devirmeYuruyusSecim=0;
 80006b2:	4940      	ldr	r1, [pc, #256]	; (80007b4 <eepromKontrol+0x590>)
 80006b4:	f04f 0200 	mov.w	r2, #0
 80006b8:	f04f 0300 	mov.w	r3, #0
 80006bc:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(devirmeYukariIleriLimit>1) {
 80006c0:	4b3d      	ldr	r3, [pc, #244]	; (80007b8 <eepromKontrol+0x594>)
 80006c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006c6:	2a02      	cmp	r2, #2
 80006c8:	f173 0300 	sbcs.w	r3, r3, #0
 80006cc:	d306      	bcc.n	80006dc <eepromKontrol+0x4b8>
	    devirmeYukariIleriLimit=1;
 80006ce:	493a      	ldr	r1, [pc, #232]	; (80007b8 <eepromKontrol+0x594>)
 80006d0:	f04f 0201 	mov.w	r2, #1
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(devirmeAsagiGeriLimit>1) {
 80006dc:	4b37      	ldr	r3, [pc, #220]	; (80007bc <eepromKontrol+0x598>)
 80006de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006e2:	2a02      	cmp	r2, #2
 80006e4:	f173 0300 	sbcs.w	r3, r3, #0
 80006e8:	d306      	bcc.n	80006f8 <eepromKontrol+0x4d4>
	    devirmeAsagiGeriLimit=1;
 80006ea:	4934      	ldr	r1, [pc, #208]	; (80007bc <eepromKontrol+0x598>)
 80006ec:	f04f 0201 	mov.w	r2, #1
 80006f0:	f04f 0300 	mov.w	r3, #0
 80006f4:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(devirmeSilindirTipi>1) {
 80006f8:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <eepromKontrol+0x59c>)
 80006fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006fe:	2a02      	cmp	r2, #2
 8000700:	f173 0300 	sbcs.w	r3, r3, #0
 8000704:	d306      	bcc.n	8000714 <eepromKontrol+0x4f0>
	    devirmeSilindirTipi=0;
 8000706:	492e      	ldr	r1, [pc, #184]	; (80007c0 <eepromKontrol+0x59c>)
 8000708:	f04f 0200 	mov.w	r2, #0
 800070c:	f04f 0300 	mov.w	r3, #0
 8000710:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(platformSilindirTipi>1) {
 8000714:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <eepromKontrol+0x5a0>)
 8000716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800071a:	2a02      	cmp	r2, #2
 800071c:	f173 0300 	sbcs.w	r3, r3, #0
 8000720:	d306      	bcc.n	8000730 <eepromKontrol+0x50c>
	    platformSilindirTipi=0;
 8000722:	4928      	ldr	r1, [pc, #160]	; (80007c4 <eepromKontrol+0x5a0>)
 8000724:	f04f 0200 	mov.w	r2, #0
 8000728:	f04f 0300 	mov.w	r3, #0
 800072c:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(yukariValfTmr>5) {
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <eepromKontrol+0x5a4>)
 8000732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000736:	2a06      	cmp	r2, #6
 8000738:	f173 0300 	sbcs.w	r3, r3, #0
 800073c:	d306      	bcc.n	800074c <eepromKontrol+0x528>
	    yukariValfTmr=0;
 800073e:	4922      	ldr	r1, [pc, #136]	; (80007c8 <eepromKontrol+0x5a4>)
 8000740:	f04f 0200 	mov.w	r2, #0
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(asagiValfTmr>5) {
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <eepromKontrol+0x5a8>)
 800074e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000752:	2a06      	cmp	r2, #6
 8000754:	f173 0300 	sbcs.w	r3, r3, #0
 8000758:	d33a      	bcc.n	80007d0 <eepromKontrol+0x5ac>
	    asagiValfTmr=0;
 800075a:	491c      	ldr	r1, [pc, #112]	; (80007cc <eepromKontrol+0x5a8>)
 800075c:	f04f 0200 	mov.w	r2, #0
 8000760:	f04f 0300 	mov.w	r3, #0
 8000764:	e9c1 2300 	strd	r2, r3, [r1]
 8000768:	e032      	b.n	80007d0 <eepromKontrol+0x5ac>
 800076a:	bf00      	nop
 800076c:	20000d08 	.word	0x20000d08
 8000770:	20001208 	.word	0x20001208
 8000774:	20001210 	.word	0x20001210
 8000778:	200010c0 	.word	0x200010c0
 800077c:	200010d8 	.word	0x200010d8
 8000780:	200010e0 	.word	0x200010e0
 8000784:	200010e8 	.word	0x200010e8
 8000788:	200010f0 	.word	0x200010f0
 800078c:	200010f8 	.word	0x200010f8
 8000790:	20001118 	.word	0x20001118
 8000794:	20001100 	.word	0x20001100
 8000798:	20001180 	.word	0x20001180
 800079c:	20001108 	.word	0x20001108
 80007a0:	20001188 	.word	0x20001188
 80007a4:	20001110 	.word	0x20001110
 80007a8:	20001120 	.word	0x20001120
 80007ac:	20001190 	.word	0x20001190
 80007b0:	20001128 	.word	0x20001128
 80007b4:	20001130 	.word	0x20001130
 80007b8:	20001138 	.word	0x20001138
 80007bc:	20001140 	.word	0x20001140
 80007c0:	20001148 	.word	0x20001148
 80007c4:	20001150 	.word	0x20001150
 80007c8:	20001158 	.word	0x20001158
 80007cc:	20001160 	.word	0x20001160
	}

	if(devirmeYukariIleriTmr>5) {
 80007d0:	4b3c      	ldr	r3, [pc, #240]	; (80008c4 <eepromKontrol+0x6a0>)
 80007d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007d6:	2a06      	cmp	r2, #6
 80007d8:	f173 0300 	sbcs.w	r3, r3, #0
 80007dc:	d306      	bcc.n	80007ec <eepromKontrol+0x5c8>
	    devirmeYukariIleriTmr=0;
 80007de:	4939      	ldr	r1, [pc, #228]	; (80008c4 <eepromKontrol+0x6a0>)
 80007e0:	f04f 0200 	mov.w	r2, #0
 80007e4:	f04f 0300 	mov.w	r3, #0
 80007e8:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(devirmeAsagiGeriTmr>5) {
 80007ec:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <eepromKontrol+0x6a4>)
 80007ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007f2:	2a06      	cmp	r2, #6
 80007f4:	f173 0300 	sbcs.w	r3, r3, #0
 80007f8:	d306      	bcc.n	8000808 <eepromKontrol+0x5e4>
	    devirmeAsagiGeriTmr=0;
 80007fa:	4933      	ldr	r1, [pc, #204]	; (80008c8 <eepromKontrol+0x6a4>)
 80007fc:	f04f 0200 	mov.w	r2, #0
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(makineCalismaTmr>180) {
 8000808:	4b30      	ldr	r3, [pc, #192]	; (80008cc <eepromKontrol+0x6a8>)
 800080a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800080e:	2ab5      	cmp	r2, #181	; 0xb5
 8000810:	f173 0300 	sbcs.w	r3, r3, #0
 8000814:	d306      	bcc.n	8000824 <eepromKontrol+0x600>
	    makineCalismaTmr=60;
 8000816:	492d      	ldr	r1, [pc, #180]	; (80008cc <eepromKontrol+0x6a8>)
 8000818:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800081c:	f04f 0300 	mov.w	r3, #0
 8000820:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(buzzer>1) {
 8000824:	4b2a      	ldr	r3, [pc, #168]	; (80008d0 <eepromKontrol+0x6ac>)
 8000826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800082a:	2a02      	cmp	r2, #2
 800082c:	f173 0300 	sbcs.w	r3, r3, #0
 8000830:	d306      	bcc.n	8000840 <eepromKontrol+0x61c>
	    buzzer=0;
 8000832:	4927      	ldr	r1, [pc, #156]	; (80008d0 <eepromKontrol+0x6ac>)
 8000834:	f04f 0200 	mov.w	r2, #0
 8000838:	f04f 0300 	mov.w	r3, #0
 800083c:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(demoMode>1) {
 8000840:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <eepromKontrol+0x6b0>)
 8000842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000846:	2a02      	cmp	r2, #2
 8000848:	f173 0300 	sbcs.w	r3, r3, #0
 800084c:	d306      	bcc.n	800085c <eepromKontrol+0x638>
	    demoMode=0;
 800084e:	4921      	ldr	r1, [pc, #132]	; (80008d4 <eepromKontrol+0x6b0>)
 8000850:	f04f 0200 	mov.w	r2, #0
 8000854:	f04f 0300 	mov.w	r3, #0
 8000858:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(calismaSayModu>1) {
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <eepromKontrol+0x6b4>)
 800085e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000862:	2a02      	cmp	r2, #2
 8000864:	f173 0300 	sbcs.w	r3, r3, #0
 8000868:	d306      	bcc.n	8000878 <eepromKontrol+0x654>
	    calismaSayModu=0;
 800086a:	491b      	ldr	r1, [pc, #108]	; (80008d8 <eepromKontrol+0x6b4>)
 800086c:	f04f 0200 	mov.w	r2, #0
 8000870:	f04f 0300 	mov.w	r3, #0
 8000874:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(dilSecim>1) {
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <eepromKontrol+0x6b8>)
 800087a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800087e:	2a02      	cmp	r2, #2
 8000880:	f173 0300 	sbcs.w	r3, r3, #0
 8000884:	d306      	bcc.n	8000894 <eepromKontrol+0x670>
	    dilSecim=0;
 8000886:	4915      	ldr	r1, [pc, #84]	; (80008dc <eepromKontrol+0x6b8>)
 8000888:	f04f 0200 	mov.w	r2, #0
 800088c:	f04f 0300 	mov.w	r3, #0
 8000890:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(iotMode>1) {
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <eepromKontrol+0x6bc>)
 8000896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800089a:	2a02      	cmp	r2, #2
 800089c:	f173 0300 	sbcs.w	r3, r3, #0
 80008a0:	d306      	bcc.n	80008b0 <eepromKontrol+0x68c>
		iotMode=0;
 80008a2:	490f      	ldr	r1, [pc, #60]	; (80008e0 <eepromKontrol+0x6bc>)
 80008a4:	f04f 0200 	mov.w	r2, #0
 80008a8:	f04f 0300 	mov.w	r3, #0
 80008ac:	e9c1 2300 	strd	r2, r3, [r1]
	}

	loadMenuTexts(dilSecim);
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <eepromKontrol+0x6b8>)
 80008b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008b6:	b2d3      	uxtb	r3, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f007 fadf 	bl	8007e7c <loadMenuTexts>
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20001168 	.word	0x20001168
 80008c8:	20001170 	.word	0x20001170
 80008cc:	20001178 	.word	0x20001178
 80008d0:	20001198 	.word	0x20001198
 80008d4:	200011a8 	.word	0x200011a8
 80008d8:	200011b8 	.word	0x200011b8
 80008dc:	200011c0 	.word	0x200011c0
 80008e0:	200011b0 	.word	0x200011b0

080008e4 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 80008e4:	b5b0      	push	{r4, r5, r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af04      	add	r7, sp, #16
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80008ee:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <hata2EEPROM+0xbc>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	1e5a      	subs	r2, r3, #1
 80008f4:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <hata2EEPROM+0xc0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4413      	add	r3, r2
 80008fa:	4a2b      	ldr	r2, [pc, #172]	; (80009a8 <hata2EEPROM+0xc4>)
 80008fc:	00db      	lsls	r3, r3, #3
 80008fe:	4413      	add	r3, r2
 8000900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000904:	4313      	orrs	r3, r2
 8000906:	d002      	beq.n	800090e <hata2EEPROM+0x2a>
		eepromDataFillWithEmpty();
 8000908:	f000 f8dc 	bl	8000ac4 <eepromDataFillWithEmpty>
		goto veriEkleme;
 800090c:	e000      	b.n	8000910 <hata2EEPROM+0x2c>
	} else {
		veriEkleme:
 800090e:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	e01b      	b.n	800094e <hata2EEPROM+0x6a>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <hata2EEPROM+0xc0>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	4a22      	ldr	r2, [pc, #136]	; (80009a8 <hata2EEPROM+0xc4>)
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	4413      	add	r3, r2
 8000924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000928:	4313      	orrs	r3, r2
 800092a:	d10d      	bne.n	8000948 <hata2EEPROM+0x64>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <hata2EEPROM+0xc0>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4413      	add	r3, r2
 8000934:	79fa      	ldrb	r2, [r7, #7]
 8000936:	2100      	movs	r1, #0
 8000938:	4614      	mov	r4, r2
 800093a:	460d      	mov	r5, r1
 800093c:	4a1a      	ldr	r2, [pc, #104]	; (80009a8 <hata2EEPROM+0xc4>)
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	4413      	add	r3, r2
 8000942:	e9c3 4500 	strd	r4, r5, [r3]
					break;
 8000946:	e007      	b.n	8000958 <hata2EEPROM+0x74>
			for(int i=0; i<indeksSayisi; i++) {
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	3301      	adds	r3, #1
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <hata2EEPROM+0xbc>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	429a      	cmp	r2, r3
 8000956:	dbde      	blt.n	8000916 <hata2EEPROM+0x32>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <hata2EEPROM+0xc0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	b299      	uxth	r1, r3
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <hata2EEPROM+0xbc>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	b298      	uxth	r0, r3
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <hata2EEPROM+0xc0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <hata2EEPROM+0xc4>)
 800096c:	4413      	add	r3, r2
 800096e:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <hata2EEPROM+0xbc>)
 8000970:	6812      	ldr	r2, [r2, #0]
 8000972:	b292      	uxth	r2, r2
 8000974:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000978:	9402      	str	r4, [sp, #8]
 800097a:	9201      	str	r2, [sp, #4]
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	4603      	mov	r3, r0
 8000980:	460a      	mov	r2, r1
 8000982:	21a0      	movs	r1, #160	; 0xa0
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <hata2EEPROM+0xc8>)
 8000986:	f00a fa4d 	bl	800ae24 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 800098a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800098e:	f009 fb01 	bl	8009f94 <HAL_Delay>
	eepromKontrol();
 8000992:	f7ff fc47 	bl	8000224 <eepromKontrol>
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bdb0      	pop	{r4, r5, r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000028 	.word	0x20000028
 80009a4:	2000002c 	.word	0x2000002c
 80009a8:	20000d08 	.word	0x20000d08
 80009ac:	20001858 	.word	0x20001858

080009b0 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d10f      	bne.n	80009e0 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 80009c0:	4a38      	ldr	r2, [pc, #224]	; (8000aa4 <hataKoduLcdGoster+0xf4>)
 80009c2:	2101      	movs	r1, #1
 80009c4:	2001      	movs	r0, #1
 80009c6:	f008 fe1c 	bl	8009602 <lcd_print>
		lcd_print(2, 1, "1");
 80009ca:	4a37      	ldr	r2, [pc, #220]	; (8000aa8 <hataKoduLcdGoster+0xf8>)
 80009cc:	2101      	movs	r1, #1
 80009ce:	2002      	movs	r0, #2
 80009d0:	f008 fe17 	bl	8009602 <lcd_print>
		lcd_print(2, 7, "          ");
 80009d4:	4a35      	ldr	r2, [pc, #212]	; (8000aac <hataKoduLcdGoster+0xfc>)
 80009d6:	2107      	movs	r1, #7
 80009d8:	2002      	movs	r0, #2
 80009da:	f008 fe12 	bl	8009602 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80009de:	e05d      	b.n	8000a9c <hataKoduLcdGoster+0xec>
	} else if(x==2){
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d10f      	bne.n	8000a06 <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 80009e6:	4a2f      	ldr	r2, [pc, #188]	; (8000aa4 <hataKoduLcdGoster+0xf4>)
 80009e8:	2101      	movs	r1, #1
 80009ea:	2001      	movs	r0, #1
 80009ec:	f008 fe09 	bl	8009602 <lcd_print>
		lcd_print(2, 2, "2");
 80009f0:	4a2f      	ldr	r2, [pc, #188]	; (8000ab0 <hataKoduLcdGoster+0x100>)
 80009f2:	2102      	movs	r1, #2
 80009f4:	2002      	movs	r0, #2
 80009f6:	f008 fe04 	bl	8009602 <lcd_print>
		lcd_print(2, 7, "          ");
 80009fa:	4a2c      	ldr	r2, [pc, #176]	; (8000aac <hataKoduLcdGoster+0xfc>)
 80009fc:	2107      	movs	r1, #7
 80009fe:	2002      	movs	r0, #2
 8000a00:	f008 fdff 	bl	8009602 <lcd_print>
}
 8000a04:	e04a      	b.n	8000a9c <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b03      	cmp	r3, #3
 8000a0a:	d10f      	bne.n	8000a2c <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000a0c:	4a25      	ldr	r2, [pc, #148]	; (8000aa4 <hataKoduLcdGoster+0xf4>)
 8000a0e:	2101      	movs	r1, #1
 8000a10:	2001      	movs	r0, #1
 8000a12:	f008 fdf6 	bl	8009602 <lcd_print>
		lcd_print(2, 3, "3");
 8000a16:	4a27      	ldr	r2, [pc, #156]	; (8000ab4 <hataKoduLcdGoster+0x104>)
 8000a18:	2103      	movs	r1, #3
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f008 fdf1 	bl	8009602 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a20:	4a22      	ldr	r2, [pc, #136]	; (8000aac <hataKoduLcdGoster+0xfc>)
 8000a22:	2107      	movs	r1, #7
 8000a24:	2002      	movs	r0, #2
 8000a26:	f008 fdec 	bl	8009602 <lcd_print>
}
 8000a2a:	e037      	b.n	8000a9c <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	d10f      	bne.n	8000a52 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000a32:	4a1c      	ldr	r2, [pc, #112]	; (8000aa4 <hataKoduLcdGoster+0xf4>)
 8000a34:	2101      	movs	r1, #1
 8000a36:	2001      	movs	r0, #1
 8000a38:	f008 fde3 	bl	8009602 <lcd_print>
		lcd_print(2, 4, "4");
 8000a3c:	4a1e      	ldr	r2, [pc, #120]	; (8000ab8 <hataKoduLcdGoster+0x108>)
 8000a3e:	2104      	movs	r1, #4
 8000a40:	2002      	movs	r0, #2
 8000a42:	f008 fdde 	bl	8009602 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a46:	4a19      	ldr	r2, [pc, #100]	; (8000aac <hataKoduLcdGoster+0xfc>)
 8000a48:	2107      	movs	r1, #7
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	f008 fdd9 	bl	8009602 <lcd_print>
}
 8000a50:	e024      	b.n	8000a9c <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b05      	cmp	r3, #5
 8000a56:	d10f      	bne.n	8000a78 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000a58:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <hataKoduLcdGoster+0xf4>)
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f008 fdd0 	bl	8009602 <lcd_print>
		lcd_print(2, 5, "5");
 8000a62:	4a16      	ldr	r2, [pc, #88]	; (8000abc <hataKoduLcdGoster+0x10c>)
 8000a64:	2105      	movs	r1, #5
 8000a66:	2002      	movs	r0, #2
 8000a68:	f008 fdcb 	bl	8009602 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a6c:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <hataKoduLcdGoster+0xfc>)
 8000a6e:	2107      	movs	r1, #7
 8000a70:	2002      	movs	r0, #2
 8000a72:	f008 fdc6 	bl	8009602 <lcd_print>
}
 8000a76:	e011      	b.n	8000a9c <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d10e      	bne.n	8000a9c <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000a7e:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <hataKoduLcdGoster+0xf4>)
 8000a80:	2101      	movs	r1, #1
 8000a82:	2001      	movs	r0, #1
 8000a84:	f008 fdbd 	bl	8009602 <lcd_print>
		lcd_print(2, 6, "6");
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <hataKoduLcdGoster+0x110>)
 8000a8a:	2106      	movs	r1, #6
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f008 fdb8 	bl	8009602 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a92:	4a06      	ldr	r2, [pc, #24]	; (8000aac <hataKoduLcdGoster+0xfc>)
 8000a94:	2107      	movs	r1, #7
 8000a96:	2002      	movs	r0, #2
 8000a98:	f008 fdb3 	bl	8009602 <lcd_print>
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000181c 	.word	0x2000181c
 8000aa8:	0800d0ec 	.word	0x0800d0ec
 8000aac:	0800d0f0 	.word	0x0800d0f0
 8000ab0:	0800d0fc 	.word	0x0800d0fc
 8000ab4:	0800d100 	.word	0x0800d100
 8000ab8:	0800d104 	.word	0x0800d104
 8000abc:	0800d108 	.word	0x0800d108
 8000ac0:	0800d10c 	.word	0x0800d10c

08000ac4 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	e00f      	b.n	8000af0 <eepromDataFillWithEmpty+0x2c>
		eepromData[eepromVal[i]] = 0;
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <eepromDataFillWithEmpty+0x44>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <eepromDataFillWithEmpty+0x48>)
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	18d1      	adds	r1, r2, r3
 8000ade:	f04f 0200 	mov.w	r2, #0
 8000ae2:	f04f 0300 	mov.w	r3, #0
 8000ae6:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i=0; i<indeksSayisi; i++) {
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3301      	adds	r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <eepromDataFillWithEmpty+0x4c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	dbea      	blt.n	8000ad0 <eepromDataFillWithEmpty+0xc>
	}
}
 8000afa:	bf00      	nop
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000d08 	.word	0x20000d08
 8000b10:	20000028 	.word	0x20000028

08000b14 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000b26:	4b50      	ldr	r3, [pc, #320]	; (8000c68 <i2cTest+0x154>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b4e      	ldr	r3, [pc, #312]	; (8000c68 <i2cTest+0x154>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f022 0201 	bic.w	r2, r2, #1
 8000b34:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000b36:	484c      	ldr	r0, [pc, #304]	; (8000c68 <i2cTest+0x154>)
 8000b38:	f00a f846 	bl	800abc8 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b3c:	23c0      	movs	r3, #192	; 0xc0
 8000b3e:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000b40:	2311      	movs	r3, #17
 8000b42:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4846      	ldr	r0, [pc, #280]	; (8000c6c <i2cTest+0x158>)
 8000b52:	f009 fc4d 	bl	800a3f0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2140      	movs	r1, #64	; 0x40
 8000b5a:	4844      	ldr	r0, [pc, #272]	; (8000c6c <i2cTest+0x158>)
 8000b5c:	f009 febf 	bl	800a8de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2180      	movs	r1, #128	; 0x80
 8000b64:	4841      	ldr	r0, [pc, #260]	; (8000c6c <i2cTest+0x158>)
 8000b66:	f009 feba 	bl	800a8de <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000b6a:	200a      	movs	r0, #10
 8000b6c:	f009 fa12 	bl	8009f94 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000b70:	bf00      	nop
 8000b72:	2140      	movs	r1, #64	; 0x40
 8000b74:	483d      	ldr	r0, [pc, #244]	; (8000c6c <i2cTest+0x158>)
 8000b76:	f009 fe9b 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d006      	beq.n	8000b8e <i2cTest+0x7a>
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	483a      	ldr	r0, [pc, #232]	; (8000c6c <i2cTest+0x158>)
 8000b84:	f009 fe94 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d1f1      	bne.n	8000b72 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	4836      	ldr	r0, [pc, #216]	; (8000c6c <i2cTest+0x158>)
 8000b94:	f009 fea3 	bl	800a8de <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000b98:	200a      	movs	r0, #10
 8000b9a:	f009 f9fb 	bl	8009f94 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000b9e:	bf00      	nop
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	4832      	ldr	r0, [pc, #200]	; (8000c6c <i2cTest+0x158>)
 8000ba4:	f009 fe84 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d0f8      	beq.n	8000ba0 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2140      	movs	r1, #64	; 0x40
 8000bb2:	482e      	ldr	r0, [pc, #184]	; (8000c6c <i2cTest+0x158>)
 8000bb4:	f009 fe93 	bl	800a8de <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000bb8:	200a      	movs	r0, #10
 8000bba:	f009 f9eb 	bl	8009f94 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000bbe:	bf00      	nop
 8000bc0:	2140      	movs	r1, #64	; 0x40
 8000bc2:	482a      	ldr	r0, [pc, #168]	; (8000c6c <i2cTest+0x158>)
 8000bc4:	f009 fe74 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d0f8      	beq.n	8000bc0 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2140      	movs	r1, #64	; 0x40
 8000bd2:	4826      	ldr	r0, [pc, #152]	; (8000c6c <i2cTest+0x158>)
 8000bd4:	f009 fe83 	bl	800a8de <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000bd8:	200a      	movs	r0, #10
 8000bda:	f009 f9db 	bl	8009f94 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000bde:	bf00      	nop
 8000be0:	2140      	movs	r1, #64	; 0x40
 8000be2:	4822      	ldr	r0, [pc, #136]	; (8000c6c <i2cTest+0x158>)
 8000be4:	f009 fe64 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d1f8      	bne.n	8000be0 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	481e      	ldr	r0, [pc, #120]	; (8000c6c <i2cTest+0x158>)
 8000bf4:	f009 fe73 	bl	800a8de <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000bf8:	200a      	movs	r0, #10
 8000bfa:	f009 f9cb 	bl	8009f94 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000bfe:	bf00      	nop
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	481a      	ldr	r0, [pc, #104]	; (8000c6c <i2cTest+0x158>)
 8000c04:	f009 fe54 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d1f8      	bne.n	8000c00 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c0e:	23c0      	movs	r3, #192	; 0xc0
 8000c10:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000c12:	2312      	movs	r3, #18
 8000c14:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c1e:	463b      	mov	r3, r7
 8000c20:	4619      	mov	r1, r3
 8000c22:	4812      	ldr	r0, [pc, #72]	; (8000c6c <i2cTest+0x158>)
 8000c24:	f009 fbe4 	bl	800a3f0 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <i2cTest+0x154>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <i2cTest+0x154>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c36:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <i2cTest+0x154>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <i2cTest+0x154>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c46:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <i2cTest+0x154>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <i2cTest+0x154>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f042 0201 	orr.w	r2, r2, #1
 8000c56:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000c58:	4803      	ldr	r0, [pc, #12]	; (8000c68 <i2cTest+0x154>)
 8000c5a:	f009 fe71 	bl	800a940 <HAL_I2C_Init>
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20001858 	.word	0x20001858
 8000c6c:	40010c00 	.word	0x40010c00

08000c70 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c74:	f3bf 8f4f 	dsb	sy
}
 8000c78:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <__NVIC_SystemReset+0x24>)
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c82:	4904      	ldr	r1, [pc, #16]	; (8000c94 <__NVIC_SystemReset+0x24>)
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <__NVIC_SystemReset+0x28>)
 8000c86:	4313      	orrs	r3, r2
 8000c88:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c8a:	f3bf 8f4f 	dsb	sy
}
 8000c8e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <__NVIC_SystemReset+0x20>
 8000c94:	e000ed00 	.word	0xe000ed00
 8000c98:	05fa0004 	.word	0x05fa0004

08000c9c <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 8000c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ca0:	b0fc      	sub	sp, #496	; 0x1f0
 8000ca2:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	489b      	ldr	r0, [pc, #620]	; (8000f14 <menu+0x278>)
 8000ca8:	f009 fe02 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	f040 80f0 	bne.w	8000e94 <menu+0x1f8>
 8000cb4:	4b98      	ldr	r3, [pc, #608]	; (8000f18 <menu+0x27c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	f083 0301 	eor.w	r3, r3, #1
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f000 80e8 	beq.w	8000e94 <menu+0x1f8>
		menuSayac = menuSayac+1;
 8000cc4:	4b95      	ldr	r3, [pc, #596]	; (8000f1c <menu+0x280>)
 8000cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cca:	1c54      	adds	r4, r2, #1
 8000ccc:	f143 0500 	adc.w	r5, r3, #0
 8000cd0:	4b92      	ldr	r3, [pc, #584]	; (8000f1c <menu+0x280>)
 8000cd2:	e9c3 4500 	strd	r4, r5, [r3]
		if (menuSayac == 32) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8000cd6:	4b91      	ldr	r3, [pc, #580]	; (8000f1c <menu+0x280>)
 8000cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cdc:	f1a2 0120 	sub.w	r1, r2, #32
 8000ce0:	430b      	orrs	r3, r1
 8000ce2:	d106      	bne.n	8000cf2 <menu+0x56>
			menuSayac = 1;
 8000ce4:	498d      	ldr	r1, [pc, #564]	; (8000f1c <menu+0x280>)
 8000ce6:	f04f 0201 	mov.w	r2, #1
 8000cea:	f04f 0300 	mov.w	r3, #0
 8000cee:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8000cf2:	4b8a      	ldr	r3, [pc, #552]	; (8000f1c <menu+0x280>)
 8000cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf8:	f1a2 0112 	sub.w	r1, r2, #18
 8000cfc:	430b      	orrs	r3, r1
 8000cfe:	d10b      	bne.n	8000d18 <menu+0x7c>
 8000d00:	4b87      	ldr	r3, [pc, #540]	; (8000f20 <menu+0x284>)
 8000d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	d106      	bne.n	8000d18 <menu+0x7c>
			menuSayac = 21;
 8000d0a:	4984      	ldr	r1, [pc, #528]	; (8000f1c <menu+0x280>)
 8000d0c:	f04f 0215 	mov.w	r2, #21
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8000d18:	4b80      	ldr	r3, [pc, #512]	; (8000f1c <menu+0x280>)
 8000d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1e:	f1a2 0108 	sub.w	r1, r2, #8
 8000d22:	430b      	orrs	r3, r1
 8000d24:	d10b      	bne.n	8000d3e <menu+0xa2>
 8000d26:	4b7f      	ldr	r3, [pc, #508]	; (8000f24 <menu+0x288>)
 8000d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	d106      	bne.n	8000d3e <menu+0xa2>
			menuSayac = 16;
 8000d30:	497a      	ldr	r1, [pc, #488]	; (8000f1c <menu+0x280>)
 8000d32:	f04f 0210 	mov.w	r2, #16
 8000d36:	f04f 0300 	mov.w	r3, #0
 8000d3a:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8000d3e:	4b77      	ldr	r3, [pc, #476]	; (8000f1c <menu+0x280>)
 8000d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d44:	f1a2 010d 	sub.w	r1, r2, #13
 8000d48:	430b      	orrs	r3, r1
 8000d4a:	d10c      	bne.n	8000d66 <menu+0xca>
 8000d4c:	4b75      	ldr	r3, [pc, #468]	; (8000f24 <menu+0x288>)
 8000d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d52:	1e51      	subs	r1, r2, #1
 8000d54:	430b      	orrs	r3, r1
 8000d56:	d106      	bne.n	8000d66 <menu+0xca>
			menuSayac = 16;
 8000d58:	4970      	ldr	r1, [pc, #448]	; (8000f1c <menu+0x280>)
 8000d5a:	f04f 0210 	mov.w	r2, #16
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000d66:	4b6d      	ldr	r3, [pc, #436]	; (8000f1c <menu+0x280>)
 8000d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6c:	f1a2 0109 	sub.w	r1, r2, #9
 8000d70:	430b      	orrs	r3, r1
 8000d72:	d10c      	bne.n	8000d8e <menu+0xf2>
 8000d74:	4b6b      	ldr	r3, [pc, #428]	; (8000f24 <menu+0x288>)
 8000d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7a:	1e91      	subs	r1, r2, #2
 8000d7c:	430b      	orrs	r3, r1
 8000d7e:	d106      	bne.n	8000d8e <menu+0xf2>
			menuSayac = 13;
 8000d80:	4966      	ldr	r1, [pc, #408]	; (8000f1c <menu+0x280>)
 8000d82:	f04f 020d 	mov.w	r2, #13
 8000d86:	f04f 0300 	mov.w	r3, #0
 8000d8a:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000d8e:	4b63      	ldr	r3, [pc, #396]	; (8000f1c <menu+0x280>)
 8000d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d94:	f1a2 010a 	sub.w	r1, r2, #10
 8000d98:	430b      	orrs	r3, r1
 8000d9a:	d112      	bne.n	8000dc2 <menu+0x126>
 8000d9c:	4b62      	ldr	r3, [pc, #392]	; (8000f28 <menu+0x28c>)
 8000d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da2:	1e51      	subs	r1, r2, #1
 8000da4:	430b      	orrs	r3, r1
 8000da6:	d005      	beq.n	8000db4 <menu+0x118>
 8000da8:	4b5f      	ldr	r3, [pc, #380]	; (8000f28 <menu+0x28c>)
 8000daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dae:	1e91      	subs	r1, r2, #2
 8000db0:	430b      	orrs	r3, r1
 8000db2:	d106      	bne.n	8000dc2 <menu+0x126>
			menuSayac = 11;
 8000db4:	4959      	ldr	r1, [pc, #356]	; (8000f1c <menu+0x280>)
 8000db6:	f04f 020b 	mov.w	r2, #11
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8000dc2:	4b56      	ldr	r3, [pc, #344]	; (8000f1c <menu+0x280>)
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	f1a2 010c 	sub.w	r1, r2, #12
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	d118      	bne.n	8000e02 <menu+0x166>
 8000dd0:	4b56      	ldr	r3, [pc, #344]	; (8000f2c <menu+0x290>)
 8000dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd6:	1e51      	subs	r1, r2, #1
 8000dd8:	430b      	orrs	r3, r1
 8000dda:	d005      	beq.n	8000de8 <menu+0x14c>
 8000ddc:	4b53      	ldr	r3, [pc, #332]	; (8000f2c <menu+0x290>)
 8000dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de2:	1e91      	subs	r1, r2, #2
 8000de4:	430b      	orrs	r3, r1
 8000de6:	d10c      	bne.n	8000e02 <menu+0x166>
 8000de8:	4b4e      	ldr	r3, [pc, #312]	; (8000f24 <menu+0x288>)
 8000dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dee:	1e51      	subs	r1, r2, #1
 8000df0:	430b      	orrs	r3, r1
 8000df2:	d106      	bne.n	8000e02 <menu+0x166>
			menuSayac = 16;
 8000df4:	4949      	ldr	r1, [pc, #292]	; (8000f1c <menu+0x280>)
 8000df6:	f04f 0210 	mov.w	r2, #16
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8000e02:	4b46      	ldr	r3, [pc, #280]	; (8000f1c <menu+0x280>)
 8000e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e08:	f1a2 010c 	sub.w	r1, r2, #12
 8000e0c:	430b      	orrs	r3, r1
 8000e0e:	d118      	bne.n	8000e42 <menu+0x1a6>
 8000e10:	4b46      	ldr	r3, [pc, #280]	; (8000f2c <menu+0x290>)
 8000e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e16:	1e51      	subs	r1, r2, #1
 8000e18:	430b      	orrs	r3, r1
 8000e1a:	d005      	beq.n	8000e28 <menu+0x18c>
 8000e1c:	4b43      	ldr	r3, [pc, #268]	; (8000f2c <menu+0x290>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	1e91      	subs	r1, r2, #2
 8000e24:	430b      	orrs	r3, r1
 8000e26:	d10c      	bne.n	8000e42 <menu+0x1a6>
 8000e28:	4b3e      	ldr	r3, [pc, #248]	; (8000f24 <menu+0x288>)
 8000e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2e:	1ed1      	subs	r1, r2, #3
 8000e30:	430b      	orrs	r3, r1
 8000e32:	d106      	bne.n	8000e42 <menu+0x1a6>
			menuSayac = 13;
 8000e34:	4939      	ldr	r1, [pc, #228]	; (8000f1c <menu+0x280>)
 8000e36:	f04f 020d 	mov.w	r2, #13
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000e42:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <menu+0x280>)
 8000e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e48:	f1a2 010f 	sub.w	r1, r2, #15
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	d10c      	bne.n	8000e6a <menu+0x1ce>
 8000e50:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <menu+0x294>)
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	1e51      	subs	r1, r2, #1
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	d106      	bne.n	8000e6a <menu+0x1ce>
			menuSayac = 16;
 8000e5c:	492f      	ldr	r1, [pc, #188]	; (8000f1c <menu+0x280>)
 8000e5e:	f04f 0210 	mov.w	r2, #16
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <menu+0x280>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	f1a2 0118 	sub.w	r1, r2, #24
 8000e74:	430b      	orrs	r3, r1
 8000e76:	d10b      	bne.n	8000e90 <menu+0x1f4>
 8000e78:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <menu+0x284>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	d106      	bne.n	8000e90 <menu+0x1f4>
			menuSayac = 26;
 8000e82:	4926      	ldr	r1, [pc, #152]	; (8000f1c <menu+0x280>)
 8000e84:	f04f 021a 	mov.w	r2, #26
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	e9c1 2300 	strd	r2, r3, [r1]
		}

		bekle();
 8000e90:	f003 f950 	bl	8004134 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000e94:	2108      	movs	r1, #8
 8000e96:	4827      	ldr	r0, [pc, #156]	; (8000f34 <menu+0x298>)
 8000e98:	f009 fd0a 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	f040 80df 	bne.w	8001062 <menu+0x3c6>
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <menu+0x27c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	f083 0301 	eor.w	r3, r3, #1
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 80d7 	beq.w	8001062 <menu+0x3c6>
		if (menuSayac <= 1) {
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <menu+0x280>)
 8000eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eba:	2a02      	cmp	r2, #2
 8000ebc:	f173 0300 	sbcs.w	r3, r3, #0
 8000ec0:	d206      	bcs.n	8000ed0 <menu+0x234>
			menuSayac = 31;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8000ec2:	4916      	ldr	r1, [pc, #88]	; (8000f1c <menu+0x280>)
 8000ec4:	f04f 021f 	mov.w	r2, #31
 8000ec8:	f04f 0300 	mov.w	r3, #0
 8000ecc:	e9c1 2300 	strd	r2, r3, [r1]
		}

		menuSayac = menuSayac - 1;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <menu+0x280>)
 8000ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed6:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000eda:	f143 39ff 	adc.w	r9, r3, #4294967295
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <menu+0x280>)
 8000ee0:	e9c3 8900 	strd	r8, r9, [r3]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <menu+0x280>)
 8000ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eea:	f1a2 0114 	sub.w	r1, r2, #20
 8000eee:	430b      	orrs	r3, r1
 8000ef0:	d10b      	bne.n	8000f0a <menu+0x26e>
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <menu+0x284>)
 8000ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	d106      	bne.n	8000f0a <menu+0x26e>
			menuSayac = 17;
 8000efc:	4907      	ldr	r1, [pc, #28]	; (8000f1c <menu+0x280>)
 8000efe:	f04f 0211 	mov.w	r2, #17
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <menu+0x280>)
 8000f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f10:	e012      	b.n	8000f38 <menu+0x29c>
 8000f12:	bf00      	nop
 8000f14:	40010800 	.word	0x40010800
 8000f18:	2000121b 	.word	0x2000121b
 8000f1c:	200010b8 	.word	0x200010b8
 8000f20:	20001130 	.word	0x20001130
 8000f24:	200010f8 	.word	0x200010f8
 8000f28:	20001100 	.word	0x20001100
 8000f2c:	20001108 	.word	0x20001108
 8000f30:	20001110 	.word	0x20001110
 8000f34:	40011000 	.word	0x40011000
 8000f38:	f1a2 010f 	sub.w	r1, r2, #15
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	d10b      	bne.n	8000f58 <menu+0x2bc>
 8000f40:	4ba6      	ldr	r3, [pc, #664]	; (80011dc <menu+0x540>)
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	d106      	bne.n	8000f58 <menu+0x2bc>
			menuSayac = 7;
 8000f4a:	49a5      	ldr	r1, [pc, #660]	; (80011e0 <menu+0x544>)
 8000f4c:	f04f 0207 	mov.w	r2, #7
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8000f58:	4ba1      	ldr	r3, [pc, #644]	; (80011e0 <menu+0x544>)
 8000f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5e:	f1a2 010f 	sub.w	r1, r2, #15
 8000f62:	430b      	orrs	r3, r1
 8000f64:	d10c      	bne.n	8000f80 <menu+0x2e4>
 8000f66:	4b9d      	ldr	r3, [pc, #628]	; (80011dc <menu+0x540>)
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	1e51      	subs	r1, r2, #1
 8000f6e:	430b      	orrs	r3, r1
 8000f70:	d106      	bne.n	8000f80 <menu+0x2e4>
			menuSayac = 12;
 8000f72:	499b      	ldr	r1, [pc, #620]	; (80011e0 <menu+0x544>)
 8000f74:	f04f 020c 	mov.w	r2, #12
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8000f80:	4b97      	ldr	r3, [pc, #604]	; (80011e0 <menu+0x544>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	f1a2 010c 	sub.w	r1, r2, #12
 8000f8a:	430b      	orrs	r3, r1
 8000f8c:	d10c      	bne.n	8000fa8 <menu+0x30c>
 8000f8e:	4b93      	ldr	r3, [pc, #588]	; (80011dc <menu+0x540>)
 8000f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f94:	1e91      	subs	r1, r2, #2
 8000f96:	430b      	orrs	r3, r1
 8000f98:	d106      	bne.n	8000fa8 <menu+0x30c>
			menuSayac = 8;
 8000f9a:	4991      	ldr	r1, [pc, #580]	; (80011e0 <menu+0x544>)
 8000f9c:	f04f 0208 	mov.w	r2, #8
 8000fa0:	f04f 0300 	mov.w	r3, #0
 8000fa4:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000fa8:	4b8d      	ldr	r3, [pc, #564]	; (80011e0 <menu+0x544>)
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fae:	f1a2 010a 	sub.w	r1, r2, #10
 8000fb2:	430b      	orrs	r3, r1
 8000fb4:	d112      	bne.n	8000fdc <menu+0x340>
 8000fb6:	4b8b      	ldr	r3, [pc, #556]	; (80011e4 <menu+0x548>)
 8000fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbc:	1e51      	subs	r1, r2, #1
 8000fbe:	430b      	orrs	r3, r1
 8000fc0:	d005      	beq.n	8000fce <menu+0x332>
 8000fc2:	4b88      	ldr	r3, [pc, #544]	; (80011e4 <menu+0x548>)
 8000fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc8:	1e91      	subs	r1, r2, #2
 8000fca:	430b      	orrs	r3, r1
 8000fcc:	d106      	bne.n	8000fdc <menu+0x340>
			menuSayac = 9;
 8000fce:	4984      	ldr	r1, [pc, #528]	; (80011e0 <menu+0x544>)
 8000fd0:	f04f 0209 	mov.w	r2, #9
 8000fd4:	f04f 0300 	mov.w	r3, #0
 8000fd8:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8000fdc:	4b80      	ldr	r3, [pc, #512]	; (80011e0 <menu+0x544>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f1a2 010c 	sub.w	r1, r2, #12
 8000fe6:	430b      	orrs	r3, r1
 8000fe8:	d112      	bne.n	8001010 <menu+0x374>
 8000fea:	4b7f      	ldr	r3, [pc, #508]	; (80011e8 <menu+0x54c>)
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	1e51      	subs	r1, r2, #1
 8000ff2:	430b      	orrs	r3, r1
 8000ff4:	d005      	beq.n	8001002 <menu+0x366>
 8000ff6:	4b7c      	ldr	r3, [pc, #496]	; (80011e8 <menu+0x54c>)
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	1e91      	subs	r1, r2, #2
 8000ffe:	430b      	orrs	r3, r1
 8001000:	d106      	bne.n	8001010 <menu+0x374>
			menuSayac = 11;
 8001002:	4977      	ldr	r1, [pc, #476]	; (80011e0 <menu+0x544>)
 8001004:	f04f 020b 	mov.w	r2, #11
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001010:	4b73      	ldr	r3, [pc, #460]	; (80011e0 <menu+0x544>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	f1a2 010f 	sub.w	r1, r2, #15
 800101a:	430b      	orrs	r3, r1
 800101c:	d10c      	bne.n	8001038 <menu+0x39c>
 800101e:	4b73      	ldr	r3, [pc, #460]	; (80011ec <menu+0x550>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	1e51      	subs	r1, r2, #1
 8001026:	430b      	orrs	r3, r1
 8001028:	d106      	bne.n	8001038 <menu+0x39c>
			menuSayac = 14;
 800102a:	496d      	ldr	r1, [pc, #436]	; (80011e0 <menu+0x544>)
 800102c:	f04f 020e 	mov.w	r2, #14
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001038:	4b69      	ldr	r3, [pc, #420]	; (80011e0 <menu+0x544>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	f1a2 0119 	sub.w	r1, r2, #25
 8001042:	430b      	orrs	r3, r1
 8001044:	d10b      	bne.n	800105e <menu+0x3c2>
 8001046:	4b6a      	ldr	r3, [pc, #424]	; (80011f0 <menu+0x554>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	4313      	orrs	r3, r2
 800104e:	d106      	bne.n	800105e <menu+0x3c2>
			menuSayac = 23;
 8001050:	4963      	ldr	r1, [pc, #396]	; (80011e0 <menu+0x544>)
 8001052:	f04f 0217 	mov.w	r2, #23
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	e9c1 2300 	strd	r2, r3, [r1]
		}

		bekle();
 800105e:	f003 f869 	bl	8004134 <bekle>
	}

	if (menuSayac == 0) {
 8001062:	4b5f      	ldr	r3, [pc, #380]	; (80011e0 <menu+0x544>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	4313      	orrs	r3, r2
 800106a:	d109      	bne.n	8001080 <menu+0x3e4>
		lcd_print(1, 1, menuyeGirildiText);
 800106c:	4a61      	ldr	r2, [pc, #388]	; (80011f4 <menu+0x558>)
 800106e:	2101      	movs	r1, #1
 8001070:	2001      	movs	r0, #1
 8001072:	f008 fac6 	bl	8009602 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8001076:	4a60      	ldr	r2, [pc, #384]	; (80011f8 <menu+0x55c>)
 8001078:	2101      	movs	r1, #1
 800107a:	2002      	movs	r0, #2
 800107c:	f008 fac1 	bl	8009602 <lcd_print>
	}

	if (menuSayac == 1) {
 8001080:	4b57      	ldr	r3, [pc, #348]	; (80011e0 <menu+0x544>)
 8001082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001086:	1e51      	subs	r1, r2, #1
 8001088:	430b      	orrs	r3, r1
 800108a:	f040 82a5 	bne.w	80015d8 <menu+0x93c>
		lcd_print(1, 1, hataKayitListText);
 800108e:	4a5b      	ldr	r2, [pc, #364]	; (80011fc <menu+0x560>)
 8001090:	2101      	movs	r1, #1
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fab5 	bl	8009602 <lcd_print>

		if(hataGostermeSirasi == 0) {
 8001098:	4b59      	ldr	r3, [pc, #356]	; (8001200 <menu+0x564>)
 800109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109e:	4313      	orrs	r3, r2
 80010a0:	d117      	bne.n	80010d2 <menu+0x436>
			lcd_print(2, 1, birHataKoduText);
 80010a2:	4a58      	ldr	r2, [pc, #352]	; (8001204 <menu+0x568>)
 80010a4:	2101      	movs	r1, #1
 80010a6:	2002      	movs	r0, #2
 80010a8:	f008 faab 	bl	8009602 <lcd_print>
			lcd_print(2, 15, "   ");
 80010ac:	4a56      	ldr	r2, [pc, #344]	; (8001208 <menu+0x56c>)
 80010ae:	210f      	movs	r1, #15
 80010b0:	2002      	movs	r0, #2
 80010b2:	f008 faa6 	bl	8009602 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80010b6:	4b55      	ldr	r3, [pc, #340]	; (800120c <menu+0x570>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	4613      	mov	r3, r2
 80010be:	220a      	movs	r2, #10
 80010c0:	4953      	ldr	r1, [pc, #332]	; (8001210 <menu+0x574>)
 80010c2:	4618      	mov	r0, r3
 80010c4:	f00b ff96 	bl	800cff4 <itoa>
			lcd_print(2, 14, snum);
 80010c8:	4a51      	ldr	r2, [pc, #324]	; (8001210 <menu+0x574>)
 80010ca:	210e      	movs	r1, #14
 80010cc:	2002      	movs	r0, #2
 80010ce:	f008 fa98 	bl	8009602 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80010d2:	4b4b      	ldr	r3, [pc, #300]	; (8001200 <menu+0x564>)
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	1e51      	subs	r1, r2, #1
 80010da:	430b      	orrs	r3, r1
 80010dc:	d117      	bne.n	800110e <menu+0x472>
			lcd_print(2, 1, ikiHataKoduText);
 80010de:	4a4d      	ldr	r2, [pc, #308]	; (8001214 <menu+0x578>)
 80010e0:	2101      	movs	r1, #1
 80010e2:	2002      	movs	r0, #2
 80010e4:	f008 fa8d 	bl	8009602 <lcd_print>
			lcd_print(2, 15, "  ");
 80010e8:	4a4b      	ldr	r2, [pc, #300]	; (8001218 <menu+0x57c>)
 80010ea:	210f      	movs	r1, #15
 80010ec:	2002      	movs	r0, #2
 80010ee:	f008 fa88 	bl	8009602 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80010f2:	4b4a      	ldr	r3, [pc, #296]	; (800121c <menu+0x580>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	4613      	mov	r3, r2
 80010fa:	220a      	movs	r2, #10
 80010fc:	4944      	ldr	r1, [pc, #272]	; (8001210 <menu+0x574>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f00b ff78 	bl	800cff4 <itoa>
			lcd_print(2, 14, snum);
 8001104:	4a42      	ldr	r2, [pc, #264]	; (8001210 <menu+0x574>)
 8001106:	210e      	movs	r1, #14
 8001108:	2002      	movs	r0, #2
 800110a:	f008 fa7a 	bl	8009602 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800110e:	4b3c      	ldr	r3, [pc, #240]	; (8001200 <menu+0x564>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	1e91      	subs	r1, r2, #2
 8001116:	430b      	orrs	r3, r1
 8001118:	d117      	bne.n	800114a <menu+0x4ae>
			lcd_print(2, 1, ucHataKoduText);
 800111a:	4a41      	ldr	r2, [pc, #260]	; (8001220 <menu+0x584>)
 800111c:	2101      	movs	r1, #1
 800111e:	2002      	movs	r0, #2
 8001120:	f008 fa6f 	bl	8009602 <lcd_print>
			lcd_print(2, 15, "  ");
 8001124:	4a3c      	ldr	r2, [pc, #240]	; (8001218 <menu+0x57c>)
 8001126:	210f      	movs	r1, #15
 8001128:	2002      	movs	r0, #2
 800112a:	f008 fa6a 	bl	8009602 <lcd_print>
			itoa(hataKayit3, snum, 10);
 800112e:	4b3d      	ldr	r3, [pc, #244]	; (8001224 <menu+0x588>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	4613      	mov	r3, r2
 8001136:	220a      	movs	r2, #10
 8001138:	4935      	ldr	r1, [pc, #212]	; (8001210 <menu+0x574>)
 800113a:	4618      	mov	r0, r3
 800113c:	f00b ff5a 	bl	800cff4 <itoa>
			lcd_print(2, 14, snum);
 8001140:	4a33      	ldr	r2, [pc, #204]	; (8001210 <menu+0x574>)
 8001142:	210e      	movs	r1, #14
 8001144:	2002      	movs	r0, #2
 8001146:	f008 fa5c 	bl	8009602 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800114a:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <menu+0x564>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	1ed1      	subs	r1, r2, #3
 8001152:	430b      	orrs	r3, r1
 8001154:	d117      	bne.n	8001186 <menu+0x4ea>
			lcd_print(2, 1, dortHataKoduText);
 8001156:	4a34      	ldr	r2, [pc, #208]	; (8001228 <menu+0x58c>)
 8001158:	2101      	movs	r1, #1
 800115a:	2002      	movs	r0, #2
 800115c:	f008 fa51 	bl	8009602 <lcd_print>
			lcd_print(2, 15, "  ");
 8001160:	4a2d      	ldr	r2, [pc, #180]	; (8001218 <menu+0x57c>)
 8001162:	210f      	movs	r1, #15
 8001164:	2002      	movs	r0, #2
 8001166:	f008 fa4c 	bl	8009602 <lcd_print>
			itoa(hataKayit4, snum, 10);
 800116a:	4b30      	ldr	r3, [pc, #192]	; (800122c <menu+0x590>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	4613      	mov	r3, r2
 8001172:	220a      	movs	r2, #10
 8001174:	4926      	ldr	r1, [pc, #152]	; (8001210 <menu+0x574>)
 8001176:	4618      	mov	r0, r3
 8001178:	f00b ff3c 	bl	800cff4 <itoa>
			lcd_print(2, 14, snum);
 800117c:	4a24      	ldr	r2, [pc, #144]	; (8001210 <menu+0x574>)
 800117e:	210e      	movs	r1, #14
 8001180:	2002      	movs	r0, #2
 8001182:	f008 fa3e 	bl	8009602 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001186:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <menu+0x564>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	1f11      	subs	r1, r2, #4
 800118e:	430b      	orrs	r3, r1
 8001190:	d117      	bne.n	80011c2 <menu+0x526>
			lcd_print(2, 1, besHataKoduText);
 8001192:	4a27      	ldr	r2, [pc, #156]	; (8001230 <menu+0x594>)
 8001194:	2101      	movs	r1, #1
 8001196:	2002      	movs	r0, #2
 8001198:	f008 fa33 	bl	8009602 <lcd_print>
			lcd_print(2, 15, "  ");
 800119c:	4a1e      	ldr	r2, [pc, #120]	; (8001218 <menu+0x57c>)
 800119e:	210f      	movs	r1, #15
 80011a0:	2002      	movs	r0, #2
 80011a2:	f008 fa2e 	bl	8009602 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80011a6:	4b23      	ldr	r3, [pc, #140]	; (8001234 <menu+0x598>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	4613      	mov	r3, r2
 80011ae:	220a      	movs	r2, #10
 80011b0:	4917      	ldr	r1, [pc, #92]	; (8001210 <menu+0x574>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f00b ff1e 	bl	800cff4 <itoa>
			lcd_print(2, 14, snum);
 80011b8:	4a15      	ldr	r2, [pc, #84]	; (8001210 <menu+0x574>)
 80011ba:	210e      	movs	r1, #14
 80011bc:	2002      	movs	r0, #2
 80011be:	f008 fa20 	bl	8009602 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <menu+0x564>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	1f51      	subs	r1, r2, #5
 80011ca:	430b      	orrs	r3, r1
 80011cc:	d149      	bne.n	8001262 <menu+0x5c6>
			lcd_print(2, 1, altiHataKoduText);
 80011ce:	4a1a      	ldr	r2, [pc, #104]	; (8001238 <menu+0x59c>)
 80011d0:	2101      	movs	r1, #1
 80011d2:	2002      	movs	r0, #2
 80011d4:	f008 fa15 	bl	8009602 <lcd_print>
 80011d8:	e030      	b.n	800123c <menu+0x5a0>
 80011da:	bf00      	nop
 80011dc:	200010f8 	.word	0x200010f8
 80011e0:	200010b8 	.word	0x200010b8
 80011e4:	20001100 	.word	0x20001100
 80011e8:	20001108 	.word	0x20001108
 80011ec:	20001110 	.word	0x20001110
 80011f0:	20001130 	.word	0x20001130
 80011f4:	20001254 	.word	0x20001254
 80011f8:	20001268 	.word	0x20001268
 80011fc:	2000127c 	.word	0x2000127c
 8001200:	200010c8 	.word	0x200010c8
 8001204:	20001290 	.word	0x20001290
 8001208:	0800d110 	.word	0x0800d110
 800120c:	200011c8 	.word	0x200011c8
 8001210:	20001078 	.word	0x20001078
 8001214:	200012a4 	.word	0x200012a4
 8001218:	0800d114 	.word	0x0800d114
 800121c:	200011d0 	.word	0x200011d0
 8001220:	200012b8 	.word	0x200012b8
 8001224:	200011d8 	.word	0x200011d8
 8001228:	200012cc 	.word	0x200012cc
 800122c:	200011e0 	.word	0x200011e0
 8001230:	200012e0 	.word	0x200012e0
 8001234:	200011e8 	.word	0x200011e8
 8001238:	200012f4 	.word	0x200012f4
			lcd_print(2, 15, "  ");
 800123c:	4aae      	ldr	r2, [pc, #696]	; (80014f8 <menu+0x85c>)
 800123e:	210f      	movs	r1, #15
 8001240:	2002      	movs	r0, #2
 8001242:	f008 f9de 	bl	8009602 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001246:	4bad      	ldr	r3, [pc, #692]	; (80014fc <menu+0x860>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	4613      	mov	r3, r2
 800124e:	220a      	movs	r2, #10
 8001250:	49ab      	ldr	r1, [pc, #684]	; (8001500 <menu+0x864>)
 8001252:	4618      	mov	r0, r3
 8001254:	f00b fece 	bl	800cff4 <itoa>
			lcd_print(2, 14, snum);
 8001258:	4aa9      	ldr	r2, [pc, #676]	; (8001500 <menu+0x864>)
 800125a:	210e      	movs	r1, #14
 800125c:	2002      	movs	r0, #2
 800125e:	f008 f9d0 	bl	8009602 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001262:	4ba8      	ldr	r3, [pc, #672]	; (8001504 <menu+0x868>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	1f91      	subs	r1, r2, #6
 800126a:	430b      	orrs	r3, r1
 800126c:	d117      	bne.n	800129e <menu+0x602>
			lcd_print(2, 1, yediHataKoduText);
 800126e:	4aa6      	ldr	r2, [pc, #664]	; (8001508 <menu+0x86c>)
 8001270:	2101      	movs	r1, #1
 8001272:	2002      	movs	r0, #2
 8001274:	f008 f9c5 	bl	8009602 <lcd_print>
			lcd_print(2, 15, "  ");
 8001278:	4a9f      	ldr	r2, [pc, #636]	; (80014f8 <menu+0x85c>)
 800127a:	210f      	movs	r1, #15
 800127c:	2002      	movs	r0, #2
 800127e:	f008 f9c0 	bl	8009602 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001282:	4ba2      	ldr	r3, [pc, #648]	; (800150c <menu+0x870>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	4613      	mov	r3, r2
 800128a:	220a      	movs	r2, #10
 800128c:	499c      	ldr	r1, [pc, #624]	; (8001500 <menu+0x864>)
 800128e:	4618      	mov	r0, r3
 8001290:	f00b feb0 	bl	800cff4 <itoa>
			lcd_print(2, 14, snum);
 8001294:	4a9a      	ldr	r2, [pc, #616]	; (8001500 <menu+0x864>)
 8001296:	210e      	movs	r1, #14
 8001298:	2002      	movs	r0, #2
 800129a:	f008 f9b2 	bl	8009602 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 800129e:	4b99      	ldr	r3, [pc, #612]	; (8001504 <menu+0x868>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	1fd1      	subs	r1, r2, #7
 80012a6:	430b      	orrs	r3, r1
 80012a8:	d117      	bne.n	80012da <menu+0x63e>
			lcd_print(2, 1, sekizHataKoduText);
 80012aa:	4a99      	ldr	r2, [pc, #612]	; (8001510 <menu+0x874>)
 80012ac:	2101      	movs	r1, #1
 80012ae:	2002      	movs	r0, #2
 80012b0:	f008 f9a7 	bl	8009602 <lcd_print>
			lcd_print(2, 15, "  ");
 80012b4:	4a90      	ldr	r2, [pc, #576]	; (80014f8 <menu+0x85c>)
 80012b6:	210f      	movs	r1, #15
 80012b8:	2002      	movs	r0, #2
 80012ba:	f008 f9a2 	bl	8009602 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80012be:	4b95      	ldr	r3, [pc, #596]	; (8001514 <menu+0x878>)
 80012c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c4:	4613      	mov	r3, r2
 80012c6:	220a      	movs	r2, #10
 80012c8:	498d      	ldr	r1, [pc, #564]	; (8001500 <menu+0x864>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f00b fe92 	bl	800cff4 <itoa>
			lcd_print(2, 14, snum);
 80012d0:	4a8b      	ldr	r2, [pc, #556]	; (8001500 <menu+0x864>)
 80012d2:	210e      	movs	r1, #14
 80012d4:	2002      	movs	r0, #2
 80012d6:	f008 f994 	bl	8009602 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80012da:	4b8a      	ldr	r3, [pc, #552]	; (8001504 <menu+0x868>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	f1a2 0108 	sub.w	r1, r2, #8
 80012e4:	430b      	orrs	r3, r1
 80012e6:	d117      	bne.n	8001318 <menu+0x67c>
			lcd_print(2, 1, dokuzHataKoduText);
 80012e8:	4a8b      	ldr	r2, [pc, #556]	; (8001518 <menu+0x87c>)
 80012ea:	2101      	movs	r1, #1
 80012ec:	2002      	movs	r0, #2
 80012ee:	f008 f988 	bl	8009602 <lcd_print>
			lcd_print(2, 15, "  ");
 80012f2:	4a81      	ldr	r2, [pc, #516]	; (80014f8 <menu+0x85c>)
 80012f4:	210f      	movs	r1, #15
 80012f6:	2002      	movs	r0, #2
 80012f8:	f008 f983 	bl	8009602 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80012fc:	4b87      	ldr	r3, [pc, #540]	; (800151c <menu+0x880>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	4613      	mov	r3, r2
 8001304:	220a      	movs	r2, #10
 8001306:	497e      	ldr	r1, [pc, #504]	; (8001500 <menu+0x864>)
 8001308:	4618      	mov	r0, r3
 800130a:	f00b fe73 	bl	800cff4 <itoa>
			lcd_print(2, 14, snum);
 800130e:	4a7c      	ldr	r2, [pc, #496]	; (8001500 <menu+0x864>)
 8001310:	210e      	movs	r1, #14
 8001312:	2002      	movs	r0, #2
 8001314:	f008 f975 	bl	8009602 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001318:	4b7a      	ldr	r3, [pc, #488]	; (8001504 <menu+0x868>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f1a2 0109 	sub.w	r1, r2, #9
 8001322:	430b      	orrs	r3, r1
 8001324:	d117      	bne.n	8001356 <menu+0x6ba>
			lcd_print(2, 1, onHataKoduText);
 8001326:	4a7e      	ldr	r2, [pc, #504]	; (8001520 <menu+0x884>)
 8001328:	2101      	movs	r1, #1
 800132a:	2002      	movs	r0, #2
 800132c:	f008 f969 	bl	8009602 <lcd_print>
			lcd_print(2, 16, " ");
 8001330:	4a7c      	ldr	r2, [pc, #496]	; (8001524 <menu+0x888>)
 8001332:	2110      	movs	r1, #16
 8001334:	2002      	movs	r0, #2
 8001336:	f008 f964 	bl	8009602 <lcd_print>
			itoa(hataKayit10, snum, 10);
 800133a:	4b7b      	ldr	r3, [pc, #492]	; (8001528 <menu+0x88c>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	4613      	mov	r3, r2
 8001342:	220a      	movs	r2, #10
 8001344:	496e      	ldr	r1, [pc, #440]	; (8001500 <menu+0x864>)
 8001346:	4618      	mov	r0, r3
 8001348:	f00b fe54 	bl	800cff4 <itoa>
			lcd_print(2, 15, snum);
 800134c:	4a6c      	ldr	r2, [pc, #432]	; (8001500 <menu+0x864>)
 800134e:	210f      	movs	r1, #15
 8001350:	2002      	movs	r0, #2
 8001352:	f008 f956 	bl	8009602 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001356:	4b6b      	ldr	r3, [pc, #428]	; (8001504 <menu+0x868>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f1a2 010a 	sub.w	r1, r2, #10
 8001360:	430b      	orrs	r3, r1
 8001362:	d104      	bne.n	800136e <menu+0x6d2>
			lcd_print(2, 1, silmekIcinText);
 8001364:	4a71      	ldr	r2, [pc, #452]	; (800152c <menu+0x890>)
 8001366:	2101      	movs	r1, #1
 8001368:	2002      	movs	r0, #2
 800136a:	f008 f94a 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800136e:	2102      	movs	r1, #2
 8001370:	486f      	ldr	r0, [pc, #444]	; (8001530 <menu+0x894>)
 8001372:	f009 fa9d 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8001376:	4603      	mov	r3, r0
 8001378:	2b01      	cmp	r3, #1
 800137a:	d125      	bne.n	80013c8 <menu+0x72c>
 800137c:	4b6d      	ldr	r3, [pc, #436]	; (8001534 <menu+0x898>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	f083 0301 	eor.w	r3, r3, #1
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d01e      	beq.n	80013c8 <menu+0x72c>
 800138a:	4b6b      	ldr	r3, [pc, #428]	; (8001538 <menu+0x89c>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	4313      	orrs	r3, r2
 8001392:	d119      	bne.n	80013c8 <menu+0x72c>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001394:	4b5b      	ldr	r3, [pc, #364]	; (8001504 <menu+0x868>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	f112 0a01 	adds.w	sl, r2, #1
 800139e:	f143 0b00 	adc.w	fp, r3, #0
 80013a2:	4b58      	ldr	r3, [pc, #352]	; (8001504 <menu+0x868>)
 80013a4:	e9c3 ab00 	strd	sl, fp, [r3]

			if(hataGostermeSirasi > 10) {
 80013a8:	4b56      	ldr	r3, [pc, #344]	; (8001504 <menu+0x868>)
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	2a0b      	cmp	r2, #11
 80013b0:	f173 0300 	sbcs.w	r3, r3, #0
 80013b4:	d306      	bcc.n	80013c4 <menu+0x728>
				hataGostermeSirasi = 0;
 80013b6:	4953      	ldr	r1, [pc, #332]	; (8001504 <menu+0x868>)
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 80013c4:	f002 feb6 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80013c8:	2104      	movs	r1, #4
 80013ca:	4859      	ldr	r0, [pc, #356]	; (8001530 <menu+0x894>)
 80013cc:	f009 fa70 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d12a      	bne.n	800142c <menu+0x790>
 80013d6:	4b57      	ldr	r3, [pc, #348]	; (8001534 <menu+0x898>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	f083 0301 	eor.w	r3, r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d023      	beq.n	800142c <menu+0x790>
 80013e4:	4b54      	ldr	r3, [pc, #336]	; (8001538 <menu+0x89c>)
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	d11e      	bne.n	800142c <menu+0x790>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80013ee:	4b45      	ldr	r3, [pc, #276]	; (8001504 <menu+0x868>)
 80013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f4:	1e51      	subs	r1, r2, #1
 80013f6:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 80013fa:	f143 33ff 	adc.w	r3, r3, #4294967295
 80013fe:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8001402:	4b40      	ldr	r3, [pc, #256]	; (8001504 <menu+0x868>)
 8001404:	e9d7 1274 	ldrd	r1, r2, [r7, #464]	; 0x1d0
 8001408:	e9c3 1200 	strd	r1, r2, [r3]

	    	if(hataGostermeSirasi > 11) {
 800140c:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <menu+0x868>)
 800140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001412:	2a0c      	cmp	r2, #12
 8001414:	f173 0300 	sbcs.w	r3, r3, #0
 8001418:	d306      	bcc.n	8001428 <menu+0x78c>
	    		hataGostermeSirasi = 10;
 800141a:	493a      	ldr	r1, [pc, #232]	; (8001504 <menu+0x868>)
 800141c:	f04f 020a 	mov.w	r2, #10
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9c1 2300 	strd	r2, r3, [r1]
	    	}
			bekle();
 8001428:	f002 fe84 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 800142c:	2108      	movs	r1, #8
 800142e:	4840      	ldr	r0, [pc, #256]	; (8001530 <menu+0x894>)
 8001430:	f009 fa3e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	2b01      	cmp	r3, #1
 8001438:	f040 80ce 	bne.w	80015d8 <menu+0x93c>
 800143c:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <menu+0x898>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	f083 0301 	eor.w	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80c6 	beq.w	80015d8 <menu+0x93c>
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <menu+0x868>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	f1a2 010a 	sub.w	r1, r2, #10
 8001456:	430b      	orrs	r3, r1
 8001458:	f040 80be 	bne.w	80015d8 <menu+0x93c>
			hataKayit1 = 0; eepromData[37] = 0;
 800145c:	4937      	ldr	r1, [pc, #220]	; (800153c <menu+0x8a0>)
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9c1 2300 	strd	r2, r3, [r1]
 800146a:	4935      	ldr	r1, [pc, #212]	; (8001540 <menu+0x8a4>)
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	e9c1 234a 	strd	r2, r3, [r1, #296]	; 0x128
			hataKayit2 = 0; eepromData[38] = 0;
 8001478:	4932      	ldr	r1, [pc, #200]	; (8001544 <menu+0x8a8>)
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	e9c1 2300 	strd	r2, r3, [r1]
 8001486:	492e      	ldr	r1, [pc, #184]	; (8001540 <menu+0x8a4>)
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
			hataKayit3 = 0; eepromData[39] = 0;
 8001494:	492c      	ldr	r1, [pc, #176]	; (8001548 <menu+0x8ac>)
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	e9c1 2300 	strd	r2, r3, [r1]
 80014a2:	4927      	ldr	r1, [pc, #156]	; (8001540 <menu+0x8a4>)
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
			hataKayit4 = 0; eepromData[40] = 0;
 80014b0:	4926      	ldr	r1, [pc, #152]	; (800154c <menu+0x8b0>)
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	e9c1 2300 	strd	r2, r3, [r1]
 80014be:	4920      	ldr	r1, [pc, #128]	; (8001540 <menu+0x8a4>)
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
			hataKayit5 = 0; eepromData[41] = 0;
 80014cc:	4920      	ldr	r1, [pc, #128]	; (8001550 <menu+0x8b4>)
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	e9c1 2300 	strd	r2, r3, [r1]
 80014da:	4919      	ldr	r1, [pc, #100]	; (8001540 <menu+0x8a4>)
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
			hataKayit6 = 0; eepromData[42] = 0;
 80014e8:	4904      	ldr	r1, [pc, #16]	; (80014fc <menu+0x860>)
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	e9c1 2300 	strd	r2, r3, [r1]
 80014f6:	e02d      	b.n	8001554 <menu+0x8b8>
 80014f8:	0800d114 	.word	0x0800d114
 80014fc:	200011f0 	.word	0x200011f0
 8001500:	20001078 	.word	0x20001078
 8001504:	200010c8 	.word	0x200010c8
 8001508:	20001308 	.word	0x20001308
 800150c:	200011f8 	.word	0x200011f8
 8001510:	2000131c 	.word	0x2000131c
 8001514:	20001200 	.word	0x20001200
 8001518:	20001330 	.word	0x20001330
 800151c:	20001208 	.word	0x20001208
 8001520:	20001344 	.word	0x20001344
 8001524:	0800d118 	.word	0x0800d118
 8001528:	20001210 	.word	0x20001210
 800152c:	20001358 	.word	0x20001358
 8001530:	40010800 	.word	0x40010800
 8001534:	2000121b 	.word	0x2000121b
 8001538:	20001130 	.word	0x20001130
 800153c:	200011c8 	.word	0x200011c8
 8001540:	20000d08 	.word	0x20000d08
 8001544:	200011d0 	.word	0x200011d0
 8001548:	200011d8 	.word	0x200011d8
 800154c:	200011e0 	.word	0x200011e0
 8001550:	200011e8 	.word	0x200011e8
 8001554:	4990      	ldr	r1, [pc, #576]	; (8001798 <menu+0xafc>)
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
			hataKayit7 = 0; eepromData[43] = 0;
 8001562:	498e      	ldr	r1, [pc, #568]	; (800179c <menu+0xb00>)
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	e9c1 2300 	strd	r2, r3, [r1]
 8001570:	4989      	ldr	r1, [pc, #548]	; (8001798 <menu+0xafc>)
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
			hataKayit8 = 0; eepromData[44] = 0;
 800157e:	4988      	ldr	r1, [pc, #544]	; (80017a0 <menu+0xb04>)
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	e9c1 2300 	strd	r2, r3, [r1]
 800158c:	4982      	ldr	r1, [pc, #520]	; (8001798 <menu+0xafc>)
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
			hataKayit9 = 0; eepromData[45] = 0;
 800159a:	4982      	ldr	r1, [pc, #520]	; (80017a4 <menu+0xb08>)
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e9c1 2300 	strd	r2, r3, [r1]
 80015a8:	497b      	ldr	r1, [pc, #492]	; (8001798 <menu+0xafc>)
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168
			hataKayit10 = 0; eepromData[46] = 0;
 80015b6:	497c      	ldr	r1, [pc, #496]	; (80017a8 <menu+0xb0c>)
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9c1 2300 	strd	r2, r3, [r1]
 80015c4:	4974      	ldr	r1, [pc, #464]	; (8001798 <menu+0xafc>)
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	e9c1 235c 	strd	r2, r3, [r1, #368]	; 0x170
			hafizaYaz = 1;
 80015d2:	4a76      	ldr	r2, [pc, #472]	; (80017ac <menu+0xb10>)
 80015d4:	2301      	movs	r3, #1
 80015d6:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 2) {
 80015d8:	4b75      	ldr	r3, [pc, #468]	; (80017b0 <menu+0xb14>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	1e91      	subs	r1, r2, #2
 80015e0:	430b      	orrs	r3, r1
 80015e2:	f040 80c1 	bne.w	8001768 <menu+0xacc>
		lcd_print(1, 1, calismaSekliText);
 80015e6:	4a73      	ldr	r2, [pc, #460]	; (80017b4 <menu+0xb18>)
 80015e8:	2101      	movs	r1, #1
 80015ea:	2001      	movs	r0, #1
 80015ec:	f008 f809 	bl	8009602 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80015f0:	4b71      	ldr	r3, [pc, #452]	; (80017b8 <menu+0xb1c>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	1e51      	subs	r1, r2, #1
 80015f8:	430b      	orrs	r3, r1
 80015fa:	d005      	beq.n	8001608 <menu+0x96c>
 80015fc:	4b6e      	ldr	r3, [pc, #440]	; (80017b8 <menu+0xb1c>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	1e91      	subs	r1, r2, #2
 8001604:	430b      	orrs	r3, r1
 8001606:	d104      	bne.n	8001612 <menu+0x976>
			lcd_print(2, 1, devirmeYuruyusText);
 8001608:	4a6c      	ldr	r2, [pc, #432]	; (80017bc <menu+0xb20>)
 800160a:	2101      	movs	r1, #1
 800160c:	2002      	movs	r0, #2
 800160e:	f007 fff8 	bl	8009602 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001612:	4b6b      	ldr	r3, [pc, #428]	; (80017c0 <menu+0xb24>)
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	4313      	orrs	r3, r2
 800161a:	d109      	bne.n	8001630 <menu+0x994>
 800161c:	4b66      	ldr	r3, [pc, #408]	; (80017b8 <menu+0xb1c>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	4313      	orrs	r3, r2
 8001624:	d104      	bne.n	8001630 <menu+0x994>
			lcd_print(2, 1, bastikcaCalisanText);
 8001626:	4a67      	ldr	r2, [pc, #412]	; (80017c4 <menu+0xb28>)
 8001628:	2101      	movs	r1, #1
 800162a:	2002      	movs	r0, #2
 800162c:	f007 ffe9 	bl	8009602 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001630:	4b63      	ldr	r3, [pc, #396]	; (80017c0 <menu+0xb24>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	1e51      	subs	r1, r2, #1
 8001638:	430b      	orrs	r3, r1
 800163a:	d109      	bne.n	8001650 <menu+0x9b4>
 800163c:	4b5e      	ldr	r3, [pc, #376]	; (80017b8 <menu+0xb1c>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	4313      	orrs	r3, r2
 8001644:	d104      	bne.n	8001650 <menu+0x9b4>
			lcd_print(2, 1, basGonderText);
 8001646:	4a60      	ldr	r2, [pc, #384]	; (80017c8 <menu+0xb2c>)
 8001648:	2101      	movs	r1, #1
 800164a:	2002      	movs	r0, #2
 800164c:	f007 ffd9 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001650:	2102      	movs	r1, #2
 8001652:	485e      	ldr	r0, [pc, #376]	; (80017cc <menu+0xb30>)
 8001654:	f009 f92c 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8001658:	4603      	mov	r3, r0
 800165a:	2b01      	cmp	r3, #1
 800165c:	d12a      	bne.n	80016b4 <menu+0xa18>
 800165e:	4b5c      	ldr	r3, [pc, #368]	; (80017d0 <menu+0xb34>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	f083 0301 	eor.w	r3, r3, #1
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d023      	beq.n	80016b4 <menu+0xa18>
 800166c:	4b52      	ldr	r3, [pc, #328]	; (80017b8 <menu+0xb1c>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	4313      	orrs	r3, r2
 8001674:	d11e      	bne.n	80016b4 <menu+0xa18>
			calismaSekli = calismaSekli + 1;
 8001676:	4b52      	ldr	r3, [pc, #328]	; (80017c0 <menu+0xb24>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	1c51      	adds	r1, r2, #1
 800167e:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 8001682:	f143 0300 	adc.w	r3, r3, #0
 8001686:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800168a:	4b4d      	ldr	r3, [pc, #308]	; (80017c0 <menu+0xb24>)
 800168c:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8001690:	e9c3 1200 	strd	r1, r2, [r3]

			if(calismaSekli > 1) {
 8001694:	4b4a      	ldr	r3, [pc, #296]	; (80017c0 <menu+0xb24>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	2a02      	cmp	r2, #2
 800169c:	f173 0300 	sbcs.w	r3, r3, #0
 80016a0:	d306      	bcc.n	80016b0 <menu+0xa14>
				calismaSekli = 0;
 80016a2:	4947      	ldr	r1, [pc, #284]	; (80017c0 <menu+0xb24>)
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 80016b0:	f002 fd40 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80016b4:	2104      	movs	r1, #4
 80016b6:	4845      	ldr	r0, [pc, #276]	; (80017cc <menu+0xb30>)
 80016b8:	f009 f8fa 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d128      	bne.n	8001714 <menu+0xa78>
 80016c2:	4b43      	ldr	r3, [pc, #268]	; (80017d0 <menu+0xb34>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	f083 0301 	eor.w	r3, r3, #1
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d021      	beq.n	8001714 <menu+0xa78>
 80016d0:	4b39      	ldr	r3, [pc, #228]	; (80017b8 <menu+0xb1c>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	d11c      	bne.n	8001714 <menu+0xa78>
			calismaSekli = calismaSekli - 1;
 80016da:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <menu+0xb24>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	1e51      	subs	r1, r2, #1
 80016e2:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 80016e6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80016ea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80016ee:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <menu+0xb24>)
 80016f0:	e9d7 1270 	ldrd	r1, r2, [r7, #448]	; 0x1c0
 80016f4:	e9c3 1200 	strd	r1, r2, [r3]

	    	if(calismaSekli > 0) {
 80016f8:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <menu+0xb24>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	4313      	orrs	r3, r2
 8001700:	d006      	beq.n	8001710 <menu+0xa74>
	    		calismaSekli = 1;
 8001702:	492f      	ldr	r1, [pc, #188]	; (80017c0 <menu+0xb24>)
 8001704:	f04f 0201 	mov.w	r2, #1
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	e9c1 2300 	strd	r2, r3, [r1]
	    	}
			bekle();
 8001710:	f002 fd10 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001714:	2108      	movs	r1, #8
 8001716:	482d      	ldr	r0, [pc, #180]	; (80017cc <menu+0xb30>)
 8001718:	f009 f8ca 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800171c:	4603      	mov	r3, r0
 800171e:	2b01      	cmp	r3, #1
 8001720:	d122      	bne.n	8001768 <menu+0xacc>
 8001722:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <menu+0xb34>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	f083 0301 	eor.w	r3, r3, #1
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d01b      	beq.n	8001768 <menu+0xacc>
			eepromData[1] = calismaSekli;
 8001730:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <menu+0xb24>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	4918      	ldr	r1, [pc, #96]	; (8001798 <menu+0xafc>)
 8001738:	e9c1 2302 	strd	r2, r3, [r1, #8]

			if(calismaSekli == 1) {
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <menu+0xb24>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	1e51      	subs	r1, r2, #1
 8001744:	430b      	orrs	r3, r1
 8001746:	d10c      	bne.n	8001762 <menu+0xac6>
				altLimit = 1;
 8001748:	4922      	ldr	r1, [pc, #136]	; (80017d4 <menu+0xb38>)
 800174a:	f04f 0201 	mov.w	r2, #1
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[5] = altLimit;
 8001756:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <menu+0xb38>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	490e      	ldr	r1, [pc, #56]	; (8001798 <menu+0xafc>)
 800175e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			}
			hafizaYaz = 1;
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <menu+0xb10>)
 8001764:	2301      	movs	r3, #1
 8001766:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 3) {
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <menu+0xb14>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	1ed1      	subs	r1, r2, #3
 8001770:	430b      	orrs	r3, r1
 8001772:	f040 80b1 	bne.w	80018d8 <menu+0xc3c>
		lcd_print(1, 1, emniyetCercevesiText);
 8001776:	4a18      	ldr	r2, [pc, #96]	; (80017d8 <menu+0xb3c>)
 8001778:	2101      	movs	r1, #1
 800177a:	2001      	movs	r0, #1
 800177c:	f007 ff41 	bl	8009602 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001780:	4b16      	ldr	r3, [pc, #88]	; (80017dc <menu+0xb40>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	4313      	orrs	r3, r2
 8001788:	d12c      	bne.n	80017e4 <menu+0xb48>
			lcd_print(2, 1, pasifText);
 800178a:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <menu+0xb44>)
 800178c:	2101      	movs	r1, #1
 800178e:	2002      	movs	r0, #2
 8001790:	f007 ff37 	bl	8009602 <lcd_print>
 8001794:	e031      	b.n	80017fa <menu+0xb5e>
 8001796:	bf00      	nop
 8001798:	20000d08 	.word	0x20000d08
 800179c:	200011f8 	.word	0x200011f8
 80017a0:	20001200 	.word	0x20001200
 80017a4:	20001208 	.word	0x20001208
 80017a8:	20001210 	.word	0x20001210
 80017ac:	20001218 	.word	0x20001218
 80017b0:	200010b8 	.word	0x200010b8
 80017b4:	2000136c 	.word	0x2000136c
 80017b8:	20001130 	.word	0x20001130
 80017bc:	20001380 	.word	0x20001380
 80017c0:	200010c0 	.word	0x200010c0
 80017c4:	20001394 	.word	0x20001394
 80017c8:	200013a8 	.word	0x200013a8
 80017cc:	40010800 	.word	0x40010800
 80017d0:	2000121b 	.word	0x2000121b
 80017d4:	200010e8 	.word	0x200010e8
 80017d8:	200013bc 	.word	0x200013bc
 80017dc:	200010d8 	.word	0x200010d8
 80017e0:	200013d0 	.word	0x200013d0
		} else if(emniyetCercevesi == 1) {
 80017e4:	4b90      	ldr	r3, [pc, #576]	; (8001a28 <menu+0xd8c>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	1e51      	subs	r1, r2, #1
 80017ec:	430b      	orrs	r3, r1
 80017ee:	d104      	bne.n	80017fa <menu+0xb5e>
			lcd_print(2, 1, ondSafetyTextGN);
 80017f0:	4a8e      	ldr	r2, [pc, #568]	; (8001a2c <menu+0xd90>)
 80017f2:	2101      	movs	r1, #1
 80017f4:	2002      	movs	r0, #2
 80017f6:	f007 ff04 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80017fa:	2102      	movs	r1, #2
 80017fc:	488c      	ldr	r0, [pc, #560]	; (8001a30 <menu+0xd94>)
 80017fe:	f009 f857 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8001802:	4603      	mov	r3, r0
 8001804:	2b01      	cmp	r3, #1
 8001806:	d125      	bne.n	8001854 <menu+0xbb8>
 8001808:	4b8a      	ldr	r3, [pc, #552]	; (8001a34 <menu+0xd98>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	f083 0301 	eor.w	r3, r3, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d01e      	beq.n	8001854 <menu+0xbb8>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001816:	4b84      	ldr	r3, [pc, #528]	; (8001a28 <menu+0xd8c>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	1c51      	adds	r1, r2, #1
 800181e:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 8001822:	f143 0300 	adc.w	r3, r3, #0
 8001826:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800182a:	4b7f      	ldr	r3, [pc, #508]	; (8001a28 <menu+0xd8c>)
 800182c:	e9d7 126e 	ldrd	r1, r2, [r7, #440]	; 0x1b8
 8001830:	e9c3 1200 	strd	r1, r2, [r3]

			if(emniyetCercevesi > 1) {
 8001834:	4b7c      	ldr	r3, [pc, #496]	; (8001a28 <menu+0xd8c>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	2a02      	cmp	r2, #2
 800183c:	f173 0300 	sbcs.w	r3, r3, #0
 8001840:	d306      	bcc.n	8001850 <menu+0xbb4>
				emniyetCercevesi = 0;
 8001842:	4979      	ldr	r1, [pc, #484]	; (8001a28 <menu+0xd8c>)
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8001850:	f002 fc70 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001854:	2104      	movs	r1, #4
 8001856:	4876      	ldr	r0, [pc, #472]	; (8001a30 <menu+0xd94>)
 8001858:	f009 f82a 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800185c:	4603      	mov	r3, r0
 800185e:	2b01      	cmp	r3, #1
 8001860:	d123      	bne.n	80018aa <menu+0xc0e>
 8001862:	4b74      	ldr	r3, [pc, #464]	; (8001a34 <menu+0xd98>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	f083 0301 	eor.w	r3, r3, #1
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d01c      	beq.n	80018aa <menu+0xc0e>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001870:	4b6d      	ldr	r3, [pc, #436]	; (8001a28 <menu+0xd8c>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	1e51      	subs	r1, r2, #1
 8001878:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 800187c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001880:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001884:	4b68      	ldr	r3, [pc, #416]	; (8001a28 <menu+0xd8c>)
 8001886:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800188a:	e9c3 1200 	strd	r1, r2, [r3]
		   	if(emniyetCercevesi > 0) {
 800188e:	4b66      	ldr	r3, [pc, #408]	; (8001a28 <menu+0xd8c>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	4313      	orrs	r3, r2
 8001896:	d006      	beq.n	80018a6 <menu+0xc0a>
		   		emniyetCercevesi = 1;
 8001898:	4963      	ldr	r1, [pc, #396]	; (8001a28 <menu+0xd8c>)
 800189a:	f04f 0201 	mov.w	r2, #1
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 80018a6:	f002 fc45 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80018aa:	2108      	movs	r1, #8
 80018ac:	4860      	ldr	r0, [pc, #384]	; (8001a30 <menu+0xd94>)
 80018ae:	f008 ffff 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d10f      	bne.n	80018d8 <menu+0xc3c>
 80018b8:	4b5e      	ldr	r3, [pc, #376]	; (8001a34 <menu+0xd98>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	f083 0301 	eor.w	r3, r3, #1
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d008      	beq.n	80018d8 <menu+0xc3c>
			eepromData[2] = emniyetCercevesi;
 80018c6:	4b58      	ldr	r3, [pc, #352]	; (8001a28 <menu+0xd8c>)
 80018c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018cc:	495a      	ldr	r1, [pc, #360]	; (8001a38 <menu+0xd9c>)
 80018ce:	e9c1 2304 	strd	r2, r3, [r1, #16]
			hafizaYaz = 1;
 80018d2:	4a5a      	ldr	r2, [pc, #360]	; (8001a3c <menu+0xda0>)
 80018d4:	2301      	movs	r3, #1
 80018d6:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 4) {
 80018d8:	4b59      	ldr	r3, [pc, #356]	; (8001a40 <menu+0xda4>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	1f11      	subs	r1, r2, #4
 80018e0:	430b      	orrs	r3, r1
 80018e2:	f040 808a 	bne.w	80019fa <menu+0xd5e>
		lcd_print(1, 1, yavaslamaLimitText);
 80018e6:	4a57      	ldr	r2, [pc, #348]	; (8001a44 <menu+0xda8>)
 80018e8:	2101      	movs	r1, #1
 80018ea:	2001      	movs	r0, #1
 80018ec:	f007 fe89 	bl	8009602 <lcd_print>

		if(yavaslamaLimit == 0) {
 80018f0:	4b55      	ldr	r3, [pc, #340]	; (8001a48 <menu+0xdac>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	d105      	bne.n	8001906 <menu+0xc6a>
			lcd_print(2, 1, pasifText);
 80018fa:	4a54      	ldr	r2, [pc, #336]	; (8001a4c <menu+0xdb0>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	2002      	movs	r0, #2
 8001900:	f007 fe7f 	bl	8009602 <lcd_print>
 8001904:	e00a      	b.n	800191c <menu+0xc80>
		} else if(yavaslamaLimit == 1) {
 8001906:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <menu+0xdac>)
 8001908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190c:	1e51      	subs	r1, r2, #1
 800190e:	430b      	orrs	r3, r1
 8001910:	d104      	bne.n	800191c <menu+0xc80>
			lcd_print(2, 1, aktifText);
 8001912:	4a4f      	ldr	r2, [pc, #316]	; (8001a50 <menu+0xdb4>)
 8001914:	2101      	movs	r1, #1
 8001916:	2002      	movs	r0, #2
 8001918:	f007 fe73 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800191c:	2102      	movs	r1, #2
 800191e:	4844      	ldr	r0, [pc, #272]	; (8001a30 <menu+0xd94>)
 8001920:	f008 ffc6 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8001924:	4603      	mov	r3, r0
 8001926:	2b01      	cmp	r3, #1
 8001928:	d125      	bne.n	8001976 <menu+0xcda>
 800192a:	4b42      	ldr	r3, [pc, #264]	; (8001a34 <menu+0xd98>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	f083 0301 	eor.w	r3, r3, #1
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01e      	beq.n	8001976 <menu+0xcda>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001938:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <menu+0xdac>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	1c51      	adds	r1, r2, #1
 8001940:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 8001944:	f143 0300 	adc.w	r3, r3, #0
 8001948:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800194c:	4b3e      	ldr	r3, [pc, #248]	; (8001a48 <menu+0xdac>)
 800194e:	e9d7 126a 	ldrd	r1, r2, [r7, #424]	; 0x1a8
 8001952:	e9c3 1200 	strd	r1, r2, [r3]

			if(yavaslamaLimit > 1){
 8001956:	4b3c      	ldr	r3, [pc, #240]	; (8001a48 <menu+0xdac>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	2a02      	cmp	r2, #2
 800195e:	f173 0300 	sbcs.w	r3, r3, #0
 8001962:	d306      	bcc.n	8001972 <menu+0xcd6>
				yavaslamaLimit = 0;
 8001964:	4938      	ldr	r1, [pc, #224]	; (8001a48 <menu+0xdac>)
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8001972:	f002 fbdf 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001976:	2104      	movs	r1, #4
 8001978:	482d      	ldr	r0, [pc, #180]	; (8001a30 <menu+0xd94>)
 800197a:	f008 ff99 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800197e:	4603      	mov	r3, r0
 8001980:	2b01      	cmp	r3, #1
 8001982:	d123      	bne.n	80019cc <menu+0xd30>
 8001984:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <menu+0xd98>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	f083 0301 	eor.w	r3, r3, #1
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d01c      	beq.n	80019cc <menu+0xd30>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001992:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <menu+0xdac>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	1e51      	subs	r1, r2, #1
 800199a:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 800199e:	f143 33ff 	adc.w	r3, r3, #4294967295
 80019a2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80019a6:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <menu+0xdac>)
 80019a8:	e9d7 1268 	ldrd	r1, r2, [r7, #416]	; 0x1a0
 80019ac:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(yavaslamaLimit > 0){
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <menu+0xdac>)
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	d006      	beq.n	80019c8 <menu+0xd2c>
		   		yavaslamaLimit = 1;
 80019ba:	4923      	ldr	r1, [pc, #140]	; (8001a48 <menu+0xdac>)
 80019bc:	f04f 0201 	mov.w	r2, #1
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 80019c8:	f002 fbb4 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80019cc:	2108      	movs	r1, #8
 80019ce:	4818      	ldr	r0, [pc, #96]	; (8001a30 <menu+0xd94>)
 80019d0:	f008 ff6e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d10f      	bne.n	80019fa <menu+0xd5e>
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <menu+0xd98>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	f083 0301 	eor.w	r3, r3, #1
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <menu+0xd5e>
			eepromData[4] = yavaslamaLimit;
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <menu+0xdac>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	4912      	ldr	r1, [pc, #72]	; (8001a38 <menu+0xd9c>)
 80019f0:	e9c1 2308 	strd	r2, r3, [r1, #32]
			hafizaYaz = 1;
 80019f4:	4a11      	ldr	r2, [pc, #68]	; (8001a3c <menu+0xda0>)
 80019f6:	2301      	movs	r3, #1
 80019f8:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 5) {
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <menu+0xda4>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	1f51      	subs	r1, r2, #5
 8001a02:	430b      	orrs	r3, r1
 8001a04:	f040 80de 	bne.w	8001bc4 <menu+0xf28>
		lcd_print(1, 1, altLimitText);
 8001a08:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <menu+0xdb8>)
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f007 fdf8 	bl	8009602 <lcd_print>

		if(altLimit == 0) {
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <menu+0xdbc>)
 8001a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	d11f      	bne.n	8001a5c <menu+0xdc0>
			lcd_print(2, 1, pasifText);
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <menu+0xdb0>)
 8001a1e:	2101      	movs	r1, #1
 8001a20:	2002      	movs	r0, #2
 8001a22:	f007 fdee 	bl	8009602 <lcd_print>
 8001a26:	e024      	b.n	8001a72 <menu+0xdd6>
 8001a28:	200010d8 	.word	0x200010d8
 8001a2c:	20000080 	.word	0x20000080
 8001a30:	40010800 	.word	0x40010800
 8001a34:	2000121b 	.word	0x2000121b
 8001a38:	20000d08 	.word	0x20000d08
 8001a3c:	20001218 	.word	0x20001218
 8001a40:	200010b8 	.word	0x200010b8
 8001a44:	200013f8 	.word	0x200013f8
 8001a48:	200010e0 	.word	0x200010e0
 8001a4c:	200013d0 	.word	0x200013d0
 8001a50:	200013e4 	.word	0x200013e4
 8001a54:	2000140c 	.word	0x2000140c
 8001a58:	200010e8 	.word	0x200010e8
		} else if(altLimit == 1) {
 8001a5c:	4b65      	ldr	r3, [pc, #404]	; (8001bf4 <menu+0xf58>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	1e51      	subs	r1, r2, #1
 8001a64:	430b      	orrs	r3, r1
 8001a66:	d104      	bne.n	8001a72 <menu+0xdd6>
			lcd_print(2, 1, aktifText);
 8001a68:	4a63      	ldr	r2, [pc, #396]	; (8001bf8 <menu+0xf5c>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	f007 fdc8 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001a72:	2102      	movs	r1, #2
 8001a74:	4861      	ldr	r0, [pc, #388]	; (8001bfc <menu+0xf60>)
 8001a76:	f008 ff1b 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d12a      	bne.n	8001ad6 <menu+0xe3a>
 8001a80:	4b5f      	ldr	r3, [pc, #380]	; (8001c00 <menu+0xf64>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	f083 0301 	eor.w	r3, r3, #1
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d023      	beq.n	8001ad6 <menu+0xe3a>
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	; (8001c04 <menu+0xf68>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	d11e      	bne.n	8001ad6 <menu+0xe3a>
			altLimit = altLimit + 1;
 8001a98:	4b56      	ldr	r3, [pc, #344]	; (8001bf4 <menu+0xf58>)
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	1c51      	adds	r1, r2, #1
 8001aa0:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8001aa4:	f143 0300 	adc.w	r3, r3, #0
 8001aa8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001aac:	4b51      	ldr	r3, [pc, #324]	; (8001bf4 <menu+0xf58>)
 8001aae:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8001ab2:	e9c3 1200 	strd	r1, r2, [r3]

			if(altLimit > 1) {
 8001ab6:	4b4f      	ldr	r3, [pc, #316]	; (8001bf4 <menu+0xf58>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	2a02      	cmp	r2, #2
 8001abe:	f173 0300 	sbcs.w	r3, r3, #0
 8001ac2:	d306      	bcc.n	8001ad2 <menu+0xe36>
				altLimit = 0;
 8001ac4:	494b      	ldr	r1, [pc, #300]	; (8001bf4 <menu+0xf58>)
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8001ad2:	f002 fb2f 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001ad6:	2104      	movs	r1, #4
 8001ad8:	4848      	ldr	r0, [pc, #288]	; (8001bfc <menu+0xf60>)
 8001ada:	f008 fee9 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d128      	bne.n	8001b36 <menu+0xe9a>
 8001ae4:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <menu+0xf64>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	f083 0301 	eor.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d021      	beq.n	8001b36 <menu+0xe9a>
 8001af2:	4b44      	ldr	r3, [pc, #272]	; (8001c04 <menu+0xf68>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	d11c      	bne.n	8001b36 <menu+0xe9a>
			altLimit = altLimit - 1;
 8001afc:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <menu+0xf58>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	1e51      	subs	r1, r2, #1
 8001b04:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8001b08:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001b0c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001b10:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <menu+0xf58>)
 8001b12:	e9d7 1264 	ldrd	r1, r2, [r7, #400]	; 0x190
 8001b16:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(altLimit > 0){
 8001b1a:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <menu+0xf58>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	d006      	beq.n	8001b32 <menu+0xe96>
		   		altLimit = 1;
 8001b24:	4933      	ldr	r1, [pc, #204]	; (8001bf4 <menu+0xf58>)
 8001b26:	f04f 0201 	mov.w	r2, #1
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8001b32:	f002 faff 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b36:	2108      	movs	r1, #8
 8001b38:	4830      	ldr	r0, [pc, #192]	; (8001bfc <menu+0xf60>)
 8001b3a:	f008 feb9 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d13f      	bne.n	8001bc4 <menu+0xf28>
 8001b44:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <menu+0xf64>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	f083 0301 	eor.w	r3, r3, #1
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d038      	beq.n	8001bc4 <menu+0xf28>
			eepromData[5] = altLimit;
 8001b52:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <menu+0xf58>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	492b      	ldr	r1, [pc, #172]	; (8001c08 <menu+0xf6c>)
 8001b5a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001b5e:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <menu+0xf58>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	d118      	bne.n	8001b9a <menu+0xefe>
 8001b68:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <menu+0xf70>)
 8001b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	d005      	beq.n	8001b7e <menu+0xee2>
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <menu+0xf70>)
 8001b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b78:	1e91      	subs	r1, r2, #2
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	d10d      	bne.n	8001b9a <menu+0xefe>
				kapiTablaAcKonum = 3;
 8001b7e:	4923      	ldr	r1, [pc, #140]	; (8001c0c <menu+0xf70>)
 8001b80:	f04f 0203 	mov.w	r2, #3
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[34] = kapiTablaAcKonum;
 8001b8c:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <menu+0xf70>)
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	491d      	ldr	r1, [pc, #116]	; (8001c08 <menu+0xf6c>)
 8001b94:	e9c1 2344 	strd	r2, r3, [r1, #272]	; 0x110
 8001b98:	e011      	b.n	8001bbe <menu+0xf22>
			} else if(altLimit == 0) {
 8001b9a:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <menu+0xf58>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	d10c      	bne.n	8001bbe <menu+0xf22>
				platformSilindirTipi = 0;
 8001ba4:	491a      	ldr	r1, [pc, #104]	; (8001c10 <menu+0xf74>)
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[19] = platformSilindirTipi;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <menu+0xf74>)
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	4913      	ldr	r1, [pc, #76]	; (8001c08 <menu+0xf6c>)
 8001bba:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
			}

			hafizaYaz = 1;
 8001bbe:	4a15      	ldr	r2, [pc, #84]	; (8001c14 <menu+0xf78>)
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 6) {
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <menu+0xf7c>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	1f91      	subs	r1, r2, #6
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	f040 80a5 	bne.w	8001d1c <menu+0x1080>
		lcd_print(1, 1, basincSalteriText);
 8001bd2:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <menu+0xf80>)
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f007 fd13 	bl	8009602 <lcd_print>

		if(basincSalteri == 0) {
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <menu+0xf84>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	d120      	bne.n	8001c28 <menu+0xf8c>
			lcd_print(2, 1, pasifText);
 8001be6:	4a0f      	ldr	r2, [pc, #60]	; (8001c24 <menu+0xf88>)
 8001be8:	2101      	movs	r1, #1
 8001bea:	2002      	movs	r0, #2
 8001bec:	f007 fd09 	bl	8009602 <lcd_print>
 8001bf0:	e025      	b.n	8001c3e <menu+0xfa2>
 8001bf2:	bf00      	nop
 8001bf4:	200010e8 	.word	0x200010e8
 8001bf8:	200013e4 	.word	0x200013e4
 8001bfc:	40010800 	.word	0x40010800
 8001c00:	2000121b 	.word	0x2000121b
 8001c04:	200010c0 	.word	0x200010c0
 8001c08:	20000d08 	.word	0x20000d08
 8001c0c:	20001120 	.word	0x20001120
 8001c10:	20001150 	.word	0x20001150
 8001c14:	20001218 	.word	0x20001218
 8001c18:	200010b8 	.word	0x200010b8
 8001c1c:	20001420 	.word	0x20001420
 8001c20:	200010f0 	.word	0x200010f0
 8001c24:	200013d0 	.word	0x200013d0
		} else if(basincSalteri == 1) {
 8001c28:	4b54      	ldr	r3, [pc, #336]	; (8001d7c <menu+0x10e0>)
 8001c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2e:	1e51      	subs	r1, r2, #1
 8001c30:	430b      	orrs	r3, r1
 8001c32:	d104      	bne.n	8001c3e <menu+0xfa2>
			lcd_print(2, 1, aktifText);
 8001c34:	4a52      	ldr	r2, [pc, #328]	; (8001d80 <menu+0x10e4>)
 8001c36:	2101      	movs	r1, #1
 8001c38:	2002      	movs	r0, #2
 8001c3a:	f007 fce2 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c3e:	2102      	movs	r1, #2
 8001c40:	4850      	ldr	r0, [pc, #320]	; (8001d84 <menu+0x10e8>)
 8001c42:	f008 fe35 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d125      	bne.n	8001c98 <menu+0xffc>
 8001c4c:	4b4e      	ldr	r3, [pc, #312]	; (8001d88 <menu+0x10ec>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	f083 0301 	eor.w	r3, r3, #1
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d01e      	beq.n	8001c98 <menu+0xffc>
			basincSalteri = basincSalteri + 1;
 8001c5a:	4b48      	ldr	r3, [pc, #288]	; (8001d7c <menu+0x10e0>)
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	1c51      	adds	r1, r2, #1
 8001c62:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8001c66:	f143 0300 	adc.w	r3, r3, #0
 8001c6a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001c6e:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <menu+0x10e0>)
 8001c70:	e9d7 1262 	ldrd	r1, r2, [r7, #392]	; 0x188
 8001c74:	e9c3 1200 	strd	r1, r2, [r3]

			if(basincSalteri > 1){
 8001c78:	4b40      	ldr	r3, [pc, #256]	; (8001d7c <menu+0x10e0>)
 8001c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7e:	2a02      	cmp	r2, #2
 8001c80:	f173 0300 	sbcs.w	r3, r3, #0
 8001c84:	d306      	bcc.n	8001c94 <menu+0xff8>
				basincSalteri = 0;
 8001c86:	493d      	ldr	r1, [pc, #244]	; (8001d7c <menu+0x10e0>)
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8001c94:	f002 fa4e 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c98:	2104      	movs	r1, #4
 8001c9a:	483a      	ldr	r0, [pc, #232]	; (8001d84 <menu+0x10e8>)
 8001c9c:	f008 fe08 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d123      	bne.n	8001cee <menu+0x1052>
 8001ca6:	4b38      	ldr	r3, [pc, #224]	; (8001d88 <menu+0x10ec>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	f083 0301 	eor.w	r3, r3, #1
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d01c      	beq.n	8001cee <menu+0x1052>
			basincSalteri = basincSalteri - 1;
 8001cb4:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <menu+0x10e0>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	1e51      	subs	r1, r2, #1
 8001cbc:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8001cc0:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001cc4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001cc8:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <menu+0x10e0>)
 8001cca:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8001cce:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(basincSalteri > 0){
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <menu+0x10e0>)
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	d006      	beq.n	8001cea <menu+0x104e>
		   		basincSalteri = 1;
 8001cdc:	4927      	ldr	r1, [pc, #156]	; (8001d7c <menu+0x10e0>)
 8001cde:	f04f 0201 	mov.w	r2, #1
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8001cea:	f002 fa23 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cee:	2108      	movs	r1, #8
 8001cf0:	4824      	ldr	r0, [pc, #144]	; (8001d84 <menu+0x10e8>)
 8001cf2:	f008 fddd 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d10f      	bne.n	8001d1c <menu+0x1080>
 8001cfc:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <menu+0x10ec>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	f083 0301 	eor.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d008      	beq.n	8001d1c <menu+0x1080>
			eepromData[6] = basincSalteri;
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <menu+0x10e0>)
 8001d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d10:	491e      	ldr	r1, [pc, #120]	; (8001d8c <menu+0x10f0>)
 8001d12:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			hafizaYaz = 1;
 8001d16:	4a1e      	ldr	r2, [pc, #120]	; (8001d90 <menu+0x10f4>)
 8001d18:	2301      	movs	r3, #1
 8001d1a:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 7) {
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <menu+0x10f8>)
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	1fd1      	subs	r1, r2, #7
 8001d24:	430b      	orrs	r3, r1
 8001d26:	f040 80cf 	bne.w	8001ec8 <menu+0x122c>
		lcd_print(1, 1, kapiSecimleriText);
 8001d2a:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <menu+0x10fc>)
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f007 fc67 	bl	8009602 <lcd_print>

		if(kapiSecimleri == 0) {
 8001d34:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <menu+0x1100>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	d105      	bne.n	8001d4a <menu+0x10ae>
			lcd_print(2, 1, pasifText);
 8001d3e:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <menu+0x1104>)
 8001d40:	2101      	movs	r1, #1
 8001d42:	2002      	movs	r0, #2
 8001d44:	f007 fc5d 	bl	8009602 <lcd_print>
 8001d48:	e03b      	b.n	8001dc2 <menu+0x1126>
		} else if(kapiSecimleri == 1) {
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <menu+0x1100>)
 8001d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d50:	1e51      	subs	r1, r2, #1
 8001d52:	430b      	orrs	r3, r1
 8001d54:	d105      	bne.n	8001d62 <menu+0x10c6>
			lcd_print(2, 1, katKapisiAktifText);
 8001d56:	4a13      	ldr	r2, [pc, #76]	; (8001da4 <menu+0x1108>)
 8001d58:	2101      	movs	r1, #1
 8001d5a:	2002      	movs	r0, #2
 8001d5c:	f007 fc51 	bl	8009602 <lcd_print>
 8001d60:	e02f      	b.n	8001dc2 <menu+0x1126>
		} else if(kapiSecimleri == 2) {
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <menu+0x1100>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	1e91      	subs	r1, r2, #2
 8001d6a:	430b      	orrs	r3, r1
 8001d6c:	d11e      	bne.n	8001dac <menu+0x1110>
			lcd_print(2, 1, tablaKapiAktifText);
 8001d6e:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <menu+0x110c>)
 8001d70:	2101      	movs	r1, #1
 8001d72:	2002      	movs	r0, #2
 8001d74:	f007 fc45 	bl	8009602 <lcd_print>
 8001d78:	e023      	b.n	8001dc2 <menu+0x1126>
 8001d7a:	bf00      	nop
 8001d7c:	200010f0 	.word	0x200010f0
 8001d80:	200013e4 	.word	0x200013e4
 8001d84:	40010800 	.word	0x40010800
 8001d88:	2000121b 	.word	0x2000121b
 8001d8c:	20000d08 	.word	0x20000d08
 8001d90:	20001218 	.word	0x20001218
 8001d94:	200010b8 	.word	0x200010b8
 8001d98:	20001434 	.word	0x20001434
 8001d9c:	200010f8 	.word	0x200010f8
 8001da0:	200013d0 	.word	0x200013d0
 8001da4:	20001448 	.word	0x20001448
 8001da8:	2000145c 	.word	0x2000145c
		} else if(kapiSecimleri == 3) {
 8001dac:	4ba1      	ldr	r3, [pc, #644]	; (8002034 <menu+0x1398>)
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	1ed1      	subs	r1, r2, #3
 8001db4:	430b      	orrs	r3, r1
 8001db6:	d104      	bne.n	8001dc2 <menu+0x1126>
			lcd_print(2, 1, katArtiTablaAktifText);
 8001db8:	4a9f      	ldr	r2, [pc, #636]	; (8002038 <menu+0x139c>)
 8001dba:	2101      	movs	r1, #1
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	f007 fc20 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dc2:	2102      	movs	r1, #2
 8001dc4:	489d      	ldr	r0, [pc, #628]	; (800203c <menu+0x13a0>)
 8001dc6:	f008 fd73 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d125      	bne.n	8001e1c <menu+0x1180>
 8001dd0:	4b9b      	ldr	r3, [pc, #620]	; (8002040 <menu+0x13a4>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	f083 0301 	eor.w	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d01e      	beq.n	8001e1c <menu+0x1180>
			kapiSecimleri = kapiSecimleri + 1;
 8001dde:	4b95      	ldr	r3, [pc, #596]	; (8002034 <menu+0x1398>)
 8001de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de4:	1c51      	adds	r1, r2, #1
 8001de6:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8001dea:	f143 0300 	adc.w	r3, r3, #0
 8001dee:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001df2:	4b90      	ldr	r3, [pc, #576]	; (8002034 <menu+0x1398>)
 8001df4:	e9d7 125e 	ldrd	r1, r2, [r7, #376]	; 0x178
 8001df8:	e9c3 1200 	strd	r1, r2, [r3]

			if(kapiSecimleri > 3){
 8001dfc:	4b8d      	ldr	r3, [pc, #564]	; (8002034 <menu+0x1398>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	2a04      	cmp	r2, #4
 8001e04:	f173 0300 	sbcs.w	r3, r3, #0
 8001e08:	d306      	bcc.n	8001e18 <menu+0x117c>
				kapiSecimleri = 0;
 8001e0a:	498a      	ldr	r1, [pc, #552]	; (8002034 <menu+0x1398>)
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8001e18:	f002 f98c 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	4887      	ldr	r0, [pc, #540]	; (800203c <menu+0x13a0>)
 8001e20:	f008 fd46 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d125      	bne.n	8001e76 <menu+0x11da>
 8001e2a:	4b85      	ldr	r3, [pc, #532]	; (8002040 <menu+0x13a4>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	f083 0301 	eor.w	r3, r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d01e      	beq.n	8001e76 <menu+0x11da>
			kapiSecimleri = kapiSecimleri - 1;
 8001e38:	4b7e      	ldr	r3, [pc, #504]	; (8002034 <menu+0x1398>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	1e51      	subs	r1, r2, #1
 8001e40:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8001e44:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001e48:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001e4c:	4b79      	ldr	r3, [pc, #484]	; (8002034 <menu+0x1398>)
 8001e4e:	e9d7 125c 	ldrd	r1, r2, [r7, #368]	; 0x170
 8001e52:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(kapiSecimleri > 4){
 8001e56:	4b77      	ldr	r3, [pc, #476]	; (8002034 <menu+0x1398>)
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	2a05      	cmp	r2, #5
 8001e5e:	f173 0300 	sbcs.w	r3, r3, #0
 8001e62:	d306      	bcc.n	8001e72 <menu+0x11d6>
		   		kapiSecimleri = 3;
 8001e64:	4973      	ldr	r1, [pc, #460]	; (8002034 <menu+0x1398>)
 8001e66:	f04f 0203 	mov.w	r2, #3
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8001e72:	f002 f95f 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e76:	2108      	movs	r1, #8
 8001e78:	4870      	ldr	r0, [pc, #448]	; (800203c <menu+0x13a0>)
 8001e7a:	f008 fd19 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d121      	bne.n	8001ec8 <menu+0x122c>
 8001e84:	4b6e      	ldr	r3, [pc, #440]	; (8002040 <menu+0x13a4>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	f083 0301 	eor.w	r3, r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d01a      	beq.n	8001ec8 <menu+0x122c>
			eepromData[7] = kapiSecimleri;
 8001e92:	4b68      	ldr	r3, [pc, #416]	; (8002034 <menu+0x1398>)
 8001e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e98:	496a      	ldr	r1, [pc, #424]	; (8002044 <menu+0x13a8>)
 8001e9a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

			if(kapiSecimleri >= 1) {
 8001e9e:	4b65      	ldr	r3, [pc, #404]	; (8002034 <menu+0x1398>)
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	d00c      	beq.n	8001ec2 <menu+0x1226>
				altLimit = 1;
 8001ea8:	4967      	ldr	r1, [pc, #412]	; (8002048 <menu+0x13ac>)
 8001eaa:	f04f 0201 	mov.w	r2, #1
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[5] = altLimit;
 8001eb6:	4b64      	ldr	r3, [pc, #400]	; (8002048 <menu+0x13ac>)
 8001eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebc:	4961      	ldr	r1, [pc, #388]	; (8002044 <menu+0x13a8>)
 8001ebe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			}
			hafizaYaz = 1;
 8001ec2:	4a62      	ldr	r2, [pc, #392]	; (800204c <menu+0x13b0>)
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 8) {
 8001ec8:	4b61      	ldr	r3, [pc, #388]	; (8002050 <menu+0x13b4>)
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	f1a2 0108 	sub.w	r1, r2, #8
 8001ed2:	430b      	orrs	r3, r1
 8001ed4:	f040 808a 	bne.w	8001fec <menu+0x1350>
		lcd_print(1, 1, kapiAcmaTipiText);
 8001ed8:	4a5e      	ldr	r2, [pc, #376]	; (8002054 <menu+0x13b8>)
 8001eda:	2101      	movs	r1, #1
 8001edc:	2001      	movs	r0, #1
 8001ede:	f007 fb90 	bl	8009602 <lcd_print>

		if(kapiAcTipi == 0) {
 8001ee2:	4b5d      	ldr	r3, [pc, #372]	; (8002058 <menu+0x13bc>)
 8001ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	d105      	bne.n	8001ef8 <menu+0x125c>
			lcd_print(2, 1, kapiButonuESPText);
 8001eec:	4a5b      	ldr	r2, [pc, #364]	; (800205c <menu+0x13c0>)
 8001eee:	2101      	movs	r1, #1
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	f007 fb86 	bl	8009602 <lcd_print>
 8001ef6:	e00a      	b.n	8001f0e <menu+0x1272>
		} else if(kapiAcTipi == 1){
 8001ef8:	4b57      	ldr	r3, [pc, #348]	; (8002058 <menu+0x13bc>)
 8001efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efe:	1e51      	subs	r1, r2, #1
 8001f00:	430b      	orrs	r3, r1
 8001f02:	d104      	bne.n	8001f0e <menu+0x1272>
			lcd_print(2, 1, katButonuEXTText);
 8001f04:	4a56      	ldr	r2, [pc, #344]	; (8002060 <menu+0x13c4>)
 8001f06:	2101      	movs	r1, #1
 8001f08:	2002      	movs	r0, #2
 8001f0a:	f007 fb7a 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f0e:	2102      	movs	r1, #2
 8001f10:	484a      	ldr	r0, [pc, #296]	; (800203c <menu+0x13a0>)
 8001f12:	f008 fccd 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d125      	bne.n	8001f68 <menu+0x12cc>
 8001f1c:	4b48      	ldr	r3, [pc, #288]	; (8002040 <menu+0x13a4>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	f083 0301 	eor.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d01e      	beq.n	8001f68 <menu+0x12cc>
			kapiAcTipi = kapiAcTipi + 1;
 8001f2a:	4b4b      	ldr	r3, [pc, #300]	; (8002058 <menu+0x13bc>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	1c51      	adds	r1, r2, #1
 8001f32:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8001f36:	f143 0300 	adc.w	r3, r3, #0
 8001f3a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001f3e:	4b46      	ldr	r3, [pc, #280]	; (8002058 <menu+0x13bc>)
 8001f40:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8001f44:	e9c3 1200 	strd	r1, r2, [r3]

			if(kapiAcTipi > 1){
 8001f48:	4b43      	ldr	r3, [pc, #268]	; (8002058 <menu+0x13bc>)
 8001f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4e:	2a02      	cmp	r2, #2
 8001f50:	f173 0300 	sbcs.w	r3, r3, #0
 8001f54:	d306      	bcc.n	8001f64 <menu+0x12c8>
				kapiAcTipi = 0;
 8001f56:	4940      	ldr	r1, [pc, #256]	; (8002058 <menu+0x13bc>)
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8001f64:	f002 f8e6 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f68:	2104      	movs	r1, #4
 8001f6a:	4834      	ldr	r0, [pc, #208]	; (800203c <menu+0x13a0>)
 8001f6c:	f008 fca0 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d123      	bne.n	8001fbe <menu+0x1322>
 8001f76:	4b32      	ldr	r3, [pc, #200]	; (8002040 <menu+0x13a4>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	f083 0301 	eor.w	r3, r3, #1
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d01c      	beq.n	8001fbe <menu+0x1322>
			kapiAcTipi = kapiAcTipi - 1;
 8001f84:	4b34      	ldr	r3, [pc, #208]	; (8002058 <menu+0x13bc>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8a:	1e51      	subs	r1, r2, #1
 8001f8c:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8001f90:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001f94:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001f98:	4b2f      	ldr	r3, [pc, #188]	; (8002058 <menu+0x13bc>)
 8001f9a:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	; 0x160
 8001f9e:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(kapiAcTipi > 0){
 8001fa2:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <menu+0x13bc>)
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	d006      	beq.n	8001fba <menu+0x131e>
		   		kapiAcTipi = 1;
 8001fac:	492a      	ldr	r1, [pc, #168]	; (8002058 <menu+0x13bc>)
 8001fae:	f04f 0201 	mov.w	r2, #1
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8001fba:	f002 f8bb 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fbe:	2108      	movs	r1, #8
 8001fc0:	481e      	ldr	r0, [pc, #120]	; (800203c <menu+0x13a0>)
 8001fc2:	f008 fc75 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d10f      	bne.n	8001fec <menu+0x1350>
 8001fcc:	4b1c      	ldr	r3, [pc, #112]	; (8002040 <menu+0x13a4>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	f083 0301 	eor.w	r3, r3, #1
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d008      	beq.n	8001fec <menu+0x1350>
			eepromData[36] = kapiAcTipi;
 8001fda:	4b1f      	ldr	r3, [pc, #124]	; (8002058 <menu+0x13bc>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	4918      	ldr	r1, [pc, #96]	; (8002044 <menu+0x13a8>)
 8001fe2:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
			hafizaYaz = 1;
 8001fe6:	4a19      	ldr	r2, [pc, #100]	; (800204c <menu+0x13b0>)
 8001fe8:	2301      	movs	r3, #1
 8001fea:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 9) {
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <menu+0x13b4>)
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	f1a2 0109 	sub.w	r1, r2, #9
 8001ff6:	430b      	orrs	r3, r1
 8001ff8:	f040 80b8 	bne.w	800216c <menu+0x14d0>
		lcd_print(1, 1, birKatKapiTipiText);
 8001ffc:	4a19      	ldr	r2, [pc, #100]	; (8002064 <menu+0x13c8>)
 8001ffe:	2101      	movs	r1, #1
 8002000:	2001      	movs	r0, #1
 8002002:	f007 fafe 	bl	8009602 <lcd_print>

		if(kapi1Tip == 0) {
 8002006:	4b18      	ldr	r3, [pc, #96]	; (8002068 <menu+0x13cc>)
 8002008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200c:	4313      	orrs	r3, r2
 800200e:	d105      	bne.n	800201c <menu+0x1380>
			lcd_print(2, 1, prudhomeTextGN);
 8002010:	4a16      	ldr	r2, [pc, #88]	; (800206c <menu+0x13d0>)
 8002012:	2101      	movs	r1, #1
 8002014:	2002      	movs	r0, #2
 8002016:	f007 faf4 	bl	8009602 <lcd_print>
 800201a:	e036      	b.n	800208a <menu+0x13ee>
		} else if(kapi1Tip == 1) {
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <menu+0x13cc>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	1e51      	subs	r1, r2, #1
 8002024:	430b      	orrs	r3, r1
 8002026:	d125      	bne.n	8002074 <menu+0x13d8>
			lcd_print(2, 1, butonKontrolluText);
 8002028:	4a11      	ldr	r2, [pc, #68]	; (8002070 <menu+0x13d4>)
 800202a:	2101      	movs	r1, #1
 800202c:	2002      	movs	r0, #2
 800202e:	f007 fae8 	bl	8009602 <lcd_print>
 8002032:	e02a      	b.n	800208a <menu+0x13ee>
 8002034:	200010f8 	.word	0x200010f8
 8002038:	20001470 	.word	0x20001470
 800203c:	40010800 	.word	0x40010800
 8002040:	2000121b 	.word	0x2000121b
 8002044:	20000d08 	.word	0x20000d08
 8002048:	200010e8 	.word	0x200010e8
 800204c:	20001218 	.word	0x20001218
 8002050:	200010b8 	.word	0x200010b8
 8002054:	20001484 	.word	0x20001484
 8002058:	20001118 	.word	0x20001118
 800205c:	20001498 	.word	0x20001498
 8002060:	200014ac 	.word	0x200014ac
 8002064:	200014c0 	.word	0x200014c0
 8002068:	20001100 	.word	0x20001100
 800206c:	20000094 	.word	0x20000094
 8002070:	200014d4 	.word	0x200014d4
		} else if(kapi1Tip == 2) {
 8002074:	4b9d      	ldr	r3, [pc, #628]	; (80022ec <menu+0x1650>)
 8002076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207a:	1e91      	subs	r1, r2, #2
 800207c:	430b      	orrs	r3, r1
 800207e:	d104      	bne.n	800208a <menu+0x13ee>
			lcd_print(2, 1, pizzattoTextGN);
 8002080:	4a9b      	ldr	r2, [pc, #620]	; (80022f0 <menu+0x1654>)
 8002082:	2101      	movs	r1, #1
 8002084:	2002      	movs	r0, #2
 8002086:	f007 fabc 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800208a:	2102      	movs	r1, #2
 800208c:	4899      	ldr	r0, [pc, #612]	; (80022f4 <menu+0x1658>)
 800208e:	f008 fc0f 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002092:	4603      	mov	r3, r0
 8002094:	2b01      	cmp	r3, #1
 8002096:	d125      	bne.n	80020e4 <menu+0x1448>
 8002098:	4b97      	ldr	r3, [pc, #604]	; (80022f8 <menu+0x165c>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	f083 0301 	eor.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01e      	beq.n	80020e4 <menu+0x1448>
			kapi1Tip = kapi1Tip + 1;
 80020a6:	4b91      	ldr	r3, [pc, #580]	; (80022ec <menu+0x1650>)
 80020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ac:	1c51      	adds	r1, r2, #1
 80020ae:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 80020b2:	f143 0300 	adc.w	r3, r3, #0
 80020b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80020ba:	4b8c      	ldr	r3, [pc, #560]	; (80022ec <menu+0x1650>)
 80020bc:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	; 0x158
 80020c0:	e9c3 1200 	strd	r1, r2, [r3]

			if(kapi1Tip > 2){
 80020c4:	4b89      	ldr	r3, [pc, #548]	; (80022ec <menu+0x1650>)
 80020c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ca:	2a03      	cmp	r2, #3
 80020cc:	f173 0300 	sbcs.w	r3, r3, #0
 80020d0:	d306      	bcc.n	80020e0 <menu+0x1444>
				kapi1Tip = 0;
 80020d2:	4986      	ldr	r1, [pc, #536]	; (80022ec <menu+0x1650>)
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 80020e0:	f002 f828 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020e4:	2104      	movs	r1, #4
 80020e6:	4883      	ldr	r0, [pc, #524]	; (80022f4 <menu+0x1658>)
 80020e8:	f008 fbe2 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d125      	bne.n	800213e <menu+0x14a2>
 80020f2:	4b81      	ldr	r3, [pc, #516]	; (80022f8 <menu+0x165c>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	f083 0301 	eor.w	r3, r3, #1
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01e      	beq.n	800213e <menu+0x14a2>
			kapi1Tip = kapi1Tip - 1;
 8002100:	4b7a      	ldr	r3, [pc, #488]	; (80022ec <menu+0x1650>)
 8002102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002106:	1e51      	subs	r1, r2, #1
 8002108:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 800210c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002110:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002114:	4b75      	ldr	r3, [pc, #468]	; (80022ec <menu+0x1650>)
 8002116:	e9d7 1254 	ldrd	r1, r2, [r7, #336]	; 0x150
 800211a:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(kapi1Tip > 3){
 800211e:	4b73      	ldr	r3, [pc, #460]	; (80022ec <menu+0x1650>)
 8002120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002124:	2a04      	cmp	r2, #4
 8002126:	f173 0300 	sbcs.w	r3, r3, #0
 800212a:	d306      	bcc.n	800213a <menu+0x149e>
		   		kapi1Tip = 2;
 800212c:	496f      	ldr	r1, [pc, #444]	; (80022ec <menu+0x1650>)
 800212e:	f04f 0202 	mov.w	r2, #2
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 800213a:	f001 fffb 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800213e:	2108      	movs	r1, #8
 8002140:	486c      	ldr	r0, [pc, #432]	; (80022f4 <menu+0x1658>)
 8002142:	f008 fbb5 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002146:	4603      	mov	r3, r0
 8002148:	2b01      	cmp	r3, #1
 800214a:	d10f      	bne.n	800216c <menu+0x14d0>
 800214c:	4b6a      	ldr	r3, [pc, #424]	; (80022f8 <menu+0x165c>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	f083 0301 	eor.w	r3, r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d008      	beq.n	800216c <menu+0x14d0>
			eepromData[8] = kapi1Tip;
 800215a:	4b64      	ldr	r3, [pc, #400]	; (80022ec <menu+0x1650>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	4966      	ldr	r1, [pc, #408]	; (80022fc <menu+0x1660>)
 8002162:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			hafizaYaz = 1;
 8002166:	4a66      	ldr	r2, [pc, #408]	; (8002300 <menu+0x1664>)
 8002168:	2301      	movs	r3, #1
 800216a:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 10) {
 800216c:	4b65      	ldr	r3, [pc, #404]	; (8002304 <menu+0x1668>)
 800216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002172:	f1a2 010a 	sub.w	r1, r2, #10
 8002176:	430b      	orrs	r3, r1
 8002178:	f040 8093 	bne.w	80022a2 <menu+0x1606>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 800217c:	4a62      	ldr	r2, [pc, #392]	; (8002308 <menu+0x166c>)
 800217e:	2101      	movs	r1, #1
 8002180:	2001      	movs	r0, #1
 8002182:	f007 fa3e 	bl	8009602 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002186:	4a61      	ldr	r2, [pc, #388]	; (800230c <menu+0x1670>)
 8002188:	2101      	movs	r1, #1
 800218a:	2002      	movs	r0, #2
 800218c:	f007 fa39 	bl	8009602 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 8002190:	4b5f      	ldr	r3, [pc, #380]	; (8002310 <menu+0x1674>)
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	4613      	mov	r3, r2
 8002198:	220a      	movs	r2, #10
 800219a:	495e      	ldr	r1, [pc, #376]	; (8002314 <menu+0x1678>)
 800219c:	4618      	mov	r0, r3
 800219e:	f00a ff29 	bl	800cff4 <itoa>
		lcd_print(2,16,snum);
 80021a2:	4a5c      	ldr	r2, [pc, #368]	; (8002314 <menu+0x1678>)
 80021a4:	2110      	movs	r1, #16
 80021a6:	2002      	movs	r0, #2
 80021a8:	f007 fa2b 	bl	8009602 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80021ac:	2102      	movs	r1, #2
 80021ae:	4851      	ldr	r0, [pc, #324]	; (80022f4 <menu+0x1658>)
 80021b0:	f008 fb7e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d12a      	bne.n	8002210 <menu+0x1574>
 80021ba:	4b4f      	ldr	r3, [pc, #316]	; (80022f8 <menu+0x165c>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	f083 0301 	eor.w	r3, r3, #1
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d023      	beq.n	8002210 <menu+0x1574>
 80021c8:	4b48      	ldr	r3, [pc, #288]	; (80022ec <menu+0x1650>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	d11e      	bne.n	8002210 <menu+0x1574>
			kapi1AcSure = kapi1AcSure + 1;
 80021d2:	4b4f      	ldr	r3, [pc, #316]	; (8002310 <menu+0x1674>)
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	1c51      	adds	r1, r2, #1
 80021da:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 80021de:	f143 0300 	adc.w	r3, r3, #0
 80021e2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80021e6:	4b4a      	ldr	r3, [pc, #296]	; (8002310 <menu+0x1674>)
 80021e8:	e9d7 1252 	ldrd	r1, r2, [r7, #328]	; 0x148
 80021ec:	e9c3 1200 	strd	r1, r2, [r3]

			if(kapi1AcSure > 5){
 80021f0:	4b47      	ldr	r3, [pc, #284]	; (8002310 <menu+0x1674>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	2a06      	cmp	r2, #6
 80021f8:	f173 0300 	sbcs.w	r3, r3, #0
 80021fc:	d306      	bcc.n	800220c <menu+0x1570>
				kapi1AcSure = 0;
 80021fe:	4944      	ldr	r1, [pc, #272]	; (8002310 <menu+0x1674>)
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 800220c:	f001 ff92 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002210:	2104      	movs	r1, #4
 8002212:	4838      	ldr	r0, [pc, #224]	; (80022f4 <menu+0x1658>)
 8002214:	f008 fb4c 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002218:	4603      	mov	r3, r0
 800221a:	2b01      	cmp	r3, #1
 800221c:	d12a      	bne.n	8002274 <menu+0x15d8>
 800221e:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <menu+0x165c>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	f083 0301 	eor.w	r3, r3, #1
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d023      	beq.n	8002274 <menu+0x15d8>
 800222c:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <menu+0x1650>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	4313      	orrs	r3, r2
 8002234:	d11e      	bne.n	8002274 <menu+0x15d8>
			kapi1AcSure = kapi1AcSure - 1;
 8002236:	4b36      	ldr	r3, [pc, #216]	; (8002310 <menu+0x1674>)
 8002238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223c:	1e51      	subs	r1, r2, #1
 800223e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8002242:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002246:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800224a:	4b31      	ldr	r3, [pc, #196]	; (8002310 <menu+0x1674>)
 800224c:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8002250:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(kapi1AcSure > 6){
 8002254:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <menu+0x1674>)
 8002256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225a:	2a07      	cmp	r2, #7
 800225c:	f173 0300 	sbcs.w	r3, r3, #0
 8002260:	d306      	bcc.n	8002270 <menu+0x15d4>
		   		kapi1AcSure = 5;
 8002262:	492b      	ldr	r1, [pc, #172]	; (8002310 <menu+0x1674>)
 8002264:	f04f 0205 	mov.w	r2, #5
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8002270:	f001 ff60 	bl	8004134 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002274:	2108      	movs	r1, #8
 8002276:	481f      	ldr	r0, [pc, #124]	; (80022f4 <menu+0x1658>)
 8002278:	f008 fb1a 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800227c:	4603      	mov	r3, r0
 800227e:	2b01      	cmp	r3, #1
 8002280:	d10f      	bne.n	80022a2 <menu+0x1606>
 8002282:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <menu+0x165c>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	f083 0301 	eor.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <menu+0x1606>
			eepromData[9] = kapi1AcSure;
 8002290:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <menu+0x1674>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	4919      	ldr	r1, [pc, #100]	; (80022fc <menu+0x1660>)
 8002298:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			hafizaYaz = 1;
 800229c:	4a18      	ldr	r2, [pc, #96]	; (8002300 <menu+0x1664>)
 800229e:	2301      	movs	r3, #1
 80022a0:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 11) {
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <menu+0x1668>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	f1a2 010b 	sub.w	r1, r2, #11
 80022ac:	430b      	orrs	r3, r1
 80022ae:	f040 80b7 	bne.w	8002420 <menu+0x1784>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 80022b2:	4a19      	ldr	r2, [pc, #100]	; (8002318 <menu+0x167c>)
 80022b4:	2101      	movs	r1, #1
 80022b6:	2001      	movs	r0, #1
 80022b8:	f007 f9a3 	bl	8009602 <lcd_print>

		if(kapi2Tip == 0) {
 80022bc:	4b17      	ldr	r3, [pc, #92]	; (800231c <menu+0x1680>)
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	d105      	bne.n	80022d2 <menu+0x1636>
			lcd_print(2, 1, prudhomeTextGN);
 80022c6:	4a16      	ldr	r2, [pc, #88]	; (8002320 <menu+0x1684>)
 80022c8:	2101      	movs	r1, #1
 80022ca:	2002      	movs	r0, #2
 80022cc:	f007 f999 	bl	8009602 <lcd_print>
 80022d0:	e035      	b.n	800233e <menu+0x16a2>
		} else if(kapi2Tip == 1) {
 80022d2:	4b12      	ldr	r3, [pc, #72]	; (800231c <menu+0x1680>)
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	1e51      	subs	r1, r2, #1
 80022da:	430b      	orrs	r3, r1
 80022dc:	d124      	bne.n	8002328 <menu+0x168c>
			lcd_print(2, 1, butonKontrolluText);
 80022de:	4a11      	ldr	r2, [pc, #68]	; (8002324 <menu+0x1688>)
 80022e0:	2101      	movs	r1, #1
 80022e2:	2002      	movs	r0, #2
 80022e4:	f007 f98d 	bl	8009602 <lcd_print>
 80022e8:	e029      	b.n	800233e <menu+0x16a2>
 80022ea:	bf00      	nop
 80022ec:	20001100 	.word	0x20001100
 80022f0:	200000a8 	.word	0x200000a8
 80022f4:	40010800 	.word	0x40010800
 80022f8:	2000121b 	.word	0x2000121b
 80022fc:	20000d08 	.word	0x20000d08
 8002300:	20001218 	.word	0x20001218
 8002304:	200010b8 	.word	0x200010b8
 8002308:	200014e8 	.word	0x200014e8
 800230c:	200014fc 	.word	0x200014fc
 8002310:	20001180 	.word	0x20001180
 8002314:	20001078 	.word	0x20001078
 8002318:	20001510 	.word	0x20001510
 800231c:	20001108 	.word	0x20001108
 8002320:	20000094 	.word	0x20000094
 8002324:	200014d4 	.word	0x200014d4
		} else if(kapi2Tip == 2) {
 8002328:	4b9d      	ldr	r3, [pc, #628]	; (80025a0 <menu+0x1904>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	1e91      	subs	r1, r2, #2
 8002330:	430b      	orrs	r3, r1
 8002332:	d104      	bne.n	800233e <menu+0x16a2>
			lcd_print(2, 1, pizzattoTextGN);
 8002334:	4a9b      	ldr	r2, [pc, #620]	; (80025a4 <menu+0x1908>)
 8002336:	2101      	movs	r1, #1
 8002338:	2002      	movs	r0, #2
 800233a:	f007 f962 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800233e:	2102      	movs	r1, #2
 8002340:	4899      	ldr	r0, [pc, #612]	; (80025a8 <menu+0x190c>)
 8002342:	f008 fab5 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002346:	4603      	mov	r3, r0
 8002348:	2b01      	cmp	r3, #1
 800234a:	d125      	bne.n	8002398 <menu+0x16fc>
 800234c:	4b97      	ldr	r3, [pc, #604]	; (80025ac <menu+0x1910>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	f083 0301 	eor.w	r3, r3, #1
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d01e      	beq.n	8002398 <menu+0x16fc>
			kapi2Tip = kapi2Tip + 1;
 800235a:	4b91      	ldr	r3, [pc, #580]	; (80025a0 <menu+0x1904>)
 800235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002360:	1c51      	adds	r1, r2, #1
 8002362:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8002366:	f143 0300 	adc.w	r3, r3, #0
 800236a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800236e:	4b8c      	ldr	r3, [pc, #560]	; (80025a0 <menu+0x1904>)
 8002370:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8002374:	e9c3 1200 	strd	r1, r2, [r3]

			if(kapi2Tip > 2){
 8002378:	4b89      	ldr	r3, [pc, #548]	; (80025a0 <menu+0x1904>)
 800237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237e:	2a03      	cmp	r2, #3
 8002380:	f173 0300 	sbcs.w	r3, r3, #0
 8002384:	d306      	bcc.n	8002394 <menu+0x16f8>
				kapi2Tip = 0;
 8002386:	4986      	ldr	r1, [pc, #536]	; (80025a0 <menu+0x1904>)
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8002394:	f001 fece 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002398:	2104      	movs	r1, #4
 800239a:	4883      	ldr	r0, [pc, #524]	; (80025a8 <menu+0x190c>)
 800239c:	f008 fa88 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d125      	bne.n	80023f2 <menu+0x1756>
 80023a6:	4b81      	ldr	r3, [pc, #516]	; (80025ac <menu+0x1910>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	f083 0301 	eor.w	r3, r3, #1
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01e      	beq.n	80023f2 <menu+0x1756>
			kapi2Tip = kapi2Tip - 1;
 80023b4:	4b7a      	ldr	r3, [pc, #488]	; (80025a0 <menu+0x1904>)
 80023b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ba:	1e51      	subs	r1, r2, #1
 80023bc:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80023c0:	f143 33ff 	adc.w	r3, r3, #4294967295
 80023c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80023c8:	4b75      	ldr	r3, [pc, #468]	; (80025a0 <menu+0x1904>)
 80023ca:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80023ce:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(kapi2Tip > 3){
 80023d2:	4b73      	ldr	r3, [pc, #460]	; (80025a0 <menu+0x1904>)
 80023d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d8:	2a04      	cmp	r2, #4
 80023da:	f173 0300 	sbcs.w	r3, r3, #0
 80023de:	d306      	bcc.n	80023ee <menu+0x1752>
		   		kapi2Tip = 2;
 80023e0:	496f      	ldr	r1, [pc, #444]	; (80025a0 <menu+0x1904>)
 80023e2:	f04f 0202 	mov.w	r2, #2
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 80023ee:	f001 fea1 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023f2:	2108      	movs	r1, #8
 80023f4:	486c      	ldr	r0, [pc, #432]	; (80025a8 <menu+0x190c>)
 80023f6:	f008 fa5b 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d10f      	bne.n	8002420 <menu+0x1784>
 8002400:	4b6a      	ldr	r3, [pc, #424]	; (80025ac <menu+0x1910>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	f083 0301 	eor.w	r3, r3, #1
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <menu+0x1784>
			eepromData[10] = kapi2Tip;
 800240e:	4b64      	ldr	r3, [pc, #400]	; (80025a0 <menu+0x1904>)
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	4966      	ldr	r1, [pc, #408]	; (80025b0 <menu+0x1914>)
 8002416:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			hafizaYaz = 1;
 800241a:	4a66      	ldr	r2, [pc, #408]	; (80025b4 <menu+0x1918>)
 800241c:	2301      	movs	r3, #1
 800241e:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 12) {
 8002420:	4b65      	ldr	r3, [pc, #404]	; (80025b8 <menu+0x191c>)
 8002422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002426:	f1a2 010c 	sub.w	r1, r2, #12
 800242a:	430b      	orrs	r3, r1
 800242c:	f040 8093 	bne.w	8002556 <menu+0x18ba>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 8002430:	4a62      	ldr	r2, [pc, #392]	; (80025bc <menu+0x1920>)
 8002432:	2101      	movs	r1, #1
 8002434:	2001      	movs	r0, #1
 8002436:	f007 f8e4 	bl	8009602 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800243a:	4a61      	ldr	r2, [pc, #388]	; (80025c0 <menu+0x1924>)
 800243c:	2101      	movs	r1, #1
 800243e:	2002      	movs	r0, #2
 8002440:	f007 f8df 	bl	8009602 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 8002444:	4b5f      	ldr	r3, [pc, #380]	; (80025c4 <menu+0x1928>)
 8002446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244a:	4613      	mov	r3, r2
 800244c:	220a      	movs	r2, #10
 800244e:	495e      	ldr	r1, [pc, #376]	; (80025c8 <menu+0x192c>)
 8002450:	4618      	mov	r0, r3
 8002452:	f00a fdcf 	bl	800cff4 <itoa>
		lcd_print(2,16,snum);
 8002456:	4a5c      	ldr	r2, [pc, #368]	; (80025c8 <menu+0x192c>)
 8002458:	2110      	movs	r1, #16
 800245a:	2002      	movs	r0, #2
 800245c:	f007 f8d1 	bl	8009602 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002460:	2102      	movs	r1, #2
 8002462:	4851      	ldr	r0, [pc, #324]	; (80025a8 <menu+0x190c>)
 8002464:	f008 fa24 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002468:	4603      	mov	r3, r0
 800246a:	2b01      	cmp	r3, #1
 800246c:	d12a      	bne.n	80024c4 <menu+0x1828>
 800246e:	4b4f      	ldr	r3, [pc, #316]	; (80025ac <menu+0x1910>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	f083 0301 	eor.w	r3, r3, #1
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d023      	beq.n	80024c4 <menu+0x1828>
 800247c:	4b48      	ldr	r3, [pc, #288]	; (80025a0 <menu+0x1904>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	4313      	orrs	r3, r2
 8002484:	d11e      	bne.n	80024c4 <menu+0x1828>
			kapi2AcSure = kapi2AcSure + 1;
 8002486:	4b4f      	ldr	r3, [pc, #316]	; (80025c4 <menu+0x1928>)
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	1c51      	adds	r1, r2, #1
 800248e:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8002492:	f143 0300 	adc.w	r3, r3, #0
 8002496:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800249a:	4b4a      	ldr	r3, [pc, #296]	; (80025c4 <menu+0x1928>)
 800249c:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 80024a0:	e9c3 1200 	strd	r1, r2, [r3]

			if(kapi2AcSure > 5) {
 80024a4:	4b47      	ldr	r3, [pc, #284]	; (80025c4 <menu+0x1928>)
 80024a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024aa:	2a06      	cmp	r2, #6
 80024ac:	f173 0300 	sbcs.w	r3, r3, #0
 80024b0:	d306      	bcc.n	80024c0 <menu+0x1824>
				kapi2AcSure = 0;
 80024b2:	4944      	ldr	r1, [pc, #272]	; (80025c4 <menu+0x1928>)
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 80024c0:	f001 fe38 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80024c4:	2104      	movs	r1, #4
 80024c6:	4838      	ldr	r0, [pc, #224]	; (80025a8 <menu+0x190c>)
 80024c8:	f008 f9f2 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d12a      	bne.n	8002528 <menu+0x188c>
 80024d2:	4b36      	ldr	r3, [pc, #216]	; (80025ac <menu+0x1910>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	f083 0301 	eor.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d023      	beq.n	8002528 <menu+0x188c>
 80024e0:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <menu+0x1904>)
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	d11e      	bne.n	8002528 <menu+0x188c>
			kapi2AcSure = kapi2AcSure - 1;
 80024ea:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <menu+0x1928>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	1e51      	subs	r1, r2, #1
 80024f2:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 80024f6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80024fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80024fe:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <menu+0x1928>)
 8002500:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8002504:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(kapi2AcSure > 6) {
 8002508:	4b2e      	ldr	r3, [pc, #184]	; (80025c4 <menu+0x1928>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	2a07      	cmp	r2, #7
 8002510:	f173 0300 	sbcs.w	r3, r3, #0
 8002514:	d306      	bcc.n	8002524 <menu+0x1888>
		   		kapi2AcSure = 5;
 8002516:	492b      	ldr	r1, [pc, #172]	; (80025c4 <menu+0x1928>)
 8002518:	f04f 0205 	mov.w	r2, #5
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8002524:	f001 fe06 	bl	8004134 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002528:	2108      	movs	r1, #8
 800252a:	481f      	ldr	r0, [pc, #124]	; (80025a8 <menu+0x190c>)
 800252c:	f008 f9c0 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002530:	4603      	mov	r3, r0
 8002532:	2b01      	cmp	r3, #1
 8002534:	d10f      	bne.n	8002556 <menu+0x18ba>
 8002536:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <menu+0x1910>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	f083 0301 	eor.w	r3, r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <menu+0x18ba>
			eepromData[11] = kapi2AcSure;
 8002544:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <menu+0x1928>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	4919      	ldr	r1, [pc, #100]	; (80025b0 <menu+0x1914>)
 800254c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			hafizaYaz = 1;
 8002550:	4a18      	ldr	r2, [pc, #96]	; (80025b4 <menu+0x1918>)
 8002552:	2301      	movs	r3, #1
 8002554:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 13) {
 8002556:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <menu+0x191c>)
 8002558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255c:	f1a2 010d 	sub.w	r1, r2, #13
 8002560:	430b      	orrs	r3, r1
 8002562:	f040 80b7 	bne.w	80026d4 <menu+0x1a38>
		lcd_print(1, 1, tablaKapiTipiText);
 8002566:	4a19      	ldr	r2, [pc, #100]	; (80025cc <menu+0x1930>)
 8002568:	2101      	movs	r1, #1
 800256a:	2001      	movs	r0, #1
 800256c:	f007 f849 	bl	8009602 <lcd_print>

		if(kapitablaTip == 0) {
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <menu+0x1934>)
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	4313      	orrs	r3, r2
 8002578:	d105      	bne.n	8002586 <menu+0x18ea>
			lcd_print(2, 1, prudhomeTextGN);
 800257a:	4a16      	ldr	r2, [pc, #88]	; (80025d4 <menu+0x1938>)
 800257c:	2101      	movs	r1, #1
 800257e:	2002      	movs	r0, #2
 8002580:	f007 f83f 	bl	8009602 <lcd_print>
 8002584:	e035      	b.n	80025f2 <menu+0x1956>
		} else if(kapitablaTip == 1) {
 8002586:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <menu+0x1934>)
 8002588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258c:	1e51      	subs	r1, r2, #1
 800258e:	430b      	orrs	r3, r1
 8002590:	d124      	bne.n	80025dc <menu+0x1940>
			lcd_print(2, 1, butonKontrolluText);
 8002592:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <menu+0x193c>)
 8002594:	2101      	movs	r1, #1
 8002596:	2002      	movs	r0, #2
 8002598:	f007 f833 	bl	8009602 <lcd_print>
 800259c:	e029      	b.n	80025f2 <menu+0x1956>
 800259e:	bf00      	nop
 80025a0:	20001108 	.word	0x20001108
 80025a4:	200000a8 	.word	0x200000a8
 80025a8:	40010800 	.word	0x40010800
 80025ac:	2000121b 	.word	0x2000121b
 80025b0:	20000d08 	.word	0x20000d08
 80025b4:	20001218 	.word	0x20001218
 80025b8:	200010b8 	.word	0x200010b8
 80025bc:	20001524 	.word	0x20001524
 80025c0:	200014fc 	.word	0x200014fc
 80025c4:	20001188 	.word	0x20001188
 80025c8:	20001078 	.word	0x20001078
 80025cc:	20001538 	.word	0x20001538
 80025d0:	20001110 	.word	0x20001110
 80025d4:	20000094 	.word	0x20000094
 80025d8:	200014d4 	.word	0x200014d4
		} else if(kapitablaTip == 2) {
 80025dc:	4b55      	ldr	r3, [pc, #340]	; (8002734 <menu+0x1a98>)
 80025de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e2:	1e91      	subs	r1, r2, #2
 80025e4:	430b      	orrs	r3, r1
 80025e6:	d104      	bne.n	80025f2 <menu+0x1956>
			lcd_print(2, 1, pizzattoTextGN);
 80025e8:	4a53      	ldr	r2, [pc, #332]	; (8002738 <menu+0x1a9c>)
 80025ea:	2101      	movs	r1, #1
 80025ec:	2002      	movs	r0, #2
 80025ee:	f007 f808 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025f2:	2102      	movs	r1, #2
 80025f4:	4851      	ldr	r0, [pc, #324]	; (800273c <menu+0x1aa0>)
 80025f6:	f008 f95b 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d125      	bne.n	800264c <menu+0x19b0>
 8002600:	4b4f      	ldr	r3, [pc, #316]	; (8002740 <menu+0x1aa4>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	f083 0301 	eor.w	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d01e      	beq.n	800264c <menu+0x19b0>
			kapitablaTip = kapitablaTip + 1;
 800260e:	4b49      	ldr	r3, [pc, #292]	; (8002734 <menu+0x1a98>)
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	1c51      	adds	r1, r2, #1
 8002616:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800261a:	f143 0300 	adc.w	r3, r3, #0
 800261e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002622:	4b44      	ldr	r3, [pc, #272]	; (8002734 <menu+0x1a98>)
 8002624:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8002628:	e9c3 1200 	strd	r1, r2, [r3]

			if(kapitablaTip > 2) {
 800262c:	4b41      	ldr	r3, [pc, #260]	; (8002734 <menu+0x1a98>)
 800262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002632:	2a03      	cmp	r2, #3
 8002634:	f173 0300 	sbcs.w	r3, r3, #0
 8002638:	d306      	bcc.n	8002648 <menu+0x19ac>
				kapitablaTip = 0;
 800263a:	493e      	ldr	r1, [pc, #248]	; (8002734 <menu+0x1a98>)
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8002648:	f001 fd74 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800264c:	2104      	movs	r1, #4
 800264e:	483b      	ldr	r0, [pc, #236]	; (800273c <menu+0x1aa0>)
 8002650:	f008 f92e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002654:	4603      	mov	r3, r0
 8002656:	2b01      	cmp	r3, #1
 8002658:	d125      	bne.n	80026a6 <menu+0x1a0a>
 800265a:	4b39      	ldr	r3, [pc, #228]	; (8002740 <menu+0x1aa4>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	f083 0301 	eor.w	r3, r3, #1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d01e      	beq.n	80026a6 <menu+0x1a0a>
			kapitablaTip = kapitablaTip - 1;
 8002668:	4b32      	ldr	r3, [pc, #200]	; (8002734 <menu+0x1a98>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	1e51      	subs	r1, r2, #1
 8002670:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8002674:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002678:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800267c:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <menu+0x1a98>)
 800267e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002682:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(kapitablaTip > 3) {
 8002686:	4b2b      	ldr	r3, [pc, #172]	; (8002734 <menu+0x1a98>)
 8002688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268c:	2a04      	cmp	r2, #4
 800268e:	f173 0300 	sbcs.w	r3, r3, #0
 8002692:	d306      	bcc.n	80026a2 <menu+0x1a06>
		   		kapitablaTip = 2;
 8002694:	4927      	ldr	r1, [pc, #156]	; (8002734 <menu+0x1a98>)
 8002696:	f04f 0202 	mov.w	r2, #2
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 80026a2:	f001 fd47 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026a6:	2108      	movs	r1, #8
 80026a8:	4824      	ldr	r0, [pc, #144]	; (800273c <menu+0x1aa0>)
 80026aa:	f008 f901 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d10f      	bne.n	80026d4 <menu+0x1a38>
 80026b4:	4b22      	ldr	r3, [pc, #136]	; (8002740 <menu+0x1aa4>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	f083 0301 	eor.w	r3, r3, #1
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d008      	beq.n	80026d4 <menu+0x1a38>
			eepromData[12] = kapitablaTip;
 80026c2:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <menu+0x1a98>)
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	491e      	ldr	r1, [pc, #120]	; (8002744 <menu+0x1aa8>)
 80026ca:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			hafizaYaz = 1;
 80026ce:	4a1e      	ldr	r2, [pc, #120]	; (8002748 <menu+0x1aac>)
 80026d0:	2301      	movs	r3, #1
 80026d2:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 14) {
 80026d4:	4b1d      	ldr	r3, [pc, #116]	; (800274c <menu+0x1ab0>)
 80026d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026da:	f1a2 010e 	sub.w	r1, r2, #14
 80026de:	430b      	orrs	r3, r1
 80026e0:	f040 80d4 	bne.w	800288c <menu+0x1bf0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 80026e4:	4a1a      	ldr	r2, [pc, #104]	; (8002750 <menu+0x1ab4>)
 80026e6:	2101      	movs	r1, #1
 80026e8:	2001      	movs	r0, #1
 80026ea:	f006 ff8a 	bl	8009602 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 80026ee:	4b19      	ldr	r3, [pc, #100]	; (8002754 <menu+0x1ab8>)
 80026f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	d105      	bne.n	8002704 <menu+0x1a68>
			lcd_print(2, 1, birinciKattaAcText);
 80026f8:	4a17      	ldr	r2, [pc, #92]	; (8002758 <menu+0x1abc>)
 80026fa:	2101      	movs	r1, #1
 80026fc:	2002      	movs	r0, #2
 80026fe:	f006 ff80 	bl	8009602 <lcd_print>
 8002702:	e03a      	b.n	800277a <menu+0x1ade>
		} else if(kapiTablaAcKonum == 1) {
 8002704:	4b13      	ldr	r3, [pc, #76]	; (8002754 <menu+0x1ab8>)
 8002706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270a:	1e51      	subs	r1, r2, #1
 800270c:	430b      	orrs	r3, r1
 800270e:	d105      	bne.n	800271c <menu+0x1a80>
			lcd_print(2, 1, ikinciKattaAcText);
 8002710:	4a12      	ldr	r2, [pc, #72]	; (800275c <menu+0x1ac0>)
 8002712:	2101      	movs	r1, #1
 8002714:	2002      	movs	r0, #2
 8002716:	f006 ff74 	bl	8009602 <lcd_print>
 800271a:	e02e      	b.n	800277a <menu+0x1ade>
		} else if(kapiTablaAcKonum == 2) {
 800271c:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <menu+0x1ab8>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	1e91      	subs	r1, r2, #2
 8002724:	430b      	orrs	r3, r1
 8002726:	d11d      	bne.n	8002764 <menu+0x1ac8>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002728:	4a0d      	ldr	r2, [pc, #52]	; (8002760 <menu+0x1ac4>)
 800272a:	2101      	movs	r1, #1
 800272c:	2002      	movs	r0, #2
 800272e:	f006 ff68 	bl	8009602 <lcd_print>
 8002732:	e022      	b.n	800277a <menu+0x1ade>
 8002734:	20001110 	.word	0x20001110
 8002738:	200000a8 	.word	0x200000a8
 800273c:	40010800 	.word	0x40010800
 8002740:	2000121b 	.word	0x2000121b
 8002744:	20000d08 	.word	0x20000d08
 8002748:	20001218 	.word	0x20001218
 800274c:	200010b8 	.word	0x200010b8
 8002750:	2000154c 	.word	0x2000154c
 8002754:	20001120 	.word	0x20001120
 8002758:	20001560 	.word	0x20001560
 800275c:	20001574 	.word	0x20001574
 8002760:	20001588 	.word	0x20001588
		} else if(kapiTablaAcKonum == 3) {
 8002764:	4ba2      	ldr	r3, [pc, #648]	; (80029f0 <menu+0x1d54>)
 8002766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276a:	1ed1      	subs	r1, r2, #3
 800276c:	430b      	orrs	r3, r1
 800276e:	d104      	bne.n	800277a <menu+0x1ade>
			lcd_print(2, 1, pasifText);
 8002770:	4aa0      	ldr	r2, [pc, #640]	; (80029f4 <menu+0x1d58>)
 8002772:	2101      	movs	r1, #1
 8002774:	2002      	movs	r0, #2
 8002776:	f006 ff44 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800277a:	2102      	movs	r1, #2
 800277c:	489e      	ldr	r0, [pc, #632]	; (80029f8 <menu+0x1d5c>)
 800277e:	f008 f897 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002782:	4603      	mov	r3, r0
 8002784:	2b01      	cmp	r3, #1
 8002786:	d125      	bne.n	80027d4 <menu+0x1b38>
 8002788:	4b9c      	ldr	r3, [pc, #624]	; (80029fc <menu+0x1d60>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	f083 0301 	eor.w	r3, r3, #1
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d01e      	beq.n	80027d4 <menu+0x1b38>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002796:	4b96      	ldr	r3, [pc, #600]	; (80029f0 <menu+0x1d54>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	1c51      	adds	r1, r2, #1
 800279e:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80027a2:	f143 0300 	adc.w	r3, r3, #0
 80027a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80027aa:	4b91      	ldr	r3, [pc, #580]	; (80029f0 <menu+0x1d54>)
 80027ac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80027b0:	e9c3 1200 	strd	r1, r2, [r3]

			if(kapiTablaAcKonum > 2){
 80027b4:	4b8e      	ldr	r3, [pc, #568]	; (80029f0 <menu+0x1d54>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	2a03      	cmp	r2, #3
 80027bc:	f173 0300 	sbcs.w	r3, r3, #0
 80027c0:	d306      	bcc.n	80027d0 <menu+0x1b34>
				kapiTablaAcKonum = 0;
 80027c2:	498b      	ldr	r1, [pc, #556]	; (80029f0 <menu+0x1d54>)
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 80027d0:	f001 fcb0 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027d4:	2104      	movs	r1, #4
 80027d6:	4888      	ldr	r0, [pc, #544]	; (80029f8 <menu+0x1d5c>)
 80027d8:	f008 f86a 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d125      	bne.n	800282e <menu+0x1b92>
 80027e2:	4b86      	ldr	r3, [pc, #536]	; (80029fc <menu+0x1d60>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	f083 0301 	eor.w	r3, r3, #1
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d01e      	beq.n	800282e <menu+0x1b92>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80027f0:	4b7f      	ldr	r3, [pc, #508]	; (80029f0 <menu+0x1d54>)
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	1e51      	subs	r1, r2, #1
 80027f8:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 80027fc:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002800:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002804:	4b7a      	ldr	r3, [pc, #488]	; (80029f0 <menu+0x1d54>)
 8002806:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800280a:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(kapiTablaAcKonum > 3){
 800280e:	4b78      	ldr	r3, [pc, #480]	; (80029f0 <menu+0x1d54>)
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	2a04      	cmp	r2, #4
 8002816:	f173 0300 	sbcs.w	r3, r3, #0
 800281a:	d306      	bcc.n	800282a <menu+0x1b8e>
		   		kapiTablaAcKonum = 2;
 800281c:	4974      	ldr	r1, [pc, #464]	; (80029f0 <menu+0x1d54>)
 800281e:	f04f 0202 	mov.w	r2, #2
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 800282a:	f001 fc83 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800282e:	2108      	movs	r1, #8
 8002830:	4871      	ldr	r0, [pc, #452]	; (80029f8 <menu+0x1d5c>)
 8002832:	f008 f83d 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002836:	4603      	mov	r3, r0
 8002838:	2b01      	cmp	r3, #1
 800283a:	d127      	bne.n	800288c <menu+0x1bf0>
 800283c:	4b6f      	ldr	r3, [pc, #444]	; (80029fc <menu+0x1d60>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	f083 0301 	eor.w	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d020      	beq.n	800288c <menu+0x1bf0>
			eepromData[34] = kapiTablaAcKonum;
 800284a:	4b69      	ldr	r3, [pc, #420]	; (80029f0 <menu+0x1d54>)
 800284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002850:	496b      	ldr	r1, [pc, #428]	; (8002a00 <menu+0x1d64>)
 8002852:	e9c1 2344 	strd	r2, r3, [r1, #272]	; 0x110

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002856:	4b66      	ldr	r3, [pc, #408]	; (80029f0 <menu+0x1d54>)
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	4313      	orrs	r3, r2
 800285e:	d005      	beq.n	800286c <menu+0x1bd0>
 8002860:	4b63      	ldr	r3, [pc, #396]	; (80029f0 <menu+0x1d54>)
 8002862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002866:	1e91      	subs	r1, r2, #2
 8002868:	430b      	orrs	r3, r1
 800286a:	d10c      	bne.n	8002886 <menu+0x1bea>
				altLimit = 1;
 800286c:	4965      	ldr	r1, [pc, #404]	; (8002a04 <menu+0x1d68>)
 800286e:	f04f 0201 	mov.w	r2, #1
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[5] = altLimit;
 800287a:	4b62      	ldr	r3, [pc, #392]	; (8002a04 <menu+0x1d68>)
 800287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002880:	495f      	ldr	r1, [pc, #380]	; (8002a00 <menu+0x1d64>)
 8002882:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			}

			hafizaYaz = 1;
 8002886:	4a60      	ldr	r2, [pc, #384]	; (8002a08 <menu+0x1d6c>)
 8002888:	2301      	movs	r3, #1
 800288a:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 15) {
 800288c:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <menu+0x1d70>)
 800288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002892:	f1a2 010f 	sub.w	r1, r2, #15
 8002896:	430b      	orrs	r3, r1
 8002898:	f040 8093 	bne.w	80029c2 <menu+0x1d26>
		lcd_print(1, 1, tablaKapiAcSureText);
 800289c:	4a5c      	ldr	r2, [pc, #368]	; (8002a10 <menu+0x1d74>)
 800289e:	2101      	movs	r1, #1
 80028a0:	2001      	movs	r0, #1
 80028a2:	f006 feae 	bl	8009602 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80028a6:	4a5b      	ldr	r2, [pc, #364]	; (8002a14 <menu+0x1d78>)
 80028a8:	2101      	movs	r1, #1
 80028aa:	2002      	movs	r0, #2
 80028ac:	f006 fea9 	bl	8009602 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 80028b0:	4b59      	ldr	r3, [pc, #356]	; (8002a18 <menu+0x1d7c>)
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b6:	4613      	mov	r3, r2
 80028b8:	220a      	movs	r2, #10
 80028ba:	4958      	ldr	r1, [pc, #352]	; (8002a1c <menu+0x1d80>)
 80028bc:	4618      	mov	r0, r3
 80028be:	f00a fb99 	bl	800cff4 <itoa>
		lcd_print(2,16,snum);
 80028c2:	4a56      	ldr	r2, [pc, #344]	; (8002a1c <menu+0x1d80>)
 80028c4:	2110      	movs	r1, #16
 80028c6:	2002      	movs	r0, #2
 80028c8:	f006 fe9b 	bl	8009602 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80028cc:	2102      	movs	r1, #2
 80028ce:	484a      	ldr	r0, [pc, #296]	; (80029f8 <menu+0x1d5c>)
 80028d0:	f007 ffee 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d12a      	bne.n	8002930 <menu+0x1c94>
 80028da:	4b48      	ldr	r3, [pc, #288]	; (80029fc <menu+0x1d60>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	f083 0301 	eor.w	r3, r3, #1
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d023      	beq.n	8002930 <menu+0x1c94>
 80028e8:	4b4d      	ldr	r3, [pc, #308]	; (8002a20 <menu+0x1d84>)
 80028ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	d11e      	bne.n	8002930 <menu+0x1c94>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80028f2:	4b49      	ldr	r3, [pc, #292]	; (8002a18 <menu+0x1d7c>)
 80028f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f8:	1c51      	adds	r1, r2, #1
 80028fa:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80028fe:	f143 0300 	adc.w	r3, r3, #0
 8002902:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002906:	4b44      	ldr	r3, [pc, #272]	; (8002a18 <menu+0x1d7c>)
 8002908:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800290c:	e9c3 1200 	strd	r1, r2, [r3]

			if(kapiTablaAcSure > 5){
 8002910:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <menu+0x1d7c>)
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002916:	2a06      	cmp	r2, #6
 8002918:	f173 0300 	sbcs.w	r3, r3, #0
 800291c:	d306      	bcc.n	800292c <menu+0x1c90>
				kapiTablaAcSure = 0;
 800291e:	493e      	ldr	r1, [pc, #248]	; (8002a18 <menu+0x1d7c>)
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 800292c:	f001 fc02 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002930:	2104      	movs	r1, #4
 8002932:	4831      	ldr	r0, [pc, #196]	; (80029f8 <menu+0x1d5c>)
 8002934:	f007 ffbc 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002938:	4603      	mov	r3, r0
 800293a:	2b01      	cmp	r3, #1
 800293c:	d12a      	bne.n	8002994 <menu+0x1cf8>
 800293e:	4b2f      	ldr	r3, [pc, #188]	; (80029fc <menu+0x1d60>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	f083 0301 	eor.w	r3, r3, #1
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d023      	beq.n	8002994 <menu+0x1cf8>
 800294c:	4b34      	ldr	r3, [pc, #208]	; (8002a20 <menu+0x1d84>)
 800294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002952:	4313      	orrs	r3, r2
 8002954:	d11e      	bne.n	8002994 <menu+0x1cf8>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002956:	4b30      	ldr	r3, [pc, #192]	; (8002a18 <menu+0x1d7c>)
 8002958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295c:	1e51      	subs	r1, r2, #1
 800295e:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8002962:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002966:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800296a:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <menu+0x1d7c>)
 800296c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002970:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(kapiTablaAcSure > 6){
 8002974:	4b28      	ldr	r3, [pc, #160]	; (8002a18 <menu+0x1d7c>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	2a07      	cmp	r2, #7
 800297c:	f173 0300 	sbcs.w	r3, r3, #0
 8002980:	d306      	bcc.n	8002990 <menu+0x1cf4>
		   		kapiTablaAcSure = 5;
 8002982:	4925      	ldr	r1, [pc, #148]	; (8002a18 <menu+0x1d7c>)
 8002984:	f04f 0205 	mov.w	r2, #5
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	e9c1 2300 	strd	r2, r3, [r1]
		   	}

			bekle();
 8002990:	f001 fbd0 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002994:	2108      	movs	r1, #8
 8002996:	4818      	ldr	r0, [pc, #96]	; (80029f8 <menu+0x1d5c>)
 8002998:	f007 ff8a 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800299c:	4603      	mov	r3, r0
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d10f      	bne.n	80029c2 <menu+0x1d26>
 80029a2:	4b16      	ldr	r3, [pc, #88]	; (80029fc <menu+0x1d60>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	f083 0301 	eor.w	r3, r3, #1
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <menu+0x1d26>
			eepromData[13] = kapiTablaAcSure;
 80029b0:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <menu+0x1d7c>)
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	4912      	ldr	r1, [pc, #72]	; (8002a00 <menu+0x1d64>)
 80029b8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
			hafizaYaz = 1;
 80029bc:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <menu+0x1d6c>)
 80029be:	2301      	movs	r3, #1
 80029c0:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 16) {
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <menu+0x1d70>)
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f1a2 0110 	sub.w	r1, r2, #16
 80029cc:	430b      	orrs	r3, r1
 80029ce:	f040 80aa 	bne.w	8002b26 <menu+0x1e8a>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 80029d2:	4a14      	ldr	r2, [pc, #80]	; (8002a24 <menu+0x1d88>)
 80029d4:	2101      	movs	r1, #1
 80029d6:	2001      	movs	r0, #1
 80029d8:	f006 fe13 	bl	8009602 <lcd_print>

		if(yukariYavasLimit == 0) {
 80029dc:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <menu+0x1d8c>)
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	d125      	bne.n	8002a32 <menu+0x1d96>
			lcd_print(2, 1, pasifText);
 80029e6:	4a03      	ldr	r2, [pc, #12]	; (80029f4 <menu+0x1d58>)
 80029e8:	2101      	movs	r1, #1
 80029ea:	2002      	movs	r0, #2
 80029ec:	e01e      	b.n	8002a2c <menu+0x1d90>
 80029ee:	bf00      	nop
 80029f0:	20001120 	.word	0x20001120
 80029f4:	200013d0 	.word	0x200013d0
 80029f8:	40010800 	.word	0x40010800
 80029fc:	2000121b 	.word	0x2000121b
 8002a00:	20000d08 	.word	0x20000d08
 8002a04:	200010e8 	.word	0x200010e8
 8002a08:	20001218 	.word	0x20001218
 8002a0c:	200010b8 	.word	0x200010b8
 8002a10:	2000159c 	.word	0x2000159c
 8002a14:	200014fc 	.word	0x200014fc
 8002a18:	20001190 	.word	0x20001190
 8002a1c:	20001078 	.word	0x20001078
 8002a20:	20001110 	.word	0x20001110
 8002a24:	200015b0 	.word	0x200015b0
 8002a28:	20001128 	.word	0x20001128
 8002a2c:	f006 fde9 	bl	8009602 <lcd_print>
 8002a30:	e00a      	b.n	8002a48 <menu+0x1dac>
		} else if(yukariYavasLimit == 1) {
 8002a32:	4b4f      	ldr	r3, [pc, #316]	; (8002b70 <menu+0x1ed4>)
 8002a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a38:	1e51      	subs	r1, r2, #1
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	d104      	bne.n	8002a48 <menu+0x1dac>
			lcd_print(2, 1, aktifText);
 8002a3e:	4a4d      	ldr	r2, [pc, #308]	; (8002b74 <menu+0x1ed8>)
 8002a40:	2101      	movs	r1, #1
 8002a42:	2002      	movs	r0, #2
 8002a44:	f006 fddd 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a48:	2102      	movs	r1, #2
 8002a4a:	484b      	ldr	r0, [pc, #300]	; (8002b78 <menu+0x1edc>)
 8002a4c:	f007 ff30 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d125      	bne.n	8002aa2 <menu+0x1e06>
 8002a56:	4b49      	ldr	r3, [pc, #292]	; (8002b7c <menu+0x1ee0>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	f083 0301 	eor.w	r3, r3, #1
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01e      	beq.n	8002aa2 <menu+0x1e06>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002a64:	4b42      	ldr	r3, [pc, #264]	; (8002b70 <menu+0x1ed4>)
 8002a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6a:	1c51      	adds	r1, r2, #1
 8002a6c:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8002a70:	f143 0300 	adc.w	r3, r3, #0
 8002a74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002a78:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <menu+0x1ed4>)
 8002a7a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002a7e:	e9c3 1200 	strd	r1, r2, [r3]

			if(yukariYavasLimit > 1){
 8002a82:	4b3b      	ldr	r3, [pc, #236]	; (8002b70 <menu+0x1ed4>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	2a02      	cmp	r2, #2
 8002a8a:	f173 0300 	sbcs.w	r3, r3, #0
 8002a8e:	d306      	bcc.n	8002a9e <menu+0x1e02>
				yukariYavasLimit = 0;
 8002a90:	4937      	ldr	r1, [pc, #220]	; (8002b70 <menu+0x1ed4>)
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8002a9e:	f001 fb49 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aa2:	2104      	movs	r1, #4
 8002aa4:	4834      	ldr	r0, [pc, #208]	; (8002b78 <menu+0x1edc>)
 8002aa6:	f007 ff03 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d123      	bne.n	8002af8 <menu+0x1e5c>
 8002ab0:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <menu+0x1ee0>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	f083 0301 	eor.w	r3, r3, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01c      	beq.n	8002af8 <menu+0x1e5c>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002abe:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <menu+0x1ed4>)
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	1e51      	subs	r1, r2, #1
 8002ac6:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8002aca:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002ace:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ad2:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <menu+0x1ed4>)
 8002ad4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002ad8:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(yukariYavasLimit > 0){
 8002adc:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <menu+0x1ed4>)
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	d006      	beq.n	8002af4 <menu+0x1e58>
		   		yukariYavasLimit = 1;
 8002ae6:	4922      	ldr	r1, [pc, #136]	; (8002b70 <menu+0x1ed4>)
 8002ae8:	f04f 0201 	mov.w	r2, #1
 8002aec:	f04f 0300 	mov.w	r3, #0
 8002af0:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8002af4:	f001 fb1e 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002af8:	2108      	movs	r1, #8
 8002afa:	481f      	ldr	r0, [pc, #124]	; (8002b78 <menu+0x1edc>)
 8002afc:	f007 fed8 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d10f      	bne.n	8002b26 <menu+0x1e8a>
 8002b06:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <menu+0x1ee0>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	f083 0301 	eor.w	r3, r3, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <menu+0x1e8a>
			eepromData[14] = yukariYavasLimit;
 8002b14:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <menu+0x1ed4>)
 8002b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1a:	4919      	ldr	r1, [pc, #100]	; (8002b80 <menu+0x1ee4>)
 8002b1c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			hafizaYaz = 1;
 8002b20:	4a18      	ldr	r2, [pc, #96]	; (8002b84 <menu+0x1ee8>)
 8002b22:	2301      	movs	r3, #1
 8002b24:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 17) {
 8002b26:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <menu+0x1eec>)
 8002b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2c:	f1a2 0111 	sub.w	r1, r2, #17
 8002b30:	430b      	orrs	r3, r1
 8002b32:	f040 80da 	bne.w	8002cea <menu+0x204e>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002b36:	4a15      	ldr	r2, [pc, #84]	; (8002b8c <menu+0x1ef0>)
 8002b38:	2101      	movs	r1, #1
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	f006 fd61 	bl	8009602 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002b40:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <menu+0x1ef4>)
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	1e91      	subs	r1, r2, #2
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	d105      	bne.n	8002b58 <menu+0x1ebc>
			lcd_print(2, 1, devirmeAktifText);
 8002b4c:	4a11      	ldr	r2, [pc, #68]	; (8002b94 <menu+0x1ef8>)
 8002b4e:	2101      	movs	r1, #1
 8002b50:	2002      	movs	r0, #2
 8002b52:	f006 fd56 	bl	8009602 <lcd_print>
 8002b56:	e02b      	b.n	8002bb0 <menu+0x1f14>
		} else if(devirmeYuruyusSecim == 1) {
 8002b58:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <menu+0x1ef4>)
 8002b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5e:	1e51      	subs	r1, r2, #1
 8002b60:	430b      	orrs	r3, r1
 8002b62:	d11b      	bne.n	8002b9c <menu+0x1f00>
			lcd_print(2, 1, yuruyusAktifText);
 8002b64:	4a0c      	ldr	r2, [pc, #48]	; (8002b98 <menu+0x1efc>)
 8002b66:	2101      	movs	r1, #1
 8002b68:	2002      	movs	r0, #2
 8002b6a:	f006 fd4a 	bl	8009602 <lcd_print>
 8002b6e:	e01f      	b.n	8002bb0 <menu+0x1f14>
 8002b70:	20001128 	.word	0x20001128
 8002b74:	200013e4 	.word	0x200013e4
 8002b78:	40010800 	.word	0x40010800
 8002b7c:	2000121b 	.word	0x2000121b
 8002b80:	20000d08 	.word	0x20000d08
 8002b84:	20001218 	.word	0x20001218
 8002b88:	200010b8 	.word	0x200010b8
 8002b8c:	200015c4 	.word	0x200015c4
 8002b90:	20001130 	.word	0x20001130
 8002b94:	200015d8 	.word	0x200015d8
 8002b98:	200015ec 	.word	0x200015ec
		} else if(devirmeYuruyusSecim == 0) {
 8002b9c:	4b68      	ldr	r3, [pc, #416]	; (8002d40 <menu+0x20a4>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	d104      	bne.n	8002bb0 <menu+0x1f14>
			lcd_print(2, 1, pasifText);
 8002ba6:	4a67      	ldr	r2, [pc, #412]	; (8002d44 <menu+0x20a8>)
 8002ba8:	2101      	movs	r1, #1
 8002baa:	2002      	movs	r0, #2
 8002bac:	f006 fd29 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	4865      	ldr	r0, [pc, #404]	; (8002d48 <menu+0x20ac>)
 8002bb4:	f007 fe7c 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d125      	bne.n	8002c0a <menu+0x1f6e>
 8002bbe:	4b63      	ldr	r3, [pc, #396]	; (8002d4c <menu+0x20b0>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	f083 0301 	eor.w	r3, r3, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01e      	beq.n	8002c0a <menu+0x1f6e>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002bcc:	4b5c      	ldr	r3, [pc, #368]	; (8002d40 <menu+0x20a4>)
 8002bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd2:	1c51      	adds	r1, r2, #1
 8002bd4:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8002bd8:	f143 0300 	adc.w	r3, r3, #0
 8002bdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002be0:	4b57      	ldr	r3, [pc, #348]	; (8002d40 <menu+0x20a4>)
 8002be2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002be6:	e9c3 1200 	strd	r1, r2, [r3]

			if(devirmeYuruyusSecim > 2){
 8002bea:	4b55      	ldr	r3, [pc, #340]	; (8002d40 <menu+0x20a4>)
 8002bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf0:	2a03      	cmp	r2, #3
 8002bf2:	f173 0300 	sbcs.w	r3, r3, #0
 8002bf6:	d306      	bcc.n	8002c06 <menu+0x1f6a>
				devirmeYuruyusSecim = 0;
 8002bf8:	4951      	ldr	r1, [pc, #324]	; (8002d40 <menu+0x20a4>)
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8002c06:	f001 fa95 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c0a:	2104      	movs	r1, #4
 8002c0c:	484e      	ldr	r0, [pc, #312]	; (8002d48 <menu+0x20ac>)
 8002c0e:	f007 fe4f 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d125      	bne.n	8002c64 <menu+0x1fc8>
 8002c18:	4b4c      	ldr	r3, [pc, #304]	; (8002d4c <menu+0x20b0>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	f083 0301 	eor.w	r3, r3, #1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01e      	beq.n	8002c64 <menu+0x1fc8>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002c26:	4b46      	ldr	r3, [pc, #280]	; (8002d40 <menu+0x20a4>)
 8002c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2c:	1e51      	subs	r1, r2, #1
 8002c2e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002c32:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002c36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002c3a:	4b41      	ldr	r3, [pc, #260]	; (8002d40 <menu+0x20a4>)
 8002c3c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002c40:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(devirmeYuruyusSecim>3){
 8002c44:	4b3e      	ldr	r3, [pc, #248]	; (8002d40 <menu+0x20a4>)
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	2a04      	cmp	r2, #4
 8002c4c:	f173 0300 	sbcs.w	r3, r3, #0
 8002c50:	d306      	bcc.n	8002c60 <menu+0x1fc4>
		   		devirmeYuruyusSecim = 2;
 8002c52:	493b      	ldr	r1, [pc, #236]	; (8002d40 <menu+0x20a4>)
 8002c54:	f04f 0202 	mov.w	r2, #2
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8002c60:	f001 fa68 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c64:	2108      	movs	r1, #8
 8002c66:	4838      	ldr	r0, [pc, #224]	; (8002d48 <menu+0x20ac>)
 8002c68:	f007 fe22 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d13b      	bne.n	8002cea <menu+0x204e>
 8002c72:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <menu+0x20b0>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	f083 0301 	eor.w	r3, r3, #1
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d034      	beq.n	8002cea <menu+0x204e>
			eepromData[15] = devirmeYuruyusSecim;
 8002c80:	4b2f      	ldr	r3, [pc, #188]	; (8002d40 <menu+0x20a4>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	4932      	ldr	r1, [pc, #200]	; (8002d50 <menu+0x20b4>)
 8002c88:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002c8c:	4b2c      	ldr	r3, [pc, #176]	; (8002d40 <menu+0x20a4>)
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	1e91      	subs	r1, r2, #2
 8002c94:	430b      	orrs	r3, r1
 8002c96:	d005      	beq.n	8002ca4 <menu+0x2008>
 8002c98:	4b29      	ldr	r3, [pc, #164]	; (8002d40 <menu+0x20a4>)
 8002c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9e:	1e51      	subs	r1, r2, #1
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	d10c      	bne.n	8002cbe <menu+0x2022>
				calismaSekli = 0;
 8002ca4:	492b      	ldr	r1, [pc, #172]	; (8002d54 <menu+0x20b8>)
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[1] = calismaSekli;
 8002cb2:	4b28      	ldr	r3, [pc, #160]	; (8002d54 <menu+0x20b8>)
 8002cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb8:	4925      	ldr	r1, [pc, #148]	; (8002d50 <menu+0x20b4>)
 8002cba:	e9c1 2302 	strd	r2, r3, [r1, #8]
			}

			if(devirmeYuruyusSecim == 1) {
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <menu+0x20a4>)
 8002cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc4:	1e51      	subs	r1, r2, #1
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	d10c      	bne.n	8002ce4 <menu+0x2048>
				devirmeSilindirTipi = 1;
 8002cca:	4923      	ldr	r1, [pc, #140]	; (8002d58 <menu+0x20bc>)
 8002ccc:	f04f 0201 	mov.w	r2, #1
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[18] = devirmeSilindirTipi;
 8002cd8:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <menu+0x20bc>)
 8002cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cde:	491c      	ldr	r1, [pc, #112]	; (8002d50 <menu+0x20b4>)
 8002ce0:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
			}
			hafizaYaz = 1;
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <menu+0x20c0>)
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 18) {
 8002cea:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <menu+0x20c4>)
 8002cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf0:	f1a2 0112 	sub.w	r1, r2, #18
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	f040 80b5 	bne.w	8002e64 <menu+0x21c8>
		if(devirmeYuruyusSecim == 2) {
 8002cfa:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <menu+0x20a4>)
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	1e91      	subs	r1, r2, #2
 8002d02:	430b      	orrs	r3, r1
 8002d04:	d105      	bne.n	8002d12 <menu+0x2076>
			lcd_print(1, 1, devirmeYukariText);
 8002d06:	4a17      	ldr	r2, [pc, #92]	; (8002d64 <menu+0x20c8>)
 8002d08:	2101      	movs	r1, #1
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f006 fc79 	bl	8009602 <lcd_print>
 8002d10:	e00a      	b.n	8002d28 <menu+0x208c>
		} else if(devirmeYuruyusSecim == 1) {
 8002d12:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <menu+0x20a4>)
 8002d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d18:	1e51      	subs	r1, r2, #1
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	d104      	bne.n	8002d28 <menu+0x208c>
			lcd_print(1, 1, yuruyusIleriText);
 8002d1e:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <menu+0x20cc>)
 8002d20:	2101      	movs	r1, #1
 8002d22:	2001      	movs	r0, #1
 8002d24:	f006 fc6d 	bl	8009602 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002d28:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <menu+0x20d0>)
 8002d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	d11e      	bne.n	8002d70 <menu+0x20d4>
			lcd_print(2, 1, pasifText);
 8002d32:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <menu+0x20a8>)
 8002d34:	2101      	movs	r1, #1
 8002d36:	2002      	movs	r0, #2
 8002d38:	f006 fc63 	bl	8009602 <lcd_print>
 8002d3c:	e023      	b.n	8002d86 <menu+0x20ea>
 8002d3e:	bf00      	nop
 8002d40:	20001130 	.word	0x20001130
 8002d44:	200013d0 	.word	0x200013d0
 8002d48:	40010800 	.word	0x40010800
 8002d4c:	2000121b 	.word	0x2000121b
 8002d50:	20000d08 	.word	0x20000d08
 8002d54:	200010c0 	.word	0x200010c0
 8002d58:	20001148 	.word	0x20001148
 8002d5c:	20001218 	.word	0x20001218
 8002d60:	200010b8 	.word	0x200010b8
 8002d64:	20001600 	.word	0x20001600
 8002d68:	20001614 	.word	0x20001614
 8002d6c:	20001138 	.word	0x20001138
		} else if(devirmeYukariIleriLimit == 1){
 8002d70:	4b98      	ldr	r3, [pc, #608]	; (8002fd4 <menu+0x2338>)
 8002d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d76:	1e51      	subs	r1, r2, #1
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	d104      	bne.n	8002d86 <menu+0x20ea>
			lcd_print(2, 1, aktifText);
 8002d7c:	4a96      	ldr	r2, [pc, #600]	; (8002fd8 <menu+0x233c>)
 8002d7e:	2101      	movs	r1, #1
 8002d80:	2002      	movs	r0, #2
 8002d82:	f006 fc3e 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d86:	2102      	movs	r1, #2
 8002d88:	4894      	ldr	r0, [pc, #592]	; (8002fdc <menu+0x2340>)
 8002d8a:	f007 fd91 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d125      	bne.n	8002de0 <menu+0x2144>
 8002d94:	4b92      	ldr	r3, [pc, #584]	; (8002fe0 <menu+0x2344>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	f083 0301 	eor.w	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d01e      	beq.n	8002de0 <menu+0x2144>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002da2:	4b8c      	ldr	r3, [pc, #560]	; (8002fd4 <menu+0x2338>)
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	1c51      	adds	r1, r2, #1
 8002daa:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8002dae:	f143 0300 	adc.w	r3, r3, #0
 8002db2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002db6:	4b87      	ldr	r3, [pc, #540]	; (8002fd4 <menu+0x2338>)
 8002db8:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002dbc:	e9c3 1200 	strd	r1, r2, [r3]

			if(devirmeYukariIleriLimit > 1){
 8002dc0:	4b84      	ldr	r3, [pc, #528]	; (8002fd4 <menu+0x2338>)
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	2a02      	cmp	r2, #2
 8002dc8:	f173 0300 	sbcs.w	r3, r3, #0
 8002dcc:	d306      	bcc.n	8002ddc <menu+0x2140>
				devirmeYukariIleriLimit = 0;
 8002dce:	4981      	ldr	r1, [pc, #516]	; (8002fd4 <menu+0x2338>)
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8002ddc:	f001 f9aa 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002de0:	2104      	movs	r1, #4
 8002de2:	487e      	ldr	r0, [pc, #504]	; (8002fdc <menu+0x2340>)
 8002de4:	f007 fd64 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d123      	bne.n	8002e36 <menu+0x219a>
 8002dee:	4b7c      	ldr	r3, [pc, #496]	; (8002fe0 <menu+0x2344>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	f083 0301 	eor.w	r3, r3, #1
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01c      	beq.n	8002e36 <menu+0x219a>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002dfc:	4b75      	ldr	r3, [pc, #468]	; (8002fd4 <menu+0x2338>)
 8002dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e02:	1e51      	subs	r1, r2, #1
 8002e04:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8002e08:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002e0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e10:	4b70      	ldr	r3, [pc, #448]	; (8002fd4 <menu+0x2338>)
 8002e12:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e16:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(devirmeYukariIleriLimit > 0){
 8002e1a:	4b6e      	ldr	r3, [pc, #440]	; (8002fd4 <menu+0x2338>)
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	d006      	beq.n	8002e32 <menu+0x2196>
		   		devirmeYukariIleriLimit = 1;
 8002e24:	496b      	ldr	r1, [pc, #428]	; (8002fd4 <menu+0x2338>)
 8002e26:	f04f 0201 	mov.w	r2, #1
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8002e32:	f001 f97f 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e36:	2108      	movs	r1, #8
 8002e38:	4868      	ldr	r0, [pc, #416]	; (8002fdc <menu+0x2340>)
 8002e3a:	f007 fd39 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d10f      	bne.n	8002e64 <menu+0x21c8>
 8002e44:	4b66      	ldr	r3, [pc, #408]	; (8002fe0 <menu+0x2344>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	f083 0301 	eor.w	r3, r3, #1
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <menu+0x21c8>
			eepromData[16] = devirmeYukariIleriLimit;
 8002e52:	4b60      	ldr	r3, [pc, #384]	; (8002fd4 <menu+0x2338>)
 8002e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e58:	4962      	ldr	r1, [pc, #392]	; (8002fe4 <menu+0x2348>)
 8002e5a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			hafizaYaz = 1;
 8002e5e:	4a62      	ldr	r2, [pc, #392]	; (8002fe8 <menu+0x234c>)
 8002e60:	2301      	movs	r3, #1
 8002e62:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 19) {
 8002e64:	4b61      	ldr	r3, [pc, #388]	; (8002fec <menu+0x2350>)
 8002e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6a:	f1a2 0113 	sub.w	r1, r2, #19
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	f040 809c 	bne.w	8002fac <menu+0x2310>
		if(devirmeYuruyusSecim == 2) {
 8002e74:	4b5e      	ldr	r3, [pc, #376]	; (8002ff0 <menu+0x2354>)
 8002e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7a:	1e91      	subs	r1, r2, #2
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	d105      	bne.n	8002e8c <menu+0x21f0>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002e80:	4a5c      	ldr	r2, [pc, #368]	; (8002ff4 <menu+0x2358>)
 8002e82:	2101      	movs	r1, #1
 8002e84:	2001      	movs	r0, #1
 8002e86:	f006 fbbc 	bl	8009602 <lcd_print>
 8002e8a:	e00a      	b.n	8002ea2 <menu+0x2206>
		} else if(devirmeYuruyusSecim == 1) {
 8002e8c:	4b58      	ldr	r3, [pc, #352]	; (8002ff0 <menu+0x2354>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	1e51      	subs	r1, r2, #1
 8002e94:	430b      	orrs	r3, r1
 8002e96:	d104      	bne.n	8002ea2 <menu+0x2206>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002e98:	4a57      	ldr	r2, [pc, #348]	; (8002ff8 <menu+0x235c>)
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	f006 fbb0 	bl	8009602 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002ea2:	4b56      	ldr	r3, [pc, #344]	; (8002ffc <menu+0x2360>)
 8002ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	d105      	bne.n	8002eb8 <menu+0x221c>
			lcd_print(2, 1, pasifText);
 8002eac:	4a54      	ldr	r2, [pc, #336]	; (8003000 <menu+0x2364>)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	2002      	movs	r0, #2
 8002eb2:	f006 fba6 	bl	8009602 <lcd_print>
 8002eb6:	e00a      	b.n	8002ece <menu+0x2232>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002eb8:	4b50      	ldr	r3, [pc, #320]	; (8002ffc <menu+0x2360>)
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	1e51      	subs	r1, r2, #1
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	d104      	bne.n	8002ece <menu+0x2232>
			lcd_print(2, 1, aktifText);
 8002ec4:	4a44      	ldr	r2, [pc, #272]	; (8002fd8 <menu+0x233c>)
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	2002      	movs	r0, #2
 8002eca:	f006 fb9a 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ece:	2102      	movs	r1, #2
 8002ed0:	4842      	ldr	r0, [pc, #264]	; (8002fdc <menu+0x2340>)
 8002ed2:	f007 fced 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d125      	bne.n	8002f28 <menu+0x228c>
 8002edc:	4b40      	ldr	r3, [pc, #256]	; (8002fe0 <menu+0x2344>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	f083 0301 	eor.w	r3, r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01e      	beq.n	8002f28 <menu+0x228c>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002eea:	4b44      	ldr	r3, [pc, #272]	; (8002ffc <menu+0x2360>)
 8002eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef0:	1c51      	adds	r1, r2, #1
 8002ef2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8002ef6:	f143 0300 	adc.w	r3, r3, #0
 8002efa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002efe:	4b3f      	ldr	r3, [pc, #252]	; (8002ffc <menu+0x2360>)
 8002f00:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002f04:	e9c3 1200 	strd	r1, r2, [r3]

			if(devirmeAsagiGeriLimit > 1) {
 8002f08:	4b3c      	ldr	r3, [pc, #240]	; (8002ffc <menu+0x2360>)
 8002f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0e:	2a02      	cmp	r2, #2
 8002f10:	f173 0300 	sbcs.w	r3, r3, #0
 8002f14:	d306      	bcc.n	8002f24 <menu+0x2288>
				devirmeAsagiGeriLimit = 0;
 8002f16:	4939      	ldr	r1, [pc, #228]	; (8002ffc <menu+0x2360>)
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8002f24:	f001 f906 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f28:	2104      	movs	r1, #4
 8002f2a:	482c      	ldr	r0, [pc, #176]	; (8002fdc <menu+0x2340>)
 8002f2c:	f007 fcc0 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d123      	bne.n	8002f7e <menu+0x22e2>
 8002f36:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <menu+0x2344>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	f083 0301 	eor.w	r3, r3, #1
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01c      	beq.n	8002f7e <menu+0x22e2>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002f44:	4b2d      	ldr	r3, [pc, #180]	; (8002ffc <menu+0x2360>)
 8002f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4a:	1e51      	subs	r1, r2, #1
 8002f4c:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8002f50:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002f54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f58:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <menu+0x2360>)
 8002f5a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002f5e:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002f62:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <menu+0x2360>)
 8002f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	d006      	beq.n	8002f7a <menu+0x22de>
		   		devirmeAsagiGeriLimit = 1;
 8002f6c:	4923      	ldr	r1, [pc, #140]	; (8002ffc <menu+0x2360>)
 8002f6e:	f04f 0201 	mov.w	r2, #1
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8002f7a:	f001 f8db 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f7e:	2108      	movs	r1, #8
 8002f80:	4816      	ldr	r0, [pc, #88]	; (8002fdc <menu+0x2340>)
 8002f82:	f007 fc95 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d10f      	bne.n	8002fac <menu+0x2310>
 8002f8c:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <menu+0x2344>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	f083 0301 	eor.w	r3, r3, #1
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <menu+0x2310>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002f9a:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <menu+0x2360>)
 8002f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa0:	4910      	ldr	r1, [pc, #64]	; (8002fe4 <menu+0x2348>)
 8002fa2:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			hafizaYaz = 1;
 8002fa6:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <menu+0x234c>)
 8002fa8:	2301      	movs	r3, #1
 8002faa:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 20){
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <menu+0x2350>)
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	f1a2 0114 	sub.w	r1, r2, #20
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	f040 80c2 	bne.w	8003140 <menu+0x24a4>
		if(devirmeYuruyusSecim == 1) {
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <menu+0x2354>)
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	1e51      	subs	r1, r2, #1
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	d11f      	bne.n	8003008 <menu+0x236c>
			lcd_print(1, 1, yuruyusSecildiText);
 8002fc8:	4a0e      	ldr	r2, [pc, #56]	; (8003004 <menu+0x2368>)
 8002fca:	2101      	movs	r1, #1
 8002fcc:	2001      	movs	r0, #1
 8002fce:	f006 fb18 	bl	8009602 <lcd_print>
 8002fd2:	e024      	b.n	800301e <menu+0x2382>
 8002fd4:	20001138 	.word	0x20001138
 8002fd8:	200013e4 	.word	0x200013e4
 8002fdc:	40010800 	.word	0x40010800
 8002fe0:	2000121b 	.word	0x2000121b
 8002fe4:	20000d08 	.word	0x20000d08
 8002fe8:	20001218 	.word	0x20001218
 8002fec:	200010b8 	.word	0x200010b8
 8002ff0:	20001130 	.word	0x20001130
 8002ff4:	20001628 	.word	0x20001628
 8002ff8:	2000163c 	.word	0x2000163c
 8002ffc:	20001140 	.word	0x20001140
 8003000:	200013d0 	.word	0x200013d0
 8003004:	20001650 	.word	0x20001650
		} else if(devirmeYuruyusSecim == 2) {
 8003008:	4b59      	ldr	r3, [pc, #356]	; (8003170 <menu+0x24d4>)
 800300a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300e:	1e91      	subs	r1, r2, #2
 8003010:	430b      	orrs	r3, r1
 8003012:	d104      	bne.n	800301e <menu+0x2382>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8003014:	4a57      	ldr	r2, [pc, #348]	; (8003174 <menu+0x24d8>)
 8003016:	2101      	movs	r1, #1
 8003018:	2001      	movs	r0, #1
 800301a:	f006 faf2 	bl	8009602 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 800301e:	4b56      	ldr	r3, [pc, #344]	; (8003178 <menu+0x24dc>)
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	4313      	orrs	r3, r2
 8003026:	d105      	bne.n	8003034 <menu+0x2398>
			lcd_print(2, 1, tekTesirText);
 8003028:	4a54      	ldr	r2, [pc, #336]	; (800317c <menu+0x24e0>)
 800302a:	2101      	movs	r1, #1
 800302c:	2002      	movs	r0, #2
 800302e:	f006 fae8 	bl	8009602 <lcd_print>
 8003032:	e00a      	b.n	800304a <menu+0x23ae>
		} else if(devirmeSilindirTipi == 1) {
 8003034:	4b50      	ldr	r3, [pc, #320]	; (8003178 <menu+0x24dc>)
 8003036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303a:	1e51      	subs	r1, r2, #1
 800303c:	430b      	orrs	r3, r1
 800303e:	d104      	bne.n	800304a <menu+0x23ae>
			lcd_print(2, 1, ciftTesirText);
 8003040:	4a4f      	ldr	r2, [pc, #316]	; (8003180 <menu+0x24e4>)
 8003042:	2101      	movs	r1, #1
 8003044:	2002      	movs	r0, #2
 8003046:	f006 fadc 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800304a:	2102      	movs	r1, #2
 800304c:	484d      	ldr	r0, [pc, #308]	; (8003184 <menu+0x24e8>)
 800304e:	f007 fc2f 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003052:	4603      	mov	r3, r0
 8003054:	2b01      	cmp	r3, #1
 8003056:	d12b      	bne.n	80030b0 <menu+0x2414>
 8003058:	4b4b      	ldr	r3, [pc, #300]	; (8003188 <menu+0x24ec>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	f083 0301 	eor.w	r3, r3, #1
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d024      	beq.n	80030b0 <menu+0x2414>
 8003066:	4b42      	ldr	r3, [pc, #264]	; (8003170 <menu+0x24d4>)
 8003068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306c:	1e91      	subs	r1, r2, #2
 800306e:	430b      	orrs	r3, r1
 8003070:	d11e      	bne.n	80030b0 <menu+0x2414>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003072:	4b41      	ldr	r3, [pc, #260]	; (8003178 <menu+0x24dc>)
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	1c51      	adds	r1, r2, #1
 800307a:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800307e:	f143 0300 	adc.w	r3, r3, #0
 8003082:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003086:	4b3c      	ldr	r3, [pc, #240]	; (8003178 <menu+0x24dc>)
 8003088:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800308c:	e9c3 1200 	strd	r1, r2, [r3]

			if(devirmeSilindirTipi > 1) {
 8003090:	4b39      	ldr	r3, [pc, #228]	; (8003178 <menu+0x24dc>)
 8003092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003096:	2a02      	cmp	r2, #2
 8003098:	f173 0300 	sbcs.w	r3, r3, #0
 800309c:	d306      	bcc.n	80030ac <menu+0x2410>
				devirmeSilindirTipi = 0;
 800309e:	4936      	ldr	r1, [pc, #216]	; (8003178 <menu+0x24dc>)
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 80030ac:	f001 f842 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80030b0:	2104      	movs	r1, #4
 80030b2:	4834      	ldr	r0, [pc, #208]	; (8003184 <menu+0x24e8>)
 80030b4:	f007 fbfc 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d129      	bne.n	8003112 <menu+0x2476>
 80030be:	4b32      	ldr	r3, [pc, #200]	; (8003188 <menu+0x24ec>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	f083 0301 	eor.w	r3, r3, #1
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d022      	beq.n	8003112 <menu+0x2476>
 80030cc:	4b28      	ldr	r3, [pc, #160]	; (8003170 <menu+0x24d4>)
 80030ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d2:	1e91      	subs	r1, r2, #2
 80030d4:	430b      	orrs	r3, r1
 80030d6:	d11c      	bne.n	8003112 <menu+0x2476>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80030d8:	4b27      	ldr	r3, [pc, #156]	; (8003178 <menu+0x24dc>)
 80030da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030de:	1e51      	subs	r1, r2, #1
 80030e0:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80030e4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80030e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80030ec:	4b22      	ldr	r3, [pc, #136]	; (8003178 <menu+0x24dc>)
 80030ee:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80030f2:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(devirmeSilindirTipi > 0) {
 80030f6:	4b20      	ldr	r3, [pc, #128]	; (8003178 <menu+0x24dc>)
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	d006      	beq.n	800310e <menu+0x2472>
		   		devirmeSilindirTipi = 1;
 8003100:	491d      	ldr	r1, [pc, #116]	; (8003178 <menu+0x24dc>)
 8003102:	f04f 0201 	mov.w	r2, #1
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 800310e:	f001 f811 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003112:	2108      	movs	r1, #8
 8003114:	481b      	ldr	r0, [pc, #108]	; (8003184 <menu+0x24e8>)
 8003116:	f007 fbcb 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800311a:	4603      	mov	r3, r0
 800311c:	2b01      	cmp	r3, #1
 800311e:	d10f      	bne.n	8003140 <menu+0x24a4>
 8003120:	4b19      	ldr	r3, [pc, #100]	; (8003188 <menu+0x24ec>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	f083 0301 	eor.w	r3, r3, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <menu+0x24a4>
			eepromData[18] = devirmeSilindirTipi;
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <menu+0x24dc>)
 8003130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003134:	4915      	ldr	r1, [pc, #84]	; (800318c <menu+0x24f0>)
 8003136:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
			hafizaYaz = 1;
 800313a:	4a15      	ldr	r2, [pc, #84]	; (8003190 <menu+0x24f4>)
 800313c:	2301      	movs	r3, #1
 800313e:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 21) {
 8003140:	4b14      	ldr	r3, [pc, #80]	; (8003194 <menu+0x24f8>)
 8003142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003146:	f1a2 0115 	sub.w	r1, r2, #21
 800314a:	430b      	orrs	r3, r1
 800314c:	f040 80b5 	bne.w	80032ba <menu+0x261e>
		lcd_print(1, 1, platformSilindirTipiText);
 8003150:	4a11      	ldr	r2, [pc, #68]	; (8003198 <menu+0x24fc>)
 8003152:	2101      	movs	r1, #1
 8003154:	2001      	movs	r0, #1
 8003156:	f006 fa54 	bl	8009602 <lcd_print>

		if(platformSilindirTipi == 0) {
 800315a:	4b10      	ldr	r3, [pc, #64]	; (800319c <menu+0x2500>)
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	4313      	orrs	r3, r2
 8003162:	d11d      	bne.n	80031a0 <menu+0x2504>
			lcd_print(2, 1, tekTesirText);
 8003164:	4a05      	ldr	r2, [pc, #20]	; (800317c <menu+0x24e0>)
 8003166:	2101      	movs	r1, #1
 8003168:	2002      	movs	r0, #2
 800316a:	f006 fa4a 	bl	8009602 <lcd_print>
 800316e:	e022      	b.n	80031b6 <menu+0x251a>
 8003170:	20001130 	.word	0x20001130
 8003174:	20001664 	.word	0x20001664
 8003178:	20001148 	.word	0x20001148
 800317c:	20001678 	.word	0x20001678
 8003180:	2000168c 	.word	0x2000168c
 8003184:	40010800 	.word	0x40010800
 8003188:	2000121b 	.word	0x2000121b
 800318c:	20000d08 	.word	0x20000d08
 8003190:	20001218 	.word	0x20001218
 8003194:	200010b8 	.word	0x200010b8
 8003198:	200016a0 	.word	0x200016a0
 800319c:	20001150 	.word	0x20001150
		} else if(platformSilindirTipi == 1) {
 80031a0:	4ba6      	ldr	r3, [pc, #664]	; (800343c <menu+0x27a0>)
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	1e51      	subs	r1, r2, #1
 80031a8:	430b      	orrs	r3, r1
 80031aa:	d104      	bne.n	80031b6 <menu+0x251a>
			lcd_print(2, 1, ciftTesirText);
 80031ac:	4aa4      	ldr	r2, [pc, #656]	; (8003440 <menu+0x27a4>)
 80031ae:	2101      	movs	r1, #1
 80031b0:	2002      	movs	r0, #2
 80031b2:	f006 fa26 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031b6:	2102      	movs	r1, #2
 80031b8:	48a2      	ldr	r0, [pc, #648]	; (8003444 <menu+0x27a8>)
 80031ba:	f007 fb79 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d125      	bne.n	8003210 <menu+0x2574>
 80031c4:	4ba0      	ldr	r3, [pc, #640]	; (8003448 <menu+0x27ac>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	f083 0301 	eor.w	r3, r3, #1
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d01e      	beq.n	8003210 <menu+0x2574>
			platformSilindirTipi = platformSilindirTipi + 1;
 80031d2:	4b9a      	ldr	r3, [pc, #616]	; (800343c <menu+0x27a0>)
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	1c51      	adds	r1, r2, #1
 80031da:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80031de:	f143 0300 	adc.w	r3, r3, #0
 80031e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031e6:	4b95      	ldr	r3, [pc, #596]	; (800343c <menu+0x27a0>)
 80031e8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80031ec:	e9c3 1200 	strd	r1, r2, [r3]

			if(platformSilindirTipi > 1) {
 80031f0:	4b92      	ldr	r3, [pc, #584]	; (800343c <menu+0x27a0>)
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	2a02      	cmp	r2, #2
 80031f8:	f173 0300 	sbcs.w	r3, r3, #0
 80031fc:	d306      	bcc.n	800320c <menu+0x2570>
				platformSilindirTipi = 0;
 80031fe:	498f      	ldr	r1, [pc, #572]	; (800343c <menu+0x27a0>)
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 800320c:	f000 ff92 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003210:	2104      	movs	r1, #4
 8003212:	488c      	ldr	r0, [pc, #560]	; (8003444 <menu+0x27a8>)
 8003214:	f007 fb4c 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003218:	4603      	mov	r3, r0
 800321a:	2b01      	cmp	r3, #1
 800321c:	d123      	bne.n	8003266 <menu+0x25ca>
 800321e:	4b8a      	ldr	r3, [pc, #552]	; (8003448 <menu+0x27ac>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	f083 0301 	eor.w	r3, r3, #1
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01c      	beq.n	8003266 <menu+0x25ca>
			platformSilindirTipi = platformSilindirTipi - 1;
 800322c:	4b83      	ldr	r3, [pc, #524]	; (800343c <menu+0x27a0>)
 800322e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003232:	1e51      	subs	r1, r2, #1
 8003234:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8003238:	f143 33ff 	adc.w	r3, r3, #4294967295
 800323c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003240:	4b7e      	ldr	r3, [pc, #504]	; (800343c <menu+0x27a0>)
 8003242:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003246:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(platformSilindirTipi > 0) {
 800324a:	4b7c      	ldr	r3, [pc, #496]	; (800343c <menu+0x27a0>)
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	4313      	orrs	r3, r2
 8003252:	d006      	beq.n	8003262 <menu+0x25c6>
		   		platformSilindirTipi = 1;
 8003254:	4979      	ldr	r1, [pc, #484]	; (800343c <menu+0x27a0>)
 8003256:	f04f 0201 	mov.w	r2, #1
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8003262:	f000 ff67 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003266:	2108      	movs	r1, #8
 8003268:	4876      	ldr	r0, [pc, #472]	; (8003444 <menu+0x27a8>)
 800326a:	f007 fb21 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800326e:	4603      	mov	r3, r0
 8003270:	2b01      	cmp	r3, #1
 8003272:	d122      	bne.n	80032ba <menu+0x261e>
 8003274:	4b74      	ldr	r3, [pc, #464]	; (8003448 <menu+0x27ac>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	f083 0301 	eor.w	r3, r3, #1
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01b      	beq.n	80032ba <menu+0x261e>
			eepromData[19] = platformSilindirTipi;
 8003282:	4b6e      	ldr	r3, [pc, #440]	; (800343c <menu+0x27a0>)
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	4970      	ldr	r1, [pc, #448]	; (800344c <menu+0x27b0>)
 800328a:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

			if(platformSilindirTipi == 1) {
 800328e:	4b6b      	ldr	r3, [pc, #428]	; (800343c <menu+0x27a0>)
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	1e51      	subs	r1, r2, #1
 8003296:	430b      	orrs	r3, r1
 8003298:	d10c      	bne.n	80032b4 <menu+0x2618>
				altLimit = 1;
 800329a:	496d      	ldr	r1, [pc, #436]	; (8003450 <menu+0x27b4>)
 800329c:	f04f 0201 	mov.w	r2, #1
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[5] = altLimit;
 80032a8:	4b69      	ldr	r3, [pc, #420]	; (8003450 <menu+0x27b4>)
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	4967      	ldr	r1, [pc, #412]	; (800344c <menu+0x27b0>)
 80032b0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			}
			hafizaYaz = 1;
 80032b4:	4a67      	ldr	r2, [pc, #412]	; (8003454 <menu+0x27b8>)
 80032b6:	2301      	movs	r3, #1
 80032b8:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 22) {
 80032ba:	4b67      	ldr	r3, [pc, #412]	; (8003458 <menu+0x27bc>)
 80032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c0:	f1a2 0116 	sub.w	r1, r2, #22
 80032c4:	430b      	orrs	r3, r1
 80032c6:	f040 8089 	bne.w	80033dc <menu+0x2740>
		lcd_print(1, 1, yukariValfSureText);
 80032ca:	4a64      	ldr	r2, [pc, #400]	; (800345c <menu+0x27c0>)
 80032cc:	2101      	movs	r1, #1
 80032ce:	2001      	movs	r0, #1
 80032d0:	f006 f997 	bl	8009602 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80032d4:	4a62      	ldr	r2, [pc, #392]	; (8003460 <menu+0x27c4>)
 80032d6:	2101      	movs	r1, #1
 80032d8:	2002      	movs	r0, #2
 80032da:	f006 f992 	bl	8009602 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 80032de:	4b61      	ldr	r3, [pc, #388]	; (8003464 <menu+0x27c8>)
 80032e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e4:	4613      	mov	r3, r2
 80032e6:	220a      	movs	r2, #10
 80032e8:	495f      	ldr	r1, [pc, #380]	; (8003468 <menu+0x27cc>)
 80032ea:	4618      	mov	r0, r3
 80032ec:	f009 fe82 	bl	800cff4 <itoa>
		lcd_print(2,16,snum);
 80032f0:	4a5d      	ldr	r2, [pc, #372]	; (8003468 <menu+0x27cc>)
 80032f2:	2110      	movs	r1, #16
 80032f4:	2002      	movs	r0, #2
 80032f6:	f006 f984 	bl	8009602 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032fa:	2102      	movs	r1, #2
 80032fc:	4851      	ldr	r0, [pc, #324]	; (8003444 <menu+0x27a8>)
 80032fe:	f007 fad7 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003302:	4603      	mov	r3, r0
 8003304:	2b01      	cmp	r3, #1
 8003306:	d125      	bne.n	8003354 <menu+0x26b8>
 8003308:	4b4f      	ldr	r3, [pc, #316]	; (8003448 <menu+0x27ac>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	f083 0301 	eor.w	r3, r3, #1
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d01e      	beq.n	8003354 <menu+0x26b8>
			yukariValfTmr = yukariValfTmr + 1;
 8003316:	4b53      	ldr	r3, [pc, #332]	; (8003464 <menu+0x27c8>)
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	1c51      	adds	r1, r2, #1
 800331e:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003322:	f143 0300 	adc.w	r3, r3, #0
 8003326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800332a:	4b4e      	ldr	r3, [pc, #312]	; (8003464 <menu+0x27c8>)
 800332c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003330:	e9c3 1200 	strd	r1, r2, [r3]

			if(yukariValfTmr > 5) {
 8003334:	4b4b      	ldr	r3, [pc, #300]	; (8003464 <menu+0x27c8>)
 8003336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333a:	2a06      	cmp	r2, #6
 800333c:	f173 0300 	sbcs.w	r3, r3, #0
 8003340:	d306      	bcc.n	8003350 <menu+0x26b4>
				yukariValfTmr = 0;
 8003342:	4948      	ldr	r1, [pc, #288]	; (8003464 <menu+0x27c8>)
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8003350:	f000 fef0 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003354:	2104      	movs	r1, #4
 8003356:	483b      	ldr	r0, [pc, #236]	; (8003444 <menu+0x27a8>)
 8003358:	f007 faaa 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800335c:	4603      	mov	r3, r0
 800335e:	2b01      	cmp	r3, #1
 8003360:	d125      	bne.n	80033ae <menu+0x2712>
 8003362:	4b39      	ldr	r3, [pc, #228]	; (8003448 <menu+0x27ac>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	f083 0301 	eor.w	r3, r3, #1
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01e      	beq.n	80033ae <menu+0x2712>
			yukariValfTmr = yukariValfTmr - 1;
 8003370:	4b3c      	ldr	r3, [pc, #240]	; (8003464 <menu+0x27c8>)
 8003372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003376:	1e51      	subs	r1, r2, #1
 8003378:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800337c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8003380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003384:	4b37      	ldr	r3, [pc, #220]	; (8003464 <menu+0x27c8>)
 8003386:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800338a:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(yukariValfTmr > 6) {
 800338e:	4b35      	ldr	r3, [pc, #212]	; (8003464 <menu+0x27c8>)
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	2a07      	cmp	r2, #7
 8003396:	f173 0300 	sbcs.w	r3, r3, #0
 800339a:	d306      	bcc.n	80033aa <menu+0x270e>
		   		yukariValfTmr = 5;
 800339c:	4931      	ldr	r1, [pc, #196]	; (8003464 <menu+0x27c8>)
 800339e:	f04f 0205 	mov.w	r2, #5
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 80033aa:	f000 fec3 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033ae:	2108      	movs	r1, #8
 80033b0:	4824      	ldr	r0, [pc, #144]	; (8003444 <menu+0x27a8>)
 80033b2:	f007 fa7d 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d10f      	bne.n	80033dc <menu+0x2740>
 80033bc:	4b22      	ldr	r3, [pc, #136]	; (8003448 <menu+0x27ac>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	f083 0301 	eor.w	r3, r3, #1
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <menu+0x2740>
			eepromData[20] = yukariValfTmr;
 80033ca:	4b26      	ldr	r3, [pc, #152]	; (8003464 <menu+0x27c8>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	491e      	ldr	r1, [pc, #120]	; (800344c <menu+0x27b0>)
 80033d2:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
			hafizaYaz = 1;
 80033d6:	4a1f      	ldr	r2, [pc, #124]	; (8003454 <menu+0x27b8>)
 80033d8:	2301      	movs	r3, #1
 80033da:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 23) {
 80033dc:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <menu+0x27bc>)
 80033de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e2:	f1a2 0117 	sub.w	r1, r2, #23
 80033e6:	430b      	orrs	r3, r1
 80033e8:	f040 80a3 	bne.w	8003532 <menu+0x2896>
		lcd_print(1, 1, asagiValfSureText);
 80033ec:	4a1f      	ldr	r2, [pc, #124]	; (800346c <menu+0x27d0>)
 80033ee:	2101      	movs	r1, #1
 80033f0:	2001      	movs	r0, #1
 80033f2:	f006 f906 	bl	8009602 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80033f6:	4a1a      	ldr	r2, [pc, #104]	; (8003460 <menu+0x27c4>)
 80033f8:	2101      	movs	r1, #1
 80033fa:	2002      	movs	r0, #2
 80033fc:	f006 f901 	bl	8009602 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 8003400:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <menu+0x27d4>)
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	4613      	mov	r3, r2
 8003408:	220a      	movs	r2, #10
 800340a:	4917      	ldr	r1, [pc, #92]	; (8003468 <menu+0x27cc>)
 800340c:	4618      	mov	r0, r3
 800340e:	f009 fdf1 	bl	800cff4 <itoa>
		lcd_print(2,16,snum);
 8003412:	4a15      	ldr	r2, [pc, #84]	; (8003468 <menu+0x27cc>)
 8003414:	2110      	movs	r1, #16
 8003416:	2002      	movs	r0, #2
 8003418:	f006 f8f3 	bl	8009602 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800341c:	2102      	movs	r1, #2
 800341e:	4809      	ldr	r0, [pc, #36]	; (8003444 <menu+0x27a8>)
 8003420:	f007 fa46 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003424:	4603      	mov	r3, r0
 8003426:	2b01      	cmp	r3, #1
 8003428:	d141      	bne.n	80034ae <menu+0x2812>
 800342a:	4b07      	ldr	r3, [pc, #28]	; (8003448 <menu+0x27ac>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	f083 0301 	eor.w	r3, r3, #1
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d03a      	beq.n	80034ae <menu+0x2812>
 8003438:	e01c      	b.n	8003474 <menu+0x27d8>
 800343a:	bf00      	nop
 800343c:	20001150 	.word	0x20001150
 8003440:	2000168c 	.word	0x2000168c
 8003444:	40010800 	.word	0x40010800
 8003448:	2000121b 	.word	0x2000121b
 800344c:	20000d08 	.word	0x20000d08
 8003450:	200010e8 	.word	0x200010e8
 8003454:	20001218 	.word	0x20001218
 8003458:	200010b8 	.word	0x200010b8
 800345c:	200016b4 	.word	0x200016b4
 8003460:	200014fc 	.word	0x200014fc
 8003464:	20001158 	.word	0x20001158
 8003468:	20001078 	.word	0x20001078
 800346c:	200016c8 	.word	0x200016c8
 8003470:	20001160 	.word	0x20001160
			asagiValfTmr = asagiValfTmr + 1;
 8003474:	4b88      	ldr	r3, [pc, #544]	; (8003698 <menu+0x29fc>)
 8003476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347a:	1c51      	adds	r1, r2, #1
 800347c:	67b9      	str	r1, [r7, #120]	; 0x78
 800347e:	f143 0300 	adc.w	r3, r3, #0
 8003482:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003484:	4b84      	ldr	r3, [pc, #528]	; (8003698 <menu+0x29fc>)
 8003486:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800348a:	e9c3 1200 	strd	r1, r2, [r3]

			if(asagiValfTmr > 5) {
 800348e:	4b82      	ldr	r3, [pc, #520]	; (8003698 <menu+0x29fc>)
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	2a06      	cmp	r2, #6
 8003496:	f173 0300 	sbcs.w	r3, r3, #0
 800349a:	d306      	bcc.n	80034aa <menu+0x280e>
				asagiValfTmr = 0;
 800349c:	497e      	ldr	r1, [pc, #504]	; (8003698 <menu+0x29fc>)
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 80034aa:	f000 fe43 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80034ae:	2104      	movs	r1, #4
 80034b0:	487a      	ldr	r0, [pc, #488]	; (800369c <menu+0x2a00>)
 80034b2:	f007 f9fd 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d123      	bne.n	8003504 <menu+0x2868>
 80034bc:	4b78      	ldr	r3, [pc, #480]	; (80036a0 <menu+0x2a04>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	f083 0301 	eor.w	r3, r3, #1
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d01c      	beq.n	8003504 <menu+0x2868>
			asagiValfTmr = asagiValfTmr - 1;
 80034ca:	4b73      	ldr	r3, [pc, #460]	; (8003698 <menu+0x29fc>)
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	1e51      	subs	r1, r2, #1
 80034d2:	6739      	str	r1, [r7, #112]	; 0x70
 80034d4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80034d8:	677b      	str	r3, [r7, #116]	; 0x74
 80034da:	4b6f      	ldr	r3, [pc, #444]	; (8003698 <menu+0x29fc>)
 80034dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80034e0:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(asagiValfTmr > 6) {
 80034e4:	4b6c      	ldr	r3, [pc, #432]	; (8003698 <menu+0x29fc>)
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	2a07      	cmp	r2, #7
 80034ec:	f173 0300 	sbcs.w	r3, r3, #0
 80034f0:	d306      	bcc.n	8003500 <menu+0x2864>
		   		asagiValfTmr = 5;
 80034f2:	4969      	ldr	r1, [pc, #420]	; (8003698 <menu+0x29fc>)
 80034f4:	f04f 0205 	mov.w	r2, #5
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8003500:	f000 fe18 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003504:	2108      	movs	r1, #8
 8003506:	4865      	ldr	r0, [pc, #404]	; (800369c <menu+0x2a00>)
 8003508:	f007 f9d2 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800350c:	4603      	mov	r3, r0
 800350e:	2b01      	cmp	r3, #1
 8003510:	d10f      	bne.n	8003532 <menu+0x2896>
 8003512:	4b63      	ldr	r3, [pc, #396]	; (80036a0 <menu+0x2a04>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	f083 0301 	eor.w	r3, r3, #1
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <menu+0x2896>
			eepromData[21] = asagiValfTmr;
 8003520:	4b5d      	ldr	r3, [pc, #372]	; (8003698 <menu+0x29fc>)
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	495f      	ldr	r1, [pc, #380]	; (80036a4 <menu+0x2a08>)
 8003528:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
			hafizaYaz = 1;
 800352c:	4a5e      	ldr	r2, [pc, #376]	; (80036a8 <menu+0x2a0c>)
 800352e:	2301      	movs	r3, #1
 8003530:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 24) {
 8003532:	4b5e      	ldr	r3, [pc, #376]	; (80036ac <menu+0x2a10>)
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f1a2 0118 	sub.w	r1, r2, #24
 800353c:	430b      	orrs	r3, r1
 800353e:	f040 8097 	bne.w	8003670 <menu+0x29d4>
		if(devirmeYuruyusSecim == 2) {
 8003542:	4b5b      	ldr	r3, [pc, #364]	; (80036b0 <menu+0x2a14>)
 8003544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003548:	1e91      	subs	r1, r2, #2
 800354a:	430b      	orrs	r3, r1
 800354c:	d105      	bne.n	800355a <menu+0x28be>
			lcd_print(1, 1, devirmeYukariValfSureText);
 800354e:	4a59      	ldr	r2, [pc, #356]	; (80036b4 <menu+0x2a18>)
 8003550:	2101      	movs	r1, #1
 8003552:	2001      	movs	r0, #1
 8003554:	f006 f855 	bl	8009602 <lcd_print>
 8003558:	e00a      	b.n	8003570 <menu+0x28d4>
		} else if(devirmeYuruyusSecim == 1) {
 800355a:	4b55      	ldr	r3, [pc, #340]	; (80036b0 <menu+0x2a14>)
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	1e51      	subs	r1, r2, #1
 8003562:	430b      	orrs	r3, r1
 8003564:	d104      	bne.n	8003570 <menu+0x28d4>
			lcd_print(1, 1, ileriValfSureText);
 8003566:	4a54      	ldr	r2, [pc, #336]	; (80036b8 <menu+0x2a1c>)
 8003568:	2101      	movs	r1, #1
 800356a:	2001      	movs	r0, #1
 800356c:	f006 f849 	bl	8009602 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003570:	4a52      	ldr	r2, [pc, #328]	; (80036bc <menu+0x2a20>)
 8003572:	2101      	movs	r1, #1
 8003574:	2002      	movs	r0, #2
 8003576:	f006 f844 	bl	8009602 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 800357a:	4b51      	ldr	r3, [pc, #324]	; (80036c0 <menu+0x2a24>)
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	4613      	mov	r3, r2
 8003582:	220a      	movs	r2, #10
 8003584:	494f      	ldr	r1, [pc, #316]	; (80036c4 <menu+0x2a28>)
 8003586:	4618      	mov	r0, r3
 8003588:	f009 fd34 	bl	800cff4 <itoa>
		lcd_print(2, 16, snum);
 800358c:	4a4d      	ldr	r2, [pc, #308]	; (80036c4 <menu+0x2a28>)
 800358e:	2110      	movs	r1, #16
 8003590:	2002      	movs	r0, #2
 8003592:	f006 f836 	bl	8009602 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003596:	2102      	movs	r1, #2
 8003598:	4840      	ldr	r0, [pc, #256]	; (800369c <menu+0x2a00>)
 800359a:	f007 f989 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d123      	bne.n	80035ec <menu+0x2950>
 80035a4:	4b3e      	ldr	r3, [pc, #248]	; (80036a0 <menu+0x2a04>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	f083 0301 	eor.w	r3, r3, #1
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d01c      	beq.n	80035ec <menu+0x2950>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 80035b2:	4b43      	ldr	r3, [pc, #268]	; (80036c0 <menu+0x2a24>)
 80035b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b8:	1c51      	adds	r1, r2, #1
 80035ba:	66b9      	str	r1, [r7, #104]	; 0x68
 80035bc:	f143 0300 	adc.w	r3, r3, #0
 80035c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035c2:	4b3f      	ldr	r3, [pc, #252]	; (80036c0 <menu+0x2a24>)
 80035c4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80035c8:	e9c3 1200 	strd	r1, r2, [r3]

			if(devirmeYukariIleriTmr > 5) {
 80035cc:	4b3c      	ldr	r3, [pc, #240]	; (80036c0 <menu+0x2a24>)
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	2a06      	cmp	r2, #6
 80035d4:	f173 0300 	sbcs.w	r3, r3, #0
 80035d8:	d306      	bcc.n	80035e8 <menu+0x294c>
				devirmeYukariIleriTmr = 0;
 80035da:	4939      	ldr	r1, [pc, #228]	; (80036c0 <menu+0x2a24>)
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 80035e8:	f000 fda4 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035ec:	2104      	movs	r1, #4
 80035ee:	482b      	ldr	r0, [pc, #172]	; (800369c <menu+0x2a00>)
 80035f0:	f007 f95e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d123      	bne.n	8003642 <menu+0x29a6>
 80035fa:	4b29      	ldr	r3, [pc, #164]	; (80036a0 <menu+0x2a04>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	f083 0301 	eor.w	r3, r3, #1
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01c      	beq.n	8003642 <menu+0x29a6>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003608:	4b2d      	ldr	r3, [pc, #180]	; (80036c0 <menu+0x2a24>)
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	1e51      	subs	r1, r2, #1
 8003610:	6639      	str	r1, [r7, #96]	; 0x60
 8003612:	f143 33ff 	adc.w	r3, r3, #4294967295
 8003616:	667b      	str	r3, [r7, #100]	; 0x64
 8003618:	4b29      	ldr	r3, [pc, #164]	; (80036c0 <menu+0x2a24>)
 800361a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800361e:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(devirmeYukariIleriTmr > 6) {
 8003622:	4b27      	ldr	r3, [pc, #156]	; (80036c0 <menu+0x2a24>)
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	2a07      	cmp	r2, #7
 800362a:	f173 0300 	sbcs.w	r3, r3, #0
 800362e:	d306      	bcc.n	800363e <menu+0x29a2>
		   		devirmeYukariIleriTmr = 5;
 8003630:	4923      	ldr	r1, [pc, #140]	; (80036c0 <menu+0x2a24>)
 8003632:	f04f 0205 	mov.w	r2, #5
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 800363e:	f000 fd79 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003642:	2108      	movs	r1, #8
 8003644:	4815      	ldr	r0, [pc, #84]	; (800369c <menu+0x2a00>)
 8003646:	f007 f933 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800364a:	4603      	mov	r3, r0
 800364c:	2b01      	cmp	r3, #1
 800364e:	d10f      	bne.n	8003670 <menu+0x29d4>
 8003650:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <menu+0x2a04>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	f083 0301 	eor.w	r3, r3, #1
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <menu+0x29d4>
			eepromData[22] = devirmeYukariIleriTmr;
 800365e:	4b18      	ldr	r3, [pc, #96]	; (80036c0 <menu+0x2a24>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	490f      	ldr	r1, [pc, #60]	; (80036a4 <menu+0x2a08>)
 8003666:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
			hafizaYaz = 1;
 800366a:	4a0f      	ldr	r2, [pc, #60]	; (80036a8 <menu+0x2a0c>)
 800366c:	2301      	movs	r3, #1
 800366e:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 25) {
 8003670:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <menu+0x2a10>)
 8003672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003676:	f1a2 0119 	sub.w	r1, r2, #25
 800367a:	430b      	orrs	r3, r1
 800367c:	f040 80b1 	bne.w	80037e2 <menu+0x2b46>
		if(devirmeYuruyusSecim == 2) {
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <menu+0x2a14>)
 8003682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003686:	1e91      	subs	r1, r2, #2
 8003688:	430b      	orrs	r3, r1
 800368a:	d11f      	bne.n	80036cc <menu+0x2a30>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 800368c:	4a0e      	ldr	r2, [pc, #56]	; (80036c8 <menu+0x2a2c>)
 800368e:	2101      	movs	r1, #1
 8003690:	2001      	movs	r0, #1
 8003692:	f005 ffb6 	bl	8009602 <lcd_print>
 8003696:	e024      	b.n	80036e2 <menu+0x2a46>
 8003698:	20001160 	.word	0x20001160
 800369c:	40010800 	.word	0x40010800
 80036a0:	2000121b 	.word	0x2000121b
 80036a4:	20000d08 	.word	0x20000d08
 80036a8:	20001218 	.word	0x20001218
 80036ac:	200010b8 	.word	0x200010b8
 80036b0:	20001130 	.word	0x20001130
 80036b4:	200016dc 	.word	0x200016dc
 80036b8:	200016f0 	.word	0x200016f0
 80036bc:	200014fc 	.word	0x200014fc
 80036c0:	20001168 	.word	0x20001168
 80036c4:	20001078 	.word	0x20001078
 80036c8:	20001704 	.word	0x20001704
		} else if(devirmeYuruyusSecim == 1) {
 80036cc:	4b6a      	ldr	r3, [pc, #424]	; (8003878 <menu+0x2bdc>)
 80036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d2:	1e51      	subs	r1, r2, #1
 80036d4:	430b      	orrs	r3, r1
 80036d6:	d104      	bne.n	80036e2 <menu+0x2a46>
			lcd_print(1, 1, geriValfSureText);
 80036d8:	4a68      	ldr	r2, [pc, #416]	; (800387c <menu+0x2be0>)
 80036da:	2101      	movs	r1, #1
 80036dc:	2001      	movs	r0, #1
 80036de:	f005 ff90 	bl	8009602 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80036e2:	4a67      	ldr	r2, [pc, #412]	; (8003880 <menu+0x2be4>)
 80036e4:	2101      	movs	r1, #1
 80036e6:	2002      	movs	r0, #2
 80036e8:	f005 ff8b 	bl	8009602 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80036ec:	4b65      	ldr	r3, [pc, #404]	; (8003884 <menu+0x2be8>)
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	4613      	mov	r3, r2
 80036f4:	220a      	movs	r2, #10
 80036f6:	4964      	ldr	r1, [pc, #400]	; (8003888 <menu+0x2bec>)
 80036f8:	4618      	mov	r0, r3
 80036fa:	f009 fc7b 	bl	800cff4 <itoa>
		lcd_print(2,16,snum);
 80036fe:	4a62      	ldr	r2, [pc, #392]	; (8003888 <menu+0x2bec>)
 8003700:	2110      	movs	r1, #16
 8003702:	2002      	movs	r0, #2
 8003704:	f005 ff7d 	bl	8009602 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003708:	2102      	movs	r1, #2
 800370a:	4860      	ldr	r0, [pc, #384]	; (800388c <menu+0x2bf0>)
 800370c:	f007 f8d0 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003710:	4603      	mov	r3, r0
 8003712:	2b01      	cmp	r3, #1
 8003714:	d123      	bne.n	800375e <menu+0x2ac2>
 8003716:	4b5e      	ldr	r3, [pc, #376]	; (8003890 <menu+0x2bf4>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	f083 0301 	eor.w	r3, r3, #1
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01c      	beq.n	800375e <menu+0x2ac2>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003724:	4b57      	ldr	r3, [pc, #348]	; (8003884 <menu+0x2be8>)
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	1c51      	adds	r1, r2, #1
 800372c:	65b9      	str	r1, [r7, #88]	; 0x58
 800372e:	f143 0300 	adc.w	r3, r3, #0
 8003732:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003734:	4b53      	ldr	r3, [pc, #332]	; (8003884 <menu+0x2be8>)
 8003736:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800373a:	e9c3 1200 	strd	r1, r2, [r3]

			if(devirmeAsagiGeriTmr > 5) {
 800373e:	4b51      	ldr	r3, [pc, #324]	; (8003884 <menu+0x2be8>)
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	2a06      	cmp	r2, #6
 8003746:	f173 0300 	sbcs.w	r3, r3, #0
 800374a:	d306      	bcc.n	800375a <menu+0x2abe>
				devirmeAsagiGeriTmr = 0;
 800374c:	494d      	ldr	r1, [pc, #308]	; (8003884 <menu+0x2be8>)
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 800375a:	f000 fceb 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800375e:	2104      	movs	r1, #4
 8003760:	484a      	ldr	r0, [pc, #296]	; (800388c <menu+0x2bf0>)
 8003762:	f007 f8a5 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003766:	4603      	mov	r3, r0
 8003768:	2b01      	cmp	r3, #1
 800376a:	d123      	bne.n	80037b4 <menu+0x2b18>
 800376c:	4b48      	ldr	r3, [pc, #288]	; (8003890 <menu+0x2bf4>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	f083 0301 	eor.w	r3, r3, #1
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d01c      	beq.n	80037b4 <menu+0x2b18>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 800377a:	4b42      	ldr	r3, [pc, #264]	; (8003884 <menu+0x2be8>)
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	1e51      	subs	r1, r2, #1
 8003782:	6539      	str	r1, [r7, #80]	; 0x50
 8003784:	f143 33ff 	adc.w	r3, r3, #4294967295
 8003788:	657b      	str	r3, [r7, #84]	; 0x54
 800378a:	4b3e      	ldr	r3, [pc, #248]	; (8003884 <menu+0x2be8>)
 800378c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003790:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003794:	4b3b      	ldr	r3, [pc, #236]	; (8003884 <menu+0x2be8>)
 8003796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379a:	2a07      	cmp	r2, #7
 800379c:	f173 0300 	sbcs.w	r3, r3, #0
 80037a0:	d306      	bcc.n	80037b0 <menu+0x2b14>
		   		devirmeAsagiGeriTmr = 5;
 80037a2:	4938      	ldr	r1, [pc, #224]	; (8003884 <menu+0x2be8>)
 80037a4:	f04f 0205 	mov.w	r2, #5
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 80037b0:	f000 fcc0 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037b4:	2108      	movs	r1, #8
 80037b6:	4835      	ldr	r0, [pc, #212]	; (800388c <menu+0x2bf0>)
 80037b8:	f007 f87a 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d10f      	bne.n	80037e2 <menu+0x2b46>
 80037c2:	4b33      	ldr	r3, [pc, #204]	; (8003890 <menu+0x2bf4>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	f083 0301 	eor.w	r3, r3, #1
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <menu+0x2b46>
			eepromData[23] = devirmeAsagiGeriTmr;
 80037d0:	4b2c      	ldr	r3, [pc, #176]	; (8003884 <menu+0x2be8>)
 80037d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d6:	492f      	ldr	r1, [pc, #188]	; (8003894 <menu+0x2bf8>)
 80037d8:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
			hafizaYaz = 1;
 80037dc:	4a2e      	ldr	r2, [pc, #184]	; (8003898 <menu+0x2bfc>)
 80037de:	2301      	movs	r3, #1
 80037e0:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 26) {
 80037e2:	4b2e      	ldr	r3, [pc, #184]	; (800389c <menu+0x2c00>)
 80037e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e8:	f1a2 011a 	sub.w	r1, r2, #26
 80037ec:	430b      	orrs	r3, r1
 80037ee:	f040 80e2 	bne.w	80039b6 <menu+0x2d1a>
		lcd_print(1, 1, calismaSuresiText);
 80037f2:	4a2b      	ldr	r2, [pc, #172]	; (80038a0 <menu+0x2c04>)
 80037f4:	2101      	movs	r1, #1
 80037f6:	2001      	movs	r0, #1
 80037f8:	f005 ff03 	bl	8009602 <lcd_print>

		if(makineCalismaTmr > 99) {
 80037fc:	4b29      	ldr	r3, [pc, #164]	; (80038a4 <menu+0x2c08>)
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	2a64      	cmp	r2, #100	; 0x64
 8003804:	f173 0300 	sbcs.w	r3, r3, #0
 8003808:	d313      	bcc.n	8003832 <menu+0x2b96>
			lcd_print(2, 1, kacSaniyeText);
 800380a:	4a1d      	ldr	r2, [pc, #116]	; (8003880 <menu+0x2be4>)
 800380c:	2101      	movs	r1, #1
 800380e:	2002      	movs	r0, #2
 8003810:	f005 fef7 	bl	8009602 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003814:	4b23      	ldr	r3, [pc, #140]	; (80038a4 <menu+0x2c08>)
 8003816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381a:	4613      	mov	r3, r2
 800381c:	220a      	movs	r2, #10
 800381e:	491a      	ldr	r1, [pc, #104]	; (8003888 <menu+0x2bec>)
 8003820:	4618      	mov	r0, r3
 8003822:	f009 fbe7 	bl	800cff4 <itoa>
			lcd_print(2,14,snum);
 8003826:	4a18      	ldr	r2, [pc, #96]	; (8003888 <menu+0x2bec>)
 8003828:	210e      	movs	r1, #14
 800382a:	2002      	movs	r0, #2
 800382c:	f005 fee9 	bl	8009602 <lcd_print>
 8003830:	e054      	b.n	80038dc <menu+0x2c40>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003832:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <menu+0x2c08>)
 8003834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003838:	2a0a      	cmp	r2, #10
 800383a:	f173 0300 	sbcs.w	r3, r3, #0
 800383e:	d333      	bcc.n	80038a8 <menu+0x2c0c>
 8003840:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <menu+0x2c08>)
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	2a64      	cmp	r2, #100	; 0x64
 8003848:	f173 0300 	sbcs.w	r3, r3, #0
 800384c:	d22c      	bcs.n	80038a8 <menu+0x2c0c>
			lcd_print(2, 1, kacSaniyeText);
 800384e:	4a0c      	ldr	r2, [pc, #48]	; (8003880 <menu+0x2be4>)
 8003850:	2101      	movs	r1, #1
 8003852:	2002      	movs	r0, #2
 8003854:	f005 fed5 	bl	8009602 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <menu+0x2c08>)
 800385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385e:	4613      	mov	r3, r2
 8003860:	220a      	movs	r2, #10
 8003862:	4909      	ldr	r1, [pc, #36]	; (8003888 <menu+0x2bec>)
 8003864:	4618      	mov	r0, r3
 8003866:	f009 fbc5 	bl	800cff4 <itoa>
			lcd_print(2, 15, snum);
 800386a:	4a07      	ldr	r2, [pc, #28]	; (8003888 <menu+0x2bec>)
 800386c:	210f      	movs	r1, #15
 800386e:	2002      	movs	r0, #2
 8003870:	f005 fec7 	bl	8009602 <lcd_print>
 8003874:	e032      	b.n	80038dc <menu+0x2c40>
 8003876:	bf00      	nop
 8003878:	20001130 	.word	0x20001130
 800387c:	20001718 	.word	0x20001718
 8003880:	200014fc 	.word	0x200014fc
 8003884:	20001170 	.word	0x20001170
 8003888:	20001078 	.word	0x20001078
 800388c:	40010800 	.word	0x40010800
 8003890:	2000121b 	.word	0x2000121b
 8003894:	20000d08 	.word	0x20000d08
 8003898:	20001218 	.word	0x20001218
 800389c:	200010b8 	.word	0x200010b8
 80038a0:	2000172c 	.word	0x2000172c
 80038a4:	20001178 	.word	0x20001178
		} else if(makineCalismaTmr <=  9) {
 80038a8:	4b99      	ldr	r3, [pc, #612]	; (8003b10 <menu+0x2e74>)
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	2a0a      	cmp	r2, #10
 80038b0:	f173 0300 	sbcs.w	r3, r3, #0
 80038b4:	d212      	bcs.n	80038dc <menu+0x2c40>
			lcd_print(2, 1, kacSaniyeText);
 80038b6:	4a97      	ldr	r2, [pc, #604]	; (8003b14 <menu+0x2e78>)
 80038b8:	2101      	movs	r1, #1
 80038ba:	2002      	movs	r0, #2
 80038bc:	f005 fea1 	bl	8009602 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80038c0:	4b93      	ldr	r3, [pc, #588]	; (8003b10 <menu+0x2e74>)
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	4613      	mov	r3, r2
 80038c8:	220a      	movs	r2, #10
 80038ca:	4993      	ldr	r1, [pc, #588]	; (8003b18 <menu+0x2e7c>)
 80038cc:	4618      	mov	r0, r3
 80038ce:	f009 fb91 	bl	800cff4 <itoa>
			lcd_print(2, 16, snum);
 80038d2:	4a91      	ldr	r2, [pc, #580]	; (8003b18 <menu+0x2e7c>)
 80038d4:	2110      	movs	r1, #16
 80038d6:	2002      	movs	r0, #2
 80038d8:	f005 fe93 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038dc:	2102      	movs	r1, #2
 80038de:	488f      	ldr	r0, [pc, #572]	; (8003b1c <menu+0x2e80>)
 80038e0:	f006 ffe6 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d123      	bne.n	8003932 <menu+0x2c96>
 80038ea:	4b8d      	ldr	r3, [pc, #564]	; (8003b20 <menu+0x2e84>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	f083 0301 	eor.w	r3, r3, #1
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01c      	beq.n	8003932 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr + 1;
 80038f8:	4b85      	ldr	r3, [pc, #532]	; (8003b10 <menu+0x2e74>)
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	1c51      	adds	r1, r2, #1
 8003900:	64b9      	str	r1, [r7, #72]	; 0x48
 8003902:	f143 0300 	adc.w	r3, r3, #0
 8003906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003908:	4b81      	ldr	r3, [pc, #516]	; (8003b10 <menu+0x2e74>)
 800390a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800390e:	e9c3 1200 	strd	r1, r2, [r3]

			if(makineCalismaTmr > 180) {
 8003912:	4b7f      	ldr	r3, [pc, #508]	; (8003b10 <menu+0x2e74>)
 8003914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003918:	2ab5      	cmp	r2, #181	; 0xb5
 800391a:	f173 0300 	sbcs.w	r3, r3, #0
 800391e:	d306      	bcc.n	800392e <menu+0x2c92>
				makineCalismaTmr = 0;
 8003920:	497b      	ldr	r1, [pc, #492]	; (8003b10 <menu+0x2e74>)
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 800392e:	f000 fc01 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003932:	2104      	movs	r1, #4
 8003934:	4879      	ldr	r0, [pc, #484]	; (8003b1c <menu+0x2e80>)
 8003936:	f006 ffbb 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800393a:	4603      	mov	r3, r0
 800393c:	2b01      	cmp	r3, #1
 800393e:	d123      	bne.n	8003988 <menu+0x2cec>
 8003940:	4b77      	ldr	r3, [pc, #476]	; (8003b20 <menu+0x2e84>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	f083 0301 	eor.w	r3, r3, #1
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d01c      	beq.n	8003988 <menu+0x2cec>
			makineCalismaTmr = makineCalismaTmr - 1;
 800394e:	4b70      	ldr	r3, [pc, #448]	; (8003b10 <menu+0x2e74>)
 8003950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003954:	1e51      	subs	r1, r2, #1
 8003956:	6439      	str	r1, [r7, #64]	; 0x40
 8003958:	f143 33ff 	adc.w	r3, r3, #4294967295
 800395c:	647b      	str	r3, [r7, #68]	; 0x44
 800395e:	4b6c      	ldr	r3, [pc, #432]	; (8003b10 <menu+0x2e74>)
 8003960:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003964:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(makineCalismaTmr > 181) {
 8003968:	4b69      	ldr	r3, [pc, #420]	; (8003b10 <menu+0x2e74>)
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	2ab6      	cmp	r2, #182	; 0xb6
 8003970:	f173 0300 	sbcs.w	r3, r3, #0
 8003974:	d306      	bcc.n	8003984 <menu+0x2ce8>
		   		makineCalismaTmr = 180;
 8003976:	4966      	ldr	r1, [pc, #408]	; (8003b10 <menu+0x2e74>)
 8003978:	f04f 02b4 	mov.w	r2, #180	; 0xb4
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8003984:	f000 fbd6 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003988:	2108      	movs	r1, #8
 800398a:	4864      	ldr	r0, [pc, #400]	; (8003b1c <menu+0x2e80>)
 800398c:	f006 ff90 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003990:	4603      	mov	r3, r0
 8003992:	2b01      	cmp	r3, #1
 8003994:	d10f      	bne.n	80039b6 <menu+0x2d1a>
 8003996:	4b62      	ldr	r3, [pc, #392]	; (8003b20 <menu+0x2e84>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	f083 0301 	eor.w	r3, r3, #1
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <menu+0x2d1a>
			eepromData[24] = makineCalismaTmr;
 80039a4:	4b5a      	ldr	r3, [pc, #360]	; (8003b10 <menu+0x2e74>)
 80039a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039aa:	495e      	ldr	r1, [pc, #376]	; (8003b24 <menu+0x2e88>)
 80039ac:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			hafizaYaz = 1;
 80039b0:	4a5d      	ldr	r2, [pc, #372]	; (8003b28 <menu+0x2e8c>)
 80039b2:	2301      	movs	r3, #1
 80039b4:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 27) {
 80039b6:	4b5d      	ldr	r3, [pc, #372]	; (8003b2c <menu+0x2e90>)
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f1a2 011b 	sub.w	r1, r2, #27
 80039c0:	430b      	orrs	r3, r1
 80039c2:	f040 8086 	bne.w	8003ad2 <menu+0x2e36>
		lcd_print(1, 1, buzzerTextGN);
 80039c6:	4a5a      	ldr	r2, [pc, #360]	; (8003b30 <menu+0x2e94>)
 80039c8:	2101      	movs	r1, #1
 80039ca:	2001      	movs	r0, #1
 80039cc:	f005 fe19 	bl	8009602 <lcd_print>

		if(buzzer == 0) {
 80039d0:	4b58      	ldr	r3, [pc, #352]	; (8003b34 <menu+0x2e98>)
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	d105      	bne.n	80039e6 <menu+0x2d4a>
			lcd_print(2, 1, pasifText);
 80039da:	4a57      	ldr	r2, [pc, #348]	; (8003b38 <menu+0x2e9c>)
 80039dc:	2101      	movs	r1, #1
 80039de:	2002      	movs	r0, #2
 80039e0:	f005 fe0f 	bl	8009602 <lcd_print>
 80039e4:	e00a      	b.n	80039fc <menu+0x2d60>
		} else if(buzzer == 1) {
 80039e6:	4b53      	ldr	r3, [pc, #332]	; (8003b34 <menu+0x2e98>)
 80039e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ec:	1e51      	subs	r1, r2, #1
 80039ee:	430b      	orrs	r3, r1
 80039f0:	d104      	bne.n	80039fc <menu+0x2d60>
			lcd_print(2, 1, aktifText);
 80039f2:	4a52      	ldr	r2, [pc, #328]	; (8003b3c <menu+0x2ea0>)
 80039f4:	2101      	movs	r1, #1
 80039f6:	2002      	movs	r0, #2
 80039f8:	f005 fe03 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039fc:	2102      	movs	r1, #2
 80039fe:	4847      	ldr	r0, [pc, #284]	; (8003b1c <menu+0x2e80>)
 8003a00:	f006 ff56 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d123      	bne.n	8003a52 <menu+0x2db6>
 8003a0a:	4b45      	ldr	r3, [pc, #276]	; (8003b20 <menu+0x2e84>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	f083 0301 	eor.w	r3, r3, #1
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d01c      	beq.n	8003a52 <menu+0x2db6>
			buzzer = buzzer + 1;
 8003a18:	4b46      	ldr	r3, [pc, #280]	; (8003b34 <menu+0x2e98>)
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	1c51      	adds	r1, r2, #1
 8003a20:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a22:	f143 0300 	adc.w	r3, r3, #0
 8003a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a28:	4b42      	ldr	r3, [pc, #264]	; (8003b34 <menu+0x2e98>)
 8003a2a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003a2e:	e9c3 1200 	strd	r1, r2, [r3]
			if(buzzer > 1){
 8003a32:	4b40      	ldr	r3, [pc, #256]	; (8003b34 <menu+0x2e98>)
 8003a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a38:	2a02      	cmp	r2, #2
 8003a3a:	f173 0300 	sbcs.w	r3, r3, #0
 8003a3e:	d306      	bcc.n	8003a4e <menu+0x2db2>
				buzzer = 0;
 8003a40:	493c      	ldr	r1, [pc, #240]	; (8003b34 <menu+0x2e98>)
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8003a4e:	f000 fb71 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a52:	2104      	movs	r1, #4
 8003a54:	4831      	ldr	r0, [pc, #196]	; (8003b1c <menu+0x2e80>)
 8003a56:	f006 ff2b 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d121      	bne.n	8003aa4 <menu+0x2e08>
 8003a60:	4b2f      	ldr	r3, [pc, #188]	; (8003b20 <menu+0x2e84>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	f083 0301 	eor.w	r3, r3, #1
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01a      	beq.n	8003aa4 <menu+0x2e08>
			buzzer = buzzer - 1;
 8003a6e:	4b31      	ldr	r3, [pc, #196]	; (8003b34 <menu+0x2e98>)
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	1e51      	subs	r1, r2, #1
 8003a76:	6339      	str	r1, [r7, #48]	; 0x30
 8003a78:	f143 33ff 	adc.w	r3, r3, #4294967295
 8003a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a7e:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <menu+0x2e98>)
 8003a80:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003a84:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(buzzer > 0){
 8003a88:	4b2a      	ldr	r3, [pc, #168]	; (8003b34 <menu+0x2e98>)
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	d006      	beq.n	8003aa0 <menu+0x2e04>
		   		buzzer = 1;
 8003a92:	4928      	ldr	r1, [pc, #160]	; (8003b34 <menu+0x2e98>)
 8003a94:	f04f 0201 	mov.w	r2, #1
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8003aa0:	f000 fb48 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aa4:	2108      	movs	r1, #8
 8003aa6:	481d      	ldr	r0, [pc, #116]	; (8003b1c <menu+0x2e80>)
 8003aa8:	f006 ff02 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d10f      	bne.n	8003ad2 <menu+0x2e36>
 8003ab2:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <menu+0x2e84>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	f083 0301 	eor.w	r3, r3, #1
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <menu+0x2e36>
			eepromData[25] = buzzer;
 8003ac0:	4b1c      	ldr	r3, [pc, #112]	; (8003b34 <menu+0x2e98>)
 8003ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac6:	4917      	ldr	r1, [pc, #92]	; (8003b24 <menu+0x2e88>)
 8003ac8:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
			hafizaYaz = 1;
 8003acc:	4a16      	ldr	r2, [pc, #88]	; (8003b28 <menu+0x2e8c>)
 8003ace:	2301      	movs	r3, #1
 8003ad0:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 28) {
 8003ad2:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <menu+0x2e90>)
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f1a2 011c 	sub.w	r1, r2, #28
 8003adc:	430b      	orrs	r3, r1
 8003ade:	f040 80ab 	bne.w	8003c38 <menu+0x2f9c>
		calismaSayModu = 0;
 8003ae2:	4917      	ldr	r1, [pc, #92]	; (8003b40 <menu+0x2ea4>)
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	e9c1 2300 	strd	r2, r3, [r1]
		lcd_print(1, 1, demoModTextGN);
 8003af0:	4a14      	ldr	r2, [pc, #80]	; (8003b44 <menu+0x2ea8>)
 8003af2:	2101      	movs	r1, #1
 8003af4:	2001      	movs	r0, #1
 8003af6:	f005 fd84 	bl	8009602 <lcd_print>

		if(demoMode == 0) {
 8003afa:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <menu+0x2eac>)
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	d123      	bne.n	8003b4c <menu+0x2eb0>
			lcd_print(2, 1, pasifText);
 8003b04:	4a0c      	ldr	r2, [pc, #48]	; (8003b38 <menu+0x2e9c>)
 8003b06:	2101      	movs	r1, #1
 8003b08:	2002      	movs	r0, #2
 8003b0a:	f005 fd7a 	bl	8009602 <lcd_print>
 8003b0e:	e028      	b.n	8003b62 <menu+0x2ec6>
 8003b10:	20001178 	.word	0x20001178
 8003b14:	200014fc 	.word	0x200014fc
 8003b18:	20001078 	.word	0x20001078
 8003b1c:	40010800 	.word	0x40010800
 8003b20:	2000121b 	.word	0x2000121b
 8003b24:	20000d08 	.word	0x20000d08
 8003b28:	20001218 	.word	0x20001218
 8003b2c:	200010b8 	.word	0x200010b8
 8003b30:	200000bc 	.word	0x200000bc
 8003b34:	20001198 	.word	0x20001198
 8003b38:	200013d0 	.word	0x200013d0
 8003b3c:	200013e4 	.word	0x200013e4
 8003b40:	200011b8 	.word	0x200011b8
 8003b44:	200000d0 	.word	0x200000d0
 8003b48:	200011a8 	.word	0x200011a8
		} else if(demoMode == 1) {
 8003b4c:	4b9d      	ldr	r3, [pc, #628]	; (8003dc4 <menu+0x3128>)
 8003b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b52:	1e51      	subs	r1, r2, #1
 8003b54:	430b      	orrs	r3, r1
 8003b56:	d104      	bne.n	8003b62 <menu+0x2ec6>
			lcd_print(2, 1, aktifText);
 8003b58:	4a9b      	ldr	r2, [pc, #620]	; (8003dc8 <menu+0x312c>)
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	2002      	movs	r0, #2
 8003b5e:	f005 fd50 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b62:	2102      	movs	r1, #2
 8003b64:	4899      	ldr	r0, [pc, #612]	; (8003dcc <menu+0x3130>)
 8003b66:	f006 fea3 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d123      	bne.n	8003bb8 <menu+0x2f1c>
 8003b70:	4b97      	ldr	r3, [pc, #604]	; (8003dd0 <menu+0x3134>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	f083 0301 	eor.w	r3, r3, #1
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01c      	beq.n	8003bb8 <menu+0x2f1c>
			demoMode = demoMode + 1;
 8003b7e:	4b91      	ldr	r3, [pc, #580]	; (8003dc4 <menu+0x3128>)
 8003b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b84:	1c51      	adds	r1, r2, #1
 8003b86:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b88:	f143 0300 	adc.w	r3, r3, #0
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8e:	4b8d      	ldr	r3, [pc, #564]	; (8003dc4 <menu+0x3128>)
 8003b90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003b94:	e9c3 1200 	strd	r1, r2, [r3]

			if(demoMode > 1){
 8003b98:	4b8a      	ldr	r3, [pc, #552]	; (8003dc4 <menu+0x3128>)
 8003b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9e:	2a02      	cmp	r2, #2
 8003ba0:	f173 0300 	sbcs.w	r3, r3, #0
 8003ba4:	d306      	bcc.n	8003bb4 <menu+0x2f18>
				demoMode = 0;
 8003ba6:	4987      	ldr	r1, [pc, #540]	; (8003dc4 <menu+0x3128>)
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8003bb4:	f000 fabe 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bb8:	2104      	movs	r1, #4
 8003bba:	4884      	ldr	r0, [pc, #528]	; (8003dcc <menu+0x3130>)
 8003bbc:	f006 fe78 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d121      	bne.n	8003c0a <menu+0x2f6e>
 8003bc6:	4b82      	ldr	r3, [pc, #520]	; (8003dd0 <menu+0x3134>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	f083 0301 	eor.w	r3, r3, #1
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01a      	beq.n	8003c0a <menu+0x2f6e>
			demoMode = demoMode - 1;
 8003bd4:	4b7b      	ldr	r3, [pc, #492]	; (8003dc4 <menu+0x3128>)
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	1e51      	subs	r1, r2, #1
 8003bdc:	6239      	str	r1, [r7, #32]
 8003bde:	f143 33ff 	adc.w	r3, r3, #4294967295
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
 8003be4:	4b77      	ldr	r3, [pc, #476]	; (8003dc4 <menu+0x3128>)
 8003be6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003bea:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(demoMode > 0) {
 8003bee:	4b75      	ldr	r3, [pc, #468]	; (8003dc4 <menu+0x3128>)
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	d006      	beq.n	8003c06 <menu+0x2f6a>
		   		demoMode = 1;
 8003bf8:	4972      	ldr	r1, [pc, #456]	; (8003dc4 <menu+0x3128>)
 8003bfa:	f04f 0201 	mov.w	r2, #1
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8003c06:	f000 fa95 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c0a:	2108      	movs	r1, #8
 8003c0c:	486f      	ldr	r0, [pc, #444]	; (8003dcc <menu+0x3130>)
 8003c0e:	f006 fe4f 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d10f      	bne.n	8003c38 <menu+0x2f9c>
 8003c18:	4b6d      	ldr	r3, [pc, #436]	; (8003dd0 <menu+0x3134>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	f083 0301 	eor.w	r3, r3, #1
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <menu+0x2f9c>
			eepromData[26] = demoMode;
 8003c26:	4b67      	ldr	r3, [pc, #412]	; (8003dc4 <menu+0x3128>)
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	4969      	ldr	r1, [pc, #420]	; (8003dd4 <menu+0x3138>)
 8003c2e:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
			hafizaYaz = 1;
 8003c32:	4b69      	ldr	r3, [pc, #420]	; (8003dd8 <menu+0x313c>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003c38:	4b68      	ldr	r3, [pc, #416]	; (8003ddc <menu+0x3140>)
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	f1a2 011d 	sub.w	r1, r2, #29
 8003c42:	430b      	orrs	r3, r1
 8003c44:	f040 80f4 	bne.w	8003e30 <menu+0x3194>
		if(calismaSayModu == 0) {
 8003c48:	4b65      	ldr	r3, [pc, #404]	; (8003de0 <menu+0x3144>)
 8003c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	d128      	bne.n	8003ca4 <menu+0x3008>
			lcd_print(1, 1, calismaSayisiText);
 8003c52:	4a64      	ldr	r2, [pc, #400]	; (8003de4 <menu+0x3148>)
 8003c54:	2101      	movs	r1, #1
 8003c56:	2001      	movs	r0, #1
 8003c58:	f005 fcd3 	bl	8009602 <lcd_print>

			if(demoMode == 1) {
 8003c5c:	4b59      	ldr	r3, [pc, #356]	; (8003dc4 <menu+0x3128>)
 8003c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c62:	1e51      	subs	r1, r2, #1
 8003c64:	430b      	orrs	r3, r1
 8003c66:	d109      	bne.n	8003c7c <menu+0x2fe0>
				itoa(calismaSayisiDemo, snum, 10);
 8003c68:	4b5f      	ldr	r3, [pc, #380]	; (8003de8 <menu+0x314c>)
 8003c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	220a      	movs	r2, #10
 8003c72:	495e      	ldr	r1, [pc, #376]	; (8003dec <menu+0x3150>)
 8003c74:	4618      	mov	r0, r3
 8003c76:	f009 f9bd 	bl	800cff4 <itoa>
 8003c7a:	e008      	b.n	8003c8e <menu+0x2ff2>
			} else {
				itoa(calismaSayisi, snum, 10);
 8003c7c:	4b5c      	ldr	r3, [pc, #368]	; (8003df0 <menu+0x3154>)
 8003c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c82:	4613      	mov	r3, r2
 8003c84:	220a      	movs	r2, #10
 8003c86:	4959      	ldr	r1, [pc, #356]	; (8003dec <menu+0x3150>)
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f009 f9b3 	bl	800cff4 <itoa>
			}
			lcd_print(2, 16, snum);
 8003c8e:	4a57      	ldr	r2, [pc, #348]	; (8003dec <menu+0x3150>)
 8003c90:	2110      	movs	r1, #16
 8003c92:	2002      	movs	r0, #2
 8003c94:	f005 fcb5 	bl	8009602 <lcd_print>

			lcd_print(2, 1, "           ");
 8003c98:	4a56      	ldr	r2, [pc, #344]	; (8003df4 <menu+0x3158>)
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	2002      	movs	r0, #2
 8003c9e:	f005 fcb0 	bl	8009602 <lcd_print>
 8003ca2:	e00f      	b.n	8003cc4 <menu+0x3028>
		} else if(calismaSayModu == 1) {
 8003ca4:	4b4e      	ldr	r3, [pc, #312]	; (8003de0 <menu+0x3144>)
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	1e51      	subs	r1, r2, #1
 8003cac:	430b      	orrs	r3, r1
 8003cae:	d109      	bne.n	8003cc4 <menu+0x3028>
			lcd_print(1, 1, calismaSayisiText);
 8003cb0:	4a4c      	ldr	r2, [pc, #304]	; (8003de4 <menu+0x3148>)
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	f005 fca4 	bl	8009602 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8003cba:	4a4f      	ldr	r2, [pc, #316]	; (8003df8 <menu+0x315c>)
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	2002      	movs	r0, #2
 8003cc0:	f005 fc9f 	bl	8009602 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003cc4:	2102      	movs	r1, #2
 8003cc6:	4841      	ldr	r0, [pc, #260]	; (8003dcc <menu+0x3130>)
 8003cc8:	f006 fdf2 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d127      	bne.n	8003d22 <menu+0x3086>
 8003cd2:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <menu+0x3134>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	f083 0301 	eor.w	r3, r3, #1
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d020      	beq.n	8003d22 <menu+0x3086>
 8003ce0:	4b46      	ldr	r3, [pc, #280]	; (8003dfc <menu+0x3160>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01c      	beq.n	8003d22 <menu+0x3086>
			calismaSayModu = calismaSayModu + 1;
 8003ce8:	4b3d      	ldr	r3, [pc, #244]	; (8003de0 <menu+0x3144>)
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	1c51      	adds	r1, r2, #1
 8003cf0:	61b9      	str	r1, [r7, #24]
 8003cf2:	f143 0300 	adc.w	r3, r3, #0
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	4b39      	ldr	r3, [pc, #228]	; (8003de0 <menu+0x3144>)
 8003cfa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003cfe:	e9c3 1200 	strd	r1, r2, [r3]

			if(calismaSayModu > 1){
 8003d02:	4b37      	ldr	r3, [pc, #220]	; (8003de0 <menu+0x3144>)
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	2a02      	cmp	r2, #2
 8003d0a:	f173 0300 	sbcs.w	r3, r3, #0
 8003d0e:	d306      	bcc.n	8003d1e <menu+0x3082>
				calismaSayModu = 0;
 8003d10:	4933      	ldr	r1, [pc, #204]	; (8003de0 <menu+0x3144>)
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	e9c1 2300 	strd	r2, r3, [r1]
			}
			bekle();
 8003d1e:	f000 fa09 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003d22:	2104      	movs	r1, #4
 8003d24:	4829      	ldr	r0, [pc, #164]	; (8003dcc <menu+0x3130>)
 8003d26:	f006 fdc3 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d125      	bne.n	8003d7c <menu+0x30e0>
 8003d30:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <menu+0x3134>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	f083 0301 	eor.w	r3, r3, #1
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01e      	beq.n	8003d7c <menu+0x30e0>
 8003d3e:	4b2f      	ldr	r3, [pc, #188]	; (8003dfc <menu+0x3160>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01a      	beq.n	8003d7c <menu+0x30e0>
			calismaSayModu = calismaSayModu - 1;
 8003d46:	4b26      	ldr	r3, [pc, #152]	; (8003de0 <menu+0x3144>)
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	1e51      	subs	r1, r2, #1
 8003d4e:	6139      	str	r1, [r7, #16]
 8003d50:	f143 33ff 	adc.w	r3, r3, #4294967295
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <menu+0x3144>)
 8003d58:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d5c:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(calismaSayModu > 0) {
 8003d60:	4b1f      	ldr	r3, [pc, #124]	; (8003de0 <menu+0x3144>)
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	d006      	beq.n	8003d78 <menu+0x30dc>
		   		calismaSayModu = 1;
 8003d6a:	491d      	ldr	r1, [pc, #116]	; (8003de0 <menu+0x3144>)
 8003d6c:	f04f 0201 	mov.w	r2, #1
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
			bekle();
 8003d78:	f000 f9dc 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d7c:	2108      	movs	r1, #8
 8003d7e:	4813      	ldr	r0, [pc, #76]	; (8003dcc <menu+0x3130>)
 8003d80:	f006 fd96 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d152      	bne.n	8003e30 <menu+0x3194>
 8003d8a:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <menu+0x3134>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	f083 0301 	eor.w	r3, r3, #1
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d04b      	beq.n	8003e30 <menu+0x3194>
			if(demoMode == 1) {
 8003d98:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <menu+0x3128>)
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	1e51      	subs	r1, r2, #1
 8003da0:	430b      	orrs	r3, r1
 8003da2:	d12d      	bne.n	8003e00 <menu+0x3164>
				calismaSayisiDemo = 0;
 8003da4:	4910      	ldr	r1, [pc, #64]	; (8003de8 <menu+0x314c>)
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[28] = 0;
 8003db2:	4908      	ldr	r1, [pc, #32]	; (8003dd4 <menu+0x3138>)
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
 8003dc0:	e02c      	b.n	8003e1c <menu+0x3180>
 8003dc2:	bf00      	nop
 8003dc4:	200011a8 	.word	0x200011a8
 8003dc8:	200013e4 	.word	0x200013e4
 8003dcc:	40010800 	.word	0x40010800
 8003dd0:	2000121b 	.word	0x2000121b
 8003dd4:	20000d08 	.word	0x20000d08
 8003dd8:	20001218 	.word	0x20001218
 8003ddc:	200010b8 	.word	0x200010b8
 8003de0:	200011b8 	.word	0x200011b8
 8003de4:	20001740 	.word	0x20001740
 8003de8:	200010b0 	.word	0x200010b0
 8003dec:	20001078 	.word	0x20001078
 8003df0:	200010a8 	.word	0x200010a8
 8003df4:	0800d11c 	.word	0x0800d11c
 8003df8:	20001754 	.word	0x20001754
 8003dfc:	2000122d 	.word	0x2000122d
			} else {
				calismaSayisi = 0;
 8003e00:	4989      	ldr	r1, [pc, #548]	; (8004028 <menu+0x338c>)
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[27] = 0;
 8003e0e:	4987      	ldr	r1, [pc, #540]	; (800402c <menu+0x3390>)
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
			}
			calismaSayModu = 0;
 8003e1c:	4984      	ldr	r1, [pc, #528]	; (8004030 <menu+0x3394>)
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	e9c1 2300 	strd	r2, r3, [r1]
			hafizaYaz = 1;
 8003e2a:	4b82      	ldr	r3, [pc, #520]	; (8004034 <menu+0x3398>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003e30:	4b81      	ldr	r3, [pc, #516]	; (8004038 <menu+0x339c>)
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e36:	f1a2 011e 	sub.w	r1, r2, #30
 8003e3a:	430b      	orrs	r3, r1
 8003e3c:	f040 808a 	bne.w	8003f54 <menu+0x32b8>
		calismaSayModu = 0;
 8003e40:	497b      	ldr	r1, [pc, #492]	; (8004030 <menu+0x3394>)
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	e9c1 2300 	strd	r2, r3, [r1]

		lcd_print(1, 1, dilSecimText);
 8003e4e:	4a7b      	ldr	r2, [pc, #492]	; (800403c <menu+0x33a0>)
 8003e50:	2101      	movs	r1, #1
 8003e52:	2001      	movs	r0, #1
 8003e54:	f005 fbd5 	bl	8009602 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 8003e58:	4a79      	ldr	r2, [pc, #484]	; (8004040 <menu+0x33a4>)
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	2002      	movs	r0, #2
 8003e5e:	f005 fbd0 	bl	8009602 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e62:	2102      	movs	r1, #2
 8003e64:	4877      	ldr	r0, [pc, #476]	; (8004044 <menu+0x33a8>)
 8003e66:	f006 fd23 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d12a      	bne.n	8003ec6 <menu+0x322a>
 8003e70:	4b75      	ldr	r3, [pc, #468]	; (8004048 <menu+0x33ac>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	f083 0301 	eor.w	r3, r3, #1
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d023      	beq.n	8003ec6 <menu+0x322a>
			dilSecim = dilSecim + 1;
 8003e7e:	4b73      	ldr	r3, [pc, #460]	; (800404c <menu+0x33b0>)
 8003e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e84:	1c51      	adds	r1, r2, #1
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	f143 0300 	adc.w	r3, r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	4b6f      	ldr	r3, [pc, #444]	; (800404c <menu+0x33b0>)
 8003e90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e94:	e9c3 1200 	strd	r1, r2, [r3]

			if(dilSecim > 1) {
 8003e98:	4b6c      	ldr	r3, [pc, #432]	; (800404c <menu+0x33b0>)
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	2a02      	cmp	r2, #2
 8003ea0:	f173 0300 	sbcs.w	r3, r3, #0
 8003ea4:	d306      	bcc.n	8003eb4 <menu+0x3218>
				dilSecim = 0;
 8003ea6:	4969      	ldr	r1, [pc, #420]	; (800404c <menu+0x33b0>)
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	e9c1 2300 	strd	r2, r3, [r1]
			}
			loadMenuTexts(dilSecim);
 8003eb4:	4b65      	ldr	r3, [pc, #404]	; (800404c <menu+0x33b0>)
 8003eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eba:	b2d3      	uxtb	r3, r2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f003 ffdd 	bl	8007e7c <loadMenuTexts>

			bekle();
 8003ec2:	f000 f937 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ec6:	2104      	movs	r1, #4
 8003ec8:	485e      	ldr	r0, [pc, #376]	; (8004044 <menu+0x33a8>)
 8003eca:	f006 fcf1 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d128      	bne.n	8003f26 <menu+0x328a>
 8003ed4:	4b5c      	ldr	r3, [pc, #368]	; (8004048 <menu+0x33ac>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	f083 0301 	eor.w	r3, r3, #1
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d021      	beq.n	8003f26 <menu+0x328a>
			dilSecim = dilSecim - 1;
 8003ee2:	4b5a      	ldr	r3, [pc, #360]	; (800404c <menu+0x33b0>)
 8003ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee8:	1e51      	subs	r1, r2, #1
 8003eea:	6039      	str	r1, [r7, #0]
 8003eec:	f143 33ff 	adc.w	r3, r3, #4294967295
 8003ef0:	607b      	str	r3, [r7, #4]
 8003ef2:	4b56      	ldr	r3, [pc, #344]	; (800404c <menu+0x33b0>)
 8003ef4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003ef8:	e9c3 1200 	strd	r1, r2, [r3]

		   	if(dilSecim > 0) {
 8003efc:	4b53      	ldr	r3, [pc, #332]	; (800404c <menu+0x33b0>)
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	d006      	beq.n	8003f14 <menu+0x3278>
		   		dilSecim = 1;
 8003f06:	4951      	ldr	r1, [pc, #324]	; (800404c <menu+0x33b0>)
 8003f08:	f04f 0201 	mov.w	r2, #1
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	e9c1 2300 	strd	r2, r3, [r1]
		   	}
		   	loadMenuTexts(dilSecim);
 8003f14:	4b4d      	ldr	r3, [pc, #308]	; (800404c <menu+0x33b0>)
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	b2d3      	uxtb	r3, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f003 ffad 	bl	8007e7c <loadMenuTexts>

			bekle();
 8003f22:	f000 f907 	bl	8004134 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f26:	2108      	movs	r1, #8
 8003f28:	4846      	ldr	r0, [pc, #280]	; (8004044 <menu+0x33a8>)
 8003f2a:	f006 fcc1 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d10f      	bne.n	8003f54 <menu+0x32b8>
 8003f34:	4b44      	ldr	r3, [pc, #272]	; (8004048 <menu+0x33ac>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	f083 0301 	eor.w	r3, r3, #1
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <menu+0x32b8>
			eepromData[33] = dilSecim;
 8003f42:	4b42      	ldr	r3, [pc, #264]	; (800404c <menu+0x33b0>)
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	4938      	ldr	r1, [pc, #224]	; (800402c <menu+0x3390>)
 8003f4a:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
			hafizaYaz = 1;
 8003f4e:	4b39      	ldr	r3, [pc, #228]	; (8004034 <menu+0x3398>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003f54:	4b38      	ldr	r3, [pc, #224]	; (8004038 <menu+0x339c>)
 8003f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5a:	f1a2 011f 	sub.w	r1, r2, #31
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	d15c      	bne.n	800401c <menu+0x3380>
		lcd_print(1, 1, menudenCikisText);
 8003f62:	4a3b      	ldr	r2, [pc, #236]	; (8004050 <menu+0x33b4>)
 8003f64:	2101      	movs	r1, #1
 8003f66:	2001      	movs	r0, #1
 8003f68:	f005 fb4b 	bl	8009602 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003f6c:	4a39      	ldr	r2, [pc, #228]	; (8004054 <menu+0x33b8>)
 8003f6e:	2101      	movs	r1, #1
 8003f70:	2002      	movs	r0, #2
 8003f72:	f005 fb46 	bl	8009602 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003f76:	2108      	movs	r1, #8
 8003f78:	4832      	ldr	r0, [pc, #200]	; (8004044 <menu+0x33a8>)
 8003f7a:	f006 fc99 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d14b      	bne.n	800401c <menu+0x3380>
			menuGiris = 0;
 8003f84:	4934      	ldr	r1, [pc, #208]	; (8004058 <menu+0x33bc>)
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	e9c1 2300 	strd	r2, r3, [r1]

			uint32_t startTick = HAL_GetTick();
 8003f92:	f005 fff5 	bl	8009f80 <HAL_GetTick>
 8003f96:	f8c7 01dc 	str.w	r0, [r7, #476]	; 0x1dc
			        while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003f9a:	e008      	b.n	8003fae <menu+0x3312>
			            if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003f9c:	f005 fff0 	bl	8009f80 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fac:	d806      	bhi.n	8003fbc <menu+0x3320>
			        while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003fae:	482b      	ldr	r0, [pc, #172]	; (800405c <menu+0x33c0>)
 8003fb0:	f007 faa7 	bl	800b502 <HAL_I2C_GetError>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d0f0      	beq.n	8003f9c <menu+0x3300>
 8003fba:	e000      	b.n	8003fbe <menu+0x3322>
			                break;
 8003fbc:	bf00      	nop
			            }
			        }

			        startTick = HAL_GetTick();
 8003fbe:	f005 ffdf 	bl	8009f80 <HAL_GetTick>
 8003fc2:	f8c7 01dc 	str.w	r0, [r7, #476]	; 0x1dc
			        while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003fc6:	e008      	b.n	8003fda <menu+0x333e>
			            if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003fc8:	f005 ffda 	bl	8009f80 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fd8:	d806      	bhi.n	8003fe8 <menu+0x334c>
			        while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003fda:	4820      	ldr	r0, [pc, #128]	; (800405c <menu+0x33c0>)
 8003fdc:	f007 fa84 	bl	800b4e8 <HAL_I2C_GetState>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	d1f0      	bne.n	8003fc8 <menu+0x332c>
 8003fe6:	e000      	b.n	8003fea <menu+0x334e>
			                break;
 8003fe8:	bf00      	nop
			            }
			        }

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8003fea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003fee:	9302      	str	r3, [sp, #8]
 8003ff0:	236e      	movs	r3, #110	; 0x6e
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	4b0d      	ldr	r3, [pc, #52]	; (800402c <menu+0x3390>)
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	236e      	movs	r3, #110	; 0x6e
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	21a0      	movs	r1, #160	; 0xa0
 8003ffe:	4817      	ldr	r0, [pc, #92]	; (800405c <menu+0x33c0>)
 8004000:	f006 ff10 	bl	800ae24 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004004:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004008:	f005 ffc4 	bl	8009f94 <HAL_Delay>

			lcd_clear();
 800400c:	f005 fb0e 	bl	800962c <lcd_clear>
			HAL_Delay(500);
 8004010:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004014:	f005 ffbe 	bl	8009f94 <HAL_Delay>
			NVIC_SystemReset();
 8004018:	f7fc fe2a 	bl	8000c70 <__NVIC_SystemReset>
		}
	}
}
 800401c:	bf00      	nop
 800401e:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 8004022:	46bd      	mov	sp, r7
 8004024:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004028:	200010a8 	.word	0x200010a8
 800402c:	20000d08 	.word	0x20000d08
 8004030:	200011b8 	.word	0x200011b8
 8004034:	20001218 	.word	0x20001218
 8004038:	200010b8 	.word	0x200010b8
 800403c:	20001768 	.word	0x20001768
 8004040:	2000177c 	.word	0x2000177c
 8004044:	40010800 	.word	0x40010800
 8004048:	2000121b 	.word	0x2000121b
 800404c:	200011c0 	.word	0x200011c0
 8004050:	20001790 	.word	0x20001790
 8004054:	200017a4 	.word	0x200017a4
 8004058:	200011a0 	.word	0x200011a0
 800405c:	20001858 	.word	0x20001858

08004060 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d105      	bne.n	800407c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004070:	4a22      	ldr	r2, [pc, #136]	; (80040fc <lcdUpdate+0x9c>)
 8004072:	2101      	movs	r1, #1
 8004074:	2002      	movs	r0, #2
 8004076:	f005 fac4 	bl	8009602 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
	}
}
 800407a:	e03b      	b.n	80040f4 <lcdUpdate+0x94>
	} else if(y==2) {
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d105      	bne.n	800408e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004082:	4a1e      	ldr	r2, [pc, #120]	; (80040fc <lcdUpdate+0x9c>)
 8004084:	2102      	movs	r1, #2
 8004086:	2002      	movs	r0, #2
 8004088:	f005 fabb 	bl	8009602 <lcd_print>
}
 800408c:	e032      	b.n	80040f4 <lcdUpdate+0x94>
	} else if(y==3) {
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	2b03      	cmp	r3, #3
 8004092:	d105      	bne.n	80040a0 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004094:	4a19      	ldr	r2, [pc, #100]	; (80040fc <lcdUpdate+0x9c>)
 8004096:	2103      	movs	r1, #3
 8004098:	2002      	movs	r0, #2
 800409a:	f005 fab2 	bl	8009602 <lcd_print>
}
 800409e:	e029      	b.n	80040f4 <lcdUpdate+0x94>
	} else if(y==4) {
 80040a0:	79fb      	ldrb	r3, [r7, #7]
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d105      	bne.n	80040b2 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80040a6:	4a15      	ldr	r2, [pc, #84]	; (80040fc <lcdUpdate+0x9c>)
 80040a8:	2104      	movs	r1, #4
 80040aa:	2002      	movs	r0, #2
 80040ac:	f005 faa9 	bl	8009602 <lcd_print>
}
 80040b0:	e020      	b.n	80040f4 <lcdUpdate+0x94>
	} else if(y==5) {
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	2b05      	cmp	r3, #5
 80040b6:	d105      	bne.n	80040c4 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80040b8:	4a10      	ldr	r2, [pc, #64]	; (80040fc <lcdUpdate+0x9c>)
 80040ba:	2105      	movs	r1, #5
 80040bc:	2002      	movs	r0, #2
 80040be:	f005 faa0 	bl	8009602 <lcd_print>
}
 80040c2:	e017      	b.n	80040f4 <lcdUpdate+0x94>
	} else if(y==6) {
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	2b06      	cmp	r3, #6
 80040c8:	d105      	bne.n	80040d6 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80040ca:	4a0c      	ldr	r2, [pc, #48]	; (80040fc <lcdUpdate+0x9c>)
 80040cc:	2106      	movs	r1, #6
 80040ce:	2002      	movs	r0, #2
 80040d0:	f005 fa97 	bl	8009602 <lcd_print>
}
 80040d4:	e00e      	b.n	80040f4 <lcdUpdate+0x94>
	} else if (y==7) {
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	2b07      	cmp	r3, #7
 80040da:	d10b      	bne.n	80040f4 <lcdUpdate+0x94>
		lcd_clear();
 80040dc:	f005 faa6 	bl	800962c <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 80040e0:	4a07      	ldr	r2, [pc, #28]	; (8004100 <lcdUpdate+0xa0>)
 80040e2:	2101      	movs	r1, #1
 80040e4:	2001      	movs	r0, #1
 80040e6:	f005 fa8c 	bl	8009602 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 80040ea:	4a06      	ldr	r2, [pc, #24]	; (8004104 <lcdUpdate+0xa4>)
 80040ec:	2101      	movs	r1, #1
 80040ee:	2002      	movs	r0, #2
 80040f0:	f005 fa87 	bl	8009602 <lcd_print>
}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	0800d128 	.word	0x0800d128
 8004100:	20000058 	.word	0x20000058
 8004104:	2000006c 	.word	0x2000006c

08004108 <checkLCDBacklight>:

void checkLCDBacklight() {
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 800410c:	4b07      	ldr	r3, [pc, #28]	; (800412c <checkLCDBacklight+0x24>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <checkLCDBacklight+0x28>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b3b      	cmp	r3, #59	; 0x3b
 8004118:	d903      	bls.n	8004122 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 800411a:	2000      	movs	r0, #0
 800411c:	f005 fa90 	bl	8009640 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004120:	e002      	b.n	8004128 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004122:	2001      	movs	r0, #1
 8004124:	f005 fa8c 	bl	8009640 <lcd_backlight>
}
 8004128:	bf00      	nop
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20001088 	.word	0x20001088
 8004130:	200010a4 	.word	0x200010a4

08004134 <bekle>:

void bekle() {
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
	timer1=millis;
 8004138:	4b47      	ldr	r3, [pc, #284]	; (8004258 <bekle+0x124>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a47      	ldr	r2, [pc, #284]	; (800425c <bekle+0x128>)
 800413e:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004140:	e002      	b.n	8004148 <bekle+0x14>
    	butonKontrol = 1;
 8004142:	4b47      	ldr	r3, [pc, #284]	; (8004260 <bekle+0x12c>)
 8004144:	2201      	movs	r2, #1
 8004146:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004148:	2101      	movs	r1, #1
 800414a:	4846      	ldr	r0, [pc, #280]	; (8004264 <bekle+0x130>)
 800414c:	f006 fbb0 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004150:	4603      	mov	r3, r0
 8004152:	2b01      	cmp	r3, #1
 8004154:	d109      	bne.n	800416a <bekle+0x36>
 8004156:	4b40      	ldr	r3, [pc, #256]	; (8004258 <bekle+0x124>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4b40      	ldr	r3, [pc, #256]	; (800425c <bekle+0x128>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d0ef      	beq.n	8004142 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004162:	e002      	b.n	800416a <bekle+0x36>
    	butonKontrol = 1;
 8004164:	4b3e      	ldr	r3, [pc, #248]	; (8004260 <bekle+0x12c>)
 8004166:	2201      	movs	r2, #1
 8004168:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800416a:	2108      	movs	r1, #8
 800416c:	483e      	ldr	r0, [pc, #248]	; (8004268 <bekle+0x134>)
 800416e:	f006 fb9f 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004172:	4603      	mov	r3, r0
 8004174:	2b01      	cmp	r3, #1
 8004176:	d109      	bne.n	800418c <bekle+0x58>
 8004178:	4b37      	ldr	r3, [pc, #220]	; (8004258 <bekle+0x124>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b37      	ldr	r3, [pc, #220]	; (800425c <bekle+0x128>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d0ef      	beq.n	8004164 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004184:	e002      	b.n	800418c <bekle+0x58>
    	butonKontrol = 1;
 8004186:	4b36      	ldr	r3, [pc, #216]	; (8004260 <bekle+0x12c>)
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800418c:	2102      	movs	r1, #2
 800418e:	4835      	ldr	r0, [pc, #212]	; (8004264 <bekle+0x130>)
 8004190:	f006 fb8e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004194:	4603      	mov	r3, r0
 8004196:	2b01      	cmp	r3, #1
 8004198:	d109      	bne.n	80041ae <bekle+0x7a>
 800419a:	4b2f      	ldr	r3, [pc, #188]	; (8004258 <bekle+0x124>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4b2f      	ldr	r3, [pc, #188]	; (800425c <bekle+0x128>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d0ef      	beq.n	8004186 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041a6:	e002      	b.n	80041ae <bekle+0x7a>
    	butonKontrol = 1;
 80041a8:	4b2d      	ldr	r3, [pc, #180]	; (8004260 <bekle+0x12c>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041ae:	2104      	movs	r1, #4
 80041b0:	482c      	ldr	r0, [pc, #176]	; (8004264 <bekle+0x130>)
 80041b2:	f006 fb7d 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d109      	bne.n	80041d0 <bekle+0x9c>
 80041bc:	4b26      	ldr	r3, [pc, #152]	; (8004258 <bekle+0x124>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4b26      	ldr	r3, [pc, #152]	; (800425c <bekle+0x128>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d0ef      	beq.n	80041a8 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041c8:	e002      	b.n	80041d0 <bekle+0x9c>
    	butonKontrol = 1;
 80041ca:	4b25      	ldr	r3, [pc, #148]	; (8004260 <bekle+0x12c>)
 80041cc:	2201      	movs	r2, #1
 80041ce:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041d0:	2108      	movs	r1, #8
 80041d2:	4824      	ldr	r0, [pc, #144]	; (8004264 <bekle+0x130>)
 80041d4:	f006 fb6c 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d109      	bne.n	80041f2 <bekle+0xbe>
 80041de:	4b1e      	ldr	r3, [pc, #120]	; (8004258 <bekle+0x124>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b1e      	ldr	r3, [pc, #120]	; (800425c <bekle+0x128>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d0ef      	beq.n	80041ca <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80041ea:	e002      	b.n	80041f2 <bekle+0xbe>
    	butonKontrol = 1;
 80041ec:	4b1c      	ldr	r3, [pc, #112]	; (8004260 <bekle+0x12c>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80041f2:	2180      	movs	r1, #128	; 0x80
 80041f4:	481c      	ldr	r0, [pc, #112]	; (8004268 <bekle+0x134>)
 80041f6:	f006 fb5b 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <bekle+0xe0>
 8004200:	4b15      	ldr	r3, [pc, #84]	; (8004258 <bekle+0x124>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4b15      	ldr	r3, [pc, #84]	; (800425c <bekle+0x128>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d0ef      	beq.n	80041ec <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800420c:	e002      	b.n	8004214 <bekle+0xe0>
    	butonKontrol = 1;
 800420e:	4b14      	ldr	r3, [pc, #80]	; (8004260 <bekle+0x12c>)
 8004210:	2201      	movs	r2, #1
 8004212:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004214:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004218:	4813      	ldr	r0, [pc, #76]	; (8004268 <bekle+0x134>)
 800421a:	f006 fb49 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d109      	bne.n	8004238 <bekle+0x104>
 8004224:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <bekle+0x124>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4b0c      	ldr	r3, [pc, #48]	; (800425c <bekle+0x128>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d0ee      	beq.n	800420e <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004230:	e002      	b.n	8004238 <bekle+0x104>
    	butonKontrol = 1;
 8004232:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <bekle+0x12c>)
 8004234:	2201      	movs	r2, #1
 8004236:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800423c:	480a      	ldr	r0, [pc, #40]	; (8004268 <bekle+0x134>)
 800423e:	f006 fb37 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d105      	bne.n	8004254 <bekle+0x120>
 8004248:	4b03      	ldr	r3, [pc, #12]	; (8004258 <bekle+0x124>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4b03      	ldr	r3, [pc, #12]	; (800425c <bekle+0x128>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d0ee      	beq.n	8004232 <bekle+0xfe>
    }

}
 8004254:	bf00      	nop
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20001088 	.word	0x20001088
 800425c:	20001090 	.word	0x20001090
 8004260:	2000121b 	.word	0x2000121b
 8004264:	40010800 	.word	0x40010800
 8004268:	40011000 	.word	0x40011000

0800426c <buttonCheck>:

uint8_t buttonCheck(void) {
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8004270:	2101      	movs	r1, #1
 8004272:	4815      	ldr	r0, [pc, #84]	; (80042c8 <buttonCheck+0x5c>)
 8004274:	f006 fb1c 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004278:	4603      	mov	r3, r0
 800427a:	2b01      	cmp	r3, #1
 800427c:	d01b      	beq.n	80042b6 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 800427e:	2108      	movs	r1, #8
 8004280:	4812      	ldr	r0, [pc, #72]	; (80042cc <buttonCheck+0x60>)
 8004282:	f006 fb15 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004286:	4603      	mov	r3, r0
 8004288:	2b01      	cmp	r3, #1
 800428a:	d014      	beq.n	80042b6 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 800428c:	2102      	movs	r1, #2
 800428e:	480e      	ldr	r0, [pc, #56]	; (80042c8 <buttonCheck+0x5c>)
 8004290:	f006 fb0e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004294:	4603      	mov	r3, r0
 8004296:	2b01      	cmp	r3, #1
 8004298:	d00d      	beq.n	80042b6 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 800429a:	2104      	movs	r1, #4
 800429c:	480a      	ldr	r0, [pc, #40]	; (80042c8 <buttonCheck+0x5c>)
 800429e:	f006 fb07 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d006      	beq.n	80042b6 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 80042a8:	2108      	movs	r1, #8
 80042aa:	4807      	ldr	r0, [pc, #28]	; (80042c8 <buttonCheck+0x5c>)
 80042ac:	f006 fb00 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d104      	bne.n	80042c0 <buttonCheck+0x54>
		backLightTimer = 0;
 80042b6:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <buttonCheck+0x64>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
		return 1;
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <buttonCheck+0x56>
	}
	return 0;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40010800 	.word	0x40010800
 80042cc:	40011000 	.word	0x40011000
 80042d0:	200010a4 	.word	0x200010a4

080042d4 <checkBasincSalteri>:

void checkBasincSalteri() {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80042d8:	4b1a      	ldr	r3, [pc, #104]	; (8004344 <checkBasincSalteri+0x70>)
 80042da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042de:	4313      	orrs	r3, r2
 80042e0:	d106      	bne.n	80042f0 <checkBasincSalteri+0x1c>
		basincVar=1;
 80042e2:	4919      	ldr	r1, [pc, #100]	; (8004348 <checkBasincSalteri+0x74>)
 80042e4:	f04f 0201 	mov.w	r2, #1
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(basincSalteri==1) {
 80042f0:	4b14      	ldr	r3, [pc, #80]	; (8004344 <checkBasincSalteri+0x70>)
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	1e51      	subs	r1, r2, #1
 80042f8:	430b      	orrs	r3, r1
 80042fa:	d121      	bne.n	8004340 <checkBasincSalteri+0x6c>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80042fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004300:	4812      	ldr	r0, [pc, #72]	; (800434c <checkBasincSalteri+0x78>)
 8004302:	f006 fad5 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10e      	bne.n	800432a <checkBasincSalteri+0x56>
			if(millis-timer5>=3) {
 800430c:	4b10      	ldr	r3, [pc, #64]	; (8004350 <checkBasincSalteri+0x7c>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4b10      	ldr	r3, [pc, #64]	; (8004354 <checkBasincSalteri+0x80>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d912      	bls.n	8004340 <checkBasincSalteri+0x6c>
				basincVar=1;
 800431a:	490b      	ldr	r1, [pc, #44]	; (8004348 <checkBasincSalteri+0x74>)
 800431c:	f04f 0201 	mov.w	r2, #1
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	e9c1 2300 	strd	r2, r3, [r1]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004328:	e00a      	b.n	8004340 <checkBasincSalteri+0x6c>
			timer5=millis;
 800432a:	4b09      	ldr	r3, [pc, #36]	; (8004350 <checkBasincSalteri+0x7c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a09      	ldr	r2, [pc, #36]	; (8004354 <checkBasincSalteri+0x80>)
 8004330:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004332:	4905      	ldr	r1, [pc, #20]	; (8004348 <checkBasincSalteri+0x74>)
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004340:	bf00      	nop
 8004342:	bd80      	pop	{r7, pc}
 8004344:	200010f0 	.word	0x200010f0
 8004348:	200010d0 	.word	0x200010d0
 800434c:	40011000 	.word	0x40011000
 8004350:	20001088 	.word	0x20001088
 8004354:	200010a0 	.word	0x200010a0

08004358 <checkBasGonder>:

void checkBasGonder() {
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 800435c:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <checkBasGonder+0x80>)
 800435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004362:	1e51      	subs	r1, r2, #1
 8004364:	430b      	orrs	r3, r1
 8004366:	d10c      	bne.n	8004382 <checkBasGonder+0x2a>
 8004368:	4b1c      	ldr	r3, [pc, #112]	; (80043dc <checkBasGonder+0x84>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <checkBasGonder+0x2a>
 8004370:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <checkBasGonder+0x88>)
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	4313      	orrs	r3, r2
 8004378:	d103      	bne.n	8004382 <checkBasGonder+0x2a>
		basgondercalisyukari=1;
 800437a:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <checkBasGonder+0x8c>)
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	e009      	b.n	8004396 <checkBasGonder+0x3e>
	} else if(yukarimotorcalisiyor==0) {
 8004382:	4b16      	ldr	r3, [pc, #88]	; (80043dc <checkBasGonder+0x84>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	f083 0301 	eor.w	r3, r3, #1
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <checkBasGonder+0x3e>
		basgondercalisyukari=0;
 8004390:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <checkBasGonder+0x8c>)
 8004392:	2200      	movs	r2, #0
 8004394:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004396:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <checkBasGonder+0x80>)
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	1e51      	subs	r1, r2, #1
 800439e:	430b      	orrs	r3, r1
 80043a0:	d10c      	bne.n	80043bc <checkBasGonder+0x64>
 80043a2:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <checkBasGonder+0x90>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d008      	beq.n	80043bc <checkBasGonder+0x64>
 80043aa:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <checkBasGonder+0x88>)
 80043ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	d103      	bne.n	80043bc <checkBasGonder+0x64>
		basgondercalisasagi=1;
 80043b4:	4b0d      	ldr	r3, [pc, #52]	; (80043ec <checkBasGonder+0x94>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 80043ba:	e009      	b.n	80043d0 <checkBasGonder+0x78>
	} else if(asagivalfcalisiyor==0) {
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <checkBasGonder+0x90>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	f083 0301 	eor.w	r3, r3, #1
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <checkBasGonder+0x78>
		basgondercalisasagi=0;
 80043ca:	4b08      	ldr	r3, [pc, #32]	; (80043ec <checkBasGonder+0x94>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
}
 80043d0:	bf00      	nop
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr
 80043d8:	200010c0 	.word	0x200010c0
 80043dc:	20001221 	.word	0x20001221
 80043e0:	20001130 	.word	0x20001130
 80043e4:	20001228 	.word	0x20001228
 80043e8:	20001224 	.word	0x20001224
 80043ec:	20001229 	.word	0x20001229

080043f0 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80043f4:	4b28      	ldr	r3, [pc, #160]	; (8004498 <checkKapiSecimleri+0xa8>)
 80043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	d102      	bne.n	8004404 <checkKapiSecimleri+0x14>
		kapiSivicVar=1;
 80043fe:	4b27      	ldr	r3, [pc, #156]	; (800449c <checkKapiSecimleri+0xac>)
 8004400:	2201      	movs	r2, #1
 8004402:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004404:	4b24      	ldr	r3, [pc, #144]	; (8004498 <checkKapiSecimleri+0xa8>)
 8004406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440a:	1e51      	subs	r1, r2, #1
 800440c:	430b      	orrs	r3, r1
 800440e:	d10e      	bne.n	800442e <checkKapiSecimleri+0x3e>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004410:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004414:	4822      	ldr	r0, [pc, #136]	; (80044a0 <checkKapiSecimleri+0xb0>)
 8004416:	f006 fa4b 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d103      	bne.n	8004428 <checkKapiSecimleri+0x38>
			kapiSivicVar=1;
 8004420:	4b1e      	ldr	r3, [pc, #120]	; (800449c <checkKapiSecimleri+0xac>)
 8004422:	2201      	movs	r2, #1
 8004424:	701a      	strb	r2, [r3, #0]
 8004426:	e002      	b.n	800442e <checkKapiSecimleri+0x3e>
		} else {
			kapiSivicVar=0;
 8004428:	4b1c      	ldr	r3, [pc, #112]	; (800449c <checkKapiSecimleri+0xac>)
 800442a:	2200      	movs	r2, #0
 800442c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 800442e:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <checkKapiSecimleri+0xa8>)
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	1e91      	subs	r1, r2, #2
 8004436:	430b      	orrs	r3, r1
 8004438:	d10e      	bne.n	8004458 <checkKapiSecimleri+0x68>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 800443a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800443e:	4818      	ldr	r0, [pc, #96]	; (80044a0 <checkKapiSecimleri+0xb0>)
 8004440:	f006 fa36 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d103      	bne.n	8004452 <checkKapiSecimleri+0x62>
			kapiSivicVar=1;
 800444a:	4b14      	ldr	r3, [pc, #80]	; (800449c <checkKapiSecimleri+0xac>)
 800444c:	2201      	movs	r2, #1
 800444e:	701a      	strb	r2, [r3, #0]
 8004450:	e002      	b.n	8004458 <checkKapiSecimleri+0x68>
		} else {
			kapiSivicVar=0;
 8004452:	4b12      	ldr	r3, [pc, #72]	; (800449c <checkKapiSecimleri+0xac>)
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004458:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <checkKapiSecimleri+0xa8>)
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	1ed1      	subs	r1, r2, #3
 8004460:	430b      	orrs	r3, r1
 8004462:	d116      	bne.n	8004492 <checkKapiSecimleri+0xa2>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004464:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004468:	480d      	ldr	r0, [pc, #52]	; (80044a0 <checkKapiSecimleri+0xb0>)
 800446a:	f006 fa21 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10b      	bne.n	800448c <checkKapiSecimleri+0x9c>
 8004474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004478:	4809      	ldr	r0, [pc, #36]	; (80044a0 <checkKapiSecimleri+0xb0>)
 800447a:	f006 fa19 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d103      	bne.n	800448c <checkKapiSecimleri+0x9c>
			kapiSivicVar=1;
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <checkKapiSecimleri+0xac>)
 8004486:	2201      	movs	r2, #1
 8004488:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 800448a:	e002      	b.n	8004492 <checkKapiSecimleri+0xa2>
			kapiSivicVar=0;
 800448c:	4b03      	ldr	r3, [pc, #12]	; (800449c <checkKapiSecimleri+0xac>)
 800448e:	2200      	movs	r2, #0
 8004490:	701a      	strb	r2, [r3, #0]
}
 8004492:	bf00      	nop
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	200010f8 	.word	0x200010f8
 800449c:	2000123f 	.word	0x2000123f
 80044a0:	40010800 	.word	0x40010800

080044a4 <checkAktifCalisma>:

void checkAktifCalisma() {
 80044a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a8:	b08c      	sub	sp, #48	; 0x30
 80044aa:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 80044ac:	4b6b      	ldr	r3, [pc, #428]	; (800465c <checkAktifCalisma+0x1b8>)
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f041 8460 	bne.w	8005d78 <checkAktifCalisma+0x18d4>
 80044b8:	4b69      	ldr	r3, [pc, #420]	; (8004660 <checkAktifCalisma+0x1bc>)
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	4313      	orrs	r3, r2
 80044c0:	f041 845a 	bne.w	8005d78 <checkAktifCalisma+0x18d4>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 80044c4:	4b67      	ldr	r3, [pc, #412]	; (8004664 <checkAktifCalisma+0x1c0>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d11e      	bne.n	800450a <checkAktifCalisma+0x66>
 80044cc:	4b66      	ldr	r3, [pc, #408]	; (8004668 <checkAktifCalisma+0x1c4>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d11a      	bne.n	800450a <checkAktifCalisma+0x66>
 80044d4:	4b65      	ldr	r3, [pc, #404]	; (800466c <checkAktifCalisma+0x1c8>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00c      	beq.n	80044f6 <checkAktifCalisma+0x52>
 80044dc:	4b64      	ldr	r3, [pc, #400]	; (8004670 <checkAktifCalisma+0x1cc>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	f083 0301 	eor.w	r3, r3, #1
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <checkAktifCalisma+0x52>
 80044ea:	4b62      	ldr	r3, [pc, #392]	; (8004674 <checkAktifCalisma+0x1d0>)
 80044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f0:	1e51      	subs	r1, r2, #1
 80044f2:	430b      	orrs	r3, r1
 80044f4:	d009      	beq.n	800450a <checkAktifCalisma+0x66>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 80044f6:	4b60      	ldr	r3, [pc, #384]	; (8004678 <checkAktifCalisma+0x1d4>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d01e      	beq.n	800453c <checkAktifCalisma+0x98>
 80044fe:	4b5f      	ldr	r3, [pc, #380]	; (800467c <checkAktifCalisma+0x1d8>)
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	1e51      	subs	r1, r2, #1
 8004506:	430b      	orrs	r3, r1
 8004508:	d118      	bne.n	800453c <checkAktifCalisma+0x98>
 800450a:	4b5d      	ldr	r3, [pc, #372]	; (8004680 <checkAktifCalisma+0x1dc>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d103      	bne.n	800451a <checkAktifCalisma+0x76>
 8004512:	4b5c      	ldr	r3, [pc, #368]	; (8004684 <checkAktifCalisma+0x1e0>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d010      	beq.n	800453c <checkAktifCalisma+0x98>
 800451a:	4b5b      	ldr	r3, [pc, #364]	; (8004688 <checkAktifCalisma+0x1e4>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00c      	beq.n	800453c <checkAktifCalisma+0x98>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004522:	2201      	movs	r2, #1
 8004524:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004528:	4858      	ldr	r0, [pc, #352]	; (800468c <checkAktifCalisma+0x1e8>)
 800452a:	f006 f9d8 	bl	800a8de <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 800452e:	4a58      	ldr	r2, [pc, #352]	; (8004690 <checkAktifCalisma+0x1ec>)
 8004530:	2301      	movs	r3, #1
 8004532:	7013      	strb	r3, [r2, #0]
					CalismaSayisiYukari=1;
 8004534:	4a57      	ldr	r2, [pc, #348]	; (8004694 <checkAktifCalisma+0x1f0>)
 8004536:	2301      	movs	r3, #1
 8004538:	7013      	strb	r3, [r2, #0]
 800453a:	e008      	b.n	800454e <checkAktifCalisma+0xaa>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800453c:	2200      	movs	r2, #0
 800453e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004542:	4852      	ldr	r0, [pc, #328]	; (800468c <checkAktifCalisma+0x1e8>)
 8004544:	f006 f9cb 	bl	800a8de <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8004548:	4a51      	ldr	r2, [pc, #324]	; (8004690 <checkAktifCalisma+0x1ec>)
 800454a:	2300      	movs	r3, #0
 800454c:	7013      	strb	r3, [r2, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 800454e:	4b44      	ldr	r3, [pc, #272]	; (8004660 <checkAktifCalisma+0x1bc>)
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	4313      	orrs	r3, r2
 8004556:	d165      	bne.n	8004624 <checkAktifCalisma+0x180>
 8004558:	4b4a      	ldr	r3, [pc, #296]	; (8004684 <checkAktifCalisma+0x1e0>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d103      	bne.n	8004568 <checkAktifCalisma+0xc4>
 8004560:	4b47      	ldr	r3, [pc, #284]	; (8004680 <checkAktifCalisma+0x1dc>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d05d      	beq.n	8004624 <checkAktifCalisma+0x180>
 8004568:	4b47      	ldr	r3, [pc, #284]	; (8004688 <checkAktifCalisma+0x1e4>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d059      	beq.n	8004624 <checkAktifCalisma+0x180>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004570:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004574:	4845      	ldr	r0, [pc, #276]	; (800468c <checkAktifCalisma+0x1e8>)
 8004576:	f006 f99b 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <checkAktifCalisma+0xe4>
 8004580:	4b45      	ldr	r3, [pc, #276]	; (8004698 <checkAktifCalisma+0x1f4>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d04d      	beq.n	8004624 <checkAktifCalisma+0x180>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004588:	2102      	movs	r1, #2
 800458a:	4844      	ldr	r0, [pc, #272]	; (800469c <checkAktifCalisma+0x1f8>)
 800458c:	f006 f990 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d146      	bne.n	8004624 <checkAktifCalisma+0x180>
							&& (basincVar)
 8004596:	4b42      	ldr	r3, [pc, #264]	; (80046a0 <checkAktifCalisma+0x1fc>)
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	4313      	orrs	r3, r2
 800459e:	d041      	beq.n	8004624 <checkAktifCalisma+0x180>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80045a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045a4:	4839      	ldr	r0, [pc, #228]	; (800468c <checkAktifCalisma+0x1e8>)
 80045a6:	f006 f983 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d10e      	bne.n	80045ce <checkAktifCalisma+0x12a>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80045b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045b4:	4835      	ldr	r0, [pc, #212]	; (800468c <checkAktifCalisma+0x1e8>)
 80045b6:	f006 f97b 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d106      	bne.n	80045ce <checkAktifCalisma+0x12a>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80045c0:	2140      	movs	r1, #64	; 0x40
 80045c2:	4836      	ldr	r0, [pc, #216]	; (800469c <checkAktifCalisma+0x1f8>)
 80045c4:	f006 f974 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d003      	beq.n	80045d6 <checkAktifCalisma+0x132>
 80045ce:	4b25      	ldr	r3, [pc, #148]	; (8004664 <checkAktifCalisma+0x1c0>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d026      	beq.n	8004624 <checkAktifCalisma+0x180>
							&& (asagivalfcalisiyor==0)
 80045d6:	4b25      	ldr	r3, [pc, #148]	; (800466c <checkAktifCalisma+0x1c8>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	f083 0301 	eor.w	r3, r3, #1
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01f      	beq.n	8004624 <checkAktifCalisma+0x180>
							&& (devmotoryukaricalisiyor==0)
 80045e4:	4b20      	ldr	r3, [pc, #128]	; (8004668 <checkAktifCalisma+0x1c4>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	f083 0301 	eor.w	r3, r3, #1
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d018      	beq.n	8004624 <checkAktifCalisma+0x180>
							&& (devmotorasagicalisiyor==0)
 80045f2:	4b21      	ldr	r3, [pc, #132]	; (8004678 <checkAktifCalisma+0x1d4>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	f083 0301 	eor.w	r3, r3, #1
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d011      	beq.n	8004624 <checkAktifCalisma+0x180>
							&&(devyukarivalfcalisiyor==0)
 8004600:	4b28      	ldr	r3, [pc, #160]	; (80046a4 <checkAktifCalisma+0x200>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	f083 0301 	eor.w	r3, r3, #1
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <checkAktifCalisma+0x180>
							&&(devasagivalfcalisiyor==0)) {
 800460e:	4b26      	ldr	r3, [pc, #152]	; (80046a8 <checkAktifCalisma+0x204>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	f083 0301 	eor.w	r3, r3, #1
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <checkAktifCalisma+0x180>
					yukarimotorcalisiyor=1;
 800461c:	4a11      	ldr	r2, [pc, #68]	; (8004664 <checkAktifCalisma+0x1c0>)
 800461e:	2301      	movs	r3, #1
 8004620:	7013      	strb	r3, [r2, #0]
 8004622:	e002      	b.n	800462a <checkAktifCalisma+0x186>
				} else {
					yukarimotorcalisiyor=0;
 8004624:	4a0f      	ldr	r2, [pc, #60]	; (8004664 <checkAktifCalisma+0x1c0>)
 8004626:	2300      	movs	r3, #0
 8004628:	7013      	strb	r3, [r2, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800462a:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <checkAktifCalisma+0x1c0>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d03e      	beq.n	80046b0 <checkAktifCalisma+0x20c>
 8004632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004636:	4819      	ldr	r0, [pc, #100]	; (800469c <checkAktifCalisma+0x1f8>)
 8004638:	f006 f93a 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800463c:	4603      	mov	r3, r0
 800463e:	2b01      	cmp	r3, #1
 8004640:	d136      	bne.n	80046b0 <checkAktifCalisma+0x20c>
 8004642:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <checkAktifCalisma+0x208>)
 8004644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004648:	4313      	orrs	r3, r2
 800464a:	d031      	beq.n	80046b0 <checkAktifCalisma+0x20c>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800464c:	2201      	movs	r2, #1
 800464e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004652:	480e      	ldr	r0, [pc, #56]	; (800468c <checkAktifCalisma+0x1e8>)
 8004654:	f006 f943 	bl	800a8de <HAL_GPIO_WritePin>
 8004658:	e030      	b.n	80046bc <checkAktifCalisma+0x218>
 800465a:	bf00      	nop
 800465c:	200011a8 	.word	0x200011a8
 8004660:	200011a0 	.word	0x200011a0
 8004664:	20001221 	.word	0x20001221
 8004668:	20001222 	.word	0x20001222
 800466c:	20001224 	.word	0x20001224
 8004670:	2000121c 	.word	0x2000121c
 8004674:	20001150 	.word	0x20001150
 8004678:	20001223 	.word	0x20001223
 800467c:	20001148 	.word	0x20001148
 8004680:	2000123e 	.word	0x2000123e
 8004684:	20001251 	.word	0x20001251
 8004688:	2000123f 	.word	0x2000123f
 800468c:	40010c00 	.word	0x40010c00
 8004690:	20001240 	.word	0x20001240
 8004694:	2000122b 	.word	0x2000122b
 8004698:	20001228 	.word	0x20001228
 800469c:	40011000 	.word	0x40011000
 80046a0:	200010d0 	.word	0x200010d0
 80046a4:	20001226 	.word	0x20001226
 80046a8:	20001227 	.word	0x20001227
 80046ac:	20001128 	.word	0x20001128
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80046b0:	2200      	movs	r2, #0
 80046b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046b6:	4872      	ldr	r0, [pc, #456]	; (8004880 <checkAktifCalisma+0x3dc>)
 80046b8:	f006 f911 	bl	800a8de <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80046bc:	4b71      	ldr	r3, [pc, #452]	; (8004884 <checkAktifCalisma+0x3e0>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d019      	beq.n	80046f8 <checkAktifCalisma+0x254>
 80046c4:	4b70      	ldr	r3, [pc, #448]	; (8004888 <checkAktifCalisma+0x3e4>)
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	1e51      	subs	r1, r2, #1
 80046cc:	430b      	orrs	r3, r1
 80046ce:	d00b      	beq.n	80046e8 <checkAktifCalisma+0x244>
 80046d0:	4b6d      	ldr	r3, [pc, #436]	; (8004888 <checkAktifCalisma+0x3e4>)
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	1e91      	subs	r1, r2, #2
 80046d8:	430b      	orrs	r3, r1
 80046da:	d005      	beq.n	80046e8 <checkAktifCalisma+0x244>
 80046dc:	4b6b      	ldr	r3, [pc, #428]	; (800488c <checkAktifCalisma+0x3e8>)
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	1e51      	subs	r1, r2, #1
 80046e4:	430b      	orrs	r3, r1
 80046e6:	d107      	bne.n	80046f8 <checkAktifCalisma+0x254>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80046e8:	2201      	movs	r2, #1
 80046ea:	2104      	movs	r1, #4
 80046ec:	4864      	ldr	r0, [pc, #400]	; (8004880 <checkAktifCalisma+0x3dc>)
 80046ee:	f006 f8f6 	bl	800a8de <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 80046f2:	4a67      	ldr	r2, [pc, #412]	; (8004890 <checkAktifCalisma+0x3ec>)
 80046f4:	2301      	movs	r3, #1
 80046f6:	7013      	strb	r3, [r2, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80046f8:	4b65      	ldr	r3, [pc, #404]	; (8004890 <checkAktifCalisma+0x3ec>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d034      	beq.n	800476a <checkAktifCalisma+0x2c6>
 8004700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004704:	485e      	ldr	r0, [pc, #376]	; (8004880 <checkAktifCalisma+0x3dc>)
 8004706:	f006 f8d3 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800470a:	4603      	mov	r3, r0
 800470c:	2b01      	cmp	r3, #1
 800470e:	d106      	bne.n	800471e <checkAktifCalisma+0x27a>
 8004710:	4b60      	ldr	r3, [pc, #384]	; (8004894 <checkAktifCalisma+0x3f0>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	f083 0301 	eor.w	r3, r3, #1
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <checkAktifCalisma+0x288>
 800471e:	2102      	movs	r1, #2
 8004720:	485d      	ldr	r0, [pc, #372]	; (8004898 <checkAktifCalisma+0x3f4>)
 8004722:	f006 f8c5 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004726:	4603      	mov	r3, r0
 8004728:	2b01      	cmp	r3, #1
 800472a:	d11e      	bne.n	800476a <checkAktifCalisma+0x2c6>
 800472c:	4b5b      	ldr	r3, [pc, #364]	; (800489c <checkAktifCalisma+0x3f8>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d103      	bne.n	800473c <checkAktifCalisma+0x298>
 8004734:	4b5a      	ldr	r3, [pc, #360]	; (80048a0 <checkAktifCalisma+0x3fc>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d016      	beq.n	800476a <checkAktifCalisma+0x2c6>
 800473c:	4b59      	ldr	r3, [pc, #356]	; (80048a4 <checkAktifCalisma+0x400>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d012      	beq.n	800476a <checkAktifCalisma+0x2c6>
 8004744:	4b58      	ldr	r3, [pc, #352]	; (80048a8 <checkAktifCalisma+0x404>)
 8004746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474a:	4313      	orrs	r3, r2
 800474c:	d00d      	beq.n	800476a <checkAktifCalisma+0x2c6>
 800474e:	4b57      	ldr	r3, [pc, #348]	; (80048ac <checkAktifCalisma+0x408>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	f083 0301 	eor.w	r3, r3, #1
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d006      	beq.n	800476a <checkAktifCalisma+0x2c6>
					timer2=millis;
 800475c:	4b54      	ldr	r3, [pc, #336]	; (80048b0 <checkAktifCalisma+0x40c>)
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	4b54      	ldr	r3, [pc, #336]	; (80048b4 <checkAktifCalisma+0x410>)
 8004762:	601a      	str	r2, [r3, #0]
					butonKontrol3=1;
 8004764:	4a51      	ldr	r2, [pc, #324]	; (80048ac <checkAktifCalisma+0x408>)
 8004766:	2301      	movs	r3, #1
 8004768:	7013      	strb	r3, [r2, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 800476a:	4b51      	ldr	r3, [pc, #324]	; (80048b0 <checkAktifCalisma+0x40c>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b51      	ldr	r3, [pc, #324]	; (80048b4 <checkAktifCalisma+0x410>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2200      	movs	r2, #0
 8004776:	461c      	mov	r4, r3
 8004778:	4615      	mov	r5, r2
 800477a:	4b4f      	ldr	r3, [pc, #316]	; (80048b8 <checkAktifCalisma+0x414>)
 800477c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004780:	4294      	cmp	r4, r2
 8004782:	eb75 0303 	sbcs.w	r3, r5, r3
 8004786:	d303      	bcc.n	8004790 <checkAktifCalisma+0x2ec>
 8004788:	4b48      	ldr	r3, [pc, #288]	; (80048ac <checkAktifCalisma+0x408>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d119      	bne.n	80047c4 <checkAktifCalisma+0x320>
 8004790:	4b42      	ldr	r3, [pc, #264]	; (800489c <checkAktifCalisma+0x3f8>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	f083 0301 	eor.w	r3, r3, #1
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d006      	beq.n	80047ac <checkAktifCalisma+0x308>
 800479e:	4b40      	ldr	r3, [pc, #256]	; (80048a0 <checkAktifCalisma+0x3fc>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	f083 0301 	eor.w	r3, r3, #1
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10b      	bne.n	80047c4 <checkAktifCalisma+0x320>
 80047ac:	4b3d      	ldr	r3, [pc, #244]	; (80048a4 <checkAktifCalisma+0x400>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	f083 0301 	eor.w	r3, r3, #1
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d104      	bne.n	80047c4 <checkAktifCalisma+0x320>
 80047ba:	4b3b      	ldr	r3, [pc, #236]	; (80048a8 <checkAktifCalisma+0x404>)
 80047bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	d10a      	bne.n	80047da <checkAktifCalisma+0x336>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80047c4:	2200      	movs	r2, #0
 80047c6:	2104      	movs	r1, #4
 80047c8:	482d      	ldr	r0, [pc, #180]	; (8004880 <checkAktifCalisma+0x3dc>)
 80047ca:	f006 f888 	bl	800a8de <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 80047ce:	4a30      	ldr	r2, [pc, #192]	; (8004890 <checkAktifCalisma+0x3ec>)
 80047d0:	2300      	movs	r3, #0
 80047d2:	7013      	strb	r3, [r2, #0]
					butonKontrol3=0;
 80047d4:	4a35      	ldr	r2, [pc, #212]	; (80048ac <checkAktifCalisma+0x408>)
 80047d6:	2300      	movs	r3, #0
 80047d8:	7013      	strb	r3, [r2, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 80047da:	4b38      	ldr	r3, [pc, #224]	; (80048bc <checkAktifCalisma+0x418>)
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	d102      	bne.n	80047ea <checkAktifCalisma+0x346>
					cerceveVar=1;
 80047e4:	4a36      	ldr	r2, [pc, #216]	; (80048c0 <checkAktifCalisma+0x41c>)
 80047e6:	2301      	movs	r3, #1
 80047e8:	7013      	strb	r3, [r2, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80047ea:	4b34      	ldr	r3, [pc, #208]	; (80048bc <checkAktifCalisma+0x418>)
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	1e51      	subs	r1, r2, #1
 80047f2:	430b      	orrs	r3, r1
 80047f4:	d117      	bne.n	8004826 <checkAktifCalisma+0x382>
 80047f6:	4b33      	ldr	r3, [pc, #204]	; (80048c4 <checkAktifCalisma+0x420>)
 80047f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	d112      	bne.n	8004826 <checkAktifCalisma+0x382>
 8004800:	2101      	movs	r1, #1
 8004802:	4825      	ldr	r0, [pc, #148]	; (8004898 <checkAktifCalisma+0x3f4>)
 8004804:	f006 f854 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10b      	bne.n	8004826 <checkAktifCalisma+0x382>
 800480e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004812:	481b      	ldr	r0, [pc, #108]	; (8004880 <checkAktifCalisma+0x3dc>)
 8004814:	f006 f84c 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d103      	bne.n	8004826 <checkAktifCalisma+0x382>
					cerceveVar=1;
 800481e:	4a28      	ldr	r2, [pc, #160]	; (80048c0 <checkAktifCalisma+0x41c>)
 8004820:	2301      	movs	r3, #1
 8004822:	7013      	strb	r3, [r2, #0]
 8004824:	e014      	b.n	8004850 <checkAktifCalisma+0x3ac>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004826:	4b25      	ldr	r3, [pc, #148]	; (80048bc <checkAktifCalisma+0x418>)
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	1e51      	subs	r1, r2, #1
 800482e:	430b      	orrs	r3, r1
 8004830:	d10e      	bne.n	8004850 <checkAktifCalisma+0x3ac>
 8004832:	2101      	movs	r1, #1
 8004834:	4818      	ldr	r0, [pc, #96]	; (8004898 <checkAktifCalisma+0x3f4>)
 8004836:	f006 f83b 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800483a:	4603      	mov	r3, r0
 800483c:	2b01      	cmp	r3, #1
 800483e:	d107      	bne.n	8004850 <checkAktifCalisma+0x3ac>
 8004840:	4b20      	ldr	r3, [pc, #128]	; (80048c4 <checkAktifCalisma+0x420>)
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	4313      	orrs	r3, r2
 8004848:	d102      	bne.n	8004850 <checkAktifCalisma+0x3ac>
					cerceveVar=0;
 800484a:	4a1d      	ldr	r2, [pc, #116]	; (80048c0 <checkAktifCalisma+0x41c>)
 800484c:	2300      	movs	r3, #0
 800484e:	7013      	strb	r3, [r2, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8004850:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <checkAktifCalisma+0x418>)
 8004852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004856:	1e51      	subs	r1, r2, #1
 8004858:	430b      	orrs	r3, r1
 800485a:	d138      	bne.n	80048ce <checkAktifCalisma+0x42a>
 800485c:	4b19      	ldr	r3, [pc, #100]	; (80048c4 <checkAktifCalisma+0x420>)
 800485e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004862:	1e51      	subs	r1, r2, #1
 8004864:	430b      	orrs	r3, r1
 8004866:	d132      	bne.n	80048ce <checkAktifCalisma+0x42a>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004868:	2101      	movs	r1, #1
 800486a:	480b      	ldr	r0, [pc, #44]	; (8004898 <checkAktifCalisma+0x3f4>)
 800486c:	f006 f820 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d128      	bne.n	80048c8 <checkAktifCalisma+0x424>
						cerceveVar=1;
 8004876:	4a12      	ldr	r2, [pc, #72]	; (80048c0 <checkAktifCalisma+0x41c>)
 8004878:	2301      	movs	r3, #1
 800487a:	7013      	strb	r3, [r2, #0]
 800487c:	e027      	b.n	80048ce <checkAktifCalisma+0x42a>
 800487e:	bf00      	nop
 8004880:	40010c00 	.word	0x40010c00
 8004884:	20001221 	.word	0x20001221
 8004888:	20001130 	.word	0x20001130
 800488c:	20001150 	.word	0x20001150
 8004890:	20001225 	.word	0x20001225
 8004894:	20001228 	.word	0x20001228
 8004898:	40011000 	.word	0x40011000
 800489c:	2000123e 	.word	0x2000123e
 80048a0:	20001251 	.word	0x20001251
 80048a4:	2000123f 	.word	0x2000123f
 80048a8:	200010d0 	.word	0x200010d0
 80048ac:	2000121d 	.word	0x2000121d
 80048b0:	20001088 	.word	0x20001088
 80048b4:	20001094 	.word	0x20001094
 80048b8:	20001158 	.word	0x20001158
 80048bc:	200010d8 	.word	0x200010d8
 80048c0:	20001243 	.word	0x20001243
 80048c4:	200010c0 	.word	0x200010c0
					} else {
						cerceveVar=0;
 80048c8:	4a84      	ldr	r2, [pc, #528]	; (8004adc <checkAktifCalisma+0x638>)
 80048ca:	2300      	movs	r3, #0
 80048cc:	7013      	strb	r3, [r2, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80048ce:	4b84      	ldr	r3, [pc, #528]	; (8004ae0 <checkAktifCalisma+0x63c>)
 80048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	d17d      	bne.n	80049d4 <checkAktifCalisma+0x530>
 80048d8:	4b82      	ldr	r3, [pc, #520]	; (8004ae4 <checkAktifCalisma+0x640>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d079      	beq.n	80049d4 <checkAktifCalisma+0x530>
 80048e0:	4b81      	ldr	r3, [pc, #516]	; (8004ae8 <checkAktifCalisma+0x644>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d075      	beq.n	80049d4 <checkAktifCalisma+0x530>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80048e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048ec:	487f      	ldr	r0, [pc, #508]	; (8004aec <checkAktifCalisma+0x648>)
 80048ee:	f005 ffdf 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <checkAktifCalisma+0x45c>
 80048f8:	4b7d      	ldr	r3, [pc, #500]	; (8004af0 <checkAktifCalisma+0x64c>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d069      	beq.n	80049d4 <checkAktifCalisma+0x530>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004900:	4b76      	ldr	r3, [pc, #472]	; (8004adc <checkAktifCalisma+0x638>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d065      	beq.n	80049d4 <checkAktifCalisma+0x530>
 8004908:	4b7a      	ldr	r3, [pc, #488]	; (8004af4 <checkAktifCalisma+0x650>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	f083 0301 	eor.w	r3, r3, #1
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d05e      	beq.n	80049d4 <checkAktifCalisma+0x530>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004916:	2104      	movs	r1, #4
 8004918:	4877      	ldr	r0, [pc, #476]	; (8004af8 <checkAktifCalisma+0x654>)
 800491a:	f005 ffc9 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d004      	beq.n	800492e <checkAktifCalisma+0x48a>
 8004924:	4b75      	ldr	r3, [pc, #468]	; (8004afc <checkAktifCalisma+0x658>)
 8004926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492a:	4313      	orrs	r3, r2
 800492c:	d152      	bne.n	80049d4 <checkAktifCalisma+0x530>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800492e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004932:	486e      	ldr	r0, [pc, #440]	; (8004aec <checkAktifCalisma+0x648>)
 8004934:	f005 ffbc 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004938:	4603      	mov	r3, r0
 800493a:	2b01      	cmp	r3, #1
 800493c:	d10e      	bne.n	800495c <checkAktifCalisma+0x4b8>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800493e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004942:	486a      	ldr	r0, [pc, #424]	; (8004aec <checkAktifCalisma+0x648>)
 8004944:	f005 ffb4 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004948:	4603      	mov	r3, r0
 800494a:	2b01      	cmp	r3, #1
 800494c:	d106      	bne.n	800495c <checkAktifCalisma+0x4b8>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800494e:	2140      	movs	r1, #64	; 0x40
 8004950:	4869      	ldr	r0, [pc, #420]	; (8004af8 <checkAktifCalisma+0x654>)
 8004952:	f005 ffad 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004956:	4603      	mov	r3, r0
 8004958:	2b01      	cmp	r3, #1
 800495a:	d003      	beq.n	8004964 <checkAktifCalisma+0x4c0>
 800495c:	4b68      	ldr	r3, [pc, #416]	; (8004b00 <checkAktifCalisma+0x65c>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d037      	beq.n	80049d4 <checkAktifCalisma+0x530>
						&& (yukarimotorcalisiyor==0)
 8004964:	4b67      	ldr	r3, [pc, #412]	; (8004b04 <checkAktifCalisma+0x660>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	f083 0301 	eor.w	r3, r3, #1
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d030      	beq.n	80049d4 <checkAktifCalisma+0x530>
						&& (yukarivalfcalisiyor==0)
 8004972:	4b65      	ldr	r3, [pc, #404]	; (8004b08 <checkAktifCalisma+0x664>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	f083 0301 	eor.w	r3, r3, #1
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d029      	beq.n	80049d4 <checkAktifCalisma+0x530>
				  	  	&& (devmotoryukaricalisiyor==0)
 8004980:	4b62      	ldr	r3, [pc, #392]	; (8004b0c <checkAktifCalisma+0x668>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	f083 0301 	eor.w	r3, r3, #1
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d022      	beq.n	80049d4 <checkAktifCalisma+0x530>
						&& (devmotorasagicalisiyor==0)
 800498e:	4b60      	ldr	r3, [pc, #384]	; (8004b10 <checkAktifCalisma+0x66c>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	f083 0301 	eor.w	r3, r3, #1
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01b      	beq.n	80049d4 <checkAktifCalisma+0x530>
						&& (devyukarivalfcalisiyor==0)
 800499c:	4b5d      	ldr	r3, [pc, #372]	; (8004b14 <checkAktifCalisma+0x670>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	f083 0301 	eor.w	r3, r3, #1
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d014      	beq.n	80049d4 <checkAktifCalisma+0x530>
						&& (devasagivalfcalisiyor==0)) {
 80049aa:	4b5b      	ldr	r3, [pc, #364]	; (8004b18 <checkAktifCalisma+0x674>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	f083 0301 	eor.w	r3, r3, #1
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00d      	beq.n	80049d4 <checkAktifCalisma+0x530>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80049b8:	2201      	movs	r2, #1
 80049ba:	2102      	movs	r1, #2
 80049bc:	484b      	ldr	r0, [pc, #300]	; (8004aec <checkAktifCalisma+0x648>)
 80049be:	f005 ff8e 	bl	800a8de <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 80049c2:	4a4f      	ldr	r2, [pc, #316]	; (8004b00 <checkAktifCalisma+0x65c>)
 80049c4:	2301      	movs	r3, #1
 80049c6:	7013      	strb	r3, [r2, #0]
					CalismaSayisiAsagi=1;
 80049c8:	4a54      	ldr	r2, [pc, #336]	; (8004b1c <checkAktifCalisma+0x678>)
 80049ca:	2301      	movs	r3, #1
 80049cc:	7013      	strb	r3, [r2, #0]
					cercevesasagicalisma=1;
 80049ce:	4a54      	ldr	r2, [pc, #336]	; (8004b20 <checkAktifCalisma+0x67c>)
 80049d0:	2301      	movs	r3, #1
 80049d2:	7013      	strb	r3, [r2, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80049d4:	4b4a      	ldr	r3, [pc, #296]	; (8004b00 <checkAktifCalisma+0x65c>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d034      	beq.n	8004a46 <checkAktifCalisma+0x5a2>
 80049dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80049e0:	4842      	ldr	r0, [pc, #264]	; (8004aec <checkAktifCalisma+0x648>)
 80049e2:	f005 ff65 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d106      	bne.n	80049fa <checkAktifCalisma+0x556>
 80049ec:	4b40      	ldr	r3, [pc, #256]	; (8004af0 <checkAktifCalisma+0x64c>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	f083 0301 	eor.w	r3, r3, #1
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10b      	bne.n	8004a12 <checkAktifCalisma+0x56e>
 80049fa:	2104      	movs	r1, #4
 80049fc:	483e      	ldr	r0, [pc, #248]	; (8004af8 <checkAktifCalisma+0x654>)
 80049fe:	f005 ff57 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d11e      	bne.n	8004a46 <checkAktifCalisma+0x5a2>
 8004a08:	4b3c      	ldr	r3, [pc, #240]	; (8004afc <checkAktifCalisma+0x658>)
 8004a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	d019      	beq.n	8004a46 <checkAktifCalisma+0x5a2>
 8004a12:	4b34      	ldr	r3, [pc, #208]	; (8004ae4 <checkAktifCalisma+0x640>)
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d015      	beq.n	8004a46 <checkAktifCalisma+0x5a2>
 8004a1a:	4b33      	ldr	r3, [pc, #204]	; (8004ae8 <checkAktifCalisma+0x644>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d011      	beq.n	8004a46 <checkAktifCalisma+0x5a2>
 8004a22:	4b2e      	ldr	r3, [pc, #184]	; (8004adc <checkAktifCalisma+0x638>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00d      	beq.n	8004a46 <checkAktifCalisma+0x5a2>
 8004a2a:	4b3e      	ldr	r3, [pc, #248]	; (8004b24 <checkAktifCalisma+0x680>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	f083 0301 	eor.w	r3, r3, #1
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d006      	beq.n	8004a46 <checkAktifCalisma+0x5a2>
					timer2=millis;
 8004a38:	4b3b      	ldr	r3, [pc, #236]	; (8004b28 <checkAktifCalisma+0x684>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	4b3b      	ldr	r3, [pc, #236]	; (8004b2c <checkAktifCalisma+0x688>)
 8004a3e:	601a      	str	r2, [r3, #0]
					butonKontrol2=1;
 8004a40:	4a38      	ldr	r2, [pc, #224]	; (8004b24 <checkAktifCalisma+0x680>)
 8004a42:	2301      	movs	r3, #1
 8004a44:	7013      	strb	r3, [r2, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8004a46:	4b38      	ldr	r3, [pc, #224]	; (8004b28 <checkAktifCalisma+0x684>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4b38      	ldr	r3, [pc, #224]	; (8004b2c <checkAktifCalisma+0x688>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2200      	movs	r2, #0
 8004a52:	4698      	mov	r8, r3
 8004a54:	4691      	mov	r9, r2
 8004a56:	4b36      	ldr	r3, [pc, #216]	; (8004b30 <checkAktifCalisma+0x68c>)
 8004a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5c:	4590      	cmp	r8, r2
 8004a5e:	eb79 0303 	sbcs.w	r3, r9, r3
 8004a62:	d303      	bcc.n	8004a6c <checkAktifCalisma+0x5c8>
 8004a64:	4b2f      	ldr	r3, [pc, #188]	; (8004b24 <checkAktifCalisma+0x680>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d114      	bne.n	8004a96 <checkAktifCalisma+0x5f2>
 8004a6c:	4b1d      	ldr	r3, [pc, #116]	; (8004ae4 <checkAktifCalisma+0x640>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	f083 0301 	eor.w	r3, r3, #1
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10d      	bne.n	8004a96 <checkAktifCalisma+0x5f2>
 8004a7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ae8 <checkAktifCalisma+0x644>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	f083 0301 	eor.w	r3, r3, #1
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d106      	bne.n	8004a96 <checkAktifCalisma+0x5f2>
 8004a88:	4b14      	ldr	r3, [pc, #80]	; (8004adc <checkAktifCalisma+0x638>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	f083 0301 	eor.w	r3, r3, #1
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <checkAktifCalisma+0x608>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004a96:	2200      	movs	r2, #0
 8004a98:	2102      	movs	r1, #2
 8004a9a:	4814      	ldr	r0, [pc, #80]	; (8004aec <checkAktifCalisma+0x648>)
 8004a9c:	f005 ff1f 	bl	800a8de <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8004aa0:	4a17      	ldr	r2, [pc, #92]	; (8004b00 <checkAktifCalisma+0x65c>)
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	7013      	strb	r3, [r2, #0]
					butonKontrol2=0;
 8004aa6:	4a1f      	ldr	r2, [pc, #124]	; (8004b24 <checkAktifCalisma+0x680>)
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	7013      	strb	r3, [r2, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8004aac:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <checkAktifCalisma+0x65c>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d041      	beq.n	8004b38 <checkAktifCalisma+0x694>
 8004ab4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ab8:	480f      	ldr	r0, [pc, #60]	; (8004af8 <checkAktifCalisma+0x654>)
 8004aba:	f005 fef9 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d139      	bne.n	8004b38 <checkAktifCalisma+0x694>
 8004ac4:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <checkAktifCalisma+0x690>)
 8004ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	d034      	beq.n	8004b38 <checkAktifCalisma+0x694>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8004ace:	2201      	movs	r2, #1
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	4806      	ldr	r0, [pc, #24]	; (8004aec <checkAktifCalisma+0x648>)
 8004ad4:	f005 ff03 	bl	800a8de <HAL_GPIO_WritePin>
 8004ad8:	e033      	b.n	8004b42 <checkAktifCalisma+0x69e>
 8004ada:	bf00      	nop
 8004adc:	20001243 	.word	0x20001243
 8004ae0:	200011a0 	.word	0x200011a0
 8004ae4:	2000123e 	.word	0x2000123e
 8004ae8:	2000123f 	.word	0x2000123f
 8004aec:	40010c00 	.word	0x40010c00
 8004af0:	20001229 	.word	0x20001229
 8004af4:	2000123d 	.word	0x2000123d
 8004af8:	40011000 	.word	0x40011000
 8004afc:	200010e8 	.word	0x200010e8
 8004b00:	20001224 	.word	0x20001224
 8004b04:	20001221 	.word	0x20001221
 8004b08:	20001225 	.word	0x20001225
 8004b0c:	20001222 	.word	0x20001222
 8004b10:	20001223 	.word	0x20001223
 8004b14:	20001226 	.word	0x20001226
 8004b18:	20001227 	.word	0x20001227
 8004b1c:	2000122c 	.word	0x2000122c
 8004b20:	2000124d 	.word	0x2000124d
 8004b24:	2000121c 	.word	0x2000121c
 8004b28:	20001088 	.word	0x20001088
 8004b2c:	20001094 	.word	0x20001094
 8004b30:	20001160 	.word	0x20001160
 8004b34:	200010e0 	.word	0x200010e0
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	4839      	ldr	r0, [pc, #228]	; (8004c24 <checkAktifCalisma+0x780>)
 8004b3e:	f005 fece 	bl	800a8de <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8004b42:	4b39      	ldr	r3, [pc, #228]	; (8004c28 <checkAktifCalisma+0x784>)
 8004b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f040 8085 	bne.w	8004c58 <checkAktifCalisma+0x7b4>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004b4e:	4b37      	ldr	r3, [pc, #220]	; (8004c2c <checkAktifCalisma+0x788>)
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	1e51      	subs	r1, r2, #1
 8004b56:	430b      	orrs	r3, r1
 8004b58:	d005      	beq.n	8004b66 <checkAktifCalisma+0x6c2>
 8004b5a:	4b34      	ldr	r3, [pc, #208]	; (8004c2c <checkAktifCalisma+0x788>)
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	1e91      	subs	r1, r2, #2
 8004b62:	430b      	orrs	r3, r1
 8004b64:	d178      	bne.n	8004c58 <checkAktifCalisma+0x7b4>
						&& (stopVar) && (kapiSivicVar)
 8004b66:	4b32      	ldr	r3, [pc, #200]	; (8004c30 <checkAktifCalisma+0x78c>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d074      	beq.n	8004c58 <checkAktifCalisma+0x7b4>
 8004b6e:	4b31      	ldr	r3, [pc, #196]	; (8004c34 <checkAktifCalisma+0x790>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d070      	beq.n	8004c58 <checkAktifCalisma+0x7b4>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004b76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b7a:	482a      	ldr	r0, [pc, #168]	; (8004c24 <checkAktifCalisma+0x780>)
 8004b7c:	f005 fe98 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d168      	bne.n	8004c58 <checkAktifCalisma+0x7b4>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004b86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b8a:	482b      	ldr	r0, [pc, #172]	; (8004c38 <checkAktifCalisma+0x794>)
 8004b8c:	f005 fe90 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d004      	beq.n	8004ba0 <checkAktifCalisma+0x6fc>
 8004b96:	4b29      	ldr	r3, [pc, #164]	; (8004c3c <checkAktifCalisma+0x798>)
 8004b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	d15b      	bne.n	8004c58 <checkAktifCalisma+0x7b4>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8004ba0:	2140      	movs	r1, #64	; 0x40
 8004ba2:	4825      	ldr	r0, [pc, #148]	; (8004c38 <checkAktifCalisma+0x794>)
 8004ba4:	f005 fe84 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d10f      	bne.n	8004bce <checkAktifCalisma+0x72a>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bb2:	481c      	ldr	r0, [pc, #112]	; (8004c24 <checkAktifCalisma+0x780>)
 8004bb4:	f005 fe7c 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d107      	bne.n	8004bce <checkAktifCalisma+0x72a>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8004bbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004bc2:	4818      	ldr	r0, [pc, #96]	; (8004c24 <checkAktifCalisma+0x780>)
 8004bc4:	f005 fe74 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d003      	beq.n	8004bd6 <checkAktifCalisma+0x732>
 8004bce:	4b1c      	ldr	r3, [pc, #112]	; (8004c40 <checkAktifCalisma+0x79c>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d040      	beq.n	8004c58 <checkAktifCalisma+0x7b4>
						&& (yukarimotorcalisiyor==0)
 8004bd6:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <checkAktifCalisma+0x7a0>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	f083 0301 	eor.w	r3, r3, #1
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d039      	beq.n	8004c58 <checkAktifCalisma+0x7b4>
						&& (yukarivalfcalisiyor==0)
 8004be4:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <checkAktifCalisma+0x7a4>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	f083 0301 	eor.w	r3, r3, #1
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d032      	beq.n	8004c58 <checkAktifCalisma+0x7b4>
						&& (asagivalfcalisiyor==0)
 8004bf2:	4b16      	ldr	r3, [pc, #88]	; (8004c4c <checkAktifCalisma+0x7a8>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	f083 0301 	eor.w	r3, r3, #1
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d02b      	beq.n	8004c58 <checkAktifCalisma+0x7b4>
						&& (devmotorasagicalisiyor==0)
 8004c00:	4b13      	ldr	r3, [pc, #76]	; (8004c50 <checkAktifCalisma+0x7ac>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	f083 0301 	eor.w	r3, r3, #1
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d024      	beq.n	8004c58 <checkAktifCalisma+0x7b4>
						&&(devasagivalfcalisiyor==0)) {
 8004c0e:	4b11      	ldr	r3, [pc, #68]	; (8004c54 <checkAktifCalisma+0x7b0>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	f083 0301 	eor.w	r3, r3, #1
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01d      	beq.n	8004c58 <checkAktifCalisma+0x7b4>

					devmotoryukaricalisiyor=1;
 8004c1c:	4a08      	ldr	r2, [pc, #32]	; (8004c40 <checkAktifCalisma+0x79c>)
 8004c1e:	2301      	movs	r3, #1
 8004c20:	7013      	strb	r3, [r2, #0]
 8004c22:	e01c      	b.n	8004c5e <checkAktifCalisma+0x7ba>
 8004c24:	40010c00 	.word	0x40010c00
 8004c28:	200011a0 	.word	0x200011a0
 8004c2c:	20001130 	.word	0x20001130
 8004c30:	2000123e 	.word	0x2000123e
 8004c34:	2000123f 	.word	0x2000123f
 8004c38:	40011000 	.word	0x40011000
 8004c3c:	20001138 	.word	0x20001138
 8004c40:	20001222 	.word	0x20001222
 8004c44:	20001221 	.word	0x20001221
 8004c48:	20001225 	.word	0x20001225
 8004c4c:	20001224 	.word	0x20001224
 8004c50:	20001223 	.word	0x20001223
 8004c54:	20001227 	.word	0x20001227
				} else {
					devmotoryukaricalisiyor=0;
 8004c58:	4a6b      	ldr	r2, [pc, #428]	; (8004e08 <checkAktifCalisma+0x964>)
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	7013      	strb	r3, [r2, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8004c5e:	4b6a      	ldr	r3, [pc, #424]	; (8004e08 <checkAktifCalisma+0x964>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <checkAktifCalisma+0x7d2>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004c66:	2201      	movs	r2, #1
 8004c68:	2120      	movs	r1, #32
 8004c6a:	4868      	ldr	r0, [pc, #416]	; (8004e0c <checkAktifCalisma+0x968>)
 8004c6c:	f005 fe37 	bl	800a8de <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8004c70:	4a67      	ldr	r2, [pc, #412]	; (8004e10 <checkAktifCalisma+0x96c>)
 8004c72:	2301      	movs	r3, #1
 8004c74:	7013      	strb	r3, [r2, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004c76:	4b66      	ldr	r3, [pc, #408]	; (8004e10 <checkAktifCalisma+0x96c>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d025      	beq.n	8004cca <checkAktifCalisma+0x826>
 8004c7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c82:	4864      	ldr	r0, [pc, #400]	; (8004e14 <checkAktifCalisma+0x970>)
 8004c84:	f005 fe14 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d007      	beq.n	8004c9e <checkAktifCalisma+0x7fa>
 8004c8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c92:	485e      	ldr	r0, [pc, #376]	; (8004e0c <checkAktifCalisma+0x968>)
 8004c94:	f005 fe0c 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d115      	bne.n	8004cca <checkAktifCalisma+0x826>
 8004c9e:	4b5e      	ldr	r3, [pc, #376]	; (8004e18 <checkAktifCalisma+0x974>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d011      	beq.n	8004cca <checkAktifCalisma+0x826>
 8004ca6:	4b5d      	ldr	r3, [pc, #372]	; (8004e1c <checkAktifCalisma+0x978>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00d      	beq.n	8004cca <checkAktifCalisma+0x826>
 8004cae:	4b5c      	ldr	r3, [pc, #368]	; (8004e20 <checkAktifCalisma+0x97c>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	f083 0301 	eor.w	r3, r3, #1
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d006      	beq.n	8004cca <checkAktifCalisma+0x826>
					timer2=millis;
 8004cbc:	4b59      	ldr	r3, [pc, #356]	; (8004e24 <checkAktifCalisma+0x980>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	4b59      	ldr	r3, [pc, #356]	; (8004e28 <checkAktifCalisma+0x984>)
 8004cc2:	601a      	str	r2, [r3, #0]
					butonKontrol4=1;
 8004cc4:	4a56      	ldr	r2, [pc, #344]	; (8004e20 <checkAktifCalisma+0x97c>)
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	7013      	strb	r3, [r2, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004cca:	4b56      	ldr	r3, [pc, #344]	; (8004e24 <checkAktifCalisma+0x980>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4b56      	ldr	r3, [pc, #344]	; (8004e28 <checkAktifCalisma+0x984>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	469a      	mov	sl, r3
 8004cd8:	4693      	mov	fp, r2
 8004cda:	4b54      	ldr	r3, [pc, #336]	; (8004e2c <checkAktifCalisma+0x988>)
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	4592      	cmp	sl, r2
 8004ce2:	eb7b 0303 	sbcs.w	r3, fp, r3
 8004ce6:	d303      	bcc.n	8004cf0 <checkAktifCalisma+0x84c>
 8004ce8:	4b4d      	ldr	r3, [pc, #308]	; (8004e20 <checkAktifCalisma+0x97c>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10d      	bne.n	8004d0c <checkAktifCalisma+0x868>
 8004cf0:	4b49      	ldr	r3, [pc, #292]	; (8004e18 <checkAktifCalisma+0x974>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	f083 0301 	eor.w	r3, r3, #1
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <checkAktifCalisma+0x868>
 8004cfe:	4b47      	ldr	r3, [pc, #284]	; (8004e1c <checkAktifCalisma+0x978>)
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	f083 0301 	eor.w	r3, r3, #1
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <checkAktifCalisma+0x87e>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2120      	movs	r1, #32
 8004d10:	483e      	ldr	r0, [pc, #248]	; (8004e0c <checkAktifCalisma+0x968>)
 8004d12:	f005 fde4 	bl	800a8de <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8004d16:	4a3e      	ldr	r2, [pc, #248]	; (8004e10 <checkAktifCalisma+0x96c>)
 8004d18:	2300      	movs	r3, #0
 8004d1a:	7013      	strb	r3, [r2, #0]
					butonKontrol4=0;
 8004d1c:	4a40      	ldr	r2, [pc, #256]	; (8004e20 <checkAktifCalisma+0x97c>)
 8004d1e:	2300      	movs	r3, #0
 8004d20:	7013      	strb	r3, [r2, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8004d22:	4b43      	ldr	r3, [pc, #268]	; (8004e30 <checkAktifCalisma+0x98c>)
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f040 808f 	bne.w	8004e4c <checkAktifCalisma+0x9a8>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004d2e:	4b41      	ldr	r3, [pc, #260]	; (8004e34 <checkAktifCalisma+0x990>)
 8004d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d34:	1e51      	subs	r1, r2, #1
 8004d36:	430b      	orrs	r3, r1
 8004d38:	d006      	beq.n	8004d48 <checkAktifCalisma+0x8a4>
 8004d3a:	4b3e      	ldr	r3, [pc, #248]	; (8004e34 <checkAktifCalisma+0x990>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	1e91      	subs	r1, r2, #2
 8004d42:	430b      	orrs	r3, r1
 8004d44:	f040 8082 	bne.w	8004e4c <checkAktifCalisma+0x9a8>
						&& (stopVar) && (kapiSivicVar)
 8004d48:	4b33      	ldr	r3, [pc, #204]	; (8004e18 <checkAktifCalisma+0x974>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d07d      	beq.n	8004e4c <checkAktifCalisma+0x9a8>
 8004d50:	4b32      	ldr	r3, [pc, #200]	; (8004e1c <checkAktifCalisma+0x978>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d079      	beq.n	8004e4c <checkAktifCalisma+0x9a8>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004d58:	2140      	movs	r1, #64	; 0x40
 8004d5a:	482c      	ldr	r0, [pc, #176]	; (8004e0c <checkAktifCalisma+0x968>)
 8004d5c:	f005 fda8 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d172      	bne.n	8004e4c <checkAktifCalisma+0x9a8>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004d66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d6a:	4828      	ldr	r0, [pc, #160]	; (8004e0c <checkAktifCalisma+0x968>)
 8004d6c:	f005 fda0 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d004      	beq.n	8004d80 <checkAktifCalisma+0x8dc>
 8004d76:	4b30      	ldr	r3, [pc, #192]	; (8004e38 <checkAktifCalisma+0x994>)
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	d165      	bne.n	8004e4c <checkAktifCalisma+0x9a8>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004d80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d84:	4823      	ldr	r0, [pc, #140]	; (8004e14 <checkAktifCalisma+0x970>)
 8004d86:	f005 fd93 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d10f      	bne.n	8004db0 <checkAktifCalisma+0x90c>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004d90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d94:	481f      	ldr	r0, [pc, #124]	; (8004e14 <checkAktifCalisma+0x970>)
 8004d96:	f005 fd8b 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d107      	bne.n	8004db0 <checkAktifCalisma+0x90c>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004da0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004da4:	481b      	ldr	r0, [pc, #108]	; (8004e14 <checkAktifCalisma+0x970>)
 8004da6:	f005 fd83 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d003      	beq.n	8004db8 <checkAktifCalisma+0x914>
 8004db0:	4b22      	ldr	r3, [pc, #136]	; (8004e3c <checkAktifCalisma+0x998>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d049      	beq.n	8004e4c <checkAktifCalisma+0x9a8>
						&& (yukarimotorcalisiyor==0)
 8004db8:	4b21      	ldr	r3, [pc, #132]	; (8004e40 <checkAktifCalisma+0x99c>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	f083 0301 	eor.w	r3, r3, #1
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d042      	beq.n	8004e4c <checkAktifCalisma+0x9a8>
						&& (yukarivalfcalisiyor==0)
 8004dc6:	4b1f      	ldr	r3, [pc, #124]	; (8004e44 <checkAktifCalisma+0x9a0>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	f083 0301 	eor.w	r3, r3, #1
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d03b      	beq.n	8004e4c <checkAktifCalisma+0x9a8>
						&& (asagivalfcalisiyor==0)
 8004dd4:	4b1c      	ldr	r3, [pc, #112]	; (8004e48 <checkAktifCalisma+0x9a4>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	f083 0301 	eor.w	r3, r3, #1
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d034      	beq.n	8004e4c <checkAktifCalisma+0x9a8>
						&& (devyukarivalfcalisiyor==0)
 8004de2:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <checkAktifCalisma+0x96c>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	f083 0301 	eor.w	r3, r3, #1
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d02d      	beq.n	8004e4c <checkAktifCalisma+0x9a8>
						&& (devmotoryukaricalisiyor==0)) {
 8004df0:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <checkAktifCalisma+0x964>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f083 0301 	eor.w	r3, r3, #1
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d026      	beq.n	8004e4c <checkAktifCalisma+0x9a8>

					devmotorasagicalisiyor=1;
 8004dfe:	4a0f      	ldr	r2, [pc, #60]	; (8004e3c <checkAktifCalisma+0x998>)
 8004e00:	2301      	movs	r3, #1
 8004e02:	7013      	strb	r3, [r2, #0]
 8004e04:	e025      	b.n	8004e52 <checkAktifCalisma+0x9ae>
 8004e06:	bf00      	nop
 8004e08:	20001222 	.word	0x20001222
 8004e0c:	40011000 	.word	0x40011000
 8004e10:	20001226 	.word	0x20001226
 8004e14:	40010c00 	.word	0x40010c00
 8004e18:	2000123e 	.word	0x2000123e
 8004e1c:	2000123f 	.word	0x2000123f
 8004e20:	2000121e 	.word	0x2000121e
 8004e24:	20001088 	.word	0x20001088
 8004e28:	20001094 	.word	0x20001094
 8004e2c:	20001168 	.word	0x20001168
 8004e30:	200011a0 	.word	0x200011a0
 8004e34:	20001130 	.word	0x20001130
 8004e38:	20001140 	.word	0x20001140
 8004e3c:	20001223 	.word	0x20001223
 8004e40:	20001221 	.word	0x20001221
 8004e44:	20001225 	.word	0x20001225
 8004e48:	20001224 	.word	0x20001224
				} else {
					devmotorasagicalisiyor=0;
 8004e4c:	4a47      	ldr	r2, [pc, #284]	; (8004f6c <checkAktifCalisma+0xac8>)
 8004e4e:	2300      	movs	r3, #0
 8004e50:	7013      	strb	r3, [r2, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8004e52:	4b46      	ldr	r3, [pc, #280]	; (8004f6c <checkAktifCalisma+0xac8>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d007      	beq.n	8004e6a <checkAktifCalisma+0x9c6>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	2110      	movs	r1, #16
 8004e5e:	4844      	ldr	r0, [pc, #272]	; (8004f70 <checkAktifCalisma+0xacc>)
 8004e60:	f005 fd3d 	bl	800a8de <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004e64:	4a43      	ldr	r2, [pc, #268]	; (8004f74 <checkAktifCalisma+0xad0>)
 8004e66:	2301      	movs	r3, #1
 8004e68:	7013      	strb	r3, [r2, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004e6a:	4b42      	ldr	r3, [pc, #264]	; (8004f74 <checkAktifCalisma+0xad0>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d024      	beq.n	8004ebc <checkAktifCalisma+0xa18>
 8004e72:	2140      	movs	r1, #64	; 0x40
 8004e74:	483e      	ldr	r0, [pc, #248]	; (8004f70 <checkAktifCalisma+0xacc>)
 8004e76:	f005 fd1b 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d007      	beq.n	8004e90 <checkAktifCalisma+0x9ec>
 8004e80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e84:	483a      	ldr	r0, [pc, #232]	; (8004f70 <checkAktifCalisma+0xacc>)
 8004e86:	f005 fd13 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d115      	bne.n	8004ebc <checkAktifCalisma+0xa18>
 8004e90:	4b39      	ldr	r3, [pc, #228]	; (8004f78 <checkAktifCalisma+0xad4>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d011      	beq.n	8004ebc <checkAktifCalisma+0xa18>
 8004e98:	4b38      	ldr	r3, [pc, #224]	; (8004f7c <checkAktifCalisma+0xad8>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00d      	beq.n	8004ebc <checkAktifCalisma+0xa18>
 8004ea0:	4b37      	ldr	r3, [pc, #220]	; (8004f80 <checkAktifCalisma+0xadc>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	f083 0301 	eor.w	r3, r3, #1
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d006      	beq.n	8004ebc <checkAktifCalisma+0xa18>
					timer2=millis;
 8004eae:	4b35      	ldr	r3, [pc, #212]	; (8004f84 <checkAktifCalisma+0xae0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a35      	ldr	r2, [pc, #212]	; (8004f88 <checkAktifCalisma+0xae4>)
 8004eb4:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004eb6:	4a32      	ldr	r2, [pc, #200]	; (8004f80 <checkAktifCalisma+0xadc>)
 8004eb8:	2301      	movs	r3, #1
 8004eba:	7013      	strb	r3, [r2, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004ebc:	4b31      	ldr	r3, [pc, #196]	; (8004f84 <checkAktifCalisma+0xae0>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	4b31      	ldr	r3, [pc, #196]	; (8004f88 <checkAktifCalisma+0xae4>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ecc:	4b2f      	ldr	r3, [pc, #188]	; (8004f8c <checkAktifCalisma+0xae8>)
 8004ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	4294      	cmp	r4, r2
 8004eda:	4199      	sbcs	r1, r3
 8004edc:	d303      	bcc.n	8004ee6 <checkAktifCalisma+0xa42>
 8004ede:	4b28      	ldr	r3, [pc, #160]	; (8004f80 <checkAktifCalisma+0xadc>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10d      	bne.n	8004f02 <checkAktifCalisma+0xa5e>
 8004ee6:	4b24      	ldr	r3, [pc, #144]	; (8004f78 <checkAktifCalisma+0xad4>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	f083 0301 	eor.w	r3, r3, #1
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <checkAktifCalisma+0xa5e>
 8004ef4:	4b21      	ldr	r3, [pc, #132]	; (8004f7c <checkAktifCalisma+0xad8>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	f083 0301 	eor.w	r3, r3, #1
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <checkAktifCalisma+0xa74>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004f02:	2200      	movs	r2, #0
 8004f04:	2110      	movs	r1, #16
 8004f06:	481a      	ldr	r0, [pc, #104]	; (8004f70 <checkAktifCalisma+0xacc>)
 8004f08:	f005 fce9 	bl	800a8de <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004f0c:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <checkAktifCalisma+0xad0>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8004f12:	4b1b      	ldr	r3, [pc, #108]	; (8004f80 <checkAktifCalisma+0xadc>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004f18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f1c:	481c      	ldr	r0, [pc, #112]	; (8004f90 <checkAktifCalisma+0xaec>)
 8004f1e:	f005 fcc7 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d137      	bne.n	8004f98 <checkAktifCalisma+0xaf4>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f2c:	4818      	ldr	r0, [pc, #96]	; (8004f90 <checkAktifCalisma+0xaec>)
 8004f2e:	f005 fcbf 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d12f      	bne.n	8004f98 <checkAktifCalisma+0xaf4>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004f38:	2104      	movs	r1, #4
 8004f3a:	4815      	ldr	r0, [pc, #84]	; (8004f90 <checkAktifCalisma+0xaec>)
 8004f3c:	f005 fcb8 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d128      	bne.n	8004f98 <checkAktifCalisma+0xaf4>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004f46:	2102      	movs	r1, #2
 8004f48:	4811      	ldr	r0, [pc, #68]	; (8004f90 <checkAktifCalisma+0xaec>)
 8004f4a:	f005 fcb1 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d121      	bne.n	8004f98 <checkAktifCalisma+0xaf4>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004f54:	2101      	movs	r1, #1
 8004f56:	480e      	ldr	r0, [pc, #56]	; (8004f90 <checkAktifCalisma+0xaec>)
 8004f58:	f005 fcaa 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d11a      	bne.n	8004f98 <checkAktifCalisma+0xaf4>
					makineStop=1;
 8004f62:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <checkAktifCalisma+0xaf0>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	e019      	b.n	8004f9e <checkAktifCalisma+0xafa>
 8004f6a:	bf00      	nop
 8004f6c:	20001223 	.word	0x20001223
 8004f70:	40011000 	.word	0x40011000
 8004f74:	20001227 	.word	0x20001227
 8004f78:	2000123e 	.word	0x2000123e
 8004f7c:	2000123f 	.word	0x2000123f
 8004f80:	2000121f 	.word	0x2000121f
 8004f84:	20001088 	.word	0x20001088
 8004f88:	20001094 	.word	0x20001094
 8004f8c:	20001168 	.word	0x20001168
 8004f90:	40010c00 	.word	0x40010c00
 8004f94:	2000122e 	.word	0x2000122e
				} else {
					makineStop=0;
 8004f98:	4b83      	ldr	r3, [pc, #524]	; (80051a8 <checkAktifCalisma+0xd04>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004f9e:	4b83      	ldr	r3, [pc, #524]	; (80051ac <checkAktifCalisma+0xd08>)
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	d14c      	bne.n	8005042 <checkAktifCalisma+0xb9e>
 8004fa8:	4b81      	ldr	r3, [pc, #516]	; (80051b0 <checkAktifCalisma+0xd0c>)
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	1e51      	subs	r1, r2, #1
 8004fb0:	430b      	orrs	r3, r1
 8004fb2:	d005      	beq.n	8004fc0 <checkAktifCalisma+0xb1c>
 8004fb4:	4b7e      	ldr	r3, [pc, #504]	; (80051b0 <checkAktifCalisma+0xd0c>)
 8004fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fba:	1ed1      	subs	r1, r2, #3
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	d140      	bne.n	8005042 <checkAktifCalisma+0xb9e>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004fc0:	2180      	movs	r1, #128	; 0x80
 8004fc2:	487c      	ldr	r0, [pc, #496]	; (80051b4 <checkAktifCalisma+0xd10>)
 8004fc4:	f005 fc74 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d104      	bne.n	8004fd8 <checkAktifCalisma+0xb34>
 8004fce:	4b7a      	ldr	r3, [pc, #488]	; (80051b8 <checkAktifCalisma+0xd14>)
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	d00d      	beq.n	8004ff4 <checkAktifCalisma+0xb50>
 8004fd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004fdc:	4877      	ldr	r0, [pc, #476]	; (80051bc <checkAktifCalisma+0xd18>)
 8004fde:	f005 fc67 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d12c      	bne.n	8005042 <checkAktifCalisma+0xb9e>
 8004fe8:	4b73      	ldr	r3, [pc, #460]	; (80051b8 <checkAktifCalisma+0xd14>)
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	1e51      	subs	r1, r2, #1
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	d126      	bne.n	8005042 <checkAktifCalisma+0xb9e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004ff4:	2104      	movs	r1, #4
 8004ff6:	486f      	ldr	r0, [pc, #444]	; (80051b4 <checkAktifCalisma+0xd10>)
 8004ff8:	f005 fc5a 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d004      	beq.n	800500c <checkAktifCalisma+0xb68>
 8005002:	4b6f      	ldr	r3, [pc, #444]	; (80051c0 <checkAktifCalisma+0xd1c>)
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	4313      	orrs	r3, r2
 800500a:	d11a      	bne.n	8005042 <checkAktifCalisma+0xb9e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800500c:	2102      	movs	r1, #2
 800500e:	4869      	ldr	r0, [pc, #420]	; (80051b4 <checkAktifCalisma+0xd10>)
 8005010:	f005 fc4e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d113      	bne.n	8005042 <checkAktifCalisma+0xb9e>
						&&(butonKontrol==0)
 800501a:	4b6a      	ldr	r3, [pc, #424]	; (80051c4 <checkAktifCalisma+0xd20>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	f083 0301 	eor.w	r3, r3, #1
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00c      	beq.n	8005042 <checkAktifCalisma+0xb9e>
						&&(makineStop==1)) {
 8005028:	4b5f      	ldr	r3, [pc, #380]	; (80051a8 <checkAktifCalisma+0xd04>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <checkAktifCalisma+0xb9e>

					kapi1prudhome=1;
 8005030:	4b65      	ldr	r3, [pc, #404]	; (80051c8 <checkAktifCalisma+0xd24>)
 8005032:	2201      	movs	r2, #1
 8005034:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005036:	4b65      	ldr	r3, [pc, #404]	; (80051cc <checkAktifCalisma+0xd28>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a65      	ldr	r2, [pc, #404]	; (80051d0 <checkAktifCalisma+0xd2c>)
 800503c:	6013      	str	r3, [r2, #0]
					bekle();
 800503e:	f7ff f879 	bl	8004134 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005042:	4b62      	ldr	r3, [pc, #392]	; (80051cc <checkAktifCalisma+0xd28>)
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	4b62      	ldr	r3, [pc, #392]	; (80051d0 <checkAktifCalisma+0xd2c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2200      	movs	r2, #0
 800504e:	623b      	str	r3, [r7, #32]
 8005050:	627a      	str	r2, [r7, #36]	; 0x24
 8005052:	4b60      	ldr	r3, [pc, #384]	; (80051d4 <checkAktifCalisma+0xd30>)
 8005054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005058:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800505c:	4604      	mov	r4, r0
 800505e:	4294      	cmp	r4, r2
 8005060:	4199      	sbcs	r1, r3
 8005062:	d212      	bcs.n	800508a <checkAktifCalisma+0xbe6>
 8005064:	2104      	movs	r1, #4
 8005066:	4853      	ldr	r0, [pc, #332]	; (80051b4 <checkAktifCalisma+0xd10>)
 8005068:	f005 fc22 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00b      	beq.n	800508a <checkAktifCalisma+0xbe6>
 8005072:	4b53      	ldr	r3, [pc, #332]	; (80051c0 <checkAktifCalisma+0xd1c>)
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	4313      	orrs	r3, r2
 800507a:	d006      	beq.n	800508a <checkAktifCalisma+0xbe6>
 800507c:	4b4a      	ldr	r3, [pc, #296]	; (80051a8 <checkAktifCalisma+0xd04>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	f083 0301 	eor.w	r3, r3, #1
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <checkAktifCalisma+0xbec>
					kapi1prudhome=0;
 800508a:	4b4f      	ldr	r3, [pc, #316]	; (80051c8 <checkAktifCalisma+0xd24>)
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005090:	4b46      	ldr	r3, [pc, #280]	; (80051ac <checkAktifCalisma+0xd08>)
 8005092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005096:	1e51      	subs	r1, r2, #1
 8005098:	430b      	orrs	r3, r1
 800509a:	d140      	bne.n	800511e <checkAktifCalisma+0xc7a>
 800509c:	4b44      	ldr	r3, [pc, #272]	; (80051b0 <checkAktifCalisma+0xd0c>)
 800509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a2:	1e51      	subs	r1, r2, #1
 80050a4:	430b      	orrs	r3, r1
 80050a6:	d005      	beq.n	80050b4 <checkAktifCalisma+0xc10>
 80050a8:	4b41      	ldr	r3, [pc, #260]	; (80051b0 <checkAktifCalisma+0xd0c>)
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	1ed1      	subs	r1, r2, #3
 80050b0:	430b      	orrs	r3, r1
 80050b2:	d134      	bne.n	800511e <checkAktifCalisma+0xc7a>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80050b4:	2104      	movs	r1, #4
 80050b6:	483f      	ldr	r0, [pc, #252]	; (80051b4 <checkAktifCalisma+0xd10>)
 80050b8:	f005 fbfa 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d004      	beq.n	80050cc <checkAktifCalisma+0xc28>
 80050c2:	4b3f      	ldr	r3, [pc, #252]	; (80051c0 <checkAktifCalisma+0xd1c>)
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	d128      	bne.n	800511e <checkAktifCalisma+0xc7a>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80050cc:	2102      	movs	r1, #2
 80050ce:	4839      	ldr	r0, [pc, #228]	; (80051b4 <checkAktifCalisma+0xd10>)
 80050d0:	f005 fbee 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d121      	bne.n	800511e <checkAktifCalisma+0xc7a>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80050da:	2180      	movs	r1, #128	; 0x80
 80050dc:	4835      	ldr	r0, [pc, #212]	; (80051b4 <checkAktifCalisma+0xd10>)
 80050de:	f005 fbe7 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d104      	bne.n	80050f2 <checkAktifCalisma+0xc4e>
 80050e8:	4b33      	ldr	r3, [pc, #204]	; (80051b8 <checkAktifCalisma+0xd14>)
 80050ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	d00d      	beq.n	800510e <checkAktifCalisma+0xc6a>
 80050f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050f6:	4831      	ldr	r0, [pc, #196]	; (80051bc <checkAktifCalisma+0xd18>)
 80050f8:	f005 fbda 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10d      	bne.n	800511e <checkAktifCalisma+0xc7a>
 8005102:	4b2d      	ldr	r3, [pc, #180]	; (80051b8 <checkAktifCalisma+0xd14>)
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	1e51      	subs	r1, r2, #1
 800510a:	430b      	orrs	r3, r1
 800510c:	d107      	bne.n	800511e <checkAktifCalisma+0xc7a>
						&&(makineStop==1)) {
 800510e:	4b26      	ldr	r3, [pc, #152]	; (80051a8 <checkAktifCalisma+0xd04>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <checkAktifCalisma+0xc7a>

					kapi1butonkontrol=1;
 8005116:	4b30      	ldr	r3, [pc, #192]	; (80051d8 <checkAktifCalisma+0xd34>)
 8005118:	2201      	movs	r2, #1
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	e002      	b.n	8005124 <checkAktifCalisma+0xc80>
				} else {
					kapi1butonkontrol=0;
 800511e:	4b2e      	ldr	r3, [pc, #184]	; (80051d8 <checkAktifCalisma+0xd34>)
 8005120:	2200      	movs	r2, #0
 8005122:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005124:	4b21      	ldr	r3, [pc, #132]	; (80051ac <checkAktifCalisma+0xd08>)
 8005126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512a:	1e91      	subs	r1, r2, #2
 800512c:	430b      	orrs	r3, r1
 800512e:	d126      	bne.n	800517e <checkAktifCalisma+0xcda>
 8005130:	4b1f      	ldr	r3, [pc, #124]	; (80051b0 <checkAktifCalisma+0xd0c>)
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	1e51      	subs	r1, r2, #1
 8005138:	430b      	orrs	r3, r1
 800513a:	d005      	beq.n	8005148 <checkAktifCalisma+0xca4>
 800513c:	4b1c      	ldr	r3, [pc, #112]	; (80051b0 <checkAktifCalisma+0xd0c>)
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	1ed1      	subs	r1, r2, #3
 8005144:	430b      	orrs	r3, r1
 8005146:	d11a      	bne.n	800517e <checkAktifCalisma+0xcda>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005148:	2104      	movs	r1, #4
 800514a:	481a      	ldr	r0, [pc, #104]	; (80051b4 <checkAktifCalisma+0xd10>)
 800514c:	f005 fbb0 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005150:	4603      	mov	r3, r0
 8005152:	2b01      	cmp	r3, #1
 8005154:	d004      	beq.n	8005160 <checkAktifCalisma+0xcbc>
 8005156:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <checkAktifCalisma+0xd1c>)
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	4313      	orrs	r3, r2
 800515e:	d10e      	bne.n	800517e <checkAktifCalisma+0xcda>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005160:	2102      	movs	r1, #2
 8005162:	4814      	ldr	r0, [pc, #80]	; (80051b4 <checkAktifCalisma+0xd10>)
 8005164:	f005 fba4 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d107      	bne.n	800517e <checkAktifCalisma+0xcda>
						&&(makineStop==1)) {
 800516e:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <checkAktifCalisma+0xd04>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <checkAktifCalisma+0xcda>

					kapi1pizzato=1;
 8005176:	4b19      	ldr	r3, [pc, #100]	; (80051dc <checkAktifCalisma+0xd38>)
 8005178:	2201      	movs	r2, #1
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	e002      	b.n	8005184 <checkAktifCalisma+0xce0>
				} else {
					kapi1pizzato=0;
 800517e:	4b17      	ldr	r3, [pc, #92]	; (80051dc <checkAktifCalisma+0xd38>)
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005184:	4b14      	ldr	r3, [pc, #80]	; (80051d8 <checkAktifCalisma+0xd34>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d107      	bne.n	800519c <checkAktifCalisma+0xcf8>
 800518c:	4b13      	ldr	r3, [pc, #76]	; (80051dc <checkAktifCalisma+0xd38>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d103      	bne.n	800519c <checkAktifCalisma+0xcf8>
 8005194:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <checkAktifCalisma+0xd24>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d023      	beq.n	80051e4 <checkAktifCalisma+0xd40>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800519c:	2201      	movs	r2, #1
 800519e:	2180      	movs	r1, #128	; 0x80
 80051a0:	480f      	ldr	r0, [pc, #60]	; (80051e0 <checkAktifCalisma+0xd3c>)
 80051a2:	f005 fb9c 	bl	800a8de <HAL_GPIO_WritePin>
 80051a6:	e022      	b.n	80051ee <checkAktifCalisma+0xd4a>
 80051a8:	2000122e 	.word	0x2000122e
 80051ac:	20001100 	.word	0x20001100
 80051b0:	200010f8 	.word	0x200010f8
 80051b4:	40011000 	.word	0x40011000
 80051b8:	20001118 	.word	0x20001118
 80051bc:	40010c00 	.word	0x40010c00
 80051c0:	200010e8 	.word	0x200010e8
 80051c4:	2000121b 	.word	0x2000121b
 80051c8:	2000122f 	.word	0x2000122f
 80051cc:	20001088 	.word	0x20001088
 80051d0:	2000108c 	.word	0x2000108c
 80051d4:	20001180 	.word	0x20001180
 80051d8:	20001230 	.word	0x20001230
 80051dc:	20001231 	.word	0x20001231
 80051e0:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80051e4:	2200      	movs	r2, #0
 80051e6:	2180      	movs	r1, #128	; 0x80
 80051e8:	488e      	ldr	r0, [pc, #568]	; (8005424 <checkAktifCalisma+0xf80>)
 80051ea:	f005 fb78 	bl	800a8de <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80051ee:	4b8e      	ldr	r3, [pc, #568]	; (8005428 <checkAktifCalisma+0xf84>)
 80051f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	d148      	bne.n	800528a <checkAktifCalisma+0xde6>
 80051f8:	4b8c      	ldr	r3, [pc, #560]	; (800542c <checkAktifCalisma+0xf88>)
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	1e51      	subs	r1, r2, #1
 8005200:	430b      	orrs	r3, r1
 8005202:	d005      	beq.n	8005210 <checkAktifCalisma+0xd6c>
 8005204:	4b89      	ldr	r3, [pc, #548]	; (800542c <checkAktifCalisma+0xf88>)
 8005206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520a:	1ed1      	subs	r1, r2, #3
 800520c:	430b      	orrs	r3, r1
 800520e:	d13c      	bne.n	800528a <checkAktifCalisma+0xde6>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005210:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005214:	4886      	ldr	r0, [pc, #536]	; (8005430 <checkAktifCalisma+0xf8c>)
 8005216:	f005 fb4b 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d104      	bne.n	800522a <checkAktifCalisma+0xd86>
 8005220:	4b84      	ldr	r3, [pc, #528]	; (8005434 <checkAktifCalisma+0xf90>)
 8005222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005226:	4313      	orrs	r3, r2
 8005228:	d00d      	beq.n	8005246 <checkAktifCalisma+0xda2>
 800522a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800522e:	4882      	ldr	r0, [pc, #520]	; (8005438 <checkAktifCalisma+0xf94>)
 8005230:	f005 fb3e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d127      	bne.n	800528a <checkAktifCalisma+0xde6>
 800523a:	4b7e      	ldr	r3, [pc, #504]	; (8005434 <checkAktifCalisma+0xf90>)
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	1e51      	subs	r1, r2, #1
 8005242:	430b      	orrs	r3, r1
 8005244:	d121      	bne.n	800528a <checkAktifCalisma+0xde6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005246:	2102      	movs	r1, #2
 8005248:	4879      	ldr	r0, [pc, #484]	; (8005430 <checkAktifCalisma+0xf8c>)
 800524a:	f005 fb31 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800524e:	4603      	mov	r3, r0
 8005250:	2b01      	cmp	r3, #1
 8005252:	d11a      	bne.n	800528a <checkAktifCalisma+0xde6>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005254:	2104      	movs	r1, #4
 8005256:	4876      	ldr	r0, [pc, #472]	; (8005430 <checkAktifCalisma+0xf8c>)
 8005258:	f005 fb2a 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d113      	bne.n	800528a <checkAktifCalisma+0xde6>
						&&(makineStop==1)
 8005262:	4b76      	ldr	r3, [pc, #472]	; (800543c <checkAktifCalisma+0xf98>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00f      	beq.n	800528a <checkAktifCalisma+0xde6>
						&&(butonKontrol==0)) {
 800526a:	4b75      	ldr	r3, [pc, #468]	; (8005440 <checkAktifCalisma+0xf9c>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	f083 0301 	eor.w	r3, r3, #1
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <checkAktifCalisma+0xde6>

					kapi2prudhome=1;
 8005278:	4b72      	ldr	r3, [pc, #456]	; (8005444 <checkAktifCalisma+0xfa0>)
 800527a:	2201      	movs	r2, #1
 800527c:	701a      	strb	r2, [r3, #0]
					timer = millis;
 800527e:	4b72      	ldr	r3, [pc, #456]	; (8005448 <checkAktifCalisma+0xfa4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a72      	ldr	r2, [pc, #456]	; (800544c <checkAktifCalisma+0xfa8>)
 8005284:	6013      	str	r3, [r2, #0]
					bekle();
 8005286:	f7fe ff55 	bl	8004134 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800528a:	4b6f      	ldr	r3, [pc, #444]	; (8005448 <checkAktifCalisma+0xfa4>)
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b6f      	ldr	r3, [pc, #444]	; (800544c <checkAktifCalisma+0xfa8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2200      	movs	r2, #0
 8005296:	61bb      	str	r3, [r7, #24]
 8005298:	61fa      	str	r2, [r7, #28]
 800529a:	4b6d      	ldr	r3, [pc, #436]	; (8005450 <checkAktifCalisma+0xfac>)
 800529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80052a4:	4604      	mov	r4, r0
 80052a6:	4294      	cmp	r4, r2
 80052a8:	4199      	sbcs	r1, r3
 80052aa:	d20d      	bcs.n	80052c8 <checkAktifCalisma+0xe24>
 80052ac:	2102      	movs	r1, #2
 80052ae:	4860      	ldr	r0, [pc, #384]	; (8005430 <checkAktifCalisma+0xf8c>)
 80052b0:	f005 fafe 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d006      	beq.n	80052c8 <checkAktifCalisma+0xe24>
 80052ba:	4b60      	ldr	r3, [pc, #384]	; (800543c <checkAktifCalisma+0xf98>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	f083 0301 	eor.w	r3, r3, #1
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <checkAktifCalisma+0xe2a>
					kapi2prudhome=0;
 80052c8:	4b5e      	ldr	r3, [pc, #376]	; (8005444 <checkAktifCalisma+0xfa0>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80052ce:	4b56      	ldr	r3, [pc, #344]	; (8005428 <checkAktifCalisma+0xf84>)
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	1e51      	subs	r1, r2, #1
 80052d6:	430b      	orrs	r3, r1
 80052d8:	d13c      	bne.n	8005354 <checkAktifCalisma+0xeb0>
 80052da:	4b54      	ldr	r3, [pc, #336]	; (800542c <checkAktifCalisma+0xf88>)
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	1e51      	subs	r1, r2, #1
 80052e2:	430b      	orrs	r3, r1
 80052e4:	d005      	beq.n	80052f2 <checkAktifCalisma+0xe4e>
 80052e6:	4b51      	ldr	r3, [pc, #324]	; (800542c <checkAktifCalisma+0xf88>)
 80052e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ec:	1ed1      	subs	r1, r2, #3
 80052ee:	430b      	orrs	r3, r1
 80052f0:	d130      	bne.n	8005354 <checkAktifCalisma+0xeb0>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80052f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052f6:	484e      	ldr	r0, [pc, #312]	; (8005430 <checkAktifCalisma+0xf8c>)
 80052f8:	f005 fada 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d104      	bne.n	800530c <checkAktifCalisma+0xe68>
 8005302:	4b4c      	ldr	r3, [pc, #304]	; (8005434 <checkAktifCalisma+0xf90>)
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	4313      	orrs	r3, r2
 800530a:	d00d      	beq.n	8005328 <checkAktifCalisma+0xe84>
 800530c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005310:	4849      	ldr	r0, [pc, #292]	; (8005438 <checkAktifCalisma+0xf94>)
 8005312:	f005 facd 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d11b      	bne.n	8005354 <checkAktifCalisma+0xeb0>
 800531c:	4b45      	ldr	r3, [pc, #276]	; (8005434 <checkAktifCalisma+0xf90>)
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	1e51      	subs	r1, r2, #1
 8005324:	430b      	orrs	r3, r1
 8005326:	d115      	bne.n	8005354 <checkAktifCalisma+0xeb0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005328:	2102      	movs	r1, #2
 800532a:	4841      	ldr	r0, [pc, #260]	; (8005430 <checkAktifCalisma+0xf8c>)
 800532c:	f005 fac0 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005330:	4603      	mov	r3, r0
 8005332:	2b01      	cmp	r3, #1
 8005334:	d10e      	bne.n	8005354 <checkAktifCalisma+0xeb0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005336:	2104      	movs	r1, #4
 8005338:	483d      	ldr	r0, [pc, #244]	; (8005430 <checkAktifCalisma+0xf8c>)
 800533a:	f005 fab9 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d107      	bne.n	8005354 <checkAktifCalisma+0xeb0>
						&&(makineStop==1)) {
 8005344:	4b3d      	ldr	r3, [pc, #244]	; (800543c <checkAktifCalisma+0xf98>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <checkAktifCalisma+0xeb0>

					kapi2butonkontrol=1;
 800534c:	4b41      	ldr	r3, [pc, #260]	; (8005454 <checkAktifCalisma+0xfb0>)
 800534e:	2201      	movs	r2, #1
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	e002      	b.n	800535a <checkAktifCalisma+0xeb6>
				} else {
					kapi2butonkontrol=0;
 8005354:	4b3f      	ldr	r3, [pc, #252]	; (8005454 <checkAktifCalisma+0xfb0>)
 8005356:	2200      	movs	r2, #0
 8005358:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800535a:	4b33      	ldr	r3, [pc, #204]	; (8005428 <checkAktifCalisma+0xf84>)
 800535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005360:	1e91      	subs	r1, r2, #2
 8005362:	430b      	orrs	r3, r1
 8005364:	d121      	bne.n	80053aa <checkAktifCalisma+0xf06>
 8005366:	4b31      	ldr	r3, [pc, #196]	; (800542c <checkAktifCalisma+0xf88>)
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	1e51      	subs	r1, r2, #1
 800536e:	430b      	orrs	r3, r1
 8005370:	d005      	beq.n	800537e <checkAktifCalisma+0xeda>
 8005372:	4b2e      	ldr	r3, [pc, #184]	; (800542c <checkAktifCalisma+0xf88>)
 8005374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005378:	1ed1      	subs	r1, r2, #3
 800537a:	430b      	orrs	r3, r1
 800537c:	d115      	bne.n	80053aa <checkAktifCalisma+0xf06>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800537e:	2102      	movs	r1, #2
 8005380:	482b      	ldr	r0, [pc, #172]	; (8005430 <checkAktifCalisma+0xf8c>)
 8005382:	f005 fa95 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005386:	4603      	mov	r3, r0
 8005388:	2b01      	cmp	r3, #1
 800538a:	d10e      	bne.n	80053aa <checkAktifCalisma+0xf06>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800538c:	2104      	movs	r1, #4
 800538e:	4828      	ldr	r0, [pc, #160]	; (8005430 <checkAktifCalisma+0xf8c>)
 8005390:	f005 fa8e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d107      	bne.n	80053aa <checkAktifCalisma+0xf06>
						&&(makineStop==1)) {
 800539a:	4b28      	ldr	r3, [pc, #160]	; (800543c <checkAktifCalisma+0xf98>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <checkAktifCalisma+0xf06>

					kapi2pizzato=1;
 80053a2:	4b2d      	ldr	r3, [pc, #180]	; (8005458 <checkAktifCalisma+0xfb4>)
 80053a4:	2201      	movs	r2, #1
 80053a6:	701a      	strb	r2, [r3, #0]
 80053a8:	e002      	b.n	80053b0 <checkAktifCalisma+0xf0c>
				} else {
					kapi2pizzato=0;
 80053aa:	4b2b      	ldr	r3, [pc, #172]	; (8005458 <checkAktifCalisma+0xfb4>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80053b0:	4b28      	ldr	r3, [pc, #160]	; (8005454 <checkAktifCalisma+0xfb0>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d107      	bne.n	80053c8 <checkAktifCalisma+0xf24>
 80053b8:	4b27      	ldr	r3, [pc, #156]	; (8005458 <checkAktifCalisma+0xfb4>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d103      	bne.n	80053c8 <checkAktifCalisma+0xf24>
 80053c0:	4b20      	ldr	r3, [pc, #128]	; (8005444 <checkAktifCalisma+0xfa0>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <checkAktifCalisma+0xf30>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80053c8:	2201      	movs	r2, #1
 80053ca:	2140      	movs	r1, #64	; 0x40
 80053cc:	4815      	ldr	r0, [pc, #84]	; (8005424 <checkAktifCalisma+0xf80>)
 80053ce:	f005 fa86 	bl	800a8de <HAL_GPIO_WritePin>
 80053d2:	e004      	b.n	80053de <checkAktifCalisma+0xf3a>
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80053d4:	2200      	movs	r2, #0
 80053d6:	2140      	movs	r1, #64	; 0x40
 80053d8:	4812      	ldr	r0, [pc, #72]	; (8005424 <checkAktifCalisma+0xf80>)
 80053da:	f005 fa80 	bl	800a8de <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 80053de:	4b1f      	ldr	r3, [pc, #124]	; (800545c <checkAktifCalisma+0xfb8>)
 80053e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	d005      	beq.n	80053f4 <checkAktifCalisma+0xf50>
 80053e8:	4b1c      	ldr	r3, [pc, #112]	; (800545c <checkAktifCalisma+0xfb8>)
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	1e91      	subs	r1, r2, #2
 80053f0:	430b      	orrs	r3, r1
 80053f2:	d139      	bne.n	8005468 <checkAktifCalisma+0xfc4>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80053f4:	2104      	movs	r1, #4
 80053f6:	480e      	ldr	r0, [pc, #56]	; (8005430 <checkAktifCalisma+0xf8c>)
 80053f8:	f005 fa5a 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d004      	beq.n	800540c <checkAktifCalisma+0xf68>
 8005402:	4b17      	ldr	r3, [pc, #92]	; (8005460 <checkAktifCalisma+0xfbc>)
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	4313      	orrs	r3, r2
 800540a:	d12d      	bne.n	8005468 <checkAktifCalisma+0xfc4>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 800540c:	2102      	movs	r1, #2
 800540e:	4808      	ldr	r0, [pc, #32]	; (8005430 <checkAktifCalisma+0xf8c>)
 8005410:	f005 fa4e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d126      	bne.n	8005468 <checkAktifCalisma+0xfc4>

					kapiTablaAcKonumKat1=1;
 800541a:	4b12      	ldr	r3, [pc, #72]	; (8005464 <checkAktifCalisma+0xfc0>)
 800541c:	2201      	movs	r2, #1
 800541e:	701a      	strb	r2, [r3, #0]
 8005420:	e025      	b.n	800546e <checkAktifCalisma+0xfca>
 8005422:	bf00      	nop
 8005424:	40010800 	.word	0x40010800
 8005428:	20001108 	.word	0x20001108
 800542c:	200010f8 	.word	0x200010f8
 8005430:	40011000 	.word	0x40011000
 8005434:	20001118 	.word	0x20001118
 8005438:	40010c00 	.word	0x40010c00
 800543c:	2000122e 	.word	0x2000122e
 8005440:	2000121b 	.word	0x2000121b
 8005444:	20001232 	.word	0x20001232
 8005448:	20001088 	.word	0x20001088
 800544c:	2000108c 	.word	0x2000108c
 8005450:	20001188 	.word	0x20001188
 8005454:	20001233 	.word	0x20001233
 8005458:	20001234 	.word	0x20001234
 800545c:	20001120 	.word	0x20001120
 8005460:	200010e8 	.word	0x200010e8
 8005464:	20001238 	.word	0x20001238
				} else {
					kapiTablaAcKonumKat1=0;
 8005468:	4b98      	ldr	r3, [pc, #608]	; (80056cc <checkAktifCalisma+0x1228>)
 800546a:	2200      	movs	r2, #0
 800546c:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 800546e:	4b98      	ldr	r3, [pc, #608]	; (80056d0 <checkAktifCalisma+0x122c>)
 8005470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005474:	1e51      	subs	r1, r2, #1
 8005476:	430b      	orrs	r3, r1
 8005478:	d005      	beq.n	8005486 <checkAktifCalisma+0xfe2>
 800547a:	4b95      	ldr	r3, [pc, #596]	; (80056d0 <checkAktifCalisma+0x122c>)
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	1e91      	subs	r1, r2, #2
 8005482:	430b      	orrs	r3, r1
 8005484:	d111      	bne.n	80054aa <checkAktifCalisma+0x1006>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005486:	2102      	movs	r1, #2
 8005488:	4892      	ldr	r0, [pc, #584]	; (80056d4 <checkAktifCalisma+0x1230>)
 800548a:	f005 fa11 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800548e:	4603      	mov	r3, r0
 8005490:	2b01      	cmp	r3, #1
 8005492:	d10a      	bne.n	80054aa <checkAktifCalisma+0x1006>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005494:	2104      	movs	r1, #4
 8005496:	488f      	ldr	r0, [pc, #572]	; (80056d4 <checkAktifCalisma+0x1230>)
 8005498:	f005 fa0a 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d103      	bne.n	80054aa <checkAktifCalisma+0x1006>

					kapiTablaAcKonumKat2=1;
 80054a2:	4b8d      	ldr	r3, [pc, #564]	; (80056d8 <checkAktifCalisma+0x1234>)
 80054a4:	2201      	movs	r2, #1
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	e002      	b.n	80054b0 <checkAktifCalisma+0x100c>
				} else {
					kapiTablaAcKonumKat2=0;
 80054aa:	4b8b      	ldr	r3, [pc, #556]	; (80056d8 <checkAktifCalisma+0x1234>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 80054b0:	4b86      	ldr	r3, [pc, #536]	; (80056cc <checkAktifCalisma+0x1228>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d011      	beq.n	80054dc <checkAktifCalisma+0x1038>
						&& kapiAcTipi==1
 80054b8:	4b88      	ldr	r3, [pc, #544]	; (80056dc <checkAktifCalisma+0x1238>)
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	1e51      	subs	r1, r2, #1
 80054c0:	430b      	orrs	r3, r1
 80054c2:	d10b      	bne.n	80054dc <checkAktifCalisma+0x1038>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80054c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054c8:	4885      	ldr	r0, [pc, #532]	; (80056e0 <checkAktifCalisma+0x123c>)
 80054ca:	f005 f9f1 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d103      	bne.n	80054dc <checkAktifCalisma+0x1038>

					kapiactablaesp1=1;
 80054d4:	4b83      	ldr	r3, [pc, #524]	; (80056e4 <checkAktifCalisma+0x1240>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	e002      	b.n	80054e2 <checkAktifCalisma+0x103e>
				} else {
					kapiactablaesp1=0;
 80054dc:	4b81      	ldr	r3, [pc, #516]	; (80056e4 <checkAktifCalisma+0x1240>)
 80054de:	2200      	movs	r2, #0
 80054e0:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 80054e2:	4b7d      	ldr	r3, [pc, #500]	; (80056d8 <checkAktifCalisma+0x1234>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d011      	beq.n	800550e <checkAktifCalisma+0x106a>
						&& kapiAcTipi==1
 80054ea:	4b7c      	ldr	r3, [pc, #496]	; (80056dc <checkAktifCalisma+0x1238>)
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	1e51      	subs	r1, r2, #1
 80054f2:	430b      	orrs	r3, r1
 80054f4:	d10b      	bne.n	800550e <checkAktifCalisma+0x106a>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80054f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054fa:	4879      	ldr	r0, [pc, #484]	; (80056e0 <checkAktifCalisma+0x123c>)
 80054fc:	f005 f9d8 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d103      	bne.n	800550e <checkAktifCalisma+0x106a>

					kapiactablaesp2=1;
 8005506:	4b78      	ldr	r3, [pc, #480]	; (80056e8 <checkAktifCalisma+0x1244>)
 8005508:	2201      	movs	r2, #1
 800550a:	701a      	strb	r2, [r3, #0]
 800550c:	e002      	b.n	8005514 <checkAktifCalisma+0x1070>
				} else {
					kapiactablaesp2=0;
 800550e:	4b76      	ldr	r3, [pc, #472]	; (80056e8 <checkAktifCalisma+0x1244>)
 8005510:	2200      	movs	r2, #0
 8005512:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005514:	4b75      	ldr	r3, [pc, #468]	; (80056ec <checkAktifCalisma+0x1248>)
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	4313      	orrs	r3, r2
 800551c:	d159      	bne.n	80055d2 <checkAktifCalisma+0x112e>
 800551e:	4b74      	ldr	r3, [pc, #464]	; (80056f0 <checkAktifCalisma+0x124c>)
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	1e91      	subs	r1, r2, #2
 8005526:	430b      	orrs	r3, r1
 8005528:	d005      	beq.n	8005536 <checkAktifCalisma+0x1092>
 800552a:	4b71      	ldr	r3, [pc, #452]	; (80056f0 <checkAktifCalisma+0x124c>)
 800552c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005530:	1ed1      	subs	r1, r2, #3
 8005532:	430b      	orrs	r3, r1
 8005534:	d14d      	bne.n	80055d2 <checkAktifCalisma+0x112e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005536:	4b65      	ldr	r3, [pc, #404]	; (80056cc <checkAktifCalisma+0x1228>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d103      	bne.n	8005546 <checkAktifCalisma+0x10a2>
 800553e:	4b66      	ldr	r3, [pc, #408]	; (80056d8 <checkAktifCalisma+0x1234>)
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d045      	beq.n	80055d2 <checkAktifCalisma+0x112e>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8005546:	f44f 7100 	mov.w	r1, #512	; 0x200
 800554a:	4862      	ldr	r0, [pc, #392]	; (80056d4 <checkAktifCalisma+0x1230>)
 800554c:	f005 f9b0 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d01c      	beq.n	8005590 <checkAktifCalisma+0x10ec>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8005556:	2180      	movs	r1, #128	; 0x80
 8005558:	485e      	ldr	r0, [pc, #376]	; (80056d4 <checkAktifCalisma+0x1230>)
 800555a:	f005 f9a9 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d106      	bne.n	8005572 <checkAktifCalisma+0x10ce>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005564:	2104      	movs	r1, #4
 8005566:	485b      	ldr	r0, [pc, #364]	; (80056d4 <checkAktifCalisma+0x1230>)
 8005568:	f005 f9a2 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800556c:	4603      	mov	r3, r0
 800556e:	2b01      	cmp	r3, #1
 8005570:	d00e      	beq.n	8005590 <checkAktifCalisma+0x10ec>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005576:	4857      	ldr	r0, [pc, #348]	; (80056d4 <checkAktifCalisma+0x1230>)
 8005578:	f005 f99a 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10b      	bne.n	800559a <checkAktifCalisma+0x10f6>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005582:	2102      	movs	r1, #2
 8005584:	4853      	ldr	r0, [pc, #332]	; (80056d4 <checkAktifCalisma+0x1230>)
 8005586:	f005 f993 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800558a:	4603      	mov	r3, r0
 800558c:	2b01      	cmp	r3, #1
 800558e:	d104      	bne.n	800559a <checkAktifCalisma+0x10f6>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005590:	4b52      	ldr	r3, [pc, #328]	; (80056dc <checkAktifCalisma+0x1238>)
 8005592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005596:	4313      	orrs	r3, r2
 8005598:	d007      	beq.n	80055aa <checkAktifCalisma+0x1106>
 800559a:	4b52      	ldr	r3, [pc, #328]	; (80056e4 <checkAktifCalisma+0x1240>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d103      	bne.n	80055aa <checkAktifCalisma+0x1106>
 80055a2:	4b51      	ldr	r3, [pc, #324]	; (80056e8 <checkAktifCalisma+0x1244>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d013      	beq.n	80055d2 <checkAktifCalisma+0x112e>
						&&(makineStop==1)
 80055aa:	4b52      	ldr	r3, [pc, #328]	; (80056f4 <checkAktifCalisma+0x1250>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00f      	beq.n	80055d2 <checkAktifCalisma+0x112e>
						&&(butonKontrol==0)) {
 80055b2:	4b51      	ldr	r3, [pc, #324]	; (80056f8 <checkAktifCalisma+0x1254>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	f083 0301 	eor.w	r3, r3, #1
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d008      	beq.n	80055d2 <checkAktifCalisma+0x112e>

					kapiTablaprudhome=1;
 80055c0:	4b4e      	ldr	r3, [pc, #312]	; (80056fc <checkAktifCalisma+0x1258>)
 80055c2:	2201      	movs	r2, #1
 80055c4:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80055c6:	4b4e      	ldr	r3, [pc, #312]	; (8005700 <checkAktifCalisma+0x125c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a4e      	ldr	r2, [pc, #312]	; (8005704 <checkAktifCalisma+0x1260>)
 80055cc:	6013      	str	r3, [r2, #0]
					bekle();
 80055ce:	f7fe fdb1 	bl	8004134 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80055d2:	4b4b      	ldr	r3, [pc, #300]	; (8005700 <checkAktifCalisma+0x125c>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	4b4b      	ldr	r3, [pc, #300]	; (8005704 <checkAktifCalisma+0x1260>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2200      	movs	r2, #0
 80055de:	613b      	str	r3, [r7, #16]
 80055e0:	617a      	str	r2, [r7, #20]
 80055e2:	4b49      	ldr	r3, [pc, #292]	; (8005708 <checkAktifCalisma+0x1264>)
 80055e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80055ec:	4604      	mov	r4, r0
 80055ee:	4294      	cmp	r4, r2
 80055f0:	4199      	sbcs	r1, r3
 80055f2:	d214      	bcs.n	800561e <checkAktifCalisma+0x117a>
 80055f4:	4b35      	ldr	r3, [pc, #212]	; (80056cc <checkAktifCalisma+0x1228>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	f083 0301 	eor.w	r3, r3, #1
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d006      	beq.n	8005610 <checkAktifCalisma+0x116c>
 8005602:	4b35      	ldr	r3, [pc, #212]	; (80056d8 <checkAktifCalisma+0x1234>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	f083 0301 	eor.w	r3, r3, #1
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d106      	bne.n	800561e <checkAktifCalisma+0x117a>
 8005610:	4b38      	ldr	r3, [pc, #224]	; (80056f4 <checkAktifCalisma+0x1250>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	f083 0301 	eor.w	r3, r3, #1
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <checkAktifCalisma+0x1180>
					kapiTablaprudhome=0;
 800561e:	4b37      	ldr	r3, [pc, #220]	; (80056fc <checkAktifCalisma+0x1258>)
 8005620:	2200      	movs	r2, #0
 8005622:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005624:	4b31      	ldr	r3, [pc, #196]	; (80056ec <checkAktifCalisma+0x1248>)
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	1e51      	subs	r1, r2, #1
 800562c:	430b      	orrs	r3, r1
 800562e:	d16f      	bne.n	8005710 <checkAktifCalisma+0x126c>
 8005630:	4b2f      	ldr	r3, [pc, #188]	; (80056f0 <checkAktifCalisma+0x124c>)
 8005632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005636:	1e91      	subs	r1, r2, #2
 8005638:	430b      	orrs	r3, r1
 800563a:	d005      	beq.n	8005648 <checkAktifCalisma+0x11a4>
 800563c:	4b2c      	ldr	r3, [pc, #176]	; (80056f0 <checkAktifCalisma+0x124c>)
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	1ed1      	subs	r1, r2, #3
 8005644:	430b      	orrs	r3, r1
 8005646:	d163      	bne.n	8005710 <checkAktifCalisma+0x126c>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005648:	4b20      	ldr	r3, [pc, #128]	; (80056cc <checkAktifCalisma+0x1228>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d103      	bne.n	8005658 <checkAktifCalisma+0x11b4>
 8005650:	4b21      	ldr	r3, [pc, #132]	; (80056d8 <checkAktifCalisma+0x1234>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d05b      	beq.n	8005710 <checkAktifCalisma+0x126c>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8005658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800565c:	481d      	ldr	r0, [pc, #116]	; (80056d4 <checkAktifCalisma+0x1230>)
 800565e:	f005 f927 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01c      	beq.n	80056a2 <checkAktifCalisma+0x11fe>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8005668:	2180      	movs	r1, #128	; 0x80
 800566a:	481a      	ldr	r0, [pc, #104]	; (80056d4 <checkAktifCalisma+0x1230>)
 800566c:	f005 f920 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <checkAktifCalisma+0x11e0>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005676:	2104      	movs	r1, #4
 8005678:	4816      	ldr	r0, [pc, #88]	; (80056d4 <checkAktifCalisma+0x1230>)
 800567a:	f005 f919 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800567e:	4603      	mov	r3, r0
 8005680:	2b01      	cmp	r3, #1
 8005682:	d00e      	beq.n	80056a2 <checkAktifCalisma+0x11fe>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005688:	4812      	ldr	r0, [pc, #72]	; (80056d4 <checkAktifCalisma+0x1230>)
 800568a:	f005 f911 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10b      	bne.n	80056ac <checkAktifCalisma+0x1208>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005694:	2102      	movs	r1, #2
 8005696:	480f      	ldr	r0, [pc, #60]	; (80056d4 <checkAktifCalisma+0x1230>)
 8005698:	f005 f90a 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800569c:	4603      	mov	r3, r0
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d104      	bne.n	80056ac <checkAktifCalisma+0x1208>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80056a2:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <checkAktifCalisma+0x1238>)
 80056a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	d007      	beq.n	80056bc <checkAktifCalisma+0x1218>
 80056ac:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <checkAktifCalisma+0x1240>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d103      	bne.n	80056bc <checkAktifCalisma+0x1218>
 80056b4:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <checkAktifCalisma+0x1244>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d029      	beq.n	8005710 <checkAktifCalisma+0x126c>
						&&(makineStop==1)) {
 80056bc:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <checkAktifCalisma+0x1250>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d025      	beq.n	8005710 <checkAktifCalisma+0x126c>

					kapiTablabutonkontrol=1;
 80056c4:	4b11      	ldr	r3, [pc, #68]	; (800570c <checkAktifCalisma+0x1268>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	e024      	b.n	8005716 <checkAktifCalisma+0x1272>
 80056cc:	20001238 	.word	0x20001238
 80056d0:	20001120 	.word	0x20001120
 80056d4:	40011000 	.word	0x40011000
 80056d8:	20001239 	.word	0x20001239
 80056dc:	20001118 	.word	0x20001118
 80056e0:	40010c00 	.word	0x40010c00
 80056e4:	20001248 	.word	0x20001248
 80056e8:	20001249 	.word	0x20001249
 80056ec:	20001110 	.word	0x20001110
 80056f0:	200010f8 	.word	0x200010f8
 80056f4:	2000122e 	.word	0x2000122e
 80056f8:	2000121b 	.word	0x2000121b
 80056fc:	20001235 	.word	0x20001235
 8005700:	20001088 	.word	0x20001088
 8005704:	2000108c 	.word	0x2000108c
 8005708:	20001190 	.word	0x20001190
 800570c:	20001236 	.word	0x20001236
				} else {
					kapiTablabutonkontrol=0;
 8005710:	4b83      	ldr	r3, [pc, #524]	; (8005920 <checkAktifCalisma+0x147c>)
 8005712:	2200      	movs	r2, #0
 8005714:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005716:	4b83      	ldr	r3, [pc, #524]	; (8005924 <checkAktifCalisma+0x1480>)
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	1e91      	subs	r1, r2, #2
 800571e:	430b      	orrs	r3, r1
 8005720:	d11b      	bne.n	800575a <checkAktifCalisma+0x12b6>
 8005722:	4b81      	ldr	r3, [pc, #516]	; (8005928 <checkAktifCalisma+0x1484>)
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	1e91      	subs	r1, r2, #2
 800572a:	430b      	orrs	r3, r1
 800572c:	d005      	beq.n	800573a <checkAktifCalisma+0x1296>
 800572e:	4b7e      	ldr	r3, [pc, #504]	; (8005928 <checkAktifCalisma+0x1484>)
 8005730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005734:	1ed1      	subs	r1, r2, #3
 8005736:	430b      	orrs	r3, r1
 8005738:	d10f      	bne.n	800575a <checkAktifCalisma+0x12b6>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800573a:	4b7c      	ldr	r3, [pc, #496]	; (800592c <checkAktifCalisma+0x1488>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d103      	bne.n	800574a <checkAktifCalisma+0x12a6>
 8005742:	4b7b      	ldr	r3, [pc, #492]	; (8005930 <checkAktifCalisma+0x148c>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d007      	beq.n	800575a <checkAktifCalisma+0x12b6>
						&&(makineStop==1)) {
 800574a:	4b7a      	ldr	r3, [pc, #488]	; (8005934 <checkAktifCalisma+0x1490>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <checkAktifCalisma+0x12b6>

					kapiTablapizzato=1;
 8005752:	4b79      	ldr	r3, [pc, #484]	; (8005938 <checkAktifCalisma+0x1494>)
 8005754:	2201      	movs	r2, #1
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	e002      	b.n	8005760 <checkAktifCalisma+0x12bc>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 800575a:	4b77      	ldr	r3, [pc, #476]	; (8005938 <checkAktifCalisma+0x1494>)
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005760:	4b6f      	ldr	r3, [pc, #444]	; (8005920 <checkAktifCalisma+0x147c>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d107      	bne.n	8005778 <checkAktifCalisma+0x12d4>
 8005768:	4b74      	ldr	r3, [pc, #464]	; (800593c <checkAktifCalisma+0x1498>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d103      	bne.n	8005778 <checkAktifCalisma+0x12d4>
 8005770:	4b71      	ldr	r3, [pc, #452]	; (8005938 <checkAktifCalisma+0x1494>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d005      	beq.n	8005784 <checkAktifCalisma+0x12e0>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005778:	2201      	movs	r2, #1
 800577a:	2120      	movs	r1, #32
 800577c:	4870      	ldr	r0, [pc, #448]	; (8005940 <checkAktifCalisma+0x149c>)
 800577e:	f005 f8ae 	bl	800a8de <HAL_GPIO_WritePin>
 8005782:	e004      	b.n	800578e <checkAktifCalisma+0x12ea>
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005784:	2200      	movs	r2, #0
 8005786:	2120      	movs	r1, #32
 8005788:	486d      	ldr	r0, [pc, #436]	; (8005940 <checkAktifCalisma+0x149c>)
 800578a:	f005 f8a8 	bl	800a8de <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 800578e:	4b6d      	ldr	r3, [pc, #436]	; (8005944 <checkAktifCalisma+0x14a0>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00f      	beq.n	80057b6 <checkAktifCalisma+0x1312>
 8005796:	2102      	movs	r1, #2
 8005798:	486b      	ldr	r0, [pc, #428]	; (8005948 <checkAktifCalisma+0x14a4>)
 800579a:	f005 f889 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d108      	bne.n	80057b6 <checkAktifCalisma+0x1312>
 80057a4:	4b69      	ldr	r3, [pc, #420]	; (800594c <checkAktifCalisma+0x14a8>)
 80057a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	d103      	bne.n	80057b6 <checkAktifCalisma+0x1312>
 80057ae:	4b61      	ldr	r3, [pc, #388]	; (8005934 <checkAktifCalisma+0x1490>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d113      	bne.n	80057de <checkAktifCalisma+0x133a>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80057b6:	4b66      	ldr	r3, [pc, #408]	; (8005950 <checkAktifCalisma+0x14ac>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d02b      	beq.n	8005816 <checkAktifCalisma+0x1372>
 80057be:	2104      	movs	r1, #4
 80057c0:	4861      	ldr	r0, [pc, #388]	; (8005948 <checkAktifCalisma+0x14a4>)
 80057c2:	f005 f875 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d124      	bne.n	8005816 <checkAktifCalisma+0x1372>
 80057cc:	4b5f      	ldr	r3, [pc, #380]	; (800594c <checkAktifCalisma+0x14a8>)
 80057ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	d01f      	beq.n	8005816 <checkAktifCalisma+0x1372>
 80057d6:	4b57      	ldr	r3, [pc, #348]	; (8005934 <checkAktifCalisma+0x1490>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d01b      	beq.n	8005816 <checkAktifCalisma+0x1372>



					calismaSayisi++;
 80057de:	4b5d      	ldr	r3, [pc, #372]	; (8005954 <checkAktifCalisma+0x14b0>)
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	1c51      	adds	r1, r2, #1
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	f143 0300 	adc.w	r3, r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	4b59      	ldr	r3, [pc, #356]	; (8005954 <checkAktifCalisma+0x14b0>)
 80057f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80057f4:	e9c3 1200 	strd	r1, r2, [r3]
					eepromData[27]=calismaSayisi;
 80057f8:	4b56      	ldr	r3, [pc, #344]	; (8005954 <checkAktifCalisma+0x14b0>)
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	4956      	ldr	r1, [pc, #344]	; (8005958 <checkAktifCalisma+0x14b4>)
 8005800:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8

					hafizaYaz=1;
 8005804:	4b55      	ldr	r3, [pc, #340]	; (800595c <checkAktifCalisma+0x14b8>)
 8005806:	2201      	movs	r2, #1
 8005808:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 800580a:	4b4e      	ldr	r3, [pc, #312]	; (8005944 <checkAktifCalisma+0x14a0>)
 800580c:	2200      	movs	r2, #0
 800580e:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 8005810:	4b4f      	ldr	r3, [pc, #316]	; (8005950 <checkAktifCalisma+0x14ac>)
 8005812:	2200      	movs	r2, #0
 8005814:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005816:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800581a:	4851      	ldr	r0, [pc, #324]	; (8005960 <checkAktifCalisma+0x14bc>)
 800581c:	f005 f848 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d016      	beq.n	8005854 <checkAktifCalisma+0x13b0>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005826:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800582a:	484d      	ldr	r0, [pc, #308]	; (8005960 <checkAktifCalisma+0x14bc>)
 800582c:	f005 f840 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00e      	beq.n	8005854 <checkAktifCalisma+0x13b0>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005836:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800583a:	4849      	ldr	r0, [pc, #292]	; (8005960 <checkAktifCalisma+0x14bc>)
 800583c:	f005 f838 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d006      	beq.n	8005854 <checkAktifCalisma+0x13b0>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005846:	2140      	movs	r1, #64	; 0x40
 8005848:	483f      	ldr	r0, [pc, #252]	; (8005948 <checkAktifCalisma+0x14a4>)
 800584a:	f005 f831 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d103      	bne.n	800585c <checkAktifCalisma+0x13b8>

					startBasili=1;
 8005854:	4b43      	ldr	r3, [pc, #268]	; (8005964 <checkAktifCalisma+0x14c0>)
 8005856:	2201      	movs	r2, #1
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	e002      	b.n	8005862 <checkAktifCalisma+0x13be>
				} else {
					startBasili=0;
 800585c:	4b41      	ldr	r3, [pc, #260]	; (8005964 <checkAktifCalisma+0x14c0>)
 800585e:	2200      	movs	r2, #0
 8005860:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005862:	4b40      	ldr	r3, [pc, #256]	; (8005964 <checkAktifCalisma+0x14c0>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d014      	beq.n	8005894 <checkAktifCalisma+0x13f0>
 800586a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800586e:	483c      	ldr	r0, [pc, #240]	; (8005960 <checkAktifCalisma+0x14bc>)
 8005870:	f005 f81e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005874:	4603      	mov	r3, r0
 8005876:	2b01      	cmp	r3, #1
 8005878:	d10c      	bne.n	8005894 <checkAktifCalisma+0x13f0>

					hataVar=1;
 800587a:	4b3b      	ldr	r3, [pc, #236]	; (8005968 <checkAktifCalisma+0x14c4>)
 800587c:	2201      	movs	r2, #1
 800587e:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8005880:	2001      	movs	r0, #1
 8005882:	f7fb f895 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(1);
 8005886:	2001      	movs	r0, #1
 8005888:	f7fb f82c 	bl	80008e4 <hata2EEPROM>
					acilstophatasi=1;
 800588c:	4b37      	ldr	r3, [pc, #220]	; (800596c <checkAktifCalisma+0x14c8>)
 800588e:	2201      	movs	r2, #1
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	e018      	b.n	80058c6 <checkAktifCalisma+0x1422>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005894:	4b35      	ldr	r3, [pc, #212]	; (800596c <checkAktifCalisma+0x14c8>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d014      	beq.n	80058c6 <checkAktifCalisma+0x1422>
 800589c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058a0:	482f      	ldr	r0, [pc, #188]	; (8005960 <checkAktifCalisma+0x14bc>)
 80058a2:	f005 f805 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10c      	bne.n	80058c6 <checkAktifCalisma+0x1422>
 80058ac:	4b2d      	ldr	r3, [pc, #180]	; (8005964 <checkAktifCalisma+0x14c0>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	f083 0301 	eor.w	r3, r3, #1
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d005      	beq.n	80058c6 <checkAktifCalisma+0x1422>
					acilstophatasi=0;
 80058ba:	4b2c      	ldr	r3, [pc, #176]	; (800596c <checkAktifCalisma+0x14c8>)
 80058bc:	2200      	movs	r2, #0
 80058be:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 80058c0:	2001      	movs	r0, #1
 80058c2:	f7fe fbcd 	bl	8004060 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 80058c6:	4b2a      	ldr	r3, [pc, #168]	; (8005970 <checkAktifCalisma+0x14cc>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	f083 0301 	eor.w	r3, r3, #1
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d055      	beq.n	8005980 <checkAktifCalisma+0x14dc>
 80058d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058d8:	4821      	ldr	r0, [pc, #132]	; (8005960 <checkAktifCalisma+0x14bc>)
 80058da:	f004 ffe9 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <checkAktifCalisma+0x1448>
 80058e4:	4b23      	ldr	r3, [pc, #140]	; (8005974 <checkAktifCalisma+0x14d0>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d049      	beq.n	8005980 <checkAktifCalisma+0x14dc>
 80058ec:	4b22      	ldr	r3, [pc, #136]	; (8005978 <checkAktifCalisma+0x14d4>)
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	1e51      	subs	r1, r2, #1
 80058f4:	430b      	orrs	r3, r1
 80058f6:	d143      	bne.n	8005980 <checkAktifCalisma+0x14dc>
 80058f8:	4b20      	ldr	r3, [pc, #128]	; (800597c <checkAktifCalisma+0x14d8>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	f083 0301 	eor.w	r3, r3, #1
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d03c      	beq.n	8005980 <checkAktifCalisma+0x14dc>
					hataVar=1;
 8005906:	4b18      	ldr	r3, [pc, #96]	; (8005968 <checkAktifCalisma+0x14c4>)
 8005908:	2201      	movs	r2, #1
 800590a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 800590c:	2002      	movs	r0, #2
 800590e:	f7fb f84f 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(2);
 8005912:	2002      	movs	r0, #2
 8005914:	f7fa ffe6 	bl	80008e4 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8005918:	4b18      	ldr	r3, [pc, #96]	; (800597c <checkAktifCalisma+0x14d8>)
 800591a:	2201      	movs	r2, #1
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	e047      	b.n	80059b0 <checkAktifCalisma+0x150c>
 8005920:	20001236 	.word	0x20001236
 8005924:	20001110 	.word	0x20001110
 8005928:	200010f8 	.word	0x200010f8
 800592c:	20001238 	.word	0x20001238
 8005930:	20001239 	.word	0x20001239
 8005934:	2000122e 	.word	0x2000122e
 8005938:	20001237 	.word	0x20001237
 800593c:	20001235 	.word	0x20001235
 8005940:	40010800 	.word	0x40010800
 8005944:	2000122b 	.word	0x2000122b
 8005948:	40011000 	.word	0x40011000
 800594c:	200010e8 	.word	0x200010e8
 8005950:	2000122c 	.word	0x2000122c
 8005954:	200010a8 	.word	0x200010a8
 8005958:	20000d08 	.word	0x20000d08
 800595c:	20001218 	.word	0x20001218
 8005960:	40010c00 	.word	0x40010c00
 8005964:	2000123a 	.word	0x2000123a
 8005968:	20001241 	.word	0x20001241
 800596c:	2000123c 	.word	0x2000123c
 8005970:	20001243 	.word	0x20001243
 8005974:	2000124d 	.word	0x2000124d
 8005978:	200010d8 	.word	0x200010d8
 800597c:	2000123d 	.word	0x2000123d
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005980:	4b6d      	ldr	r3, [pc, #436]	; (8005b38 <checkAktifCalisma+0x1694>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d013      	beq.n	80059b0 <checkAktifCalisma+0x150c>
 8005988:	4b6c      	ldr	r3, [pc, #432]	; (8005b3c <checkAktifCalisma+0x1698>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00f      	beq.n	80059b0 <checkAktifCalisma+0x150c>
 8005990:	4b6b      	ldr	r3, [pc, #428]	; (8005b40 <checkAktifCalisma+0x169c>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	f083 0301 	eor.w	r3, r3, #1
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d008      	beq.n	80059b0 <checkAktifCalisma+0x150c>
					emniyetCercevesihatasi=0;
 800599e:	4b66      	ldr	r3, [pc, #408]	; (8005b38 <checkAktifCalisma+0x1694>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 80059a4:	4b67      	ldr	r3, [pc, #412]	; (8005b44 <checkAktifCalisma+0x16a0>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 80059aa:	2002      	movs	r0, #2
 80059ac:	f7fe fb58 	bl	8004060 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 80059b0:	4b65      	ldr	r3, [pc, #404]	; (8005b48 <checkAktifCalisma+0x16a4>)
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	d125      	bne.n	8005a06 <checkAktifCalisma+0x1562>
 80059ba:	4b64      	ldr	r3, [pc, #400]	; (8005b4c <checkAktifCalisma+0x16a8>)
 80059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c0:	1e51      	subs	r1, r2, #1
 80059c2:	430b      	orrs	r3, r1
 80059c4:	d11f      	bne.n	8005a06 <checkAktifCalisma+0x1562>
 80059c6:	4b62      	ldr	r3, [pc, #392]	; (8005b50 <checkAktifCalisma+0x16ac>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d01b      	beq.n	8005a06 <checkAktifCalisma+0x1562>
 80059ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059d2:	4860      	ldr	r0, [pc, #384]	; (8005b54 <checkAktifCalisma+0x16b0>)
 80059d4:	f004 ff6c 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d113      	bne.n	8005a06 <checkAktifCalisma+0x1562>
 80059de:	4b5e      	ldr	r3, [pc, #376]	; (8005b58 <checkAktifCalisma+0x16b4>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	f083 0301 	eor.w	r3, r3, #1
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00c      	beq.n	8005a06 <checkAktifCalisma+0x1562>
					hataVar=1;
 80059ec:	4b5b      	ldr	r3, [pc, #364]	; (8005b5c <checkAktifCalisma+0x16b8>)
 80059ee:	2201      	movs	r2, #1
 80059f0:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 80059f2:	2003      	movs	r0, #3
 80059f4:	f7fa ffdc 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(3);
 80059f8:	2003      	movs	r0, #3
 80059fa:	f7fa ff73 	bl	80008e4 <hata2EEPROM>
					basinchatasi=1;
 80059fe:	4b56      	ldr	r3, [pc, #344]	; (8005b58 <checkAktifCalisma+0x16b4>)
 8005a00:	2201      	movs	r2, #1
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	e017      	b.n	8005a36 <checkAktifCalisma+0x1592>
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005a06:	4b54      	ldr	r3, [pc, #336]	; (8005b58 <checkAktifCalisma+0x16b4>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d013      	beq.n	8005a36 <checkAktifCalisma+0x1592>
 8005a0e:	4b4e      	ldr	r3, [pc, #312]	; (8005b48 <checkAktifCalisma+0x16a4>)
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	1e51      	subs	r1, r2, #1
 8005a16:	430b      	orrs	r3, r1
 8005a18:	d10d      	bne.n	8005a36 <checkAktifCalisma+0x1592>
 8005a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a1e:	4850      	ldr	r0, [pc, #320]	; (8005b60 <checkAktifCalisma+0x16bc>)
 8005a20:	f004 ff46 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d105      	bne.n	8005a36 <checkAktifCalisma+0x1592>
					basinchatasi=0;
 8005a2a:	4b4b      	ldr	r3, [pc, #300]	; (8005b58 <checkAktifCalisma+0x16b4>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 8005a30:	2003      	movs	r0, #3
 8005a32:	f7fe fb15 	bl	8004060 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8005a36:	4b4b      	ldr	r3, [pc, #300]	; (8005b64 <checkAktifCalisma+0x16c0>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d103      	bne.n	8005a46 <checkAktifCalisma+0x15a2>
 8005a3e:	4b4a      	ldr	r3, [pc, #296]	; (8005b68 <checkAktifCalisma+0x16c4>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d027      	beq.n	8005a96 <checkAktifCalisma+0x15f2>
 8005a46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a4a:	4848      	ldr	r0, [pc, #288]	; (8005b6c <checkAktifCalisma+0x16c8>)
 8005a4c:	f004 ff30 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d11f      	bne.n	8005a96 <checkAktifCalisma+0x15f2>
 8005a56:	4b46      	ldr	r3, [pc, #280]	; (8005b70 <checkAktifCalisma+0x16cc>)
 8005a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5c:	1e51      	subs	r1, r2, #1
 8005a5e:	430b      	orrs	r3, r1
 8005a60:	d005      	beq.n	8005a6e <checkAktifCalisma+0x15ca>
 8005a62:	4b43      	ldr	r3, [pc, #268]	; (8005b70 <checkAktifCalisma+0x16cc>)
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	1ed1      	subs	r1, r2, #3
 8005a6a:	430b      	orrs	r3, r1
 8005a6c:	d113      	bne.n	8005a96 <checkAktifCalisma+0x15f2>
 8005a6e:	4b41      	ldr	r3, [pc, #260]	; (8005b74 <checkAktifCalisma+0x16d0>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	f083 0301 	eor.w	r3, r3, #1
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00c      	beq.n	8005a96 <checkAktifCalisma+0x15f2>
					hataVar=1;
 8005a7c:	4b37      	ldr	r3, [pc, #220]	; (8005b5c <checkAktifCalisma+0x16b8>)
 8005a7e:	2201      	movs	r2, #1
 8005a80:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8005a82:	2004      	movs	r0, #4
 8005a84:	f7fa ff94 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(4);
 8005a88:	2004      	movs	r0, #4
 8005a8a:	f7fa ff2b 	bl	80008e4 <hata2EEPROM>
					katkapisivicihatasi=1;
 8005a8e:	4b39      	ldr	r3, [pc, #228]	; (8005b74 <checkAktifCalisma+0x16d0>)
 8005a90:	2201      	movs	r2, #1
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	e01f      	b.n	8005ad6 <checkAktifCalisma+0x1632>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005a96:	4b37      	ldr	r3, [pc, #220]	; (8005b74 <checkAktifCalisma+0x16d0>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01b      	beq.n	8005ad6 <checkAktifCalisma+0x1632>
 8005a9e:	4b36      	ldr	r3, [pc, #216]	; (8005b78 <checkAktifCalisma+0x16d4>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d017      	beq.n	8005ad6 <checkAktifCalisma+0x1632>
 8005aa6:	4b2f      	ldr	r3, [pc, #188]	; (8005b64 <checkAktifCalisma+0x16c0>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	f083 0301 	eor.w	r3, r3, #1
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d010      	beq.n	8005ad6 <checkAktifCalisma+0x1632>
 8005ab4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ab8:	482c      	ldr	r0, [pc, #176]	; (8005b6c <checkAktifCalisma+0x16c8>)
 8005aba:	f004 fef9 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d108      	bne.n	8005ad6 <checkAktifCalisma+0x1632>

					katkapisivicihatasi=0;
 8005ac4:	4b2b      	ldr	r3, [pc, #172]	; (8005b74 <checkAktifCalisma+0x16d0>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8005aca:	4b27      	ldr	r3, [pc, #156]	; (8005b68 <checkAktifCalisma+0x16c4>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8005ad0:	2004      	movs	r0, #4
 8005ad2:	f7fe fac5 	bl	8004060 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8005ad6:	4b23      	ldr	r3, [pc, #140]	; (8005b64 <checkAktifCalisma+0x16c0>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d103      	bne.n	8005ae6 <checkAktifCalisma+0x1642>
 8005ade:	4b27      	ldr	r3, [pc, #156]	; (8005b7c <checkAktifCalisma+0x16d8>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d04e      	beq.n	8005b84 <checkAktifCalisma+0x16e0>
 8005ae6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005aea:	4820      	ldr	r0, [pc, #128]	; (8005b6c <checkAktifCalisma+0x16c8>)
 8005aec:	f004 fee0 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d146      	bne.n	8005b84 <checkAktifCalisma+0x16e0>
 8005af6:	4b1e      	ldr	r3, [pc, #120]	; (8005b70 <checkAktifCalisma+0x16cc>)
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	1e51      	subs	r1, r2, #1
 8005afe:	430b      	orrs	r3, r1
 8005b00:	d005      	beq.n	8005b0e <checkAktifCalisma+0x166a>
 8005b02:	4b1b      	ldr	r3, [pc, #108]	; (8005b70 <checkAktifCalisma+0x16cc>)
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	1ed1      	subs	r1, r2, #3
 8005b0a:	430b      	orrs	r3, r1
 8005b0c:	d13a      	bne.n	8005b84 <checkAktifCalisma+0x16e0>
 8005b0e:	4b1c      	ldr	r3, [pc, #112]	; (8005b80 <checkAktifCalisma+0x16dc>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	f083 0301 	eor.w	r3, r3, #1
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d033      	beq.n	8005b84 <checkAktifCalisma+0x16e0>

					hataVar=1;
 8005b1c:	4b0f      	ldr	r3, [pc, #60]	; (8005b5c <checkAktifCalisma+0x16b8>)
 8005b1e:	2201      	movs	r2, #1
 8005b20:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8005b22:	2005      	movs	r0, #5
 8005b24:	f7fa ff44 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(5);
 8005b28:	2005      	movs	r0, #5
 8005b2a:	f7fa fedb 	bl	80008e4 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8005b2e:	4b14      	ldr	r3, [pc, #80]	; (8005b80 <checkAktifCalisma+0x16dc>)
 8005b30:	2201      	movs	r2, #1
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	e04a      	b.n	8005bcc <checkAktifCalisma+0x1728>
 8005b36:	bf00      	nop
 8005b38:	2000123d 	.word	0x2000123d
 8005b3c:	20001243 	.word	0x20001243
 8005b40:	20001224 	.word	0x20001224
 8005b44:	2000124d 	.word	0x2000124d
 8005b48:	200010d0 	.word	0x200010d0
 8005b4c:	200010f0 	.word	0x200010f0
 8005b50:	20001240 	.word	0x20001240
 8005b54:	40011000 	.word	0x40011000
 8005b58:	2000124a 	.word	0x2000124a
 8005b5c:	20001241 	.word	0x20001241
 8005b60:	40010c00 	.word	0x40010c00
 8005b64:	2000123a 	.word	0x2000123a
 8005b68:	2000124e 	.word	0x2000124e
 8005b6c:	40010800 	.word	0x40010800
 8005b70:	200010f8 	.word	0x200010f8
 8005b74:	2000124b 	.word	0x2000124b
 8005b78:	2000122e 	.word	0x2000122e
 8005b7c:	2000124f 	.word	0x2000124f
 8005b80:	2000124c 	.word	0x2000124c
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005b84:	4b7f      	ldr	r3, [pc, #508]	; (8005d84 <checkAktifCalisma+0x18e0>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01f      	beq.n	8005bcc <checkAktifCalisma+0x1728>
 8005b8c:	4b7e      	ldr	r3, [pc, #504]	; (8005d88 <checkAktifCalisma+0x18e4>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d01b      	beq.n	8005bcc <checkAktifCalisma+0x1728>
 8005b94:	4b7d      	ldr	r3, [pc, #500]	; (8005d8c <checkAktifCalisma+0x18e8>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	f083 0301 	eor.w	r3, r3, #1
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d014      	beq.n	8005bcc <checkAktifCalisma+0x1728>
 8005ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ba6:	487a      	ldr	r0, [pc, #488]	; (8005d90 <checkAktifCalisma+0x18ec>)
 8005ba8:	f004 fe82 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10c      	bne.n	8005bcc <checkAktifCalisma+0x1728>
 8005bb2:	4b75      	ldr	r3, [pc, #468]	; (8005d88 <checkAktifCalisma+0x18e4>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d008      	beq.n	8005bcc <checkAktifCalisma+0x1728>
					tablakapisivicihatasi=0;
 8005bba:	4b72      	ldr	r3, [pc, #456]	; (8005d84 <checkAktifCalisma+0x18e0>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8005bc0:	4b74      	ldr	r3, [pc, #464]	; (8005d94 <checkAktifCalisma+0x18f0>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8005bc6:	2005      	movs	r0, #5
 8005bc8:	f7fe fa4a 	bl	8004060 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8005bcc:	4b72      	ldr	r3, [pc, #456]	; (8005d98 <checkAktifCalisma+0x18f4>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d107      	bne.n	8005be4 <checkAktifCalisma+0x1740>
 8005bd4:	4b71      	ldr	r3, [pc, #452]	; (8005d9c <checkAktifCalisma+0x18f8>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d103      	bne.n	8005be4 <checkAktifCalisma+0x1740>
 8005bdc:	4b70      	ldr	r3, [pc, #448]	; (8005da0 <checkAktifCalisma+0x18fc>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d023      	beq.n	8005c2c <checkAktifCalisma+0x1788>
 8005be4:	4b6f      	ldr	r3, [pc, #444]	; (8005da4 <checkAktifCalisma+0x1900>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	f083 0301 	eor.w	r3, r3, #1
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d01c      	beq.n	8005c2c <checkAktifCalisma+0x1788>
				    if(millis-timer4>=makineCalismaTmr) {
 8005bf2:	4b6d      	ldr	r3, [pc, #436]	; (8005da8 <checkAktifCalisma+0x1904>)
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	4b6d      	ldr	r3, [pc, #436]	; (8005dac <checkAktifCalisma+0x1908>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	603b      	str	r3, [r7, #0]
 8005c00:	607a      	str	r2, [r7, #4]
 8005c02:	4b6b      	ldr	r3, [pc, #428]	; (8005db0 <checkAktifCalisma+0x190c>)
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	4294      	cmp	r4, r2
 8005c10:	4199      	sbcs	r1, r3
 8005c12:	d30b      	bcc.n	8005c2c <checkAktifCalisma+0x1788>
					  	hataVar=1;
 8005c14:	4b67      	ldr	r3, [pc, #412]	; (8005db4 <checkAktifCalisma+0x1910>)
 8005c16:	2201      	movs	r2, #1
 8005c18:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 8005c1a:	2006      	movs	r0, #6
 8005c1c:	f7fa fec8 	bl	80009b0 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8005c20:	2006      	movs	r0, #6
 8005c22:	f7fa fe5f 	bl	80008e4 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8005c26:	4b5f      	ldr	r3, [pc, #380]	; (8005da4 <checkAktifCalisma+0x1900>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005c2c:	4b5d      	ldr	r3, [pc, #372]	; (8005da4 <checkAktifCalisma+0x1900>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d013      	beq.n	8005c5c <checkAktifCalisma+0x17b8>
 8005c34:	2108      	movs	r1, #8
 8005c36:	4856      	ldr	r0, [pc, #344]	; (8005d90 <checkAktifCalisma+0x18ec>)
 8005c38:	f004 fe3a 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00c      	beq.n	8005c5c <checkAktifCalisma+0x17b8>
 8005c42:	4b52      	ldr	r3, [pc, #328]	; (8005d8c <checkAktifCalisma+0x18e8>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	f083 0301 	eor.w	r3, r3, #1
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <checkAktifCalisma+0x17b8>
					maksimumcalismahatasi=0;
 8005c50:	4b54      	ldr	r3, [pc, #336]	; (8005da4 <checkAktifCalisma+0x1900>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8005c56:	2006      	movs	r0, #6
 8005c58:	f7fe fa02 	bl	8004060 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005c5c:	4b56      	ldr	r3, [pc, #344]	; (8005db8 <checkAktifCalisma+0x1914>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10b      	bne.n	8005c7c <checkAktifCalisma+0x17d8>
 8005c64:	4b4d      	ldr	r3, [pc, #308]	; (8005d9c <checkAktifCalisma+0x18f8>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d107      	bne.n	8005c7c <checkAktifCalisma+0x17d8>
 8005c6c:	4b53      	ldr	r3, [pc, #332]	; (8005dbc <checkAktifCalisma+0x1918>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d103      	bne.n	8005c7c <checkAktifCalisma+0x17d8>
 8005c74:	4b4a      	ldr	r3, [pc, #296]	; (8005da0 <checkAktifCalisma+0x18fc>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d009      	beq.n	8005c90 <checkAktifCalisma+0x17ec>
					makineCalisiyor=0;
 8005c7c:	4b50      	ldr	r3, [pc, #320]	; (8005dc0 <checkAktifCalisma+0x191c>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8005c82:	4b50      	ldr	r3, [pc, #320]	; (8005dc4 <checkAktifCalisma+0x1920>)
 8005c84:	2201      	movs	r2, #1
 8005c86:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8005c88:	4b42      	ldr	r3, [pc, #264]	; (8005d94 <checkAktifCalisma+0x18f0>)
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	701a      	strb	r2, [r3, #0]
 8005c8e:	e006      	b.n	8005c9e <checkAktifCalisma+0x17fa>
				} else {
					makineCalisiyor=1;
 8005c90:	4b4b      	ldr	r3, [pc, #300]	; (8005dc0 <checkAktifCalisma+0x191c>)
 8005c92:	2201      	movs	r2, #1
 8005c94:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8005c96:	4b44      	ldr	r3, [pc, #272]	; (8005da8 <checkAktifCalisma+0x1904>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a44      	ldr	r2, [pc, #272]	; (8005dac <checkAktifCalisma+0x1908>)
 8005c9c:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8005c9e:	4b45      	ldr	r3, [pc, #276]	; (8005db4 <checkAktifCalisma+0x1910>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d02f      	beq.n	8005d06 <checkAktifCalisma+0x1862>
 8005ca6:	4b48      	ldr	r3, [pc, #288]	; (8005dc8 <checkAktifCalisma+0x1924>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	f083 0301 	eor.w	r3, r3, #1
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d028      	beq.n	8005d06 <checkAktifCalisma+0x1862>
 8005cb4:	4b45      	ldr	r3, [pc, #276]	; (8005dcc <checkAktifCalisma+0x1928>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	f083 0301 	eor.w	r3, r3, #1
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d021      	beq.n	8005d06 <checkAktifCalisma+0x1862>
 8005cc2:	4b43      	ldr	r3, [pc, #268]	; (8005dd0 <checkAktifCalisma+0x192c>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	f083 0301 	eor.w	r3, r3, #1
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d01a      	beq.n	8005d06 <checkAktifCalisma+0x1862>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005cd0:	4b40      	ldr	r3, [pc, #256]	; (8005dd4 <checkAktifCalisma+0x1930>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	f083 0301 	eor.w	r3, r3, #1
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d013      	beq.n	8005d06 <checkAktifCalisma+0x1862>
 8005cde:	4b29      	ldr	r3, [pc, #164]	; (8005d84 <checkAktifCalisma+0x18e0>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	f083 0301 	eor.w	r3, r3, #1
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00c      	beq.n	8005d06 <checkAktifCalisma+0x1862>
 8005cec:	4b2d      	ldr	r3, [pc, #180]	; (8005da4 <checkAktifCalisma+0x1900>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	f083 0301 	eor.w	r3, r3, #1
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d005      	beq.n	8005d06 <checkAktifCalisma+0x1862>

					hataVar=0;
 8005cfa:	4b2e      	ldr	r3, [pc, #184]	; (8005db4 <checkAktifCalisma+0x1910>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8005d00:	2007      	movs	r0, #7
 8005d02:	f7fe f9ad 	bl	8004060 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8005d06:	4b2b      	ldr	r3, [pc, #172]	; (8005db4 <checkAktifCalisma+0x1910>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d02a      	beq.n	8005d64 <checkAktifCalisma+0x18c0>
 8005d0e:	4b2e      	ldr	r3, [pc, #184]	; (8005dc8 <checkAktifCalisma+0x1924>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	f083 0301 	eor.w	r3, r3, #1
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d023      	beq.n	8005d64 <checkAktifCalisma+0x18c0>
 8005d1c:	4b2b      	ldr	r3, [pc, #172]	; (8005dcc <checkAktifCalisma+0x1928>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d01f      	beq.n	8005d64 <checkAktifCalisma+0x18c0>
 8005d24:	4b2a      	ldr	r3, [pc, #168]	; (8005dd0 <checkAktifCalisma+0x192c>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	f083 0301 	eor.w	r3, r3, #1
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d018      	beq.n	8005d64 <checkAktifCalisma+0x18c0>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8005d32:	4b28      	ldr	r3, [pc, #160]	; (8005dd4 <checkAktifCalisma+0x1930>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	f083 0301 	eor.w	r3, r3, #1
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d011      	beq.n	8005d64 <checkAktifCalisma+0x18c0>
 8005d40:	4b10      	ldr	r3, [pc, #64]	; (8005d84 <checkAktifCalisma+0x18e0>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	f083 0301 	eor.w	r3, r3, #1
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <checkAktifCalisma+0x18c0>
 8005d4e:	4b15      	ldr	r3, [pc, #84]	; (8005da4 <checkAktifCalisma+0x1900>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	f083 0301 	eor.w	r3, r3, #1
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d003      	beq.n	8005d64 <checkAktifCalisma+0x18c0>
				{
					EmnCerHataMakYukariCalis=1;
 8005d5c:	4b1e      	ldr	r3, [pc, #120]	; (8005dd8 <checkAktifCalisma+0x1934>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 8005d62:	e009      	b.n	8005d78 <checkAktifCalisma+0x18d4>
				else if(emniyetCercevesihatasi==0)
 8005d64:	4b19      	ldr	r3, [pc, #100]	; (8005dcc <checkAktifCalisma+0x1928>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	f083 0301 	eor.w	r3, r3, #1
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <checkAktifCalisma+0x18d4>
					EmnCerHataMakYukariCalis=0;
 8005d72:	4b19      	ldr	r3, [pc, #100]	; (8005dd8 <checkAktifCalisma+0x1934>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	701a      	strb	r2, [r3, #0]
}
 8005d78:	bf00      	nop
 8005d7a:	3730      	adds	r7, #48	; 0x30
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d82:	bf00      	nop
 8005d84:	2000124c 	.word	0x2000124c
 8005d88:	2000122e 	.word	0x2000122e
 8005d8c:	2000123a 	.word	0x2000123a
 8005d90:	40010800 	.word	0x40010800
 8005d94:	2000124f 	.word	0x2000124f
 8005d98:	20001240 	.word	0x20001240
 8005d9c:	20001224 	.word	0x20001224
 8005da0:	20001223 	.word	0x20001223
 8005da4:	2000123b 	.word	0x2000123b
 8005da8:	20001088 	.word	0x20001088
 8005dac:	2000109c 	.word	0x2000109c
 8005db0:	20001178 	.word	0x20001178
 8005db4:	20001241 	.word	0x20001241
 8005db8:	20001221 	.word	0x20001221
 8005dbc:	20001222 	.word	0x20001222
 8005dc0:	20001242 	.word	0x20001242
 8005dc4:	2000124e 	.word	0x2000124e
 8005dc8:	2000123c 	.word	0x2000123c
 8005dcc:	2000123d 	.word	0x2000123d
 8005dd0:	2000124a 	.word	0x2000124a
 8005dd4:	2000124b 	.word	0x2000124b
 8005dd8:	20001250 	.word	0x20001250

08005ddc <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8005ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005de0:	b08e      	sub	sp, #56	; 0x38
 8005de2:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8005de4:	4b6b      	ldr	r3, [pc, #428]	; (8005f94 <checkDemoModCalisma+0x1b8>)
 8005de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f041 8460 	bne.w	80076b0 <checkDemoModCalisma+0x18d4>
 8005df0:	4b69      	ldr	r3, [pc, #420]	; (8005f98 <checkDemoModCalisma+0x1bc>)
 8005df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f041 845a 	bne.w	80076b0 <checkDemoModCalisma+0x18d4>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8005dfc:	4b67      	ldr	r3, [pc, #412]	; (8005f9c <checkDemoModCalisma+0x1c0>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d11e      	bne.n	8005e42 <checkDemoModCalisma+0x66>
 8005e04:	4b66      	ldr	r3, [pc, #408]	; (8005fa0 <checkDemoModCalisma+0x1c4>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d11a      	bne.n	8005e42 <checkDemoModCalisma+0x66>
 8005e0c:	4b65      	ldr	r3, [pc, #404]	; (8005fa4 <checkDemoModCalisma+0x1c8>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00c      	beq.n	8005e2e <checkDemoModCalisma+0x52>
 8005e14:	4b64      	ldr	r3, [pc, #400]	; (8005fa8 <checkDemoModCalisma+0x1cc>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	f083 0301 	eor.w	r3, r3, #1
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d005      	beq.n	8005e2e <checkDemoModCalisma+0x52>
 8005e22:	4b62      	ldr	r3, [pc, #392]	; (8005fac <checkDemoModCalisma+0x1d0>)
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	1e51      	subs	r1, r2, #1
 8005e2a:	430b      	orrs	r3, r1
 8005e2c:	d009      	beq.n	8005e42 <checkDemoModCalisma+0x66>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8005e2e:	4b60      	ldr	r3, [pc, #384]	; (8005fb0 <checkDemoModCalisma+0x1d4>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01e      	beq.n	8005e74 <checkDemoModCalisma+0x98>
 8005e36:	4b5f      	ldr	r3, [pc, #380]	; (8005fb4 <checkDemoModCalisma+0x1d8>)
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	1e51      	subs	r1, r2, #1
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	d118      	bne.n	8005e74 <checkDemoModCalisma+0x98>
 8005e42:	4b5d      	ldr	r3, [pc, #372]	; (8005fb8 <checkDemoModCalisma+0x1dc>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d103      	bne.n	8005e52 <checkDemoModCalisma+0x76>
 8005e4a:	4b5c      	ldr	r3, [pc, #368]	; (8005fbc <checkDemoModCalisma+0x1e0>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d010      	beq.n	8005e74 <checkDemoModCalisma+0x98>
 8005e52:	4b5b      	ldr	r3, [pc, #364]	; (8005fc0 <checkDemoModCalisma+0x1e4>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00c      	beq.n	8005e74 <checkDemoModCalisma+0x98>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e60:	4858      	ldr	r0, [pc, #352]	; (8005fc4 <checkDemoModCalisma+0x1e8>)
 8005e62:	f004 fd3c 	bl	800a8de <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8005e66:	4a58      	ldr	r2, [pc, #352]	; (8005fc8 <checkDemoModCalisma+0x1ec>)
 8005e68:	2301      	movs	r3, #1
 8005e6a:	7013      	strb	r3, [r2, #0]
					CalismaSayisiYukari=1;
 8005e6c:	4a57      	ldr	r2, [pc, #348]	; (8005fcc <checkDemoModCalisma+0x1f0>)
 8005e6e:	2301      	movs	r3, #1
 8005e70:	7013      	strb	r3, [r2, #0]
 8005e72:	e008      	b.n	8005e86 <checkDemoModCalisma+0xaa>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005e74:	2200      	movs	r2, #0
 8005e76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e7a:	4852      	ldr	r0, [pc, #328]	; (8005fc4 <checkDemoModCalisma+0x1e8>)
 8005e7c:	f004 fd2f 	bl	800a8de <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8005e80:	4a51      	ldr	r2, [pc, #324]	; (8005fc8 <checkDemoModCalisma+0x1ec>)
 8005e82:	2300      	movs	r3, #0
 8005e84:	7013      	strb	r3, [r2, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8005e86:	4b44      	ldr	r3, [pc, #272]	; (8005f98 <checkDemoModCalisma+0x1bc>)
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	d165      	bne.n	8005f5c <checkDemoModCalisma+0x180>
 8005e90:	4b4a      	ldr	r3, [pc, #296]	; (8005fbc <checkDemoModCalisma+0x1e0>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d103      	bne.n	8005ea0 <checkDemoModCalisma+0xc4>
 8005e98:	4b47      	ldr	r3, [pc, #284]	; (8005fb8 <checkDemoModCalisma+0x1dc>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d05d      	beq.n	8005f5c <checkDemoModCalisma+0x180>
 8005ea0:	4b47      	ldr	r3, [pc, #284]	; (8005fc0 <checkDemoModCalisma+0x1e4>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d059      	beq.n	8005f5c <checkDemoModCalisma+0x180>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8005ea8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005eac:	4845      	ldr	r0, [pc, #276]	; (8005fc4 <checkDemoModCalisma+0x1e8>)
 8005eae:	f004 fcff 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <checkDemoModCalisma+0xe4>
 8005eb8:	4b45      	ldr	r3, [pc, #276]	; (8005fd0 <checkDemoModCalisma+0x1f4>)
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d04d      	beq.n	8005f5c <checkDemoModCalisma+0x180>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005ec0:	2102      	movs	r1, #2
 8005ec2:	4844      	ldr	r0, [pc, #272]	; (8005fd4 <checkDemoModCalisma+0x1f8>)
 8005ec4:	f004 fcf4 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d146      	bne.n	8005f5c <checkDemoModCalisma+0x180>
							&& (basincVar)
 8005ece:	4b42      	ldr	r3, [pc, #264]	; (8005fd8 <checkDemoModCalisma+0x1fc>)
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	d041      	beq.n	8005f5c <checkDemoModCalisma+0x180>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8005ed8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005edc:	4839      	ldr	r0, [pc, #228]	; (8005fc4 <checkDemoModCalisma+0x1e8>)
 8005ede:	f004 fce7 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d10e      	bne.n	8005f06 <checkDemoModCalisma+0x12a>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005ee8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005eec:	4835      	ldr	r0, [pc, #212]	; (8005fc4 <checkDemoModCalisma+0x1e8>)
 8005eee:	f004 fcdf 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d106      	bne.n	8005f06 <checkDemoModCalisma+0x12a>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005ef8:	2140      	movs	r1, #64	; 0x40
 8005efa:	4836      	ldr	r0, [pc, #216]	; (8005fd4 <checkDemoModCalisma+0x1f8>)
 8005efc:	f004 fcd8 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d003      	beq.n	8005f0e <checkDemoModCalisma+0x132>
 8005f06:	4b25      	ldr	r3, [pc, #148]	; (8005f9c <checkDemoModCalisma+0x1c0>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d026      	beq.n	8005f5c <checkDemoModCalisma+0x180>
							&& (asagivalfcalisiyor==0)
 8005f0e:	4b25      	ldr	r3, [pc, #148]	; (8005fa4 <checkDemoModCalisma+0x1c8>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	f083 0301 	eor.w	r3, r3, #1
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01f      	beq.n	8005f5c <checkDemoModCalisma+0x180>
							&& (devmotoryukaricalisiyor==0)
 8005f1c:	4b20      	ldr	r3, [pc, #128]	; (8005fa0 <checkDemoModCalisma+0x1c4>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	f083 0301 	eor.w	r3, r3, #1
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d018      	beq.n	8005f5c <checkDemoModCalisma+0x180>
							&& (devmotorasagicalisiyor==0)
 8005f2a:	4b21      	ldr	r3, [pc, #132]	; (8005fb0 <checkDemoModCalisma+0x1d4>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	f083 0301 	eor.w	r3, r3, #1
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d011      	beq.n	8005f5c <checkDemoModCalisma+0x180>
							&&(devyukarivalfcalisiyor==0)
 8005f38:	4b28      	ldr	r3, [pc, #160]	; (8005fdc <checkDemoModCalisma+0x200>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	f083 0301 	eor.w	r3, r3, #1
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <checkDemoModCalisma+0x180>
							&&(devasagivalfcalisiyor==0)) {
 8005f46:	4b26      	ldr	r3, [pc, #152]	; (8005fe0 <checkDemoModCalisma+0x204>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	f083 0301 	eor.w	r3, r3, #1
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <checkDemoModCalisma+0x180>
					yukarimotorcalisiyor=1;
 8005f54:	4a11      	ldr	r2, [pc, #68]	; (8005f9c <checkDemoModCalisma+0x1c0>)
 8005f56:	2301      	movs	r3, #1
 8005f58:	7013      	strb	r3, [r2, #0]
 8005f5a:	e002      	b.n	8005f62 <checkDemoModCalisma+0x186>
				} else {
					yukarimotorcalisiyor=0;
 8005f5c:	4a0f      	ldr	r2, [pc, #60]	; (8005f9c <checkDemoModCalisma+0x1c0>)
 8005f5e:	2300      	movs	r3, #0
 8005f60:	7013      	strb	r3, [r2, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005f62:	4b0e      	ldr	r3, [pc, #56]	; (8005f9c <checkDemoModCalisma+0x1c0>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d03e      	beq.n	8005fe8 <checkDemoModCalisma+0x20c>
 8005f6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f6e:	4819      	ldr	r0, [pc, #100]	; (8005fd4 <checkDemoModCalisma+0x1f8>)
 8005f70:	f004 fc9e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d136      	bne.n	8005fe8 <checkDemoModCalisma+0x20c>
 8005f7a:	4b1a      	ldr	r3, [pc, #104]	; (8005fe4 <checkDemoModCalisma+0x208>)
 8005f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	d031      	beq.n	8005fe8 <checkDemoModCalisma+0x20c>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005f84:	2201      	movs	r2, #1
 8005f86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f8a:	480e      	ldr	r0, [pc, #56]	; (8005fc4 <checkDemoModCalisma+0x1e8>)
 8005f8c:	f004 fca7 	bl	800a8de <HAL_GPIO_WritePin>
 8005f90:	e030      	b.n	8005ff4 <checkDemoModCalisma+0x218>
 8005f92:	bf00      	nop
 8005f94:	200011a8 	.word	0x200011a8
 8005f98:	200011a0 	.word	0x200011a0
 8005f9c:	20001221 	.word	0x20001221
 8005fa0:	20001222 	.word	0x20001222
 8005fa4:	20001224 	.word	0x20001224
 8005fa8:	2000121c 	.word	0x2000121c
 8005fac:	20001150 	.word	0x20001150
 8005fb0:	20001223 	.word	0x20001223
 8005fb4:	20001148 	.word	0x20001148
 8005fb8:	2000123e 	.word	0x2000123e
 8005fbc:	20001251 	.word	0x20001251
 8005fc0:	2000123f 	.word	0x2000123f
 8005fc4:	40010c00 	.word	0x40010c00
 8005fc8:	20001240 	.word	0x20001240
 8005fcc:	2000122b 	.word	0x2000122b
 8005fd0:	20001228 	.word	0x20001228
 8005fd4:	40011000 	.word	0x40011000
 8005fd8:	200010d0 	.word	0x200010d0
 8005fdc:	20001226 	.word	0x20001226
 8005fe0:	20001227 	.word	0x20001227
 8005fe4:	20001128 	.word	0x20001128
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005fee:	4872      	ldr	r0, [pc, #456]	; (80061b8 <checkDemoModCalisma+0x3dc>)
 8005ff0:	f004 fc75 	bl	800a8de <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005ff4:	4b71      	ldr	r3, [pc, #452]	; (80061bc <checkDemoModCalisma+0x3e0>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d019      	beq.n	8006030 <checkDemoModCalisma+0x254>
 8005ffc:	4b70      	ldr	r3, [pc, #448]	; (80061c0 <checkDemoModCalisma+0x3e4>)
 8005ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006002:	1e51      	subs	r1, r2, #1
 8006004:	430b      	orrs	r3, r1
 8006006:	d00b      	beq.n	8006020 <checkDemoModCalisma+0x244>
 8006008:	4b6d      	ldr	r3, [pc, #436]	; (80061c0 <checkDemoModCalisma+0x3e4>)
 800600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600e:	1e91      	subs	r1, r2, #2
 8006010:	430b      	orrs	r3, r1
 8006012:	d005      	beq.n	8006020 <checkDemoModCalisma+0x244>
 8006014:	4b6b      	ldr	r3, [pc, #428]	; (80061c4 <checkDemoModCalisma+0x3e8>)
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	1e51      	subs	r1, r2, #1
 800601c:	430b      	orrs	r3, r1
 800601e:	d107      	bne.n	8006030 <checkDemoModCalisma+0x254>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006020:	2201      	movs	r2, #1
 8006022:	2104      	movs	r1, #4
 8006024:	4864      	ldr	r0, [pc, #400]	; (80061b8 <checkDemoModCalisma+0x3dc>)
 8006026:	f004 fc5a 	bl	800a8de <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 800602a:	4a67      	ldr	r2, [pc, #412]	; (80061c8 <checkDemoModCalisma+0x3ec>)
 800602c:	2301      	movs	r3, #1
 800602e:	7013      	strb	r3, [r2, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8006030:	4b65      	ldr	r3, [pc, #404]	; (80061c8 <checkDemoModCalisma+0x3ec>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d034      	beq.n	80060a2 <checkDemoModCalisma+0x2c6>
 8006038:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800603c:	485e      	ldr	r0, [pc, #376]	; (80061b8 <checkDemoModCalisma+0x3dc>)
 800603e:	f004 fc37 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006042:	4603      	mov	r3, r0
 8006044:	2b01      	cmp	r3, #1
 8006046:	d106      	bne.n	8006056 <checkDemoModCalisma+0x27a>
 8006048:	4b60      	ldr	r3, [pc, #384]	; (80061cc <checkDemoModCalisma+0x3f0>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	f083 0301 	eor.w	r3, r3, #1
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d106      	bne.n	8006064 <checkDemoModCalisma+0x288>
 8006056:	2102      	movs	r1, #2
 8006058:	485d      	ldr	r0, [pc, #372]	; (80061d0 <checkDemoModCalisma+0x3f4>)
 800605a:	f004 fc29 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800605e:	4603      	mov	r3, r0
 8006060:	2b01      	cmp	r3, #1
 8006062:	d11e      	bne.n	80060a2 <checkDemoModCalisma+0x2c6>
 8006064:	4b5b      	ldr	r3, [pc, #364]	; (80061d4 <checkDemoModCalisma+0x3f8>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d103      	bne.n	8006074 <checkDemoModCalisma+0x298>
 800606c:	4b5a      	ldr	r3, [pc, #360]	; (80061d8 <checkDemoModCalisma+0x3fc>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d016      	beq.n	80060a2 <checkDemoModCalisma+0x2c6>
 8006074:	4b59      	ldr	r3, [pc, #356]	; (80061dc <checkDemoModCalisma+0x400>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d012      	beq.n	80060a2 <checkDemoModCalisma+0x2c6>
 800607c:	4b58      	ldr	r3, [pc, #352]	; (80061e0 <checkDemoModCalisma+0x404>)
 800607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006082:	4313      	orrs	r3, r2
 8006084:	d00d      	beq.n	80060a2 <checkDemoModCalisma+0x2c6>
 8006086:	4b57      	ldr	r3, [pc, #348]	; (80061e4 <checkDemoModCalisma+0x408>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	f083 0301 	eor.w	r3, r3, #1
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	d006      	beq.n	80060a2 <checkDemoModCalisma+0x2c6>
					timer2=millis;
 8006094:	4b54      	ldr	r3, [pc, #336]	; (80061e8 <checkDemoModCalisma+0x40c>)
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	4b54      	ldr	r3, [pc, #336]	; (80061ec <checkDemoModCalisma+0x410>)
 800609a:	601a      	str	r2, [r3, #0]
					butonKontrol3=1;
 800609c:	4a51      	ldr	r2, [pc, #324]	; (80061e4 <checkDemoModCalisma+0x408>)
 800609e:	2301      	movs	r3, #1
 80060a0:	7013      	strb	r3, [r2, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 80060a2:	4b51      	ldr	r3, [pc, #324]	; (80061e8 <checkDemoModCalisma+0x40c>)
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	4b51      	ldr	r3, [pc, #324]	; (80061ec <checkDemoModCalisma+0x410>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2200      	movs	r2, #0
 80060ae:	461c      	mov	r4, r3
 80060b0:	4615      	mov	r5, r2
 80060b2:	4b4f      	ldr	r3, [pc, #316]	; (80061f0 <checkDemoModCalisma+0x414>)
 80060b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b8:	4294      	cmp	r4, r2
 80060ba:	eb75 0303 	sbcs.w	r3, r5, r3
 80060be:	d303      	bcc.n	80060c8 <checkDemoModCalisma+0x2ec>
 80060c0:	4b48      	ldr	r3, [pc, #288]	; (80061e4 <checkDemoModCalisma+0x408>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d119      	bne.n	80060fc <checkDemoModCalisma+0x320>
 80060c8:	4b42      	ldr	r3, [pc, #264]	; (80061d4 <checkDemoModCalisma+0x3f8>)
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	f083 0301 	eor.w	r3, r3, #1
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d006      	beq.n	80060e4 <checkDemoModCalisma+0x308>
 80060d6:	4b40      	ldr	r3, [pc, #256]	; (80061d8 <checkDemoModCalisma+0x3fc>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	f083 0301 	eor.w	r3, r3, #1
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10b      	bne.n	80060fc <checkDemoModCalisma+0x320>
 80060e4:	4b3d      	ldr	r3, [pc, #244]	; (80061dc <checkDemoModCalisma+0x400>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	f083 0301 	eor.w	r3, r3, #1
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d104      	bne.n	80060fc <checkDemoModCalisma+0x320>
 80060f2:	4b3b      	ldr	r3, [pc, #236]	; (80061e0 <checkDemoModCalisma+0x404>)
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	d10a      	bne.n	8006112 <checkDemoModCalisma+0x336>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80060fc:	2200      	movs	r2, #0
 80060fe:	2104      	movs	r1, #4
 8006100:	482d      	ldr	r0, [pc, #180]	; (80061b8 <checkDemoModCalisma+0x3dc>)
 8006102:	f004 fbec 	bl	800a8de <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 8006106:	4a30      	ldr	r2, [pc, #192]	; (80061c8 <checkDemoModCalisma+0x3ec>)
 8006108:	2300      	movs	r3, #0
 800610a:	7013      	strb	r3, [r2, #0]
					butonKontrol3=0;
 800610c:	4a35      	ldr	r2, [pc, #212]	; (80061e4 <checkDemoModCalisma+0x408>)
 800610e:	2300      	movs	r3, #0
 8006110:	7013      	strb	r3, [r2, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 8006112:	4b38      	ldr	r3, [pc, #224]	; (80061f4 <checkDemoModCalisma+0x418>)
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	4313      	orrs	r3, r2
 800611a:	d102      	bne.n	8006122 <checkDemoModCalisma+0x346>
					cerceveVar=1;
 800611c:	4a36      	ldr	r2, [pc, #216]	; (80061f8 <checkDemoModCalisma+0x41c>)
 800611e:	2301      	movs	r3, #1
 8006120:	7013      	strb	r3, [r2, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8006122:	4b34      	ldr	r3, [pc, #208]	; (80061f4 <checkDemoModCalisma+0x418>)
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	1e51      	subs	r1, r2, #1
 800612a:	430b      	orrs	r3, r1
 800612c:	d117      	bne.n	800615e <checkDemoModCalisma+0x382>
 800612e:	4b33      	ldr	r3, [pc, #204]	; (80061fc <checkDemoModCalisma+0x420>)
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	4313      	orrs	r3, r2
 8006136:	d112      	bne.n	800615e <checkDemoModCalisma+0x382>
 8006138:	2101      	movs	r1, #1
 800613a:	4825      	ldr	r0, [pc, #148]	; (80061d0 <checkDemoModCalisma+0x3f4>)
 800613c:	f004 fbb8 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10b      	bne.n	800615e <checkDemoModCalisma+0x382>
 8006146:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800614a:	481b      	ldr	r0, [pc, #108]	; (80061b8 <checkDemoModCalisma+0x3dc>)
 800614c:	f004 fbb0 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d103      	bne.n	800615e <checkDemoModCalisma+0x382>
					cerceveVar=1;
 8006156:	4a28      	ldr	r2, [pc, #160]	; (80061f8 <checkDemoModCalisma+0x41c>)
 8006158:	2301      	movs	r3, #1
 800615a:	7013      	strb	r3, [r2, #0]
 800615c:	e014      	b.n	8006188 <checkDemoModCalisma+0x3ac>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800615e:	4b25      	ldr	r3, [pc, #148]	; (80061f4 <checkDemoModCalisma+0x418>)
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	1e51      	subs	r1, r2, #1
 8006166:	430b      	orrs	r3, r1
 8006168:	d10e      	bne.n	8006188 <checkDemoModCalisma+0x3ac>
 800616a:	2101      	movs	r1, #1
 800616c:	4818      	ldr	r0, [pc, #96]	; (80061d0 <checkDemoModCalisma+0x3f4>)
 800616e:	f004 fb9f 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006172:	4603      	mov	r3, r0
 8006174:	2b01      	cmp	r3, #1
 8006176:	d107      	bne.n	8006188 <checkDemoModCalisma+0x3ac>
 8006178:	4b20      	ldr	r3, [pc, #128]	; (80061fc <checkDemoModCalisma+0x420>)
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	4313      	orrs	r3, r2
 8006180:	d102      	bne.n	8006188 <checkDemoModCalisma+0x3ac>
					cerceveVar=0;
 8006182:	4a1d      	ldr	r2, [pc, #116]	; (80061f8 <checkDemoModCalisma+0x41c>)
 8006184:	2300      	movs	r3, #0
 8006186:	7013      	strb	r3, [r2, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8006188:	4b1a      	ldr	r3, [pc, #104]	; (80061f4 <checkDemoModCalisma+0x418>)
 800618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618e:	1e51      	subs	r1, r2, #1
 8006190:	430b      	orrs	r3, r1
 8006192:	d138      	bne.n	8006206 <checkDemoModCalisma+0x42a>
 8006194:	4b19      	ldr	r3, [pc, #100]	; (80061fc <checkDemoModCalisma+0x420>)
 8006196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619a:	1e51      	subs	r1, r2, #1
 800619c:	430b      	orrs	r3, r1
 800619e:	d132      	bne.n	8006206 <checkDemoModCalisma+0x42a>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80061a0:	2101      	movs	r1, #1
 80061a2:	480b      	ldr	r0, [pc, #44]	; (80061d0 <checkDemoModCalisma+0x3f4>)
 80061a4:	f004 fb84 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d128      	bne.n	8006200 <checkDemoModCalisma+0x424>
						cerceveVar=1;
 80061ae:	4a12      	ldr	r2, [pc, #72]	; (80061f8 <checkDemoModCalisma+0x41c>)
 80061b0:	2301      	movs	r3, #1
 80061b2:	7013      	strb	r3, [r2, #0]
 80061b4:	e027      	b.n	8006206 <checkDemoModCalisma+0x42a>
 80061b6:	bf00      	nop
 80061b8:	40010c00 	.word	0x40010c00
 80061bc:	20001221 	.word	0x20001221
 80061c0:	20001130 	.word	0x20001130
 80061c4:	20001150 	.word	0x20001150
 80061c8:	20001225 	.word	0x20001225
 80061cc:	20001228 	.word	0x20001228
 80061d0:	40011000 	.word	0x40011000
 80061d4:	2000123e 	.word	0x2000123e
 80061d8:	20001251 	.word	0x20001251
 80061dc:	2000123f 	.word	0x2000123f
 80061e0:	200010d0 	.word	0x200010d0
 80061e4:	2000121d 	.word	0x2000121d
 80061e8:	20001088 	.word	0x20001088
 80061ec:	20001094 	.word	0x20001094
 80061f0:	20001158 	.word	0x20001158
 80061f4:	200010d8 	.word	0x200010d8
 80061f8:	20001243 	.word	0x20001243
 80061fc:	200010c0 	.word	0x200010c0
					} else {
						cerceveVar=0;
 8006200:	4a84      	ldr	r2, [pc, #528]	; (8006414 <checkDemoModCalisma+0x638>)
 8006202:	2300      	movs	r3, #0
 8006204:	7013      	strb	r3, [r2, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8006206:	4b84      	ldr	r3, [pc, #528]	; (8006418 <checkDemoModCalisma+0x63c>)
 8006208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620c:	4313      	orrs	r3, r2
 800620e:	d17d      	bne.n	800630c <checkDemoModCalisma+0x530>
 8006210:	4b82      	ldr	r3, [pc, #520]	; (800641c <checkDemoModCalisma+0x640>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d079      	beq.n	800630c <checkDemoModCalisma+0x530>
 8006218:	4b81      	ldr	r3, [pc, #516]	; (8006420 <checkDemoModCalisma+0x644>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d075      	beq.n	800630c <checkDemoModCalisma+0x530>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8006220:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006224:	487f      	ldr	r0, [pc, #508]	; (8006424 <checkDemoModCalisma+0x648>)
 8006226:	f004 fb43 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <checkDemoModCalisma+0x45c>
 8006230:	4b7d      	ldr	r3, [pc, #500]	; (8006428 <checkDemoModCalisma+0x64c>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d069      	beq.n	800630c <checkDemoModCalisma+0x530>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8006238:	4b76      	ldr	r3, [pc, #472]	; (8006414 <checkDemoModCalisma+0x638>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d065      	beq.n	800630c <checkDemoModCalisma+0x530>
 8006240:	4b7a      	ldr	r3, [pc, #488]	; (800642c <checkDemoModCalisma+0x650>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	f083 0301 	eor.w	r3, r3, #1
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d05e      	beq.n	800630c <checkDemoModCalisma+0x530>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 800624e:	2104      	movs	r1, #4
 8006250:	4877      	ldr	r0, [pc, #476]	; (8006430 <checkDemoModCalisma+0x654>)
 8006252:	f004 fb2d 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d004      	beq.n	8006266 <checkDemoModCalisma+0x48a>
 800625c:	4b75      	ldr	r3, [pc, #468]	; (8006434 <checkDemoModCalisma+0x658>)
 800625e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006262:	4313      	orrs	r3, r2
 8006264:	d152      	bne.n	800630c <checkDemoModCalisma+0x530>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800626a:	486e      	ldr	r0, [pc, #440]	; (8006424 <checkDemoModCalisma+0x648>)
 800626c:	f004 fb20 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006270:	4603      	mov	r3, r0
 8006272:	2b01      	cmp	r3, #1
 8006274:	d10e      	bne.n	8006294 <checkDemoModCalisma+0x4b8>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800627a:	486a      	ldr	r0, [pc, #424]	; (8006424 <checkDemoModCalisma+0x648>)
 800627c:	f004 fb18 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006280:	4603      	mov	r3, r0
 8006282:	2b01      	cmp	r3, #1
 8006284:	d106      	bne.n	8006294 <checkDemoModCalisma+0x4b8>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8006286:	2140      	movs	r1, #64	; 0x40
 8006288:	4869      	ldr	r0, [pc, #420]	; (8006430 <checkDemoModCalisma+0x654>)
 800628a:	f004 fb11 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800628e:	4603      	mov	r3, r0
 8006290:	2b01      	cmp	r3, #1
 8006292:	d003      	beq.n	800629c <checkDemoModCalisma+0x4c0>
 8006294:	4b68      	ldr	r3, [pc, #416]	; (8006438 <checkDemoModCalisma+0x65c>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d037      	beq.n	800630c <checkDemoModCalisma+0x530>
						&& (yukarimotorcalisiyor==0)
 800629c:	4b67      	ldr	r3, [pc, #412]	; (800643c <checkDemoModCalisma+0x660>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	f083 0301 	eor.w	r3, r3, #1
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d030      	beq.n	800630c <checkDemoModCalisma+0x530>
						&& (yukarivalfcalisiyor==0)
 80062aa:	4b65      	ldr	r3, [pc, #404]	; (8006440 <checkDemoModCalisma+0x664>)
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	f083 0301 	eor.w	r3, r3, #1
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d029      	beq.n	800630c <checkDemoModCalisma+0x530>
				  	  	&& (devmotoryukaricalisiyor==0)
 80062b8:	4b62      	ldr	r3, [pc, #392]	; (8006444 <checkDemoModCalisma+0x668>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	f083 0301 	eor.w	r3, r3, #1
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d022      	beq.n	800630c <checkDemoModCalisma+0x530>
						&& (devmotorasagicalisiyor==0)
 80062c6:	4b60      	ldr	r3, [pc, #384]	; (8006448 <checkDemoModCalisma+0x66c>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	f083 0301 	eor.w	r3, r3, #1
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d01b      	beq.n	800630c <checkDemoModCalisma+0x530>
						&& (devyukarivalfcalisiyor==0)
 80062d4:	4b5d      	ldr	r3, [pc, #372]	; (800644c <checkDemoModCalisma+0x670>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	f083 0301 	eor.w	r3, r3, #1
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d014      	beq.n	800630c <checkDemoModCalisma+0x530>
						&& (devasagivalfcalisiyor==0)) {
 80062e2:	4b5b      	ldr	r3, [pc, #364]	; (8006450 <checkDemoModCalisma+0x674>)
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	f083 0301 	eor.w	r3, r3, #1
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00d      	beq.n	800630c <checkDemoModCalisma+0x530>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80062f0:	2201      	movs	r2, #1
 80062f2:	2102      	movs	r1, #2
 80062f4:	484b      	ldr	r0, [pc, #300]	; (8006424 <checkDemoModCalisma+0x648>)
 80062f6:	f004 faf2 	bl	800a8de <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 80062fa:	4a4f      	ldr	r2, [pc, #316]	; (8006438 <checkDemoModCalisma+0x65c>)
 80062fc:	2301      	movs	r3, #1
 80062fe:	7013      	strb	r3, [r2, #0]
					CalismaSayisiAsagi=1;
 8006300:	4a54      	ldr	r2, [pc, #336]	; (8006454 <checkDemoModCalisma+0x678>)
 8006302:	2301      	movs	r3, #1
 8006304:	7013      	strb	r3, [r2, #0]
					cercevesasagicalisma=1;
 8006306:	4a54      	ldr	r2, [pc, #336]	; (8006458 <checkDemoModCalisma+0x67c>)
 8006308:	2301      	movs	r3, #1
 800630a:	7013      	strb	r3, [r2, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 800630c:	4b4a      	ldr	r3, [pc, #296]	; (8006438 <checkDemoModCalisma+0x65c>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d034      	beq.n	800637e <checkDemoModCalisma+0x5a2>
 8006314:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006318:	4842      	ldr	r0, [pc, #264]	; (8006424 <checkDemoModCalisma+0x648>)
 800631a:	f004 fac9 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800631e:	4603      	mov	r3, r0
 8006320:	2b01      	cmp	r3, #1
 8006322:	d106      	bne.n	8006332 <checkDemoModCalisma+0x556>
 8006324:	4b40      	ldr	r3, [pc, #256]	; (8006428 <checkDemoModCalisma+0x64c>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	f083 0301 	eor.w	r3, r3, #1
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10b      	bne.n	800634a <checkDemoModCalisma+0x56e>
 8006332:	2104      	movs	r1, #4
 8006334:	483e      	ldr	r0, [pc, #248]	; (8006430 <checkDemoModCalisma+0x654>)
 8006336:	f004 fabb 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800633a:	4603      	mov	r3, r0
 800633c:	2b01      	cmp	r3, #1
 800633e:	d11e      	bne.n	800637e <checkDemoModCalisma+0x5a2>
 8006340:	4b3c      	ldr	r3, [pc, #240]	; (8006434 <checkDemoModCalisma+0x658>)
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	4313      	orrs	r3, r2
 8006348:	d019      	beq.n	800637e <checkDemoModCalisma+0x5a2>
 800634a:	4b34      	ldr	r3, [pc, #208]	; (800641c <checkDemoModCalisma+0x640>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d015      	beq.n	800637e <checkDemoModCalisma+0x5a2>
 8006352:	4b33      	ldr	r3, [pc, #204]	; (8006420 <checkDemoModCalisma+0x644>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d011      	beq.n	800637e <checkDemoModCalisma+0x5a2>
 800635a:	4b2e      	ldr	r3, [pc, #184]	; (8006414 <checkDemoModCalisma+0x638>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00d      	beq.n	800637e <checkDemoModCalisma+0x5a2>
 8006362:	4b3e      	ldr	r3, [pc, #248]	; (800645c <checkDemoModCalisma+0x680>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	f083 0301 	eor.w	r3, r3, #1
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	d006      	beq.n	800637e <checkDemoModCalisma+0x5a2>
					timer2=millis;
 8006370:	4b3b      	ldr	r3, [pc, #236]	; (8006460 <checkDemoModCalisma+0x684>)
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	4b3b      	ldr	r3, [pc, #236]	; (8006464 <checkDemoModCalisma+0x688>)
 8006376:	601a      	str	r2, [r3, #0]
					butonKontrol2=1;
 8006378:	4a38      	ldr	r2, [pc, #224]	; (800645c <checkDemoModCalisma+0x680>)
 800637a:	2301      	movs	r3, #1
 800637c:	7013      	strb	r3, [r2, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 800637e:	4b38      	ldr	r3, [pc, #224]	; (8006460 <checkDemoModCalisma+0x684>)
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	4b38      	ldr	r3, [pc, #224]	; (8006464 <checkDemoModCalisma+0x688>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2200      	movs	r2, #0
 800638a:	4698      	mov	r8, r3
 800638c:	4691      	mov	r9, r2
 800638e:	4b36      	ldr	r3, [pc, #216]	; (8006468 <checkDemoModCalisma+0x68c>)
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	4590      	cmp	r8, r2
 8006396:	eb79 0303 	sbcs.w	r3, r9, r3
 800639a:	d303      	bcc.n	80063a4 <checkDemoModCalisma+0x5c8>
 800639c:	4b2f      	ldr	r3, [pc, #188]	; (800645c <checkDemoModCalisma+0x680>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d114      	bne.n	80063ce <checkDemoModCalisma+0x5f2>
 80063a4:	4b1d      	ldr	r3, [pc, #116]	; (800641c <checkDemoModCalisma+0x640>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	f083 0301 	eor.w	r3, r3, #1
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10d      	bne.n	80063ce <checkDemoModCalisma+0x5f2>
 80063b2:	4b1b      	ldr	r3, [pc, #108]	; (8006420 <checkDemoModCalisma+0x644>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	f083 0301 	eor.w	r3, r3, #1
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d106      	bne.n	80063ce <checkDemoModCalisma+0x5f2>
 80063c0:	4b14      	ldr	r3, [pc, #80]	; (8006414 <checkDemoModCalisma+0x638>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	f083 0301 	eor.w	r3, r3, #1
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <checkDemoModCalisma+0x608>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80063ce:	2200      	movs	r2, #0
 80063d0:	2102      	movs	r1, #2
 80063d2:	4814      	ldr	r0, [pc, #80]	; (8006424 <checkDemoModCalisma+0x648>)
 80063d4:	f004 fa83 	bl	800a8de <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 80063d8:	4a17      	ldr	r2, [pc, #92]	; (8006438 <checkDemoModCalisma+0x65c>)
 80063da:	2300      	movs	r3, #0
 80063dc:	7013      	strb	r3, [r2, #0]
					butonKontrol2=0;
 80063de:	4a1f      	ldr	r2, [pc, #124]	; (800645c <checkDemoModCalisma+0x680>)
 80063e0:	2300      	movs	r3, #0
 80063e2:	7013      	strb	r3, [r2, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80063e4:	4b14      	ldr	r3, [pc, #80]	; (8006438 <checkDemoModCalisma+0x65c>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d041      	beq.n	8006470 <checkDemoModCalisma+0x694>
 80063ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80063f0:	480f      	ldr	r0, [pc, #60]	; (8006430 <checkDemoModCalisma+0x654>)
 80063f2:	f004 fa5d 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d139      	bne.n	8006470 <checkDemoModCalisma+0x694>
 80063fc:	4b1b      	ldr	r3, [pc, #108]	; (800646c <checkDemoModCalisma+0x690>)
 80063fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006402:	4313      	orrs	r3, r2
 8006404:	d034      	beq.n	8006470 <checkDemoModCalisma+0x694>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006406:	2201      	movs	r2, #1
 8006408:	2101      	movs	r1, #1
 800640a:	4806      	ldr	r0, [pc, #24]	; (8006424 <checkDemoModCalisma+0x648>)
 800640c:	f004 fa67 	bl	800a8de <HAL_GPIO_WritePin>
 8006410:	e033      	b.n	800647a <checkDemoModCalisma+0x69e>
 8006412:	bf00      	nop
 8006414:	20001243 	.word	0x20001243
 8006418:	200011a0 	.word	0x200011a0
 800641c:	2000123e 	.word	0x2000123e
 8006420:	2000123f 	.word	0x2000123f
 8006424:	40010c00 	.word	0x40010c00
 8006428:	20001229 	.word	0x20001229
 800642c:	2000123d 	.word	0x2000123d
 8006430:	40011000 	.word	0x40011000
 8006434:	200010e8 	.word	0x200010e8
 8006438:	20001224 	.word	0x20001224
 800643c:	20001221 	.word	0x20001221
 8006440:	20001225 	.word	0x20001225
 8006444:	20001222 	.word	0x20001222
 8006448:	20001223 	.word	0x20001223
 800644c:	20001226 	.word	0x20001226
 8006450:	20001227 	.word	0x20001227
 8006454:	2000122c 	.word	0x2000122c
 8006458:	2000124d 	.word	0x2000124d
 800645c:	2000121c 	.word	0x2000121c
 8006460:	20001088 	.word	0x20001088
 8006464:	20001094 	.word	0x20001094
 8006468:	20001160 	.word	0x20001160
 800646c:	200010e0 	.word	0x200010e0
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006470:	2200      	movs	r2, #0
 8006472:	2101      	movs	r1, #1
 8006474:	4839      	ldr	r0, [pc, #228]	; (800655c <checkDemoModCalisma+0x780>)
 8006476:	f004 fa32 	bl	800a8de <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 800647a:	4b39      	ldr	r3, [pc, #228]	; (8006560 <checkDemoModCalisma+0x784>)
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	4313      	orrs	r3, r2
 8006482:	f040 8085 	bne.w	8006590 <checkDemoModCalisma+0x7b4>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006486:	4b37      	ldr	r3, [pc, #220]	; (8006564 <checkDemoModCalisma+0x788>)
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	1e51      	subs	r1, r2, #1
 800648e:	430b      	orrs	r3, r1
 8006490:	d005      	beq.n	800649e <checkDemoModCalisma+0x6c2>
 8006492:	4b34      	ldr	r3, [pc, #208]	; (8006564 <checkDemoModCalisma+0x788>)
 8006494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006498:	1e91      	subs	r1, r2, #2
 800649a:	430b      	orrs	r3, r1
 800649c:	d178      	bne.n	8006590 <checkDemoModCalisma+0x7b4>
						&& (stopVar) && (kapiSivicVar)
 800649e:	4b32      	ldr	r3, [pc, #200]	; (8006568 <checkDemoModCalisma+0x78c>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d074      	beq.n	8006590 <checkDemoModCalisma+0x7b4>
 80064a6:	4b31      	ldr	r3, [pc, #196]	; (800656c <checkDemoModCalisma+0x790>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d070      	beq.n	8006590 <checkDemoModCalisma+0x7b4>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80064ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064b2:	482a      	ldr	r0, [pc, #168]	; (800655c <checkDemoModCalisma+0x780>)
 80064b4:	f004 f9fc 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d168      	bne.n	8006590 <checkDemoModCalisma+0x7b4>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80064be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064c2:	482b      	ldr	r0, [pc, #172]	; (8006570 <checkDemoModCalisma+0x794>)
 80064c4:	f004 f9f4 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d004      	beq.n	80064d8 <checkDemoModCalisma+0x6fc>
 80064ce:	4b29      	ldr	r3, [pc, #164]	; (8006574 <checkDemoModCalisma+0x798>)
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	d15b      	bne.n	8006590 <checkDemoModCalisma+0x7b4>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80064d8:	2140      	movs	r1, #64	; 0x40
 80064da:	4825      	ldr	r0, [pc, #148]	; (8006570 <checkDemoModCalisma+0x794>)
 80064dc:	f004 f9e8 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d10f      	bne.n	8006506 <checkDemoModCalisma+0x72a>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80064e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064ea:	481c      	ldr	r0, [pc, #112]	; (800655c <checkDemoModCalisma+0x780>)
 80064ec:	f004 f9e0 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d107      	bne.n	8006506 <checkDemoModCalisma+0x72a>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80064f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80064fa:	4818      	ldr	r0, [pc, #96]	; (800655c <checkDemoModCalisma+0x780>)
 80064fc:	f004 f9d8 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006500:	4603      	mov	r3, r0
 8006502:	2b01      	cmp	r3, #1
 8006504:	d003      	beq.n	800650e <checkDemoModCalisma+0x732>
 8006506:	4b1c      	ldr	r3, [pc, #112]	; (8006578 <checkDemoModCalisma+0x79c>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d040      	beq.n	8006590 <checkDemoModCalisma+0x7b4>
						&& (yukarimotorcalisiyor==0)
 800650e:	4b1b      	ldr	r3, [pc, #108]	; (800657c <checkDemoModCalisma+0x7a0>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	f083 0301 	eor.w	r3, r3, #1
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d039      	beq.n	8006590 <checkDemoModCalisma+0x7b4>
						&& (yukarivalfcalisiyor==0)
 800651c:	4b18      	ldr	r3, [pc, #96]	; (8006580 <checkDemoModCalisma+0x7a4>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	f083 0301 	eor.w	r3, r3, #1
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d032      	beq.n	8006590 <checkDemoModCalisma+0x7b4>
						&& (asagivalfcalisiyor==0)
 800652a:	4b16      	ldr	r3, [pc, #88]	; (8006584 <checkDemoModCalisma+0x7a8>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	f083 0301 	eor.w	r3, r3, #1
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d02b      	beq.n	8006590 <checkDemoModCalisma+0x7b4>
						&& (devmotorasagicalisiyor==0)
 8006538:	4b13      	ldr	r3, [pc, #76]	; (8006588 <checkDemoModCalisma+0x7ac>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	f083 0301 	eor.w	r3, r3, #1
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d024      	beq.n	8006590 <checkDemoModCalisma+0x7b4>
						&&(devasagivalfcalisiyor==0)) {
 8006546:	4b11      	ldr	r3, [pc, #68]	; (800658c <checkDemoModCalisma+0x7b0>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	f083 0301 	eor.w	r3, r3, #1
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	d01d      	beq.n	8006590 <checkDemoModCalisma+0x7b4>

					devmotoryukaricalisiyor=1;
 8006554:	4a08      	ldr	r2, [pc, #32]	; (8006578 <checkDemoModCalisma+0x79c>)
 8006556:	2301      	movs	r3, #1
 8006558:	7013      	strb	r3, [r2, #0]
 800655a:	e01c      	b.n	8006596 <checkDemoModCalisma+0x7ba>
 800655c:	40010c00 	.word	0x40010c00
 8006560:	200011a0 	.word	0x200011a0
 8006564:	20001130 	.word	0x20001130
 8006568:	2000123e 	.word	0x2000123e
 800656c:	2000123f 	.word	0x2000123f
 8006570:	40011000 	.word	0x40011000
 8006574:	20001138 	.word	0x20001138
 8006578:	20001222 	.word	0x20001222
 800657c:	20001221 	.word	0x20001221
 8006580:	20001225 	.word	0x20001225
 8006584:	20001224 	.word	0x20001224
 8006588:	20001223 	.word	0x20001223
 800658c:	20001227 	.word	0x20001227
				} else {
					devmotoryukaricalisiyor=0;
 8006590:	4a6b      	ldr	r2, [pc, #428]	; (8006740 <checkDemoModCalisma+0x964>)
 8006592:	2300      	movs	r3, #0
 8006594:	7013      	strb	r3, [r2, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8006596:	4b6a      	ldr	r3, [pc, #424]	; (8006740 <checkDemoModCalisma+0x964>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d007      	beq.n	80065ae <checkDemoModCalisma+0x7d2>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800659e:	2201      	movs	r2, #1
 80065a0:	2120      	movs	r1, #32
 80065a2:	4868      	ldr	r0, [pc, #416]	; (8006744 <checkDemoModCalisma+0x968>)
 80065a4:	f004 f99b 	bl	800a8de <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 80065a8:	4a67      	ldr	r2, [pc, #412]	; (8006748 <checkDemoModCalisma+0x96c>)
 80065aa:	2301      	movs	r3, #1
 80065ac:	7013      	strb	r3, [r2, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80065ae:	4b66      	ldr	r3, [pc, #408]	; (8006748 <checkDemoModCalisma+0x96c>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d025      	beq.n	8006602 <checkDemoModCalisma+0x826>
 80065b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065ba:	4864      	ldr	r0, [pc, #400]	; (800674c <checkDemoModCalisma+0x970>)
 80065bc:	f004 f978 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d007      	beq.n	80065d6 <checkDemoModCalisma+0x7fa>
 80065c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065ca:	485e      	ldr	r0, [pc, #376]	; (8006744 <checkDemoModCalisma+0x968>)
 80065cc:	f004 f970 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d115      	bne.n	8006602 <checkDemoModCalisma+0x826>
 80065d6:	4b5e      	ldr	r3, [pc, #376]	; (8006750 <checkDemoModCalisma+0x974>)
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d011      	beq.n	8006602 <checkDemoModCalisma+0x826>
 80065de:	4b5d      	ldr	r3, [pc, #372]	; (8006754 <checkDemoModCalisma+0x978>)
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00d      	beq.n	8006602 <checkDemoModCalisma+0x826>
 80065e6:	4b5c      	ldr	r3, [pc, #368]	; (8006758 <checkDemoModCalisma+0x97c>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	f083 0301 	eor.w	r3, r3, #1
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d006      	beq.n	8006602 <checkDemoModCalisma+0x826>
					timer2=millis;
 80065f4:	4b59      	ldr	r3, [pc, #356]	; (800675c <checkDemoModCalisma+0x980>)
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	4b59      	ldr	r3, [pc, #356]	; (8006760 <checkDemoModCalisma+0x984>)
 80065fa:	601a      	str	r2, [r3, #0]
					butonKontrol4=1;
 80065fc:	4a56      	ldr	r2, [pc, #344]	; (8006758 <checkDemoModCalisma+0x97c>)
 80065fe:	2301      	movs	r3, #1
 8006600:	7013      	strb	r3, [r2, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006602:	4b56      	ldr	r3, [pc, #344]	; (800675c <checkDemoModCalisma+0x980>)
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	4b56      	ldr	r3, [pc, #344]	; (8006760 <checkDemoModCalisma+0x984>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2200      	movs	r2, #0
 800660e:	469a      	mov	sl, r3
 8006610:	4693      	mov	fp, r2
 8006612:	4b54      	ldr	r3, [pc, #336]	; (8006764 <checkDemoModCalisma+0x988>)
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	4592      	cmp	sl, r2
 800661a:	eb7b 0303 	sbcs.w	r3, fp, r3
 800661e:	d303      	bcc.n	8006628 <checkDemoModCalisma+0x84c>
 8006620:	4b4d      	ldr	r3, [pc, #308]	; (8006758 <checkDemoModCalisma+0x97c>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10d      	bne.n	8006644 <checkDemoModCalisma+0x868>
 8006628:	4b49      	ldr	r3, [pc, #292]	; (8006750 <checkDemoModCalisma+0x974>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	f083 0301 	eor.w	r3, r3, #1
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <checkDemoModCalisma+0x868>
 8006636:	4b47      	ldr	r3, [pc, #284]	; (8006754 <checkDemoModCalisma+0x978>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	f083 0301 	eor.w	r3, r3, #1
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00a      	beq.n	800665a <checkDemoModCalisma+0x87e>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006644:	2200      	movs	r2, #0
 8006646:	2120      	movs	r1, #32
 8006648:	483e      	ldr	r0, [pc, #248]	; (8006744 <checkDemoModCalisma+0x968>)
 800664a:	f004 f948 	bl	800a8de <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 800664e:	4a3e      	ldr	r2, [pc, #248]	; (8006748 <checkDemoModCalisma+0x96c>)
 8006650:	2300      	movs	r3, #0
 8006652:	7013      	strb	r3, [r2, #0]
					butonKontrol4=0;
 8006654:	4a40      	ldr	r2, [pc, #256]	; (8006758 <checkDemoModCalisma+0x97c>)
 8006656:	2300      	movs	r3, #0
 8006658:	7013      	strb	r3, [r2, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 800665a:	4b43      	ldr	r3, [pc, #268]	; (8006768 <checkDemoModCalisma+0x98c>)
 800665c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006660:	4313      	orrs	r3, r2
 8006662:	f040 808f 	bne.w	8006784 <checkDemoModCalisma+0x9a8>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006666:	4b41      	ldr	r3, [pc, #260]	; (800676c <checkDemoModCalisma+0x990>)
 8006668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666c:	1e51      	subs	r1, r2, #1
 800666e:	430b      	orrs	r3, r1
 8006670:	d006      	beq.n	8006680 <checkDemoModCalisma+0x8a4>
 8006672:	4b3e      	ldr	r3, [pc, #248]	; (800676c <checkDemoModCalisma+0x990>)
 8006674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006678:	1e91      	subs	r1, r2, #2
 800667a:	430b      	orrs	r3, r1
 800667c:	f040 8082 	bne.w	8006784 <checkDemoModCalisma+0x9a8>
						&& (stopVar) && (kapiSivicVar)
 8006680:	4b33      	ldr	r3, [pc, #204]	; (8006750 <checkDemoModCalisma+0x974>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d07d      	beq.n	8006784 <checkDemoModCalisma+0x9a8>
 8006688:	4b32      	ldr	r3, [pc, #200]	; (8006754 <checkDemoModCalisma+0x978>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d079      	beq.n	8006784 <checkDemoModCalisma+0x9a8>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006690:	2140      	movs	r1, #64	; 0x40
 8006692:	482c      	ldr	r0, [pc, #176]	; (8006744 <checkDemoModCalisma+0x968>)
 8006694:	f004 f90c 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d172      	bne.n	8006784 <checkDemoModCalisma+0x9a8>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800669e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066a2:	4828      	ldr	r0, [pc, #160]	; (8006744 <checkDemoModCalisma+0x968>)
 80066a4:	f004 f904 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d004      	beq.n	80066b8 <checkDemoModCalisma+0x8dc>
 80066ae:	4b30      	ldr	r3, [pc, #192]	; (8006770 <checkDemoModCalisma+0x994>)
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	d165      	bne.n	8006784 <checkDemoModCalisma+0x9a8>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80066b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066bc:	4823      	ldr	r0, [pc, #140]	; (800674c <checkDemoModCalisma+0x970>)
 80066be:	f004 f8f7 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d10f      	bne.n	80066e8 <checkDemoModCalisma+0x90c>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80066c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066cc:	481f      	ldr	r0, [pc, #124]	; (800674c <checkDemoModCalisma+0x970>)
 80066ce:	f004 f8ef 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d107      	bne.n	80066e8 <checkDemoModCalisma+0x90c>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80066d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066dc:	481b      	ldr	r0, [pc, #108]	; (800674c <checkDemoModCalisma+0x970>)
 80066de:	f004 f8e7 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d003      	beq.n	80066f0 <checkDemoModCalisma+0x914>
 80066e8:	4b22      	ldr	r3, [pc, #136]	; (8006774 <checkDemoModCalisma+0x998>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d049      	beq.n	8006784 <checkDemoModCalisma+0x9a8>
						&& (yukarimotorcalisiyor==0)
 80066f0:	4b21      	ldr	r3, [pc, #132]	; (8006778 <checkDemoModCalisma+0x99c>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	f083 0301 	eor.w	r3, r3, #1
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d042      	beq.n	8006784 <checkDemoModCalisma+0x9a8>
						&& (yukarivalfcalisiyor==0)
 80066fe:	4b1f      	ldr	r3, [pc, #124]	; (800677c <checkDemoModCalisma+0x9a0>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	f083 0301 	eor.w	r3, r3, #1
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d03b      	beq.n	8006784 <checkDemoModCalisma+0x9a8>
						&& (asagivalfcalisiyor==0)
 800670c:	4b1c      	ldr	r3, [pc, #112]	; (8006780 <checkDemoModCalisma+0x9a4>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	f083 0301 	eor.w	r3, r3, #1
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d034      	beq.n	8006784 <checkDemoModCalisma+0x9a8>
						&& (devyukarivalfcalisiyor==0)
 800671a:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <checkDemoModCalisma+0x96c>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	f083 0301 	eor.w	r3, r3, #1
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d02d      	beq.n	8006784 <checkDemoModCalisma+0x9a8>
						&& (devmotoryukaricalisiyor==0)) {
 8006728:	4b05      	ldr	r3, [pc, #20]	; (8006740 <checkDemoModCalisma+0x964>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	f083 0301 	eor.w	r3, r3, #1
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d026      	beq.n	8006784 <checkDemoModCalisma+0x9a8>

					devmotorasagicalisiyor=1;
 8006736:	4a0f      	ldr	r2, [pc, #60]	; (8006774 <checkDemoModCalisma+0x998>)
 8006738:	2301      	movs	r3, #1
 800673a:	7013      	strb	r3, [r2, #0]
 800673c:	e025      	b.n	800678a <checkDemoModCalisma+0x9ae>
 800673e:	bf00      	nop
 8006740:	20001222 	.word	0x20001222
 8006744:	40011000 	.word	0x40011000
 8006748:	20001226 	.word	0x20001226
 800674c:	40010c00 	.word	0x40010c00
 8006750:	2000123e 	.word	0x2000123e
 8006754:	2000123f 	.word	0x2000123f
 8006758:	2000121e 	.word	0x2000121e
 800675c:	20001088 	.word	0x20001088
 8006760:	20001094 	.word	0x20001094
 8006764:	20001168 	.word	0x20001168
 8006768:	200011a0 	.word	0x200011a0
 800676c:	20001130 	.word	0x20001130
 8006770:	20001140 	.word	0x20001140
 8006774:	20001223 	.word	0x20001223
 8006778:	20001221 	.word	0x20001221
 800677c:	20001225 	.word	0x20001225
 8006780:	20001224 	.word	0x20001224
				} else {
					devmotorasagicalisiyor=0;
 8006784:	4a47      	ldr	r2, [pc, #284]	; (80068a4 <checkDemoModCalisma+0xac8>)
 8006786:	2300      	movs	r3, #0
 8006788:	7013      	strb	r3, [r2, #0]
				}

				if(devmotorasagicalisiyor==1) {
 800678a:	4b46      	ldr	r3, [pc, #280]	; (80068a4 <checkDemoModCalisma+0xac8>)
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <checkDemoModCalisma+0x9c6>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006792:	2201      	movs	r2, #1
 8006794:	2110      	movs	r1, #16
 8006796:	4844      	ldr	r0, [pc, #272]	; (80068a8 <checkDemoModCalisma+0xacc>)
 8006798:	f004 f8a1 	bl	800a8de <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 800679c:	4a43      	ldr	r2, [pc, #268]	; (80068ac <checkDemoModCalisma+0xad0>)
 800679e:	2301      	movs	r3, #1
 80067a0:	7013      	strb	r3, [r2, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80067a2:	4b42      	ldr	r3, [pc, #264]	; (80068ac <checkDemoModCalisma+0xad0>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d024      	beq.n	80067f4 <checkDemoModCalisma+0xa18>
 80067aa:	2140      	movs	r1, #64	; 0x40
 80067ac:	483e      	ldr	r0, [pc, #248]	; (80068a8 <checkDemoModCalisma+0xacc>)
 80067ae:	f004 f87f 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d007      	beq.n	80067c8 <checkDemoModCalisma+0x9ec>
 80067b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067bc:	483a      	ldr	r0, [pc, #232]	; (80068a8 <checkDemoModCalisma+0xacc>)
 80067be:	f004 f877 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d115      	bne.n	80067f4 <checkDemoModCalisma+0xa18>
 80067c8:	4b39      	ldr	r3, [pc, #228]	; (80068b0 <checkDemoModCalisma+0xad4>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d011      	beq.n	80067f4 <checkDemoModCalisma+0xa18>
 80067d0:	4b38      	ldr	r3, [pc, #224]	; (80068b4 <checkDemoModCalisma+0xad8>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00d      	beq.n	80067f4 <checkDemoModCalisma+0xa18>
 80067d8:	4b37      	ldr	r3, [pc, #220]	; (80068b8 <checkDemoModCalisma+0xadc>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	f083 0301 	eor.w	r3, r3, #1
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d006      	beq.n	80067f4 <checkDemoModCalisma+0xa18>
					timer2=millis;
 80067e6:	4b35      	ldr	r3, [pc, #212]	; (80068bc <checkDemoModCalisma+0xae0>)
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	4b35      	ldr	r3, [pc, #212]	; (80068c0 <checkDemoModCalisma+0xae4>)
 80067ec:	601a      	str	r2, [r3, #0]
					butonKontrol5=1;
 80067ee:	4a32      	ldr	r2, [pc, #200]	; (80068b8 <checkDemoModCalisma+0xadc>)
 80067f0:	2301      	movs	r3, #1
 80067f2:	7013      	strb	r3, [r2, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80067f4:	4b31      	ldr	r3, [pc, #196]	; (80068bc <checkDemoModCalisma+0xae0>)
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	4b31      	ldr	r3, [pc, #196]	; (80068c0 <checkDemoModCalisma+0xae4>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2200      	movs	r2, #0
 8006800:	633b      	str	r3, [r7, #48]	; 0x30
 8006802:	637a      	str	r2, [r7, #52]	; 0x34
 8006804:	4b2f      	ldr	r3, [pc, #188]	; (80068c4 <checkDemoModCalisma+0xae8>)
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800680e:	4604      	mov	r4, r0
 8006810:	4294      	cmp	r4, r2
 8006812:	4199      	sbcs	r1, r3
 8006814:	d303      	bcc.n	800681e <checkDemoModCalisma+0xa42>
 8006816:	4b28      	ldr	r3, [pc, #160]	; (80068b8 <checkDemoModCalisma+0xadc>)
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10d      	bne.n	800683a <checkDemoModCalisma+0xa5e>
 800681e:	4b24      	ldr	r3, [pc, #144]	; (80068b0 <checkDemoModCalisma+0xad4>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	f083 0301 	eor.w	r3, r3, #1
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d106      	bne.n	800683a <checkDemoModCalisma+0xa5e>
 800682c:	4b21      	ldr	r3, [pc, #132]	; (80068b4 <checkDemoModCalisma+0xad8>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	f083 0301 	eor.w	r3, r3, #1
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <checkDemoModCalisma+0xa74>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800683a:	2200      	movs	r2, #0
 800683c:	2110      	movs	r1, #16
 800683e:	481a      	ldr	r0, [pc, #104]	; (80068a8 <checkDemoModCalisma+0xacc>)
 8006840:	f004 f84d 	bl	800a8de <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8006844:	4a19      	ldr	r2, [pc, #100]	; (80068ac <checkDemoModCalisma+0xad0>)
 8006846:	2300      	movs	r3, #0
 8006848:	7013      	strb	r3, [r2, #0]
					butonKontrol5=0;
 800684a:	4a1b      	ldr	r2, [pc, #108]	; (80068b8 <checkDemoModCalisma+0xadc>)
 800684c:	2300      	movs	r3, #0
 800684e:	7013      	strb	r3, [r2, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006850:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006854:	481c      	ldr	r0, [pc, #112]	; (80068c8 <checkDemoModCalisma+0xaec>)
 8006856:	f004 f82b 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d137      	bne.n	80068d0 <checkDemoModCalisma+0xaf4>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006860:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006864:	4818      	ldr	r0, [pc, #96]	; (80068c8 <checkDemoModCalisma+0xaec>)
 8006866:	f004 f823 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d12f      	bne.n	80068d0 <checkDemoModCalisma+0xaf4>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006870:	2104      	movs	r1, #4
 8006872:	4815      	ldr	r0, [pc, #84]	; (80068c8 <checkDemoModCalisma+0xaec>)
 8006874:	f004 f81c 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d128      	bne.n	80068d0 <checkDemoModCalisma+0xaf4>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800687e:	2102      	movs	r1, #2
 8006880:	4811      	ldr	r0, [pc, #68]	; (80068c8 <checkDemoModCalisma+0xaec>)
 8006882:	f004 f815 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d121      	bne.n	80068d0 <checkDemoModCalisma+0xaf4>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 800688c:	2101      	movs	r1, #1
 800688e:	480e      	ldr	r0, [pc, #56]	; (80068c8 <checkDemoModCalisma+0xaec>)
 8006890:	f004 f80e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d11a      	bne.n	80068d0 <checkDemoModCalisma+0xaf4>
					makineStop=1;
 800689a:	4a0c      	ldr	r2, [pc, #48]	; (80068cc <checkDemoModCalisma+0xaf0>)
 800689c:	2301      	movs	r3, #1
 800689e:	7013      	strb	r3, [r2, #0]
 80068a0:	e019      	b.n	80068d6 <checkDemoModCalisma+0xafa>
 80068a2:	bf00      	nop
 80068a4:	20001223 	.word	0x20001223
 80068a8:	40011000 	.word	0x40011000
 80068ac:	20001227 	.word	0x20001227
 80068b0:	2000123e 	.word	0x2000123e
 80068b4:	2000123f 	.word	0x2000123f
 80068b8:	2000121f 	.word	0x2000121f
 80068bc:	20001088 	.word	0x20001088
 80068c0:	20001094 	.word	0x20001094
 80068c4:	20001168 	.word	0x20001168
 80068c8:	40010c00 	.word	0x40010c00
 80068cc:	2000122e 	.word	0x2000122e
				} else {
					makineStop=0;
 80068d0:	4a83      	ldr	r2, [pc, #524]	; (8006ae0 <checkDemoModCalisma+0xd04>)
 80068d2:	2300      	movs	r3, #0
 80068d4:	7013      	strb	r3, [r2, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80068d6:	4b83      	ldr	r3, [pc, #524]	; (8006ae4 <checkDemoModCalisma+0xd08>)
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	4313      	orrs	r3, r2
 80068de:	d14c      	bne.n	800697a <checkDemoModCalisma+0xb9e>
 80068e0:	4b81      	ldr	r3, [pc, #516]	; (8006ae8 <checkDemoModCalisma+0xd0c>)
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	1e51      	subs	r1, r2, #1
 80068e8:	430b      	orrs	r3, r1
 80068ea:	d005      	beq.n	80068f8 <checkDemoModCalisma+0xb1c>
 80068ec:	4b7e      	ldr	r3, [pc, #504]	; (8006ae8 <checkDemoModCalisma+0xd0c>)
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	1ed1      	subs	r1, r2, #3
 80068f4:	430b      	orrs	r3, r1
 80068f6:	d140      	bne.n	800697a <checkDemoModCalisma+0xb9e>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80068f8:	2180      	movs	r1, #128	; 0x80
 80068fa:	487c      	ldr	r0, [pc, #496]	; (8006aec <checkDemoModCalisma+0xd10>)
 80068fc:	f003 ffd8 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d104      	bne.n	8006910 <checkDemoModCalisma+0xb34>
 8006906:	4b7a      	ldr	r3, [pc, #488]	; (8006af0 <checkDemoModCalisma+0xd14>)
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	4313      	orrs	r3, r2
 800690e:	d00d      	beq.n	800692c <checkDemoModCalisma+0xb50>
 8006910:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006914:	4877      	ldr	r0, [pc, #476]	; (8006af4 <checkDemoModCalisma+0xd18>)
 8006916:	f003 ffcb 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d12c      	bne.n	800697a <checkDemoModCalisma+0xb9e>
 8006920:	4b73      	ldr	r3, [pc, #460]	; (8006af0 <checkDemoModCalisma+0xd14>)
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	1e51      	subs	r1, r2, #1
 8006928:	430b      	orrs	r3, r1
 800692a:	d126      	bne.n	800697a <checkDemoModCalisma+0xb9e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800692c:	2104      	movs	r1, #4
 800692e:	486f      	ldr	r0, [pc, #444]	; (8006aec <checkDemoModCalisma+0xd10>)
 8006930:	f003 ffbe 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006934:	4603      	mov	r3, r0
 8006936:	2b01      	cmp	r3, #1
 8006938:	d004      	beq.n	8006944 <checkDemoModCalisma+0xb68>
 800693a:	4b6f      	ldr	r3, [pc, #444]	; (8006af8 <checkDemoModCalisma+0xd1c>)
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	4313      	orrs	r3, r2
 8006942:	d11a      	bne.n	800697a <checkDemoModCalisma+0xb9e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006944:	2102      	movs	r1, #2
 8006946:	4869      	ldr	r0, [pc, #420]	; (8006aec <checkDemoModCalisma+0xd10>)
 8006948:	f003 ffb2 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d113      	bne.n	800697a <checkDemoModCalisma+0xb9e>
						&&(butonKontrol==0)
 8006952:	4b6a      	ldr	r3, [pc, #424]	; (8006afc <checkDemoModCalisma+0xd20>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	f083 0301 	eor.w	r3, r3, #1
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00c      	beq.n	800697a <checkDemoModCalisma+0xb9e>
						&&(makineStop==1)) {
 8006960:	4b5f      	ldr	r3, [pc, #380]	; (8006ae0 <checkDemoModCalisma+0xd04>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d008      	beq.n	800697a <checkDemoModCalisma+0xb9e>

					kapi1prudhome=1;
 8006968:	4a65      	ldr	r2, [pc, #404]	; (8006b00 <checkDemoModCalisma+0xd24>)
 800696a:	2301      	movs	r3, #1
 800696c:	7013      	strb	r3, [r2, #0]
					timer = millis;
 800696e:	4b65      	ldr	r3, [pc, #404]	; (8006b04 <checkDemoModCalisma+0xd28>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a65      	ldr	r2, [pc, #404]	; (8006b08 <checkDemoModCalisma+0xd2c>)
 8006974:	6013      	str	r3, [r2, #0]
					bekle();
 8006976:	f7fd fbdd 	bl	8004134 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800697a:	4b62      	ldr	r3, [pc, #392]	; (8006b04 <checkDemoModCalisma+0xd28>)
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4b62      	ldr	r3, [pc, #392]	; (8006b08 <checkDemoModCalisma+0xd2c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2200      	movs	r2, #0
 8006986:	62bb      	str	r3, [r7, #40]	; 0x28
 8006988:	62fa      	str	r2, [r7, #44]	; 0x2c
 800698a:	4b60      	ldr	r3, [pc, #384]	; (8006b0c <checkDemoModCalisma+0xd30>)
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006994:	4604      	mov	r4, r0
 8006996:	4294      	cmp	r4, r2
 8006998:	4199      	sbcs	r1, r3
 800699a:	d212      	bcs.n	80069c2 <checkDemoModCalisma+0xbe6>
 800699c:	2104      	movs	r1, #4
 800699e:	4853      	ldr	r0, [pc, #332]	; (8006aec <checkDemoModCalisma+0xd10>)
 80069a0:	f003 ff86 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00b      	beq.n	80069c2 <checkDemoModCalisma+0xbe6>
 80069aa:	4b53      	ldr	r3, [pc, #332]	; (8006af8 <checkDemoModCalisma+0xd1c>)
 80069ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	d006      	beq.n	80069c2 <checkDemoModCalisma+0xbe6>
 80069b4:	4b4a      	ldr	r3, [pc, #296]	; (8006ae0 <checkDemoModCalisma+0xd04>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	f083 0301 	eor.w	r3, r3, #1
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <checkDemoModCalisma+0xbec>
					kapi1prudhome=0;
 80069c2:	4b4f      	ldr	r3, [pc, #316]	; (8006b00 <checkDemoModCalisma+0xd24>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80069c8:	4b46      	ldr	r3, [pc, #280]	; (8006ae4 <checkDemoModCalisma+0xd08>)
 80069ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ce:	1e51      	subs	r1, r2, #1
 80069d0:	430b      	orrs	r3, r1
 80069d2:	d140      	bne.n	8006a56 <checkDemoModCalisma+0xc7a>
 80069d4:	4b44      	ldr	r3, [pc, #272]	; (8006ae8 <checkDemoModCalisma+0xd0c>)
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	1e51      	subs	r1, r2, #1
 80069dc:	430b      	orrs	r3, r1
 80069de:	d005      	beq.n	80069ec <checkDemoModCalisma+0xc10>
 80069e0:	4b41      	ldr	r3, [pc, #260]	; (8006ae8 <checkDemoModCalisma+0xd0c>)
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	1ed1      	subs	r1, r2, #3
 80069e8:	430b      	orrs	r3, r1
 80069ea:	d134      	bne.n	8006a56 <checkDemoModCalisma+0xc7a>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80069ec:	2104      	movs	r1, #4
 80069ee:	483f      	ldr	r0, [pc, #252]	; (8006aec <checkDemoModCalisma+0xd10>)
 80069f0:	f003 ff5e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d004      	beq.n	8006a04 <checkDemoModCalisma+0xc28>
 80069fa:	4b3f      	ldr	r3, [pc, #252]	; (8006af8 <checkDemoModCalisma+0xd1c>)
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	d128      	bne.n	8006a56 <checkDemoModCalisma+0xc7a>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006a04:	2102      	movs	r1, #2
 8006a06:	4839      	ldr	r0, [pc, #228]	; (8006aec <checkDemoModCalisma+0xd10>)
 8006a08:	f003 ff52 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d121      	bne.n	8006a56 <checkDemoModCalisma+0xc7a>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006a12:	2180      	movs	r1, #128	; 0x80
 8006a14:	4835      	ldr	r0, [pc, #212]	; (8006aec <checkDemoModCalisma+0xd10>)
 8006a16:	f003 ff4b 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d104      	bne.n	8006a2a <checkDemoModCalisma+0xc4e>
 8006a20:	4b33      	ldr	r3, [pc, #204]	; (8006af0 <checkDemoModCalisma+0xd14>)
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	d00d      	beq.n	8006a46 <checkDemoModCalisma+0xc6a>
 8006a2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a2e:	4831      	ldr	r0, [pc, #196]	; (8006af4 <checkDemoModCalisma+0xd18>)
 8006a30:	f003 ff3e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10d      	bne.n	8006a56 <checkDemoModCalisma+0xc7a>
 8006a3a:	4b2d      	ldr	r3, [pc, #180]	; (8006af0 <checkDemoModCalisma+0xd14>)
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	1e51      	subs	r1, r2, #1
 8006a42:	430b      	orrs	r3, r1
 8006a44:	d107      	bne.n	8006a56 <checkDemoModCalisma+0xc7a>
						&&(makineStop==1)) {
 8006a46:	4b26      	ldr	r3, [pc, #152]	; (8006ae0 <checkDemoModCalisma+0xd04>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <checkDemoModCalisma+0xc7a>

					kapi1butonkontrol=1;
 8006a4e:	4b30      	ldr	r3, [pc, #192]	; (8006b10 <checkDemoModCalisma+0xd34>)
 8006a50:	2201      	movs	r2, #1
 8006a52:	701a      	strb	r2, [r3, #0]
 8006a54:	e002      	b.n	8006a5c <checkDemoModCalisma+0xc80>
				} else {
					kapi1butonkontrol=0;
 8006a56:	4b2e      	ldr	r3, [pc, #184]	; (8006b10 <checkDemoModCalisma+0xd34>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006a5c:	4b21      	ldr	r3, [pc, #132]	; (8006ae4 <checkDemoModCalisma+0xd08>)
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	1e91      	subs	r1, r2, #2
 8006a64:	430b      	orrs	r3, r1
 8006a66:	d126      	bne.n	8006ab6 <checkDemoModCalisma+0xcda>
 8006a68:	4b1f      	ldr	r3, [pc, #124]	; (8006ae8 <checkDemoModCalisma+0xd0c>)
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	1e51      	subs	r1, r2, #1
 8006a70:	430b      	orrs	r3, r1
 8006a72:	d005      	beq.n	8006a80 <checkDemoModCalisma+0xca4>
 8006a74:	4b1c      	ldr	r3, [pc, #112]	; (8006ae8 <checkDemoModCalisma+0xd0c>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	1ed1      	subs	r1, r2, #3
 8006a7c:	430b      	orrs	r3, r1
 8006a7e:	d11a      	bne.n	8006ab6 <checkDemoModCalisma+0xcda>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006a80:	2104      	movs	r1, #4
 8006a82:	481a      	ldr	r0, [pc, #104]	; (8006aec <checkDemoModCalisma+0xd10>)
 8006a84:	f003 ff14 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d004      	beq.n	8006a98 <checkDemoModCalisma+0xcbc>
 8006a8e:	4b1a      	ldr	r3, [pc, #104]	; (8006af8 <checkDemoModCalisma+0xd1c>)
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	d10e      	bne.n	8006ab6 <checkDemoModCalisma+0xcda>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006a98:	2102      	movs	r1, #2
 8006a9a:	4814      	ldr	r0, [pc, #80]	; (8006aec <checkDemoModCalisma+0xd10>)
 8006a9c:	f003 ff08 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d107      	bne.n	8006ab6 <checkDemoModCalisma+0xcda>
						&&(makineStop==1)) {
 8006aa6:	4b0e      	ldr	r3, [pc, #56]	; (8006ae0 <checkDemoModCalisma+0xd04>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <checkDemoModCalisma+0xcda>

					kapi1pizzato=1;
 8006aae:	4b19      	ldr	r3, [pc, #100]	; (8006b14 <checkDemoModCalisma+0xd38>)
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	701a      	strb	r2, [r3, #0]
 8006ab4:	e002      	b.n	8006abc <checkDemoModCalisma+0xce0>
				} else {
					kapi1pizzato=0;
 8006ab6:	4b17      	ldr	r3, [pc, #92]	; (8006b14 <checkDemoModCalisma+0xd38>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8006abc:	4b14      	ldr	r3, [pc, #80]	; (8006b10 <checkDemoModCalisma+0xd34>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d107      	bne.n	8006ad4 <checkDemoModCalisma+0xcf8>
 8006ac4:	4b13      	ldr	r3, [pc, #76]	; (8006b14 <checkDemoModCalisma+0xd38>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d103      	bne.n	8006ad4 <checkDemoModCalisma+0xcf8>
 8006acc:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <checkDemoModCalisma+0xd24>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d023      	beq.n	8006b1c <checkDemoModCalisma+0xd40>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	2180      	movs	r1, #128	; 0x80
 8006ad8:	480f      	ldr	r0, [pc, #60]	; (8006b18 <checkDemoModCalisma+0xd3c>)
 8006ada:	f003 ff00 	bl	800a8de <HAL_GPIO_WritePin>
 8006ade:	e022      	b.n	8006b26 <checkDemoModCalisma+0xd4a>
 8006ae0:	2000122e 	.word	0x2000122e
 8006ae4:	20001100 	.word	0x20001100
 8006ae8:	200010f8 	.word	0x200010f8
 8006aec:	40011000 	.word	0x40011000
 8006af0:	20001118 	.word	0x20001118
 8006af4:	40010c00 	.word	0x40010c00
 8006af8:	200010e8 	.word	0x200010e8
 8006afc:	2000121b 	.word	0x2000121b
 8006b00:	2000122f 	.word	0x2000122f
 8006b04:	20001088 	.word	0x20001088
 8006b08:	2000108c 	.word	0x2000108c
 8006b0c:	20001180 	.word	0x20001180
 8006b10:	20001230 	.word	0x20001230
 8006b14:	20001231 	.word	0x20001231
 8006b18:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2180      	movs	r1, #128	; 0x80
 8006b20:	488e      	ldr	r0, [pc, #568]	; (8006d5c <checkDemoModCalisma+0xf80>)
 8006b22:	f003 fedc 	bl	800a8de <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006b26:	4b8e      	ldr	r3, [pc, #568]	; (8006d60 <checkDemoModCalisma+0xf84>)
 8006b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	d148      	bne.n	8006bc2 <checkDemoModCalisma+0xde6>
 8006b30:	4b8c      	ldr	r3, [pc, #560]	; (8006d64 <checkDemoModCalisma+0xf88>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	1e51      	subs	r1, r2, #1
 8006b38:	430b      	orrs	r3, r1
 8006b3a:	d005      	beq.n	8006b48 <checkDemoModCalisma+0xd6c>
 8006b3c:	4b89      	ldr	r3, [pc, #548]	; (8006d64 <checkDemoModCalisma+0xf88>)
 8006b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b42:	1ed1      	subs	r1, r2, #3
 8006b44:	430b      	orrs	r3, r1
 8006b46:	d13c      	bne.n	8006bc2 <checkDemoModCalisma+0xde6>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006b48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b4c:	4886      	ldr	r0, [pc, #536]	; (8006d68 <checkDemoModCalisma+0xf8c>)
 8006b4e:	f003 feaf 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d104      	bne.n	8006b62 <checkDemoModCalisma+0xd86>
 8006b58:	4b84      	ldr	r3, [pc, #528]	; (8006d6c <checkDemoModCalisma+0xf90>)
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	d00d      	beq.n	8006b7e <checkDemoModCalisma+0xda2>
 8006b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b66:	4882      	ldr	r0, [pc, #520]	; (8006d70 <checkDemoModCalisma+0xf94>)
 8006b68:	f003 fea2 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d127      	bne.n	8006bc2 <checkDemoModCalisma+0xde6>
 8006b72:	4b7e      	ldr	r3, [pc, #504]	; (8006d6c <checkDemoModCalisma+0xf90>)
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	1e51      	subs	r1, r2, #1
 8006b7a:	430b      	orrs	r3, r1
 8006b7c:	d121      	bne.n	8006bc2 <checkDemoModCalisma+0xde6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006b7e:	2102      	movs	r1, #2
 8006b80:	4879      	ldr	r0, [pc, #484]	; (8006d68 <checkDemoModCalisma+0xf8c>)
 8006b82:	f003 fe95 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d11a      	bne.n	8006bc2 <checkDemoModCalisma+0xde6>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006b8c:	2104      	movs	r1, #4
 8006b8e:	4876      	ldr	r0, [pc, #472]	; (8006d68 <checkDemoModCalisma+0xf8c>)
 8006b90:	f003 fe8e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d113      	bne.n	8006bc2 <checkDemoModCalisma+0xde6>
						&&(makineStop==1)
 8006b9a:	4b76      	ldr	r3, [pc, #472]	; (8006d74 <checkDemoModCalisma+0xf98>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00f      	beq.n	8006bc2 <checkDemoModCalisma+0xde6>
						&&(butonKontrol==0)) {
 8006ba2:	4b75      	ldr	r3, [pc, #468]	; (8006d78 <checkDemoModCalisma+0xf9c>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	f083 0301 	eor.w	r3, r3, #1
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d008      	beq.n	8006bc2 <checkDemoModCalisma+0xde6>

					kapi2prudhome=1;
 8006bb0:	4b72      	ldr	r3, [pc, #456]	; (8006d7c <checkDemoModCalisma+0xfa0>)
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8006bb6:	4b72      	ldr	r3, [pc, #456]	; (8006d80 <checkDemoModCalisma+0xfa4>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a72      	ldr	r2, [pc, #456]	; (8006d84 <checkDemoModCalisma+0xfa8>)
 8006bbc:	6013      	str	r3, [r2, #0]
					bekle();
 8006bbe:	f7fd fab9 	bl	8004134 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8006bc2:	4b6f      	ldr	r3, [pc, #444]	; (8006d80 <checkDemoModCalisma+0xfa4>)
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4b6f      	ldr	r3, [pc, #444]	; (8006d84 <checkDemoModCalisma+0xfa8>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	2200      	movs	r2, #0
 8006bce:	623b      	str	r3, [r7, #32]
 8006bd0:	627a      	str	r2, [r7, #36]	; 0x24
 8006bd2:	4b6d      	ldr	r3, [pc, #436]	; (8006d88 <checkDemoModCalisma+0xfac>)
 8006bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006bdc:	4604      	mov	r4, r0
 8006bde:	4294      	cmp	r4, r2
 8006be0:	4199      	sbcs	r1, r3
 8006be2:	d20d      	bcs.n	8006c00 <checkDemoModCalisma+0xe24>
 8006be4:	2102      	movs	r1, #2
 8006be6:	4860      	ldr	r0, [pc, #384]	; (8006d68 <checkDemoModCalisma+0xf8c>)
 8006be8:	f003 fe62 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d006      	beq.n	8006c00 <checkDemoModCalisma+0xe24>
 8006bf2:	4b60      	ldr	r3, [pc, #384]	; (8006d74 <checkDemoModCalisma+0xf98>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	f083 0301 	eor.w	r3, r3, #1
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <checkDemoModCalisma+0xe2a>
					kapi2prudhome=0;
 8006c00:	4b5e      	ldr	r3, [pc, #376]	; (8006d7c <checkDemoModCalisma+0xfa0>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006c06:	4b56      	ldr	r3, [pc, #344]	; (8006d60 <checkDemoModCalisma+0xf84>)
 8006c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0c:	1e51      	subs	r1, r2, #1
 8006c0e:	430b      	orrs	r3, r1
 8006c10:	d13c      	bne.n	8006c8c <checkDemoModCalisma+0xeb0>
 8006c12:	4b54      	ldr	r3, [pc, #336]	; (8006d64 <checkDemoModCalisma+0xf88>)
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	1e51      	subs	r1, r2, #1
 8006c1a:	430b      	orrs	r3, r1
 8006c1c:	d005      	beq.n	8006c2a <checkDemoModCalisma+0xe4e>
 8006c1e:	4b51      	ldr	r3, [pc, #324]	; (8006d64 <checkDemoModCalisma+0xf88>)
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	1ed1      	subs	r1, r2, #3
 8006c26:	430b      	orrs	r3, r1
 8006c28:	d130      	bne.n	8006c8c <checkDemoModCalisma+0xeb0>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006c2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c2e:	484e      	ldr	r0, [pc, #312]	; (8006d68 <checkDemoModCalisma+0xf8c>)
 8006c30:	f003 fe3e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d104      	bne.n	8006c44 <checkDemoModCalisma+0xe68>
 8006c3a:	4b4c      	ldr	r3, [pc, #304]	; (8006d6c <checkDemoModCalisma+0xf90>)
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	d00d      	beq.n	8006c60 <checkDemoModCalisma+0xe84>
 8006c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c48:	4849      	ldr	r0, [pc, #292]	; (8006d70 <checkDemoModCalisma+0xf94>)
 8006c4a:	f003 fe31 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d11b      	bne.n	8006c8c <checkDemoModCalisma+0xeb0>
 8006c54:	4b45      	ldr	r3, [pc, #276]	; (8006d6c <checkDemoModCalisma+0xf90>)
 8006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5a:	1e51      	subs	r1, r2, #1
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	d115      	bne.n	8006c8c <checkDemoModCalisma+0xeb0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006c60:	2102      	movs	r1, #2
 8006c62:	4841      	ldr	r0, [pc, #260]	; (8006d68 <checkDemoModCalisma+0xf8c>)
 8006c64:	f003 fe24 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d10e      	bne.n	8006c8c <checkDemoModCalisma+0xeb0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006c6e:	2104      	movs	r1, #4
 8006c70:	483d      	ldr	r0, [pc, #244]	; (8006d68 <checkDemoModCalisma+0xf8c>)
 8006c72:	f003 fe1d 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d107      	bne.n	8006c8c <checkDemoModCalisma+0xeb0>
						&&(makineStop==1)) {
 8006c7c:	4b3d      	ldr	r3, [pc, #244]	; (8006d74 <checkDemoModCalisma+0xf98>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <checkDemoModCalisma+0xeb0>

					kapi2butonkontrol=1;
 8006c84:	4b41      	ldr	r3, [pc, #260]	; (8006d8c <checkDemoModCalisma+0xfb0>)
 8006c86:	2201      	movs	r2, #1
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	e002      	b.n	8006c92 <checkDemoModCalisma+0xeb6>
				} else {
					kapi2butonkontrol=0;
 8006c8c:	4b3f      	ldr	r3, [pc, #252]	; (8006d8c <checkDemoModCalisma+0xfb0>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006c92:	4b33      	ldr	r3, [pc, #204]	; (8006d60 <checkDemoModCalisma+0xf84>)
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	1e91      	subs	r1, r2, #2
 8006c9a:	430b      	orrs	r3, r1
 8006c9c:	d121      	bne.n	8006ce2 <checkDemoModCalisma+0xf06>
 8006c9e:	4b31      	ldr	r3, [pc, #196]	; (8006d64 <checkDemoModCalisma+0xf88>)
 8006ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca4:	1e51      	subs	r1, r2, #1
 8006ca6:	430b      	orrs	r3, r1
 8006ca8:	d005      	beq.n	8006cb6 <checkDemoModCalisma+0xeda>
 8006caa:	4b2e      	ldr	r3, [pc, #184]	; (8006d64 <checkDemoModCalisma+0xf88>)
 8006cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb0:	1ed1      	subs	r1, r2, #3
 8006cb2:	430b      	orrs	r3, r1
 8006cb4:	d115      	bne.n	8006ce2 <checkDemoModCalisma+0xf06>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006cb6:	2102      	movs	r1, #2
 8006cb8:	482b      	ldr	r0, [pc, #172]	; (8006d68 <checkDemoModCalisma+0xf8c>)
 8006cba:	f003 fdf9 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d10e      	bne.n	8006ce2 <checkDemoModCalisma+0xf06>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006cc4:	2104      	movs	r1, #4
 8006cc6:	4828      	ldr	r0, [pc, #160]	; (8006d68 <checkDemoModCalisma+0xf8c>)
 8006cc8:	f003 fdf2 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d107      	bne.n	8006ce2 <checkDemoModCalisma+0xf06>
						&&(makineStop==1)) {
 8006cd2:	4b28      	ldr	r3, [pc, #160]	; (8006d74 <checkDemoModCalisma+0xf98>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <checkDemoModCalisma+0xf06>

					kapi2pizzato=1;
 8006cda:	4b2d      	ldr	r3, [pc, #180]	; (8006d90 <checkDemoModCalisma+0xfb4>)
 8006cdc:	2201      	movs	r2, #1
 8006cde:	701a      	strb	r2, [r3, #0]
 8006ce0:	e002      	b.n	8006ce8 <checkDemoModCalisma+0xf0c>
				} else {
					kapi2pizzato=0;
 8006ce2:	4b2b      	ldr	r3, [pc, #172]	; (8006d90 <checkDemoModCalisma+0xfb4>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8006ce8:	4b28      	ldr	r3, [pc, #160]	; (8006d8c <checkDemoModCalisma+0xfb0>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d107      	bne.n	8006d00 <checkDemoModCalisma+0xf24>
 8006cf0:	4b27      	ldr	r3, [pc, #156]	; (8006d90 <checkDemoModCalisma+0xfb4>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d103      	bne.n	8006d00 <checkDemoModCalisma+0xf24>
 8006cf8:	4b20      	ldr	r3, [pc, #128]	; (8006d7c <checkDemoModCalisma+0xfa0>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d005      	beq.n	8006d0c <checkDemoModCalisma+0xf30>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006d00:	2201      	movs	r2, #1
 8006d02:	2140      	movs	r1, #64	; 0x40
 8006d04:	4815      	ldr	r0, [pc, #84]	; (8006d5c <checkDemoModCalisma+0xf80>)
 8006d06:	f003 fdea 	bl	800a8de <HAL_GPIO_WritePin>
 8006d0a:	e004      	b.n	8006d16 <checkDemoModCalisma+0xf3a>
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2140      	movs	r1, #64	; 0x40
 8006d10:	4812      	ldr	r0, [pc, #72]	; (8006d5c <checkDemoModCalisma+0xf80>)
 8006d12:	f003 fde4 	bl	800a8de <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 8006d16:	4b1f      	ldr	r3, [pc, #124]	; (8006d94 <checkDemoModCalisma+0xfb8>)
 8006d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	d005      	beq.n	8006d2c <checkDemoModCalisma+0xf50>
 8006d20:	4b1c      	ldr	r3, [pc, #112]	; (8006d94 <checkDemoModCalisma+0xfb8>)
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	1e91      	subs	r1, r2, #2
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	d139      	bne.n	8006da0 <checkDemoModCalisma+0xfc4>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006d2c:	2104      	movs	r1, #4
 8006d2e:	480e      	ldr	r0, [pc, #56]	; (8006d68 <checkDemoModCalisma+0xf8c>)
 8006d30:	f003 fdbe 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d004      	beq.n	8006d44 <checkDemoModCalisma+0xf68>
 8006d3a:	4b17      	ldr	r3, [pc, #92]	; (8006d98 <checkDemoModCalisma+0xfbc>)
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	d12d      	bne.n	8006da0 <checkDemoModCalisma+0xfc4>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8006d44:	2102      	movs	r1, #2
 8006d46:	4808      	ldr	r0, [pc, #32]	; (8006d68 <checkDemoModCalisma+0xf8c>)
 8006d48:	f003 fdb2 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d126      	bne.n	8006da0 <checkDemoModCalisma+0xfc4>

					kapiTablaAcKonumKat1=1;
 8006d52:	4b12      	ldr	r3, [pc, #72]	; (8006d9c <checkDemoModCalisma+0xfc0>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	701a      	strb	r2, [r3, #0]
 8006d58:	e025      	b.n	8006da6 <checkDemoModCalisma+0xfca>
 8006d5a:	bf00      	nop
 8006d5c:	40010800 	.word	0x40010800
 8006d60:	20001108 	.word	0x20001108
 8006d64:	200010f8 	.word	0x200010f8
 8006d68:	40011000 	.word	0x40011000
 8006d6c:	20001118 	.word	0x20001118
 8006d70:	40010c00 	.word	0x40010c00
 8006d74:	2000122e 	.word	0x2000122e
 8006d78:	2000121b 	.word	0x2000121b
 8006d7c:	20001232 	.word	0x20001232
 8006d80:	20001088 	.word	0x20001088
 8006d84:	2000108c 	.word	0x2000108c
 8006d88:	20001188 	.word	0x20001188
 8006d8c:	20001233 	.word	0x20001233
 8006d90:	20001234 	.word	0x20001234
 8006d94:	20001120 	.word	0x20001120
 8006d98:	200010e8 	.word	0x200010e8
 8006d9c:	20001238 	.word	0x20001238
				} else {
					kapiTablaAcKonumKat1=0;
 8006da0:	4b98      	ldr	r3, [pc, #608]	; (8007004 <checkDemoModCalisma+0x1228>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8006da6:	4b98      	ldr	r3, [pc, #608]	; (8007008 <checkDemoModCalisma+0x122c>)
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	1e51      	subs	r1, r2, #1
 8006dae:	430b      	orrs	r3, r1
 8006db0:	d005      	beq.n	8006dbe <checkDemoModCalisma+0xfe2>
 8006db2:	4b95      	ldr	r3, [pc, #596]	; (8007008 <checkDemoModCalisma+0x122c>)
 8006db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db8:	1e91      	subs	r1, r2, #2
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	d111      	bne.n	8006de2 <checkDemoModCalisma+0x1006>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006dbe:	2102      	movs	r1, #2
 8006dc0:	4892      	ldr	r0, [pc, #584]	; (800700c <checkDemoModCalisma+0x1230>)
 8006dc2:	f003 fd75 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d10a      	bne.n	8006de2 <checkDemoModCalisma+0x1006>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8006dcc:	2104      	movs	r1, #4
 8006dce:	488f      	ldr	r0, [pc, #572]	; (800700c <checkDemoModCalisma+0x1230>)
 8006dd0:	f003 fd6e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d103      	bne.n	8006de2 <checkDemoModCalisma+0x1006>

					kapiTablaAcKonumKat2=1;
 8006dda:	4b8d      	ldr	r3, [pc, #564]	; (8007010 <checkDemoModCalisma+0x1234>)
 8006ddc:	2201      	movs	r2, #1
 8006dde:	701a      	strb	r2, [r3, #0]
 8006de0:	e002      	b.n	8006de8 <checkDemoModCalisma+0x100c>
				} else {
					kapiTablaAcKonumKat2=0;
 8006de2:	4b8b      	ldr	r3, [pc, #556]	; (8007010 <checkDemoModCalisma+0x1234>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8006de8:	4b86      	ldr	r3, [pc, #536]	; (8007004 <checkDemoModCalisma+0x1228>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d011      	beq.n	8006e14 <checkDemoModCalisma+0x1038>
						&& kapiAcTipi==1
 8006df0:	4b88      	ldr	r3, [pc, #544]	; (8007014 <checkDemoModCalisma+0x1238>)
 8006df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df6:	1e51      	subs	r1, r2, #1
 8006df8:	430b      	orrs	r3, r1
 8006dfa:	d10b      	bne.n	8006e14 <checkDemoModCalisma+0x1038>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8006dfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e00:	4885      	ldr	r0, [pc, #532]	; (8007018 <checkDemoModCalisma+0x123c>)
 8006e02:	f003 fd55 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d103      	bne.n	8006e14 <checkDemoModCalisma+0x1038>

					kapiactablaesp1=1;
 8006e0c:	4b83      	ldr	r3, [pc, #524]	; (800701c <checkDemoModCalisma+0x1240>)
 8006e0e:	2201      	movs	r2, #1
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	e002      	b.n	8006e1a <checkDemoModCalisma+0x103e>
				} else {
					kapiactablaesp1=0;
 8006e14:	4b81      	ldr	r3, [pc, #516]	; (800701c <checkDemoModCalisma+0x1240>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8006e1a:	4b7d      	ldr	r3, [pc, #500]	; (8007010 <checkDemoModCalisma+0x1234>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d011      	beq.n	8006e46 <checkDemoModCalisma+0x106a>
						&& kapiAcTipi==1
 8006e22:	4b7c      	ldr	r3, [pc, #496]	; (8007014 <checkDemoModCalisma+0x1238>)
 8006e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e28:	1e51      	subs	r1, r2, #1
 8006e2a:	430b      	orrs	r3, r1
 8006e2c:	d10b      	bne.n	8006e46 <checkDemoModCalisma+0x106a>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8006e2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e32:	4879      	ldr	r0, [pc, #484]	; (8007018 <checkDemoModCalisma+0x123c>)
 8006e34:	f003 fd3c 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <checkDemoModCalisma+0x106a>

					kapiactablaesp2=1;
 8006e3e:	4b78      	ldr	r3, [pc, #480]	; (8007020 <checkDemoModCalisma+0x1244>)
 8006e40:	2201      	movs	r2, #1
 8006e42:	701a      	strb	r2, [r3, #0]
 8006e44:	e002      	b.n	8006e4c <checkDemoModCalisma+0x1070>
				} else {
					kapiactablaesp2=0;
 8006e46:	4b76      	ldr	r3, [pc, #472]	; (8007020 <checkDemoModCalisma+0x1244>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006e4c:	4b75      	ldr	r3, [pc, #468]	; (8007024 <checkDemoModCalisma+0x1248>)
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	d159      	bne.n	8006f0a <checkDemoModCalisma+0x112e>
 8006e56:	4b74      	ldr	r3, [pc, #464]	; (8007028 <checkDemoModCalisma+0x124c>)
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	1e91      	subs	r1, r2, #2
 8006e5e:	430b      	orrs	r3, r1
 8006e60:	d005      	beq.n	8006e6e <checkDemoModCalisma+0x1092>
 8006e62:	4b71      	ldr	r3, [pc, #452]	; (8007028 <checkDemoModCalisma+0x124c>)
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	1ed1      	subs	r1, r2, #3
 8006e6a:	430b      	orrs	r3, r1
 8006e6c:	d14d      	bne.n	8006f0a <checkDemoModCalisma+0x112e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006e6e:	4b65      	ldr	r3, [pc, #404]	; (8007004 <checkDemoModCalisma+0x1228>)
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d103      	bne.n	8006e7e <checkDemoModCalisma+0x10a2>
 8006e76:	4b66      	ldr	r3, [pc, #408]	; (8007010 <checkDemoModCalisma+0x1234>)
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d045      	beq.n	8006f0a <checkDemoModCalisma+0x112e>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8006e7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e82:	4862      	ldr	r0, [pc, #392]	; (800700c <checkDemoModCalisma+0x1230>)
 8006e84:	f003 fd14 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d01c      	beq.n	8006ec8 <checkDemoModCalisma+0x10ec>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8006e8e:	2180      	movs	r1, #128	; 0x80
 8006e90:	485e      	ldr	r0, [pc, #376]	; (800700c <checkDemoModCalisma+0x1230>)
 8006e92:	f003 fd0d 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d106      	bne.n	8006eaa <checkDemoModCalisma+0x10ce>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8006e9c:	2104      	movs	r1, #4
 8006e9e:	485b      	ldr	r0, [pc, #364]	; (800700c <checkDemoModCalisma+0x1230>)
 8006ea0:	f003 fd06 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d00e      	beq.n	8006ec8 <checkDemoModCalisma+0x10ec>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8006eaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006eae:	4857      	ldr	r0, [pc, #348]	; (800700c <checkDemoModCalisma+0x1230>)
 8006eb0:	f003 fcfe 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10b      	bne.n	8006ed2 <checkDemoModCalisma+0x10f6>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8006eba:	2102      	movs	r1, #2
 8006ebc:	4853      	ldr	r0, [pc, #332]	; (800700c <checkDemoModCalisma+0x1230>)
 8006ebe:	f003 fcf7 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d104      	bne.n	8006ed2 <checkDemoModCalisma+0x10f6>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006ec8:	4b52      	ldr	r3, [pc, #328]	; (8007014 <checkDemoModCalisma+0x1238>)
 8006eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	d007      	beq.n	8006ee2 <checkDemoModCalisma+0x1106>
 8006ed2:	4b52      	ldr	r3, [pc, #328]	; (800701c <checkDemoModCalisma+0x1240>)
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d103      	bne.n	8006ee2 <checkDemoModCalisma+0x1106>
 8006eda:	4b51      	ldr	r3, [pc, #324]	; (8007020 <checkDemoModCalisma+0x1244>)
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d013      	beq.n	8006f0a <checkDemoModCalisma+0x112e>
						&&(makineStop==1)
 8006ee2:	4b52      	ldr	r3, [pc, #328]	; (800702c <checkDemoModCalisma+0x1250>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00f      	beq.n	8006f0a <checkDemoModCalisma+0x112e>
						&&(butonKontrol==0)) {
 8006eea:	4b51      	ldr	r3, [pc, #324]	; (8007030 <checkDemoModCalisma+0x1254>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	f083 0301 	eor.w	r3, r3, #1
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d008      	beq.n	8006f0a <checkDemoModCalisma+0x112e>

					kapiTablaprudhome=1;
 8006ef8:	4b4e      	ldr	r3, [pc, #312]	; (8007034 <checkDemoModCalisma+0x1258>)
 8006efa:	2201      	movs	r2, #1
 8006efc:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8006efe:	4b4e      	ldr	r3, [pc, #312]	; (8007038 <checkDemoModCalisma+0x125c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a4e      	ldr	r2, [pc, #312]	; (800703c <checkDemoModCalisma+0x1260>)
 8006f04:	6013      	str	r3, [r2, #0]
					bekle();
 8006f06:	f7fd f915 	bl	8004134 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8006f0a:	4b4b      	ldr	r3, [pc, #300]	; (8007038 <checkDemoModCalisma+0x125c>)
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b4b      	ldr	r3, [pc, #300]	; (800703c <checkDemoModCalisma+0x1260>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	2200      	movs	r2, #0
 8006f16:	61bb      	str	r3, [r7, #24]
 8006f18:	61fa      	str	r2, [r7, #28]
 8006f1a:	4b49      	ldr	r3, [pc, #292]	; (8007040 <checkDemoModCalisma+0x1264>)
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006f24:	4604      	mov	r4, r0
 8006f26:	4294      	cmp	r4, r2
 8006f28:	4199      	sbcs	r1, r3
 8006f2a:	d214      	bcs.n	8006f56 <checkDemoModCalisma+0x117a>
 8006f2c:	4b35      	ldr	r3, [pc, #212]	; (8007004 <checkDemoModCalisma+0x1228>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	f083 0301 	eor.w	r3, r3, #1
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d006      	beq.n	8006f48 <checkDemoModCalisma+0x116c>
 8006f3a:	4b35      	ldr	r3, [pc, #212]	; (8007010 <checkDemoModCalisma+0x1234>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	f083 0301 	eor.w	r3, r3, #1
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d106      	bne.n	8006f56 <checkDemoModCalisma+0x117a>
 8006f48:	4b38      	ldr	r3, [pc, #224]	; (800702c <checkDemoModCalisma+0x1250>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	f083 0301 	eor.w	r3, r3, #1
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <checkDemoModCalisma+0x1180>
					kapiTablaprudhome=0;
 8006f56:	4b37      	ldr	r3, [pc, #220]	; (8007034 <checkDemoModCalisma+0x1258>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006f5c:	4b31      	ldr	r3, [pc, #196]	; (8007024 <checkDemoModCalisma+0x1248>)
 8006f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f62:	1e51      	subs	r1, r2, #1
 8006f64:	430b      	orrs	r3, r1
 8006f66:	d16f      	bne.n	8007048 <checkDemoModCalisma+0x126c>
 8006f68:	4b2f      	ldr	r3, [pc, #188]	; (8007028 <checkDemoModCalisma+0x124c>)
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	1e91      	subs	r1, r2, #2
 8006f70:	430b      	orrs	r3, r1
 8006f72:	d005      	beq.n	8006f80 <checkDemoModCalisma+0x11a4>
 8006f74:	4b2c      	ldr	r3, [pc, #176]	; (8007028 <checkDemoModCalisma+0x124c>)
 8006f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7a:	1ed1      	subs	r1, r2, #3
 8006f7c:	430b      	orrs	r3, r1
 8006f7e:	d163      	bne.n	8007048 <checkDemoModCalisma+0x126c>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006f80:	4b20      	ldr	r3, [pc, #128]	; (8007004 <checkDemoModCalisma+0x1228>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d103      	bne.n	8006f90 <checkDemoModCalisma+0x11b4>
 8006f88:	4b21      	ldr	r3, [pc, #132]	; (8007010 <checkDemoModCalisma+0x1234>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d05b      	beq.n	8007048 <checkDemoModCalisma+0x126c>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8006f90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f94:	481d      	ldr	r0, [pc, #116]	; (800700c <checkDemoModCalisma+0x1230>)
 8006f96:	f003 fc8b 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d01c      	beq.n	8006fda <checkDemoModCalisma+0x11fe>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8006fa0:	2180      	movs	r1, #128	; 0x80
 8006fa2:	481a      	ldr	r0, [pc, #104]	; (800700c <checkDemoModCalisma+0x1230>)
 8006fa4:	f003 fc84 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d106      	bne.n	8006fbc <checkDemoModCalisma+0x11e0>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8006fae:	2104      	movs	r1, #4
 8006fb0:	4816      	ldr	r0, [pc, #88]	; (800700c <checkDemoModCalisma+0x1230>)
 8006fb2:	f003 fc7d 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d00e      	beq.n	8006fda <checkDemoModCalisma+0x11fe>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8006fbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006fc0:	4812      	ldr	r0, [pc, #72]	; (800700c <checkDemoModCalisma+0x1230>)
 8006fc2:	f003 fc75 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10b      	bne.n	8006fe4 <checkDemoModCalisma+0x1208>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8006fcc:	2102      	movs	r1, #2
 8006fce:	480f      	ldr	r0, [pc, #60]	; (800700c <checkDemoModCalisma+0x1230>)
 8006fd0:	f003 fc6e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d104      	bne.n	8006fe4 <checkDemoModCalisma+0x1208>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006fda:	4b0e      	ldr	r3, [pc, #56]	; (8007014 <checkDemoModCalisma+0x1238>)
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	d007      	beq.n	8006ff4 <checkDemoModCalisma+0x1218>
 8006fe4:	4b0d      	ldr	r3, [pc, #52]	; (800701c <checkDemoModCalisma+0x1240>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d103      	bne.n	8006ff4 <checkDemoModCalisma+0x1218>
 8006fec:	4b0c      	ldr	r3, [pc, #48]	; (8007020 <checkDemoModCalisma+0x1244>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d029      	beq.n	8007048 <checkDemoModCalisma+0x126c>
						&&(makineStop==1)) {
 8006ff4:	4b0d      	ldr	r3, [pc, #52]	; (800702c <checkDemoModCalisma+0x1250>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d025      	beq.n	8007048 <checkDemoModCalisma+0x126c>

					kapiTablabutonkontrol=1;
 8006ffc:	4b11      	ldr	r3, [pc, #68]	; (8007044 <checkDemoModCalisma+0x1268>)
 8006ffe:	2201      	movs	r2, #1
 8007000:	701a      	strb	r2, [r3, #0]
 8007002:	e024      	b.n	800704e <checkDemoModCalisma+0x1272>
 8007004:	20001238 	.word	0x20001238
 8007008:	20001120 	.word	0x20001120
 800700c:	40011000 	.word	0x40011000
 8007010:	20001239 	.word	0x20001239
 8007014:	20001118 	.word	0x20001118
 8007018:	40010c00 	.word	0x40010c00
 800701c:	20001248 	.word	0x20001248
 8007020:	20001249 	.word	0x20001249
 8007024:	20001110 	.word	0x20001110
 8007028:	200010f8 	.word	0x200010f8
 800702c:	2000122e 	.word	0x2000122e
 8007030:	2000121b 	.word	0x2000121b
 8007034:	20001235 	.word	0x20001235
 8007038:	20001088 	.word	0x20001088
 800703c:	2000108c 	.word	0x2000108c
 8007040:	20001190 	.word	0x20001190
 8007044:	20001236 	.word	0x20001236
				} else {
					kapiTablabutonkontrol=0;
 8007048:	4b83      	ldr	r3, [pc, #524]	; (8007258 <checkDemoModCalisma+0x147c>)
 800704a:	2200      	movs	r2, #0
 800704c:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800704e:	4b83      	ldr	r3, [pc, #524]	; (800725c <checkDemoModCalisma+0x1480>)
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	1e91      	subs	r1, r2, #2
 8007056:	430b      	orrs	r3, r1
 8007058:	d11b      	bne.n	8007092 <checkDemoModCalisma+0x12b6>
 800705a:	4b81      	ldr	r3, [pc, #516]	; (8007260 <checkDemoModCalisma+0x1484>)
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	1e91      	subs	r1, r2, #2
 8007062:	430b      	orrs	r3, r1
 8007064:	d005      	beq.n	8007072 <checkDemoModCalisma+0x1296>
 8007066:	4b7e      	ldr	r3, [pc, #504]	; (8007260 <checkDemoModCalisma+0x1484>)
 8007068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706c:	1ed1      	subs	r1, r2, #3
 800706e:	430b      	orrs	r3, r1
 8007070:	d10f      	bne.n	8007092 <checkDemoModCalisma+0x12b6>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007072:	4b7c      	ldr	r3, [pc, #496]	; (8007264 <checkDemoModCalisma+0x1488>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d103      	bne.n	8007082 <checkDemoModCalisma+0x12a6>
 800707a:	4b7b      	ldr	r3, [pc, #492]	; (8007268 <checkDemoModCalisma+0x148c>)
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d007      	beq.n	8007092 <checkDemoModCalisma+0x12b6>
						&&(makineStop==1)) {
 8007082:	4b7a      	ldr	r3, [pc, #488]	; (800726c <checkDemoModCalisma+0x1490>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <checkDemoModCalisma+0x12b6>

					kapiTablapizzato=1;
 800708a:	4b79      	ldr	r3, [pc, #484]	; (8007270 <checkDemoModCalisma+0x1494>)
 800708c:	2201      	movs	r2, #1
 800708e:	701a      	strb	r2, [r3, #0]
 8007090:	e002      	b.n	8007098 <checkDemoModCalisma+0x12bc>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8007092:	4b77      	ldr	r3, [pc, #476]	; (8007270 <checkDemoModCalisma+0x1494>)
 8007094:	2200      	movs	r2, #0
 8007096:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8007098:	4b6f      	ldr	r3, [pc, #444]	; (8007258 <checkDemoModCalisma+0x147c>)
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d107      	bne.n	80070b0 <checkDemoModCalisma+0x12d4>
 80070a0:	4b74      	ldr	r3, [pc, #464]	; (8007274 <checkDemoModCalisma+0x1498>)
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d103      	bne.n	80070b0 <checkDemoModCalisma+0x12d4>
 80070a8:	4b71      	ldr	r3, [pc, #452]	; (8007270 <checkDemoModCalisma+0x1494>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <checkDemoModCalisma+0x12e0>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80070b0:	2201      	movs	r2, #1
 80070b2:	2120      	movs	r1, #32
 80070b4:	4870      	ldr	r0, [pc, #448]	; (8007278 <checkDemoModCalisma+0x149c>)
 80070b6:	f003 fc12 	bl	800a8de <HAL_GPIO_WritePin>
 80070ba:	e004      	b.n	80070c6 <checkDemoModCalisma+0x12ea>
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80070bc:	2200      	movs	r2, #0
 80070be:	2120      	movs	r1, #32
 80070c0:	486d      	ldr	r0, [pc, #436]	; (8007278 <checkDemoModCalisma+0x149c>)
 80070c2:	f003 fc0c 	bl	800a8de <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80070c6:	4b6d      	ldr	r3, [pc, #436]	; (800727c <checkDemoModCalisma+0x14a0>)
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00f      	beq.n	80070ee <checkDemoModCalisma+0x1312>
 80070ce:	2102      	movs	r1, #2
 80070d0:	486b      	ldr	r0, [pc, #428]	; (8007280 <checkDemoModCalisma+0x14a4>)
 80070d2:	f003 fbed 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d108      	bne.n	80070ee <checkDemoModCalisma+0x1312>
 80070dc:	4b69      	ldr	r3, [pc, #420]	; (8007284 <checkDemoModCalisma+0x14a8>)
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	d103      	bne.n	80070ee <checkDemoModCalisma+0x1312>
 80070e6:	4b61      	ldr	r3, [pc, #388]	; (800726c <checkDemoModCalisma+0x1490>)
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d113      	bne.n	8007116 <checkDemoModCalisma+0x133a>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80070ee:	4b66      	ldr	r3, [pc, #408]	; (8007288 <checkDemoModCalisma+0x14ac>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d02b      	beq.n	800714e <checkDemoModCalisma+0x1372>
 80070f6:	2104      	movs	r1, #4
 80070f8:	4861      	ldr	r0, [pc, #388]	; (8007280 <checkDemoModCalisma+0x14a4>)
 80070fa:	f003 fbd9 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b01      	cmp	r3, #1
 8007102:	d124      	bne.n	800714e <checkDemoModCalisma+0x1372>
 8007104:	4b5f      	ldr	r3, [pc, #380]	; (8007284 <checkDemoModCalisma+0x14a8>)
 8007106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710a:	4313      	orrs	r3, r2
 800710c:	d01f      	beq.n	800714e <checkDemoModCalisma+0x1372>
 800710e:	4b57      	ldr	r3, [pc, #348]	; (800726c <checkDemoModCalisma+0x1490>)
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d01b      	beq.n	800714e <checkDemoModCalisma+0x1372>


					calismaSayisiDemo++;
 8007116:	4b5d      	ldr	r3, [pc, #372]	; (800728c <checkDemoModCalisma+0x14b0>)
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	1c51      	adds	r1, r2, #1
 800711e:	6139      	str	r1, [r7, #16]
 8007120:	f143 0300 	adc.w	r3, r3, #0
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	4b59      	ldr	r3, [pc, #356]	; (800728c <checkDemoModCalisma+0x14b0>)
 8007128:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800712c:	e9c3 1200 	strd	r1, r2, [r3]
					eepromData[28]=calismaSayisiDemo;
 8007130:	4b56      	ldr	r3, [pc, #344]	; (800728c <checkDemoModCalisma+0x14b0>)
 8007132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007136:	4956      	ldr	r1, [pc, #344]	; (8007290 <checkDemoModCalisma+0x14b4>)
 8007138:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0

					hafizaYaz=1;
 800713c:	4b55      	ldr	r3, [pc, #340]	; (8007294 <checkDemoModCalisma+0x14b8>)
 800713e:	2201      	movs	r2, #1
 8007140:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 8007142:	4b4e      	ldr	r3, [pc, #312]	; (800727c <checkDemoModCalisma+0x14a0>)
 8007144:	2200      	movs	r2, #0
 8007146:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 8007148:	4b4f      	ldr	r3, [pc, #316]	; (8007288 <checkDemoModCalisma+0x14ac>)
 800714a:	2200      	movs	r2, #0
 800714c:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 800714e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007152:	4851      	ldr	r0, [pc, #324]	; (8007298 <checkDemoModCalisma+0x14bc>)
 8007154:	f003 fbac 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d016      	beq.n	800718c <checkDemoModCalisma+0x13b0>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 800715e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007162:	484d      	ldr	r0, [pc, #308]	; (8007298 <checkDemoModCalisma+0x14bc>)
 8007164:	f003 fba4 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00e      	beq.n	800718c <checkDemoModCalisma+0x13b0>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 800716e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007172:	4849      	ldr	r0, [pc, #292]	; (8007298 <checkDemoModCalisma+0x14bc>)
 8007174:	f003 fb9c 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d006      	beq.n	800718c <checkDemoModCalisma+0x13b0>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800717e:	2140      	movs	r1, #64	; 0x40
 8007180:	483f      	ldr	r0, [pc, #252]	; (8007280 <checkDemoModCalisma+0x14a4>)
 8007182:	f003 fb95 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d103      	bne.n	8007194 <checkDemoModCalisma+0x13b8>

					startBasili=1;
 800718c:	4b43      	ldr	r3, [pc, #268]	; (800729c <checkDemoModCalisma+0x14c0>)
 800718e:	2201      	movs	r2, #1
 8007190:	701a      	strb	r2, [r3, #0]
 8007192:	e002      	b.n	800719a <checkDemoModCalisma+0x13be>
				} else {
					startBasili=0;
 8007194:	4b41      	ldr	r3, [pc, #260]	; (800729c <checkDemoModCalisma+0x14c0>)
 8007196:	2200      	movs	r2, #0
 8007198:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 800719a:	4b40      	ldr	r3, [pc, #256]	; (800729c <checkDemoModCalisma+0x14c0>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d014      	beq.n	80071cc <checkDemoModCalisma+0x13f0>
 80071a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80071a6:	483c      	ldr	r0, [pc, #240]	; (8007298 <checkDemoModCalisma+0x14bc>)
 80071a8:	f003 fb82 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d10c      	bne.n	80071cc <checkDemoModCalisma+0x13f0>

					hataVar=1;
 80071b2:	4b3b      	ldr	r3, [pc, #236]	; (80072a0 <checkDemoModCalisma+0x14c4>)
 80071b4:	2201      	movs	r2, #1
 80071b6:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 80071b8:	2001      	movs	r0, #1
 80071ba:	f7f9 fbf9 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(1);
 80071be:	2001      	movs	r0, #1
 80071c0:	f7f9 fb90 	bl	80008e4 <hata2EEPROM>
					acilstophatasi=1;
 80071c4:	4b37      	ldr	r3, [pc, #220]	; (80072a4 <checkDemoModCalisma+0x14c8>)
 80071c6:	2201      	movs	r2, #1
 80071c8:	701a      	strb	r2, [r3, #0]
 80071ca:	e018      	b.n	80071fe <checkDemoModCalisma+0x1422>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80071cc:	4b35      	ldr	r3, [pc, #212]	; (80072a4 <checkDemoModCalisma+0x14c8>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d014      	beq.n	80071fe <checkDemoModCalisma+0x1422>
 80071d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80071d8:	482f      	ldr	r0, [pc, #188]	; (8007298 <checkDemoModCalisma+0x14bc>)
 80071da:	f003 fb69 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10c      	bne.n	80071fe <checkDemoModCalisma+0x1422>
 80071e4:	4b2d      	ldr	r3, [pc, #180]	; (800729c <checkDemoModCalisma+0x14c0>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	f083 0301 	eor.w	r3, r3, #1
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d005      	beq.n	80071fe <checkDemoModCalisma+0x1422>
					acilstophatasi=0;
 80071f2:	4b2c      	ldr	r3, [pc, #176]	; (80072a4 <checkDemoModCalisma+0x14c8>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 80071f8:	2001      	movs	r0, #1
 80071fa:	f7fc ff31 	bl	8004060 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 80071fe:	4b2a      	ldr	r3, [pc, #168]	; (80072a8 <checkDemoModCalisma+0x14cc>)
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	f083 0301 	eor.w	r3, r3, #1
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d055      	beq.n	80072b8 <checkDemoModCalisma+0x14dc>
 800720c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007210:	4821      	ldr	r0, [pc, #132]	; (8007298 <checkDemoModCalisma+0x14bc>)
 8007212:	f003 fb4d 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <checkDemoModCalisma+0x1448>
 800721c:	4b23      	ldr	r3, [pc, #140]	; (80072ac <checkDemoModCalisma+0x14d0>)
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d049      	beq.n	80072b8 <checkDemoModCalisma+0x14dc>
 8007224:	4b22      	ldr	r3, [pc, #136]	; (80072b0 <checkDemoModCalisma+0x14d4>)
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	1e51      	subs	r1, r2, #1
 800722c:	430b      	orrs	r3, r1
 800722e:	d143      	bne.n	80072b8 <checkDemoModCalisma+0x14dc>
 8007230:	4b20      	ldr	r3, [pc, #128]	; (80072b4 <checkDemoModCalisma+0x14d8>)
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	f083 0301 	eor.w	r3, r3, #1
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d03c      	beq.n	80072b8 <checkDemoModCalisma+0x14dc>
					hataVar=1;
 800723e:	4b18      	ldr	r3, [pc, #96]	; (80072a0 <checkDemoModCalisma+0x14c4>)
 8007240:	2201      	movs	r2, #1
 8007242:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8007244:	2002      	movs	r0, #2
 8007246:	f7f9 fbb3 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(2);
 800724a:	2002      	movs	r0, #2
 800724c:	f7f9 fb4a 	bl	80008e4 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8007250:	4b18      	ldr	r3, [pc, #96]	; (80072b4 <checkDemoModCalisma+0x14d8>)
 8007252:	2201      	movs	r2, #1
 8007254:	701a      	strb	r2, [r3, #0]
 8007256:	e047      	b.n	80072e8 <checkDemoModCalisma+0x150c>
 8007258:	20001236 	.word	0x20001236
 800725c:	20001110 	.word	0x20001110
 8007260:	200010f8 	.word	0x200010f8
 8007264:	20001238 	.word	0x20001238
 8007268:	20001239 	.word	0x20001239
 800726c:	2000122e 	.word	0x2000122e
 8007270:	20001237 	.word	0x20001237
 8007274:	20001235 	.word	0x20001235
 8007278:	40010800 	.word	0x40010800
 800727c:	2000122b 	.word	0x2000122b
 8007280:	40011000 	.word	0x40011000
 8007284:	200010e8 	.word	0x200010e8
 8007288:	2000122c 	.word	0x2000122c
 800728c:	200010b0 	.word	0x200010b0
 8007290:	20000d08 	.word	0x20000d08
 8007294:	20001218 	.word	0x20001218
 8007298:	40010c00 	.word	0x40010c00
 800729c:	2000123a 	.word	0x2000123a
 80072a0:	20001241 	.word	0x20001241
 80072a4:	2000123c 	.word	0x2000123c
 80072a8:	20001243 	.word	0x20001243
 80072ac:	2000124d 	.word	0x2000124d
 80072b0:	200010d8 	.word	0x200010d8
 80072b4:	2000123d 	.word	0x2000123d
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80072b8:	4b6d      	ldr	r3, [pc, #436]	; (8007470 <checkDemoModCalisma+0x1694>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d013      	beq.n	80072e8 <checkDemoModCalisma+0x150c>
 80072c0:	4b6c      	ldr	r3, [pc, #432]	; (8007474 <checkDemoModCalisma+0x1698>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00f      	beq.n	80072e8 <checkDemoModCalisma+0x150c>
 80072c8:	4b6b      	ldr	r3, [pc, #428]	; (8007478 <checkDemoModCalisma+0x169c>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	f083 0301 	eor.w	r3, r3, #1
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d008      	beq.n	80072e8 <checkDemoModCalisma+0x150c>
					emniyetCercevesihatasi=0;
 80072d6:	4b66      	ldr	r3, [pc, #408]	; (8007470 <checkDemoModCalisma+0x1694>)
 80072d8:	2200      	movs	r2, #0
 80072da:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 80072dc:	4b67      	ldr	r3, [pc, #412]	; (800747c <checkDemoModCalisma+0x16a0>)
 80072de:	2200      	movs	r2, #0
 80072e0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 80072e2:	2002      	movs	r0, #2
 80072e4:	f7fc febc 	bl	8004060 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 80072e8:	4b65      	ldr	r3, [pc, #404]	; (8007480 <checkDemoModCalisma+0x16a4>)
 80072ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	d125      	bne.n	800733e <checkDemoModCalisma+0x1562>
 80072f2:	4b64      	ldr	r3, [pc, #400]	; (8007484 <checkDemoModCalisma+0x16a8>)
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	1e51      	subs	r1, r2, #1
 80072fa:	430b      	orrs	r3, r1
 80072fc:	d11f      	bne.n	800733e <checkDemoModCalisma+0x1562>
 80072fe:	4b62      	ldr	r3, [pc, #392]	; (8007488 <checkDemoModCalisma+0x16ac>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d01b      	beq.n	800733e <checkDemoModCalisma+0x1562>
 8007306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800730a:	4860      	ldr	r0, [pc, #384]	; (800748c <checkDemoModCalisma+0x16b0>)
 800730c:	f003 fad0 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007310:	4603      	mov	r3, r0
 8007312:	2b01      	cmp	r3, #1
 8007314:	d113      	bne.n	800733e <checkDemoModCalisma+0x1562>
 8007316:	4b5e      	ldr	r3, [pc, #376]	; (8007490 <checkDemoModCalisma+0x16b4>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	f083 0301 	eor.w	r3, r3, #1
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00c      	beq.n	800733e <checkDemoModCalisma+0x1562>
					hataVar=1;
 8007324:	4b5b      	ldr	r3, [pc, #364]	; (8007494 <checkDemoModCalisma+0x16b8>)
 8007326:	2201      	movs	r2, #1
 8007328:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 800732a:	2003      	movs	r0, #3
 800732c:	f7f9 fb40 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(3);
 8007330:	2003      	movs	r0, #3
 8007332:	f7f9 fad7 	bl	80008e4 <hata2EEPROM>
					basinchatasi=1;
 8007336:	4b56      	ldr	r3, [pc, #344]	; (8007490 <checkDemoModCalisma+0x16b4>)
 8007338:	2201      	movs	r2, #1
 800733a:	701a      	strb	r2, [r3, #0]
 800733c:	e017      	b.n	800736e <checkDemoModCalisma+0x1592>
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800733e:	4b54      	ldr	r3, [pc, #336]	; (8007490 <checkDemoModCalisma+0x16b4>)
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d013      	beq.n	800736e <checkDemoModCalisma+0x1592>
 8007346:	4b4e      	ldr	r3, [pc, #312]	; (8007480 <checkDemoModCalisma+0x16a4>)
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	1e51      	subs	r1, r2, #1
 800734e:	430b      	orrs	r3, r1
 8007350:	d10d      	bne.n	800736e <checkDemoModCalisma+0x1592>
 8007352:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007356:	4850      	ldr	r0, [pc, #320]	; (8007498 <checkDemoModCalisma+0x16bc>)
 8007358:	f003 faaa 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800735c:	4603      	mov	r3, r0
 800735e:	2b01      	cmp	r3, #1
 8007360:	d105      	bne.n	800736e <checkDemoModCalisma+0x1592>
					basinchatasi=0;
 8007362:	4b4b      	ldr	r3, [pc, #300]	; (8007490 <checkDemoModCalisma+0x16b4>)
 8007364:	2200      	movs	r2, #0
 8007366:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 8007368:	2003      	movs	r0, #3
 800736a:	f7fc fe79 	bl	8004060 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 800736e:	4b4b      	ldr	r3, [pc, #300]	; (800749c <checkDemoModCalisma+0x16c0>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d103      	bne.n	800737e <checkDemoModCalisma+0x15a2>
 8007376:	4b4a      	ldr	r3, [pc, #296]	; (80074a0 <checkDemoModCalisma+0x16c4>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d027      	beq.n	80073ce <checkDemoModCalisma+0x15f2>
 800737e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007382:	4848      	ldr	r0, [pc, #288]	; (80074a4 <checkDemoModCalisma+0x16c8>)
 8007384:	f003 fa94 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007388:	4603      	mov	r3, r0
 800738a:	2b01      	cmp	r3, #1
 800738c:	d11f      	bne.n	80073ce <checkDemoModCalisma+0x15f2>
 800738e:	4b46      	ldr	r3, [pc, #280]	; (80074a8 <checkDemoModCalisma+0x16cc>)
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	1e51      	subs	r1, r2, #1
 8007396:	430b      	orrs	r3, r1
 8007398:	d005      	beq.n	80073a6 <checkDemoModCalisma+0x15ca>
 800739a:	4b43      	ldr	r3, [pc, #268]	; (80074a8 <checkDemoModCalisma+0x16cc>)
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	1ed1      	subs	r1, r2, #3
 80073a2:	430b      	orrs	r3, r1
 80073a4:	d113      	bne.n	80073ce <checkDemoModCalisma+0x15f2>
 80073a6:	4b41      	ldr	r3, [pc, #260]	; (80074ac <checkDemoModCalisma+0x16d0>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f083 0301 	eor.w	r3, r3, #1
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00c      	beq.n	80073ce <checkDemoModCalisma+0x15f2>
					hataVar=1;
 80073b4:	4b37      	ldr	r3, [pc, #220]	; (8007494 <checkDemoModCalisma+0x16b8>)
 80073b6:	2201      	movs	r2, #1
 80073b8:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 80073ba:	2004      	movs	r0, #4
 80073bc:	f7f9 faf8 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(4);
 80073c0:	2004      	movs	r0, #4
 80073c2:	f7f9 fa8f 	bl	80008e4 <hata2EEPROM>
					katkapisivicihatasi=1;
 80073c6:	4b39      	ldr	r3, [pc, #228]	; (80074ac <checkDemoModCalisma+0x16d0>)
 80073c8:	2201      	movs	r2, #1
 80073ca:	701a      	strb	r2, [r3, #0]
 80073cc:	e01f      	b.n	800740e <checkDemoModCalisma+0x1632>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80073ce:	4b37      	ldr	r3, [pc, #220]	; (80074ac <checkDemoModCalisma+0x16d0>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d01b      	beq.n	800740e <checkDemoModCalisma+0x1632>
 80073d6:	4b36      	ldr	r3, [pc, #216]	; (80074b0 <checkDemoModCalisma+0x16d4>)
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d017      	beq.n	800740e <checkDemoModCalisma+0x1632>
 80073de:	4b2f      	ldr	r3, [pc, #188]	; (800749c <checkDemoModCalisma+0x16c0>)
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	f083 0301 	eor.w	r3, r3, #1
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d010      	beq.n	800740e <checkDemoModCalisma+0x1632>
 80073ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073f0:	482c      	ldr	r0, [pc, #176]	; (80074a4 <checkDemoModCalisma+0x16c8>)
 80073f2:	f003 fa5d 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d108      	bne.n	800740e <checkDemoModCalisma+0x1632>

					katkapisivicihatasi=0;
 80073fc:	4b2b      	ldr	r3, [pc, #172]	; (80074ac <checkDemoModCalisma+0x16d0>)
 80073fe:	2200      	movs	r2, #0
 8007400:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8007402:	4b27      	ldr	r3, [pc, #156]	; (80074a0 <checkDemoModCalisma+0x16c4>)
 8007404:	2200      	movs	r2, #0
 8007406:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8007408:	2004      	movs	r0, #4
 800740a:	f7fc fe29 	bl	8004060 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 800740e:	4b23      	ldr	r3, [pc, #140]	; (800749c <checkDemoModCalisma+0x16c0>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d103      	bne.n	800741e <checkDemoModCalisma+0x1642>
 8007416:	4b27      	ldr	r3, [pc, #156]	; (80074b4 <checkDemoModCalisma+0x16d8>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d04e      	beq.n	80074bc <checkDemoModCalisma+0x16e0>
 800741e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007422:	4820      	ldr	r0, [pc, #128]	; (80074a4 <checkDemoModCalisma+0x16c8>)
 8007424:	f003 fa44 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007428:	4603      	mov	r3, r0
 800742a:	2b01      	cmp	r3, #1
 800742c:	d146      	bne.n	80074bc <checkDemoModCalisma+0x16e0>
 800742e:	4b1e      	ldr	r3, [pc, #120]	; (80074a8 <checkDemoModCalisma+0x16cc>)
 8007430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007434:	1e51      	subs	r1, r2, #1
 8007436:	430b      	orrs	r3, r1
 8007438:	d005      	beq.n	8007446 <checkDemoModCalisma+0x166a>
 800743a:	4b1b      	ldr	r3, [pc, #108]	; (80074a8 <checkDemoModCalisma+0x16cc>)
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	1ed1      	subs	r1, r2, #3
 8007442:	430b      	orrs	r3, r1
 8007444:	d13a      	bne.n	80074bc <checkDemoModCalisma+0x16e0>
 8007446:	4b1c      	ldr	r3, [pc, #112]	; (80074b8 <checkDemoModCalisma+0x16dc>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	f083 0301 	eor.w	r3, r3, #1
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	d033      	beq.n	80074bc <checkDemoModCalisma+0x16e0>

					hataVar=1;
 8007454:	4b0f      	ldr	r3, [pc, #60]	; (8007494 <checkDemoModCalisma+0x16b8>)
 8007456:	2201      	movs	r2, #1
 8007458:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 800745a:	2005      	movs	r0, #5
 800745c:	f7f9 faa8 	bl	80009b0 <hataKoduLcdGoster>
					hata2EEPROM(5);
 8007460:	2005      	movs	r0, #5
 8007462:	f7f9 fa3f 	bl	80008e4 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8007466:	4b14      	ldr	r3, [pc, #80]	; (80074b8 <checkDemoModCalisma+0x16dc>)
 8007468:	2201      	movs	r2, #1
 800746a:	701a      	strb	r2, [r3, #0]
 800746c:	e04a      	b.n	8007504 <checkDemoModCalisma+0x1728>
 800746e:	bf00      	nop
 8007470:	2000123d 	.word	0x2000123d
 8007474:	20001243 	.word	0x20001243
 8007478:	20001224 	.word	0x20001224
 800747c:	2000124d 	.word	0x2000124d
 8007480:	200010d0 	.word	0x200010d0
 8007484:	200010f0 	.word	0x200010f0
 8007488:	20001240 	.word	0x20001240
 800748c:	40011000 	.word	0x40011000
 8007490:	2000124a 	.word	0x2000124a
 8007494:	20001241 	.word	0x20001241
 8007498:	40010c00 	.word	0x40010c00
 800749c:	2000123a 	.word	0x2000123a
 80074a0:	2000124e 	.word	0x2000124e
 80074a4:	40010800 	.word	0x40010800
 80074a8:	200010f8 	.word	0x200010f8
 80074ac:	2000124b 	.word	0x2000124b
 80074b0:	2000122e 	.word	0x2000122e
 80074b4:	2000124f 	.word	0x2000124f
 80074b8:	2000124c 	.word	0x2000124c
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80074bc:	4b98      	ldr	r3, [pc, #608]	; (8007720 <checkDemoModCalisma+0x1944>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d01f      	beq.n	8007504 <checkDemoModCalisma+0x1728>
 80074c4:	4b97      	ldr	r3, [pc, #604]	; (8007724 <checkDemoModCalisma+0x1948>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d01b      	beq.n	8007504 <checkDemoModCalisma+0x1728>
 80074cc:	4b96      	ldr	r3, [pc, #600]	; (8007728 <checkDemoModCalisma+0x194c>)
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	f083 0301 	eor.w	r3, r3, #1
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d014      	beq.n	8007504 <checkDemoModCalisma+0x1728>
 80074da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80074de:	4893      	ldr	r0, [pc, #588]	; (800772c <checkDemoModCalisma+0x1950>)
 80074e0:	f003 f9e6 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10c      	bne.n	8007504 <checkDemoModCalisma+0x1728>
 80074ea:	4b8e      	ldr	r3, [pc, #568]	; (8007724 <checkDemoModCalisma+0x1948>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d008      	beq.n	8007504 <checkDemoModCalisma+0x1728>
					tablakapisivicihatasi=0;
 80074f2:	4b8b      	ldr	r3, [pc, #556]	; (8007720 <checkDemoModCalisma+0x1944>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 80074f8:	4b8d      	ldr	r3, [pc, #564]	; (8007730 <checkDemoModCalisma+0x1954>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 80074fe:	2005      	movs	r0, #5
 8007500:	f7fc fdae 	bl	8004060 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8007504:	4b8b      	ldr	r3, [pc, #556]	; (8007734 <checkDemoModCalisma+0x1958>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d107      	bne.n	800751c <checkDemoModCalisma+0x1740>
 800750c:	4b8a      	ldr	r3, [pc, #552]	; (8007738 <checkDemoModCalisma+0x195c>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d103      	bne.n	800751c <checkDemoModCalisma+0x1740>
 8007514:	4b89      	ldr	r3, [pc, #548]	; (800773c <checkDemoModCalisma+0x1960>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d023      	beq.n	8007564 <checkDemoModCalisma+0x1788>
 800751c:	4b88      	ldr	r3, [pc, #544]	; (8007740 <checkDemoModCalisma+0x1964>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	f083 0301 	eor.w	r3, r3, #1
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d01c      	beq.n	8007564 <checkDemoModCalisma+0x1788>
				    if(millis-timer4>=makineCalismaTmr) {
 800752a:	4b86      	ldr	r3, [pc, #536]	; (8007744 <checkDemoModCalisma+0x1968>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b86      	ldr	r3, [pc, #536]	; (8007748 <checkDemoModCalisma+0x196c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2200      	movs	r2, #0
 8007536:	60bb      	str	r3, [r7, #8]
 8007538:	60fa      	str	r2, [r7, #12]
 800753a:	4b84      	ldr	r3, [pc, #528]	; (800774c <checkDemoModCalisma+0x1970>)
 800753c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007540:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007544:	4604      	mov	r4, r0
 8007546:	4294      	cmp	r4, r2
 8007548:	4199      	sbcs	r1, r3
 800754a:	d30b      	bcc.n	8007564 <checkDemoModCalisma+0x1788>
					  	hataVar=1;
 800754c:	4b80      	ldr	r3, [pc, #512]	; (8007750 <checkDemoModCalisma+0x1974>)
 800754e:	2201      	movs	r2, #1
 8007550:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 8007552:	2006      	movs	r0, #6
 8007554:	f7f9 fa2c 	bl	80009b0 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8007558:	2006      	movs	r0, #6
 800755a:	f7f9 f9c3 	bl	80008e4 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 800755e:	4b78      	ldr	r3, [pc, #480]	; (8007740 <checkDemoModCalisma+0x1964>)
 8007560:	2201      	movs	r2, #1
 8007562:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007564:	4b76      	ldr	r3, [pc, #472]	; (8007740 <checkDemoModCalisma+0x1964>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d013      	beq.n	8007594 <checkDemoModCalisma+0x17b8>
 800756c:	2108      	movs	r1, #8
 800756e:	486f      	ldr	r0, [pc, #444]	; (800772c <checkDemoModCalisma+0x1950>)
 8007570:	f003 f99e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00c      	beq.n	8007594 <checkDemoModCalisma+0x17b8>
 800757a:	4b6b      	ldr	r3, [pc, #428]	; (8007728 <checkDemoModCalisma+0x194c>)
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	f083 0301 	eor.w	r3, r3, #1
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <checkDemoModCalisma+0x17b8>
					maksimumcalismahatasi=0;
 8007588:	4b6d      	ldr	r3, [pc, #436]	; (8007740 <checkDemoModCalisma+0x1964>)
 800758a:	2200      	movs	r2, #0
 800758c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 800758e:	2006      	movs	r0, #6
 8007590:	f7fc fd66 	bl	8004060 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007594:	4b6f      	ldr	r3, [pc, #444]	; (8007754 <checkDemoModCalisma+0x1978>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10b      	bne.n	80075b4 <checkDemoModCalisma+0x17d8>
 800759c:	4b66      	ldr	r3, [pc, #408]	; (8007738 <checkDemoModCalisma+0x195c>)
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d107      	bne.n	80075b4 <checkDemoModCalisma+0x17d8>
 80075a4:	4b6c      	ldr	r3, [pc, #432]	; (8007758 <checkDemoModCalisma+0x197c>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d103      	bne.n	80075b4 <checkDemoModCalisma+0x17d8>
 80075ac:	4b63      	ldr	r3, [pc, #396]	; (800773c <checkDemoModCalisma+0x1960>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d009      	beq.n	80075c8 <checkDemoModCalisma+0x17ec>
					makineCalisiyor=0;
 80075b4:	4b69      	ldr	r3, [pc, #420]	; (800775c <checkDemoModCalisma+0x1980>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 80075ba:	4b69      	ldr	r3, [pc, #420]	; (8007760 <checkDemoModCalisma+0x1984>)
 80075bc:	2201      	movs	r2, #1
 80075be:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 80075c0:	4b5b      	ldr	r3, [pc, #364]	; (8007730 <checkDemoModCalisma+0x1954>)
 80075c2:	2201      	movs	r2, #1
 80075c4:	701a      	strb	r2, [r3, #0]
 80075c6:	e006      	b.n	80075d6 <checkDemoModCalisma+0x17fa>
				} else {
					makineCalisiyor=1;
 80075c8:	4b64      	ldr	r3, [pc, #400]	; (800775c <checkDemoModCalisma+0x1980>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 80075ce:	4b5d      	ldr	r3, [pc, #372]	; (8007744 <checkDemoModCalisma+0x1968>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a5d      	ldr	r2, [pc, #372]	; (8007748 <checkDemoModCalisma+0x196c>)
 80075d4:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80075d6:	4b5e      	ldr	r3, [pc, #376]	; (8007750 <checkDemoModCalisma+0x1974>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d02f      	beq.n	800763e <checkDemoModCalisma+0x1862>
 80075de:	4b61      	ldr	r3, [pc, #388]	; (8007764 <checkDemoModCalisma+0x1988>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	f083 0301 	eor.w	r3, r3, #1
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d028      	beq.n	800763e <checkDemoModCalisma+0x1862>
 80075ec:	4b5e      	ldr	r3, [pc, #376]	; (8007768 <checkDemoModCalisma+0x198c>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	f083 0301 	eor.w	r3, r3, #1
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d021      	beq.n	800763e <checkDemoModCalisma+0x1862>
 80075fa:	4b5c      	ldr	r3, [pc, #368]	; (800776c <checkDemoModCalisma+0x1990>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	f083 0301 	eor.w	r3, r3, #1
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d01a      	beq.n	800763e <checkDemoModCalisma+0x1862>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007608:	4b59      	ldr	r3, [pc, #356]	; (8007770 <checkDemoModCalisma+0x1994>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	f083 0301 	eor.w	r3, r3, #1
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d013      	beq.n	800763e <checkDemoModCalisma+0x1862>
 8007616:	4b42      	ldr	r3, [pc, #264]	; (8007720 <checkDemoModCalisma+0x1944>)
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	f083 0301 	eor.w	r3, r3, #1
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00c      	beq.n	800763e <checkDemoModCalisma+0x1862>
 8007624:	4b46      	ldr	r3, [pc, #280]	; (8007740 <checkDemoModCalisma+0x1964>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	f083 0301 	eor.w	r3, r3, #1
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d005      	beq.n	800763e <checkDemoModCalisma+0x1862>

					hataVar=0;
 8007632:	4b47      	ldr	r3, [pc, #284]	; (8007750 <checkDemoModCalisma+0x1974>)
 8007634:	2200      	movs	r2, #0
 8007636:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8007638:	2007      	movs	r0, #7
 800763a:	f7fc fd11 	bl	8004060 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 800763e:	4b44      	ldr	r3, [pc, #272]	; (8007750 <checkDemoModCalisma+0x1974>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d02a      	beq.n	800769c <checkDemoModCalisma+0x18c0>
 8007646:	4b47      	ldr	r3, [pc, #284]	; (8007764 <checkDemoModCalisma+0x1988>)
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	f083 0301 	eor.w	r3, r3, #1
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d023      	beq.n	800769c <checkDemoModCalisma+0x18c0>
 8007654:	4b44      	ldr	r3, [pc, #272]	; (8007768 <checkDemoModCalisma+0x198c>)
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d01f      	beq.n	800769c <checkDemoModCalisma+0x18c0>
 800765c:	4b43      	ldr	r3, [pc, #268]	; (800776c <checkDemoModCalisma+0x1990>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	f083 0301 	eor.w	r3, r3, #1
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d018      	beq.n	800769c <checkDemoModCalisma+0x18c0>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 800766a:	4b41      	ldr	r3, [pc, #260]	; (8007770 <checkDemoModCalisma+0x1994>)
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	f083 0301 	eor.w	r3, r3, #1
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b00      	cmp	r3, #0
 8007676:	d011      	beq.n	800769c <checkDemoModCalisma+0x18c0>
 8007678:	4b29      	ldr	r3, [pc, #164]	; (8007720 <checkDemoModCalisma+0x1944>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	f083 0301 	eor.w	r3, r3, #1
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <checkDemoModCalisma+0x18c0>
 8007686:	4b2e      	ldr	r3, [pc, #184]	; (8007740 <checkDemoModCalisma+0x1964>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	f083 0301 	eor.w	r3, r3, #1
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <checkDemoModCalisma+0x18c0>
				{
					EmnCerHataMakYukariCalis=1;
 8007694:	4b37      	ldr	r3, [pc, #220]	; (8007774 <checkDemoModCalisma+0x1998>)
 8007696:	2201      	movs	r2, #1
 8007698:	701a      	strb	r2, [r3, #0]
 800769a:	e009      	b.n	80076b0 <checkDemoModCalisma+0x18d4>
				}
				else if(emniyetCercevesihatasi==0)
 800769c:	4b32      	ldr	r3, [pc, #200]	; (8007768 <checkDemoModCalisma+0x198c>)
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	f083 0301 	eor.w	r3, r3, #1
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <checkDemoModCalisma+0x18d4>
				{
					EmnCerHataMakYukariCalis=0;
 80076aa:	4b32      	ldr	r3, [pc, #200]	; (8007774 <checkDemoModCalisma+0x1998>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	701a      	strb	r2, [r3, #0]

			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80076b0:	4b31      	ldr	r3, [pc, #196]	; (8007778 <checkDemoModCalisma+0x199c>)
 80076b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b6:	1e51      	subs	r1, r2, #1
 80076b8:	430b      	orrs	r3, r1
 80076ba:	f040 81f9 	bne.w	8007ab0 <checkDemoModCalisma+0x1cd4>
 80076be:	4b2f      	ldr	r3, [pc, #188]	; (800777c <checkDemoModCalisma+0x19a0>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 81f4 	beq.w	8007ab0 <checkDemoModCalisma+0x1cd4>
 80076c8:	4b2d      	ldr	r3, [pc, #180]	; (8007780 <checkDemoModCalisma+0x19a4>)
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	f040 81ee 	bne.w	8007ab0 <checkDemoModCalisma+0x1cd4>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80076d4:	2102      	movs	r1, #2
 80076d6:	482b      	ldr	r0, [pc, #172]	; (8007784 <checkDemoModCalisma+0x19a8>)
 80076d8:	f003 f8ea 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d15c      	bne.n	800779c <checkDemoModCalisma+0x19c0>
						&& (demoAsagiCalis==0)
 80076e2:	4b29      	ldr	r3, [pc, #164]	; (8007788 <checkDemoModCalisma+0x19ac>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	f083 0301 	eor.w	r3, r3, #1
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d055      	beq.n	800779c <checkDemoModCalisma+0x19c0>
						&& (demoDevYukari==0)
 80076f0:	4b26      	ldr	r3, [pc, #152]	; (800778c <checkDemoModCalisma+0x19b0>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	f083 0301 	eor.w	r3, r3, #1
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d04e      	beq.n	800779c <checkDemoModCalisma+0x19c0>
						&& (demoDevAsagi==0)) {
 80076fe:	4b24      	ldr	r3, [pc, #144]	; (8007790 <checkDemoModCalisma+0x19b4>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	f083 0301 	eor.w	r3, r3, #1
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d047      	beq.n	800779c <checkDemoModCalisma+0x19c0>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800770c:	2201      	movs	r2, #1
 800770e:	2104      	movs	r1, #4
 8007710:	4820      	ldr	r0, [pc, #128]	; (8007794 <checkDemoModCalisma+0x19b8>)
 8007712:	f003 f8e4 	bl	800a8de <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8007716:	4b20      	ldr	r3, [pc, #128]	; (8007798 <checkDemoModCalisma+0x19bc>)
 8007718:	2201      	movs	r2, #1
 800771a:	701a      	strb	r2, [r3, #0]
 800771c:	e04d      	b.n	80077ba <checkDemoModCalisma+0x19de>
 800771e:	bf00      	nop
 8007720:	2000124c 	.word	0x2000124c
 8007724:	2000122e 	.word	0x2000122e
 8007728:	2000123a 	.word	0x2000123a
 800772c:	40010800 	.word	0x40010800
 8007730:	2000124f 	.word	0x2000124f
 8007734:	20001240 	.word	0x20001240
 8007738:	20001224 	.word	0x20001224
 800773c:	20001223 	.word	0x20001223
 8007740:	2000123b 	.word	0x2000123b
 8007744:	20001088 	.word	0x20001088
 8007748:	2000109c 	.word	0x2000109c
 800774c:	20001178 	.word	0x20001178
 8007750:	20001241 	.word	0x20001241
 8007754:	20001221 	.word	0x20001221
 8007758:	20001222 	.word	0x20001222
 800775c:	20001242 	.word	0x20001242
 8007760:	2000124e 	.word	0x2000124e
 8007764:	2000123c 	.word	0x2000123c
 8007768:	2000123d 	.word	0x2000123d
 800776c:	2000124a 	.word	0x2000124a
 8007770:	2000124b 	.word	0x2000124b
 8007774:	20001250 	.word	0x20001250
 8007778:	200011a8 	.word	0x200011a8
 800777c:	2000123e 	.word	0x2000123e
 8007780:	200011a0 	.word	0x200011a0
 8007784:	40011000 	.word	0x40011000
 8007788:	20001245 	.word	0x20001245
 800778c:	20001246 	.word	0x20001246
 8007790:	20001247 	.word	0x20001247
 8007794:	40010c00 	.word	0x40010c00
 8007798:	20001244 	.word	0x20001244
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800779c:	2102      	movs	r1, #2
 800779e:	4871      	ldr	r0, [pc, #452]	; (8007964 <checkDemoModCalisma+0x1b88>)
 80077a0:	f003 f886 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d107      	bne.n	80077ba <checkDemoModCalisma+0x19de>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80077aa:	2200      	movs	r2, #0
 80077ac:	2104      	movs	r1, #4
 80077ae:	486e      	ldr	r0, [pc, #440]	; (8007968 <checkDemoModCalisma+0x1b8c>)
 80077b0:	f003 f895 	bl	800a8de <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 80077b4:	4b6d      	ldr	r3, [pc, #436]	; (800796c <checkDemoModCalisma+0x1b90>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80077ba:	4b6c      	ldr	r3, [pc, #432]	; (800796c <checkDemoModCalisma+0x1b90>)
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10b      	bne.n	80077da <checkDemoModCalisma+0x19fe>
 80077c2:	4b6b      	ldr	r3, [pc, #428]	; (8007970 <checkDemoModCalisma+0x1b94>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d107      	bne.n	80077da <checkDemoModCalisma+0x19fe>
 80077ca:	4b6a      	ldr	r3, [pc, #424]	; (8007974 <checkDemoModCalisma+0x1b98>)
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d103      	bne.n	80077da <checkDemoModCalisma+0x19fe>
 80077d2:	4b69      	ldr	r3, [pc, #420]	; (8007978 <checkDemoModCalisma+0x1b9c>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00c      	beq.n	80077f4 <checkDemoModCalisma+0x1a18>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80077da:	2201      	movs	r2, #1
 80077dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80077e0:	4861      	ldr	r0, [pc, #388]	; (8007968 <checkDemoModCalisma+0x1b8c>)
 80077e2:	f003 f87c 	bl	800a8de <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80077e6:	2201      	movs	r2, #1
 80077e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80077ec:	485e      	ldr	r0, [pc, #376]	; (8007968 <checkDemoModCalisma+0x1b8c>)
 80077ee:	f003 f876 	bl	800a8de <HAL_GPIO_WritePin>
 80077f2:	e00b      	b.n	800780c <checkDemoModCalisma+0x1a30>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80077f4:	2200      	movs	r2, #0
 80077f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80077fa:	485b      	ldr	r0, [pc, #364]	; (8007968 <checkDemoModCalisma+0x1b8c>)
 80077fc:	f003 f86f 	bl	800a8de <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007800:	2200      	movs	r2, #0
 8007802:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007806:	4858      	ldr	r0, [pc, #352]	; (8007968 <checkDemoModCalisma+0x1b8c>)
 8007808:	f003 f869 	bl	800a8de <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800780c:	2102      	movs	r1, #2
 800780e:	4855      	ldr	r0, [pc, #340]	; (8007964 <checkDemoModCalisma+0x1b88>)
 8007810:	f003 f84e 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007814:	4603      	mov	r3, r0
 8007816:	2b01      	cmp	r3, #1
 8007818:	d10d      	bne.n	8007836 <checkDemoModCalisma+0x1a5a>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800781a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800781e:	4851      	ldr	r0, [pc, #324]	; (8007964 <checkDemoModCalisma+0x1b88>)
 8007820:	f003 f846 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d105      	bne.n	8007836 <checkDemoModCalisma+0x1a5a>
						&& (demoYukariCalis==0)
 800782a:	4b50      	ldr	r3, [pc, #320]	; (800796c <checkDemoModCalisma+0x1b90>)
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	f083 0301 	eor.w	r3, r3, #1
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007836:	2102      	movs	r1, #2
 8007838:	484a      	ldr	r0, [pc, #296]	; (8007964 <checkDemoModCalisma+0x1b88>)
 800783a:	f003 f839 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800783e:	4603      	mov	r3, r0
 8007840:	2b01      	cmp	r3, #1
 8007842:	d125      	bne.n	8007890 <checkDemoModCalisma+0x1ab4>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007844:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007848:	4846      	ldr	r0, [pc, #280]	; (8007964 <checkDemoModCalisma+0x1b88>)
 800784a:	f003 f831 	bl	800a8b0 <HAL_GPIO_ReadPin>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d11d      	bne.n	8007890 <checkDemoModCalisma+0x1ab4>
						&&(demoYukariCalis==0)
 8007854:	4b45      	ldr	r3, [pc, #276]	; (800796c <checkDemoModCalisma+0x1b90>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	f083 0301 	eor.w	r3, r3, #1
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d016      	beq.n	8007890 <checkDemoModCalisma+0x1ab4>
						&&(demoAsagiCalis==0)
 8007862:	4b45      	ldr	r3, [pc, #276]	; (8007978 <checkDemoModCalisma+0x1b9c>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	f083 0301 	eor.w	r3, r3, #1
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00f      	beq.n	8007890 <checkDemoModCalisma+0x1ab4>
						&& (demoDevAsagi==0)) {
 8007870:	4b40      	ldr	r3, [pc, #256]	; (8007974 <checkDemoModCalisma+0x1b98>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	f083 0301 	eor.w	r3, r3, #1
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d008      	beq.n	8007890 <checkDemoModCalisma+0x1ab4>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800787e:	2201      	movs	r2, #1
 8007880:	2120      	movs	r1, #32
 8007882:	4838      	ldr	r0, [pc, #224]	; (8007964 <checkDemoModCalisma+0x1b88>)
 8007884:	f003 f82b 	bl	800a8de <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8007888:	4b39      	ldr	r3, [pc, #228]	; (8007970 <checkDemoModCalisma+0x1b94>)
 800788a:	2201      	movs	r2, #1
 800788c:	701a      	strb	r2, [r3, #0]
 800788e:	e007      	b.n	80078a0 <checkDemoModCalisma+0x1ac4>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007890:	2200      	movs	r2, #0
 8007892:	2120      	movs	r1, #32
 8007894:	4833      	ldr	r0, [pc, #204]	; (8007964 <checkDemoModCalisma+0x1b88>)
 8007896:	f003 f822 	bl	800a8de <HAL_GPIO_WritePin>
					demoDevYukari=0;
 800789a:	4b35      	ldr	r3, [pc, #212]	; (8007970 <checkDemoModCalisma+0x1b94>)
 800789c:	2200      	movs	r2, #0
 800789e:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80078a0:	2102      	movs	r1, #2
 80078a2:	4830      	ldr	r0, [pc, #192]	; (8007964 <checkDemoModCalisma+0x1b88>)
 80078a4:	f003 f804 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d125      	bne.n	80078fa <checkDemoModCalisma+0x1b1e>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80078ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80078b2:	482c      	ldr	r0, [pc, #176]	; (8007964 <checkDemoModCalisma+0x1b88>)
 80078b4:	f002 fffc 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d11d      	bne.n	80078fa <checkDemoModCalisma+0x1b1e>
						&&(demoYukariCalis==0)
 80078be:	4b2b      	ldr	r3, [pc, #172]	; (800796c <checkDemoModCalisma+0x1b90>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	f083 0301 	eor.w	r3, r3, #1
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d016      	beq.n	80078fa <checkDemoModCalisma+0x1b1e>
						&&(demoDevYukari==0)
 80078cc:	4b28      	ldr	r3, [pc, #160]	; (8007970 <checkDemoModCalisma+0x1b94>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	f083 0301 	eor.w	r3, r3, #1
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00f      	beq.n	80078fa <checkDemoModCalisma+0x1b1e>
						&& (demoAsagiCalis==0)) {
 80078da:	4b27      	ldr	r3, [pc, #156]	; (8007978 <checkDemoModCalisma+0x1b9c>)
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	f083 0301 	eor.w	r3, r3, #1
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d008      	beq.n	80078fa <checkDemoModCalisma+0x1b1e>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80078e8:	2201      	movs	r2, #1
 80078ea:	2110      	movs	r1, #16
 80078ec:	481d      	ldr	r0, [pc, #116]	; (8007964 <checkDemoModCalisma+0x1b88>)
 80078ee:	f002 fff6 	bl	800a8de <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 80078f2:	4b20      	ldr	r3, [pc, #128]	; (8007974 <checkDemoModCalisma+0x1b98>)
 80078f4:	2201      	movs	r2, #1
 80078f6:	701a      	strb	r2, [r3, #0]
 80078f8:	e007      	b.n	800790a <checkDemoModCalisma+0x1b2e>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80078fa:	2200      	movs	r2, #0
 80078fc:	2110      	movs	r1, #16
 80078fe:	4819      	ldr	r0, [pc, #100]	; (8007964 <checkDemoModCalisma+0x1b88>)
 8007900:	f002 ffed 	bl	800a8de <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8007904:	4b1b      	ldr	r3, [pc, #108]	; (8007974 <checkDemoModCalisma+0x1b98>)
 8007906:	2200      	movs	r2, #0
 8007908:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800790a:	2104      	movs	r1, #4
 800790c:	4815      	ldr	r0, [pc, #84]	; (8007964 <checkDemoModCalisma+0x1b88>)
 800790e:	f002 ffcf 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d133      	bne.n	8007980 <checkDemoModCalisma+0x1ba4>
						&& (demoYukariCalis==0)
 8007918:	4b14      	ldr	r3, [pc, #80]	; (800796c <checkDemoModCalisma+0x1b90>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	f083 0301 	eor.w	r3, r3, #1
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d02c      	beq.n	8007980 <checkDemoModCalisma+0x1ba4>
						&& (demoDevAsagi==0)
 8007926:	4b13      	ldr	r3, [pc, #76]	; (8007974 <checkDemoModCalisma+0x1b98>)
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	f083 0301 	eor.w	r3, r3, #1
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d025      	beq.n	8007980 <checkDemoModCalisma+0x1ba4>
						&& (demoDevYukari==0)) {
 8007934:	4b0e      	ldr	r3, [pc, #56]	; (8007970 <checkDemoModCalisma+0x1b94>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	f083 0301 	eor.w	r3, r3, #1
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d01e      	beq.n	8007980 <checkDemoModCalisma+0x1ba4>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007942:	2201      	movs	r2, #1
 8007944:	2102      	movs	r1, #2
 8007946:	4808      	ldr	r0, [pc, #32]	; (8007968 <checkDemoModCalisma+0x1b8c>)
 8007948:	f002 ffc9 	bl	800a8de <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800794c:	2201      	movs	r2, #1
 800794e:	2101      	movs	r1, #1
 8007950:	4805      	ldr	r0, [pc, #20]	; (8007968 <checkDemoModCalisma+0x1b8c>)
 8007952:	f002 ffc4 	bl	800a8de <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8007956:	4b08      	ldr	r3, [pc, #32]	; (8007978 <checkDemoModCalisma+0x1b9c>)
 8007958:	2201      	movs	r2, #1
 800795a:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 800795c:	4b07      	ldr	r3, [pc, #28]	; (800797c <checkDemoModCalisma+0x1ba0>)
 800795e:	2201      	movs	r2, #1
 8007960:	701a      	strb	r2, [r3, #0]
 8007962:	e021      	b.n	80079a8 <checkDemoModCalisma+0x1bcc>
 8007964:	40011000 	.word	0x40011000
 8007968:	40010c00 	.word	0x40010c00
 800796c:	20001244 	.word	0x20001244
 8007970:	20001246 	.word	0x20001246
 8007974:	20001247 	.word	0x20001247
 8007978:	20001245 	.word	0x20001245
 800797c:	2000122a 	.word	0x2000122a
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007980:	2104      	movs	r1, #4
 8007982:	486e      	ldr	r0, [pc, #440]	; (8007b3c <checkDemoModCalisma+0x1d60>)
 8007984:	f002 ff94 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007988:	4603      	mov	r3, r0
 800798a:	2b01      	cmp	r3, #1
 800798c:	d10c      	bne.n	80079a8 <checkDemoModCalisma+0x1bcc>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800798e:	2200      	movs	r2, #0
 8007990:	2102      	movs	r1, #2
 8007992:	486b      	ldr	r0, [pc, #428]	; (8007b40 <checkDemoModCalisma+0x1d64>)
 8007994:	f002 ffa3 	bl	800a8de <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007998:	2200      	movs	r2, #0
 800799a:	2101      	movs	r1, #1
 800799c:	4868      	ldr	r0, [pc, #416]	; (8007b40 <checkDemoModCalisma+0x1d64>)
 800799e:	f002 ff9e 	bl	800a8de <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 80079a2:	4b68      	ldr	r3, [pc, #416]	; (8007b44 <checkDemoModCalisma+0x1d68>)
 80079a4:	2200      	movs	r2, #0
 80079a6:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80079a8:	2104      	movs	r1, #4
 80079aa:	4864      	ldr	r0, [pc, #400]	; (8007b3c <checkDemoModCalisma+0x1d60>)
 80079ac:	f002 ff80 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d10d      	bne.n	80079d2 <checkDemoModCalisma+0x1bf6>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80079b6:	2201      	movs	r2, #1
 80079b8:	2180      	movs	r1, #128	; 0x80
 80079ba:	4863      	ldr	r0, [pc, #396]	; (8007b48 <checkDemoModCalisma+0x1d6c>)
 80079bc:	f002 ff8f 	bl	800a8de <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80079c0:	2201      	movs	r2, #1
 80079c2:	2120      	movs	r1, #32
 80079c4:	4860      	ldr	r0, [pc, #384]	; (8007b48 <checkDemoModCalisma+0x1d6c>)
 80079c6:	f002 ff8a 	bl	800a8de <HAL_GPIO_WritePin>
					timer3 = millis;
 80079ca:	4b60      	ldr	r3, [pc, #384]	; (8007b4c <checkDemoModCalisma+0x1d70>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a60      	ldr	r2, [pc, #384]	; (8007b50 <checkDemoModCalisma+0x1d74>)
 80079d0:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 80079d2:	4b5e      	ldr	r3, [pc, #376]	; (8007b4c <checkDemoModCalisma+0x1d70>)
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	4b5e      	ldr	r3, [pc, #376]	; (8007b50 <checkDemoModCalisma+0x1d74>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d909      	bls.n	80079f4 <checkDemoModCalisma+0x1c18>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80079e0:	2200      	movs	r2, #0
 80079e2:	2180      	movs	r1, #128	; 0x80
 80079e4:	4858      	ldr	r0, [pc, #352]	; (8007b48 <checkDemoModCalisma+0x1d6c>)
 80079e6:	f002 ff7a 	bl	800a8de <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80079ea:	2200      	movs	r2, #0
 80079ec:	2120      	movs	r1, #32
 80079ee:	4856      	ldr	r0, [pc, #344]	; (8007b48 <checkDemoModCalisma+0x1d6c>)
 80079f0:	f002 ff75 	bl	800a8de <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80079f4:	2102      	movs	r1, #2
 80079f6:	4851      	ldr	r0, [pc, #324]	; (8007b3c <checkDemoModCalisma+0x1d60>)
 80079f8:	f002 ff5a 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d108      	bne.n	8007a14 <checkDemoModCalisma+0x1c38>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007a02:	2201      	movs	r2, #1
 8007a04:	2140      	movs	r1, #64	; 0x40
 8007a06:	4850      	ldr	r0, [pc, #320]	; (8007b48 <checkDemoModCalisma+0x1d6c>)
 8007a08:	f002 ff69 	bl	800a8de <HAL_GPIO_WritePin>
					timer3 = millis;
 8007a0c:	4b4f      	ldr	r3, [pc, #316]	; (8007b4c <checkDemoModCalisma+0x1d70>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a4f      	ldr	r2, [pc, #316]	; (8007b50 <checkDemoModCalisma+0x1d74>)
 8007a12:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8007a14:	4b4d      	ldr	r3, [pc, #308]	; (8007b4c <checkDemoModCalisma+0x1d70>)
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	4b4d      	ldr	r3, [pc, #308]	; (8007b50 <checkDemoModCalisma+0x1d74>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d904      	bls.n	8007a2c <checkDemoModCalisma+0x1c50>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007a22:	2200      	movs	r2, #0
 8007a24:	2140      	movs	r1, #64	; 0x40
 8007a26:	4848      	ldr	r0, [pc, #288]	; (8007b48 <checkDemoModCalisma+0x1d6c>)
 8007a28:	f002 ff59 	bl	800a8de <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007a2c:	4b49      	ldr	r3, [pc, #292]	; (8007b54 <checkDemoModCalisma+0x1d78>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d01c      	beq.n	8007a6e <checkDemoModCalisma+0x1c92>
 8007a34:	4b48      	ldr	r3, [pc, #288]	; (8007b58 <checkDemoModCalisma+0x1d7c>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d018      	beq.n	8007a6e <checkDemoModCalisma+0x1c92>

					calismaSayisiDemo++;
 8007a3c:	4b47      	ldr	r3, [pc, #284]	; (8007b5c <checkDemoModCalisma+0x1d80>)
 8007a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a42:	1c51      	adds	r1, r2, #1
 8007a44:	6039      	str	r1, [r7, #0]
 8007a46:	f143 0300 	adc.w	r3, r3, #0
 8007a4a:	607b      	str	r3, [r7, #4]
 8007a4c:	4b43      	ldr	r3, [pc, #268]	; (8007b5c <checkDemoModCalisma+0x1d80>)
 8007a4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007a52:	e9c3 1200 	strd	r1, r2, [r3]
					eepromData[28]=calismaSayisiDemo;
 8007a56:	4b41      	ldr	r3, [pc, #260]	; (8007b5c <checkDemoModCalisma+0x1d80>)
 8007a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5c:	4940      	ldr	r1, [pc, #256]	; (8007b60 <checkDemoModCalisma+0x1d84>)
 8007a5e:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0

					hafizaYaz=1;
 8007a62:	4b40      	ldr	r3, [pc, #256]	; (8007b64 <checkDemoModCalisma+0x1d88>)
 8007a64:	2201      	movs	r2, #1
 8007a66:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 8007a68:	4b3b      	ldr	r3, [pc, #236]	; (8007b58 <checkDemoModCalisma+0x1d7c>)
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8007a6e:	4b3e      	ldr	r3, [pc, #248]	; (8007b68 <checkDemoModCalisma+0x1d8c>)
 8007a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	d15c      	bne.n	8007b32 <checkDemoModCalisma+0x1d56>
					lcd_print(2,1,"Cycle     ");
 8007a78:	4a3c      	ldr	r2, [pc, #240]	; (8007b6c <checkDemoModCalisma+0x1d90>)
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	2002      	movs	r0, #2
 8007a7e:	f001 fdc0 	bl	8009602 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8007a82:	4a3b      	ldr	r2, [pc, #236]	; (8007b70 <checkDemoModCalisma+0x1d94>)
 8007a84:	2101      	movs	r1, #1
 8007a86:	2001      	movs	r0, #1
 8007a88:	f001 fdbb 	bl	8009602 <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 8007a8c:	4b33      	ldr	r3, [pc, #204]	; (8007b5c <checkDemoModCalisma+0x1d80>)
 8007a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a92:	4613      	mov	r3, r2
 8007a94:	220a      	movs	r2, #10
 8007a96:	4937      	ldr	r1, [pc, #220]	; (8007b74 <checkDemoModCalisma+0x1d98>)
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f005 faab 	bl	800cff4 <itoa>
					lcd_print(2,11,snum);
 8007a9e:	4a35      	ldr	r2, [pc, #212]	; (8007b74 <checkDemoModCalisma+0x1d98>)
 8007aa0:	210b      	movs	r1, #11
 8007aa2:	2002      	movs	r0, #2
 8007aa4:	f001 fdad 	bl	8009602 <lcd_print>
					mesajYazildi=1;
 8007aa8:	4b33      	ldr	r3, [pc, #204]	; (8007b78 <checkDemoModCalisma+0x1d9c>)
 8007aaa:	2201      	movs	r2, #1
 8007aac:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8007aae:	e040      	b.n	8007b32 <checkDemoModCalisma+0x1d56>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8007ab0:	4b32      	ldr	r3, [pc, #200]	; (8007b7c <checkDemoModCalisma+0x1da0>)
 8007ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab6:	1e51      	subs	r1, r2, #1
 8007ab8:	430b      	orrs	r3, r1
 8007aba:	d005      	beq.n	8007ac8 <checkDemoModCalisma+0x1cec>
 8007abc:	4b2a      	ldr	r3, [pc, #168]	; (8007b68 <checkDemoModCalisma+0x1d8c>)
 8007abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac2:	1e51      	subs	r1, r2, #1
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	d134      	bne.n	8007b32 <checkDemoModCalisma+0x1d56>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ace:	481c      	ldr	r0, [pc, #112]	; (8007b40 <checkDemoModCalisma+0x1d64>)
 8007ad0:	f002 ff05 	bl	800a8de <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ada:	4819      	ldr	r0, [pc, #100]	; (8007b40 <checkDemoModCalisma+0x1d64>)
 8007adc:	f002 feff 	bl	800a8de <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	2104      	movs	r1, #4
 8007ae4:	4816      	ldr	r0, [pc, #88]	; (8007b40 <checkDemoModCalisma+0x1d64>)
 8007ae6:	f002 fefa 	bl	800a8de <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007aea:	2200      	movs	r2, #0
 8007aec:	2102      	movs	r1, #2
 8007aee:	4814      	ldr	r0, [pc, #80]	; (8007b40 <checkDemoModCalisma+0x1d64>)
 8007af0:	f002 fef5 	bl	800a8de <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007af4:	2200      	movs	r2, #0
 8007af6:	2101      	movs	r1, #1
 8007af8:	4811      	ldr	r0, [pc, #68]	; (8007b40 <checkDemoModCalisma+0x1d64>)
 8007afa:	f002 fef0 	bl	800a8de <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007afe:	2200      	movs	r2, #0
 8007b00:	2120      	movs	r1, #32
 8007b02:	480e      	ldr	r0, [pc, #56]	; (8007b3c <checkDemoModCalisma+0x1d60>)
 8007b04:	f002 feeb 	bl	800a8de <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007b08:	2200      	movs	r2, #0
 8007b0a:	2110      	movs	r1, #16
 8007b0c:	480b      	ldr	r0, [pc, #44]	; (8007b3c <checkDemoModCalisma+0x1d60>)
 8007b0e:	f002 fee6 	bl	800a8de <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007b12:	2200      	movs	r2, #0
 8007b14:	2180      	movs	r1, #128	; 0x80
 8007b16:	480c      	ldr	r0, [pc, #48]	; (8007b48 <checkDemoModCalisma+0x1d6c>)
 8007b18:	f002 fee1 	bl	800a8de <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	2140      	movs	r1, #64	; 0x40
 8007b20:	4809      	ldr	r0, [pc, #36]	; (8007b48 <checkDemoModCalisma+0x1d6c>)
 8007b22:	f002 fedc 	bl	800a8de <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007b26:	2200      	movs	r2, #0
 8007b28:	2120      	movs	r1, #32
 8007b2a:	4807      	ldr	r0, [pc, #28]	; (8007b48 <checkDemoModCalisma+0x1d6c>)
 8007b2c:	f002 fed7 	bl	800a8de <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8007b30:	e7ff      	b.n	8007b32 <checkDemoModCalisma+0x1d56>
 8007b32:	bf00      	nop
 8007b34:	3738      	adds	r7, #56	; 0x38
 8007b36:	46bd      	mov	sp, r7
 8007b38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b3c:	40011000 	.word	0x40011000
 8007b40:	40010c00 	.word	0x40010c00
 8007b44:	20001245 	.word	0x20001245
 8007b48:	40010800 	.word	0x40010800
 8007b4c:	20001088 	.word	0x20001088
 8007b50:	20001098 	.word	0x20001098
 8007b54:	20001244 	.word	0x20001244
 8007b58:	2000122a 	.word	0x2000122a
 8007b5c:	200010b0 	.word	0x200010b0
 8007b60:	20000d08 	.word	0x20000d08
 8007b64:	20001218 	.word	0x20001218
 8007b68:	200011a0 	.word	0x200011a0
 8007b6c:	0800d12c 	.word	0x0800d12c
 8007b70:	0800d138 	.word	0x0800d138
 8007b74:	20001078 	.word	0x20001078
 8007b78:	20001220 	.word	0x20001220
 8007b7c:	200011a8 	.word	0x200011a8

08007b80 <mainLoop>:

void mainLoop() {
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8007b86:	f7fc fabf 	bl	8004108 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	48a2      	ldr	r0, [pc, #648]	; (8007e18 <mainLoop+0x298>)
 8007b8e:	f002 fe8f 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d136      	bne.n	8007c06 <mainLoop+0x86>
 8007b98:	2108      	movs	r1, #8
 8007b9a:	48a0      	ldr	r0, [pc, #640]	; (8007e1c <mainLoop+0x29c>)
 8007b9c:	f002 fe88 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d12f      	bne.n	8007c06 <mainLoop+0x86>
 8007ba6:	2102      	movs	r1, #2
 8007ba8:	489b      	ldr	r0, [pc, #620]	; (8007e18 <mainLoop+0x298>)
 8007baa:	f002 fe81 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d128      	bne.n	8007c06 <mainLoop+0x86>
 8007bb4:	2104      	movs	r1, #4
 8007bb6:	4898      	ldr	r0, [pc, #608]	; (8007e18 <mainLoop+0x298>)
 8007bb8:	f002 fe7a 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d121      	bne.n	8007c06 <mainLoop+0x86>
 8007bc2:	2108      	movs	r1, #8
 8007bc4:	4894      	ldr	r0, [pc, #592]	; (8007e18 <mainLoop+0x298>)
 8007bc6:	f002 fe73 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d11a      	bne.n	8007c06 <mainLoop+0x86>
 8007bd0:	2180      	movs	r1, #128	; 0x80
 8007bd2:	4892      	ldr	r0, [pc, #584]	; (8007e1c <mainLoop+0x29c>)
 8007bd4:	f002 fe6c 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d113      	bne.n	8007c06 <mainLoop+0x86>
 8007bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007be2:	488e      	ldr	r0, [pc, #568]	; (8007e1c <mainLoop+0x29c>)
 8007be4:	f002 fe64 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d10b      	bne.n	8007c06 <mainLoop+0x86>
 8007bee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007bf2:	488a      	ldr	r0, [pc, #552]	; (8007e1c <mainLoop+0x29c>)
 8007bf4:	f002 fe5c 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d103      	bne.n	8007c06 <mainLoop+0x86>
			butonKontrol=0;
 8007bfe:	4b88      	ldr	r3, [pc, #544]	; (8007e20 <mainLoop+0x2a0>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	701a      	strb	r2, [r3, #0]
 8007c04:	e003      	b.n	8007c0e <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8007c06:	4b87      	ldr	r3, [pc, #540]	; (8007e24 <mainLoop+0x2a4>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a87      	ldr	r2, [pc, #540]	; (8007e28 <mainLoop+0x2a8>)
 8007c0c:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8007c0e:	f7fc fb2d 	bl	800426c <buttonCheck>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d103      	bne.n	8007c20 <mainLoop+0xa0>
			backLightTimer = millis;
 8007c18:	4b82      	ldr	r3, [pc, #520]	; (8007e24 <mainLoop+0x2a4>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a82      	ldr	r2, [pc, #520]	; (8007e28 <mainLoop+0x2a8>)
 8007c1e:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8007c20:	4b82      	ldr	r3, [pc, #520]	; (8007e2c <mainLoop+0x2ac>)
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d02c      	beq.n	8007c82 <mainLoop+0x102>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007c28:	bf00      	nop
 8007c2a:	4881      	ldr	r0, [pc, #516]	; (8007e30 <mainLoop+0x2b0>)
 8007c2c:	f003 fc69 	bl	800b502 <HAL_I2C_GetError>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b04      	cmp	r3, #4
 8007c34:	d0f9      	beq.n	8007c2a <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007c36:	bf00      	nop
 8007c38:	487d      	ldr	r0, [pc, #500]	; (8007e30 <mainLoop+0x2b0>)
 8007c3a:	f003 fc55 	bl	800b4e8 <HAL_I2C_GetState>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b20      	cmp	r3, #32
 8007c42:	d1f9      	bne.n	8007c38 <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007c44:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007c48:	9302      	str	r3, [sp, #8]
 8007c4a:	236e      	movs	r3, #110	; 0x6e
 8007c4c:	9301      	str	r3, [sp, #4]
 8007c4e:	4b79      	ldr	r3, [pc, #484]	; (8007e34 <mainLoop+0x2b4>)
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	236e      	movs	r3, #110	; 0x6e
 8007c54:	2200      	movs	r2, #0
 8007c56:	21a0      	movs	r1, #160	; 0xa0
 8007c58:	4875      	ldr	r0, [pc, #468]	; (8007e30 <mainLoop+0x2b0>)
 8007c5a:	f003 f8e3 	bl	800ae24 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8007c5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c62:	f002 f997 	bl	8009f94 <HAL_Delay>

		  hafizaYaz=0;
 8007c66:	4b71      	ldr	r3, [pc, #452]	; (8007e2c <mainLoop+0x2ac>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	701a      	strb	r2, [r3, #0]
		  lcd_print(2, 1, dataYazildiText);
 8007c6c:	4a72      	ldr	r2, [pc, #456]	; (8007e38 <mainLoop+0x2b8>)
 8007c6e:	2101      	movs	r1, #1
 8007c70:	2002      	movs	r0, #2
 8007c72:	f001 fcc6 	bl	8009602 <lcd_print>

		  HAL_Delay(1000);
 8007c76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c7a:	f002 f98b 	bl	8009f94 <HAL_Delay>
		  lcd_clear();
 8007c7e:	f001 fcd5 	bl	800962c <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8007c82:	4b6e      	ldr	r3, [pc, #440]	; (8007e3c <mainLoop+0x2bc>)
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	f083 0301 	eor.w	r3, r3, #1
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d043      	beq.n	8007d18 <mainLoop+0x198>
 8007c90:	4867      	ldr	r0, [pc, #412]	; (8007e30 <mainLoop+0x2b0>)
 8007c92:	f003 fc29 	bl	800b4e8 <HAL_I2C_GetState>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b20      	cmp	r3, #32
 8007c9a:	d13d      	bne.n	8007d18 <mainLoop+0x198>
		  if(ilkOkuma==0) {
 8007c9c:	4b68      	ldr	r3, [pc, #416]	; (8007e40 <mainLoop+0x2c0>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	f083 0301 	eor.w	r3, r3, #1
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d028      	beq.n	8007cfc <mainLoop+0x17c>
			  lcd_print(1, 1, eepromTextGN);
 8007caa:	4a66      	ldr	r2, [pc, #408]	; (8007e44 <mainLoop+0x2c4>)
 8007cac:	2101      	movs	r1, #1
 8007cae:	2001      	movs	r0, #1
 8007cb0:	f001 fca7 	bl	8009602 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8007cb4:	4a64      	ldr	r2, [pc, #400]	; (8007e48 <mainLoop+0x2c8>)
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	2002      	movs	r0, #2
 8007cba:	f001 fca2 	bl	8009602 <lcd_print>
			  HAL_Delay(1000);
 8007cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007cc2:	f002 f967 	bl	8009f94 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007cc6:	bf00      	nop
 8007cc8:	4859      	ldr	r0, [pc, #356]	; (8007e30 <mainLoop+0x2b0>)
 8007cca:	f003 fc1a 	bl	800b502 <HAL_I2C_GetError>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b04      	cmp	r3, #4
 8007cd2:	d0f9      	beq.n	8007cc8 <mainLoop+0x148>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007cd4:	e003      	b.n	8007cde <mainLoop+0x15e>
				  HAL_Delay(1000);
 8007cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007cda:	f002 f95b 	bl	8009f94 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007cde:	4854      	ldr	r0, [pc, #336]	; (8007e30 <mainLoop+0x2b0>)
 8007ce0:	f003 fc02 	bl	800b4e8 <HAL_I2C_GetState>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b20      	cmp	r3, #32
 8007ce8:	d1f5      	bne.n	8007cd6 <mainLoop+0x156>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8007cea:	4a58      	ldr	r2, [pc, #352]	; (8007e4c <mainLoop+0x2cc>)
 8007cec:	2101      	movs	r1, #1
 8007cee:	2002      	movs	r0, #2
 8007cf0:	f001 fc87 	bl	8009602 <lcd_print>

			  ilkOkuma=1;
 8007cf4:	4b52      	ldr	r3, [pc, #328]	; (8007e40 <mainLoop+0x2c0>)
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	701a      	strb	r2, [r3, #0]
 8007cfa:	e006      	b.n	8007d0a <mainLoop+0x18a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8007cfc:	4a54      	ldr	r2, [pc, #336]	; (8007e50 <mainLoop+0x2d0>)
 8007cfe:	2101      	movs	r1, #1
 8007d00:	2002      	movs	r0, #2
 8007d02:	f001 fc7e 	bl	8009602 <lcd_print>
			  lcd_clear();
 8007d06:	f001 fc91 	bl	800962c <lcd_clear>
		  }

		  lcd_clear();
 8007d0a:	f001 fc8f 	bl	800962c <lcd_clear>

		  eepromKontrol();
 8007d0e:	f7f8 fa89 	bl	8000224 <eepromKontrol>
		  hafizaOku=1;
 8007d12:	4b4a      	ldr	r3, [pc, #296]	; (8007e3c <mainLoop+0x2bc>)
 8007d14:	2201      	movs	r2, #1
 8007d16:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8007d18:	4b4e      	ldr	r3, [pc, #312]	; (8007e54 <mainLoop+0x2d4>)
 8007d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	d11d      	bne.n	8007d5e <mainLoop+0x1de>
 8007d22:	4b4d      	ldr	r3, [pc, #308]	; (8007e58 <mainLoop+0x2d8>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	f083 0301 	eor.w	r3, r3, #1
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d016      	beq.n	8007d5e <mainLoop+0x1de>
 8007d30:	4b4a      	ldr	r3, [pc, #296]	; (8007e5c <mainLoop+0x2dc>)
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	d111      	bne.n	8007d5e <mainLoop+0x1de>
			lcd_clear();
 8007d3a:	f001 fc77 	bl	800962c <lcd_clear>
			HAL_Delay(10);
 8007d3e:	200a      	movs	r0, #10
 8007d40:	f002 f928 	bl	8009f94 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8007d44:	4a46      	ldr	r2, [pc, #280]	; (8007e60 <mainLoop+0x2e0>)
 8007d46:	2101      	movs	r1, #1
 8007d48:	2001      	movs	r0, #1
 8007d4a:	f001 fc5a 	bl	8009602 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8007d4e:	4a45      	ldr	r2, [pc, #276]	; (8007e64 <mainLoop+0x2e4>)
 8007d50:	2101      	movs	r1, #1
 8007d52:	2002      	movs	r0, #2
 8007d54:	f001 fc55 	bl	8009602 <lcd_print>
			mesajYazildi=1;
 8007d58:	4b3f      	ldr	r3, [pc, #252]	; (8007e58 <mainLoop+0x2d8>)
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8007d5e:	4b3d      	ldr	r3, [pc, #244]	; (8007e54 <mainLoop+0x2d4>)
 8007d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	d116      	bne.n	8007d96 <mainLoop+0x216>
 8007d68:	2102      	movs	r1, #2
 8007d6a:	482b      	ldr	r0, [pc, #172]	; (8007e18 <mainLoop+0x298>)
 8007d6c:	f002 fda0 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d10f      	bne.n	8007d96 <mainLoop+0x216>
 8007d76:	2104      	movs	r1, #4
 8007d78:	4827      	ldr	r0, [pc, #156]	; (8007e18 <mainLoop+0x298>)
 8007d7a:	f002 fd99 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d108      	bne.n	8007d96 <mainLoop+0x216>
			menuGiris=1;
 8007d84:	4933      	ldr	r1, [pc, #204]	; (8007e54 <mainLoop+0x2d4>)
 8007d86:	f04f 0201 	mov.w	r2, #1
 8007d8a:	f04f 0300 	mov.w	r3, #0
 8007d8e:	e9c1 2300 	strd	r2, r3, [r1]
			lcd_clear();
 8007d92:	f001 fc4b 	bl	800962c <lcd_clear>
		}

		if(menuGiris==1) {
 8007d96:	4b2f      	ldr	r3, [pc, #188]	; (8007e54 <mainLoop+0x2d4>)
 8007d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9c:	1e51      	subs	r1, r2, #1
 8007d9e:	430b      	orrs	r3, r1
 8007da0:	d101      	bne.n	8007da6 <mainLoop+0x226>
			menu();
 8007da2:	f7f8 ff7b 	bl	8000c9c <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8007da6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007daa:	481c      	ldr	r0, [pc, #112]	; (8007e1c <mainLoop+0x29c>)
 8007dac:	f002 fdaf 	bl	800a90e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8007db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007db4:	482c      	ldr	r0, [pc, #176]	; (8007e68 <mainLoop+0x2e8>)
 8007db6:	f002 fd7b 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10a      	bne.n	8007dd6 <mainLoop+0x256>
 8007dc0:	4b2a      	ldr	r3, [pc, #168]	; (8007e6c <mainLoop+0x2ec>)
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	f083 0301 	eor.w	r3, r3, #1
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <mainLoop+0x256>
			stopVar=1;
 8007dce:	4b28      	ldr	r3, [pc, #160]	; (8007e70 <mainLoop+0x2f0>)
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	701a      	strb	r2, [r3, #0]
 8007dd4:	e002      	b.n	8007ddc <mainLoop+0x25c>
		} else {
			stopVar=0;
 8007dd6:	4b26      	ldr	r3, [pc, #152]	; (8007e70 <mainLoop+0x2f0>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 8007ddc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007de0:	4821      	ldr	r0, [pc, #132]	; (8007e68 <mainLoop+0x2e8>)
 8007de2:	f002 fd65 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d107      	bne.n	8007dfc <mainLoop+0x27c>
 8007dec:	4b21      	ldr	r3, [pc, #132]	; (8007e74 <mainLoop+0x2f4>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d003      	beq.n	8007dfc <mainLoop+0x27c>
			EmnStopVar=1;
 8007df4:	4b20      	ldr	r3, [pc, #128]	; (8007e78 <mainLoop+0x2f8>)
 8007df6:	2201      	movs	r2, #1
 8007df8:	701a      	strb	r2, [r3, #0]
 8007dfa:	e002      	b.n	8007e02 <mainLoop+0x282>
		} else {
			EmnStopVar=0;
 8007dfc:	4b1e      	ldr	r3, [pc, #120]	; (8007e78 <mainLoop+0x2f8>)
 8007dfe:	2200      	movs	r2, #0
 8007e00:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8007e02:	f7fc fa67 	bl	80042d4 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8007e06:	f7fc faa7 	bl	8004358 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8007e0a:	f7fc faf1 	bl	80043f0 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8007e0e:	f7fc fb49 	bl	80044a4 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8007e12:	f7fd ffe3 	bl	8005ddc <checkDemoModCalisma>
		checkLCDBacklight();
 8007e16:	e6b6      	b.n	8007b86 <mainLoop+0x6>
 8007e18:	40010800 	.word	0x40010800
 8007e1c:	40011000 	.word	0x40011000
 8007e20:	2000121b 	.word	0x2000121b
 8007e24:	20001088 	.word	0x20001088
 8007e28:	200010a4 	.word	0x200010a4
 8007e2c:	20001218 	.word	0x20001218
 8007e30:	20001858 	.word	0x20001858
 8007e34:	20000d08 	.word	0x20000d08
 8007e38:	200017cc 	.word	0x200017cc
 8007e3c:	20001219 	.word	0x20001219
 8007e40:	2000121a 	.word	0x2000121a
 8007e44:	2000010c 	.word	0x2000010c
 8007e48:	200017e0 	.word	0x200017e0
 8007e4c:	200017f4 	.word	0x200017f4
 8007e50:	20001808 	.word	0x20001808
 8007e54:	200011a0 	.word	0x200011a0
 8007e58:	20001220 	.word	0x20001220
 8007e5c:	200011a8 	.word	0x200011a8
 8007e60:	20000058 	.word	0x20000058
 8007e64:	2000006c 	.word	0x2000006c
 8007e68:	40010c00 	.word	0x40010c00
 8007e6c:	20001241 	.word	0x20001241
 8007e70:	2000123e 	.word	0x2000123e
 8007e74:	20001250 	.word	0x20001250
 8007e78:	20001251 	.word	0x20001251

08007e7c <loadMenuTexts>:
char degerKaydedildiText[17];

//Error Code:
char errorCodeText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8007e7c:	b5b0      	push	{r4, r5, r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8007e86:	79fb      	ldrb	r3, [r7, #7]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f040 846b 	bne.w	8008764 <loadMenuTexts+0x8e8>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8007e8e:	4ac7      	ldr	r2, [pc, #796]	; (80081ac <loadMenuTexts+0x330>)
 8007e90:	4bc7      	ldr	r3, [pc, #796]	; (80081b0 <loadMenuTexts+0x334>)
 8007e92:	4614      	mov	r4, r2
 8007e94:	461d      	mov	r5, r3
 8007e96:	6828      	ldr	r0, [r5, #0]
 8007e98:	6869      	ldr	r1, [r5, #4]
 8007e9a:	68aa      	ldr	r2, [r5, #8]
 8007e9c:	68eb      	ldr	r3, [r5, #12]
 8007e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ea0:	7c2b      	ldrb	r3, [r5, #16]
 8007ea2:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8007ea4:	4ac3      	ldr	r2, [pc, #780]	; (80081b4 <loadMenuTexts+0x338>)
 8007ea6:	4bc4      	ldr	r3, [pc, #784]	; (80081b8 <loadMenuTexts+0x33c>)
 8007ea8:	4614      	mov	r4, r2
 8007eaa:	461d      	mov	r5, r3
 8007eac:	6828      	ldr	r0, [r5, #0]
 8007eae:	6869      	ldr	r1, [r5, #4]
 8007eb0:	68aa      	ldr	r2, [r5, #8]
 8007eb2:	68eb      	ldr	r3, [r5, #12]
 8007eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007eb6:	7c2b      	ldrb	r3, [r5, #16]
 8007eb8:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8007eba:	4ac0      	ldr	r2, [pc, #768]	; (80081bc <loadMenuTexts+0x340>)
 8007ebc:	4bc0      	ldr	r3, [pc, #768]	; (80081c0 <loadMenuTexts+0x344>)
 8007ebe:	4614      	mov	r4, r2
 8007ec0:	461d      	mov	r5, r3
 8007ec2:	6828      	ldr	r0, [r5, #0]
 8007ec4:	6869      	ldr	r1, [r5, #4]
 8007ec6:	68aa      	ldr	r2, [r5, #8]
 8007ec8:	68eb      	ldr	r3, [r5, #12]
 8007eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ecc:	7c2b      	ldrb	r3, [r5, #16]
 8007ece:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8007ed0:	4abc      	ldr	r2, [pc, #752]	; (80081c4 <loadMenuTexts+0x348>)
 8007ed2:	4bbd      	ldr	r3, [pc, #756]	; (80081c8 <loadMenuTexts+0x34c>)
 8007ed4:	4614      	mov	r4, r2
 8007ed6:	461d      	mov	r5, r3
 8007ed8:	6828      	ldr	r0, [r5, #0]
 8007eda:	6869      	ldr	r1, [r5, #4]
 8007edc:	68aa      	ldr	r2, [r5, #8]
 8007ede:	68eb      	ldr	r3, [r5, #12]
 8007ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ee2:	7c2b      	ldrb	r3, [r5, #16]
 8007ee4:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8007ee6:	4ab9      	ldr	r2, [pc, #740]	; (80081cc <loadMenuTexts+0x350>)
 8007ee8:	4bb9      	ldr	r3, [pc, #740]	; (80081d0 <loadMenuTexts+0x354>)
 8007eea:	4614      	mov	r4, r2
 8007eec:	461d      	mov	r5, r3
 8007eee:	6828      	ldr	r0, [r5, #0]
 8007ef0:	6869      	ldr	r1, [r5, #4]
 8007ef2:	68aa      	ldr	r2, [r5, #8]
 8007ef4:	68eb      	ldr	r3, [r5, #12]
 8007ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ef8:	7c2b      	ldrb	r3, [r5, #16]
 8007efa:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8007efc:	4ab5      	ldr	r2, [pc, #724]	; (80081d4 <loadMenuTexts+0x358>)
 8007efe:	4bb6      	ldr	r3, [pc, #728]	; (80081d8 <loadMenuTexts+0x35c>)
 8007f00:	4614      	mov	r4, r2
 8007f02:	461d      	mov	r5, r3
 8007f04:	6828      	ldr	r0, [r5, #0]
 8007f06:	6869      	ldr	r1, [r5, #4]
 8007f08:	68aa      	ldr	r2, [r5, #8]
 8007f0a:	68eb      	ldr	r3, [r5, #12]
 8007f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f0e:	7c2b      	ldrb	r3, [r5, #16]
 8007f10:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 8007f12:	4ab2      	ldr	r2, [pc, #712]	; (80081dc <loadMenuTexts+0x360>)
 8007f14:	4bb2      	ldr	r3, [pc, #712]	; (80081e0 <loadMenuTexts+0x364>)
 8007f16:	4614      	mov	r4, r2
 8007f18:	461d      	mov	r5, r3
 8007f1a:	6828      	ldr	r0, [r5, #0]
 8007f1c:	6869      	ldr	r1, [r5, #4]
 8007f1e:	68aa      	ldr	r2, [r5, #8]
 8007f20:	68eb      	ldr	r3, [r5, #12]
 8007f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f24:	7c2b      	ldrb	r3, [r5, #16]
 8007f26:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8007f28:	4aae      	ldr	r2, [pc, #696]	; (80081e4 <loadMenuTexts+0x368>)
 8007f2a:	4baf      	ldr	r3, [pc, #700]	; (80081e8 <loadMenuTexts+0x36c>)
 8007f2c:	4614      	mov	r4, r2
 8007f2e:	461d      	mov	r5, r3
 8007f30:	6828      	ldr	r0, [r5, #0]
 8007f32:	6869      	ldr	r1, [r5, #4]
 8007f34:	68aa      	ldr	r2, [r5, #8]
 8007f36:	68eb      	ldr	r3, [r5, #12]
 8007f38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f3a:	7c2b      	ldrb	r3, [r5, #16]
 8007f3c:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8007f3e:	4aab      	ldr	r2, [pc, #684]	; (80081ec <loadMenuTexts+0x370>)
 8007f40:	4bab      	ldr	r3, [pc, #684]	; (80081f0 <loadMenuTexts+0x374>)
 8007f42:	4614      	mov	r4, r2
 8007f44:	461d      	mov	r5, r3
 8007f46:	6828      	ldr	r0, [r5, #0]
 8007f48:	6869      	ldr	r1, [r5, #4]
 8007f4a:	68aa      	ldr	r2, [r5, #8]
 8007f4c:	68eb      	ldr	r3, [r5, #12]
 8007f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f50:	7c2b      	ldrb	r3, [r5, #16]
 8007f52:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8007f54:	4aa7      	ldr	r2, [pc, #668]	; (80081f4 <loadMenuTexts+0x378>)
 8007f56:	4ba8      	ldr	r3, [pc, #672]	; (80081f8 <loadMenuTexts+0x37c>)
 8007f58:	4614      	mov	r4, r2
 8007f5a:	461d      	mov	r5, r3
 8007f5c:	6828      	ldr	r0, [r5, #0]
 8007f5e:	6869      	ldr	r1, [r5, #4]
 8007f60:	68aa      	ldr	r2, [r5, #8]
 8007f62:	68eb      	ldr	r3, [r5, #12]
 8007f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f66:	7c2b      	ldrb	r3, [r5, #16]
 8007f68:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8007f6a:	4aa4      	ldr	r2, [pc, #656]	; (80081fc <loadMenuTexts+0x380>)
 8007f6c:	4ba4      	ldr	r3, [pc, #656]	; (8008200 <loadMenuTexts+0x384>)
 8007f6e:	4614      	mov	r4, r2
 8007f70:	461d      	mov	r5, r3
 8007f72:	6828      	ldr	r0, [r5, #0]
 8007f74:	6869      	ldr	r1, [r5, #4]
 8007f76:	68aa      	ldr	r2, [r5, #8]
 8007f78:	68eb      	ldr	r3, [r5, #12]
 8007f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f7c:	7c2b      	ldrb	r3, [r5, #16]
 8007f7e:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8007f80:	4aa0      	ldr	r2, [pc, #640]	; (8008204 <loadMenuTexts+0x388>)
 8007f82:	4ba1      	ldr	r3, [pc, #644]	; (8008208 <loadMenuTexts+0x38c>)
 8007f84:	4614      	mov	r4, r2
 8007f86:	461d      	mov	r5, r3
 8007f88:	6828      	ldr	r0, [r5, #0]
 8007f8a:	6869      	ldr	r1, [r5, #4]
 8007f8c:	68aa      	ldr	r2, [r5, #8]
 8007f8e:	68eb      	ldr	r3, [r5, #12]
 8007f90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f92:	7c2b      	ldrb	r3, [r5, #16]
 8007f94:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8007f96:	4a9d      	ldr	r2, [pc, #628]	; (800820c <loadMenuTexts+0x390>)
 8007f98:	4b9d      	ldr	r3, [pc, #628]	; (8008210 <loadMenuTexts+0x394>)
 8007f9a:	4614      	mov	r4, r2
 8007f9c:	461d      	mov	r5, r3
 8007f9e:	6828      	ldr	r0, [r5, #0]
 8007fa0:	6869      	ldr	r1, [r5, #4]
 8007fa2:	68aa      	ldr	r2, [r5, #8]
 8007fa4:	68eb      	ldr	r3, [r5, #12]
 8007fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fa8:	7c2b      	ldrb	r3, [r5, #16]
 8007faa:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8007fac:	4a99      	ldr	r2, [pc, #612]	; (8008214 <loadMenuTexts+0x398>)
 8007fae:	4b9a      	ldr	r3, [pc, #616]	; (8008218 <loadMenuTexts+0x39c>)
 8007fb0:	4614      	mov	r4, r2
 8007fb2:	461d      	mov	r5, r3
 8007fb4:	6828      	ldr	r0, [r5, #0]
 8007fb6:	6869      	ldr	r1, [r5, #4]
 8007fb8:	68aa      	ldr	r2, [r5, #8]
 8007fba:	68eb      	ldr	r3, [r5, #12]
 8007fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fbe:	7c2b      	ldrb	r3, [r5, #16]
 8007fc0:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 8007fc2:	4a96      	ldr	r2, [pc, #600]	; (800821c <loadMenuTexts+0x3a0>)
 8007fc4:	4b96      	ldr	r3, [pc, #600]	; (8008220 <loadMenuTexts+0x3a4>)
 8007fc6:	4614      	mov	r4, r2
 8007fc8:	461d      	mov	r5, r3
 8007fca:	6828      	ldr	r0, [r5, #0]
 8007fcc:	6869      	ldr	r1, [r5, #4]
 8007fce:	68aa      	ldr	r2, [r5, #8]
 8007fd0:	68eb      	ldr	r3, [r5, #12]
 8007fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fd4:	7c2b      	ldrb	r3, [r5, #16]
 8007fd6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8007fd8:	4a92      	ldr	r2, [pc, #584]	; (8008224 <loadMenuTexts+0x3a8>)
 8007fda:	4b93      	ldr	r3, [pc, #588]	; (8008228 <loadMenuTexts+0x3ac>)
 8007fdc:	4614      	mov	r4, r2
 8007fde:	461d      	mov	r5, r3
 8007fe0:	6828      	ldr	r0, [r5, #0]
 8007fe2:	6869      	ldr	r1, [r5, #4]
 8007fe4:	68aa      	ldr	r2, [r5, #8]
 8007fe6:	68eb      	ldr	r3, [r5, #12]
 8007fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fea:	7c2b      	ldrb	r3, [r5, #16]
 8007fec:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 8007fee:	4a8f      	ldr	r2, [pc, #572]	; (800822c <loadMenuTexts+0x3b0>)
 8007ff0:	4b8f      	ldr	r3, [pc, #572]	; (8008230 <loadMenuTexts+0x3b4>)
 8007ff2:	4614      	mov	r4, r2
 8007ff4:	461d      	mov	r5, r3
 8007ff6:	6828      	ldr	r0, [r5, #0]
 8007ff8:	6869      	ldr	r1, [r5, #4]
 8007ffa:	68aa      	ldr	r2, [r5, #8]
 8007ffc:	68eb      	ldr	r3, [r5, #12]
 8007ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008000:	7c2b      	ldrb	r3, [r5, #16]
 8008002:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 8008004:	4a8b      	ldr	r2, [pc, #556]	; (8008234 <loadMenuTexts+0x3b8>)
 8008006:	4b8c      	ldr	r3, [pc, #560]	; (8008238 <loadMenuTexts+0x3bc>)
 8008008:	4614      	mov	r4, r2
 800800a:	461d      	mov	r5, r3
 800800c:	6828      	ldr	r0, [r5, #0]
 800800e:	6869      	ldr	r1, [r5, #4]
 8008010:	68aa      	ldr	r2, [r5, #8]
 8008012:	68eb      	ldr	r3, [r5, #12]
 8008014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008016:	7c2b      	ldrb	r3, [r5, #16]
 8008018:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 800801a:	4a88      	ldr	r2, [pc, #544]	; (800823c <loadMenuTexts+0x3c0>)
 800801c:	4b88      	ldr	r3, [pc, #544]	; (8008240 <loadMenuTexts+0x3c4>)
 800801e:	4614      	mov	r4, r2
 8008020:	461d      	mov	r5, r3
 8008022:	6828      	ldr	r0, [r5, #0]
 8008024:	6869      	ldr	r1, [r5, #4]
 8008026:	68aa      	ldr	r2, [r5, #8]
 8008028:	68eb      	ldr	r3, [r5, #12]
 800802a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800802c:	7c2b      	ldrb	r3, [r5, #16]
 800802e:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 8008030:	4a84      	ldr	r2, [pc, #528]	; (8008244 <loadMenuTexts+0x3c8>)
 8008032:	4b85      	ldr	r3, [pc, #532]	; (8008248 <loadMenuTexts+0x3cc>)
 8008034:	4614      	mov	r4, r2
 8008036:	461d      	mov	r5, r3
 8008038:	6828      	ldr	r0, [r5, #0]
 800803a:	6869      	ldr	r1, [r5, #4]
 800803c:	68aa      	ldr	r2, [r5, #8]
 800803e:	68eb      	ldr	r3, [r5, #12]
 8008040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008042:	7c2b      	ldrb	r3, [r5, #16]
 8008044:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 8008046:	4a81      	ldr	r2, [pc, #516]	; (800824c <loadMenuTexts+0x3d0>)
 8008048:	4b81      	ldr	r3, [pc, #516]	; (8008250 <loadMenuTexts+0x3d4>)
 800804a:	4614      	mov	r4, r2
 800804c:	461d      	mov	r5, r3
 800804e:	6828      	ldr	r0, [r5, #0]
 8008050:	6869      	ldr	r1, [r5, #4]
 8008052:	68aa      	ldr	r2, [r5, #8]
 8008054:	68eb      	ldr	r3, [r5, #12]
 8008056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008058:	7c2b      	ldrb	r3, [r5, #16]
 800805a:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 800805c:	4a7d      	ldr	r2, [pc, #500]	; (8008254 <loadMenuTexts+0x3d8>)
 800805e:	4b7e      	ldr	r3, [pc, #504]	; (8008258 <loadMenuTexts+0x3dc>)
 8008060:	4614      	mov	r4, r2
 8008062:	461d      	mov	r5, r3
 8008064:	6828      	ldr	r0, [r5, #0]
 8008066:	6869      	ldr	r1, [r5, #4]
 8008068:	68aa      	ldr	r2, [r5, #8]
 800806a:	68eb      	ldr	r3, [r5, #12]
 800806c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800806e:	7c2b      	ldrb	r3, [r5, #16]
 8008070:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 8008072:	4a7a      	ldr	r2, [pc, #488]	; (800825c <loadMenuTexts+0x3e0>)
 8008074:	4b7a      	ldr	r3, [pc, #488]	; (8008260 <loadMenuTexts+0x3e4>)
 8008076:	4614      	mov	r4, r2
 8008078:	461d      	mov	r5, r3
 800807a:	6828      	ldr	r0, [r5, #0]
 800807c:	6869      	ldr	r1, [r5, #4]
 800807e:	68aa      	ldr	r2, [r5, #8]
 8008080:	68eb      	ldr	r3, [r5, #12]
 8008082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008084:	7c2b      	ldrb	r3, [r5, #16]
 8008086:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8008088:	4a76      	ldr	r2, [pc, #472]	; (8008264 <loadMenuTexts+0x3e8>)
 800808a:	4b77      	ldr	r3, [pc, #476]	; (8008268 <loadMenuTexts+0x3ec>)
 800808c:	4614      	mov	r4, r2
 800808e:	461d      	mov	r5, r3
 8008090:	6828      	ldr	r0, [r5, #0]
 8008092:	6869      	ldr	r1, [r5, #4]
 8008094:	68aa      	ldr	r2, [r5, #8]
 8008096:	68eb      	ldr	r3, [r5, #12]
 8008098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800809a:	7c2b      	ldrb	r3, [r5, #16]
 800809c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 800809e:	4a73      	ldr	r2, [pc, #460]	; (800826c <loadMenuTexts+0x3f0>)
 80080a0:	4b73      	ldr	r3, [pc, #460]	; (8008270 <loadMenuTexts+0x3f4>)
 80080a2:	4614      	mov	r4, r2
 80080a4:	461d      	mov	r5, r3
 80080a6:	6828      	ldr	r0, [r5, #0]
 80080a8:	6869      	ldr	r1, [r5, #4]
 80080aa:	68aa      	ldr	r2, [r5, #8]
 80080ac:	68eb      	ldr	r3, [r5, #12]
 80080ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080b0:	7c2b      	ldrb	r3, [r5, #16]
 80080b2:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 80080b4:	4a6f      	ldr	r2, [pc, #444]	; (8008274 <loadMenuTexts+0x3f8>)
 80080b6:	4b70      	ldr	r3, [pc, #448]	; (8008278 <loadMenuTexts+0x3fc>)
 80080b8:	4614      	mov	r4, r2
 80080ba:	461d      	mov	r5, r3
 80080bc:	6828      	ldr	r0, [r5, #0]
 80080be:	6869      	ldr	r1, [r5, #4]
 80080c0:	68aa      	ldr	r2, [r5, #8]
 80080c2:	68eb      	ldr	r3, [r5, #12]
 80080c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080c6:	7c2b      	ldrb	r3, [r5, #16]
 80080c8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 80080ca:	4a6c      	ldr	r2, [pc, #432]	; (800827c <loadMenuTexts+0x400>)
 80080cc:	4b6c      	ldr	r3, [pc, #432]	; (8008280 <loadMenuTexts+0x404>)
 80080ce:	4614      	mov	r4, r2
 80080d0:	461d      	mov	r5, r3
 80080d2:	6828      	ldr	r0, [r5, #0]
 80080d4:	6869      	ldr	r1, [r5, #4]
 80080d6:	68aa      	ldr	r2, [r5, #8]
 80080d8:	68eb      	ldr	r3, [r5, #12]
 80080da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080dc:	7c2b      	ldrb	r3, [r5, #16]
 80080de:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 80080e0:	4a68      	ldr	r2, [pc, #416]	; (8008284 <loadMenuTexts+0x408>)
 80080e2:	4b69      	ldr	r3, [pc, #420]	; (8008288 <loadMenuTexts+0x40c>)
 80080e4:	4614      	mov	r4, r2
 80080e6:	461d      	mov	r5, r3
 80080e8:	6828      	ldr	r0, [r5, #0]
 80080ea:	6869      	ldr	r1, [r5, #4]
 80080ec:	68aa      	ldr	r2, [r5, #8]
 80080ee:	68eb      	ldr	r3, [r5, #12]
 80080f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080f2:	7c2b      	ldrb	r3, [r5, #16]
 80080f4:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 80080f6:	4a65      	ldr	r2, [pc, #404]	; (800828c <loadMenuTexts+0x410>)
 80080f8:	4b65      	ldr	r3, [pc, #404]	; (8008290 <loadMenuTexts+0x414>)
 80080fa:	4614      	mov	r4, r2
 80080fc:	461d      	mov	r5, r3
 80080fe:	6828      	ldr	r0, [r5, #0]
 8008100:	6869      	ldr	r1, [r5, #4]
 8008102:	68aa      	ldr	r2, [r5, #8]
 8008104:	68eb      	ldr	r3, [r5, #12]
 8008106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008108:	7c2b      	ldrb	r3, [r5, #16]
 800810a:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 800810c:	4a61      	ldr	r2, [pc, #388]	; (8008294 <loadMenuTexts+0x418>)
 800810e:	4b62      	ldr	r3, [pc, #392]	; (8008298 <loadMenuTexts+0x41c>)
 8008110:	4614      	mov	r4, r2
 8008112:	461d      	mov	r5, r3
 8008114:	6828      	ldr	r0, [r5, #0]
 8008116:	6869      	ldr	r1, [r5, #4]
 8008118:	68aa      	ldr	r2, [r5, #8]
 800811a:	68eb      	ldr	r3, [r5, #12]
 800811c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800811e:	7c2b      	ldrb	r3, [r5, #16]
 8008120:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 8008122:	4a5e      	ldr	r2, [pc, #376]	; (800829c <loadMenuTexts+0x420>)
 8008124:	4b5e      	ldr	r3, [pc, #376]	; (80082a0 <loadMenuTexts+0x424>)
 8008126:	4614      	mov	r4, r2
 8008128:	461d      	mov	r5, r3
 800812a:	6828      	ldr	r0, [r5, #0]
 800812c:	6869      	ldr	r1, [r5, #4]
 800812e:	68aa      	ldr	r2, [r5, #8]
 8008130:	68eb      	ldr	r3, [r5, #12]
 8008132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008134:	7c2b      	ldrb	r3, [r5, #16]
 8008136:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8008138:	4a5a      	ldr	r2, [pc, #360]	; (80082a4 <loadMenuTexts+0x428>)
 800813a:	4b5b      	ldr	r3, [pc, #364]	; (80082a8 <loadMenuTexts+0x42c>)
 800813c:	4614      	mov	r4, r2
 800813e:	461d      	mov	r5, r3
 8008140:	6828      	ldr	r0, [r5, #0]
 8008142:	6869      	ldr	r1, [r5, #4]
 8008144:	68aa      	ldr	r2, [r5, #8]
 8008146:	68eb      	ldr	r3, [r5, #12]
 8008148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800814a:	7c2b      	ldrb	r3, [r5, #16]
 800814c:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 800814e:	4a57      	ldr	r2, [pc, #348]	; (80082ac <loadMenuTexts+0x430>)
 8008150:	4b57      	ldr	r3, [pc, #348]	; (80082b0 <loadMenuTexts+0x434>)
 8008152:	4614      	mov	r4, r2
 8008154:	461d      	mov	r5, r3
 8008156:	6828      	ldr	r0, [r5, #0]
 8008158:	6869      	ldr	r1, [r5, #4]
 800815a:	68aa      	ldr	r2, [r5, #8]
 800815c:	68eb      	ldr	r3, [r5, #12]
 800815e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008160:	7c2b      	ldrb	r3, [r5, #16]
 8008162:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 8008164:	4a53      	ldr	r2, [pc, #332]	; (80082b4 <loadMenuTexts+0x438>)
 8008166:	4b54      	ldr	r3, [pc, #336]	; (80082b8 <loadMenuTexts+0x43c>)
 8008168:	4614      	mov	r4, r2
 800816a:	461d      	mov	r5, r3
 800816c:	6828      	ldr	r0, [r5, #0]
 800816e:	6869      	ldr	r1, [r5, #4]
 8008170:	68aa      	ldr	r2, [r5, #8]
 8008172:	68eb      	ldr	r3, [r5, #12]
 8008174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008176:	7c2b      	ldrb	r3, [r5, #16]
 8008178:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 800817a:	4a50      	ldr	r2, [pc, #320]	; (80082bc <loadMenuTexts+0x440>)
 800817c:	4b50      	ldr	r3, [pc, #320]	; (80082c0 <loadMenuTexts+0x444>)
 800817e:	4614      	mov	r4, r2
 8008180:	461d      	mov	r5, r3
 8008182:	6828      	ldr	r0, [r5, #0]
 8008184:	6869      	ldr	r1, [r5, #4]
 8008186:	68aa      	ldr	r2, [r5, #8]
 8008188:	68eb      	ldr	r3, [r5, #12]
 800818a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800818c:	7c2b      	ldrb	r3, [r5, #16]
 800818e:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 8008190:	4a4c      	ldr	r2, [pc, #304]	; (80082c4 <loadMenuTexts+0x448>)
 8008192:	4b4d      	ldr	r3, [pc, #308]	; (80082c8 <loadMenuTexts+0x44c>)
 8008194:	4614      	mov	r4, r2
 8008196:	461d      	mov	r5, r3
 8008198:	6828      	ldr	r0, [r5, #0]
 800819a:	6869      	ldr	r1, [r5, #4]
 800819c:	68aa      	ldr	r2, [r5, #8]
 800819e:	68eb      	ldr	r3, [r5, #12]
 80081a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081a2:	7c2b      	ldrb	r3, [r5, #16]
 80081a4:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 80081a6:	4a49      	ldr	r2, [pc, #292]	; (80082cc <loadMenuTexts+0x450>)
 80081a8:	e092      	b.n	80082d0 <loadMenuTexts+0x454>
 80081aa:	bf00      	nop
 80081ac:	20001254 	.word	0x20001254
 80081b0:	20000120 	.word	0x20000120
 80081b4:	20001268 	.word	0x20001268
 80081b8:	20000134 	.word	0x20000134
 80081bc:	2000127c 	.word	0x2000127c
 80081c0:	20000148 	.word	0x20000148
 80081c4:	20001290 	.word	0x20001290
 80081c8:	2000015c 	.word	0x2000015c
 80081cc:	200012a4 	.word	0x200012a4
 80081d0:	20000170 	.word	0x20000170
 80081d4:	200012b8 	.word	0x200012b8
 80081d8:	20000184 	.word	0x20000184
 80081dc:	200012cc 	.word	0x200012cc
 80081e0:	20000198 	.word	0x20000198
 80081e4:	200012e0 	.word	0x200012e0
 80081e8:	200001ac 	.word	0x200001ac
 80081ec:	200012f4 	.word	0x200012f4
 80081f0:	200001c0 	.word	0x200001c0
 80081f4:	20001308 	.word	0x20001308
 80081f8:	200001d4 	.word	0x200001d4
 80081fc:	2000131c 	.word	0x2000131c
 8008200:	200001e8 	.word	0x200001e8
 8008204:	20001330 	.word	0x20001330
 8008208:	200001fc 	.word	0x200001fc
 800820c:	20001344 	.word	0x20001344
 8008210:	20000210 	.word	0x20000210
 8008214:	20001358 	.word	0x20001358
 8008218:	20000224 	.word	0x20000224
 800821c:	2000136c 	.word	0x2000136c
 8008220:	20000238 	.word	0x20000238
 8008224:	20001380 	.word	0x20001380
 8008228:	2000024c 	.word	0x2000024c
 800822c:	20001394 	.word	0x20001394
 8008230:	20000260 	.word	0x20000260
 8008234:	200013a8 	.word	0x200013a8
 8008238:	20000274 	.word	0x20000274
 800823c:	200013bc 	.word	0x200013bc
 8008240:	20000288 	.word	0x20000288
 8008244:	200013d0 	.word	0x200013d0
 8008248:	2000029c 	.word	0x2000029c
 800824c:	200013e4 	.word	0x200013e4
 8008250:	200002b0 	.word	0x200002b0
 8008254:	200013f8 	.word	0x200013f8
 8008258:	200002c4 	.word	0x200002c4
 800825c:	2000140c 	.word	0x2000140c
 8008260:	200002d8 	.word	0x200002d8
 8008264:	20001420 	.word	0x20001420
 8008268:	200002ec 	.word	0x200002ec
 800826c:	20001434 	.word	0x20001434
 8008270:	20000300 	.word	0x20000300
 8008274:	20001448 	.word	0x20001448
 8008278:	20000314 	.word	0x20000314
 800827c:	2000145c 	.word	0x2000145c
 8008280:	20000328 	.word	0x20000328
 8008284:	20001470 	.word	0x20001470
 8008288:	2000033c 	.word	0x2000033c
 800828c:	20001484 	.word	0x20001484
 8008290:	20000350 	.word	0x20000350
 8008294:	20001498 	.word	0x20001498
 8008298:	20000364 	.word	0x20000364
 800829c:	200014ac 	.word	0x200014ac
 80082a0:	20000378 	.word	0x20000378
 80082a4:	200014c0 	.word	0x200014c0
 80082a8:	2000038c 	.word	0x2000038c
 80082ac:	200014d4 	.word	0x200014d4
 80082b0:	200003a0 	.word	0x200003a0
 80082b4:	200014e8 	.word	0x200014e8
 80082b8:	200003b4 	.word	0x200003b4
 80082bc:	200014fc 	.word	0x200014fc
 80082c0:	200003c8 	.word	0x200003c8
 80082c4:	20001510 	.word	0x20001510
 80082c8:	200003dc 	.word	0x200003dc
 80082cc:	20001524 	.word	0x20001524
 80082d0:	4bc7      	ldr	r3, [pc, #796]	; (80085f0 <loadMenuTexts+0x774>)
 80082d2:	4614      	mov	r4, r2
 80082d4:	461d      	mov	r5, r3
 80082d6:	6828      	ldr	r0, [r5, #0]
 80082d8:	6869      	ldr	r1, [r5, #4]
 80082da:	68aa      	ldr	r2, [r5, #8]
 80082dc:	68eb      	ldr	r3, [r5, #12]
 80082de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082e0:	7c2b      	ldrb	r3, [r5, #16]
 80082e2:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 80082e4:	4ac3      	ldr	r2, [pc, #780]	; (80085f4 <loadMenuTexts+0x778>)
 80082e6:	4bc4      	ldr	r3, [pc, #784]	; (80085f8 <loadMenuTexts+0x77c>)
 80082e8:	4614      	mov	r4, r2
 80082ea:	461d      	mov	r5, r3
 80082ec:	6828      	ldr	r0, [r5, #0]
 80082ee:	6869      	ldr	r1, [r5, #4]
 80082f0:	68aa      	ldr	r2, [r5, #8]
 80082f2:	68eb      	ldr	r3, [r5, #12]
 80082f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082f6:	7c2b      	ldrb	r3, [r5, #16]
 80082f8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 80082fa:	4ac0      	ldr	r2, [pc, #768]	; (80085fc <loadMenuTexts+0x780>)
 80082fc:	4bc0      	ldr	r3, [pc, #768]	; (8008600 <loadMenuTexts+0x784>)
 80082fe:	4614      	mov	r4, r2
 8008300:	461d      	mov	r5, r3
 8008302:	6828      	ldr	r0, [r5, #0]
 8008304:	6869      	ldr	r1, [r5, #4]
 8008306:	68aa      	ldr	r2, [r5, #8]
 8008308:	68eb      	ldr	r3, [r5, #12]
 800830a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800830c:	7c2b      	ldrb	r3, [r5, #16]
 800830e:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 8008310:	4abc      	ldr	r2, [pc, #752]	; (8008604 <loadMenuTexts+0x788>)
 8008312:	4bbd      	ldr	r3, [pc, #756]	; (8008608 <loadMenuTexts+0x78c>)
 8008314:	4614      	mov	r4, r2
 8008316:	461d      	mov	r5, r3
 8008318:	6828      	ldr	r0, [r5, #0]
 800831a:	6869      	ldr	r1, [r5, #4]
 800831c:	68aa      	ldr	r2, [r5, #8]
 800831e:	68eb      	ldr	r3, [r5, #12]
 8008320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008322:	7c2b      	ldrb	r3, [r5, #16]
 8008324:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 8008326:	4ab9      	ldr	r2, [pc, #740]	; (800860c <loadMenuTexts+0x790>)
 8008328:	4bb9      	ldr	r3, [pc, #740]	; (8008610 <loadMenuTexts+0x794>)
 800832a:	4614      	mov	r4, r2
 800832c:	461d      	mov	r5, r3
 800832e:	6828      	ldr	r0, [r5, #0]
 8008330:	6869      	ldr	r1, [r5, #4]
 8008332:	68aa      	ldr	r2, [r5, #8]
 8008334:	68eb      	ldr	r3, [r5, #12]
 8008336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008338:	7c2b      	ldrb	r3, [r5, #16]
 800833a:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 800833c:	4ab5      	ldr	r2, [pc, #724]	; (8008614 <loadMenuTexts+0x798>)
 800833e:	4bb6      	ldr	r3, [pc, #728]	; (8008618 <loadMenuTexts+0x79c>)
 8008340:	4614      	mov	r4, r2
 8008342:	461d      	mov	r5, r3
 8008344:	6828      	ldr	r0, [r5, #0]
 8008346:	6869      	ldr	r1, [r5, #4]
 8008348:	68aa      	ldr	r2, [r5, #8]
 800834a:	68eb      	ldr	r3, [r5, #12]
 800834c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800834e:	7c2b      	ldrb	r3, [r5, #16]
 8008350:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 8008352:	4ab2      	ldr	r2, [pc, #712]	; (800861c <loadMenuTexts+0x7a0>)
 8008354:	4bb2      	ldr	r3, [pc, #712]	; (8008620 <loadMenuTexts+0x7a4>)
 8008356:	4614      	mov	r4, r2
 8008358:	461d      	mov	r5, r3
 800835a:	6828      	ldr	r0, [r5, #0]
 800835c:	6869      	ldr	r1, [r5, #4]
 800835e:	68aa      	ldr	r2, [r5, #8]
 8008360:	68eb      	ldr	r3, [r5, #12]
 8008362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008364:	7c2b      	ldrb	r3, [r5, #16]
 8008366:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8008368:	4aae      	ldr	r2, [pc, #696]	; (8008624 <loadMenuTexts+0x7a8>)
 800836a:	4baf      	ldr	r3, [pc, #700]	; (8008628 <loadMenuTexts+0x7ac>)
 800836c:	4614      	mov	r4, r2
 800836e:	461d      	mov	r5, r3
 8008370:	6828      	ldr	r0, [r5, #0]
 8008372:	6869      	ldr	r1, [r5, #4]
 8008374:	68aa      	ldr	r2, [r5, #8]
 8008376:	68eb      	ldr	r3, [r5, #12]
 8008378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800837a:	7c2b      	ldrb	r3, [r5, #16]
 800837c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 800837e:	4aab      	ldr	r2, [pc, #684]	; (800862c <loadMenuTexts+0x7b0>)
 8008380:	4bab      	ldr	r3, [pc, #684]	; (8008630 <loadMenuTexts+0x7b4>)
 8008382:	4614      	mov	r4, r2
 8008384:	461d      	mov	r5, r3
 8008386:	6828      	ldr	r0, [r5, #0]
 8008388:	6869      	ldr	r1, [r5, #4]
 800838a:	68aa      	ldr	r2, [r5, #8]
 800838c:	68eb      	ldr	r3, [r5, #12]
 800838e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008390:	7c2b      	ldrb	r3, [r5, #16]
 8008392:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8008394:	4aa7      	ldr	r2, [pc, #668]	; (8008634 <loadMenuTexts+0x7b8>)
 8008396:	4ba8      	ldr	r3, [pc, #672]	; (8008638 <loadMenuTexts+0x7bc>)
 8008398:	4614      	mov	r4, r2
 800839a:	461d      	mov	r5, r3
 800839c:	6828      	ldr	r0, [r5, #0]
 800839e:	6869      	ldr	r1, [r5, #4]
 80083a0:	68aa      	ldr	r2, [r5, #8]
 80083a2:	68eb      	ldr	r3, [r5, #12]
 80083a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083a6:	7c2b      	ldrb	r3, [r5, #16]
 80083a8:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 80083aa:	4aa4      	ldr	r2, [pc, #656]	; (800863c <loadMenuTexts+0x7c0>)
 80083ac:	4ba4      	ldr	r3, [pc, #656]	; (8008640 <loadMenuTexts+0x7c4>)
 80083ae:	4614      	mov	r4, r2
 80083b0:	461d      	mov	r5, r3
 80083b2:	6828      	ldr	r0, [r5, #0]
 80083b4:	6869      	ldr	r1, [r5, #4]
 80083b6:	68aa      	ldr	r2, [r5, #8]
 80083b8:	68eb      	ldr	r3, [r5, #12]
 80083ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083bc:	7c2b      	ldrb	r3, [r5, #16]
 80083be:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 80083c0:	4aa0      	ldr	r2, [pc, #640]	; (8008644 <loadMenuTexts+0x7c8>)
 80083c2:	4ba1      	ldr	r3, [pc, #644]	; (8008648 <loadMenuTexts+0x7cc>)
 80083c4:	4614      	mov	r4, r2
 80083c6:	461d      	mov	r5, r3
 80083c8:	6828      	ldr	r0, [r5, #0]
 80083ca:	6869      	ldr	r1, [r5, #4]
 80083cc:	68aa      	ldr	r2, [r5, #8]
 80083ce:	68eb      	ldr	r3, [r5, #12]
 80083d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083d2:	7c2b      	ldrb	r3, [r5, #16]
 80083d4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 80083d6:	4a9d      	ldr	r2, [pc, #628]	; (800864c <loadMenuTexts+0x7d0>)
 80083d8:	4b9d      	ldr	r3, [pc, #628]	; (8008650 <loadMenuTexts+0x7d4>)
 80083da:	4614      	mov	r4, r2
 80083dc:	461d      	mov	r5, r3
 80083de:	6828      	ldr	r0, [r5, #0]
 80083e0:	6869      	ldr	r1, [r5, #4]
 80083e2:	68aa      	ldr	r2, [r5, #8]
 80083e4:	68eb      	ldr	r3, [r5, #12]
 80083e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083e8:	7c2b      	ldrb	r3, [r5, #16]
 80083ea:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 80083ec:	4a99      	ldr	r2, [pc, #612]	; (8008654 <loadMenuTexts+0x7d8>)
 80083ee:	4b9a      	ldr	r3, [pc, #616]	; (8008658 <loadMenuTexts+0x7dc>)
 80083f0:	4614      	mov	r4, r2
 80083f2:	461d      	mov	r5, r3
 80083f4:	6828      	ldr	r0, [r5, #0]
 80083f6:	6869      	ldr	r1, [r5, #4]
 80083f8:	68aa      	ldr	r2, [r5, #8]
 80083fa:	68eb      	ldr	r3, [r5, #12]
 80083fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083fe:	7c2b      	ldrb	r3, [r5, #16]
 8008400:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 8008402:	4a96      	ldr	r2, [pc, #600]	; (800865c <loadMenuTexts+0x7e0>)
 8008404:	4b96      	ldr	r3, [pc, #600]	; (8008660 <loadMenuTexts+0x7e4>)
 8008406:	4614      	mov	r4, r2
 8008408:	461d      	mov	r5, r3
 800840a:	6828      	ldr	r0, [r5, #0]
 800840c:	6869      	ldr	r1, [r5, #4]
 800840e:	68aa      	ldr	r2, [r5, #8]
 8008410:	68eb      	ldr	r3, [r5, #12]
 8008412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008414:	7c2b      	ldrb	r3, [r5, #16]
 8008416:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 8008418:	4a92      	ldr	r2, [pc, #584]	; (8008664 <loadMenuTexts+0x7e8>)
 800841a:	4b93      	ldr	r3, [pc, #588]	; (8008668 <loadMenuTexts+0x7ec>)
 800841c:	4614      	mov	r4, r2
 800841e:	461d      	mov	r5, r3
 8008420:	6828      	ldr	r0, [r5, #0]
 8008422:	6869      	ldr	r1, [r5, #4]
 8008424:	68aa      	ldr	r2, [r5, #8]
 8008426:	68eb      	ldr	r3, [r5, #12]
 8008428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800842a:	7c2b      	ldrb	r3, [r5, #16]
 800842c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 800842e:	4a8f      	ldr	r2, [pc, #572]	; (800866c <loadMenuTexts+0x7f0>)
 8008430:	4b8f      	ldr	r3, [pc, #572]	; (8008670 <loadMenuTexts+0x7f4>)
 8008432:	4614      	mov	r4, r2
 8008434:	461d      	mov	r5, r3
 8008436:	6828      	ldr	r0, [r5, #0]
 8008438:	6869      	ldr	r1, [r5, #4]
 800843a:	68aa      	ldr	r2, [r5, #8]
 800843c:	68eb      	ldr	r3, [r5, #12]
 800843e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008440:	7c2b      	ldrb	r3, [r5, #16]
 8008442:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 8008444:	4a8b      	ldr	r2, [pc, #556]	; (8008674 <loadMenuTexts+0x7f8>)
 8008446:	4b8c      	ldr	r3, [pc, #560]	; (8008678 <loadMenuTexts+0x7fc>)
 8008448:	4614      	mov	r4, r2
 800844a:	461d      	mov	r5, r3
 800844c:	6828      	ldr	r0, [r5, #0]
 800844e:	6869      	ldr	r1, [r5, #4]
 8008450:	68aa      	ldr	r2, [r5, #8]
 8008452:	68eb      	ldr	r3, [r5, #12]
 8008454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008456:	7c2b      	ldrb	r3, [r5, #16]
 8008458:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 800845a:	4a88      	ldr	r2, [pc, #544]	; (800867c <loadMenuTexts+0x800>)
 800845c:	4b88      	ldr	r3, [pc, #544]	; (8008680 <loadMenuTexts+0x804>)
 800845e:	4614      	mov	r4, r2
 8008460:	461d      	mov	r5, r3
 8008462:	6828      	ldr	r0, [r5, #0]
 8008464:	6869      	ldr	r1, [r5, #4]
 8008466:	68aa      	ldr	r2, [r5, #8]
 8008468:	68eb      	ldr	r3, [r5, #12]
 800846a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800846c:	7c2b      	ldrb	r3, [r5, #16]
 800846e:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8008470:	4a84      	ldr	r2, [pc, #528]	; (8008684 <loadMenuTexts+0x808>)
 8008472:	4b85      	ldr	r3, [pc, #532]	; (8008688 <loadMenuTexts+0x80c>)
 8008474:	4614      	mov	r4, r2
 8008476:	461d      	mov	r5, r3
 8008478:	6828      	ldr	r0, [r5, #0]
 800847a:	6869      	ldr	r1, [r5, #4]
 800847c:	68aa      	ldr	r2, [r5, #8]
 800847e:	68eb      	ldr	r3, [r5, #12]
 8008480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008482:	7c2b      	ldrb	r3, [r5, #16]
 8008484:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 8008486:	4a81      	ldr	r2, [pc, #516]	; (800868c <loadMenuTexts+0x810>)
 8008488:	4b81      	ldr	r3, [pc, #516]	; (8008690 <loadMenuTexts+0x814>)
 800848a:	4614      	mov	r4, r2
 800848c:	461d      	mov	r5, r3
 800848e:	6828      	ldr	r0, [r5, #0]
 8008490:	6869      	ldr	r1, [r5, #4]
 8008492:	68aa      	ldr	r2, [r5, #8]
 8008494:	68eb      	ldr	r3, [r5, #12]
 8008496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008498:	7c2b      	ldrb	r3, [r5, #16]
 800849a:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 800849c:	4a7d      	ldr	r2, [pc, #500]	; (8008694 <loadMenuTexts+0x818>)
 800849e:	4b7e      	ldr	r3, [pc, #504]	; (8008698 <loadMenuTexts+0x81c>)
 80084a0:	4614      	mov	r4, r2
 80084a2:	461d      	mov	r5, r3
 80084a4:	6828      	ldr	r0, [r5, #0]
 80084a6:	6869      	ldr	r1, [r5, #4]
 80084a8:	68aa      	ldr	r2, [r5, #8]
 80084aa:	68eb      	ldr	r3, [r5, #12]
 80084ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084ae:	7c2b      	ldrb	r3, [r5, #16]
 80084b0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 80084b2:	4a7a      	ldr	r2, [pc, #488]	; (800869c <loadMenuTexts+0x820>)
 80084b4:	4b7a      	ldr	r3, [pc, #488]	; (80086a0 <loadMenuTexts+0x824>)
 80084b6:	4614      	mov	r4, r2
 80084b8:	461d      	mov	r5, r3
 80084ba:	6828      	ldr	r0, [r5, #0]
 80084bc:	6869      	ldr	r1, [r5, #4]
 80084be:	68aa      	ldr	r2, [r5, #8]
 80084c0:	68eb      	ldr	r3, [r5, #12]
 80084c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084c4:	7c2b      	ldrb	r3, [r5, #16]
 80084c6:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 80084c8:	4a76      	ldr	r2, [pc, #472]	; (80086a4 <loadMenuTexts+0x828>)
 80084ca:	4b77      	ldr	r3, [pc, #476]	; (80086a8 <loadMenuTexts+0x82c>)
 80084cc:	4614      	mov	r4, r2
 80084ce:	461d      	mov	r5, r3
 80084d0:	6828      	ldr	r0, [r5, #0]
 80084d2:	6869      	ldr	r1, [r5, #4]
 80084d4:	68aa      	ldr	r2, [r5, #8]
 80084d6:	68eb      	ldr	r3, [r5, #12]
 80084d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084da:	7c2b      	ldrb	r3, [r5, #16]
 80084dc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 80084de:	4a73      	ldr	r2, [pc, #460]	; (80086ac <loadMenuTexts+0x830>)
 80084e0:	4b73      	ldr	r3, [pc, #460]	; (80086b0 <loadMenuTexts+0x834>)
 80084e2:	4614      	mov	r4, r2
 80084e4:	461d      	mov	r5, r3
 80084e6:	6828      	ldr	r0, [r5, #0]
 80084e8:	6869      	ldr	r1, [r5, #4]
 80084ea:	68aa      	ldr	r2, [r5, #8]
 80084ec:	68eb      	ldr	r3, [r5, #12]
 80084ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084f0:	7c2b      	ldrb	r3, [r5, #16]
 80084f2:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 80084f4:	4a6f      	ldr	r2, [pc, #444]	; (80086b4 <loadMenuTexts+0x838>)
 80084f6:	4b70      	ldr	r3, [pc, #448]	; (80086b8 <loadMenuTexts+0x83c>)
 80084f8:	4614      	mov	r4, r2
 80084fa:	461d      	mov	r5, r3
 80084fc:	6828      	ldr	r0, [r5, #0]
 80084fe:	6869      	ldr	r1, [r5, #4]
 8008500:	68aa      	ldr	r2, [r5, #8]
 8008502:	68eb      	ldr	r3, [r5, #12]
 8008504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008506:	7c2b      	ldrb	r3, [r5, #16]
 8008508:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 800850a:	4a6c      	ldr	r2, [pc, #432]	; (80086bc <loadMenuTexts+0x840>)
 800850c:	4b6c      	ldr	r3, [pc, #432]	; (80086c0 <loadMenuTexts+0x844>)
 800850e:	4614      	mov	r4, r2
 8008510:	461d      	mov	r5, r3
 8008512:	6828      	ldr	r0, [r5, #0]
 8008514:	6869      	ldr	r1, [r5, #4]
 8008516:	68aa      	ldr	r2, [r5, #8]
 8008518:	68eb      	ldr	r3, [r5, #12]
 800851a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800851c:	7c2b      	ldrb	r3, [r5, #16]
 800851e:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 8008520:	4a68      	ldr	r2, [pc, #416]	; (80086c4 <loadMenuTexts+0x848>)
 8008522:	4b69      	ldr	r3, [pc, #420]	; (80086c8 <loadMenuTexts+0x84c>)
 8008524:	4614      	mov	r4, r2
 8008526:	461d      	mov	r5, r3
 8008528:	6828      	ldr	r0, [r5, #0]
 800852a:	6869      	ldr	r1, [r5, #4]
 800852c:	68aa      	ldr	r2, [r5, #8]
 800852e:	68eb      	ldr	r3, [r5, #12]
 8008530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008532:	7c2b      	ldrb	r3, [r5, #16]
 8008534:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 8008536:	4a65      	ldr	r2, [pc, #404]	; (80086cc <loadMenuTexts+0x850>)
 8008538:	4b65      	ldr	r3, [pc, #404]	; (80086d0 <loadMenuTexts+0x854>)
 800853a:	4614      	mov	r4, r2
 800853c:	461d      	mov	r5, r3
 800853e:	6828      	ldr	r0, [r5, #0]
 8008540:	6869      	ldr	r1, [r5, #4]
 8008542:	68aa      	ldr	r2, [r5, #8]
 8008544:	68eb      	ldr	r3, [r5, #12]
 8008546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008548:	7c2b      	ldrb	r3, [r5, #16]
 800854a:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 800854c:	4a61      	ldr	r2, [pc, #388]	; (80086d4 <loadMenuTexts+0x858>)
 800854e:	4b62      	ldr	r3, [pc, #392]	; (80086d8 <loadMenuTexts+0x85c>)
 8008550:	4614      	mov	r4, r2
 8008552:	461d      	mov	r5, r3
 8008554:	6828      	ldr	r0, [r5, #0]
 8008556:	6869      	ldr	r1, [r5, #4]
 8008558:	68aa      	ldr	r2, [r5, #8]
 800855a:	68eb      	ldr	r3, [r5, #12]
 800855c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800855e:	7c2b      	ldrb	r3, [r5, #16]
 8008560:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 8008562:	4a5e      	ldr	r2, [pc, #376]	; (80086dc <loadMenuTexts+0x860>)
 8008564:	4b5e      	ldr	r3, [pc, #376]	; (80086e0 <loadMenuTexts+0x864>)
 8008566:	4614      	mov	r4, r2
 8008568:	461d      	mov	r5, r3
 800856a:	6828      	ldr	r0, [r5, #0]
 800856c:	6869      	ldr	r1, [r5, #4]
 800856e:	68aa      	ldr	r2, [r5, #8]
 8008570:	68eb      	ldr	r3, [r5, #12]
 8008572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008574:	7c2b      	ldrb	r3, [r5, #16]
 8008576:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8008578:	4a5a      	ldr	r2, [pc, #360]	; (80086e4 <loadMenuTexts+0x868>)
 800857a:	4b5b      	ldr	r3, [pc, #364]	; (80086e8 <loadMenuTexts+0x86c>)
 800857c:	4614      	mov	r4, r2
 800857e:	461d      	mov	r5, r3
 8008580:	6828      	ldr	r0, [r5, #0]
 8008582:	6869      	ldr	r1, [r5, #4]
 8008584:	68aa      	ldr	r2, [r5, #8]
 8008586:	68eb      	ldr	r3, [r5, #12]
 8008588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800858a:	7c2b      	ldrb	r3, [r5, #16]
 800858c:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 800858e:	4a57      	ldr	r2, [pc, #348]	; (80086ec <loadMenuTexts+0x870>)
 8008590:	4b57      	ldr	r3, [pc, #348]	; (80086f0 <loadMenuTexts+0x874>)
 8008592:	4614      	mov	r4, r2
 8008594:	461d      	mov	r5, r3
 8008596:	6828      	ldr	r0, [r5, #0]
 8008598:	6869      	ldr	r1, [r5, #4]
 800859a:	68aa      	ldr	r2, [r5, #8]
 800859c:	68eb      	ldr	r3, [r5, #12]
 800859e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085a0:	7c2b      	ldrb	r3, [r5, #16]
 80085a2:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 80085a4:	4a53      	ldr	r2, [pc, #332]	; (80086f4 <loadMenuTexts+0x878>)
 80085a6:	4b54      	ldr	r3, [pc, #336]	; (80086f8 <loadMenuTexts+0x87c>)
 80085a8:	4614      	mov	r4, r2
 80085aa:	461d      	mov	r5, r3
 80085ac:	6828      	ldr	r0, [r5, #0]
 80085ae:	6869      	ldr	r1, [r5, #4]
 80085b0:	68aa      	ldr	r2, [r5, #8]
 80085b2:	68eb      	ldr	r3, [r5, #12]
 80085b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085b6:	7c2b      	ldrb	r3, [r5, #16]
 80085b8:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 80085ba:	4a50      	ldr	r2, [pc, #320]	; (80086fc <loadMenuTexts+0x880>)
 80085bc:	4b50      	ldr	r3, [pc, #320]	; (8008700 <loadMenuTexts+0x884>)
 80085be:	4614      	mov	r4, r2
 80085c0:	461d      	mov	r5, r3
 80085c2:	6828      	ldr	r0, [r5, #0]
 80085c4:	6869      	ldr	r1, [r5, #4]
 80085c6:	68aa      	ldr	r2, [r5, #8]
 80085c8:	68eb      	ldr	r3, [r5, #12]
 80085ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085cc:	7c2b      	ldrb	r3, [r5, #16]
 80085ce:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 80085d0:	4a4c      	ldr	r2, [pc, #304]	; (8008704 <loadMenuTexts+0x888>)
 80085d2:	4b4d      	ldr	r3, [pc, #308]	; (8008708 <loadMenuTexts+0x88c>)
 80085d4:	4614      	mov	r4, r2
 80085d6:	461d      	mov	r5, r3
 80085d8:	6828      	ldr	r0, [r5, #0]
 80085da:	6869      	ldr	r1, [r5, #4]
 80085dc:	68aa      	ldr	r2, [r5, #8]
 80085de:	68eb      	ldr	r3, [r5, #12]
 80085e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085e2:	7c2b      	ldrb	r3, [r5, #16]
 80085e4:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 80085e6:	4a49      	ldr	r2, [pc, #292]	; (800870c <loadMenuTexts+0x890>)
 80085e8:	4b49      	ldr	r3, [pc, #292]	; (8008710 <loadMenuTexts+0x894>)
 80085ea:	4614      	mov	r4, r2
 80085ec:	461d      	mov	r5, r3
 80085ee:	e091      	b.n	8008714 <loadMenuTexts+0x898>
 80085f0:	200003f0 	.word	0x200003f0
 80085f4:	20001538 	.word	0x20001538
 80085f8:	20000404 	.word	0x20000404
 80085fc:	2000154c 	.word	0x2000154c
 8008600:	20000418 	.word	0x20000418
 8008604:	20001560 	.word	0x20001560
 8008608:	2000042c 	.word	0x2000042c
 800860c:	20001574 	.word	0x20001574
 8008610:	20000440 	.word	0x20000440
 8008614:	20001588 	.word	0x20001588
 8008618:	20000454 	.word	0x20000454
 800861c:	2000159c 	.word	0x2000159c
 8008620:	20000468 	.word	0x20000468
 8008624:	200015b0 	.word	0x200015b0
 8008628:	2000047c 	.word	0x2000047c
 800862c:	200015c4 	.word	0x200015c4
 8008630:	20000490 	.word	0x20000490
 8008634:	200015d8 	.word	0x200015d8
 8008638:	200004a4 	.word	0x200004a4
 800863c:	200015ec 	.word	0x200015ec
 8008640:	200004b8 	.word	0x200004b8
 8008644:	20001600 	.word	0x20001600
 8008648:	200004cc 	.word	0x200004cc
 800864c:	20001614 	.word	0x20001614
 8008650:	200004e0 	.word	0x200004e0
 8008654:	20001628 	.word	0x20001628
 8008658:	200004f4 	.word	0x200004f4
 800865c:	2000163c 	.word	0x2000163c
 8008660:	20000508 	.word	0x20000508
 8008664:	20001650 	.word	0x20001650
 8008668:	2000051c 	.word	0x2000051c
 800866c:	20001664 	.word	0x20001664
 8008670:	20000530 	.word	0x20000530
 8008674:	20001678 	.word	0x20001678
 8008678:	20000544 	.word	0x20000544
 800867c:	2000168c 	.word	0x2000168c
 8008680:	20000558 	.word	0x20000558
 8008684:	200016a0 	.word	0x200016a0
 8008688:	2000056c 	.word	0x2000056c
 800868c:	200016b4 	.word	0x200016b4
 8008690:	20000580 	.word	0x20000580
 8008694:	200016c8 	.word	0x200016c8
 8008698:	20000594 	.word	0x20000594
 800869c:	200016dc 	.word	0x200016dc
 80086a0:	200005a8 	.word	0x200005a8
 80086a4:	200016f0 	.word	0x200016f0
 80086a8:	200005bc 	.word	0x200005bc
 80086ac:	20001704 	.word	0x20001704
 80086b0:	200005d0 	.word	0x200005d0
 80086b4:	20001718 	.word	0x20001718
 80086b8:	200005e4 	.word	0x200005e4
 80086bc:	2000172c 	.word	0x2000172c
 80086c0:	200005f8 	.word	0x200005f8
 80086c4:	20001740 	.word	0x20001740
 80086c8:	2000060c 	.word	0x2000060c
 80086cc:	20001754 	.word	0x20001754
 80086d0:	20000620 	.word	0x20000620
 80086d4:	20001768 	.word	0x20001768
 80086d8:	20000634 	.word	0x20000634
 80086dc:	2000177c 	.word	0x2000177c
 80086e0:	20000648 	.word	0x20000648
 80086e4:	20001790 	.word	0x20001790
 80086e8:	2000065c 	.word	0x2000065c
 80086ec:	200017a4 	.word	0x200017a4
 80086f0:	20000670 	.word	0x20000670
 80086f4:	200017b8 	.word	0x200017b8
 80086f8:	20000684 	.word	0x20000684
 80086fc:	200017cc 	.word	0x200017cc
 8008700:	20000c10 	.word	0x20000c10
 8008704:	200017e0 	.word	0x200017e0
 8008708:	20000c38 	.word	0x20000c38
 800870c:	200017f4 	.word	0x200017f4
 8008710:	20000c60 	.word	0x20000c60
 8008714:	6828      	ldr	r0, [r5, #0]
 8008716:	6869      	ldr	r1, [r5, #4]
 8008718:	68aa      	ldr	r2, [r5, #8]
 800871a:	68eb      	ldr	r3, [r5, #12]
 800871c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800871e:	7c2b      	ldrb	r3, [r5, #16]
 8008720:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8008722:	4a0c      	ldr	r2, [pc, #48]	; (8008754 <loadMenuTexts+0x8d8>)
 8008724:	4b0c      	ldr	r3, [pc, #48]	; (8008758 <loadMenuTexts+0x8dc>)
 8008726:	4614      	mov	r4, r2
 8008728:	461d      	mov	r5, r3
 800872a:	6828      	ldr	r0, [r5, #0]
 800872c:	6869      	ldr	r1, [r5, #4]
 800872e:	68aa      	ldr	r2, [r5, #8]
 8008730:	68eb      	ldr	r3, [r5, #12]
 8008732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008734:	7c2b      	ldrb	r3, [r5, #16]
 8008736:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8008738:	4a08      	ldr	r2, [pc, #32]	; (800875c <loadMenuTexts+0x8e0>)
 800873a:	4b09      	ldr	r3, [pc, #36]	; (8008760 <loadMenuTexts+0x8e4>)
 800873c:	4614      	mov	r4, r2
 800873e:	461d      	mov	r5, r3
 8008740:	6828      	ldr	r0, [r5, #0]
 8008742:	6869      	ldr	r1, [r5, #4]
 8008744:	68aa      	ldr	r2, [r5, #8]
 8008746:	68eb      	ldr	r3, [r5, #12]
 8008748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800874a:	7c2b      	ldrb	r3, [r5, #16]
 800874c:	7023      	strb	r3, [r4, #0]
 800874e:	f000 bc68 	b.w	8009022 <loadMenuTexts+0x11a6>
 8008752:	bf00      	nop
 8008754:	20001808 	.word	0x20001808
 8008758:	20000c88 	.word	0x20000c88
 800875c:	2000181c 	.word	0x2000181c
 8008760:	20000cb0 	.word	0x20000cb0
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8008764:	4ac6      	ldr	r2, [pc, #792]	; (8008a80 <loadMenuTexts+0xc04>)
 8008766:	4bc7      	ldr	r3, [pc, #796]	; (8008a84 <loadMenuTexts+0xc08>)
 8008768:	4614      	mov	r4, r2
 800876a:	461d      	mov	r5, r3
 800876c:	6828      	ldr	r0, [r5, #0]
 800876e:	6869      	ldr	r1, [r5, #4]
 8008770:	68aa      	ldr	r2, [r5, #8]
 8008772:	68eb      	ldr	r3, [r5, #12]
 8008774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008776:	7c2b      	ldrb	r3, [r5, #16]
 8008778:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 800877a:	4ac3      	ldr	r2, [pc, #780]	; (8008a88 <loadMenuTexts+0xc0c>)
 800877c:	4bc3      	ldr	r3, [pc, #780]	; (8008a8c <loadMenuTexts+0xc10>)
 800877e:	4614      	mov	r4, r2
 8008780:	461d      	mov	r5, r3
 8008782:	6828      	ldr	r0, [r5, #0]
 8008784:	6869      	ldr	r1, [r5, #4]
 8008786:	68aa      	ldr	r2, [r5, #8]
 8008788:	68eb      	ldr	r3, [r5, #12]
 800878a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800878c:	7c2b      	ldrb	r3, [r5, #16]
 800878e:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8008790:	4abf      	ldr	r2, [pc, #764]	; (8008a90 <loadMenuTexts+0xc14>)
 8008792:	4bc0      	ldr	r3, [pc, #768]	; (8008a94 <loadMenuTexts+0xc18>)
 8008794:	4614      	mov	r4, r2
 8008796:	461d      	mov	r5, r3
 8008798:	6828      	ldr	r0, [r5, #0]
 800879a:	6869      	ldr	r1, [r5, #4]
 800879c:	68aa      	ldr	r2, [r5, #8]
 800879e:	68eb      	ldr	r3, [r5, #12]
 80087a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087a2:	7c2b      	ldrb	r3, [r5, #16]
 80087a4:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 80087a6:	4abc      	ldr	r2, [pc, #752]	; (8008a98 <loadMenuTexts+0xc1c>)
 80087a8:	4bbc      	ldr	r3, [pc, #752]	; (8008a9c <loadMenuTexts+0xc20>)
 80087aa:	4614      	mov	r4, r2
 80087ac:	461d      	mov	r5, r3
 80087ae:	6828      	ldr	r0, [r5, #0]
 80087b0:	6869      	ldr	r1, [r5, #4]
 80087b2:	68aa      	ldr	r2, [r5, #8]
 80087b4:	68eb      	ldr	r3, [r5, #12]
 80087b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087b8:	7c2b      	ldrb	r3, [r5, #16]
 80087ba:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 80087bc:	4ab8      	ldr	r2, [pc, #736]	; (8008aa0 <loadMenuTexts+0xc24>)
 80087be:	4bb9      	ldr	r3, [pc, #740]	; (8008aa4 <loadMenuTexts+0xc28>)
 80087c0:	4614      	mov	r4, r2
 80087c2:	461d      	mov	r5, r3
 80087c4:	6828      	ldr	r0, [r5, #0]
 80087c6:	6869      	ldr	r1, [r5, #4]
 80087c8:	68aa      	ldr	r2, [r5, #8]
 80087ca:	68eb      	ldr	r3, [r5, #12]
 80087cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087ce:	7c2b      	ldrb	r3, [r5, #16]
 80087d0:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 80087d2:	4ab5      	ldr	r2, [pc, #724]	; (8008aa8 <loadMenuTexts+0xc2c>)
 80087d4:	4bb5      	ldr	r3, [pc, #724]	; (8008aac <loadMenuTexts+0xc30>)
 80087d6:	4614      	mov	r4, r2
 80087d8:	461d      	mov	r5, r3
 80087da:	6828      	ldr	r0, [r5, #0]
 80087dc:	6869      	ldr	r1, [r5, #4]
 80087de:	68aa      	ldr	r2, [r5, #8]
 80087e0:	68eb      	ldr	r3, [r5, #12]
 80087e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087e4:	7c2b      	ldrb	r3, [r5, #16]
 80087e6:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 80087e8:	4ab1      	ldr	r2, [pc, #708]	; (8008ab0 <loadMenuTexts+0xc34>)
 80087ea:	4bb2      	ldr	r3, [pc, #712]	; (8008ab4 <loadMenuTexts+0xc38>)
 80087ec:	4614      	mov	r4, r2
 80087ee:	461d      	mov	r5, r3
 80087f0:	6828      	ldr	r0, [r5, #0]
 80087f2:	6869      	ldr	r1, [r5, #4]
 80087f4:	68aa      	ldr	r2, [r5, #8]
 80087f6:	68eb      	ldr	r3, [r5, #12]
 80087f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087fa:	7c2b      	ldrb	r3, [r5, #16]
 80087fc:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 80087fe:	4aae      	ldr	r2, [pc, #696]	; (8008ab8 <loadMenuTexts+0xc3c>)
 8008800:	4bae      	ldr	r3, [pc, #696]	; (8008abc <loadMenuTexts+0xc40>)
 8008802:	4614      	mov	r4, r2
 8008804:	461d      	mov	r5, r3
 8008806:	6828      	ldr	r0, [r5, #0]
 8008808:	6869      	ldr	r1, [r5, #4]
 800880a:	68aa      	ldr	r2, [r5, #8]
 800880c:	68eb      	ldr	r3, [r5, #12]
 800880e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008810:	7c2b      	ldrb	r3, [r5, #16]
 8008812:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8008814:	4aaa      	ldr	r2, [pc, #680]	; (8008ac0 <loadMenuTexts+0xc44>)
 8008816:	4bab      	ldr	r3, [pc, #684]	; (8008ac4 <loadMenuTexts+0xc48>)
 8008818:	4614      	mov	r4, r2
 800881a:	461d      	mov	r5, r3
 800881c:	6828      	ldr	r0, [r5, #0]
 800881e:	6869      	ldr	r1, [r5, #4]
 8008820:	68aa      	ldr	r2, [r5, #8]
 8008822:	68eb      	ldr	r3, [r5, #12]
 8008824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008826:	7c2b      	ldrb	r3, [r5, #16]
 8008828:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 800882a:	4aa7      	ldr	r2, [pc, #668]	; (8008ac8 <loadMenuTexts+0xc4c>)
 800882c:	4ba7      	ldr	r3, [pc, #668]	; (8008acc <loadMenuTexts+0xc50>)
 800882e:	4614      	mov	r4, r2
 8008830:	461d      	mov	r5, r3
 8008832:	6828      	ldr	r0, [r5, #0]
 8008834:	6869      	ldr	r1, [r5, #4]
 8008836:	68aa      	ldr	r2, [r5, #8]
 8008838:	68eb      	ldr	r3, [r5, #12]
 800883a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800883c:	7c2b      	ldrb	r3, [r5, #16]
 800883e:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8008840:	4aa3      	ldr	r2, [pc, #652]	; (8008ad0 <loadMenuTexts+0xc54>)
 8008842:	4ba4      	ldr	r3, [pc, #656]	; (8008ad4 <loadMenuTexts+0xc58>)
 8008844:	4614      	mov	r4, r2
 8008846:	461d      	mov	r5, r3
 8008848:	6828      	ldr	r0, [r5, #0]
 800884a:	6869      	ldr	r1, [r5, #4]
 800884c:	68aa      	ldr	r2, [r5, #8]
 800884e:	68eb      	ldr	r3, [r5, #12]
 8008850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008852:	7c2b      	ldrb	r3, [r5, #16]
 8008854:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8008856:	4aa0      	ldr	r2, [pc, #640]	; (8008ad8 <loadMenuTexts+0xc5c>)
 8008858:	4ba0      	ldr	r3, [pc, #640]	; (8008adc <loadMenuTexts+0xc60>)
 800885a:	4614      	mov	r4, r2
 800885c:	461d      	mov	r5, r3
 800885e:	6828      	ldr	r0, [r5, #0]
 8008860:	6869      	ldr	r1, [r5, #4]
 8008862:	68aa      	ldr	r2, [r5, #8]
 8008864:	68eb      	ldr	r3, [r5, #12]
 8008866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008868:	7c2b      	ldrb	r3, [r5, #16]
 800886a:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 800886c:	4a9c      	ldr	r2, [pc, #624]	; (8008ae0 <loadMenuTexts+0xc64>)
 800886e:	4b9d      	ldr	r3, [pc, #628]	; (8008ae4 <loadMenuTexts+0xc68>)
 8008870:	4614      	mov	r4, r2
 8008872:	461d      	mov	r5, r3
 8008874:	6828      	ldr	r0, [r5, #0]
 8008876:	6869      	ldr	r1, [r5, #4]
 8008878:	68aa      	ldr	r2, [r5, #8]
 800887a:	68eb      	ldr	r3, [r5, #12]
 800887c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800887e:	7c2b      	ldrb	r3, [r5, #16]
 8008880:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8008882:	4a99      	ldr	r2, [pc, #612]	; (8008ae8 <loadMenuTexts+0xc6c>)
 8008884:	4b99      	ldr	r3, [pc, #612]	; (8008aec <loadMenuTexts+0xc70>)
 8008886:	4614      	mov	r4, r2
 8008888:	461d      	mov	r5, r3
 800888a:	6828      	ldr	r0, [r5, #0]
 800888c:	6869      	ldr	r1, [r5, #4]
 800888e:	68aa      	ldr	r2, [r5, #8]
 8008890:	68eb      	ldr	r3, [r5, #12]
 8008892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008894:	7c2b      	ldrb	r3, [r5, #16]
 8008896:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8008898:	4a95      	ldr	r2, [pc, #596]	; (8008af0 <loadMenuTexts+0xc74>)
 800889a:	4b96      	ldr	r3, [pc, #600]	; (8008af4 <loadMenuTexts+0xc78>)
 800889c:	4614      	mov	r4, r2
 800889e:	461d      	mov	r5, r3
 80088a0:	6828      	ldr	r0, [r5, #0]
 80088a2:	6869      	ldr	r1, [r5, #4]
 80088a4:	68aa      	ldr	r2, [r5, #8]
 80088a6:	68eb      	ldr	r3, [r5, #12]
 80088a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088aa:	7c2b      	ldrb	r3, [r5, #16]
 80088ac:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 80088ae:	4a92      	ldr	r2, [pc, #584]	; (8008af8 <loadMenuTexts+0xc7c>)
 80088b0:	4b92      	ldr	r3, [pc, #584]	; (8008afc <loadMenuTexts+0xc80>)
 80088b2:	4614      	mov	r4, r2
 80088b4:	461d      	mov	r5, r3
 80088b6:	6828      	ldr	r0, [r5, #0]
 80088b8:	6869      	ldr	r1, [r5, #4]
 80088ba:	68aa      	ldr	r2, [r5, #8]
 80088bc:	68eb      	ldr	r3, [r5, #12]
 80088be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088c0:	7c2b      	ldrb	r3, [r5, #16]
 80088c2:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 80088c4:	4a8e      	ldr	r2, [pc, #568]	; (8008b00 <loadMenuTexts+0xc84>)
 80088c6:	4b8f      	ldr	r3, [pc, #572]	; (8008b04 <loadMenuTexts+0xc88>)
 80088c8:	4614      	mov	r4, r2
 80088ca:	461d      	mov	r5, r3
 80088cc:	6828      	ldr	r0, [r5, #0]
 80088ce:	6869      	ldr	r1, [r5, #4]
 80088d0:	68aa      	ldr	r2, [r5, #8]
 80088d2:	68eb      	ldr	r3, [r5, #12]
 80088d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088d6:	7c2b      	ldrb	r3, [r5, #16]
 80088d8:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 80088da:	4a8b      	ldr	r2, [pc, #556]	; (8008b08 <loadMenuTexts+0xc8c>)
 80088dc:	4b8b      	ldr	r3, [pc, #556]	; (8008b0c <loadMenuTexts+0xc90>)
 80088de:	4614      	mov	r4, r2
 80088e0:	461d      	mov	r5, r3
 80088e2:	6828      	ldr	r0, [r5, #0]
 80088e4:	6869      	ldr	r1, [r5, #4]
 80088e6:	68aa      	ldr	r2, [r5, #8]
 80088e8:	68eb      	ldr	r3, [r5, #12]
 80088ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088ec:	7c2b      	ldrb	r3, [r5, #16]
 80088ee:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 80088f0:	4a87      	ldr	r2, [pc, #540]	; (8008b10 <loadMenuTexts+0xc94>)
 80088f2:	4b88      	ldr	r3, [pc, #544]	; (8008b14 <loadMenuTexts+0xc98>)
 80088f4:	4614      	mov	r4, r2
 80088f6:	461d      	mov	r5, r3
 80088f8:	6828      	ldr	r0, [r5, #0]
 80088fa:	6869      	ldr	r1, [r5, #4]
 80088fc:	68aa      	ldr	r2, [r5, #8]
 80088fe:	68eb      	ldr	r3, [r5, #12]
 8008900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008902:	7c2b      	ldrb	r3, [r5, #16]
 8008904:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8008906:	4a84      	ldr	r2, [pc, #528]	; (8008b18 <loadMenuTexts+0xc9c>)
 8008908:	4b84      	ldr	r3, [pc, #528]	; (8008b1c <loadMenuTexts+0xca0>)
 800890a:	4614      	mov	r4, r2
 800890c:	461d      	mov	r5, r3
 800890e:	6828      	ldr	r0, [r5, #0]
 8008910:	6869      	ldr	r1, [r5, #4]
 8008912:	68aa      	ldr	r2, [r5, #8]
 8008914:	68eb      	ldr	r3, [r5, #12]
 8008916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008918:	7c2b      	ldrb	r3, [r5, #16]
 800891a:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 800891c:	4a80      	ldr	r2, [pc, #512]	; (8008b20 <loadMenuTexts+0xca4>)
 800891e:	4b81      	ldr	r3, [pc, #516]	; (8008b24 <loadMenuTexts+0xca8>)
 8008920:	4614      	mov	r4, r2
 8008922:	461d      	mov	r5, r3
 8008924:	6828      	ldr	r0, [r5, #0]
 8008926:	6869      	ldr	r1, [r5, #4]
 8008928:	68aa      	ldr	r2, [r5, #8]
 800892a:	68eb      	ldr	r3, [r5, #12]
 800892c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800892e:	7c2b      	ldrb	r3, [r5, #16]
 8008930:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8008932:	4a7d      	ldr	r2, [pc, #500]	; (8008b28 <loadMenuTexts+0xcac>)
 8008934:	4b7d      	ldr	r3, [pc, #500]	; (8008b2c <loadMenuTexts+0xcb0>)
 8008936:	4614      	mov	r4, r2
 8008938:	461d      	mov	r5, r3
 800893a:	6828      	ldr	r0, [r5, #0]
 800893c:	6869      	ldr	r1, [r5, #4]
 800893e:	68aa      	ldr	r2, [r5, #8]
 8008940:	68eb      	ldr	r3, [r5, #12]
 8008942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008944:	7c2b      	ldrb	r3, [r5, #16]
 8008946:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8008948:	4a79      	ldr	r2, [pc, #484]	; (8008b30 <loadMenuTexts+0xcb4>)
 800894a:	4b7a      	ldr	r3, [pc, #488]	; (8008b34 <loadMenuTexts+0xcb8>)
 800894c:	4614      	mov	r4, r2
 800894e:	461d      	mov	r5, r3
 8008950:	6828      	ldr	r0, [r5, #0]
 8008952:	6869      	ldr	r1, [r5, #4]
 8008954:	68aa      	ldr	r2, [r5, #8]
 8008956:	68eb      	ldr	r3, [r5, #12]
 8008958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800895a:	7c2b      	ldrb	r3, [r5, #16]
 800895c:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 800895e:	4a76      	ldr	r2, [pc, #472]	; (8008b38 <loadMenuTexts+0xcbc>)
 8008960:	4b76      	ldr	r3, [pc, #472]	; (8008b3c <loadMenuTexts+0xcc0>)
 8008962:	4614      	mov	r4, r2
 8008964:	461d      	mov	r5, r3
 8008966:	6828      	ldr	r0, [r5, #0]
 8008968:	6869      	ldr	r1, [r5, #4]
 800896a:	68aa      	ldr	r2, [r5, #8]
 800896c:	68eb      	ldr	r3, [r5, #12]
 800896e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008970:	7c2b      	ldrb	r3, [r5, #16]
 8008972:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8008974:	4a72      	ldr	r2, [pc, #456]	; (8008b40 <loadMenuTexts+0xcc4>)
 8008976:	4b73      	ldr	r3, [pc, #460]	; (8008b44 <loadMenuTexts+0xcc8>)
 8008978:	4614      	mov	r4, r2
 800897a:	461d      	mov	r5, r3
 800897c:	6828      	ldr	r0, [r5, #0]
 800897e:	6869      	ldr	r1, [r5, #4]
 8008980:	68aa      	ldr	r2, [r5, #8]
 8008982:	68eb      	ldr	r3, [r5, #12]
 8008984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008986:	7c2b      	ldrb	r3, [r5, #16]
 8008988:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 800898a:	4a6f      	ldr	r2, [pc, #444]	; (8008b48 <loadMenuTexts+0xccc>)
 800898c:	4b6f      	ldr	r3, [pc, #444]	; (8008b4c <loadMenuTexts+0xcd0>)
 800898e:	4614      	mov	r4, r2
 8008990:	461d      	mov	r5, r3
 8008992:	6828      	ldr	r0, [r5, #0]
 8008994:	6869      	ldr	r1, [r5, #4]
 8008996:	68aa      	ldr	r2, [r5, #8]
 8008998:	68eb      	ldr	r3, [r5, #12]
 800899a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800899c:	7c2b      	ldrb	r3, [r5, #16]
 800899e:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 80089a0:	4a6b      	ldr	r2, [pc, #428]	; (8008b50 <loadMenuTexts+0xcd4>)
 80089a2:	4b6c      	ldr	r3, [pc, #432]	; (8008b54 <loadMenuTexts+0xcd8>)
 80089a4:	4614      	mov	r4, r2
 80089a6:	461d      	mov	r5, r3
 80089a8:	6828      	ldr	r0, [r5, #0]
 80089aa:	6869      	ldr	r1, [r5, #4]
 80089ac:	68aa      	ldr	r2, [r5, #8]
 80089ae:	68eb      	ldr	r3, [r5, #12]
 80089b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089b2:	7c2b      	ldrb	r3, [r5, #16]
 80089b4:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 80089b6:	4a68      	ldr	r2, [pc, #416]	; (8008b58 <loadMenuTexts+0xcdc>)
 80089b8:	4b68      	ldr	r3, [pc, #416]	; (8008b5c <loadMenuTexts+0xce0>)
 80089ba:	4614      	mov	r4, r2
 80089bc:	461d      	mov	r5, r3
 80089be:	6828      	ldr	r0, [r5, #0]
 80089c0:	6869      	ldr	r1, [r5, #4]
 80089c2:	68aa      	ldr	r2, [r5, #8]
 80089c4:	68eb      	ldr	r3, [r5, #12]
 80089c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089c8:	7c2b      	ldrb	r3, [r5, #16]
 80089ca:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 80089cc:	4a64      	ldr	r2, [pc, #400]	; (8008b60 <loadMenuTexts+0xce4>)
 80089ce:	4b65      	ldr	r3, [pc, #404]	; (8008b64 <loadMenuTexts+0xce8>)
 80089d0:	4614      	mov	r4, r2
 80089d2:	461d      	mov	r5, r3
 80089d4:	6828      	ldr	r0, [r5, #0]
 80089d6:	6869      	ldr	r1, [r5, #4]
 80089d8:	68aa      	ldr	r2, [r5, #8]
 80089da:	68eb      	ldr	r3, [r5, #12]
 80089dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089de:	7c2b      	ldrb	r3, [r5, #16]
 80089e0:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 80089e2:	4a61      	ldr	r2, [pc, #388]	; (8008b68 <loadMenuTexts+0xcec>)
 80089e4:	4b61      	ldr	r3, [pc, #388]	; (8008b6c <loadMenuTexts+0xcf0>)
 80089e6:	4614      	mov	r4, r2
 80089e8:	461d      	mov	r5, r3
 80089ea:	6828      	ldr	r0, [r5, #0]
 80089ec:	6869      	ldr	r1, [r5, #4]
 80089ee:	68aa      	ldr	r2, [r5, #8]
 80089f0:	68eb      	ldr	r3, [r5, #12]
 80089f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089f4:	7c2b      	ldrb	r3, [r5, #16]
 80089f6:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 80089f8:	4a5d      	ldr	r2, [pc, #372]	; (8008b70 <loadMenuTexts+0xcf4>)
 80089fa:	4b5e      	ldr	r3, [pc, #376]	; (8008b74 <loadMenuTexts+0xcf8>)
 80089fc:	4614      	mov	r4, r2
 80089fe:	461d      	mov	r5, r3
 8008a00:	6828      	ldr	r0, [r5, #0]
 8008a02:	6869      	ldr	r1, [r5, #4]
 8008a04:	68aa      	ldr	r2, [r5, #8]
 8008a06:	68eb      	ldr	r3, [r5, #12]
 8008a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a0a:	7c2b      	ldrb	r3, [r5, #16]
 8008a0c:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8008a0e:	4a5a      	ldr	r2, [pc, #360]	; (8008b78 <loadMenuTexts+0xcfc>)
 8008a10:	4b5a      	ldr	r3, [pc, #360]	; (8008b7c <loadMenuTexts+0xd00>)
 8008a12:	4614      	mov	r4, r2
 8008a14:	461d      	mov	r5, r3
 8008a16:	6828      	ldr	r0, [r5, #0]
 8008a18:	6869      	ldr	r1, [r5, #4]
 8008a1a:	68aa      	ldr	r2, [r5, #8]
 8008a1c:	68eb      	ldr	r3, [r5, #12]
 8008a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a20:	7c2b      	ldrb	r3, [r5, #16]
 8008a22:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8008a24:	4a56      	ldr	r2, [pc, #344]	; (8008b80 <loadMenuTexts+0xd04>)
 8008a26:	4b57      	ldr	r3, [pc, #348]	; (8008b84 <loadMenuTexts+0xd08>)
 8008a28:	4614      	mov	r4, r2
 8008a2a:	461d      	mov	r5, r3
 8008a2c:	6828      	ldr	r0, [r5, #0]
 8008a2e:	6869      	ldr	r1, [r5, #4]
 8008a30:	68aa      	ldr	r2, [r5, #8]
 8008a32:	68eb      	ldr	r3, [r5, #12]
 8008a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a36:	7c2b      	ldrb	r3, [r5, #16]
 8008a38:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8008a3a:	4a53      	ldr	r2, [pc, #332]	; (8008b88 <loadMenuTexts+0xd0c>)
 8008a3c:	4b53      	ldr	r3, [pc, #332]	; (8008b8c <loadMenuTexts+0xd10>)
 8008a3e:	4614      	mov	r4, r2
 8008a40:	461d      	mov	r5, r3
 8008a42:	6828      	ldr	r0, [r5, #0]
 8008a44:	6869      	ldr	r1, [r5, #4]
 8008a46:	68aa      	ldr	r2, [r5, #8]
 8008a48:	68eb      	ldr	r3, [r5, #12]
 8008a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a4c:	7c2b      	ldrb	r3, [r5, #16]
 8008a4e:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8008a50:	4a4f      	ldr	r2, [pc, #316]	; (8008b90 <loadMenuTexts+0xd14>)
 8008a52:	4b50      	ldr	r3, [pc, #320]	; (8008b94 <loadMenuTexts+0xd18>)
 8008a54:	4614      	mov	r4, r2
 8008a56:	461d      	mov	r5, r3
 8008a58:	6828      	ldr	r0, [r5, #0]
 8008a5a:	6869      	ldr	r1, [r5, #4]
 8008a5c:	68aa      	ldr	r2, [r5, #8]
 8008a5e:	68eb      	ldr	r3, [r5, #12]
 8008a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a62:	7c2b      	ldrb	r3, [r5, #16]
 8008a64:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8008a66:	4a4c      	ldr	r2, [pc, #304]	; (8008b98 <loadMenuTexts+0xd1c>)
 8008a68:	4b4c      	ldr	r3, [pc, #304]	; (8008b9c <loadMenuTexts+0xd20>)
 8008a6a:	4614      	mov	r4, r2
 8008a6c:	461d      	mov	r5, r3
 8008a6e:	6828      	ldr	r0, [r5, #0]
 8008a70:	6869      	ldr	r1, [r5, #4]
 8008a72:	68aa      	ldr	r2, [r5, #8]
 8008a74:	68eb      	ldr	r3, [r5, #12]
 8008a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a78:	7c2b      	ldrb	r3, [r5, #16]
 8008a7a:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8008a7c:	4a48      	ldr	r2, [pc, #288]	; (8008ba0 <loadMenuTexts+0xd24>)
 8008a7e:	e091      	b.n	8008ba4 <loadMenuTexts+0xd28>
 8008a80:	20001254 	.word	0x20001254
 8008a84:	20000698 	.word	0x20000698
 8008a88:	20001268 	.word	0x20001268
 8008a8c:	200006ac 	.word	0x200006ac
 8008a90:	2000127c 	.word	0x2000127c
 8008a94:	200006c0 	.word	0x200006c0
 8008a98:	20001290 	.word	0x20001290
 8008a9c:	200006d4 	.word	0x200006d4
 8008aa0:	200012a4 	.word	0x200012a4
 8008aa4:	200006e8 	.word	0x200006e8
 8008aa8:	200012b8 	.word	0x200012b8
 8008aac:	200006fc 	.word	0x200006fc
 8008ab0:	200012cc 	.word	0x200012cc
 8008ab4:	20000710 	.word	0x20000710
 8008ab8:	200012e0 	.word	0x200012e0
 8008abc:	20000724 	.word	0x20000724
 8008ac0:	200012f4 	.word	0x200012f4
 8008ac4:	20000738 	.word	0x20000738
 8008ac8:	20001308 	.word	0x20001308
 8008acc:	2000074c 	.word	0x2000074c
 8008ad0:	2000131c 	.word	0x2000131c
 8008ad4:	20000760 	.word	0x20000760
 8008ad8:	20001330 	.word	0x20001330
 8008adc:	20000774 	.word	0x20000774
 8008ae0:	20001344 	.word	0x20001344
 8008ae4:	20000788 	.word	0x20000788
 8008ae8:	20001358 	.word	0x20001358
 8008aec:	2000079c 	.word	0x2000079c
 8008af0:	2000136c 	.word	0x2000136c
 8008af4:	200007b0 	.word	0x200007b0
 8008af8:	20001380 	.word	0x20001380
 8008afc:	200007c4 	.word	0x200007c4
 8008b00:	20001394 	.word	0x20001394
 8008b04:	200007d8 	.word	0x200007d8
 8008b08:	200013a8 	.word	0x200013a8
 8008b0c:	200007ec 	.word	0x200007ec
 8008b10:	200013bc 	.word	0x200013bc
 8008b14:	20000800 	.word	0x20000800
 8008b18:	200013d0 	.word	0x200013d0
 8008b1c:	20000814 	.word	0x20000814
 8008b20:	200013e4 	.word	0x200013e4
 8008b24:	20000828 	.word	0x20000828
 8008b28:	200013f8 	.word	0x200013f8
 8008b2c:	2000083c 	.word	0x2000083c
 8008b30:	2000140c 	.word	0x2000140c
 8008b34:	20000850 	.word	0x20000850
 8008b38:	20001420 	.word	0x20001420
 8008b3c:	20000864 	.word	0x20000864
 8008b40:	20001434 	.word	0x20001434
 8008b44:	20000878 	.word	0x20000878
 8008b48:	20001448 	.word	0x20001448
 8008b4c:	2000088c 	.word	0x2000088c
 8008b50:	2000145c 	.word	0x2000145c
 8008b54:	200008a0 	.word	0x200008a0
 8008b58:	20001470 	.word	0x20001470
 8008b5c:	200008b4 	.word	0x200008b4
 8008b60:	20001484 	.word	0x20001484
 8008b64:	200008c8 	.word	0x200008c8
 8008b68:	20001498 	.word	0x20001498
 8008b6c:	200008dc 	.word	0x200008dc
 8008b70:	200014ac 	.word	0x200014ac
 8008b74:	200008f0 	.word	0x200008f0
 8008b78:	200014c0 	.word	0x200014c0
 8008b7c:	20000904 	.word	0x20000904
 8008b80:	200014d4 	.word	0x200014d4
 8008b84:	20000918 	.word	0x20000918
 8008b88:	200014e8 	.word	0x200014e8
 8008b8c:	2000092c 	.word	0x2000092c
 8008b90:	200014fc 	.word	0x200014fc
 8008b94:	20000940 	.word	0x20000940
 8008b98:	20001510 	.word	0x20001510
 8008b9c:	20000954 	.word	0x20000954
 8008ba0:	20001524 	.word	0x20001524
 8008ba4:	4bc7      	ldr	r3, [pc, #796]	; (8008ec4 <loadMenuTexts+0x1048>)
 8008ba6:	4614      	mov	r4, r2
 8008ba8:	461d      	mov	r5, r3
 8008baa:	6828      	ldr	r0, [r5, #0]
 8008bac:	6869      	ldr	r1, [r5, #4]
 8008bae:	68aa      	ldr	r2, [r5, #8]
 8008bb0:	68eb      	ldr	r3, [r5, #12]
 8008bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bb4:	7c2b      	ldrb	r3, [r5, #16]
 8008bb6:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8008bb8:	4ac3      	ldr	r2, [pc, #780]	; (8008ec8 <loadMenuTexts+0x104c>)
 8008bba:	4bc4      	ldr	r3, [pc, #784]	; (8008ecc <loadMenuTexts+0x1050>)
 8008bbc:	4614      	mov	r4, r2
 8008bbe:	461d      	mov	r5, r3
 8008bc0:	6828      	ldr	r0, [r5, #0]
 8008bc2:	6869      	ldr	r1, [r5, #4]
 8008bc4:	68aa      	ldr	r2, [r5, #8]
 8008bc6:	68eb      	ldr	r3, [r5, #12]
 8008bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bca:	7c2b      	ldrb	r3, [r5, #16]
 8008bcc:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8008bce:	4ac0      	ldr	r2, [pc, #768]	; (8008ed0 <loadMenuTexts+0x1054>)
 8008bd0:	4bc0      	ldr	r3, [pc, #768]	; (8008ed4 <loadMenuTexts+0x1058>)
 8008bd2:	4614      	mov	r4, r2
 8008bd4:	461d      	mov	r5, r3
 8008bd6:	6828      	ldr	r0, [r5, #0]
 8008bd8:	6869      	ldr	r1, [r5, #4]
 8008bda:	68aa      	ldr	r2, [r5, #8]
 8008bdc:	68eb      	ldr	r3, [r5, #12]
 8008bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008be0:	7c2b      	ldrb	r3, [r5, #16]
 8008be2:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8008be4:	4abc      	ldr	r2, [pc, #752]	; (8008ed8 <loadMenuTexts+0x105c>)
 8008be6:	4bbd      	ldr	r3, [pc, #756]	; (8008edc <loadMenuTexts+0x1060>)
 8008be8:	4614      	mov	r4, r2
 8008bea:	461d      	mov	r5, r3
 8008bec:	6828      	ldr	r0, [r5, #0]
 8008bee:	6869      	ldr	r1, [r5, #4]
 8008bf0:	68aa      	ldr	r2, [r5, #8]
 8008bf2:	68eb      	ldr	r3, [r5, #12]
 8008bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bf6:	7c2b      	ldrb	r3, [r5, #16]
 8008bf8:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8008bfa:	4ab9      	ldr	r2, [pc, #740]	; (8008ee0 <loadMenuTexts+0x1064>)
 8008bfc:	4bb9      	ldr	r3, [pc, #740]	; (8008ee4 <loadMenuTexts+0x1068>)
 8008bfe:	4614      	mov	r4, r2
 8008c00:	461d      	mov	r5, r3
 8008c02:	6828      	ldr	r0, [r5, #0]
 8008c04:	6869      	ldr	r1, [r5, #4]
 8008c06:	68aa      	ldr	r2, [r5, #8]
 8008c08:	68eb      	ldr	r3, [r5, #12]
 8008c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c0c:	7c2b      	ldrb	r3, [r5, #16]
 8008c0e:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8008c10:	4ab5      	ldr	r2, [pc, #724]	; (8008ee8 <loadMenuTexts+0x106c>)
 8008c12:	4bb6      	ldr	r3, [pc, #728]	; (8008eec <loadMenuTexts+0x1070>)
 8008c14:	4614      	mov	r4, r2
 8008c16:	461d      	mov	r5, r3
 8008c18:	6828      	ldr	r0, [r5, #0]
 8008c1a:	6869      	ldr	r1, [r5, #4]
 8008c1c:	68aa      	ldr	r2, [r5, #8]
 8008c1e:	68eb      	ldr	r3, [r5, #12]
 8008c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c22:	7c2b      	ldrb	r3, [r5, #16]
 8008c24:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8008c26:	4ab2      	ldr	r2, [pc, #712]	; (8008ef0 <loadMenuTexts+0x1074>)
 8008c28:	4bb2      	ldr	r3, [pc, #712]	; (8008ef4 <loadMenuTexts+0x1078>)
 8008c2a:	4614      	mov	r4, r2
 8008c2c:	461d      	mov	r5, r3
 8008c2e:	6828      	ldr	r0, [r5, #0]
 8008c30:	6869      	ldr	r1, [r5, #4]
 8008c32:	68aa      	ldr	r2, [r5, #8]
 8008c34:	68eb      	ldr	r3, [r5, #12]
 8008c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c38:	7c2b      	ldrb	r3, [r5, #16]
 8008c3a:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8008c3c:	4aae      	ldr	r2, [pc, #696]	; (8008ef8 <loadMenuTexts+0x107c>)
 8008c3e:	4baf      	ldr	r3, [pc, #700]	; (8008efc <loadMenuTexts+0x1080>)
 8008c40:	4614      	mov	r4, r2
 8008c42:	461d      	mov	r5, r3
 8008c44:	6828      	ldr	r0, [r5, #0]
 8008c46:	6869      	ldr	r1, [r5, #4]
 8008c48:	68aa      	ldr	r2, [r5, #8]
 8008c4a:	68eb      	ldr	r3, [r5, #12]
 8008c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c4e:	7c2b      	ldrb	r3, [r5, #16]
 8008c50:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8008c52:	4aab      	ldr	r2, [pc, #684]	; (8008f00 <loadMenuTexts+0x1084>)
 8008c54:	4bab      	ldr	r3, [pc, #684]	; (8008f04 <loadMenuTexts+0x1088>)
 8008c56:	4614      	mov	r4, r2
 8008c58:	461d      	mov	r5, r3
 8008c5a:	6828      	ldr	r0, [r5, #0]
 8008c5c:	6869      	ldr	r1, [r5, #4]
 8008c5e:	68aa      	ldr	r2, [r5, #8]
 8008c60:	68eb      	ldr	r3, [r5, #12]
 8008c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c64:	7c2b      	ldrb	r3, [r5, #16]
 8008c66:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8008c68:	4aa7      	ldr	r2, [pc, #668]	; (8008f08 <loadMenuTexts+0x108c>)
 8008c6a:	4ba8      	ldr	r3, [pc, #672]	; (8008f0c <loadMenuTexts+0x1090>)
 8008c6c:	4614      	mov	r4, r2
 8008c6e:	461d      	mov	r5, r3
 8008c70:	6828      	ldr	r0, [r5, #0]
 8008c72:	6869      	ldr	r1, [r5, #4]
 8008c74:	68aa      	ldr	r2, [r5, #8]
 8008c76:	68eb      	ldr	r3, [r5, #12]
 8008c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c7a:	7c2b      	ldrb	r3, [r5, #16]
 8008c7c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8008c7e:	4aa4      	ldr	r2, [pc, #656]	; (8008f10 <loadMenuTexts+0x1094>)
 8008c80:	4ba4      	ldr	r3, [pc, #656]	; (8008f14 <loadMenuTexts+0x1098>)
 8008c82:	4614      	mov	r4, r2
 8008c84:	461d      	mov	r5, r3
 8008c86:	6828      	ldr	r0, [r5, #0]
 8008c88:	6869      	ldr	r1, [r5, #4]
 8008c8a:	68aa      	ldr	r2, [r5, #8]
 8008c8c:	68eb      	ldr	r3, [r5, #12]
 8008c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c90:	7c2b      	ldrb	r3, [r5, #16]
 8008c92:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8008c94:	4aa0      	ldr	r2, [pc, #640]	; (8008f18 <loadMenuTexts+0x109c>)
 8008c96:	4ba1      	ldr	r3, [pc, #644]	; (8008f1c <loadMenuTexts+0x10a0>)
 8008c98:	4614      	mov	r4, r2
 8008c9a:	461d      	mov	r5, r3
 8008c9c:	6828      	ldr	r0, [r5, #0]
 8008c9e:	6869      	ldr	r1, [r5, #4]
 8008ca0:	68aa      	ldr	r2, [r5, #8]
 8008ca2:	68eb      	ldr	r3, [r5, #12]
 8008ca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ca6:	7c2b      	ldrb	r3, [r5, #16]
 8008ca8:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8008caa:	4a9d      	ldr	r2, [pc, #628]	; (8008f20 <loadMenuTexts+0x10a4>)
 8008cac:	4b9d      	ldr	r3, [pc, #628]	; (8008f24 <loadMenuTexts+0x10a8>)
 8008cae:	4614      	mov	r4, r2
 8008cb0:	461d      	mov	r5, r3
 8008cb2:	6828      	ldr	r0, [r5, #0]
 8008cb4:	6869      	ldr	r1, [r5, #4]
 8008cb6:	68aa      	ldr	r2, [r5, #8]
 8008cb8:	68eb      	ldr	r3, [r5, #12]
 8008cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cbc:	7c2b      	ldrb	r3, [r5, #16]
 8008cbe:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8008cc0:	4a99      	ldr	r2, [pc, #612]	; (8008f28 <loadMenuTexts+0x10ac>)
 8008cc2:	4b9a      	ldr	r3, [pc, #616]	; (8008f2c <loadMenuTexts+0x10b0>)
 8008cc4:	4614      	mov	r4, r2
 8008cc6:	461d      	mov	r5, r3
 8008cc8:	6828      	ldr	r0, [r5, #0]
 8008cca:	6869      	ldr	r1, [r5, #4]
 8008ccc:	68aa      	ldr	r2, [r5, #8]
 8008cce:	68eb      	ldr	r3, [r5, #12]
 8008cd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cd2:	7c2b      	ldrb	r3, [r5, #16]
 8008cd4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8008cd6:	4a96      	ldr	r2, [pc, #600]	; (8008f30 <loadMenuTexts+0x10b4>)
 8008cd8:	4b96      	ldr	r3, [pc, #600]	; (8008f34 <loadMenuTexts+0x10b8>)
 8008cda:	4614      	mov	r4, r2
 8008cdc:	461d      	mov	r5, r3
 8008cde:	6828      	ldr	r0, [r5, #0]
 8008ce0:	6869      	ldr	r1, [r5, #4]
 8008ce2:	68aa      	ldr	r2, [r5, #8]
 8008ce4:	68eb      	ldr	r3, [r5, #12]
 8008ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ce8:	7c2b      	ldrb	r3, [r5, #16]
 8008cea:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8008cec:	4a92      	ldr	r2, [pc, #584]	; (8008f38 <loadMenuTexts+0x10bc>)
 8008cee:	4b93      	ldr	r3, [pc, #588]	; (8008f3c <loadMenuTexts+0x10c0>)
 8008cf0:	4614      	mov	r4, r2
 8008cf2:	461d      	mov	r5, r3
 8008cf4:	6828      	ldr	r0, [r5, #0]
 8008cf6:	6869      	ldr	r1, [r5, #4]
 8008cf8:	68aa      	ldr	r2, [r5, #8]
 8008cfa:	68eb      	ldr	r3, [r5, #12]
 8008cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cfe:	7c2b      	ldrb	r3, [r5, #16]
 8008d00:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8008d02:	4a8f      	ldr	r2, [pc, #572]	; (8008f40 <loadMenuTexts+0x10c4>)
 8008d04:	4b8f      	ldr	r3, [pc, #572]	; (8008f44 <loadMenuTexts+0x10c8>)
 8008d06:	4614      	mov	r4, r2
 8008d08:	461d      	mov	r5, r3
 8008d0a:	6828      	ldr	r0, [r5, #0]
 8008d0c:	6869      	ldr	r1, [r5, #4]
 8008d0e:	68aa      	ldr	r2, [r5, #8]
 8008d10:	68eb      	ldr	r3, [r5, #12]
 8008d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d14:	7c2b      	ldrb	r3, [r5, #16]
 8008d16:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8008d18:	4a8b      	ldr	r2, [pc, #556]	; (8008f48 <loadMenuTexts+0x10cc>)
 8008d1a:	4b8c      	ldr	r3, [pc, #560]	; (8008f4c <loadMenuTexts+0x10d0>)
 8008d1c:	4614      	mov	r4, r2
 8008d1e:	461d      	mov	r5, r3
 8008d20:	6828      	ldr	r0, [r5, #0]
 8008d22:	6869      	ldr	r1, [r5, #4]
 8008d24:	68aa      	ldr	r2, [r5, #8]
 8008d26:	68eb      	ldr	r3, [r5, #12]
 8008d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d2a:	7c2b      	ldrb	r3, [r5, #16]
 8008d2c:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8008d2e:	4a88      	ldr	r2, [pc, #544]	; (8008f50 <loadMenuTexts+0x10d4>)
 8008d30:	4b88      	ldr	r3, [pc, #544]	; (8008f54 <loadMenuTexts+0x10d8>)
 8008d32:	4614      	mov	r4, r2
 8008d34:	461d      	mov	r5, r3
 8008d36:	6828      	ldr	r0, [r5, #0]
 8008d38:	6869      	ldr	r1, [r5, #4]
 8008d3a:	68aa      	ldr	r2, [r5, #8]
 8008d3c:	68eb      	ldr	r3, [r5, #12]
 8008d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d40:	7c2b      	ldrb	r3, [r5, #16]
 8008d42:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8008d44:	4a84      	ldr	r2, [pc, #528]	; (8008f58 <loadMenuTexts+0x10dc>)
 8008d46:	4b85      	ldr	r3, [pc, #532]	; (8008f5c <loadMenuTexts+0x10e0>)
 8008d48:	4614      	mov	r4, r2
 8008d4a:	461d      	mov	r5, r3
 8008d4c:	6828      	ldr	r0, [r5, #0]
 8008d4e:	6869      	ldr	r1, [r5, #4]
 8008d50:	68aa      	ldr	r2, [r5, #8]
 8008d52:	68eb      	ldr	r3, [r5, #12]
 8008d54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d56:	7c2b      	ldrb	r3, [r5, #16]
 8008d58:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8008d5a:	4a81      	ldr	r2, [pc, #516]	; (8008f60 <loadMenuTexts+0x10e4>)
 8008d5c:	4b81      	ldr	r3, [pc, #516]	; (8008f64 <loadMenuTexts+0x10e8>)
 8008d5e:	4614      	mov	r4, r2
 8008d60:	461d      	mov	r5, r3
 8008d62:	6828      	ldr	r0, [r5, #0]
 8008d64:	6869      	ldr	r1, [r5, #4]
 8008d66:	68aa      	ldr	r2, [r5, #8]
 8008d68:	68eb      	ldr	r3, [r5, #12]
 8008d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d6c:	7c2b      	ldrb	r3, [r5, #16]
 8008d6e:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8008d70:	4a7d      	ldr	r2, [pc, #500]	; (8008f68 <loadMenuTexts+0x10ec>)
 8008d72:	4b7e      	ldr	r3, [pc, #504]	; (8008f6c <loadMenuTexts+0x10f0>)
 8008d74:	4614      	mov	r4, r2
 8008d76:	461d      	mov	r5, r3
 8008d78:	6828      	ldr	r0, [r5, #0]
 8008d7a:	6869      	ldr	r1, [r5, #4]
 8008d7c:	68aa      	ldr	r2, [r5, #8]
 8008d7e:	68eb      	ldr	r3, [r5, #12]
 8008d80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d82:	7c2b      	ldrb	r3, [r5, #16]
 8008d84:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8008d86:	4a7a      	ldr	r2, [pc, #488]	; (8008f70 <loadMenuTexts+0x10f4>)
 8008d88:	4b7a      	ldr	r3, [pc, #488]	; (8008f74 <loadMenuTexts+0x10f8>)
 8008d8a:	4614      	mov	r4, r2
 8008d8c:	461d      	mov	r5, r3
 8008d8e:	6828      	ldr	r0, [r5, #0]
 8008d90:	6869      	ldr	r1, [r5, #4]
 8008d92:	68aa      	ldr	r2, [r5, #8]
 8008d94:	68eb      	ldr	r3, [r5, #12]
 8008d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d98:	7c2b      	ldrb	r3, [r5, #16]
 8008d9a:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8008d9c:	4a76      	ldr	r2, [pc, #472]	; (8008f78 <loadMenuTexts+0x10fc>)
 8008d9e:	4b77      	ldr	r3, [pc, #476]	; (8008f7c <loadMenuTexts+0x1100>)
 8008da0:	4614      	mov	r4, r2
 8008da2:	461d      	mov	r5, r3
 8008da4:	6828      	ldr	r0, [r5, #0]
 8008da6:	6869      	ldr	r1, [r5, #4]
 8008da8:	68aa      	ldr	r2, [r5, #8]
 8008daa:	68eb      	ldr	r3, [r5, #12]
 8008dac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dae:	7c2b      	ldrb	r3, [r5, #16]
 8008db0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8008db2:	4a73      	ldr	r2, [pc, #460]	; (8008f80 <loadMenuTexts+0x1104>)
 8008db4:	4b73      	ldr	r3, [pc, #460]	; (8008f84 <loadMenuTexts+0x1108>)
 8008db6:	4614      	mov	r4, r2
 8008db8:	461d      	mov	r5, r3
 8008dba:	6828      	ldr	r0, [r5, #0]
 8008dbc:	6869      	ldr	r1, [r5, #4]
 8008dbe:	68aa      	ldr	r2, [r5, #8]
 8008dc0:	68eb      	ldr	r3, [r5, #12]
 8008dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dc4:	7c2b      	ldrb	r3, [r5, #16]
 8008dc6:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8008dc8:	4a6f      	ldr	r2, [pc, #444]	; (8008f88 <loadMenuTexts+0x110c>)
 8008dca:	4b70      	ldr	r3, [pc, #448]	; (8008f8c <loadMenuTexts+0x1110>)
 8008dcc:	4614      	mov	r4, r2
 8008dce:	461d      	mov	r5, r3
 8008dd0:	6828      	ldr	r0, [r5, #0]
 8008dd2:	6869      	ldr	r1, [r5, #4]
 8008dd4:	68aa      	ldr	r2, [r5, #8]
 8008dd6:	68eb      	ldr	r3, [r5, #12]
 8008dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dda:	7c2b      	ldrb	r3, [r5, #16]
 8008ddc:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8008dde:	4a6c      	ldr	r2, [pc, #432]	; (8008f90 <loadMenuTexts+0x1114>)
 8008de0:	4b6c      	ldr	r3, [pc, #432]	; (8008f94 <loadMenuTexts+0x1118>)
 8008de2:	4614      	mov	r4, r2
 8008de4:	461d      	mov	r5, r3
 8008de6:	6828      	ldr	r0, [r5, #0]
 8008de8:	6869      	ldr	r1, [r5, #4]
 8008dea:	68aa      	ldr	r2, [r5, #8]
 8008dec:	68eb      	ldr	r3, [r5, #12]
 8008dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008df0:	7c2b      	ldrb	r3, [r5, #16]
 8008df2:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8008df4:	4a68      	ldr	r2, [pc, #416]	; (8008f98 <loadMenuTexts+0x111c>)
 8008df6:	4b69      	ldr	r3, [pc, #420]	; (8008f9c <loadMenuTexts+0x1120>)
 8008df8:	4614      	mov	r4, r2
 8008dfa:	461d      	mov	r5, r3
 8008dfc:	6828      	ldr	r0, [r5, #0]
 8008dfe:	6869      	ldr	r1, [r5, #4]
 8008e00:	68aa      	ldr	r2, [r5, #8]
 8008e02:	68eb      	ldr	r3, [r5, #12]
 8008e04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e06:	7c2b      	ldrb	r3, [r5, #16]
 8008e08:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 8008e0a:	4a65      	ldr	r2, [pc, #404]	; (8008fa0 <loadMenuTexts+0x1124>)
 8008e0c:	4b65      	ldr	r3, [pc, #404]	; (8008fa4 <loadMenuTexts+0x1128>)
 8008e0e:	4614      	mov	r4, r2
 8008e10:	461d      	mov	r5, r3
 8008e12:	6828      	ldr	r0, [r5, #0]
 8008e14:	6869      	ldr	r1, [r5, #4]
 8008e16:	68aa      	ldr	r2, [r5, #8]
 8008e18:	68eb      	ldr	r3, [r5, #12]
 8008e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e1c:	7c2b      	ldrb	r3, [r5, #16]
 8008e1e:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8008e20:	4a61      	ldr	r2, [pc, #388]	; (8008fa8 <loadMenuTexts+0x112c>)
 8008e22:	4b62      	ldr	r3, [pc, #392]	; (8008fac <loadMenuTexts+0x1130>)
 8008e24:	4614      	mov	r4, r2
 8008e26:	461d      	mov	r5, r3
 8008e28:	6828      	ldr	r0, [r5, #0]
 8008e2a:	6869      	ldr	r1, [r5, #4]
 8008e2c:	68aa      	ldr	r2, [r5, #8]
 8008e2e:	68eb      	ldr	r3, [r5, #12]
 8008e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e32:	7c2b      	ldrb	r3, [r5, #16]
 8008e34:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 8008e36:	4a5e      	ldr	r2, [pc, #376]	; (8008fb0 <loadMenuTexts+0x1134>)
 8008e38:	4b5e      	ldr	r3, [pc, #376]	; (8008fb4 <loadMenuTexts+0x1138>)
 8008e3a:	4614      	mov	r4, r2
 8008e3c:	461d      	mov	r5, r3
 8008e3e:	6828      	ldr	r0, [r5, #0]
 8008e40:	6869      	ldr	r1, [r5, #4]
 8008e42:	68aa      	ldr	r2, [r5, #8]
 8008e44:	68eb      	ldr	r3, [r5, #12]
 8008e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e48:	7c2b      	ldrb	r3, [r5, #16]
 8008e4a:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 8008e4c:	4a5a      	ldr	r2, [pc, #360]	; (8008fb8 <loadMenuTexts+0x113c>)
 8008e4e:	4b5b      	ldr	r3, [pc, #364]	; (8008fbc <loadMenuTexts+0x1140>)
 8008e50:	4614      	mov	r4, r2
 8008e52:	461d      	mov	r5, r3
 8008e54:	6828      	ldr	r0, [r5, #0]
 8008e56:	6869      	ldr	r1, [r5, #4]
 8008e58:	68aa      	ldr	r2, [r5, #8]
 8008e5a:	68eb      	ldr	r3, [r5, #12]
 8008e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e5e:	7c2b      	ldrb	r3, [r5, #16]
 8008e60:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 8008e62:	4a57      	ldr	r2, [pc, #348]	; (8008fc0 <loadMenuTexts+0x1144>)
 8008e64:	4b57      	ldr	r3, [pc, #348]	; (8008fc4 <loadMenuTexts+0x1148>)
 8008e66:	4614      	mov	r4, r2
 8008e68:	461d      	mov	r5, r3
 8008e6a:	6828      	ldr	r0, [r5, #0]
 8008e6c:	6869      	ldr	r1, [r5, #4]
 8008e6e:	68aa      	ldr	r2, [r5, #8]
 8008e70:	68eb      	ldr	r3, [r5, #12]
 8008e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e74:	7c2b      	ldrb	r3, [r5, #16]
 8008e76:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8008e78:	4a53      	ldr	r2, [pc, #332]	; (8008fc8 <loadMenuTexts+0x114c>)
 8008e7a:	4b54      	ldr	r3, [pc, #336]	; (8008fcc <loadMenuTexts+0x1150>)
 8008e7c:	4614      	mov	r4, r2
 8008e7e:	461d      	mov	r5, r3
 8008e80:	6828      	ldr	r0, [r5, #0]
 8008e82:	6869      	ldr	r1, [r5, #4]
 8008e84:	68aa      	ldr	r2, [r5, #8]
 8008e86:	68eb      	ldr	r3, [r5, #12]
 8008e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e8a:	7c2b      	ldrb	r3, [r5, #16]
 8008e8c:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 8008e8e:	4a50      	ldr	r2, [pc, #320]	; (8008fd0 <loadMenuTexts+0x1154>)
 8008e90:	4b50      	ldr	r3, [pc, #320]	; (8008fd4 <loadMenuTexts+0x1158>)
 8008e92:	4614      	mov	r4, r2
 8008e94:	461d      	mov	r5, r3
 8008e96:	6828      	ldr	r0, [r5, #0]
 8008e98:	6869      	ldr	r1, [r5, #4]
 8008e9a:	68aa      	ldr	r2, [r5, #8]
 8008e9c:	68eb      	ldr	r3, [r5, #12]
 8008e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ea0:	7c2b      	ldrb	r3, [r5, #16]
 8008ea2:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 8008ea4:	4a4c      	ldr	r2, [pc, #304]	; (8008fd8 <loadMenuTexts+0x115c>)
 8008ea6:	4b4d      	ldr	r3, [pc, #308]	; (8008fdc <loadMenuTexts+0x1160>)
 8008ea8:	4614      	mov	r4, r2
 8008eaa:	461d      	mov	r5, r3
 8008eac:	6828      	ldr	r0, [r5, #0]
 8008eae:	6869      	ldr	r1, [r5, #4]
 8008eb0:	68aa      	ldr	r2, [r5, #8]
 8008eb2:	68eb      	ldr	r3, [r5, #12]
 8008eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008eb6:	7c2b      	ldrb	r3, [r5, #16]
 8008eb8:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 8008eba:	4a49      	ldr	r2, [pc, #292]	; (8008fe0 <loadMenuTexts+0x1164>)
 8008ebc:	4b49      	ldr	r3, [pc, #292]	; (8008fe4 <loadMenuTexts+0x1168>)
 8008ebe:	4614      	mov	r4, r2
 8008ec0:	461d      	mov	r5, r3
 8008ec2:	e091      	b.n	8008fe8 <loadMenuTexts+0x116c>
 8008ec4:	20000968 	.word	0x20000968
 8008ec8:	20001538 	.word	0x20001538
 8008ecc:	2000097c 	.word	0x2000097c
 8008ed0:	2000154c 	.word	0x2000154c
 8008ed4:	20000990 	.word	0x20000990
 8008ed8:	20001560 	.word	0x20001560
 8008edc:	200009a4 	.word	0x200009a4
 8008ee0:	20001574 	.word	0x20001574
 8008ee4:	200009b8 	.word	0x200009b8
 8008ee8:	20001588 	.word	0x20001588
 8008eec:	200009cc 	.word	0x200009cc
 8008ef0:	2000159c 	.word	0x2000159c
 8008ef4:	200009e0 	.word	0x200009e0
 8008ef8:	200015b0 	.word	0x200015b0
 8008efc:	200009f4 	.word	0x200009f4
 8008f00:	200015c4 	.word	0x200015c4
 8008f04:	20000a08 	.word	0x20000a08
 8008f08:	200015d8 	.word	0x200015d8
 8008f0c:	20000a1c 	.word	0x20000a1c
 8008f10:	200015ec 	.word	0x200015ec
 8008f14:	20000a30 	.word	0x20000a30
 8008f18:	20001600 	.word	0x20001600
 8008f1c:	20000a44 	.word	0x20000a44
 8008f20:	20001614 	.word	0x20001614
 8008f24:	20000a58 	.word	0x20000a58
 8008f28:	20001628 	.word	0x20001628
 8008f2c:	20000a6c 	.word	0x20000a6c
 8008f30:	2000163c 	.word	0x2000163c
 8008f34:	20000a80 	.word	0x20000a80
 8008f38:	20001650 	.word	0x20001650
 8008f3c:	20000a94 	.word	0x20000a94
 8008f40:	20001664 	.word	0x20001664
 8008f44:	20000aa8 	.word	0x20000aa8
 8008f48:	20001678 	.word	0x20001678
 8008f4c:	20000abc 	.word	0x20000abc
 8008f50:	2000168c 	.word	0x2000168c
 8008f54:	20000ad0 	.word	0x20000ad0
 8008f58:	200016a0 	.word	0x200016a0
 8008f5c:	20000ae4 	.word	0x20000ae4
 8008f60:	200016b4 	.word	0x200016b4
 8008f64:	20000af8 	.word	0x20000af8
 8008f68:	200016c8 	.word	0x200016c8
 8008f6c:	20000b0c 	.word	0x20000b0c
 8008f70:	200016dc 	.word	0x200016dc
 8008f74:	20000b20 	.word	0x20000b20
 8008f78:	200016f0 	.word	0x200016f0
 8008f7c:	20000b34 	.word	0x20000b34
 8008f80:	20001704 	.word	0x20001704
 8008f84:	20000b48 	.word	0x20000b48
 8008f88:	20001718 	.word	0x20001718
 8008f8c:	20000b5c 	.word	0x20000b5c
 8008f90:	2000172c 	.word	0x2000172c
 8008f94:	20000b70 	.word	0x20000b70
 8008f98:	20001740 	.word	0x20001740
 8008f9c:	20000b84 	.word	0x20000b84
 8008fa0:	20001754 	.word	0x20001754
 8008fa4:	20000b98 	.word	0x20000b98
 8008fa8:	20001768 	.word	0x20001768
 8008fac:	20000bac 	.word	0x20000bac
 8008fb0:	2000177c 	.word	0x2000177c
 8008fb4:	20000bc0 	.word	0x20000bc0
 8008fb8:	20001790 	.word	0x20001790
 8008fbc:	20000bd4 	.word	0x20000bd4
 8008fc0:	200017a4 	.word	0x200017a4
 8008fc4:	20000be8 	.word	0x20000be8
 8008fc8:	200017b8 	.word	0x200017b8
 8008fcc:	20000bfc 	.word	0x20000bfc
 8008fd0:	200017cc 	.word	0x200017cc
 8008fd4:	20000c24 	.word	0x20000c24
 8008fd8:	200017e0 	.word	0x200017e0
 8008fdc:	20000c4c 	.word	0x20000c4c
 8008fe0:	200017f4 	.word	0x200017f4
 8008fe4:	20000c74 	.word	0x20000c74
 8008fe8:	6828      	ldr	r0, [r5, #0]
 8008fea:	6869      	ldr	r1, [r5, #4]
 8008fec:	68aa      	ldr	r2, [r5, #8]
 8008fee:	68eb      	ldr	r3, [r5, #12]
 8008ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ff2:	7c2b      	ldrb	r3, [r5, #16]
 8008ff4:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 8008ff6:	4a0e      	ldr	r2, [pc, #56]	; (8009030 <loadMenuTexts+0x11b4>)
 8008ff8:	4b0e      	ldr	r3, [pc, #56]	; (8009034 <loadMenuTexts+0x11b8>)
 8008ffa:	4614      	mov	r4, r2
 8008ffc:	461d      	mov	r5, r3
 8008ffe:	6828      	ldr	r0, [r5, #0]
 8009000:	6869      	ldr	r1, [r5, #4]
 8009002:	68aa      	ldr	r2, [r5, #8]
 8009004:	68eb      	ldr	r3, [r5, #12]
 8009006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009008:	7c2b      	ldrb	r3, [r5, #16]
 800900a:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 800900c:	4a0a      	ldr	r2, [pc, #40]	; (8009038 <loadMenuTexts+0x11bc>)
 800900e:	4b0b      	ldr	r3, [pc, #44]	; (800903c <loadMenuTexts+0x11c0>)
 8009010:	4614      	mov	r4, r2
 8009012:	461d      	mov	r5, r3
 8009014:	6828      	ldr	r0, [r5, #0]
 8009016:	6869      	ldr	r1, [r5, #4]
 8009018:	68aa      	ldr	r2, [r5, #8]
 800901a:	68eb      	ldr	r3, [r5, #12]
 800901c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800901e:	7c2b      	ldrb	r3, [r5, #16]
 8009020:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 8009022:	f000 f80d 	bl	8009040 <menuVariableFinisher>
}
 8009026:	bf00      	nop
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bdb0      	pop	{r4, r5, r7, pc}
 800902e:	bf00      	nop
 8009030:	20001808 	.word	0x20001808
 8009034:	20000c9c 	.word	0x20000c9c
 8009038:	2000181c 	.word	0x2000181c
 800903c:	20000cc4 	.word	0x20000cc4

08009040 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8009040:	b480      	push	{r7}
 8009042:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 8009044:	4b84      	ldr	r3, [pc, #528]	; (8009258 <menuVariableFinisher+0x218>)
 8009046:	2200      	movs	r2, #0
 8009048:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 800904a:	4b84      	ldr	r3, [pc, #528]	; (800925c <menuVariableFinisher+0x21c>)
 800904c:	2200      	movs	r2, #0
 800904e:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8009050:	4b83      	ldr	r3, [pc, #524]	; (8009260 <menuVariableFinisher+0x220>)
 8009052:	2200      	movs	r2, #0
 8009054:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 8009056:	4b83      	ldr	r3, [pc, #524]	; (8009264 <menuVariableFinisher+0x224>)
 8009058:	2200      	movs	r2, #0
 800905a:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 800905c:	4b82      	ldr	r3, [pc, #520]	; (8009268 <menuVariableFinisher+0x228>)
 800905e:	2200      	movs	r2, #0
 8009060:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 8009062:	4b82      	ldr	r3, [pc, #520]	; (800926c <menuVariableFinisher+0x22c>)
 8009064:	2200      	movs	r2, #0
 8009066:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 8009068:	4b81      	ldr	r3, [pc, #516]	; (8009270 <menuVariableFinisher+0x230>)
 800906a:	2200      	movs	r2, #0
 800906c:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 800906e:	4b81      	ldr	r3, [pc, #516]	; (8009274 <menuVariableFinisher+0x234>)
 8009070:	2200      	movs	r2, #0
 8009072:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8009074:	4b80      	ldr	r3, [pc, #512]	; (8009278 <menuVariableFinisher+0x238>)
 8009076:	2200      	movs	r2, #0
 8009078:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 800907a:	4b80      	ldr	r3, [pc, #512]	; (800927c <menuVariableFinisher+0x23c>)
 800907c:	2200      	movs	r2, #0
 800907e:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8009080:	4b7f      	ldr	r3, [pc, #508]	; (8009280 <menuVariableFinisher+0x240>)
 8009082:	2200      	movs	r2, #0
 8009084:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 8009086:	4b7f      	ldr	r3, [pc, #508]	; (8009284 <menuVariableFinisher+0x244>)
 8009088:	2200      	movs	r2, #0
 800908a:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 800908c:	4b7e      	ldr	r3, [pc, #504]	; (8009288 <menuVariableFinisher+0x248>)
 800908e:	2200      	movs	r2, #0
 8009090:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 8009092:	4b7e      	ldr	r3, [pc, #504]	; (800928c <menuVariableFinisher+0x24c>)
 8009094:	2200      	movs	r2, #0
 8009096:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 8009098:	4b7d      	ldr	r3, [pc, #500]	; (8009290 <menuVariableFinisher+0x250>)
 800909a:	2200      	movs	r2, #0
 800909c:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 800909e:	4b7d      	ldr	r3, [pc, #500]	; (8009294 <menuVariableFinisher+0x254>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 80090a4:	4b7c      	ldr	r3, [pc, #496]	; (8009298 <menuVariableFinisher+0x258>)
 80090a6:	2200      	movs	r2, #0
 80090a8:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 80090aa:	4b7c      	ldr	r3, [pc, #496]	; (800929c <menuVariableFinisher+0x25c>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 80090b0:	4b7b      	ldr	r3, [pc, #492]	; (80092a0 <menuVariableFinisher+0x260>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 80090b6:	4b7b      	ldr	r3, [pc, #492]	; (80092a4 <menuVariableFinisher+0x264>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 80090bc:	4b7a      	ldr	r3, [pc, #488]	; (80092a8 <menuVariableFinisher+0x268>)
 80090be:	2200      	movs	r2, #0
 80090c0:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 80090c2:	4b7a      	ldr	r3, [pc, #488]	; (80092ac <menuVariableFinisher+0x26c>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 80090c8:	4b79      	ldr	r3, [pc, #484]	; (80092b0 <menuVariableFinisher+0x270>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 80090ce:	4b79      	ldr	r3, [pc, #484]	; (80092b4 <menuVariableFinisher+0x274>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 80090d4:	4b78      	ldr	r3, [pc, #480]	; (80092b8 <menuVariableFinisher+0x278>)
 80090d6:	2200      	movs	r2, #0
 80090d8:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 80090da:	4b78      	ldr	r3, [pc, #480]	; (80092bc <menuVariableFinisher+0x27c>)
 80090dc:	2200      	movs	r2, #0
 80090de:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 80090e0:	4b77      	ldr	r3, [pc, #476]	; (80092c0 <menuVariableFinisher+0x280>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 80090e6:	4b77      	ldr	r3, [pc, #476]	; (80092c4 <menuVariableFinisher+0x284>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 80090ec:	4b76      	ldr	r3, [pc, #472]	; (80092c8 <menuVariableFinisher+0x288>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 80090f2:	4b76      	ldr	r3, [pc, #472]	; (80092cc <menuVariableFinisher+0x28c>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 80090f8:	4b75      	ldr	r3, [pc, #468]	; (80092d0 <menuVariableFinisher+0x290>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 80090fe:	4b75      	ldr	r3, [pc, #468]	; (80092d4 <menuVariableFinisher+0x294>)
 8009100:	2200      	movs	r2, #0
 8009102:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 8009104:	4b74      	ldr	r3, [pc, #464]	; (80092d8 <menuVariableFinisher+0x298>)
 8009106:	2200      	movs	r2, #0
 8009108:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 800910a:	4b74      	ldr	r3, [pc, #464]	; (80092dc <menuVariableFinisher+0x29c>)
 800910c:	2200      	movs	r2, #0
 800910e:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8009110:	4b73      	ldr	r3, [pc, #460]	; (80092e0 <menuVariableFinisher+0x2a0>)
 8009112:	2200      	movs	r2, #0
 8009114:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 8009116:	4b73      	ldr	r3, [pc, #460]	; (80092e4 <menuVariableFinisher+0x2a4>)
 8009118:	2200      	movs	r2, #0
 800911a:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 800911c:	4b72      	ldr	r3, [pc, #456]	; (80092e8 <menuVariableFinisher+0x2a8>)
 800911e:	2200      	movs	r2, #0
 8009120:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 8009122:	4b72      	ldr	r3, [pc, #456]	; (80092ec <menuVariableFinisher+0x2ac>)
 8009124:	2200      	movs	r2, #0
 8009126:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8009128:	4b71      	ldr	r3, [pc, #452]	; (80092f0 <menuVariableFinisher+0x2b0>)
 800912a:	2200      	movs	r2, #0
 800912c:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 800912e:	4b71      	ldr	r3, [pc, #452]	; (80092f4 <menuVariableFinisher+0x2b4>)
 8009130:	2200      	movs	r2, #0
 8009132:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 8009134:	4b70      	ldr	r3, [pc, #448]	; (80092f8 <menuVariableFinisher+0x2b8>)
 8009136:	2200      	movs	r2, #0
 8009138:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 800913a:	4b70      	ldr	r3, [pc, #448]	; (80092fc <menuVariableFinisher+0x2bc>)
 800913c:	2200      	movs	r2, #0
 800913e:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8009140:	4b6f      	ldr	r3, [pc, #444]	; (8009300 <menuVariableFinisher+0x2c0>)
 8009142:	2200      	movs	r2, #0
 8009144:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 8009146:	4b6f      	ldr	r3, [pc, #444]	; (8009304 <menuVariableFinisher+0x2c4>)
 8009148:	2200      	movs	r2, #0
 800914a:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 800914c:	4b6e      	ldr	r3, [pc, #440]	; (8009308 <menuVariableFinisher+0x2c8>)
 800914e:	2200      	movs	r2, #0
 8009150:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 8009152:	4b6e      	ldr	r3, [pc, #440]	; (800930c <menuVariableFinisher+0x2cc>)
 8009154:	2200      	movs	r2, #0
 8009156:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8009158:	4b6d      	ldr	r3, [pc, #436]	; (8009310 <menuVariableFinisher+0x2d0>)
 800915a:	2200      	movs	r2, #0
 800915c:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 800915e:	4b6d      	ldr	r3, [pc, #436]	; (8009314 <menuVariableFinisher+0x2d4>)
 8009160:	2200      	movs	r2, #0
 8009162:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 8009164:	4b6c      	ldr	r3, [pc, #432]	; (8009318 <menuVariableFinisher+0x2d8>)
 8009166:	2200      	movs	r2, #0
 8009168:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 800916a:	4b6c      	ldr	r3, [pc, #432]	; (800931c <menuVariableFinisher+0x2dc>)
 800916c:	2200      	movs	r2, #0
 800916e:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8009170:	4b6b      	ldr	r3, [pc, #428]	; (8009320 <menuVariableFinisher+0x2e0>)
 8009172:	2200      	movs	r2, #0
 8009174:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 8009176:	4b6b      	ldr	r3, [pc, #428]	; (8009324 <menuVariableFinisher+0x2e4>)
 8009178:	2200      	movs	r2, #0
 800917a:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 800917c:	4b6a      	ldr	r3, [pc, #424]	; (8009328 <menuVariableFinisher+0x2e8>)
 800917e:	2200      	movs	r2, #0
 8009180:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 8009182:	4b6a      	ldr	r3, [pc, #424]	; (800932c <menuVariableFinisher+0x2ec>)
 8009184:	2200      	movs	r2, #0
 8009186:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8009188:	4b69      	ldr	r3, [pc, #420]	; (8009330 <menuVariableFinisher+0x2f0>)
 800918a:	2200      	movs	r2, #0
 800918c:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 800918e:	4b69      	ldr	r3, [pc, #420]	; (8009334 <menuVariableFinisher+0x2f4>)
 8009190:	2200      	movs	r2, #0
 8009192:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8009194:	4b68      	ldr	r3, [pc, #416]	; (8009338 <menuVariableFinisher+0x2f8>)
 8009196:	2200      	movs	r2, #0
 8009198:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 800919a:	4b68      	ldr	r3, [pc, #416]	; (800933c <menuVariableFinisher+0x2fc>)
 800919c:	2200      	movs	r2, #0
 800919e:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 80091a0:	4b67      	ldr	r3, [pc, #412]	; (8009340 <menuVariableFinisher+0x300>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 80091a6:	4b67      	ldr	r3, [pc, #412]	; (8009344 <menuVariableFinisher+0x304>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 80091ac:	4b66      	ldr	r3, [pc, #408]	; (8009348 <menuVariableFinisher+0x308>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 80091b2:	4b66      	ldr	r3, [pc, #408]	; (800934c <menuVariableFinisher+0x30c>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 80091b8:	4b65      	ldr	r3, [pc, #404]	; (8009350 <menuVariableFinisher+0x310>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 80091be:	4b65      	ldr	r3, [pc, #404]	; (8009354 <menuVariableFinisher+0x314>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 80091c4:	4b64      	ldr	r3, [pc, #400]	; (8009358 <menuVariableFinisher+0x318>)
 80091c6:	2200      	movs	r2, #0
 80091c8:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 80091ca:	4b64      	ldr	r3, [pc, #400]	; (800935c <menuVariableFinisher+0x31c>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 80091d0:	4b63      	ldr	r3, [pc, #396]	; (8009360 <menuVariableFinisher+0x320>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 80091d6:	4b63      	ldr	r3, [pc, #396]	; (8009364 <menuVariableFinisher+0x324>)
 80091d8:	2200      	movs	r2, #0
 80091da:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 80091dc:	4b62      	ldr	r3, [pc, #392]	; (8009368 <menuVariableFinisher+0x328>)
 80091de:	2200      	movs	r2, #0
 80091e0:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 80091e2:	4b62      	ldr	r3, [pc, #392]	; (800936c <menuVariableFinisher+0x32c>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 80091e8:	4b61      	ldr	r3, [pc, #388]	; (8009370 <menuVariableFinisher+0x330>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 80091ee:	4b61      	ldr	r3, [pc, #388]	; (8009374 <menuVariableFinisher+0x334>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 80091f4:	4b60      	ldr	r3, [pc, #384]	; (8009378 <menuVariableFinisher+0x338>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 80091fa:	4b60      	ldr	r3, [pc, #384]	; (800937c <menuVariableFinisher+0x33c>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8009200:	4b5f      	ldr	r3, [pc, #380]	; (8009380 <menuVariableFinisher+0x340>)
 8009202:	2200      	movs	r2, #0
 8009204:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 8009206:	4b5f      	ldr	r3, [pc, #380]	; (8009384 <menuVariableFinisher+0x344>)
 8009208:	2200      	movs	r2, #0
 800920a:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 800920c:	4b5e      	ldr	r3, [pc, #376]	; (8009388 <menuVariableFinisher+0x348>)
 800920e:	2200      	movs	r2, #0
 8009210:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 8009212:	4b5e      	ldr	r3, [pc, #376]	; (800938c <menuVariableFinisher+0x34c>)
 8009214:	2200      	movs	r2, #0
 8009216:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 8009218:	4b5d      	ldr	r3, [pc, #372]	; (8009390 <menuVariableFinisher+0x350>)
 800921a:	2200      	movs	r2, #0
 800921c:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 800921e:	4b5d      	ldr	r3, [pc, #372]	; (8009394 <menuVariableFinisher+0x354>)
 8009220:	2200      	movs	r2, #0
 8009222:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 8009224:	4b5c      	ldr	r3, [pc, #368]	; (8009398 <menuVariableFinisher+0x358>)
 8009226:	2200      	movs	r2, #0
 8009228:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 800922a:	4b5c      	ldr	r3, [pc, #368]	; (800939c <menuVariableFinisher+0x35c>)
 800922c:	2200      	movs	r2, #0
 800922e:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8009230:	4b5b      	ldr	r3, [pc, #364]	; (80093a0 <menuVariableFinisher+0x360>)
 8009232:	2200      	movs	r2, #0
 8009234:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 8009236:	4b5b      	ldr	r3, [pc, #364]	; (80093a4 <menuVariableFinisher+0x364>)
 8009238:	2200      	movs	r2, #0
 800923a:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 800923c:	4b5a      	ldr	r3, [pc, #360]	; (80093a8 <menuVariableFinisher+0x368>)
 800923e:	2200      	movs	r2, #0
 8009240:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8009242:	4b5a      	ldr	r3, [pc, #360]	; (80093ac <menuVariableFinisher+0x36c>)
 8009244:	2200      	movs	r2, #0
 8009246:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8009248:	4b59      	ldr	r3, [pc, #356]	; (80093b0 <menuVariableFinisher+0x370>)
 800924a:	2200      	movs	r2, #0
 800924c:	741a      	strb	r2, [r3, #16]
}
 800924e:	bf00      	nop
 8009250:	46bd      	mov	sp, r7
 8009252:	bc80      	pop	{r7}
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	20000030 	.word	0x20000030
 800925c:	20000044 	.word	0x20000044
 8009260:	20000058 	.word	0x20000058
 8009264:	2000006c 	.word	0x2000006c
 8009268:	20000080 	.word	0x20000080
 800926c:	20000094 	.word	0x20000094
 8009270:	200000a8 	.word	0x200000a8
 8009274:	200000bc 	.word	0x200000bc
 8009278:	200000d0 	.word	0x200000d0
 800927c:	200000e4 	.word	0x200000e4
 8009280:	200000f8 	.word	0x200000f8
 8009284:	2000010c 	.word	0x2000010c
 8009288:	20001254 	.word	0x20001254
 800928c:	20001268 	.word	0x20001268
 8009290:	2000127c 	.word	0x2000127c
 8009294:	20001290 	.word	0x20001290
 8009298:	200012a4 	.word	0x200012a4
 800929c:	200012b8 	.word	0x200012b8
 80092a0:	200012cc 	.word	0x200012cc
 80092a4:	200012e0 	.word	0x200012e0
 80092a8:	200012f4 	.word	0x200012f4
 80092ac:	20001308 	.word	0x20001308
 80092b0:	2000131c 	.word	0x2000131c
 80092b4:	20001330 	.word	0x20001330
 80092b8:	20001344 	.word	0x20001344
 80092bc:	20001358 	.word	0x20001358
 80092c0:	2000136c 	.word	0x2000136c
 80092c4:	20001380 	.word	0x20001380
 80092c8:	20001394 	.word	0x20001394
 80092cc:	200013a8 	.word	0x200013a8
 80092d0:	200013bc 	.word	0x200013bc
 80092d4:	200013d0 	.word	0x200013d0
 80092d8:	200013e4 	.word	0x200013e4
 80092dc:	200013f8 	.word	0x200013f8
 80092e0:	2000140c 	.word	0x2000140c
 80092e4:	20001420 	.word	0x20001420
 80092e8:	20001434 	.word	0x20001434
 80092ec:	20001448 	.word	0x20001448
 80092f0:	2000145c 	.word	0x2000145c
 80092f4:	20001470 	.word	0x20001470
 80092f8:	20001484 	.word	0x20001484
 80092fc:	20001498 	.word	0x20001498
 8009300:	200014ac 	.word	0x200014ac
 8009304:	200014c0 	.word	0x200014c0
 8009308:	200014d4 	.word	0x200014d4
 800930c:	200014e8 	.word	0x200014e8
 8009310:	200014fc 	.word	0x200014fc
 8009314:	20001510 	.word	0x20001510
 8009318:	20001524 	.word	0x20001524
 800931c:	20001538 	.word	0x20001538
 8009320:	2000154c 	.word	0x2000154c
 8009324:	20001560 	.word	0x20001560
 8009328:	20001574 	.word	0x20001574
 800932c:	20001588 	.word	0x20001588
 8009330:	2000159c 	.word	0x2000159c
 8009334:	200015b0 	.word	0x200015b0
 8009338:	200015c4 	.word	0x200015c4
 800933c:	200015d8 	.word	0x200015d8
 8009340:	200015ec 	.word	0x200015ec
 8009344:	20001600 	.word	0x20001600
 8009348:	20001614 	.word	0x20001614
 800934c:	20001628 	.word	0x20001628
 8009350:	2000163c 	.word	0x2000163c
 8009354:	20001650 	.word	0x20001650
 8009358:	20001664 	.word	0x20001664
 800935c:	20001678 	.word	0x20001678
 8009360:	2000168c 	.word	0x2000168c
 8009364:	200016a0 	.word	0x200016a0
 8009368:	200016b4 	.word	0x200016b4
 800936c:	200016c8 	.word	0x200016c8
 8009370:	200016dc 	.word	0x200016dc
 8009374:	200016f0 	.word	0x200016f0
 8009378:	20001704 	.word	0x20001704
 800937c:	20001718 	.word	0x20001718
 8009380:	2000172c 	.word	0x2000172c
 8009384:	20001740 	.word	0x20001740
 8009388:	20001754 	.word	0x20001754
 800938c:	20001768 	.word	0x20001768
 8009390:	2000177c 	.word	0x2000177c
 8009394:	20001790 	.word	0x20001790
 8009398:	200017a4 	.word	0x200017a4
 800939c:	200017b8 	.word	0x200017b8
 80093a0:	200017cc 	.word	0x200017cc
 80093a4:	200017e0 	.word	0x200017e0
 80093a8:	200017f4 	.word	0x200017f4
 80093ac:	20001808 	.word	0x20001808
 80093b0:	2000181c 	.word	0x2000181c

080093b4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af02      	add	r7, sp, #8
 80093ba:	4603      	mov	r3, r0
 80093bc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80093be:	79fb      	ldrb	r3, [r7, #7]
 80093c0:	f023 030f 	bic.w	r3, r3, #15
 80093c4:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80093c6:	79fb      	ldrb	r3, [r7, #7]
 80093c8:	011b      	lsls	r3, r3, #4
 80093ca:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80093cc:	7b7b      	ldrb	r3, [r7, #13]
 80093ce:	f043 030c 	orr.w	r3, r3, #12
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80093d6:	7b7b      	ldrb	r3, [r7, #13]
 80093d8:	f043 0308 	orr.w	r3, r3, #8
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80093e0:	7b3b      	ldrb	r3, [r7, #12]
 80093e2:	f043 030c 	orr.w	r3, r3, #12
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80093ea:	7b3b      	ldrb	r3, [r7, #12]
 80093ec:	f043 0308 	orr.w	r3, r3, #8
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80093f4:	bf00      	nop
 80093f6:	4825      	ldr	r0, [pc, #148]	; (800948c <lcd_send_cmd+0xd8>)
 80093f8:	f002 f883 	bl	800b502 <HAL_I2C_GetError>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b04      	cmp	r3, #4
 8009400:	d0f9      	beq.n	80093f6 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009402:	bf00      	nop
 8009404:	4821      	ldr	r0, [pc, #132]	; (800948c <lcd_send_cmd+0xd8>)
 8009406:	f002 f86f 	bl	800b4e8 <HAL_I2C_GetState>
 800940a:	4603      	mov	r3, r0
 800940c:	2b20      	cmp	r3, #32
 800940e:	d1f9      	bne.n	8009404 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8009410:	4b1f      	ldr	r3, [pc, #124]	; (8009490 <lcd_send_cmd+0xdc>)
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d116      	bne.n	8009446 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8009418:	2300      	movs	r3, #0
 800941a:	73fb      	strb	r3, [r7, #15]
 800941c:	e00f      	b.n	800943e <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	3310      	adds	r3, #16
 8009422:	443b      	add	r3, r7
 8009424:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	f022 0208 	bic.w	r2, r2, #8
 800942e:	b2d2      	uxtb	r2, r2
 8009430:	3310      	adds	r3, #16
 8009432:	443b      	add	r3, r7
 8009434:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009438:	7bfb      	ldrb	r3, [r7, #15]
 800943a:	3301      	adds	r3, #1
 800943c:	73fb      	strb	r3, [r7, #15]
 800943e:	7bfb      	ldrb	r3, [r7, #15]
 8009440:	2b03      	cmp	r3, #3
 8009442:	d9ec      	bls.n	800941e <lcd_send_cmd+0x6a>
 8009444:	e015      	b.n	8009472 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8009446:	2300      	movs	r3, #0
 8009448:	73bb      	strb	r3, [r7, #14]
 800944a:	e00f      	b.n	800946c <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 800944c:	7bbb      	ldrb	r3, [r7, #14]
 800944e:	3310      	adds	r3, #16
 8009450:	443b      	add	r3, r7
 8009452:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009456:	7bbb      	ldrb	r3, [r7, #14]
 8009458:	f042 0208 	orr.w	r2, r2, #8
 800945c:	b2d2      	uxtb	r2, r2
 800945e:	3310      	adds	r3, #16
 8009460:	443b      	add	r3, r7
 8009462:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009466:	7bbb      	ldrb	r3, [r7, #14]
 8009468:	3301      	adds	r3, #1
 800946a:	73bb      	strb	r3, [r7, #14]
 800946c:	7bbb      	ldrb	r3, [r7, #14]
 800946e:	2b03      	cmp	r3, #3
 8009470:	d9ec      	bls.n	800944c <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8009472:	f107 0208 	add.w	r2, r7, #8
 8009476:	2364      	movs	r3, #100	; 0x64
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	2304      	movs	r3, #4
 800947c:	214e      	movs	r1, #78	; 0x4e
 800947e:	4803      	ldr	r0, [pc, #12]	; (800948c <lcd_send_cmd+0xd8>)
 8009480:	f001 fbd2 	bl	800ac28 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8009484:	bf00      	nop
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	20001858 	.word	0x20001858
 8009490:	2000182d 	.word	0x2000182d

08009494 <lcd_send_data>:

void lcd_send_data (char data) {
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af02      	add	r7, sp, #8
 800949a:	4603      	mov	r3, r0
 800949c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800949e:	79fb      	ldrb	r3, [r7, #7]
 80094a0:	f023 030f 	bic.w	r3, r3, #15
 80094a4:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 80094a6:	79fb      	ldrb	r3, [r7, #7]
 80094a8:	011b      	lsls	r3, r3, #4
 80094aa:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80094ac:	7b7b      	ldrb	r3, [r7, #13]
 80094ae:	f043 030d 	orr.w	r3, r3, #13
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80094b6:	7b7b      	ldrb	r3, [r7, #13]
 80094b8:	f043 0309 	orr.w	r3, r3, #9
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80094c0:	7b3b      	ldrb	r3, [r7, #12]
 80094c2:	f043 030d 	orr.w	r3, r3, #13
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80094ca:	7b3b      	ldrb	r3, [r7, #12]
 80094cc:	f043 0309 	orr.w	r3, r3, #9
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80094d4:	bf00      	nop
 80094d6:	4825      	ldr	r0, [pc, #148]	; (800956c <lcd_send_data+0xd8>)
 80094d8:	f002 f813 	bl	800b502 <HAL_I2C_GetError>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b04      	cmp	r3, #4
 80094e0:	d0f9      	beq.n	80094d6 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80094e2:	bf00      	nop
 80094e4:	4821      	ldr	r0, [pc, #132]	; (800956c <lcd_send_data+0xd8>)
 80094e6:	f001 ffff 	bl	800b4e8 <HAL_I2C_GetState>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b20      	cmp	r3, #32
 80094ee:	d1f9      	bne.n	80094e4 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80094f0:	4b1f      	ldr	r3, [pc, #124]	; (8009570 <lcd_send_data+0xdc>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d116      	bne.n	8009526 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80094f8:	2300      	movs	r3, #0
 80094fa:	73fb      	strb	r3, [r7, #15]
 80094fc:	e00f      	b.n	800951e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	3310      	adds	r3, #16
 8009502:	443b      	add	r3, r7
 8009504:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009508:	7bfb      	ldrb	r3, [r7, #15]
 800950a:	f022 0208 	bic.w	r2, r2, #8
 800950e:	b2d2      	uxtb	r2, r2
 8009510:	3310      	adds	r3, #16
 8009512:	443b      	add	r3, r7
 8009514:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	3301      	adds	r3, #1
 800951c:	73fb      	strb	r3, [r7, #15]
 800951e:	7bfb      	ldrb	r3, [r7, #15]
 8009520:	2b03      	cmp	r3, #3
 8009522:	d9ec      	bls.n	80094fe <lcd_send_data+0x6a>
 8009524:	e015      	b.n	8009552 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8009526:	2300      	movs	r3, #0
 8009528:	73bb      	strb	r3, [r7, #14]
 800952a:	e00f      	b.n	800954c <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 800952c:	7bbb      	ldrb	r3, [r7, #14]
 800952e:	3310      	adds	r3, #16
 8009530:	443b      	add	r3, r7
 8009532:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009536:	7bbb      	ldrb	r3, [r7, #14]
 8009538:	f042 0208 	orr.w	r2, r2, #8
 800953c:	b2d2      	uxtb	r2, r2
 800953e:	3310      	adds	r3, #16
 8009540:	443b      	add	r3, r7
 8009542:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009546:	7bbb      	ldrb	r3, [r7, #14]
 8009548:	3301      	adds	r3, #1
 800954a:	73bb      	strb	r3, [r7, #14]
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	2b03      	cmp	r3, #3
 8009550:	d9ec      	bls.n	800952c <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8009552:	f107 0208 	add.w	r2, r7, #8
 8009556:	2364      	movs	r3, #100	; 0x64
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	2304      	movs	r3, #4
 800955c:	214e      	movs	r1, #78	; 0x4e
 800955e:	4803      	ldr	r0, [pc, #12]	; (800956c <lcd_send_data+0xd8>)
 8009560:	f001 fb62 	bl	800ac28 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8009564:	bf00      	nop
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	20001858 	.word	0x20001858
 8009570:	2000182d 	.word	0x2000182d

08009574 <lcd_send_string>:

void lcd_send_string (char *str) {
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
	while (*str) {
 800957c:	e006      	b.n	800958c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	1c5a      	adds	r2, r3, #1
 8009582:	607a      	str	r2, [r7, #4]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	4618      	mov	r0, r3
 8009588:	f7ff ff84 	bl	8009494 <lcd_send_data>
	while (*str) {
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1f4      	bne.n	800957e <lcd_send_string+0xa>
	}
}
 8009594:	bf00      	nop
 8009596:	bf00      	nop
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <lcd_init>:

void lcd_init (void) {
 800959e:	b580      	push	{r7, lr}
 80095a0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80095a2:	2002      	movs	r0, #2
 80095a4:	f7ff ff06 	bl	80093b4 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80095a8:	2028      	movs	r0, #40	; 0x28
 80095aa:	f7ff ff03 	bl	80093b4 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80095ae:	200c      	movs	r0, #12
 80095b0:	f7ff ff00 	bl	80093b4 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80095b4:	2080      	movs	r0, #128	; 0x80
 80095b6:	f7ff fefd 	bl	80093b4 <lcd_send_cmd>
	lcd_backlight(1);
 80095ba:	2001      	movs	r0, #1
 80095bc:	f000 f840 	bl	8009640 <lcd_backlight>
}
 80095c0:	bf00      	nop
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	4603      	mov	r3, r0
 80095cc:	460a      	mov	r2, r1
 80095ce:	71fb      	strb	r3, [r7, #7]
 80095d0:	4613      	mov	r3, r2
 80095d2:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 80095d4:	79fb      	ldrb	r3, [r7, #7]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d106      	bne.n	80095e8 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80095da:	79bb      	ldrb	r3, [r7, #6]
 80095dc:	337f      	adds	r3, #127	; 0x7f
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7ff fee7 	bl	80093b4 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80095e6:	e008      	b.n	80095fa <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80095e8:	79fb      	ldrb	r3, [r7, #7]
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d105      	bne.n	80095fa <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80095ee:	79bb      	ldrb	r3, [r7, #6]
 80095f0:	3b41      	subs	r3, #65	; 0x41
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7ff fedd 	bl	80093b4 <lcd_send_cmd>
}
 80095fa:	bf00      	nop
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8009602:	b580      	push	{r7, lr}
 8009604:	b082      	sub	sp, #8
 8009606:	af00      	add	r7, sp, #0
 8009608:	4603      	mov	r3, r0
 800960a:	603a      	str	r2, [r7, #0]
 800960c:	71fb      	strb	r3, [r7, #7]
 800960e:	460b      	mov	r3, r1
 8009610:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8009612:	79ba      	ldrb	r2, [r7, #6]
 8009614:	79fb      	ldrb	r3, [r7, #7]
 8009616:	4611      	mov	r1, r2
 8009618:	4618      	mov	r0, r3
 800961a:	f7ff ffd3 	bl	80095c4 <lcd_gotoxy>
	lcd_send_string(str);
 800961e:	6838      	ldr	r0, [r7, #0]
 8009620:	f7ff ffa8 	bl	8009574 <lcd_send_string>
}
 8009624:	bf00      	nop
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <lcd_clear>:

void lcd_clear(void) {
 800962c:	b580      	push	{r7, lr}
 800962e:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8009630:	2001      	movs	r0, #1
 8009632:	f7ff febf 	bl	80093b4 <lcd_send_cmd>
    HAL_Delay(2);
 8009636:	2002      	movs	r0, #2
 8009638:	f000 fcac 	bl	8009f94 <HAL_Delay>

}
 800963c:	bf00      	nop
 800963e:	bd80      	pop	{r7, pc}

08009640 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	4603      	mov	r3, r0
 8009648:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800964a:	4a05      	ldr	r2, [pc, #20]	; (8009660 <lcd_backlight+0x20>)
 800964c:	79fb      	ldrb	r3, [r7, #7]
 800964e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8009650:	2000      	movs	r0, #0
 8009652:	f7ff feaf 	bl	80093b4 <lcd_send_cmd>
}
 8009656:	bf00      	nop
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	2000182d 	.word	0x2000182d

08009664 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 800966c:	4b04      	ldr	r3, [pc, #16]	; (8009680 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3301      	adds	r3, #1
 8009672:	4a03      	ldr	r2, [pc, #12]	; (8009680 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009674:	6013      	str	r3, [r2, #0]
}
 8009676:	bf00      	nop
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	bc80      	pop	{r7}
 800967e:	4770      	bx	lr
 8009680:	20001088 	.word	0x20001088

08009684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009688:	f000 fc22 	bl	8009ed0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 800968c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009690:	f000 fc80 	bl	8009f94 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009694:	f000 f89a 	bl	80097cc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009698:	f000 f9bc 	bl	8009a14 <MX_GPIO_Init>
  MX_CAN_Init();
 800969c:	f000 f8dc 	bl	8009858 <MX_CAN_Init>
  MX_I2C1_Init();
 80096a0:	f000 f90e 	bl	80098c0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80096a4:	f000 f93a 	bl	800991c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80096a8:	f000 f98a 	bl	80099c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80096ac:	2201      	movs	r2, #1
 80096ae:	2140      	movs	r1, #64	; 0x40
 80096b0:	483d      	ldr	r0, [pc, #244]	; (80097a8 <main+0x124>)
 80096b2:	f001 f914 	bl	800a8de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80096b6:	2201      	movs	r2, #1
 80096b8:	2180      	movs	r1, #128	; 0x80
 80096ba:	483b      	ldr	r0, [pc, #236]	; (80097a8 <main+0x124>)
 80096bc:	f001 f90f 	bl	800a8de <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80096c0:	200a      	movs	r0, #10
 80096c2:	f000 fc67 	bl	8009f94 <HAL_Delay>
  lcd_init();
 80096c6:	f7ff ff6a 	bl	800959e <lcd_init>
  HAL_Delay(10);
 80096ca:	200a      	movs	r0, #10
 80096cc:	f000 fc62 	bl	8009f94 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 80096d0:	4836      	ldr	r0, [pc, #216]	; (80097ac <main+0x128>)
 80096d2:	f002 ffb7 	bl	800c644 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80096d6:	bf00      	nop
 80096d8:	4835      	ldr	r0, [pc, #212]	; (80097b0 <main+0x12c>)
 80096da:	f001 ff12 	bl	800b502 <HAL_I2C_GetError>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b04      	cmp	r3, #4
 80096e2:	d0f9      	beq.n	80096d8 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80096e4:	bf00      	nop
 80096e6:	4832      	ldr	r0, [pc, #200]	; (80097b0 <main+0x12c>)
 80096e8:	f001 fefe 	bl	800b4e8 <HAL_I2C_GetState>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b20      	cmp	r3, #32
 80096f0:	d1f9      	bne.n	80096e6 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80096f2:	2200      	movs	r2, #0
 80096f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80096f8:	482b      	ldr	r0, [pc, #172]	; (80097a8 <main+0x124>)
 80096fa:	f001 f8f0 	bl	800a8de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80096fe:	2200      	movs	r2, #0
 8009700:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009704:	4828      	ldr	r0, [pc, #160]	; (80097a8 <main+0x124>)
 8009706:	f001 f8ea 	bl	800a8de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800970a:	2200      	movs	r2, #0
 800970c:	2104      	movs	r1, #4
 800970e:	4826      	ldr	r0, [pc, #152]	; (80097a8 <main+0x124>)
 8009710:	f001 f8e5 	bl	800a8de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8009714:	2200      	movs	r2, #0
 8009716:	2102      	movs	r1, #2
 8009718:	4823      	ldr	r0, [pc, #140]	; (80097a8 <main+0x124>)
 800971a:	f001 f8e0 	bl	800a8de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800971e:	2200      	movs	r2, #0
 8009720:	2101      	movs	r1, #1
 8009722:	4821      	ldr	r0, [pc, #132]	; (80097a8 <main+0x124>)
 8009724:	f001 f8db 	bl	800a8de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8009728:	2200      	movs	r2, #0
 800972a:	2120      	movs	r1, #32
 800972c:	4821      	ldr	r0, [pc, #132]	; (80097b4 <main+0x130>)
 800972e:	f001 f8d6 	bl	800a8de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8009732:	2200      	movs	r2, #0
 8009734:	2110      	movs	r1, #16
 8009736:	481f      	ldr	r0, [pc, #124]	; (80097b4 <main+0x130>)
 8009738:	f001 f8d1 	bl	800a8de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800973c:	2200      	movs	r2, #0
 800973e:	2180      	movs	r1, #128	; 0x80
 8009740:	481d      	ldr	r0, [pc, #116]	; (80097b8 <main+0x134>)
 8009742:	f001 f8cc 	bl	800a8de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8009746:	2200      	movs	r2, #0
 8009748:	2140      	movs	r1, #64	; 0x40
 800974a:	481b      	ldr	r0, [pc, #108]	; (80097b8 <main+0x134>)
 800974c:	f001 f8c7 	bl	800a8de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8009750:	2200      	movs	r2, #0
 8009752:	2120      	movs	r1, #32
 8009754:	4818      	ldr	r0, [pc, #96]	; (80097b8 <main+0x134>)
 8009756:	f001 f8c2 	bl	800a8de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800975a:	2200      	movs	r2, #0
 800975c:	2110      	movs	r1, #16
 800975e:	4816      	ldr	r0, [pc, #88]	; (80097b8 <main+0x134>)
 8009760:	f001 f8bd 	bl	800a8de <HAL_GPIO_WritePin>

  i2cTest();
 8009764:	f7f7 f9d6 	bl	8000b14 <i2cTest>
  HAL_Delay(100);
 8009768:	2064      	movs	r0, #100	; 0x64
 800976a:	f000 fc13 	bl	8009f94 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 800976e:	4a13      	ldr	r2, [pc, #76]	; (80097bc <main+0x138>)
 8009770:	2101      	movs	r1, #1
 8009772:	2001      	movs	r0, #1
 8009774:	f7ff ff45 	bl	8009602 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8009778:	4a11      	ldr	r2, [pc, #68]	; (80097c0 <main+0x13c>)
 800977a:	2101      	movs	r1, #1
 800977c:	2002      	movs	r0, #2
 800977e:	f7ff ff40 	bl	8009602 <lcd_print>
  HAL_Delay(1000);
 8009782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009786:	f000 fc05 	bl	8009f94 <HAL_Delay>
  lcd_clear();
 800978a:	f7ff ff4f 	bl	800962c <lcd_clear>

  eepromKontrol();
 800978e:	f7f6 fd49 	bl	8000224 <eepromKontrol>
  HAL_Delay(500);
 8009792:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009796:	f000 fbfd 	bl	8009f94 <HAL_Delay>

  backLightTimer = millis;
 800979a:	4b0a      	ldr	r3, [pc, #40]	; (80097c4 <main+0x140>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a0a      	ldr	r2, [pc, #40]	; (80097c8 <main+0x144>)
 80097a0:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80097a2:	f7fe f9ed 	bl	8007b80 <mainLoop>
 80097a6:	e7fc      	b.n	80097a2 <main+0x11e>
 80097a8:	40010c00 	.word	0x40010c00
 80097ac:	200018ac 	.word	0x200018ac
 80097b0:	20001858 	.word	0x20001858
 80097b4:	40011000 	.word	0x40011000
 80097b8:	40010800 	.word	0x40010800
 80097bc:	20000030 	.word	0x20000030
 80097c0:	20000044 	.word	0x20000044
 80097c4:	20001088 	.word	0x20001088
 80097c8:	200010a4 	.word	0x200010a4

080097cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b090      	sub	sp, #64	; 0x40
 80097d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80097d2:	f107 0318 	add.w	r3, r7, #24
 80097d6:	2228      	movs	r2, #40	; 0x28
 80097d8:	2100      	movs	r1, #0
 80097da:	4618      	mov	r0, r3
 80097dc:	f003 fc4e 	bl	800d07c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80097e0:	1d3b      	adds	r3, r7, #4
 80097e2:	2200      	movs	r2, #0
 80097e4:	601a      	str	r2, [r3, #0]
 80097e6:	605a      	str	r2, [r3, #4]
 80097e8:	609a      	str	r2, [r3, #8]
 80097ea:	60da      	str	r2, [r3, #12]
 80097ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80097ee:	2301      	movs	r3, #1
 80097f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80097f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80097f8:	2300      	movs	r3, #0
 80097fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80097fc:	2301      	movs	r3, #1
 80097fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009800:	2302      	movs	r3, #2
 8009802:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009808:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800980a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800980e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009810:	f107 0318 	add.w	r3, r7, #24
 8009814:	4618      	mov	r0, r3
 8009816:	f002 fab5 	bl	800bd84 <HAL_RCC_OscConfig>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8009820:	f000 f9a2 	bl	8009b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009824:	230f      	movs	r3, #15
 8009826:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009828:	2302      	movs	r3, #2
 800982a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800982c:	2300      	movs	r3, #0
 800982e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009836:	2300      	movs	r3, #0
 8009838:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800983a:	1d3b      	adds	r3, r7, #4
 800983c:	2102      	movs	r1, #2
 800983e:	4618      	mov	r0, r3
 8009840:	f002 fd22 	bl	800c288 <HAL_RCC_ClockConfig>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800984a:	f000 f98d 	bl	8009b68 <Error_Handler>
  }
}
 800984e:	bf00      	nop
 8009850:	3740      	adds	r7, #64	; 0x40
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
	...

08009858 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800985c:	4b16      	ldr	r3, [pc, #88]	; (80098b8 <MX_CAN_Init+0x60>)
 800985e:	4a17      	ldr	r2, [pc, #92]	; (80098bc <MX_CAN_Init+0x64>)
 8009860:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8009862:	4b15      	ldr	r3, [pc, #84]	; (80098b8 <MX_CAN_Init+0x60>)
 8009864:	2210      	movs	r2, #16
 8009866:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8009868:	4b13      	ldr	r3, [pc, #76]	; (80098b8 <MX_CAN_Init+0x60>)
 800986a:	2200      	movs	r2, #0
 800986c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800986e:	4b12      	ldr	r3, [pc, #72]	; (80098b8 <MX_CAN_Init+0x60>)
 8009870:	2200      	movs	r2, #0
 8009872:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8009874:	4b10      	ldr	r3, [pc, #64]	; (80098b8 <MX_CAN_Init+0x60>)
 8009876:	2200      	movs	r2, #0
 8009878:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800987a:	4b0f      	ldr	r3, [pc, #60]	; (80098b8 <MX_CAN_Init+0x60>)
 800987c:	2200      	movs	r2, #0
 800987e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8009880:	4b0d      	ldr	r3, [pc, #52]	; (80098b8 <MX_CAN_Init+0x60>)
 8009882:	2200      	movs	r2, #0
 8009884:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8009886:	4b0c      	ldr	r3, [pc, #48]	; (80098b8 <MX_CAN_Init+0x60>)
 8009888:	2200      	movs	r2, #0
 800988a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800988c:	4b0a      	ldr	r3, [pc, #40]	; (80098b8 <MX_CAN_Init+0x60>)
 800988e:	2200      	movs	r2, #0
 8009890:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8009892:	4b09      	ldr	r3, [pc, #36]	; (80098b8 <MX_CAN_Init+0x60>)
 8009894:	2200      	movs	r2, #0
 8009896:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8009898:	4b07      	ldr	r3, [pc, #28]	; (80098b8 <MX_CAN_Init+0x60>)
 800989a:	2200      	movs	r2, #0
 800989c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800989e:	4b06      	ldr	r3, [pc, #24]	; (80098b8 <MX_CAN_Init+0x60>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80098a4:	4804      	ldr	r0, [pc, #16]	; (80098b8 <MX_CAN_Init+0x60>)
 80098a6:	f000 fb99 	bl	8009fdc <HAL_CAN_Init>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d001      	beq.n	80098b4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80098b0:	f000 f95a 	bl	8009b68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80098b4:	bf00      	nop
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	20001830 	.word	0x20001830
 80098bc:	40006400 	.word	0x40006400

080098c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80098c4:	4b12      	ldr	r3, [pc, #72]	; (8009910 <MX_I2C1_Init+0x50>)
 80098c6:	4a13      	ldr	r2, [pc, #76]	; (8009914 <MX_I2C1_Init+0x54>)
 80098c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80098ca:	4b11      	ldr	r3, [pc, #68]	; (8009910 <MX_I2C1_Init+0x50>)
 80098cc:	4a12      	ldr	r2, [pc, #72]	; (8009918 <MX_I2C1_Init+0x58>)
 80098ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80098d0:	4b0f      	ldr	r3, [pc, #60]	; (8009910 <MX_I2C1_Init+0x50>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80098d6:	4b0e      	ldr	r3, [pc, #56]	; (8009910 <MX_I2C1_Init+0x50>)
 80098d8:	2200      	movs	r2, #0
 80098da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80098dc:	4b0c      	ldr	r3, [pc, #48]	; (8009910 <MX_I2C1_Init+0x50>)
 80098de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80098e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80098e4:	4b0a      	ldr	r3, [pc, #40]	; (8009910 <MX_I2C1_Init+0x50>)
 80098e6:	2200      	movs	r2, #0
 80098e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80098ea:	4b09      	ldr	r3, [pc, #36]	; (8009910 <MX_I2C1_Init+0x50>)
 80098ec:	2200      	movs	r2, #0
 80098ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80098f0:	4b07      	ldr	r3, [pc, #28]	; (8009910 <MX_I2C1_Init+0x50>)
 80098f2:	2200      	movs	r2, #0
 80098f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80098f6:	4b06      	ldr	r3, [pc, #24]	; (8009910 <MX_I2C1_Init+0x50>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80098fc:	4804      	ldr	r0, [pc, #16]	; (8009910 <MX_I2C1_Init+0x50>)
 80098fe:	f001 f81f 	bl	800a940 <HAL_I2C_Init>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009908:	f000 f92e 	bl	8009b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800990c:	bf00      	nop
 800990e:	bd80      	pop	{r7, pc}
 8009910:	20001858 	.word	0x20001858
 8009914:	40005400 	.word	0x40005400
 8009918:	00061a80 	.word	0x00061a80

0800991c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b086      	sub	sp, #24
 8009920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009922:	f107 0308 	add.w	r3, r7, #8
 8009926:	2200      	movs	r2, #0
 8009928:	601a      	str	r2, [r3, #0]
 800992a:	605a      	str	r2, [r3, #4]
 800992c:	609a      	str	r2, [r3, #8]
 800992e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009930:	463b      	mov	r3, r7
 8009932:	2200      	movs	r2, #0
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009938:	4b1f      	ldr	r3, [pc, #124]	; (80099b8 <MX_TIM1_Init+0x9c>)
 800993a:	4a20      	ldr	r2, [pc, #128]	; (80099bc <MX_TIM1_Init+0xa0>)
 800993c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800993e:	4b1e      	ldr	r3, [pc, #120]	; (80099b8 <MX_TIM1_Init+0x9c>)
 8009940:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8009944:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009946:	4b1c      	ldr	r3, [pc, #112]	; (80099b8 <MX_TIM1_Init+0x9c>)
 8009948:	2200      	movs	r2, #0
 800994a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800994c:	4b1a      	ldr	r3, [pc, #104]	; (80099b8 <MX_TIM1_Init+0x9c>)
 800994e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8009952:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009954:	4b18      	ldr	r3, [pc, #96]	; (80099b8 <MX_TIM1_Init+0x9c>)
 8009956:	2200      	movs	r2, #0
 8009958:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800995a:	4b17      	ldr	r3, [pc, #92]	; (80099b8 <MX_TIM1_Init+0x9c>)
 800995c:	2200      	movs	r2, #0
 800995e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009960:	4b15      	ldr	r3, [pc, #84]	; (80099b8 <MX_TIM1_Init+0x9c>)
 8009962:	2200      	movs	r2, #0
 8009964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009966:	4814      	ldr	r0, [pc, #80]	; (80099b8 <MX_TIM1_Init+0x9c>)
 8009968:	f002 fe1c 	bl	800c5a4 <HAL_TIM_Base_Init>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8009972:	f000 f8f9 	bl	8009b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800997a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800997c:	f107 0308 	add.w	r3, r7, #8
 8009980:	4619      	mov	r1, r3
 8009982:	480d      	ldr	r0, [pc, #52]	; (80099b8 <MX_TIM1_Init+0x9c>)
 8009984:	f002 ffc6 	bl	800c914 <HAL_TIM_ConfigClockSource>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800998e:	f000 f8eb 	bl	8009b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009992:	2300      	movs	r3, #0
 8009994:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009996:	2300      	movs	r3, #0
 8009998:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800999a:	463b      	mov	r3, r7
 800999c:	4619      	mov	r1, r3
 800999e:	4806      	ldr	r0, [pc, #24]	; (80099b8 <MX_TIM1_Init+0x9c>)
 80099a0:	f003 f9b4 	bl	800cd0c <HAL_TIMEx_MasterConfigSynchronization>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80099aa:	f000 f8dd 	bl	8009b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80099ae:	bf00      	nop
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	200018ac 	.word	0x200018ac
 80099bc:	40012c00 	.word	0x40012c00

080099c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80099c4:	4b11      	ldr	r3, [pc, #68]	; (8009a0c <MX_USART1_UART_Init+0x4c>)
 80099c6:	4a12      	ldr	r2, [pc, #72]	; (8009a10 <MX_USART1_UART_Init+0x50>)
 80099c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80099ca:	4b10      	ldr	r3, [pc, #64]	; (8009a0c <MX_USART1_UART_Init+0x4c>)
 80099cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80099d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80099d2:	4b0e      	ldr	r3, [pc, #56]	; (8009a0c <MX_USART1_UART_Init+0x4c>)
 80099d4:	2200      	movs	r2, #0
 80099d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80099d8:	4b0c      	ldr	r3, [pc, #48]	; (8009a0c <MX_USART1_UART_Init+0x4c>)
 80099da:	2200      	movs	r2, #0
 80099dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80099de:	4b0b      	ldr	r3, [pc, #44]	; (8009a0c <MX_USART1_UART_Init+0x4c>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80099e4:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <MX_USART1_UART_Init+0x4c>)
 80099e6:	220c      	movs	r2, #12
 80099e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80099ea:	4b08      	ldr	r3, [pc, #32]	; (8009a0c <MX_USART1_UART_Init+0x4c>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80099f0:	4b06      	ldr	r3, [pc, #24]	; (8009a0c <MX_USART1_UART_Init+0x4c>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80099f6:	4805      	ldr	r0, [pc, #20]	; (8009a0c <MX_USART1_UART_Init+0x4c>)
 80099f8:	f003 fa06 	bl	800ce08 <HAL_UART_Init>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009a02:	f000 f8b1 	bl	8009b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009a06:	bf00      	nop
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	200018f4 	.word	0x200018f4
 8009a10:	40013800 	.word	0x40013800

08009a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a1a:	f107 0310 	add.w	r3, r7, #16
 8009a1e:	2200      	movs	r2, #0
 8009a20:	601a      	str	r2, [r3, #0]
 8009a22:	605a      	str	r2, [r3, #4]
 8009a24:	609a      	str	r2, [r3, #8]
 8009a26:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a28:	4b4b      	ldr	r3, [pc, #300]	; (8009b58 <MX_GPIO_Init+0x144>)
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	4a4a      	ldr	r2, [pc, #296]	; (8009b58 <MX_GPIO_Init+0x144>)
 8009a2e:	f043 0310 	orr.w	r3, r3, #16
 8009a32:	6193      	str	r3, [r2, #24]
 8009a34:	4b48      	ldr	r3, [pc, #288]	; (8009b58 <MX_GPIO_Init+0x144>)
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	f003 0310 	and.w	r3, r3, #16
 8009a3c:	60fb      	str	r3, [r7, #12]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009a40:	4b45      	ldr	r3, [pc, #276]	; (8009b58 <MX_GPIO_Init+0x144>)
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	4a44      	ldr	r2, [pc, #272]	; (8009b58 <MX_GPIO_Init+0x144>)
 8009a46:	f043 0320 	orr.w	r3, r3, #32
 8009a4a:	6193      	str	r3, [r2, #24]
 8009a4c:	4b42      	ldr	r3, [pc, #264]	; (8009b58 <MX_GPIO_Init+0x144>)
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	f003 0320 	and.w	r3, r3, #32
 8009a54:	60bb      	str	r3, [r7, #8]
 8009a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a58:	4b3f      	ldr	r3, [pc, #252]	; (8009b58 <MX_GPIO_Init+0x144>)
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	4a3e      	ldr	r2, [pc, #248]	; (8009b58 <MX_GPIO_Init+0x144>)
 8009a5e:	f043 0304 	orr.w	r3, r3, #4
 8009a62:	6193      	str	r3, [r2, #24]
 8009a64:	4b3c      	ldr	r3, [pc, #240]	; (8009b58 <MX_GPIO_Init+0x144>)
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	f003 0304 	and.w	r3, r3, #4
 8009a6c:	607b      	str	r3, [r7, #4]
 8009a6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a70:	4b39      	ldr	r3, [pc, #228]	; (8009b58 <MX_GPIO_Init+0x144>)
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	4a38      	ldr	r2, [pc, #224]	; (8009b58 <MX_GPIO_Init+0x144>)
 8009a76:	f043 0308 	orr.w	r3, r3, #8
 8009a7a:	6193      	str	r3, [r2, #24]
 8009a7c:	4b36      	ldr	r3, [pc, #216]	; (8009b58 <MX_GPIO_Init+0x144>)
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	f003 0308 	and.w	r3, r3, #8
 8009a84:	603b      	str	r3, [r7, #0]
 8009a86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8009a88:	2200      	movs	r2, #0
 8009a8a:	21f0      	movs	r1, #240	; 0xf0
 8009a8c:	4833      	ldr	r0, [pc, #204]	; (8009b5c <MX_GPIO_Init+0x148>)
 8009a8e:	f000 ff26 	bl	800a8de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8009a92:	2200      	movs	r2, #0
 8009a94:	f241 0130 	movw	r1, #4144	; 0x1030
 8009a98:	4831      	ldr	r0, [pc, #196]	; (8009b60 <MX_GPIO_Init+0x14c>)
 8009a9a:	f000 ff20 	bl	800a8de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f640 4107 	movw	r1, #3079	; 0xc07
 8009aa4:	482f      	ldr	r0, [pc, #188]	; (8009b64 <MX_GPIO_Init+0x150>)
 8009aa6:	f000 ff1a 	bl	800a8de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8009aaa:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8009aae:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ab8:	f107 0310 	add.w	r3, r7, #16
 8009abc:	4619      	mov	r1, r3
 8009abe:	4828      	ldr	r0, [pc, #160]	; (8009b60 <MX_GPIO_Init+0x14c>)
 8009ac0:	f000 fc96 	bl	800a3f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8009ac4:	f248 130f 	movw	r3, #33039	; 0x810f
 8009ac8:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009aca:	2300      	movs	r3, #0
 8009acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ad2:	f107 0310 	add.w	r3, r7, #16
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	4820      	ldr	r0, [pc, #128]	; (8009b5c <MX_GPIO_Init+0x148>)
 8009ada:	f000 fc89 	bl	800a3f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8009ade:	23f0      	movs	r3, #240	; 0xf0
 8009ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009aea:	2302      	movs	r3, #2
 8009aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009aee:	f107 0310 	add.w	r3, r7, #16
 8009af2:	4619      	mov	r1, r3
 8009af4:	4819      	ldr	r0, [pc, #100]	; (8009b5c <MX_GPIO_Init+0x148>)
 8009af6:	f000 fc7b 	bl	800a3f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8009afa:	f241 0330 	movw	r3, #4144	; 0x1030
 8009afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b00:	2301      	movs	r3, #1
 8009b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b04:	2300      	movs	r3, #0
 8009b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b08:	2302      	movs	r3, #2
 8009b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b0c:	f107 0310 	add.w	r3, r7, #16
 8009b10:	4619      	mov	r1, r3
 8009b12:	4813      	ldr	r0, [pc, #76]	; (8009b60 <MX_GPIO_Init+0x14c>)
 8009b14:	f000 fc6c 	bl	800a3f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009b18:	f640 4307 	movw	r3, #3079	; 0xc07
 8009b1c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b22:	2300      	movs	r3, #0
 8009b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b26:	2302      	movs	r3, #2
 8009b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b2a:	f107 0310 	add.w	r3, r7, #16
 8009b2e:	4619      	mov	r1, r3
 8009b30:	480c      	ldr	r0, [pc, #48]	; (8009b64 <MX_GPIO_Init+0x150>)
 8009b32:	f000 fc5d 	bl	800a3f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8009b36:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009b3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b40:	2300      	movs	r3, #0
 8009b42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b44:	f107 0310 	add.w	r3, r7, #16
 8009b48:	4619      	mov	r1, r3
 8009b4a:	4806      	ldr	r0, [pc, #24]	; (8009b64 <MX_GPIO_Init+0x150>)
 8009b4c:	f000 fc50 	bl	800a3f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009b50:	bf00      	nop
 8009b52:	3720      	adds	r7, #32
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	40021000 	.word	0x40021000
 8009b5c:	40010800 	.word	0x40010800
 8009b60:	40011000 	.word	0x40011000
 8009b64:	40010c00 	.word	0x40010c00

08009b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8009b6c:	bf00      	nop
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bc80      	pop	{r7}
 8009b72:	4770      	bx	lr

08009b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8009b7a:	4b15      	ldr	r3, [pc, #84]	; (8009bd0 <HAL_MspInit+0x5c>)
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	4a14      	ldr	r2, [pc, #80]	; (8009bd0 <HAL_MspInit+0x5c>)
 8009b80:	f043 0301 	orr.w	r3, r3, #1
 8009b84:	6193      	str	r3, [r2, #24]
 8009b86:	4b12      	ldr	r3, [pc, #72]	; (8009bd0 <HAL_MspInit+0x5c>)
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	60bb      	str	r3, [r7, #8]
 8009b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009b92:	4b0f      	ldr	r3, [pc, #60]	; (8009bd0 <HAL_MspInit+0x5c>)
 8009b94:	69db      	ldr	r3, [r3, #28]
 8009b96:	4a0e      	ldr	r2, [pc, #56]	; (8009bd0 <HAL_MspInit+0x5c>)
 8009b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b9c:	61d3      	str	r3, [r2, #28]
 8009b9e:	4b0c      	ldr	r3, [pc, #48]	; (8009bd0 <HAL_MspInit+0x5c>)
 8009ba0:	69db      	ldr	r3, [r3, #28]
 8009ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ba6:	607b      	str	r3, [r7, #4]
 8009ba8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8009baa:	4b0a      	ldr	r3, [pc, #40]	; (8009bd4 <HAL_MspInit+0x60>)
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	4a04      	ldr	r2, [pc, #16]	; (8009bd4 <HAL_MspInit+0x60>)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009bc6:	bf00      	nop
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bc80      	pop	{r7}
 8009bce:	4770      	bx	lr
 8009bd0:	40021000 	.word	0x40021000
 8009bd4:	40010000 	.word	0x40010000

08009bd8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b088      	sub	sp, #32
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009be0:	f107 0310 	add.w	r3, r7, #16
 8009be4:	2200      	movs	r2, #0
 8009be6:	601a      	str	r2, [r3, #0]
 8009be8:	605a      	str	r2, [r3, #4]
 8009bea:	609a      	str	r2, [r3, #8]
 8009bec:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a1c      	ldr	r2, [pc, #112]	; (8009c64 <HAL_CAN_MspInit+0x8c>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d131      	bne.n	8009c5c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8009bf8:	4b1b      	ldr	r3, [pc, #108]	; (8009c68 <HAL_CAN_MspInit+0x90>)
 8009bfa:	69db      	ldr	r3, [r3, #28]
 8009bfc:	4a1a      	ldr	r2, [pc, #104]	; (8009c68 <HAL_CAN_MspInit+0x90>)
 8009bfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009c02:	61d3      	str	r3, [r2, #28]
 8009c04:	4b18      	ldr	r3, [pc, #96]	; (8009c68 <HAL_CAN_MspInit+0x90>)
 8009c06:	69db      	ldr	r3, [r3, #28]
 8009c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c0c:	60fb      	str	r3, [r7, #12]
 8009c0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c10:	4b15      	ldr	r3, [pc, #84]	; (8009c68 <HAL_CAN_MspInit+0x90>)
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	4a14      	ldr	r2, [pc, #80]	; (8009c68 <HAL_CAN_MspInit+0x90>)
 8009c16:	f043 0304 	orr.w	r3, r3, #4
 8009c1a:	6193      	str	r3, [r2, #24]
 8009c1c:	4b12      	ldr	r3, [pc, #72]	; (8009c68 <HAL_CAN_MspInit+0x90>)
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	f003 0304 	and.w	r3, r3, #4
 8009c24:	60bb      	str	r3, [r7, #8]
 8009c26:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009c28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c32:	2300      	movs	r3, #0
 8009c34:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c36:	f107 0310 	add.w	r3, r7, #16
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	480b      	ldr	r0, [pc, #44]	; (8009c6c <HAL_CAN_MspInit+0x94>)
 8009c3e:	f000 fbd7 	bl	800a3f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c48:	2302      	movs	r3, #2
 8009c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c50:	f107 0310 	add.w	r3, r7, #16
 8009c54:	4619      	mov	r1, r3
 8009c56:	4805      	ldr	r0, [pc, #20]	; (8009c6c <HAL_CAN_MspInit+0x94>)
 8009c58:	f000 fbca 	bl	800a3f0 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8009c5c:	bf00      	nop
 8009c5e:	3720      	adds	r7, #32
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	40006400 	.word	0x40006400
 8009c68:	40021000 	.word	0x40021000
 8009c6c:	40010800 	.word	0x40010800

08009c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b088      	sub	sp, #32
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c78:	f107 0310 	add.w	r3, r7, #16
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	601a      	str	r2, [r3, #0]
 8009c80:	605a      	str	r2, [r3, #4]
 8009c82:	609a      	str	r2, [r3, #8]
 8009c84:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a15      	ldr	r2, [pc, #84]	; (8009ce0 <HAL_I2C_MspInit+0x70>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d123      	bne.n	8009cd8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c90:	4b14      	ldr	r3, [pc, #80]	; (8009ce4 <HAL_I2C_MspInit+0x74>)
 8009c92:	699b      	ldr	r3, [r3, #24]
 8009c94:	4a13      	ldr	r2, [pc, #76]	; (8009ce4 <HAL_I2C_MspInit+0x74>)
 8009c96:	f043 0308 	orr.w	r3, r3, #8
 8009c9a:	6193      	str	r3, [r2, #24]
 8009c9c:	4b11      	ldr	r3, [pc, #68]	; (8009ce4 <HAL_I2C_MspInit+0x74>)
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	f003 0308 	and.w	r3, r3, #8
 8009ca4:	60fb      	str	r3, [r7, #12]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009ca8:	23c0      	movs	r3, #192	; 0xc0
 8009caa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009cac:	2312      	movs	r3, #18
 8009cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009cb4:	f107 0310 	add.w	r3, r7, #16
 8009cb8:	4619      	mov	r1, r3
 8009cba:	480b      	ldr	r0, [pc, #44]	; (8009ce8 <HAL_I2C_MspInit+0x78>)
 8009cbc:	f000 fb98 	bl	800a3f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009cc0:	4b08      	ldr	r3, [pc, #32]	; (8009ce4 <HAL_I2C_MspInit+0x74>)
 8009cc2:	69db      	ldr	r3, [r3, #28]
 8009cc4:	4a07      	ldr	r2, [pc, #28]	; (8009ce4 <HAL_I2C_MspInit+0x74>)
 8009cc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009cca:	61d3      	str	r3, [r2, #28]
 8009ccc:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <HAL_I2C_MspInit+0x74>)
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009cd4:	60bb      	str	r3, [r7, #8]
 8009cd6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8009cd8:	bf00      	nop
 8009cda:	3720      	adds	r7, #32
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	40005400 	.word	0x40005400
 8009ce4:	40021000 	.word	0x40021000
 8009ce8:	40010c00 	.word	0x40010c00

08009cec <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a0a      	ldr	r2, [pc, #40]	; (8009d24 <HAL_I2C_MspDeInit+0x38>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d10d      	bne.n	8009d1a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8009cfe:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <HAL_I2C_MspDeInit+0x3c>)
 8009d00:	69db      	ldr	r3, [r3, #28]
 8009d02:	4a09      	ldr	r2, [pc, #36]	; (8009d28 <HAL_I2C_MspDeInit+0x3c>)
 8009d04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d08:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8009d0a:	2140      	movs	r1, #64	; 0x40
 8009d0c:	4807      	ldr	r0, [pc, #28]	; (8009d2c <HAL_I2C_MspDeInit+0x40>)
 8009d0e:	f000 fd03 	bl	800a718 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8009d12:	2180      	movs	r1, #128	; 0x80
 8009d14:	4805      	ldr	r0, [pc, #20]	; (8009d2c <HAL_I2C_MspDeInit+0x40>)
 8009d16:	f000 fcff 	bl	800a718 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8009d1a:	bf00      	nop
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	40005400 	.word	0x40005400
 8009d28:	40021000 	.word	0x40021000
 8009d2c:	40010c00 	.word	0x40010c00

08009d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a0d      	ldr	r2, [pc, #52]	; (8009d74 <HAL_TIM_Base_MspInit+0x44>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d113      	bne.n	8009d6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009d42:	4b0d      	ldr	r3, [pc, #52]	; (8009d78 <HAL_TIM_Base_MspInit+0x48>)
 8009d44:	699b      	ldr	r3, [r3, #24]
 8009d46:	4a0c      	ldr	r2, [pc, #48]	; (8009d78 <HAL_TIM_Base_MspInit+0x48>)
 8009d48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009d4c:	6193      	str	r3, [r2, #24]
 8009d4e:	4b0a      	ldr	r3, [pc, #40]	; (8009d78 <HAL_TIM_Base_MspInit+0x48>)
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	2019      	movs	r0, #25
 8009d60:	f000 fb0f 	bl	800a382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8009d64:	2019      	movs	r0, #25
 8009d66:	f000 fb28 	bl	800a3ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8009d6a:	bf00      	nop
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	40012c00 	.word	0x40012c00
 8009d78:	40021000 	.word	0x40021000

08009d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b088      	sub	sp, #32
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d84:	f107 0310 	add.w	r3, r7, #16
 8009d88:	2200      	movs	r2, #0
 8009d8a:	601a      	str	r2, [r3, #0]
 8009d8c:	605a      	str	r2, [r3, #4]
 8009d8e:	609a      	str	r2, [r3, #8]
 8009d90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a1c      	ldr	r2, [pc, #112]	; (8009e08 <HAL_UART_MspInit+0x8c>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d131      	bne.n	8009e00 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009d9c:	4b1b      	ldr	r3, [pc, #108]	; (8009e0c <HAL_UART_MspInit+0x90>)
 8009d9e:	699b      	ldr	r3, [r3, #24]
 8009da0:	4a1a      	ldr	r2, [pc, #104]	; (8009e0c <HAL_UART_MspInit+0x90>)
 8009da2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009da6:	6193      	str	r3, [r2, #24]
 8009da8:	4b18      	ldr	r3, [pc, #96]	; (8009e0c <HAL_UART_MspInit+0x90>)
 8009daa:	699b      	ldr	r3, [r3, #24]
 8009dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009db0:	60fb      	str	r3, [r7, #12]
 8009db2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009db4:	4b15      	ldr	r3, [pc, #84]	; (8009e0c <HAL_UART_MspInit+0x90>)
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	4a14      	ldr	r2, [pc, #80]	; (8009e0c <HAL_UART_MspInit+0x90>)
 8009dba:	f043 0304 	orr.w	r3, r3, #4
 8009dbe:	6193      	str	r3, [r2, #24]
 8009dc0:	4b12      	ldr	r3, [pc, #72]	; (8009e0c <HAL_UART_MspInit+0x90>)
 8009dc2:	699b      	ldr	r3, [r3, #24]
 8009dc4:	f003 0304 	and.w	r3, r3, #4
 8009dc8:	60bb      	str	r3, [r7, #8]
 8009dca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009dda:	f107 0310 	add.w	r3, r7, #16
 8009dde:	4619      	mov	r1, r3
 8009de0:	480b      	ldr	r0, [pc, #44]	; (8009e10 <HAL_UART_MspInit+0x94>)
 8009de2:	f000 fb05 	bl	800a3f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009dec:	2300      	movs	r3, #0
 8009dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009df0:	2300      	movs	r3, #0
 8009df2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009df4:	f107 0310 	add.w	r3, r7, #16
 8009df8:	4619      	mov	r1, r3
 8009dfa:	4805      	ldr	r0, [pc, #20]	; (8009e10 <HAL_UART_MspInit+0x94>)
 8009dfc:	f000 faf8 	bl	800a3f0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8009e00:	bf00      	nop
 8009e02:	3720      	adds	r7, #32
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	40013800 	.word	0x40013800
 8009e0c:	40021000 	.word	0x40021000
 8009e10:	40010800 	.word	0x40010800

08009e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009e14:	b480      	push	{r7}
 8009e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009e18:	e7fe      	b.n	8009e18 <NMI_Handler+0x4>

08009e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009e1e:	e7fe      	b.n	8009e1e <HardFault_Handler+0x4>

08009e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009e20:	b480      	push	{r7}
 8009e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009e24:	e7fe      	b.n	8009e24 <MemManage_Handler+0x4>

08009e26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009e26:	b480      	push	{r7}
 8009e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009e2a:	e7fe      	b.n	8009e2a <BusFault_Handler+0x4>

08009e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009e30:	e7fe      	b.n	8009e30 <UsageFault_Handler+0x4>

08009e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009e32:	b480      	push	{r7}
 8009e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009e36:	bf00      	nop
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bc80      	pop	{r7}
 8009e3c:	4770      	bx	lr

08009e3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009e42:	bf00      	nop
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bc80      	pop	{r7}
 8009e48:	4770      	bx	lr

08009e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009e4e:	bf00      	nop
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bc80      	pop	{r7}
 8009e54:	4770      	bx	lr

08009e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009e5a:	f000 f87f 	bl	8009f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009e5e:	bf00      	nop
 8009e60:	bd80      	pop	{r7, pc}
	...

08009e64 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009e68:	4802      	ldr	r0, [pc, #8]	; (8009e74 <TIM1_UP_IRQHandler+0x10>)
 8009e6a:	f002 fc4b 	bl	800c704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009e6e:	bf00      	nop
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	200018ac 	.word	0x200018ac

08009e78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009e7c:	bf00      	nop
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bc80      	pop	{r7}
 8009e82:	4770      	bx	lr

08009e84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009e84:	480c      	ldr	r0, [pc, #48]	; (8009eb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009e86:	490d      	ldr	r1, [pc, #52]	; (8009ebc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009e88:	4a0d      	ldr	r2, [pc, #52]	; (8009ec0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009e8c:	e002      	b.n	8009e94 <LoopCopyDataInit>

08009e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009e92:	3304      	adds	r3, #4

08009e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009e98:	d3f9      	bcc.n	8009e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009e9a:	4a0a      	ldr	r2, [pc, #40]	; (8009ec4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009e9c:	4c0a      	ldr	r4, [pc, #40]	; (8009ec8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009ea0:	e001      	b.n	8009ea6 <LoopFillZerobss>

08009ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009ea4:	3204      	adds	r2, #4

08009ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009ea8:	d3fb      	bcc.n	8009ea2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009eaa:	f7ff ffe5 	bl	8009e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009eae:	f003 f8ed 	bl	800d08c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009eb2:	f7ff fbe7 	bl	8009684 <main>
  bx lr
 8009eb6:	4770      	bx	lr
  ldr r0, =_sdata
 8009eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009ebc:	20000ce4 	.word	0x20000ce4
  ldr r2, =_sidata
 8009ec0:	0800d1a4 	.word	0x0800d1a4
  ldr r2, =_sbss
 8009ec4:	20000ce8 	.word	0x20000ce8
  ldr r4, =_ebss
 8009ec8:	20001940 	.word	0x20001940

08009ecc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009ecc:	e7fe      	b.n	8009ecc <ADC1_2_IRQHandler>
	...

08009ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009ed4:	4b08      	ldr	r3, [pc, #32]	; (8009ef8 <HAL_Init+0x28>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a07      	ldr	r2, [pc, #28]	; (8009ef8 <HAL_Init+0x28>)
 8009eda:	f043 0310 	orr.w	r3, r3, #16
 8009ede:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009ee0:	2003      	movs	r0, #3
 8009ee2:	f000 fa43 	bl	800a36c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009ee6:	200f      	movs	r0, #15
 8009ee8:	f000 f808 	bl	8009efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009eec:	f7ff fe42 	bl	8009b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	40022000 	.word	0x40022000

08009efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009f04:	4b12      	ldr	r3, [pc, #72]	; (8009f50 <HAL_InitTick+0x54>)
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	4b12      	ldr	r3, [pc, #72]	; (8009f54 <HAL_InitTick+0x58>)
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f000 fa5b 	bl	800a3d6 <HAL_SYSTICK_Config>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d001      	beq.n	8009f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e00e      	b.n	8009f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2b0f      	cmp	r3, #15
 8009f2e:	d80a      	bhi.n	8009f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009f30:	2200      	movs	r2, #0
 8009f32:	6879      	ldr	r1, [r7, #4]
 8009f34:	f04f 30ff 	mov.w	r0, #4294967295
 8009f38:	f000 fa23 	bl	800a382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009f3c:	4a06      	ldr	r2, [pc, #24]	; (8009f58 <HAL_InitTick+0x5c>)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009f42:	2300      	movs	r3, #0
 8009f44:	e000      	b.n	8009f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	20000cd8 	.word	0x20000cd8
 8009f54:	20000ce0 	.word	0x20000ce0
 8009f58:	20000cdc 	.word	0x20000cdc

08009f5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009f60:	4b05      	ldr	r3, [pc, #20]	; (8009f78 <HAL_IncTick+0x1c>)
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	461a      	mov	r2, r3
 8009f66:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <HAL_IncTick+0x20>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	4a03      	ldr	r2, [pc, #12]	; (8009f7c <HAL_IncTick+0x20>)
 8009f6e:	6013      	str	r3, [r2, #0]
}
 8009f70:	bf00      	nop
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bc80      	pop	{r7}
 8009f76:	4770      	bx	lr
 8009f78:	20000ce0 	.word	0x20000ce0
 8009f7c:	2000193c 	.word	0x2000193c

08009f80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009f80:	b480      	push	{r7}
 8009f82:	af00      	add	r7, sp, #0
  return uwTick;
 8009f84:	4b02      	ldr	r3, [pc, #8]	; (8009f90 <HAL_GetTick+0x10>)
 8009f86:	681b      	ldr	r3, [r3, #0]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bc80      	pop	{r7}
 8009f8e:	4770      	bx	lr
 8009f90:	2000193c 	.word	0x2000193c

08009f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009f9c:	f7ff fff0 	bl	8009f80 <HAL_GetTick>
 8009fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fac:	d005      	beq.n	8009fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009fae:	4b0a      	ldr	r3, [pc, #40]	; (8009fd8 <HAL_Delay+0x44>)
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009fba:	bf00      	nop
 8009fbc:	f7ff ffe0 	bl	8009f80 <HAL_GetTick>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	1ad3      	subs	r3, r2, r3
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d8f7      	bhi.n	8009fbc <HAL_Delay+0x28>
  {
  }
}
 8009fcc:	bf00      	nop
 8009fce:	bf00      	nop
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20000ce0 	.word	0x20000ce0

08009fdc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d101      	bne.n	8009fee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e0ed      	b.n	800a1ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d102      	bne.n	800a000 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7ff fdec 	bl	8009bd8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f042 0201 	orr.w	r2, r2, #1
 800a00e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a010:	f7ff ffb6 	bl	8009f80 <HAL_GetTick>
 800a014:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a016:	e012      	b.n	800a03e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a018:	f7ff ffb2 	bl	8009f80 <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b0a      	cmp	r3, #10
 800a024:	d90b      	bls.n	800a03e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2205      	movs	r2, #5
 800a036:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e0c5      	b.n	800a1ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d0e5      	beq.n	800a018 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f022 0202 	bic.w	r2, r2, #2
 800a05a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a05c:	f7ff ff90 	bl	8009f80 <HAL_GetTick>
 800a060:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a062:	e012      	b.n	800a08a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a064:	f7ff ff8c 	bl	8009f80 <HAL_GetTick>
 800a068:	4602      	mov	r2, r0
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	2b0a      	cmp	r3, #10
 800a070:	d90b      	bls.n	800a08a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a076:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2205      	movs	r2, #5
 800a082:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e09f      	b.n	800a1ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	f003 0302 	and.w	r3, r3, #2
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1e5      	bne.n	800a064 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	7e1b      	ldrb	r3, [r3, #24]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d108      	bne.n	800a0b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a0ae:	601a      	str	r2, [r3, #0]
 800a0b0:	e007      	b.n	800a0c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	7e5b      	ldrb	r3, [r3, #25]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d108      	bne.n	800a0dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0d8:	601a      	str	r2, [r3, #0]
 800a0da:	e007      	b.n	800a0ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	7e9b      	ldrb	r3, [r3, #26]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d108      	bne.n	800a106 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f042 0220 	orr.w	r2, r2, #32
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	e007      	b.n	800a116 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f022 0220 	bic.w	r2, r2, #32
 800a114:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	7edb      	ldrb	r3, [r3, #27]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d108      	bne.n	800a130 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f022 0210 	bic.w	r2, r2, #16
 800a12c:	601a      	str	r2, [r3, #0]
 800a12e:	e007      	b.n	800a140 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f042 0210 	orr.w	r2, r2, #16
 800a13e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	7f1b      	ldrb	r3, [r3, #28]
 800a144:	2b01      	cmp	r3, #1
 800a146:	d108      	bne.n	800a15a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f042 0208 	orr.w	r2, r2, #8
 800a156:	601a      	str	r2, [r3, #0]
 800a158:	e007      	b.n	800a16a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f022 0208 	bic.w	r2, r2, #8
 800a168:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	7f5b      	ldrb	r3, [r3, #29]
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d108      	bne.n	800a184 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f042 0204 	orr.w	r2, r2, #4
 800a180:	601a      	str	r2, [r3, #0]
 800a182:	e007      	b.n	800a194 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f022 0204 	bic.w	r2, r2, #4
 800a192:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	689a      	ldr	r2, [r3, #8]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	431a      	orrs	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	431a      	orrs	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	695b      	ldr	r3, [r3, #20]
 800a1a8:	ea42 0103 	orr.w	r1, r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	1e5a      	subs	r2, r3, #1
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	430a      	orrs	r2, r1
 800a1b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
	...

0800a1d4 <__NVIC_SetPriorityGrouping>:
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f003 0307 	and.w	r3, r3, #7
 800a1e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a1e4:	4b0c      	ldr	r3, [pc, #48]	; (800a218 <__NVIC_SetPriorityGrouping+0x44>)
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a1fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a206:	4a04      	ldr	r2, [pc, #16]	; (800a218 <__NVIC_SetPriorityGrouping+0x44>)
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	60d3      	str	r3, [r2, #12]
}
 800a20c:	bf00      	nop
 800a20e:	3714      	adds	r7, #20
 800a210:	46bd      	mov	sp, r7
 800a212:	bc80      	pop	{r7}
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	e000ed00 	.word	0xe000ed00

0800a21c <__NVIC_GetPriorityGrouping>:
{
 800a21c:	b480      	push	{r7}
 800a21e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a220:	4b04      	ldr	r3, [pc, #16]	; (800a234 <__NVIC_GetPriorityGrouping+0x18>)
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	0a1b      	lsrs	r3, r3, #8
 800a226:	f003 0307 	and.w	r3, r3, #7
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bc80      	pop	{r7}
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	e000ed00 	.word	0xe000ed00

0800a238 <__NVIC_EnableIRQ>:
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	4603      	mov	r3, r0
 800a240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a246:	2b00      	cmp	r3, #0
 800a248:	db0b      	blt.n	800a262 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a24a:	79fb      	ldrb	r3, [r7, #7]
 800a24c:	f003 021f 	and.w	r2, r3, #31
 800a250:	4906      	ldr	r1, [pc, #24]	; (800a26c <__NVIC_EnableIRQ+0x34>)
 800a252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a256:	095b      	lsrs	r3, r3, #5
 800a258:	2001      	movs	r0, #1
 800a25a:	fa00 f202 	lsl.w	r2, r0, r2
 800a25e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a262:	bf00      	nop
 800a264:	370c      	adds	r7, #12
 800a266:	46bd      	mov	sp, r7
 800a268:	bc80      	pop	{r7}
 800a26a:	4770      	bx	lr
 800a26c:	e000e100 	.word	0xe000e100

0800a270 <__NVIC_SetPriority>:
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	4603      	mov	r3, r0
 800a278:	6039      	str	r1, [r7, #0]
 800a27a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a27c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a280:	2b00      	cmp	r3, #0
 800a282:	db0a      	blt.n	800a29a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	b2da      	uxtb	r2, r3
 800a288:	490c      	ldr	r1, [pc, #48]	; (800a2bc <__NVIC_SetPriority+0x4c>)
 800a28a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a28e:	0112      	lsls	r2, r2, #4
 800a290:	b2d2      	uxtb	r2, r2
 800a292:	440b      	add	r3, r1
 800a294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a298:	e00a      	b.n	800a2b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	b2da      	uxtb	r2, r3
 800a29e:	4908      	ldr	r1, [pc, #32]	; (800a2c0 <__NVIC_SetPriority+0x50>)
 800a2a0:	79fb      	ldrb	r3, [r7, #7]
 800a2a2:	f003 030f 	and.w	r3, r3, #15
 800a2a6:	3b04      	subs	r3, #4
 800a2a8:	0112      	lsls	r2, r2, #4
 800a2aa:	b2d2      	uxtb	r2, r2
 800a2ac:	440b      	add	r3, r1
 800a2ae:	761a      	strb	r2, [r3, #24]
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bc80      	pop	{r7}
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	e000e100 	.word	0xe000e100
 800a2c0:	e000ed00 	.word	0xe000ed00

0800a2c4 <NVIC_EncodePriority>:
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b089      	sub	sp, #36	; 0x24
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f003 0307 	and.w	r3, r3, #7
 800a2d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	f1c3 0307 	rsb	r3, r3, #7
 800a2de:	2b04      	cmp	r3, #4
 800a2e0:	bf28      	it	cs
 800a2e2:	2304      	movcs	r3, #4
 800a2e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	3304      	adds	r3, #4
 800a2ea:	2b06      	cmp	r3, #6
 800a2ec:	d902      	bls.n	800a2f4 <NVIC_EncodePriority+0x30>
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	3b03      	subs	r3, #3
 800a2f2:	e000      	b.n	800a2f6 <NVIC_EncodePriority+0x32>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a302:	43da      	mvns	r2, r3
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	401a      	ands	r2, r3
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a30c:	f04f 31ff 	mov.w	r1, #4294967295
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	fa01 f303 	lsl.w	r3, r1, r3
 800a316:	43d9      	mvns	r1, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a31c:	4313      	orrs	r3, r2
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3724      	adds	r7, #36	; 0x24
 800a322:	46bd      	mov	sp, r7
 800a324:	bc80      	pop	{r7}
 800a326:	4770      	bx	lr

0800a328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3b01      	subs	r3, #1
 800a334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a338:	d301      	bcc.n	800a33e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a33a:	2301      	movs	r3, #1
 800a33c:	e00f      	b.n	800a35e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a33e:	4a0a      	ldr	r2, [pc, #40]	; (800a368 <SysTick_Config+0x40>)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	3b01      	subs	r3, #1
 800a344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a346:	210f      	movs	r1, #15
 800a348:	f04f 30ff 	mov.w	r0, #4294967295
 800a34c:	f7ff ff90 	bl	800a270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a350:	4b05      	ldr	r3, [pc, #20]	; (800a368 <SysTick_Config+0x40>)
 800a352:	2200      	movs	r2, #0
 800a354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a356:	4b04      	ldr	r3, [pc, #16]	; (800a368 <SysTick_Config+0x40>)
 800a358:	2207      	movs	r2, #7
 800a35a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	e000e010 	.word	0xe000e010

0800a36c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7ff ff2d 	bl	800a1d4 <__NVIC_SetPriorityGrouping>
}
 800a37a:	bf00      	nop
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a382:	b580      	push	{r7, lr}
 800a384:	b086      	sub	sp, #24
 800a386:	af00      	add	r7, sp, #0
 800a388:	4603      	mov	r3, r0
 800a38a:	60b9      	str	r1, [r7, #8]
 800a38c:	607a      	str	r2, [r7, #4]
 800a38e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a390:	2300      	movs	r3, #0
 800a392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a394:	f7ff ff42 	bl	800a21c <__NVIC_GetPriorityGrouping>
 800a398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	68b9      	ldr	r1, [r7, #8]
 800a39e:	6978      	ldr	r0, [r7, #20]
 800a3a0:	f7ff ff90 	bl	800a2c4 <NVIC_EncodePriority>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7ff ff5f 	bl	800a270 <__NVIC_SetPriority>
}
 800a3b2:	bf00      	nop
 800a3b4:	3718      	adds	r7, #24
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b082      	sub	sp, #8
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a3c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7ff ff35 	bl	800a238 <__NVIC_EnableIRQ>
}
 800a3ce:	bf00      	nop
 800a3d0:	3708      	adds	r7, #8
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b082      	sub	sp, #8
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f7ff ffa2 	bl	800a328 <SysTick_Config>
 800a3e4:	4603      	mov	r3, r0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b08b      	sub	sp, #44	; 0x2c
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a3fe:	2300      	movs	r3, #0
 800a400:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a402:	e179      	b.n	800a6f8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a404:	2201      	movs	r2, #1
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	fa02 f303 	lsl.w	r3, r2, r3
 800a40c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	69fa      	ldr	r2, [r7, #28]
 800a414:	4013      	ands	r3, r2
 800a416:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a418:	69ba      	ldr	r2, [r7, #24]
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	f040 8168 	bne.w	800a6f2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	4a96      	ldr	r2, [pc, #600]	; (800a680 <HAL_GPIO_Init+0x290>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d05e      	beq.n	800a4ea <HAL_GPIO_Init+0xfa>
 800a42c:	4a94      	ldr	r2, [pc, #592]	; (800a680 <HAL_GPIO_Init+0x290>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d875      	bhi.n	800a51e <HAL_GPIO_Init+0x12e>
 800a432:	4a94      	ldr	r2, [pc, #592]	; (800a684 <HAL_GPIO_Init+0x294>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d058      	beq.n	800a4ea <HAL_GPIO_Init+0xfa>
 800a438:	4a92      	ldr	r2, [pc, #584]	; (800a684 <HAL_GPIO_Init+0x294>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d86f      	bhi.n	800a51e <HAL_GPIO_Init+0x12e>
 800a43e:	4a92      	ldr	r2, [pc, #584]	; (800a688 <HAL_GPIO_Init+0x298>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d052      	beq.n	800a4ea <HAL_GPIO_Init+0xfa>
 800a444:	4a90      	ldr	r2, [pc, #576]	; (800a688 <HAL_GPIO_Init+0x298>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d869      	bhi.n	800a51e <HAL_GPIO_Init+0x12e>
 800a44a:	4a90      	ldr	r2, [pc, #576]	; (800a68c <HAL_GPIO_Init+0x29c>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d04c      	beq.n	800a4ea <HAL_GPIO_Init+0xfa>
 800a450:	4a8e      	ldr	r2, [pc, #568]	; (800a68c <HAL_GPIO_Init+0x29c>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d863      	bhi.n	800a51e <HAL_GPIO_Init+0x12e>
 800a456:	4a8e      	ldr	r2, [pc, #568]	; (800a690 <HAL_GPIO_Init+0x2a0>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d046      	beq.n	800a4ea <HAL_GPIO_Init+0xfa>
 800a45c:	4a8c      	ldr	r2, [pc, #560]	; (800a690 <HAL_GPIO_Init+0x2a0>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d85d      	bhi.n	800a51e <HAL_GPIO_Init+0x12e>
 800a462:	2b12      	cmp	r3, #18
 800a464:	d82a      	bhi.n	800a4bc <HAL_GPIO_Init+0xcc>
 800a466:	2b12      	cmp	r3, #18
 800a468:	d859      	bhi.n	800a51e <HAL_GPIO_Init+0x12e>
 800a46a:	a201      	add	r2, pc, #4	; (adr r2, 800a470 <HAL_GPIO_Init+0x80>)
 800a46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a470:	0800a4eb 	.word	0x0800a4eb
 800a474:	0800a4c5 	.word	0x0800a4c5
 800a478:	0800a4d7 	.word	0x0800a4d7
 800a47c:	0800a519 	.word	0x0800a519
 800a480:	0800a51f 	.word	0x0800a51f
 800a484:	0800a51f 	.word	0x0800a51f
 800a488:	0800a51f 	.word	0x0800a51f
 800a48c:	0800a51f 	.word	0x0800a51f
 800a490:	0800a51f 	.word	0x0800a51f
 800a494:	0800a51f 	.word	0x0800a51f
 800a498:	0800a51f 	.word	0x0800a51f
 800a49c:	0800a51f 	.word	0x0800a51f
 800a4a0:	0800a51f 	.word	0x0800a51f
 800a4a4:	0800a51f 	.word	0x0800a51f
 800a4a8:	0800a51f 	.word	0x0800a51f
 800a4ac:	0800a51f 	.word	0x0800a51f
 800a4b0:	0800a51f 	.word	0x0800a51f
 800a4b4:	0800a4cd 	.word	0x0800a4cd
 800a4b8:	0800a4e1 	.word	0x0800a4e1
 800a4bc:	4a75      	ldr	r2, [pc, #468]	; (800a694 <HAL_GPIO_Init+0x2a4>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d013      	beq.n	800a4ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a4c2:	e02c      	b.n	800a51e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	623b      	str	r3, [r7, #32]
          break;
 800a4ca:	e029      	b.n	800a520 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	3304      	adds	r3, #4
 800a4d2:	623b      	str	r3, [r7, #32]
          break;
 800a4d4:	e024      	b.n	800a520 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	3308      	adds	r3, #8
 800a4dc:	623b      	str	r3, [r7, #32]
          break;
 800a4de:	e01f      	b.n	800a520 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	330c      	adds	r3, #12
 800a4e6:	623b      	str	r3, [r7, #32]
          break;
 800a4e8:	e01a      	b.n	800a520 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d102      	bne.n	800a4f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a4f2:	2304      	movs	r3, #4
 800a4f4:	623b      	str	r3, [r7, #32]
          break;
 800a4f6:	e013      	b.n	800a520 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d105      	bne.n	800a50c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a500:	2308      	movs	r3, #8
 800a502:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	69fa      	ldr	r2, [r7, #28]
 800a508:	611a      	str	r2, [r3, #16]
          break;
 800a50a:	e009      	b.n	800a520 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a50c:	2308      	movs	r3, #8
 800a50e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	69fa      	ldr	r2, [r7, #28]
 800a514:	615a      	str	r2, [r3, #20]
          break;
 800a516:	e003      	b.n	800a520 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a518:	2300      	movs	r3, #0
 800a51a:	623b      	str	r3, [r7, #32]
          break;
 800a51c:	e000      	b.n	800a520 <HAL_GPIO_Init+0x130>
          break;
 800a51e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	2bff      	cmp	r3, #255	; 0xff
 800a524:	d801      	bhi.n	800a52a <HAL_GPIO_Init+0x13a>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	e001      	b.n	800a52e <HAL_GPIO_Init+0x13e>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	3304      	adds	r3, #4
 800a52e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	2bff      	cmp	r3, #255	; 0xff
 800a534:	d802      	bhi.n	800a53c <HAL_GPIO_Init+0x14c>
 800a536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	e002      	b.n	800a542 <HAL_GPIO_Init+0x152>
 800a53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53e:	3b08      	subs	r3, #8
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	210f      	movs	r1, #15
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	fa01 f303 	lsl.w	r3, r1, r3
 800a550:	43db      	mvns	r3, r3
 800a552:	401a      	ands	r2, r3
 800a554:	6a39      	ldr	r1, [r7, #32]
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	fa01 f303 	lsl.w	r3, r1, r3
 800a55c:	431a      	orrs	r2, r3
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f000 80c1 	beq.w	800a6f2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a570:	4b49      	ldr	r3, [pc, #292]	; (800a698 <HAL_GPIO_Init+0x2a8>)
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	4a48      	ldr	r2, [pc, #288]	; (800a698 <HAL_GPIO_Init+0x2a8>)
 800a576:	f043 0301 	orr.w	r3, r3, #1
 800a57a:	6193      	str	r3, [r2, #24]
 800a57c:	4b46      	ldr	r3, [pc, #280]	; (800a698 <HAL_GPIO_Init+0x2a8>)
 800a57e:	699b      	ldr	r3, [r3, #24]
 800a580:	f003 0301 	and.w	r3, r3, #1
 800a584:	60bb      	str	r3, [r7, #8]
 800a586:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a588:	4a44      	ldr	r2, [pc, #272]	; (800a69c <HAL_GPIO_Init+0x2ac>)
 800a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58c:	089b      	lsrs	r3, r3, #2
 800a58e:	3302      	adds	r3, #2
 800a590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a594:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a598:	f003 0303 	and.w	r3, r3, #3
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	220f      	movs	r2, #15
 800a5a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a4:	43db      	mvns	r3, r3
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a3c      	ldr	r2, [pc, #240]	; (800a6a0 <HAL_GPIO_Init+0x2b0>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d01f      	beq.n	800a5f4 <HAL_GPIO_Init+0x204>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a3b      	ldr	r2, [pc, #236]	; (800a6a4 <HAL_GPIO_Init+0x2b4>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d019      	beq.n	800a5f0 <HAL_GPIO_Init+0x200>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a3a      	ldr	r2, [pc, #232]	; (800a6a8 <HAL_GPIO_Init+0x2b8>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d013      	beq.n	800a5ec <HAL_GPIO_Init+0x1fc>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a39      	ldr	r2, [pc, #228]	; (800a6ac <HAL_GPIO_Init+0x2bc>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d00d      	beq.n	800a5e8 <HAL_GPIO_Init+0x1f8>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a38      	ldr	r2, [pc, #224]	; (800a6b0 <HAL_GPIO_Init+0x2c0>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d007      	beq.n	800a5e4 <HAL_GPIO_Init+0x1f4>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a37      	ldr	r2, [pc, #220]	; (800a6b4 <HAL_GPIO_Init+0x2c4>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d101      	bne.n	800a5e0 <HAL_GPIO_Init+0x1f0>
 800a5dc:	2305      	movs	r3, #5
 800a5de:	e00a      	b.n	800a5f6 <HAL_GPIO_Init+0x206>
 800a5e0:	2306      	movs	r3, #6
 800a5e2:	e008      	b.n	800a5f6 <HAL_GPIO_Init+0x206>
 800a5e4:	2304      	movs	r3, #4
 800a5e6:	e006      	b.n	800a5f6 <HAL_GPIO_Init+0x206>
 800a5e8:	2303      	movs	r3, #3
 800a5ea:	e004      	b.n	800a5f6 <HAL_GPIO_Init+0x206>
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	e002      	b.n	800a5f6 <HAL_GPIO_Init+0x206>
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e000      	b.n	800a5f6 <HAL_GPIO_Init+0x206>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5f8:	f002 0203 	and.w	r2, r2, #3
 800a5fc:	0092      	lsls	r2, r2, #2
 800a5fe:	4093      	lsls	r3, r2
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	4313      	orrs	r3, r2
 800a604:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a606:	4925      	ldr	r1, [pc, #148]	; (800a69c <HAL_GPIO_Init+0x2ac>)
 800a608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60a:	089b      	lsrs	r3, r3, #2
 800a60c:	3302      	adds	r3, #2
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d006      	beq.n	800a62e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a620:	4b25      	ldr	r3, [pc, #148]	; (800a6b8 <HAL_GPIO_Init+0x2c8>)
 800a622:	689a      	ldr	r2, [r3, #8]
 800a624:	4924      	ldr	r1, [pc, #144]	; (800a6b8 <HAL_GPIO_Init+0x2c8>)
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	4313      	orrs	r3, r2
 800a62a:	608b      	str	r3, [r1, #8]
 800a62c:	e006      	b.n	800a63c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a62e:	4b22      	ldr	r3, [pc, #136]	; (800a6b8 <HAL_GPIO_Init+0x2c8>)
 800a630:	689a      	ldr	r2, [r3, #8]
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	43db      	mvns	r3, r3
 800a636:	4920      	ldr	r1, [pc, #128]	; (800a6b8 <HAL_GPIO_Init+0x2c8>)
 800a638:	4013      	ands	r3, r2
 800a63a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a644:	2b00      	cmp	r3, #0
 800a646:	d006      	beq.n	800a656 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a648:	4b1b      	ldr	r3, [pc, #108]	; (800a6b8 <HAL_GPIO_Init+0x2c8>)
 800a64a:	68da      	ldr	r2, [r3, #12]
 800a64c:	491a      	ldr	r1, [pc, #104]	; (800a6b8 <HAL_GPIO_Init+0x2c8>)
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	4313      	orrs	r3, r2
 800a652:	60cb      	str	r3, [r1, #12]
 800a654:	e006      	b.n	800a664 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a656:	4b18      	ldr	r3, [pc, #96]	; (800a6b8 <HAL_GPIO_Init+0x2c8>)
 800a658:	68da      	ldr	r2, [r3, #12]
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	43db      	mvns	r3, r3
 800a65e:	4916      	ldr	r1, [pc, #88]	; (800a6b8 <HAL_GPIO_Init+0x2c8>)
 800a660:	4013      	ands	r3, r2
 800a662:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d025      	beq.n	800a6bc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a670:	4b11      	ldr	r3, [pc, #68]	; (800a6b8 <HAL_GPIO_Init+0x2c8>)
 800a672:	685a      	ldr	r2, [r3, #4]
 800a674:	4910      	ldr	r1, [pc, #64]	; (800a6b8 <HAL_GPIO_Init+0x2c8>)
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	4313      	orrs	r3, r2
 800a67a:	604b      	str	r3, [r1, #4]
 800a67c:	e025      	b.n	800a6ca <HAL_GPIO_Init+0x2da>
 800a67e:	bf00      	nop
 800a680:	10320000 	.word	0x10320000
 800a684:	10310000 	.word	0x10310000
 800a688:	10220000 	.word	0x10220000
 800a68c:	10210000 	.word	0x10210000
 800a690:	10120000 	.word	0x10120000
 800a694:	10110000 	.word	0x10110000
 800a698:	40021000 	.word	0x40021000
 800a69c:	40010000 	.word	0x40010000
 800a6a0:	40010800 	.word	0x40010800
 800a6a4:	40010c00 	.word	0x40010c00
 800a6a8:	40011000 	.word	0x40011000
 800a6ac:	40011400 	.word	0x40011400
 800a6b0:	40011800 	.word	0x40011800
 800a6b4:	40011c00 	.word	0x40011c00
 800a6b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a6bc:	4b15      	ldr	r3, [pc, #84]	; (800a714 <HAL_GPIO_Init+0x324>)
 800a6be:	685a      	ldr	r2, [r3, #4]
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	43db      	mvns	r3, r3
 800a6c4:	4913      	ldr	r1, [pc, #76]	; (800a714 <HAL_GPIO_Init+0x324>)
 800a6c6:	4013      	ands	r3, r2
 800a6c8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d006      	beq.n	800a6e4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a6d6:	4b0f      	ldr	r3, [pc, #60]	; (800a714 <HAL_GPIO_Init+0x324>)
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	490e      	ldr	r1, [pc, #56]	; (800a714 <HAL_GPIO_Init+0x324>)
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	600b      	str	r3, [r1, #0]
 800a6e2:	e006      	b.n	800a6f2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a6e4:	4b0b      	ldr	r3, [pc, #44]	; (800a714 <HAL_GPIO_Init+0x324>)
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	43db      	mvns	r3, r3
 800a6ec:	4909      	ldr	r1, [pc, #36]	; (800a714 <HAL_GPIO_Init+0x324>)
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a702:	2b00      	cmp	r3, #0
 800a704:	f47f ae7e 	bne.w	800a404 <HAL_GPIO_Init+0x14>
  }
}
 800a708:	bf00      	nop
 800a70a:	bf00      	nop
 800a70c:	372c      	adds	r7, #44	; 0x2c
 800a70e:	46bd      	mov	sp, r7
 800a710:	bc80      	pop	{r7}
 800a712:	4770      	bx	lr
 800a714:	40010400 	.word	0x40010400

0800a718 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a718:	b480      	push	{r7}
 800a71a:	b089      	sub	sp, #36	; 0x24
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a722:	2300      	movs	r3, #0
 800a724:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a726:	e0a6      	b.n	800a876 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a728:	2201      	movs	r2, #1
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	fa02 f303 	lsl.w	r3, r2, r3
 800a730:	683a      	ldr	r2, [r7, #0]
 800a732:	4013      	ands	r3, r2
 800a734:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f000 8099 	beq.w	800a870 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a73e:	4a54      	ldr	r2, [pc, #336]	; (800a890 <HAL_GPIO_DeInit+0x178>)
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	089b      	lsrs	r3, r3, #2
 800a744:	3302      	adds	r3, #2
 800a746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a74a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	f003 0303 	and.w	r3, r3, #3
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	220f      	movs	r2, #15
 800a756:	fa02 f303 	lsl.w	r3, r2, r3
 800a75a:	697a      	ldr	r2, [r7, #20]
 800a75c:	4013      	ands	r3, r2
 800a75e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a4c      	ldr	r2, [pc, #304]	; (800a894 <HAL_GPIO_DeInit+0x17c>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d01f      	beq.n	800a7a8 <HAL_GPIO_DeInit+0x90>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a4b      	ldr	r2, [pc, #300]	; (800a898 <HAL_GPIO_DeInit+0x180>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d019      	beq.n	800a7a4 <HAL_GPIO_DeInit+0x8c>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a4a      	ldr	r2, [pc, #296]	; (800a89c <HAL_GPIO_DeInit+0x184>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d013      	beq.n	800a7a0 <HAL_GPIO_DeInit+0x88>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a49      	ldr	r2, [pc, #292]	; (800a8a0 <HAL_GPIO_DeInit+0x188>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d00d      	beq.n	800a79c <HAL_GPIO_DeInit+0x84>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a48      	ldr	r2, [pc, #288]	; (800a8a4 <HAL_GPIO_DeInit+0x18c>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d007      	beq.n	800a798 <HAL_GPIO_DeInit+0x80>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a47      	ldr	r2, [pc, #284]	; (800a8a8 <HAL_GPIO_DeInit+0x190>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d101      	bne.n	800a794 <HAL_GPIO_DeInit+0x7c>
 800a790:	2305      	movs	r3, #5
 800a792:	e00a      	b.n	800a7aa <HAL_GPIO_DeInit+0x92>
 800a794:	2306      	movs	r3, #6
 800a796:	e008      	b.n	800a7aa <HAL_GPIO_DeInit+0x92>
 800a798:	2304      	movs	r3, #4
 800a79a:	e006      	b.n	800a7aa <HAL_GPIO_DeInit+0x92>
 800a79c:	2303      	movs	r3, #3
 800a79e:	e004      	b.n	800a7aa <HAL_GPIO_DeInit+0x92>
 800a7a0:	2302      	movs	r3, #2
 800a7a2:	e002      	b.n	800a7aa <HAL_GPIO_DeInit+0x92>
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e000      	b.n	800a7aa <HAL_GPIO_DeInit+0x92>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	69fa      	ldr	r2, [r7, #28]
 800a7ac:	f002 0203 	and.w	r2, r2, #3
 800a7b0:	0092      	lsls	r2, r2, #2
 800a7b2:	4093      	lsls	r3, r2
 800a7b4:	697a      	ldr	r2, [r7, #20]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d132      	bne.n	800a820 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a7ba:	4b3c      	ldr	r3, [pc, #240]	; (800a8ac <HAL_GPIO_DeInit+0x194>)
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	43db      	mvns	r3, r3
 800a7c2:	493a      	ldr	r1, [pc, #232]	; (800a8ac <HAL_GPIO_DeInit+0x194>)
 800a7c4:	4013      	ands	r3, r2
 800a7c6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a7c8:	4b38      	ldr	r3, [pc, #224]	; (800a8ac <HAL_GPIO_DeInit+0x194>)
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	43db      	mvns	r3, r3
 800a7d0:	4936      	ldr	r1, [pc, #216]	; (800a8ac <HAL_GPIO_DeInit+0x194>)
 800a7d2:	4013      	ands	r3, r2
 800a7d4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a7d6:	4b35      	ldr	r3, [pc, #212]	; (800a8ac <HAL_GPIO_DeInit+0x194>)
 800a7d8:	68da      	ldr	r2, [r3, #12]
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	43db      	mvns	r3, r3
 800a7de:	4933      	ldr	r1, [pc, #204]	; (800a8ac <HAL_GPIO_DeInit+0x194>)
 800a7e0:	4013      	ands	r3, r2
 800a7e2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a7e4:	4b31      	ldr	r3, [pc, #196]	; (800a8ac <HAL_GPIO_DeInit+0x194>)
 800a7e6:	689a      	ldr	r2, [r3, #8]
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	43db      	mvns	r3, r3
 800a7ec:	492f      	ldr	r1, [pc, #188]	; (800a8ac <HAL_GPIO_DeInit+0x194>)
 800a7ee:	4013      	ands	r3, r2
 800a7f0:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	f003 0303 	and.w	r3, r3, #3
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	220f      	movs	r2, #15
 800a7fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a800:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a802:	4a23      	ldr	r2, [pc, #140]	; (800a890 <HAL_GPIO_DeInit+0x178>)
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	089b      	lsrs	r3, r3, #2
 800a808:	3302      	adds	r3, #2
 800a80a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	43da      	mvns	r2, r3
 800a812:	481f      	ldr	r0, [pc, #124]	; (800a890 <HAL_GPIO_DeInit+0x178>)
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	089b      	lsrs	r3, r3, #2
 800a818:	400a      	ands	r2, r1
 800a81a:	3302      	adds	r3, #2
 800a81c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	2bff      	cmp	r3, #255	; 0xff
 800a824:	d801      	bhi.n	800a82a <HAL_GPIO_DeInit+0x112>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	e001      	b.n	800a82e <HAL_GPIO_DeInit+0x116>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	3304      	adds	r3, #4
 800a82e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	2bff      	cmp	r3, #255	; 0xff
 800a834:	d802      	bhi.n	800a83c <HAL_GPIO_DeInit+0x124>
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	e002      	b.n	800a842 <HAL_GPIO_DeInit+0x12a>
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	3b08      	subs	r3, #8
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	210f      	movs	r1, #15
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	fa01 f303 	lsl.w	r3, r1, r3
 800a850:	43db      	mvns	r3, r3
 800a852:	401a      	ands	r2, r3
 800a854:	2104      	movs	r1, #4
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	fa01 f303 	lsl.w	r3, r1, r3
 800a85c:	431a      	orrs	r2, r3
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	68da      	ldr	r2, [r3, #12]
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	43db      	mvns	r3, r3
 800a86a:	401a      	ands	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	3301      	adds	r3, #1
 800a874:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	fa22 f303 	lsr.w	r3, r2, r3
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f47f af52 	bne.w	800a728 <HAL_GPIO_DeInit+0x10>
  }
}
 800a884:	bf00      	nop
 800a886:	bf00      	nop
 800a888:	3724      	adds	r7, #36	; 0x24
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bc80      	pop	{r7}
 800a88e:	4770      	bx	lr
 800a890:	40010000 	.word	0x40010000
 800a894:	40010800 	.word	0x40010800
 800a898:	40010c00 	.word	0x40010c00
 800a89c:	40011000 	.word	0x40011000
 800a8a0:	40011400 	.word	0x40011400
 800a8a4:	40011800 	.word	0x40011800
 800a8a8:	40011c00 	.word	0x40011c00
 800a8ac:	40010400 	.word	0x40010400

0800a8b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	689a      	ldr	r2, [r3, #8]
 800a8c0:	887b      	ldrh	r3, [r7, #2]
 800a8c2:	4013      	ands	r3, r2
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d002      	beq.n	800a8ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	73fb      	strb	r3, [r7, #15]
 800a8cc:	e001      	b.n	800a8d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3714      	adds	r7, #20
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bc80      	pop	{r7}
 800a8dc:	4770      	bx	lr

0800a8de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a8de:	b480      	push	{r7}
 800a8e0:	b083      	sub	sp, #12
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	807b      	strh	r3, [r7, #2]
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a8ee:	787b      	ldrb	r3, [r7, #1]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d003      	beq.n	800a8fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a8f4:	887a      	ldrh	r2, [r7, #2]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a8fa:	e003      	b.n	800a904 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a8fc:	887b      	ldrh	r3, [r7, #2]
 800a8fe:	041a      	lsls	r2, r3, #16
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	611a      	str	r2, [r3, #16]
}
 800a904:	bf00      	nop
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	bc80      	pop	{r7}
 800a90c:	4770      	bx	lr

0800a90e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a90e:	b480      	push	{r7}
 800a910:	b085      	sub	sp, #20
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	460b      	mov	r3, r1
 800a918:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a920:	887a      	ldrh	r2, [r7, #2]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	4013      	ands	r3, r2
 800a926:	041a      	lsls	r2, r3, #16
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	43d9      	mvns	r1, r3
 800a92c:	887b      	ldrh	r3, [r7, #2]
 800a92e:	400b      	ands	r3, r1
 800a930:	431a      	orrs	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	611a      	str	r2, [r3, #16]
}
 800a936:	bf00      	nop
 800a938:	3714      	adds	r7, #20
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bc80      	pop	{r7}
 800a93e:	4770      	bx	lr

0800a940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d101      	bne.n	800a952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	e12b      	b.n	800abaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d106      	bne.n	800a96c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f7ff f982 	bl	8009c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2224      	movs	r2, #36	; 0x24
 800a970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f022 0201 	bic.w	r2, r2, #1
 800a982:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a992:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a9a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a9a4:	f001 fdb8 	bl	800c518 <HAL_RCC_GetPCLK1Freq>
 800a9a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	4a81      	ldr	r2, [pc, #516]	; (800abb4 <HAL_I2C_Init+0x274>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d807      	bhi.n	800a9c4 <HAL_I2C_Init+0x84>
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	4a80      	ldr	r2, [pc, #512]	; (800abb8 <HAL_I2C_Init+0x278>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	bf94      	ite	ls
 800a9bc:	2301      	movls	r3, #1
 800a9be:	2300      	movhi	r3, #0
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	e006      	b.n	800a9d2 <HAL_I2C_Init+0x92>
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	4a7d      	ldr	r2, [pc, #500]	; (800abbc <HAL_I2C_Init+0x27c>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	bf94      	ite	ls
 800a9cc:	2301      	movls	r3, #1
 800a9ce:	2300      	movhi	r3, #0
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d001      	beq.n	800a9da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e0e7      	b.n	800abaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	4a78      	ldr	r2, [pc, #480]	; (800abc0 <HAL_I2C_Init+0x280>)
 800a9de:	fba2 2303 	umull	r2, r3, r2, r3
 800a9e2:	0c9b      	lsrs	r3, r3, #18
 800a9e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68ba      	ldr	r2, [r7, #8]
 800a9f6:	430a      	orrs	r2, r1
 800a9f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	6a1b      	ldr	r3, [r3, #32]
 800aa00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	4a6a      	ldr	r2, [pc, #424]	; (800abb4 <HAL_I2C_Init+0x274>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d802      	bhi.n	800aa14 <HAL_I2C_Init+0xd4>
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	3301      	adds	r3, #1
 800aa12:	e009      	b.n	800aa28 <HAL_I2C_Init+0xe8>
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aa1a:	fb02 f303 	mul.w	r3, r2, r3
 800aa1e:	4a69      	ldr	r2, [pc, #420]	; (800abc4 <HAL_I2C_Init+0x284>)
 800aa20:	fba2 2303 	umull	r2, r3, r2, r3
 800aa24:	099b      	lsrs	r3, r3, #6
 800aa26:	3301      	adds	r3, #1
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	6812      	ldr	r2, [r2, #0]
 800aa2c:	430b      	orrs	r3, r1
 800aa2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	69db      	ldr	r3, [r3, #28]
 800aa36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800aa3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	495c      	ldr	r1, [pc, #368]	; (800abb4 <HAL_I2C_Init+0x274>)
 800aa44:	428b      	cmp	r3, r1
 800aa46:	d819      	bhi.n	800aa7c <HAL_I2C_Init+0x13c>
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	1e59      	subs	r1, r3, #1
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	005b      	lsls	r3, r3, #1
 800aa52:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa56:	1c59      	adds	r1, r3, #1
 800aa58:	f640 73fc 	movw	r3, #4092	; 0xffc
 800aa5c:	400b      	ands	r3, r1
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00a      	beq.n	800aa78 <HAL_I2C_Init+0x138>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	1e59      	subs	r1, r3, #1
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa70:	3301      	adds	r3, #1
 800aa72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa76:	e051      	b.n	800ab1c <HAL_I2C_Init+0x1dc>
 800aa78:	2304      	movs	r3, #4
 800aa7a:	e04f      	b.n	800ab1c <HAL_I2C_Init+0x1dc>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d111      	bne.n	800aaa8 <HAL_I2C_Init+0x168>
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	1e58      	subs	r0, r3, #1
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6859      	ldr	r1, [r3, #4]
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	005b      	lsls	r3, r3, #1
 800aa90:	440b      	add	r3, r1
 800aa92:	fbb0 f3f3 	udiv	r3, r0, r3
 800aa96:	3301      	adds	r3, #1
 800aa98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	bf0c      	ite	eq
 800aaa0:	2301      	moveq	r3, #1
 800aaa2:	2300      	movne	r3, #0
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	e012      	b.n	800aace <HAL_I2C_Init+0x18e>
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	1e58      	subs	r0, r3, #1
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6859      	ldr	r1, [r3, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	440b      	add	r3, r1
 800aab6:	0099      	lsls	r1, r3, #2
 800aab8:	440b      	add	r3, r1
 800aaba:	fbb0 f3f3 	udiv	r3, r0, r3
 800aabe:	3301      	adds	r3, #1
 800aac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	bf0c      	ite	eq
 800aac8:	2301      	moveq	r3, #1
 800aaca:	2300      	movne	r3, #0
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d001      	beq.n	800aad6 <HAL_I2C_Init+0x196>
 800aad2:	2301      	movs	r3, #1
 800aad4:	e022      	b.n	800ab1c <HAL_I2C_Init+0x1dc>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	689b      	ldr	r3, [r3, #8]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10e      	bne.n	800aafc <HAL_I2C_Init+0x1bc>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	1e58      	subs	r0, r3, #1
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6859      	ldr	r1, [r3, #4]
 800aae6:	460b      	mov	r3, r1
 800aae8:	005b      	lsls	r3, r3, #1
 800aaea:	440b      	add	r3, r1
 800aaec:	fbb0 f3f3 	udiv	r3, r0, r3
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aaf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aafa:	e00f      	b.n	800ab1c <HAL_I2C_Init+0x1dc>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	1e58      	subs	r0, r3, #1
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6859      	ldr	r1, [r3, #4]
 800ab04:	460b      	mov	r3, r1
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	440b      	add	r3, r1
 800ab0a:	0099      	lsls	r1, r3, #2
 800ab0c:	440b      	add	r3, r1
 800ab0e:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab12:	3301      	adds	r3, #1
 800ab14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab1c:	6879      	ldr	r1, [r7, #4]
 800ab1e:	6809      	ldr	r1, [r1, #0]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	69da      	ldr	r2, [r3, #28]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	431a      	orrs	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	430a      	orrs	r2, r1
 800ab3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ab4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	6911      	ldr	r1, [r2, #16]
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	68d2      	ldr	r2, [r2, #12]
 800ab56:	4311      	orrs	r1, r2
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	6812      	ldr	r2, [r2, #0]
 800ab5c:	430b      	orrs	r3, r1
 800ab5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	695a      	ldr	r2, [r3, #20]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	699b      	ldr	r3, [r3, #24]
 800ab72:	431a      	orrs	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	430a      	orrs	r2, r1
 800ab7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f042 0201 	orr.w	r2, r2, #1
 800ab8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2220      	movs	r2, #32
 800ab96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	000186a0 	.word	0x000186a0
 800abb8:	001e847f 	.word	0x001e847f
 800abbc:	003d08ff 	.word	0x003d08ff
 800abc0:	431bde83 	.word	0x431bde83
 800abc4:	10624dd3 	.word	0x10624dd3

0800abc8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d101      	bne.n	800abda <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	e021      	b.n	800ac1e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2224      	movs	r2, #36	; 0x24
 800abde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f022 0201 	bic.w	r2, r2, #1
 800abf0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7ff f87a 	bl	8009cec <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
	...

0800ac28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b088      	sub	sp, #32
 800ac2c:	af02      	add	r7, sp, #8
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	607a      	str	r2, [r7, #4]
 800ac32:	461a      	mov	r2, r3
 800ac34:	460b      	mov	r3, r1
 800ac36:	817b      	strh	r3, [r7, #10]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ac3c:	f7ff f9a0 	bl	8009f80 <HAL_GetTick>
 800ac40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	2b20      	cmp	r3, #32
 800ac4c:	f040 80e0 	bne.w	800ae10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	2319      	movs	r3, #25
 800ac56:	2201      	movs	r2, #1
 800ac58:	4970      	ldr	r1, [pc, #448]	; (800ae1c <HAL_I2C_Master_Transmit+0x1f4>)
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f000 fe5c 	bl	800b918 <I2C_WaitOnFlagUntilTimeout>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d001      	beq.n	800ac6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800ac66:	2302      	movs	r3, #2
 800ac68:	e0d3      	b.n	800ae12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d101      	bne.n	800ac78 <HAL_I2C_Master_Transmit+0x50>
 800ac74:	2302      	movs	r3, #2
 800ac76:	e0cc      	b.n	800ae12 <HAL_I2C_Master_Transmit+0x1ea>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f003 0301 	and.w	r3, r3, #1
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d007      	beq.n	800ac9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f042 0201 	orr.w	r2, r2, #1
 800ac9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800acac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2221      	movs	r2, #33	; 0x21
 800acb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2210      	movs	r2, #16
 800acba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2200      	movs	r2, #0
 800acc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	893a      	ldrh	r2, [r7, #8]
 800acce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	4a50      	ldr	r2, [pc, #320]	; (800ae20 <HAL_I2C_Master_Transmit+0x1f8>)
 800acde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ace0:	8979      	ldrh	r1, [r7, #10]
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	6a3a      	ldr	r2, [r7, #32]
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f000 fc16 	bl	800b518 <I2C_MasterRequestWrite>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d001      	beq.n	800acf6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	e08d      	b.n	800ae12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800acf6:	2300      	movs	r3, #0
 800acf8:	613b      	str	r3, [r7, #16]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	613b      	str	r3, [r7, #16]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	699b      	ldr	r3, [r3, #24]
 800ad08:	613b      	str	r3, [r7, #16]
 800ad0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800ad0c:	e066      	b.n	800addc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad0e:	697a      	ldr	r2, [r7, #20]
 800ad10:	6a39      	ldr	r1, [r7, #32]
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f000 ff1a 	bl	800bb4c <I2C_WaitOnTXEFlagUntilTimeout>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00d      	beq.n	800ad3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad22:	2b04      	cmp	r3, #4
 800ad24:	d107      	bne.n	800ad36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	e06b      	b.n	800ae12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3e:	781a      	ldrb	r2, [r3, #0]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4a:	1c5a      	adds	r2, r3, #1
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	3b01      	subs	r3, #1
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad62:	3b01      	subs	r3, #1
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	695b      	ldr	r3, [r3, #20]
 800ad70:	f003 0304 	and.w	r3, r3, #4
 800ad74:	2b04      	cmp	r3, #4
 800ad76:	d11b      	bne.n	800adb0 <HAL_I2C_Master_Transmit+0x188>
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d017      	beq.n	800adb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad84:	781a      	ldrb	r2, [r3, #0]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad90:	1c5a      	adds	r2, r3, #1
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ada8:	3b01      	subs	r3, #1
 800adaa:	b29a      	uxth	r2, r3
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800adb0:	697a      	ldr	r2, [r7, #20]
 800adb2:	6a39      	ldr	r1, [r7, #32]
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f000 ff11 	bl	800bbdc <I2C_WaitOnBTFFlagUntilTimeout>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00d      	beq.n	800addc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc4:	2b04      	cmp	r3, #4
 800adc6:	d107      	bne.n	800add8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800add6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	e01a      	b.n	800ae12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d194      	bne.n	800ad0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2220      	movs	r2, #32
 800adf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	e000      	b.n	800ae12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ae10:	2302      	movs	r3, #2
  }
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3718      	adds	r7, #24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	00100002 	.word	0x00100002
 800ae20:	ffff0000 	.word	0xffff0000

0800ae24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b088      	sub	sp, #32
 800ae28:	af02      	add	r7, sp, #8
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	4608      	mov	r0, r1
 800ae2e:	4611      	mov	r1, r2
 800ae30:	461a      	mov	r2, r3
 800ae32:	4603      	mov	r3, r0
 800ae34:	817b      	strh	r3, [r7, #10]
 800ae36:	460b      	mov	r3, r1
 800ae38:	813b      	strh	r3, [r7, #8]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ae3e:	f7ff f89f 	bl	8009f80 <HAL_GetTick>
 800ae42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	2b20      	cmp	r3, #32
 800ae4e:	f040 80d9 	bne.w	800b004 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	9300      	str	r3, [sp, #0]
 800ae56:	2319      	movs	r3, #25
 800ae58:	2201      	movs	r2, #1
 800ae5a:	496d      	ldr	r1, [pc, #436]	; (800b010 <HAL_I2C_Mem_Write+0x1ec>)
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	f000 fd5b 	bl	800b918 <I2C_WaitOnFlagUntilTimeout>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d001      	beq.n	800ae6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ae68:	2302      	movs	r3, #2
 800ae6a:	e0cc      	b.n	800b006 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d101      	bne.n	800ae7a <HAL_I2C_Mem_Write+0x56>
 800ae76:	2302      	movs	r3, #2
 800ae78:	e0c5      	b.n	800b006 <HAL_I2C_Mem_Write+0x1e2>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 0301 	and.w	r3, r3, #1
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d007      	beq.n	800aea0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f042 0201 	orr.w	r2, r2, #1
 800ae9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aeae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2221      	movs	r2, #33	; 0x21
 800aeb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2240      	movs	r2, #64	; 0x40
 800aebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2200      	movs	r2, #0
 800aec4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6a3a      	ldr	r2, [r7, #32]
 800aeca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aed0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aed6:	b29a      	uxth	r2, r3
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	4a4d      	ldr	r2, [pc, #308]	; (800b014 <HAL_I2C_Mem_Write+0x1f0>)
 800aee0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aee2:	88f8      	ldrh	r0, [r7, #6]
 800aee4:	893a      	ldrh	r2, [r7, #8]
 800aee6:	8979      	ldrh	r1, [r7, #10]
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	9301      	str	r3, [sp, #4]
 800aeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeee:	9300      	str	r3, [sp, #0]
 800aef0:	4603      	mov	r3, r0
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f000 fb92 	bl	800b61c <I2C_RequestMemoryWrite>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d052      	beq.n	800afa4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800aefe:	2301      	movs	r3, #1
 800af00:	e081      	b.n	800b006 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af02:	697a      	ldr	r2, [r7, #20]
 800af04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	f000 fe20 	bl	800bb4c <I2C_WaitOnTXEFlagUntilTimeout>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00d      	beq.n	800af2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af16:	2b04      	cmp	r3, #4
 800af18:	d107      	bne.n	800af2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
 800af2c:	e06b      	b.n	800b006 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af32:	781a      	ldrb	r2, [r3, #0]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3e:	1c5a      	adds	r2, r3, #1
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af48:	3b01      	subs	r3, #1
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af54:	b29b      	uxth	r3, r3
 800af56:	3b01      	subs	r3, #1
 800af58:	b29a      	uxth	r2, r3
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	695b      	ldr	r3, [r3, #20]
 800af64:	f003 0304 	and.w	r3, r3, #4
 800af68:	2b04      	cmp	r3, #4
 800af6a:	d11b      	bne.n	800afa4 <HAL_I2C_Mem_Write+0x180>
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af70:	2b00      	cmp	r3, #0
 800af72:	d017      	beq.n	800afa4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af78:	781a      	ldrb	r2, [r3, #0]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af84:	1c5a      	adds	r2, r3, #1
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af8e:	3b01      	subs	r3, #1
 800af90:	b29a      	uxth	r2, r3
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	3b01      	subs	r3, #1
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1aa      	bne.n	800af02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800afac:	697a      	ldr	r2, [r7, #20]
 800afae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f000 fe13 	bl	800bbdc <I2C_WaitOnBTFFlagUntilTimeout>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00d      	beq.n	800afd8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc0:	2b04      	cmp	r3, #4
 800afc2:	d107      	bne.n	800afd4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afd2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800afd4:	2301      	movs	r3, #1
 800afd6:	e016      	b.n	800b006 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2220      	movs	r2, #32
 800afec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2200      	movs	r2, #0
 800affc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	e000      	b.n	800b006 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b004:	2302      	movs	r3, #2
  }
}
 800b006:	4618      	mov	r0, r3
 800b008:	3718      	adds	r7, #24
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	00100002 	.word	0x00100002
 800b014:	ffff0000 	.word	0xffff0000

0800b018 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b08c      	sub	sp, #48	; 0x30
 800b01c:	af02      	add	r7, sp, #8
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	4608      	mov	r0, r1
 800b022:	4611      	mov	r1, r2
 800b024:	461a      	mov	r2, r3
 800b026:	4603      	mov	r3, r0
 800b028:	817b      	strh	r3, [r7, #10]
 800b02a:	460b      	mov	r3, r1
 800b02c:	813b      	strh	r3, [r7, #8]
 800b02e:	4613      	mov	r3, r2
 800b030:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800b032:	2300      	movs	r3, #0
 800b034:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b036:	f7fe ffa3 	bl	8009f80 <HAL_GetTick>
 800b03a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b042:	b2db      	uxtb	r3, r3
 800b044:	2b20      	cmp	r3, #32
 800b046:	f040 8244 	bne.w	800b4d2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04c:	9300      	str	r3, [sp, #0]
 800b04e:	2319      	movs	r3, #25
 800b050:	2201      	movs	r2, #1
 800b052:	4982      	ldr	r1, [pc, #520]	; (800b25c <HAL_I2C_Mem_Read+0x244>)
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f000 fc5f 	bl	800b918 <I2C_WaitOnFlagUntilTimeout>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800b060:	2302      	movs	r3, #2
 800b062:	e237      	b.n	800b4d4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d101      	bne.n	800b072 <HAL_I2C_Mem_Read+0x5a>
 800b06e:	2302      	movs	r3, #2
 800b070:	e230      	b.n	800b4d4 <HAL_I2C_Mem_Read+0x4bc>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2201      	movs	r2, #1
 800b076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f003 0301 	and.w	r3, r3, #1
 800b084:	2b01      	cmp	r3, #1
 800b086:	d007      	beq.n	800b098 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f042 0201 	orr.w	r2, r2, #1
 800b096:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b0a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2222      	movs	r2, #34	; 0x22
 800b0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2240      	movs	r2, #64	; 0x40
 800b0b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b0c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	4a62      	ldr	r2, [pc, #392]	; (800b260 <HAL_I2C_Mem_Read+0x248>)
 800b0d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b0da:	88f8      	ldrh	r0, [r7, #6]
 800b0dc:	893a      	ldrh	r2, [r7, #8]
 800b0de:	8979      	ldrh	r1, [r7, #10]
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e2:	9301      	str	r3, [sp, #4]
 800b0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	f000 fb2c 	bl	800b748 <I2C_RequestMemoryRead>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d001      	beq.n	800b0fa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e1ec      	b.n	800b4d4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d113      	bne.n	800b12a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b102:	2300      	movs	r3, #0
 800b104:	61fb      	str	r3, [r7, #28]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	695b      	ldr	r3, [r3, #20]
 800b10c:	61fb      	str	r3, [r7, #28]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	699b      	ldr	r3, [r3, #24]
 800b114:	61fb      	str	r3, [r7, #28]
 800b116:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b126:	601a      	str	r2, [r3, #0]
 800b128:	e1c0      	b.n	800b4ac <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d11e      	bne.n	800b170 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b140:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b142:	b672      	cpsid	i
}
 800b144:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b146:	2300      	movs	r3, #0
 800b148:	61bb      	str	r3, [r7, #24]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	61bb      	str	r3, [r7, #24]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	61bb      	str	r3, [r7, #24]
 800b15a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b16a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b16c:	b662      	cpsie	i
}
 800b16e:	e035      	b.n	800b1dc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b174:	2b02      	cmp	r3, #2
 800b176:	d11e      	bne.n	800b1b6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b186:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b188:	b672      	cpsid	i
}
 800b18a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b18c:	2300      	movs	r3, #0
 800b18e:	617b      	str	r3, [r7, #20]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	695b      	ldr	r3, [r3, #20]
 800b196:	617b      	str	r3, [r7, #20]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	699b      	ldr	r3, [r3, #24]
 800b19e:	617b      	str	r3, [r7, #20]
 800b1a0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b1b2:	b662      	cpsie	i
}
 800b1b4:	e012      	b.n	800b1dc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b1c4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	613b      	str	r3, [r7, #16]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	695b      	ldr	r3, [r3, #20]
 800b1d0:	613b      	str	r3, [r7, #16]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	699b      	ldr	r3, [r3, #24]
 800b1d8:	613b      	str	r3, [r7, #16]
 800b1da:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800b1dc:	e166      	b.n	800b4ac <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1e2:	2b03      	cmp	r3, #3
 800b1e4:	f200 811f 	bhi.w	800b426 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d123      	bne.n	800b238 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b1f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f000 fd39 	bl	800bc6c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d001      	beq.n	800b204 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	e167      	b.n	800b4d4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	691a      	ldr	r2, [r3, #16]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20e:	b2d2      	uxtb	r2, r2
 800b210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b216:	1c5a      	adds	r2, r3, #1
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b220:	3b01      	subs	r3, #1
 800b222:	b29a      	uxth	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	3b01      	subs	r3, #1
 800b230:	b29a      	uxth	r2, r3
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b236:	e139      	b.n	800b4ac <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d152      	bne.n	800b2e6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b246:	2200      	movs	r2, #0
 800b248:	4906      	ldr	r1, [pc, #24]	; (800b264 <HAL_I2C_Mem_Read+0x24c>)
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f000 fb64 	bl	800b918 <I2C_WaitOnFlagUntilTimeout>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d008      	beq.n	800b268 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e13c      	b.n	800b4d4 <HAL_I2C_Mem_Read+0x4bc>
 800b25a:	bf00      	nop
 800b25c:	00100002 	.word	0x00100002
 800b260:	ffff0000 	.word	0xffff0000
 800b264:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800b268:	b672      	cpsid	i
}
 800b26a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b27a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	691a      	ldr	r2, [r3, #16]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	b2d2      	uxtb	r2, r2
 800b288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b298:	3b01      	subs	r3, #1
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	b29a      	uxth	r2, r3
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b2ae:	b662      	cpsie	i
}
 800b2b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	691a      	ldr	r2, [r3, #16]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	b2d2      	uxtb	r2, r2
 800b2be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c4:	1c5a      	adds	r2, r3, #1
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	b29a      	uxth	r2, r3
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b2e4:	e0e2      	b.n	800b4ac <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	497b      	ldr	r1, [pc, #492]	; (800b4dc <HAL_I2C_Mem_Read+0x4c4>)
 800b2f0:	68f8      	ldr	r0, [r7, #12]
 800b2f2:	f000 fb11 	bl	800b918 <I2C_WaitOnFlagUntilTimeout>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d001      	beq.n	800b300 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e0e9      	b.n	800b4d4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b30e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b310:	b672      	cpsid	i
}
 800b312:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	691a      	ldr	r2, [r3, #16]
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31e:	b2d2      	uxtb	r2, r2
 800b320:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b326:	1c5a      	adds	r2, r3, #1
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b330:	3b01      	subs	r3, #1
 800b332:	b29a      	uxth	r2, r3
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	3b01      	subs	r3, #1
 800b340:	b29a      	uxth	r2, r3
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b346:	4b66      	ldr	r3, [pc, #408]	; (800b4e0 <HAL_I2C_Mem_Read+0x4c8>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	08db      	lsrs	r3, r3, #3
 800b34c:	4a65      	ldr	r2, [pc, #404]	; (800b4e4 <HAL_I2C_Mem_Read+0x4cc>)
 800b34e:	fba2 2303 	umull	r2, r3, r2, r3
 800b352:	0a1a      	lsrs	r2, r3, #8
 800b354:	4613      	mov	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	4413      	add	r3, r2
 800b35a:	00da      	lsls	r2, r3, #3
 800b35c:	1ad3      	subs	r3, r2, r3
 800b35e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800b360:	6a3b      	ldr	r3, [r7, #32]
 800b362:	3b01      	subs	r3, #1
 800b364:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800b366:	6a3b      	ldr	r3, [r7, #32]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d118      	bne.n	800b39e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2220      	movs	r2, #32
 800b376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b386:	f043 0220 	orr.w	r2, r3, #32
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800b38e:	b662      	cpsie	i
}
 800b390:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2200      	movs	r2, #0
 800b396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800b39a:	2301      	movs	r3, #1
 800b39c:	e09a      	b.n	800b4d4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	695b      	ldr	r3, [r3, #20]
 800b3a4:	f003 0304 	and.w	r3, r3, #4
 800b3a8:	2b04      	cmp	r3, #4
 800b3aa:	d1d9      	bne.n	800b360 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	691a      	ldr	r2, [r3, #16]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c6:	b2d2      	uxtb	r2, r2
 800b3c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ce:	1c5a      	adds	r2, r3, #1
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	b29a      	uxth	r2, r3
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b3ee:	b662      	cpsie	i
}
 800b3f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	691a      	ldr	r2, [r3, #16]
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fc:	b2d2      	uxtb	r2, r2
 800b3fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b404:	1c5a      	adds	r2, r3, #1
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b40e:	3b01      	subs	r3, #1
 800b410:	b29a      	uxth	r2, r3
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	3b01      	subs	r3, #1
 800b41e:	b29a      	uxth	r2, r3
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b424:	e042      	b.n	800b4ac <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b428:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f000 fc1e 	bl	800bc6c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d001      	beq.n	800b43a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	e04c      	b.n	800b4d4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	691a      	ldr	r2, [r3, #16]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b444:	b2d2      	uxtb	r2, r2
 800b446:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44c:	1c5a      	adds	r2, r3, #1
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b456:	3b01      	subs	r3, #1
 800b458:	b29a      	uxth	r2, r3
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b462:	b29b      	uxth	r3, r3
 800b464:	3b01      	subs	r3, #1
 800b466:	b29a      	uxth	r2, r3
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	695b      	ldr	r3, [r3, #20]
 800b472:	f003 0304 	and.w	r3, r3, #4
 800b476:	2b04      	cmp	r3, #4
 800b478:	d118      	bne.n	800b4ac <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	691a      	ldr	r2, [r3, #16]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b484:	b2d2      	uxtb	r2, r2
 800b486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48c:	1c5a      	adds	r2, r3, #1
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b496:	3b01      	subs	r3, #1
 800b498:	b29a      	uxth	r2, r3
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	3b01      	subs	r3, #1
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	f47f ae94 	bne.w	800b1de <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2220      	movs	r2, #32
 800b4ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	e000      	b.n	800b4d4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800b4d2:	2302      	movs	r3, #2
  }
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3728      	adds	r7, #40	; 0x28
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	00010004 	.word	0x00010004
 800b4e0:	20000cd8 	.word	0x20000cd8
 800b4e4:	14f8b589 	.word	0x14f8b589

0800b4e8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4f6:	b2db      	uxtb	r3, r3
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bc80      	pop	{r7}
 800b500:	4770      	bx	lr

0800b502 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b502:	b480      	push	{r7}
 800b504:	b083      	sub	sp, #12
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800b50e:	4618      	mov	r0, r3
 800b510:	370c      	adds	r7, #12
 800b512:	46bd      	mov	sp, r7
 800b514:	bc80      	pop	{r7}
 800b516:	4770      	bx	lr

0800b518 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af02      	add	r7, sp, #8
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	607a      	str	r2, [r7, #4]
 800b522:	603b      	str	r3, [r7, #0]
 800b524:	460b      	mov	r3, r1
 800b526:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b52c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	2b08      	cmp	r3, #8
 800b532:	d006      	beq.n	800b542 <I2C_MasterRequestWrite+0x2a>
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d003      	beq.n	800b542 <I2C_MasterRequestWrite+0x2a>
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b540:	d108      	bne.n	800b554 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b550:	601a      	str	r2, [r3, #0]
 800b552:	e00b      	b.n	800b56c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b558:	2b12      	cmp	r3, #18
 800b55a:	d107      	bne.n	800b56c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b56a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f000 f9cd 	bl	800b918 <I2C_WaitOnFlagUntilTimeout>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d00d      	beq.n	800b5a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b58e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b592:	d103      	bne.n	800b59c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b59a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b59c:	2303      	movs	r3, #3
 800b59e:	e035      	b.n	800b60c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5a8:	d108      	bne.n	800b5bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b5aa:	897b      	ldrh	r3, [r7, #10]
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b5b8:	611a      	str	r2, [r3, #16]
 800b5ba:	e01b      	b.n	800b5f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b5bc:	897b      	ldrh	r3, [r7, #10]
 800b5be:	11db      	asrs	r3, r3, #7
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	f003 0306 	and.w	r3, r3, #6
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	f063 030f 	orn	r3, r3, #15
 800b5cc:	b2da      	uxtb	r2, r3
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	490e      	ldr	r1, [pc, #56]	; (800b614 <I2C_MasterRequestWrite+0xfc>)
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f000 fa16 	bl	800ba0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e010      	b.n	800b60c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b5ea:	897b      	ldrh	r3, [r7, #10]
 800b5ec:	b2da      	uxtb	r2, r3
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	4907      	ldr	r1, [pc, #28]	; (800b618 <I2C_MasterRequestWrite+0x100>)
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f000 fa06 	bl	800ba0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d001      	beq.n	800b60a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b606:	2301      	movs	r3, #1
 800b608:	e000      	b.n	800b60c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b60a:	2300      	movs	r3, #0
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3718      	adds	r7, #24
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	00010008 	.word	0x00010008
 800b618:	00010002 	.word	0x00010002

0800b61c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af02      	add	r7, sp, #8
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	4608      	mov	r0, r1
 800b626:	4611      	mov	r1, r2
 800b628:	461a      	mov	r2, r3
 800b62a:	4603      	mov	r3, r0
 800b62c:	817b      	strh	r3, [r7, #10]
 800b62e:	460b      	mov	r3, r1
 800b630:	813b      	strh	r3, [r7, #8]
 800b632:	4613      	mov	r3, r2
 800b634:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b644:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b648:	9300      	str	r3, [sp, #0]
 800b64a:	6a3b      	ldr	r3, [r7, #32]
 800b64c:	2200      	movs	r2, #0
 800b64e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f000 f960 	bl	800b918 <I2C_WaitOnFlagUntilTimeout>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d00d      	beq.n	800b67a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b66c:	d103      	bne.n	800b676 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b674:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b676:	2303      	movs	r3, #3
 800b678:	e05f      	b.n	800b73a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b67a:	897b      	ldrh	r3, [r7, #10]
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	461a      	mov	r2, r3
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b688:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68c:	6a3a      	ldr	r2, [r7, #32]
 800b68e:	492d      	ldr	r1, [pc, #180]	; (800b744 <I2C_RequestMemoryWrite+0x128>)
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f000 f9bb 	bl	800ba0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b696:	4603      	mov	r3, r0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d001      	beq.n	800b6a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	e04c      	b.n	800b73a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	617b      	str	r3, [r7, #20]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	695b      	ldr	r3, [r3, #20]
 800b6aa:	617b      	str	r3, [r7, #20]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	617b      	str	r3, [r7, #20]
 800b6b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6b8:	6a39      	ldr	r1, [r7, #32]
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f000 fa46 	bl	800bb4c <I2C_WaitOnTXEFlagUntilTimeout>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d00d      	beq.n	800b6e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ca:	2b04      	cmp	r3, #4
 800b6cc:	d107      	bne.n	800b6de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e02b      	b.n	800b73a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b6e2:	88fb      	ldrh	r3, [r7, #6]
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d105      	bne.n	800b6f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b6e8:	893b      	ldrh	r3, [r7, #8]
 800b6ea:	b2da      	uxtb	r2, r3
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	611a      	str	r2, [r3, #16]
 800b6f2:	e021      	b.n	800b738 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b6f4:	893b      	ldrh	r3, [r7, #8]
 800b6f6:	0a1b      	lsrs	r3, r3, #8
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	b2da      	uxtb	r2, r3
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b704:	6a39      	ldr	r1, [r7, #32]
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f000 fa20 	bl	800bb4c <I2C_WaitOnTXEFlagUntilTimeout>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00d      	beq.n	800b72e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b716:	2b04      	cmp	r3, #4
 800b718:	d107      	bne.n	800b72a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b728:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	e005      	b.n	800b73a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b72e:	893b      	ldrh	r3, [r7, #8]
 800b730:	b2da      	uxtb	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3718      	adds	r7, #24
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	00010002 	.word	0x00010002

0800b748 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b088      	sub	sp, #32
 800b74c:	af02      	add	r7, sp, #8
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	4608      	mov	r0, r1
 800b752:	4611      	mov	r1, r2
 800b754:	461a      	mov	r2, r3
 800b756:	4603      	mov	r3, r0
 800b758:	817b      	strh	r3, [r7, #10]
 800b75a:	460b      	mov	r3, r1
 800b75c:	813b      	strh	r3, [r7, #8]
 800b75e:	4613      	mov	r3, r2
 800b760:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b770:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b780:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	6a3b      	ldr	r3, [r7, #32]
 800b788:	2200      	movs	r2, #0
 800b78a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f000 f8c2 	bl	800b918 <I2C_WaitOnFlagUntilTimeout>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00d      	beq.n	800b7b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7a8:	d103      	bne.n	800b7b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	e0aa      	b.n	800b90c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b7b6:	897b      	ldrh	r3, [r7, #10]
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b7c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c8:	6a3a      	ldr	r2, [r7, #32]
 800b7ca:	4952      	ldr	r1, [pc, #328]	; (800b914 <I2C_RequestMemoryRead+0x1cc>)
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f000 f91d 	bl	800ba0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d001      	beq.n	800b7dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	e097      	b.n	800b90c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7dc:	2300      	movs	r3, #0
 800b7de:	617b      	str	r3, [r7, #20]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	695b      	ldr	r3, [r3, #20]
 800b7e6:	617b      	str	r3, [r7, #20]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	699b      	ldr	r3, [r3, #24]
 800b7ee:	617b      	str	r3, [r7, #20]
 800b7f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b7f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7f4:	6a39      	ldr	r1, [r7, #32]
 800b7f6:	68f8      	ldr	r0, [r7, #12]
 800b7f8:	f000 f9a8 	bl	800bb4c <I2C_WaitOnTXEFlagUntilTimeout>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00d      	beq.n	800b81e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b806:	2b04      	cmp	r3, #4
 800b808:	d107      	bne.n	800b81a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b818:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	e076      	b.n	800b90c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b81e:	88fb      	ldrh	r3, [r7, #6]
 800b820:	2b01      	cmp	r3, #1
 800b822:	d105      	bne.n	800b830 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b824:	893b      	ldrh	r3, [r7, #8]
 800b826:	b2da      	uxtb	r2, r3
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	611a      	str	r2, [r3, #16]
 800b82e:	e021      	b.n	800b874 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b830:	893b      	ldrh	r3, [r7, #8]
 800b832:	0a1b      	lsrs	r3, r3, #8
 800b834:	b29b      	uxth	r3, r3
 800b836:	b2da      	uxtb	r2, r3
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b83e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b840:	6a39      	ldr	r1, [r7, #32]
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f000 f982 	bl	800bb4c <I2C_WaitOnTXEFlagUntilTimeout>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00d      	beq.n	800b86a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b852:	2b04      	cmp	r3, #4
 800b854:	d107      	bne.n	800b866 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b864:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b866:	2301      	movs	r3, #1
 800b868:	e050      	b.n	800b90c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b86a:	893b      	ldrh	r3, [r7, #8]
 800b86c:	b2da      	uxtb	r2, r3
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b876:	6a39      	ldr	r1, [r7, #32]
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f000 f967 	bl	800bb4c <I2C_WaitOnTXEFlagUntilTimeout>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00d      	beq.n	800b8a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b888:	2b04      	cmp	r3, #4
 800b88a:	d107      	bne.n	800b89c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b89a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b89c:	2301      	movs	r3, #1
 800b89e:	e035      	b.n	800b90c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	6a3b      	ldr	r3, [r7, #32]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f000 f82b 	bl	800b918 <I2C_WaitOnFlagUntilTimeout>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00d      	beq.n	800b8e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8d6:	d103      	bne.n	800b8e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	e013      	b.n	800b90c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b8e4:	897b      	ldrh	r3, [r7, #10]
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	f043 0301 	orr.w	r3, r3, #1
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f6:	6a3a      	ldr	r2, [r7, #32]
 800b8f8:	4906      	ldr	r1, [pc, #24]	; (800b914 <I2C_RequestMemoryRead+0x1cc>)
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f000 f886 	bl	800ba0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d001      	beq.n	800b90a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	e000      	b.n	800b90c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3718      	adds	r7, #24
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	00010002 	.word	0x00010002

0800b918 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	603b      	str	r3, [r7, #0]
 800b924:	4613      	mov	r3, r2
 800b926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b928:	e048      	b.n	800b9bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b930:	d044      	beq.n	800b9bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b932:	f7fe fb25 	bl	8009f80 <HAL_GetTick>
 800b936:	4602      	mov	r2, r0
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	1ad3      	subs	r3, r2, r3
 800b93c:	683a      	ldr	r2, [r7, #0]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d302      	bcc.n	800b948 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d139      	bne.n	800b9bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	0c1b      	lsrs	r3, r3, #16
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d10d      	bne.n	800b96e <I2C_WaitOnFlagUntilTimeout+0x56>
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	695b      	ldr	r3, [r3, #20]
 800b958:	43da      	mvns	r2, r3
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	4013      	ands	r3, r2
 800b95e:	b29b      	uxth	r3, r3
 800b960:	2b00      	cmp	r3, #0
 800b962:	bf0c      	ite	eq
 800b964:	2301      	moveq	r3, #1
 800b966:	2300      	movne	r3, #0
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	461a      	mov	r2, r3
 800b96c:	e00c      	b.n	800b988 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	699b      	ldr	r3, [r3, #24]
 800b974:	43da      	mvns	r2, r3
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	4013      	ands	r3, r2
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	bf0c      	ite	eq
 800b980:	2301      	moveq	r3, #1
 800b982:	2300      	movne	r3, #0
 800b984:	b2db      	uxtb	r3, r3
 800b986:	461a      	mov	r2, r3
 800b988:	79fb      	ldrb	r3, [r7, #7]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d116      	bne.n	800b9bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2200      	movs	r2, #0
 800b992:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2220      	movs	r2, #32
 800b998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a8:	f043 0220 	orr.w	r2, r3, #32
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e023      	b.n	800ba04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	0c1b      	lsrs	r3, r3, #16
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d10d      	bne.n	800b9e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	695b      	ldr	r3, [r3, #20]
 800b9cc:	43da      	mvns	r2, r3
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	4013      	ands	r3, r2
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	bf0c      	ite	eq
 800b9d8:	2301      	moveq	r3, #1
 800b9da:	2300      	movne	r3, #0
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	461a      	mov	r2, r3
 800b9e0:	e00c      	b.n	800b9fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	699b      	ldr	r3, [r3, #24]
 800b9e8:	43da      	mvns	r2, r3
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	4013      	ands	r3, r2
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	bf0c      	ite	eq
 800b9f4:	2301      	moveq	r3, #1
 800b9f6:	2300      	movne	r3, #0
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	79fb      	ldrb	r3, [r7, #7]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d093      	beq.n	800b92a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
 800ba18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ba1a:	e071      	b.n	800bb00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	695b      	ldr	r3, [r3, #20]
 800ba22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba2a:	d123      	bne.n	800ba74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ba44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2220      	movs	r2, #32
 800ba50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba60:	f043 0204 	orr.w	r2, r3, #4
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ba70:	2301      	movs	r3, #1
 800ba72:	e067      	b.n	800bb44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba7a:	d041      	beq.n	800bb00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba7c:	f7fe fa80 	bl	8009f80 <HAL_GetTick>
 800ba80:	4602      	mov	r2, r0
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	1ad3      	subs	r3, r2, r3
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d302      	bcc.n	800ba92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d136      	bne.n	800bb00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	0c1b      	lsrs	r3, r3, #16
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d10c      	bne.n	800bab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	695b      	ldr	r3, [r3, #20]
 800baa2:	43da      	mvns	r2, r3
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	4013      	ands	r3, r2
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	2b00      	cmp	r3, #0
 800baac:	bf14      	ite	ne
 800baae:	2301      	movne	r3, #1
 800bab0:	2300      	moveq	r3, #0
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	e00b      	b.n	800bace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	699b      	ldr	r3, [r3, #24]
 800babc:	43da      	mvns	r2, r3
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	4013      	ands	r3, r2
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	bf14      	ite	ne
 800bac8:	2301      	movne	r3, #1
 800baca:	2300      	moveq	r3, #0
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d016      	beq.n	800bb00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2200      	movs	r2, #0
 800bad6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2220      	movs	r2, #32
 800badc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baec:	f043 0220 	orr.w	r2, r3, #32
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	e021      	b.n	800bb44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	0c1b      	lsrs	r3, r3, #16
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d10c      	bne.n	800bb24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	695b      	ldr	r3, [r3, #20]
 800bb10:	43da      	mvns	r2, r3
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	4013      	ands	r3, r2
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	bf14      	ite	ne
 800bb1c:	2301      	movne	r3, #1
 800bb1e:	2300      	moveq	r3, #0
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	e00b      	b.n	800bb3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	699b      	ldr	r3, [r3, #24]
 800bb2a:	43da      	mvns	r2, r3
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	4013      	ands	r3, r2
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	bf14      	ite	ne
 800bb36:	2301      	movne	r3, #1
 800bb38:	2300      	moveq	r3, #0
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f47f af6d 	bne.w	800ba1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800bb42:	2300      	movs	r3, #0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3710      	adds	r7, #16
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bb58:	e034      	b.n	800bbc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	f000 f8e3 	bl	800bd26 <I2C_IsAcknowledgeFailed>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d001      	beq.n	800bb6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bb66:	2301      	movs	r3, #1
 800bb68:	e034      	b.n	800bbd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb70:	d028      	beq.n	800bbc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb72:	f7fe fa05 	bl	8009f80 <HAL_GetTick>
 800bb76:	4602      	mov	r2, r0
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d302      	bcc.n	800bb88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d11d      	bne.n	800bbc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	695b      	ldr	r3, [r3, #20]
 800bb8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb92:	2b80      	cmp	r3, #128	; 0x80
 800bb94:	d016      	beq.n	800bbc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2220      	movs	r2, #32
 800bba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb0:	f043 0220 	orr.w	r2, r3, #32
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	e007      	b.n	800bbd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	695b      	ldr	r3, [r3, #20]
 800bbca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbce:	2b80      	cmp	r3, #128	; 0x80
 800bbd0:	d1c3      	bne.n	800bb5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3710      	adds	r7, #16
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bbe8:	e034      	b.n	800bc54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f000 f89b 	bl	800bd26 <I2C_IsAcknowledgeFailed>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d001      	beq.n	800bbfa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e034      	b.n	800bc64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc00:	d028      	beq.n	800bc54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc02:	f7fe f9bd 	bl	8009f80 <HAL_GetTick>
 800bc06:	4602      	mov	r2, r0
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	1ad3      	subs	r3, r2, r3
 800bc0c:	68ba      	ldr	r2, [r7, #8]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d302      	bcc.n	800bc18 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d11d      	bne.n	800bc54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	695b      	ldr	r3, [r3, #20]
 800bc1e:	f003 0304 	and.w	r3, r3, #4
 800bc22:	2b04      	cmp	r3, #4
 800bc24:	d016      	beq.n	800bc54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2220      	movs	r2, #32
 800bc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc40:	f043 0220 	orr.w	r2, r3, #32
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800bc50:	2301      	movs	r3, #1
 800bc52:	e007      	b.n	800bc64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	695b      	ldr	r3, [r3, #20]
 800bc5a:	f003 0304 	and.w	r3, r3, #4
 800bc5e:	2b04      	cmp	r3, #4
 800bc60:	d1c3      	bne.n	800bbea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bc62:	2300      	movs	r3, #0
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3710      	adds	r7, #16
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bc78:	e049      	b.n	800bd0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	695b      	ldr	r3, [r3, #20]
 800bc80:	f003 0310 	and.w	r3, r3, #16
 800bc84:	2b10      	cmp	r3, #16
 800bc86:	d119      	bne.n	800bcbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f06f 0210 	mvn.w	r2, #16
 800bc90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2200      	movs	r2, #0
 800bc96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2220      	movs	r2, #32
 800bc9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	e030      	b.n	800bd1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcbc:	f7fe f960 	bl	8009f80 <HAL_GetTick>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d302      	bcc.n	800bcd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d11d      	bne.n	800bd0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	695b      	ldr	r3, [r3, #20]
 800bcd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcdc:	2b40      	cmp	r3, #64	; 0x40
 800bcde:	d016      	beq.n	800bd0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2200      	movs	r2, #0
 800bce4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2220      	movs	r2, #32
 800bcea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcfa:	f043 0220 	orr.w	r2, r3, #32
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2200      	movs	r2, #0
 800bd06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e007      	b.n	800bd1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	695b      	ldr	r3, [r3, #20]
 800bd14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd18:	2b40      	cmp	r3, #64	; 0x40
 800bd1a:	d1ae      	bne.n	800bc7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bd1c:	2300      	movs	r3, #0
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bd26:	b480      	push	{r7}
 800bd28:	b083      	sub	sp, #12
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	695b      	ldr	r3, [r3, #20]
 800bd34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd3c:	d11b      	bne.n	800bd76 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bd46:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2220      	movs	r2, #32
 800bd52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd62:	f043 0204 	orr.w	r2, r3, #4
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bd72:	2301      	movs	r3, #1
 800bd74:	e000      	b.n	800bd78 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bc80      	pop	{r7}
 800bd80:	4770      	bx	lr
	...

0800bd84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b086      	sub	sp, #24
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d101      	bne.n	800bd96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	e272      	b.n	800c27c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f003 0301 	and.w	r3, r3, #1
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f000 8087 	beq.w	800beb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bda4:	4b92      	ldr	r3, [pc, #584]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	f003 030c 	and.w	r3, r3, #12
 800bdac:	2b04      	cmp	r3, #4
 800bdae:	d00c      	beq.n	800bdca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800bdb0:	4b8f      	ldr	r3, [pc, #572]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	f003 030c 	and.w	r3, r3, #12
 800bdb8:	2b08      	cmp	r3, #8
 800bdba:	d112      	bne.n	800bde2 <HAL_RCC_OscConfig+0x5e>
 800bdbc:	4b8c      	ldr	r3, [pc, #560]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bdc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdc8:	d10b      	bne.n	800bde2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bdca:	4b89      	ldr	r3, [pc, #548]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d06c      	beq.n	800beb0 <HAL_RCC_OscConfig+0x12c>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d168      	bne.n	800beb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	e24c      	b.n	800c27c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdea:	d106      	bne.n	800bdfa <HAL_RCC_OscConfig+0x76>
 800bdec:	4b80      	ldr	r3, [pc, #512]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a7f      	ldr	r2, [pc, #508]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800bdf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdf6:	6013      	str	r3, [r2, #0]
 800bdf8:	e02e      	b.n	800be58 <HAL_RCC_OscConfig+0xd4>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d10c      	bne.n	800be1c <HAL_RCC_OscConfig+0x98>
 800be02:	4b7b      	ldr	r3, [pc, #492]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a7a      	ldr	r2, [pc, #488]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800be08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be0c:	6013      	str	r3, [r2, #0]
 800be0e:	4b78      	ldr	r3, [pc, #480]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4a77      	ldr	r2, [pc, #476]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800be14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be18:	6013      	str	r3, [r2, #0]
 800be1a:	e01d      	b.n	800be58 <HAL_RCC_OscConfig+0xd4>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be24:	d10c      	bne.n	800be40 <HAL_RCC_OscConfig+0xbc>
 800be26:	4b72      	ldr	r3, [pc, #456]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a71      	ldr	r2, [pc, #452]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800be2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800be30:	6013      	str	r3, [r2, #0]
 800be32:	4b6f      	ldr	r3, [pc, #444]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4a6e      	ldr	r2, [pc, #440]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800be38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be3c:	6013      	str	r3, [r2, #0]
 800be3e:	e00b      	b.n	800be58 <HAL_RCC_OscConfig+0xd4>
 800be40:	4b6b      	ldr	r3, [pc, #428]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a6a      	ldr	r2, [pc, #424]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800be46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be4a:	6013      	str	r3, [r2, #0]
 800be4c:	4b68      	ldr	r3, [pc, #416]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a67      	ldr	r2, [pc, #412]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800be52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d013      	beq.n	800be88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be60:	f7fe f88e 	bl	8009f80 <HAL_GetTick>
 800be64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be66:	e008      	b.n	800be7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be68:	f7fe f88a 	bl	8009f80 <HAL_GetTick>
 800be6c:	4602      	mov	r2, r0
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	2b64      	cmp	r3, #100	; 0x64
 800be74:	d901      	bls.n	800be7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800be76:	2303      	movs	r3, #3
 800be78:	e200      	b.n	800c27c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be7a:	4b5d      	ldr	r3, [pc, #372]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be82:	2b00      	cmp	r3, #0
 800be84:	d0f0      	beq.n	800be68 <HAL_RCC_OscConfig+0xe4>
 800be86:	e014      	b.n	800beb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be88:	f7fe f87a 	bl	8009f80 <HAL_GetTick>
 800be8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800be8e:	e008      	b.n	800bea2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be90:	f7fe f876 	bl	8009f80 <HAL_GetTick>
 800be94:	4602      	mov	r2, r0
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	2b64      	cmp	r3, #100	; 0x64
 800be9c:	d901      	bls.n	800bea2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800be9e:	2303      	movs	r3, #3
 800bea0:	e1ec      	b.n	800c27c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bea2:	4b53      	ldr	r3, [pc, #332]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d1f0      	bne.n	800be90 <HAL_RCC_OscConfig+0x10c>
 800beae:	e000      	b.n	800beb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800beb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f003 0302 	and.w	r3, r3, #2
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d063      	beq.n	800bf86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bebe:	4b4c      	ldr	r3, [pc, #304]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	f003 030c 	and.w	r3, r3, #12
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d00b      	beq.n	800bee2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800beca:	4b49      	ldr	r3, [pc, #292]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	f003 030c 	and.w	r3, r3, #12
 800bed2:	2b08      	cmp	r3, #8
 800bed4:	d11c      	bne.n	800bf10 <HAL_RCC_OscConfig+0x18c>
 800bed6:	4b46      	ldr	r3, [pc, #280]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d116      	bne.n	800bf10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bee2:	4b43      	ldr	r3, [pc, #268]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f003 0302 	and.w	r3, r3, #2
 800beea:	2b00      	cmp	r3, #0
 800beec:	d005      	beq.n	800befa <HAL_RCC_OscConfig+0x176>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	691b      	ldr	r3, [r3, #16]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d001      	beq.n	800befa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	e1c0      	b.n	800c27c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800befa:	4b3d      	ldr	r3, [pc, #244]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	695b      	ldr	r3, [r3, #20]
 800bf06:	00db      	lsls	r3, r3, #3
 800bf08:	4939      	ldr	r1, [pc, #228]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bf0e:	e03a      	b.n	800bf86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d020      	beq.n	800bf5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bf18:	4b36      	ldr	r3, [pc, #216]	; (800bff4 <HAL_RCC_OscConfig+0x270>)
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf1e:	f7fe f82f 	bl	8009f80 <HAL_GetTick>
 800bf22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf24:	e008      	b.n	800bf38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf26:	f7fe f82b 	bl	8009f80 <HAL_GetTick>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	1ad3      	subs	r3, r2, r3
 800bf30:	2b02      	cmp	r3, #2
 800bf32:	d901      	bls.n	800bf38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800bf34:	2303      	movs	r3, #3
 800bf36:	e1a1      	b.n	800c27c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf38:	4b2d      	ldr	r3, [pc, #180]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f003 0302 	and.w	r3, r3, #2
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d0f0      	beq.n	800bf26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf44:	4b2a      	ldr	r3, [pc, #168]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	695b      	ldr	r3, [r3, #20]
 800bf50:	00db      	lsls	r3, r3, #3
 800bf52:	4927      	ldr	r1, [pc, #156]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800bf54:	4313      	orrs	r3, r2
 800bf56:	600b      	str	r3, [r1, #0]
 800bf58:	e015      	b.n	800bf86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bf5a:	4b26      	ldr	r3, [pc, #152]	; (800bff4 <HAL_RCC_OscConfig+0x270>)
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf60:	f7fe f80e 	bl	8009f80 <HAL_GetTick>
 800bf64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf66:	e008      	b.n	800bf7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf68:	f7fe f80a 	bl	8009f80 <HAL_GetTick>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	1ad3      	subs	r3, r2, r3
 800bf72:	2b02      	cmp	r3, #2
 800bf74:	d901      	bls.n	800bf7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800bf76:	2303      	movs	r3, #3
 800bf78:	e180      	b.n	800c27c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf7a:	4b1d      	ldr	r3, [pc, #116]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f003 0302 	and.w	r3, r3, #2
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d1f0      	bne.n	800bf68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f003 0308 	and.w	r3, r3, #8
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d03a      	beq.n	800c008 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	699b      	ldr	r3, [r3, #24]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d019      	beq.n	800bfce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bf9a:	4b17      	ldr	r3, [pc, #92]	; (800bff8 <HAL_RCC_OscConfig+0x274>)
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bfa0:	f7fd ffee 	bl	8009f80 <HAL_GetTick>
 800bfa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bfa6:	e008      	b.n	800bfba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bfa8:	f7fd ffea 	bl	8009f80 <HAL_GetTick>
 800bfac:	4602      	mov	r2, r0
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	d901      	bls.n	800bfba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800bfb6:	2303      	movs	r3, #3
 800bfb8:	e160      	b.n	800c27c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bfba:	4b0d      	ldr	r3, [pc, #52]	; (800bff0 <HAL_RCC_OscConfig+0x26c>)
 800bfbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfbe:	f003 0302 	and.w	r3, r3, #2
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d0f0      	beq.n	800bfa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800bfc6:	2001      	movs	r0, #1
 800bfc8:	f000 face 	bl	800c568 <RCC_Delay>
 800bfcc:	e01c      	b.n	800c008 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bfce:	4b0a      	ldr	r3, [pc, #40]	; (800bff8 <HAL_RCC_OscConfig+0x274>)
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bfd4:	f7fd ffd4 	bl	8009f80 <HAL_GetTick>
 800bfd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bfda:	e00f      	b.n	800bffc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bfdc:	f7fd ffd0 	bl	8009f80 <HAL_GetTick>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	1ad3      	subs	r3, r2, r3
 800bfe6:	2b02      	cmp	r3, #2
 800bfe8:	d908      	bls.n	800bffc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800bfea:	2303      	movs	r3, #3
 800bfec:	e146      	b.n	800c27c <HAL_RCC_OscConfig+0x4f8>
 800bfee:	bf00      	nop
 800bff0:	40021000 	.word	0x40021000
 800bff4:	42420000 	.word	0x42420000
 800bff8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bffc:	4b92      	ldr	r3, [pc, #584]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800bffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c000:	f003 0302 	and.w	r3, r3, #2
 800c004:	2b00      	cmp	r3, #0
 800c006:	d1e9      	bne.n	800bfdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f003 0304 	and.w	r3, r3, #4
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 80a6 	beq.w	800c162 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c016:	2300      	movs	r3, #0
 800c018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c01a:	4b8b      	ldr	r3, [pc, #556]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c01c:	69db      	ldr	r3, [r3, #28]
 800c01e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c022:	2b00      	cmp	r3, #0
 800c024:	d10d      	bne.n	800c042 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c026:	4b88      	ldr	r3, [pc, #544]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c028:	69db      	ldr	r3, [r3, #28]
 800c02a:	4a87      	ldr	r2, [pc, #540]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c02c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c030:	61d3      	str	r3, [r2, #28]
 800c032:	4b85      	ldr	r3, [pc, #532]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c034:	69db      	ldr	r3, [r3, #28]
 800c036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c03a:	60bb      	str	r3, [r7, #8]
 800c03c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c03e:	2301      	movs	r3, #1
 800c040:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c042:	4b82      	ldr	r3, [pc, #520]	; (800c24c <HAL_RCC_OscConfig+0x4c8>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d118      	bne.n	800c080 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c04e:	4b7f      	ldr	r3, [pc, #508]	; (800c24c <HAL_RCC_OscConfig+0x4c8>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a7e      	ldr	r2, [pc, #504]	; (800c24c <HAL_RCC_OscConfig+0x4c8>)
 800c054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c05a:	f7fd ff91 	bl	8009f80 <HAL_GetTick>
 800c05e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c060:	e008      	b.n	800c074 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c062:	f7fd ff8d 	bl	8009f80 <HAL_GetTick>
 800c066:	4602      	mov	r2, r0
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	1ad3      	subs	r3, r2, r3
 800c06c:	2b64      	cmp	r3, #100	; 0x64
 800c06e:	d901      	bls.n	800c074 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800c070:	2303      	movs	r3, #3
 800c072:	e103      	b.n	800c27c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c074:	4b75      	ldr	r3, [pc, #468]	; (800c24c <HAL_RCC_OscConfig+0x4c8>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d0f0      	beq.n	800c062 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	2b01      	cmp	r3, #1
 800c086:	d106      	bne.n	800c096 <HAL_RCC_OscConfig+0x312>
 800c088:	4b6f      	ldr	r3, [pc, #444]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c08a:	6a1b      	ldr	r3, [r3, #32]
 800c08c:	4a6e      	ldr	r2, [pc, #440]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c08e:	f043 0301 	orr.w	r3, r3, #1
 800c092:	6213      	str	r3, [r2, #32]
 800c094:	e02d      	b.n	800c0f2 <HAL_RCC_OscConfig+0x36e>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d10c      	bne.n	800c0b8 <HAL_RCC_OscConfig+0x334>
 800c09e:	4b6a      	ldr	r3, [pc, #424]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c0a0:	6a1b      	ldr	r3, [r3, #32]
 800c0a2:	4a69      	ldr	r2, [pc, #420]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c0a4:	f023 0301 	bic.w	r3, r3, #1
 800c0a8:	6213      	str	r3, [r2, #32]
 800c0aa:	4b67      	ldr	r3, [pc, #412]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c0ac:	6a1b      	ldr	r3, [r3, #32]
 800c0ae:	4a66      	ldr	r2, [pc, #408]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c0b0:	f023 0304 	bic.w	r3, r3, #4
 800c0b4:	6213      	str	r3, [r2, #32]
 800c0b6:	e01c      	b.n	800c0f2 <HAL_RCC_OscConfig+0x36e>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	2b05      	cmp	r3, #5
 800c0be:	d10c      	bne.n	800c0da <HAL_RCC_OscConfig+0x356>
 800c0c0:	4b61      	ldr	r3, [pc, #388]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c0c2:	6a1b      	ldr	r3, [r3, #32]
 800c0c4:	4a60      	ldr	r2, [pc, #384]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c0c6:	f043 0304 	orr.w	r3, r3, #4
 800c0ca:	6213      	str	r3, [r2, #32]
 800c0cc:	4b5e      	ldr	r3, [pc, #376]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c0ce:	6a1b      	ldr	r3, [r3, #32]
 800c0d0:	4a5d      	ldr	r2, [pc, #372]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c0d2:	f043 0301 	orr.w	r3, r3, #1
 800c0d6:	6213      	str	r3, [r2, #32]
 800c0d8:	e00b      	b.n	800c0f2 <HAL_RCC_OscConfig+0x36e>
 800c0da:	4b5b      	ldr	r3, [pc, #364]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c0dc:	6a1b      	ldr	r3, [r3, #32]
 800c0de:	4a5a      	ldr	r2, [pc, #360]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c0e0:	f023 0301 	bic.w	r3, r3, #1
 800c0e4:	6213      	str	r3, [r2, #32]
 800c0e6:	4b58      	ldr	r3, [pc, #352]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c0e8:	6a1b      	ldr	r3, [r3, #32]
 800c0ea:	4a57      	ldr	r2, [pc, #348]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c0ec:	f023 0304 	bic.w	r3, r3, #4
 800c0f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	68db      	ldr	r3, [r3, #12]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d015      	beq.n	800c126 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c0fa:	f7fd ff41 	bl	8009f80 <HAL_GetTick>
 800c0fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c100:	e00a      	b.n	800c118 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c102:	f7fd ff3d 	bl	8009f80 <HAL_GetTick>
 800c106:	4602      	mov	r2, r0
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c110:	4293      	cmp	r3, r2
 800c112:	d901      	bls.n	800c118 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800c114:	2303      	movs	r3, #3
 800c116:	e0b1      	b.n	800c27c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c118:	4b4b      	ldr	r3, [pc, #300]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c11a:	6a1b      	ldr	r3, [r3, #32]
 800c11c:	f003 0302 	and.w	r3, r3, #2
 800c120:	2b00      	cmp	r3, #0
 800c122:	d0ee      	beq.n	800c102 <HAL_RCC_OscConfig+0x37e>
 800c124:	e014      	b.n	800c150 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c126:	f7fd ff2b 	bl	8009f80 <HAL_GetTick>
 800c12a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c12c:	e00a      	b.n	800c144 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c12e:	f7fd ff27 	bl	8009f80 <HAL_GetTick>
 800c132:	4602      	mov	r2, r0
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	1ad3      	subs	r3, r2, r3
 800c138:	f241 3288 	movw	r2, #5000	; 0x1388
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d901      	bls.n	800c144 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800c140:	2303      	movs	r3, #3
 800c142:	e09b      	b.n	800c27c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c144:	4b40      	ldr	r3, [pc, #256]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c146:	6a1b      	ldr	r3, [r3, #32]
 800c148:	f003 0302 	and.w	r3, r3, #2
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d1ee      	bne.n	800c12e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c150:	7dfb      	ldrb	r3, [r7, #23]
 800c152:	2b01      	cmp	r3, #1
 800c154:	d105      	bne.n	800c162 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c156:	4b3c      	ldr	r3, [pc, #240]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c158:	69db      	ldr	r3, [r3, #28]
 800c15a:	4a3b      	ldr	r2, [pc, #236]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c15c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c160:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	69db      	ldr	r3, [r3, #28]
 800c166:	2b00      	cmp	r3, #0
 800c168:	f000 8087 	beq.w	800c27a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c16c:	4b36      	ldr	r3, [pc, #216]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	f003 030c 	and.w	r3, r3, #12
 800c174:	2b08      	cmp	r3, #8
 800c176:	d061      	beq.n	800c23c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	69db      	ldr	r3, [r3, #28]
 800c17c:	2b02      	cmp	r3, #2
 800c17e:	d146      	bne.n	800c20e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c180:	4b33      	ldr	r3, [pc, #204]	; (800c250 <HAL_RCC_OscConfig+0x4cc>)
 800c182:	2200      	movs	r2, #0
 800c184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c186:	f7fd fefb 	bl	8009f80 <HAL_GetTick>
 800c18a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c18c:	e008      	b.n	800c1a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c18e:	f7fd fef7 	bl	8009f80 <HAL_GetTick>
 800c192:	4602      	mov	r2, r0
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	1ad3      	subs	r3, r2, r3
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d901      	bls.n	800c1a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800c19c:	2303      	movs	r3, #3
 800c19e:	e06d      	b.n	800c27c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c1a0:	4b29      	ldr	r3, [pc, #164]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d1f0      	bne.n	800c18e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6a1b      	ldr	r3, [r3, #32]
 800c1b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1b4:	d108      	bne.n	800c1c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c1b6:	4b24      	ldr	r3, [pc, #144]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	689b      	ldr	r3, [r3, #8]
 800c1c2:	4921      	ldr	r1, [pc, #132]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c1c8:	4b1f      	ldr	r3, [pc, #124]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6a19      	ldr	r1, [r3, #32]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d8:	430b      	orrs	r3, r1
 800c1da:	491b      	ldr	r1, [pc, #108]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c1e0:	4b1b      	ldr	r3, [pc, #108]	; (800c250 <HAL_RCC_OscConfig+0x4cc>)
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1e6:	f7fd fecb 	bl	8009f80 <HAL_GetTick>
 800c1ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c1ec:	e008      	b.n	800c200 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1ee:	f7fd fec7 	bl	8009f80 <HAL_GetTick>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	1ad3      	subs	r3, r2, r3
 800c1f8:	2b02      	cmp	r3, #2
 800c1fa:	d901      	bls.n	800c200 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800c1fc:	2303      	movs	r3, #3
 800c1fe:	e03d      	b.n	800c27c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c200:	4b11      	ldr	r3, [pc, #68]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d0f0      	beq.n	800c1ee <HAL_RCC_OscConfig+0x46a>
 800c20c:	e035      	b.n	800c27a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c20e:	4b10      	ldr	r3, [pc, #64]	; (800c250 <HAL_RCC_OscConfig+0x4cc>)
 800c210:	2200      	movs	r2, #0
 800c212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c214:	f7fd feb4 	bl	8009f80 <HAL_GetTick>
 800c218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c21a:	e008      	b.n	800c22e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c21c:	f7fd feb0 	bl	8009f80 <HAL_GetTick>
 800c220:	4602      	mov	r2, r0
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	1ad3      	subs	r3, r2, r3
 800c226:	2b02      	cmp	r3, #2
 800c228:	d901      	bls.n	800c22e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c22a:	2303      	movs	r3, #3
 800c22c:	e026      	b.n	800c27c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c22e:	4b06      	ldr	r3, [pc, #24]	; (800c248 <HAL_RCC_OscConfig+0x4c4>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c236:	2b00      	cmp	r3, #0
 800c238:	d1f0      	bne.n	800c21c <HAL_RCC_OscConfig+0x498>
 800c23a:	e01e      	b.n	800c27a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	69db      	ldr	r3, [r3, #28]
 800c240:	2b01      	cmp	r3, #1
 800c242:	d107      	bne.n	800c254 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800c244:	2301      	movs	r3, #1
 800c246:	e019      	b.n	800c27c <HAL_RCC_OscConfig+0x4f8>
 800c248:	40021000 	.word	0x40021000
 800c24c:	40007000 	.word	0x40007000
 800c250:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800c254:	4b0b      	ldr	r3, [pc, #44]	; (800c284 <HAL_RCC_OscConfig+0x500>)
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6a1b      	ldr	r3, [r3, #32]
 800c264:	429a      	cmp	r2, r3
 800c266:	d106      	bne.n	800c276 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c272:	429a      	cmp	r2, r3
 800c274:	d001      	beq.n	800c27a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800c276:	2301      	movs	r3, #1
 800c278:	e000      	b.n	800c27c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800c27a:	2300      	movs	r3, #0
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3718      	adds	r7, #24
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	40021000 	.word	0x40021000

0800c288 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d101      	bne.n	800c29c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c298:	2301      	movs	r3, #1
 800c29a:	e0d0      	b.n	800c43e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c29c:	4b6a      	ldr	r3, [pc, #424]	; (800c448 <HAL_RCC_ClockConfig+0x1c0>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f003 0307 	and.w	r3, r3, #7
 800c2a4:	683a      	ldr	r2, [r7, #0]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d910      	bls.n	800c2cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c2aa:	4b67      	ldr	r3, [pc, #412]	; (800c448 <HAL_RCC_ClockConfig+0x1c0>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f023 0207 	bic.w	r2, r3, #7
 800c2b2:	4965      	ldr	r1, [pc, #404]	; (800c448 <HAL_RCC_ClockConfig+0x1c0>)
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c2ba:	4b63      	ldr	r3, [pc, #396]	; (800c448 <HAL_RCC_ClockConfig+0x1c0>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f003 0307 	and.w	r3, r3, #7
 800c2c2:	683a      	ldr	r2, [r7, #0]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d001      	beq.n	800c2cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e0b8      	b.n	800c43e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f003 0302 	and.w	r3, r3, #2
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d020      	beq.n	800c31a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f003 0304 	and.w	r3, r3, #4
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d005      	beq.n	800c2f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c2e4:	4b59      	ldr	r3, [pc, #356]	; (800c44c <HAL_RCC_ClockConfig+0x1c4>)
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	4a58      	ldr	r2, [pc, #352]	; (800c44c <HAL_RCC_ClockConfig+0x1c4>)
 800c2ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c2ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f003 0308 	and.w	r3, r3, #8
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d005      	beq.n	800c308 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c2fc:	4b53      	ldr	r3, [pc, #332]	; (800c44c <HAL_RCC_ClockConfig+0x1c4>)
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	4a52      	ldr	r2, [pc, #328]	; (800c44c <HAL_RCC_ClockConfig+0x1c4>)
 800c302:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800c306:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c308:	4b50      	ldr	r3, [pc, #320]	; (800c44c <HAL_RCC_ClockConfig+0x1c4>)
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	689b      	ldr	r3, [r3, #8]
 800c314:	494d      	ldr	r1, [pc, #308]	; (800c44c <HAL_RCC_ClockConfig+0x1c4>)
 800c316:	4313      	orrs	r3, r2
 800c318:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f003 0301 	and.w	r3, r3, #1
 800c322:	2b00      	cmp	r3, #0
 800c324:	d040      	beq.n	800c3a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d107      	bne.n	800c33e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c32e:	4b47      	ldr	r3, [pc, #284]	; (800c44c <HAL_RCC_ClockConfig+0x1c4>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c336:	2b00      	cmp	r3, #0
 800c338:	d115      	bne.n	800c366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	e07f      	b.n	800c43e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	2b02      	cmp	r3, #2
 800c344:	d107      	bne.n	800c356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c346:	4b41      	ldr	r3, [pc, #260]	; (800c44c <HAL_RCC_ClockConfig+0x1c4>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d109      	bne.n	800c366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c352:	2301      	movs	r3, #1
 800c354:	e073      	b.n	800c43e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c356:	4b3d      	ldr	r3, [pc, #244]	; (800c44c <HAL_RCC_ClockConfig+0x1c4>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f003 0302 	and.w	r3, r3, #2
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d101      	bne.n	800c366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c362:	2301      	movs	r3, #1
 800c364:	e06b      	b.n	800c43e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c366:	4b39      	ldr	r3, [pc, #228]	; (800c44c <HAL_RCC_ClockConfig+0x1c4>)
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	f023 0203 	bic.w	r2, r3, #3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	4936      	ldr	r1, [pc, #216]	; (800c44c <HAL_RCC_ClockConfig+0x1c4>)
 800c374:	4313      	orrs	r3, r2
 800c376:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c378:	f7fd fe02 	bl	8009f80 <HAL_GetTick>
 800c37c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c37e:	e00a      	b.n	800c396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c380:	f7fd fdfe 	bl	8009f80 <HAL_GetTick>
 800c384:	4602      	mov	r2, r0
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	1ad3      	subs	r3, r2, r3
 800c38a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c38e:	4293      	cmp	r3, r2
 800c390:	d901      	bls.n	800c396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c392:	2303      	movs	r3, #3
 800c394:	e053      	b.n	800c43e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c396:	4b2d      	ldr	r3, [pc, #180]	; (800c44c <HAL_RCC_ClockConfig+0x1c4>)
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	f003 020c 	and.w	r2, r3, #12
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d1eb      	bne.n	800c380 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c3a8:	4b27      	ldr	r3, [pc, #156]	; (800c448 <HAL_RCC_ClockConfig+0x1c0>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f003 0307 	and.w	r3, r3, #7
 800c3b0:	683a      	ldr	r2, [r7, #0]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d210      	bcs.n	800c3d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3b6:	4b24      	ldr	r3, [pc, #144]	; (800c448 <HAL_RCC_ClockConfig+0x1c0>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f023 0207 	bic.w	r2, r3, #7
 800c3be:	4922      	ldr	r1, [pc, #136]	; (800c448 <HAL_RCC_ClockConfig+0x1c0>)
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c3c6:	4b20      	ldr	r3, [pc, #128]	; (800c448 <HAL_RCC_ClockConfig+0x1c0>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f003 0307 	and.w	r3, r3, #7
 800c3ce:	683a      	ldr	r2, [r7, #0]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d001      	beq.n	800c3d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e032      	b.n	800c43e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f003 0304 	and.w	r3, r3, #4
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d008      	beq.n	800c3f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c3e4:	4b19      	ldr	r3, [pc, #100]	; (800c44c <HAL_RCC_ClockConfig+0x1c4>)
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	4916      	ldr	r1, [pc, #88]	; (800c44c <HAL_RCC_ClockConfig+0x1c4>)
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f003 0308 	and.w	r3, r3, #8
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d009      	beq.n	800c416 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c402:	4b12      	ldr	r3, [pc, #72]	; (800c44c <HAL_RCC_ClockConfig+0x1c4>)
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	00db      	lsls	r3, r3, #3
 800c410:	490e      	ldr	r1, [pc, #56]	; (800c44c <HAL_RCC_ClockConfig+0x1c4>)
 800c412:	4313      	orrs	r3, r2
 800c414:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c416:	f000 f821 	bl	800c45c <HAL_RCC_GetSysClockFreq>
 800c41a:	4602      	mov	r2, r0
 800c41c:	4b0b      	ldr	r3, [pc, #44]	; (800c44c <HAL_RCC_ClockConfig+0x1c4>)
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	091b      	lsrs	r3, r3, #4
 800c422:	f003 030f 	and.w	r3, r3, #15
 800c426:	490a      	ldr	r1, [pc, #40]	; (800c450 <HAL_RCC_ClockConfig+0x1c8>)
 800c428:	5ccb      	ldrb	r3, [r1, r3]
 800c42a:	fa22 f303 	lsr.w	r3, r2, r3
 800c42e:	4a09      	ldr	r2, [pc, #36]	; (800c454 <HAL_RCC_ClockConfig+0x1cc>)
 800c430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c432:	4b09      	ldr	r3, [pc, #36]	; (800c458 <HAL_RCC_ClockConfig+0x1d0>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4618      	mov	r0, r3
 800c438:	f7fd fd60 	bl	8009efc <HAL_InitTick>

  return HAL_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	40022000 	.word	0x40022000
 800c44c:	40021000 	.word	0x40021000
 800c450:	0800d14c 	.word	0x0800d14c
 800c454:	20000cd8 	.word	0x20000cd8
 800c458:	20000cdc 	.word	0x20000cdc

0800c45c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b087      	sub	sp, #28
 800c460:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c462:	2300      	movs	r3, #0
 800c464:	60fb      	str	r3, [r7, #12]
 800c466:	2300      	movs	r3, #0
 800c468:	60bb      	str	r3, [r7, #8]
 800c46a:	2300      	movs	r3, #0
 800c46c:	617b      	str	r3, [r7, #20]
 800c46e:	2300      	movs	r3, #0
 800c470:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c472:	2300      	movs	r3, #0
 800c474:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c476:	4b1e      	ldr	r3, [pc, #120]	; (800c4f0 <HAL_RCC_GetSysClockFreq+0x94>)
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f003 030c 	and.w	r3, r3, #12
 800c482:	2b04      	cmp	r3, #4
 800c484:	d002      	beq.n	800c48c <HAL_RCC_GetSysClockFreq+0x30>
 800c486:	2b08      	cmp	r3, #8
 800c488:	d003      	beq.n	800c492 <HAL_RCC_GetSysClockFreq+0x36>
 800c48a:	e027      	b.n	800c4dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c48c:	4b19      	ldr	r3, [pc, #100]	; (800c4f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800c48e:	613b      	str	r3, [r7, #16]
      break;
 800c490:	e027      	b.n	800c4e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	0c9b      	lsrs	r3, r3, #18
 800c496:	f003 030f 	and.w	r3, r3, #15
 800c49a:	4a17      	ldr	r2, [pc, #92]	; (800c4f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800c49c:	5cd3      	ldrb	r3, [r2, r3]
 800c49e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d010      	beq.n	800c4cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c4aa:	4b11      	ldr	r3, [pc, #68]	; (800c4f0 <HAL_RCC_GetSysClockFreq+0x94>)
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	0c5b      	lsrs	r3, r3, #17
 800c4b0:	f003 0301 	and.w	r3, r3, #1
 800c4b4:	4a11      	ldr	r2, [pc, #68]	; (800c4fc <HAL_RCC_GetSysClockFreq+0xa0>)
 800c4b6:	5cd3      	ldrb	r3, [r2, r3]
 800c4b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a0d      	ldr	r2, [pc, #52]	; (800c4f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800c4be:	fb03 f202 	mul.w	r2, r3, r2
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4c8:	617b      	str	r3, [r7, #20]
 800c4ca:	e004      	b.n	800c4d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4a0c      	ldr	r2, [pc, #48]	; (800c500 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c4d0:	fb02 f303 	mul.w	r3, r2, r3
 800c4d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	613b      	str	r3, [r7, #16]
      break;
 800c4da:	e002      	b.n	800c4e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c4dc:	4b05      	ldr	r3, [pc, #20]	; (800c4f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800c4de:	613b      	str	r3, [r7, #16]
      break;
 800c4e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c4e2:	693b      	ldr	r3, [r7, #16]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	371c      	adds	r7, #28
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bc80      	pop	{r7}
 800c4ec:	4770      	bx	lr
 800c4ee:	bf00      	nop
 800c4f0:	40021000 	.word	0x40021000
 800c4f4:	007a1200 	.word	0x007a1200
 800c4f8:	0800d164 	.word	0x0800d164
 800c4fc:	0800d174 	.word	0x0800d174
 800c500:	003d0900 	.word	0x003d0900

0800c504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c504:	b480      	push	{r7}
 800c506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c508:	4b02      	ldr	r3, [pc, #8]	; (800c514 <HAL_RCC_GetHCLKFreq+0x10>)
 800c50a:	681b      	ldr	r3, [r3, #0]
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	46bd      	mov	sp, r7
 800c510:	bc80      	pop	{r7}
 800c512:	4770      	bx	lr
 800c514:	20000cd8 	.word	0x20000cd8

0800c518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c51c:	f7ff fff2 	bl	800c504 <HAL_RCC_GetHCLKFreq>
 800c520:	4602      	mov	r2, r0
 800c522:	4b05      	ldr	r3, [pc, #20]	; (800c538 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	0a1b      	lsrs	r3, r3, #8
 800c528:	f003 0307 	and.w	r3, r3, #7
 800c52c:	4903      	ldr	r1, [pc, #12]	; (800c53c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c52e:	5ccb      	ldrb	r3, [r1, r3]
 800c530:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c534:	4618      	mov	r0, r3
 800c536:	bd80      	pop	{r7, pc}
 800c538:	40021000 	.word	0x40021000
 800c53c:	0800d15c 	.word	0x0800d15c

0800c540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c544:	f7ff ffde 	bl	800c504 <HAL_RCC_GetHCLKFreq>
 800c548:	4602      	mov	r2, r0
 800c54a:	4b05      	ldr	r3, [pc, #20]	; (800c560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	0adb      	lsrs	r3, r3, #11
 800c550:	f003 0307 	and.w	r3, r3, #7
 800c554:	4903      	ldr	r1, [pc, #12]	; (800c564 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c556:	5ccb      	ldrb	r3, [r1, r3]
 800c558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	bd80      	pop	{r7, pc}
 800c560:	40021000 	.word	0x40021000
 800c564:	0800d15c 	.word	0x0800d15c

0800c568 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c570:	4b0a      	ldr	r3, [pc, #40]	; (800c59c <RCC_Delay+0x34>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a0a      	ldr	r2, [pc, #40]	; (800c5a0 <RCC_Delay+0x38>)
 800c576:	fba2 2303 	umull	r2, r3, r2, r3
 800c57a:	0a5b      	lsrs	r3, r3, #9
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	fb02 f303 	mul.w	r3, r2, r3
 800c582:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c584:	bf00      	nop
  }
  while (Delay --);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	1e5a      	subs	r2, r3, #1
 800c58a:	60fa      	str	r2, [r7, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d1f9      	bne.n	800c584 <RCC_Delay+0x1c>
}
 800c590:	bf00      	nop
 800c592:	bf00      	nop
 800c594:	3714      	adds	r7, #20
 800c596:	46bd      	mov	sp, r7
 800c598:	bc80      	pop	{r7}
 800c59a:	4770      	bx	lr
 800c59c:	20000cd8 	.word	0x20000cd8
 800c5a0:	10624dd3 	.word	0x10624dd3

0800c5a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d101      	bne.n	800c5b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e041      	b.n	800c63a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d106      	bne.n	800c5d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f7fd fbb0 	bl	8009d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2202      	movs	r2, #2
 800c5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	3304      	adds	r3, #4
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	4610      	mov	r0, r2
 800c5e4:	f000 fa82 	bl	800caec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2201      	movs	r2, #1
 800c604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2201      	movs	r2, #1
 800c614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2201      	movs	r2, #1
 800c61c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c638:	2300      	movs	r3, #0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3708      	adds	r7, #8
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
	...

0800c644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c644:	b480      	push	{r7}
 800c646:	b085      	sub	sp, #20
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c652:	b2db      	uxtb	r3, r3
 800c654:	2b01      	cmp	r3, #1
 800c656:	d001      	beq.n	800c65c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c658:	2301      	movs	r3, #1
 800c65a:	e044      	b.n	800c6e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2202      	movs	r2, #2
 800c660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	68da      	ldr	r2, [r3, #12]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f042 0201 	orr.w	r2, r2, #1
 800c672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a1d      	ldr	r2, [pc, #116]	; (800c6f0 <HAL_TIM_Base_Start_IT+0xac>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d018      	beq.n	800c6b0 <HAL_TIM_Base_Start_IT+0x6c>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4a1c      	ldr	r2, [pc, #112]	; (800c6f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d013      	beq.n	800c6b0 <HAL_TIM_Base_Start_IT+0x6c>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c690:	d00e      	beq.n	800c6b0 <HAL_TIM_Base_Start_IT+0x6c>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a18      	ldr	r2, [pc, #96]	; (800c6f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d009      	beq.n	800c6b0 <HAL_TIM_Base_Start_IT+0x6c>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a16      	ldr	r2, [pc, #88]	; (800c6fc <HAL_TIM_Base_Start_IT+0xb8>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d004      	beq.n	800c6b0 <HAL_TIM_Base_Start_IT+0x6c>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a15      	ldr	r2, [pc, #84]	; (800c700 <HAL_TIM_Base_Start_IT+0xbc>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d111      	bne.n	800c6d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	f003 0307 	and.w	r3, r3, #7
 800c6ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2b06      	cmp	r3, #6
 800c6c0:	d010      	beq.n	800c6e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f042 0201 	orr.w	r2, r2, #1
 800c6d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6d2:	e007      	b.n	800c6e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f042 0201 	orr.w	r2, r2, #1
 800c6e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3714      	adds	r7, #20
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bc80      	pop	{r7}
 800c6ee:	4770      	bx	lr
 800c6f0:	40012c00 	.word	0x40012c00
 800c6f4:	40013400 	.word	0x40013400
 800c6f8:	40000400 	.word	0x40000400
 800c6fc:	40000800 	.word	0x40000800
 800c700:	40000c00 	.word	0x40000c00

0800c704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	691b      	ldr	r3, [r3, #16]
 800c712:	f003 0302 	and.w	r3, r3, #2
 800c716:	2b02      	cmp	r3, #2
 800c718:	d122      	bne.n	800c760 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	f003 0302 	and.w	r3, r3, #2
 800c724:	2b02      	cmp	r3, #2
 800c726:	d11b      	bne.n	800c760 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f06f 0202 	mvn.w	r2, #2
 800c730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2201      	movs	r2, #1
 800c736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	699b      	ldr	r3, [r3, #24]
 800c73e:	f003 0303 	and.w	r3, r3, #3
 800c742:	2b00      	cmp	r3, #0
 800c744:	d003      	beq.n	800c74e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f9b4 	bl	800cab4 <HAL_TIM_IC_CaptureCallback>
 800c74c:	e005      	b.n	800c75a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 f9a7 	bl	800caa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 f9b6 	bl	800cac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	691b      	ldr	r3, [r3, #16]
 800c766:	f003 0304 	and.w	r3, r3, #4
 800c76a:	2b04      	cmp	r3, #4
 800c76c:	d122      	bne.n	800c7b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	f003 0304 	and.w	r3, r3, #4
 800c778:	2b04      	cmp	r3, #4
 800c77a:	d11b      	bne.n	800c7b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f06f 0204 	mvn.w	r2, #4
 800c784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2202      	movs	r2, #2
 800c78a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	699b      	ldr	r3, [r3, #24]
 800c792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c796:	2b00      	cmp	r3, #0
 800c798:	d003      	beq.n	800c7a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 f98a 	bl	800cab4 <HAL_TIM_IC_CaptureCallback>
 800c7a0:	e005      	b.n	800c7ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 f97d 	bl	800caa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 f98c 	bl	800cac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	f003 0308 	and.w	r3, r3, #8
 800c7be:	2b08      	cmp	r3, #8
 800c7c0:	d122      	bne.n	800c808 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	f003 0308 	and.w	r3, r3, #8
 800c7cc:	2b08      	cmp	r3, #8
 800c7ce:	d11b      	bne.n	800c808 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f06f 0208 	mvn.w	r2, #8
 800c7d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2204      	movs	r2, #4
 800c7de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	69db      	ldr	r3, [r3, #28]
 800c7e6:	f003 0303 	and.w	r3, r3, #3
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d003      	beq.n	800c7f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 f960 	bl	800cab4 <HAL_TIM_IC_CaptureCallback>
 800c7f4:	e005      	b.n	800c802 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 f953 	bl	800caa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f962 	bl	800cac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	f003 0310 	and.w	r3, r3, #16
 800c812:	2b10      	cmp	r3, #16
 800c814:	d122      	bne.n	800c85c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	f003 0310 	and.w	r3, r3, #16
 800c820:	2b10      	cmp	r3, #16
 800c822:	d11b      	bne.n	800c85c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f06f 0210 	mvn.w	r2, #16
 800c82c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2208      	movs	r2, #8
 800c832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	69db      	ldr	r3, [r3, #28]
 800c83a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d003      	beq.n	800c84a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f936 	bl	800cab4 <HAL_TIM_IC_CaptureCallback>
 800c848:	e005      	b.n	800c856 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 f929 	bl	800caa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 f938 	bl	800cac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	691b      	ldr	r3, [r3, #16]
 800c862:	f003 0301 	and.w	r3, r3, #1
 800c866:	2b01      	cmp	r3, #1
 800c868:	d10e      	bne.n	800c888 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	f003 0301 	and.w	r3, r3, #1
 800c874:	2b01      	cmp	r3, #1
 800c876:	d107      	bne.n	800c888 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f06f 0201 	mvn.w	r2, #1
 800c880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f7fc feee 	bl	8009664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	691b      	ldr	r3, [r3, #16]
 800c88e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c892:	2b80      	cmp	r3, #128	; 0x80
 800c894:	d10e      	bne.n	800c8b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	68db      	ldr	r3, [r3, #12]
 800c89c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8a0:	2b80      	cmp	r3, #128	; 0x80
 800c8a2:	d107      	bne.n	800c8b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c8ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 faa1 	bl	800cdf6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	691b      	ldr	r3, [r3, #16]
 800c8ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8be:	2b40      	cmp	r3, #64	; 0x40
 800c8c0:	d10e      	bne.n	800c8e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8cc:	2b40      	cmp	r3, #64	; 0x40
 800c8ce:	d107      	bne.n	800c8e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c8d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 f8fc 	bl	800cad8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	f003 0320 	and.w	r3, r3, #32
 800c8ea:	2b20      	cmp	r3, #32
 800c8ec:	d10e      	bne.n	800c90c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	f003 0320 	and.w	r3, r3, #32
 800c8f8:	2b20      	cmp	r3, #32
 800c8fa:	d107      	bne.n	800c90c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f06f 0220 	mvn.w	r2, #32
 800c904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 fa6c 	bl	800cde4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c90c:	bf00      	nop
 800c90e:	3708      	adds	r7, #8
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c91e:	2300      	movs	r3, #0
 800c920:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d101      	bne.n	800c930 <HAL_TIM_ConfigClockSource+0x1c>
 800c92c:	2302      	movs	r3, #2
 800c92e:	e0b4      	b.n	800ca9a <HAL_TIM_ConfigClockSource+0x186>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2201      	movs	r2, #1
 800c934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2202      	movs	r2, #2
 800c93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	689b      	ldr	r3, [r3, #8]
 800c946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c94e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c956:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	68ba      	ldr	r2, [r7, #8]
 800c95e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c968:	d03e      	beq.n	800c9e8 <HAL_TIM_ConfigClockSource+0xd4>
 800c96a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c96e:	f200 8087 	bhi.w	800ca80 <HAL_TIM_ConfigClockSource+0x16c>
 800c972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c976:	f000 8086 	beq.w	800ca86 <HAL_TIM_ConfigClockSource+0x172>
 800c97a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c97e:	d87f      	bhi.n	800ca80 <HAL_TIM_ConfigClockSource+0x16c>
 800c980:	2b70      	cmp	r3, #112	; 0x70
 800c982:	d01a      	beq.n	800c9ba <HAL_TIM_ConfigClockSource+0xa6>
 800c984:	2b70      	cmp	r3, #112	; 0x70
 800c986:	d87b      	bhi.n	800ca80 <HAL_TIM_ConfigClockSource+0x16c>
 800c988:	2b60      	cmp	r3, #96	; 0x60
 800c98a:	d050      	beq.n	800ca2e <HAL_TIM_ConfigClockSource+0x11a>
 800c98c:	2b60      	cmp	r3, #96	; 0x60
 800c98e:	d877      	bhi.n	800ca80 <HAL_TIM_ConfigClockSource+0x16c>
 800c990:	2b50      	cmp	r3, #80	; 0x50
 800c992:	d03c      	beq.n	800ca0e <HAL_TIM_ConfigClockSource+0xfa>
 800c994:	2b50      	cmp	r3, #80	; 0x50
 800c996:	d873      	bhi.n	800ca80 <HAL_TIM_ConfigClockSource+0x16c>
 800c998:	2b40      	cmp	r3, #64	; 0x40
 800c99a:	d058      	beq.n	800ca4e <HAL_TIM_ConfigClockSource+0x13a>
 800c99c:	2b40      	cmp	r3, #64	; 0x40
 800c99e:	d86f      	bhi.n	800ca80 <HAL_TIM_ConfigClockSource+0x16c>
 800c9a0:	2b30      	cmp	r3, #48	; 0x30
 800c9a2:	d064      	beq.n	800ca6e <HAL_TIM_ConfigClockSource+0x15a>
 800c9a4:	2b30      	cmp	r3, #48	; 0x30
 800c9a6:	d86b      	bhi.n	800ca80 <HAL_TIM_ConfigClockSource+0x16c>
 800c9a8:	2b20      	cmp	r3, #32
 800c9aa:	d060      	beq.n	800ca6e <HAL_TIM_ConfigClockSource+0x15a>
 800c9ac:	2b20      	cmp	r3, #32
 800c9ae:	d867      	bhi.n	800ca80 <HAL_TIM_ConfigClockSource+0x16c>
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d05c      	beq.n	800ca6e <HAL_TIM_ConfigClockSource+0x15a>
 800c9b4:	2b10      	cmp	r3, #16
 800c9b6:	d05a      	beq.n	800ca6e <HAL_TIM_ConfigClockSource+0x15a>
 800c9b8:	e062      	b.n	800ca80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c9ca:	f000 f980 	bl	800ccce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c9dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	68ba      	ldr	r2, [r7, #8]
 800c9e4:	609a      	str	r2, [r3, #8]
      break;
 800c9e6:	e04f      	b.n	800ca88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c9f8:	f000 f969 	bl	800ccce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	689a      	ldr	r2, [r3, #8]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca0a:	609a      	str	r2, [r3, #8]
      break;
 800ca0c:	e03c      	b.n	800ca88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	f000 f8e0 	bl	800cbe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2150      	movs	r1, #80	; 0x50
 800ca26:	4618      	mov	r0, r3
 800ca28:	f000 f937 	bl	800cc9a <TIM_ITRx_SetConfig>
      break;
 800ca2c:	e02c      	b.n	800ca88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	f000 f8fe 	bl	800cc3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2160      	movs	r1, #96	; 0x60
 800ca46:	4618      	mov	r0, r3
 800ca48:	f000 f927 	bl	800cc9a <TIM_ITRx_SetConfig>
      break;
 800ca4c:	e01c      	b.n	800ca88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	f000 f8c0 	bl	800cbe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2140      	movs	r1, #64	; 0x40
 800ca66:	4618      	mov	r0, r3
 800ca68:	f000 f917 	bl	800cc9a <TIM_ITRx_SetConfig>
      break;
 800ca6c:	e00c      	b.n	800ca88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4619      	mov	r1, r3
 800ca78:	4610      	mov	r0, r2
 800ca7a:	f000 f90e 	bl	800cc9a <TIM_ITRx_SetConfig>
      break;
 800ca7e:	e003      	b.n	800ca88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ca80:	2301      	movs	r3, #1
 800ca82:	73fb      	strb	r3, [r7, #15]
      break;
 800ca84:	e000      	b.n	800ca88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ca86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ca98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800caa2:	b480      	push	{r7}
 800caa4:	b083      	sub	sp, #12
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800caaa:	bf00      	nop
 800caac:	370c      	adds	r7, #12
 800caae:	46bd      	mov	sp, r7
 800cab0:	bc80      	pop	{r7}
 800cab2:	4770      	bx	lr

0800cab4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cabc:	bf00      	nop
 800cabe:	370c      	adds	r7, #12
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bc80      	pop	{r7}
 800cac4:	4770      	bx	lr

0800cac6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cac6:	b480      	push	{r7}
 800cac8:	b083      	sub	sp, #12
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cace:	bf00      	nop
 800cad0:	370c      	adds	r7, #12
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bc80      	pop	{r7}
 800cad6:	4770      	bx	lr

0800cad8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cae0:	bf00      	nop
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bc80      	pop	{r7}
 800cae8:	4770      	bx	lr
	...

0800caec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800caec:	b480      	push	{r7}
 800caee:	b085      	sub	sp, #20
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	4a33      	ldr	r2, [pc, #204]	; (800cbcc <TIM_Base_SetConfig+0xe0>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d013      	beq.n	800cb2c <TIM_Base_SetConfig+0x40>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	4a32      	ldr	r2, [pc, #200]	; (800cbd0 <TIM_Base_SetConfig+0xe4>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d00f      	beq.n	800cb2c <TIM_Base_SetConfig+0x40>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb12:	d00b      	beq.n	800cb2c <TIM_Base_SetConfig+0x40>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	4a2f      	ldr	r2, [pc, #188]	; (800cbd4 <TIM_Base_SetConfig+0xe8>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d007      	beq.n	800cb2c <TIM_Base_SetConfig+0x40>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a2e      	ldr	r2, [pc, #184]	; (800cbd8 <TIM_Base_SetConfig+0xec>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d003      	beq.n	800cb2c <TIM_Base_SetConfig+0x40>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	4a2d      	ldr	r2, [pc, #180]	; (800cbdc <TIM_Base_SetConfig+0xf0>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d108      	bne.n	800cb3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	68fa      	ldr	r2, [r7, #12]
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	4a22      	ldr	r2, [pc, #136]	; (800cbcc <TIM_Base_SetConfig+0xe0>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d013      	beq.n	800cb6e <TIM_Base_SetConfig+0x82>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4a21      	ldr	r2, [pc, #132]	; (800cbd0 <TIM_Base_SetConfig+0xe4>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d00f      	beq.n	800cb6e <TIM_Base_SetConfig+0x82>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb54:	d00b      	beq.n	800cb6e <TIM_Base_SetConfig+0x82>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	4a1e      	ldr	r2, [pc, #120]	; (800cbd4 <TIM_Base_SetConfig+0xe8>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d007      	beq.n	800cb6e <TIM_Base_SetConfig+0x82>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4a1d      	ldr	r2, [pc, #116]	; (800cbd8 <TIM_Base_SetConfig+0xec>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d003      	beq.n	800cb6e <TIM_Base_SetConfig+0x82>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	4a1c      	ldr	r2, [pc, #112]	; (800cbdc <TIM_Base_SetConfig+0xf0>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d108      	bne.n	800cb80 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	68fa      	ldr	r2, [r7, #12]
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	695b      	ldr	r3, [r3, #20]
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	68fa      	ldr	r2, [r7, #12]
 800cb92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	689a      	ldr	r2, [r3, #8]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4a09      	ldr	r2, [pc, #36]	; (800cbcc <TIM_Base_SetConfig+0xe0>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d003      	beq.n	800cbb4 <TIM_Base_SetConfig+0xc8>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	4a08      	ldr	r2, [pc, #32]	; (800cbd0 <TIM_Base_SetConfig+0xe4>)
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d103      	bne.n	800cbbc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	691a      	ldr	r2, [r3, #16]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	615a      	str	r2, [r3, #20]
}
 800cbc2:	bf00      	nop
 800cbc4:	3714      	adds	r7, #20
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bc80      	pop	{r7}
 800cbca:	4770      	bx	lr
 800cbcc:	40012c00 	.word	0x40012c00
 800cbd0:	40013400 	.word	0x40013400
 800cbd4:	40000400 	.word	0x40000400
 800cbd8:	40000800 	.word	0x40000800
 800cbdc:	40000c00 	.word	0x40000c00

0800cbe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b087      	sub	sp, #28
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6a1b      	ldr	r3, [r3, #32]
 800cbf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	6a1b      	ldr	r3, [r3, #32]
 800cbf6:	f023 0201 	bic.w	r2, r3, #1
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	699b      	ldr	r3, [r3, #24]
 800cc02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	011b      	lsls	r3, r3, #4
 800cc10:	693a      	ldr	r2, [r7, #16]
 800cc12:	4313      	orrs	r3, r2
 800cc14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	f023 030a 	bic.w	r3, r3, #10
 800cc1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc1e:	697a      	ldr	r2, [r7, #20]
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	4313      	orrs	r3, r2
 800cc24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	693a      	ldr	r2, [r7, #16]
 800cc2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	621a      	str	r2, [r3, #32]
}
 800cc32:	bf00      	nop
 800cc34:	371c      	adds	r7, #28
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bc80      	pop	{r7}
 800cc3a:	4770      	bx	lr

0800cc3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b087      	sub	sp, #28
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	60b9      	str	r1, [r7, #8]
 800cc46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	6a1b      	ldr	r3, [r3, #32]
 800cc4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	6a1b      	ldr	r3, [r3, #32]
 800cc52:	f023 0210 	bic.w	r2, r3, #16
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	699b      	ldr	r3, [r3, #24]
 800cc5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cc66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	031b      	lsls	r3, r3, #12
 800cc6c:	693a      	ldr	r2, [r7, #16]
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cc78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	011b      	lsls	r3, r3, #4
 800cc7e:	697a      	ldr	r2, [r7, #20]
 800cc80:	4313      	orrs	r3, r2
 800cc82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	693a      	ldr	r2, [r7, #16]
 800cc88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	697a      	ldr	r2, [r7, #20]
 800cc8e:	621a      	str	r2, [r3, #32]
}
 800cc90:	bf00      	nop
 800cc92:	371c      	adds	r7, #28
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bc80      	pop	{r7}
 800cc98:	4770      	bx	lr

0800cc9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc9a:	b480      	push	{r7}
 800cc9c:	b085      	sub	sp, #20
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ccb2:	683a      	ldr	r2, [r7, #0]
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	f043 0307 	orr.w	r3, r3, #7
 800ccbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	609a      	str	r2, [r3, #8]
}
 800ccc4:	bf00      	nop
 800ccc6:	3714      	adds	r7, #20
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bc80      	pop	{r7}
 800cccc:	4770      	bx	lr

0800ccce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ccce:	b480      	push	{r7}
 800ccd0:	b087      	sub	sp, #28
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	60f8      	str	r0, [r7, #12]
 800ccd6:	60b9      	str	r1, [r7, #8]
 800ccd8:	607a      	str	r2, [r7, #4]
 800ccda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cce8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	021a      	lsls	r2, r3, #8
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	431a      	orrs	r2, r3
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	4313      	orrs	r3, r2
 800ccf6:	697a      	ldr	r2, [r7, #20]
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	697a      	ldr	r2, [r7, #20]
 800cd00:	609a      	str	r2, [r3, #8]
}
 800cd02:	bf00      	nop
 800cd04:	371c      	adds	r7, #28
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bc80      	pop	{r7}
 800cd0a:	4770      	bx	lr

0800cd0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b085      	sub	sp, #20
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	d101      	bne.n	800cd24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd20:	2302      	movs	r3, #2
 800cd22:	e050      	b.n	800cdc6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2201      	movs	r2, #1
 800cd28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2202      	movs	r2, #2
 800cd30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	68fa      	ldr	r2, [r7, #12]
 800cd52:	4313      	orrs	r3, r2
 800cd54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	68fa      	ldr	r2, [r7, #12]
 800cd5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	4a1b      	ldr	r2, [pc, #108]	; (800cdd0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d018      	beq.n	800cd9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	4a19      	ldr	r2, [pc, #100]	; (800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d013      	beq.n	800cd9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd7a:	d00e      	beq.n	800cd9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4a15      	ldr	r2, [pc, #84]	; (800cdd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d009      	beq.n	800cd9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4a14      	ldr	r2, [pc, #80]	; (800cddc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d004      	beq.n	800cd9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a12      	ldr	r2, [pc, #72]	; (800cde0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d10c      	bne.n	800cdb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cda0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	68ba      	ldr	r2, [r7, #8]
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	68ba      	ldr	r2, [r7, #8]
 800cdb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cdc4:	2300      	movs	r3, #0
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3714      	adds	r7, #20
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bc80      	pop	{r7}
 800cdce:	4770      	bx	lr
 800cdd0:	40012c00 	.word	0x40012c00
 800cdd4:	40013400 	.word	0x40013400
 800cdd8:	40000400 	.word	0x40000400
 800cddc:	40000800 	.word	0x40000800
 800cde0:	40000c00 	.word	0x40000c00

0800cde4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cdec:	bf00      	nop
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bc80      	pop	{r7}
 800cdf4:	4770      	bx	lr

0800cdf6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cdf6:	b480      	push	{r7}
 800cdf8:	b083      	sub	sp, #12
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cdfe:	bf00      	nop
 800ce00:	370c      	adds	r7, #12
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bc80      	pop	{r7}
 800ce06:	4770      	bx	lr

0800ce08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d101      	bne.n	800ce1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce16:	2301      	movs	r3, #1
 800ce18:	e042      	b.n	800cea0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce20:	b2db      	uxtb	r3, r3
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d106      	bne.n	800ce34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f7fc ffa4 	bl	8009d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2224      	movs	r2, #36	; 0x24
 800ce38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	68da      	ldr	r2, [r3, #12]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ce4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f000 f82b 	bl	800cea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	691a      	ldr	r2, [r3, #16]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ce60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	695a      	ldr	r2, [r3, #20]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ce70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	68da      	ldr	r2, [r3, #12]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ce80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2200      	movs	r2, #0
 800ce86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2220      	movs	r2, #32
 800ce8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2220      	movs	r2, #32
 800ce94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ce9e:	2300      	movs	r3, #0
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3708      	adds	r7, #8
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	691b      	ldr	r3, [r3, #16]
 800ceb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	68da      	ldr	r2, [r3, #12]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	430a      	orrs	r2, r1
 800cec4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	689a      	ldr	r2, [r3, #8]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	691b      	ldr	r3, [r3, #16]
 800cece:	431a      	orrs	r2, r3
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	695b      	ldr	r3, [r3, #20]
 800ced4:	4313      	orrs	r3, r2
 800ced6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	68db      	ldr	r3, [r3, #12]
 800cede:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800cee2:	f023 030c 	bic.w	r3, r3, #12
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	6812      	ldr	r2, [r2, #0]
 800ceea:	68b9      	ldr	r1, [r7, #8]
 800ceec:	430b      	orrs	r3, r1
 800ceee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	695b      	ldr	r3, [r3, #20]
 800cef6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	699a      	ldr	r2, [r3, #24]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	430a      	orrs	r2, r1
 800cf04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a2c      	ldr	r2, [pc, #176]	; (800cfbc <UART_SetConfig+0x114>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d103      	bne.n	800cf18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cf10:	f7ff fb16 	bl	800c540 <HAL_RCC_GetPCLK2Freq>
 800cf14:	60f8      	str	r0, [r7, #12]
 800cf16:	e002      	b.n	800cf1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cf18:	f7ff fafe 	bl	800c518 <HAL_RCC_GetPCLK1Freq>
 800cf1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cf1e:	68fa      	ldr	r2, [r7, #12]
 800cf20:	4613      	mov	r3, r2
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	4413      	add	r3, r2
 800cf26:	009a      	lsls	r2, r3, #2
 800cf28:	441a      	add	r2, r3
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	009b      	lsls	r3, r3, #2
 800cf30:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf34:	4a22      	ldr	r2, [pc, #136]	; (800cfc0 <UART_SetConfig+0x118>)
 800cf36:	fba2 2303 	umull	r2, r3, r2, r3
 800cf3a:	095b      	lsrs	r3, r3, #5
 800cf3c:	0119      	lsls	r1, r3, #4
 800cf3e:	68fa      	ldr	r2, [r7, #12]
 800cf40:	4613      	mov	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4413      	add	r3, r2
 800cf46:	009a      	lsls	r2, r3, #2
 800cf48:	441a      	add	r2, r3
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	fbb2 f2f3 	udiv	r2, r2, r3
 800cf54:	4b1a      	ldr	r3, [pc, #104]	; (800cfc0 <UART_SetConfig+0x118>)
 800cf56:	fba3 0302 	umull	r0, r3, r3, r2
 800cf5a:	095b      	lsrs	r3, r3, #5
 800cf5c:	2064      	movs	r0, #100	; 0x64
 800cf5e:	fb00 f303 	mul.w	r3, r0, r3
 800cf62:	1ad3      	subs	r3, r2, r3
 800cf64:	011b      	lsls	r3, r3, #4
 800cf66:	3332      	adds	r3, #50	; 0x32
 800cf68:	4a15      	ldr	r2, [pc, #84]	; (800cfc0 <UART_SetConfig+0x118>)
 800cf6a:	fba2 2303 	umull	r2, r3, r2, r3
 800cf6e:	095b      	lsrs	r3, r3, #5
 800cf70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf74:	4419      	add	r1, r3
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	4613      	mov	r3, r2
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	4413      	add	r3, r2
 800cf7e:	009a      	lsls	r2, r3, #2
 800cf80:	441a      	add	r2, r3
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	fbb2 f2f3 	udiv	r2, r2, r3
 800cf8c:	4b0c      	ldr	r3, [pc, #48]	; (800cfc0 <UART_SetConfig+0x118>)
 800cf8e:	fba3 0302 	umull	r0, r3, r3, r2
 800cf92:	095b      	lsrs	r3, r3, #5
 800cf94:	2064      	movs	r0, #100	; 0x64
 800cf96:	fb00 f303 	mul.w	r3, r0, r3
 800cf9a:	1ad3      	subs	r3, r2, r3
 800cf9c:	011b      	lsls	r3, r3, #4
 800cf9e:	3332      	adds	r3, #50	; 0x32
 800cfa0:	4a07      	ldr	r2, [pc, #28]	; (800cfc0 <UART_SetConfig+0x118>)
 800cfa2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfa6:	095b      	lsrs	r3, r3, #5
 800cfa8:	f003 020f 	and.w	r2, r3, #15
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	440a      	add	r2, r1
 800cfb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cfb4:	bf00      	nop
 800cfb6:	3710      	adds	r7, #16
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	40013800 	.word	0x40013800
 800cfc0:	51eb851f 	.word	0x51eb851f

0800cfc4 <__itoa>:
 800cfc4:	1e93      	subs	r3, r2, #2
 800cfc6:	2b22      	cmp	r3, #34	; 0x22
 800cfc8:	b510      	push	{r4, lr}
 800cfca:	460c      	mov	r4, r1
 800cfcc:	d904      	bls.n	800cfd8 <__itoa+0x14>
 800cfce:	2300      	movs	r3, #0
 800cfd0:	461c      	mov	r4, r3
 800cfd2:	700b      	strb	r3, [r1, #0]
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	bd10      	pop	{r4, pc}
 800cfd8:	2a0a      	cmp	r2, #10
 800cfda:	d109      	bne.n	800cff0 <__itoa+0x2c>
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	da07      	bge.n	800cff0 <__itoa+0x2c>
 800cfe0:	232d      	movs	r3, #45	; 0x2d
 800cfe2:	700b      	strb	r3, [r1, #0]
 800cfe4:	2101      	movs	r1, #1
 800cfe6:	4240      	negs	r0, r0
 800cfe8:	4421      	add	r1, r4
 800cfea:	f000 f805 	bl	800cff8 <__utoa>
 800cfee:	e7f1      	b.n	800cfd4 <__itoa+0x10>
 800cff0:	2100      	movs	r1, #0
 800cff2:	e7f9      	b.n	800cfe8 <__itoa+0x24>

0800cff4 <itoa>:
 800cff4:	f7ff bfe6 	b.w	800cfc4 <__itoa>

0800cff8 <__utoa>:
 800cff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cffa:	b08b      	sub	sp, #44	; 0x2c
 800cffc:	4605      	mov	r5, r0
 800cffe:	460b      	mov	r3, r1
 800d000:	466e      	mov	r6, sp
 800d002:	4c1d      	ldr	r4, [pc, #116]	; (800d078 <__utoa+0x80>)
 800d004:	f104 0c20 	add.w	ip, r4, #32
 800d008:	4637      	mov	r7, r6
 800d00a:	6820      	ldr	r0, [r4, #0]
 800d00c:	6861      	ldr	r1, [r4, #4]
 800d00e:	3408      	adds	r4, #8
 800d010:	c703      	stmia	r7!, {r0, r1}
 800d012:	4564      	cmp	r4, ip
 800d014:	463e      	mov	r6, r7
 800d016:	d1f7      	bne.n	800d008 <__utoa+0x10>
 800d018:	7921      	ldrb	r1, [r4, #4]
 800d01a:	6820      	ldr	r0, [r4, #0]
 800d01c:	7139      	strb	r1, [r7, #4]
 800d01e:	1e91      	subs	r1, r2, #2
 800d020:	2922      	cmp	r1, #34	; 0x22
 800d022:	6038      	str	r0, [r7, #0]
 800d024:	f04f 0100 	mov.w	r1, #0
 800d028:	d904      	bls.n	800d034 <__utoa+0x3c>
 800d02a:	7019      	strb	r1, [r3, #0]
 800d02c:	460b      	mov	r3, r1
 800d02e:	4618      	mov	r0, r3
 800d030:	b00b      	add	sp, #44	; 0x2c
 800d032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d034:	1e58      	subs	r0, r3, #1
 800d036:	4684      	mov	ip, r0
 800d038:	fbb5 f7f2 	udiv	r7, r5, r2
 800d03c:	fb02 5617 	mls	r6, r2, r7, r5
 800d040:	3628      	adds	r6, #40	; 0x28
 800d042:	446e      	add	r6, sp
 800d044:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d048:	460c      	mov	r4, r1
 800d04a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d04e:	462e      	mov	r6, r5
 800d050:	42b2      	cmp	r2, r6
 800d052:	463d      	mov	r5, r7
 800d054:	f101 0101 	add.w	r1, r1, #1
 800d058:	d9ee      	bls.n	800d038 <__utoa+0x40>
 800d05a:	2200      	movs	r2, #0
 800d05c:	545a      	strb	r2, [r3, r1]
 800d05e:	1919      	adds	r1, r3, r4
 800d060:	1aa5      	subs	r5, r4, r2
 800d062:	42aa      	cmp	r2, r5
 800d064:	dae3      	bge.n	800d02e <__utoa+0x36>
 800d066:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d06a:	780e      	ldrb	r6, [r1, #0]
 800d06c:	3201      	adds	r2, #1
 800d06e:	7006      	strb	r6, [r0, #0]
 800d070:	f801 5901 	strb.w	r5, [r1], #-1
 800d074:	e7f4      	b.n	800d060 <__utoa+0x68>
 800d076:	bf00      	nop
 800d078:	0800d176 	.word	0x0800d176

0800d07c <memset>:
 800d07c:	4603      	mov	r3, r0
 800d07e:	4402      	add	r2, r0
 800d080:	4293      	cmp	r3, r2
 800d082:	d100      	bne.n	800d086 <memset+0xa>
 800d084:	4770      	bx	lr
 800d086:	f803 1b01 	strb.w	r1, [r3], #1
 800d08a:	e7f9      	b.n	800d080 <memset+0x4>

0800d08c <__libc_init_array>:
 800d08c:	b570      	push	{r4, r5, r6, lr}
 800d08e:	2600      	movs	r6, #0
 800d090:	4d0c      	ldr	r5, [pc, #48]	; (800d0c4 <__libc_init_array+0x38>)
 800d092:	4c0d      	ldr	r4, [pc, #52]	; (800d0c8 <__libc_init_array+0x3c>)
 800d094:	1b64      	subs	r4, r4, r5
 800d096:	10a4      	asrs	r4, r4, #2
 800d098:	42a6      	cmp	r6, r4
 800d09a:	d109      	bne.n	800d0b0 <__libc_init_array+0x24>
 800d09c:	f000 f81a 	bl	800d0d4 <_init>
 800d0a0:	2600      	movs	r6, #0
 800d0a2:	4d0a      	ldr	r5, [pc, #40]	; (800d0cc <__libc_init_array+0x40>)
 800d0a4:	4c0a      	ldr	r4, [pc, #40]	; (800d0d0 <__libc_init_array+0x44>)
 800d0a6:	1b64      	subs	r4, r4, r5
 800d0a8:	10a4      	asrs	r4, r4, #2
 800d0aa:	42a6      	cmp	r6, r4
 800d0ac:	d105      	bne.n	800d0ba <__libc_init_array+0x2e>
 800d0ae:	bd70      	pop	{r4, r5, r6, pc}
 800d0b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0b4:	4798      	blx	r3
 800d0b6:	3601      	adds	r6, #1
 800d0b8:	e7ee      	b.n	800d098 <__libc_init_array+0xc>
 800d0ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0be:	4798      	blx	r3
 800d0c0:	3601      	adds	r6, #1
 800d0c2:	e7f2      	b.n	800d0aa <__libc_init_array+0x1e>
 800d0c4:	0800d19c 	.word	0x0800d19c
 800d0c8:	0800d19c 	.word	0x0800d19c
 800d0cc:	0800d19c 	.word	0x0800d19c
 800d0d0:	0800d1a0 	.word	0x0800d1a0

0800d0d4 <_init>:
 800d0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0d6:	bf00      	nop
 800d0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0da:	bc08      	pop	{r3}
 800d0dc:	469e      	mov	lr, r3
 800d0de:	4770      	bx	lr

0800d0e0 <_fini>:
 800d0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0e2:	bf00      	nop
 800d0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0e6:	bc08      	pop	{r3}
 800d0e8:	469e      	mov	lr, r3
 800d0ea:	4770      	bx	lr
