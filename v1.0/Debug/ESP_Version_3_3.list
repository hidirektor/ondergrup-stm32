
ESP_Version_3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcd4  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800beb8  0800beb8  0000ceb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf5c  0800bf5c  0000dce4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf5c  0800bf5c  0000cf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf64  0800bf64  0000dce4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf64  0800bf64  0000cf64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf68  0800bf68  0000cf68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ce4  20000000  0800bf6c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000810  20000ce4  0800cc50  0000dce4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014f4  0800cc50  0000e4f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000dce4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e0b  00000000  00000000  0000dd0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ccd  00000000  00000000  00023b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  000267e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d69  00000000  00000000  00027940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b97e  00000000  00000000  000286a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019719  00000000  00000000  00044027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f86f  00000000  00000000  0005d740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcfaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047ac  00000000  00000000  000fcff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001017a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000ce4 	.word	0x20000ce4
 8000200:	00000000 	.word	0x00000000
 8000204:	0800bea0 	.word	0x0800bea0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000ce8 	.word	0x20000ce8
 8000220:	0800bea0 	.word	0x0800bea0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	@ 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9a      	ldr	r3, [pc, #616]	@ (80004b0 <eepromKontrol+0x27c>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	@ 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	@ 0xa0
 800024e:	4899      	ldr	r0, [pc, #612]	@ (80004b4 <eepromKontrol+0x280>)
 8000250:	f009 fdc8 	bl	8009de4 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000258:	f008 fd82 	bl	8008d60 <HAL_Delay>

	//Sürekli sıfırlama işlemi yapıyor
	firstSetup();
 800025c:	f000 fa14 	bl	8000688 <firstSetup>

	kaydedilenDeger = eepromData[3];
 8000260:	4b93      	ldr	r3, [pc, #588]	@ (80004b0 <eepromKontrol+0x27c>)
 8000262:	78da      	ldrb	r2, [r3, #3]
 8000264:	4b94      	ldr	r3, [pc, #592]	@ (80004b8 <eepromKontrol+0x284>)
 8000266:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000268:	4b91      	ldr	r3, [pc, #580]	@ (80004b0 <eepromKontrol+0x27c>)
 800026a:	785a      	ldrb	r2, [r3, #1]
 800026c:	4b93      	ldr	r3, [pc, #588]	@ (80004bc <eepromKontrol+0x288>)
 800026e:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000270:	4b8f      	ldr	r3, [pc, #572]	@ (80004b0 <eepromKontrol+0x27c>)
 8000272:	789a      	ldrb	r2, [r3, #2]
 8000274:	4b92      	ldr	r3, [pc, #584]	@ (80004c0 <eepromKontrol+0x28c>)
 8000276:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000278:	4b8d      	ldr	r3, [pc, #564]	@ (80004b0 <eepromKontrol+0x27c>)
 800027a:	791a      	ldrb	r2, [r3, #4]
 800027c:	4b91      	ldr	r3, [pc, #580]	@ (80004c4 <eepromKontrol+0x290>)
 800027e:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000280:	4b8b      	ldr	r3, [pc, #556]	@ (80004b0 <eepromKontrol+0x27c>)
 8000282:	795a      	ldrb	r2, [r3, #5]
 8000284:	4b90      	ldr	r3, [pc, #576]	@ (80004c8 <eepromKontrol+0x294>)
 8000286:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000288:	4b89      	ldr	r3, [pc, #548]	@ (80004b0 <eepromKontrol+0x27c>)
 800028a:	799a      	ldrb	r2, [r3, #6]
 800028c:	4b8f      	ldr	r3, [pc, #572]	@ (80004cc <eepromKontrol+0x298>)
 800028e:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8000290:	4b87      	ldr	r3, [pc, #540]	@ (80004b0 <eepromKontrol+0x27c>)
 8000292:	79da      	ldrb	r2, [r3, #7]
 8000294:	4b8e      	ldr	r3, [pc, #568]	@ (80004d0 <eepromKontrol+0x29c>)
 8000296:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000298:	4b85      	ldr	r3, [pc, #532]	@ (80004b0 <eepromKontrol+0x27c>)
 800029a:	7a1a      	ldrb	r2, [r3, #8]
 800029c:	4b8d      	ldr	r3, [pc, #564]	@ (80004d4 <eepromKontrol+0x2a0>)
 800029e:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80002a0:	4b83      	ldr	r3, [pc, #524]	@ (80004b0 <eepromKontrol+0x27c>)
 80002a2:	7a5a      	ldrb	r2, [r3, #9]
 80002a4:	4b8c      	ldr	r3, [pc, #560]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002a6:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a8:	4b81      	ldr	r3, [pc, #516]	@ (80004b0 <eepromKontrol+0x27c>)
 80002aa:	7a9a      	ldrb	r2, [r3, #10]
 80002ac:	4b8b      	ldr	r3, [pc, #556]	@ (80004dc <eepromKontrol+0x2a8>)
 80002ae:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002b0:	4b7f      	ldr	r3, [pc, #508]	@ (80004b0 <eepromKontrol+0x27c>)
 80002b2:	7ada      	ldrb	r2, [r3, #11]
 80002b4:	4b8a      	ldr	r3, [pc, #552]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002b6:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b8:	4b7d      	ldr	r3, [pc, #500]	@ (80004b0 <eepromKontrol+0x27c>)
 80002ba:	7b1a      	ldrb	r2, [r3, #12]
 80002bc:	4b89      	ldr	r3, [pc, #548]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002be:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002c0:	4b7b      	ldr	r3, [pc, #492]	@ (80004b0 <eepromKontrol+0x27c>)
 80002c2:	7b5a      	ldrb	r2, [r3, #13]
 80002c4:	4b88      	ldr	r3, [pc, #544]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002c6:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c8:	4b79      	ldr	r3, [pc, #484]	@ (80004b0 <eepromKontrol+0x27c>)
 80002ca:	7b9a      	ldrb	r2, [r3, #14]
 80002cc:	4b87      	ldr	r3, [pc, #540]	@ (80004ec <eepromKontrol+0x2b8>)
 80002ce:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002d0:	4b77      	ldr	r3, [pc, #476]	@ (80004b0 <eepromKontrol+0x27c>)
 80002d2:	7bda      	ldrb	r2, [r3, #15]
 80002d4:	4b86      	ldr	r3, [pc, #536]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002d6:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d8:	4b75      	ldr	r3, [pc, #468]	@ (80004b0 <eepromKontrol+0x27c>)
 80002da:	7c1a      	ldrb	r2, [r3, #16]
 80002dc:	4b85      	ldr	r3, [pc, #532]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002de:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002e0:	4b73      	ldr	r3, [pc, #460]	@ (80004b0 <eepromKontrol+0x27c>)
 80002e2:	7c5a      	ldrb	r2, [r3, #17]
 80002e4:	4b84      	ldr	r3, [pc, #528]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002e6:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e8:	4b71      	ldr	r3, [pc, #452]	@ (80004b0 <eepromKontrol+0x27c>)
 80002ea:	7c9a      	ldrb	r2, [r3, #18]
 80002ec:	4b83      	ldr	r3, [pc, #524]	@ (80004fc <eepromKontrol+0x2c8>)
 80002ee:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002f0:	4b6f      	ldr	r3, [pc, #444]	@ (80004b0 <eepromKontrol+0x27c>)
 80002f2:	7cda      	ldrb	r2, [r3, #19]
 80002f4:	4b82      	ldr	r3, [pc, #520]	@ (8000500 <eepromKontrol+0x2cc>)
 80002f6:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f8:	4b6d      	ldr	r3, [pc, #436]	@ (80004b0 <eepromKontrol+0x27c>)
 80002fa:	7d1a      	ldrb	r2, [r3, #20]
 80002fc:	4b81      	ldr	r3, [pc, #516]	@ (8000504 <eepromKontrol+0x2d0>)
 80002fe:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8000300:	4b6b      	ldr	r3, [pc, #428]	@ (80004b0 <eepromKontrol+0x27c>)
 8000302:	7d5a      	ldrb	r2, [r3, #21]
 8000304:	4b80      	ldr	r3, [pc, #512]	@ (8000508 <eepromKontrol+0x2d4>)
 8000306:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000308:	4b69      	ldr	r3, [pc, #420]	@ (80004b0 <eepromKontrol+0x27c>)
 800030a:	7d9a      	ldrb	r2, [r3, #22]
 800030c:	4b7f      	ldr	r3, [pc, #508]	@ (800050c <eepromKontrol+0x2d8>)
 800030e:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000310:	4b67      	ldr	r3, [pc, #412]	@ (80004b0 <eepromKontrol+0x27c>)
 8000312:	7dda      	ldrb	r2, [r3, #23]
 8000314:	4b7e      	ldr	r3, [pc, #504]	@ (8000510 <eepromKontrol+0x2dc>)
 8000316:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000318:	4b65      	ldr	r3, [pc, #404]	@ (80004b0 <eepromKontrol+0x27c>)
 800031a:	7e1a      	ldrb	r2, [r3, #24]
 800031c:	4b7d      	ldr	r3, [pc, #500]	@ (8000514 <eepromKontrol+0x2e0>)
 800031e:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000320:	4b63      	ldr	r3, [pc, #396]	@ (80004b0 <eepromKontrol+0x27c>)
 8000322:	7e5a      	ldrb	r2, [r3, #25]
 8000324:	4b7c      	ldr	r3, [pc, #496]	@ (8000518 <eepromKontrol+0x2e4>)
 8000326:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000328:	4b61      	ldr	r3, [pc, #388]	@ (80004b0 <eepromKontrol+0x27c>)
 800032a:	7e9a      	ldrb	r2, [r3, #26]
 800032c:	4b7b      	ldr	r3, [pc, #492]	@ (800051c <eepromKontrol+0x2e8>)
 800032e:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000330:	4b5f      	ldr	r3, [pc, #380]	@ (80004b0 <eepromKontrol+0x27c>)
 8000332:	7eda      	ldrb	r2, [r3, #27]
 8000334:	4b7a      	ldr	r3, [pc, #488]	@ (8000520 <eepromKontrol+0x2ec>)
 8000336:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 8000338:	4b5d      	ldr	r3, [pc, #372]	@ (80004b0 <eepromKontrol+0x27c>)
 800033a:	7f1a      	ldrb	r2, [r3, #28]
 800033c:	4b79      	ldr	r3, [pc, #484]	@ (8000524 <eepromKontrol+0x2f0>)
 800033e:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000340:	4b5b      	ldr	r3, [pc, #364]	@ (80004b0 <eepromKontrol+0x27c>)
 8000342:	7f5a      	ldrb	r2, [r3, #29]
 8000344:	4b78      	ldr	r3, [pc, #480]	@ (8000528 <eepromKontrol+0x2f4>)
 8000346:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 8000348:	4b59      	ldr	r3, [pc, #356]	@ (80004b0 <eepromKontrol+0x27c>)
 800034a:	7f9a      	ldrb	r2, [r3, #30]
 800034c:	4b77      	ldr	r3, [pc, #476]	@ (800052c <eepromKontrol+0x2f8>)
 800034e:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000350:	4b57      	ldr	r3, [pc, #348]	@ (80004b0 <eepromKontrol+0x27c>)
 8000352:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000356:	4b76      	ldr	r3, [pc, #472]	@ (8000530 <eepromKontrol+0x2fc>)
 8000358:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 800035a:	4b55      	ldr	r3, [pc, #340]	@ (80004b0 <eepromKontrol+0x27c>)
 800035c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000360:	4b74      	ldr	r3, [pc, #464]	@ (8000534 <eepromKontrol+0x300>)
 8000362:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8000364:	4b52      	ldr	r3, [pc, #328]	@ (80004b0 <eepromKontrol+0x27c>)
 8000366:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800036a:	4b73      	ldr	r3, [pc, #460]	@ (8000538 <eepromKontrol+0x304>)
 800036c:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 800036e:	4b50      	ldr	r3, [pc, #320]	@ (80004b0 <eepromKontrol+0x27c>)
 8000370:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000374:	4b71      	ldr	r3, [pc, #452]	@ (800053c <eepromKontrol+0x308>)
 8000376:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000378:	4b4d      	ldr	r3, [pc, #308]	@ (80004b0 <eepromKontrol+0x27c>)
 800037a:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800037e:	4b70      	ldr	r3, [pc, #448]	@ (8000540 <eepromKontrol+0x30c>)
 8000380:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000382:	4b4b      	ldr	r3, [pc, #300]	@ (80004b0 <eepromKontrol+0x27c>)
 8000384:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8000388:	4b6e      	ldr	r3, [pc, #440]	@ (8000544 <eepromKontrol+0x310>)
 800038a:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 800038c:	4b48      	ldr	r3, [pc, #288]	@ (80004b0 <eepromKontrol+0x27c>)
 800038e:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8000392:	4b6d      	ldr	r3, [pc, #436]	@ (8000548 <eepromKontrol+0x314>)
 8000394:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8000396:	4b46      	ldr	r3, [pc, #280]	@ (80004b0 <eepromKontrol+0x27c>)
 8000398:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800039c:	4b6b      	ldr	r3, [pc, #428]	@ (800054c <eepromKontrol+0x318>)
 800039e:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003a0:	4b43      	ldr	r3, [pc, #268]	@ (80004b0 <eepromKontrol+0x27c>)
 80003a2:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000550 <eepromKontrol+0x31c>)
 80003a8:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003aa:	4b41      	ldr	r3, [pc, #260]	@ (80004b0 <eepromKontrol+0x27c>)
 80003ac:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003b0:	4b68      	ldr	r3, [pc, #416]	@ (8000554 <eepromKontrol+0x320>)
 80003b2:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003b4:	4b3e      	ldr	r3, [pc, #248]	@ (80004b0 <eepromKontrol+0x27c>)
 80003b6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003ba:	4b67      	ldr	r3, [pc, #412]	@ (8000558 <eepromKontrol+0x324>)
 80003bc:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003be:	4b3c      	ldr	r3, [pc, #240]	@ (80004b0 <eepromKontrol+0x27c>)
 80003c0:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003c4:	4b65      	ldr	r3, [pc, #404]	@ (800055c <eepromKontrol+0x328>)
 80003c6:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003c8:	4b39      	ldr	r3, [pc, #228]	@ (80004b0 <eepromKontrol+0x27c>)
 80003ca:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003ce:	4b64      	ldr	r3, [pc, #400]	@ (8000560 <eepromKontrol+0x32c>)
 80003d0:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003d2:	4b37      	ldr	r3, [pc, #220]	@ (80004b0 <eepromKontrol+0x27c>)
 80003d4:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003d8:	4b62      	ldr	r3, [pc, #392]	@ (8000564 <eepromKontrol+0x330>)
 80003da:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003dc:	4b37      	ldr	r3, [pc, #220]	@ (80004bc <eepromKontrol+0x288>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	d902      	bls.n	80003ea <eepromKontrol+0x1b6>
	    calismaSekli=0;
 80003e4:	4b35      	ldr	r3, [pc, #212]	@ (80004bc <eepromKontrol+0x288>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003ea:	4b35      	ldr	r3, [pc, #212]	@ (80004c0 <eepromKontrol+0x28c>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d902      	bls.n	80003f8 <eepromKontrol+0x1c4>
	    emniyetCercevesi=1;
 80003f2:	4b33      	ldr	r3, [pc, #204]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80003f8:	4b32      	ldr	r3, [pc, #200]	@ (80004c4 <eepromKontrol+0x290>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d902      	bls.n	8000406 <eepromKontrol+0x1d2>
	    yavaslamaLimit=0;
 8000400:	4b30      	ldr	r3, [pc, #192]	@ (80004c4 <eepromKontrol+0x290>)
 8000402:	2200      	movs	r2, #0
 8000404:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8000406:	4b30      	ldr	r3, [pc, #192]	@ (80004c8 <eepromKontrol+0x294>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d902      	bls.n	8000414 <eepromKontrol+0x1e0>
	    altLimit=1;
 800040e:	4b2e      	ldr	r3, [pc, #184]	@ (80004c8 <eepromKontrol+0x294>)
 8000410:	2201      	movs	r2, #1
 8000412:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8000414:	4b2d      	ldr	r3, [pc, #180]	@ (80004cc <eepromKontrol+0x298>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d902      	bls.n	8000422 <eepromKontrol+0x1ee>
	    basincSalteri=1;
 800041c:	4b2b      	ldr	r3, [pc, #172]	@ (80004cc <eepromKontrol+0x298>)
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000422:	4b2b      	ldr	r3, [pc, #172]	@ (80004d0 <eepromKontrol+0x29c>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b03      	cmp	r3, #3
 8000428:	d902      	bls.n	8000430 <eepromKontrol+0x1fc>
	    kapiSecimleri=3;
 800042a:	4b29      	ldr	r3, [pc, #164]	@ (80004d0 <eepromKontrol+0x29c>)
 800042c:	2203      	movs	r2, #3
 800042e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000430:	4b42      	ldr	r3, [pc, #264]	@ (800053c <eepromKontrol+0x308>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b01      	cmp	r3, #1
 8000436:	d902      	bls.n	800043e <eepromKontrol+0x20a>
	    kapiAcTipi=0;
 8000438:	4b40      	ldr	r3, [pc, #256]	@ (800053c <eepromKontrol+0x308>)
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 800043e:	4b25      	ldr	r3, [pc, #148]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b02      	cmp	r3, #2
 8000444:	d902      	bls.n	800044c <eepromKontrol+0x218>
	    kapi1Tip=1;
 8000446:	4b23      	ldr	r3, [pc, #140]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000448:	2201      	movs	r2, #1
 800044a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 800044c:	4b22      	ldr	r3, [pc, #136]	@ (80004d8 <eepromKontrol+0x2a4>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b05      	cmp	r3, #5
 8000452:	d902      	bls.n	800045a <eepromKontrol+0x226>
	    kapi1AcSure=5;
 8000454:	4b20      	ldr	r3, [pc, #128]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000456:	2205      	movs	r2, #5
 8000458:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800045a:	4b20      	ldr	r3, [pc, #128]	@ (80004dc <eepromKontrol+0x2a8>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b02      	cmp	r3, #2
 8000460:	d902      	bls.n	8000468 <eepromKontrol+0x234>
	    kapi2Tip=1;
 8000462:	4b1e      	ldr	r3, [pc, #120]	@ (80004dc <eepromKontrol+0x2a8>)
 8000464:	2201      	movs	r2, #1
 8000466:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8000468:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <eepromKontrol+0x2ac>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b05      	cmp	r3, #5
 800046e:	d902      	bls.n	8000476 <eepromKontrol+0x242>
	    kapi2AcSure=5;
 8000470:	4b1b      	ldr	r3, [pc, #108]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000472:	2205      	movs	r2, #5
 8000474:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8000476:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b02      	cmp	r3, #2
 800047c:	d902      	bls.n	8000484 <eepromKontrol+0x250>
	    kapitablaTip=1;
 800047e:	4b19      	ldr	r3, [pc, #100]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000480:	2201      	movs	r2, #1
 8000482:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8000484:	4b2b      	ldr	r3, [pc, #172]	@ (8000534 <eepromKontrol+0x300>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b02      	cmp	r3, #2
 800048a:	d902      	bls.n	8000492 <eepromKontrol+0x25e>
	    kapiTablaAcKonum=2;
 800048c:	4b29      	ldr	r3, [pc, #164]	@ (8000534 <eepromKontrol+0x300>)
 800048e:	2202      	movs	r2, #2
 8000490:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8000492:	4b15      	ldr	r3, [pc, #84]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b05      	cmp	r3, #5
 8000498:	d902      	bls.n	80004a0 <eepromKontrol+0x26c>
	    kapiTablaAcSure=5;
 800049a:	4b13      	ldr	r3, [pc, #76]	@ (80004e8 <eepromKontrol+0x2b4>)
 800049c:	2205      	movs	r2, #5
 800049e:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80004a0:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <eepromKontrol+0x2b8>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d95f      	bls.n	8000568 <eepromKontrol+0x334>
	    yukariYavasLimit=0;
 80004a8:	4b10      	ldr	r3, [pc, #64]	@ (80004ec <eepromKontrol+0x2b8>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	701a      	strb	r2, [r3, #0]
 80004ae:	e05b      	b.n	8000568 <eepromKontrol+0x334>
 80004b0:	20000d00 	.word	0x20000d00
 80004b4:	2000140c 	.word	0x2000140c
 80004b8:	20000d75 	.word	0x20000d75
 80004bc:	20000da1 	.word	0x20000da1
 80004c0:	20000da4 	.word	0x20000da4
 80004c4:	20000da5 	.word	0x20000da5
 80004c8:	20000da6 	.word	0x20000da6
 80004cc:	20000da7 	.word	0x20000da7
 80004d0:	20000da8 	.word	0x20000da8
 80004d4:	20000da9 	.word	0x20000da9
 80004d8:	20000db9 	.word	0x20000db9
 80004dc:	20000daa 	.word	0x20000daa
 80004e0:	20000dba 	.word	0x20000dba
 80004e4:	20000dab 	.word	0x20000dab
 80004e8:	20000dbb 	.word	0x20000dbb
 80004ec:	20000dae 	.word	0x20000dae
 80004f0:	20000daf 	.word	0x20000daf
 80004f4:	20000db0 	.word	0x20000db0
 80004f8:	20000db1 	.word	0x20000db1
 80004fc:	20000db2 	.word	0x20000db2
 8000500:	20000db3 	.word	0x20000db3
 8000504:	20000db4 	.word	0x20000db4
 8000508:	20000db5 	.word	0x20000db5
 800050c:	20000db6 	.word	0x20000db6
 8000510:	20000db7 	.word	0x20000db7
 8000514:	20000db8 	.word	0x20000db8
 8000518:	20000dbc 	.word	0x20000dbc
 800051c:	20000dbe 	.word	0x20000dbe
 8000520:	20000d98 	.word	0x20000d98
 8000524:	20000d99 	.word	0x20000d99
 8000528:	20000d9a 	.word	0x20000d9a
 800052c:	20000d9b 	.word	0x20000d9b
 8000530:	20000dc1 	.word	0x20000dc1
 8000534:	20000dad 	.word	0x20000dad
 8000538:	20000dc0 	.word	0x20000dc0
 800053c:	20000dac 	.word	0x20000dac
 8000540:	20000dc2 	.word	0x20000dc2
 8000544:	20000dc3 	.word	0x20000dc3
 8000548:	20000dc4 	.word	0x20000dc4
 800054c:	20000dc5 	.word	0x20000dc5
 8000550:	20000dc6 	.word	0x20000dc6
 8000554:	20000dc7 	.word	0x20000dc7
 8000558:	20000dc8 	.word	0x20000dc8
 800055c:	20000dc9 	.word	0x20000dc9
 8000560:	20000dca 	.word	0x20000dca
 8000564:	20000dcb 	.word	0x20000dcb
	}

	if(devirmeYuruyusSecim>2) {
 8000568:	4b38      	ldr	r3, [pc, #224]	@ (800064c <eepromKontrol+0x418>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b02      	cmp	r3, #2
 800056e:	d902      	bls.n	8000576 <eepromKontrol+0x342>
	    devirmeYuruyusSecim=0;
 8000570:	4b36      	ldr	r3, [pc, #216]	@ (800064c <eepromKontrol+0x418>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000576:	4b36      	ldr	r3, [pc, #216]	@ (8000650 <eepromKontrol+0x41c>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d902      	bls.n	8000584 <eepromKontrol+0x350>
	    devirmeYukariIleriLimit=1;
 800057e:	4b34      	ldr	r3, [pc, #208]	@ (8000650 <eepromKontrol+0x41c>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8000584:	4b33      	ldr	r3, [pc, #204]	@ (8000654 <eepromKontrol+0x420>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d902      	bls.n	8000592 <eepromKontrol+0x35e>
	    devirmeAsagiGeriLimit=1;
 800058c:	4b31      	ldr	r3, [pc, #196]	@ (8000654 <eepromKontrol+0x420>)
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8000592:	4b31      	ldr	r3, [pc, #196]	@ (8000658 <eepromKontrol+0x424>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d902      	bls.n	80005a0 <eepromKontrol+0x36c>
	    devirmeSilindirTipi=0;
 800059a:	4b2f      	ldr	r3, [pc, #188]	@ (8000658 <eepromKontrol+0x424>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 80005a0:	4b2e      	ldr	r3, [pc, #184]	@ (800065c <eepromKontrol+0x428>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d902      	bls.n	80005ae <eepromKontrol+0x37a>
	    platformSilindirTipi=0;
 80005a8:	4b2c      	ldr	r3, [pc, #176]	@ (800065c <eepromKontrol+0x428>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000660 <eepromKontrol+0x42c>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b05      	cmp	r3, #5
 80005b4:	d902      	bls.n	80005bc <eepromKontrol+0x388>
	    yukariValfTmr=0;
 80005b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000660 <eepromKontrol+0x42c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005bc:	4b29      	ldr	r3, [pc, #164]	@ (8000664 <eepromKontrol+0x430>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b05      	cmp	r3, #5
 80005c2:	d902      	bls.n	80005ca <eepromKontrol+0x396>
	    asagiValfTmr=0;
 80005c4:	4b27      	ldr	r3, [pc, #156]	@ (8000664 <eepromKontrol+0x430>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005ca:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <eepromKontrol+0x434>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b05      	cmp	r3, #5
 80005d0:	d902      	bls.n	80005d8 <eepromKontrol+0x3a4>
	    devirmeYukariIleriTmr=0;
 80005d2:	4b25      	ldr	r3, [pc, #148]	@ (8000668 <eepromKontrol+0x434>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005d8:	4b24      	ldr	r3, [pc, #144]	@ (800066c <eepromKontrol+0x438>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b05      	cmp	r3, #5
 80005de:	d902      	bls.n	80005e6 <eepromKontrol+0x3b2>
	    devirmeAsagiGeriTmr=0;
 80005e0:	4b22      	ldr	r3, [pc, #136]	@ (800066c <eepromKontrol+0x438>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80005e6:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <eepromKontrol+0x43c>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2bb4      	cmp	r3, #180	@ 0xb4
 80005ec:	d902      	bls.n	80005f4 <eepromKontrol+0x3c0>
	    makineCalismaTmr=60;
 80005ee:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <eepromKontrol+0x43c>)
 80005f0:	223c      	movs	r2, #60	@ 0x3c
 80005f2:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <eepromKontrol+0x440>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d902      	bls.n	8000602 <eepromKontrol+0x3ce>
	    buzzer=0;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <eepromKontrol+0x440>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8000602:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <eepromKontrol+0x444>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d902      	bls.n	8000610 <eepromKontrol+0x3dc>
	    demoMode=0;
 800060a:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <eepromKontrol+0x444>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8000610:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <eepromKontrol+0x448>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d902      	bls.n	800061e <eepromKontrol+0x3ea>
	    calismaSayModu=0;
 8000618:	4b18      	ldr	r3, [pc, #96]	@ (800067c <eepromKontrol+0x448>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 800061e:	4b18      	ldr	r3, [pc, #96]	@ (8000680 <eepromKontrol+0x44c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d902      	bls.n	800062c <eepromKontrol+0x3f8>
	    dilSecim=0;
 8000626:	4b16      	ldr	r3, [pc, #88]	@ (8000680 <eepromKontrol+0x44c>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 800062c:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <eepromKontrol+0x450>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d902      	bls.n	800063a <eepromKontrol+0x406>
		iotMode=0;
 8000634:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <eepromKontrol+0x450>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
	}

	loadMenuTexts(dilSecim);
 800063a:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <eepromKontrol+0x44c>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	4618      	mov	r0, r3
 8000640:	f006 fafe 	bl	8006c40 <loadMenuTexts>
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000daf 	.word	0x20000daf
 8000650:	20000db0 	.word	0x20000db0
 8000654:	20000db1 	.word	0x20000db1
 8000658:	20000db2 	.word	0x20000db2
 800065c:	20000db3 	.word	0x20000db3
 8000660:	20000db4 	.word	0x20000db4
 8000664:	20000db5 	.word	0x20000db5
 8000668:	20000db6 	.word	0x20000db6
 800066c:	20000db7 	.word	0x20000db7
 8000670:	20000db8 	.word	0x20000db8
 8000674:	20000dbc 	.word	0x20000dbc
 8000678:	20000dbe 	.word	0x20000dbe
 800067c:	20000dc0 	.word	0x20000dc0
 8000680:	20000dc1 	.word	0x20000dc1
 8000684:	20000dbf 	.word	0x20000dbf

08000688 <firstSetup>:

void firstSetup() {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af04      	add	r7, sp, #16
    if (eepromData[0] == 0xFF) {
 800068e:	4b1d      	ldr	r3, [pc, #116]	@ (8000704 <firstSetup+0x7c>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2bff      	cmp	r3, #255	@ 0xff
 8000694:	d132      	bne.n	80006fc <firstSetup+0x74>
        memset(eepromData, 0, 48);
 8000696:	2230      	movs	r2, #48	@ 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	481a      	ldr	r0, [pc, #104]	@ (8000704 <firstSetup+0x7c>)
 800069c:	f00b fbd4 	bl	800be48 <memset>

        memset(&eepromData[38], 0, 10);
 80006a0:	220a      	movs	r2, #10
 80006a2:	2100      	movs	r1, #0
 80006a4:	4818      	ldr	r0, [pc, #96]	@ (8000708 <firstSetup+0x80>)
 80006a6:	f00b fbcf 	bl	800be48 <memset>

        eepromData[9] = 4;
 80006aa:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <firstSetup+0x7c>)
 80006ac:	2204      	movs	r2, #4
 80006ae:	725a      	strb	r2, [r3, #9]
        eepromData[11] = 4;
 80006b0:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <firstSetup+0x7c>)
 80006b2:	2204      	movs	r2, #4
 80006b4:	72da      	strb	r2, [r3, #11]
        eepromData[13] = 4;
 80006b6:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <firstSetup+0x7c>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	735a      	strb	r2, [r3, #13]

        eepromData[20] = 60;
 80006bc:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <firstSetup+0x7c>)
 80006be:	223c      	movs	r2, #60	@ 0x3c
 80006c0:	751a      	strb	r2, [r3, #20]
        eepromData[21] = 60;
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <firstSetup+0x7c>)
 80006c4:	223c      	movs	r2, #60	@ 0x3c
 80006c6:	755a      	strb	r2, [r3, #21]
        eepromData[22] = 60;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <firstSetup+0x7c>)
 80006ca:	223c      	movs	r2, #60	@ 0x3c
 80006cc:	759a      	strb	r2, [r3, #22]
        eepromData[23] = 60;
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <firstSetup+0x7c>)
 80006d0:	223c      	movs	r2, #60	@ 0x3c
 80006d2:	75da      	strb	r2, [r3, #23]
        eepromData[24] = 60;
 80006d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <firstSetup+0x7c>)
 80006d6:	223c      	movs	r2, #60	@ 0x3c
 80006d8:	761a      	strb	r2, [r3, #24]

        HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80006da:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80006de:	9302      	str	r3, [sp, #8]
 80006e0:	236e      	movs	r3, #110	@ 0x6e
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <firstSetup+0x7c>)
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	236e      	movs	r3, #110	@ 0x6e
 80006ea:	2200      	movs	r2, #0
 80006ec:	21a0      	movs	r1, #160	@ 0xa0
 80006ee:	4807      	ldr	r0, [pc, #28]	@ (800070c <firstSetup+0x84>)
 80006f0:	f009 fa7e 	bl	8009bf0 <HAL_I2C_Mem_Write>
        HAL_Delay(1000);
 80006f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006f8:	f008 fb32 	bl	8008d60 <HAL_Delay>
    }
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000d00 	.word	0x20000d00
 8000708:	20000d26 	.word	0x20000d26
 800070c:	2000140c 	.word	0x2000140c

08000710 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM() {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000716:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800071a:	9302      	str	r3, [sp, #8]
 800071c:	236e      	movs	r3, #110	@ 0x6e
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <saveEEPROM+0x30>)
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	236e      	movs	r3, #110	@ 0x6e
 8000726:	2200      	movs	r2, #0
 8000728:	21a0      	movs	r1, #160	@ 0xa0
 800072a:	4806      	ldr	r0, [pc, #24]	@ (8000744 <saveEEPROM+0x34>)
 800072c:	f009 fa60 	bl	8009bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(1500);
 8000730:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000734:	f008 fb14 	bl	8008d60 <HAL_Delay>
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000d00 	.word	0x20000d00
 8000744:	2000140c 	.word	0x2000140c

08000748 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b089      	sub	sp, #36	@ 0x24
 800074c:	af04      	add	r7, sp, #16
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000752:	4b25      	ldr	r3, [pc, #148]	@ (80007e8 <hata2EEPROM+0xa0>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	1e5a      	subs	r2, r3, #1
 8000758:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <hata2EEPROM+0xa4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4413      	add	r3, r2
 800075e:	4a24      	ldr	r2, [pc, #144]	@ (80007f0 <hata2EEPROM+0xa8>)
 8000760:	5cd3      	ldrb	r3, [r2, r3]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d002      	beq.n	800076c <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000766:	f000 f8d1 	bl	800090c <eepromDataFillWithEmpty>
		goto veriEkleme;
 800076a:	e000      	b.n	800076e <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 800076c:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	e012      	b.n	800079a <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000774:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <hata2EEPROM+0xa4>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	4413      	add	r3, r2
 800077c:	4a1c      	ldr	r2, [pc, #112]	@ (80007f0 <hata2EEPROM+0xa8>)
 800077e:	5cd3      	ldrb	r3, [r2, r3]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d107      	bne.n	8000794 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000784:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <hata2EEPROM+0xa4>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4413      	add	r3, r2
 800078c:	4918      	ldr	r1, [pc, #96]	@ (80007f0 <hata2EEPROM+0xa8>)
 800078e:	79fa      	ldrb	r2, [r7, #7]
 8000790:	54ca      	strb	r2, [r1, r3]
					break;
 8000792:	e007      	b.n	80007a4 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3301      	adds	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <hata2EEPROM+0xa0>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	dbe7      	blt.n	8000774 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80007a4:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <hata2EEPROM+0xa4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b299      	uxth	r1, r3
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <hata2EEPROM+0xa0>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	b298      	uxth	r0, r3
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <hata2EEPROM+0xa4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0e      	ldr	r2, [pc, #56]	@ (80007f0 <hata2EEPROM+0xa8>)
 80007b6:	4413      	add	r3, r2
 80007b8:	4a0b      	ldr	r2, [pc, #44]	@ (80007e8 <hata2EEPROM+0xa0>)
 80007ba:	6812      	ldr	r2, [r2, #0]
 80007bc:	b292      	uxth	r2, r2
 80007be:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 80007c2:	9402      	str	r4, [sp, #8]
 80007c4:	9201      	str	r2, [sp, #4]
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	4603      	mov	r3, r0
 80007ca:	460a      	mov	r2, r1
 80007cc:	21a0      	movs	r1, #160	@ 0xa0
 80007ce:	4809      	ldr	r0, [pc, #36]	@ (80007f4 <hata2EEPROM+0xac>)
 80007d0:	f009 fa0e 	bl	8009bf0 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80007d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007d8:	f008 fac2 	bl	8008d60 <HAL_Delay>
	eepromKontrol();
 80007dc:	f7ff fd2a 	bl	8000234 <eepromKontrol>
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd90      	pop	{r4, r7, pc}
 80007e8:	20000028 	.word	0x20000028
 80007ec:	2000002c 	.word	0x2000002c
 80007f0:	20000d00 	.word	0x20000d00
 80007f4:	2000140c 	.word	0x2000140c

080007f8 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d10f      	bne.n	8000828 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000808:	4a38      	ldr	r2, [pc, #224]	@ (80008ec <hataKoduLcdGoster+0xf4>)
 800080a:	2101      	movs	r1, #1
 800080c:	2001      	movs	r0, #1
 800080e:	f007 fdda 	bl	80083c6 <lcd_print>
		lcd_print(2, 1, "1");
 8000812:	4a37      	ldr	r2, [pc, #220]	@ (80008f0 <hataKoduLcdGoster+0xf8>)
 8000814:	2101      	movs	r1, #1
 8000816:	2002      	movs	r0, #2
 8000818:	f007 fdd5 	bl	80083c6 <lcd_print>
		lcd_print(2, 7, "          ");
 800081c:	4a35      	ldr	r2, [pc, #212]	@ (80008f4 <hataKoduLcdGoster+0xfc>)
 800081e:	2107      	movs	r1, #7
 8000820:	2002      	movs	r0, #2
 8000822:	f007 fdd0 	bl	80083c6 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000826:	e05d      	b.n	80008e4 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b02      	cmp	r3, #2
 800082c:	d10f      	bne.n	800084e <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 800082e:	4a2f      	ldr	r2, [pc, #188]	@ (80008ec <hataKoduLcdGoster+0xf4>)
 8000830:	2101      	movs	r1, #1
 8000832:	2001      	movs	r0, #1
 8000834:	f007 fdc7 	bl	80083c6 <lcd_print>
		lcd_print(2, 2, "2");
 8000838:	4a2f      	ldr	r2, [pc, #188]	@ (80008f8 <hataKoduLcdGoster+0x100>)
 800083a:	2102      	movs	r1, #2
 800083c:	2002      	movs	r0, #2
 800083e:	f007 fdc2 	bl	80083c6 <lcd_print>
		lcd_print(2, 7, "          ");
 8000842:	4a2c      	ldr	r2, [pc, #176]	@ (80008f4 <hataKoduLcdGoster+0xfc>)
 8000844:	2107      	movs	r1, #7
 8000846:	2002      	movs	r0, #2
 8000848:	f007 fdbd 	bl	80083c6 <lcd_print>
}
 800084c:	e04a      	b.n	80008e4 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b03      	cmp	r3, #3
 8000852:	d10f      	bne.n	8000874 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000854:	4a25      	ldr	r2, [pc, #148]	@ (80008ec <hataKoduLcdGoster+0xf4>)
 8000856:	2101      	movs	r1, #1
 8000858:	2001      	movs	r0, #1
 800085a:	f007 fdb4 	bl	80083c6 <lcd_print>
		lcd_print(2, 3, "3");
 800085e:	4a27      	ldr	r2, [pc, #156]	@ (80008fc <hataKoduLcdGoster+0x104>)
 8000860:	2103      	movs	r1, #3
 8000862:	2002      	movs	r0, #2
 8000864:	f007 fdaf 	bl	80083c6 <lcd_print>
		lcd_print(2, 7, "          ");
 8000868:	4a22      	ldr	r2, [pc, #136]	@ (80008f4 <hataKoduLcdGoster+0xfc>)
 800086a:	2107      	movs	r1, #7
 800086c:	2002      	movs	r0, #2
 800086e:	f007 fdaa 	bl	80083c6 <lcd_print>
}
 8000872:	e037      	b.n	80008e4 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	2b04      	cmp	r3, #4
 8000878:	d10f      	bne.n	800089a <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 800087a:	4a1c      	ldr	r2, [pc, #112]	@ (80008ec <hataKoduLcdGoster+0xf4>)
 800087c:	2101      	movs	r1, #1
 800087e:	2001      	movs	r0, #1
 8000880:	f007 fda1 	bl	80083c6 <lcd_print>
		lcd_print(2, 4, "4");
 8000884:	4a1e      	ldr	r2, [pc, #120]	@ (8000900 <hataKoduLcdGoster+0x108>)
 8000886:	2104      	movs	r1, #4
 8000888:	2002      	movs	r0, #2
 800088a:	f007 fd9c 	bl	80083c6 <lcd_print>
		lcd_print(2, 7, "          ");
 800088e:	4a19      	ldr	r2, [pc, #100]	@ (80008f4 <hataKoduLcdGoster+0xfc>)
 8000890:	2107      	movs	r1, #7
 8000892:	2002      	movs	r0, #2
 8000894:	f007 fd97 	bl	80083c6 <lcd_print>
}
 8000898:	e024      	b.n	80008e4 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b05      	cmp	r3, #5
 800089e:	d10f      	bne.n	80008c0 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 80008a0:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <hataKoduLcdGoster+0xf4>)
 80008a2:	2101      	movs	r1, #1
 80008a4:	2001      	movs	r0, #1
 80008a6:	f007 fd8e 	bl	80083c6 <lcd_print>
		lcd_print(2, 5, "5");
 80008aa:	4a16      	ldr	r2, [pc, #88]	@ (8000904 <hataKoduLcdGoster+0x10c>)
 80008ac:	2105      	movs	r1, #5
 80008ae:	2002      	movs	r0, #2
 80008b0:	f007 fd89 	bl	80083c6 <lcd_print>
		lcd_print(2, 7, "          ");
 80008b4:	4a0f      	ldr	r2, [pc, #60]	@ (80008f4 <hataKoduLcdGoster+0xfc>)
 80008b6:	2107      	movs	r1, #7
 80008b8:	2002      	movs	r0, #2
 80008ba:	f007 fd84 	bl	80083c6 <lcd_print>
}
 80008be:	e011      	b.n	80008e4 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b06      	cmp	r3, #6
 80008c4:	d10e      	bne.n	80008e4 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 80008c6:	4a09      	ldr	r2, [pc, #36]	@ (80008ec <hataKoduLcdGoster+0xf4>)
 80008c8:	2101      	movs	r1, #1
 80008ca:	2001      	movs	r0, #1
 80008cc:	f007 fd7b 	bl	80083c6 <lcd_print>
		lcd_print(2, 6, "6");
 80008d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000908 <hataKoduLcdGoster+0x110>)
 80008d2:	2106      	movs	r1, #6
 80008d4:	2002      	movs	r0, #2
 80008d6:	f007 fd76 	bl	80083c6 <lcd_print>
		lcd_print(2, 7, "          ");
 80008da:	4a06      	ldr	r2, [pc, #24]	@ (80008f4 <hataKoduLcdGoster+0xfc>)
 80008dc:	2107      	movs	r1, #7
 80008de:	2002      	movs	r0, #2
 80008e0:	f007 fd71 	bl	80083c6 <lcd_print>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200013d0 	.word	0x200013d0
 80008f0:	0800beb8 	.word	0x0800beb8
 80008f4:	0800bebc 	.word	0x0800bebc
 80008f8:	0800bec8 	.word	0x0800bec8
 80008fc:	0800becc 	.word	0x0800becc
 8000900:	0800bed0 	.word	0x0800bed0
 8000904:	0800bed4 	.word	0x0800bed4
 8000908:	0800bed8 	.word	0x0800bed8

0800090c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	e009      	b.n	800092c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000918:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <eepromDataFillWithEmpty+0x38>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000920:	4a09      	ldr	r2, [pc, #36]	@ (8000948 <eepromDataFillWithEmpty+0x3c>)
 8000922:	2100      	movs	r1, #0
 8000924:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3301      	adds	r3, #1
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	4b07      	ldr	r3, [pc, #28]	@ (800094c <eepromDataFillWithEmpty+0x40>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	429a      	cmp	r2, r3
 8000934:	dbf0      	blt.n	8000918 <eepromDataFillWithEmpty+0xc>
	}
}
 8000936:	bf00      	nop
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000000 	.word	0x20000000
 8000948:	20000d00 	.word	0x20000d00
 800094c:	20000028 	.word	0x20000028

08000950 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000962:	4b50      	ldr	r3, [pc, #320]	@ (8000aa4 <i2cTest+0x154>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa4 <i2cTest+0x154>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f022 0201 	bic.w	r2, r2, #1
 8000970:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000972:	484c      	ldr	r0, [pc, #304]	@ (8000aa4 <i2cTest+0x154>)
 8000974:	f009 f80e 	bl	8009994 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000978:	23c0      	movs	r3, #192	@ 0xc0
 800097a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 800097c:	2311      	movs	r3, #17
 800097e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000980:	2301      	movs	r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000988:	463b      	mov	r3, r7
 800098a:	4619      	mov	r1, r3
 800098c:	4846      	ldr	r0, [pc, #280]	@ (8000aa8 <i2cTest+0x158>)
 800098e:	f008 fc15 	bl	80091bc <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	2140      	movs	r1, #64	@ 0x40
 8000996:	4844      	ldr	r0, [pc, #272]	@ (8000aa8 <i2cTest+0x158>)
 8000998:	f008 fe87 	bl	80096aa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2180      	movs	r1, #128	@ 0x80
 80009a0:	4841      	ldr	r0, [pc, #260]	@ (8000aa8 <i2cTest+0x158>)
 80009a2:	f008 fe82 	bl	80096aa <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 80009a6:	200a      	movs	r0, #10
 80009a8:	f008 f9da 	bl	8008d60 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80009ac:	bf00      	nop
 80009ae:	2140      	movs	r1, #64	@ 0x40
 80009b0:	483d      	ldr	r0, [pc, #244]	@ (8000aa8 <i2cTest+0x158>)
 80009b2:	f008 fe63 	bl	800967c <HAL_GPIO_ReadPin>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d006      	beq.n	80009ca <i2cTest+0x7a>
 80009bc:	2180      	movs	r1, #128	@ 0x80
 80009be:	483a      	ldr	r0, [pc, #232]	@ (8000aa8 <i2cTest+0x158>)
 80009c0:	f008 fe5c 	bl	800967c <HAL_GPIO_ReadPin>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d1f1      	bne.n	80009ae <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2180      	movs	r1, #128	@ 0x80
 80009ce:	4836      	ldr	r0, [pc, #216]	@ (8000aa8 <i2cTest+0x158>)
 80009d0:	f008 fe6b 	bl	80096aa <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 80009d4:	200a      	movs	r0, #10
 80009d6:	f008 f9c3 	bl	8008d60 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 80009da:	bf00      	nop
 80009dc:	2180      	movs	r1, #128	@ 0x80
 80009de:	4832      	ldr	r0, [pc, #200]	@ (8000aa8 <i2cTest+0x158>)
 80009e0:	f008 fe4c 	bl	800967c <HAL_GPIO_ReadPin>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d0f8      	beq.n	80009dc <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2140      	movs	r1, #64	@ 0x40
 80009ee:	482e      	ldr	r0, [pc, #184]	@ (8000aa8 <i2cTest+0x158>)
 80009f0:	f008 fe5b 	bl	80096aa <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80009f4:	200a      	movs	r0, #10
 80009f6:	f008 f9b3 	bl	8008d60 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 80009fa:	bf00      	nop
 80009fc:	2140      	movs	r1, #64	@ 0x40
 80009fe:	482a      	ldr	r0, [pc, #168]	@ (8000aa8 <i2cTest+0x158>)
 8000a00:	f008 fe3c 	bl	800967c <HAL_GPIO_ReadPin>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d0f8      	beq.n	80009fc <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2140      	movs	r1, #64	@ 0x40
 8000a0e:	4826      	ldr	r0, [pc, #152]	@ (8000aa8 <i2cTest+0x158>)
 8000a10:	f008 fe4b 	bl	80096aa <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000a14:	200a      	movs	r0, #10
 8000a16:	f008 f9a3 	bl	8008d60 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000a1a:	bf00      	nop
 8000a1c:	2140      	movs	r1, #64	@ 0x40
 8000a1e:	4822      	ldr	r0, [pc, #136]	@ (8000aa8 <i2cTest+0x158>)
 8000a20:	f008 fe2c 	bl	800967c <HAL_GPIO_ReadPin>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d1f8      	bne.n	8000a1c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	481e      	ldr	r0, [pc, #120]	@ (8000aa8 <i2cTest+0x158>)
 8000a30:	f008 fe3b 	bl	80096aa <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000a34:	200a      	movs	r0, #10
 8000a36:	f008 f993 	bl	8008d60 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000a3a:	bf00      	nop
 8000a3c:	2180      	movs	r1, #128	@ 0x80
 8000a3e:	481a      	ldr	r0, [pc, #104]	@ (8000aa8 <i2cTest+0x158>)
 8000a40:	f008 fe1c 	bl	800967c <HAL_GPIO_ReadPin>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d1f8      	bne.n	8000a3c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a4a:	23c0      	movs	r3, #192	@ 0xc0
 8000a4c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000a4e:	2312      	movs	r3, #18
 8000a50:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4812      	ldr	r0, [pc, #72]	@ (8000aa8 <i2cTest+0x158>)
 8000a60:	f008 fbac 	bl	80091bc <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <i2cTest+0x154>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <i2cTest+0x154>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000a72:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000a74:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <i2cTest+0x154>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <i2cTest+0x154>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000a82:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000a84:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <i2cTest+0x154>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <i2cTest+0x154>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f042 0201 	orr.w	r2, r2, #1
 8000a92:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000a94:	4803      	ldr	r0, [pc, #12]	@ (8000aa4 <i2cTest+0x154>)
 8000a96:	f008 fe39 	bl	800970c <HAL_I2C_Init>
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000140c 	.word	0x2000140c
 8000aa8:	40010c00 	.word	0x40010c00

08000aac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab0:	f3bf 8f4f 	dsb	sy
}
 8000ab4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <__NVIC_SystemReset+0x24>)
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000abe:	4904      	ldr	r1, [pc, #16]	@ (8000ad0 <__NVIC_SystemReset+0x24>)
 8000ac0:	4b04      	ldr	r3, [pc, #16]	@ (8000ad4 <__NVIC_SystemReset+0x28>)
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac6:	f3bf 8f4f 	dsb	sy
}
 8000aca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <__NVIC_SystemReset+0x20>
 8000ad0:	e000ed00 	.word	0xe000ed00
 8000ad4:	05fa0004 	.word	0x05fa0004

08000ad8 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000ade:	2101      	movs	r1, #1
 8000ae0:	4890      	ldr	r0, [pc, #576]	@ (8000d24 <menu+0x24c>)
 8000ae2:	f008 fdcb 	bl	800967c <HAL_GPIO_ReadPin>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	f040 808e 	bne.w	8000c0a <menu+0x132>
 8000aee:	4b8e      	ldr	r3, [pc, #568]	@ (8000d28 <menu+0x250>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	f083 0301 	eor.w	r3, r3, #1
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	f000 8086 	beq.w	8000c0a <menu+0x132>
		menuSayac = menuSayac+1;
 8000afe:	4b8b      	ldr	r3, [pc, #556]	@ (8000d2c <menu+0x254>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b89      	ldr	r3, [pc, #548]	@ (8000d2c <menu+0x254>)
 8000b08:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 32) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8000b0a:	4b88      	ldr	r3, [pc, #544]	@ (8000d2c <menu+0x254>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b20      	cmp	r3, #32
 8000b10:	d102      	bne.n	8000b18 <menu+0x40>
			menuSayac = 1;
 8000b12:	4b86      	ldr	r3, [pc, #536]	@ (8000d2c <menu+0x254>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8000b18:	4b84      	ldr	r3, [pc, #528]	@ (8000d2c <menu+0x254>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b12      	cmp	r3, #18
 8000b1e:	d106      	bne.n	8000b2e <menu+0x56>
 8000b20:	4b83      	ldr	r3, [pc, #524]	@ (8000d30 <menu+0x258>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <menu+0x56>
			menuSayac = 21;
 8000b28:	4b80      	ldr	r3, [pc, #512]	@ (8000d2c <menu+0x254>)
 8000b2a:	2215      	movs	r2, #21
 8000b2c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8000b2e:	4b7f      	ldr	r3, [pc, #508]	@ (8000d2c <menu+0x254>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b08      	cmp	r3, #8
 8000b34:	d106      	bne.n	8000b44 <menu+0x6c>
 8000b36:	4b7f      	ldr	r3, [pc, #508]	@ (8000d34 <menu+0x25c>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d102      	bne.n	8000b44 <menu+0x6c>
			menuSayac = 16;
 8000b3e:	4b7b      	ldr	r3, [pc, #492]	@ (8000d2c <menu+0x254>)
 8000b40:	2210      	movs	r2, #16
 8000b42:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8000b44:	4b79      	ldr	r3, [pc, #484]	@ (8000d2c <menu+0x254>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b0d      	cmp	r3, #13
 8000b4a:	d106      	bne.n	8000b5a <menu+0x82>
 8000b4c:	4b79      	ldr	r3, [pc, #484]	@ (8000d34 <menu+0x25c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d102      	bne.n	8000b5a <menu+0x82>
			menuSayac = 16;
 8000b54:	4b75      	ldr	r3, [pc, #468]	@ (8000d2c <menu+0x254>)
 8000b56:	2210      	movs	r2, #16
 8000b58:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000b5a:	4b74      	ldr	r3, [pc, #464]	@ (8000d2c <menu+0x254>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b09      	cmp	r3, #9
 8000b60:	d106      	bne.n	8000b70 <menu+0x98>
 8000b62:	4b74      	ldr	r3, [pc, #464]	@ (8000d34 <menu+0x25c>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d102      	bne.n	8000b70 <menu+0x98>
			menuSayac = 13;
 8000b6a:	4b70      	ldr	r3, [pc, #448]	@ (8000d2c <menu+0x254>)
 8000b6c:	220d      	movs	r2, #13
 8000b6e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000b70:	4b6e      	ldr	r3, [pc, #440]	@ (8000d2c <menu+0x254>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b0a      	cmp	r3, #10
 8000b76:	d10a      	bne.n	8000b8e <menu+0xb6>
 8000b78:	4b6f      	ldr	r3, [pc, #444]	@ (8000d38 <menu+0x260>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d003      	beq.n	8000b88 <menu+0xb0>
 8000b80:	4b6d      	ldr	r3, [pc, #436]	@ (8000d38 <menu+0x260>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d102      	bne.n	8000b8e <menu+0xb6>
			menuSayac = 11;
 8000b88:	4b68      	ldr	r3, [pc, #416]	@ (8000d2c <menu+0x254>)
 8000b8a:	220b      	movs	r2, #11
 8000b8c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8000b8e:	4b67      	ldr	r3, [pc, #412]	@ (8000d2c <menu+0x254>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b0c      	cmp	r3, #12
 8000b94:	d10e      	bne.n	8000bb4 <menu+0xdc>
 8000b96:	4b69      	ldr	r3, [pc, #420]	@ (8000d3c <menu+0x264>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d003      	beq.n	8000ba6 <menu+0xce>
 8000b9e:	4b67      	ldr	r3, [pc, #412]	@ (8000d3c <menu+0x264>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d106      	bne.n	8000bb4 <menu+0xdc>
 8000ba6:	4b63      	ldr	r3, [pc, #396]	@ (8000d34 <menu+0x25c>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d102      	bne.n	8000bb4 <menu+0xdc>
			menuSayac = 16;
 8000bae:	4b5f      	ldr	r3, [pc, #380]	@ (8000d2c <menu+0x254>)
 8000bb0:	2210      	movs	r2, #16
 8000bb2:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8000bb4:	4b5d      	ldr	r3, [pc, #372]	@ (8000d2c <menu+0x254>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b0c      	cmp	r3, #12
 8000bba:	d10e      	bne.n	8000bda <menu+0x102>
 8000bbc:	4b5f      	ldr	r3, [pc, #380]	@ (8000d3c <menu+0x264>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d003      	beq.n	8000bcc <menu+0xf4>
 8000bc4:	4b5d      	ldr	r3, [pc, #372]	@ (8000d3c <menu+0x264>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d106      	bne.n	8000bda <menu+0x102>
 8000bcc:	4b59      	ldr	r3, [pc, #356]	@ (8000d34 <menu+0x25c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d102      	bne.n	8000bda <menu+0x102>
			menuSayac = 13;
 8000bd4:	4b55      	ldr	r3, [pc, #340]	@ (8000d2c <menu+0x254>)
 8000bd6:	220d      	movs	r2, #13
 8000bd8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000bda:	4b54      	ldr	r3, [pc, #336]	@ (8000d2c <menu+0x254>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b0f      	cmp	r3, #15
 8000be0:	d106      	bne.n	8000bf0 <menu+0x118>
 8000be2:	4b57      	ldr	r3, [pc, #348]	@ (8000d40 <menu+0x268>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d102      	bne.n	8000bf0 <menu+0x118>
			menuSayac = 16;
 8000bea:	4b50      	ldr	r3, [pc, #320]	@ (8000d2c <menu+0x254>)
 8000bec:	2210      	movs	r2, #16
 8000bee:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8000bf0:	4b4e      	ldr	r3, [pc, #312]	@ (8000d2c <menu+0x254>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b18      	cmp	r3, #24
 8000bf6:	d106      	bne.n	8000c06 <menu+0x12e>
 8000bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8000d30 <menu+0x258>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <menu+0x12e>
			menuSayac = 26;
 8000c00:	4b4a      	ldr	r3, [pc, #296]	@ (8000d2c <menu+0x254>)
 8000c02:	221a      	movs	r2, #26
 8000c04:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8000c06:	f002 fb75 	bl	80032f4 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000c0a:	2108      	movs	r1, #8
 8000c0c:	484d      	ldr	r0, [pc, #308]	@ (8000d44 <menu+0x26c>)
 8000c0e:	f008 fd35 	bl	800967c <HAL_GPIO_ReadPin>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d175      	bne.n	8000d04 <menu+0x22c>
 8000c18:	4b43      	ldr	r3, [pc, #268]	@ (8000d28 <menu+0x250>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	f083 0301 	eor.w	r3, r3, #1
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d06e      	beq.n	8000d04 <menu+0x22c>
		if (menuSayac <= 1) {
 8000c26:	4b41      	ldr	r3, [pc, #260]	@ (8000d2c <menu+0x254>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d802      	bhi.n	8000c34 <menu+0x15c>
			menuSayac = 32;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8000c2e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d2c <menu+0x254>)
 8000c30:	2220      	movs	r2, #32
 8000c32:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8000c34:	4b3d      	ldr	r3, [pc, #244]	@ (8000d2c <menu+0x254>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d2c <menu+0x254>)
 8000c3e:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8000c40:	4b3a      	ldr	r3, [pc, #232]	@ (8000d2c <menu+0x254>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b14      	cmp	r3, #20
 8000c46:	d106      	bne.n	8000c56 <menu+0x17e>
 8000c48:	4b39      	ldr	r3, [pc, #228]	@ (8000d30 <menu+0x258>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <menu+0x17e>
			menuSayac = 17;
 8000c50:	4b36      	ldr	r3, [pc, #216]	@ (8000d2c <menu+0x254>)
 8000c52:	2211      	movs	r2, #17
 8000c54:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8000c56:	4b35      	ldr	r3, [pc, #212]	@ (8000d2c <menu+0x254>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b0f      	cmp	r3, #15
 8000c5c:	d106      	bne.n	8000c6c <menu+0x194>
 8000c5e:	4b35      	ldr	r3, [pc, #212]	@ (8000d34 <menu+0x25c>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d102      	bne.n	8000c6c <menu+0x194>
			menuSayac = 7;
 8000c66:	4b31      	ldr	r3, [pc, #196]	@ (8000d2c <menu+0x254>)
 8000c68:	2207      	movs	r2, #7
 8000c6a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <menu+0x254>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b0f      	cmp	r3, #15
 8000c72:	d106      	bne.n	8000c82 <menu+0x1aa>
 8000c74:	4b2f      	ldr	r3, [pc, #188]	@ (8000d34 <menu+0x25c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d102      	bne.n	8000c82 <menu+0x1aa>
			menuSayac = 12;
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d2c <menu+0x254>)
 8000c7e:	220c      	movs	r2, #12
 8000c80:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8000c82:	4b2a      	ldr	r3, [pc, #168]	@ (8000d2c <menu+0x254>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b0c      	cmp	r3, #12
 8000c88:	d106      	bne.n	8000c98 <menu+0x1c0>
 8000c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d34 <menu+0x25c>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d102      	bne.n	8000c98 <menu+0x1c0>
			menuSayac = 8;
 8000c92:	4b26      	ldr	r3, [pc, #152]	@ (8000d2c <menu+0x254>)
 8000c94:	2208      	movs	r2, #8
 8000c96:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000c98:	4b24      	ldr	r3, [pc, #144]	@ (8000d2c <menu+0x254>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b0a      	cmp	r3, #10
 8000c9e:	d10a      	bne.n	8000cb6 <menu+0x1de>
 8000ca0:	4b25      	ldr	r3, [pc, #148]	@ (8000d38 <menu+0x260>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d003      	beq.n	8000cb0 <menu+0x1d8>
 8000ca8:	4b23      	ldr	r3, [pc, #140]	@ (8000d38 <menu+0x260>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d102      	bne.n	8000cb6 <menu+0x1de>
			menuSayac = 9;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <menu+0x254>)
 8000cb2:	2209      	movs	r2, #9
 8000cb4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <menu+0x254>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b0c      	cmp	r3, #12
 8000cbc:	d10a      	bne.n	8000cd4 <menu+0x1fc>
 8000cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d3c <menu+0x264>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d003      	beq.n	8000cce <menu+0x1f6>
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <menu+0x264>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d102      	bne.n	8000cd4 <menu+0x1fc>
			menuSayac = 11;
 8000cce:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <menu+0x254>)
 8000cd0:	220b      	movs	r2, #11
 8000cd2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000cd4:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <menu+0x254>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d106      	bne.n	8000cea <menu+0x212>
 8000cdc:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <menu+0x268>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d102      	bne.n	8000cea <menu+0x212>
			menuSayac = 14;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <menu+0x254>)
 8000ce6:	220e      	movs	r2, #14
 8000ce8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8000cea:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <menu+0x254>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b19      	cmp	r3, #25
 8000cf0:	d106      	bne.n	8000d00 <menu+0x228>
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <menu+0x258>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d102      	bne.n	8000d00 <menu+0x228>
			menuSayac = 23;
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <menu+0x254>)
 8000cfc:	2217      	movs	r2, #23
 8000cfe:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8000d00:	f002 faf8 	bl	80032f4 <bekle>
	}

	if (menuSayac == 0) {
 8000d04:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <menu+0x254>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d121      	bne.n	8000d50 <menu+0x278>
		lcd_print(1, 1, menuyeGirildiText);
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d48 <menu+0x270>)
 8000d0e:	2101      	movs	r1, #1
 8000d10:	2001      	movs	r0, #1
 8000d12:	f007 fb58 	bl	80083c6 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8000d16:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <menu+0x274>)
 8000d18:	2101      	movs	r1, #1
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f007 fb53 	bl	80083c6 <lcd_print>
 8000d20:	e016      	b.n	8000d50 <menu+0x278>
 8000d22:	bf00      	nop
 8000d24:	40010800 	.word	0x40010800
 8000d28:	20000dcf 	.word	0x20000dcf
 8000d2c:	20000da0 	.word	0x20000da0
 8000d30:	20000daf 	.word	0x20000daf
 8000d34:	20000da8 	.word	0x20000da8
 8000d38:	20000da9 	.word	0x20000da9
 8000d3c:	20000daa 	.word	0x20000daa
 8000d40:	20000dab 	.word	0x20000dab
 8000d44:	40011000 	.word	0x40011000
 8000d48:	20000e08 	.word	0x20000e08
 8000d4c:	20000e1c 	.word	0x20000e1c
	}

	if (menuSayac == 1) {
 8000d50:	4bb0      	ldr	r3, [pc, #704]	@ (8001014 <menu+0x53c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	f040 81ef 	bne.w	8001138 <menu+0x660>
		lcd_print(1, 1, hataKayitListText);
 8000d5a:	4aaf      	ldr	r2, [pc, #700]	@ (8001018 <menu+0x540>)
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f007 fb31 	bl	80083c6 <lcd_print>

		if(hataGostermeSirasi == 0) {
 8000d64:	4bad      	ldr	r3, [pc, #692]	@ (800101c <menu+0x544>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d115      	bne.n	8000d98 <menu+0x2c0>
			lcd_print(2, 1, birHataKoduText);
 8000d6c:	4aac      	ldr	r2, [pc, #688]	@ (8001020 <menu+0x548>)
 8000d6e:	2101      	movs	r1, #1
 8000d70:	2002      	movs	r0, #2
 8000d72:	f007 fb28 	bl	80083c6 <lcd_print>
			lcd_print(2, 15, "   ");
 8000d76:	4aab      	ldr	r2, [pc, #684]	@ (8001024 <menu+0x54c>)
 8000d78:	210f      	movs	r1, #15
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	f007 fb23 	bl	80083c6 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8000d80:	4ba9      	ldr	r3, [pc, #676]	@ (8001028 <menu+0x550>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	220a      	movs	r2, #10
 8000d86:	49a9      	ldr	r1, [pc, #676]	@ (800102c <menu+0x554>)
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f00b f819 	bl	800bdc0 <itoa>
			lcd_print(2, 14, snum);
 8000d8e:	4aa7      	ldr	r2, [pc, #668]	@ (800102c <menu+0x554>)
 8000d90:	210e      	movs	r1, #14
 8000d92:	2002      	movs	r0, #2
 8000d94:	f007 fb17 	bl	80083c6 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8000d98:	4ba0      	ldr	r3, [pc, #640]	@ (800101c <menu+0x544>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d115      	bne.n	8000dcc <menu+0x2f4>
			lcd_print(2, 1, ikiHataKoduText);
 8000da0:	4aa3      	ldr	r2, [pc, #652]	@ (8001030 <menu+0x558>)
 8000da2:	2101      	movs	r1, #1
 8000da4:	2002      	movs	r0, #2
 8000da6:	f007 fb0e 	bl	80083c6 <lcd_print>
			lcd_print(2, 15, "  ");
 8000daa:	4aa2      	ldr	r2, [pc, #648]	@ (8001034 <menu+0x55c>)
 8000dac:	210f      	movs	r1, #15
 8000dae:	2002      	movs	r0, #2
 8000db0:	f007 fb09 	bl	80083c6 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8000db4:	4ba0      	ldr	r3, [pc, #640]	@ (8001038 <menu+0x560>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	220a      	movs	r2, #10
 8000dba:	499c      	ldr	r1, [pc, #624]	@ (800102c <menu+0x554>)
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f00a ffff 	bl	800bdc0 <itoa>
			lcd_print(2, 14, snum);
 8000dc2:	4a9a      	ldr	r2, [pc, #616]	@ (800102c <menu+0x554>)
 8000dc4:	210e      	movs	r1, #14
 8000dc6:	2002      	movs	r0, #2
 8000dc8:	f007 fafd 	bl	80083c6 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8000dcc:	4b93      	ldr	r3, [pc, #588]	@ (800101c <menu+0x544>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d115      	bne.n	8000e00 <menu+0x328>
			lcd_print(2, 1, ucHataKoduText);
 8000dd4:	4a99      	ldr	r2, [pc, #612]	@ (800103c <menu+0x564>)
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f007 faf4 	bl	80083c6 <lcd_print>
			lcd_print(2, 15, "  ");
 8000dde:	4a95      	ldr	r2, [pc, #596]	@ (8001034 <menu+0x55c>)
 8000de0:	210f      	movs	r1, #15
 8000de2:	2002      	movs	r0, #2
 8000de4:	f007 faef 	bl	80083c6 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8000de8:	4b95      	ldr	r3, [pc, #596]	@ (8001040 <menu+0x568>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	220a      	movs	r2, #10
 8000dee:	498f      	ldr	r1, [pc, #572]	@ (800102c <menu+0x554>)
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00a ffe5 	bl	800bdc0 <itoa>
			lcd_print(2, 14, snum);
 8000df6:	4a8d      	ldr	r2, [pc, #564]	@ (800102c <menu+0x554>)
 8000df8:	210e      	movs	r1, #14
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f007 fae3 	bl	80083c6 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8000e00:	4b86      	ldr	r3, [pc, #536]	@ (800101c <menu+0x544>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d115      	bne.n	8000e34 <menu+0x35c>
			lcd_print(2, 1, dortHataKoduText);
 8000e08:	4a8e      	ldr	r2, [pc, #568]	@ (8001044 <menu+0x56c>)
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f007 fada 	bl	80083c6 <lcd_print>
			lcd_print(2, 15, "  ");
 8000e12:	4a88      	ldr	r2, [pc, #544]	@ (8001034 <menu+0x55c>)
 8000e14:	210f      	movs	r1, #15
 8000e16:	2002      	movs	r0, #2
 8000e18:	f007 fad5 	bl	80083c6 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8000e1c:	4b8a      	ldr	r3, [pc, #552]	@ (8001048 <menu+0x570>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	220a      	movs	r2, #10
 8000e22:	4982      	ldr	r1, [pc, #520]	@ (800102c <menu+0x554>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00a ffcb 	bl	800bdc0 <itoa>
			lcd_print(2, 14, snum);
 8000e2a:	4a80      	ldr	r2, [pc, #512]	@ (800102c <menu+0x554>)
 8000e2c:	210e      	movs	r1, #14
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f007 fac9 	bl	80083c6 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8000e34:	4b79      	ldr	r3, [pc, #484]	@ (800101c <menu+0x544>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d115      	bne.n	8000e68 <menu+0x390>
			lcd_print(2, 1, besHataKoduText);
 8000e3c:	4a83      	ldr	r2, [pc, #524]	@ (800104c <menu+0x574>)
 8000e3e:	2101      	movs	r1, #1
 8000e40:	2002      	movs	r0, #2
 8000e42:	f007 fac0 	bl	80083c6 <lcd_print>
			lcd_print(2, 15, "  ");
 8000e46:	4a7b      	ldr	r2, [pc, #492]	@ (8001034 <menu+0x55c>)
 8000e48:	210f      	movs	r1, #15
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	f007 fabb 	bl	80083c6 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8000e50:	4b7f      	ldr	r3, [pc, #508]	@ (8001050 <menu+0x578>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	220a      	movs	r2, #10
 8000e56:	4975      	ldr	r1, [pc, #468]	@ (800102c <menu+0x554>)
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f00a ffb1 	bl	800bdc0 <itoa>
			lcd_print(2, 14, snum);
 8000e5e:	4a73      	ldr	r2, [pc, #460]	@ (800102c <menu+0x554>)
 8000e60:	210e      	movs	r1, #14
 8000e62:	2002      	movs	r0, #2
 8000e64:	f007 faaf 	bl	80083c6 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8000e68:	4b6c      	ldr	r3, [pc, #432]	@ (800101c <menu+0x544>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b05      	cmp	r3, #5
 8000e6e:	d115      	bne.n	8000e9c <menu+0x3c4>
			lcd_print(2, 1, altiHataKoduText);
 8000e70:	4a78      	ldr	r2, [pc, #480]	@ (8001054 <menu+0x57c>)
 8000e72:	2101      	movs	r1, #1
 8000e74:	2002      	movs	r0, #2
 8000e76:	f007 faa6 	bl	80083c6 <lcd_print>
			lcd_print(2, 15, "  ");
 8000e7a:	4a6e      	ldr	r2, [pc, #440]	@ (8001034 <menu+0x55c>)
 8000e7c:	210f      	movs	r1, #15
 8000e7e:	2002      	movs	r0, #2
 8000e80:	f007 faa1 	bl	80083c6 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8000e84:	4b74      	ldr	r3, [pc, #464]	@ (8001058 <menu+0x580>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	220a      	movs	r2, #10
 8000e8a:	4968      	ldr	r1, [pc, #416]	@ (800102c <menu+0x554>)
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f00a ff97 	bl	800bdc0 <itoa>
			lcd_print(2, 14, snum);
 8000e92:	4a66      	ldr	r2, [pc, #408]	@ (800102c <menu+0x554>)
 8000e94:	210e      	movs	r1, #14
 8000e96:	2002      	movs	r0, #2
 8000e98:	f007 fa95 	bl	80083c6 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8000e9c:	4b5f      	ldr	r3, [pc, #380]	@ (800101c <menu+0x544>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b06      	cmp	r3, #6
 8000ea2:	d115      	bne.n	8000ed0 <menu+0x3f8>
			lcd_print(2, 1, yediHataKoduText);
 8000ea4:	4a6d      	ldr	r2, [pc, #436]	@ (800105c <menu+0x584>)
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	2002      	movs	r0, #2
 8000eaa:	f007 fa8c 	bl	80083c6 <lcd_print>
			lcd_print(2, 15, "  ");
 8000eae:	4a61      	ldr	r2, [pc, #388]	@ (8001034 <menu+0x55c>)
 8000eb0:	210f      	movs	r1, #15
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	f007 fa87 	bl	80083c6 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8000eb8:	4b69      	ldr	r3, [pc, #420]	@ (8001060 <menu+0x588>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	220a      	movs	r2, #10
 8000ebe:	495b      	ldr	r1, [pc, #364]	@ (800102c <menu+0x554>)
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f00a ff7d 	bl	800bdc0 <itoa>
			lcd_print(2, 14, snum);
 8000ec6:	4a59      	ldr	r2, [pc, #356]	@ (800102c <menu+0x554>)
 8000ec8:	210e      	movs	r1, #14
 8000eca:	2002      	movs	r0, #2
 8000ecc:	f007 fa7b 	bl	80083c6 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8000ed0:	4b52      	ldr	r3, [pc, #328]	@ (800101c <menu+0x544>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b07      	cmp	r3, #7
 8000ed6:	d115      	bne.n	8000f04 <menu+0x42c>
			lcd_print(2, 1, sekizHataKoduText);
 8000ed8:	4a62      	ldr	r2, [pc, #392]	@ (8001064 <menu+0x58c>)
 8000eda:	2101      	movs	r1, #1
 8000edc:	2002      	movs	r0, #2
 8000ede:	f007 fa72 	bl	80083c6 <lcd_print>
			lcd_print(2, 15, "  ");
 8000ee2:	4a54      	ldr	r2, [pc, #336]	@ (8001034 <menu+0x55c>)
 8000ee4:	210f      	movs	r1, #15
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f007 fa6d 	bl	80083c6 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8000eec:	4b5e      	ldr	r3, [pc, #376]	@ (8001068 <menu+0x590>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	220a      	movs	r2, #10
 8000ef2:	494e      	ldr	r1, [pc, #312]	@ (800102c <menu+0x554>)
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f00a ff63 	bl	800bdc0 <itoa>
			lcd_print(2, 14, snum);
 8000efa:	4a4c      	ldr	r2, [pc, #304]	@ (800102c <menu+0x554>)
 8000efc:	210e      	movs	r1, #14
 8000efe:	2002      	movs	r0, #2
 8000f00:	f007 fa61 	bl	80083c6 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8000f04:	4b45      	ldr	r3, [pc, #276]	@ (800101c <menu+0x544>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b08      	cmp	r3, #8
 8000f0a:	d115      	bne.n	8000f38 <menu+0x460>
			lcd_print(2, 1, dokuzHataKoduText);
 8000f0c:	4a57      	ldr	r2, [pc, #348]	@ (800106c <menu+0x594>)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	2002      	movs	r0, #2
 8000f12:	f007 fa58 	bl	80083c6 <lcd_print>
			lcd_print(2, 15, "  ");
 8000f16:	4a47      	ldr	r2, [pc, #284]	@ (8001034 <menu+0x55c>)
 8000f18:	210f      	movs	r1, #15
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	f007 fa53 	bl	80083c6 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8000f20:	4b53      	ldr	r3, [pc, #332]	@ (8001070 <menu+0x598>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	220a      	movs	r2, #10
 8000f26:	4941      	ldr	r1, [pc, #260]	@ (800102c <menu+0x554>)
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f00a ff49 	bl	800bdc0 <itoa>
			lcd_print(2, 14, snum);
 8000f2e:	4a3f      	ldr	r2, [pc, #252]	@ (800102c <menu+0x554>)
 8000f30:	210e      	movs	r1, #14
 8000f32:	2002      	movs	r0, #2
 8000f34:	f007 fa47 	bl	80083c6 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8000f38:	4b38      	ldr	r3, [pc, #224]	@ (800101c <menu+0x544>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b09      	cmp	r3, #9
 8000f3e:	d115      	bne.n	8000f6c <menu+0x494>
			lcd_print(2, 1, onHataKoduText);
 8000f40:	4a4c      	ldr	r2, [pc, #304]	@ (8001074 <menu+0x59c>)
 8000f42:	2101      	movs	r1, #1
 8000f44:	2002      	movs	r0, #2
 8000f46:	f007 fa3e 	bl	80083c6 <lcd_print>
			lcd_print(2, 16, " ");
 8000f4a:	4a4b      	ldr	r2, [pc, #300]	@ (8001078 <menu+0x5a0>)
 8000f4c:	2110      	movs	r1, #16
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f007 fa39 	bl	80083c6 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8000f54:	4b49      	ldr	r3, [pc, #292]	@ (800107c <menu+0x5a4>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	220a      	movs	r2, #10
 8000f5a:	4934      	ldr	r1, [pc, #208]	@ (800102c <menu+0x554>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00a ff2f 	bl	800bdc0 <itoa>
			lcd_print(2, 15, snum);
 8000f62:	4a32      	ldr	r2, [pc, #200]	@ (800102c <menu+0x554>)
 8000f64:	210f      	movs	r1, #15
 8000f66:	2002      	movs	r0, #2
 8000f68:	f007 fa2d 	bl	80083c6 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800101c <menu+0x544>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b0a      	cmp	r3, #10
 8000f72:	d104      	bne.n	8000f7e <menu+0x4a6>
			lcd_print(2, 1, silmekIcinText);
 8000f74:	4a42      	ldr	r2, [pc, #264]	@ (8001080 <menu+0x5a8>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	2002      	movs	r0, #2
 8000f7a:	f007 fa24 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000f7e:	2102      	movs	r1, #2
 8000f80:	4840      	ldr	r0, [pc, #256]	@ (8001084 <menu+0x5ac>)
 8000f82:	f008 fb7b 	bl	800967c <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d119      	bne.n	8000fc0 <menu+0x4e8>
 8000f8c:	4b3e      	ldr	r3, [pc, #248]	@ (8001088 <menu+0x5b0>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	f083 0301 	eor.w	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d012      	beq.n	8000fc0 <menu+0x4e8>
 8000f9a:	4b3c      	ldr	r3, [pc, #240]	@ (800108c <menu+0x5b4>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10e      	bne.n	8000fc0 <menu+0x4e8>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <menu+0x544>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <menu+0x544>)
 8000fac:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8000fae:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <menu+0x544>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b0a      	cmp	r3, #10
 8000fb4:	d902      	bls.n	8000fbc <menu+0x4e4>
				hataGostermeSirasi = 0;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <menu+0x544>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000fbc:	f002 f99a 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	4830      	ldr	r0, [pc, #192]	@ (8001084 <menu+0x5ac>)
 8000fc4:	f008 fb5a 	bl	800967c <HAL_GPIO_ReadPin>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d119      	bne.n	8001002 <menu+0x52a>
 8000fce:	4b2e      	ldr	r3, [pc, #184]	@ (8001088 <menu+0x5b0>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	f083 0301 	eor.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d012      	beq.n	8001002 <menu+0x52a>
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800108c <menu+0x5b4>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10e      	bne.n	8001002 <menu+0x52a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <menu+0x544>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <menu+0x544>)
 8000fee:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <menu+0x544>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b0b      	cmp	r3, #11
 8000ff6:	d902      	bls.n	8000ffe <menu+0x526>
	    		hataGostermeSirasi = 10;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	@ (800101c <menu+0x544>)
 8000ffa:	220a      	movs	r2, #10
 8000ffc:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000ffe:	f002 f979 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001002:	2108      	movs	r1, #8
 8001004:	481f      	ldr	r0, [pc, #124]	@ (8001084 <menu+0x5ac>)
 8001006:	f008 fb39 	bl	800967c <HAL_GPIO_ReadPin>
 800100a:	4603      	mov	r3, r0
 800100c:	2b01      	cmp	r3, #1
 800100e:	f040 8093 	bne.w	8001138 <menu+0x660>
 8001012:	e03d      	b.n	8001090 <menu+0x5b8>
 8001014:	20000da0 	.word	0x20000da0
 8001018:	20000e30 	.word	0x20000e30
 800101c:	20000da2 	.word	0x20000da2
 8001020:	20000e44 	.word	0x20000e44
 8001024:	0800bedc 	.word	0x0800bedc
 8001028:	20000dc2 	.word	0x20000dc2
 800102c:	20000d70 	.word	0x20000d70
 8001030:	20000e58 	.word	0x20000e58
 8001034:	0800bee0 	.word	0x0800bee0
 8001038:	20000dc3 	.word	0x20000dc3
 800103c:	20000e6c 	.word	0x20000e6c
 8001040:	20000dc4 	.word	0x20000dc4
 8001044:	20000e80 	.word	0x20000e80
 8001048:	20000dc5 	.word	0x20000dc5
 800104c:	20000e94 	.word	0x20000e94
 8001050:	20000dc6 	.word	0x20000dc6
 8001054:	20000ea8 	.word	0x20000ea8
 8001058:	20000dc7 	.word	0x20000dc7
 800105c:	20000ebc 	.word	0x20000ebc
 8001060:	20000dc8 	.word	0x20000dc8
 8001064:	20000ed0 	.word	0x20000ed0
 8001068:	20000dc9 	.word	0x20000dc9
 800106c:	20000ee4 	.word	0x20000ee4
 8001070:	20000dca 	.word	0x20000dca
 8001074:	20000ef8 	.word	0x20000ef8
 8001078:	0800bee4 	.word	0x0800bee4
 800107c:	20000dcb 	.word	0x20000dcb
 8001080:	20000f0c 	.word	0x20000f0c
 8001084:	40010800 	.word	0x40010800
 8001088:	20000dcf 	.word	0x20000dcf
 800108c:	20000daf 	.word	0x20000daf
 8001090:	4b7d      	ldr	r3, [pc, #500]	@ (8001288 <menu+0x7b0>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	f083 0301 	eor.w	r3, r3, #1
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d04c      	beq.n	8001138 <menu+0x660>
 800109e:	4b7b      	ldr	r3, [pc, #492]	@ (800128c <menu+0x7b4>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b0a      	cmp	r3, #10
 80010a4:	d148      	bne.n	8001138 <menu+0x660>
			hataKayit1 = 0; eepromData[37] = 0;
 80010a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001290 <menu+0x7b8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	4b79      	ldr	r3, [pc, #484]	@ (8001294 <menu+0x7bc>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 80010b4:	4b78      	ldr	r3, [pc, #480]	@ (8001298 <menu+0x7c0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	4b76      	ldr	r3, [pc, #472]	@ (8001294 <menu+0x7bc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 80010c2:	4b76      	ldr	r3, [pc, #472]	@ (800129c <menu+0x7c4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	4b72      	ldr	r3, [pc, #456]	@ (8001294 <menu+0x7bc>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80010d0:	4b73      	ldr	r3, [pc, #460]	@ (80012a0 <menu+0x7c8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001294 <menu+0x7bc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 80010de:	4b71      	ldr	r3, [pc, #452]	@ (80012a4 <menu+0x7cc>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001294 <menu+0x7bc>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80010ec:	4b6e      	ldr	r3, [pc, #440]	@ (80012a8 <menu+0x7d0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
 80010f2:	4b68      	ldr	r3, [pc, #416]	@ (8001294 <menu+0x7bc>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 80010fa:	4b6c      	ldr	r3, [pc, #432]	@ (80012ac <menu+0x7d4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
 8001100:	4b64      	ldr	r3, [pc, #400]	@ (8001294 <menu+0x7bc>)
 8001102:	2200      	movs	r2, #0
 8001104:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001108:	4b69      	ldr	r3, [pc, #420]	@ (80012b0 <menu+0x7d8>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
 800110e:	4b61      	ldr	r3, [pc, #388]	@ (8001294 <menu+0x7bc>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001116:	4b67      	ldr	r3, [pc, #412]	@ (80012b4 <menu+0x7dc>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	4b5d      	ldr	r3, [pc, #372]	@ (8001294 <menu+0x7bc>)
 800111e:	2200      	movs	r2, #0
 8001120:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001124:	4b64      	ldr	r3, [pc, #400]	@ (80012b8 <menu+0x7e0>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	4b5a      	ldr	r3, [pc, #360]	@ (8001294 <menu+0x7bc>)
 800112c:	2200      	movs	r2, #0
 800112e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001132:	4b62      	ldr	r3, [pc, #392]	@ (80012bc <menu+0x7e4>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001138:	4b61      	ldr	r3, [pc, #388]	@ (80012c0 <menu+0x7e8>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b02      	cmp	r3, #2
 800113e:	f040 808e 	bne.w	800125e <menu+0x786>
		lcd_print(1, 1, calismaSekliText);
 8001142:	4a60      	ldr	r2, [pc, #384]	@ (80012c4 <menu+0x7ec>)
 8001144:	2101      	movs	r1, #1
 8001146:	2001      	movs	r0, #1
 8001148:	f007 f93d 	bl	80083c6 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 800114c:	4b5e      	ldr	r3, [pc, #376]	@ (80012c8 <menu+0x7f0>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d003      	beq.n	800115c <menu+0x684>
 8001154:	4b5c      	ldr	r3, [pc, #368]	@ (80012c8 <menu+0x7f0>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d104      	bne.n	8001166 <menu+0x68e>
			lcd_print(2, 1, devirmeYuruyusText);
 800115c:	4a5b      	ldr	r2, [pc, #364]	@ (80012cc <menu+0x7f4>)
 800115e:	2101      	movs	r1, #1
 8001160:	2002      	movs	r0, #2
 8001162:	f007 f930 	bl	80083c6 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001166:	4b5a      	ldr	r3, [pc, #360]	@ (80012d0 <menu+0x7f8>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d108      	bne.n	8001180 <menu+0x6a8>
 800116e:	4b56      	ldr	r3, [pc, #344]	@ (80012c8 <menu+0x7f0>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d104      	bne.n	8001180 <menu+0x6a8>
			lcd_print(2, 1, bastikcaCalisanText);
 8001176:	4a57      	ldr	r2, [pc, #348]	@ (80012d4 <menu+0x7fc>)
 8001178:	2101      	movs	r1, #1
 800117a:	2002      	movs	r0, #2
 800117c:	f007 f923 	bl	80083c6 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001180:	4b53      	ldr	r3, [pc, #332]	@ (80012d0 <menu+0x7f8>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d108      	bne.n	800119a <menu+0x6c2>
 8001188:	4b4f      	ldr	r3, [pc, #316]	@ (80012c8 <menu+0x7f0>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d104      	bne.n	800119a <menu+0x6c2>
			lcd_print(2, 1, basGonderText);
 8001190:	4a51      	ldr	r2, [pc, #324]	@ (80012d8 <menu+0x800>)
 8001192:	2101      	movs	r1, #1
 8001194:	2002      	movs	r0, #2
 8001196:	f007 f916 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800119a:	2102      	movs	r1, #2
 800119c:	484f      	ldr	r0, [pc, #316]	@ (80012dc <menu+0x804>)
 800119e:	f008 fa6d 	bl	800967c <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d119      	bne.n	80011dc <menu+0x704>
 80011a8:	4b37      	ldr	r3, [pc, #220]	@ (8001288 <menu+0x7b0>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	f083 0301 	eor.w	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d012      	beq.n	80011dc <menu+0x704>
 80011b6:	4b44      	ldr	r3, [pc, #272]	@ (80012c8 <menu+0x7f0>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10e      	bne.n	80011dc <menu+0x704>
			calismaSekli = calismaSekli + 1;
 80011be:	4b44      	ldr	r3, [pc, #272]	@ (80012d0 <menu+0x7f8>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b42      	ldr	r3, [pc, #264]	@ (80012d0 <menu+0x7f8>)
 80011c8:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 80011ca:	4b41      	ldr	r3, [pc, #260]	@ (80012d0 <menu+0x7f8>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d902      	bls.n	80011d8 <menu+0x700>
				calismaSekli = 0;
 80011d2:	4b3f      	ldr	r3, [pc, #252]	@ (80012d0 <menu+0x7f8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80011d8:	f002 f88c 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80011dc:	2104      	movs	r1, #4
 80011de:	483f      	ldr	r0, [pc, #252]	@ (80012dc <menu+0x804>)
 80011e0:	f008 fa4c 	bl	800967c <HAL_GPIO_ReadPin>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d119      	bne.n	800121e <menu+0x746>
 80011ea:	4b27      	ldr	r3, [pc, #156]	@ (8001288 <menu+0x7b0>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	f083 0301 	eor.w	r3, r3, #1
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d012      	beq.n	800121e <menu+0x746>
 80011f8:	4b33      	ldr	r3, [pc, #204]	@ (80012c8 <menu+0x7f0>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d10e      	bne.n	800121e <menu+0x746>
			calismaSekli = calismaSekli - 1;
 8001200:	4b33      	ldr	r3, [pc, #204]	@ (80012d0 <menu+0x7f8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	3b01      	subs	r3, #1
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b31      	ldr	r3, [pc, #196]	@ (80012d0 <menu+0x7f8>)
 800120a:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 800120c:	4b30      	ldr	r3, [pc, #192]	@ (80012d0 <menu+0x7f8>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d002      	beq.n	800121a <menu+0x742>
	    		calismaSekli = 1;
 8001214:	4b2e      	ldr	r3, [pc, #184]	@ (80012d0 <menu+0x7f8>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800121a:	f002 f86b 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800121e:	2108      	movs	r1, #8
 8001220:	482e      	ldr	r0, [pc, #184]	@ (80012dc <menu+0x804>)
 8001222:	f008 fa2b 	bl	800967c <HAL_GPIO_ReadPin>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	d118      	bne.n	800125e <menu+0x786>
 800122c:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <menu+0x7b0>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	f083 0301 	eor.w	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d011      	beq.n	800125e <menu+0x786>
			eepromData[1] = calismaSekli;
 800123a:	4b25      	ldr	r3, [pc, #148]	@ (80012d0 <menu+0x7f8>)
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <menu+0x7bc>)
 8001240:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001242:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <menu+0x7f8>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d106      	bne.n	8001258 <menu+0x780>
				altLimit = 1;
 800124a:	4b25      	ldr	r3, [pc, #148]	@ (80012e0 <menu+0x808>)
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001250:	4b23      	ldr	r3, [pc, #140]	@ (80012e0 <menu+0x808>)
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <menu+0x7bc>)
 8001256:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001258:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <menu+0x7e4>)
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 800125e:	4b18      	ldr	r3, [pc, #96]	@ (80012c0 <menu+0x7e8>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b03      	cmp	r3, #3
 8001264:	f040 809c 	bne.w	80013a0 <menu+0x8c8>
		lcd_print(1, 1, emniyetCercevesiText);
 8001268:	4a1e      	ldr	r2, [pc, #120]	@ (80012e4 <menu+0x80c>)
 800126a:	2101      	movs	r1, #1
 800126c:	2001      	movs	r0, #1
 800126e:	f007 f8aa 	bl	80083c6 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001272:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <menu+0x810>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d13a      	bne.n	80012f0 <menu+0x818>
			lcd_print(2, 1, pasifText);
 800127a:	4a1c      	ldr	r2, [pc, #112]	@ (80012ec <menu+0x814>)
 800127c:	2101      	movs	r1, #1
 800127e:	2002      	movs	r0, #2
 8001280:	f007 f8a1 	bl	80083c6 <lcd_print>
 8001284:	e03d      	b.n	8001302 <menu+0x82a>
 8001286:	bf00      	nop
 8001288:	20000dcf 	.word	0x20000dcf
 800128c:	20000da2 	.word	0x20000da2
 8001290:	20000dc2 	.word	0x20000dc2
 8001294:	20000d00 	.word	0x20000d00
 8001298:	20000dc3 	.word	0x20000dc3
 800129c:	20000dc4 	.word	0x20000dc4
 80012a0:	20000dc5 	.word	0x20000dc5
 80012a4:	20000dc6 	.word	0x20000dc6
 80012a8:	20000dc7 	.word	0x20000dc7
 80012ac:	20000dc8 	.word	0x20000dc8
 80012b0:	20000dc9 	.word	0x20000dc9
 80012b4:	20000dca 	.word	0x20000dca
 80012b8:	20000dcb 	.word	0x20000dcb
 80012bc:	20000dcc 	.word	0x20000dcc
 80012c0:	20000da0 	.word	0x20000da0
 80012c4:	20000f20 	.word	0x20000f20
 80012c8:	20000daf 	.word	0x20000daf
 80012cc:	20000f34 	.word	0x20000f34
 80012d0:	20000da1 	.word	0x20000da1
 80012d4:	20000f48 	.word	0x20000f48
 80012d8:	20000f5c 	.word	0x20000f5c
 80012dc:	40010800 	.word	0x40010800
 80012e0:	20000da6 	.word	0x20000da6
 80012e4:	20000f70 	.word	0x20000f70
 80012e8:	20000da4 	.word	0x20000da4
 80012ec:	20000f84 	.word	0x20000f84
		} else if(emniyetCercevesi == 1) {
 80012f0:	4b6b      	ldr	r3, [pc, #428]	@ (80014a0 <menu+0x9c8>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d104      	bne.n	8001302 <menu+0x82a>
			lcd_print(2, 1, ondSafetyTextGN);
 80012f8:	4a6a      	ldr	r2, [pc, #424]	@ (80014a4 <menu+0x9cc>)
 80012fa:	2101      	movs	r1, #1
 80012fc:	2002      	movs	r0, #2
 80012fe:	f007 f862 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001302:	2102      	movs	r1, #2
 8001304:	4868      	ldr	r0, [pc, #416]	@ (80014a8 <menu+0x9d0>)
 8001306:	f008 f9b9 	bl	800967c <HAL_GPIO_ReadPin>
 800130a:	4603      	mov	r3, r0
 800130c:	2b01      	cmp	r3, #1
 800130e:	d115      	bne.n	800133c <menu+0x864>
 8001310:	4b66      	ldr	r3, [pc, #408]	@ (80014ac <menu+0x9d4>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	f083 0301 	eor.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00e      	beq.n	800133c <menu+0x864>
			emniyetCercevesi = emniyetCercevesi + 1;
 800131e:	4b60      	ldr	r3, [pc, #384]	@ (80014a0 <menu+0x9c8>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b5e      	ldr	r3, [pc, #376]	@ (80014a0 <menu+0x9c8>)
 8001328:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 800132a:	4b5d      	ldr	r3, [pc, #372]	@ (80014a0 <menu+0x9c8>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d902      	bls.n	8001338 <menu+0x860>
				emniyetCercevesi = 0;
 8001332:	4b5b      	ldr	r3, [pc, #364]	@ (80014a0 <menu+0x9c8>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001338:	f001 ffdc 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800133c:	2104      	movs	r1, #4
 800133e:	485a      	ldr	r0, [pc, #360]	@ (80014a8 <menu+0x9d0>)
 8001340:	f008 f99c 	bl	800967c <HAL_GPIO_ReadPin>
 8001344:	4603      	mov	r3, r0
 8001346:	2b01      	cmp	r3, #1
 8001348:	d115      	bne.n	8001376 <menu+0x89e>
 800134a:	4b58      	ldr	r3, [pc, #352]	@ (80014ac <menu+0x9d4>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	f083 0301 	eor.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00e      	beq.n	8001376 <menu+0x89e>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001358:	4b51      	ldr	r3, [pc, #324]	@ (80014a0 <menu+0x9c8>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	3b01      	subs	r3, #1
 800135e:	b2da      	uxtb	r2, r3
 8001360:	4b4f      	ldr	r3, [pc, #316]	@ (80014a0 <menu+0x9c8>)
 8001362:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001364:	4b4e      	ldr	r3, [pc, #312]	@ (80014a0 <menu+0x9c8>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d002      	beq.n	8001372 <menu+0x89a>
		   		emniyetCercevesi = 1;
 800136c:	4b4c      	ldr	r3, [pc, #304]	@ (80014a0 <menu+0x9c8>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001372:	f001 ffbf 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001376:	2108      	movs	r1, #8
 8001378:	484b      	ldr	r0, [pc, #300]	@ (80014a8 <menu+0x9d0>)
 800137a:	f008 f97f 	bl	800967c <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	2b01      	cmp	r3, #1
 8001382:	d10d      	bne.n	80013a0 <menu+0x8c8>
 8001384:	4b49      	ldr	r3, [pc, #292]	@ (80014ac <menu+0x9d4>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	f083 0301 	eor.w	r3, r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <menu+0x8c8>
			eepromData[2] = emniyetCercevesi;
 8001392:	4b43      	ldr	r3, [pc, #268]	@ (80014a0 <menu+0x9c8>)
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	4b46      	ldr	r3, [pc, #280]	@ (80014b0 <menu+0x9d8>)
 8001398:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 800139a:	4b46      	ldr	r3, [pc, #280]	@ (80014b4 <menu+0x9dc>)
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80013a0:	4b45      	ldr	r3, [pc, #276]	@ (80014b8 <menu+0x9e0>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d166      	bne.n	8001476 <menu+0x99e>
		lcd_print(1, 1, yavaslamaLimitText);
 80013a8:	4a44      	ldr	r2, [pc, #272]	@ (80014bc <menu+0x9e4>)
 80013aa:	2101      	movs	r1, #1
 80013ac:	2001      	movs	r0, #1
 80013ae:	f007 f80a 	bl	80083c6 <lcd_print>

		if(yavaslamaLimit == 0) {
 80013b2:	4b43      	ldr	r3, [pc, #268]	@ (80014c0 <menu+0x9e8>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d105      	bne.n	80013c6 <menu+0x8ee>
			lcd_print(2, 1, pasifText);
 80013ba:	4a42      	ldr	r2, [pc, #264]	@ (80014c4 <menu+0x9ec>)
 80013bc:	2101      	movs	r1, #1
 80013be:	2002      	movs	r0, #2
 80013c0:	f007 f801 	bl	80083c6 <lcd_print>
 80013c4:	e008      	b.n	80013d8 <menu+0x900>
		} else if(yavaslamaLimit == 1) {
 80013c6:	4b3e      	ldr	r3, [pc, #248]	@ (80014c0 <menu+0x9e8>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d104      	bne.n	80013d8 <menu+0x900>
			lcd_print(2, 1, aktifText);
 80013ce:	4a3e      	ldr	r2, [pc, #248]	@ (80014c8 <menu+0x9f0>)
 80013d0:	2101      	movs	r1, #1
 80013d2:	2002      	movs	r0, #2
 80013d4:	f006 fff7 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80013d8:	2102      	movs	r1, #2
 80013da:	4833      	ldr	r0, [pc, #204]	@ (80014a8 <menu+0x9d0>)
 80013dc:	f008 f94e 	bl	800967c <HAL_GPIO_ReadPin>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d115      	bne.n	8001412 <menu+0x93a>
 80013e6:	4b31      	ldr	r3, [pc, #196]	@ (80014ac <menu+0x9d4>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	f083 0301 	eor.w	r3, r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00e      	beq.n	8001412 <menu+0x93a>
			yavaslamaLimit = yavaslamaLimit + 1;
 80013f4:	4b32      	ldr	r3, [pc, #200]	@ (80014c0 <menu+0x9e8>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	4b30      	ldr	r3, [pc, #192]	@ (80014c0 <menu+0x9e8>)
 80013fe:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001400:	4b2f      	ldr	r3, [pc, #188]	@ (80014c0 <menu+0x9e8>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d902      	bls.n	800140e <menu+0x936>
				yavaslamaLimit = 0;
 8001408:	4b2d      	ldr	r3, [pc, #180]	@ (80014c0 <menu+0x9e8>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800140e:	f001 ff71 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001412:	2104      	movs	r1, #4
 8001414:	4824      	ldr	r0, [pc, #144]	@ (80014a8 <menu+0x9d0>)
 8001416:	f008 f931 	bl	800967c <HAL_GPIO_ReadPin>
 800141a:	4603      	mov	r3, r0
 800141c:	2b01      	cmp	r3, #1
 800141e:	d115      	bne.n	800144c <menu+0x974>
 8001420:	4b22      	ldr	r3, [pc, #136]	@ (80014ac <menu+0x9d4>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	f083 0301 	eor.w	r3, r3, #1
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00e      	beq.n	800144c <menu+0x974>
			yavaslamaLimit = yavaslamaLimit - 1;
 800142e:	4b24      	ldr	r3, [pc, #144]	@ (80014c0 <menu+0x9e8>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	3b01      	subs	r3, #1
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b22      	ldr	r3, [pc, #136]	@ (80014c0 <menu+0x9e8>)
 8001438:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 800143a:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <menu+0x9e8>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <menu+0x970>
		   		yavaslamaLimit = 1;
 8001442:	4b1f      	ldr	r3, [pc, #124]	@ (80014c0 <menu+0x9e8>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001448:	f001 ff54 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800144c:	2108      	movs	r1, #8
 800144e:	4816      	ldr	r0, [pc, #88]	@ (80014a8 <menu+0x9d0>)
 8001450:	f008 f914 	bl	800967c <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	2b01      	cmp	r3, #1
 8001458:	d10d      	bne.n	8001476 <menu+0x99e>
 800145a:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <menu+0x9d4>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	f083 0301 	eor.w	r3, r3, #1
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <menu+0x99e>
			eepromData[4] = yavaslamaLimit;
 8001468:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <menu+0x9e8>)
 800146a:	781a      	ldrb	r2, [r3, #0]
 800146c:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <menu+0x9d8>)
 800146e:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001470:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <menu+0x9dc>)
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001476:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <menu+0x9e0>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b05      	cmp	r3, #5
 800147c:	f040 80aa 	bne.w	80015d4 <menu+0xafc>
		lcd_print(1, 1, altLimitText);
 8001480:	4a12      	ldr	r2, [pc, #72]	@ (80014cc <menu+0x9f4>)
 8001482:	2101      	movs	r1, #1
 8001484:	2001      	movs	r0, #1
 8001486:	f006 ff9e 	bl	80083c6 <lcd_print>

		if(altLimit == 0) {
 800148a:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <menu+0x9f8>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d120      	bne.n	80014d4 <menu+0x9fc>
			lcd_print(2, 1, pasifText);
 8001492:	4a0c      	ldr	r2, [pc, #48]	@ (80014c4 <menu+0x9ec>)
 8001494:	2101      	movs	r1, #1
 8001496:	2002      	movs	r0, #2
 8001498:	f006 ff95 	bl	80083c6 <lcd_print>
 800149c:	e023      	b.n	80014e6 <menu+0xa0e>
 800149e:	bf00      	nop
 80014a0:	20000da4 	.word	0x20000da4
 80014a4:	20000080 	.word	0x20000080
 80014a8:	40010800 	.word	0x40010800
 80014ac:	20000dcf 	.word	0x20000dcf
 80014b0:	20000d00 	.word	0x20000d00
 80014b4:	20000dcc 	.word	0x20000dcc
 80014b8:	20000da0 	.word	0x20000da0
 80014bc:	20000fac 	.word	0x20000fac
 80014c0:	20000da5 	.word	0x20000da5
 80014c4:	20000f84 	.word	0x20000f84
 80014c8:	20000f98 	.word	0x20000f98
 80014cc:	20000fc0 	.word	0x20000fc0
 80014d0:	20000da6 	.word	0x20000da6
		} else if(altLimit == 1) {
 80014d4:	4b89      	ldr	r3, [pc, #548]	@ (80016fc <menu+0xc24>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d104      	bne.n	80014e6 <menu+0xa0e>
			lcd_print(2, 1, aktifText);
 80014dc:	4a88      	ldr	r2, [pc, #544]	@ (8001700 <menu+0xc28>)
 80014de:	2101      	movs	r1, #1
 80014e0:	2002      	movs	r0, #2
 80014e2:	f006 ff70 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80014e6:	2102      	movs	r1, #2
 80014e8:	4886      	ldr	r0, [pc, #536]	@ (8001704 <menu+0xc2c>)
 80014ea:	f008 f8c7 	bl	800967c <HAL_GPIO_ReadPin>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d119      	bne.n	8001528 <menu+0xa50>
 80014f4:	4b84      	ldr	r3, [pc, #528]	@ (8001708 <menu+0xc30>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	f083 0301 	eor.w	r3, r3, #1
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d012      	beq.n	8001528 <menu+0xa50>
 8001502:	4b82      	ldr	r3, [pc, #520]	@ (800170c <menu+0xc34>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10e      	bne.n	8001528 <menu+0xa50>
			altLimit = altLimit + 1;
 800150a:	4b7c      	ldr	r3, [pc, #496]	@ (80016fc <menu+0xc24>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4b7a      	ldr	r3, [pc, #488]	@ (80016fc <menu+0xc24>)
 8001514:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001516:	4b79      	ldr	r3, [pc, #484]	@ (80016fc <menu+0xc24>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d902      	bls.n	8001524 <menu+0xa4c>
				altLimit = 0;
 800151e:	4b77      	ldr	r3, [pc, #476]	@ (80016fc <menu+0xc24>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001524:	f001 fee6 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001528:	2104      	movs	r1, #4
 800152a:	4876      	ldr	r0, [pc, #472]	@ (8001704 <menu+0xc2c>)
 800152c:	f008 f8a6 	bl	800967c <HAL_GPIO_ReadPin>
 8001530:	4603      	mov	r3, r0
 8001532:	2b01      	cmp	r3, #1
 8001534:	d119      	bne.n	800156a <menu+0xa92>
 8001536:	4b74      	ldr	r3, [pc, #464]	@ (8001708 <menu+0xc30>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	f083 0301 	eor.w	r3, r3, #1
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d012      	beq.n	800156a <menu+0xa92>
 8001544:	4b71      	ldr	r3, [pc, #452]	@ (800170c <menu+0xc34>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10e      	bne.n	800156a <menu+0xa92>
			altLimit = altLimit - 1;
 800154c:	4b6b      	ldr	r3, [pc, #428]	@ (80016fc <menu+0xc24>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	3b01      	subs	r3, #1
 8001552:	b2da      	uxtb	r2, r3
 8001554:	4b69      	ldr	r3, [pc, #420]	@ (80016fc <menu+0xc24>)
 8001556:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001558:	4b68      	ldr	r3, [pc, #416]	@ (80016fc <menu+0xc24>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <menu+0xa8e>
		   		altLimit = 1;
 8001560:	4b66      	ldr	r3, [pc, #408]	@ (80016fc <menu+0xc24>)
 8001562:	2201      	movs	r2, #1
 8001564:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001566:	f001 fec5 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800156a:	2108      	movs	r1, #8
 800156c:	4865      	ldr	r0, [pc, #404]	@ (8001704 <menu+0xc2c>)
 800156e:	f008 f885 	bl	800967c <HAL_GPIO_ReadPin>
 8001572:	4603      	mov	r3, r0
 8001574:	2b01      	cmp	r3, #1
 8001576:	d12d      	bne.n	80015d4 <menu+0xafc>
 8001578:	4b63      	ldr	r3, [pc, #396]	@ (8001708 <menu+0xc30>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	f083 0301 	eor.w	r3, r3, #1
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d026      	beq.n	80015d4 <menu+0xafc>
			eepromData[5] = altLimit;
 8001586:	4b5d      	ldr	r3, [pc, #372]	@ (80016fc <menu+0xc24>)
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	4b61      	ldr	r3, [pc, #388]	@ (8001710 <menu+0xc38>)
 800158c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800158e:	4b5b      	ldr	r3, [pc, #364]	@ (80016fc <menu+0xc24>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d110      	bne.n	80015b8 <menu+0xae0>
 8001596:	4b5f      	ldr	r3, [pc, #380]	@ (8001714 <menu+0xc3c>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <menu+0xace>
 800159e:	4b5d      	ldr	r3, [pc, #372]	@ (8001714 <menu+0xc3c>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d108      	bne.n	80015b8 <menu+0xae0>
				kapiTablaAcKonum = 3;
 80015a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001714 <menu+0xc3c>)
 80015a8:	2203      	movs	r2, #3
 80015aa:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80015ac:	4b59      	ldr	r3, [pc, #356]	@ (8001714 <menu+0xc3c>)
 80015ae:	781a      	ldrb	r2, [r3, #0]
 80015b0:	4b57      	ldr	r3, [pc, #348]	@ (8001710 <menu+0xc38>)
 80015b2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80015b6:	e00a      	b.n	80015ce <menu+0xaf6>
			} else if(altLimit == 0) {
 80015b8:	4b50      	ldr	r3, [pc, #320]	@ (80016fc <menu+0xc24>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d106      	bne.n	80015ce <menu+0xaf6>
				platformSilindirTipi = 0;
 80015c0:	4b55      	ldr	r3, [pc, #340]	@ (8001718 <menu+0xc40>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80015c6:	4b54      	ldr	r3, [pc, #336]	@ (8001718 <menu+0xc40>)
 80015c8:	781a      	ldrb	r2, [r3, #0]
 80015ca:	4b51      	ldr	r3, [pc, #324]	@ (8001710 <menu+0xc38>)
 80015cc:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80015ce:	4b53      	ldr	r3, [pc, #332]	@ (800171c <menu+0xc44>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80015d4:	4b52      	ldr	r3, [pc, #328]	@ (8001720 <menu+0xc48>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b06      	cmp	r3, #6
 80015da:	d166      	bne.n	80016aa <menu+0xbd2>
		lcd_print(1, 1, basincSalteriText);
 80015dc:	4a51      	ldr	r2, [pc, #324]	@ (8001724 <menu+0xc4c>)
 80015de:	2101      	movs	r1, #1
 80015e0:	2001      	movs	r0, #1
 80015e2:	f006 fef0 	bl	80083c6 <lcd_print>

		if(basincSalteri == 0) {
 80015e6:	4b50      	ldr	r3, [pc, #320]	@ (8001728 <menu+0xc50>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d105      	bne.n	80015fa <menu+0xb22>
			lcd_print(2, 1, pasifText);
 80015ee:	4a4f      	ldr	r2, [pc, #316]	@ (800172c <menu+0xc54>)
 80015f0:	2101      	movs	r1, #1
 80015f2:	2002      	movs	r0, #2
 80015f4:	f006 fee7 	bl	80083c6 <lcd_print>
 80015f8:	e008      	b.n	800160c <menu+0xb34>
		} else if(basincSalteri == 1) {
 80015fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001728 <menu+0xc50>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d104      	bne.n	800160c <menu+0xb34>
			lcd_print(2, 1, aktifText);
 8001602:	4a3f      	ldr	r2, [pc, #252]	@ (8001700 <menu+0xc28>)
 8001604:	2101      	movs	r1, #1
 8001606:	2002      	movs	r0, #2
 8001608:	f006 fedd 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800160c:	2102      	movs	r1, #2
 800160e:	483d      	ldr	r0, [pc, #244]	@ (8001704 <menu+0xc2c>)
 8001610:	f008 f834 	bl	800967c <HAL_GPIO_ReadPin>
 8001614:	4603      	mov	r3, r0
 8001616:	2b01      	cmp	r3, #1
 8001618:	d115      	bne.n	8001646 <menu+0xb6e>
 800161a:	4b3b      	ldr	r3, [pc, #236]	@ (8001708 <menu+0xc30>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	f083 0301 	eor.w	r3, r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00e      	beq.n	8001646 <menu+0xb6e>
			basincSalteri = basincSalteri + 1;
 8001628:	4b3f      	ldr	r3, [pc, #252]	@ (8001728 <menu+0xc50>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b3d      	ldr	r3, [pc, #244]	@ (8001728 <menu+0xc50>)
 8001632:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001634:	4b3c      	ldr	r3, [pc, #240]	@ (8001728 <menu+0xc50>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d902      	bls.n	8001642 <menu+0xb6a>
				basincSalteri = 0;
 800163c:	4b3a      	ldr	r3, [pc, #232]	@ (8001728 <menu+0xc50>)
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001642:	f001 fe57 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001646:	2104      	movs	r1, #4
 8001648:	482e      	ldr	r0, [pc, #184]	@ (8001704 <menu+0xc2c>)
 800164a:	f008 f817 	bl	800967c <HAL_GPIO_ReadPin>
 800164e:	4603      	mov	r3, r0
 8001650:	2b01      	cmp	r3, #1
 8001652:	d115      	bne.n	8001680 <menu+0xba8>
 8001654:	4b2c      	ldr	r3, [pc, #176]	@ (8001708 <menu+0xc30>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	f083 0301 	eor.w	r3, r3, #1
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00e      	beq.n	8001680 <menu+0xba8>
			basincSalteri = basincSalteri - 1;
 8001662:	4b31      	ldr	r3, [pc, #196]	@ (8001728 <menu+0xc50>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	3b01      	subs	r3, #1
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4b2f      	ldr	r3, [pc, #188]	@ (8001728 <menu+0xc50>)
 800166c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800166e:	4b2e      	ldr	r3, [pc, #184]	@ (8001728 <menu+0xc50>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d002      	beq.n	800167c <menu+0xba4>
		   		basincSalteri = 1;
 8001676:	4b2c      	ldr	r3, [pc, #176]	@ (8001728 <menu+0xc50>)
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800167c:	f001 fe3a 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001680:	2108      	movs	r1, #8
 8001682:	4820      	ldr	r0, [pc, #128]	@ (8001704 <menu+0xc2c>)
 8001684:	f007 fffa 	bl	800967c <HAL_GPIO_ReadPin>
 8001688:	4603      	mov	r3, r0
 800168a:	2b01      	cmp	r3, #1
 800168c:	d10d      	bne.n	80016aa <menu+0xbd2>
 800168e:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <menu+0xc30>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	f083 0301 	eor.w	r3, r3, #1
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <menu+0xbd2>
			eepromData[6] = basincSalteri;
 800169c:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <menu+0xc50>)
 800169e:	781a      	ldrb	r2, [r3, #0]
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <menu+0xc38>)
 80016a2:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80016a4:	4b1d      	ldr	r3, [pc, #116]	@ (800171c <menu+0xc44>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80016aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <menu+0xc48>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b07      	cmp	r3, #7
 80016b0:	f040 80a9 	bne.w	8001806 <menu+0xd2e>
		lcd_print(1, 1, kapiSecimleriText);
 80016b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001730 <menu+0xc58>)
 80016b6:	2101      	movs	r1, #1
 80016b8:	2001      	movs	r0, #1
 80016ba:	f006 fe84 	bl	80083c6 <lcd_print>

		if(kapiSecimleri == 0) {
 80016be:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <menu+0xc5c>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d105      	bne.n	80016d2 <menu+0xbfa>
			lcd_print(2, 1, pasifText);
 80016c6:	4a19      	ldr	r2, [pc, #100]	@ (800172c <menu+0xc54>)
 80016c8:	2101      	movs	r1, #1
 80016ca:	2002      	movs	r0, #2
 80016cc:	f006 fe7b 	bl	80083c6 <lcd_print>
 80016d0:	e03f      	b.n	8001752 <menu+0xc7a>
		} else if(kapiSecimleri == 1) {
 80016d2:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <menu+0xc5c>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d105      	bne.n	80016e6 <menu+0xc0e>
			lcd_print(2, 1, katKapisiAktifText);
 80016da:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <menu+0xc60>)
 80016dc:	2101      	movs	r1, #1
 80016de:	2002      	movs	r0, #2
 80016e0:	f006 fe71 	bl	80083c6 <lcd_print>
 80016e4:	e035      	b.n	8001752 <menu+0xc7a>
		} else if(kapiSecimleri == 2) {
 80016e6:	4b13      	ldr	r3, [pc, #76]	@ (8001734 <menu+0xc5c>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d128      	bne.n	8001740 <menu+0xc68>
			lcd_print(2, 1, tablaKapiAktifText);
 80016ee:	4a13      	ldr	r2, [pc, #76]	@ (800173c <menu+0xc64>)
 80016f0:	2101      	movs	r1, #1
 80016f2:	2002      	movs	r0, #2
 80016f4:	f006 fe67 	bl	80083c6 <lcd_print>
 80016f8:	e02b      	b.n	8001752 <menu+0xc7a>
 80016fa:	bf00      	nop
 80016fc:	20000da6 	.word	0x20000da6
 8001700:	20000f98 	.word	0x20000f98
 8001704:	40010800 	.word	0x40010800
 8001708:	20000dcf 	.word	0x20000dcf
 800170c:	20000da1 	.word	0x20000da1
 8001710:	20000d00 	.word	0x20000d00
 8001714:	20000dad 	.word	0x20000dad
 8001718:	20000db3 	.word	0x20000db3
 800171c:	20000dcc 	.word	0x20000dcc
 8001720:	20000da0 	.word	0x20000da0
 8001724:	20000fd4 	.word	0x20000fd4
 8001728:	20000da7 	.word	0x20000da7
 800172c:	20000f84 	.word	0x20000f84
 8001730:	20000fe8 	.word	0x20000fe8
 8001734:	20000da8 	.word	0x20000da8
 8001738:	20000ffc 	.word	0x20000ffc
 800173c:	20001010 	.word	0x20001010
		} else if(kapiSecimleri == 3) {
 8001740:	4b76      	ldr	r3, [pc, #472]	@ (800191c <menu+0xe44>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b03      	cmp	r3, #3
 8001746:	d104      	bne.n	8001752 <menu+0xc7a>
			lcd_print(2, 1, katArtiTablaAktifText);
 8001748:	4a75      	ldr	r2, [pc, #468]	@ (8001920 <menu+0xe48>)
 800174a:	2101      	movs	r1, #1
 800174c:	2002      	movs	r0, #2
 800174e:	f006 fe3a 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001752:	2102      	movs	r1, #2
 8001754:	4873      	ldr	r0, [pc, #460]	@ (8001924 <menu+0xe4c>)
 8001756:	f007 ff91 	bl	800967c <HAL_GPIO_ReadPin>
 800175a:	4603      	mov	r3, r0
 800175c:	2b01      	cmp	r3, #1
 800175e:	d115      	bne.n	800178c <menu+0xcb4>
 8001760:	4b71      	ldr	r3, [pc, #452]	@ (8001928 <menu+0xe50>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	f083 0301 	eor.w	r3, r3, #1
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00e      	beq.n	800178c <menu+0xcb4>
			kapiSecimleri = kapiSecimleri + 1;
 800176e:	4b6b      	ldr	r3, [pc, #428]	@ (800191c <menu+0xe44>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b69      	ldr	r3, [pc, #420]	@ (800191c <menu+0xe44>)
 8001778:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800177a:	4b68      	ldr	r3, [pc, #416]	@ (800191c <menu+0xe44>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b03      	cmp	r3, #3
 8001780:	d902      	bls.n	8001788 <menu+0xcb0>
				kapiSecimleri = 0;
 8001782:	4b66      	ldr	r3, [pc, #408]	@ (800191c <menu+0xe44>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001788:	f001 fdb4 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800178c:	2104      	movs	r1, #4
 800178e:	4865      	ldr	r0, [pc, #404]	@ (8001924 <menu+0xe4c>)
 8001790:	f007 ff74 	bl	800967c <HAL_GPIO_ReadPin>
 8001794:	4603      	mov	r3, r0
 8001796:	2b01      	cmp	r3, #1
 8001798:	d115      	bne.n	80017c6 <menu+0xcee>
 800179a:	4b63      	ldr	r3, [pc, #396]	@ (8001928 <menu+0xe50>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	f083 0301 	eor.w	r3, r3, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00e      	beq.n	80017c6 <menu+0xcee>
			kapiSecimleri = kapiSecimleri - 1;
 80017a8:	4b5c      	ldr	r3, [pc, #368]	@ (800191c <menu+0xe44>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b5a      	ldr	r3, [pc, #360]	@ (800191c <menu+0xe44>)
 80017b2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80017b4:	4b59      	ldr	r3, [pc, #356]	@ (800191c <menu+0xe44>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d902      	bls.n	80017c2 <menu+0xcea>
		   		kapiSecimleri = 3;
 80017bc:	4b57      	ldr	r3, [pc, #348]	@ (800191c <menu+0xe44>)
 80017be:	2203      	movs	r2, #3
 80017c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80017c2:	f001 fd97 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80017c6:	2108      	movs	r1, #8
 80017c8:	4856      	ldr	r0, [pc, #344]	@ (8001924 <menu+0xe4c>)
 80017ca:	f007 ff57 	bl	800967c <HAL_GPIO_ReadPin>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d118      	bne.n	8001806 <menu+0xd2e>
 80017d4:	4b54      	ldr	r3, [pc, #336]	@ (8001928 <menu+0xe50>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	f083 0301 	eor.w	r3, r3, #1
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d011      	beq.n	8001806 <menu+0xd2e>
			eepromData[7] = kapiSecimleri;
 80017e2:	4b4e      	ldr	r3, [pc, #312]	@ (800191c <menu+0xe44>)
 80017e4:	781a      	ldrb	r2, [r3, #0]
 80017e6:	4b51      	ldr	r3, [pc, #324]	@ (800192c <menu+0xe54>)
 80017e8:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80017ea:	4b4c      	ldr	r3, [pc, #304]	@ (800191c <menu+0xe44>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <menu+0xd28>
				altLimit = 1;
 80017f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001930 <menu+0xe58>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80017f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001930 <menu+0xe58>)
 80017fa:	781a      	ldrb	r2, [r3, #0]
 80017fc:	4b4b      	ldr	r3, [pc, #300]	@ (800192c <menu+0xe54>)
 80017fe:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001800:	4b4c      	ldr	r3, [pc, #304]	@ (8001934 <menu+0xe5c>)
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001806:	4b4c      	ldr	r3, [pc, #304]	@ (8001938 <menu+0xe60>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b08      	cmp	r3, #8
 800180c:	d167      	bne.n	80018de <menu+0xe06>
		lcd_print(1, 1, kapiAcmaTipiText);
 800180e:	4a4b      	ldr	r2, [pc, #300]	@ (800193c <menu+0xe64>)
 8001810:	2101      	movs	r1, #1
 8001812:	2001      	movs	r0, #1
 8001814:	f006 fdd7 	bl	80083c6 <lcd_print>

		if(kapiAcTipi == 0) {
 8001818:	4b49      	ldr	r3, [pc, #292]	@ (8001940 <menu+0xe68>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d105      	bne.n	800182c <menu+0xd54>
			lcd_print(2, 1, kapiButonuESPText);
 8001820:	4a48      	ldr	r2, [pc, #288]	@ (8001944 <menu+0xe6c>)
 8001822:	2101      	movs	r1, #1
 8001824:	2002      	movs	r0, #2
 8001826:	f006 fdce 	bl	80083c6 <lcd_print>
 800182a:	e008      	b.n	800183e <menu+0xd66>
		} else if(kapiAcTipi == 1){
 800182c:	4b44      	ldr	r3, [pc, #272]	@ (8001940 <menu+0xe68>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d104      	bne.n	800183e <menu+0xd66>
			lcd_print(2, 1, katButonuEXTText);
 8001834:	4a44      	ldr	r2, [pc, #272]	@ (8001948 <menu+0xe70>)
 8001836:	2101      	movs	r1, #1
 8001838:	2002      	movs	r0, #2
 800183a:	f006 fdc4 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800183e:	2102      	movs	r1, #2
 8001840:	4838      	ldr	r0, [pc, #224]	@ (8001924 <menu+0xe4c>)
 8001842:	f007 ff1b 	bl	800967c <HAL_GPIO_ReadPin>
 8001846:	4603      	mov	r3, r0
 8001848:	2b01      	cmp	r3, #1
 800184a:	d115      	bne.n	8001878 <menu+0xda0>
 800184c:	4b36      	ldr	r3, [pc, #216]	@ (8001928 <menu+0xe50>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	f083 0301 	eor.w	r3, r3, #1
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00e      	beq.n	8001878 <menu+0xda0>
			kapiAcTipi = kapiAcTipi + 1;
 800185a:	4b39      	ldr	r3, [pc, #228]	@ (8001940 <menu+0xe68>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b37      	ldr	r3, [pc, #220]	@ (8001940 <menu+0xe68>)
 8001864:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8001866:	4b36      	ldr	r3, [pc, #216]	@ (8001940 <menu+0xe68>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d902      	bls.n	8001874 <menu+0xd9c>
				kapiAcTipi = 0;
 800186e:	4b34      	ldr	r3, [pc, #208]	@ (8001940 <menu+0xe68>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001874:	f001 fd3e 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001878:	2104      	movs	r1, #4
 800187a:	482a      	ldr	r0, [pc, #168]	@ (8001924 <menu+0xe4c>)
 800187c:	f007 fefe 	bl	800967c <HAL_GPIO_ReadPin>
 8001880:	4603      	mov	r3, r0
 8001882:	2b01      	cmp	r3, #1
 8001884:	d115      	bne.n	80018b2 <menu+0xdda>
 8001886:	4b28      	ldr	r3, [pc, #160]	@ (8001928 <menu+0xe50>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f083 0301 	eor.w	r3, r3, #1
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00e      	beq.n	80018b2 <menu+0xdda>
			kapiAcTipi = kapiAcTipi - 1;
 8001894:	4b2a      	ldr	r3, [pc, #168]	@ (8001940 <menu+0xe68>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	3b01      	subs	r3, #1
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b28      	ldr	r3, [pc, #160]	@ (8001940 <menu+0xe68>)
 800189e:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80018a0:	4b27      	ldr	r3, [pc, #156]	@ (8001940 <menu+0xe68>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d002      	beq.n	80018ae <menu+0xdd6>
		   		kapiAcTipi = 1;
 80018a8:	4b25      	ldr	r3, [pc, #148]	@ (8001940 <menu+0xe68>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80018ae:	f001 fd21 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80018b2:	2108      	movs	r1, #8
 80018b4:	481b      	ldr	r0, [pc, #108]	@ (8001924 <menu+0xe4c>)
 80018b6:	f007 fee1 	bl	800967c <HAL_GPIO_ReadPin>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d10e      	bne.n	80018de <menu+0xe06>
 80018c0:	4b19      	ldr	r3, [pc, #100]	@ (8001928 <menu+0xe50>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	f083 0301 	eor.w	r3, r3, #1
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d007      	beq.n	80018de <menu+0xe06>
			eepromData[36] = kapiAcTipi;
 80018ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001940 <menu+0xe68>)
 80018d0:	781a      	ldrb	r2, [r3, #0]
 80018d2:	4b16      	ldr	r3, [pc, #88]	@ (800192c <menu+0xe54>)
 80018d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 80018d8:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <menu+0xe5c>)
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80018de:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <menu+0xe60>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b09      	cmp	r3, #9
 80018e4:	f040 8092 	bne.w	8001a0c <menu+0xf34>
		lcd_print(1, 1, birKatKapiTipiText);
 80018e8:	4a18      	ldr	r2, [pc, #96]	@ (800194c <menu+0xe74>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	2001      	movs	r0, #1
 80018ee:	f006 fd6a 	bl	80083c6 <lcd_print>

		if(kapi1Tip == 0) {
 80018f2:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <menu+0xe78>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d105      	bne.n	8001906 <menu+0xe2e>
			lcd_print(2, 1, prudhomeTextGN);
 80018fa:	4a16      	ldr	r2, [pc, #88]	@ (8001954 <menu+0xe7c>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	2002      	movs	r0, #2
 8001900:	f006 fd61 	bl	80083c6 <lcd_print>
 8001904:	e033      	b.n	800196e <menu+0xe96>
		} else if(kapi1Tip == 1) {
 8001906:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <menu+0xe78>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d126      	bne.n	800195c <menu+0xe84>
			lcd_print(2, 1, butonKontrolluText);
 800190e:	4a12      	ldr	r2, [pc, #72]	@ (8001958 <menu+0xe80>)
 8001910:	2101      	movs	r1, #1
 8001912:	2002      	movs	r0, #2
 8001914:	f006 fd57 	bl	80083c6 <lcd_print>
 8001918:	e029      	b.n	800196e <menu+0xe96>
 800191a:	bf00      	nop
 800191c:	20000da8 	.word	0x20000da8
 8001920:	20001024 	.word	0x20001024
 8001924:	40010800 	.word	0x40010800
 8001928:	20000dcf 	.word	0x20000dcf
 800192c:	20000d00 	.word	0x20000d00
 8001930:	20000da6 	.word	0x20000da6
 8001934:	20000dcc 	.word	0x20000dcc
 8001938:	20000da0 	.word	0x20000da0
 800193c:	20001038 	.word	0x20001038
 8001940:	20000dac 	.word	0x20000dac
 8001944:	2000104c 	.word	0x2000104c
 8001948:	20001060 	.word	0x20001060
 800194c:	20001074 	.word	0x20001074
 8001950:	20000da9 	.word	0x20000da9
 8001954:	20000094 	.word	0x20000094
 8001958:	20001088 	.word	0x20001088
		} else if(kapi1Tip == 2) {
 800195c:	4b73      	ldr	r3, [pc, #460]	@ (8001b2c <menu+0x1054>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d104      	bne.n	800196e <menu+0xe96>
			lcd_print(2, 1, pizzattoTextGN);
 8001964:	4a72      	ldr	r2, [pc, #456]	@ (8001b30 <menu+0x1058>)
 8001966:	2101      	movs	r1, #1
 8001968:	2002      	movs	r0, #2
 800196a:	f006 fd2c 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800196e:	2102      	movs	r1, #2
 8001970:	4870      	ldr	r0, [pc, #448]	@ (8001b34 <menu+0x105c>)
 8001972:	f007 fe83 	bl	800967c <HAL_GPIO_ReadPin>
 8001976:	4603      	mov	r3, r0
 8001978:	2b01      	cmp	r3, #1
 800197a:	d115      	bne.n	80019a8 <menu+0xed0>
 800197c:	4b6e      	ldr	r3, [pc, #440]	@ (8001b38 <menu+0x1060>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	f083 0301 	eor.w	r3, r3, #1
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00e      	beq.n	80019a8 <menu+0xed0>
			kapi1Tip = kapi1Tip + 1;
 800198a:	4b68      	ldr	r3, [pc, #416]	@ (8001b2c <menu+0x1054>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	3301      	adds	r3, #1
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4b66      	ldr	r3, [pc, #408]	@ (8001b2c <menu+0x1054>)
 8001994:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8001996:	4b65      	ldr	r3, [pc, #404]	@ (8001b2c <menu+0x1054>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d902      	bls.n	80019a4 <menu+0xecc>
				kapi1Tip = 0;
 800199e:	4b63      	ldr	r3, [pc, #396]	@ (8001b2c <menu+0x1054>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80019a4:	f001 fca6 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80019a8:	2104      	movs	r1, #4
 80019aa:	4862      	ldr	r0, [pc, #392]	@ (8001b34 <menu+0x105c>)
 80019ac:	f007 fe66 	bl	800967c <HAL_GPIO_ReadPin>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d115      	bne.n	80019e2 <menu+0xf0a>
 80019b6:	4b60      	ldr	r3, [pc, #384]	@ (8001b38 <menu+0x1060>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	f083 0301 	eor.w	r3, r3, #1
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00e      	beq.n	80019e2 <menu+0xf0a>
			kapi1Tip = kapi1Tip - 1;
 80019c4:	4b59      	ldr	r3, [pc, #356]	@ (8001b2c <menu+0x1054>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	4b57      	ldr	r3, [pc, #348]	@ (8001b2c <menu+0x1054>)
 80019ce:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80019d0:	4b56      	ldr	r3, [pc, #344]	@ (8001b2c <menu+0x1054>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d902      	bls.n	80019de <menu+0xf06>
		   		kapi1Tip = 2;
 80019d8:	4b54      	ldr	r3, [pc, #336]	@ (8001b2c <menu+0x1054>)
 80019da:	2202      	movs	r2, #2
 80019dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80019de:	f001 fc89 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80019e2:	2108      	movs	r1, #8
 80019e4:	4853      	ldr	r0, [pc, #332]	@ (8001b34 <menu+0x105c>)
 80019e6:	f007 fe49 	bl	800967c <HAL_GPIO_ReadPin>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d10d      	bne.n	8001a0c <menu+0xf34>
 80019f0:	4b51      	ldr	r3, [pc, #324]	@ (8001b38 <menu+0x1060>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	f083 0301 	eor.w	r3, r3, #1
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d006      	beq.n	8001a0c <menu+0xf34>
			eepromData[8] = kapi1Tip;
 80019fe:	4b4b      	ldr	r3, [pc, #300]	@ (8001b2c <menu+0x1054>)
 8001a00:	781a      	ldrb	r2, [r3, #0]
 8001a02:	4b4e      	ldr	r3, [pc, #312]	@ (8001b3c <menu+0x1064>)
 8001a04:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8001a06:	4b4e      	ldr	r3, [pc, #312]	@ (8001b40 <menu+0x1068>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8001a0c:	4b4d      	ldr	r3, [pc, #308]	@ (8001b44 <menu+0x106c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b0a      	cmp	r3, #10
 8001a12:	d16c      	bne.n	8001aee <menu+0x1016>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 8001a14:	4a4c      	ldr	r2, [pc, #304]	@ (8001b48 <menu+0x1070>)
 8001a16:	2101      	movs	r1, #1
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f006 fcd4 	bl	80083c6 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8001a1e:	4a4b      	ldr	r2, [pc, #300]	@ (8001b4c <menu+0x1074>)
 8001a20:	2101      	movs	r1, #1
 8001a22:	2002      	movs	r0, #2
 8001a24:	f006 fccf 	bl	80083c6 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 8001a28:	4b49      	ldr	r3, [pc, #292]	@ (8001b50 <menu+0x1078>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	220a      	movs	r2, #10
 8001a2e:	4949      	ldr	r1, [pc, #292]	@ (8001b54 <menu+0x107c>)
 8001a30:	4618      	mov	r0, r3
 8001a32:	f00a f9c5 	bl	800bdc0 <itoa>
		lcd_print(2,16,snum);
 8001a36:	4a47      	ldr	r2, [pc, #284]	@ (8001b54 <menu+0x107c>)
 8001a38:	2110      	movs	r1, #16
 8001a3a:	2002      	movs	r0, #2
 8001a3c:	f006 fcc3 	bl	80083c6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001a40:	2102      	movs	r1, #2
 8001a42:	483c      	ldr	r0, [pc, #240]	@ (8001b34 <menu+0x105c>)
 8001a44:	f007 fe1a 	bl	800967c <HAL_GPIO_ReadPin>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d119      	bne.n	8001a82 <menu+0xfaa>
 8001a4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b38 <menu+0x1060>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	f083 0301 	eor.w	r3, r3, #1
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d012      	beq.n	8001a82 <menu+0xfaa>
 8001a5c:	4b33      	ldr	r3, [pc, #204]	@ (8001b2c <menu+0x1054>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10e      	bne.n	8001a82 <menu+0xfaa>
			kapi1AcSure = kapi1AcSure + 1;
 8001a64:	4b3a      	ldr	r3, [pc, #232]	@ (8001b50 <menu+0x1078>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b38      	ldr	r3, [pc, #224]	@ (8001b50 <menu+0x1078>)
 8001a6e:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8001a70:	4b37      	ldr	r3, [pc, #220]	@ (8001b50 <menu+0x1078>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b05      	cmp	r3, #5
 8001a76:	d902      	bls.n	8001a7e <menu+0xfa6>
				kapi1AcSure = 0;
 8001a78:	4b35      	ldr	r3, [pc, #212]	@ (8001b50 <menu+0x1078>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a7e:	f001 fc39 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001a82:	2104      	movs	r1, #4
 8001a84:	482b      	ldr	r0, [pc, #172]	@ (8001b34 <menu+0x105c>)
 8001a86:	f007 fdf9 	bl	800967c <HAL_GPIO_ReadPin>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d119      	bne.n	8001ac4 <menu+0xfec>
 8001a90:	4b29      	ldr	r3, [pc, #164]	@ (8001b38 <menu+0x1060>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	f083 0301 	eor.w	r3, r3, #1
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d012      	beq.n	8001ac4 <menu+0xfec>
 8001a9e:	4b23      	ldr	r3, [pc, #140]	@ (8001b2c <menu+0x1054>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10e      	bne.n	8001ac4 <menu+0xfec>
			kapi1AcSure = kapi1AcSure - 1;
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b50 <menu+0x1078>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b28      	ldr	r3, [pc, #160]	@ (8001b50 <menu+0x1078>)
 8001ab0:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8001ab2:	4b27      	ldr	r3, [pc, #156]	@ (8001b50 <menu+0x1078>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d902      	bls.n	8001ac0 <menu+0xfe8>
		   		kapi1AcSure = 5;
 8001aba:	4b25      	ldr	r3, [pc, #148]	@ (8001b50 <menu+0x1078>)
 8001abc:	2205      	movs	r2, #5
 8001abe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001ac0:	f001 fc18 	bl	80032f4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ac4:	2108      	movs	r1, #8
 8001ac6:	481b      	ldr	r0, [pc, #108]	@ (8001b34 <menu+0x105c>)
 8001ac8:	f007 fdd8 	bl	800967c <HAL_GPIO_ReadPin>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d10d      	bne.n	8001aee <menu+0x1016>
 8001ad2:	4b19      	ldr	r3, [pc, #100]	@ (8001b38 <menu+0x1060>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	f083 0301 	eor.w	r3, r3, #1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d006      	beq.n	8001aee <menu+0x1016>
			eepromData[9] = kapi1AcSure;
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b50 <menu+0x1078>)
 8001ae2:	781a      	ldrb	r2, [r3, #0]
 8001ae4:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <menu+0x1064>)
 8001ae6:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8001ae8:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <menu+0x1068>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <menu+0x106c>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b0b      	cmp	r3, #11
 8001af4:	f040 8090 	bne.w	8001c18 <menu+0x1140>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 8001af8:	4a17      	ldr	r2, [pc, #92]	@ (8001b58 <menu+0x1080>)
 8001afa:	2101      	movs	r1, #1
 8001afc:	2001      	movs	r0, #1
 8001afe:	f006 fc62 	bl	80083c6 <lcd_print>

		if(kapi2Tip == 0) {
 8001b02:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <menu+0x1084>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d105      	bne.n	8001b16 <menu+0x103e>
			lcd_print(2, 1, prudhomeTextGN);
 8001b0a:	4a15      	ldr	r2, [pc, #84]	@ (8001b60 <menu+0x1088>)
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f006 fc59 	bl	80083c6 <lcd_print>
 8001b14:	e031      	b.n	8001b7a <menu+0x10a2>
		} else if(kapi2Tip == 1) {
 8001b16:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <menu+0x1084>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d124      	bne.n	8001b68 <menu+0x1090>
			lcd_print(2, 1, butonKontrolluText);
 8001b1e:	4a11      	ldr	r2, [pc, #68]	@ (8001b64 <menu+0x108c>)
 8001b20:	2101      	movs	r1, #1
 8001b22:	2002      	movs	r0, #2
 8001b24:	f006 fc4f 	bl	80083c6 <lcd_print>
 8001b28:	e027      	b.n	8001b7a <menu+0x10a2>
 8001b2a:	bf00      	nop
 8001b2c:	20000da9 	.word	0x20000da9
 8001b30:	200000a8 	.word	0x200000a8
 8001b34:	40010800 	.word	0x40010800
 8001b38:	20000dcf 	.word	0x20000dcf
 8001b3c:	20000d00 	.word	0x20000d00
 8001b40:	20000dcc 	.word	0x20000dcc
 8001b44:	20000da0 	.word	0x20000da0
 8001b48:	2000109c 	.word	0x2000109c
 8001b4c:	200010b0 	.word	0x200010b0
 8001b50:	20000db9 	.word	0x20000db9
 8001b54:	20000d70 	.word	0x20000d70
 8001b58:	200010c4 	.word	0x200010c4
 8001b5c:	20000daa 	.word	0x20000daa
 8001b60:	20000094 	.word	0x20000094
 8001b64:	20001088 	.word	0x20001088
		} else if(kapi2Tip == 2) {
 8001b68:	4b73      	ldr	r3, [pc, #460]	@ (8001d38 <menu+0x1260>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d104      	bne.n	8001b7a <menu+0x10a2>
			lcd_print(2, 1, pizzattoTextGN);
 8001b70:	4a72      	ldr	r2, [pc, #456]	@ (8001d3c <menu+0x1264>)
 8001b72:	2101      	movs	r1, #1
 8001b74:	2002      	movs	r0, #2
 8001b76:	f006 fc26 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	4870      	ldr	r0, [pc, #448]	@ (8001d40 <menu+0x1268>)
 8001b7e:	f007 fd7d 	bl	800967c <HAL_GPIO_ReadPin>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d115      	bne.n	8001bb4 <menu+0x10dc>
 8001b88:	4b6e      	ldr	r3, [pc, #440]	@ (8001d44 <menu+0x126c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	f083 0301 	eor.w	r3, r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00e      	beq.n	8001bb4 <menu+0x10dc>
			kapi2Tip = kapi2Tip + 1;
 8001b96:	4b68      	ldr	r3, [pc, #416]	@ (8001d38 <menu+0x1260>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4b66      	ldr	r3, [pc, #408]	@ (8001d38 <menu+0x1260>)
 8001ba0:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8001ba2:	4b65      	ldr	r3, [pc, #404]	@ (8001d38 <menu+0x1260>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d902      	bls.n	8001bb0 <menu+0x10d8>
				kapi2Tip = 0;
 8001baa:	4b63      	ldr	r3, [pc, #396]	@ (8001d38 <menu+0x1260>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bb0:	f001 fba0 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bb4:	2104      	movs	r1, #4
 8001bb6:	4862      	ldr	r0, [pc, #392]	@ (8001d40 <menu+0x1268>)
 8001bb8:	f007 fd60 	bl	800967c <HAL_GPIO_ReadPin>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d115      	bne.n	8001bee <menu+0x1116>
 8001bc2:	4b60      	ldr	r3, [pc, #384]	@ (8001d44 <menu+0x126c>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	f083 0301 	eor.w	r3, r3, #1
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00e      	beq.n	8001bee <menu+0x1116>
			kapi2Tip = kapi2Tip - 1;
 8001bd0:	4b59      	ldr	r3, [pc, #356]	@ (8001d38 <menu+0x1260>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4b57      	ldr	r3, [pc, #348]	@ (8001d38 <menu+0x1260>)
 8001bda:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8001bdc:	4b56      	ldr	r3, [pc, #344]	@ (8001d38 <menu+0x1260>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d902      	bls.n	8001bea <menu+0x1112>
		   		kapi2Tip = 2;
 8001be4:	4b54      	ldr	r3, [pc, #336]	@ (8001d38 <menu+0x1260>)
 8001be6:	2202      	movs	r2, #2
 8001be8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001bea:	f001 fb83 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bee:	2108      	movs	r1, #8
 8001bf0:	4853      	ldr	r0, [pc, #332]	@ (8001d40 <menu+0x1268>)
 8001bf2:	f007 fd43 	bl	800967c <HAL_GPIO_ReadPin>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d10d      	bne.n	8001c18 <menu+0x1140>
 8001bfc:	4b51      	ldr	r3, [pc, #324]	@ (8001d44 <menu+0x126c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	f083 0301 	eor.w	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d006      	beq.n	8001c18 <menu+0x1140>
			eepromData[10] = kapi2Tip;
 8001c0a:	4b4b      	ldr	r3, [pc, #300]	@ (8001d38 <menu+0x1260>)
 8001c0c:	781a      	ldrb	r2, [r3, #0]
 8001c0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001d48 <menu+0x1270>)
 8001c10:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8001c12:	4b4e      	ldr	r3, [pc, #312]	@ (8001d4c <menu+0x1274>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8001c18:	4b4d      	ldr	r3, [pc, #308]	@ (8001d50 <menu+0x1278>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b0c      	cmp	r3, #12
 8001c1e:	d16c      	bne.n	8001cfa <menu+0x1222>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 8001c20:	4a4c      	ldr	r2, [pc, #304]	@ (8001d54 <menu+0x127c>)
 8001c22:	2101      	movs	r1, #1
 8001c24:	2001      	movs	r0, #1
 8001c26:	f006 fbce 	bl	80083c6 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8001c2a:	4a4b      	ldr	r2, [pc, #300]	@ (8001d58 <menu+0x1280>)
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	2002      	movs	r0, #2
 8001c30:	f006 fbc9 	bl	80083c6 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 8001c34:	4b49      	ldr	r3, [pc, #292]	@ (8001d5c <menu+0x1284>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	220a      	movs	r2, #10
 8001c3a:	4949      	ldr	r1, [pc, #292]	@ (8001d60 <menu+0x1288>)
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f00a f8bf 	bl	800bdc0 <itoa>
		lcd_print(2,16,snum);
 8001c42:	4a47      	ldr	r2, [pc, #284]	@ (8001d60 <menu+0x1288>)
 8001c44:	2110      	movs	r1, #16
 8001c46:	2002      	movs	r0, #2
 8001c48:	f006 fbbd 	bl	80083c6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001c4c:	2102      	movs	r1, #2
 8001c4e:	483c      	ldr	r0, [pc, #240]	@ (8001d40 <menu+0x1268>)
 8001c50:	f007 fd14 	bl	800967c <HAL_GPIO_ReadPin>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d119      	bne.n	8001c8e <menu+0x11b6>
 8001c5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d44 <menu+0x126c>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	f083 0301 	eor.w	r3, r3, #1
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d012      	beq.n	8001c8e <menu+0x11b6>
 8001c68:	4b33      	ldr	r3, [pc, #204]	@ (8001d38 <menu+0x1260>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10e      	bne.n	8001c8e <menu+0x11b6>
			kapi2AcSure = kapi2AcSure + 1;
 8001c70:	4b3a      	ldr	r3, [pc, #232]	@ (8001d5c <menu+0x1284>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	4b38      	ldr	r3, [pc, #224]	@ (8001d5c <menu+0x1284>)
 8001c7a:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8001c7c:	4b37      	ldr	r3, [pc, #220]	@ (8001d5c <menu+0x1284>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b05      	cmp	r3, #5
 8001c82:	d902      	bls.n	8001c8a <menu+0x11b2>
				kapi2AcSure = 0;
 8001c84:	4b35      	ldr	r3, [pc, #212]	@ (8001d5c <menu+0x1284>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c8a:	f001 fb33 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001c8e:	2104      	movs	r1, #4
 8001c90:	482b      	ldr	r0, [pc, #172]	@ (8001d40 <menu+0x1268>)
 8001c92:	f007 fcf3 	bl	800967c <HAL_GPIO_ReadPin>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d119      	bne.n	8001cd0 <menu+0x11f8>
 8001c9c:	4b29      	ldr	r3, [pc, #164]	@ (8001d44 <menu+0x126c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	f083 0301 	eor.w	r3, r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d012      	beq.n	8001cd0 <menu+0x11f8>
 8001caa:	4b23      	ldr	r3, [pc, #140]	@ (8001d38 <menu+0x1260>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10e      	bne.n	8001cd0 <menu+0x11f8>
			kapi2AcSure = kapi2AcSure - 1;
 8001cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d5c <menu+0x1284>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4b28      	ldr	r3, [pc, #160]	@ (8001d5c <menu+0x1284>)
 8001cbc:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8001cbe:	4b27      	ldr	r3, [pc, #156]	@ (8001d5c <menu+0x1284>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <menu+0x11f4>
		   		kapi2AcSure = 5;
 8001cc6:	4b25      	ldr	r3, [pc, #148]	@ (8001d5c <menu+0x1284>)
 8001cc8:	2205      	movs	r2, #5
 8001cca:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001ccc:	f001 fb12 	bl	80032f4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cd0:	2108      	movs	r1, #8
 8001cd2:	481b      	ldr	r0, [pc, #108]	@ (8001d40 <menu+0x1268>)
 8001cd4:	f007 fcd2 	bl	800967c <HAL_GPIO_ReadPin>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d10d      	bne.n	8001cfa <menu+0x1222>
 8001cde:	4b19      	ldr	r3, [pc, #100]	@ (8001d44 <menu+0x126c>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	f083 0301 	eor.w	r3, r3, #1
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d006      	beq.n	8001cfa <menu+0x1222>
			eepromData[11] = kapi2AcSure;
 8001cec:	4b1b      	ldr	r3, [pc, #108]	@ (8001d5c <menu+0x1284>)
 8001cee:	781a      	ldrb	r2, [r3, #0]
 8001cf0:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <menu+0x1270>)
 8001cf2:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8001cf4:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <menu+0x1274>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <menu+0x1278>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b0d      	cmp	r3, #13
 8001d00:	f040 8090 	bne.w	8001e24 <menu+0x134c>
		lcd_print(1, 1, tablaKapiTipiText);
 8001d04:	4a17      	ldr	r2, [pc, #92]	@ (8001d64 <menu+0x128c>)
 8001d06:	2101      	movs	r1, #1
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f006 fb5c 	bl	80083c6 <lcd_print>

		if(kapitablaTip == 0) {
 8001d0e:	4b16      	ldr	r3, [pc, #88]	@ (8001d68 <menu+0x1290>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d105      	bne.n	8001d22 <menu+0x124a>
			lcd_print(2, 1, prudhomeTextGN);
 8001d16:	4a15      	ldr	r2, [pc, #84]	@ (8001d6c <menu+0x1294>)
 8001d18:	2101      	movs	r1, #1
 8001d1a:	2002      	movs	r0, #2
 8001d1c:	f006 fb53 	bl	80083c6 <lcd_print>
 8001d20:	e031      	b.n	8001d86 <menu+0x12ae>
		} else if(kapitablaTip == 1) {
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <menu+0x1290>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d124      	bne.n	8001d74 <menu+0x129c>
			lcd_print(2, 1, butonKontrolluText);
 8001d2a:	4a11      	ldr	r2, [pc, #68]	@ (8001d70 <menu+0x1298>)
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	2002      	movs	r0, #2
 8001d30:	f006 fb49 	bl	80083c6 <lcd_print>
 8001d34:	e027      	b.n	8001d86 <menu+0x12ae>
 8001d36:	bf00      	nop
 8001d38:	20000daa 	.word	0x20000daa
 8001d3c:	200000a8 	.word	0x200000a8
 8001d40:	40010800 	.word	0x40010800
 8001d44:	20000dcf 	.word	0x20000dcf
 8001d48:	20000d00 	.word	0x20000d00
 8001d4c:	20000dcc 	.word	0x20000dcc
 8001d50:	20000da0 	.word	0x20000da0
 8001d54:	200010d8 	.word	0x200010d8
 8001d58:	200010b0 	.word	0x200010b0
 8001d5c:	20000dba 	.word	0x20000dba
 8001d60:	20000d70 	.word	0x20000d70
 8001d64:	200010ec 	.word	0x200010ec
 8001d68:	20000dab 	.word	0x20000dab
 8001d6c:	20000094 	.word	0x20000094
 8001d70:	20001088 	.word	0x20001088
		} else if(kapitablaTip == 2) {
 8001d74:	4b3f      	ldr	r3, [pc, #252]	@ (8001e74 <menu+0x139c>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d104      	bne.n	8001d86 <menu+0x12ae>
			lcd_print(2, 1, pizzattoTextGN);
 8001d7c:	4a3e      	ldr	r2, [pc, #248]	@ (8001e78 <menu+0x13a0>)
 8001d7e:	2101      	movs	r1, #1
 8001d80:	2002      	movs	r0, #2
 8001d82:	f006 fb20 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d86:	2102      	movs	r1, #2
 8001d88:	483c      	ldr	r0, [pc, #240]	@ (8001e7c <menu+0x13a4>)
 8001d8a:	f007 fc77 	bl	800967c <HAL_GPIO_ReadPin>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d115      	bne.n	8001dc0 <menu+0x12e8>
 8001d94:	4b3a      	ldr	r3, [pc, #232]	@ (8001e80 <menu+0x13a8>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	f083 0301 	eor.w	r3, r3, #1
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00e      	beq.n	8001dc0 <menu+0x12e8>
			kapitablaTip = kapitablaTip + 1;
 8001da2:	4b34      	ldr	r3, [pc, #208]	@ (8001e74 <menu+0x139c>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	3301      	adds	r3, #1
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4b32      	ldr	r3, [pc, #200]	@ (8001e74 <menu+0x139c>)
 8001dac:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8001dae:	4b31      	ldr	r3, [pc, #196]	@ (8001e74 <menu+0x139c>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d902      	bls.n	8001dbc <menu+0x12e4>
				kapitablaTip = 0;
 8001db6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e74 <menu+0x139c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dbc:	f001 fa9a 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dc0:	2104      	movs	r1, #4
 8001dc2:	482e      	ldr	r0, [pc, #184]	@ (8001e7c <menu+0x13a4>)
 8001dc4:	f007 fc5a 	bl	800967c <HAL_GPIO_ReadPin>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d115      	bne.n	8001dfa <menu+0x1322>
 8001dce:	4b2c      	ldr	r3, [pc, #176]	@ (8001e80 <menu+0x13a8>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	f083 0301 	eor.w	r3, r3, #1
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00e      	beq.n	8001dfa <menu+0x1322>
			kapitablaTip = kapitablaTip - 1;
 8001ddc:	4b25      	ldr	r3, [pc, #148]	@ (8001e74 <menu+0x139c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	4b23      	ldr	r3, [pc, #140]	@ (8001e74 <menu+0x139c>)
 8001de6:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8001de8:	4b22      	ldr	r3, [pc, #136]	@ (8001e74 <menu+0x139c>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d902      	bls.n	8001df6 <menu+0x131e>
		   		kapitablaTip = 2;
 8001df0:	4b20      	ldr	r3, [pc, #128]	@ (8001e74 <menu+0x139c>)
 8001df2:	2202      	movs	r2, #2
 8001df4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001df6:	f001 fa7d 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dfa:	2108      	movs	r1, #8
 8001dfc:	481f      	ldr	r0, [pc, #124]	@ (8001e7c <menu+0x13a4>)
 8001dfe:	f007 fc3d 	bl	800967c <HAL_GPIO_ReadPin>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d10d      	bne.n	8001e24 <menu+0x134c>
 8001e08:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <menu+0x13a8>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	f083 0301 	eor.w	r3, r3, #1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d006      	beq.n	8001e24 <menu+0x134c>
			eepromData[12] = kapitablaTip;
 8001e16:	4b17      	ldr	r3, [pc, #92]	@ (8001e74 <menu+0x139c>)
 8001e18:	781a      	ldrb	r2, [r3, #0]
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <menu+0x13ac>)
 8001e1c:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e88 <menu+0x13b0>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8001e24:	4b19      	ldr	r3, [pc, #100]	@ (8001e8c <menu+0x13b4>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b0e      	cmp	r3, #14
 8001e2a:	f040 80a3 	bne.w	8001f74 <menu+0x149c>
		lcd_print(1, 1, tablaKapiAcKonumText);
 8001e2e:	4a18      	ldr	r2, [pc, #96]	@ (8001e90 <menu+0x13b8>)
 8001e30:	2101      	movs	r1, #1
 8001e32:	2001      	movs	r0, #1
 8001e34:	f006 fac7 	bl	80083c6 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 8001e38:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <menu+0x13bc>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d105      	bne.n	8001e4c <menu+0x1374>
			lcd_print(2, 1, birinciKattaAcText);
 8001e40:	4a15      	ldr	r2, [pc, #84]	@ (8001e98 <menu+0x13c0>)
 8001e42:	2101      	movs	r1, #1
 8001e44:	2002      	movs	r0, #2
 8001e46:	f006 fabe 	bl	80083c6 <lcd_print>
 8001e4a:	e034      	b.n	8001eb6 <menu+0x13de>
		} else if(kapiTablaAcKonum == 1) {
 8001e4c:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <menu+0x13bc>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <menu+0x1388>
			lcd_print(2, 1, ikinciKattaAcText);
 8001e54:	4a11      	ldr	r2, [pc, #68]	@ (8001e9c <menu+0x13c4>)
 8001e56:	2101      	movs	r1, #1
 8001e58:	2002      	movs	r0, #2
 8001e5a:	f006 fab4 	bl	80083c6 <lcd_print>
 8001e5e:	e02a      	b.n	8001eb6 <menu+0x13de>
		} else if(kapiTablaAcKonum == 2) {
 8001e60:	4b0c      	ldr	r3, [pc, #48]	@ (8001e94 <menu+0x13bc>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d11d      	bne.n	8001ea4 <menu+0x13cc>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8001e68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea0 <menu+0x13c8>)
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	2002      	movs	r0, #2
 8001e6e:	f006 faaa 	bl	80083c6 <lcd_print>
 8001e72:	e020      	b.n	8001eb6 <menu+0x13de>
 8001e74:	20000dab 	.word	0x20000dab
 8001e78:	200000a8 	.word	0x200000a8
 8001e7c:	40010800 	.word	0x40010800
 8001e80:	20000dcf 	.word	0x20000dcf
 8001e84:	20000d00 	.word	0x20000d00
 8001e88:	20000dcc 	.word	0x20000dcc
 8001e8c:	20000da0 	.word	0x20000da0
 8001e90:	20001100 	.word	0x20001100
 8001e94:	20000dad 	.word	0x20000dad
 8001e98:	20001114 	.word	0x20001114
 8001e9c:	20001128 	.word	0x20001128
 8001ea0:	2000113c 	.word	0x2000113c
		} else if(kapiTablaAcKonum == 3) {
 8001ea4:	4b76      	ldr	r3, [pc, #472]	@ (8002080 <menu+0x15a8>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d104      	bne.n	8001eb6 <menu+0x13de>
			lcd_print(2, 1, pasifText);
 8001eac:	4a75      	ldr	r2, [pc, #468]	@ (8002084 <menu+0x15ac>)
 8001eae:	2101      	movs	r1, #1
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	f006 fa88 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eb6:	2102      	movs	r1, #2
 8001eb8:	4873      	ldr	r0, [pc, #460]	@ (8002088 <menu+0x15b0>)
 8001eba:	f007 fbdf 	bl	800967c <HAL_GPIO_ReadPin>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d115      	bne.n	8001ef0 <menu+0x1418>
 8001ec4:	4b71      	ldr	r3, [pc, #452]	@ (800208c <menu+0x15b4>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	f083 0301 	eor.w	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00e      	beq.n	8001ef0 <menu+0x1418>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8001ed2:	4b6b      	ldr	r3, [pc, #428]	@ (8002080 <menu+0x15a8>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4b69      	ldr	r3, [pc, #420]	@ (8002080 <menu+0x15a8>)
 8001edc:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8001ede:	4b68      	ldr	r3, [pc, #416]	@ (8002080 <menu+0x15a8>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d902      	bls.n	8001eec <menu+0x1414>
				kapiTablaAcKonum = 0;
 8001ee6:	4b66      	ldr	r3, [pc, #408]	@ (8002080 <menu+0x15a8>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001eec:	f001 fa02 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ef0:	2104      	movs	r1, #4
 8001ef2:	4865      	ldr	r0, [pc, #404]	@ (8002088 <menu+0x15b0>)
 8001ef4:	f007 fbc2 	bl	800967c <HAL_GPIO_ReadPin>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d115      	bne.n	8001f2a <menu+0x1452>
 8001efe:	4b63      	ldr	r3, [pc, #396]	@ (800208c <menu+0x15b4>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	f083 0301 	eor.w	r3, r3, #1
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00e      	beq.n	8001f2a <menu+0x1452>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8001f0c:	4b5c      	ldr	r3, [pc, #368]	@ (8002080 <menu+0x15a8>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	4b5a      	ldr	r3, [pc, #360]	@ (8002080 <menu+0x15a8>)
 8001f16:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8001f18:	4b59      	ldr	r3, [pc, #356]	@ (8002080 <menu+0x15a8>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d902      	bls.n	8001f26 <menu+0x144e>
		   		kapiTablaAcKonum = 2;
 8001f20:	4b57      	ldr	r3, [pc, #348]	@ (8002080 <menu+0x15a8>)
 8001f22:	2202      	movs	r2, #2
 8001f24:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f26:	f001 f9e5 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f2a:	2108      	movs	r1, #8
 8001f2c:	4856      	ldr	r0, [pc, #344]	@ (8002088 <menu+0x15b0>)
 8001f2e:	f007 fba5 	bl	800967c <HAL_GPIO_ReadPin>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d11d      	bne.n	8001f74 <menu+0x149c>
 8001f38:	4b54      	ldr	r3, [pc, #336]	@ (800208c <menu+0x15b4>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	f083 0301 	eor.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d016      	beq.n	8001f74 <menu+0x149c>
			eepromData[34] = kapiTablaAcKonum;
 8001f46:	4b4e      	ldr	r3, [pc, #312]	@ (8002080 <menu+0x15a8>)
 8001f48:	781a      	ldrb	r2, [r3, #0]
 8001f4a:	4b51      	ldr	r3, [pc, #324]	@ (8002090 <menu+0x15b8>)
 8001f4c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8001f50:	4b4b      	ldr	r3, [pc, #300]	@ (8002080 <menu+0x15a8>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <menu+0x1488>
 8001f58:	4b49      	ldr	r3, [pc, #292]	@ (8002080 <menu+0x15a8>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d106      	bne.n	8001f6e <menu+0x1496>
				altLimit = 1;
 8001f60:	4b4c      	ldr	r3, [pc, #304]	@ (8002094 <menu+0x15bc>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001f66:	4b4b      	ldr	r3, [pc, #300]	@ (8002094 <menu+0x15bc>)
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	4b49      	ldr	r3, [pc, #292]	@ (8002090 <menu+0x15b8>)
 8001f6c:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002098 <menu+0x15c0>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8001f74:	4b49      	ldr	r3, [pc, #292]	@ (800209c <menu+0x15c4>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b0f      	cmp	r3, #15
 8001f7a:	d16c      	bne.n	8002056 <menu+0x157e>
		lcd_print(1, 1, tablaKapiAcSureText);
 8001f7c:	4a48      	ldr	r2, [pc, #288]	@ (80020a0 <menu+0x15c8>)
 8001f7e:	2101      	movs	r1, #1
 8001f80:	2001      	movs	r0, #1
 8001f82:	f006 fa20 	bl	80083c6 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8001f86:	4a47      	ldr	r2, [pc, #284]	@ (80020a4 <menu+0x15cc>)
 8001f88:	2101      	movs	r1, #1
 8001f8a:	2002      	movs	r0, #2
 8001f8c:	f006 fa1b 	bl	80083c6 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8001f90:	4b45      	ldr	r3, [pc, #276]	@ (80020a8 <menu+0x15d0>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	220a      	movs	r2, #10
 8001f96:	4945      	ldr	r1, [pc, #276]	@ (80020ac <menu+0x15d4>)
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f009 ff11 	bl	800bdc0 <itoa>
		lcd_print(2,16,snum);
 8001f9e:	4a43      	ldr	r2, [pc, #268]	@ (80020ac <menu+0x15d4>)
 8001fa0:	2110      	movs	r1, #16
 8001fa2:	2002      	movs	r0, #2
 8001fa4:	f006 fa0f 	bl	80083c6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8001fa8:	2102      	movs	r1, #2
 8001faa:	4837      	ldr	r0, [pc, #220]	@ (8002088 <menu+0x15b0>)
 8001fac:	f007 fb66 	bl	800967c <HAL_GPIO_ReadPin>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d119      	bne.n	8001fea <menu+0x1512>
 8001fb6:	4b35      	ldr	r3, [pc, #212]	@ (800208c <menu+0x15b4>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	f083 0301 	eor.w	r3, r3, #1
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d012      	beq.n	8001fea <menu+0x1512>
 8001fc4:	4b3a      	ldr	r3, [pc, #232]	@ (80020b0 <menu+0x15d8>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10e      	bne.n	8001fea <menu+0x1512>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8001fcc:	4b36      	ldr	r3, [pc, #216]	@ (80020a8 <menu+0x15d0>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	4b34      	ldr	r3, [pc, #208]	@ (80020a8 <menu+0x15d0>)
 8001fd6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8001fd8:	4b33      	ldr	r3, [pc, #204]	@ (80020a8 <menu+0x15d0>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	d902      	bls.n	8001fe6 <menu+0x150e>
				kapiTablaAcSure = 0;
 8001fe0:	4b31      	ldr	r3, [pc, #196]	@ (80020a8 <menu+0x15d0>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fe6:	f001 f985 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8001fea:	2104      	movs	r1, #4
 8001fec:	4826      	ldr	r0, [pc, #152]	@ (8002088 <menu+0x15b0>)
 8001fee:	f007 fb45 	bl	800967c <HAL_GPIO_ReadPin>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d119      	bne.n	800202c <menu+0x1554>
 8001ff8:	4b24      	ldr	r3, [pc, #144]	@ (800208c <menu+0x15b4>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	f083 0301 	eor.w	r3, r3, #1
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d012      	beq.n	800202c <menu+0x1554>
 8002006:	4b2a      	ldr	r3, [pc, #168]	@ (80020b0 <menu+0x15d8>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10e      	bne.n	800202c <menu+0x1554>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800200e:	4b26      	ldr	r3, [pc, #152]	@ (80020a8 <menu+0x15d0>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	3b01      	subs	r3, #1
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4b24      	ldr	r3, [pc, #144]	@ (80020a8 <menu+0x15d0>)
 8002018:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800201a:	4b23      	ldr	r3, [pc, #140]	@ (80020a8 <menu+0x15d0>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <menu+0x1550>
		   		kapiTablaAcSure = 5;
 8002022:	4b21      	ldr	r3, [pc, #132]	@ (80020a8 <menu+0x15d0>)
 8002024:	2205      	movs	r2, #5
 8002026:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002028:	f001 f964 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800202c:	2108      	movs	r1, #8
 800202e:	4816      	ldr	r0, [pc, #88]	@ (8002088 <menu+0x15b0>)
 8002030:	f007 fb24 	bl	800967c <HAL_GPIO_ReadPin>
 8002034:	4603      	mov	r3, r0
 8002036:	2b01      	cmp	r3, #1
 8002038:	d10d      	bne.n	8002056 <menu+0x157e>
 800203a:	4b14      	ldr	r3, [pc, #80]	@ (800208c <menu+0x15b4>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	f083 0301 	eor.w	r3, r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <menu+0x157e>
			eepromData[13] = kapiTablaAcSure;
 8002048:	4b17      	ldr	r3, [pc, #92]	@ (80020a8 <menu+0x15d0>)
 800204a:	781a      	ldrb	r2, [r3, #0]
 800204c:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <menu+0x15b8>)
 800204e:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002050:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <menu+0x15c0>)
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002056:	4b11      	ldr	r3, [pc, #68]	@ (800209c <menu+0x15c4>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b10      	cmp	r3, #16
 800205c:	f040 8086 	bne.w	800216c <menu+0x1694>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002060:	4a14      	ldr	r2, [pc, #80]	@ (80020b4 <menu+0x15dc>)
 8002062:	2101      	movs	r1, #1
 8002064:	2001      	movs	r0, #1
 8002066:	f006 f9ae 	bl	80083c6 <lcd_print>

		if(yukariYavasLimit == 0) {
 800206a:	4b13      	ldr	r3, [pc, #76]	@ (80020b8 <menu+0x15e0>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d124      	bne.n	80020bc <menu+0x15e4>
			lcd_print(2, 1, pasifText);
 8002072:	4a04      	ldr	r2, [pc, #16]	@ (8002084 <menu+0x15ac>)
 8002074:	2101      	movs	r1, #1
 8002076:	2002      	movs	r0, #2
 8002078:	f006 f9a5 	bl	80083c6 <lcd_print>
 800207c:	e027      	b.n	80020ce <menu+0x15f6>
 800207e:	bf00      	nop
 8002080:	20000dad 	.word	0x20000dad
 8002084:	20000f84 	.word	0x20000f84
 8002088:	40010800 	.word	0x40010800
 800208c:	20000dcf 	.word	0x20000dcf
 8002090:	20000d00 	.word	0x20000d00
 8002094:	20000da6 	.word	0x20000da6
 8002098:	20000dcc 	.word	0x20000dcc
 800209c:	20000da0 	.word	0x20000da0
 80020a0:	20001150 	.word	0x20001150
 80020a4:	200010b0 	.word	0x200010b0
 80020a8:	20000dbb 	.word	0x20000dbb
 80020ac:	20000d70 	.word	0x20000d70
 80020b0:	20000dab 	.word	0x20000dab
 80020b4:	20001164 	.word	0x20001164
 80020b8:	20000dae 	.word	0x20000dae
		} else if(yukariYavasLimit == 1) {
 80020bc:	4b84      	ldr	r3, [pc, #528]	@ (80022d0 <menu+0x17f8>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d104      	bne.n	80020ce <menu+0x15f6>
			lcd_print(2, 1, aktifText);
 80020c4:	4a83      	ldr	r2, [pc, #524]	@ (80022d4 <menu+0x17fc>)
 80020c6:	2101      	movs	r1, #1
 80020c8:	2002      	movs	r0, #2
 80020ca:	f006 f97c 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020ce:	2102      	movs	r1, #2
 80020d0:	4881      	ldr	r0, [pc, #516]	@ (80022d8 <menu+0x1800>)
 80020d2:	f007 fad3 	bl	800967c <HAL_GPIO_ReadPin>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d115      	bne.n	8002108 <menu+0x1630>
 80020dc:	4b7f      	ldr	r3, [pc, #508]	@ (80022dc <menu+0x1804>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	f083 0301 	eor.w	r3, r3, #1
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00e      	beq.n	8002108 <menu+0x1630>
			yukariYavasLimit = yukariYavasLimit + 1;
 80020ea:	4b79      	ldr	r3, [pc, #484]	@ (80022d0 <menu+0x17f8>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	3301      	adds	r3, #1
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4b77      	ldr	r3, [pc, #476]	@ (80022d0 <menu+0x17f8>)
 80020f4:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80020f6:	4b76      	ldr	r3, [pc, #472]	@ (80022d0 <menu+0x17f8>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d902      	bls.n	8002104 <menu+0x162c>
				yukariYavasLimit = 0;
 80020fe:	4b74      	ldr	r3, [pc, #464]	@ (80022d0 <menu+0x17f8>)
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002104:	f001 f8f6 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002108:	2104      	movs	r1, #4
 800210a:	4873      	ldr	r0, [pc, #460]	@ (80022d8 <menu+0x1800>)
 800210c:	f007 fab6 	bl	800967c <HAL_GPIO_ReadPin>
 8002110:	4603      	mov	r3, r0
 8002112:	2b01      	cmp	r3, #1
 8002114:	d115      	bne.n	8002142 <menu+0x166a>
 8002116:	4b71      	ldr	r3, [pc, #452]	@ (80022dc <menu+0x1804>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	f083 0301 	eor.w	r3, r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00e      	beq.n	8002142 <menu+0x166a>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002124:	4b6a      	ldr	r3, [pc, #424]	@ (80022d0 <menu+0x17f8>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	3b01      	subs	r3, #1
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b68      	ldr	r3, [pc, #416]	@ (80022d0 <menu+0x17f8>)
 800212e:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002130:	4b67      	ldr	r3, [pc, #412]	@ (80022d0 <menu+0x17f8>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <menu+0x1666>
		   		yukariYavasLimit = 1;
 8002138:	4b65      	ldr	r3, [pc, #404]	@ (80022d0 <menu+0x17f8>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800213e:	f001 f8d9 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002142:	2108      	movs	r1, #8
 8002144:	4864      	ldr	r0, [pc, #400]	@ (80022d8 <menu+0x1800>)
 8002146:	f007 fa99 	bl	800967c <HAL_GPIO_ReadPin>
 800214a:	4603      	mov	r3, r0
 800214c:	2b01      	cmp	r3, #1
 800214e:	d10d      	bne.n	800216c <menu+0x1694>
 8002150:	4b62      	ldr	r3, [pc, #392]	@ (80022dc <menu+0x1804>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	f083 0301 	eor.w	r3, r3, #1
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d006      	beq.n	800216c <menu+0x1694>
			eepromData[14] = yukariYavasLimit;
 800215e:	4b5c      	ldr	r3, [pc, #368]	@ (80022d0 <menu+0x17f8>)
 8002160:	781a      	ldrb	r2, [r3, #0]
 8002162:	4b5f      	ldr	r3, [pc, #380]	@ (80022e0 <menu+0x1808>)
 8002164:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002166:	4b5f      	ldr	r3, [pc, #380]	@ (80022e4 <menu+0x180c>)
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 800216c:	4b5e      	ldr	r3, [pc, #376]	@ (80022e8 <menu+0x1810>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b11      	cmp	r3, #17
 8002172:	f040 808b 	bne.w	800228c <menu+0x17b4>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002176:	4a5d      	ldr	r2, [pc, #372]	@ (80022ec <menu+0x1814>)
 8002178:	2101      	movs	r1, #1
 800217a:	2001      	movs	r0, #1
 800217c:	f006 f923 	bl	80083c6 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002180:	4b5b      	ldr	r3, [pc, #364]	@ (80022f0 <menu+0x1818>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d105      	bne.n	8002194 <menu+0x16bc>
			lcd_print(2, 1, devirmeAktifText);
 8002188:	4a5a      	ldr	r2, [pc, #360]	@ (80022f4 <menu+0x181c>)
 800218a:	2101      	movs	r1, #1
 800218c:	2002      	movs	r0, #2
 800218e:	f006 f91a 	bl	80083c6 <lcd_print>
 8002192:	e012      	b.n	80021ba <menu+0x16e2>
		} else if(devirmeYuruyusSecim == 1) {
 8002194:	4b56      	ldr	r3, [pc, #344]	@ (80022f0 <menu+0x1818>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d105      	bne.n	80021a8 <menu+0x16d0>
			lcd_print(2, 1, yuruyusAktifText);
 800219c:	4a56      	ldr	r2, [pc, #344]	@ (80022f8 <menu+0x1820>)
 800219e:	2101      	movs	r1, #1
 80021a0:	2002      	movs	r0, #2
 80021a2:	f006 f910 	bl	80083c6 <lcd_print>
 80021a6:	e008      	b.n	80021ba <menu+0x16e2>
		} else if(devirmeYuruyusSecim == 0) {
 80021a8:	4b51      	ldr	r3, [pc, #324]	@ (80022f0 <menu+0x1818>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d104      	bne.n	80021ba <menu+0x16e2>
			lcd_print(2, 1, pasifText);
 80021b0:	4a52      	ldr	r2, [pc, #328]	@ (80022fc <menu+0x1824>)
 80021b2:	2101      	movs	r1, #1
 80021b4:	2002      	movs	r0, #2
 80021b6:	f006 f906 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021ba:	2102      	movs	r1, #2
 80021bc:	4846      	ldr	r0, [pc, #280]	@ (80022d8 <menu+0x1800>)
 80021be:	f007 fa5d 	bl	800967c <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d115      	bne.n	80021f4 <menu+0x171c>
 80021c8:	4b44      	ldr	r3, [pc, #272]	@ (80022dc <menu+0x1804>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	f083 0301 	eor.w	r3, r3, #1
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00e      	beq.n	80021f4 <menu+0x171c>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80021d6:	4b46      	ldr	r3, [pc, #280]	@ (80022f0 <menu+0x1818>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b44      	ldr	r3, [pc, #272]	@ (80022f0 <menu+0x1818>)
 80021e0:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80021e2:	4b43      	ldr	r3, [pc, #268]	@ (80022f0 <menu+0x1818>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d902      	bls.n	80021f0 <menu+0x1718>
				devirmeYuruyusSecim = 0;
 80021ea:	4b41      	ldr	r3, [pc, #260]	@ (80022f0 <menu+0x1818>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021f0:	f001 f880 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021f4:	2104      	movs	r1, #4
 80021f6:	4838      	ldr	r0, [pc, #224]	@ (80022d8 <menu+0x1800>)
 80021f8:	f007 fa40 	bl	800967c <HAL_GPIO_ReadPin>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d115      	bne.n	800222e <menu+0x1756>
 8002202:	4b36      	ldr	r3, [pc, #216]	@ (80022dc <menu+0x1804>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	f083 0301 	eor.w	r3, r3, #1
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00e      	beq.n	800222e <menu+0x1756>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002210:	4b37      	ldr	r3, [pc, #220]	@ (80022f0 <menu+0x1818>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	3b01      	subs	r3, #1
 8002216:	b2da      	uxtb	r2, r3
 8002218:	4b35      	ldr	r3, [pc, #212]	@ (80022f0 <menu+0x1818>)
 800221a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 800221c:	4b34      	ldr	r3, [pc, #208]	@ (80022f0 <menu+0x1818>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d902      	bls.n	800222a <menu+0x1752>
		   		devirmeYuruyusSecim = 2;
 8002224:	4b32      	ldr	r3, [pc, #200]	@ (80022f0 <menu+0x1818>)
 8002226:	2202      	movs	r2, #2
 8002228:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800222a:	f001 f863 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800222e:	2108      	movs	r1, #8
 8002230:	4829      	ldr	r0, [pc, #164]	@ (80022d8 <menu+0x1800>)
 8002232:	f007 fa23 	bl	800967c <HAL_GPIO_ReadPin>
 8002236:	4603      	mov	r3, r0
 8002238:	2b01      	cmp	r3, #1
 800223a:	d127      	bne.n	800228c <menu+0x17b4>
 800223c:	4b27      	ldr	r3, [pc, #156]	@ (80022dc <menu+0x1804>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	f083 0301 	eor.w	r3, r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d020      	beq.n	800228c <menu+0x17b4>
			eepromData[15] = devirmeYuruyusSecim;
 800224a:	4b29      	ldr	r3, [pc, #164]	@ (80022f0 <menu+0x1818>)
 800224c:	781a      	ldrb	r2, [r3, #0]
 800224e:	4b24      	ldr	r3, [pc, #144]	@ (80022e0 <menu+0x1808>)
 8002250:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002252:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <menu+0x1818>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d003      	beq.n	8002262 <menu+0x178a>
 800225a:	4b25      	ldr	r3, [pc, #148]	@ (80022f0 <menu+0x1818>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d106      	bne.n	8002270 <menu+0x1798>
				calismaSekli = 0;
 8002262:	4b27      	ldr	r3, [pc, #156]	@ (8002300 <menu+0x1828>)
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002268:	4b25      	ldr	r3, [pc, #148]	@ (8002300 <menu+0x1828>)
 800226a:	781a      	ldrb	r2, [r3, #0]
 800226c:	4b1c      	ldr	r3, [pc, #112]	@ (80022e0 <menu+0x1808>)
 800226e:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002270:	4b1f      	ldr	r3, [pc, #124]	@ (80022f0 <menu+0x1818>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d106      	bne.n	8002286 <menu+0x17ae>
				devirmeSilindirTipi = 1;
 8002278:	4b22      	ldr	r3, [pc, #136]	@ (8002304 <menu+0x182c>)
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800227e:	4b21      	ldr	r3, [pc, #132]	@ (8002304 <menu+0x182c>)
 8002280:	781a      	ldrb	r2, [r3, #0]
 8002282:	4b17      	ldr	r3, [pc, #92]	@ (80022e0 <menu+0x1808>)
 8002284:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002286:	4b17      	ldr	r3, [pc, #92]	@ (80022e4 <menu+0x180c>)
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 800228c:	4b16      	ldr	r3, [pc, #88]	@ (80022e8 <menu+0x1810>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b12      	cmp	r3, #18
 8002292:	f040 8097 	bne.w	80023c4 <menu+0x18ec>
		if(devirmeYuruyusSecim == 2) {
 8002296:	4b16      	ldr	r3, [pc, #88]	@ (80022f0 <menu+0x1818>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d105      	bne.n	80022aa <menu+0x17d2>
			lcd_print(1, 1, devirmeYukariText);
 800229e:	4a1a      	ldr	r2, [pc, #104]	@ (8002308 <menu+0x1830>)
 80022a0:	2101      	movs	r1, #1
 80022a2:	2001      	movs	r0, #1
 80022a4:	f006 f88f 	bl	80083c6 <lcd_print>
 80022a8:	e008      	b.n	80022bc <menu+0x17e4>
		} else if(devirmeYuruyusSecim == 1) {
 80022aa:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <menu+0x1818>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d104      	bne.n	80022bc <menu+0x17e4>
			lcd_print(1, 1, yuruyusIleriText);
 80022b2:	4a16      	ldr	r2, [pc, #88]	@ (800230c <menu+0x1834>)
 80022b4:	2101      	movs	r1, #1
 80022b6:	2001      	movs	r0, #1
 80022b8:	f006 f885 	bl	80083c6 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 80022bc:	4b14      	ldr	r3, [pc, #80]	@ (8002310 <menu+0x1838>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d127      	bne.n	8002314 <menu+0x183c>
			lcd_print(2, 1, pasifText);
 80022c4:	4a0d      	ldr	r2, [pc, #52]	@ (80022fc <menu+0x1824>)
 80022c6:	2101      	movs	r1, #1
 80022c8:	2002      	movs	r0, #2
 80022ca:	f006 f87c 	bl	80083c6 <lcd_print>
 80022ce:	e02a      	b.n	8002326 <menu+0x184e>
 80022d0:	20000dae 	.word	0x20000dae
 80022d4:	20000f98 	.word	0x20000f98
 80022d8:	40010800 	.word	0x40010800
 80022dc:	20000dcf 	.word	0x20000dcf
 80022e0:	20000d00 	.word	0x20000d00
 80022e4:	20000dcc 	.word	0x20000dcc
 80022e8:	20000da0 	.word	0x20000da0
 80022ec:	20001178 	.word	0x20001178
 80022f0:	20000daf 	.word	0x20000daf
 80022f4:	2000118c 	.word	0x2000118c
 80022f8:	200011a0 	.word	0x200011a0
 80022fc:	20000f84 	.word	0x20000f84
 8002300:	20000da1 	.word	0x20000da1
 8002304:	20000db2 	.word	0x20000db2
 8002308:	200011b4 	.word	0x200011b4
 800230c:	200011c8 	.word	0x200011c8
 8002310:	20000db0 	.word	0x20000db0
		} else if(devirmeYukariIleriLimit == 1){
 8002314:	4b79      	ldr	r3, [pc, #484]	@ (80024fc <menu+0x1a24>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d104      	bne.n	8002326 <menu+0x184e>
			lcd_print(2, 1, aktifText);
 800231c:	4a78      	ldr	r2, [pc, #480]	@ (8002500 <menu+0x1a28>)
 800231e:	2101      	movs	r1, #1
 8002320:	2002      	movs	r0, #2
 8002322:	f006 f850 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002326:	2102      	movs	r1, #2
 8002328:	4876      	ldr	r0, [pc, #472]	@ (8002504 <menu+0x1a2c>)
 800232a:	f007 f9a7 	bl	800967c <HAL_GPIO_ReadPin>
 800232e:	4603      	mov	r3, r0
 8002330:	2b01      	cmp	r3, #1
 8002332:	d115      	bne.n	8002360 <menu+0x1888>
 8002334:	4b74      	ldr	r3, [pc, #464]	@ (8002508 <menu+0x1a30>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	f083 0301 	eor.w	r3, r3, #1
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00e      	beq.n	8002360 <menu+0x1888>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002342:	4b6e      	ldr	r3, [pc, #440]	@ (80024fc <menu+0x1a24>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	3301      	adds	r3, #1
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4b6c      	ldr	r3, [pc, #432]	@ (80024fc <menu+0x1a24>)
 800234c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800234e:	4b6b      	ldr	r3, [pc, #428]	@ (80024fc <menu+0x1a24>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d902      	bls.n	800235c <menu+0x1884>
				devirmeYukariIleriLimit = 0;
 8002356:	4b69      	ldr	r3, [pc, #420]	@ (80024fc <menu+0x1a24>)
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800235c:	f000 ffca 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002360:	2104      	movs	r1, #4
 8002362:	4868      	ldr	r0, [pc, #416]	@ (8002504 <menu+0x1a2c>)
 8002364:	f007 f98a 	bl	800967c <HAL_GPIO_ReadPin>
 8002368:	4603      	mov	r3, r0
 800236a:	2b01      	cmp	r3, #1
 800236c:	d115      	bne.n	800239a <menu+0x18c2>
 800236e:	4b66      	ldr	r3, [pc, #408]	@ (8002508 <menu+0x1a30>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	f083 0301 	eor.w	r3, r3, #1
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00e      	beq.n	800239a <menu+0x18c2>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800237c:	4b5f      	ldr	r3, [pc, #380]	@ (80024fc <menu+0x1a24>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	3b01      	subs	r3, #1
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4b5d      	ldr	r3, [pc, #372]	@ (80024fc <menu+0x1a24>)
 8002386:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002388:	4b5c      	ldr	r3, [pc, #368]	@ (80024fc <menu+0x1a24>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <menu+0x18be>
		   		devirmeYukariIleriLimit = 1;
 8002390:	4b5a      	ldr	r3, [pc, #360]	@ (80024fc <menu+0x1a24>)
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002396:	f000 ffad 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800239a:	2108      	movs	r1, #8
 800239c:	4859      	ldr	r0, [pc, #356]	@ (8002504 <menu+0x1a2c>)
 800239e:	f007 f96d 	bl	800967c <HAL_GPIO_ReadPin>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d10d      	bne.n	80023c4 <menu+0x18ec>
 80023a8:	4b57      	ldr	r3, [pc, #348]	@ (8002508 <menu+0x1a30>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	f083 0301 	eor.w	r3, r3, #1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d006      	beq.n	80023c4 <menu+0x18ec>
			eepromData[16] = devirmeYukariIleriLimit;
 80023b6:	4b51      	ldr	r3, [pc, #324]	@ (80024fc <menu+0x1a24>)
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	4b54      	ldr	r3, [pc, #336]	@ (800250c <menu+0x1a34>)
 80023bc:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80023be:	4b54      	ldr	r3, [pc, #336]	@ (8002510 <menu+0x1a38>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80023c4:	4b53      	ldr	r3, [pc, #332]	@ (8002514 <menu+0x1a3c>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b13      	cmp	r3, #19
 80023ca:	d174      	bne.n	80024b6 <menu+0x19de>
		if(devirmeYuruyusSecim == 2) {
 80023cc:	4b52      	ldr	r3, [pc, #328]	@ (8002518 <menu+0x1a40>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d105      	bne.n	80023e0 <menu+0x1908>
			lcd_print(1, 1, devirmeAsagiSivicText);
 80023d4:	4a51      	ldr	r2, [pc, #324]	@ (800251c <menu+0x1a44>)
 80023d6:	2101      	movs	r1, #1
 80023d8:	2001      	movs	r0, #1
 80023da:	f005 fff4 	bl	80083c6 <lcd_print>
 80023de:	e008      	b.n	80023f2 <menu+0x191a>
		} else if(devirmeYuruyusSecim == 1) {
 80023e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002518 <menu+0x1a40>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d104      	bne.n	80023f2 <menu+0x191a>
			lcd_print(1, 1, yuruyusGeriSivicText);
 80023e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002520 <menu+0x1a48>)
 80023ea:	2101      	movs	r1, #1
 80023ec:	2001      	movs	r0, #1
 80023ee:	f005 ffea 	bl	80083c6 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 80023f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002524 <menu+0x1a4c>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <menu+0x192e>
			lcd_print(2, 1, pasifText);
 80023fa:	4a4b      	ldr	r2, [pc, #300]	@ (8002528 <menu+0x1a50>)
 80023fc:	2101      	movs	r1, #1
 80023fe:	2002      	movs	r0, #2
 8002400:	f005 ffe1 	bl	80083c6 <lcd_print>
 8002404:	e008      	b.n	8002418 <menu+0x1940>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002406:	4b47      	ldr	r3, [pc, #284]	@ (8002524 <menu+0x1a4c>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d104      	bne.n	8002418 <menu+0x1940>
			lcd_print(2, 1, aktifText);
 800240e:	4a3c      	ldr	r2, [pc, #240]	@ (8002500 <menu+0x1a28>)
 8002410:	2101      	movs	r1, #1
 8002412:	2002      	movs	r0, #2
 8002414:	f005 ffd7 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002418:	2102      	movs	r1, #2
 800241a:	483a      	ldr	r0, [pc, #232]	@ (8002504 <menu+0x1a2c>)
 800241c:	f007 f92e 	bl	800967c <HAL_GPIO_ReadPin>
 8002420:	4603      	mov	r3, r0
 8002422:	2b01      	cmp	r3, #1
 8002424:	d115      	bne.n	8002452 <menu+0x197a>
 8002426:	4b38      	ldr	r3, [pc, #224]	@ (8002508 <menu+0x1a30>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	f083 0301 	eor.w	r3, r3, #1
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00e      	beq.n	8002452 <menu+0x197a>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002434:	4b3b      	ldr	r3, [pc, #236]	@ (8002524 <menu+0x1a4c>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	3301      	adds	r3, #1
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b39      	ldr	r3, [pc, #228]	@ (8002524 <menu+0x1a4c>)
 800243e:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002440:	4b38      	ldr	r3, [pc, #224]	@ (8002524 <menu+0x1a4c>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d902      	bls.n	800244e <menu+0x1976>
				devirmeAsagiGeriLimit = 0;
 8002448:	4b36      	ldr	r3, [pc, #216]	@ (8002524 <menu+0x1a4c>)
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800244e:	f000 ff51 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002452:	2104      	movs	r1, #4
 8002454:	482b      	ldr	r0, [pc, #172]	@ (8002504 <menu+0x1a2c>)
 8002456:	f007 f911 	bl	800967c <HAL_GPIO_ReadPin>
 800245a:	4603      	mov	r3, r0
 800245c:	2b01      	cmp	r3, #1
 800245e:	d115      	bne.n	800248c <menu+0x19b4>
 8002460:	4b29      	ldr	r3, [pc, #164]	@ (8002508 <menu+0x1a30>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	f083 0301 	eor.w	r3, r3, #1
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00e      	beq.n	800248c <menu+0x19b4>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 800246e:	4b2d      	ldr	r3, [pc, #180]	@ (8002524 <menu+0x1a4c>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	3b01      	subs	r3, #1
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b2b      	ldr	r3, [pc, #172]	@ (8002524 <menu+0x1a4c>)
 8002478:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800247a:	4b2a      	ldr	r3, [pc, #168]	@ (8002524 <menu+0x1a4c>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <menu+0x19b0>
		   		devirmeAsagiGeriLimit = 1;
 8002482:	4b28      	ldr	r3, [pc, #160]	@ (8002524 <menu+0x1a4c>)
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002488:	f000 ff34 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800248c:	2108      	movs	r1, #8
 800248e:	481d      	ldr	r0, [pc, #116]	@ (8002504 <menu+0x1a2c>)
 8002490:	f007 f8f4 	bl	800967c <HAL_GPIO_ReadPin>
 8002494:	4603      	mov	r3, r0
 8002496:	2b01      	cmp	r3, #1
 8002498:	d10d      	bne.n	80024b6 <menu+0x19de>
 800249a:	4b1b      	ldr	r3, [pc, #108]	@ (8002508 <menu+0x1a30>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	f083 0301 	eor.w	r3, r3, #1
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d006      	beq.n	80024b6 <menu+0x19de>
			eepromData[17] = devirmeAsagiGeriLimit;
 80024a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002524 <menu+0x1a4c>)
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	4b17      	ldr	r3, [pc, #92]	@ (800250c <menu+0x1a34>)
 80024ae:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80024b0:	4b17      	ldr	r3, [pc, #92]	@ (8002510 <menu+0x1a38>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80024b6:	4b17      	ldr	r3, [pc, #92]	@ (8002514 <menu+0x1a3c>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b14      	cmp	r3, #20
 80024bc:	f040 809e 	bne.w	80025fc <menu+0x1b24>
		if(devirmeYuruyusSecim == 1) {
 80024c0:	4b15      	ldr	r3, [pc, #84]	@ (8002518 <menu+0x1a40>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d105      	bne.n	80024d4 <menu+0x19fc>
			lcd_print(1, 1, yuruyusSecildiText);
 80024c8:	4a18      	ldr	r2, [pc, #96]	@ (800252c <menu+0x1a54>)
 80024ca:	2101      	movs	r1, #1
 80024cc:	2001      	movs	r0, #1
 80024ce:	f005 ff7a 	bl	80083c6 <lcd_print>
 80024d2:	e008      	b.n	80024e6 <menu+0x1a0e>
		} else if(devirmeYuruyusSecim == 2) {
 80024d4:	4b10      	ldr	r3, [pc, #64]	@ (8002518 <menu+0x1a40>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d104      	bne.n	80024e6 <menu+0x1a0e>
			lcd_print(1, 1, devirmeSilindirTipiText);
 80024dc:	4a14      	ldr	r2, [pc, #80]	@ (8002530 <menu+0x1a58>)
 80024de:	2101      	movs	r1, #1
 80024e0:	2001      	movs	r0, #1
 80024e2:	f005 ff70 	bl	80083c6 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 80024e6:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <menu+0x1a5c>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d126      	bne.n	800253c <menu+0x1a64>
			lcd_print(2, 1, tekTesirText);
 80024ee:	4a12      	ldr	r2, [pc, #72]	@ (8002538 <menu+0x1a60>)
 80024f0:	2101      	movs	r1, #1
 80024f2:	2002      	movs	r0, #2
 80024f4:	f005 ff67 	bl	80083c6 <lcd_print>
 80024f8:	e029      	b.n	800254e <menu+0x1a76>
 80024fa:	bf00      	nop
 80024fc:	20000db0 	.word	0x20000db0
 8002500:	20000f98 	.word	0x20000f98
 8002504:	40010800 	.word	0x40010800
 8002508:	20000dcf 	.word	0x20000dcf
 800250c:	20000d00 	.word	0x20000d00
 8002510:	20000dcc 	.word	0x20000dcc
 8002514:	20000da0 	.word	0x20000da0
 8002518:	20000daf 	.word	0x20000daf
 800251c:	200011dc 	.word	0x200011dc
 8002520:	200011f0 	.word	0x200011f0
 8002524:	20000db1 	.word	0x20000db1
 8002528:	20000f84 	.word	0x20000f84
 800252c:	20001204 	.word	0x20001204
 8002530:	20001218 	.word	0x20001218
 8002534:	20000db2 	.word	0x20000db2
 8002538:	2000122c 	.word	0x2000122c
		} else if(devirmeSilindirTipi == 1) {
 800253c:	4b39      	ldr	r3, [pc, #228]	@ (8002624 <menu+0x1b4c>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d104      	bne.n	800254e <menu+0x1a76>
			lcd_print(2, 1, ciftTesirText);
 8002544:	4a38      	ldr	r2, [pc, #224]	@ (8002628 <menu+0x1b50>)
 8002546:	2101      	movs	r1, #1
 8002548:	2002      	movs	r0, #2
 800254a:	f005 ff3c 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800254e:	2102      	movs	r1, #2
 8002550:	4836      	ldr	r0, [pc, #216]	@ (800262c <menu+0x1b54>)
 8002552:	f007 f893 	bl	800967c <HAL_GPIO_ReadPin>
 8002556:	4603      	mov	r3, r0
 8002558:	2b01      	cmp	r3, #1
 800255a:	d119      	bne.n	8002590 <menu+0x1ab8>
 800255c:	4b34      	ldr	r3, [pc, #208]	@ (8002630 <menu+0x1b58>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	f083 0301 	eor.w	r3, r3, #1
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d012      	beq.n	8002590 <menu+0x1ab8>
 800256a:	4b32      	ldr	r3, [pc, #200]	@ (8002634 <menu+0x1b5c>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d10e      	bne.n	8002590 <menu+0x1ab8>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002572:	4b2c      	ldr	r3, [pc, #176]	@ (8002624 <menu+0x1b4c>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	3301      	adds	r3, #1
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4b2a      	ldr	r3, [pc, #168]	@ (8002624 <menu+0x1b4c>)
 800257c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800257e:	4b29      	ldr	r3, [pc, #164]	@ (8002624 <menu+0x1b4c>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d902      	bls.n	800258c <menu+0x1ab4>
				devirmeSilindirTipi = 0;
 8002586:	4b27      	ldr	r3, [pc, #156]	@ (8002624 <menu+0x1b4c>)
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800258c:	f000 feb2 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002590:	2104      	movs	r1, #4
 8002592:	4826      	ldr	r0, [pc, #152]	@ (800262c <menu+0x1b54>)
 8002594:	f007 f872 	bl	800967c <HAL_GPIO_ReadPin>
 8002598:	4603      	mov	r3, r0
 800259a:	2b01      	cmp	r3, #1
 800259c:	d119      	bne.n	80025d2 <menu+0x1afa>
 800259e:	4b24      	ldr	r3, [pc, #144]	@ (8002630 <menu+0x1b58>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	f083 0301 	eor.w	r3, r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d012      	beq.n	80025d2 <menu+0x1afa>
 80025ac:	4b21      	ldr	r3, [pc, #132]	@ (8002634 <menu+0x1b5c>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d10e      	bne.n	80025d2 <menu+0x1afa>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80025b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002624 <menu+0x1b4c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b19      	ldr	r3, [pc, #100]	@ (8002624 <menu+0x1b4c>)
 80025be:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80025c0:	4b18      	ldr	r3, [pc, #96]	@ (8002624 <menu+0x1b4c>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <menu+0x1af6>
		   		devirmeSilindirTipi = 1;
 80025c8:	4b16      	ldr	r3, [pc, #88]	@ (8002624 <menu+0x1b4c>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025ce:	f000 fe91 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025d2:	2108      	movs	r1, #8
 80025d4:	4815      	ldr	r0, [pc, #84]	@ (800262c <menu+0x1b54>)
 80025d6:	f007 f851 	bl	800967c <HAL_GPIO_ReadPin>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d10d      	bne.n	80025fc <menu+0x1b24>
 80025e0:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <menu+0x1b58>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	f083 0301 	eor.w	r3, r3, #1
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d006      	beq.n	80025fc <menu+0x1b24>
			eepromData[18] = devirmeSilindirTipi;
 80025ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002624 <menu+0x1b4c>)
 80025f0:	781a      	ldrb	r2, [r3, #0]
 80025f2:	4b11      	ldr	r3, [pc, #68]	@ (8002638 <menu+0x1b60>)
 80025f4:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80025f6:	4b11      	ldr	r3, [pc, #68]	@ (800263c <menu+0x1b64>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80025fc:	4b10      	ldr	r3, [pc, #64]	@ (8002640 <menu+0x1b68>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b15      	cmp	r3, #21
 8002602:	f040 8088 	bne.w	8002716 <menu+0x1c3e>
		lcd_print(1, 1, platformSilindirTipiText);
 8002606:	4a0f      	ldr	r2, [pc, #60]	@ (8002644 <menu+0x1b6c>)
 8002608:	2101      	movs	r1, #1
 800260a:	2001      	movs	r0, #1
 800260c:	f005 fedb 	bl	80083c6 <lcd_print>

		if(platformSilindirTipi == 0) {
 8002610:	4b0d      	ldr	r3, [pc, #52]	@ (8002648 <menu+0x1b70>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d11b      	bne.n	8002650 <menu+0x1b78>
			lcd_print(2, 1, tekTesirText);
 8002618:	4a0c      	ldr	r2, [pc, #48]	@ (800264c <menu+0x1b74>)
 800261a:	2101      	movs	r1, #1
 800261c:	2002      	movs	r0, #2
 800261e:	f005 fed2 	bl	80083c6 <lcd_print>
 8002622:	e01e      	b.n	8002662 <menu+0x1b8a>
 8002624:	20000db2 	.word	0x20000db2
 8002628:	20001240 	.word	0x20001240
 800262c:	40010800 	.word	0x40010800
 8002630:	20000dcf 	.word	0x20000dcf
 8002634:	20000daf 	.word	0x20000daf
 8002638:	20000d00 	.word	0x20000d00
 800263c:	20000dcc 	.word	0x20000dcc
 8002640:	20000da0 	.word	0x20000da0
 8002644:	20001254 	.word	0x20001254
 8002648:	20000db3 	.word	0x20000db3
 800264c:	2000122c 	.word	0x2000122c
		} else if(platformSilindirTipi == 1) {
 8002650:	4ba1      	ldr	r3, [pc, #644]	@ (80028d8 <menu+0x1e00>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d104      	bne.n	8002662 <menu+0x1b8a>
			lcd_print(2, 1, ciftTesirText);
 8002658:	4aa0      	ldr	r2, [pc, #640]	@ (80028dc <menu+0x1e04>)
 800265a:	2101      	movs	r1, #1
 800265c:	2002      	movs	r0, #2
 800265e:	f005 feb2 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002662:	2102      	movs	r1, #2
 8002664:	489e      	ldr	r0, [pc, #632]	@ (80028e0 <menu+0x1e08>)
 8002666:	f007 f809 	bl	800967c <HAL_GPIO_ReadPin>
 800266a:	4603      	mov	r3, r0
 800266c:	2b01      	cmp	r3, #1
 800266e:	d115      	bne.n	800269c <menu+0x1bc4>
 8002670:	4b9c      	ldr	r3, [pc, #624]	@ (80028e4 <menu+0x1e0c>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	f083 0301 	eor.w	r3, r3, #1
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00e      	beq.n	800269c <menu+0x1bc4>
			platformSilindirTipi = platformSilindirTipi + 1;
 800267e:	4b96      	ldr	r3, [pc, #600]	@ (80028d8 <menu+0x1e00>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	3301      	adds	r3, #1
 8002684:	b2da      	uxtb	r2, r3
 8002686:	4b94      	ldr	r3, [pc, #592]	@ (80028d8 <menu+0x1e00>)
 8002688:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800268a:	4b93      	ldr	r3, [pc, #588]	@ (80028d8 <menu+0x1e00>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d902      	bls.n	8002698 <menu+0x1bc0>
				platformSilindirTipi = 0;
 8002692:	4b91      	ldr	r3, [pc, #580]	@ (80028d8 <menu+0x1e00>)
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002698:	f000 fe2c 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800269c:	2104      	movs	r1, #4
 800269e:	4890      	ldr	r0, [pc, #576]	@ (80028e0 <menu+0x1e08>)
 80026a0:	f006 ffec 	bl	800967c <HAL_GPIO_ReadPin>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d115      	bne.n	80026d6 <menu+0x1bfe>
 80026aa:	4b8e      	ldr	r3, [pc, #568]	@ (80028e4 <menu+0x1e0c>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	f083 0301 	eor.w	r3, r3, #1
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00e      	beq.n	80026d6 <menu+0x1bfe>
			platformSilindirTipi = platformSilindirTipi - 1;
 80026b8:	4b87      	ldr	r3, [pc, #540]	@ (80028d8 <menu+0x1e00>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	3b01      	subs	r3, #1
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	4b85      	ldr	r3, [pc, #532]	@ (80028d8 <menu+0x1e00>)
 80026c2:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80026c4:	4b84      	ldr	r3, [pc, #528]	@ (80028d8 <menu+0x1e00>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <menu+0x1bfa>
		   		platformSilindirTipi = 1;
 80026cc:	4b82      	ldr	r3, [pc, #520]	@ (80028d8 <menu+0x1e00>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026d2:	f000 fe0f 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026d6:	2108      	movs	r1, #8
 80026d8:	4881      	ldr	r0, [pc, #516]	@ (80028e0 <menu+0x1e08>)
 80026da:	f006 ffcf 	bl	800967c <HAL_GPIO_ReadPin>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d118      	bne.n	8002716 <menu+0x1c3e>
 80026e4:	4b7f      	ldr	r3, [pc, #508]	@ (80028e4 <menu+0x1e0c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	f083 0301 	eor.w	r3, r3, #1
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d011      	beq.n	8002716 <menu+0x1c3e>
			eepromData[19] = platformSilindirTipi;
 80026f2:	4b79      	ldr	r3, [pc, #484]	@ (80028d8 <menu+0x1e00>)
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	4b7c      	ldr	r3, [pc, #496]	@ (80028e8 <menu+0x1e10>)
 80026f8:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80026fa:	4b77      	ldr	r3, [pc, #476]	@ (80028d8 <menu+0x1e00>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d106      	bne.n	8002710 <menu+0x1c38>
				altLimit = 1;
 8002702:	4b7a      	ldr	r3, [pc, #488]	@ (80028ec <menu+0x1e14>)
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002708:	4b78      	ldr	r3, [pc, #480]	@ (80028ec <menu+0x1e14>)
 800270a:	781a      	ldrb	r2, [r3, #0]
 800270c:	4b76      	ldr	r3, [pc, #472]	@ (80028e8 <menu+0x1e10>)
 800270e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002710:	4b77      	ldr	r3, [pc, #476]	@ (80028f0 <menu+0x1e18>)
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002716:	4b77      	ldr	r3, [pc, #476]	@ (80028f4 <menu+0x1e1c>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b16      	cmp	r3, #22
 800271c:	d164      	bne.n	80027e8 <menu+0x1d10>
		lcd_print(1, 1, yukariValfSureText);
 800271e:	4a76      	ldr	r2, [pc, #472]	@ (80028f8 <menu+0x1e20>)
 8002720:	2101      	movs	r1, #1
 8002722:	2001      	movs	r0, #1
 8002724:	f005 fe4f 	bl	80083c6 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002728:	4a74      	ldr	r2, [pc, #464]	@ (80028fc <menu+0x1e24>)
 800272a:	2101      	movs	r1, #1
 800272c:	2002      	movs	r0, #2
 800272e:	f005 fe4a 	bl	80083c6 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8002732:	4b73      	ldr	r3, [pc, #460]	@ (8002900 <menu+0x1e28>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	220a      	movs	r2, #10
 8002738:	4972      	ldr	r1, [pc, #456]	@ (8002904 <menu+0x1e2c>)
 800273a:	4618      	mov	r0, r3
 800273c:	f009 fb40 	bl	800bdc0 <itoa>
		lcd_print(2,16,snum);
 8002740:	4a70      	ldr	r2, [pc, #448]	@ (8002904 <menu+0x1e2c>)
 8002742:	2110      	movs	r1, #16
 8002744:	2002      	movs	r0, #2
 8002746:	f005 fe3e 	bl	80083c6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800274a:	2102      	movs	r1, #2
 800274c:	4864      	ldr	r0, [pc, #400]	@ (80028e0 <menu+0x1e08>)
 800274e:	f006 ff95 	bl	800967c <HAL_GPIO_ReadPin>
 8002752:	4603      	mov	r3, r0
 8002754:	2b01      	cmp	r3, #1
 8002756:	d115      	bne.n	8002784 <menu+0x1cac>
 8002758:	4b62      	ldr	r3, [pc, #392]	@ (80028e4 <menu+0x1e0c>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	f083 0301 	eor.w	r3, r3, #1
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00e      	beq.n	8002784 <menu+0x1cac>
			yukariValfTmr = yukariValfTmr + 1;
 8002766:	4b66      	ldr	r3, [pc, #408]	@ (8002900 <menu+0x1e28>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4b64      	ldr	r3, [pc, #400]	@ (8002900 <menu+0x1e28>)
 8002770:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002772:	4b63      	ldr	r3, [pc, #396]	@ (8002900 <menu+0x1e28>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b05      	cmp	r3, #5
 8002778:	d902      	bls.n	8002780 <menu+0x1ca8>
				yukariValfTmr = 0;
 800277a:	4b61      	ldr	r3, [pc, #388]	@ (8002900 <menu+0x1e28>)
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002780:	f000 fdb8 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002784:	2104      	movs	r1, #4
 8002786:	4856      	ldr	r0, [pc, #344]	@ (80028e0 <menu+0x1e08>)
 8002788:	f006 ff78 	bl	800967c <HAL_GPIO_ReadPin>
 800278c:	4603      	mov	r3, r0
 800278e:	2b01      	cmp	r3, #1
 8002790:	d115      	bne.n	80027be <menu+0x1ce6>
 8002792:	4b54      	ldr	r3, [pc, #336]	@ (80028e4 <menu+0x1e0c>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	f083 0301 	eor.w	r3, r3, #1
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00e      	beq.n	80027be <menu+0x1ce6>
			yukariValfTmr = yukariValfTmr - 1;
 80027a0:	4b57      	ldr	r3, [pc, #348]	@ (8002900 <menu+0x1e28>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	4b55      	ldr	r3, [pc, #340]	@ (8002900 <menu+0x1e28>)
 80027aa:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80027ac:	4b54      	ldr	r3, [pc, #336]	@ (8002900 <menu+0x1e28>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b06      	cmp	r3, #6
 80027b2:	d902      	bls.n	80027ba <menu+0x1ce2>
		   		yukariValfTmr = 5;
 80027b4:	4b52      	ldr	r3, [pc, #328]	@ (8002900 <menu+0x1e28>)
 80027b6:	2205      	movs	r2, #5
 80027b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027ba:	f000 fd9b 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027be:	2108      	movs	r1, #8
 80027c0:	4847      	ldr	r0, [pc, #284]	@ (80028e0 <menu+0x1e08>)
 80027c2:	f006 ff5b 	bl	800967c <HAL_GPIO_ReadPin>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d10d      	bne.n	80027e8 <menu+0x1d10>
 80027cc:	4b45      	ldr	r3, [pc, #276]	@ (80028e4 <menu+0x1e0c>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	f083 0301 	eor.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d006      	beq.n	80027e8 <menu+0x1d10>
			eepromData[20] = yukariValfTmr;
 80027da:	4b49      	ldr	r3, [pc, #292]	@ (8002900 <menu+0x1e28>)
 80027dc:	781a      	ldrb	r2, [r3, #0]
 80027de:	4b42      	ldr	r3, [pc, #264]	@ (80028e8 <menu+0x1e10>)
 80027e0:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80027e2:	4b43      	ldr	r3, [pc, #268]	@ (80028f0 <menu+0x1e18>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80027e8:	4b42      	ldr	r3, [pc, #264]	@ (80028f4 <menu+0x1e1c>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b17      	cmp	r3, #23
 80027ee:	d164      	bne.n	80028ba <menu+0x1de2>
		lcd_print(1, 1, asagiValfSureText);
 80027f0:	4a45      	ldr	r2, [pc, #276]	@ (8002908 <menu+0x1e30>)
 80027f2:	2101      	movs	r1, #1
 80027f4:	2001      	movs	r0, #1
 80027f6:	f005 fde6 	bl	80083c6 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80027fa:	4a40      	ldr	r2, [pc, #256]	@ (80028fc <menu+0x1e24>)
 80027fc:	2101      	movs	r1, #1
 80027fe:	2002      	movs	r0, #2
 8002800:	f005 fde1 	bl	80083c6 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 8002804:	4b41      	ldr	r3, [pc, #260]	@ (800290c <menu+0x1e34>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	220a      	movs	r2, #10
 800280a:	493e      	ldr	r1, [pc, #248]	@ (8002904 <menu+0x1e2c>)
 800280c:	4618      	mov	r0, r3
 800280e:	f009 fad7 	bl	800bdc0 <itoa>
		lcd_print(2,16,snum);
 8002812:	4a3c      	ldr	r2, [pc, #240]	@ (8002904 <menu+0x1e2c>)
 8002814:	2110      	movs	r1, #16
 8002816:	2002      	movs	r0, #2
 8002818:	f005 fdd5 	bl	80083c6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800281c:	2102      	movs	r1, #2
 800281e:	4830      	ldr	r0, [pc, #192]	@ (80028e0 <menu+0x1e08>)
 8002820:	f006 ff2c 	bl	800967c <HAL_GPIO_ReadPin>
 8002824:	4603      	mov	r3, r0
 8002826:	2b01      	cmp	r3, #1
 8002828:	d115      	bne.n	8002856 <menu+0x1d7e>
 800282a:	4b2e      	ldr	r3, [pc, #184]	@ (80028e4 <menu+0x1e0c>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	f083 0301 	eor.w	r3, r3, #1
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00e      	beq.n	8002856 <menu+0x1d7e>
			asagiValfTmr = asagiValfTmr + 1;
 8002838:	4b34      	ldr	r3, [pc, #208]	@ (800290c <menu+0x1e34>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	3301      	adds	r3, #1
 800283e:	b2da      	uxtb	r2, r3
 8002840:	4b32      	ldr	r3, [pc, #200]	@ (800290c <menu+0x1e34>)
 8002842:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002844:	4b31      	ldr	r3, [pc, #196]	@ (800290c <menu+0x1e34>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b05      	cmp	r3, #5
 800284a:	d902      	bls.n	8002852 <menu+0x1d7a>
				asagiValfTmr = 0;
 800284c:	4b2f      	ldr	r3, [pc, #188]	@ (800290c <menu+0x1e34>)
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002852:	f000 fd4f 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002856:	2104      	movs	r1, #4
 8002858:	4821      	ldr	r0, [pc, #132]	@ (80028e0 <menu+0x1e08>)
 800285a:	f006 ff0f 	bl	800967c <HAL_GPIO_ReadPin>
 800285e:	4603      	mov	r3, r0
 8002860:	2b01      	cmp	r3, #1
 8002862:	d115      	bne.n	8002890 <menu+0x1db8>
 8002864:	4b1f      	ldr	r3, [pc, #124]	@ (80028e4 <menu+0x1e0c>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	f083 0301 	eor.w	r3, r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00e      	beq.n	8002890 <menu+0x1db8>
			asagiValfTmr = asagiValfTmr - 1;
 8002872:	4b26      	ldr	r3, [pc, #152]	@ (800290c <menu+0x1e34>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	3b01      	subs	r3, #1
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4b24      	ldr	r3, [pc, #144]	@ (800290c <menu+0x1e34>)
 800287c:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 800287e:	4b23      	ldr	r3, [pc, #140]	@ (800290c <menu+0x1e34>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b06      	cmp	r3, #6
 8002884:	d902      	bls.n	800288c <menu+0x1db4>
		   		asagiValfTmr = 5;
 8002886:	4b21      	ldr	r3, [pc, #132]	@ (800290c <menu+0x1e34>)
 8002888:	2205      	movs	r2, #5
 800288a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800288c:	f000 fd32 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002890:	2108      	movs	r1, #8
 8002892:	4813      	ldr	r0, [pc, #76]	@ (80028e0 <menu+0x1e08>)
 8002894:	f006 fef2 	bl	800967c <HAL_GPIO_ReadPin>
 8002898:	4603      	mov	r3, r0
 800289a:	2b01      	cmp	r3, #1
 800289c:	d10d      	bne.n	80028ba <menu+0x1de2>
 800289e:	4b11      	ldr	r3, [pc, #68]	@ (80028e4 <menu+0x1e0c>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	f083 0301 	eor.w	r3, r3, #1
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d006      	beq.n	80028ba <menu+0x1de2>
			eepromData[21] = asagiValfTmr;
 80028ac:	4b17      	ldr	r3, [pc, #92]	@ (800290c <menu+0x1e34>)
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	4b0d      	ldr	r3, [pc, #52]	@ (80028e8 <menu+0x1e10>)
 80028b2:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80028b4:	4b0e      	ldr	r3, [pc, #56]	@ (80028f0 <menu+0x1e18>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80028ba:	4b0e      	ldr	r3, [pc, #56]	@ (80028f4 <menu+0x1e1c>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b18      	cmp	r3, #24
 80028c0:	f040 8093 	bne.w	80029ea <menu+0x1f12>
		if(devirmeYuruyusSecim == 2) {
 80028c4:	4b12      	ldr	r3, [pc, #72]	@ (8002910 <menu+0x1e38>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d125      	bne.n	8002918 <menu+0x1e40>
			lcd_print(1, 1, devirmeYukariValfSureText);
 80028cc:	4a11      	ldr	r2, [pc, #68]	@ (8002914 <menu+0x1e3c>)
 80028ce:	2101      	movs	r1, #1
 80028d0:	2001      	movs	r0, #1
 80028d2:	f005 fd78 	bl	80083c6 <lcd_print>
 80028d6:	e028      	b.n	800292a <menu+0x1e52>
 80028d8:	20000db3 	.word	0x20000db3
 80028dc:	20001240 	.word	0x20001240
 80028e0:	40010800 	.word	0x40010800
 80028e4:	20000dcf 	.word	0x20000dcf
 80028e8:	20000d00 	.word	0x20000d00
 80028ec:	20000da6 	.word	0x20000da6
 80028f0:	20000dcc 	.word	0x20000dcc
 80028f4:	20000da0 	.word	0x20000da0
 80028f8:	20001268 	.word	0x20001268
 80028fc:	200010b0 	.word	0x200010b0
 8002900:	20000db4 	.word	0x20000db4
 8002904:	20000d70 	.word	0x20000d70
 8002908:	2000127c 	.word	0x2000127c
 800290c:	20000db5 	.word	0x20000db5
 8002910:	20000daf 	.word	0x20000daf
 8002914:	20001290 	.word	0x20001290
		} else if(devirmeYuruyusSecim == 1) {
 8002918:	4b8c      	ldr	r3, [pc, #560]	@ (8002b4c <menu+0x2074>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d104      	bne.n	800292a <menu+0x1e52>
			lcd_print(1, 1, ileriValfSureText);
 8002920:	4a8b      	ldr	r2, [pc, #556]	@ (8002b50 <menu+0x2078>)
 8002922:	2101      	movs	r1, #1
 8002924:	2001      	movs	r0, #1
 8002926:	f005 fd4e 	bl	80083c6 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 800292a:	4a8a      	ldr	r2, [pc, #552]	@ (8002b54 <menu+0x207c>)
 800292c:	2101      	movs	r1, #1
 800292e:	2002      	movs	r0, #2
 8002930:	f005 fd49 	bl	80083c6 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8002934:	4b88      	ldr	r3, [pc, #544]	@ (8002b58 <menu+0x2080>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	220a      	movs	r2, #10
 800293a:	4988      	ldr	r1, [pc, #544]	@ (8002b5c <menu+0x2084>)
 800293c:	4618      	mov	r0, r3
 800293e:	f009 fa3f 	bl	800bdc0 <itoa>
		lcd_print(2, 16, snum);
 8002942:	4a86      	ldr	r2, [pc, #536]	@ (8002b5c <menu+0x2084>)
 8002944:	2110      	movs	r1, #16
 8002946:	2002      	movs	r0, #2
 8002948:	f005 fd3d 	bl	80083c6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800294c:	2102      	movs	r1, #2
 800294e:	4884      	ldr	r0, [pc, #528]	@ (8002b60 <menu+0x2088>)
 8002950:	f006 fe94 	bl	800967c <HAL_GPIO_ReadPin>
 8002954:	4603      	mov	r3, r0
 8002956:	2b01      	cmp	r3, #1
 8002958:	d115      	bne.n	8002986 <menu+0x1eae>
 800295a:	4b82      	ldr	r3, [pc, #520]	@ (8002b64 <menu+0x208c>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	f083 0301 	eor.w	r3, r3, #1
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00e      	beq.n	8002986 <menu+0x1eae>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8002968:	4b7b      	ldr	r3, [pc, #492]	@ (8002b58 <menu+0x2080>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	3301      	adds	r3, #1
 800296e:	b2da      	uxtb	r2, r3
 8002970:	4b79      	ldr	r3, [pc, #484]	@ (8002b58 <menu+0x2080>)
 8002972:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8002974:	4b78      	ldr	r3, [pc, #480]	@ (8002b58 <menu+0x2080>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b05      	cmp	r3, #5
 800297a:	d902      	bls.n	8002982 <menu+0x1eaa>
				devirmeYukariIleriTmr = 0;
 800297c:	4b76      	ldr	r3, [pc, #472]	@ (8002b58 <menu+0x2080>)
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002982:	f000 fcb7 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002986:	2104      	movs	r1, #4
 8002988:	4875      	ldr	r0, [pc, #468]	@ (8002b60 <menu+0x2088>)
 800298a:	f006 fe77 	bl	800967c <HAL_GPIO_ReadPin>
 800298e:	4603      	mov	r3, r0
 8002990:	2b01      	cmp	r3, #1
 8002992:	d115      	bne.n	80029c0 <menu+0x1ee8>
 8002994:	4b73      	ldr	r3, [pc, #460]	@ (8002b64 <menu+0x208c>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	f083 0301 	eor.w	r3, r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00e      	beq.n	80029c0 <menu+0x1ee8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80029a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002b58 <menu+0x2080>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4b6b      	ldr	r3, [pc, #428]	@ (8002b58 <menu+0x2080>)
 80029ac:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80029ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002b58 <menu+0x2080>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b06      	cmp	r3, #6
 80029b4:	d902      	bls.n	80029bc <menu+0x1ee4>
		   		devirmeYukariIleriTmr = 5;
 80029b6:	4b68      	ldr	r3, [pc, #416]	@ (8002b58 <menu+0x2080>)
 80029b8:	2205      	movs	r2, #5
 80029ba:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029bc:	f000 fc9a 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029c0:	2108      	movs	r1, #8
 80029c2:	4867      	ldr	r0, [pc, #412]	@ (8002b60 <menu+0x2088>)
 80029c4:	f006 fe5a 	bl	800967c <HAL_GPIO_ReadPin>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d10d      	bne.n	80029ea <menu+0x1f12>
 80029ce:	4b65      	ldr	r3, [pc, #404]	@ (8002b64 <menu+0x208c>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	f083 0301 	eor.w	r3, r3, #1
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d006      	beq.n	80029ea <menu+0x1f12>
			eepromData[22] = devirmeYukariIleriTmr;
 80029dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002b58 <menu+0x2080>)
 80029de:	781a      	ldrb	r2, [r3, #0]
 80029e0:	4b61      	ldr	r3, [pc, #388]	@ (8002b68 <menu+0x2090>)
 80029e2:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 80029e4:	4b61      	ldr	r3, [pc, #388]	@ (8002b6c <menu+0x2094>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80029ea:	4b61      	ldr	r3, [pc, #388]	@ (8002b70 <menu+0x2098>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b19      	cmp	r3, #25
 80029f0:	d172      	bne.n	8002ad8 <menu+0x2000>
		if(devirmeYuruyusSecim == 2) {
 80029f2:	4b56      	ldr	r3, [pc, #344]	@ (8002b4c <menu+0x2074>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d105      	bne.n	8002a06 <menu+0x1f2e>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 80029fa:	4a5e      	ldr	r2, [pc, #376]	@ (8002b74 <menu+0x209c>)
 80029fc:	2101      	movs	r1, #1
 80029fe:	2001      	movs	r0, #1
 8002a00:	f005 fce1 	bl	80083c6 <lcd_print>
 8002a04:	e008      	b.n	8002a18 <menu+0x1f40>
		} else if(devirmeYuruyusSecim == 1) {
 8002a06:	4b51      	ldr	r3, [pc, #324]	@ (8002b4c <menu+0x2074>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d104      	bne.n	8002a18 <menu+0x1f40>
			lcd_print(1, 1, geriValfSureText);
 8002a0e:	4a5a      	ldr	r2, [pc, #360]	@ (8002b78 <menu+0x20a0>)
 8002a10:	2101      	movs	r1, #1
 8002a12:	2001      	movs	r0, #1
 8002a14:	f005 fcd7 	bl	80083c6 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002a18:	4a4e      	ldr	r2, [pc, #312]	@ (8002b54 <menu+0x207c>)
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	2002      	movs	r0, #2
 8002a1e:	f005 fcd2 	bl	80083c6 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8002a22:	4b56      	ldr	r3, [pc, #344]	@ (8002b7c <menu+0x20a4>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	220a      	movs	r2, #10
 8002a28:	494c      	ldr	r1, [pc, #304]	@ (8002b5c <menu+0x2084>)
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f009 f9c8 	bl	800bdc0 <itoa>
		lcd_print(2,16,snum);
 8002a30:	4a4a      	ldr	r2, [pc, #296]	@ (8002b5c <menu+0x2084>)
 8002a32:	2110      	movs	r1, #16
 8002a34:	2002      	movs	r0, #2
 8002a36:	f005 fcc6 	bl	80083c6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	4848      	ldr	r0, [pc, #288]	@ (8002b60 <menu+0x2088>)
 8002a3e:	f006 fe1d 	bl	800967c <HAL_GPIO_ReadPin>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d115      	bne.n	8002a74 <menu+0x1f9c>
 8002a48:	4b46      	ldr	r3, [pc, #280]	@ (8002b64 <menu+0x208c>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	f083 0301 	eor.w	r3, r3, #1
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00e      	beq.n	8002a74 <menu+0x1f9c>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8002a56:	4b49      	ldr	r3, [pc, #292]	@ (8002b7c <menu+0x20a4>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4b47      	ldr	r3, [pc, #284]	@ (8002b7c <menu+0x20a4>)
 8002a60:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8002a62:	4b46      	ldr	r3, [pc, #280]	@ (8002b7c <menu+0x20a4>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b05      	cmp	r3, #5
 8002a68:	d902      	bls.n	8002a70 <menu+0x1f98>
				devirmeAsagiGeriTmr = 0;
 8002a6a:	4b44      	ldr	r3, [pc, #272]	@ (8002b7c <menu+0x20a4>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a70:	f000 fc40 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a74:	2104      	movs	r1, #4
 8002a76:	483a      	ldr	r0, [pc, #232]	@ (8002b60 <menu+0x2088>)
 8002a78:	f006 fe00 	bl	800967c <HAL_GPIO_ReadPin>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d115      	bne.n	8002aae <menu+0x1fd6>
 8002a82:	4b38      	ldr	r3, [pc, #224]	@ (8002b64 <menu+0x208c>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	f083 0301 	eor.w	r3, r3, #1
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00e      	beq.n	8002aae <menu+0x1fd6>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8002a90:	4b3a      	ldr	r3, [pc, #232]	@ (8002b7c <menu+0x20a4>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	4b38      	ldr	r3, [pc, #224]	@ (8002b7c <menu+0x20a4>)
 8002a9a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8002a9c:	4b37      	ldr	r3, [pc, #220]	@ (8002b7c <menu+0x20a4>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b06      	cmp	r3, #6
 8002aa2:	d902      	bls.n	8002aaa <menu+0x1fd2>
		   		devirmeAsagiGeriTmr = 5;
 8002aa4:	4b35      	ldr	r3, [pc, #212]	@ (8002b7c <menu+0x20a4>)
 8002aa6:	2205      	movs	r2, #5
 8002aa8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002aaa:	f000 fc23 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aae:	2108      	movs	r1, #8
 8002ab0:	482b      	ldr	r0, [pc, #172]	@ (8002b60 <menu+0x2088>)
 8002ab2:	f006 fde3 	bl	800967c <HAL_GPIO_ReadPin>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d10d      	bne.n	8002ad8 <menu+0x2000>
 8002abc:	4b29      	ldr	r3, [pc, #164]	@ (8002b64 <menu+0x208c>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	f083 0301 	eor.w	r3, r3, #1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d006      	beq.n	8002ad8 <menu+0x2000>
			eepromData[23] = devirmeAsagiGeriTmr;
 8002aca:	4b2c      	ldr	r3, [pc, #176]	@ (8002b7c <menu+0x20a4>)
 8002acc:	781a      	ldrb	r2, [r3, #0]
 8002ace:	4b26      	ldr	r3, [pc, #152]	@ (8002b68 <menu+0x2090>)
 8002ad0:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8002ad2:	4b26      	ldr	r3, [pc, #152]	@ (8002b6c <menu+0x2094>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8002ad8:	4b25      	ldr	r3, [pc, #148]	@ (8002b70 <menu+0x2098>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b1a      	cmp	r3, #26
 8002ade:	f040 80b7 	bne.w	8002c50 <menu+0x2178>
		lcd_print(1, 1, calismaSuresiText);
 8002ae2:	4a27      	ldr	r2, [pc, #156]	@ (8002b80 <menu+0x20a8>)
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f005 fc6d 	bl	80083c6 <lcd_print>

		if(makineCalismaTmr > 99) {
 8002aec:	4b25      	ldr	r3, [pc, #148]	@ (8002b84 <menu+0x20ac>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b63      	cmp	r3, #99	@ 0x63
 8002af2:	d911      	bls.n	8002b18 <menu+0x2040>
			lcd_print(2, 1, kacSaniyeText);
 8002af4:	4a17      	ldr	r2, [pc, #92]	@ (8002b54 <menu+0x207c>)
 8002af6:	2101      	movs	r1, #1
 8002af8:	2002      	movs	r0, #2
 8002afa:	f005 fc64 	bl	80083c6 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8002afe:	4b21      	ldr	r3, [pc, #132]	@ (8002b84 <menu+0x20ac>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	220a      	movs	r2, #10
 8002b04:	4915      	ldr	r1, [pc, #84]	@ (8002b5c <menu+0x2084>)
 8002b06:	4618      	mov	r0, r3
 8002b08:	f009 f95a 	bl	800bdc0 <itoa>
			lcd_print(2,14,snum);
 8002b0c:	4a13      	ldr	r2, [pc, #76]	@ (8002b5c <menu+0x2084>)
 8002b0e:	210e      	movs	r1, #14
 8002b10:	2002      	movs	r0, #2
 8002b12:	f005 fc58 	bl	80083c6 <lcd_print>
 8002b16:	e04c      	b.n	8002bb2 <menu+0x20da>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8002b18:	4b1a      	ldr	r3, [pc, #104]	@ (8002b84 <menu+0x20ac>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b09      	cmp	r3, #9
 8002b1e:	d933      	bls.n	8002b88 <menu+0x20b0>
 8002b20:	4b18      	ldr	r3, [pc, #96]	@ (8002b84 <menu+0x20ac>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b63      	cmp	r3, #99	@ 0x63
 8002b26:	d82f      	bhi.n	8002b88 <menu+0x20b0>
			lcd_print(2, 1, kacSaniyeText);
 8002b28:	4a0a      	ldr	r2, [pc, #40]	@ (8002b54 <menu+0x207c>)
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	2002      	movs	r0, #2
 8002b2e:	f005 fc4a 	bl	80083c6 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8002b32:	4b14      	ldr	r3, [pc, #80]	@ (8002b84 <menu+0x20ac>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	220a      	movs	r2, #10
 8002b38:	4908      	ldr	r1, [pc, #32]	@ (8002b5c <menu+0x2084>)
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f009 f940 	bl	800bdc0 <itoa>
			lcd_print(2, 15, snum);
 8002b40:	4a06      	ldr	r2, [pc, #24]	@ (8002b5c <menu+0x2084>)
 8002b42:	210f      	movs	r1, #15
 8002b44:	2002      	movs	r0, #2
 8002b46:	f005 fc3e 	bl	80083c6 <lcd_print>
 8002b4a:	e032      	b.n	8002bb2 <menu+0x20da>
 8002b4c:	20000daf 	.word	0x20000daf
 8002b50:	200012a4 	.word	0x200012a4
 8002b54:	200010b0 	.word	0x200010b0
 8002b58:	20000db6 	.word	0x20000db6
 8002b5c:	20000d70 	.word	0x20000d70
 8002b60:	40010800 	.word	0x40010800
 8002b64:	20000dcf 	.word	0x20000dcf
 8002b68:	20000d00 	.word	0x20000d00
 8002b6c:	20000dcc 	.word	0x20000dcc
 8002b70:	20000da0 	.word	0x20000da0
 8002b74:	200012b8 	.word	0x200012b8
 8002b78:	200012cc 	.word	0x200012cc
 8002b7c:	20000db7 	.word	0x20000db7
 8002b80:	200012e0 	.word	0x200012e0
 8002b84:	20000db8 	.word	0x20000db8
		} else if(makineCalismaTmr <=  9) {
 8002b88:	4b72      	ldr	r3, [pc, #456]	@ (8002d54 <menu+0x227c>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b09      	cmp	r3, #9
 8002b8e:	d810      	bhi.n	8002bb2 <menu+0x20da>
			lcd_print(2, 1, kacSaniyeText);
 8002b90:	4a71      	ldr	r2, [pc, #452]	@ (8002d58 <menu+0x2280>)
 8002b92:	2101      	movs	r1, #1
 8002b94:	2002      	movs	r0, #2
 8002b96:	f005 fc16 	bl	80083c6 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8002b9a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d54 <menu+0x227c>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	220a      	movs	r2, #10
 8002ba0:	496e      	ldr	r1, [pc, #440]	@ (8002d5c <menu+0x2284>)
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f009 f90c 	bl	800bdc0 <itoa>
			lcd_print(2, 16, snum);
 8002ba8:	4a6c      	ldr	r2, [pc, #432]	@ (8002d5c <menu+0x2284>)
 8002baa:	2110      	movs	r1, #16
 8002bac:	2002      	movs	r0, #2
 8002bae:	f005 fc0a 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	486a      	ldr	r0, [pc, #424]	@ (8002d60 <menu+0x2288>)
 8002bb6:	f006 fd61 	bl	800967c <HAL_GPIO_ReadPin>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d115      	bne.n	8002bec <menu+0x2114>
 8002bc0:	4b68      	ldr	r3, [pc, #416]	@ (8002d64 <menu+0x228c>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	f083 0301 	eor.w	r3, r3, #1
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00e      	beq.n	8002bec <menu+0x2114>
			makineCalismaTmr = makineCalismaTmr + 1;
 8002bce:	4b61      	ldr	r3, [pc, #388]	@ (8002d54 <menu+0x227c>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8002d54 <menu+0x227c>)
 8002bd8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8002bda:	4b5e      	ldr	r3, [pc, #376]	@ (8002d54 <menu+0x227c>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2bb4      	cmp	r3, #180	@ 0xb4
 8002be0:	d902      	bls.n	8002be8 <menu+0x2110>
				makineCalismaTmr = 0;
 8002be2:	4b5c      	ldr	r3, [pc, #368]	@ (8002d54 <menu+0x227c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002be8:	f000 fb84 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bec:	2104      	movs	r1, #4
 8002bee:	485c      	ldr	r0, [pc, #368]	@ (8002d60 <menu+0x2288>)
 8002bf0:	f006 fd44 	bl	800967c <HAL_GPIO_ReadPin>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d115      	bne.n	8002c26 <menu+0x214e>
 8002bfa:	4b5a      	ldr	r3, [pc, #360]	@ (8002d64 <menu+0x228c>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	f083 0301 	eor.w	r3, r3, #1
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00e      	beq.n	8002c26 <menu+0x214e>
			makineCalismaTmr = makineCalismaTmr - 1;
 8002c08:	4b52      	ldr	r3, [pc, #328]	@ (8002d54 <menu+0x227c>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	4b50      	ldr	r3, [pc, #320]	@ (8002d54 <menu+0x227c>)
 8002c12:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8002c14:	4b4f      	ldr	r3, [pc, #316]	@ (8002d54 <menu+0x227c>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2bb5      	cmp	r3, #181	@ 0xb5
 8002c1a:	d902      	bls.n	8002c22 <menu+0x214a>
		   		makineCalismaTmr = 180;
 8002c1c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d54 <menu+0x227c>)
 8002c1e:	22b4      	movs	r2, #180	@ 0xb4
 8002c20:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c22:	f000 fb67 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c26:	2108      	movs	r1, #8
 8002c28:	484d      	ldr	r0, [pc, #308]	@ (8002d60 <menu+0x2288>)
 8002c2a:	f006 fd27 	bl	800967c <HAL_GPIO_ReadPin>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d10d      	bne.n	8002c50 <menu+0x2178>
 8002c34:	4b4b      	ldr	r3, [pc, #300]	@ (8002d64 <menu+0x228c>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	f083 0301 	eor.w	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d006      	beq.n	8002c50 <menu+0x2178>
			eepromData[24] = makineCalismaTmr;
 8002c42:	4b44      	ldr	r3, [pc, #272]	@ (8002d54 <menu+0x227c>)
 8002c44:	781a      	ldrb	r2, [r3, #0]
 8002c46:	4b48      	ldr	r3, [pc, #288]	@ (8002d68 <menu+0x2290>)
 8002c48:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8002c4a:	4b48      	ldr	r3, [pc, #288]	@ (8002d6c <menu+0x2294>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8002c50:	4b47      	ldr	r3, [pc, #284]	@ (8002d70 <menu+0x2298>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b1b      	cmp	r3, #27
 8002c56:	d166      	bne.n	8002d26 <menu+0x224e>
		lcd_print(1, 1, buzzerTextGN);
 8002c58:	4a46      	ldr	r2, [pc, #280]	@ (8002d74 <menu+0x229c>)
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	f005 fbb2 	bl	80083c6 <lcd_print>

		if(buzzer == 0) {
 8002c62:	4b45      	ldr	r3, [pc, #276]	@ (8002d78 <menu+0x22a0>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d105      	bne.n	8002c76 <menu+0x219e>
			lcd_print(2, 1, pasifText);
 8002c6a:	4a44      	ldr	r2, [pc, #272]	@ (8002d7c <menu+0x22a4>)
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	2002      	movs	r0, #2
 8002c70:	f005 fba9 	bl	80083c6 <lcd_print>
 8002c74:	e008      	b.n	8002c88 <menu+0x21b0>
		} else if(buzzer == 1) {
 8002c76:	4b40      	ldr	r3, [pc, #256]	@ (8002d78 <menu+0x22a0>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d104      	bne.n	8002c88 <menu+0x21b0>
			lcd_print(2, 1, aktifText);
 8002c7e:	4a40      	ldr	r2, [pc, #256]	@ (8002d80 <menu+0x22a8>)
 8002c80:	2101      	movs	r1, #1
 8002c82:	2002      	movs	r0, #2
 8002c84:	f005 fb9f 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c88:	2102      	movs	r1, #2
 8002c8a:	4835      	ldr	r0, [pc, #212]	@ (8002d60 <menu+0x2288>)
 8002c8c:	f006 fcf6 	bl	800967c <HAL_GPIO_ReadPin>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d115      	bne.n	8002cc2 <menu+0x21ea>
 8002c96:	4b33      	ldr	r3, [pc, #204]	@ (8002d64 <menu+0x228c>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	f083 0301 	eor.w	r3, r3, #1
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00e      	beq.n	8002cc2 <menu+0x21ea>
			buzzer = buzzer + 1;
 8002ca4:	4b34      	ldr	r3, [pc, #208]	@ (8002d78 <menu+0x22a0>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	4b32      	ldr	r3, [pc, #200]	@ (8002d78 <menu+0x22a0>)
 8002cae:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8002cb0:	4b31      	ldr	r3, [pc, #196]	@ (8002d78 <menu+0x22a0>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d902      	bls.n	8002cbe <menu+0x21e6>
				buzzer = 0;
 8002cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8002d78 <menu+0x22a0>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cbe:	f000 fb19 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cc2:	2104      	movs	r1, #4
 8002cc4:	4826      	ldr	r0, [pc, #152]	@ (8002d60 <menu+0x2288>)
 8002cc6:	f006 fcd9 	bl	800967c <HAL_GPIO_ReadPin>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d115      	bne.n	8002cfc <menu+0x2224>
 8002cd0:	4b24      	ldr	r3, [pc, #144]	@ (8002d64 <menu+0x228c>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	f083 0301 	eor.w	r3, r3, #1
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00e      	beq.n	8002cfc <menu+0x2224>
			buzzer = buzzer - 1;
 8002cde:	4b26      	ldr	r3, [pc, #152]	@ (8002d78 <menu+0x22a0>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4b24      	ldr	r3, [pc, #144]	@ (8002d78 <menu+0x22a0>)
 8002ce8:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8002cea:	4b23      	ldr	r3, [pc, #140]	@ (8002d78 <menu+0x22a0>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <menu+0x2220>
		   		buzzer = 1;
 8002cf2:	4b21      	ldr	r3, [pc, #132]	@ (8002d78 <menu+0x22a0>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002cf8:	f000 fafc 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cfc:	2108      	movs	r1, #8
 8002cfe:	4818      	ldr	r0, [pc, #96]	@ (8002d60 <menu+0x2288>)
 8002d00:	f006 fcbc 	bl	800967c <HAL_GPIO_ReadPin>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d10d      	bne.n	8002d26 <menu+0x224e>
 8002d0a:	4b16      	ldr	r3, [pc, #88]	@ (8002d64 <menu+0x228c>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	f083 0301 	eor.w	r3, r3, #1
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d006      	beq.n	8002d26 <menu+0x224e>
			eepromData[25] = buzzer;
 8002d18:	4b17      	ldr	r3, [pc, #92]	@ (8002d78 <menu+0x22a0>)
 8002d1a:	781a      	ldrb	r2, [r3, #0]
 8002d1c:	4b12      	ldr	r3, [pc, #72]	@ (8002d68 <menu+0x2290>)
 8002d1e:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8002d20:	4b12      	ldr	r3, [pc, #72]	@ (8002d6c <menu+0x2294>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8002d26:	4b12      	ldr	r3, [pc, #72]	@ (8002d70 <menu+0x2298>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b1c      	cmp	r3, #28
 8002d2c:	f040 8088 	bne.w	8002e40 <menu+0x2368>
		calismaSayModu = 0;
 8002d30:	4b14      	ldr	r3, [pc, #80]	@ (8002d84 <menu+0x22ac>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 8002d36:	4a14      	ldr	r2, [pc, #80]	@ (8002d88 <menu+0x22b0>)
 8002d38:	2101      	movs	r1, #1
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	f005 fb43 	bl	80083c6 <lcd_print>

		if(demoMode == 0) {
 8002d40:	4b12      	ldr	r3, [pc, #72]	@ (8002d8c <menu+0x22b4>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d123      	bne.n	8002d90 <menu+0x22b8>
			lcd_print(2, 1, pasifText);
 8002d48:	4a0c      	ldr	r2, [pc, #48]	@ (8002d7c <menu+0x22a4>)
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	2002      	movs	r0, #2
 8002d4e:	f005 fb3a 	bl	80083c6 <lcd_print>
 8002d52:	e026      	b.n	8002da2 <menu+0x22ca>
 8002d54:	20000db8 	.word	0x20000db8
 8002d58:	200010b0 	.word	0x200010b0
 8002d5c:	20000d70 	.word	0x20000d70
 8002d60:	40010800 	.word	0x40010800
 8002d64:	20000dcf 	.word	0x20000dcf
 8002d68:	20000d00 	.word	0x20000d00
 8002d6c:	20000dcc 	.word	0x20000dcc
 8002d70:	20000da0 	.word	0x20000da0
 8002d74:	200000bc 	.word	0x200000bc
 8002d78:	20000dbc 	.word	0x20000dbc
 8002d7c:	20000f84 	.word	0x20000f84
 8002d80:	20000f98 	.word	0x20000f98
 8002d84:	20000dc0 	.word	0x20000dc0
 8002d88:	200000d0 	.word	0x200000d0
 8002d8c:	20000dbe 	.word	0x20000dbe
		} else if(demoMode == 1) {
 8002d90:	4b7d      	ldr	r3, [pc, #500]	@ (8002f88 <menu+0x24b0>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d104      	bne.n	8002da2 <menu+0x22ca>
			lcd_print(2, 1, aktifText);
 8002d98:	4a7c      	ldr	r2, [pc, #496]	@ (8002f8c <menu+0x24b4>)
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	2002      	movs	r0, #2
 8002d9e:	f005 fb12 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002da2:	2102      	movs	r1, #2
 8002da4:	487a      	ldr	r0, [pc, #488]	@ (8002f90 <menu+0x24b8>)
 8002da6:	f006 fc69 	bl	800967c <HAL_GPIO_ReadPin>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d115      	bne.n	8002ddc <menu+0x2304>
 8002db0:	4b78      	ldr	r3, [pc, #480]	@ (8002f94 <menu+0x24bc>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	f083 0301 	eor.w	r3, r3, #1
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00e      	beq.n	8002ddc <menu+0x2304>
			demoMode = demoMode + 1;
 8002dbe:	4b72      	ldr	r3, [pc, #456]	@ (8002f88 <menu+0x24b0>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4b70      	ldr	r3, [pc, #448]	@ (8002f88 <menu+0x24b0>)
 8002dc8:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8002dca:	4b6f      	ldr	r3, [pc, #444]	@ (8002f88 <menu+0x24b0>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d902      	bls.n	8002dd8 <menu+0x2300>
				demoMode = 0;
 8002dd2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f88 <menu+0x24b0>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002dd8:	f000 fa8c 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ddc:	2104      	movs	r1, #4
 8002dde:	486c      	ldr	r0, [pc, #432]	@ (8002f90 <menu+0x24b8>)
 8002de0:	f006 fc4c 	bl	800967c <HAL_GPIO_ReadPin>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d115      	bne.n	8002e16 <menu+0x233e>
 8002dea:	4b6a      	ldr	r3, [pc, #424]	@ (8002f94 <menu+0x24bc>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	f083 0301 	eor.w	r3, r3, #1
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00e      	beq.n	8002e16 <menu+0x233e>
			demoMode = demoMode - 1;
 8002df8:	4b63      	ldr	r3, [pc, #396]	@ (8002f88 <menu+0x24b0>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	4b61      	ldr	r3, [pc, #388]	@ (8002f88 <menu+0x24b0>)
 8002e02:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8002e04:	4b60      	ldr	r3, [pc, #384]	@ (8002f88 <menu+0x24b0>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <menu+0x233a>
		   		demoMode = 1;
 8002e0c:	4b5e      	ldr	r3, [pc, #376]	@ (8002f88 <menu+0x24b0>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e12:	f000 fa6f 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e16:	2108      	movs	r1, #8
 8002e18:	485d      	ldr	r0, [pc, #372]	@ (8002f90 <menu+0x24b8>)
 8002e1a:	f006 fc2f 	bl	800967c <HAL_GPIO_ReadPin>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d10d      	bne.n	8002e40 <menu+0x2368>
 8002e24:	4b5b      	ldr	r3, [pc, #364]	@ (8002f94 <menu+0x24bc>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	f083 0301 	eor.w	r3, r3, #1
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d006      	beq.n	8002e40 <menu+0x2368>
			eepromData[26] = demoMode;
 8002e32:	4b55      	ldr	r3, [pc, #340]	@ (8002f88 <menu+0x24b0>)
 8002e34:	781a      	ldrb	r2, [r3, #0]
 8002e36:	4b58      	ldr	r3, [pc, #352]	@ (8002f98 <menu+0x24c0>)
 8002e38:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8002e3a:	4b58      	ldr	r3, [pc, #352]	@ (8002f9c <menu+0x24c4>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8002e40:	4b57      	ldr	r3, [pc, #348]	@ (8002fa0 <menu+0x24c8>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b1d      	cmp	r3, #29
 8002e46:	f040 80c9 	bne.w	8002fdc <menu+0x2504>
		finalCount=0;
 8002e4a:	4b56      	ldr	r3, [pc, #344]	@ (8002fa4 <menu+0x24cc>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 8002e50:	4b55      	ldr	r3, [pc, #340]	@ (8002fa8 <menu+0x24d0>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d135      	bne.n	8002ec4 <menu+0x23ec>
			lcd_print(1, 1, calismaSayisiText);
 8002e58:	4a54      	ldr	r2, [pc, #336]	@ (8002fac <menu+0x24d4>)
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	f005 fab2 	bl	80083c6 <lcd_print>

			if(demoMode == 1) {
 8002e62:	4b49      	ldr	r3, [pc, #292]	@ (8002f88 <menu+0x24b0>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d113      	bne.n	8002e92 <menu+0x23ba>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 8002e6a:	4b51      	ldr	r3, [pc, #324]	@ (8002fb0 <menu+0x24d8>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4613      	mov	r3, r2
 8002e72:	021b      	lsls	r3, r3, #8
 8002e74:	1a9a      	subs	r2, r3, r2
 8002e76:	4b4b      	ldr	r3, [pc, #300]	@ (8002fa4 <menu+0x24cc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	4a49      	ldr	r2, [pc, #292]	@ (8002fa4 <menu+0x24cc>)
 8002e7e:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8002e80:	4b4c      	ldr	r3, [pc, #304]	@ (8002fb4 <menu+0x24dc>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b47      	ldr	r3, [pc, #284]	@ (8002fa4 <menu+0x24cc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	4a45      	ldr	r2, [pc, #276]	@ (8002fa4 <menu+0x24cc>)
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	e012      	b.n	8002eb8 <menu+0x23e0>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 8002e92:	4b49      	ldr	r3, [pc, #292]	@ (8002fb8 <menu+0x24e0>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	4613      	mov	r3, r2
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	1a9a      	subs	r2, r3, r2
 8002e9e:	4b41      	ldr	r3, [pc, #260]	@ (8002fa4 <menu+0x24cc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a3f      	ldr	r2, [pc, #252]	@ (8002fa4 <menu+0x24cc>)
 8002ea6:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 8002ea8:	4b44      	ldr	r3, [pc, #272]	@ (8002fbc <menu+0x24e4>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa4 <menu+0x24cc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4a3b      	ldr	r2, [pc, #236]	@ (8002fa4 <menu+0x24cc>)
 8002eb6:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 8002eb8:	4b3a      	ldr	r3, [pc, #232]	@ (8002fa4 <menu+0x24cc>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 f96f 	bl	80031a0 <displayCycleOnLCD>
 8002ec2:	e00d      	b.n	8002ee0 <menu+0x2408>
		} else if(calismaSayModu == 1) {
 8002ec4:	4b38      	ldr	r3, [pc, #224]	@ (8002fa8 <menu+0x24d0>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d109      	bne.n	8002ee0 <menu+0x2408>
			lcd_print(1, 1, calismaSayisiText);
 8002ecc:	4a37      	ldr	r2, [pc, #220]	@ (8002fac <menu+0x24d4>)
 8002ece:	2101      	movs	r1, #1
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	f005 fa78 	bl	80083c6 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8002ed6:	4a3a      	ldr	r2, [pc, #232]	@ (8002fc0 <menu+0x24e8>)
 8002ed8:	2101      	movs	r1, #1
 8002eda:	2002      	movs	r0, #2
 8002edc:	f005 fa73 	bl	80083c6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ee0:	2102      	movs	r1, #2
 8002ee2:	482b      	ldr	r0, [pc, #172]	@ (8002f90 <menu+0x24b8>)
 8002ee4:	f006 fbca 	bl	800967c <HAL_GPIO_ReadPin>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d115      	bne.n	8002f1a <menu+0x2442>
 8002eee:	4b29      	ldr	r3, [pc, #164]	@ (8002f94 <menu+0x24bc>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	f083 0301 	eor.w	r3, r3, #1
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00e      	beq.n	8002f1a <menu+0x2442>
			calismaSayModu = calismaSayModu + 1;
 8002efc:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa8 <menu+0x24d0>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	3301      	adds	r3, #1
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	4b28      	ldr	r3, [pc, #160]	@ (8002fa8 <menu+0x24d0>)
 8002f06:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8002f08:	4b27      	ldr	r3, [pc, #156]	@ (8002fa8 <menu+0x24d0>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d902      	bls.n	8002f16 <menu+0x243e>
				calismaSayModu = 0;
 8002f10:	4b25      	ldr	r3, [pc, #148]	@ (8002fa8 <menu+0x24d0>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f16:	f000 f9ed 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f1a:	2104      	movs	r1, #4
 8002f1c:	481c      	ldr	r0, [pc, #112]	@ (8002f90 <menu+0x24b8>)
 8002f1e:	f006 fbad 	bl	800967c <HAL_GPIO_ReadPin>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d115      	bne.n	8002f54 <menu+0x247c>
 8002f28:	4b1a      	ldr	r3, [pc, #104]	@ (8002f94 <menu+0x24bc>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	f083 0301 	eor.w	r3, r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00e      	beq.n	8002f54 <menu+0x247c>
			calismaSayModu = calismaSayModu - 1;
 8002f36:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa8 <menu+0x24d0>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa8 <menu+0x24d0>)
 8002f40:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8002f42:	4b19      	ldr	r3, [pc, #100]	@ (8002fa8 <menu+0x24d0>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <menu+0x2478>
		   		calismaSayModu = 1;
 8002f4a:	4b17      	ldr	r3, [pc, #92]	@ (8002fa8 <menu+0x24d0>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f50:	f000 f9d0 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f54:	2108      	movs	r1, #8
 8002f56:	480e      	ldr	r0, [pc, #56]	@ (8002f90 <menu+0x24b8>)
 8002f58:	f006 fb90 	bl	800967c <HAL_GPIO_ReadPin>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d13c      	bne.n	8002fdc <menu+0x2504>
 8002f62:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <menu+0x24bc>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	f083 0301 	eor.w	r3, r3, #1
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d035      	beq.n	8002fdc <menu+0x2504>
			if(demoMode == 1) {
 8002f70:	4b05      	ldr	r3, [pc, #20]	@ (8002f88 <menu+0x24b0>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d125      	bne.n	8002fc4 <menu+0x24ec>
				eepromData[28] = 0;
 8002f78:	4b07      	ldr	r3, [pc, #28]	@ (8002f98 <menu+0x24c0>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 8002f7e:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <menu+0x24c0>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	779a      	strb	r2, [r3, #30]
 8002f84:	e024      	b.n	8002fd0 <menu+0x24f8>
 8002f86:	bf00      	nop
 8002f88:	20000dbe 	.word	0x20000dbe
 8002f8c:	20000f98 	.word	0x20000f98
 8002f90:	40010800 	.word	0x40010800
 8002f94:	20000dcf 	.word	0x20000dcf
 8002f98:	20000d00 	.word	0x20000d00
 8002f9c:	20000dcc 	.word	0x20000dcc
 8002fa0:	20000da0 	.word	0x20000da0
 8002fa4:	20000d9c 	.word	0x20000d9c
 8002fa8:	20000dc0 	.word	0x20000dc0
 8002fac:	200012f4 	.word	0x200012f4
 8002fb0:	20000d9b 	.word	0x20000d9b
 8002fb4:	20000d99 	.word	0x20000d99
 8002fb8:	20000d9a 	.word	0x20000d9a
 8002fbc:	20000d98 	.word	0x20000d98
 8002fc0:	20001308 	.word	0x20001308
			} else {
				eepromData[27] = 0;
 8002fc4:	4b69      	ldr	r3, [pc, #420]	@ (800316c <menu+0x2694>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 8002fca:	4b68      	ldr	r3, [pc, #416]	@ (800316c <menu+0x2694>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	775a      	strb	r2, [r3, #29]
			}
			calismaSayModu = 0;
 8002fd0:	4b67      	ldr	r3, [pc, #412]	@ (8003170 <menu+0x2698>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8002fd6:	4b67      	ldr	r3, [pc, #412]	@ (8003174 <menu+0x269c>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8002fdc:	4b66      	ldr	r3, [pc, #408]	@ (8003178 <menu+0x26a0>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b1e      	cmp	r3, #30
 8002fe2:	d166      	bne.n	80030b2 <menu+0x25da>
		calismaSayModu = 0;
 8002fe4:	4b62      	ldr	r3, [pc, #392]	@ (8003170 <menu+0x2698>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 8002fea:	4a64      	ldr	r2, [pc, #400]	@ (800317c <menu+0x26a4>)
 8002fec:	2101      	movs	r1, #1
 8002fee:	2001      	movs	r0, #1
 8002ff0:	f005 f9e9 	bl	80083c6 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 8002ff4:	4a62      	ldr	r2, [pc, #392]	@ (8003180 <menu+0x26a8>)
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	2002      	movs	r0, #2
 8002ffa:	f005 f9e4 	bl	80083c6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ffe:	2102      	movs	r1, #2
 8003000:	4860      	ldr	r0, [pc, #384]	@ (8003184 <menu+0x26ac>)
 8003002:	f006 fb3b 	bl	800967c <HAL_GPIO_ReadPin>
 8003006:	4603      	mov	r3, r0
 8003008:	2b01      	cmp	r3, #1
 800300a:	d11a      	bne.n	8003042 <menu+0x256a>
 800300c:	4b5e      	ldr	r3, [pc, #376]	@ (8003188 <menu+0x26b0>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	f083 0301 	eor.w	r3, r3, #1
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d013      	beq.n	8003042 <menu+0x256a>
			dilSecim = dilSecim + 1;
 800301a:	4b5c      	ldr	r3, [pc, #368]	@ (800318c <menu+0x26b4>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	3301      	adds	r3, #1
 8003020:	b2da      	uxtb	r2, r3
 8003022:	4b5a      	ldr	r3, [pc, #360]	@ (800318c <menu+0x26b4>)
 8003024:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003026:	4b59      	ldr	r3, [pc, #356]	@ (800318c <menu+0x26b4>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d902      	bls.n	8003034 <menu+0x255c>
				dilSecim = 0;
 800302e:	4b57      	ldr	r3, [pc, #348]	@ (800318c <menu+0x26b4>)
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
			}
			loadMenuTexts(dilSecim);
 8003034:	4b55      	ldr	r3, [pc, #340]	@ (800318c <menu+0x26b4>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f003 fe01 	bl	8006c40 <loadMenuTexts>

			bekle();
 800303e:	f000 f959 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003042:	2104      	movs	r1, #4
 8003044:	484f      	ldr	r0, [pc, #316]	@ (8003184 <menu+0x26ac>)
 8003046:	f006 fb19 	bl	800967c <HAL_GPIO_ReadPin>
 800304a:	4603      	mov	r3, r0
 800304c:	2b01      	cmp	r3, #1
 800304e:	d11a      	bne.n	8003086 <menu+0x25ae>
 8003050:	4b4d      	ldr	r3, [pc, #308]	@ (8003188 <menu+0x26b0>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	f083 0301 	eor.w	r3, r3, #1
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d013      	beq.n	8003086 <menu+0x25ae>
			dilSecim = dilSecim - 1;
 800305e:	4b4b      	ldr	r3, [pc, #300]	@ (800318c <menu+0x26b4>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	3b01      	subs	r3, #1
 8003064:	b2da      	uxtb	r2, r3
 8003066:	4b49      	ldr	r3, [pc, #292]	@ (800318c <menu+0x26b4>)
 8003068:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 800306a:	4b48      	ldr	r3, [pc, #288]	@ (800318c <menu+0x26b4>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <menu+0x25a0>
		   		dilSecim = 1;
 8003072:	4b46      	ldr	r3, [pc, #280]	@ (800318c <menu+0x26b4>)
 8003074:	2201      	movs	r2, #1
 8003076:	701a      	strb	r2, [r3, #0]
		   	}
		   	loadMenuTexts(dilSecim);
 8003078:	4b44      	ldr	r3, [pc, #272]	@ (800318c <menu+0x26b4>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f003 fddf 	bl	8006c40 <loadMenuTexts>

			bekle();
 8003082:	f000 f937 	bl	80032f4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003086:	2108      	movs	r1, #8
 8003088:	483e      	ldr	r0, [pc, #248]	@ (8003184 <menu+0x26ac>)
 800308a:	f006 faf7 	bl	800967c <HAL_GPIO_ReadPin>
 800308e:	4603      	mov	r3, r0
 8003090:	2b01      	cmp	r3, #1
 8003092:	d10e      	bne.n	80030b2 <menu+0x25da>
 8003094:	4b3c      	ldr	r3, [pc, #240]	@ (8003188 <menu+0x26b0>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	f083 0301 	eor.w	r3, r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d007      	beq.n	80030b2 <menu+0x25da>
			eepromData[33] = dilSecim;
 80030a2:	4b3a      	ldr	r3, [pc, #232]	@ (800318c <menu+0x26b4>)
 80030a4:	781a      	ldrb	r2, [r3, #0]
 80030a6:	4b31      	ldr	r3, [pc, #196]	@ (800316c <menu+0x2694>)
 80030a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 80030ac:	4b31      	ldr	r3, [pc, #196]	@ (8003174 <menu+0x269c>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80030b2:	4b31      	ldr	r3, [pc, #196]	@ (8003178 <menu+0x26a0>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b1f      	cmp	r3, #31
 80030b8:	d154      	bne.n	8003164 <menu+0x268c>
		lcd_print(1, 1, menudenCikisText);
 80030ba:	4a35      	ldr	r2, [pc, #212]	@ (8003190 <menu+0x26b8>)
 80030bc:	2101      	movs	r1, #1
 80030be:	2001      	movs	r0, #1
 80030c0:	f005 f981 	bl	80083c6 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 80030c4:	4a33      	ldr	r2, [pc, #204]	@ (8003194 <menu+0x26bc>)
 80030c6:	2101      	movs	r1, #1
 80030c8:	2002      	movs	r0, #2
 80030ca:	f005 f97c 	bl	80083c6 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80030ce:	2108      	movs	r1, #8
 80030d0:	482c      	ldr	r0, [pc, #176]	@ (8003184 <menu+0x26ac>)
 80030d2:	f006 fad3 	bl	800967c <HAL_GPIO_ReadPin>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d143      	bne.n	8003164 <menu+0x268c>
			menuGiris = 0;
 80030dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003198 <menu+0x26c0>)
 80030de:	2200      	movs	r2, #0
 80030e0:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 80030e2:	f005 fe33 	bl	8008d4c <HAL_GetTick>
 80030e6:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 80030e8:	e007      	b.n	80030fa <menu+0x2622>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 80030ea:	f005 fe2f 	bl	8008d4c <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030f8:	d806      	bhi.n	8003108 <menu+0x2630>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 80030fa:	4828      	ldr	r0, [pc, #160]	@ (800319c <menu+0x26c4>)
 80030fc:	f007 f8e7 	bl	800a2ce <HAL_I2C_GetError>
 8003100:	4603      	mov	r3, r0
 8003102:	2b04      	cmp	r3, #4
 8003104:	d0f1      	beq.n	80030ea <menu+0x2612>
 8003106:	e000      	b.n	800310a <menu+0x2632>
			        break;
 8003108:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 800310a:	f005 fe1f 	bl	8008d4c <HAL_GetTick>
 800310e:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003110:	e007      	b.n	8003122 <menu+0x264a>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003112:	f005 fe1b 	bl	8008d4c <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003120:	d806      	bhi.n	8003130 <menu+0x2658>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003122:	481e      	ldr	r0, [pc, #120]	@ (800319c <menu+0x26c4>)
 8003124:	f007 f8c6 	bl	800a2b4 <HAL_I2C_GetState>
 8003128:	4603      	mov	r3, r0
 800312a:	2b20      	cmp	r3, #32
 800312c:	d1f1      	bne.n	8003112 <menu+0x263a>
 800312e:	e000      	b.n	8003132 <menu+0x265a>
			        break;
 8003130:	bf00      	nop
			    }
			}

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8003132:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003136:	9302      	str	r3, [sp, #8]
 8003138:	236e      	movs	r3, #110	@ 0x6e
 800313a:	9301      	str	r3, [sp, #4]
 800313c:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <menu+0x2694>)
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	236e      	movs	r3, #110	@ 0x6e
 8003142:	2200      	movs	r2, #0
 8003144:	21a0      	movs	r1, #160	@ 0xa0
 8003146:	4815      	ldr	r0, [pc, #84]	@ (800319c <menu+0x26c4>)
 8003148:	f006 fd52 	bl	8009bf0 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 800314c:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8003150:	f005 fe06 	bl	8008d60 <HAL_Delay>

			lcd_clear();
 8003154:	f005 f94c 	bl	80083f0 <lcd_clear>
			HAL_Delay(500);
 8003158:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800315c:	f005 fe00 	bl	8008d60 <HAL_Delay>
			NVIC_SystemReset();
 8003160:	f7fd fca4 	bl	8000aac <__NVIC_SystemReset>
		}
	}
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	20000d00 	.word	0x20000d00
 8003170:	20000dc0 	.word	0x20000dc0
 8003174:	20000dcc 	.word	0x20000dcc
 8003178:	20000da0 	.word	0x20000da0
 800317c:	2000131c 	.word	0x2000131c
 8003180:	20001330 	.word	0x20001330
 8003184:	40010800 	.word	0x40010800
 8003188:	20000dcf 	.word	0x20000dcf
 800318c:	20000dc1 	.word	0x20000dc1
 8003190:	20001344 	.word	0x20001344
 8003194:	20001358 	.word	0x20001358
 8003198:	20000dbd 	.word	0x20000dbd
 800319c:	2000140c 	.word	0x2000140c

080031a0 <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08a      	sub	sp, #40	@ 0x28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 80031a8:	220a      	movs	r2, #10
 80031aa:	491c      	ldr	r1, [pc, #112]	@ (800321c <displayCycleOnLCD+0x7c>)
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f008 fe07 	bl	800bdc0 <itoa>

    int length = strlen(snum);
 80031b2:	481a      	ldr	r0, [pc, #104]	@ (800321c <displayCycleOnLCD+0x7c>)
 80031b4:	f7fd f836 	bl	8000224 <strlen>
 80031b8:	4603      	mov	r3, r0
 80031ba:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	f1c3 0310 	rsb	r3, r3, #16
 80031c2:	0fda      	lsrs	r2, r3, #31
 80031c4:	4413      	add	r3, r2
 80031c6:	105b      	asrs	r3, r3, #1
 80031c8:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 80031ca:	f107 0308 	add.w	r3, r7, #8
 80031ce:	2210      	movs	r2, #16
 80031d0:	2120      	movs	r1, #32
 80031d2:	4618      	mov	r0, r3
 80031d4:	f008 fe38 	bl	800be48 <memset>
    displayLine[16] = '\0'; // Null terminator
 80031d8:	2300      	movs	r3, #0
 80031da:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 80031dc:	2300      	movs	r3, #0
 80031de:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e0:	e00d      	b.n	80031fe <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e6:	4413      	add	r3, r2
 80031e8:	490c      	ldr	r1, [pc, #48]	@ (800321c <displayCycleOnLCD+0x7c>)
 80031ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ec:	440a      	add	r2, r1
 80031ee:	7812      	ldrb	r2, [r2, #0]
 80031f0:	3328      	adds	r3, #40	@ 0x28
 80031f2:	443b      	add	r3, r7
 80031f4:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 80031f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fa:	3301      	adds	r3, #1
 80031fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80031fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	429a      	cmp	r2, r3
 8003204:	dbed      	blt.n	80031e2 <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 8003206:	f107 0308 	add.w	r3, r7, #8
 800320a:	461a      	mov	r2, r3
 800320c:	2101      	movs	r1, #1
 800320e:	2002      	movs	r0, #2
 8003210:	f005 f8d9 	bl	80083c6 <lcd_print>
}
 8003214:	bf00      	nop
 8003216:	3728      	adds	r7, #40	@ 0x28
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20000d70 	.word	0x20000d70

08003220 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d105      	bne.n	800323c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003230:	4a22      	ldr	r2, [pc, #136]	@ (80032bc <lcdUpdate+0x9c>)
 8003232:	2101      	movs	r1, #1
 8003234:	2002      	movs	r0, #2
 8003236:	f005 f8c6 	bl	80083c6 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
	}
}
 800323a:	e03b      	b.n	80032b4 <lcdUpdate+0x94>
	} else if(y==2) {
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d105      	bne.n	800324e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003242:	4a1e      	ldr	r2, [pc, #120]	@ (80032bc <lcdUpdate+0x9c>)
 8003244:	2102      	movs	r1, #2
 8003246:	2002      	movs	r0, #2
 8003248:	f005 f8bd 	bl	80083c6 <lcd_print>
}
 800324c:	e032      	b.n	80032b4 <lcdUpdate+0x94>
	} else if(y==3) {
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	2b03      	cmp	r3, #3
 8003252:	d105      	bne.n	8003260 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003254:	4a19      	ldr	r2, [pc, #100]	@ (80032bc <lcdUpdate+0x9c>)
 8003256:	2103      	movs	r1, #3
 8003258:	2002      	movs	r0, #2
 800325a:	f005 f8b4 	bl	80083c6 <lcd_print>
}
 800325e:	e029      	b.n	80032b4 <lcdUpdate+0x94>
	} else if(y==4) {
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	2b04      	cmp	r3, #4
 8003264:	d105      	bne.n	8003272 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003266:	4a15      	ldr	r2, [pc, #84]	@ (80032bc <lcdUpdate+0x9c>)
 8003268:	2104      	movs	r1, #4
 800326a:	2002      	movs	r0, #2
 800326c:	f005 f8ab 	bl	80083c6 <lcd_print>
}
 8003270:	e020      	b.n	80032b4 <lcdUpdate+0x94>
	} else if(y==5) {
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	2b05      	cmp	r3, #5
 8003276:	d105      	bne.n	8003284 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003278:	4a10      	ldr	r2, [pc, #64]	@ (80032bc <lcdUpdate+0x9c>)
 800327a:	2105      	movs	r1, #5
 800327c:	2002      	movs	r0, #2
 800327e:	f005 f8a2 	bl	80083c6 <lcd_print>
}
 8003282:	e017      	b.n	80032b4 <lcdUpdate+0x94>
	} else if(y==6) {
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	2b06      	cmp	r3, #6
 8003288:	d105      	bne.n	8003296 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 800328a:	4a0c      	ldr	r2, [pc, #48]	@ (80032bc <lcdUpdate+0x9c>)
 800328c:	2106      	movs	r1, #6
 800328e:	2002      	movs	r0, #2
 8003290:	f005 f899 	bl	80083c6 <lcd_print>
}
 8003294:	e00e      	b.n	80032b4 <lcdUpdate+0x94>
	} else if (y==7) {
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	2b07      	cmp	r3, #7
 800329a:	d10b      	bne.n	80032b4 <lcdUpdate+0x94>
		lcd_clear();
 800329c:	f005 f8a8 	bl	80083f0 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 80032a0:	4a07      	ldr	r2, [pc, #28]	@ (80032c0 <lcdUpdate+0xa0>)
 80032a2:	2101      	movs	r1, #1
 80032a4:	2001      	movs	r0, #1
 80032a6:	f005 f88e 	bl	80083c6 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 80032aa:	4a06      	ldr	r2, [pc, #24]	@ (80032c4 <lcdUpdate+0xa4>)
 80032ac:	2101      	movs	r1, #1
 80032ae:	2002      	movs	r0, #2
 80032b0:	f005 f889 	bl	80083c6 <lcd_print>
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	0800bee8 	.word	0x0800bee8
 80032c0:	20000058 	.word	0x20000058
 80032c4:	2000006c 	.word	0x2000006c

080032c8 <checkLCDBacklight>:

void checkLCDBacklight() {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 80032cc:	4b07      	ldr	r3, [pc, #28]	@ (80032ec <checkLCDBacklight+0x24>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4b07      	ldr	r3, [pc, #28]	@ (80032f0 <checkLCDBacklight+0x28>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b3b      	cmp	r3, #59	@ 0x3b
 80032d8:	d903      	bls.n	80032e2 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 80032da:	2000      	movs	r0, #0
 80032dc:	f005 f892 	bl	8008404 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 80032e0:	e002      	b.n	80032e8 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 80032e2:	2001      	movs	r0, #1
 80032e4:	f005 f88e 	bl	8008404 <lcd_backlight>
}
 80032e8:	bf00      	nop
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20000d78 	.word	0x20000d78
 80032f0:	20000d94 	.word	0x20000d94

080032f4 <bekle>:

void bekle() {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
	timer1=millis;
 80032f8:	4b47      	ldr	r3, [pc, #284]	@ (8003418 <bekle+0x124>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a47      	ldr	r2, [pc, #284]	@ (800341c <bekle+0x128>)
 80032fe:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003300:	e002      	b.n	8003308 <bekle+0x14>
    	butonKontrol = 1;
 8003302:	4b47      	ldr	r3, [pc, #284]	@ (8003420 <bekle+0x12c>)
 8003304:	2201      	movs	r2, #1
 8003306:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003308:	2101      	movs	r1, #1
 800330a:	4846      	ldr	r0, [pc, #280]	@ (8003424 <bekle+0x130>)
 800330c:	f006 f9b6 	bl	800967c <HAL_GPIO_ReadPin>
 8003310:	4603      	mov	r3, r0
 8003312:	2b01      	cmp	r3, #1
 8003314:	d109      	bne.n	800332a <bekle+0x36>
 8003316:	4b40      	ldr	r3, [pc, #256]	@ (8003418 <bekle+0x124>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	4b40      	ldr	r3, [pc, #256]	@ (800341c <bekle+0x128>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d0ef      	beq.n	8003302 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003322:	e002      	b.n	800332a <bekle+0x36>
    	butonKontrol = 1;
 8003324:	4b3e      	ldr	r3, [pc, #248]	@ (8003420 <bekle+0x12c>)
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800332a:	2108      	movs	r1, #8
 800332c:	483e      	ldr	r0, [pc, #248]	@ (8003428 <bekle+0x134>)
 800332e:	f006 f9a5 	bl	800967c <HAL_GPIO_ReadPin>
 8003332:	4603      	mov	r3, r0
 8003334:	2b01      	cmp	r3, #1
 8003336:	d109      	bne.n	800334c <bekle+0x58>
 8003338:	4b37      	ldr	r3, [pc, #220]	@ (8003418 <bekle+0x124>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b37      	ldr	r3, [pc, #220]	@ (800341c <bekle+0x128>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d0ef      	beq.n	8003324 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003344:	e002      	b.n	800334c <bekle+0x58>
    	butonKontrol = 1;
 8003346:	4b36      	ldr	r3, [pc, #216]	@ (8003420 <bekle+0x12c>)
 8003348:	2201      	movs	r2, #1
 800334a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800334c:	2102      	movs	r1, #2
 800334e:	4835      	ldr	r0, [pc, #212]	@ (8003424 <bekle+0x130>)
 8003350:	f006 f994 	bl	800967c <HAL_GPIO_ReadPin>
 8003354:	4603      	mov	r3, r0
 8003356:	2b01      	cmp	r3, #1
 8003358:	d109      	bne.n	800336e <bekle+0x7a>
 800335a:	4b2f      	ldr	r3, [pc, #188]	@ (8003418 <bekle+0x124>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4b2f      	ldr	r3, [pc, #188]	@ (800341c <bekle+0x128>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d0ef      	beq.n	8003346 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003366:	e002      	b.n	800336e <bekle+0x7a>
    	butonKontrol = 1;
 8003368:	4b2d      	ldr	r3, [pc, #180]	@ (8003420 <bekle+0x12c>)
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800336e:	2104      	movs	r1, #4
 8003370:	482c      	ldr	r0, [pc, #176]	@ (8003424 <bekle+0x130>)
 8003372:	f006 f983 	bl	800967c <HAL_GPIO_ReadPin>
 8003376:	4603      	mov	r3, r0
 8003378:	2b01      	cmp	r3, #1
 800337a:	d109      	bne.n	8003390 <bekle+0x9c>
 800337c:	4b26      	ldr	r3, [pc, #152]	@ (8003418 <bekle+0x124>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	4b26      	ldr	r3, [pc, #152]	@ (800341c <bekle+0x128>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d0ef      	beq.n	8003368 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003388:	e002      	b.n	8003390 <bekle+0x9c>
    	butonKontrol = 1;
 800338a:	4b25      	ldr	r3, [pc, #148]	@ (8003420 <bekle+0x12c>)
 800338c:	2201      	movs	r2, #1
 800338e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003390:	2108      	movs	r1, #8
 8003392:	4824      	ldr	r0, [pc, #144]	@ (8003424 <bekle+0x130>)
 8003394:	f006 f972 	bl	800967c <HAL_GPIO_ReadPin>
 8003398:	4603      	mov	r3, r0
 800339a:	2b01      	cmp	r3, #1
 800339c:	d109      	bne.n	80033b2 <bekle+0xbe>
 800339e:	4b1e      	ldr	r3, [pc, #120]	@ (8003418 <bekle+0x124>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b1e      	ldr	r3, [pc, #120]	@ (800341c <bekle+0x128>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d0ef      	beq.n	800338a <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80033aa:	e002      	b.n	80033b2 <bekle+0xbe>
    	butonKontrol = 1;
 80033ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003420 <bekle+0x12c>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80033b2:	2180      	movs	r1, #128	@ 0x80
 80033b4:	481c      	ldr	r0, [pc, #112]	@ (8003428 <bekle+0x134>)
 80033b6:	f006 f961 	bl	800967c <HAL_GPIO_ReadPin>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d109      	bne.n	80033d4 <bekle+0xe0>
 80033c0:	4b15      	ldr	r3, [pc, #84]	@ (8003418 <bekle+0x124>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4b15      	ldr	r3, [pc, #84]	@ (800341c <bekle+0x128>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d0ef      	beq.n	80033ac <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80033cc:	e002      	b.n	80033d4 <bekle+0xe0>
    	butonKontrol = 1;
 80033ce:	4b14      	ldr	r3, [pc, #80]	@ (8003420 <bekle+0x12c>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80033d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033d8:	4813      	ldr	r0, [pc, #76]	@ (8003428 <bekle+0x134>)
 80033da:	f006 f94f 	bl	800967c <HAL_GPIO_ReadPin>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d109      	bne.n	80033f8 <bekle+0x104>
 80033e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003418 <bekle+0x124>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b0c      	ldr	r3, [pc, #48]	@ (800341c <bekle+0x128>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d0ee      	beq.n	80033ce <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80033f0:	e002      	b.n	80033f8 <bekle+0x104>
    	butonKontrol = 1;
 80033f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <bekle+0x12c>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80033f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033fc:	480a      	ldr	r0, [pc, #40]	@ (8003428 <bekle+0x134>)
 80033fe:	f006 f93d 	bl	800967c <HAL_GPIO_ReadPin>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d105      	bne.n	8003414 <bekle+0x120>
 8003408:	4b03      	ldr	r3, [pc, #12]	@ (8003418 <bekle+0x124>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4b03      	ldr	r3, [pc, #12]	@ (800341c <bekle+0x128>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d0ee      	beq.n	80033f2 <bekle+0xfe>
    }

}
 8003414:	bf00      	nop
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000d78 	.word	0x20000d78
 800341c:	20000d80 	.word	0x20000d80
 8003420:	20000dcf 	.word	0x20000dcf
 8003424:	40010800 	.word	0x40010800
 8003428:	40011000 	.word	0x40011000

0800342c <buttonCheck>:

uint8_t buttonCheck(void) {
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8003430:	2101      	movs	r1, #1
 8003432:	4815      	ldr	r0, [pc, #84]	@ (8003488 <buttonCheck+0x5c>)
 8003434:	f006 f922 	bl	800967c <HAL_GPIO_ReadPin>
 8003438:	4603      	mov	r3, r0
 800343a:	2b01      	cmp	r3, #1
 800343c:	d01b      	beq.n	8003476 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 800343e:	2108      	movs	r1, #8
 8003440:	4812      	ldr	r0, [pc, #72]	@ (800348c <buttonCheck+0x60>)
 8003442:	f006 f91b 	bl	800967c <HAL_GPIO_ReadPin>
 8003446:	4603      	mov	r3, r0
 8003448:	2b01      	cmp	r3, #1
 800344a:	d014      	beq.n	8003476 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 800344c:	2102      	movs	r1, #2
 800344e:	480e      	ldr	r0, [pc, #56]	@ (8003488 <buttonCheck+0x5c>)
 8003450:	f006 f914 	bl	800967c <HAL_GPIO_ReadPin>
 8003454:	4603      	mov	r3, r0
 8003456:	2b01      	cmp	r3, #1
 8003458:	d00d      	beq.n	8003476 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 800345a:	2104      	movs	r1, #4
 800345c:	480a      	ldr	r0, [pc, #40]	@ (8003488 <buttonCheck+0x5c>)
 800345e:	f006 f90d 	bl	800967c <HAL_GPIO_ReadPin>
 8003462:	4603      	mov	r3, r0
 8003464:	2b01      	cmp	r3, #1
 8003466:	d006      	beq.n	8003476 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8003468:	2108      	movs	r1, #8
 800346a:	4807      	ldr	r0, [pc, #28]	@ (8003488 <buttonCheck+0x5c>)
 800346c:	f006 f906 	bl	800967c <HAL_GPIO_ReadPin>
 8003470:	4603      	mov	r3, r0
 8003472:	2b01      	cmp	r3, #1
 8003474:	d104      	bne.n	8003480 <buttonCheck+0x54>
		backLightTimer = 0;
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <buttonCheck+0x64>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
		return 1;
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <buttonCheck+0x56>
	}
	return 0;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40010800 	.word	0x40010800
 800348c:	40011000 	.word	0x40011000
 8003490:	20000d94 	.word	0x20000d94

08003494 <checkBasincSalteri>:

void checkBasincSalteri() {
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8003498:	4b13      	ldr	r3, [pc, #76]	@ (80034e8 <checkBasincSalteri+0x54>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <checkBasincSalteri+0x12>
		basincVar=1;
 80034a0:	4b12      	ldr	r3, [pc, #72]	@ (80034ec <checkBasincSalteri+0x58>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80034a6:	4b10      	ldr	r3, [pc, #64]	@ (80034e8 <checkBasincSalteri+0x54>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d119      	bne.n	80034e2 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80034ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034b2:	480f      	ldr	r0, [pc, #60]	@ (80034f0 <checkBasincSalteri+0x5c>)
 80034b4:	f006 f8e2 	bl	800967c <HAL_GPIO_ReadPin>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80034be:	4b0d      	ldr	r3, [pc, #52]	@ (80034f4 <checkBasincSalteri+0x60>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	4b0d      	ldr	r3, [pc, #52]	@ (80034f8 <checkBasincSalteri+0x64>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d90a      	bls.n	80034e2 <checkBasincSalteri+0x4e>
				basincVar=1;
 80034cc:	4b07      	ldr	r3, [pc, #28]	@ (80034ec <checkBasincSalteri+0x58>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80034d2:	e006      	b.n	80034e2 <checkBasincSalteri+0x4e>
			timer5=millis;
 80034d4:	4b07      	ldr	r3, [pc, #28]	@ (80034f4 <checkBasincSalteri+0x60>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a07      	ldr	r2, [pc, #28]	@ (80034f8 <checkBasincSalteri+0x64>)
 80034da:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80034dc:	4b03      	ldr	r3, [pc, #12]	@ (80034ec <checkBasincSalteri+0x58>)
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000da7 	.word	0x20000da7
 80034ec:	20000da3 	.word	0x20000da3
 80034f0:	40011000 	.word	0x40011000
 80034f4:	20000d78 	.word	0x20000d78
 80034f8:	20000d90 	.word	0x20000d90

080034fc <checkBasGonder>:

void checkBasGonder() {
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003500:	4b1b      	ldr	r3, [pc, #108]	@ (8003570 <checkBasGonder+0x74>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10b      	bne.n	8003520 <checkBasGonder+0x24>
 8003508:	4b1a      	ldr	r3, [pc, #104]	@ (8003574 <checkBasGonder+0x78>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <checkBasGonder+0x24>
 8003510:	4b19      	ldr	r3, [pc, #100]	@ (8003578 <checkBasGonder+0x7c>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d103      	bne.n	8003520 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8003518:	4b18      	ldr	r3, [pc, #96]	@ (800357c <checkBasGonder+0x80>)
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	e009      	b.n	8003534 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8003520:	4b14      	ldr	r3, [pc, #80]	@ (8003574 <checkBasGonder+0x78>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	f083 0301 	eor.w	r3, r3, #1
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800352e:	4b13      	ldr	r3, [pc, #76]	@ (800357c <checkBasGonder+0x80>)
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003534:	4b0e      	ldr	r3, [pc, #56]	@ (8003570 <checkBasGonder+0x74>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d10b      	bne.n	8003554 <checkBasGonder+0x58>
 800353c:	4b10      	ldr	r3, [pc, #64]	@ (8003580 <checkBasGonder+0x84>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <checkBasGonder+0x58>
 8003544:	4b0c      	ldr	r3, [pc, #48]	@ (8003578 <checkBasGonder+0x7c>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 800354c:	4b0d      	ldr	r3, [pc, #52]	@ (8003584 <checkBasGonder+0x88>)
 800354e:	2201      	movs	r2, #1
 8003550:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8003552:	e009      	b.n	8003568 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8003554:	4b0a      	ldr	r3, [pc, #40]	@ (8003580 <checkBasGonder+0x84>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	f083 0301 	eor.w	r3, r3, #1
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8003562:	4b08      	ldr	r3, [pc, #32]	@ (8003584 <checkBasGonder+0x88>)
 8003564:	2200      	movs	r2, #0
 8003566:	701a      	strb	r2, [r3, #0]
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr
 8003570:	20000da1 	.word	0x20000da1
 8003574:	20000dd5 	.word	0x20000dd5
 8003578:	20000daf 	.word	0x20000daf
 800357c:	20000ddc 	.word	0x20000ddc
 8003580:	20000dd8 	.word	0x20000dd8
 8003584:	20000ddd 	.word	0x20000ddd

08003588 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 800358c:	4b24      	ldr	r3, [pc, #144]	@ (8003620 <checkKapiSecimleri+0x98>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d102      	bne.n	800359a <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8003594:	4b23      	ldr	r3, [pc, #140]	@ (8003624 <checkKapiSecimleri+0x9c>)
 8003596:	2201      	movs	r2, #1
 8003598:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 800359a:	4b21      	ldr	r3, [pc, #132]	@ (8003620 <checkKapiSecimleri+0x98>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d10e      	bne.n	80035c0 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80035a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035a6:	4820      	ldr	r0, [pc, #128]	@ (8003628 <checkKapiSecimleri+0xa0>)
 80035a8:	f006 f868 	bl	800967c <HAL_GPIO_ReadPin>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d103      	bne.n	80035ba <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80035b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003624 <checkKapiSecimleri+0x9c>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	701a      	strb	r2, [r3, #0]
 80035b8:	e002      	b.n	80035c0 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80035ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003624 <checkKapiSecimleri+0x9c>)
 80035bc:	2200      	movs	r2, #0
 80035be:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80035c0:	4b17      	ldr	r3, [pc, #92]	@ (8003620 <checkKapiSecimleri+0x98>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d10e      	bne.n	80035e6 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80035c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80035cc:	4816      	ldr	r0, [pc, #88]	@ (8003628 <checkKapiSecimleri+0xa0>)
 80035ce:	f006 f855 	bl	800967c <HAL_GPIO_ReadPin>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d103      	bne.n	80035e0 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80035d8:	4b12      	ldr	r3, [pc, #72]	@ (8003624 <checkKapiSecimleri+0x9c>)
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
 80035de:	e002      	b.n	80035e6 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80035e0:	4b10      	ldr	r3, [pc, #64]	@ (8003624 <checkKapiSecimleri+0x9c>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80035e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003620 <checkKapiSecimleri+0x98>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d116      	bne.n	800361c <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80035ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035f2:	480d      	ldr	r0, [pc, #52]	@ (8003628 <checkKapiSecimleri+0xa0>)
 80035f4:	f006 f842 	bl	800967c <HAL_GPIO_ReadPin>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10b      	bne.n	8003616 <checkKapiSecimleri+0x8e>
 80035fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003602:	4809      	ldr	r0, [pc, #36]	@ (8003628 <checkKapiSecimleri+0xa0>)
 8003604:	f006 f83a 	bl	800967c <HAL_GPIO_ReadPin>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d103      	bne.n	8003616 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 800360e:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <checkKapiSecimleri+0x9c>)
 8003610:	2201      	movs	r2, #1
 8003612:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8003614:	e002      	b.n	800361c <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8003616:	4b03      	ldr	r3, [pc, #12]	@ (8003624 <checkKapiSecimleri+0x9c>)
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
}
 800361c:	bf00      	nop
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20000da8 	.word	0x20000da8
 8003624:	20000df2 	.word	0x20000df2
 8003628:	40010800 	.word	0x40010800

0800362c <checkAktifCalisma>:

void checkAktifCalisma() {
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8003630:	4b66      	ldr	r3, [pc, #408]	@ (80037cc <checkAktifCalisma+0x1a0>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f041 83ab 	bne.w	8004d90 <checkAktifCalisma+0x1764>
 800363a:	4b65      	ldr	r3, [pc, #404]	@ (80037d0 <checkAktifCalisma+0x1a4>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	f041 83a6 	bne.w	8004d90 <checkAktifCalisma+0x1764>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8003644:	4b63      	ldr	r3, [pc, #396]	@ (80037d4 <checkAktifCalisma+0x1a8>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d11a      	bne.n	8003682 <checkAktifCalisma+0x56>
 800364c:	4b62      	ldr	r3, [pc, #392]	@ (80037d8 <checkAktifCalisma+0x1ac>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d116      	bne.n	8003682 <checkAktifCalisma+0x56>
 8003654:	4b61      	ldr	r3, [pc, #388]	@ (80037dc <checkAktifCalisma+0x1b0>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <checkAktifCalisma+0x46>
 800365c:	4b60      	ldr	r3, [pc, #384]	@ (80037e0 <checkAktifCalisma+0x1b4>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	f083 0301 	eor.w	r3, r3, #1
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <checkAktifCalisma+0x46>
 800366a:	4b5e      	ldr	r3, [pc, #376]	@ (80037e4 <checkAktifCalisma+0x1b8>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d007      	beq.n	8003682 <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8003672:	4b5d      	ldr	r3, [pc, #372]	@ (80037e8 <checkAktifCalisma+0x1bc>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d01c      	beq.n	80036b4 <checkAktifCalisma+0x88>
 800367a:	4b5c      	ldr	r3, [pc, #368]	@ (80037ec <checkAktifCalisma+0x1c0>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d118      	bne.n	80036b4 <checkAktifCalisma+0x88>
 8003682:	4b5b      	ldr	r3, [pc, #364]	@ (80037f0 <checkAktifCalisma+0x1c4>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d103      	bne.n	8003692 <checkAktifCalisma+0x66>
 800368a:	4b5a      	ldr	r3, [pc, #360]	@ (80037f4 <checkAktifCalisma+0x1c8>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d010      	beq.n	80036b4 <checkAktifCalisma+0x88>
 8003692:	4b59      	ldr	r3, [pc, #356]	@ (80037f8 <checkAktifCalisma+0x1cc>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00c      	beq.n	80036b4 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800369a:	2201      	movs	r2, #1
 800369c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80036a0:	4856      	ldr	r0, [pc, #344]	@ (80037fc <checkAktifCalisma+0x1d0>)
 80036a2:	f006 f802 	bl	80096aa <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 80036a6:	4b56      	ldr	r3, [pc, #344]	@ (8003800 <checkAktifCalisma+0x1d4>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 80036ac:	4b55      	ldr	r3, [pc, #340]	@ (8003804 <checkAktifCalisma+0x1d8>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	e008      	b.n	80036c6 <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80036b4:	2200      	movs	r2, #0
 80036b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80036ba:	4850      	ldr	r0, [pc, #320]	@ (80037fc <checkAktifCalisma+0x1d0>)
 80036bc:	f005 fff5 	bl	80096aa <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 80036c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003800 <checkAktifCalisma+0x1d4>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 80036c6:	4b42      	ldr	r3, [pc, #264]	@ (80037d0 <checkAktifCalisma+0x1a4>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d164      	bne.n	8003798 <checkAktifCalisma+0x16c>
 80036ce:	4b49      	ldr	r3, [pc, #292]	@ (80037f4 <checkAktifCalisma+0x1c8>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d103      	bne.n	80036de <checkAktifCalisma+0xb2>
 80036d6:	4b46      	ldr	r3, [pc, #280]	@ (80037f0 <checkAktifCalisma+0x1c4>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d05c      	beq.n	8003798 <checkAktifCalisma+0x16c>
 80036de:	4b46      	ldr	r3, [pc, #280]	@ (80037f8 <checkAktifCalisma+0x1cc>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d058      	beq.n	8003798 <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80036e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80036ea:	4844      	ldr	r0, [pc, #272]	@ (80037fc <checkAktifCalisma+0x1d0>)
 80036ec:	f005 ffc6 	bl	800967c <HAL_GPIO_ReadPin>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <checkAktifCalisma+0xd2>
 80036f6:	4b44      	ldr	r3, [pc, #272]	@ (8003808 <checkAktifCalisma+0x1dc>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d04c      	beq.n	8003798 <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80036fe:	2102      	movs	r1, #2
 8003700:	4842      	ldr	r0, [pc, #264]	@ (800380c <checkAktifCalisma+0x1e0>)
 8003702:	f005 ffbb 	bl	800967c <HAL_GPIO_ReadPin>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d145      	bne.n	8003798 <checkAktifCalisma+0x16c>
							&& (basincVar)
 800370c:	4b40      	ldr	r3, [pc, #256]	@ (8003810 <checkAktifCalisma+0x1e4>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d041      	beq.n	8003798 <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8003714:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003718:	4838      	ldr	r0, [pc, #224]	@ (80037fc <checkAktifCalisma+0x1d0>)
 800371a:	f005 ffaf 	bl	800967c <HAL_GPIO_ReadPin>
 800371e:	4603      	mov	r3, r0
 8003720:	2b01      	cmp	r3, #1
 8003722:	d10e      	bne.n	8003742 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8003724:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003728:	4834      	ldr	r0, [pc, #208]	@ (80037fc <checkAktifCalisma+0x1d0>)
 800372a:	f005 ffa7 	bl	800967c <HAL_GPIO_ReadPin>
 800372e:	4603      	mov	r3, r0
 8003730:	2b01      	cmp	r3, #1
 8003732:	d106      	bne.n	8003742 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8003734:	2140      	movs	r1, #64	@ 0x40
 8003736:	4835      	ldr	r0, [pc, #212]	@ (800380c <checkAktifCalisma+0x1e0>)
 8003738:	f005 ffa0 	bl	800967c <HAL_GPIO_ReadPin>
 800373c:	4603      	mov	r3, r0
 800373e:	2b01      	cmp	r3, #1
 8003740:	d003      	beq.n	800374a <checkAktifCalisma+0x11e>
 8003742:	4b24      	ldr	r3, [pc, #144]	@ (80037d4 <checkAktifCalisma+0x1a8>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d026      	beq.n	8003798 <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 800374a:	4b24      	ldr	r3, [pc, #144]	@ (80037dc <checkAktifCalisma+0x1b0>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	f083 0301 	eor.w	r3, r3, #1
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01f      	beq.n	8003798 <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8003758:	4b1f      	ldr	r3, [pc, #124]	@ (80037d8 <checkAktifCalisma+0x1ac>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	f083 0301 	eor.w	r3, r3, #1
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d018      	beq.n	8003798 <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 8003766:	4b20      	ldr	r3, [pc, #128]	@ (80037e8 <checkAktifCalisma+0x1bc>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	f083 0301 	eor.w	r3, r3, #1
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d011      	beq.n	8003798 <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8003774:	4b27      	ldr	r3, [pc, #156]	@ (8003814 <checkAktifCalisma+0x1e8>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	f083 0301 	eor.w	r3, r3, #1
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 8003782:	4b25      	ldr	r3, [pc, #148]	@ (8003818 <checkAktifCalisma+0x1ec>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	f083 0301 	eor.w	r3, r3, #1
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 8003790:	4b10      	ldr	r3, [pc, #64]	@ (80037d4 <checkAktifCalisma+0x1a8>)
 8003792:	2201      	movs	r2, #1
 8003794:	701a      	strb	r2, [r3, #0]
 8003796:	e002      	b.n	800379e <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8003798:	4b0e      	ldr	r3, [pc, #56]	@ (80037d4 <checkAktifCalisma+0x1a8>)
 800379a:	2200      	movs	r2, #0
 800379c:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800379e:	4b0d      	ldr	r3, [pc, #52]	@ (80037d4 <checkAktifCalisma+0x1a8>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d03c      	beq.n	8003820 <checkAktifCalisma+0x1f4>
 80037a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037aa:	4818      	ldr	r0, [pc, #96]	@ (800380c <checkAktifCalisma+0x1e0>)
 80037ac:	f005 ff66 	bl	800967c <HAL_GPIO_ReadPin>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d134      	bne.n	8003820 <checkAktifCalisma+0x1f4>
 80037b6:	4b19      	ldr	r3, [pc, #100]	@ (800381c <checkAktifCalisma+0x1f0>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d030      	beq.n	8003820 <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80037be:	2201      	movs	r2, #1
 80037c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80037c4:	480d      	ldr	r0, [pc, #52]	@ (80037fc <checkAktifCalisma+0x1d0>)
 80037c6:	f005 ff70 	bl	80096aa <HAL_GPIO_WritePin>
 80037ca:	e02f      	b.n	800382c <checkAktifCalisma+0x200>
 80037cc:	20000dbe 	.word	0x20000dbe
 80037d0:	20000dbd 	.word	0x20000dbd
 80037d4:	20000dd5 	.word	0x20000dd5
 80037d8:	20000dd6 	.word	0x20000dd6
 80037dc:	20000dd8 	.word	0x20000dd8
 80037e0:	20000dd0 	.word	0x20000dd0
 80037e4:	20000db3 	.word	0x20000db3
 80037e8:	20000dd7 	.word	0x20000dd7
 80037ec:	20000db2 	.word	0x20000db2
 80037f0:	20000df1 	.word	0x20000df1
 80037f4:	20000e04 	.word	0x20000e04
 80037f8:	20000df2 	.word	0x20000df2
 80037fc:	40010c00 	.word	0x40010c00
 8003800:	20000df3 	.word	0x20000df3
 8003804:	20000ddf 	.word	0x20000ddf
 8003808:	20000ddc 	.word	0x20000ddc
 800380c:	40011000 	.word	0x40011000
 8003810:	20000da3 	.word	0x20000da3
 8003814:	20000dda 	.word	0x20000dda
 8003818:	20000ddb 	.word	0x20000ddb
 800381c:	20000dae 	.word	0x20000dae
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8003820:	2200      	movs	r2, #0
 8003822:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003826:	4865      	ldr	r0, [pc, #404]	@ (80039bc <checkAktifCalisma+0x390>)
 8003828:	f005 ff3f 	bl	80096aa <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 800382c:	4b64      	ldr	r3, [pc, #400]	@ (80039c0 <checkAktifCalisma+0x394>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d013      	beq.n	800385c <checkAktifCalisma+0x230>
 8003834:	4b63      	ldr	r3, [pc, #396]	@ (80039c4 <checkAktifCalisma+0x398>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d007      	beq.n	800384c <checkAktifCalisma+0x220>
 800383c:	4b61      	ldr	r3, [pc, #388]	@ (80039c4 <checkAktifCalisma+0x398>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d003      	beq.n	800384c <checkAktifCalisma+0x220>
 8003844:	4b60      	ldr	r3, [pc, #384]	@ (80039c8 <checkAktifCalisma+0x39c>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d107      	bne.n	800385c <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800384c:	2201      	movs	r2, #1
 800384e:	2104      	movs	r1, #4
 8003850:	485a      	ldr	r0, [pc, #360]	@ (80039bc <checkAktifCalisma+0x390>)
 8003852:	f005 ff2a 	bl	80096aa <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8003856:	4b5d      	ldr	r3, [pc, #372]	@ (80039cc <checkAktifCalisma+0x3a0>)
 8003858:	2201      	movs	r2, #1
 800385a:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800385c:	4b5b      	ldr	r3, [pc, #364]	@ (80039cc <checkAktifCalisma+0x3a0>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d033      	beq.n	80038cc <checkAktifCalisma+0x2a0>
 8003864:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003868:	4854      	ldr	r0, [pc, #336]	@ (80039bc <checkAktifCalisma+0x390>)
 800386a:	f005 ff07 	bl	800967c <HAL_GPIO_ReadPin>
 800386e:	4603      	mov	r3, r0
 8003870:	2b01      	cmp	r3, #1
 8003872:	d106      	bne.n	8003882 <checkAktifCalisma+0x256>
 8003874:	4b56      	ldr	r3, [pc, #344]	@ (80039d0 <checkAktifCalisma+0x3a4>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	f083 0301 	eor.w	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <checkAktifCalisma+0x264>
 8003882:	2102      	movs	r1, #2
 8003884:	4853      	ldr	r0, [pc, #332]	@ (80039d4 <checkAktifCalisma+0x3a8>)
 8003886:	f005 fef9 	bl	800967c <HAL_GPIO_ReadPin>
 800388a:	4603      	mov	r3, r0
 800388c:	2b01      	cmp	r3, #1
 800388e:	d11d      	bne.n	80038cc <checkAktifCalisma+0x2a0>
 8003890:	4b51      	ldr	r3, [pc, #324]	@ (80039d8 <checkAktifCalisma+0x3ac>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d103      	bne.n	80038a0 <checkAktifCalisma+0x274>
 8003898:	4b50      	ldr	r3, [pc, #320]	@ (80039dc <checkAktifCalisma+0x3b0>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d015      	beq.n	80038cc <checkAktifCalisma+0x2a0>
 80038a0:	4b4f      	ldr	r3, [pc, #316]	@ (80039e0 <checkAktifCalisma+0x3b4>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d011      	beq.n	80038cc <checkAktifCalisma+0x2a0>
 80038a8:	4b4e      	ldr	r3, [pc, #312]	@ (80039e4 <checkAktifCalisma+0x3b8>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00d      	beq.n	80038cc <checkAktifCalisma+0x2a0>
 80038b0:	4b4d      	ldr	r3, [pc, #308]	@ (80039e8 <checkAktifCalisma+0x3bc>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	f083 0301 	eor.w	r3, r3, #1
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d006      	beq.n	80038cc <checkAktifCalisma+0x2a0>
					timer2=millis;
 80038be:	4b4b      	ldr	r3, [pc, #300]	@ (80039ec <checkAktifCalisma+0x3c0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a4b      	ldr	r2, [pc, #300]	@ (80039f0 <checkAktifCalisma+0x3c4>)
 80038c4:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 80038c6:	4b48      	ldr	r3, [pc, #288]	@ (80039e8 <checkAktifCalisma+0x3bc>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 80038cc:	4b47      	ldr	r3, [pc, #284]	@ (80039ec <checkAktifCalisma+0x3c0>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	4b47      	ldr	r3, [pc, #284]	@ (80039f0 <checkAktifCalisma+0x3c4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	4a47      	ldr	r2, [pc, #284]	@ (80039f4 <checkAktifCalisma+0x3c8>)
 80038d8:	7812      	ldrb	r2, [r2, #0]
 80038da:	4293      	cmp	r3, r2
 80038dc:	d303      	bcc.n	80038e6 <checkAktifCalisma+0x2ba>
 80038de:	4b42      	ldr	r3, [pc, #264]	@ (80039e8 <checkAktifCalisma+0x3bc>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d118      	bne.n	8003918 <checkAktifCalisma+0x2ec>
 80038e6:	4b3c      	ldr	r3, [pc, #240]	@ (80039d8 <checkAktifCalisma+0x3ac>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	f083 0301 	eor.w	r3, r3, #1
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d006      	beq.n	8003902 <checkAktifCalisma+0x2d6>
 80038f4:	4b39      	ldr	r3, [pc, #228]	@ (80039dc <checkAktifCalisma+0x3b0>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	f083 0301 	eor.w	r3, r3, #1
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10a      	bne.n	8003918 <checkAktifCalisma+0x2ec>
 8003902:	4b37      	ldr	r3, [pc, #220]	@ (80039e0 <checkAktifCalisma+0x3b4>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	f083 0301 	eor.w	r3, r3, #1
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d103      	bne.n	8003918 <checkAktifCalisma+0x2ec>
 8003910:	4b34      	ldr	r3, [pc, #208]	@ (80039e4 <checkAktifCalisma+0x3b8>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8003918:	2200      	movs	r2, #0
 800391a:	2104      	movs	r1, #4
 800391c:	4827      	ldr	r0, [pc, #156]	@ (80039bc <checkAktifCalisma+0x390>)
 800391e:	f005 fec4 	bl	80096aa <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 8003922:	4b2a      	ldr	r3, [pc, #168]	@ (80039cc <checkAktifCalisma+0x3a0>)
 8003924:	2200      	movs	r2, #0
 8003926:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 8003928:	4b2f      	ldr	r3, [pc, #188]	@ (80039e8 <checkAktifCalisma+0x3bc>)
 800392a:	2200      	movs	r2, #0
 800392c:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 800392e:	4b32      	ldr	r3, [pc, #200]	@ (80039f8 <checkAktifCalisma+0x3cc>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d102      	bne.n	800393c <checkAktifCalisma+0x310>
					cerceveVar=1;
 8003936:	4b31      	ldr	r3, [pc, #196]	@ (80039fc <checkAktifCalisma+0x3d0>)
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800393c:	4b2e      	ldr	r3, [pc, #184]	@ (80039f8 <checkAktifCalisma+0x3cc>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d116      	bne.n	8003972 <checkAktifCalisma+0x346>
 8003944:	4b2e      	ldr	r3, [pc, #184]	@ (8003a00 <checkAktifCalisma+0x3d4>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d112      	bne.n	8003972 <checkAktifCalisma+0x346>
 800394c:	2101      	movs	r1, #1
 800394e:	4821      	ldr	r0, [pc, #132]	@ (80039d4 <checkAktifCalisma+0x3a8>)
 8003950:	f005 fe94 	bl	800967c <HAL_GPIO_ReadPin>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10b      	bne.n	8003972 <checkAktifCalisma+0x346>
 800395a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800395e:	4817      	ldr	r0, [pc, #92]	@ (80039bc <checkAktifCalisma+0x390>)
 8003960:	f005 fe8c 	bl	800967c <HAL_GPIO_ReadPin>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d103      	bne.n	8003972 <checkAktifCalisma+0x346>
					cerceveVar=1;
 800396a:	4b24      	ldr	r3, [pc, #144]	@ (80039fc <checkAktifCalisma+0x3d0>)
 800396c:	2201      	movs	r2, #1
 800396e:	701a      	strb	r2, [r3, #0]
 8003970:	e011      	b.n	8003996 <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8003972:	4b21      	ldr	r3, [pc, #132]	@ (80039f8 <checkAktifCalisma+0x3cc>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d10d      	bne.n	8003996 <checkAktifCalisma+0x36a>
 800397a:	2101      	movs	r1, #1
 800397c:	4815      	ldr	r0, [pc, #84]	@ (80039d4 <checkAktifCalisma+0x3a8>)
 800397e:	f005 fe7d 	bl	800967c <HAL_GPIO_ReadPin>
 8003982:	4603      	mov	r3, r0
 8003984:	2b01      	cmp	r3, #1
 8003986:	d106      	bne.n	8003996 <checkAktifCalisma+0x36a>
 8003988:	4b1d      	ldr	r3, [pc, #116]	@ (8003a00 <checkAktifCalisma+0x3d4>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d102      	bne.n	8003996 <checkAktifCalisma+0x36a>
					cerceveVar=0;
 8003990:	4b1a      	ldr	r3, [pc, #104]	@ (80039fc <checkAktifCalisma+0x3d0>)
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8003996:	4b18      	ldr	r3, [pc, #96]	@ (80039f8 <checkAktifCalisma+0x3cc>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d135      	bne.n	8003a0a <checkAktifCalisma+0x3de>
 800399e:	4b18      	ldr	r3, [pc, #96]	@ (8003a00 <checkAktifCalisma+0x3d4>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d131      	bne.n	8003a0a <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80039a6:	2101      	movs	r1, #1
 80039a8:	480a      	ldr	r0, [pc, #40]	@ (80039d4 <checkAktifCalisma+0x3a8>)
 80039aa:	f005 fe67 	bl	800967c <HAL_GPIO_ReadPin>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d127      	bne.n	8003a04 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 80039b4:	4b11      	ldr	r3, [pc, #68]	@ (80039fc <checkAktifCalisma+0x3d0>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	701a      	strb	r2, [r3, #0]
 80039ba:	e026      	b.n	8003a0a <checkAktifCalisma+0x3de>
 80039bc:	40010c00 	.word	0x40010c00
 80039c0:	20000dd5 	.word	0x20000dd5
 80039c4:	20000daf 	.word	0x20000daf
 80039c8:	20000db3 	.word	0x20000db3
 80039cc:	20000dd9 	.word	0x20000dd9
 80039d0:	20000ddc 	.word	0x20000ddc
 80039d4:	40011000 	.word	0x40011000
 80039d8:	20000df1 	.word	0x20000df1
 80039dc:	20000e04 	.word	0x20000e04
 80039e0:	20000df2 	.word	0x20000df2
 80039e4:	20000da3 	.word	0x20000da3
 80039e8:	20000dd1 	.word	0x20000dd1
 80039ec:	20000d78 	.word	0x20000d78
 80039f0:	20000d84 	.word	0x20000d84
 80039f4:	20000db4 	.word	0x20000db4
 80039f8:	20000da4 	.word	0x20000da4
 80039fc:	20000df6 	.word	0x20000df6
 8003a00:	20000da1 	.word	0x20000da1
					} else {
						cerceveVar=0;
 8003a04:	4b7f      	ldr	r3, [pc, #508]	@ (8003c04 <checkAktifCalisma+0x5d8>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8003a0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c08 <checkAktifCalisma+0x5dc>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d17c      	bne.n	8003b0c <checkAktifCalisma+0x4e0>
 8003a12:	4b7e      	ldr	r3, [pc, #504]	@ (8003c0c <checkAktifCalisma+0x5e0>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d078      	beq.n	8003b0c <checkAktifCalisma+0x4e0>
 8003a1a:	4b7d      	ldr	r3, [pc, #500]	@ (8003c10 <checkAktifCalisma+0x5e4>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d074      	beq.n	8003b0c <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8003a22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a26:	487b      	ldr	r0, [pc, #492]	@ (8003c14 <checkAktifCalisma+0x5e8>)
 8003a28:	f005 fe28 	bl	800967c <HAL_GPIO_ReadPin>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <checkAktifCalisma+0x40e>
 8003a32:	4b79      	ldr	r3, [pc, #484]	@ (8003c18 <checkAktifCalisma+0x5ec>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d068      	beq.n	8003b0c <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8003a3a:	4b72      	ldr	r3, [pc, #456]	@ (8003c04 <checkAktifCalisma+0x5d8>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d064      	beq.n	8003b0c <checkAktifCalisma+0x4e0>
 8003a42:	4b76      	ldr	r3, [pc, #472]	@ (8003c1c <checkAktifCalisma+0x5f0>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	f083 0301 	eor.w	r3, r3, #1
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d05d      	beq.n	8003b0c <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8003a50:	2104      	movs	r1, #4
 8003a52:	4873      	ldr	r0, [pc, #460]	@ (8003c20 <checkAktifCalisma+0x5f4>)
 8003a54:	f005 fe12 	bl	800967c <HAL_GPIO_ReadPin>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <checkAktifCalisma+0x43a>
 8003a5e:	4b71      	ldr	r3, [pc, #452]	@ (8003c24 <checkAktifCalisma+0x5f8>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d152      	bne.n	8003b0c <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8003a66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a6a:	486a      	ldr	r0, [pc, #424]	@ (8003c14 <checkAktifCalisma+0x5e8>)
 8003a6c:	f005 fe06 	bl	800967c <HAL_GPIO_ReadPin>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d10e      	bne.n	8003a94 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8003a76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a7a:	4866      	ldr	r0, [pc, #408]	@ (8003c14 <checkAktifCalisma+0x5e8>)
 8003a7c:	f005 fdfe 	bl	800967c <HAL_GPIO_ReadPin>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d106      	bne.n	8003a94 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8003a86:	2140      	movs	r1, #64	@ 0x40
 8003a88:	4865      	ldr	r0, [pc, #404]	@ (8003c20 <checkAktifCalisma+0x5f4>)
 8003a8a:	f005 fdf7 	bl	800967c <HAL_GPIO_ReadPin>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d003      	beq.n	8003a9c <checkAktifCalisma+0x470>
 8003a94:	4b64      	ldr	r3, [pc, #400]	@ (8003c28 <checkAktifCalisma+0x5fc>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d037      	beq.n	8003b0c <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 8003a9c:	4b63      	ldr	r3, [pc, #396]	@ (8003c2c <checkAktifCalisma+0x600>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	f083 0301 	eor.w	r3, r3, #1
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d030      	beq.n	8003b0c <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 8003aaa:	4b61      	ldr	r3, [pc, #388]	@ (8003c30 <checkAktifCalisma+0x604>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	f083 0301 	eor.w	r3, r3, #1
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d029      	beq.n	8003b0c <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 8003ab8:	4b5e      	ldr	r3, [pc, #376]	@ (8003c34 <checkAktifCalisma+0x608>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	f083 0301 	eor.w	r3, r3, #1
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d022      	beq.n	8003b0c <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 8003ac6:	4b5c      	ldr	r3, [pc, #368]	@ (8003c38 <checkAktifCalisma+0x60c>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	f083 0301 	eor.w	r3, r3, #1
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01b      	beq.n	8003b0c <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8003ad4:	4b59      	ldr	r3, [pc, #356]	@ (8003c3c <checkAktifCalisma+0x610>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	f083 0301 	eor.w	r3, r3, #1
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d014      	beq.n	8003b0c <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 8003ae2:	4b57      	ldr	r3, [pc, #348]	@ (8003c40 <checkAktifCalisma+0x614>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	f083 0301 	eor.w	r3, r3, #1
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00d      	beq.n	8003b0c <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8003af0:	2201      	movs	r2, #1
 8003af2:	2102      	movs	r1, #2
 8003af4:	4847      	ldr	r0, [pc, #284]	@ (8003c14 <checkAktifCalisma+0x5e8>)
 8003af6:	f005 fdd8 	bl	80096aa <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 8003afa:	4b4b      	ldr	r3, [pc, #300]	@ (8003c28 <checkAktifCalisma+0x5fc>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8003b00:	4b50      	ldr	r3, [pc, #320]	@ (8003c44 <checkAktifCalisma+0x618>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 8003b06:	4b50      	ldr	r3, [pc, #320]	@ (8003c48 <checkAktifCalisma+0x61c>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8003b0c:	4b46      	ldr	r3, [pc, #280]	@ (8003c28 <checkAktifCalisma+0x5fc>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d033      	beq.n	8003b7c <checkAktifCalisma+0x550>
 8003b14:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b18:	483e      	ldr	r0, [pc, #248]	@ (8003c14 <checkAktifCalisma+0x5e8>)
 8003b1a:	f005 fdaf 	bl	800967c <HAL_GPIO_ReadPin>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d106      	bne.n	8003b32 <checkAktifCalisma+0x506>
 8003b24:	4b3c      	ldr	r3, [pc, #240]	@ (8003c18 <checkAktifCalisma+0x5ec>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	f083 0301 	eor.w	r3, r3, #1
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10a      	bne.n	8003b48 <checkAktifCalisma+0x51c>
 8003b32:	2104      	movs	r1, #4
 8003b34:	483a      	ldr	r0, [pc, #232]	@ (8003c20 <checkAktifCalisma+0x5f4>)
 8003b36:	f005 fda1 	bl	800967c <HAL_GPIO_ReadPin>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d11d      	bne.n	8003b7c <checkAktifCalisma+0x550>
 8003b40:	4b38      	ldr	r3, [pc, #224]	@ (8003c24 <checkAktifCalisma+0x5f8>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d019      	beq.n	8003b7c <checkAktifCalisma+0x550>
 8003b48:	4b30      	ldr	r3, [pc, #192]	@ (8003c0c <checkAktifCalisma+0x5e0>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d015      	beq.n	8003b7c <checkAktifCalisma+0x550>
 8003b50:	4b2f      	ldr	r3, [pc, #188]	@ (8003c10 <checkAktifCalisma+0x5e4>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d011      	beq.n	8003b7c <checkAktifCalisma+0x550>
 8003b58:	4b2a      	ldr	r3, [pc, #168]	@ (8003c04 <checkAktifCalisma+0x5d8>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00d      	beq.n	8003b7c <checkAktifCalisma+0x550>
 8003b60:	4b3a      	ldr	r3, [pc, #232]	@ (8003c4c <checkAktifCalisma+0x620>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	f083 0301 	eor.w	r3, r3, #1
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d006      	beq.n	8003b7c <checkAktifCalisma+0x550>
					timer2=millis;
 8003b6e:	4b38      	ldr	r3, [pc, #224]	@ (8003c50 <checkAktifCalisma+0x624>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a38      	ldr	r2, [pc, #224]	@ (8003c54 <checkAktifCalisma+0x628>)
 8003b74:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 8003b76:	4b35      	ldr	r3, [pc, #212]	@ (8003c4c <checkAktifCalisma+0x620>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8003b7c:	4b34      	ldr	r3, [pc, #208]	@ (8003c50 <checkAktifCalisma+0x624>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b34      	ldr	r3, [pc, #208]	@ (8003c54 <checkAktifCalisma+0x628>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	4a34      	ldr	r2, [pc, #208]	@ (8003c58 <checkAktifCalisma+0x62c>)
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d303      	bcc.n	8003b96 <checkAktifCalisma+0x56a>
 8003b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8003c4c <checkAktifCalisma+0x620>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d114      	bne.n	8003bc0 <checkAktifCalisma+0x594>
 8003b96:	4b1d      	ldr	r3, [pc, #116]	@ (8003c0c <checkAktifCalisma+0x5e0>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	f083 0301 	eor.w	r3, r3, #1
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10d      	bne.n	8003bc0 <checkAktifCalisma+0x594>
 8003ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c10 <checkAktifCalisma+0x5e4>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	f083 0301 	eor.w	r3, r3, #1
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <checkAktifCalisma+0x594>
 8003bb2:	4b14      	ldr	r3, [pc, #80]	@ (8003c04 <checkAktifCalisma+0x5d8>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	f083 0301 	eor.w	r3, r3, #1
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	4813      	ldr	r0, [pc, #76]	@ (8003c14 <checkAktifCalisma+0x5e8>)
 8003bc6:	f005 fd70 	bl	80096aa <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8003bca:	4b17      	ldr	r3, [pc, #92]	@ (8003c28 <checkAktifCalisma+0x5fc>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8003bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c4c <checkAktifCalisma+0x620>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8003bd6:	4b14      	ldr	r3, [pc, #80]	@ (8003c28 <checkAktifCalisma+0x5fc>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d040      	beq.n	8003c60 <checkAktifCalisma+0x634>
 8003bde:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003be2:	480f      	ldr	r0, [pc, #60]	@ (8003c20 <checkAktifCalisma+0x5f4>)
 8003be4:	f005 fd4a 	bl	800967c <HAL_GPIO_ReadPin>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d138      	bne.n	8003c60 <checkAktifCalisma+0x634>
 8003bee:	4b1b      	ldr	r3, [pc, #108]	@ (8003c5c <checkAktifCalisma+0x630>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d034      	beq.n	8003c60 <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	4806      	ldr	r0, [pc, #24]	@ (8003c14 <checkAktifCalisma+0x5e8>)
 8003bfc:	f005 fd55 	bl	80096aa <HAL_GPIO_WritePin>
 8003c00:	e033      	b.n	8003c6a <checkAktifCalisma+0x63e>
 8003c02:	bf00      	nop
 8003c04:	20000df6 	.word	0x20000df6
 8003c08:	20000dbd 	.word	0x20000dbd
 8003c0c:	20000df1 	.word	0x20000df1
 8003c10:	20000df2 	.word	0x20000df2
 8003c14:	40010c00 	.word	0x40010c00
 8003c18:	20000ddd 	.word	0x20000ddd
 8003c1c:	20000df0 	.word	0x20000df0
 8003c20:	40011000 	.word	0x40011000
 8003c24:	20000da6 	.word	0x20000da6
 8003c28:	20000dd8 	.word	0x20000dd8
 8003c2c:	20000dd5 	.word	0x20000dd5
 8003c30:	20000dd9 	.word	0x20000dd9
 8003c34:	20000dd6 	.word	0x20000dd6
 8003c38:	20000dd7 	.word	0x20000dd7
 8003c3c:	20000dda 	.word	0x20000dda
 8003c40:	20000ddb 	.word	0x20000ddb
 8003c44:	20000de0 	.word	0x20000de0
 8003c48:	20000e00 	.word	0x20000e00
 8003c4c:	20000dd0 	.word	0x20000dd0
 8003c50:	20000d78 	.word	0x20000d78
 8003c54:	20000d84 	.word	0x20000d84
 8003c58:	20000db5 	.word	0x20000db5
 8003c5c:	20000da5 	.word	0x20000da5
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8003c60:	2200      	movs	r2, #0
 8003c62:	2101      	movs	r1, #1
 8003c64:	4836      	ldr	r0, [pc, #216]	@ (8003d40 <checkAktifCalisma+0x714>)
 8003c66:	f005 fd20 	bl	80096aa <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8003c6a:	4b36      	ldr	r3, [pc, #216]	@ (8003d44 <checkAktifCalisma+0x718>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f040 8080 	bne.w	8003d74 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8003c74:	4b34      	ldr	r3, [pc, #208]	@ (8003d48 <checkAktifCalisma+0x71c>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d003      	beq.n	8003c84 <checkAktifCalisma+0x658>
 8003c7c:	4b32      	ldr	r3, [pc, #200]	@ (8003d48 <checkAktifCalisma+0x71c>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d177      	bne.n	8003d74 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8003c84:	4b31      	ldr	r3, [pc, #196]	@ (8003d4c <checkAktifCalisma+0x720>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d073      	beq.n	8003d74 <checkAktifCalisma+0x748>
 8003c8c:	4b30      	ldr	r3, [pc, #192]	@ (8003d50 <checkAktifCalisma+0x724>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d06f      	beq.n	8003d74 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8003c94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c98:	4829      	ldr	r0, [pc, #164]	@ (8003d40 <checkAktifCalisma+0x714>)
 8003c9a:	f005 fcef 	bl	800967c <HAL_GPIO_ReadPin>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d167      	bne.n	8003d74 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8003ca4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ca8:	482a      	ldr	r0, [pc, #168]	@ (8003d54 <checkAktifCalisma+0x728>)
 8003caa:	f005 fce7 	bl	800967c <HAL_GPIO_ReadPin>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <checkAktifCalisma+0x690>
 8003cb4:	4b28      	ldr	r3, [pc, #160]	@ (8003d58 <checkAktifCalisma+0x72c>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d15b      	bne.n	8003d74 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8003cbc:	2140      	movs	r1, #64	@ 0x40
 8003cbe:	4825      	ldr	r0, [pc, #148]	@ (8003d54 <checkAktifCalisma+0x728>)
 8003cc0:	f005 fcdc 	bl	800967c <HAL_GPIO_ReadPin>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d10f      	bne.n	8003cea <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8003cca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003cce:	481c      	ldr	r0, [pc, #112]	@ (8003d40 <checkAktifCalisma+0x714>)
 8003cd0:	f005 fcd4 	bl	800967c <HAL_GPIO_ReadPin>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d107      	bne.n	8003cea <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8003cda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003cde:	4818      	ldr	r0, [pc, #96]	@ (8003d40 <checkAktifCalisma+0x714>)
 8003ce0:	f005 fccc 	bl	800967c <HAL_GPIO_ReadPin>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d003      	beq.n	8003cf2 <checkAktifCalisma+0x6c6>
 8003cea:	4b1c      	ldr	r3, [pc, #112]	@ (8003d5c <checkAktifCalisma+0x730>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d040      	beq.n	8003d74 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8003cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d60 <checkAktifCalisma+0x734>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	f083 0301 	eor.w	r3, r3, #1
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d039      	beq.n	8003d74 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8003d00:	4b18      	ldr	r3, [pc, #96]	@ (8003d64 <checkAktifCalisma+0x738>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	f083 0301 	eor.w	r3, r3, #1
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d032      	beq.n	8003d74 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8003d0e:	4b16      	ldr	r3, [pc, #88]	@ (8003d68 <checkAktifCalisma+0x73c>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	f083 0301 	eor.w	r3, r3, #1
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d02b      	beq.n	8003d74 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8003d1c:	4b13      	ldr	r3, [pc, #76]	@ (8003d6c <checkAktifCalisma+0x740>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	f083 0301 	eor.w	r3, r3, #1
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d024      	beq.n	8003d74 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8003d2a:	4b11      	ldr	r3, [pc, #68]	@ (8003d70 <checkAktifCalisma+0x744>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	f083 0301 	eor.w	r3, r3, #1
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01d      	beq.n	8003d74 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8003d38:	4b08      	ldr	r3, [pc, #32]	@ (8003d5c <checkAktifCalisma+0x730>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	701a      	strb	r2, [r3, #0]
 8003d3e:	e01c      	b.n	8003d7a <checkAktifCalisma+0x74e>
 8003d40:	40010c00 	.word	0x40010c00
 8003d44:	20000dbd 	.word	0x20000dbd
 8003d48:	20000daf 	.word	0x20000daf
 8003d4c:	20000df1 	.word	0x20000df1
 8003d50:	20000df2 	.word	0x20000df2
 8003d54:	40011000 	.word	0x40011000
 8003d58:	20000db0 	.word	0x20000db0
 8003d5c:	20000dd6 	.word	0x20000dd6
 8003d60:	20000dd5 	.word	0x20000dd5
 8003d64:	20000dd9 	.word	0x20000dd9
 8003d68:	20000dd8 	.word	0x20000dd8
 8003d6c:	20000dd7 	.word	0x20000dd7
 8003d70:	20000ddb 	.word	0x20000ddb
				} else {
					devmotoryukaricalisiyor=0;
 8003d74:	4b64      	ldr	r3, [pc, #400]	@ (8003f08 <checkAktifCalisma+0x8dc>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8003d7a:	4b63      	ldr	r3, [pc, #396]	@ (8003f08 <checkAktifCalisma+0x8dc>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d007      	beq.n	8003d92 <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8003d82:	2201      	movs	r2, #1
 8003d84:	2120      	movs	r1, #32
 8003d86:	4861      	ldr	r0, [pc, #388]	@ (8003f0c <checkAktifCalisma+0x8e0>)
 8003d88:	f005 fc8f 	bl	80096aa <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8003d8c:	4b60      	ldr	r3, [pc, #384]	@ (8003f10 <checkAktifCalisma+0x8e4>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8003d92:	4b5f      	ldr	r3, [pc, #380]	@ (8003f10 <checkAktifCalisma+0x8e4>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d025      	beq.n	8003de6 <checkAktifCalisma+0x7ba>
 8003d9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d9e:	485d      	ldr	r0, [pc, #372]	@ (8003f14 <checkAktifCalisma+0x8e8>)
 8003da0:	f005 fc6c 	bl	800967c <HAL_GPIO_ReadPin>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d007      	beq.n	8003dba <checkAktifCalisma+0x78e>
 8003daa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003dae:	4857      	ldr	r0, [pc, #348]	@ (8003f0c <checkAktifCalisma+0x8e0>)
 8003db0:	f005 fc64 	bl	800967c <HAL_GPIO_ReadPin>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d115      	bne.n	8003de6 <checkAktifCalisma+0x7ba>
 8003dba:	4b57      	ldr	r3, [pc, #348]	@ (8003f18 <checkAktifCalisma+0x8ec>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d011      	beq.n	8003de6 <checkAktifCalisma+0x7ba>
 8003dc2:	4b56      	ldr	r3, [pc, #344]	@ (8003f1c <checkAktifCalisma+0x8f0>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00d      	beq.n	8003de6 <checkAktifCalisma+0x7ba>
 8003dca:	4b55      	ldr	r3, [pc, #340]	@ (8003f20 <checkAktifCalisma+0x8f4>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	f083 0301 	eor.w	r3, r3, #1
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d006      	beq.n	8003de6 <checkAktifCalisma+0x7ba>
					timer2=millis;
 8003dd8:	4b52      	ldr	r3, [pc, #328]	@ (8003f24 <checkAktifCalisma+0x8f8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a52      	ldr	r2, [pc, #328]	@ (8003f28 <checkAktifCalisma+0x8fc>)
 8003dde:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8003de0:	4b4f      	ldr	r3, [pc, #316]	@ (8003f20 <checkAktifCalisma+0x8f4>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8003de6:	4b4f      	ldr	r3, [pc, #316]	@ (8003f24 <checkAktifCalisma+0x8f8>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	4b4f      	ldr	r3, [pc, #316]	@ (8003f28 <checkAktifCalisma+0x8fc>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	4a4e      	ldr	r2, [pc, #312]	@ (8003f2c <checkAktifCalisma+0x900>)
 8003df2:	7812      	ldrb	r2, [r2, #0]
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d303      	bcc.n	8003e00 <checkAktifCalisma+0x7d4>
 8003df8:	4b49      	ldr	r3, [pc, #292]	@ (8003f20 <checkAktifCalisma+0x8f4>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10d      	bne.n	8003e1c <checkAktifCalisma+0x7f0>
 8003e00:	4b45      	ldr	r3, [pc, #276]	@ (8003f18 <checkAktifCalisma+0x8ec>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	f083 0301 	eor.w	r3, r3, #1
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <checkAktifCalisma+0x7f0>
 8003e0e:	4b43      	ldr	r3, [pc, #268]	@ (8003f1c <checkAktifCalisma+0x8f0>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	f083 0301 	eor.w	r3, r3, #1
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2120      	movs	r1, #32
 8003e20:	483a      	ldr	r0, [pc, #232]	@ (8003f0c <checkAktifCalisma+0x8e0>)
 8003e22:	f005 fc42 	bl	80096aa <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8003e26:	4b3a      	ldr	r3, [pc, #232]	@ (8003f10 <checkAktifCalisma+0x8e4>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8003e2c:	4b3c      	ldr	r3, [pc, #240]	@ (8003f20 <checkAktifCalisma+0x8f4>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8003e32:	4b3f      	ldr	r3, [pc, #252]	@ (8003f30 <checkAktifCalisma+0x904>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f040 8088 	bne.w	8003f4c <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8003e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f34 <checkAktifCalisma+0x908>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d003      	beq.n	8003e4c <checkAktifCalisma+0x820>
 8003e44:	4b3b      	ldr	r3, [pc, #236]	@ (8003f34 <checkAktifCalisma+0x908>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d17f      	bne.n	8003f4c <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8003e4c:	4b32      	ldr	r3, [pc, #200]	@ (8003f18 <checkAktifCalisma+0x8ec>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d07b      	beq.n	8003f4c <checkAktifCalisma+0x920>
 8003e54:	4b31      	ldr	r3, [pc, #196]	@ (8003f1c <checkAktifCalisma+0x8f0>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d077      	beq.n	8003f4c <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8003e5c:	2140      	movs	r1, #64	@ 0x40
 8003e5e:	482b      	ldr	r0, [pc, #172]	@ (8003f0c <checkAktifCalisma+0x8e0>)
 8003e60:	f005 fc0c 	bl	800967c <HAL_GPIO_ReadPin>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d170      	bne.n	8003f4c <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8003e6a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003e6e:	4827      	ldr	r0, [pc, #156]	@ (8003f0c <checkAktifCalisma+0x8e0>)
 8003e70:	f005 fc04 	bl	800967c <HAL_GPIO_ReadPin>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <checkAktifCalisma+0x856>
 8003e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8003f38 <checkAktifCalisma+0x90c>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d164      	bne.n	8003f4c <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8003e82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e86:	4823      	ldr	r0, [pc, #140]	@ (8003f14 <checkAktifCalisma+0x8e8>)
 8003e88:	f005 fbf8 	bl	800967c <HAL_GPIO_ReadPin>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d10f      	bne.n	8003eb2 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8003e92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e96:	481f      	ldr	r0, [pc, #124]	@ (8003f14 <checkAktifCalisma+0x8e8>)
 8003e98:	f005 fbf0 	bl	800967c <HAL_GPIO_ReadPin>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d107      	bne.n	8003eb2 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8003ea2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003ea6:	481b      	ldr	r0, [pc, #108]	@ (8003f14 <checkAktifCalisma+0x8e8>)
 8003ea8:	f005 fbe8 	bl	800967c <HAL_GPIO_ReadPin>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d003      	beq.n	8003eba <checkAktifCalisma+0x88e>
 8003eb2:	4b22      	ldr	r3, [pc, #136]	@ (8003f3c <checkAktifCalisma+0x910>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d048      	beq.n	8003f4c <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8003eba:	4b21      	ldr	r3, [pc, #132]	@ (8003f40 <checkAktifCalisma+0x914>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	f083 0301 	eor.w	r3, r3, #1
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d041      	beq.n	8003f4c <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8003ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f44 <checkAktifCalisma+0x918>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	f083 0301 	eor.w	r3, r3, #1
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d03a      	beq.n	8003f4c <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8003ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8003f48 <checkAktifCalisma+0x91c>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	f083 0301 	eor.w	r3, r3, #1
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d033      	beq.n	8003f4c <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8003f10 <checkAktifCalisma+0x8e4>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	f083 0301 	eor.w	r3, r3, #1
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d02c      	beq.n	8003f4c <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8003ef2:	4b05      	ldr	r3, [pc, #20]	@ (8003f08 <checkAktifCalisma+0x8dc>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	f083 0301 	eor.w	r3, r3, #1
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d025      	beq.n	8003f4c <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 8003f00:	4b0e      	ldr	r3, [pc, #56]	@ (8003f3c <checkAktifCalisma+0x910>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	e024      	b.n	8003f52 <checkAktifCalisma+0x926>
 8003f08:	20000dd6 	.word	0x20000dd6
 8003f0c:	40011000 	.word	0x40011000
 8003f10:	20000dda 	.word	0x20000dda
 8003f14:	40010c00 	.word	0x40010c00
 8003f18:	20000df1 	.word	0x20000df1
 8003f1c:	20000df2 	.word	0x20000df2
 8003f20:	20000dd2 	.word	0x20000dd2
 8003f24:	20000d78 	.word	0x20000d78
 8003f28:	20000d84 	.word	0x20000d84
 8003f2c:	20000db6 	.word	0x20000db6
 8003f30:	20000dbd 	.word	0x20000dbd
 8003f34:	20000daf 	.word	0x20000daf
 8003f38:	20000db1 	.word	0x20000db1
 8003f3c:	20000dd7 	.word	0x20000dd7
 8003f40:	20000dd5 	.word	0x20000dd5
 8003f44:	20000dd9 	.word	0x20000dd9
 8003f48:	20000dd8 	.word	0x20000dd8
				} else {
					devmotorasagicalisiyor=0;
 8003f4c:	4b96      	ldr	r3, [pc, #600]	@ (80041a8 <checkAktifCalisma+0xb7c>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8003f52:	4b95      	ldr	r3, [pc, #596]	@ (80041a8 <checkAktifCalisma+0xb7c>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	2110      	movs	r1, #16
 8003f5e:	4893      	ldr	r0, [pc, #588]	@ (80041ac <checkAktifCalisma+0xb80>)
 8003f60:	f005 fba3 	bl	80096aa <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8003f64:	4b92      	ldr	r3, [pc, #584]	@ (80041b0 <checkAktifCalisma+0xb84>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8003f6a:	4b91      	ldr	r3, [pc, #580]	@ (80041b0 <checkAktifCalisma+0xb84>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d024      	beq.n	8003fbc <checkAktifCalisma+0x990>
 8003f72:	2140      	movs	r1, #64	@ 0x40
 8003f74:	488d      	ldr	r0, [pc, #564]	@ (80041ac <checkAktifCalisma+0xb80>)
 8003f76:	f005 fb81 	bl	800967c <HAL_GPIO_ReadPin>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d007      	beq.n	8003f90 <checkAktifCalisma+0x964>
 8003f80:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003f84:	4889      	ldr	r0, [pc, #548]	@ (80041ac <checkAktifCalisma+0xb80>)
 8003f86:	f005 fb79 	bl	800967c <HAL_GPIO_ReadPin>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d115      	bne.n	8003fbc <checkAktifCalisma+0x990>
 8003f90:	4b88      	ldr	r3, [pc, #544]	@ (80041b4 <checkAktifCalisma+0xb88>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d011      	beq.n	8003fbc <checkAktifCalisma+0x990>
 8003f98:	4b87      	ldr	r3, [pc, #540]	@ (80041b8 <checkAktifCalisma+0xb8c>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00d      	beq.n	8003fbc <checkAktifCalisma+0x990>
 8003fa0:	4b86      	ldr	r3, [pc, #536]	@ (80041bc <checkAktifCalisma+0xb90>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	f083 0301 	eor.w	r3, r3, #1
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d006      	beq.n	8003fbc <checkAktifCalisma+0x990>
					timer2=millis;
 8003fae:	4b84      	ldr	r3, [pc, #528]	@ (80041c0 <checkAktifCalisma+0xb94>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a84      	ldr	r2, [pc, #528]	@ (80041c4 <checkAktifCalisma+0xb98>)
 8003fb4:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8003fb6:	4b81      	ldr	r3, [pc, #516]	@ (80041bc <checkAktifCalisma+0xb90>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8003fbc:	4b80      	ldr	r3, [pc, #512]	@ (80041c0 <checkAktifCalisma+0xb94>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4b80      	ldr	r3, [pc, #512]	@ (80041c4 <checkAktifCalisma+0xb98>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	4a80      	ldr	r2, [pc, #512]	@ (80041c8 <checkAktifCalisma+0xb9c>)
 8003fc8:	7812      	ldrb	r2, [r2, #0]
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d303      	bcc.n	8003fd6 <checkAktifCalisma+0x9aa>
 8003fce:	4b7b      	ldr	r3, [pc, #492]	@ (80041bc <checkAktifCalisma+0xb90>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10d      	bne.n	8003ff2 <checkAktifCalisma+0x9c6>
 8003fd6:	4b77      	ldr	r3, [pc, #476]	@ (80041b4 <checkAktifCalisma+0xb88>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	f083 0301 	eor.w	r3, r3, #1
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d106      	bne.n	8003ff2 <checkAktifCalisma+0x9c6>
 8003fe4:	4b74      	ldr	r3, [pc, #464]	@ (80041b8 <checkAktifCalisma+0xb8c>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	f083 0301 	eor.w	r3, r3, #1
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2110      	movs	r1, #16
 8003ff6:	486d      	ldr	r0, [pc, #436]	@ (80041ac <checkAktifCalisma+0xb80>)
 8003ff8:	f005 fb57 	bl	80096aa <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8003ffc:	4b6c      	ldr	r3, [pc, #432]	@ (80041b0 <checkAktifCalisma+0xb84>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8004002:	4b6e      	ldr	r3, [pc, #440]	@ (80041bc <checkAktifCalisma+0xb90>)
 8004004:	2200      	movs	r2, #0
 8004006:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004008:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800400c:	486f      	ldr	r0, [pc, #444]	@ (80041cc <checkAktifCalisma+0xba0>)
 800400e:	f005 fb35 	bl	800967c <HAL_GPIO_ReadPin>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d120      	bne.n	800405a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004018:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800401c:	486b      	ldr	r0, [pc, #428]	@ (80041cc <checkAktifCalisma+0xba0>)
 800401e:	f005 fb2d 	bl	800967c <HAL_GPIO_ReadPin>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d118      	bne.n	800405a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004028:	2104      	movs	r1, #4
 800402a:	4868      	ldr	r0, [pc, #416]	@ (80041cc <checkAktifCalisma+0xba0>)
 800402c:	f005 fb26 	bl	800967c <HAL_GPIO_ReadPin>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d111      	bne.n	800405a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004036:	2102      	movs	r1, #2
 8004038:	4864      	ldr	r0, [pc, #400]	@ (80041cc <checkAktifCalisma+0xba0>)
 800403a:	f005 fb1f 	bl	800967c <HAL_GPIO_ReadPin>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004044:	2101      	movs	r1, #1
 8004046:	4861      	ldr	r0, [pc, #388]	@ (80041cc <checkAktifCalisma+0xba0>)
 8004048:	f005 fb18 	bl	800967c <HAL_GPIO_ReadPin>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d103      	bne.n	800405a <checkAktifCalisma+0xa2e>
					makineStop=1;
 8004052:	4b5f      	ldr	r3, [pc, #380]	@ (80041d0 <checkAktifCalisma+0xba4>)
 8004054:	2201      	movs	r2, #1
 8004056:	701a      	strb	r2, [r3, #0]
 8004058:	e002      	b.n	8004060 <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 800405a:	4b5d      	ldr	r3, [pc, #372]	@ (80041d0 <checkAktifCalisma+0xba4>)
 800405c:	2200      	movs	r2, #0
 800405e:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004060:	4b5c      	ldr	r3, [pc, #368]	@ (80041d4 <checkAktifCalisma+0xba8>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d144      	bne.n	80040f2 <checkAktifCalisma+0xac6>
 8004068:	4b5b      	ldr	r3, [pc, #364]	@ (80041d8 <checkAktifCalisma+0xbac>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d003      	beq.n	8004078 <checkAktifCalisma+0xa4c>
 8004070:	4b59      	ldr	r3, [pc, #356]	@ (80041d8 <checkAktifCalisma+0xbac>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b03      	cmp	r3, #3
 8004076:	d13c      	bne.n	80040f2 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004078:	2180      	movs	r1, #128	@ 0x80
 800407a:	484c      	ldr	r0, [pc, #304]	@ (80041ac <checkAktifCalisma+0xb80>)
 800407c:	f005 fafe 	bl	800967c <HAL_GPIO_ReadPin>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d103      	bne.n	800408e <checkAktifCalisma+0xa62>
 8004086:	4b55      	ldr	r3, [pc, #340]	@ (80041dc <checkAktifCalisma+0xbb0>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <checkAktifCalisma+0xa7a>
 800408e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004092:	484e      	ldr	r0, [pc, #312]	@ (80041cc <checkAktifCalisma+0xba0>)
 8004094:	f005 faf2 	bl	800967c <HAL_GPIO_ReadPin>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d129      	bne.n	80040f2 <checkAktifCalisma+0xac6>
 800409e:	4b4f      	ldr	r3, [pc, #316]	@ (80041dc <checkAktifCalisma+0xbb0>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d125      	bne.n	80040f2 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80040a6:	2104      	movs	r1, #4
 80040a8:	4840      	ldr	r0, [pc, #256]	@ (80041ac <checkAktifCalisma+0xb80>)
 80040aa:	f005 fae7 	bl	800967c <HAL_GPIO_ReadPin>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d003      	beq.n	80040bc <checkAktifCalisma+0xa90>
 80040b4:	4b4a      	ldr	r3, [pc, #296]	@ (80041e0 <checkAktifCalisma+0xbb4>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d11a      	bne.n	80040f2 <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80040bc:	2102      	movs	r1, #2
 80040be:	483b      	ldr	r0, [pc, #236]	@ (80041ac <checkAktifCalisma+0xb80>)
 80040c0:	f005 fadc 	bl	800967c <HAL_GPIO_ReadPin>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d113      	bne.n	80040f2 <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 80040ca:	4b46      	ldr	r3, [pc, #280]	@ (80041e4 <checkAktifCalisma+0xbb8>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	f083 0301 	eor.w	r3, r3, #1
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00c      	beq.n	80040f2 <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 80040d8:	4b3d      	ldr	r3, [pc, #244]	@ (80041d0 <checkAktifCalisma+0xba4>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 80040e0:	4b41      	ldr	r3, [pc, #260]	@ (80041e8 <checkAktifCalisma+0xbbc>)
 80040e2:	2201      	movs	r2, #1
 80040e4:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80040e6:	4b36      	ldr	r3, [pc, #216]	@ (80041c0 <checkAktifCalisma+0xb94>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a40      	ldr	r2, [pc, #256]	@ (80041ec <checkAktifCalisma+0xbc0>)
 80040ec:	6013      	str	r3, [r2, #0]
					bekle();
 80040ee:	f7ff f901 	bl	80032f4 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80040f2:	4b33      	ldr	r3, [pc, #204]	@ (80041c0 <checkAktifCalisma+0xb94>)
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	4b3d      	ldr	r3, [pc, #244]	@ (80041ec <checkAktifCalisma+0xbc0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	4a3c      	ldr	r2, [pc, #240]	@ (80041f0 <checkAktifCalisma+0xbc4>)
 80040fe:	7812      	ldrb	r2, [r2, #0]
 8004100:	4293      	cmp	r3, r2
 8004102:	d211      	bcs.n	8004128 <checkAktifCalisma+0xafc>
 8004104:	2104      	movs	r1, #4
 8004106:	4829      	ldr	r0, [pc, #164]	@ (80041ac <checkAktifCalisma+0xb80>)
 8004108:	f005 fab8 	bl	800967c <HAL_GPIO_ReadPin>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <checkAktifCalisma+0xafc>
 8004112:	4b33      	ldr	r3, [pc, #204]	@ (80041e0 <checkAktifCalisma+0xbb4>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d006      	beq.n	8004128 <checkAktifCalisma+0xafc>
 800411a:	4b2d      	ldr	r3, [pc, #180]	@ (80041d0 <checkAktifCalisma+0xba4>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	f083 0301 	eor.w	r3, r3, #1
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 8004128:	4b2f      	ldr	r3, [pc, #188]	@ (80041e8 <checkAktifCalisma+0xbbc>)
 800412a:	2200      	movs	r2, #0
 800412c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800412e:	4b29      	ldr	r3, [pc, #164]	@ (80041d4 <checkAktifCalisma+0xba8>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d160      	bne.n	80041f8 <checkAktifCalisma+0xbcc>
 8004136:	4b28      	ldr	r3, [pc, #160]	@ (80041d8 <checkAktifCalisma+0xbac>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d003      	beq.n	8004146 <checkAktifCalisma+0xb1a>
 800413e:	4b26      	ldr	r3, [pc, #152]	@ (80041d8 <checkAktifCalisma+0xbac>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b03      	cmp	r3, #3
 8004144:	d158      	bne.n	80041f8 <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004146:	2104      	movs	r1, #4
 8004148:	4818      	ldr	r0, [pc, #96]	@ (80041ac <checkAktifCalisma+0xb80>)
 800414a:	f005 fa97 	bl	800967c <HAL_GPIO_ReadPin>
 800414e:	4603      	mov	r3, r0
 8004150:	2b01      	cmp	r3, #1
 8004152:	d003      	beq.n	800415c <checkAktifCalisma+0xb30>
 8004154:	4b22      	ldr	r3, [pc, #136]	@ (80041e0 <checkAktifCalisma+0xbb4>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d14d      	bne.n	80041f8 <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800415c:	2102      	movs	r1, #2
 800415e:	4813      	ldr	r0, [pc, #76]	@ (80041ac <checkAktifCalisma+0xb80>)
 8004160:	f005 fa8c 	bl	800967c <HAL_GPIO_ReadPin>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d146      	bne.n	80041f8 <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800416a:	2180      	movs	r1, #128	@ 0x80
 800416c:	480f      	ldr	r0, [pc, #60]	@ (80041ac <checkAktifCalisma+0xb80>)
 800416e:	f005 fa85 	bl	800967c <HAL_GPIO_ReadPin>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d103      	bne.n	8004180 <checkAktifCalisma+0xb54>
 8004178:	4b18      	ldr	r3, [pc, #96]	@ (80041dc <checkAktifCalisma+0xbb0>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00b      	beq.n	8004198 <checkAktifCalisma+0xb6c>
 8004180:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004184:	4811      	ldr	r0, [pc, #68]	@ (80041cc <checkAktifCalisma+0xba0>)
 8004186:	f005 fa79 	bl	800967c <HAL_GPIO_ReadPin>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d133      	bne.n	80041f8 <checkAktifCalisma+0xbcc>
 8004190:	4b12      	ldr	r3, [pc, #72]	@ (80041dc <checkAktifCalisma+0xbb0>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d12f      	bne.n	80041f8 <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 8004198:	4b0d      	ldr	r3, [pc, #52]	@ (80041d0 <checkAktifCalisma+0xba4>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d02b      	beq.n	80041f8 <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 80041a0:	4b14      	ldr	r3, [pc, #80]	@ (80041f4 <checkAktifCalisma+0xbc8>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	e02a      	b.n	80041fe <checkAktifCalisma+0xbd2>
 80041a8:	20000dd7 	.word	0x20000dd7
 80041ac:	40011000 	.word	0x40011000
 80041b0:	20000ddb 	.word	0x20000ddb
 80041b4:	20000df1 	.word	0x20000df1
 80041b8:	20000df2 	.word	0x20000df2
 80041bc:	20000dd3 	.word	0x20000dd3
 80041c0:	20000d78 	.word	0x20000d78
 80041c4:	20000d84 	.word	0x20000d84
 80041c8:	20000db6 	.word	0x20000db6
 80041cc:	40010c00 	.word	0x40010c00
 80041d0:	20000de1 	.word	0x20000de1
 80041d4:	20000da9 	.word	0x20000da9
 80041d8:	20000da8 	.word	0x20000da8
 80041dc:	20000dac 	.word	0x20000dac
 80041e0:	20000da6 	.word	0x20000da6
 80041e4:	20000dcf 	.word	0x20000dcf
 80041e8:	20000de2 	.word	0x20000de2
 80041ec:	20000d7c 	.word	0x20000d7c
 80041f0:	20000db9 	.word	0x20000db9
 80041f4:	20000de3 	.word	0x20000de3
				} else {
					kapi1butonkontrol=0;
 80041f8:	4b8b      	ldr	r3, [pc, #556]	@ (8004428 <checkAktifCalisma+0xdfc>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80041fe:	4b8b      	ldr	r3, [pc, #556]	@ (800442c <checkAktifCalisma+0xe00>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d121      	bne.n	800424a <checkAktifCalisma+0xc1e>
 8004206:	4b8a      	ldr	r3, [pc, #552]	@ (8004430 <checkAktifCalisma+0xe04>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d003      	beq.n	8004216 <checkAktifCalisma+0xbea>
 800420e:	4b88      	ldr	r3, [pc, #544]	@ (8004430 <checkAktifCalisma+0xe04>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b03      	cmp	r3, #3
 8004214:	d119      	bne.n	800424a <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004216:	2104      	movs	r1, #4
 8004218:	4886      	ldr	r0, [pc, #536]	@ (8004434 <checkAktifCalisma+0xe08>)
 800421a:	f005 fa2f 	bl	800967c <HAL_GPIO_ReadPin>
 800421e:	4603      	mov	r3, r0
 8004220:	2b01      	cmp	r3, #1
 8004222:	d003      	beq.n	800422c <checkAktifCalisma+0xc00>
 8004224:	4b84      	ldr	r3, [pc, #528]	@ (8004438 <checkAktifCalisma+0xe0c>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10e      	bne.n	800424a <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800422c:	2102      	movs	r1, #2
 800422e:	4881      	ldr	r0, [pc, #516]	@ (8004434 <checkAktifCalisma+0xe08>)
 8004230:	f005 fa24 	bl	800967c <HAL_GPIO_ReadPin>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d107      	bne.n	800424a <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 800423a:	4b80      	ldr	r3, [pc, #512]	@ (800443c <checkAktifCalisma+0xe10>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 8004242:	4b7f      	ldr	r3, [pc, #508]	@ (8004440 <checkAktifCalisma+0xe14>)
 8004244:	2201      	movs	r2, #1
 8004246:	701a      	strb	r2, [r3, #0]
 8004248:	e002      	b.n	8004250 <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 800424a:	4b7d      	ldr	r3, [pc, #500]	@ (8004440 <checkAktifCalisma+0xe14>)
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004250:	4b75      	ldr	r3, [pc, #468]	@ (8004428 <checkAktifCalisma+0xdfc>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d107      	bne.n	8004268 <checkAktifCalisma+0xc3c>
 8004258:	4b79      	ldr	r3, [pc, #484]	@ (8004440 <checkAktifCalisma+0xe14>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d103      	bne.n	8004268 <checkAktifCalisma+0xc3c>
 8004260:	4b78      	ldr	r3, [pc, #480]	@ (8004444 <checkAktifCalisma+0xe18>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004268:	2201      	movs	r2, #1
 800426a:	2180      	movs	r1, #128	@ 0x80
 800426c:	4876      	ldr	r0, [pc, #472]	@ (8004448 <checkAktifCalisma+0xe1c>)
 800426e:	f005 fa1c 	bl	80096aa <HAL_GPIO_WritePin>
 8004272:	e004      	b.n	800427e <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004274:	2200      	movs	r2, #0
 8004276:	2180      	movs	r1, #128	@ 0x80
 8004278:	4873      	ldr	r0, [pc, #460]	@ (8004448 <checkAktifCalisma+0xe1c>)
 800427a:	f005 fa16 	bl	80096aa <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800427e:	4b73      	ldr	r3, [pc, #460]	@ (800444c <checkAktifCalisma+0xe20>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d141      	bne.n	800430a <checkAktifCalisma+0xcde>
 8004286:	4b6a      	ldr	r3, [pc, #424]	@ (8004430 <checkAktifCalisma+0xe04>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d003      	beq.n	8004296 <checkAktifCalisma+0xc6a>
 800428e:	4b68      	ldr	r3, [pc, #416]	@ (8004430 <checkAktifCalisma+0xe04>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b03      	cmp	r3, #3
 8004294:	d139      	bne.n	800430a <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004296:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800429a:	4866      	ldr	r0, [pc, #408]	@ (8004434 <checkAktifCalisma+0xe08>)
 800429c:	f005 f9ee 	bl	800967c <HAL_GPIO_ReadPin>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <checkAktifCalisma+0xc82>
 80042a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004450 <checkAktifCalisma+0xe24>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00b      	beq.n	80042c6 <checkAktifCalisma+0xc9a>
 80042ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80042b2:	4868      	ldr	r0, [pc, #416]	@ (8004454 <checkAktifCalisma+0xe28>)
 80042b4:	f005 f9e2 	bl	800967c <HAL_GPIO_ReadPin>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d125      	bne.n	800430a <checkAktifCalisma+0xcde>
 80042be:	4b64      	ldr	r3, [pc, #400]	@ (8004450 <checkAktifCalisma+0xe24>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d121      	bne.n	800430a <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80042c6:	2102      	movs	r1, #2
 80042c8:	485a      	ldr	r0, [pc, #360]	@ (8004434 <checkAktifCalisma+0xe08>)
 80042ca:	f005 f9d7 	bl	800967c <HAL_GPIO_ReadPin>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d11a      	bne.n	800430a <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80042d4:	2104      	movs	r1, #4
 80042d6:	4857      	ldr	r0, [pc, #348]	@ (8004434 <checkAktifCalisma+0xe08>)
 80042d8:	f005 f9d0 	bl	800967c <HAL_GPIO_ReadPin>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d113      	bne.n	800430a <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 80042e2:	4b56      	ldr	r3, [pc, #344]	@ (800443c <checkAktifCalisma+0xe10>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00f      	beq.n	800430a <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 80042ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004458 <checkAktifCalisma+0xe2c>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	f083 0301 	eor.w	r3, r3, #1
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 80042f8:	4b58      	ldr	r3, [pc, #352]	@ (800445c <checkAktifCalisma+0xe30>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80042fe:	4b58      	ldr	r3, [pc, #352]	@ (8004460 <checkAktifCalisma+0xe34>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a58      	ldr	r2, [pc, #352]	@ (8004464 <checkAktifCalisma+0xe38>)
 8004304:	6013      	str	r3, [r2, #0]
					bekle();
 8004306:	f7fe fff5 	bl	80032f4 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800430a:	4b55      	ldr	r3, [pc, #340]	@ (8004460 <checkAktifCalisma+0xe34>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4b55      	ldr	r3, [pc, #340]	@ (8004464 <checkAktifCalisma+0xe38>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	4a54      	ldr	r2, [pc, #336]	@ (8004468 <checkAktifCalisma+0xe3c>)
 8004316:	7812      	ldrb	r2, [r2, #0]
 8004318:	4293      	cmp	r3, r2
 800431a:	d20d      	bcs.n	8004338 <checkAktifCalisma+0xd0c>
 800431c:	2102      	movs	r1, #2
 800431e:	4845      	ldr	r0, [pc, #276]	@ (8004434 <checkAktifCalisma+0xe08>)
 8004320:	f005 f9ac 	bl	800967c <HAL_GPIO_ReadPin>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d006      	beq.n	8004338 <checkAktifCalisma+0xd0c>
 800432a:	4b44      	ldr	r3, [pc, #272]	@ (800443c <checkAktifCalisma+0xe10>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	f083 0301 	eor.w	r3, r3, #1
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 8004338:	4b48      	ldr	r3, [pc, #288]	@ (800445c <checkAktifCalisma+0xe30>)
 800433a:	2200      	movs	r2, #0
 800433c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800433e:	4b43      	ldr	r3, [pc, #268]	@ (800444c <checkAktifCalisma+0xe20>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d135      	bne.n	80043b2 <checkAktifCalisma+0xd86>
 8004346:	4b3a      	ldr	r3, [pc, #232]	@ (8004430 <checkAktifCalisma+0xe04>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d003      	beq.n	8004356 <checkAktifCalisma+0xd2a>
 800434e:	4b38      	ldr	r3, [pc, #224]	@ (8004430 <checkAktifCalisma+0xe04>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b03      	cmp	r3, #3
 8004354:	d12d      	bne.n	80043b2 <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004356:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800435a:	4836      	ldr	r0, [pc, #216]	@ (8004434 <checkAktifCalisma+0xe08>)
 800435c:	f005 f98e 	bl	800967c <HAL_GPIO_ReadPin>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d103      	bne.n	800436e <checkAktifCalisma+0xd42>
 8004366:	4b3a      	ldr	r3, [pc, #232]	@ (8004450 <checkAktifCalisma+0xe24>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00b      	beq.n	8004386 <checkAktifCalisma+0xd5a>
 800436e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004372:	4838      	ldr	r0, [pc, #224]	@ (8004454 <checkAktifCalisma+0xe28>)
 8004374:	f005 f982 	bl	800967c <HAL_GPIO_ReadPin>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d119      	bne.n	80043b2 <checkAktifCalisma+0xd86>
 800437e:	4b34      	ldr	r3, [pc, #208]	@ (8004450 <checkAktifCalisma+0xe24>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d115      	bne.n	80043b2 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004386:	2102      	movs	r1, #2
 8004388:	482a      	ldr	r0, [pc, #168]	@ (8004434 <checkAktifCalisma+0xe08>)
 800438a:	f005 f977 	bl	800967c <HAL_GPIO_ReadPin>
 800438e:	4603      	mov	r3, r0
 8004390:	2b01      	cmp	r3, #1
 8004392:	d10e      	bne.n	80043b2 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004394:	2104      	movs	r1, #4
 8004396:	4827      	ldr	r0, [pc, #156]	@ (8004434 <checkAktifCalisma+0xe08>)
 8004398:	f005 f970 	bl	800967c <HAL_GPIO_ReadPin>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d107      	bne.n	80043b2 <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 80043a2:	4b26      	ldr	r3, [pc, #152]	@ (800443c <checkAktifCalisma+0xe10>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 80043aa:	4b30      	ldr	r3, [pc, #192]	@ (800446c <checkAktifCalisma+0xe40>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	701a      	strb	r2, [r3, #0]
 80043b0:	e002      	b.n	80043b8 <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 80043b2:	4b2e      	ldr	r3, [pc, #184]	@ (800446c <checkAktifCalisma+0xe40>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80043b8:	4b24      	ldr	r3, [pc, #144]	@ (800444c <checkAktifCalisma+0xe20>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d11d      	bne.n	80043fc <checkAktifCalisma+0xdd0>
 80043c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004430 <checkAktifCalisma+0xe04>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d003      	beq.n	80043d0 <checkAktifCalisma+0xda4>
 80043c8:	4b19      	ldr	r3, [pc, #100]	@ (8004430 <checkAktifCalisma+0xe04>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d115      	bne.n	80043fc <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80043d0:	2102      	movs	r1, #2
 80043d2:	4818      	ldr	r0, [pc, #96]	@ (8004434 <checkAktifCalisma+0xe08>)
 80043d4:	f005 f952 	bl	800967c <HAL_GPIO_ReadPin>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d10e      	bne.n	80043fc <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80043de:	2104      	movs	r1, #4
 80043e0:	4814      	ldr	r0, [pc, #80]	@ (8004434 <checkAktifCalisma+0xe08>)
 80043e2:	f005 f94b 	bl	800967c <HAL_GPIO_ReadPin>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d107      	bne.n	80043fc <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 80043ec:	4b13      	ldr	r3, [pc, #76]	@ (800443c <checkAktifCalisma+0xe10>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 80043f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004470 <checkAktifCalisma+0xe44>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	e002      	b.n	8004402 <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 80043fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004470 <checkAktifCalisma+0xe44>)
 80043fe:	2200      	movs	r2, #0
 8004400:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8004402:	4b1a      	ldr	r3, [pc, #104]	@ (800446c <checkAktifCalisma+0xe40>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d107      	bne.n	800441a <checkAktifCalisma+0xdee>
 800440a:	4b19      	ldr	r3, [pc, #100]	@ (8004470 <checkAktifCalisma+0xe44>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d103      	bne.n	800441a <checkAktifCalisma+0xdee>
 8004412:	4b12      	ldr	r3, [pc, #72]	@ (800445c <checkAktifCalisma+0xe30>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d02c      	beq.n	8004474 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800441a:	2201      	movs	r2, #1
 800441c:	2140      	movs	r1, #64	@ 0x40
 800441e:	480a      	ldr	r0, [pc, #40]	@ (8004448 <checkAktifCalisma+0xe1c>)
 8004420:	f005 f943 	bl	80096aa <HAL_GPIO_WritePin>
 8004424:	e02b      	b.n	800447e <checkAktifCalisma+0xe52>
 8004426:	bf00      	nop
 8004428:	20000de3 	.word	0x20000de3
 800442c:	20000da9 	.word	0x20000da9
 8004430:	20000da8 	.word	0x20000da8
 8004434:	40011000 	.word	0x40011000
 8004438:	20000da6 	.word	0x20000da6
 800443c:	20000de1 	.word	0x20000de1
 8004440:	20000de4 	.word	0x20000de4
 8004444:	20000de2 	.word	0x20000de2
 8004448:	40010800 	.word	0x40010800
 800444c:	20000daa 	.word	0x20000daa
 8004450:	20000dac 	.word	0x20000dac
 8004454:	40010c00 	.word	0x40010c00
 8004458:	20000dcf 	.word	0x20000dcf
 800445c:	20000de5 	.word	0x20000de5
 8004460:	20000d78 	.word	0x20000d78
 8004464:	20000d7c 	.word	0x20000d7c
 8004468:	20000dba 	.word	0x20000dba
 800446c:	20000de6 	.word	0x20000de6
 8004470:	20000de7 	.word	0x20000de7
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004474:	2200      	movs	r2, #0
 8004476:	2140      	movs	r1, #64	@ 0x40
 8004478:	4835      	ldr	r0, [pc, #212]	@ (8004550 <checkAktifCalisma+0xf24>)
 800447a:	f005 f916 	bl	80096aa <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 800447e:	4b35      	ldr	r3, [pc, #212]	@ (8004554 <checkAktifCalisma+0xf28>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <checkAktifCalisma+0xe62>
 8004486:	4b33      	ldr	r3, [pc, #204]	@ (8004554 <checkAktifCalisma+0xf28>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d115      	bne.n	80044ba <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800448e:	2104      	movs	r1, #4
 8004490:	4831      	ldr	r0, [pc, #196]	@ (8004558 <checkAktifCalisma+0xf2c>)
 8004492:	f005 f8f3 	bl	800967c <HAL_GPIO_ReadPin>
 8004496:	4603      	mov	r3, r0
 8004498:	2b01      	cmp	r3, #1
 800449a:	d003      	beq.n	80044a4 <checkAktifCalisma+0xe78>
 800449c:	4b2f      	ldr	r3, [pc, #188]	@ (800455c <checkAktifCalisma+0xf30>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80044a4:	2102      	movs	r1, #2
 80044a6:	482c      	ldr	r0, [pc, #176]	@ (8004558 <checkAktifCalisma+0xf2c>)
 80044a8:	f005 f8e8 	bl	800967c <HAL_GPIO_ReadPin>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 80044b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004560 <checkAktifCalisma+0xf34>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	e002      	b.n	80044c0 <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 80044ba:	4b29      	ldr	r3, [pc, #164]	@ (8004560 <checkAktifCalisma+0xf34>)
 80044bc:	2200      	movs	r2, #0
 80044be:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80044c0:	4b24      	ldr	r3, [pc, #144]	@ (8004554 <checkAktifCalisma+0xf28>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d003      	beq.n	80044d0 <checkAktifCalisma+0xea4>
 80044c8:	4b22      	ldr	r3, [pc, #136]	@ (8004554 <checkAktifCalisma+0xf28>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d111      	bne.n	80044f4 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80044d0:	2102      	movs	r1, #2
 80044d2:	4821      	ldr	r0, [pc, #132]	@ (8004558 <checkAktifCalisma+0xf2c>)
 80044d4:	f005 f8d2 	bl	800967c <HAL_GPIO_ReadPin>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d10a      	bne.n	80044f4 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80044de:	2104      	movs	r1, #4
 80044e0:	481d      	ldr	r0, [pc, #116]	@ (8004558 <checkAktifCalisma+0xf2c>)
 80044e2:	f005 f8cb 	bl	800967c <HAL_GPIO_ReadPin>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d103      	bne.n	80044f4 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 80044ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004564 <checkAktifCalisma+0xf38>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	e002      	b.n	80044fa <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 80044f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004564 <checkAktifCalisma+0xf38>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 80044fa:	4b19      	ldr	r3, [pc, #100]	@ (8004560 <checkAktifCalisma+0xf34>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00f      	beq.n	8004522 <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 8004502:	4b19      	ldr	r3, [pc, #100]	@ (8004568 <checkAktifCalisma+0xf3c>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d10b      	bne.n	8004522 <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 800450a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800450e:	4817      	ldr	r0, [pc, #92]	@ (800456c <checkAktifCalisma+0xf40>)
 8004510:	f005 f8b4 	bl	800967c <HAL_GPIO_ReadPin>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d103      	bne.n	8004522 <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 800451a:	4b15      	ldr	r3, [pc, #84]	@ (8004570 <checkAktifCalisma+0xf44>)
 800451c:	2201      	movs	r2, #1
 800451e:	701a      	strb	r2, [r3, #0]
 8004520:	e002      	b.n	8004528 <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8004522:	4b13      	ldr	r3, [pc, #76]	@ (8004570 <checkAktifCalisma+0xf44>)
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8004528:	4b0e      	ldr	r3, [pc, #56]	@ (8004564 <checkAktifCalisma+0xf38>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d023      	beq.n	8004578 <checkAktifCalisma+0xf4c>
						&& kapiAcTipi==1
 8004530:	4b0d      	ldr	r3, [pc, #52]	@ (8004568 <checkAktifCalisma+0xf3c>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d11f      	bne.n	8004578 <checkAktifCalisma+0xf4c>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8004538:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800453c:	480b      	ldr	r0, [pc, #44]	@ (800456c <checkAktifCalisma+0xf40>)
 800453e:	f005 f89d 	bl	800967c <HAL_GPIO_ReadPin>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d117      	bne.n	8004578 <checkAktifCalisma+0xf4c>

					kapiactablaesp2=1;
 8004548:	4b0a      	ldr	r3, [pc, #40]	@ (8004574 <checkAktifCalisma+0xf48>)
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	e016      	b.n	800457e <checkAktifCalisma+0xf52>
 8004550:	40010800 	.word	0x40010800
 8004554:	20000dad 	.word	0x20000dad
 8004558:	40011000 	.word	0x40011000
 800455c:	20000da6 	.word	0x20000da6
 8004560:	20000deb 	.word	0x20000deb
 8004564:	20000dec 	.word	0x20000dec
 8004568:	20000dac 	.word	0x20000dac
 800456c:	40010c00 	.word	0x40010c00
 8004570:	20000dfb 	.word	0x20000dfb
 8004574:	20000dfc 	.word	0x20000dfc
				} else {
					kapiactablaesp2=0;
 8004578:	4b7e      	ldr	r3, [pc, #504]	@ (8004774 <checkAktifCalisma+0x1148>)
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800457e:	4b7e      	ldr	r3, [pc, #504]	@ (8004778 <checkAktifCalisma+0x114c>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d154      	bne.n	8004630 <checkAktifCalisma+0x1004>
 8004586:	4b7d      	ldr	r3, [pc, #500]	@ (800477c <checkAktifCalisma+0x1150>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d003      	beq.n	8004596 <checkAktifCalisma+0xf6a>
 800458e:	4b7b      	ldr	r3, [pc, #492]	@ (800477c <checkAktifCalisma+0x1150>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b03      	cmp	r3, #3
 8004594:	d14c      	bne.n	8004630 <checkAktifCalisma+0x1004>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004596:	4b7a      	ldr	r3, [pc, #488]	@ (8004780 <checkAktifCalisma+0x1154>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d103      	bne.n	80045a6 <checkAktifCalisma+0xf7a>
 800459e:	4b79      	ldr	r3, [pc, #484]	@ (8004784 <checkAktifCalisma+0x1158>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d044      	beq.n	8004630 <checkAktifCalisma+0x1004>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 80045a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045aa:	4877      	ldr	r0, [pc, #476]	@ (8004788 <checkAktifCalisma+0x115c>)
 80045ac:	f005 f866 	bl	800967c <HAL_GPIO_ReadPin>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d01c      	beq.n	80045f0 <checkAktifCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 80045b6:	2180      	movs	r1, #128	@ 0x80
 80045b8:	4873      	ldr	r0, [pc, #460]	@ (8004788 <checkAktifCalisma+0x115c>)
 80045ba:	f005 f85f 	bl	800967c <HAL_GPIO_ReadPin>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d106      	bne.n	80045d2 <checkAktifCalisma+0xfa6>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 80045c4:	2104      	movs	r1, #4
 80045c6:	4870      	ldr	r0, [pc, #448]	@ (8004788 <checkAktifCalisma+0x115c>)
 80045c8:	f005 f858 	bl	800967c <HAL_GPIO_ReadPin>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d00e      	beq.n	80045f0 <checkAktifCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 80045d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80045d6:	486c      	ldr	r0, [pc, #432]	@ (8004788 <checkAktifCalisma+0x115c>)
 80045d8:	f005 f850 	bl	800967c <HAL_GPIO_ReadPin>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <checkAktifCalisma+0xfcc>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 80045e2:	2102      	movs	r1, #2
 80045e4:	4868      	ldr	r0, [pc, #416]	@ (8004788 <checkAktifCalisma+0x115c>)
 80045e6:	f005 f849 	bl	800967c <HAL_GPIO_ReadPin>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d103      	bne.n	80045f8 <checkAktifCalisma+0xfcc>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80045f0:	4b66      	ldr	r3, [pc, #408]	@ (800478c <checkAktifCalisma+0x1160>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d007      	beq.n	8004608 <checkAktifCalisma+0xfdc>
 80045f8:	4b65      	ldr	r3, [pc, #404]	@ (8004790 <checkAktifCalisma+0x1164>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d103      	bne.n	8004608 <checkAktifCalisma+0xfdc>
 8004600:	4b5c      	ldr	r3, [pc, #368]	@ (8004774 <checkAktifCalisma+0x1148>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d013      	beq.n	8004630 <checkAktifCalisma+0x1004>
						&&(makineStop==1)
 8004608:	4b62      	ldr	r3, [pc, #392]	@ (8004794 <checkAktifCalisma+0x1168>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00f      	beq.n	8004630 <checkAktifCalisma+0x1004>
						&&(butonKontrol==0)) {
 8004610:	4b61      	ldr	r3, [pc, #388]	@ (8004798 <checkAktifCalisma+0x116c>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	f083 0301 	eor.w	r3, r3, #1
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d008      	beq.n	8004630 <checkAktifCalisma+0x1004>

					kapiTablaprudhome=1;
 800461e:	4b5f      	ldr	r3, [pc, #380]	@ (800479c <checkAktifCalisma+0x1170>)
 8004620:	2201      	movs	r2, #1
 8004622:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004624:	4b5e      	ldr	r3, [pc, #376]	@ (80047a0 <checkAktifCalisma+0x1174>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a5e      	ldr	r2, [pc, #376]	@ (80047a4 <checkAktifCalisma+0x1178>)
 800462a:	6013      	str	r3, [r2, #0]
					bekle();
 800462c:	f7fe fe62 	bl	80032f4 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8004630:	4b5b      	ldr	r3, [pc, #364]	@ (80047a0 <checkAktifCalisma+0x1174>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	4b5b      	ldr	r3, [pc, #364]	@ (80047a4 <checkAktifCalisma+0x1178>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	4a5b      	ldr	r2, [pc, #364]	@ (80047a8 <checkAktifCalisma+0x117c>)
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	4293      	cmp	r3, r2
 8004640:	d214      	bcs.n	800466c <checkAktifCalisma+0x1040>
 8004642:	4b4f      	ldr	r3, [pc, #316]	@ (8004780 <checkAktifCalisma+0x1154>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	f083 0301 	eor.w	r3, r3, #1
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d006      	beq.n	800465e <checkAktifCalisma+0x1032>
 8004650:	4b4c      	ldr	r3, [pc, #304]	@ (8004784 <checkAktifCalisma+0x1158>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	f083 0301 	eor.w	r3, r3, #1
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <checkAktifCalisma+0x1040>
 800465e:	4b4d      	ldr	r3, [pc, #308]	@ (8004794 <checkAktifCalisma+0x1168>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	f083 0301 	eor.w	r3, r3, #1
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <checkAktifCalisma+0x1046>
					kapiTablaprudhome=0;
 800466c:	4b4b      	ldr	r3, [pc, #300]	@ (800479c <checkAktifCalisma+0x1170>)
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004672:	4b41      	ldr	r3, [pc, #260]	@ (8004778 <checkAktifCalisma+0x114c>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d148      	bne.n	800470c <checkAktifCalisma+0x10e0>
 800467a:	4b40      	ldr	r3, [pc, #256]	@ (800477c <checkAktifCalisma+0x1150>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d003      	beq.n	800468a <checkAktifCalisma+0x105e>
 8004682:	4b3e      	ldr	r3, [pc, #248]	@ (800477c <checkAktifCalisma+0x1150>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b03      	cmp	r3, #3
 8004688:	d140      	bne.n	800470c <checkAktifCalisma+0x10e0>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800468a:	4b3d      	ldr	r3, [pc, #244]	@ (8004780 <checkAktifCalisma+0x1154>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d103      	bne.n	800469a <checkAktifCalisma+0x106e>
 8004692:	4b3c      	ldr	r3, [pc, #240]	@ (8004784 <checkAktifCalisma+0x1158>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d038      	beq.n	800470c <checkAktifCalisma+0x10e0>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 800469a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800469e:	483a      	ldr	r0, [pc, #232]	@ (8004788 <checkAktifCalisma+0x115c>)
 80046a0:	f004 ffec 	bl	800967c <HAL_GPIO_ReadPin>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d01c      	beq.n	80046e4 <checkAktifCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 80046aa:	2180      	movs	r1, #128	@ 0x80
 80046ac:	4836      	ldr	r0, [pc, #216]	@ (8004788 <checkAktifCalisma+0x115c>)
 80046ae:	f004 ffe5 	bl	800967c <HAL_GPIO_ReadPin>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <checkAktifCalisma+0x109a>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 80046b8:	2104      	movs	r1, #4
 80046ba:	4833      	ldr	r0, [pc, #204]	@ (8004788 <checkAktifCalisma+0x115c>)
 80046bc:	f004 ffde 	bl	800967c <HAL_GPIO_ReadPin>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d00e      	beq.n	80046e4 <checkAktifCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 80046c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80046ca:	482f      	ldr	r0, [pc, #188]	@ (8004788 <checkAktifCalisma+0x115c>)
 80046cc:	f004 ffd6 	bl	800967c <HAL_GPIO_ReadPin>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <checkAktifCalisma+0x10c0>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 80046d6:	2102      	movs	r1, #2
 80046d8:	482b      	ldr	r0, [pc, #172]	@ (8004788 <checkAktifCalisma+0x115c>)
 80046da:	f004 ffcf 	bl	800967c <HAL_GPIO_ReadPin>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d103      	bne.n	80046ec <checkAktifCalisma+0x10c0>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80046e4:	4b29      	ldr	r3, [pc, #164]	@ (800478c <checkAktifCalisma+0x1160>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d007      	beq.n	80046fc <checkAktifCalisma+0x10d0>
 80046ec:	4b28      	ldr	r3, [pc, #160]	@ (8004790 <checkAktifCalisma+0x1164>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d103      	bne.n	80046fc <checkAktifCalisma+0x10d0>
 80046f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004774 <checkAktifCalisma+0x1148>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d007      	beq.n	800470c <checkAktifCalisma+0x10e0>
						&&(makineStop==1)) {
 80046fc:	4b25      	ldr	r3, [pc, #148]	@ (8004794 <checkAktifCalisma+0x1168>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <checkAktifCalisma+0x10e0>

					kapiTablabutonkontrol=1;
 8004704:	4b29      	ldr	r3, [pc, #164]	@ (80047ac <checkAktifCalisma+0x1180>)
 8004706:	2201      	movs	r2, #1
 8004708:	701a      	strb	r2, [r3, #0]
 800470a:	e002      	b.n	8004712 <checkAktifCalisma+0x10e6>
				} else {
					kapiTablabutonkontrol=0;
 800470c:	4b27      	ldr	r3, [pc, #156]	@ (80047ac <checkAktifCalisma+0x1180>)
 800470e:	2200      	movs	r2, #0
 8004710:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004712:	4b19      	ldr	r3, [pc, #100]	@ (8004778 <checkAktifCalisma+0x114c>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d117      	bne.n	800474a <checkAktifCalisma+0x111e>
 800471a:	4b18      	ldr	r3, [pc, #96]	@ (800477c <checkAktifCalisma+0x1150>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d003      	beq.n	800472a <checkAktifCalisma+0x10fe>
 8004722:	4b16      	ldr	r3, [pc, #88]	@ (800477c <checkAktifCalisma+0x1150>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b03      	cmp	r3, #3
 8004728:	d10f      	bne.n	800474a <checkAktifCalisma+0x111e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800472a:	4b15      	ldr	r3, [pc, #84]	@ (8004780 <checkAktifCalisma+0x1154>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d103      	bne.n	800473a <checkAktifCalisma+0x110e>
 8004732:	4b14      	ldr	r3, [pc, #80]	@ (8004784 <checkAktifCalisma+0x1158>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <checkAktifCalisma+0x111e>
						&&(makineStop==1)) {
 800473a:	4b16      	ldr	r3, [pc, #88]	@ (8004794 <checkAktifCalisma+0x1168>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <checkAktifCalisma+0x111e>

					kapiTablapizzato=1;
 8004742:	4b1b      	ldr	r3, [pc, #108]	@ (80047b0 <checkAktifCalisma+0x1184>)
 8004744:	2201      	movs	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	e002      	b.n	8004750 <checkAktifCalisma+0x1124>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 800474a:	4b19      	ldr	r3, [pc, #100]	@ (80047b0 <checkAktifCalisma+0x1184>)
 800474c:	2200      	movs	r2, #0
 800474e:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8004750:	4b16      	ldr	r3, [pc, #88]	@ (80047ac <checkAktifCalisma+0x1180>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d107      	bne.n	8004768 <checkAktifCalisma+0x113c>
 8004758:	4b10      	ldr	r3, [pc, #64]	@ (800479c <checkAktifCalisma+0x1170>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d103      	bne.n	8004768 <checkAktifCalisma+0x113c>
 8004760:	4b13      	ldr	r3, [pc, #76]	@ (80047b0 <checkAktifCalisma+0x1184>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d027      	beq.n	80047b8 <checkAktifCalisma+0x118c>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8004768:	2201      	movs	r2, #1
 800476a:	2120      	movs	r1, #32
 800476c:	4811      	ldr	r0, [pc, #68]	@ (80047b4 <checkAktifCalisma+0x1188>)
 800476e:	f004 ff9c 	bl	80096aa <HAL_GPIO_WritePin>
 8004772:	e026      	b.n	80047c2 <checkAktifCalisma+0x1196>
 8004774:	20000dfc 	.word	0x20000dfc
 8004778:	20000dab 	.word	0x20000dab
 800477c:	20000da8 	.word	0x20000da8
 8004780:	20000deb 	.word	0x20000deb
 8004784:	20000dec 	.word	0x20000dec
 8004788:	40011000 	.word	0x40011000
 800478c:	20000dac 	.word	0x20000dac
 8004790:	20000dfb 	.word	0x20000dfb
 8004794:	20000de1 	.word	0x20000de1
 8004798:	20000dcf 	.word	0x20000dcf
 800479c:	20000de8 	.word	0x20000de8
 80047a0:	20000d78 	.word	0x20000d78
 80047a4:	20000d7c 	.word	0x20000d7c
 80047a8:	20000dbb 	.word	0x20000dbb
 80047ac:	20000de9 	.word	0x20000de9
 80047b0:	20000dea 	.word	0x20000dea
 80047b4:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80047b8:	2200      	movs	r2, #0
 80047ba:	2120      	movs	r1, #32
 80047bc:	4887      	ldr	r0, [pc, #540]	@ (80049dc <checkAktifCalisma+0x13b0>)
 80047be:	f004 ff74 	bl	80096aa <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80047c2:	4b87      	ldr	r3, [pc, #540]	@ (80049e0 <checkAktifCalisma+0x13b4>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00e      	beq.n	80047e8 <checkAktifCalisma+0x11bc>
 80047ca:	2102      	movs	r1, #2
 80047cc:	4885      	ldr	r0, [pc, #532]	@ (80049e4 <checkAktifCalisma+0x13b8>)
 80047ce:	f004 ff55 	bl	800967c <HAL_GPIO_ReadPin>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d107      	bne.n	80047e8 <checkAktifCalisma+0x11bc>
 80047d8:	4b83      	ldr	r3, [pc, #524]	@ (80049e8 <checkAktifCalisma+0x13bc>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d103      	bne.n	80047e8 <checkAktifCalisma+0x11bc>
 80047e0:	4b82      	ldr	r3, [pc, #520]	@ (80049ec <checkAktifCalisma+0x13c0>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d112      	bne.n	800480e <checkAktifCalisma+0x11e2>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80047e8:	4b81      	ldr	r3, [pc, #516]	@ (80049f0 <checkAktifCalisma+0x13c4>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d032      	beq.n	8004856 <checkAktifCalisma+0x122a>
 80047f0:	2104      	movs	r1, #4
 80047f2:	487c      	ldr	r0, [pc, #496]	@ (80049e4 <checkAktifCalisma+0x13b8>)
 80047f4:	f004 ff42 	bl	800967c <HAL_GPIO_ReadPin>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d12b      	bne.n	8004856 <checkAktifCalisma+0x122a>
 80047fe:	4b7a      	ldr	r3, [pc, #488]	@ (80049e8 <checkAktifCalisma+0x13bc>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d027      	beq.n	8004856 <checkAktifCalisma+0x122a>
 8004806:	4b79      	ldr	r3, [pc, #484]	@ (80049ec <checkAktifCalisma+0x13c0>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d023      	beq.n	8004856 <checkAktifCalisma+0x122a>



					calismaSayisi=calismaSayisi+254;
 800480e:	4b79      	ldr	r3, [pc, #484]	@ (80049f4 <checkAktifCalisma+0x13c8>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	3b02      	subs	r3, #2
 8004814:	b2da      	uxtb	r2, r3
 8004816:	4b77      	ldr	r3, [pc, #476]	@ (80049f4 <checkAktifCalisma+0x13c8>)
 8004818:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 800481a:	4b76      	ldr	r3, [pc, #472]	@ (80049f4 <checkAktifCalisma+0x13c8>)
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2bff      	cmp	r3, #255	@ 0xff
 8004820:	d108      	bne.n	8004834 <checkAktifCalisma+0x1208>
						calismaSayisi = 0;
 8004822:	4b74      	ldr	r3, [pc, #464]	@ (80049f4 <checkAktifCalisma+0x13c8>)
 8004824:	2200      	movs	r2, #0
 8004826:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 8004828:	4b73      	ldr	r3, [pc, #460]	@ (80049f8 <checkAktifCalisma+0x13cc>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	3301      	adds	r3, #1
 800482e:	b2da      	uxtb	r2, r3
 8004830:	4b71      	ldr	r3, [pc, #452]	@ (80049f8 <checkAktifCalisma+0x13cc>)
 8004832:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 8004834:	4b6f      	ldr	r3, [pc, #444]	@ (80049f4 <checkAktifCalisma+0x13c8>)
 8004836:	781a      	ldrb	r2, [r3, #0]
 8004838:	4b70      	ldr	r3, [pc, #448]	@ (80049fc <checkAktifCalisma+0x13d0>)
 800483a:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 800483c:	4b6e      	ldr	r3, [pc, #440]	@ (80049f8 <checkAktifCalisma+0x13cc>)
 800483e:	781a      	ldrb	r2, [r3, #0]
 8004840:	4b6e      	ldr	r3, [pc, #440]	@ (80049fc <checkAktifCalisma+0x13d0>)
 8004842:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 8004844:	4b6e      	ldr	r3, [pc, #440]	@ (8004a00 <checkAktifCalisma+0x13d4>)
 8004846:	2201      	movs	r2, #1
 8004848:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 800484a:	4b65      	ldr	r3, [pc, #404]	@ (80049e0 <checkAktifCalisma+0x13b4>)
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 8004850:	4b67      	ldr	r3, [pc, #412]	@ (80049f0 <checkAktifCalisma+0x13c4>)
 8004852:	2200      	movs	r2, #0
 8004854:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8004856:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800485a:	486a      	ldr	r0, [pc, #424]	@ (8004a04 <checkAktifCalisma+0x13d8>)
 800485c:	f004 ff0e 	bl	800967c <HAL_GPIO_ReadPin>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d016      	beq.n	8004894 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8004866:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800486a:	4866      	ldr	r0, [pc, #408]	@ (8004a04 <checkAktifCalisma+0x13d8>)
 800486c:	f004 ff06 	bl	800967c <HAL_GPIO_ReadPin>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00e      	beq.n	8004894 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8004876:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800487a:	4862      	ldr	r0, [pc, #392]	@ (8004a04 <checkAktifCalisma+0x13d8>)
 800487c:	f004 fefe 	bl	800967c <HAL_GPIO_ReadPin>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d006      	beq.n	8004894 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8004886:	2140      	movs	r1, #64	@ 0x40
 8004888:	4856      	ldr	r0, [pc, #344]	@ (80049e4 <checkAktifCalisma+0x13b8>)
 800488a:	f004 fef7 	bl	800967c <HAL_GPIO_ReadPin>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d103      	bne.n	800489c <checkAktifCalisma+0x1270>

					startBasili=1;
 8004894:	4b5c      	ldr	r3, [pc, #368]	@ (8004a08 <checkAktifCalisma+0x13dc>)
 8004896:	2201      	movs	r2, #1
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	e002      	b.n	80048a2 <checkAktifCalisma+0x1276>
				} else {
					startBasili=0;
 800489c:	4b5a      	ldr	r3, [pc, #360]	@ (8004a08 <checkAktifCalisma+0x13dc>)
 800489e:	2200      	movs	r2, #0
 80048a0:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80048a2:	4b59      	ldr	r3, [pc, #356]	@ (8004a08 <checkAktifCalisma+0x13dc>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d014      	beq.n	80048d4 <checkAktifCalisma+0x12a8>
 80048aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80048ae:	4855      	ldr	r0, [pc, #340]	@ (8004a04 <checkAktifCalisma+0x13d8>)
 80048b0:	f004 fee4 	bl	800967c <HAL_GPIO_ReadPin>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d10c      	bne.n	80048d4 <checkAktifCalisma+0x12a8>

					hataVar=1;
 80048ba:	4b54      	ldr	r3, [pc, #336]	@ (8004a0c <checkAktifCalisma+0x13e0>)
 80048bc:	2201      	movs	r2, #1
 80048be:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 80048c0:	2001      	movs	r0, #1
 80048c2:	f7fb ff99 	bl	80007f8 <hataKoduLcdGoster>
					hata2EEPROM(1);
 80048c6:	2001      	movs	r0, #1
 80048c8:	f7fb ff3e 	bl	8000748 <hata2EEPROM>
					acilstophatasi=1;
 80048cc:	4b50      	ldr	r3, [pc, #320]	@ (8004a10 <checkAktifCalisma+0x13e4>)
 80048ce:	2201      	movs	r2, #1
 80048d0:	701a      	strb	r2, [r3, #0]
 80048d2:	e018      	b.n	8004906 <checkAktifCalisma+0x12da>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80048d4:	4b4e      	ldr	r3, [pc, #312]	@ (8004a10 <checkAktifCalisma+0x13e4>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d014      	beq.n	8004906 <checkAktifCalisma+0x12da>
 80048dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80048e0:	4848      	ldr	r0, [pc, #288]	@ (8004a04 <checkAktifCalisma+0x13d8>)
 80048e2:	f004 fecb 	bl	800967c <HAL_GPIO_ReadPin>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10c      	bne.n	8004906 <checkAktifCalisma+0x12da>
 80048ec:	4b46      	ldr	r3, [pc, #280]	@ (8004a08 <checkAktifCalisma+0x13dc>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	f083 0301 	eor.w	r3, r3, #1
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <checkAktifCalisma+0x12da>
					acilstophatasi=0;
 80048fa:	4b45      	ldr	r3, [pc, #276]	@ (8004a10 <checkAktifCalisma+0x13e4>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 8004900:	2001      	movs	r0, #1
 8004902:	f7fe fc8d 	bl	8003220 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 8004906:	4b43      	ldr	r3, [pc, #268]	@ (8004a14 <checkAktifCalisma+0x13e8>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	f083 0301 	eor.w	r3, r3, #1
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d023      	beq.n	800495c <checkAktifCalisma+0x1330>
 8004914:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004918:	483a      	ldr	r0, [pc, #232]	@ (8004a04 <checkAktifCalisma+0x13d8>)
 800491a:	f004 feaf 	bl	800967c <HAL_GPIO_ReadPin>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <checkAktifCalisma+0x1300>
 8004924:	4b3c      	ldr	r3, [pc, #240]	@ (8004a18 <checkAktifCalisma+0x13ec>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d017      	beq.n	800495c <checkAktifCalisma+0x1330>
 800492c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a1c <checkAktifCalisma+0x13f0>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d113      	bne.n	800495c <checkAktifCalisma+0x1330>
 8004934:	4b3a      	ldr	r3, [pc, #232]	@ (8004a20 <checkAktifCalisma+0x13f4>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	f083 0301 	eor.w	r3, r3, #1
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00c      	beq.n	800495c <checkAktifCalisma+0x1330>
					hataVar=1;
 8004942:	4b32      	ldr	r3, [pc, #200]	@ (8004a0c <checkAktifCalisma+0x13e0>)
 8004944:	2201      	movs	r2, #1
 8004946:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8004948:	2002      	movs	r0, #2
 800494a:	f7fb ff55 	bl	80007f8 <hataKoduLcdGoster>
					hata2EEPROM(2);
 800494e:	2002      	movs	r0, #2
 8004950:	f7fb fefa 	bl	8000748 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8004954:	4b32      	ldr	r3, [pc, #200]	@ (8004a20 <checkAktifCalisma+0x13f4>)
 8004956:	2201      	movs	r2, #1
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	e017      	b.n	800498c <checkAktifCalisma+0x1360>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 800495c:	4b30      	ldr	r3, [pc, #192]	@ (8004a20 <checkAktifCalisma+0x13f4>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d013      	beq.n	800498c <checkAktifCalisma+0x1360>
 8004964:	4b2b      	ldr	r3, [pc, #172]	@ (8004a14 <checkAktifCalisma+0x13e8>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00f      	beq.n	800498c <checkAktifCalisma+0x1360>
 800496c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a24 <checkAktifCalisma+0x13f8>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	f083 0301 	eor.w	r3, r3, #1
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d008      	beq.n	800498c <checkAktifCalisma+0x1360>
					emniyetCercevesihatasi=0;
 800497a:	4b29      	ldr	r3, [pc, #164]	@ (8004a20 <checkAktifCalisma+0x13f4>)
 800497c:	2200      	movs	r2, #0
 800497e:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8004980:	4b25      	ldr	r3, [pc, #148]	@ (8004a18 <checkAktifCalisma+0x13ec>)
 8004982:	2200      	movs	r2, #0
 8004984:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 8004986:	2002      	movs	r0, #2
 8004988:	f7fe fc4a 	bl	8003220 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 800498c:	4b26      	ldr	r3, [pc, #152]	@ (8004a28 <checkAktifCalisma+0x13fc>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d151      	bne.n	8004a38 <checkAktifCalisma+0x140c>
 8004994:	4b25      	ldr	r3, [pc, #148]	@ (8004a2c <checkAktifCalisma+0x1400>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d14d      	bne.n	8004a38 <checkAktifCalisma+0x140c>
 800499c:	4b24      	ldr	r3, [pc, #144]	@ (8004a30 <checkAktifCalisma+0x1404>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d049      	beq.n	8004a38 <checkAktifCalisma+0x140c>
 80049a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049a8:	480e      	ldr	r0, [pc, #56]	@ (80049e4 <checkAktifCalisma+0x13b8>)
 80049aa:	f004 fe67 	bl	800967c <HAL_GPIO_ReadPin>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d141      	bne.n	8004a38 <checkAktifCalisma+0x140c>
 80049b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004a34 <checkAktifCalisma+0x1408>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	f083 0301 	eor.w	r3, r3, #1
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d03a      	beq.n	8004a38 <checkAktifCalisma+0x140c>
					hataVar=1;
 80049c2:	4b12      	ldr	r3, [pc, #72]	@ (8004a0c <checkAktifCalisma+0x13e0>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 80049c8:	2003      	movs	r0, #3
 80049ca:	f7fb ff15 	bl	80007f8 <hataKoduLcdGoster>
					hata2EEPROM(3);
 80049ce:	2003      	movs	r0, #3
 80049d0:	f7fb feba 	bl	8000748 <hata2EEPROM>
					basinchatasi=1;
 80049d4:	4b17      	ldr	r3, [pc, #92]	@ (8004a34 <checkAktifCalisma+0x1408>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	e043      	b.n	8004a64 <checkAktifCalisma+0x1438>
 80049dc:	40010800 	.word	0x40010800
 80049e0:	20000ddf 	.word	0x20000ddf
 80049e4:	40011000 	.word	0x40011000
 80049e8:	20000da6 	.word	0x20000da6
 80049ec:	20000de1 	.word	0x20000de1
 80049f0:	20000de0 	.word	0x20000de0
 80049f4:	20000d98 	.word	0x20000d98
 80049f8:	20000d9a 	.word	0x20000d9a
 80049fc:	20000d00 	.word	0x20000d00
 8004a00:	20000dcc 	.word	0x20000dcc
 8004a04:	40010c00 	.word	0x40010c00
 8004a08:	20000ded 	.word	0x20000ded
 8004a0c:	20000df4 	.word	0x20000df4
 8004a10:	20000def 	.word	0x20000def
 8004a14:	20000df6 	.word	0x20000df6
 8004a18:	20000e00 	.word	0x20000e00
 8004a1c:	20000da4 	.word	0x20000da4
 8004a20:	20000df0 	.word	0x20000df0
 8004a24:	20000dd8 	.word	0x20000dd8
 8004a28:	20000da3 	.word	0x20000da3
 8004a2c:	20000da7 	.word	0x20000da7
 8004a30:	20000df3 	.word	0x20000df3
 8004a34:	20000dfd 	.word	0x20000dfd
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8004a38:	4b85      	ldr	r3, [pc, #532]	@ (8004c50 <checkAktifCalisma+0x1624>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d011      	beq.n	8004a64 <checkAktifCalisma+0x1438>
 8004a40:	4b84      	ldr	r3, [pc, #528]	@ (8004c54 <checkAktifCalisma+0x1628>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d10d      	bne.n	8004a64 <checkAktifCalisma+0x1438>
 8004a48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004a4c:	4882      	ldr	r0, [pc, #520]	@ (8004c58 <checkAktifCalisma+0x162c>)
 8004a4e:	f004 fe15 	bl	800967c <HAL_GPIO_ReadPin>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d105      	bne.n	8004a64 <checkAktifCalisma+0x1438>
					basinchatasi=0;
 8004a58:	4b7d      	ldr	r3, [pc, #500]	@ (8004c50 <checkAktifCalisma+0x1624>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 8004a5e:	2003      	movs	r0, #3
 8004a60:	f7fe fbde 	bl	8003220 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8004a64:	4b7d      	ldr	r3, [pc, #500]	@ (8004c5c <checkAktifCalisma+0x1630>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d103      	bne.n	8004a74 <checkAktifCalisma+0x1448>
 8004a6c:	4b7c      	ldr	r3, [pc, #496]	@ (8004c60 <checkAktifCalisma+0x1634>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d023      	beq.n	8004abc <checkAktifCalisma+0x1490>
 8004a74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a78:	487a      	ldr	r0, [pc, #488]	@ (8004c64 <checkAktifCalisma+0x1638>)
 8004a7a:	f004 fdff 	bl	800967c <HAL_GPIO_ReadPin>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d11b      	bne.n	8004abc <checkAktifCalisma+0x1490>
 8004a84:	4b78      	ldr	r3, [pc, #480]	@ (8004c68 <checkAktifCalisma+0x163c>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d003      	beq.n	8004a94 <checkAktifCalisma+0x1468>
 8004a8c:	4b76      	ldr	r3, [pc, #472]	@ (8004c68 <checkAktifCalisma+0x163c>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d113      	bne.n	8004abc <checkAktifCalisma+0x1490>
 8004a94:	4b75      	ldr	r3, [pc, #468]	@ (8004c6c <checkAktifCalisma+0x1640>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	f083 0301 	eor.w	r3, r3, #1
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00c      	beq.n	8004abc <checkAktifCalisma+0x1490>
					hataVar=1;
 8004aa2:	4b73      	ldr	r3, [pc, #460]	@ (8004c70 <checkAktifCalisma+0x1644>)
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8004aa8:	2004      	movs	r0, #4
 8004aaa:	f7fb fea5 	bl	80007f8 <hataKoduLcdGoster>
					hata2EEPROM(4);
 8004aae:	2004      	movs	r0, #4
 8004ab0:	f7fb fe4a 	bl	8000748 <hata2EEPROM>
					katkapisivicihatasi=1;
 8004ab4:	4b6d      	ldr	r3, [pc, #436]	@ (8004c6c <checkAktifCalisma+0x1640>)
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	701a      	strb	r2, [r3, #0]
 8004aba:	e01f      	b.n	8004afc <checkAktifCalisma+0x14d0>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004abc:	4b6b      	ldr	r3, [pc, #428]	@ (8004c6c <checkAktifCalisma+0x1640>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01b      	beq.n	8004afc <checkAktifCalisma+0x14d0>
 8004ac4:	4b6b      	ldr	r3, [pc, #428]	@ (8004c74 <checkAktifCalisma+0x1648>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d017      	beq.n	8004afc <checkAktifCalisma+0x14d0>
 8004acc:	4b63      	ldr	r3, [pc, #396]	@ (8004c5c <checkAktifCalisma+0x1630>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	f083 0301 	eor.w	r3, r3, #1
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d010      	beq.n	8004afc <checkAktifCalisma+0x14d0>
 8004ada:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ade:	4861      	ldr	r0, [pc, #388]	@ (8004c64 <checkAktifCalisma+0x1638>)
 8004ae0:	f004 fdcc 	bl	800967c <HAL_GPIO_ReadPin>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d108      	bne.n	8004afc <checkAktifCalisma+0x14d0>

					katkapisivicihatasi=0;
 8004aea:	4b60      	ldr	r3, [pc, #384]	@ (8004c6c <checkAktifCalisma+0x1640>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8004af0:	4b5b      	ldr	r3, [pc, #364]	@ (8004c60 <checkAktifCalisma+0x1634>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8004af6:	2004      	movs	r0, #4
 8004af8:	f7fe fb92 	bl	8003220 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8004afc:	4b57      	ldr	r3, [pc, #348]	@ (8004c5c <checkAktifCalisma+0x1630>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d103      	bne.n	8004b0c <checkAktifCalisma+0x14e0>
 8004b04:	4b5c      	ldr	r3, [pc, #368]	@ (8004c78 <checkAktifCalisma+0x164c>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d023      	beq.n	8004b54 <checkAktifCalisma+0x1528>
 8004b0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004b10:	4854      	ldr	r0, [pc, #336]	@ (8004c64 <checkAktifCalisma+0x1638>)
 8004b12:	f004 fdb3 	bl	800967c <HAL_GPIO_ReadPin>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d11b      	bne.n	8004b54 <checkAktifCalisma+0x1528>
 8004b1c:	4b52      	ldr	r3, [pc, #328]	@ (8004c68 <checkAktifCalisma+0x163c>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d003      	beq.n	8004b2c <checkAktifCalisma+0x1500>
 8004b24:	4b50      	ldr	r3, [pc, #320]	@ (8004c68 <checkAktifCalisma+0x163c>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d113      	bne.n	8004b54 <checkAktifCalisma+0x1528>
 8004b2c:	4b53      	ldr	r3, [pc, #332]	@ (8004c7c <checkAktifCalisma+0x1650>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	f083 0301 	eor.w	r3, r3, #1
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00c      	beq.n	8004b54 <checkAktifCalisma+0x1528>

					hataVar=1;
 8004b3a:	4b4d      	ldr	r3, [pc, #308]	@ (8004c70 <checkAktifCalisma+0x1644>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8004b40:	2005      	movs	r0, #5
 8004b42:	f7fb fe59 	bl	80007f8 <hataKoduLcdGoster>
					hata2EEPROM(5);
 8004b46:	2005      	movs	r0, #5
 8004b48:	f7fb fdfe 	bl	8000748 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8004b4c:	4b4b      	ldr	r3, [pc, #300]	@ (8004c7c <checkAktifCalisma+0x1650>)
 8004b4e:	2201      	movs	r2, #1
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	e023      	b.n	8004b9c <checkAktifCalisma+0x1570>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8004b54:	4b49      	ldr	r3, [pc, #292]	@ (8004c7c <checkAktifCalisma+0x1650>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01f      	beq.n	8004b9c <checkAktifCalisma+0x1570>
 8004b5c:	4b45      	ldr	r3, [pc, #276]	@ (8004c74 <checkAktifCalisma+0x1648>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01b      	beq.n	8004b9c <checkAktifCalisma+0x1570>
 8004b64:	4b3d      	ldr	r3, [pc, #244]	@ (8004c5c <checkAktifCalisma+0x1630>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	f083 0301 	eor.w	r3, r3, #1
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d014      	beq.n	8004b9c <checkAktifCalisma+0x1570>
 8004b72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004b76:	483b      	ldr	r0, [pc, #236]	@ (8004c64 <checkAktifCalisma+0x1638>)
 8004b78:	f004 fd80 	bl	800967c <HAL_GPIO_ReadPin>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10c      	bne.n	8004b9c <checkAktifCalisma+0x1570>
 8004b82:	4b3c      	ldr	r3, [pc, #240]	@ (8004c74 <checkAktifCalisma+0x1648>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d008      	beq.n	8004b9c <checkAktifCalisma+0x1570>
					tablakapisivicihatasi=0;
 8004b8a:	4b3c      	ldr	r3, [pc, #240]	@ (8004c7c <checkAktifCalisma+0x1650>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8004b90:	4b39      	ldr	r3, [pc, #228]	@ (8004c78 <checkAktifCalisma+0x164c>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8004b96:	2005      	movs	r0, #5
 8004b98:	f7fe fb42 	bl	8003220 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8004b9c:	4b38      	ldr	r3, [pc, #224]	@ (8004c80 <checkAktifCalisma+0x1654>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d107      	bne.n	8004bb4 <checkAktifCalisma+0x1588>
 8004ba4:	4b37      	ldr	r3, [pc, #220]	@ (8004c84 <checkAktifCalisma+0x1658>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d103      	bne.n	8004bb4 <checkAktifCalisma+0x1588>
 8004bac:	4b36      	ldr	r3, [pc, #216]	@ (8004c88 <checkAktifCalisma+0x165c>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01b      	beq.n	8004bec <checkAktifCalisma+0x15c0>
 8004bb4:	4b35      	ldr	r3, [pc, #212]	@ (8004c8c <checkAktifCalisma+0x1660>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	f083 0301 	eor.w	r3, r3, #1
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d014      	beq.n	8004bec <checkAktifCalisma+0x15c0>
				    if(millis-timer4>=makineCalismaTmr) {
 8004bc2:	4b33      	ldr	r3, [pc, #204]	@ (8004c90 <checkAktifCalisma+0x1664>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4b33      	ldr	r3, [pc, #204]	@ (8004c94 <checkAktifCalisma+0x1668>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	4a32      	ldr	r2, [pc, #200]	@ (8004c98 <checkAktifCalisma+0x166c>)
 8004bce:	7812      	ldrb	r2, [r2, #0]
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d30b      	bcc.n	8004bec <checkAktifCalisma+0x15c0>
					  	hataVar=1;
 8004bd4:	4b26      	ldr	r3, [pc, #152]	@ (8004c70 <checkAktifCalisma+0x1644>)
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 8004bda:	2006      	movs	r0, #6
 8004bdc:	f7fb fe0c 	bl	80007f8 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8004be0:	2006      	movs	r0, #6
 8004be2:	f7fb fdb1 	bl	8000748 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8004be6:	4b29      	ldr	r3, [pc, #164]	@ (8004c8c <checkAktifCalisma+0x1660>)
 8004be8:	2201      	movs	r2, #1
 8004bea:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8004bec:	4b27      	ldr	r3, [pc, #156]	@ (8004c8c <checkAktifCalisma+0x1660>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d013      	beq.n	8004c1c <checkAktifCalisma+0x15f0>
 8004bf4:	2108      	movs	r1, #8
 8004bf6:	481b      	ldr	r0, [pc, #108]	@ (8004c64 <checkAktifCalisma+0x1638>)
 8004bf8:	f004 fd40 	bl	800967c <HAL_GPIO_ReadPin>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00c      	beq.n	8004c1c <checkAktifCalisma+0x15f0>
 8004c02:	4b16      	ldr	r3, [pc, #88]	@ (8004c5c <checkAktifCalisma+0x1630>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	f083 0301 	eor.w	r3, r3, #1
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <checkAktifCalisma+0x15f0>
					maksimumcalismahatasi=0;
 8004c10:	4b1e      	ldr	r3, [pc, #120]	@ (8004c8c <checkAktifCalisma+0x1660>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8004c16:	2006      	movs	r0, #6
 8004c18:	f7fe fb02 	bl	8003220 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8004c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8004c9c <checkAktifCalisma+0x1670>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10b      	bne.n	8004c3c <checkAktifCalisma+0x1610>
 8004c24:	4b17      	ldr	r3, [pc, #92]	@ (8004c84 <checkAktifCalisma+0x1658>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d107      	bne.n	8004c3c <checkAktifCalisma+0x1610>
 8004c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ca0 <checkAktifCalisma+0x1674>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d103      	bne.n	8004c3c <checkAktifCalisma+0x1610>
 8004c34:	4b14      	ldr	r3, [pc, #80]	@ (8004c88 <checkAktifCalisma+0x165c>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d035      	beq.n	8004ca8 <checkAktifCalisma+0x167c>
					makineCalisiyor=0;
 8004c3c:	4b19      	ldr	r3, [pc, #100]	@ (8004ca4 <checkAktifCalisma+0x1678>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8004c42:	4b07      	ldr	r3, [pc, #28]	@ (8004c60 <checkAktifCalisma+0x1634>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8004c48:	4b0b      	ldr	r3, [pc, #44]	@ (8004c78 <checkAktifCalisma+0x164c>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	e032      	b.n	8004cb6 <checkAktifCalisma+0x168a>
 8004c50:	20000dfd 	.word	0x20000dfd
 8004c54:	20000da3 	.word	0x20000da3
 8004c58:	40010c00 	.word	0x40010c00
 8004c5c:	20000ded 	.word	0x20000ded
 8004c60:	20000e01 	.word	0x20000e01
 8004c64:	40010800 	.word	0x40010800
 8004c68:	20000da8 	.word	0x20000da8
 8004c6c:	20000dfe 	.word	0x20000dfe
 8004c70:	20000df4 	.word	0x20000df4
 8004c74:	20000de1 	.word	0x20000de1
 8004c78:	20000e02 	.word	0x20000e02
 8004c7c:	20000dff 	.word	0x20000dff
 8004c80:	20000df3 	.word	0x20000df3
 8004c84:	20000dd8 	.word	0x20000dd8
 8004c88:	20000dd7 	.word	0x20000dd7
 8004c8c:	20000dee 	.word	0x20000dee
 8004c90:	20000d78 	.word	0x20000d78
 8004c94:	20000d8c 	.word	0x20000d8c
 8004c98:	20000db8 	.word	0x20000db8
 8004c9c:	20000dd5 	.word	0x20000dd5
 8004ca0:	20000dd6 	.word	0x20000dd6
 8004ca4:	20000df5 	.word	0x20000df5
				} else {
					makineCalisiyor=1;
 8004ca8:	4b3a      	ldr	r3, [pc, #232]	@ (8004d94 <checkAktifCalisma+0x1768>)
 8004caa:	2201      	movs	r2, #1
 8004cac:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8004cae:	4b3a      	ldr	r3, [pc, #232]	@ (8004d98 <checkAktifCalisma+0x176c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a3a      	ldr	r2, [pc, #232]	@ (8004d9c <checkAktifCalisma+0x1770>)
 8004cb4:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8004cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8004da0 <checkAktifCalisma+0x1774>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d02f      	beq.n	8004d1e <checkAktifCalisma+0x16f2>
 8004cbe:	4b39      	ldr	r3, [pc, #228]	@ (8004da4 <checkAktifCalisma+0x1778>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	f083 0301 	eor.w	r3, r3, #1
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d028      	beq.n	8004d1e <checkAktifCalisma+0x16f2>
 8004ccc:	4b36      	ldr	r3, [pc, #216]	@ (8004da8 <checkAktifCalisma+0x177c>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	f083 0301 	eor.w	r3, r3, #1
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d021      	beq.n	8004d1e <checkAktifCalisma+0x16f2>
 8004cda:	4b34      	ldr	r3, [pc, #208]	@ (8004dac <checkAktifCalisma+0x1780>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	f083 0301 	eor.w	r3, r3, #1
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01a      	beq.n	8004d1e <checkAktifCalisma+0x16f2>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8004ce8:	4b31      	ldr	r3, [pc, #196]	@ (8004db0 <checkAktifCalisma+0x1784>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	f083 0301 	eor.w	r3, r3, #1
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d013      	beq.n	8004d1e <checkAktifCalisma+0x16f2>
 8004cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8004db4 <checkAktifCalisma+0x1788>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	f083 0301 	eor.w	r3, r3, #1
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00c      	beq.n	8004d1e <checkAktifCalisma+0x16f2>
 8004d04:	4b2c      	ldr	r3, [pc, #176]	@ (8004db8 <checkAktifCalisma+0x178c>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	f083 0301 	eor.w	r3, r3, #1
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <checkAktifCalisma+0x16f2>

					hataVar=0;
 8004d12:	4b23      	ldr	r3, [pc, #140]	@ (8004da0 <checkAktifCalisma+0x1774>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8004d18:	2007      	movs	r0, #7
 8004d1a:	f7fe fa81 	bl	8003220 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8004d1e:	4b20      	ldr	r3, [pc, #128]	@ (8004da0 <checkAktifCalisma+0x1774>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d02a      	beq.n	8004d7c <checkAktifCalisma+0x1750>
 8004d26:	4b1f      	ldr	r3, [pc, #124]	@ (8004da4 <checkAktifCalisma+0x1778>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	f083 0301 	eor.w	r3, r3, #1
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d023      	beq.n	8004d7c <checkAktifCalisma+0x1750>
 8004d34:	4b1c      	ldr	r3, [pc, #112]	@ (8004da8 <checkAktifCalisma+0x177c>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01f      	beq.n	8004d7c <checkAktifCalisma+0x1750>
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dac <checkAktifCalisma+0x1780>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	f083 0301 	eor.w	r3, r3, #1
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d018      	beq.n	8004d7c <checkAktifCalisma+0x1750>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8004d4a:	4b19      	ldr	r3, [pc, #100]	@ (8004db0 <checkAktifCalisma+0x1784>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	f083 0301 	eor.w	r3, r3, #1
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d011      	beq.n	8004d7c <checkAktifCalisma+0x1750>
 8004d58:	4b16      	ldr	r3, [pc, #88]	@ (8004db4 <checkAktifCalisma+0x1788>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	f083 0301 	eor.w	r3, r3, #1
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <checkAktifCalisma+0x1750>
 8004d66:	4b14      	ldr	r3, [pc, #80]	@ (8004db8 <checkAktifCalisma+0x178c>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	f083 0301 	eor.w	r3, r3, #1
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <checkAktifCalisma+0x1750>
				{
					EmnCerHataMakYukariCalis=1;
 8004d74:	4b11      	ldr	r3, [pc, #68]	@ (8004dbc <checkAktifCalisma+0x1790>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 8004d7a:	e009      	b.n	8004d90 <checkAktifCalisma+0x1764>
				else if(emniyetCercevesihatasi==0)
 8004d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004da8 <checkAktifCalisma+0x177c>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	f083 0301 	eor.w	r3, r3, #1
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <checkAktifCalisma+0x1764>
					EmnCerHataMakYukariCalis=0;
 8004d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004dbc <checkAktifCalisma+0x1790>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
}
 8004d90:	bf00      	nop
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20000df5 	.word	0x20000df5
 8004d98:	20000d78 	.word	0x20000d78
 8004d9c:	20000d8c 	.word	0x20000d8c
 8004da0:	20000df4 	.word	0x20000df4
 8004da4:	20000def 	.word	0x20000def
 8004da8:	20000df0 	.word	0x20000df0
 8004dac:	20000dfd 	.word	0x20000dfd
 8004db0:	20000dfe 	.word	0x20000dfe
 8004db4:	20000dff 	.word	0x20000dff
 8004db8:	20000dee 	.word	0x20000dee
 8004dbc:	20000e03 	.word	0x20000e03

08004dc0 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004dc4:	4b66      	ldr	r3, [pc, #408]	@ (8004f60 <checkDemoModCalisma+0x1a0>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f041 83ab 	bne.w	8006524 <checkDemoModCalisma+0x1764>
 8004dce:	4b65      	ldr	r3, [pc, #404]	@ (8004f64 <checkDemoModCalisma+0x1a4>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f041 83a6 	bne.w	8006524 <checkDemoModCalisma+0x1764>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8004dd8:	4b63      	ldr	r3, [pc, #396]	@ (8004f68 <checkDemoModCalisma+0x1a8>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d11a      	bne.n	8004e16 <checkDemoModCalisma+0x56>
 8004de0:	4b62      	ldr	r3, [pc, #392]	@ (8004f6c <checkDemoModCalisma+0x1ac>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d116      	bne.n	8004e16 <checkDemoModCalisma+0x56>
 8004de8:	4b61      	ldr	r3, [pc, #388]	@ (8004f70 <checkDemoModCalisma+0x1b0>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <checkDemoModCalisma+0x46>
 8004df0:	4b60      	ldr	r3, [pc, #384]	@ (8004f74 <checkDemoModCalisma+0x1b4>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f083 0301 	eor.w	r3, r3, #1
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <checkDemoModCalisma+0x46>
 8004dfe:	4b5e      	ldr	r3, [pc, #376]	@ (8004f78 <checkDemoModCalisma+0x1b8>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d007      	beq.n	8004e16 <checkDemoModCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8004e06:	4b5d      	ldr	r3, [pc, #372]	@ (8004f7c <checkDemoModCalisma+0x1bc>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01c      	beq.n	8004e48 <checkDemoModCalisma+0x88>
 8004e0e:	4b5c      	ldr	r3, [pc, #368]	@ (8004f80 <checkDemoModCalisma+0x1c0>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d118      	bne.n	8004e48 <checkDemoModCalisma+0x88>
 8004e16:	4b5b      	ldr	r3, [pc, #364]	@ (8004f84 <checkDemoModCalisma+0x1c4>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d103      	bne.n	8004e26 <checkDemoModCalisma+0x66>
 8004e1e:	4b5a      	ldr	r3, [pc, #360]	@ (8004f88 <checkDemoModCalisma+0x1c8>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d010      	beq.n	8004e48 <checkDemoModCalisma+0x88>
 8004e26:	4b59      	ldr	r3, [pc, #356]	@ (8004f8c <checkDemoModCalisma+0x1cc>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00c      	beq.n	8004e48 <checkDemoModCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004e34:	4856      	ldr	r0, [pc, #344]	@ (8004f90 <checkDemoModCalisma+0x1d0>)
 8004e36:	f004 fc38 	bl	80096aa <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8004e3a:	4b56      	ldr	r3, [pc, #344]	@ (8004f94 <checkDemoModCalisma+0x1d4>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8004e40:	4b55      	ldr	r3, [pc, #340]	@ (8004f98 <checkDemoModCalisma+0x1d8>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	e008      	b.n	8004e5a <checkDemoModCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004e4e:	4850      	ldr	r0, [pc, #320]	@ (8004f90 <checkDemoModCalisma+0x1d0>)
 8004e50:	f004 fc2b 	bl	80096aa <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8004e54:	4b4f      	ldr	r3, [pc, #316]	@ (8004f94 <checkDemoModCalisma+0x1d4>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8004e5a:	4b42      	ldr	r3, [pc, #264]	@ (8004f64 <checkDemoModCalisma+0x1a4>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d164      	bne.n	8004f2c <checkDemoModCalisma+0x16c>
 8004e62:	4b49      	ldr	r3, [pc, #292]	@ (8004f88 <checkDemoModCalisma+0x1c8>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d103      	bne.n	8004e72 <checkDemoModCalisma+0xb2>
 8004e6a:	4b46      	ldr	r3, [pc, #280]	@ (8004f84 <checkDemoModCalisma+0x1c4>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d05c      	beq.n	8004f2c <checkDemoModCalisma+0x16c>
 8004e72:	4b46      	ldr	r3, [pc, #280]	@ (8004f8c <checkDemoModCalisma+0x1cc>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d058      	beq.n	8004f2c <checkDemoModCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004e7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004e7e:	4844      	ldr	r0, [pc, #272]	@ (8004f90 <checkDemoModCalisma+0x1d0>)
 8004e80:	f004 fbfc 	bl	800967c <HAL_GPIO_ReadPin>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <checkDemoModCalisma+0xd2>
 8004e8a:	4b44      	ldr	r3, [pc, #272]	@ (8004f9c <checkDemoModCalisma+0x1dc>)
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d04c      	beq.n	8004f2c <checkDemoModCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004e92:	2102      	movs	r1, #2
 8004e94:	4842      	ldr	r0, [pc, #264]	@ (8004fa0 <checkDemoModCalisma+0x1e0>)
 8004e96:	f004 fbf1 	bl	800967c <HAL_GPIO_ReadPin>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d145      	bne.n	8004f2c <checkDemoModCalisma+0x16c>
							&& (basincVar)
 8004ea0:	4b40      	ldr	r3, [pc, #256]	@ (8004fa4 <checkDemoModCalisma+0x1e4>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d041      	beq.n	8004f2c <checkDemoModCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004ea8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004eac:	4838      	ldr	r0, [pc, #224]	@ (8004f90 <checkDemoModCalisma+0x1d0>)
 8004eae:	f004 fbe5 	bl	800967c <HAL_GPIO_ReadPin>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d10e      	bne.n	8004ed6 <checkDemoModCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004eb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ebc:	4834      	ldr	r0, [pc, #208]	@ (8004f90 <checkDemoModCalisma+0x1d0>)
 8004ebe:	f004 fbdd 	bl	800967c <HAL_GPIO_ReadPin>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d106      	bne.n	8004ed6 <checkDemoModCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004ec8:	2140      	movs	r1, #64	@ 0x40
 8004eca:	4835      	ldr	r0, [pc, #212]	@ (8004fa0 <checkDemoModCalisma+0x1e0>)
 8004ecc:	f004 fbd6 	bl	800967c <HAL_GPIO_ReadPin>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d003      	beq.n	8004ede <checkDemoModCalisma+0x11e>
 8004ed6:	4b24      	ldr	r3, [pc, #144]	@ (8004f68 <checkDemoModCalisma+0x1a8>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d026      	beq.n	8004f2c <checkDemoModCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 8004ede:	4b24      	ldr	r3, [pc, #144]	@ (8004f70 <checkDemoModCalisma+0x1b0>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	f083 0301 	eor.w	r3, r3, #1
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01f      	beq.n	8004f2c <checkDemoModCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8004eec:	4b1f      	ldr	r3, [pc, #124]	@ (8004f6c <checkDemoModCalisma+0x1ac>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	f083 0301 	eor.w	r3, r3, #1
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d018      	beq.n	8004f2c <checkDemoModCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 8004efa:	4b20      	ldr	r3, [pc, #128]	@ (8004f7c <checkDemoModCalisma+0x1bc>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	f083 0301 	eor.w	r3, r3, #1
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d011      	beq.n	8004f2c <checkDemoModCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8004f08:	4b27      	ldr	r3, [pc, #156]	@ (8004fa8 <checkDemoModCalisma+0x1e8>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	f083 0301 	eor.w	r3, r3, #1
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <checkDemoModCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 8004f16:	4b25      	ldr	r3, [pc, #148]	@ (8004fac <checkDemoModCalisma+0x1ec>)
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	f083 0301 	eor.w	r3, r3, #1
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <checkDemoModCalisma+0x16c>
					yukarimotorcalisiyor=1;
 8004f24:	4b10      	ldr	r3, [pc, #64]	@ (8004f68 <checkDemoModCalisma+0x1a8>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	e002      	b.n	8004f32 <checkDemoModCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8004f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f68 <checkDemoModCalisma+0x1a8>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004f32:	4b0d      	ldr	r3, [pc, #52]	@ (8004f68 <checkDemoModCalisma+0x1a8>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d03c      	beq.n	8004fb4 <checkDemoModCalisma+0x1f4>
 8004f3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004f3e:	4818      	ldr	r0, [pc, #96]	@ (8004fa0 <checkDemoModCalisma+0x1e0>)
 8004f40:	f004 fb9c 	bl	800967c <HAL_GPIO_ReadPin>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d134      	bne.n	8004fb4 <checkDemoModCalisma+0x1f4>
 8004f4a:	4b19      	ldr	r3, [pc, #100]	@ (8004fb0 <checkDemoModCalisma+0x1f0>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d030      	beq.n	8004fb4 <checkDemoModCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004f52:	2201      	movs	r2, #1
 8004f54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004f58:	480d      	ldr	r0, [pc, #52]	@ (8004f90 <checkDemoModCalisma+0x1d0>)
 8004f5a:	f004 fba6 	bl	80096aa <HAL_GPIO_WritePin>
 8004f5e:	e02f      	b.n	8004fc0 <checkDemoModCalisma+0x200>
 8004f60:	20000dbe 	.word	0x20000dbe
 8004f64:	20000dbd 	.word	0x20000dbd
 8004f68:	20000dd5 	.word	0x20000dd5
 8004f6c:	20000dd6 	.word	0x20000dd6
 8004f70:	20000dd8 	.word	0x20000dd8
 8004f74:	20000dd0 	.word	0x20000dd0
 8004f78:	20000db3 	.word	0x20000db3
 8004f7c:	20000dd7 	.word	0x20000dd7
 8004f80:	20000db2 	.word	0x20000db2
 8004f84:	20000df1 	.word	0x20000df1
 8004f88:	20000e04 	.word	0x20000e04
 8004f8c:	20000df2 	.word	0x20000df2
 8004f90:	40010c00 	.word	0x40010c00
 8004f94:	20000df3 	.word	0x20000df3
 8004f98:	20000ddf 	.word	0x20000ddf
 8004f9c:	20000ddc 	.word	0x20000ddc
 8004fa0:	40011000 	.word	0x40011000
 8004fa4:	20000da3 	.word	0x20000da3
 8004fa8:	20000dda 	.word	0x20000dda
 8004fac:	20000ddb 	.word	0x20000ddb
 8004fb0:	20000dae 	.word	0x20000dae
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004fba:	4865      	ldr	r0, [pc, #404]	@ (8005150 <checkDemoModCalisma+0x390>)
 8004fbc:	f004 fb75 	bl	80096aa <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004fc0:	4b64      	ldr	r3, [pc, #400]	@ (8005154 <checkDemoModCalisma+0x394>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d013      	beq.n	8004ff0 <checkDemoModCalisma+0x230>
 8004fc8:	4b63      	ldr	r3, [pc, #396]	@ (8005158 <checkDemoModCalisma+0x398>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d007      	beq.n	8004fe0 <checkDemoModCalisma+0x220>
 8004fd0:	4b61      	ldr	r3, [pc, #388]	@ (8005158 <checkDemoModCalisma+0x398>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d003      	beq.n	8004fe0 <checkDemoModCalisma+0x220>
 8004fd8:	4b60      	ldr	r3, [pc, #384]	@ (800515c <checkDemoModCalisma+0x39c>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d107      	bne.n	8004ff0 <checkDemoModCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	2104      	movs	r1, #4
 8004fe4:	485a      	ldr	r0, [pc, #360]	@ (8005150 <checkDemoModCalisma+0x390>)
 8004fe6:	f004 fb60 	bl	80096aa <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8004fea:	4b5d      	ldr	r3, [pc, #372]	@ (8005160 <checkDemoModCalisma+0x3a0>)
 8004fec:	2201      	movs	r2, #1
 8004fee:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004ff0:	4b5b      	ldr	r3, [pc, #364]	@ (8005160 <checkDemoModCalisma+0x3a0>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d033      	beq.n	8005060 <checkDemoModCalisma+0x2a0>
 8004ff8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004ffc:	4854      	ldr	r0, [pc, #336]	@ (8005150 <checkDemoModCalisma+0x390>)
 8004ffe:	f004 fb3d 	bl	800967c <HAL_GPIO_ReadPin>
 8005002:	4603      	mov	r3, r0
 8005004:	2b01      	cmp	r3, #1
 8005006:	d106      	bne.n	8005016 <checkDemoModCalisma+0x256>
 8005008:	4b56      	ldr	r3, [pc, #344]	@ (8005164 <checkDemoModCalisma+0x3a4>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	f083 0301 	eor.w	r3, r3, #1
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <checkDemoModCalisma+0x264>
 8005016:	2102      	movs	r1, #2
 8005018:	4853      	ldr	r0, [pc, #332]	@ (8005168 <checkDemoModCalisma+0x3a8>)
 800501a:	f004 fb2f 	bl	800967c <HAL_GPIO_ReadPin>
 800501e:	4603      	mov	r3, r0
 8005020:	2b01      	cmp	r3, #1
 8005022:	d11d      	bne.n	8005060 <checkDemoModCalisma+0x2a0>
 8005024:	4b51      	ldr	r3, [pc, #324]	@ (800516c <checkDemoModCalisma+0x3ac>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d103      	bne.n	8005034 <checkDemoModCalisma+0x274>
 800502c:	4b50      	ldr	r3, [pc, #320]	@ (8005170 <checkDemoModCalisma+0x3b0>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d015      	beq.n	8005060 <checkDemoModCalisma+0x2a0>
 8005034:	4b4f      	ldr	r3, [pc, #316]	@ (8005174 <checkDemoModCalisma+0x3b4>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d011      	beq.n	8005060 <checkDemoModCalisma+0x2a0>
 800503c:	4b4e      	ldr	r3, [pc, #312]	@ (8005178 <checkDemoModCalisma+0x3b8>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00d      	beq.n	8005060 <checkDemoModCalisma+0x2a0>
 8005044:	4b4d      	ldr	r3, [pc, #308]	@ (800517c <checkDemoModCalisma+0x3bc>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	f083 0301 	eor.w	r3, r3, #1
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d006      	beq.n	8005060 <checkDemoModCalisma+0x2a0>
					timer2=millis;
 8005052:	4b4b      	ldr	r3, [pc, #300]	@ (8005180 <checkDemoModCalisma+0x3c0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a4b      	ldr	r2, [pc, #300]	@ (8005184 <checkDemoModCalisma+0x3c4>)
 8005058:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 800505a:	4b48      	ldr	r3, [pc, #288]	@ (800517c <checkDemoModCalisma+0x3bc>)
 800505c:	2201      	movs	r2, #1
 800505e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8005060:	4b47      	ldr	r3, [pc, #284]	@ (8005180 <checkDemoModCalisma+0x3c0>)
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	4b47      	ldr	r3, [pc, #284]	@ (8005184 <checkDemoModCalisma+0x3c4>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	4a47      	ldr	r2, [pc, #284]	@ (8005188 <checkDemoModCalisma+0x3c8>)
 800506c:	7812      	ldrb	r2, [r2, #0]
 800506e:	4293      	cmp	r3, r2
 8005070:	d303      	bcc.n	800507a <checkDemoModCalisma+0x2ba>
 8005072:	4b42      	ldr	r3, [pc, #264]	@ (800517c <checkDemoModCalisma+0x3bc>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d118      	bne.n	80050ac <checkDemoModCalisma+0x2ec>
 800507a:	4b3c      	ldr	r3, [pc, #240]	@ (800516c <checkDemoModCalisma+0x3ac>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	f083 0301 	eor.w	r3, r3, #1
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d006      	beq.n	8005096 <checkDemoModCalisma+0x2d6>
 8005088:	4b39      	ldr	r3, [pc, #228]	@ (8005170 <checkDemoModCalisma+0x3b0>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	f083 0301 	eor.w	r3, r3, #1
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10a      	bne.n	80050ac <checkDemoModCalisma+0x2ec>
 8005096:	4b37      	ldr	r3, [pc, #220]	@ (8005174 <checkDemoModCalisma+0x3b4>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	f083 0301 	eor.w	r3, r3, #1
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d103      	bne.n	80050ac <checkDemoModCalisma+0x2ec>
 80050a4:	4b34      	ldr	r3, [pc, #208]	@ (8005178 <checkDemoModCalisma+0x3b8>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10a      	bne.n	80050c2 <checkDemoModCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80050ac:	2200      	movs	r2, #0
 80050ae:	2104      	movs	r1, #4
 80050b0:	4827      	ldr	r0, [pc, #156]	@ (8005150 <checkDemoModCalisma+0x390>)
 80050b2:	f004 fafa 	bl	80096aa <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 80050b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005160 <checkDemoModCalisma+0x3a0>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 80050bc:	4b2f      	ldr	r3, [pc, #188]	@ (800517c <checkDemoModCalisma+0x3bc>)
 80050be:	2200      	movs	r2, #0
 80050c0:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 80050c2:	4b32      	ldr	r3, [pc, #200]	@ (800518c <checkDemoModCalisma+0x3cc>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d102      	bne.n	80050d0 <checkDemoModCalisma+0x310>
					cerceveVar=1;
 80050ca:	4b31      	ldr	r3, [pc, #196]	@ (8005190 <checkDemoModCalisma+0x3d0>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80050d0:	4b2e      	ldr	r3, [pc, #184]	@ (800518c <checkDemoModCalisma+0x3cc>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d116      	bne.n	8005106 <checkDemoModCalisma+0x346>
 80050d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005194 <checkDemoModCalisma+0x3d4>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d112      	bne.n	8005106 <checkDemoModCalisma+0x346>
 80050e0:	2101      	movs	r1, #1
 80050e2:	4821      	ldr	r0, [pc, #132]	@ (8005168 <checkDemoModCalisma+0x3a8>)
 80050e4:	f004 faca 	bl	800967c <HAL_GPIO_ReadPin>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10b      	bne.n	8005106 <checkDemoModCalisma+0x346>
 80050ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80050f2:	4817      	ldr	r0, [pc, #92]	@ (8005150 <checkDemoModCalisma+0x390>)
 80050f4:	f004 fac2 	bl	800967c <HAL_GPIO_ReadPin>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <checkDemoModCalisma+0x346>
					cerceveVar=1;
 80050fe:	4b24      	ldr	r3, [pc, #144]	@ (8005190 <checkDemoModCalisma+0x3d0>)
 8005100:	2201      	movs	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	e011      	b.n	800512a <checkDemoModCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005106:	4b21      	ldr	r3, [pc, #132]	@ (800518c <checkDemoModCalisma+0x3cc>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d10d      	bne.n	800512a <checkDemoModCalisma+0x36a>
 800510e:	2101      	movs	r1, #1
 8005110:	4815      	ldr	r0, [pc, #84]	@ (8005168 <checkDemoModCalisma+0x3a8>)
 8005112:	f004 fab3 	bl	800967c <HAL_GPIO_ReadPin>
 8005116:	4603      	mov	r3, r0
 8005118:	2b01      	cmp	r3, #1
 800511a:	d106      	bne.n	800512a <checkDemoModCalisma+0x36a>
 800511c:	4b1d      	ldr	r3, [pc, #116]	@ (8005194 <checkDemoModCalisma+0x3d4>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d102      	bne.n	800512a <checkDemoModCalisma+0x36a>
					cerceveVar=0;
 8005124:	4b1a      	ldr	r3, [pc, #104]	@ (8005190 <checkDemoModCalisma+0x3d0>)
 8005126:	2200      	movs	r2, #0
 8005128:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 800512a:	4b18      	ldr	r3, [pc, #96]	@ (800518c <checkDemoModCalisma+0x3cc>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d135      	bne.n	800519e <checkDemoModCalisma+0x3de>
 8005132:	4b18      	ldr	r3, [pc, #96]	@ (8005194 <checkDemoModCalisma+0x3d4>)
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d131      	bne.n	800519e <checkDemoModCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800513a:	2101      	movs	r1, #1
 800513c:	480a      	ldr	r0, [pc, #40]	@ (8005168 <checkDemoModCalisma+0x3a8>)
 800513e:	f004 fa9d 	bl	800967c <HAL_GPIO_ReadPin>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d127      	bne.n	8005198 <checkDemoModCalisma+0x3d8>
						cerceveVar=1;
 8005148:	4b11      	ldr	r3, [pc, #68]	@ (8005190 <checkDemoModCalisma+0x3d0>)
 800514a:	2201      	movs	r2, #1
 800514c:	701a      	strb	r2, [r3, #0]
 800514e:	e026      	b.n	800519e <checkDemoModCalisma+0x3de>
 8005150:	40010c00 	.word	0x40010c00
 8005154:	20000dd5 	.word	0x20000dd5
 8005158:	20000daf 	.word	0x20000daf
 800515c:	20000db3 	.word	0x20000db3
 8005160:	20000dd9 	.word	0x20000dd9
 8005164:	20000ddc 	.word	0x20000ddc
 8005168:	40011000 	.word	0x40011000
 800516c:	20000df1 	.word	0x20000df1
 8005170:	20000e04 	.word	0x20000e04
 8005174:	20000df2 	.word	0x20000df2
 8005178:	20000da3 	.word	0x20000da3
 800517c:	20000dd1 	.word	0x20000dd1
 8005180:	20000d78 	.word	0x20000d78
 8005184:	20000d84 	.word	0x20000d84
 8005188:	20000db4 	.word	0x20000db4
 800518c:	20000da4 	.word	0x20000da4
 8005190:	20000df6 	.word	0x20000df6
 8005194:	20000da1 	.word	0x20000da1
					} else {
						cerceveVar=0;
 8005198:	4b7f      	ldr	r3, [pc, #508]	@ (8005398 <checkDemoModCalisma+0x5d8>)
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800519e:	4b7f      	ldr	r3, [pc, #508]	@ (800539c <checkDemoModCalisma+0x5dc>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d17c      	bne.n	80052a0 <checkDemoModCalisma+0x4e0>
 80051a6:	4b7e      	ldr	r3, [pc, #504]	@ (80053a0 <checkDemoModCalisma+0x5e0>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d078      	beq.n	80052a0 <checkDemoModCalisma+0x4e0>
 80051ae:	4b7d      	ldr	r3, [pc, #500]	@ (80053a4 <checkDemoModCalisma+0x5e4>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d074      	beq.n	80052a0 <checkDemoModCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80051b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80051ba:	487b      	ldr	r0, [pc, #492]	@ (80053a8 <checkDemoModCalisma+0x5e8>)
 80051bc:	f004 fa5e 	bl	800967c <HAL_GPIO_ReadPin>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <checkDemoModCalisma+0x40e>
 80051c6:	4b79      	ldr	r3, [pc, #484]	@ (80053ac <checkDemoModCalisma+0x5ec>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d068      	beq.n	80052a0 <checkDemoModCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80051ce:	4b72      	ldr	r3, [pc, #456]	@ (8005398 <checkDemoModCalisma+0x5d8>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d064      	beq.n	80052a0 <checkDemoModCalisma+0x4e0>
 80051d6:	4b76      	ldr	r3, [pc, #472]	@ (80053b0 <checkDemoModCalisma+0x5f0>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	f083 0301 	eor.w	r3, r3, #1
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d05d      	beq.n	80052a0 <checkDemoModCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80051e4:	2104      	movs	r1, #4
 80051e6:	4873      	ldr	r0, [pc, #460]	@ (80053b4 <checkDemoModCalisma+0x5f4>)
 80051e8:	f004 fa48 	bl	800967c <HAL_GPIO_ReadPin>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <checkDemoModCalisma+0x43a>
 80051f2:	4b71      	ldr	r3, [pc, #452]	@ (80053b8 <checkDemoModCalisma+0x5f8>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d152      	bne.n	80052a0 <checkDemoModCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80051fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80051fe:	486a      	ldr	r0, [pc, #424]	@ (80053a8 <checkDemoModCalisma+0x5e8>)
 8005200:	f004 fa3c 	bl	800967c <HAL_GPIO_ReadPin>
 8005204:	4603      	mov	r3, r0
 8005206:	2b01      	cmp	r3, #1
 8005208:	d10e      	bne.n	8005228 <checkDemoModCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800520a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800520e:	4866      	ldr	r0, [pc, #408]	@ (80053a8 <checkDemoModCalisma+0x5e8>)
 8005210:	f004 fa34 	bl	800967c <HAL_GPIO_ReadPin>
 8005214:	4603      	mov	r3, r0
 8005216:	2b01      	cmp	r3, #1
 8005218:	d106      	bne.n	8005228 <checkDemoModCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800521a:	2140      	movs	r1, #64	@ 0x40
 800521c:	4865      	ldr	r0, [pc, #404]	@ (80053b4 <checkDemoModCalisma+0x5f4>)
 800521e:	f004 fa2d 	bl	800967c <HAL_GPIO_ReadPin>
 8005222:	4603      	mov	r3, r0
 8005224:	2b01      	cmp	r3, #1
 8005226:	d003      	beq.n	8005230 <checkDemoModCalisma+0x470>
 8005228:	4b64      	ldr	r3, [pc, #400]	@ (80053bc <checkDemoModCalisma+0x5fc>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d037      	beq.n	80052a0 <checkDemoModCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 8005230:	4b63      	ldr	r3, [pc, #396]	@ (80053c0 <checkDemoModCalisma+0x600>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	f083 0301 	eor.w	r3, r3, #1
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d030      	beq.n	80052a0 <checkDemoModCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 800523e:	4b61      	ldr	r3, [pc, #388]	@ (80053c4 <checkDemoModCalisma+0x604>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	f083 0301 	eor.w	r3, r3, #1
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d029      	beq.n	80052a0 <checkDemoModCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 800524c:	4b5e      	ldr	r3, [pc, #376]	@ (80053c8 <checkDemoModCalisma+0x608>)
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	f083 0301 	eor.w	r3, r3, #1
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d022      	beq.n	80052a0 <checkDemoModCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 800525a:	4b5c      	ldr	r3, [pc, #368]	@ (80053cc <checkDemoModCalisma+0x60c>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	f083 0301 	eor.w	r3, r3, #1
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01b      	beq.n	80052a0 <checkDemoModCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8005268:	4b59      	ldr	r3, [pc, #356]	@ (80053d0 <checkDemoModCalisma+0x610>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	f083 0301 	eor.w	r3, r3, #1
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d014      	beq.n	80052a0 <checkDemoModCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 8005276:	4b57      	ldr	r3, [pc, #348]	@ (80053d4 <checkDemoModCalisma+0x614>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	f083 0301 	eor.w	r3, r3, #1
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00d      	beq.n	80052a0 <checkDemoModCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005284:	2201      	movs	r2, #1
 8005286:	2102      	movs	r1, #2
 8005288:	4847      	ldr	r0, [pc, #284]	@ (80053a8 <checkDemoModCalisma+0x5e8>)
 800528a:	f004 fa0e 	bl	80096aa <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 800528e:	4b4b      	ldr	r3, [pc, #300]	@ (80053bc <checkDemoModCalisma+0x5fc>)
 8005290:	2201      	movs	r2, #1
 8005292:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8005294:	4b50      	ldr	r3, [pc, #320]	@ (80053d8 <checkDemoModCalisma+0x618>)
 8005296:	2201      	movs	r2, #1
 8005298:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 800529a:	4b50      	ldr	r3, [pc, #320]	@ (80053dc <checkDemoModCalisma+0x61c>)
 800529c:	2201      	movs	r2, #1
 800529e:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80052a0:	4b46      	ldr	r3, [pc, #280]	@ (80053bc <checkDemoModCalisma+0x5fc>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d033      	beq.n	8005310 <checkDemoModCalisma+0x550>
 80052a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80052ac:	483e      	ldr	r0, [pc, #248]	@ (80053a8 <checkDemoModCalisma+0x5e8>)
 80052ae:	f004 f9e5 	bl	800967c <HAL_GPIO_ReadPin>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d106      	bne.n	80052c6 <checkDemoModCalisma+0x506>
 80052b8:	4b3c      	ldr	r3, [pc, #240]	@ (80053ac <checkDemoModCalisma+0x5ec>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	f083 0301 	eor.w	r3, r3, #1
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <checkDemoModCalisma+0x51c>
 80052c6:	2104      	movs	r1, #4
 80052c8:	483a      	ldr	r0, [pc, #232]	@ (80053b4 <checkDemoModCalisma+0x5f4>)
 80052ca:	f004 f9d7 	bl	800967c <HAL_GPIO_ReadPin>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d11d      	bne.n	8005310 <checkDemoModCalisma+0x550>
 80052d4:	4b38      	ldr	r3, [pc, #224]	@ (80053b8 <checkDemoModCalisma+0x5f8>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d019      	beq.n	8005310 <checkDemoModCalisma+0x550>
 80052dc:	4b30      	ldr	r3, [pc, #192]	@ (80053a0 <checkDemoModCalisma+0x5e0>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d015      	beq.n	8005310 <checkDemoModCalisma+0x550>
 80052e4:	4b2f      	ldr	r3, [pc, #188]	@ (80053a4 <checkDemoModCalisma+0x5e4>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d011      	beq.n	8005310 <checkDemoModCalisma+0x550>
 80052ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005398 <checkDemoModCalisma+0x5d8>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00d      	beq.n	8005310 <checkDemoModCalisma+0x550>
 80052f4:	4b3a      	ldr	r3, [pc, #232]	@ (80053e0 <checkDemoModCalisma+0x620>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	f083 0301 	eor.w	r3, r3, #1
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d006      	beq.n	8005310 <checkDemoModCalisma+0x550>
					timer2=millis;
 8005302:	4b38      	ldr	r3, [pc, #224]	@ (80053e4 <checkDemoModCalisma+0x624>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a38      	ldr	r2, [pc, #224]	@ (80053e8 <checkDemoModCalisma+0x628>)
 8005308:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 800530a:	4b35      	ldr	r3, [pc, #212]	@ (80053e0 <checkDemoModCalisma+0x620>)
 800530c:	2201      	movs	r2, #1
 800530e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005310:	4b34      	ldr	r3, [pc, #208]	@ (80053e4 <checkDemoModCalisma+0x624>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	4b34      	ldr	r3, [pc, #208]	@ (80053e8 <checkDemoModCalisma+0x628>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	4a34      	ldr	r2, [pc, #208]	@ (80053ec <checkDemoModCalisma+0x62c>)
 800531c:	7812      	ldrb	r2, [r2, #0]
 800531e:	4293      	cmp	r3, r2
 8005320:	d303      	bcc.n	800532a <checkDemoModCalisma+0x56a>
 8005322:	4b2f      	ldr	r3, [pc, #188]	@ (80053e0 <checkDemoModCalisma+0x620>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d114      	bne.n	8005354 <checkDemoModCalisma+0x594>
 800532a:	4b1d      	ldr	r3, [pc, #116]	@ (80053a0 <checkDemoModCalisma+0x5e0>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	f083 0301 	eor.w	r3, r3, #1
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10d      	bne.n	8005354 <checkDemoModCalisma+0x594>
 8005338:	4b1a      	ldr	r3, [pc, #104]	@ (80053a4 <checkDemoModCalisma+0x5e4>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	f083 0301 	eor.w	r3, r3, #1
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <checkDemoModCalisma+0x594>
 8005346:	4b14      	ldr	r3, [pc, #80]	@ (8005398 <checkDemoModCalisma+0x5d8>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	f083 0301 	eor.w	r3, r3, #1
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <checkDemoModCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005354:	2200      	movs	r2, #0
 8005356:	2102      	movs	r1, #2
 8005358:	4813      	ldr	r0, [pc, #76]	@ (80053a8 <checkDemoModCalisma+0x5e8>)
 800535a:	f004 f9a6 	bl	80096aa <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 800535e:	4b17      	ldr	r3, [pc, #92]	@ (80053bc <checkDemoModCalisma+0x5fc>)
 8005360:	2200      	movs	r2, #0
 8005362:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8005364:	4b1e      	ldr	r3, [pc, #120]	@ (80053e0 <checkDemoModCalisma+0x620>)
 8005366:	2200      	movs	r2, #0
 8005368:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800536a:	4b14      	ldr	r3, [pc, #80]	@ (80053bc <checkDemoModCalisma+0x5fc>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d040      	beq.n	80053f4 <checkDemoModCalisma+0x634>
 8005372:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005376:	480f      	ldr	r0, [pc, #60]	@ (80053b4 <checkDemoModCalisma+0x5f4>)
 8005378:	f004 f980 	bl	800967c <HAL_GPIO_ReadPin>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d138      	bne.n	80053f4 <checkDemoModCalisma+0x634>
 8005382:	4b1b      	ldr	r3, [pc, #108]	@ (80053f0 <checkDemoModCalisma+0x630>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d034      	beq.n	80053f4 <checkDemoModCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800538a:	2201      	movs	r2, #1
 800538c:	2101      	movs	r1, #1
 800538e:	4806      	ldr	r0, [pc, #24]	@ (80053a8 <checkDemoModCalisma+0x5e8>)
 8005390:	f004 f98b 	bl	80096aa <HAL_GPIO_WritePin>
 8005394:	e033      	b.n	80053fe <checkDemoModCalisma+0x63e>
 8005396:	bf00      	nop
 8005398:	20000df6 	.word	0x20000df6
 800539c:	20000dbd 	.word	0x20000dbd
 80053a0:	20000df1 	.word	0x20000df1
 80053a4:	20000df2 	.word	0x20000df2
 80053a8:	40010c00 	.word	0x40010c00
 80053ac:	20000ddd 	.word	0x20000ddd
 80053b0:	20000df0 	.word	0x20000df0
 80053b4:	40011000 	.word	0x40011000
 80053b8:	20000da6 	.word	0x20000da6
 80053bc:	20000dd8 	.word	0x20000dd8
 80053c0:	20000dd5 	.word	0x20000dd5
 80053c4:	20000dd9 	.word	0x20000dd9
 80053c8:	20000dd6 	.word	0x20000dd6
 80053cc:	20000dd7 	.word	0x20000dd7
 80053d0:	20000dda 	.word	0x20000dda
 80053d4:	20000ddb 	.word	0x20000ddb
 80053d8:	20000de0 	.word	0x20000de0
 80053dc:	20000e00 	.word	0x20000e00
 80053e0:	20000dd0 	.word	0x20000dd0
 80053e4:	20000d78 	.word	0x20000d78
 80053e8:	20000d84 	.word	0x20000d84
 80053ec:	20000db5 	.word	0x20000db5
 80053f0:	20000da5 	.word	0x20000da5
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80053f4:	2200      	movs	r2, #0
 80053f6:	2101      	movs	r1, #1
 80053f8:	4836      	ldr	r0, [pc, #216]	@ (80054d4 <checkDemoModCalisma+0x714>)
 80053fa:	f004 f956 	bl	80096aa <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 80053fe:	4b36      	ldr	r3, [pc, #216]	@ (80054d8 <checkDemoModCalisma+0x718>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	f040 8080 	bne.w	8005508 <checkDemoModCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005408:	4b34      	ldr	r3, [pc, #208]	@ (80054dc <checkDemoModCalisma+0x71c>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d003      	beq.n	8005418 <checkDemoModCalisma+0x658>
 8005410:	4b32      	ldr	r3, [pc, #200]	@ (80054dc <checkDemoModCalisma+0x71c>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d177      	bne.n	8005508 <checkDemoModCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8005418:	4b31      	ldr	r3, [pc, #196]	@ (80054e0 <checkDemoModCalisma+0x720>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d073      	beq.n	8005508 <checkDemoModCalisma+0x748>
 8005420:	4b30      	ldr	r3, [pc, #192]	@ (80054e4 <checkDemoModCalisma+0x724>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d06f      	beq.n	8005508 <checkDemoModCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005428:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800542c:	4829      	ldr	r0, [pc, #164]	@ (80054d4 <checkDemoModCalisma+0x714>)
 800542e:	f004 f925 	bl	800967c <HAL_GPIO_ReadPin>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d167      	bne.n	8005508 <checkDemoModCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005438:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800543c:	482a      	ldr	r0, [pc, #168]	@ (80054e8 <checkDemoModCalisma+0x728>)
 800543e:	f004 f91d 	bl	800967c <HAL_GPIO_ReadPin>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <checkDemoModCalisma+0x690>
 8005448:	4b28      	ldr	r3, [pc, #160]	@ (80054ec <checkDemoModCalisma+0x72c>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d15b      	bne.n	8005508 <checkDemoModCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005450:	2140      	movs	r1, #64	@ 0x40
 8005452:	4825      	ldr	r0, [pc, #148]	@ (80054e8 <checkDemoModCalisma+0x728>)
 8005454:	f004 f912 	bl	800967c <HAL_GPIO_ReadPin>
 8005458:	4603      	mov	r3, r0
 800545a:	2b01      	cmp	r3, #1
 800545c:	d10f      	bne.n	800547e <checkDemoModCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800545e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005462:	481c      	ldr	r0, [pc, #112]	@ (80054d4 <checkDemoModCalisma+0x714>)
 8005464:	f004 f90a 	bl	800967c <HAL_GPIO_ReadPin>
 8005468:	4603      	mov	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d107      	bne.n	800547e <checkDemoModCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800546e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005472:	4818      	ldr	r0, [pc, #96]	@ (80054d4 <checkDemoModCalisma+0x714>)
 8005474:	f004 f902 	bl	800967c <HAL_GPIO_ReadPin>
 8005478:	4603      	mov	r3, r0
 800547a:	2b01      	cmp	r3, #1
 800547c:	d003      	beq.n	8005486 <checkDemoModCalisma+0x6c6>
 800547e:	4b1c      	ldr	r3, [pc, #112]	@ (80054f0 <checkDemoModCalisma+0x730>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d040      	beq.n	8005508 <checkDemoModCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8005486:	4b1b      	ldr	r3, [pc, #108]	@ (80054f4 <checkDemoModCalisma+0x734>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	f083 0301 	eor.w	r3, r3, #1
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b00      	cmp	r3, #0
 8005492:	d039      	beq.n	8005508 <checkDemoModCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8005494:	4b18      	ldr	r3, [pc, #96]	@ (80054f8 <checkDemoModCalisma+0x738>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	f083 0301 	eor.w	r3, r3, #1
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d032      	beq.n	8005508 <checkDemoModCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 80054a2:	4b16      	ldr	r3, [pc, #88]	@ (80054fc <checkDemoModCalisma+0x73c>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	f083 0301 	eor.w	r3, r3, #1
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d02b      	beq.n	8005508 <checkDemoModCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 80054b0:	4b13      	ldr	r3, [pc, #76]	@ (8005500 <checkDemoModCalisma+0x740>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	f083 0301 	eor.w	r3, r3, #1
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d024      	beq.n	8005508 <checkDemoModCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 80054be:	4b11      	ldr	r3, [pc, #68]	@ (8005504 <checkDemoModCalisma+0x744>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	f083 0301 	eor.w	r3, r3, #1
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01d      	beq.n	8005508 <checkDemoModCalisma+0x748>

					devmotoryukaricalisiyor=1;
 80054cc:	4b08      	ldr	r3, [pc, #32]	@ (80054f0 <checkDemoModCalisma+0x730>)
 80054ce:	2201      	movs	r2, #1
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	e01c      	b.n	800550e <checkDemoModCalisma+0x74e>
 80054d4:	40010c00 	.word	0x40010c00
 80054d8:	20000dbd 	.word	0x20000dbd
 80054dc:	20000daf 	.word	0x20000daf
 80054e0:	20000df1 	.word	0x20000df1
 80054e4:	20000df2 	.word	0x20000df2
 80054e8:	40011000 	.word	0x40011000
 80054ec:	20000db0 	.word	0x20000db0
 80054f0:	20000dd6 	.word	0x20000dd6
 80054f4:	20000dd5 	.word	0x20000dd5
 80054f8:	20000dd9 	.word	0x20000dd9
 80054fc:	20000dd8 	.word	0x20000dd8
 8005500:	20000dd7 	.word	0x20000dd7
 8005504:	20000ddb 	.word	0x20000ddb
				} else {
					devmotoryukaricalisiyor=0;
 8005508:	4b64      	ldr	r3, [pc, #400]	@ (800569c <checkDemoModCalisma+0x8dc>)
 800550a:	2200      	movs	r2, #0
 800550c:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 800550e:	4b63      	ldr	r3, [pc, #396]	@ (800569c <checkDemoModCalisma+0x8dc>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d007      	beq.n	8005526 <checkDemoModCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005516:	2201      	movs	r2, #1
 8005518:	2120      	movs	r1, #32
 800551a:	4861      	ldr	r0, [pc, #388]	@ (80056a0 <checkDemoModCalisma+0x8e0>)
 800551c:	f004 f8c5 	bl	80096aa <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8005520:	4b60      	ldr	r3, [pc, #384]	@ (80056a4 <checkDemoModCalisma+0x8e4>)
 8005522:	2201      	movs	r2, #1
 8005524:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005526:	4b5f      	ldr	r3, [pc, #380]	@ (80056a4 <checkDemoModCalisma+0x8e4>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d025      	beq.n	800557a <checkDemoModCalisma+0x7ba>
 800552e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005532:	485d      	ldr	r0, [pc, #372]	@ (80056a8 <checkDemoModCalisma+0x8e8>)
 8005534:	f004 f8a2 	bl	800967c <HAL_GPIO_ReadPin>
 8005538:	4603      	mov	r3, r0
 800553a:	2b01      	cmp	r3, #1
 800553c:	d007      	beq.n	800554e <checkDemoModCalisma+0x78e>
 800553e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005542:	4857      	ldr	r0, [pc, #348]	@ (80056a0 <checkDemoModCalisma+0x8e0>)
 8005544:	f004 f89a 	bl	800967c <HAL_GPIO_ReadPin>
 8005548:	4603      	mov	r3, r0
 800554a:	2b01      	cmp	r3, #1
 800554c:	d115      	bne.n	800557a <checkDemoModCalisma+0x7ba>
 800554e:	4b57      	ldr	r3, [pc, #348]	@ (80056ac <checkDemoModCalisma+0x8ec>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d011      	beq.n	800557a <checkDemoModCalisma+0x7ba>
 8005556:	4b56      	ldr	r3, [pc, #344]	@ (80056b0 <checkDemoModCalisma+0x8f0>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00d      	beq.n	800557a <checkDemoModCalisma+0x7ba>
 800555e:	4b55      	ldr	r3, [pc, #340]	@ (80056b4 <checkDemoModCalisma+0x8f4>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	f083 0301 	eor.w	r3, r3, #1
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d006      	beq.n	800557a <checkDemoModCalisma+0x7ba>
					timer2=millis;
 800556c:	4b52      	ldr	r3, [pc, #328]	@ (80056b8 <checkDemoModCalisma+0x8f8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a52      	ldr	r2, [pc, #328]	@ (80056bc <checkDemoModCalisma+0x8fc>)
 8005572:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8005574:	4b4f      	ldr	r3, [pc, #316]	@ (80056b4 <checkDemoModCalisma+0x8f4>)
 8005576:	2201      	movs	r2, #1
 8005578:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800557a:	4b4f      	ldr	r3, [pc, #316]	@ (80056b8 <checkDemoModCalisma+0x8f8>)
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	4b4f      	ldr	r3, [pc, #316]	@ (80056bc <checkDemoModCalisma+0x8fc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	4a4e      	ldr	r2, [pc, #312]	@ (80056c0 <checkDemoModCalisma+0x900>)
 8005586:	7812      	ldrb	r2, [r2, #0]
 8005588:	4293      	cmp	r3, r2
 800558a:	d303      	bcc.n	8005594 <checkDemoModCalisma+0x7d4>
 800558c:	4b49      	ldr	r3, [pc, #292]	@ (80056b4 <checkDemoModCalisma+0x8f4>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10d      	bne.n	80055b0 <checkDemoModCalisma+0x7f0>
 8005594:	4b45      	ldr	r3, [pc, #276]	@ (80056ac <checkDemoModCalisma+0x8ec>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	f083 0301 	eor.w	r3, r3, #1
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <checkDemoModCalisma+0x7f0>
 80055a2:	4b43      	ldr	r3, [pc, #268]	@ (80056b0 <checkDemoModCalisma+0x8f0>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	f083 0301 	eor.w	r3, r3, #1
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <checkDemoModCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80055b0:	2200      	movs	r2, #0
 80055b2:	2120      	movs	r1, #32
 80055b4:	483a      	ldr	r0, [pc, #232]	@ (80056a0 <checkDemoModCalisma+0x8e0>)
 80055b6:	f004 f878 	bl	80096aa <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 80055ba:	4b3a      	ldr	r3, [pc, #232]	@ (80056a4 <checkDemoModCalisma+0x8e4>)
 80055bc:	2200      	movs	r2, #0
 80055be:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 80055c0:	4b3c      	ldr	r3, [pc, #240]	@ (80056b4 <checkDemoModCalisma+0x8f4>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 80055c6:	4b3f      	ldr	r3, [pc, #252]	@ (80056c4 <checkDemoModCalisma+0x904>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f040 8088 	bne.w	80056e0 <checkDemoModCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80055d0:	4b3d      	ldr	r3, [pc, #244]	@ (80056c8 <checkDemoModCalisma+0x908>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d003      	beq.n	80055e0 <checkDemoModCalisma+0x820>
 80055d8:	4b3b      	ldr	r3, [pc, #236]	@ (80056c8 <checkDemoModCalisma+0x908>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d17f      	bne.n	80056e0 <checkDemoModCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 80055e0:	4b32      	ldr	r3, [pc, #200]	@ (80056ac <checkDemoModCalisma+0x8ec>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d07b      	beq.n	80056e0 <checkDemoModCalisma+0x920>
 80055e8:	4b31      	ldr	r3, [pc, #196]	@ (80056b0 <checkDemoModCalisma+0x8f0>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d077      	beq.n	80056e0 <checkDemoModCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80055f0:	2140      	movs	r1, #64	@ 0x40
 80055f2:	482b      	ldr	r0, [pc, #172]	@ (80056a0 <checkDemoModCalisma+0x8e0>)
 80055f4:	f004 f842 	bl	800967c <HAL_GPIO_ReadPin>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d170      	bne.n	80056e0 <checkDemoModCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80055fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005602:	4827      	ldr	r0, [pc, #156]	@ (80056a0 <checkDemoModCalisma+0x8e0>)
 8005604:	f004 f83a 	bl	800967c <HAL_GPIO_ReadPin>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <checkDemoModCalisma+0x856>
 800560e:	4b2f      	ldr	r3, [pc, #188]	@ (80056cc <checkDemoModCalisma+0x90c>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d164      	bne.n	80056e0 <checkDemoModCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005616:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800561a:	4823      	ldr	r0, [pc, #140]	@ (80056a8 <checkDemoModCalisma+0x8e8>)
 800561c:	f004 f82e 	bl	800967c <HAL_GPIO_ReadPin>
 8005620:	4603      	mov	r3, r0
 8005622:	2b01      	cmp	r3, #1
 8005624:	d10f      	bne.n	8005646 <checkDemoModCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005626:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800562a:	481f      	ldr	r0, [pc, #124]	@ (80056a8 <checkDemoModCalisma+0x8e8>)
 800562c:	f004 f826 	bl	800967c <HAL_GPIO_ReadPin>
 8005630:	4603      	mov	r3, r0
 8005632:	2b01      	cmp	r3, #1
 8005634:	d107      	bne.n	8005646 <checkDemoModCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005636:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800563a:	481b      	ldr	r0, [pc, #108]	@ (80056a8 <checkDemoModCalisma+0x8e8>)
 800563c:	f004 f81e 	bl	800967c <HAL_GPIO_ReadPin>
 8005640:	4603      	mov	r3, r0
 8005642:	2b01      	cmp	r3, #1
 8005644:	d003      	beq.n	800564e <checkDemoModCalisma+0x88e>
 8005646:	4b22      	ldr	r3, [pc, #136]	@ (80056d0 <checkDemoModCalisma+0x910>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d048      	beq.n	80056e0 <checkDemoModCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 800564e:	4b21      	ldr	r3, [pc, #132]	@ (80056d4 <checkDemoModCalisma+0x914>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	f083 0301 	eor.w	r3, r3, #1
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d041      	beq.n	80056e0 <checkDemoModCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 800565c:	4b1e      	ldr	r3, [pc, #120]	@ (80056d8 <checkDemoModCalisma+0x918>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	f083 0301 	eor.w	r3, r3, #1
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d03a      	beq.n	80056e0 <checkDemoModCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 800566a:	4b1c      	ldr	r3, [pc, #112]	@ (80056dc <checkDemoModCalisma+0x91c>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	f083 0301 	eor.w	r3, r3, #1
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d033      	beq.n	80056e0 <checkDemoModCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8005678:	4b0a      	ldr	r3, [pc, #40]	@ (80056a4 <checkDemoModCalisma+0x8e4>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	f083 0301 	eor.w	r3, r3, #1
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d02c      	beq.n	80056e0 <checkDemoModCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8005686:	4b05      	ldr	r3, [pc, #20]	@ (800569c <checkDemoModCalisma+0x8dc>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	f083 0301 	eor.w	r3, r3, #1
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d025      	beq.n	80056e0 <checkDemoModCalisma+0x920>

					devmotorasagicalisiyor=1;
 8005694:	4b0e      	ldr	r3, [pc, #56]	@ (80056d0 <checkDemoModCalisma+0x910>)
 8005696:	2201      	movs	r2, #1
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	e024      	b.n	80056e6 <checkDemoModCalisma+0x926>
 800569c:	20000dd6 	.word	0x20000dd6
 80056a0:	40011000 	.word	0x40011000
 80056a4:	20000dda 	.word	0x20000dda
 80056a8:	40010c00 	.word	0x40010c00
 80056ac:	20000df1 	.word	0x20000df1
 80056b0:	20000df2 	.word	0x20000df2
 80056b4:	20000dd2 	.word	0x20000dd2
 80056b8:	20000d78 	.word	0x20000d78
 80056bc:	20000d84 	.word	0x20000d84
 80056c0:	20000db6 	.word	0x20000db6
 80056c4:	20000dbd 	.word	0x20000dbd
 80056c8:	20000daf 	.word	0x20000daf
 80056cc:	20000db1 	.word	0x20000db1
 80056d0:	20000dd7 	.word	0x20000dd7
 80056d4:	20000dd5 	.word	0x20000dd5
 80056d8:	20000dd9 	.word	0x20000dd9
 80056dc:	20000dd8 	.word	0x20000dd8
				} else {
					devmotorasagicalisiyor=0;
 80056e0:	4b96      	ldr	r3, [pc, #600]	@ (800593c <checkDemoModCalisma+0xb7c>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 80056e6:	4b95      	ldr	r3, [pc, #596]	@ (800593c <checkDemoModCalisma+0xb7c>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d007      	beq.n	80056fe <checkDemoModCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80056ee:	2201      	movs	r2, #1
 80056f0:	2110      	movs	r1, #16
 80056f2:	4893      	ldr	r0, [pc, #588]	@ (8005940 <checkDemoModCalisma+0xb80>)
 80056f4:	f003 ffd9 	bl	80096aa <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 80056f8:	4b92      	ldr	r3, [pc, #584]	@ (8005944 <checkDemoModCalisma+0xb84>)
 80056fa:	2201      	movs	r2, #1
 80056fc:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80056fe:	4b91      	ldr	r3, [pc, #580]	@ (8005944 <checkDemoModCalisma+0xb84>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d024      	beq.n	8005750 <checkDemoModCalisma+0x990>
 8005706:	2140      	movs	r1, #64	@ 0x40
 8005708:	488d      	ldr	r0, [pc, #564]	@ (8005940 <checkDemoModCalisma+0xb80>)
 800570a:	f003 ffb7 	bl	800967c <HAL_GPIO_ReadPin>
 800570e:	4603      	mov	r3, r0
 8005710:	2b01      	cmp	r3, #1
 8005712:	d007      	beq.n	8005724 <checkDemoModCalisma+0x964>
 8005714:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005718:	4889      	ldr	r0, [pc, #548]	@ (8005940 <checkDemoModCalisma+0xb80>)
 800571a:	f003 ffaf 	bl	800967c <HAL_GPIO_ReadPin>
 800571e:	4603      	mov	r3, r0
 8005720:	2b01      	cmp	r3, #1
 8005722:	d115      	bne.n	8005750 <checkDemoModCalisma+0x990>
 8005724:	4b88      	ldr	r3, [pc, #544]	@ (8005948 <checkDemoModCalisma+0xb88>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d011      	beq.n	8005750 <checkDemoModCalisma+0x990>
 800572c:	4b87      	ldr	r3, [pc, #540]	@ (800594c <checkDemoModCalisma+0xb8c>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00d      	beq.n	8005750 <checkDemoModCalisma+0x990>
 8005734:	4b86      	ldr	r3, [pc, #536]	@ (8005950 <checkDemoModCalisma+0xb90>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	f083 0301 	eor.w	r3, r3, #1
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d006      	beq.n	8005750 <checkDemoModCalisma+0x990>
					timer2=millis;
 8005742:	4b84      	ldr	r3, [pc, #528]	@ (8005954 <checkDemoModCalisma+0xb94>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a84      	ldr	r2, [pc, #528]	@ (8005958 <checkDemoModCalisma+0xb98>)
 8005748:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 800574a:	4b81      	ldr	r3, [pc, #516]	@ (8005950 <checkDemoModCalisma+0xb90>)
 800574c:	2201      	movs	r2, #1
 800574e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005750:	4b80      	ldr	r3, [pc, #512]	@ (8005954 <checkDemoModCalisma+0xb94>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	4b80      	ldr	r3, [pc, #512]	@ (8005958 <checkDemoModCalisma+0xb98>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	4a80      	ldr	r2, [pc, #512]	@ (800595c <checkDemoModCalisma+0xb9c>)
 800575c:	7812      	ldrb	r2, [r2, #0]
 800575e:	4293      	cmp	r3, r2
 8005760:	d303      	bcc.n	800576a <checkDemoModCalisma+0x9aa>
 8005762:	4b7b      	ldr	r3, [pc, #492]	@ (8005950 <checkDemoModCalisma+0xb90>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10d      	bne.n	8005786 <checkDemoModCalisma+0x9c6>
 800576a:	4b77      	ldr	r3, [pc, #476]	@ (8005948 <checkDemoModCalisma+0xb88>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f083 0301 	eor.w	r3, r3, #1
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d106      	bne.n	8005786 <checkDemoModCalisma+0x9c6>
 8005778:	4b74      	ldr	r3, [pc, #464]	@ (800594c <checkDemoModCalisma+0xb8c>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	f083 0301 	eor.w	r3, r3, #1
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <checkDemoModCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005786:	2200      	movs	r2, #0
 8005788:	2110      	movs	r1, #16
 800578a:	486d      	ldr	r0, [pc, #436]	@ (8005940 <checkDemoModCalisma+0xb80>)
 800578c:	f003 ff8d 	bl	80096aa <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8005790:	4b6c      	ldr	r3, [pc, #432]	@ (8005944 <checkDemoModCalisma+0xb84>)
 8005792:	2200      	movs	r2, #0
 8005794:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8005796:	4b6e      	ldr	r3, [pc, #440]	@ (8005950 <checkDemoModCalisma+0xb90>)
 8005798:	2200      	movs	r2, #0
 800579a:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 800579c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057a0:	486f      	ldr	r0, [pc, #444]	@ (8005960 <checkDemoModCalisma+0xba0>)
 80057a2:	f003 ff6b 	bl	800967c <HAL_GPIO_ReadPin>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d120      	bne.n	80057ee <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80057ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057b0:	486b      	ldr	r0, [pc, #428]	@ (8005960 <checkDemoModCalisma+0xba0>)
 80057b2:	f003 ff63 	bl	800967c <HAL_GPIO_ReadPin>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d118      	bne.n	80057ee <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80057bc:	2104      	movs	r1, #4
 80057be:	4868      	ldr	r0, [pc, #416]	@ (8005960 <checkDemoModCalisma+0xba0>)
 80057c0:	f003 ff5c 	bl	800967c <HAL_GPIO_ReadPin>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d111      	bne.n	80057ee <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80057ca:	2102      	movs	r1, #2
 80057cc:	4864      	ldr	r0, [pc, #400]	@ (8005960 <checkDemoModCalisma+0xba0>)
 80057ce:	f003 ff55 	bl	800967c <HAL_GPIO_ReadPin>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80057d8:	2101      	movs	r1, #1
 80057da:	4861      	ldr	r0, [pc, #388]	@ (8005960 <checkDemoModCalisma+0xba0>)
 80057dc:	f003 ff4e 	bl	800967c <HAL_GPIO_ReadPin>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d103      	bne.n	80057ee <checkDemoModCalisma+0xa2e>
					makineStop=1;
 80057e6:	4b5f      	ldr	r3, [pc, #380]	@ (8005964 <checkDemoModCalisma+0xba4>)
 80057e8:	2201      	movs	r2, #1
 80057ea:	701a      	strb	r2, [r3, #0]
 80057ec:	e002      	b.n	80057f4 <checkDemoModCalisma+0xa34>
				} else {
					makineStop=0;
 80057ee:	4b5d      	ldr	r3, [pc, #372]	@ (8005964 <checkDemoModCalisma+0xba4>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057f4:	4b5c      	ldr	r3, [pc, #368]	@ (8005968 <checkDemoModCalisma+0xba8>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d144      	bne.n	8005886 <checkDemoModCalisma+0xac6>
 80057fc:	4b5b      	ldr	r3, [pc, #364]	@ (800596c <checkDemoModCalisma+0xbac>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d003      	beq.n	800580c <checkDemoModCalisma+0xa4c>
 8005804:	4b59      	ldr	r3, [pc, #356]	@ (800596c <checkDemoModCalisma+0xbac>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b03      	cmp	r3, #3
 800580a:	d13c      	bne.n	8005886 <checkDemoModCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800580c:	2180      	movs	r1, #128	@ 0x80
 800580e:	484c      	ldr	r0, [pc, #304]	@ (8005940 <checkDemoModCalisma+0xb80>)
 8005810:	f003 ff34 	bl	800967c <HAL_GPIO_ReadPin>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d103      	bne.n	8005822 <checkDemoModCalisma+0xa62>
 800581a:	4b55      	ldr	r3, [pc, #340]	@ (8005970 <checkDemoModCalisma+0xbb0>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <checkDemoModCalisma+0xa7a>
 8005822:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005826:	484e      	ldr	r0, [pc, #312]	@ (8005960 <checkDemoModCalisma+0xba0>)
 8005828:	f003 ff28 	bl	800967c <HAL_GPIO_ReadPin>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d129      	bne.n	8005886 <checkDemoModCalisma+0xac6>
 8005832:	4b4f      	ldr	r3, [pc, #316]	@ (8005970 <checkDemoModCalisma+0xbb0>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d125      	bne.n	8005886 <checkDemoModCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800583a:	2104      	movs	r1, #4
 800583c:	4840      	ldr	r0, [pc, #256]	@ (8005940 <checkDemoModCalisma+0xb80>)
 800583e:	f003 ff1d 	bl	800967c <HAL_GPIO_ReadPin>
 8005842:	4603      	mov	r3, r0
 8005844:	2b01      	cmp	r3, #1
 8005846:	d003      	beq.n	8005850 <checkDemoModCalisma+0xa90>
 8005848:	4b4a      	ldr	r3, [pc, #296]	@ (8005974 <checkDemoModCalisma+0xbb4>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d11a      	bne.n	8005886 <checkDemoModCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005850:	2102      	movs	r1, #2
 8005852:	483b      	ldr	r0, [pc, #236]	@ (8005940 <checkDemoModCalisma+0xb80>)
 8005854:	f003 ff12 	bl	800967c <HAL_GPIO_ReadPin>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d113      	bne.n	8005886 <checkDemoModCalisma+0xac6>
						&&(butonKontrol==0)
 800585e:	4b46      	ldr	r3, [pc, #280]	@ (8005978 <checkDemoModCalisma+0xbb8>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	f083 0301 	eor.w	r3, r3, #1
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00c      	beq.n	8005886 <checkDemoModCalisma+0xac6>
						&&(makineStop==1)) {
 800586c:	4b3d      	ldr	r3, [pc, #244]	@ (8005964 <checkDemoModCalisma+0xba4>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d008      	beq.n	8005886 <checkDemoModCalisma+0xac6>

					kapi1prudhome=1;
 8005874:	4b41      	ldr	r3, [pc, #260]	@ (800597c <checkDemoModCalisma+0xbbc>)
 8005876:	2201      	movs	r2, #1
 8005878:	701a      	strb	r2, [r3, #0]
					timer = millis;
 800587a:	4b36      	ldr	r3, [pc, #216]	@ (8005954 <checkDemoModCalisma+0xb94>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a40      	ldr	r2, [pc, #256]	@ (8005980 <checkDemoModCalisma+0xbc0>)
 8005880:	6013      	str	r3, [r2, #0]
					bekle();
 8005882:	f7fd fd37 	bl	80032f4 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005886:	4b33      	ldr	r3, [pc, #204]	@ (8005954 <checkDemoModCalisma+0xb94>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	4b3d      	ldr	r3, [pc, #244]	@ (8005980 <checkDemoModCalisma+0xbc0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	4a3c      	ldr	r2, [pc, #240]	@ (8005984 <checkDemoModCalisma+0xbc4>)
 8005892:	7812      	ldrb	r2, [r2, #0]
 8005894:	4293      	cmp	r3, r2
 8005896:	d211      	bcs.n	80058bc <checkDemoModCalisma+0xafc>
 8005898:	2104      	movs	r1, #4
 800589a:	4829      	ldr	r0, [pc, #164]	@ (8005940 <checkDemoModCalisma+0xb80>)
 800589c:	f003 feee 	bl	800967c <HAL_GPIO_ReadPin>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <checkDemoModCalisma+0xafc>
 80058a6:	4b33      	ldr	r3, [pc, #204]	@ (8005974 <checkDemoModCalisma+0xbb4>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d006      	beq.n	80058bc <checkDemoModCalisma+0xafc>
 80058ae:	4b2d      	ldr	r3, [pc, #180]	@ (8005964 <checkDemoModCalisma+0xba4>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	f083 0301 	eor.w	r3, r3, #1
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <checkDemoModCalisma+0xb02>
					kapi1prudhome=0;
 80058bc:	4b2f      	ldr	r3, [pc, #188]	@ (800597c <checkDemoModCalisma+0xbbc>)
 80058be:	2200      	movs	r2, #0
 80058c0:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058c2:	4b29      	ldr	r3, [pc, #164]	@ (8005968 <checkDemoModCalisma+0xba8>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d160      	bne.n	800598c <checkDemoModCalisma+0xbcc>
 80058ca:	4b28      	ldr	r3, [pc, #160]	@ (800596c <checkDemoModCalisma+0xbac>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d003      	beq.n	80058da <checkDemoModCalisma+0xb1a>
 80058d2:	4b26      	ldr	r3, [pc, #152]	@ (800596c <checkDemoModCalisma+0xbac>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d158      	bne.n	800598c <checkDemoModCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80058da:	2104      	movs	r1, #4
 80058dc:	4818      	ldr	r0, [pc, #96]	@ (8005940 <checkDemoModCalisma+0xb80>)
 80058de:	f003 fecd 	bl	800967c <HAL_GPIO_ReadPin>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d003      	beq.n	80058f0 <checkDemoModCalisma+0xb30>
 80058e8:	4b22      	ldr	r3, [pc, #136]	@ (8005974 <checkDemoModCalisma+0xbb4>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d14d      	bne.n	800598c <checkDemoModCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058f0:	2102      	movs	r1, #2
 80058f2:	4813      	ldr	r0, [pc, #76]	@ (8005940 <checkDemoModCalisma+0xb80>)
 80058f4:	f003 fec2 	bl	800967c <HAL_GPIO_ReadPin>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d146      	bne.n	800598c <checkDemoModCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80058fe:	2180      	movs	r1, #128	@ 0x80
 8005900:	480f      	ldr	r0, [pc, #60]	@ (8005940 <checkDemoModCalisma+0xb80>)
 8005902:	f003 febb 	bl	800967c <HAL_GPIO_ReadPin>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d103      	bne.n	8005914 <checkDemoModCalisma+0xb54>
 800590c:	4b18      	ldr	r3, [pc, #96]	@ (8005970 <checkDemoModCalisma+0xbb0>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00b      	beq.n	800592c <checkDemoModCalisma+0xb6c>
 8005914:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005918:	4811      	ldr	r0, [pc, #68]	@ (8005960 <checkDemoModCalisma+0xba0>)
 800591a:	f003 feaf 	bl	800967c <HAL_GPIO_ReadPin>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d133      	bne.n	800598c <checkDemoModCalisma+0xbcc>
 8005924:	4b12      	ldr	r3, [pc, #72]	@ (8005970 <checkDemoModCalisma+0xbb0>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d12f      	bne.n	800598c <checkDemoModCalisma+0xbcc>
						&&(makineStop==1)) {
 800592c:	4b0d      	ldr	r3, [pc, #52]	@ (8005964 <checkDemoModCalisma+0xba4>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d02b      	beq.n	800598c <checkDemoModCalisma+0xbcc>

					kapi1butonkontrol=1;
 8005934:	4b14      	ldr	r3, [pc, #80]	@ (8005988 <checkDemoModCalisma+0xbc8>)
 8005936:	2201      	movs	r2, #1
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	e02a      	b.n	8005992 <checkDemoModCalisma+0xbd2>
 800593c:	20000dd7 	.word	0x20000dd7
 8005940:	40011000 	.word	0x40011000
 8005944:	20000ddb 	.word	0x20000ddb
 8005948:	20000df1 	.word	0x20000df1
 800594c:	20000df2 	.word	0x20000df2
 8005950:	20000dd3 	.word	0x20000dd3
 8005954:	20000d78 	.word	0x20000d78
 8005958:	20000d84 	.word	0x20000d84
 800595c:	20000db6 	.word	0x20000db6
 8005960:	40010c00 	.word	0x40010c00
 8005964:	20000de1 	.word	0x20000de1
 8005968:	20000da9 	.word	0x20000da9
 800596c:	20000da8 	.word	0x20000da8
 8005970:	20000dac 	.word	0x20000dac
 8005974:	20000da6 	.word	0x20000da6
 8005978:	20000dcf 	.word	0x20000dcf
 800597c:	20000de2 	.word	0x20000de2
 8005980:	20000d7c 	.word	0x20000d7c
 8005984:	20000db9 	.word	0x20000db9
 8005988:	20000de3 	.word	0x20000de3
				} else {
					kapi1butonkontrol=0;
 800598c:	4b8b      	ldr	r3, [pc, #556]	@ (8005bbc <checkDemoModCalisma+0xdfc>)
 800598e:	2200      	movs	r2, #0
 8005990:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005992:	4b8b      	ldr	r3, [pc, #556]	@ (8005bc0 <checkDemoModCalisma+0xe00>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b02      	cmp	r3, #2
 8005998:	d121      	bne.n	80059de <checkDemoModCalisma+0xc1e>
 800599a:	4b8a      	ldr	r3, [pc, #552]	@ (8005bc4 <checkDemoModCalisma+0xe04>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d003      	beq.n	80059aa <checkDemoModCalisma+0xbea>
 80059a2:	4b88      	ldr	r3, [pc, #544]	@ (8005bc4 <checkDemoModCalisma+0xe04>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d119      	bne.n	80059de <checkDemoModCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80059aa:	2104      	movs	r1, #4
 80059ac:	4886      	ldr	r0, [pc, #536]	@ (8005bc8 <checkDemoModCalisma+0xe08>)
 80059ae:	f003 fe65 	bl	800967c <HAL_GPIO_ReadPin>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d003      	beq.n	80059c0 <checkDemoModCalisma+0xc00>
 80059b8:	4b84      	ldr	r3, [pc, #528]	@ (8005bcc <checkDemoModCalisma+0xe0c>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10e      	bne.n	80059de <checkDemoModCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80059c0:	2102      	movs	r1, #2
 80059c2:	4881      	ldr	r0, [pc, #516]	@ (8005bc8 <checkDemoModCalisma+0xe08>)
 80059c4:	f003 fe5a 	bl	800967c <HAL_GPIO_ReadPin>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d107      	bne.n	80059de <checkDemoModCalisma+0xc1e>
						&&(makineStop==1)) {
 80059ce:	4b80      	ldr	r3, [pc, #512]	@ (8005bd0 <checkDemoModCalisma+0xe10>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <checkDemoModCalisma+0xc1e>

					kapi1pizzato=1;
 80059d6:	4b7f      	ldr	r3, [pc, #508]	@ (8005bd4 <checkDemoModCalisma+0xe14>)
 80059d8:	2201      	movs	r2, #1
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	e002      	b.n	80059e4 <checkDemoModCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 80059de:	4b7d      	ldr	r3, [pc, #500]	@ (8005bd4 <checkDemoModCalisma+0xe14>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80059e4:	4b75      	ldr	r3, [pc, #468]	@ (8005bbc <checkDemoModCalisma+0xdfc>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d107      	bne.n	80059fc <checkDemoModCalisma+0xc3c>
 80059ec:	4b79      	ldr	r3, [pc, #484]	@ (8005bd4 <checkDemoModCalisma+0xe14>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d103      	bne.n	80059fc <checkDemoModCalisma+0xc3c>
 80059f4:	4b78      	ldr	r3, [pc, #480]	@ (8005bd8 <checkDemoModCalisma+0xe18>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d005      	beq.n	8005a08 <checkDemoModCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80059fc:	2201      	movs	r2, #1
 80059fe:	2180      	movs	r1, #128	@ 0x80
 8005a00:	4876      	ldr	r0, [pc, #472]	@ (8005bdc <checkDemoModCalisma+0xe1c>)
 8005a02:	f003 fe52 	bl	80096aa <HAL_GPIO_WritePin>
 8005a06:	e004      	b.n	8005a12 <checkDemoModCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2180      	movs	r1, #128	@ 0x80
 8005a0c:	4873      	ldr	r0, [pc, #460]	@ (8005bdc <checkDemoModCalisma+0xe1c>)
 8005a0e:	f003 fe4c 	bl	80096aa <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a12:	4b73      	ldr	r3, [pc, #460]	@ (8005be0 <checkDemoModCalisma+0xe20>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d141      	bne.n	8005a9e <checkDemoModCalisma+0xcde>
 8005a1a:	4b6a      	ldr	r3, [pc, #424]	@ (8005bc4 <checkDemoModCalisma+0xe04>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d003      	beq.n	8005a2a <checkDemoModCalisma+0xc6a>
 8005a22:	4b68      	ldr	r3, [pc, #416]	@ (8005bc4 <checkDemoModCalisma+0xe04>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d139      	bne.n	8005a9e <checkDemoModCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a2e:	4866      	ldr	r0, [pc, #408]	@ (8005bc8 <checkDemoModCalisma+0xe08>)
 8005a30:	f003 fe24 	bl	800967c <HAL_GPIO_ReadPin>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d103      	bne.n	8005a42 <checkDemoModCalisma+0xc82>
 8005a3a:	4b6a      	ldr	r3, [pc, #424]	@ (8005be4 <checkDemoModCalisma+0xe24>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00b      	beq.n	8005a5a <checkDemoModCalisma+0xc9a>
 8005a42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005a46:	4868      	ldr	r0, [pc, #416]	@ (8005be8 <checkDemoModCalisma+0xe28>)
 8005a48:	f003 fe18 	bl	800967c <HAL_GPIO_ReadPin>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d125      	bne.n	8005a9e <checkDemoModCalisma+0xcde>
 8005a52:	4b64      	ldr	r3, [pc, #400]	@ (8005be4 <checkDemoModCalisma+0xe24>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d121      	bne.n	8005a9e <checkDemoModCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a5a:	2102      	movs	r1, #2
 8005a5c:	485a      	ldr	r0, [pc, #360]	@ (8005bc8 <checkDemoModCalisma+0xe08>)
 8005a5e:	f003 fe0d 	bl	800967c <HAL_GPIO_ReadPin>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d11a      	bne.n	8005a9e <checkDemoModCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a68:	2104      	movs	r1, #4
 8005a6a:	4857      	ldr	r0, [pc, #348]	@ (8005bc8 <checkDemoModCalisma+0xe08>)
 8005a6c:	f003 fe06 	bl	800967c <HAL_GPIO_ReadPin>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d113      	bne.n	8005a9e <checkDemoModCalisma+0xcde>
						&&(makineStop==1)
 8005a76:	4b56      	ldr	r3, [pc, #344]	@ (8005bd0 <checkDemoModCalisma+0xe10>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00f      	beq.n	8005a9e <checkDemoModCalisma+0xcde>
						&&(butonKontrol==0)) {
 8005a7e:	4b5b      	ldr	r3, [pc, #364]	@ (8005bec <checkDemoModCalisma+0xe2c>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	f083 0301 	eor.w	r3, r3, #1
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d008      	beq.n	8005a9e <checkDemoModCalisma+0xcde>

					kapi2prudhome=1;
 8005a8c:	4b58      	ldr	r3, [pc, #352]	@ (8005bf0 <checkDemoModCalisma+0xe30>)
 8005a8e:	2201      	movs	r2, #1
 8005a90:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005a92:	4b58      	ldr	r3, [pc, #352]	@ (8005bf4 <checkDemoModCalisma+0xe34>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a58      	ldr	r2, [pc, #352]	@ (8005bf8 <checkDemoModCalisma+0xe38>)
 8005a98:	6013      	str	r3, [r2, #0]
					bekle();
 8005a9a:	f7fd fc2b 	bl	80032f4 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005a9e:	4b55      	ldr	r3, [pc, #340]	@ (8005bf4 <checkDemoModCalisma+0xe34>)
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4b55      	ldr	r3, [pc, #340]	@ (8005bf8 <checkDemoModCalisma+0xe38>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	4a54      	ldr	r2, [pc, #336]	@ (8005bfc <checkDemoModCalisma+0xe3c>)
 8005aaa:	7812      	ldrb	r2, [r2, #0]
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d20d      	bcs.n	8005acc <checkDemoModCalisma+0xd0c>
 8005ab0:	2102      	movs	r1, #2
 8005ab2:	4845      	ldr	r0, [pc, #276]	@ (8005bc8 <checkDemoModCalisma+0xe08>)
 8005ab4:	f003 fde2 	bl	800967c <HAL_GPIO_ReadPin>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d006      	beq.n	8005acc <checkDemoModCalisma+0xd0c>
 8005abe:	4b44      	ldr	r3, [pc, #272]	@ (8005bd0 <checkDemoModCalisma+0xe10>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	f083 0301 	eor.w	r3, r3, #1
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <checkDemoModCalisma+0xd12>
					kapi2prudhome=0;
 8005acc:	4b48      	ldr	r3, [pc, #288]	@ (8005bf0 <checkDemoModCalisma+0xe30>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005ad2:	4b43      	ldr	r3, [pc, #268]	@ (8005be0 <checkDemoModCalisma+0xe20>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d135      	bne.n	8005b46 <checkDemoModCalisma+0xd86>
 8005ada:	4b3a      	ldr	r3, [pc, #232]	@ (8005bc4 <checkDemoModCalisma+0xe04>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d003      	beq.n	8005aea <checkDemoModCalisma+0xd2a>
 8005ae2:	4b38      	ldr	r3, [pc, #224]	@ (8005bc4 <checkDemoModCalisma+0xe04>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d12d      	bne.n	8005b46 <checkDemoModCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005aea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005aee:	4836      	ldr	r0, [pc, #216]	@ (8005bc8 <checkDemoModCalisma+0xe08>)
 8005af0:	f003 fdc4 	bl	800967c <HAL_GPIO_ReadPin>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d103      	bne.n	8005b02 <checkDemoModCalisma+0xd42>
 8005afa:	4b3a      	ldr	r3, [pc, #232]	@ (8005be4 <checkDemoModCalisma+0xe24>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00b      	beq.n	8005b1a <checkDemoModCalisma+0xd5a>
 8005b02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005b06:	4838      	ldr	r0, [pc, #224]	@ (8005be8 <checkDemoModCalisma+0xe28>)
 8005b08:	f003 fdb8 	bl	800967c <HAL_GPIO_ReadPin>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d119      	bne.n	8005b46 <checkDemoModCalisma+0xd86>
 8005b12:	4b34      	ldr	r3, [pc, #208]	@ (8005be4 <checkDemoModCalisma+0xe24>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d115      	bne.n	8005b46 <checkDemoModCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b1a:	2102      	movs	r1, #2
 8005b1c:	482a      	ldr	r0, [pc, #168]	@ (8005bc8 <checkDemoModCalisma+0xe08>)
 8005b1e:	f003 fdad 	bl	800967c <HAL_GPIO_ReadPin>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d10e      	bne.n	8005b46 <checkDemoModCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b28:	2104      	movs	r1, #4
 8005b2a:	4827      	ldr	r0, [pc, #156]	@ (8005bc8 <checkDemoModCalisma+0xe08>)
 8005b2c:	f003 fda6 	bl	800967c <HAL_GPIO_ReadPin>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d107      	bne.n	8005b46 <checkDemoModCalisma+0xd86>
						&&(makineStop==1)) {
 8005b36:	4b26      	ldr	r3, [pc, #152]	@ (8005bd0 <checkDemoModCalisma+0xe10>)
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <checkDemoModCalisma+0xd86>

					kapi2butonkontrol=1;
 8005b3e:	4b30      	ldr	r3, [pc, #192]	@ (8005c00 <checkDemoModCalisma+0xe40>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	e002      	b.n	8005b4c <checkDemoModCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 8005b46:	4b2e      	ldr	r3, [pc, #184]	@ (8005c00 <checkDemoModCalisma+0xe40>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b4c:	4b24      	ldr	r3, [pc, #144]	@ (8005be0 <checkDemoModCalisma+0xe20>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d11d      	bne.n	8005b90 <checkDemoModCalisma+0xdd0>
 8005b54:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc4 <checkDemoModCalisma+0xe04>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d003      	beq.n	8005b64 <checkDemoModCalisma+0xda4>
 8005b5c:	4b19      	ldr	r3, [pc, #100]	@ (8005bc4 <checkDemoModCalisma+0xe04>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d115      	bne.n	8005b90 <checkDemoModCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b64:	2102      	movs	r1, #2
 8005b66:	4818      	ldr	r0, [pc, #96]	@ (8005bc8 <checkDemoModCalisma+0xe08>)
 8005b68:	f003 fd88 	bl	800967c <HAL_GPIO_ReadPin>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d10e      	bne.n	8005b90 <checkDemoModCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b72:	2104      	movs	r1, #4
 8005b74:	4814      	ldr	r0, [pc, #80]	@ (8005bc8 <checkDemoModCalisma+0xe08>)
 8005b76:	f003 fd81 	bl	800967c <HAL_GPIO_ReadPin>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d107      	bne.n	8005b90 <checkDemoModCalisma+0xdd0>
						&&(makineStop==1)) {
 8005b80:	4b13      	ldr	r3, [pc, #76]	@ (8005bd0 <checkDemoModCalisma+0xe10>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <checkDemoModCalisma+0xdd0>

					kapi2pizzato=1;
 8005b88:	4b1e      	ldr	r3, [pc, #120]	@ (8005c04 <checkDemoModCalisma+0xe44>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	e002      	b.n	8005b96 <checkDemoModCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8005b90:	4b1c      	ldr	r3, [pc, #112]	@ (8005c04 <checkDemoModCalisma+0xe44>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005b96:	4b1a      	ldr	r3, [pc, #104]	@ (8005c00 <checkDemoModCalisma+0xe40>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d107      	bne.n	8005bae <checkDemoModCalisma+0xdee>
 8005b9e:	4b19      	ldr	r3, [pc, #100]	@ (8005c04 <checkDemoModCalisma+0xe44>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d103      	bne.n	8005bae <checkDemoModCalisma+0xdee>
 8005ba6:	4b12      	ldr	r3, [pc, #72]	@ (8005bf0 <checkDemoModCalisma+0xe30>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d02c      	beq.n	8005c08 <checkDemoModCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005bae:	2201      	movs	r2, #1
 8005bb0:	2140      	movs	r1, #64	@ 0x40
 8005bb2:	480a      	ldr	r0, [pc, #40]	@ (8005bdc <checkDemoModCalisma+0xe1c>)
 8005bb4:	f003 fd79 	bl	80096aa <HAL_GPIO_WritePin>
 8005bb8:	e02b      	b.n	8005c12 <checkDemoModCalisma+0xe52>
 8005bba:	bf00      	nop
 8005bbc:	20000de3 	.word	0x20000de3
 8005bc0:	20000da9 	.word	0x20000da9
 8005bc4:	20000da8 	.word	0x20000da8
 8005bc8:	40011000 	.word	0x40011000
 8005bcc:	20000da6 	.word	0x20000da6
 8005bd0:	20000de1 	.word	0x20000de1
 8005bd4:	20000de4 	.word	0x20000de4
 8005bd8:	20000de2 	.word	0x20000de2
 8005bdc:	40010800 	.word	0x40010800
 8005be0:	20000daa 	.word	0x20000daa
 8005be4:	20000dac 	.word	0x20000dac
 8005be8:	40010c00 	.word	0x40010c00
 8005bec:	20000dcf 	.word	0x20000dcf
 8005bf0:	20000de5 	.word	0x20000de5
 8005bf4:	20000d78 	.word	0x20000d78
 8005bf8:	20000d7c 	.word	0x20000d7c
 8005bfc:	20000dba 	.word	0x20000dba
 8005c00:	20000de6 	.word	0x20000de6
 8005c04:	20000de7 	.word	0x20000de7
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2140      	movs	r1, #64	@ 0x40
 8005c0c:	4835      	ldr	r0, [pc, #212]	@ (8005ce4 <checkDemoModCalisma+0xf24>)
 8005c0e:	f003 fd4c 	bl	80096aa <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 8005c12:	4b35      	ldr	r3, [pc, #212]	@ (8005ce8 <checkDemoModCalisma+0xf28>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <checkDemoModCalisma+0xe62>
 8005c1a:	4b33      	ldr	r3, [pc, #204]	@ (8005ce8 <checkDemoModCalisma+0xf28>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d115      	bne.n	8005c4e <checkDemoModCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005c22:	2104      	movs	r1, #4
 8005c24:	4831      	ldr	r0, [pc, #196]	@ (8005cec <checkDemoModCalisma+0xf2c>)
 8005c26:	f003 fd29 	bl	800967c <HAL_GPIO_ReadPin>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d003      	beq.n	8005c38 <checkDemoModCalisma+0xe78>
 8005c30:	4b2f      	ldr	r3, [pc, #188]	@ (8005cf0 <checkDemoModCalisma+0xf30>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <checkDemoModCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005c38:	2102      	movs	r1, #2
 8005c3a:	482c      	ldr	r0, [pc, #176]	@ (8005cec <checkDemoModCalisma+0xf2c>)
 8005c3c:	f003 fd1e 	bl	800967c <HAL_GPIO_ReadPin>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d103      	bne.n	8005c4e <checkDemoModCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 8005c46:	4b2b      	ldr	r3, [pc, #172]	@ (8005cf4 <checkDemoModCalisma+0xf34>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	701a      	strb	r2, [r3, #0]
 8005c4c:	e002      	b.n	8005c54 <checkDemoModCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 8005c4e:	4b29      	ldr	r3, [pc, #164]	@ (8005cf4 <checkDemoModCalisma+0xf34>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005c54:	4b24      	ldr	r3, [pc, #144]	@ (8005ce8 <checkDemoModCalisma+0xf28>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d003      	beq.n	8005c64 <checkDemoModCalisma+0xea4>
 8005c5c:	4b22      	ldr	r3, [pc, #136]	@ (8005ce8 <checkDemoModCalisma+0xf28>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d111      	bne.n	8005c88 <checkDemoModCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c64:	2102      	movs	r1, #2
 8005c66:	4821      	ldr	r0, [pc, #132]	@ (8005cec <checkDemoModCalisma+0xf2c>)
 8005c68:	f003 fd08 	bl	800967c <HAL_GPIO_ReadPin>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d10a      	bne.n	8005c88 <checkDemoModCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005c72:	2104      	movs	r1, #4
 8005c74:	481d      	ldr	r0, [pc, #116]	@ (8005cec <checkDemoModCalisma+0xf2c>)
 8005c76:	f003 fd01 	bl	800967c <HAL_GPIO_ReadPin>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d103      	bne.n	8005c88 <checkDemoModCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8005c80:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf8 <checkDemoModCalisma+0xf38>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	e002      	b.n	8005c8e <checkDemoModCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8005c88:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf8 <checkDemoModCalisma+0xf38>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8005c8e:	4b19      	ldr	r3, [pc, #100]	@ (8005cf4 <checkDemoModCalisma+0xf34>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00f      	beq.n	8005cb6 <checkDemoModCalisma+0xef6>
						&& kapiAcTipi==1
 8005c96:	4b19      	ldr	r3, [pc, #100]	@ (8005cfc <checkDemoModCalisma+0xf3c>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d10b      	bne.n	8005cb6 <checkDemoModCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005c9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005ca2:	4817      	ldr	r0, [pc, #92]	@ (8005d00 <checkDemoModCalisma+0xf40>)
 8005ca4:	f003 fcea 	bl	800967c <HAL_GPIO_ReadPin>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d103      	bne.n	8005cb6 <checkDemoModCalisma+0xef6>

					kapiactablaesp1=1;
 8005cae:	4b15      	ldr	r3, [pc, #84]	@ (8005d04 <checkDemoModCalisma+0xf44>)
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	701a      	strb	r2, [r3, #0]
 8005cb4:	e002      	b.n	8005cbc <checkDemoModCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8005cb6:	4b13      	ldr	r3, [pc, #76]	@ (8005d04 <checkDemoModCalisma+0xf44>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8005cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8005cf8 <checkDemoModCalisma+0xf38>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d023      	beq.n	8005d0c <checkDemoModCalisma+0xf4c>
						&& kapiAcTipi==1
 8005cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8005cfc <checkDemoModCalisma+0xf3c>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d11f      	bne.n	8005d0c <checkDemoModCalisma+0xf4c>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005ccc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005cd0:	480b      	ldr	r0, [pc, #44]	@ (8005d00 <checkDemoModCalisma+0xf40>)
 8005cd2:	f003 fcd3 	bl	800967c <HAL_GPIO_ReadPin>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d117      	bne.n	8005d0c <checkDemoModCalisma+0xf4c>

					kapiactablaesp2=1;
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005d08 <checkDemoModCalisma+0xf48>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	701a      	strb	r2, [r3, #0]
 8005ce2:	e016      	b.n	8005d12 <checkDemoModCalisma+0xf52>
 8005ce4:	40010800 	.word	0x40010800
 8005ce8:	20000dad 	.word	0x20000dad
 8005cec:	40011000 	.word	0x40011000
 8005cf0:	20000da6 	.word	0x20000da6
 8005cf4:	20000deb 	.word	0x20000deb
 8005cf8:	20000dec 	.word	0x20000dec
 8005cfc:	20000dac 	.word	0x20000dac
 8005d00:	40010c00 	.word	0x40010c00
 8005d04:	20000dfb 	.word	0x20000dfb
 8005d08:	20000dfc 	.word	0x20000dfc
				} else {
					kapiactablaesp2=0;
 8005d0c:	4b7e      	ldr	r3, [pc, #504]	@ (8005f08 <checkDemoModCalisma+0x1148>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d12:	4b7e      	ldr	r3, [pc, #504]	@ (8005f0c <checkDemoModCalisma+0x114c>)
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d154      	bne.n	8005dc4 <checkDemoModCalisma+0x1004>
 8005d1a:	4b7d      	ldr	r3, [pc, #500]	@ (8005f10 <checkDemoModCalisma+0x1150>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d003      	beq.n	8005d2a <checkDemoModCalisma+0xf6a>
 8005d22:	4b7b      	ldr	r3, [pc, #492]	@ (8005f10 <checkDemoModCalisma+0x1150>)
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d14c      	bne.n	8005dc4 <checkDemoModCalisma+0x1004>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d2a:	4b7a      	ldr	r3, [pc, #488]	@ (8005f14 <checkDemoModCalisma+0x1154>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d103      	bne.n	8005d3a <checkDemoModCalisma+0xf7a>
 8005d32:	4b79      	ldr	r3, [pc, #484]	@ (8005f18 <checkDemoModCalisma+0x1158>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d044      	beq.n	8005dc4 <checkDemoModCalisma+0x1004>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8005d3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005d3e:	4877      	ldr	r0, [pc, #476]	@ (8005f1c <checkDemoModCalisma+0x115c>)
 8005d40:	f003 fc9c 	bl	800967c <HAL_GPIO_ReadPin>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d01c      	beq.n	8005d84 <checkDemoModCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8005d4a:	2180      	movs	r1, #128	@ 0x80
 8005d4c:	4873      	ldr	r0, [pc, #460]	@ (8005f1c <checkDemoModCalisma+0x115c>)
 8005d4e:	f003 fc95 	bl	800967c <HAL_GPIO_ReadPin>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d106      	bne.n	8005d66 <checkDemoModCalisma+0xfa6>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005d58:	2104      	movs	r1, #4
 8005d5a:	4870      	ldr	r0, [pc, #448]	@ (8005f1c <checkDemoModCalisma+0x115c>)
 8005d5c:	f003 fc8e 	bl	800967c <HAL_GPIO_ReadPin>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d00e      	beq.n	8005d84 <checkDemoModCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005d66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d6a:	486c      	ldr	r0, [pc, #432]	@ (8005f1c <checkDemoModCalisma+0x115c>)
 8005d6c:	f003 fc86 	bl	800967c <HAL_GPIO_ReadPin>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10a      	bne.n	8005d8c <checkDemoModCalisma+0xfcc>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005d76:	2102      	movs	r1, #2
 8005d78:	4868      	ldr	r0, [pc, #416]	@ (8005f1c <checkDemoModCalisma+0x115c>)
 8005d7a:	f003 fc7f 	bl	800967c <HAL_GPIO_ReadPin>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d103      	bne.n	8005d8c <checkDemoModCalisma+0xfcc>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005d84:	4b66      	ldr	r3, [pc, #408]	@ (8005f20 <checkDemoModCalisma+0x1160>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d007      	beq.n	8005d9c <checkDemoModCalisma+0xfdc>
 8005d8c:	4b65      	ldr	r3, [pc, #404]	@ (8005f24 <checkDemoModCalisma+0x1164>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d103      	bne.n	8005d9c <checkDemoModCalisma+0xfdc>
 8005d94:	4b5c      	ldr	r3, [pc, #368]	@ (8005f08 <checkDemoModCalisma+0x1148>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d013      	beq.n	8005dc4 <checkDemoModCalisma+0x1004>
						&&(makineStop==1)
 8005d9c:	4b62      	ldr	r3, [pc, #392]	@ (8005f28 <checkDemoModCalisma+0x1168>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00f      	beq.n	8005dc4 <checkDemoModCalisma+0x1004>
						&&(butonKontrol==0)) {
 8005da4:	4b61      	ldr	r3, [pc, #388]	@ (8005f2c <checkDemoModCalisma+0x116c>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	f083 0301 	eor.w	r3, r3, #1
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d008      	beq.n	8005dc4 <checkDemoModCalisma+0x1004>

					kapiTablaprudhome=1;
 8005db2:	4b5f      	ldr	r3, [pc, #380]	@ (8005f30 <checkDemoModCalisma+0x1170>)
 8005db4:	2201      	movs	r2, #1
 8005db6:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005db8:	4b5e      	ldr	r3, [pc, #376]	@ (8005f34 <checkDemoModCalisma+0x1174>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a5e      	ldr	r2, [pc, #376]	@ (8005f38 <checkDemoModCalisma+0x1178>)
 8005dbe:	6013      	str	r3, [r2, #0]
					bekle();
 8005dc0:	f7fd fa98 	bl	80032f4 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005dc4:	4b5b      	ldr	r3, [pc, #364]	@ (8005f34 <checkDemoModCalisma+0x1174>)
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	4b5b      	ldr	r3, [pc, #364]	@ (8005f38 <checkDemoModCalisma+0x1178>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	4a5b      	ldr	r2, [pc, #364]	@ (8005f3c <checkDemoModCalisma+0x117c>)
 8005dd0:	7812      	ldrb	r2, [r2, #0]
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d214      	bcs.n	8005e00 <checkDemoModCalisma+0x1040>
 8005dd6:	4b4f      	ldr	r3, [pc, #316]	@ (8005f14 <checkDemoModCalisma+0x1154>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	f083 0301 	eor.w	r3, r3, #1
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d006      	beq.n	8005df2 <checkDemoModCalisma+0x1032>
 8005de4:	4b4c      	ldr	r3, [pc, #304]	@ (8005f18 <checkDemoModCalisma+0x1158>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	f083 0301 	eor.w	r3, r3, #1
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <checkDemoModCalisma+0x1040>
 8005df2:	4b4d      	ldr	r3, [pc, #308]	@ (8005f28 <checkDemoModCalisma+0x1168>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	f083 0301 	eor.w	r3, r3, #1
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <checkDemoModCalisma+0x1046>
					kapiTablaprudhome=0;
 8005e00:	4b4b      	ldr	r3, [pc, #300]	@ (8005f30 <checkDemoModCalisma+0x1170>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005e06:	4b41      	ldr	r3, [pc, #260]	@ (8005f0c <checkDemoModCalisma+0x114c>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d148      	bne.n	8005ea0 <checkDemoModCalisma+0x10e0>
 8005e0e:	4b40      	ldr	r3, [pc, #256]	@ (8005f10 <checkDemoModCalisma+0x1150>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d003      	beq.n	8005e1e <checkDemoModCalisma+0x105e>
 8005e16:	4b3e      	ldr	r3, [pc, #248]	@ (8005f10 <checkDemoModCalisma+0x1150>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d140      	bne.n	8005ea0 <checkDemoModCalisma+0x10e0>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8005f14 <checkDemoModCalisma+0x1154>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <checkDemoModCalisma+0x106e>
 8005e26:	4b3c      	ldr	r3, [pc, #240]	@ (8005f18 <checkDemoModCalisma+0x1158>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d038      	beq.n	8005ea0 <checkDemoModCalisma+0x10e0>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8005e2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005e32:	483a      	ldr	r0, [pc, #232]	@ (8005f1c <checkDemoModCalisma+0x115c>)
 8005e34:	f003 fc22 	bl	800967c <HAL_GPIO_ReadPin>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d01c      	beq.n	8005e78 <checkDemoModCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8005e3e:	2180      	movs	r1, #128	@ 0x80
 8005e40:	4836      	ldr	r0, [pc, #216]	@ (8005f1c <checkDemoModCalisma+0x115c>)
 8005e42:	f003 fc1b 	bl	800967c <HAL_GPIO_ReadPin>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d106      	bne.n	8005e5a <checkDemoModCalisma+0x109a>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005e4c:	2104      	movs	r1, #4
 8005e4e:	4833      	ldr	r0, [pc, #204]	@ (8005f1c <checkDemoModCalisma+0x115c>)
 8005e50:	f003 fc14 	bl	800967c <HAL_GPIO_ReadPin>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d00e      	beq.n	8005e78 <checkDemoModCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005e5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005e5e:	482f      	ldr	r0, [pc, #188]	@ (8005f1c <checkDemoModCalisma+0x115c>)
 8005e60:	f003 fc0c 	bl	800967c <HAL_GPIO_ReadPin>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10a      	bne.n	8005e80 <checkDemoModCalisma+0x10c0>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005e6a:	2102      	movs	r1, #2
 8005e6c:	482b      	ldr	r0, [pc, #172]	@ (8005f1c <checkDemoModCalisma+0x115c>)
 8005e6e:	f003 fc05 	bl	800967c <HAL_GPIO_ReadPin>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d103      	bne.n	8005e80 <checkDemoModCalisma+0x10c0>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005e78:	4b29      	ldr	r3, [pc, #164]	@ (8005f20 <checkDemoModCalisma+0x1160>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d007      	beq.n	8005e90 <checkDemoModCalisma+0x10d0>
 8005e80:	4b28      	ldr	r3, [pc, #160]	@ (8005f24 <checkDemoModCalisma+0x1164>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d103      	bne.n	8005e90 <checkDemoModCalisma+0x10d0>
 8005e88:	4b1f      	ldr	r3, [pc, #124]	@ (8005f08 <checkDemoModCalisma+0x1148>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d007      	beq.n	8005ea0 <checkDemoModCalisma+0x10e0>
						&&(makineStop==1)) {
 8005e90:	4b25      	ldr	r3, [pc, #148]	@ (8005f28 <checkDemoModCalisma+0x1168>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <checkDemoModCalisma+0x10e0>

					kapiTablabutonkontrol=1;
 8005e98:	4b29      	ldr	r3, [pc, #164]	@ (8005f40 <checkDemoModCalisma+0x1180>)
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	e002      	b.n	8005ea6 <checkDemoModCalisma+0x10e6>
				} else {
					kapiTablabutonkontrol=0;
 8005ea0:	4b27      	ldr	r3, [pc, #156]	@ (8005f40 <checkDemoModCalisma+0x1180>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005ea6:	4b19      	ldr	r3, [pc, #100]	@ (8005f0c <checkDemoModCalisma+0x114c>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d117      	bne.n	8005ede <checkDemoModCalisma+0x111e>
 8005eae:	4b18      	ldr	r3, [pc, #96]	@ (8005f10 <checkDemoModCalisma+0x1150>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d003      	beq.n	8005ebe <checkDemoModCalisma+0x10fe>
 8005eb6:	4b16      	ldr	r3, [pc, #88]	@ (8005f10 <checkDemoModCalisma+0x1150>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d10f      	bne.n	8005ede <checkDemoModCalisma+0x111e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005ebe:	4b15      	ldr	r3, [pc, #84]	@ (8005f14 <checkDemoModCalisma+0x1154>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d103      	bne.n	8005ece <checkDemoModCalisma+0x110e>
 8005ec6:	4b14      	ldr	r3, [pc, #80]	@ (8005f18 <checkDemoModCalisma+0x1158>)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <checkDemoModCalisma+0x111e>
						&&(makineStop==1)) {
 8005ece:	4b16      	ldr	r3, [pc, #88]	@ (8005f28 <checkDemoModCalisma+0x1168>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <checkDemoModCalisma+0x111e>

					kapiTablapizzato=1;
 8005ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8005f44 <checkDemoModCalisma+0x1184>)
 8005ed8:	2201      	movs	r2, #1
 8005eda:	701a      	strb	r2, [r3, #0]
 8005edc:	e002      	b.n	8005ee4 <checkDemoModCalisma+0x1124>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8005ede:	4b19      	ldr	r3, [pc, #100]	@ (8005f44 <checkDemoModCalisma+0x1184>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005ee4:	4b16      	ldr	r3, [pc, #88]	@ (8005f40 <checkDemoModCalisma+0x1180>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d107      	bne.n	8005efc <checkDemoModCalisma+0x113c>
 8005eec:	4b10      	ldr	r3, [pc, #64]	@ (8005f30 <checkDemoModCalisma+0x1170>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d103      	bne.n	8005efc <checkDemoModCalisma+0x113c>
 8005ef4:	4b13      	ldr	r3, [pc, #76]	@ (8005f44 <checkDemoModCalisma+0x1184>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d027      	beq.n	8005f4c <checkDemoModCalisma+0x118c>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005efc:	2201      	movs	r2, #1
 8005efe:	2120      	movs	r1, #32
 8005f00:	4811      	ldr	r0, [pc, #68]	@ (8005f48 <checkDemoModCalisma+0x1188>)
 8005f02:	f003 fbd2 	bl	80096aa <HAL_GPIO_WritePin>
 8005f06:	e026      	b.n	8005f56 <checkDemoModCalisma+0x1196>
 8005f08:	20000dfc 	.word	0x20000dfc
 8005f0c:	20000dab 	.word	0x20000dab
 8005f10:	20000da8 	.word	0x20000da8
 8005f14:	20000deb 	.word	0x20000deb
 8005f18:	20000dec 	.word	0x20000dec
 8005f1c:	40011000 	.word	0x40011000
 8005f20:	20000dac 	.word	0x20000dac
 8005f24:	20000dfb 	.word	0x20000dfb
 8005f28:	20000de1 	.word	0x20000de1
 8005f2c:	20000dcf 	.word	0x20000dcf
 8005f30:	20000de8 	.word	0x20000de8
 8005f34:	20000d78 	.word	0x20000d78
 8005f38:	20000d7c 	.word	0x20000d7c
 8005f3c:	20000dbb 	.word	0x20000dbb
 8005f40:	20000de9 	.word	0x20000de9
 8005f44:	20000dea 	.word	0x20000dea
 8005f48:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2120      	movs	r1, #32
 8005f50:	4887      	ldr	r0, [pc, #540]	@ (8006170 <checkDemoModCalisma+0x13b0>)
 8005f52:	f003 fbaa 	bl	80096aa <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005f56:	4b87      	ldr	r3, [pc, #540]	@ (8006174 <checkDemoModCalisma+0x13b4>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00e      	beq.n	8005f7c <checkDemoModCalisma+0x11bc>
 8005f5e:	2102      	movs	r1, #2
 8005f60:	4885      	ldr	r0, [pc, #532]	@ (8006178 <checkDemoModCalisma+0x13b8>)
 8005f62:	f003 fb8b 	bl	800967c <HAL_GPIO_ReadPin>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d107      	bne.n	8005f7c <checkDemoModCalisma+0x11bc>
 8005f6c:	4b83      	ldr	r3, [pc, #524]	@ (800617c <checkDemoModCalisma+0x13bc>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d103      	bne.n	8005f7c <checkDemoModCalisma+0x11bc>
 8005f74:	4b82      	ldr	r3, [pc, #520]	@ (8006180 <checkDemoModCalisma+0x13c0>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d112      	bne.n	8005fa2 <checkDemoModCalisma+0x11e2>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005f7c:	4b81      	ldr	r3, [pc, #516]	@ (8006184 <checkDemoModCalisma+0x13c4>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d032      	beq.n	8005fea <checkDemoModCalisma+0x122a>
 8005f84:	2104      	movs	r1, #4
 8005f86:	487c      	ldr	r0, [pc, #496]	@ (8006178 <checkDemoModCalisma+0x13b8>)
 8005f88:	f003 fb78 	bl	800967c <HAL_GPIO_ReadPin>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d12b      	bne.n	8005fea <checkDemoModCalisma+0x122a>
 8005f92:	4b7a      	ldr	r3, [pc, #488]	@ (800617c <checkDemoModCalisma+0x13bc>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d027      	beq.n	8005fea <checkDemoModCalisma+0x122a>
 8005f9a:	4b79      	ldr	r3, [pc, #484]	@ (8006180 <checkDemoModCalisma+0x13c0>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d023      	beq.n	8005fea <checkDemoModCalisma+0x122a>


					calismaSayisi++;
 8005fa2:	4b79      	ldr	r3, [pc, #484]	@ (8006188 <checkDemoModCalisma+0x13c8>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	4b77      	ldr	r3, [pc, #476]	@ (8006188 <checkDemoModCalisma+0x13c8>)
 8005fac:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8005fae:	4b76      	ldr	r3, [pc, #472]	@ (8006188 <checkDemoModCalisma+0x13c8>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2bff      	cmp	r3, #255	@ 0xff
 8005fb4:	d108      	bne.n	8005fc8 <checkDemoModCalisma+0x1208>
						calismaSayisi = 0;
 8005fb6:	4b74      	ldr	r3, [pc, #464]	@ (8006188 <checkDemoModCalisma+0x13c8>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 8005fbc:	4b73      	ldr	r3, [pc, #460]	@ (800618c <checkDemoModCalisma+0x13cc>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	4b71      	ldr	r3, [pc, #452]	@ (800618c <checkDemoModCalisma+0x13cc>)
 8005fc6:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 8005fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8006188 <checkDemoModCalisma+0x13c8>)
 8005fca:	781a      	ldrb	r2, [r3, #0]
 8005fcc:	4b70      	ldr	r3, [pc, #448]	@ (8006190 <checkDemoModCalisma+0x13d0>)
 8005fce:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 8005fd0:	4b6e      	ldr	r3, [pc, #440]	@ (800618c <checkDemoModCalisma+0x13cc>)
 8005fd2:	781a      	ldrb	r2, [r3, #0]
 8005fd4:	4b6e      	ldr	r3, [pc, #440]	@ (8006190 <checkDemoModCalisma+0x13d0>)
 8005fd6:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 8005fd8:	4b6e      	ldr	r3, [pc, #440]	@ (8006194 <checkDemoModCalisma+0x13d4>)
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 8005fde:	4b65      	ldr	r3, [pc, #404]	@ (8006174 <checkDemoModCalisma+0x13b4>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 8005fe4:	4b67      	ldr	r3, [pc, #412]	@ (8006184 <checkDemoModCalisma+0x13c4>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005fea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005fee:	486a      	ldr	r0, [pc, #424]	@ (8006198 <checkDemoModCalisma+0x13d8>)
 8005ff0:	f003 fb44 	bl	800967c <HAL_GPIO_ReadPin>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d016      	beq.n	8006028 <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005ffa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005ffe:	4866      	ldr	r0, [pc, #408]	@ (8006198 <checkDemoModCalisma+0x13d8>)
 8006000:	f003 fb3c 	bl	800967c <HAL_GPIO_ReadPin>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00e      	beq.n	8006028 <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 800600a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800600e:	4862      	ldr	r0, [pc, #392]	@ (8006198 <checkDemoModCalisma+0x13d8>)
 8006010:	f003 fb34 	bl	800967c <HAL_GPIO_ReadPin>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d006      	beq.n	8006028 <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800601a:	2140      	movs	r1, #64	@ 0x40
 800601c:	4856      	ldr	r0, [pc, #344]	@ (8006178 <checkDemoModCalisma+0x13b8>)
 800601e:	f003 fb2d 	bl	800967c <HAL_GPIO_ReadPin>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d103      	bne.n	8006030 <checkDemoModCalisma+0x1270>

					startBasili=1;
 8006028:	4b5c      	ldr	r3, [pc, #368]	@ (800619c <checkDemoModCalisma+0x13dc>)
 800602a:	2201      	movs	r2, #1
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	e002      	b.n	8006036 <checkDemoModCalisma+0x1276>
				} else {
					startBasili=0;
 8006030:	4b5a      	ldr	r3, [pc, #360]	@ (800619c <checkDemoModCalisma+0x13dc>)
 8006032:	2200      	movs	r2, #0
 8006034:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006036:	4b59      	ldr	r3, [pc, #356]	@ (800619c <checkDemoModCalisma+0x13dc>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d014      	beq.n	8006068 <checkDemoModCalisma+0x12a8>
 800603e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006042:	4855      	ldr	r0, [pc, #340]	@ (8006198 <checkDemoModCalisma+0x13d8>)
 8006044:	f003 fb1a 	bl	800967c <HAL_GPIO_ReadPin>
 8006048:	4603      	mov	r3, r0
 800604a:	2b01      	cmp	r3, #1
 800604c:	d10c      	bne.n	8006068 <checkDemoModCalisma+0x12a8>

					hataVar=1;
 800604e:	4b54      	ldr	r3, [pc, #336]	@ (80061a0 <checkDemoModCalisma+0x13e0>)
 8006050:	2201      	movs	r2, #1
 8006052:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8006054:	2001      	movs	r0, #1
 8006056:	f7fa fbcf 	bl	80007f8 <hataKoduLcdGoster>
					hata2EEPROM(1);
 800605a:	2001      	movs	r0, #1
 800605c:	f7fa fb74 	bl	8000748 <hata2EEPROM>
					acilstophatasi=1;
 8006060:	4b50      	ldr	r3, [pc, #320]	@ (80061a4 <checkDemoModCalisma+0x13e4>)
 8006062:	2201      	movs	r2, #1
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	e018      	b.n	800609a <checkDemoModCalisma+0x12da>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006068:	4b4e      	ldr	r3, [pc, #312]	@ (80061a4 <checkDemoModCalisma+0x13e4>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d014      	beq.n	800609a <checkDemoModCalisma+0x12da>
 8006070:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006074:	4848      	ldr	r0, [pc, #288]	@ (8006198 <checkDemoModCalisma+0x13d8>)
 8006076:	f003 fb01 	bl	800967c <HAL_GPIO_ReadPin>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10c      	bne.n	800609a <checkDemoModCalisma+0x12da>
 8006080:	4b46      	ldr	r3, [pc, #280]	@ (800619c <checkDemoModCalisma+0x13dc>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	f083 0301 	eor.w	r3, r3, #1
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <checkDemoModCalisma+0x12da>
					acilstophatasi=0;
 800608e:	4b45      	ldr	r3, [pc, #276]	@ (80061a4 <checkDemoModCalisma+0x13e4>)
 8006090:	2200      	movs	r2, #0
 8006092:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 8006094:	2001      	movs	r0, #1
 8006096:	f7fd f8c3 	bl	8003220 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 800609a:	4b43      	ldr	r3, [pc, #268]	@ (80061a8 <checkDemoModCalisma+0x13e8>)
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	f083 0301 	eor.w	r3, r3, #1
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d023      	beq.n	80060f0 <checkDemoModCalisma+0x1330>
 80060a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80060ac:	483a      	ldr	r0, [pc, #232]	@ (8006198 <checkDemoModCalisma+0x13d8>)
 80060ae:	f003 fae5 	bl	800967c <HAL_GPIO_ReadPin>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <checkDemoModCalisma+0x1300>
 80060b8:	4b3c      	ldr	r3, [pc, #240]	@ (80061ac <checkDemoModCalisma+0x13ec>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d017      	beq.n	80060f0 <checkDemoModCalisma+0x1330>
 80060c0:	4b3b      	ldr	r3, [pc, #236]	@ (80061b0 <checkDemoModCalisma+0x13f0>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d113      	bne.n	80060f0 <checkDemoModCalisma+0x1330>
 80060c8:	4b3a      	ldr	r3, [pc, #232]	@ (80061b4 <checkDemoModCalisma+0x13f4>)
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	f083 0301 	eor.w	r3, r3, #1
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00c      	beq.n	80060f0 <checkDemoModCalisma+0x1330>
					hataVar=1;
 80060d6:	4b32      	ldr	r3, [pc, #200]	@ (80061a0 <checkDemoModCalisma+0x13e0>)
 80060d8:	2201      	movs	r2, #1
 80060da:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 80060dc:	2002      	movs	r0, #2
 80060de:	f7fa fb8b 	bl	80007f8 <hataKoduLcdGoster>
					hata2EEPROM(2);
 80060e2:	2002      	movs	r0, #2
 80060e4:	f7fa fb30 	bl	8000748 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 80060e8:	4b32      	ldr	r3, [pc, #200]	@ (80061b4 <checkDemoModCalisma+0x13f4>)
 80060ea:	2201      	movs	r2, #1
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	e017      	b.n	8006120 <checkDemoModCalisma+0x1360>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80060f0:	4b30      	ldr	r3, [pc, #192]	@ (80061b4 <checkDemoModCalisma+0x13f4>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d013      	beq.n	8006120 <checkDemoModCalisma+0x1360>
 80060f8:	4b2b      	ldr	r3, [pc, #172]	@ (80061a8 <checkDemoModCalisma+0x13e8>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00f      	beq.n	8006120 <checkDemoModCalisma+0x1360>
 8006100:	4b2d      	ldr	r3, [pc, #180]	@ (80061b8 <checkDemoModCalisma+0x13f8>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	f083 0301 	eor.w	r3, r3, #1
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d008      	beq.n	8006120 <checkDemoModCalisma+0x1360>
					emniyetCercevesihatasi=0;
 800610e:	4b29      	ldr	r3, [pc, #164]	@ (80061b4 <checkDemoModCalisma+0x13f4>)
 8006110:	2200      	movs	r2, #0
 8006112:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8006114:	4b25      	ldr	r3, [pc, #148]	@ (80061ac <checkDemoModCalisma+0x13ec>)
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 800611a:	2002      	movs	r0, #2
 800611c:	f7fd f880 	bl	8003220 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 8006120:	4b26      	ldr	r3, [pc, #152]	@ (80061bc <checkDemoModCalisma+0x13fc>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d151      	bne.n	80061cc <checkDemoModCalisma+0x140c>
 8006128:	4b25      	ldr	r3, [pc, #148]	@ (80061c0 <checkDemoModCalisma+0x1400>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d14d      	bne.n	80061cc <checkDemoModCalisma+0x140c>
 8006130:	4b24      	ldr	r3, [pc, #144]	@ (80061c4 <checkDemoModCalisma+0x1404>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d049      	beq.n	80061cc <checkDemoModCalisma+0x140c>
 8006138:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800613c:	480e      	ldr	r0, [pc, #56]	@ (8006178 <checkDemoModCalisma+0x13b8>)
 800613e:	f003 fa9d 	bl	800967c <HAL_GPIO_ReadPin>
 8006142:	4603      	mov	r3, r0
 8006144:	2b01      	cmp	r3, #1
 8006146:	d141      	bne.n	80061cc <checkDemoModCalisma+0x140c>
 8006148:	4b1f      	ldr	r3, [pc, #124]	@ (80061c8 <checkDemoModCalisma+0x1408>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	f083 0301 	eor.w	r3, r3, #1
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d03a      	beq.n	80061cc <checkDemoModCalisma+0x140c>
					hataVar=1;
 8006156:	4b12      	ldr	r3, [pc, #72]	@ (80061a0 <checkDemoModCalisma+0x13e0>)
 8006158:	2201      	movs	r2, #1
 800615a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 800615c:	2003      	movs	r0, #3
 800615e:	f7fa fb4b 	bl	80007f8 <hataKoduLcdGoster>
					hata2EEPROM(3);
 8006162:	2003      	movs	r0, #3
 8006164:	f7fa faf0 	bl	8000748 <hata2EEPROM>
					basinchatasi=1;
 8006168:	4b17      	ldr	r3, [pc, #92]	@ (80061c8 <checkDemoModCalisma+0x1408>)
 800616a:	2201      	movs	r2, #1
 800616c:	701a      	strb	r2, [r3, #0]
 800616e:	e043      	b.n	80061f8 <checkDemoModCalisma+0x1438>
 8006170:	40010800 	.word	0x40010800
 8006174:	20000ddf 	.word	0x20000ddf
 8006178:	40011000 	.word	0x40011000
 800617c:	20000da6 	.word	0x20000da6
 8006180:	20000de1 	.word	0x20000de1
 8006184:	20000de0 	.word	0x20000de0
 8006188:	20000d98 	.word	0x20000d98
 800618c:	20000d9a 	.word	0x20000d9a
 8006190:	20000d00 	.word	0x20000d00
 8006194:	20000dcc 	.word	0x20000dcc
 8006198:	40010c00 	.word	0x40010c00
 800619c:	20000ded 	.word	0x20000ded
 80061a0:	20000df4 	.word	0x20000df4
 80061a4:	20000def 	.word	0x20000def
 80061a8:	20000df6 	.word	0x20000df6
 80061ac:	20000e00 	.word	0x20000e00
 80061b0:	20000da4 	.word	0x20000da4
 80061b4:	20000df0 	.word	0x20000df0
 80061b8:	20000dd8 	.word	0x20000dd8
 80061bc:	20000da3 	.word	0x20000da3
 80061c0:	20000da7 	.word	0x20000da7
 80061c4:	20000df3 	.word	0x20000df3
 80061c8:	20000dfd 	.word	0x20000dfd
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80061cc:	4b85      	ldr	r3, [pc, #532]	@ (80063e4 <checkDemoModCalisma+0x1624>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d011      	beq.n	80061f8 <checkDemoModCalisma+0x1438>
 80061d4:	4b84      	ldr	r3, [pc, #528]	@ (80063e8 <checkDemoModCalisma+0x1628>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d10d      	bne.n	80061f8 <checkDemoModCalisma+0x1438>
 80061dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80061e0:	4882      	ldr	r0, [pc, #520]	@ (80063ec <checkDemoModCalisma+0x162c>)
 80061e2:	f003 fa4b 	bl	800967c <HAL_GPIO_ReadPin>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d105      	bne.n	80061f8 <checkDemoModCalisma+0x1438>
					basinchatasi=0;
 80061ec:	4b7d      	ldr	r3, [pc, #500]	@ (80063e4 <checkDemoModCalisma+0x1624>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 80061f2:	2003      	movs	r0, #3
 80061f4:	f7fd f814 	bl	8003220 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 80061f8:	4b7d      	ldr	r3, [pc, #500]	@ (80063f0 <checkDemoModCalisma+0x1630>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d103      	bne.n	8006208 <checkDemoModCalisma+0x1448>
 8006200:	4b7c      	ldr	r3, [pc, #496]	@ (80063f4 <checkDemoModCalisma+0x1634>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d023      	beq.n	8006250 <checkDemoModCalisma+0x1490>
 8006208:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800620c:	487a      	ldr	r0, [pc, #488]	@ (80063f8 <checkDemoModCalisma+0x1638>)
 800620e:	f003 fa35 	bl	800967c <HAL_GPIO_ReadPin>
 8006212:	4603      	mov	r3, r0
 8006214:	2b01      	cmp	r3, #1
 8006216:	d11b      	bne.n	8006250 <checkDemoModCalisma+0x1490>
 8006218:	4b78      	ldr	r3, [pc, #480]	@ (80063fc <checkDemoModCalisma+0x163c>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d003      	beq.n	8006228 <checkDemoModCalisma+0x1468>
 8006220:	4b76      	ldr	r3, [pc, #472]	@ (80063fc <checkDemoModCalisma+0x163c>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b03      	cmp	r3, #3
 8006226:	d113      	bne.n	8006250 <checkDemoModCalisma+0x1490>
 8006228:	4b75      	ldr	r3, [pc, #468]	@ (8006400 <checkDemoModCalisma+0x1640>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	f083 0301 	eor.w	r3, r3, #1
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00c      	beq.n	8006250 <checkDemoModCalisma+0x1490>
					hataVar=1;
 8006236:	4b73      	ldr	r3, [pc, #460]	@ (8006404 <checkDemoModCalisma+0x1644>)
 8006238:	2201      	movs	r2, #1
 800623a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 800623c:	2004      	movs	r0, #4
 800623e:	f7fa fadb 	bl	80007f8 <hataKoduLcdGoster>
					hata2EEPROM(4);
 8006242:	2004      	movs	r0, #4
 8006244:	f7fa fa80 	bl	8000748 <hata2EEPROM>
					katkapisivicihatasi=1;
 8006248:	4b6d      	ldr	r3, [pc, #436]	@ (8006400 <checkDemoModCalisma+0x1640>)
 800624a:	2201      	movs	r2, #1
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	e01f      	b.n	8006290 <checkDemoModCalisma+0x14d0>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006250:	4b6b      	ldr	r3, [pc, #428]	@ (8006400 <checkDemoModCalisma+0x1640>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d01b      	beq.n	8006290 <checkDemoModCalisma+0x14d0>
 8006258:	4b6b      	ldr	r3, [pc, #428]	@ (8006408 <checkDemoModCalisma+0x1648>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d017      	beq.n	8006290 <checkDemoModCalisma+0x14d0>
 8006260:	4b63      	ldr	r3, [pc, #396]	@ (80063f0 <checkDemoModCalisma+0x1630>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	f083 0301 	eor.w	r3, r3, #1
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d010      	beq.n	8006290 <checkDemoModCalisma+0x14d0>
 800626e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006272:	4861      	ldr	r0, [pc, #388]	@ (80063f8 <checkDemoModCalisma+0x1638>)
 8006274:	f003 fa02 	bl	800967c <HAL_GPIO_ReadPin>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d108      	bne.n	8006290 <checkDemoModCalisma+0x14d0>

					katkapisivicihatasi=0;
 800627e:	4b60      	ldr	r3, [pc, #384]	@ (8006400 <checkDemoModCalisma+0x1640>)
 8006280:	2200      	movs	r2, #0
 8006282:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8006284:	4b5b      	ldr	r3, [pc, #364]	@ (80063f4 <checkDemoModCalisma+0x1634>)
 8006286:	2200      	movs	r2, #0
 8006288:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 800628a:	2004      	movs	r0, #4
 800628c:	f7fc ffc8 	bl	8003220 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8006290:	4b57      	ldr	r3, [pc, #348]	@ (80063f0 <checkDemoModCalisma+0x1630>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d103      	bne.n	80062a0 <checkDemoModCalisma+0x14e0>
 8006298:	4b5c      	ldr	r3, [pc, #368]	@ (800640c <checkDemoModCalisma+0x164c>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d023      	beq.n	80062e8 <checkDemoModCalisma+0x1528>
 80062a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80062a4:	4854      	ldr	r0, [pc, #336]	@ (80063f8 <checkDemoModCalisma+0x1638>)
 80062a6:	f003 f9e9 	bl	800967c <HAL_GPIO_ReadPin>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d11b      	bne.n	80062e8 <checkDemoModCalisma+0x1528>
 80062b0:	4b52      	ldr	r3, [pc, #328]	@ (80063fc <checkDemoModCalisma+0x163c>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d003      	beq.n	80062c0 <checkDemoModCalisma+0x1500>
 80062b8:	4b50      	ldr	r3, [pc, #320]	@ (80063fc <checkDemoModCalisma+0x163c>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b03      	cmp	r3, #3
 80062be:	d113      	bne.n	80062e8 <checkDemoModCalisma+0x1528>
 80062c0:	4b53      	ldr	r3, [pc, #332]	@ (8006410 <checkDemoModCalisma+0x1650>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	f083 0301 	eor.w	r3, r3, #1
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00c      	beq.n	80062e8 <checkDemoModCalisma+0x1528>

					hataVar=1;
 80062ce:	4b4d      	ldr	r3, [pc, #308]	@ (8006404 <checkDemoModCalisma+0x1644>)
 80062d0:	2201      	movs	r2, #1
 80062d2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 80062d4:	2005      	movs	r0, #5
 80062d6:	f7fa fa8f 	bl	80007f8 <hataKoduLcdGoster>
					hata2EEPROM(5);
 80062da:	2005      	movs	r0, #5
 80062dc:	f7fa fa34 	bl	8000748 <hata2EEPROM>
					tablakapisivicihatasi=1;
 80062e0:	4b4b      	ldr	r3, [pc, #300]	@ (8006410 <checkDemoModCalisma+0x1650>)
 80062e2:	2201      	movs	r2, #1
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	e023      	b.n	8006330 <checkDemoModCalisma+0x1570>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80062e8:	4b49      	ldr	r3, [pc, #292]	@ (8006410 <checkDemoModCalisma+0x1650>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d01f      	beq.n	8006330 <checkDemoModCalisma+0x1570>
 80062f0:	4b45      	ldr	r3, [pc, #276]	@ (8006408 <checkDemoModCalisma+0x1648>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01b      	beq.n	8006330 <checkDemoModCalisma+0x1570>
 80062f8:	4b3d      	ldr	r3, [pc, #244]	@ (80063f0 <checkDemoModCalisma+0x1630>)
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	f083 0301 	eor.w	r3, r3, #1
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d014      	beq.n	8006330 <checkDemoModCalisma+0x1570>
 8006306:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800630a:	483b      	ldr	r0, [pc, #236]	@ (80063f8 <checkDemoModCalisma+0x1638>)
 800630c:	f003 f9b6 	bl	800967c <HAL_GPIO_ReadPin>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10c      	bne.n	8006330 <checkDemoModCalisma+0x1570>
 8006316:	4b3c      	ldr	r3, [pc, #240]	@ (8006408 <checkDemoModCalisma+0x1648>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d008      	beq.n	8006330 <checkDemoModCalisma+0x1570>
					tablakapisivicihatasi=0;
 800631e:	4b3c      	ldr	r3, [pc, #240]	@ (8006410 <checkDemoModCalisma+0x1650>)
 8006320:	2200      	movs	r2, #0
 8006322:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8006324:	4b39      	ldr	r3, [pc, #228]	@ (800640c <checkDemoModCalisma+0x164c>)
 8006326:	2200      	movs	r2, #0
 8006328:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 800632a:	2005      	movs	r0, #5
 800632c:	f7fc ff78 	bl	8003220 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8006330:	4b38      	ldr	r3, [pc, #224]	@ (8006414 <checkDemoModCalisma+0x1654>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d107      	bne.n	8006348 <checkDemoModCalisma+0x1588>
 8006338:	4b37      	ldr	r3, [pc, #220]	@ (8006418 <checkDemoModCalisma+0x1658>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d103      	bne.n	8006348 <checkDemoModCalisma+0x1588>
 8006340:	4b36      	ldr	r3, [pc, #216]	@ (800641c <checkDemoModCalisma+0x165c>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d01b      	beq.n	8006380 <checkDemoModCalisma+0x15c0>
 8006348:	4b35      	ldr	r3, [pc, #212]	@ (8006420 <checkDemoModCalisma+0x1660>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	f083 0301 	eor.w	r3, r3, #1
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d014      	beq.n	8006380 <checkDemoModCalisma+0x15c0>
				    if(millis-timer4>=makineCalismaTmr) {
 8006356:	4b33      	ldr	r3, [pc, #204]	@ (8006424 <checkDemoModCalisma+0x1664>)
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	4b33      	ldr	r3, [pc, #204]	@ (8006428 <checkDemoModCalisma+0x1668>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	4a32      	ldr	r2, [pc, #200]	@ (800642c <checkDemoModCalisma+0x166c>)
 8006362:	7812      	ldrb	r2, [r2, #0]
 8006364:	4293      	cmp	r3, r2
 8006366:	d30b      	bcc.n	8006380 <checkDemoModCalisma+0x15c0>
					  	hataVar=1;
 8006368:	4b26      	ldr	r3, [pc, #152]	@ (8006404 <checkDemoModCalisma+0x1644>)
 800636a:	2201      	movs	r2, #1
 800636c:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 800636e:	2006      	movs	r0, #6
 8006370:	f7fa fa42 	bl	80007f8 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8006374:	2006      	movs	r0, #6
 8006376:	f7fa f9e7 	bl	8000748 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 800637a:	4b29      	ldr	r3, [pc, #164]	@ (8006420 <checkDemoModCalisma+0x1660>)
 800637c:	2201      	movs	r2, #1
 800637e:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006380:	4b27      	ldr	r3, [pc, #156]	@ (8006420 <checkDemoModCalisma+0x1660>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d013      	beq.n	80063b0 <checkDemoModCalisma+0x15f0>
 8006388:	2108      	movs	r1, #8
 800638a:	481b      	ldr	r0, [pc, #108]	@ (80063f8 <checkDemoModCalisma+0x1638>)
 800638c:	f003 f976 	bl	800967c <HAL_GPIO_ReadPin>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00c      	beq.n	80063b0 <checkDemoModCalisma+0x15f0>
 8006396:	4b16      	ldr	r3, [pc, #88]	@ (80063f0 <checkDemoModCalisma+0x1630>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	f083 0301 	eor.w	r3, r3, #1
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d005      	beq.n	80063b0 <checkDemoModCalisma+0x15f0>
					maksimumcalismahatasi=0;
 80063a4:	4b1e      	ldr	r3, [pc, #120]	@ (8006420 <checkDemoModCalisma+0x1660>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 80063aa:	2006      	movs	r0, #6
 80063ac:	f7fc ff38 	bl	8003220 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80063b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006430 <checkDemoModCalisma+0x1670>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10b      	bne.n	80063d0 <checkDemoModCalisma+0x1610>
 80063b8:	4b17      	ldr	r3, [pc, #92]	@ (8006418 <checkDemoModCalisma+0x1658>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d107      	bne.n	80063d0 <checkDemoModCalisma+0x1610>
 80063c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006434 <checkDemoModCalisma+0x1674>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d103      	bne.n	80063d0 <checkDemoModCalisma+0x1610>
 80063c8:	4b14      	ldr	r3, [pc, #80]	@ (800641c <checkDemoModCalisma+0x165c>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d035      	beq.n	800643c <checkDemoModCalisma+0x167c>
					makineCalisiyor=0;
 80063d0:	4b19      	ldr	r3, [pc, #100]	@ (8006438 <checkDemoModCalisma+0x1678>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 80063d6:	4b07      	ldr	r3, [pc, #28]	@ (80063f4 <checkDemoModCalisma+0x1634>)
 80063d8:	2201      	movs	r2, #1
 80063da:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 80063dc:	4b0b      	ldr	r3, [pc, #44]	@ (800640c <checkDemoModCalisma+0x164c>)
 80063de:	2201      	movs	r2, #1
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	e032      	b.n	800644a <checkDemoModCalisma+0x168a>
 80063e4:	20000dfd 	.word	0x20000dfd
 80063e8:	20000da3 	.word	0x20000da3
 80063ec:	40010c00 	.word	0x40010c00
 80063f0:	20000ded 	.word	0x20000ded
 80063f4:	20000e01 	.word	0x20000e01
 80063f8:	40010800 	.word	0x40010800
 80063fc:	20000da8 	.word	0x20000da8
 8006400:	20000dfe 	.word	0x20000dfe
 8006404:	20000df4 	.word	0x20000df4
 8006408:	20000de1 	.word	0x20000de1
 800640c:	20000e02 	.word	0x20000e02
 8006410:	20000dff 	.word	0x20000dff
 8006414:	20000df3 	.word	0x20000df3
 8006418:	20000dd8 	.word	0x20000dd8
 800641c:	20000dd7 	.word	0x20000dd7
 8006420:	20000dee 	.word	0x20000dee
 8006424:	20000d78 	.word	0x20000d78
 8006428:	20000d8c 	.word	0x20000d8c
 800642c:	20000db8 	.word	0x20000db8
 8006430:	20000dd5 	.word	0x20000dd5
 8006434:	20000dd6 	.word	0x20000dd6
 8006438:	20000df5 	.word	0x20000df5
				} else {
					makineCalisiyor=1;
 800643c:	4b90      	ldr	r3, [pc, #576]	@ (8006680 <checkDemoModCalisma+0x18c0>)
 800643e:	2201      	movs	r2, #1
 8006440:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8006442:	4b90      	ldr	r3, [pc, #576]	@ (8006684 <checkDemoModCalisma+0x18c4>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a90      	ldr	r2, [pc, #576]	@ (8006688 <checkDemoModCalisma+0x18c8>)
 8006448:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800644a:	4b90      	ldr	r3, [pc, #576]	@ (800668c <checkDemoModCalisma+0x18cc>)
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d02f      	beq.n	80064b2 <checkDemoModCalisma+0x16f2>
 8006452:	4b8f      	ldr	r3, [pc, #572]	@ (8006690 <checkDemoModCalisma+0x18d0>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	f083 0301 	eor.w	r3, r3, #1
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d028      	beq.n	80064b2 <checkDemoModCalisma+0x16f2>
 8006460:	4b8c      	ldr	r3, [pc, #560]	@ (8006694 <checkDemoModCalisma+0x18d4>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	f083 0301 	eor.w	r3, r3, #1
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d021      	beq.n	80064b2 <checkDemoModCalisma+0x16f2>
 800646e:	4b8a      	ldr	r3, [pc, #552]	@ (8006698 <checkDemoModCalisma+0x18d8>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	f083 0301 	eor.w	r3, r3, #1
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	d01a      	beq.n	80064b2 <checkDemoModCalisma+0x16f2>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 800647c:	4b87      	ldr	r3, [pc, #540]	@ (800669c <checkDemoModCalisma+0x18dc>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	f083 0301 	eor.w	r3, r3, #1
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d013      	beq.n	80064b2 <checkDemoModCalisma+0x16f2>
 800648a:	4b85      	ldr	r3, [pc, #532]	@ (80066a0 <checkDemoModCalisma+0x18e0>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	f083 0301 	eor.w	r3, r3, #1
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00c      	beq.n	80064b2 <checkDemoModCalisma+0x16f2>
 8006498:	4b82      	ldr	r3, [pc, #520]	@ (80066a4 <checkDemoModCalisma+0x18e4>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	f083 0301 	eor.w	r3, r3, #1
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d005      	beq.n	80064b2 <checkDemoModCalisma+0x16f2>

					hataVar=0;
 80064a6:	4b79      	ldr	r3, [pc, #484]	@ (800668c <checkDemoModCalisma+0x18cc>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 80064ac:	2007      	movs	r0, #7
 80064ae:	f7fc feb7 	bl	8003220 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 80064b2:	4b76      	ldr	r3, [pc, #472]	@ (800668c <checkDemoModCalisma+0x18cc>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d02a      	beq.n	8006510 <checkDemoModCalisma+0x1750>
 80064ba:	4b75      	ldr	r3, [pc, #468]	@ (8006690 <checkDemoModCalisma+0x18d0>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	f083 0301 	eor.w	r3, r3, #1
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d023      	beq.n	8006510 <checkDemoModCalisma+0x1750>
 80064c8:	4b72      	ldr	r3, [pc, #456]	@ (8006694 <checkDemoModCalisma+0x18d4>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01f      	beq.n	8006510 <checkDemoModCalisma+0x1750>
 80064d0:	4b71      	ldr	r3, [pc, #452]	@ (8006698 <checkDemoModCalisma+0x18d8>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	f083 0301 	eor.w	r3, r3, #1
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d018      	beq.n	8006510 <checkDemoModCalisma+0x1750>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 80064de:	4b6f      	ldr	r3, [pc, #444]	@ (800669c <checkDemoModCalisma+0x18dc>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	f083 0301 	eor.w	r3, r3, #1
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d011      	beq.n	8006510 <checkDemoModCalisma+0x1750>
 80064ec:	4b6c      	ldr	r3, [pc, #432]	@ (80066a0 <checkDemoModCalisma+0x18e0>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	f083 0301 	eor.w	r3, r3, #1
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00a      	beq.n	8006510 <checkDemoModCalisma+0x1750>
 80064fa:	4b6a      	ldr	r3, [pc, #424]	@ (80066a4 <checkDemoModCalisma+0x18e4>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	f083 0301 	eor.w	r3, r3, #1
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	d003      	beq.n	8006510 <checkDemoModCalisma+0x1750>
				{
					EmnCerHataMakYukariCalis=1;
 8006508:	4b67      	ldr	r3, [pc, #412]	@ (80066a8 <checkDemoModCalisma+0x18e8>)
 800650a:	2201      	movs	r2, #1
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	e009      	b.n	8006524 <checkDemoModCalisma+0x1764>
				}
				else if(emniyetCercevesihatasi==0)
 8006510:	4b60      	ldr	r3, [pc, #384]	@ (8006694 <checkDemoModCalisma+0x18d4>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	f083 0301 	eor.w	r3, r3, #1
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <checkDemoModCalisma+0x1764>
				{
					EmnCerHataMakYukariCalis=0;
 800651e:	4b62      	ldr	r3, [pc, #392]	@ (80066a8 <checkDemoModCalisma+0x18e8>)
 8006520:	2200      	movs	r2, #0
 8006522:	701a      	strb	r2, [r3, #0]

			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006524:	4b61      	ldr	r3, [pc, #388]	@ (80066ac <checkDemoModCalisma+0x18ec>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b01      	cmp	r3, #1
 800652a:	f040 81d8 	bne.w	80068de <checkDemoModCalisma+0x1b1e>
 800652e:	4b60      	ldr	r3, [pc, #384]	@ (80066b0 <checkDemoModCalisma+0x18f0>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 81d3 	beq.w	80068de <checkDemoModCalisma+0x1b1e>
 8006538:	4b5e      	ldr	r3, [pc, #376]	@ (80066b4 <checkDemoModCalisma+0x18f4>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	f040 81ce 	bne.w	80068de <checkDemoModCalisma+0x1b1e>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006542:	2102      	movs	r1, #2
 8006544:	485c      	ldr	r0, [pc, #368]	@ (80066b8 <checkDemoModCalisma+0x18f8>)
 8006546:	f003 f899 	bl	800967c <HAL_GPIO_ReadPin>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d11d      	bne.n	800658c <checkDemoModCalisma+0x17cc>
						&& (demoAsagiCalis==0)
 8006550:	4b5a      	ldr	r3, [pc, #360]	@ (80066bc <checkDemoModCalisma+0x18fc>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	f083 0301 	eor.w	r3, r3, #1
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d016      	beq.n	800658c <checkDemoModCalisma+0x17cc>
						&& (demoDevYukari==0)
 800655e:	4b58      	ldr	r3, [pc, #352]	@ (80066c0 <checkDemoModCalisma+0x1900>)
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	f083 0301 	eor.w	r3, r3, #1
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00f      	beq.n	800658c <checkDemoModCalisma+0x17cc>
						&& (demoDevAsagi==0)) {
 800656c:	4b55      	ldr	r3, [pc, #340]	@ (80066c4 <checkDemoModCalisma+0x1904>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	f083 0301 	eor.w	r3, r3, #1
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d008      	beq.n	800658c <checkDemoModCalisma+0x17cc>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800657a:	2201      	movs	r2, #1
 800657c:	2104      	movs	r1, #4
 800657e:	4852      	ldr	r0, [pc, #328]	@ (80066c8 <checkDemoModCalisma+0x1908>)
 8006580:	f003 f893 	bl	80096aa <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8006584:	4b51      	ldr	r3, [pc, #324]	@ (80066cc <checkDemoModCalisma+0x190c>)
 8006586:	2201      	movs	r2, #1
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	e00e      	b.n	80065aa <checkDemoModCalisma+0x17ea>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800658c:	2102      	movs	r1, #2
 800658e:	484a      	ldr	r0, [pc, #296]	@ (80066b8 <checkDemoModCalisma+0x18f8>)
 8006590:	f003 f874 	bl	800967c <HAL_GPIO_ReadPin>
 8006594:	4603      	mov	r3, r0
 8006596:	2b01      	cmp	r3, #1
 8006598:	d107      	bne.n	80065aa <checkDemoModCalisma+0x17ea>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800659a:	2200      	movs	r2, #0
 800659c:	2104      	movs	r1, #4
 800659e:	484a      	ldr	r0, [pc, #296]	@ (80066c8 <checkDemoModCalisma+0x1908>)
 80065a0:	f003 f883 	bl	80096aa <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 80065a4:	4b49      	ldr	r3, [pc, #292]	@ (80066cc <checkDemoModCalisma+0x190c>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80065aa:	4b48      	ldr	r3, [pc, #288]	@ (80066cc <checkDemoModCalisma+0x190c>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10b      	bne.n	80065ca <checkDemoModCalisma+0x180a>
 80065b2:	4b43      	ldr	r3, [pc, #268]	@ (80066c0 <checkDemoModCalisma+0x1900>)
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d107      	bne.n	80065ca <checkDemoModCalisma+0x180a>
 80065ba:	4b42      	ldr	r3, [pc, #264]	@ (80066c4 <checkDemoModCalisma+0x1904>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d103      	bne.n	80065ca <checkDemoModCalisma+0x180a>
 80065c2:	4b3e      	ldr	r3, [pc, #248]	@ (80066bc <checkDemoModCalisma+0x18fc>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00c      	beq.n	80065e4 <checkDemoModCalisma+0x1824>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80065ca:	2201      	movs	r2, #1
 80065cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80065d0:	483d      	ldr	r0, [pc, #244]	@ (80066c8 <checkDemoModCalisma+0x1908>)
 80065d2:	f003 f86a 	bl	80096aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80065d6:	2201      	movs	r2, #1
 80065d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80065dc:	483a      	ldr	r0, [pc, #232]	@ (80066c8 <checkDemoModCalisma+0x1908>)
 80065de:	f003 f864 	bl	80096aa <HAL_GPIO_WritePin>
 80065e2:	e00b      	b.n	80065fc <checkDemoModCalisma+0x183c>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80065e4:	2200      	movs	r2, #0
 80065e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80065ea:	4837      	ldr	r0, [pc, #220]	@ (80066c8 <checkDemoModCalisma+0x1908>)
 80065ec:	f003 f85d 	bl	80096aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80065f0:	2200      	movs	r2, #0
 80065f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80065f6:	4834      	ldr	r0, [pc, #208]	@ (80066c8 <checkDemoModCalisma+0x1908>)
 80065f8:	f003 f857 	bl	80096aa <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80065fc:	2102      	movs	r1, #2
 80065fe:	482e      	ldr	r0, [pc, #184]	@ (80066b8 <checkDemoModCalisma+0x18f8>)
 8006600:	f003 f83c 	bl	800967c <HAL_GPIO_ReadPin>
 8006604:	4603      	mov	r3, r0
 8006606:	2b01      	cmp	r3, #1
 8006608:	d10d      	bne.n	8006626 <checkDemoModCalisma+0x1866>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800660a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800660e:	482a      	ldr	r0, [pc, #168]	@ (80066b8 <checkDemoModCalisma+0x18f8>)
 8006610:	f003 f834 	bl	800967c <HAL_GPIO_ReadPin>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d105      	bne.n	8006626 <checkDemoModCalisma+0x1866>
						&& (demoYukariCalis==0)
 800661a:	4b2c      	ldr	r3, [pc, #176]	@ (80066cc <checkDemoModCalisma+0x190c>)
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	f083 0301 	eor.w	r3, r3, #1
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006626:	2102      	movs	r1, #2
 8006628:	4823      	ldr	r0, [pc, #140]	@ (80066b8 <checkDemoModCalisma+0x18f8>)
 800662a:	f003 f827 	bl	800967c <HAL_GPIO_ReadPin>
 800662e:	4603      	mov	r3, r0
 8006630:	2b01      	cmp	r3, #1
 8006632:	d14d      	bne.n	80066d0 <checkDemoModCalisma+0x1910>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006634:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006638:	481f      	ldr	r0, [pc, #124]	@ (80066b8 <checkDemoModCalisma+0x18f8>)
 800663a:	f003 f81f 	bl	800967c <HAL_GPIO_ReadPin>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d145      	bne.n	80066d0 <checkDemoModCalisma+0x1910>
						&&(demoYukariCalis==0)
 8006644:	4b21      	ldr	r3, [pc, #132]	@ (80066cc <checkDemoModCalisma+0x190c>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	f083 0301 	eor.w	r3, r3, #1
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d03e      	beq.n	80066d0 <checkDemoModCalisma+0x1910>
						&&(demoAsagiCalis==0)
 8006652:	4b1a      	ldr	r3, [pc, #104]	@ (80066bc <checkDemoModCalisma+0x18fc>)
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	f083 0301 	eor.w	r3, r3, #1
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	d037      	beq.n	80066d0 <checkDemoModCalisma+0x1910>
						&& (demoDevAsagi==0)) {
 8006660:	4b18      	ldr	r3, [pc, #96]	@ (80066c4 <checkDemoModCalisma+0x1904>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	f083 0301 	eor.w	r3, r3, #1
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d030      	beq.n	80066d0 <checkDemoModCalisma+0x1910>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800666e:	2201      	movs	r2, #1
 8006670:	2120      	movs	r1, #32
 8006672:	4811      	ldr	r0, [pc, #68]	@ (80066b8 <checkDemoModCalisma+0x18f8>)
 8006674:	f003 f819 	bl	80096aa <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8006678:	4b11      	ldr	r3, [pc, #68]	@ (80066c0 <checkDemoModCalisma+0x1900>)
 800667a:	2201      	movs	r2, #1
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	e02f      	b.n	80066e0 <checkDemoModCalisma+0x1920>
 8006680:	20000df5 	.word	0x20000df5
 8006684:	20000d78 	.word	0x20000d78
 8006688:	20000d8c 	.word	0x20000d8c
 800668c:	20000df4 	.word	0x20000df4
 8006690:	20000def 	.word	0x20000def
 8006694:	20000df0 	.word	0x20000df0
 8006698:	20000dfd 	.word	0x20000dfd
 800669c:	20000dfe 	.word	0x20000dfe
 80066a0:	20000dff 	.word	0x20000dff
 80066a4:	20000dee 	.word	0x20000dee
 80066a8:	20000e03 	.word	0x20000e03
 80066ac:	20000dbe 	.word	0x20000dbe
 80066b0:	20000df1 	.word	0x20000df1
 80066b4:	20000dbd 	.word	0x20000dbd
 80066b8:	40011000 	.word	0x40011000
 80066bc:	20000df8 	.word	0x20000df8
 80066c0:	20000df9 	.word	0x20000df9
 80066c4:	20000dfa 	.word	0x20000dfa
 80066c8:	40010c00 	.word	0x40010c00
 80066cc:	20000df7 	.word	0x20000df7
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80066d0:	2200      	movs	r2, #0
 80066d2:	2120      	movs	r1, #32
 80066d4:	48a1      	ldr	r0, [pc, #644]	@ (800695c <checkDemoModCalisma+0x1b9c>)
 80066d6:	f002 ffe8 	bl	80096aa <HAL_GPIO_WritePin>
					demoDevYukari=0;
 80066da:	4ba1      	ldr	r3, [pc, #644]	@ (8006960 <checkDemoModCalisma+0x1ba0>)
 80066dc:	2200      	movs	r2, #0
 80066de:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80066e0:	2102      	movs	r1, #2
 80066e2:	489e      	ldr	r0, [pc, #632]	@ (800695c <checkDemoModCalisma+0x1b9c>)
 80066e4:	f002 ffca 	bl	800967c <HAL_GPIO_ReadPin>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d125      	bne.n	800673a <checkDemoModCalisma+0x197a>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80066ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80066f2:	489a      	ldr	r0, [pc, #616]	@ (800695c <checkDemoModCalisma+0x1b9c>)
 80066f4:	f002 ffc2 	bl	800967c <HAL_GPIO_ReadPin>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d11d      	bne.n	800673a <checkDemoModCalisma+0x197a>
						&&(demoYukariCalis==0)
 80066fe:	4b99      	ldr	r3, [pc, #612]	@ (8006964 <checkDemoModCalisma+0x1ba4>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	f083 0301 	eor.w	r3, r3, #1
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d016      	beq.n	800673a <checkDemoModCalisma+0x197a>
						&&(demoDevYukari==0)
 800670c:	4b94      	ldr	r3, [pc, #592]	@ (8006960 <checkDemoModCalisma+0x1ba0>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	f083 0301 	eor.w	r3, r3, #1
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00f      	beq.n	800673a <checkDemoModCalisma+0x197a>
						&& (demoAsagiCalis==0)) {
 800671a:	4b93      	ldr	r3, [pc, #588]	@ (8006968 <checkDemoModCalisma+0x1ba8>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	f083 0301 	eor.w	r3, r3, #1
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d008      	beq.n	800673a <checkDemoModCalisma+0x197a>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006728:	2201      	movs	r2, #1
 800672a:	2110      	movs	r1, #16
 800672c:	488b      	ldr	r0, [pc, #556]	@ (800695c <checkDemoModCalisma+0x1b9c>)
 800672e:	f002 ffbc 	bl	80096aa <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8006732:	4b8e      	ldr	r3, [pc, #568]	@ (800696c <checkDemoModCalisma+0x1bac>)
 8006734:	2201      	movs	r2, #1
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	e007      	b.n	800674a <checkDemoModCalisma+0x198a>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800673a:	2200      	movs	r2, #0
 800673c:	2110      	movs	r1, #16
 800673e:	4887      	ldr	r0, [pc, #540]	@ (800695c <checkDemoModCalisma+0x1b9c>)
 8006740:	f002 ffb3 	bl	80096aa <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8006744:	4b89      	ldr	r3, [pc, #548]	@ (800696c <checkDemoModCalisma+0x1bac>)
 8006746:	2200      	movs	r2, #0
 8006748:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800674a:	2104      	movs	r1, #4
 800674c:	4883      	ldr	r0, [pc, #524]	@ (800695c <checkDemoModCalisma+0x1b9c>)
 800674e:	f002 ff95 	bl	800967c <HAL_GPIO_ReadPin>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d125      	bne.n	80067a4 <checkDemoModCalisma+0x19e4>
						&& (demoYukariCalis==0)
 8006758:	4b82      	ldr	r3, [pc, #520]	@ (8006964 <checkDemoModCalisma+0x1ba4>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	f083 0301 	eor.w	r3, r3, #1
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d01e      	beq.n	80067a4 <checkDemoModCalisma+0x19e4>
						&& (demoDevAsagi==0)
 8006766:	4b81      	ldr	r3, [pc, #516]	@ (800696c <checkDemoModCalisma+0x1bac>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	f083 0301 	eor.w	r3, r3, #1
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d017      	beq.n	80067a4 <checkDemoModCalisma+0x19e4>
						&& (demoDevYukari==0)) {
 8006774:	4b7a      	ldr	r3, [pc, #488]	@ (8006960 <checkDemoModCalisma+0x1ba0>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	f083 0301 	eor.w	r3, r3, #1
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d010      	beq.n	80067a4 <checkDemoModCalisma+0x19e4>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006782:	2201      	movs	r2, #1
 8006784:	2102      	movs	r1, #2
 8006786:	487a      	ldr	r0, [pc, #488]	@ (8006970 <checkDemoModCalisma+0x1bb0>)
 8006788:	f002 ff8f 	bl	80096aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800678c:	2201      	movs	r2, #1
 800678e:	2101      	movs	r1, #1
 8006790:	4877      	ldr	r0, [pc, #476]	@ (8006970 <checkDemoModCalisma+0x1bb0>)
 8006792:	f002 ff8a 	bl	80096aa <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8006796:	4b74      	ldr	r3, [pc, #464]	@ (8006968 <checkDemoModCalisma+0x1ba8>)
 8006798:	2201      	movs	r2, #1
 800679a:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 800679c:	4b75      	ldr	r3, [pc, #468]	@ (8006974 <checkDemoModCalisma+0x1bb4>)
 800679e:	2201      	movs	r2, #1
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	e013      	b.n	80067cc <checkDemoModCalisma+0x1a0c>
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80067a4:	2104      	movs	r1, #4
 80067a6:	486d      	ldr	r0, [pc, #436]	@ (800695c <checkDemoModCalisma+0x1b9c>)
 80067a8:	f002 ff68 	bl	800967c <HAL_GPIO_ReadPin>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d10c      	bne.n	80067cc <checkDemoModCalisma+0x1a0c>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80067b2:	2200      	movs	r2, #0
 80067b4:	2102      	movs	r1, #2
 80067b6:	486e      	ldr	r0, [pc, #440]	@ (8006970 <checkDemoModCalisma+0x1bb0>)
 80067b8:	f002 ff77 	bl	80096aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80067bc:	2200      	movs	r2, #0
 80067be:	2101      	movs	r1, #1
 80067c0:	486b      	ldr	r0, [pc, #428]	@ (8006970 <checkDemoModCalisma+0x1bb0>)
 80067c2:	f002 ff72 	bl	80096aa <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 80067c6:	4b68      	ldr	r3, [pc, #416]	@ (8006968 <checkDemoModCalisma+0x1ba8>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80067cc:	2104      	movs	r1, #4
 80067ce:	4863      	ldr	r0, [pc, #396]	@ (800695c <checkDemoModCalisma+0x1b9c>)
 80067d0:	f002 ff54 	bl	800967c <HAL_GPIO_ReadPin>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d10d      	bne.n	80067f6 <checkDemoModCalisma+0x1a36>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80067da:	2201      	movs	r2, #1
 80067dc:	2180      	movs	r1, #128	@ 0x80
 80067de:	4866      	ldr	r0, [pc, #408]	@ (8006978 <checkDemoModCalisma+0x1bb8>)
 80067e0:	f002 ff63 	bl	80096aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80067e4:	2201      	movs	r2, #1
 80067e6:	2120      	movs	r1, #32
 80067e8:	4863      	ldr	r0, [pc, #396]	@ (8006978 <checkDemoModCalisma+0x1bb8>)
 80067ea:	f002 ff5e 	bl	80096aa <HAL_GPIO_WritePin>
					timer3 = millis;
 80067ee:	4b63      	ldr	r3, [pc, #396]	@ (800697c <checkDemoModCalisma+0x1bbc>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a63      	ldr	r2, [pc, #396]	@ (8006980 <checkDemoModCalisma+0x1bc0>)
 80067f4:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 80067f6:	4b61      	ldr	r3, [pc, #388]	@ (800697c <checkDemoModCalisma+0x1bbc>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4b61      	ldr	r3, [pc, #388]	@ (8006980 <checkDemoModCalisma+0x1bc0>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b04      	cmp	r3, #4
 8006802:	d909      	bls.n	8006818 <checkDemoModCalisma+0x1a58>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006804:	2200      	movs	r2, #0
 8006806:	2180      	movs	r1, #128	@ 0x80
 8006808:	485b      	ldr	r0, [pc, #364]	@ (8006978 <checkDemoModCalisma+0x1bb8>)
 800680a:	f002 ff4e 	bl	80096aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800680e:	2200      	movs	r2, #0
 8006810:	2120      	movs	r1, #32
 8006812:	4859      	ldr	r0, [pc, #356]	@ (8006978 <checkDemoModCalisma+0x1bb8>)
 8006814:	f002 ff49 	bl	80096aa <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006818:	2102      	movs	r1, #2
 800681a:	4850      	ldr	r0, [pc, #320]	@ (800695c <checkDemoModCalisma+0x1b9c>)
 800681c:	f002 ff2e 	bl	800967c <HAL_GPIO_ReadPin>
 8006820:	4603      	mov	r3, r0
 8006822:	2b01      	cmp	r3, #1
 8006824:	d108      	bne.n	8006838 <checkDemoModCalisma+0x1a78>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006826:	2201      	movs	r2, #1
 8006828:	2140      	movs	r1, #64	@ 0x40
 800682a:	4853      	ldr	r0, [pc, #332]	@ (8006978 <checkDemoModCalisma+0x1bb8>)
 800682c:	f002 ff3d 	bl	80096aa <HAL_GPIO_WritePin>
					timer3 = millis;
 8006830:	4b52      	ldr	r3, [pc, #328]	@ (800697c <checkDemoModCalisma+0x1bbc>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a52      	ldr	r2, [pc, #328]	@ (8006980 <checkDemoModCalisma+0x1bc0>)
 8006836:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8006838:	4b50      	ldr	r3, [pc, #320]	@ (800697c <checkDemoModCalisma+0x1bbc>)
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	4b50      	ldr	r3, [pc, #320]	@ (8006980 <checkDemoModCalisma+0x1bc0>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b04      	cmp	r3, #4
 8006844:	d904      	bls.n	8006850 <checkDemoModCalisma+0x1a90>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006846:	2200      	movs	r2, #0
 8006848:	2140      	movs	r1, #64	@ 0x40
 800684a:	484b      	ldr	r0, [pc, #300]	@ (8006978 <checkDemoModCalisma+0x1bb8>)
 800684c:	f002 ff2d 	bl	80096aa <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006850:	4b44      	ldr	r3, [pc, #272]	@ (8006964 <checkDemoModCalisma+0x1ba4>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d024      	beq.n	80068a2 <checkDemoModCalisma+0x1ae2>
 8006858:	4b46      	ldr	r3, [pc, #280]	@ (8006974 <checkDemoModCalisma+0x1bb4>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d020      	beq.n	80068a2 <checkDemoModCalisma+0x1ae2>

					calismaSayisiDemo++;
 8006860:	4b48      	ldr	r3, [pc, #288]	@ (8006984 <checkDemoModCalisma+0x1bc4>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	3301      	adds	r3, #1
 8006866:	b2da      	uxtb	r2, r3
 8006868:	4b46      	ldr	r3, [pc, #280]	@ (8006984 <checkDemoModCalisma+0x1bc4>)
 800686a:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 800686c:	4b46      	ldr	r3, [pc, #280]	@ (8006988 <checkDemoModCalisma+0x1bc8>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	2bff      	cmp	r3, #255	@ 0xff
 8006872:	d108      	bne.n	8006886 <checkDemoModCalisma+0x1ac6>
							calismaSayisi = 0;
 8006874:	4b44      	ldr	r3, [pc, #272]	@ (8006988 <checkDemoModCalisma+0x1bc8>)
 8006876:	2200      	movs	r2, #0
 8006878:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 800687a:	4b44      	ldr	r3, [pc, #272]	@ (800698c <checkDemoModCalisma+0x1bcc>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	3301      	adds	r3, #1
 8006880:	b2da      	uxtb	r2, r3
 8006882:	4b42      	ldr	r3, [pc, #264]	@ (800698c <checkDemoModCalisma+0x1bcc>)
 8006884:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 8006886:	4b3f      	ldr	r3, [pc, #252]	@ (8006984 <checkDemoModCalisma+0x1bc4>)
 8006888:	781a      	ldrb	r2, [r3, #0]
 800688a:	4b41      	ldr	r3, [pc, #260]	@ (8006990 <checkDemoModCalisma+0x1bd0>)
 800688c:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 800688e:	4b41      	ldr	r3, [pc, #260]	@ (8006994 <checkDemoModCalisma+0x1bd4>)
 8006890:	781a      	ldrb	r2, [r3, #0]
 8006892:	4b3f      	ldr	r3, [pc, #252]	@ (8006990 <checkDemoModCalisma+0x1bd0>)
 8006894:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 8006896:	4b40      	ldr	r3, [pc, #256]	@ (8006998 <checkDemoModCalisma+0x1bd8>)
 8006898:	2201      	movs	r2, #1
 800689a:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 800689c:	4b35      	ldr	r3, [pc, #212]	@ (8006974 <checkDemoModCalisma+0x1bb4>)
 800689e:	2200      	movs	r2, #0
 80068a0:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 80068a2:	4b3e      	ldr	r3, [pc, #248]	@ (800699c <checkDemoModCalisma+0x1bdc>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d156      	bne.n	8006958 <checkDemoModCalisma+0x1b98>
					lcd_print(2,1,"Cycle     ");
 80068aa:	4a3d      	ldr	r2, [pc, #244]	@ (80069a0 <checkDemoModCalisma+0x1be0>)
 80068ac:	2101      	movs	r1, #1
 80068ae:	2002      	movs	r0, #2
 80068b0:	f001 fd89 	bl	80083c6 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 80068b4:	4a3b      	ldr	r2, [pc, #236]	@ (80069a4 <checkDemoModCalisma+0x1be4>)
 80068b6:	2101      	movs	r1, #1
 80068b8:	2001      	movs	r0, #1
 80068ba:	f001 fd84 	bl	80083c6 <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 80068be:	4b31      	ldr	r3, [pc, #196]	@ (8006984 <checkDemoModCalisma+0x1bc4>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	220a      	movs	r2, #10
 80068c4:	4938      	ldr	r1, [pc, #224]	@ (80069a8 <checkDemoModCalisma+0x1be8>)
 80068c6:	4618      	mov	r0, r3
 80068c8:	f005 fa7a 	bl	800bdc0 <itoa>
					lcd_print(2,11,snum);
 80068cc:	4a36      	ldr	r2, [pc, #216]	@ (80069a8 <checkDemoModCalisma+0x1be8>)
 80068ce:	210b      	movs	r1, #11
 80068d0:	2002      	movs	r0, #2
 80068d2:	f001 fd78 	bl	80083c6 <lcd_print>
					mesajYazildi=1;
 80068d6:	4b35      	ldr	r3, [pc, #212]	@ (80069ac <checkDemoModCalisma+0x1bec>)
 80068d8:	2201      	movs	r2, #1
 80068da:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 80068dc:	e03c      	b.n	8006958 <checkDemoModCalisma+0x1b98>
				}
			} else if(demoMode==1 || menuGiris==1) {
 80068de:	4b34      	ldr	r3, [pc, #208]	@ (80069b0 <checkDemoModCalisma+0x1bf0>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d003      	beq.n	80068ee <checkDemoModCalisma+0x1b2e>
 80068e6:	4b2d      	ldr	r3, [pc, #180]	@ (800699c <checkDemoModCalisma+0x1bdc>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d134      	bne.n	8006958 <checkDemoModCalisma+0x1b98>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80068ee:	2200      	movs	r2, #0
 80068f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80068f4:	481e      	ldr	r0, [pc, #120]	@ (8006970 <checkDemoModCalisma+0x1bb0>)
 80068f6:	f002 fed8 	bl	80096aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80068fa:	2200      	movs	r2, #0
 80068fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006900:	481b      	ldr	r0, [pc, #108]	@ (8006970 <checkDemoModCalisma+0x1bb0>)
 8006902:	f002 fed2 	bl	80096aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006906:	2200      	movs	r2, #0
 8006908:	2104      	movs	r1, #4
 800690a:	4819      	ldr	r0, [pc, #100]	@ (8006970 <checkDemoModCalisma+0x1bb0>)
 800690c:	f002 fecd 	bl	80096aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006910:	2200      	movs	r2, #0
 8006912:	2102      	movs	r1, #2
 8006914:	4816      	ldr	r0, [pc, #88]	@ (8006970 <checkDemoModCalisma+0x1bb0>)
 8006916:	f002 fec8 	bl	80096aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800691a:	2200      	movs	r2, #0
 800691c:	2101      	movs	r1, #1
 800691e:	4814      	ldr	r0, [pc, #80]	@ (8006970 <checkDemoModCalisma+0x1bb0>)
 8006920:	f002 fec3 	bl	80096aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006924:	2200      	movs	r2, #0
 8006926:	2120      	movs	r1, #32
 8006928:	480c      	ldr	r0, [pc, #48]	@ (800695c <checkDemoModCalisma+0x1b9c>)
 800692a:	f002 febe 	bl	80096aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800692e:	2200      	movs	r2, #0
 8006930:	2110      	movs	r1, #16
 8006932:	480a      	ldr	r0, [pc, #40]	@ (800695c <checkDemoModCalisma+0x1b9c>)
 8006934:	f002 feb9 	bl	80096aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006938:	2200      	movs	r2, #0
 800693a:	2180      	movs	r1, #128	@ 0x80
 800693c:	480e      	ldr	r0, [pc, #56]	@ (8006978 <checkDemoModCalisma+0x1bb8>)
 800693e:	f002 feb4 	bl	80096aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006942:	2200      	movs	r2, #0
 8006944:	2140      	movs	r1, #64	@ 0x40
 8006946:	480c      	ldr	r0, [pc, #48]	@ (8006978 <checkDemoModCalisma+0x1bb8>)
 8006948:	f002 feaf 	bl	80096aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800694c:	2200      	movs	r2, #0
 800694e:	2120      	movs	r1, #32
 8006950:	4809      	ldr	r0, [pc, #36]	@ (8006978 <checkDemoModCalisma+0x1bb8>)
 8006952:	f002 feaa 	bl	80096aa <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8006956:	e7ff      	b.n	8006958 <checkDemoModCalisma+0x1b98>
 8006958:	bf00      	nop
 800695a:	bd80      	pop	{r7, pc}
 800695c:	40011000 	.word	0x40011000
 8006960:	20000df9 	.word	0x20000df9
 8006964:	20000df7 	.word	0x20000df7
 8006968:	20000df8 	.word	0x20000df8
 800696c:	20000dfa 	.word	0x20000dfa
 8006970:	40010c00 	.word	0x40010c00
 8006974:	20000dde 	.word	0x20000dde
 8006978:	40010800 	.word	0x40010800
 800697c:	20000d78 	.word	0x20000d78
 8006980:	20000d88 	.word	0x20000d88
 8006984:	20000d99 	.word	0x20000d99
 8006988:	20000d98 	.word	0x20000d98
 800698c:	20000d9a 	.word	0x20000d9a
 8006990:	20000d00 	.word	0x20000d00
 8006994:	20000d9b 	.word	0x20000d9b
 8006998:	20000dcc 	.word	0x20000dcc
 800699c:	20000dbd 	.word	0x20000dbd
 80069a0:	0800beec 	.word	0x0800beec
 80069a4:	0800bef8 	.word	0x0800bef8
 80069a8:	20000d70 	.word	0x20000d70
 80069ac:	20000dd4 	.word	0x20000dd4
 80069b0:	20000dbe 	.word	0x20000dbe

080069b4 <mainLoop>:

void mainLoop() {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 80069b8:	f7fc fc86 	bl	80032c8 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80069bc:	2101      	movs	r1, #1
 80069be:	4889      	ldr	r0, [pc, #548]	@ (8006be4 <mainLoop+0x230>)
 80069c0:	f002 fe5c 	bl	800967c <HAL_GPIO_ReadPin>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d136      	bne.n	8006a38 <mainLoop+0x84>
 80069ca:	2108      	movs	r1, #8
 80069cc:	4886      	ldr	r0, [pc, #536]	@ (8006be8 <mainLoop+0x234>)
 80069ce:	f002 fe55 	bl	800967c <HAL_GPIO_ReadPin>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d12f      	bne.n	8006a38 <mainLoop+0x84>
 80069d8:	2102      	movs	r1, #2
 80069da:	4882      	ldr	r0, [pc, #520]	@ (8006be4 <mainLoop+0x230>)
 80069dc:	f002 fe4e 	bl	800967c <HAL_GPIO_ReadPin>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d128      	bne.n	8006a38 <mainLoop+0x84>
 80069e6:	2104      	movs	r1, #4
 80069e8:	487e      	ldr	r0, [pc, #504]	@ (8006be4 <mainLoop+0x230>)
 80069ea:	f002 fe47 	bl	800967c <HAL_GPIO_ReadPin>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d121      	bne.n	8006a38 <mainLoop+0x84>
 80069f4:	2108      	movs	r1, #8
 80069f6:	487b      	ldr	r0, [pc, #492]	@ (8006be4 <mainLoop+0x230>)
 80069f8:	f002 fe40 	bl	800967c <HAL_GPIO_ReadPin>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d11a      	bne.n	8006a38 <mainLoop+0x84>
 8006a02:	2180      	movs	r1, #128	@ 0x80
 8006a04:	4878      	ldr	r0, [pc, #480]	@ (8006be8 <mainLoop+0x234>)
 8006a06:	f002 fe39 	bl	800967c <HAL_GPIO_ReadPin>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d113      	bne.n	8006a38 <mainLoop+0x84>
 8006a10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006a14:	4874      	ldr	r0, [pc, #464]	@ (8006be8 <mainLoop+0x234>)
 8006a16:	f002 fe31 	bl	800967c <HAL_GPIO_ReadPin>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d10b      	bne.n	8006a38 <mainLoop+0x84>
 8006a20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006a24:	4870      	ldr	r0, [pc, #448]	@ (8006be8 <mainLoop+0x234>)
 8006a26:	f002 fe29 	bl	800967c <HAL_GPIO_ReadPin>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d103      	bne.n	8006a38 <mainLoop+0x84>
			butonKontrol=0;
 8006a30:	4b6e      	ldr	r3, [pc, #440]	@ (8006bec <mainLoop+0x238>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	e003      	b.n	8006a40 <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 8006a38:	4b6d      	ldr	r3, [pc, #436]	@ (8006bf0 <mainLoop+0x23c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a6d      	ldr	r2, [pc, #436]	@ (8006bf4 <mainLoop+0x240>)
 8006a3e:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8006a40:	f7fc fcf4 	bl	800342c <buttonCheck>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d103      	bne.n	8006a52 <mainLoop+0x9e>
			backLightTimer = millis;
 8006a4a:	4b69      	ldr	r3, [pc, #420]	@ (8006bf0 <mainLoop+0x23c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a69      	ldr	r2, [pc, #420]	@ (8006bf4 <mainLoop+0x240>)
 8006a50:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006a52:	4b69      	ldr	r3, [pc, #420]	@ (8006bf8 <mainLoop+0x244>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <mainLoop+0xaa>
		  saveEEPROM();
 8006a5a:	f7f9 fe59 	bl	8000710 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006a5e:	4b67      	ldr	r3, [pc, #412]	@ (8006bfc <mainLoop+0x248>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	f083 0301 	eor.w	r3, r3, #1
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d043      	beq.n	8006af4 <mainLoop+0x140>
 8006a6c:	4864      	ldr	r0, [pc, #400]	@ (8006c00 <mainLoop+0x24c>)
 8006a6e:	f003 fc21 	bl	800a2b4 <HAL_I2C_GetState>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	d13d      	bne.n	8006af4 <mainLoop+0x140>
		  if(ilkOkuma==0) {
 8006a78:	4b62      	ldr	r3, [pc, #392]	@ (8006c04 <mainLoop+0x250>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	f083 0301 	eor.w	r3, r3, #1
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d028      	beq.n	8006ad8 <mainLoop+0x124>
			  lcd_print(1, 1, eepromTextGN);
 8006a86:	4a60      	ldr	r2, [pc, #384]	@ (8006c08 <mainLoop+0x254>)
 8006a88:	2101      	movs	r1, #1
 8006a8a:	2001      	movs	r0, #1
 8006a8c:	f001 fc9b 	bl	80083c6 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8006a90:	4a5e      	ldr	r2, [pc, #376]	@ (8006c0c <mainLoop+0x258>)
 8006a92:	2101      	movs	r1, #1
 8006a94:	2002      	movs	r0, #2
 8006a96:	f001 fc96 	bl	80083c6 <lcd_print>
			  HAL_Delay(1000);
 8006a9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006a9e:	f002 f95f 	bl	8008d60 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006aa2:	bf00      	nop
 8006aa4:	4856      	ldr	r0, [pc, #344]	@ (8006c00 <mainLoop+0x24c>)
 8006aa6:	f003 fc12 	bl	800a2ce <HAL_I2C_GetError>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d0f9      	beq.n	8006aa4 <mainLoop+0xf0>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006ab0:	e003      	b.n	8006aba <mainLoop+0x106>
				  HAL_Delay(1000);
 8006ab2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006ab6:	f002 f953 	bl	8008d60 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006aba:	4851      	ldr	r0, [pc, #324]	@ (8006c00 <mainLoop+0x24c>)
 8006abc:	f003 fbfa 	bl	800a2b4 <HAL_I2C_GetState>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b20      	cmp	r3, #32
 8006ac4:	d1f5      	bne.n	8006ab2 <mainLoop+0xfe>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8006ac6:	4a52      	ldr	r2, [pc, #328]	@ (8006c10 <mainLoop+0x25c>)
 8006ac8:	2101      	movs	r1, #1
 8006aca:	2002      	movs	r0, #2
 8006acc:	f001 fc7b 	bl	80083c6 <lcd_print>

			  ilkOkuma=1;
 8006ad0:	4b4c      	ldr	r3, [pc, #304]	@ (8006c04 <mainLoop+0x250>)
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	e006      	b.n	8006ae6 <mainLoop+0x132>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8006ad8:	4a4e      	ldr	r2, [pc, #312]	@ (8006c14 <mainLoop+0x260>)
 8006ada:	2101      	movs	r1, #1
 8006adc:	2002      	movs	r0, #2
 8006ade:	f001 fc72 	bl	80083c6 <lcd_print>
			  lcd_clear();
 8006ae2:	f001 fc85 	bl	80083f0 <lcd_clear>
		  }

		  lcd_clear();
 8006ae6:	f001 fc83 	bl	80083f0 <lcd_clear>

		  eepromKontrol();
 8006aea:	f7f9 fba3 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006aee:	4b43      	ldr	r3, [pc, #268]	@ (8006bfc <mainLoop+0x248>)
 8006af0:	2201      	movs	r2, #1
 8006af2:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006af4:	4b48      	ldr	r3, [pc, #288]	@ (8006c18 <mainLoop+0x264>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d11c      	bne.n	8006b36 <mainLoop+0x182>
 8006afc:	4b47      	ldr	r3, [pc, #284]	@ (8006c1c <mainLoop+0x268>)
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	f083 0301 	eor.w	r3, r3, #1
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d015      	beq.n	8006b36 <mainLoop+0x182>
 8006b0a:	4b45      	ldr	r3, [pc, #276]	@ (8006c20 <mainLoop+0x26c>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d111      	bne.n	8006b36 <mainLoop+0x182>
			lcd_clear();
 8006b12:	f001 fc6d 	bl	80083f0 <lcd_clear>
			HAL_Delay(10);
 8006b16:	200a      	movs	r0, #10
 8006b18:	f002 f922 	bl	8008d60 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8006b1c:	4a41      	ldr	r2, [pc, #260]	@ (8006c24 <mainLoop+0x270>)
 8006b1e:	2101      	movs	r1, #1
 8006b20:	2001      	movs	r0, #1
 8006b22:	f001 fc50 	bl	80083c6 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8006b26:	4a40      	ldr	r2, [pc, #256]	@ (8006c28 <mainLoop+0x274>)
 8006b28:	2101      	movs	r1, #1
 8006b2a:	2002      	movs	r0, #2
 8006b2c:	f001 fc4b 	bl	80083c6 <lcd_print>
			mesajYazildi=1;
 8006b30:	4b3a      	ldr	r3, [pc, #232]	@ (8006c1c <mainLoop+0x268>)
 8006b32:	2201      	movs	r2, #1
 8006b34:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006b36:	4b38      	ldr	r3, [pc, #224]	@ (8006c18 <mainLoop+0x264>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d112      	bne.n	8006b64 <mainLoop+0x1b0>
 8006b3e:	2102      	movs	r1, #2
 8006b40:	4828      	ldr	r0, [pc, #160]	@ (8006be4 <mainLoop+0x230>)
 8006b42:	f002 fd9b 	bl	800967c <HAL_GPIO_ReadPin>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d10b      	bne.n	8006b64 <mainLoop+0x1b0>
 8006b4c:	2104      	movs	r1, #4
 8006b4e:	4825      	ldr	r0, [pc, #148]	@ (8006be4 <mainLoop+0x230>)
 8006b50:	f002 fd94 	bl	800967c <HAL_GPIO_ReadPin>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d104      	bne.n	8006b64 <mainLoop+0x1b0>
			menuGiris=1;
 8006b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8006c18 <mainLoop+0x264>)
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006b60:	f001 fc46 	bl	80083f0 <lcd_clear>
		}

		if(menuGiris==1) {
 8006b64:	4b2c      	ldr	r3, [pc, #176]	@ (8006c18 <mainLoop+0x264>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d101      	bne.n	8006b70 <mainLoop+0x1bc>
			menu();
 8006b6c:	f7f9 ffb4 	bl	8000ad8 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006b70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006b74:	481c      	ldr	r0, [pc, #112]	@ (8006be8 <mainLoop+0x234>)
 8006b76:	f002 fdb0 	bl	80096da <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006b7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006b7e:	482b      	ldr	r0, [pc, #172]	@ (8006c2c <mainLoop+0x278>)
 8006b80:	f002 fd7c 	bl	800967c <HAL_GPIO_ReadPin>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10a      	bne.n	8006ba0 <mainLoop+0x1ec>
 8006b8a:	4b29      	ldr	r3, [pc, #164]	@ (8006c30 <mainLoop+0x27c>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	f083 0301 	eor.w	r3, r3, #1
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <mainLoop+0x1ec>
			stopVar=1;
 8006b98:	4b26      	ldr	r3, [pc, #152]	@ (8006c34 <mainLoop+0x280>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	701a      	strb	r2, [r3, #0]
 8006b9e:	e002      	b.n	8006ba6 <mainLoop+0x1f2>
		} else {
			stopVar=0;
 8006ba0:	4b24      	ldr	r3, [pc, #144]	@ (8006c34 <mainLoop+0x280>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 8006ba6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006baa:	4820      	ldr	r0, [pc, #128]	@ (8006c2c <mainLoop+0x278>)
 8006bac:	f002 fd66 	bl	800967c <HAL_GPIO_ReadPin>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d107      	bne.n	8006bc6 <mainLoop+0x212>
 8006bb6:	4b20      	ldr	r3, [pc, #128]	@ (8006c38 <mainLoop+0x284>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <mainLoop+0x212>
			EmnStopVar=1;
 8006bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8006c3c <mainLoop+0x288>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	e002      	b.n	8006bcc <mainLoop+0x218>
		} else {
			EmnStopVar=0;
 8006bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c3c <mainLoop+0x288>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006bcc:	f7fc fc62 	bl	8003494 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006bd0:	f7fc fc94 	bl	80034fc <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006bd4:	f7fc fcd8 	bl	8003588 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006bd8:	f7fc fd28 	bl	800362c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006bdc:	f7fe f8f0 	bl	8004dc0 <checkDemoModCalisma>
		checkLCDBacklight();
 8006be0:	e6ea      	b.n	80069b8 <mainLoop+0x4>
 8006be2:	bf00      	nop
 8006be4:	40010800 	.word	0x40010800
 8006be8:	40011000 	.word	0x40011000
 8006bec:	20000dcf 	.word	0x20000dcf
 8006bf0:	20000d78 	.word	0x20000d78
 8006bf4:	20000d94 	.word	0x20000d94
 8006bf8:	20000dcc 	.word	0x20000dcc
 8006bfc:	20000dcd 	.word	0x20000dcd
 8006c00:	2000140c 	.word	0x2000140c
 8006c04:	20000dce 	.word	0x20000dce
 8006c08:	2000010c 	.word	0x2000010c
 8006c0c:	20001394 	.word	0x20001394
 8006c10:	200013a8 	.word	0x200013a8
 8006c14:	200013bc 	.word	0x200013bc
 8006c18:	20000dbd 	.word	0x20000dbd
 8006c1c:	20000dd4 	.word	0x20000dd4
 8006c20:	20000dbe 	.word	0x20000dbe
 8006c24:	20000058 	.word	0x20000058
 8006c28:	2000006c 	.word	0x2000006c
 8006c2c:	40010c00 	.word	0x40010c00
 8006c30:	20000df4 	.word	0x20000df4
 8006c34:	20000df1 	.word	0x20000df1
 8006c38:	20000e03 	.word	0x20000e03
 8006c3c:	20000e04 	.word	0x20000e04

08006c40 <loadMenuTexts>:
char degerKaydedildiText[17];

//Error Code:
char errorCodeText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8006c40:	b5b0      	push	{r4, r5, r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	4603      	mov	r3, r0
 8006c48:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f040 846b 	bne.w	8007528 <loadMenuTexts+0x8e8>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8006c52:	4ac7      	ldr	r2, [pc, #796]	@ (8006f70 <loadMenuTexts+0x330>)
 8006c54:	4bc7      	ldr	r3, [pc, #796]	@ (8006f74 <loadMenuTexts+0x334>)
 8006c56:	4614      	mov	r4, r2
 8006c58:	461d      	mov	r5, r3
 8006c5a:	6828      	ldr	r0, [r5, #0]
 8006c5c:	6869      	ldr	r1, [r5, #4]
 8006c5e:	68aa      	ldr	r2, [r5, #8]
 8006c60:	68eb      	ldr	r3, [r5, #12]
 8006c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c64:	7c2b      	ldrb	r3, [r5, #16]
 8006c66:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8006c68:	4ac3      	ldr	r2, [pc, #780]	@ (8006f78 <loadMenuTexts+0x338>)
 8006c6a:	4bc4      	ldr	r3, [pc, #784]	@ (8006f7c <loadMenuTexts+0x33c>)
 8006c6c:	4614      	mov	r4, r2
 8006c6e:	461d      	mov	r5, r3
 8006c70:	6828      	ldr	r0, [r5, #0]
 8006c72:	6869      	ldr	r1, [r5, #4]
 8006c74:	68aa      	ldr	r2, [r5, #8]
 8006c76:	68eb      	ldr	r3, [r5, #12]
 8006c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c7a:	7c2b      	ldrb	r3, [r5, #16]
 8006c7c:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8006c7e:	4ac0      	ldr	r2, [pc, #768]	@ (8006f80 <loadMenuTexts+0x340>)
 8006c80:	4bc0      	ldr	r3, [pc, #768]	@ (8006f84 <loadMenuTexts+0x344>)
 8006c82:	4614      	mov	r4, r2
 8006c84:	461d      	mov	r5, r3
 8006c86:	6828      	ldr	r0, [r5, #0]
 8006c88:	6869      	ldr	r1, [r5, #4]
 8006c8a:	68aa      	ldr	r2, [r5, #8]
 8006c8c:	68eb      	ldr	r3, [r5, #12]
 8006c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c90:	7c2b      	ldrb	r3, [r5, #16]
 8006c92:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8006c94:	4abc      	ldr	r2, [pc, #752]	@ (8006f88 <loadMenuTexts+0x348>)
 8006c96:	4bbd      	ldr	r3, [pc, #756]	@ (8006f8c <loadMenuTexts+0x34c>)
 8006c98:	4614      	mov	r4, r2
 8006c9a:	461d      	mov	r5, r3
 8006c9c:	6828      	ldr	r0, [r5, #0]
 8006c9e:	6869      	ldr	r1, [r5, #4]
 8006ca0:	68aa      	ldr	r2, [r5, #8]
 8006ca2:	68eb      	ldr	r3, [r5, #12]
 8006ca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ca6:	7c2b      	ldrb	r3, [r5, #16]
 8006ca8:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8006caa:	4ab9      	ldr	r2, [pc, #740]	@ (8006f90 <loadMenuTexts+0x350>)
 8006cac:	4bb9      	ldr	r3, [pc, #740]	@ (8006f94 <loadMenuTexts+0x354>)
 8006cae:	4614      	mov	r4, r2
 8006cb0:	461d      	mov	r5, r3
 8006cb2:	6828      	ldr	r0, [r5, #0]
 8006cb4:	6869      	ldr	r1, [r5, #4]
 8006cb6:	68aa      	ldr	r2, [r5, #8]
 8006cb8:	68eb      	ldr	r3, [r5, #12]
 8006cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cbc:	7c2b      	ldrb	r3, [r5, #16]
 8006cbe:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8006cc0:	4ab5      	ldr	r2, [pc, #724]	@ (8006f98 <loadMenuTexts+0x358>)
 8006cc2:	4bb6      	ldr	r3, [pc, #728]	@ (8006f9c <loadMenuTexts+0x35c>)
 8006cc4:	4614      	mov	r4, r2
 8006cc6:	461d      	mov	r5, r3
 8006cc8:	6828      	ldr	r0, [r5, #0]
 8006cca:	6869      	ldr	r1, [r5, #4]
 8006ccc:	68aa      	ldr	r2, [r5, #8]
 8006cce:	68eb      	ldr	r3, [r5, #12]
 8006cd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cd2:	7c2b      	ldrb	r3, [r5, #16]
 8006cd4:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 8006cd6:	4ab2      	ldr	r2, [pc, #712]	@ (8006fa0 <loadMenuTexts+0x360>)
 8006cd8:	4bb2      	ldr	r3, [pc, #712]	@ (8006fa4 <loadMenuTexts+0x364>)
 8006cda:	4614      	mov	r4, r2
 8006cdc:	461d      	mov	r5, r3
 8006cde:	6828      	ldr	r0, [r5, #0]
 8006ce0:	6869      	ldr	r1, [r5, #4]
 8006ce2:	68aa      	ldr	r2, [r5, #8]
 8006ce4:	68eb      	ldr	r3, [r5, #12]
 8006ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ce8:	7c2b      	ldrb	r3, [r5, #16]
 8006cea:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8006cec:	4aae      	ldr	r2, [pc, #696]	@ (8006fa8 <loadMenuTexts+0x368>)
 8006cee:	4baf      	ldr	r3, [pc, #700]	@ (8006fac <loadMenuTexts+0x36c>)
 8006cf0:	4614      	mov	r4, r2
 8006cf2:	461d      	mov	r5, r3
 8006cf4:	6828      	ldr	r0, [r5, #0]
 8006cf6:	6869      	ldr	r1, [r5, #4]
 8006cf8:	68aa      	ldr	r2, [r5, #8]
 8006cfa:	68eb      	ldr	r3, [r5, #12]
 8006cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cfe:	7c2b      	ldrb	r3, [r5, #16]
 8006d00:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8006d02:	4aab      	ldr	r2, [pc, #684]	@ (8006fb0 <loadMenuTexts+0x370>)
 8006d04:	4bab      	ldr	r3, [pc, #684]	@ (8006fb4 <loadMenuTexts+0x374>)
 8006d06:	4614      	mov	r4, r2
 8006d08:	461d      	mov	r5, r3
 8006d0a:	6828      	ldr	r0, [r5, #0]
 8006d0c:	6869      	ldr	r1, [r5, #4]
 8006d0e:	68aa      	ldr	r2, [r5, #8]
 8006d10:	68eb      	ldr	r3, [r5, #12]
 8006d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d14:	7c2b      	ldrb	r3, [r5, #16]
 8006d16:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8006d18:	4aa7      	ldr	r2, [pc, #668]	@ (8006fb8 <loadMenuTexts+0x378>)
 8006d1a:	4ba8      	ldr	r3, [pc, #672]	@ (8006fbc <loadMenuTexts+0x37c>)
 8006d1c:	4614      	mov	r4, r2
 8006d1e:	461d      	mov	r5, r3
 8006d20:	6828      	ldr	r0, [r5, #0]
 8006d22:	6869      	ldr	r1, [r5, #4]
 8006d24:	68aa      	ldr	r2, [r5, #8]
 8006d26:	68eb      	ldr	r3, [r5, #12]
 8006d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d2a:	7c2b      	ldrb	r3, [r5, #16]
 8006d2c:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8006d2e:	4aa4      	ldr	r2, [pc, #656]	@ (8006fc0 <loadMenuTexts+0x380>)
 8006d30:	4ba4      	ldr	r3, [pc, #656]	@ (8006fc4 <loadMenuTexts+0x384>)
 8006d32:	4614      	mov	r4, r2
 8006d34:	461d      	mov	r5, r3
 8006d36:	6828      	ldr	r0, [r5, #0]
 8006d38:	6869      	ldr	r1, [r5, #4]
 8006d3a:	68aa      	ldr	r2, [r5, #8]
 8006d3c:	68eb      	ldr	r3, [r5, #12]
 8006d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d40:	7c2b      	ldrb	r3, [r5, #16]
 8006d42:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8006d44:	4aa0      	ldr	r2, [pc, #640]	@ (8006fc8 <loadMenuTexts+0x388>)
 8006d46:	4ba1      	ldr	r3, [pc, #644]	@ (8006fcc <loadMenuTexts+0x38c>)
 8006d48:	4614      	mov	r4, r2
 8006d4a:	461d      	mov	r5, r3
 8006d4c:	6828      	ldr	r0, [r5, #0]
 8006d4e:	6869      	ldr	r1, [r5, #4]
 8006d50:	68aa      	ldr	r2, [r5, #8]
 8006d52:	68eb      	ldr	r3, [r5, #12]
 8006d54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d56:	7c2b      	ldrb	r3, [r5, #16]
 8006d58:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8006d5a:	4a9d      	ldr	r2, [pc, #628]	@ (8006fd0 <loadMenuTexts+0x390>)
 8006d5c:	4b9d      	ldr	r3, [pc, #628]	@ (8006fd4 <loadMenuTexts+0x394>)
 8006d5e:	4614      	mov	r4, r2
 8006d60:	461d      	mov	r5, r3
 8006d62:	6828      	ldr	r0, [r5, #0]
 8006d64:	6869      	ldr	r1, [r5, #4]
 8006d66:	68aa      	ldr	r2, [r5, #8]
 8006d68:	68eb      	ldr	r3, [r5, #12]
 8006d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d6c:	7c2b      	ldrb	r3, [r5, #16]
 8006d6e:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8006d70:	4a99      	ldr	r2, [pc, #612]	@ (8006fd8 <loadMenuTexts+0x398>)
 8006d72:	4b9a      	ldr	r3, [pc, #616]	@ (8006fdc <loadMenuTexts+0x39c>)
 8006d74:	4614      	mov	r4, r2
 8006d76:	461d      	mov	r5, r3
 8006d78:	6828      	ldr	r0, [r5, #0]
 8006d7a:	6869      	ldr	r1, [r5, #4]
 8006d7c:	68aa      	ldr	r2, [r5, #8]
 8006d7e:	68eb      	ldr	r3, [r5, #12]
 8006d80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d82:	7c2b      	ldrb	r3, [r5, #16]
 8006d84:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 8006d86:	4a96      	ldr	r2, [pc, #600]	@ (8006fe0 <loadMenuTexts+0x3a0>)
 8006d88:	4b96      	ldr	r3, [pc, #600]	@ (8006fe4 <loadMenuTexts+0x3a4>)
 8006d8a:	4614      	mov	r4, r2
 8006d8c:	461d      	mov	r5, r3
 8006d8e:	6828      	ldr	r0, [r5, #0]
 8006d90:	6869      	ldr	r1, [r5, #4]
 8006d92:	68aa      	ldr	r2, [r5, #8]
 8006d94:	68eb      	ldr	r3, [r5, #12]
 8006d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d98:	7c2b      	ldrb	r3, [r5, #16]
 8006d9a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8006d9c:	4a92      	ldr	r2, [pc, #584]	@ (8006fe8 <loadMenuTexts+0x3a8>)
 8006d9e:	4b93      	ldr	r3, [pc, #588]	@ (8006fec <loadMenuTexts+0x3ac>)
 8006da0:	4614      	mov	r4, r2
 8006da2:	461d      	mov	r5, r3
 8006da4:	6828      	ldr	r0, [r5, #0]
 8006da6:	6869      	ldr	r1, [r5, #4]
 8006da8:	68aa      	ldr	r2, [r5, #8]
 8006daa:	68eb      	ldr	r3, [r5, #12]
 8006dac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dae:	7c2b      	ldrb	r3, [r5, #16]
 8006db0:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 8006db2:	4a8f      	ldr	r2, [pc, #572]	@ (8006ff0 <loadMenuTexts+0x3b0>)
 8006db4:	4b8f      	ldr	r3, [pc, #572]	@ (8006ff4 <loadMenuTexts+0x3b4>)
 8006db6:	4614      	mov	r4, r2
 8006db8:	461d      	mov	r5, r3
 8006dba:	6828      	ldr	r0, [r5, #0]
 8006dbc:	6869      	ldr	r1, [r5, #4]
 8006dbe:	68aa      	ldr	r2, [r5, #8]
 8006dc0:	68eb      	ldr	r3, [r5, #12]
 8006dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dc4:	7c2b      	ldrb	r3, [r5, #16]
 8006dc6:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 8006dc8:	4a8b      	ldr	r2, [pc, #556]	@ (8006ff8 <loadMenuTexts+0x3b8>)
 8006dca:	4b8c      	ldr	r3, [pc, #560]	@ (8006ffc <loadMenuTexts+0x3bc>)
 8006dcc:	4614      	mov	r4, r2
 8006dce:	461d      	mov	r5, r3
 8006dd0:	6828      	ldr	r0, [r5, #0]
 8006dd2:	6869      	ldr	r1, [r5, #4]
 8006dd4:	68aa      	ldr	r2, [r5, #8]
 8006dd6:	68eb      	ldr	r3, [r5, #12]
 8006dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dda:	7c2b      	ldrb	r3, [r5, #16]
 8006ddc:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 8006dde:	4a88      	ldr	r2, [pc, #544]	@ (8007000 <loadMenuTexts+0x3c0>)
 8006de0:	4b88      	ldr	r3, [pc, #544]	@ (8007004 <loadMenuTexts+0x3c4>)
 8006de2:	4614      	mov	r4, r2
 8006de4:	461d      	mov	r5, r3
 8006de6:	6828      	ldr	r0, [r5, #0]
 8006de8:	6869      	ldr	r1, [r5, #4]
 8006dea:	68aa      	ldr	r2, [r5, #8]
 8006dec:	68eb      	ldr	r3, [r5, #12]
 8006dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006df0:	7c2b      	ldrb	r3, [r5, #16]
 8006df2:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 8006df4:	4a84      	ldr	r2, [pc, #528]	@ (8007008 <loadMenuTexts+0x3c8>)
 8006df6:	4b85      	ldr	r3, [pc, #532]	@ (800700c <loadMenuTexts+0x3cc>)
 8006df8:	4614      	mov	r4, r2
 8006dfa:	461d      	mov	r5, r3
 8006dfc:	6828      	ldr	r0, [r5, #0]
 8006dfe:	6869      	ldr	r1, [r5, #4]
 8006e00:	68aa      	ldr	r2, [r5, #8]
 8006e02:	68eb      	ldr	r3, [r5, #12]
 8006e04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e06:	7c2b      	ldrb	r3, [r5, #16]
 8006e08:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 8006e0a:	4a81      	ldr	r2, [pc, #516]	@ (8007010 <loadMenuTexts+0x3d0>)
 8006e0c:	4b81      	ldr	r3, [pc, #516]	@ (8007014 <loadMenuTexts+0x3d4>)
 8006e0e:	4614      	mov	r4, r2
 8006e10:	461d      	mov	r5, r3
 8006e12:	6828      	ldr	r0, [r5, #0]
 8006e14:	6869      	ldr	r1, [r5, #4]
 8006e16:	68aa      	ldr	r2, [r5, #8]
 8006e18:	68eb      	ldr	r3, [r5, #12]
 8006e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e1c:	7c2b      	ldrb	r3, [r5, #16]
 8006e1e:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 8006e20:	4a7d      	ldr	r2, [pc, #500]	@ (8007018 <loadMenuTexts+0x3d8>)
 8006e22:	4b7e      	ldr	r3, [pc, #504]	@ (800701c <loadMenuTexts+0x3dc>)
 8006e24:	4614      	mov	r4, r2
 8006e26:	461d      	mov	r5, r3
 8006e28:	6828      	ldr	r0, [r5, #0]
 8006e2a:	6869      	ldr	r1, [r5, #4]
 8006e2c:	68aa      	ldr	r2, [r5, #8]
 8006e2e:	68eb      	ldr	r3, [r5, #12]
 8006e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e32:	7c2b      	ldrb	r3, [r5, #16]
 8006e34:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 8006e36:	4a7a      	ldr	r2, [pc, #488]	@ (8007020 <loadMenuTexts+0x3e0>)
 8006e38:	4b7a      	ldr	r3, [pc, #488]	@ (8007024 <loadMenuTexts+0x3e4>)
 8006e3a:	4614      	mov	r4, r2
 8006e3c:	461d      	mov	r5, r3
 8006e3e:	6828      	ldr	r0, [r5, #0]
 8006e40:	6869      	ldr	r1, [r5, #4]
 8006e42:	68aa      	ldr	r2, [r5, #8]
 8006e44:	68eb      	ldr	r3, [r5, #12]
 8006e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e48:	7c2b      	ldrb	r3, [r5, #16]
 8006e4a:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8006e4c:	4a76      	ldr	r2, [pc, #472]	@ (8007028 <loadMenuTexts+0x3e8>)
 8006e4e:	4b77      	ldr	r3, [pc, #476]	@ (800702c <loadMenuTexts+0x3ec>)
 8006e50:	4614      	mov	r4, r2
 8006e52:	461d      	mov	r5, r3
 8006e54:	6828      	ldr	r0, [r5, #0]
 8006e56:	6869      	ldr	r1, [r5, #4]
 8006e58:	68aa      	ldr	r2, [r5, #8]
 8006e5a:	68eb      	ldr	r3, [r5, #12]
 8006e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e5e:	7c2b      	ldrb	r3, [r5, #16]
 8006e60:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 8006e62:	4a73      	ldr	r2, [pc, #460]	@ (8007030 <loadMenuTexts+0x3f0>)
 8006e64:	4b73      	ldr	r3, [pc, #460]	@ (8007034 <loadMenuTexts+0x3f4>)
 8006e66:	4614      	mov	r4, r2
 8006e68:	461d      	mov	r5, r3
 8006e6a:	6828      	ldr	r0, [r5, #0]
 8006e6c:	6869      	ldr	r1, [r5, #4]
 8006e6e:	68aa      	ldr	r2, [r5, #8]
 8006e70:	68eb      	ldr	r3, [r5, #12]
 8006e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e74:	7c2b      	ldrb	r3, [r5, #16]
 8006e76:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8006e78:	4a6f      	ldr	r2, [pc, #444]	@ (8007038 <loadMenuTexts+0x3f8>)
 8006e7a:	4b70      	ldr	r3, [pc, #448]	@ (800703c <loadMenuTexts+0x3fc>)
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	461d      	mov	r5, r3
 8006e80:	6828      	ldr	r0, [r5, #0]
 8006e82:	6869      	ldr	r1, [r5, #4]
 8006e84:	68aa      	ldr	r2, [r5, #8]
 8006e86:	68eb      	ldr	r3, [r5, #12]
 8006e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e8a:	7c2b      	ldrb	r3, [r5, #16]
 8006e8c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 8006e8e:	4a6c      	ldr	r2, [pc, #432]	@ (8007040 <loadMenuTexts+0x400>)
 8006e90:	4b6c      	ldr	r3, [pc, #432]	@ (8007044 <loadMenuTexts+0x404>)
 8006e92:	4614      	mov	r4, r2
 8006e94:	461d      	mov	r5, r3
 8006e96:	6828      	ldr	r0, [r5, #0]
 8006e98:	6869      	ldr	r1, [r5, #4]
 8006e9a:	68aa      	ldr	r2, [r5, #8]
 8006e9c:	68eb      	ldr	r3, [r5, #12]
 8006e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ea0:	7c2b      	ldrb	r3, [r5, #16]
 8006ea2:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 8006ea4:	4a68      	ldr	r2, [pc, #416]	@ (8007048 <loadMenuTexts+0x408>)
 8006ea6:	4b69      	ldr	r3, [pc, #420]	@ (800704c <loadMenuTexts+0x40c>)
 8006ea8:	4614      	mov	r4, r2
 8006eaa:	461d      	mov	r5, r3
 8006eac:	6828      	ldr	r0, [r5, #0]
 8006eae:	6869      	ldr	r1, [r5, #4]
 8006eb0:	68aa      	ldr	r2, [r5, #8]
 8006eb2:	68eb      	ldr	r3, [r5, #12]
 8006eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eb6:	7c2b      	ldrb	r3, [r5, #16]
 8006eb8:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 8006eba:	4a65      	ldr	r2, [pc, #404]	@ (8007050 <loadMenuTexts+0x410>)
 8006ebc:	4b65      	ldr	r3, [pc, #404]	@ (8007054 <loadMenuTexts+0x414>)
 8006ebe:	4614      	mov	r4, r2
 8006ec0:	461d      	mov	r5, r3
 8006ec2:	6828      	ldr	r0, [r5, #0]
 8006ec4:	6869      	ldr	r1, [r5, #4]
 8006ec6:	68aa      	ldr	r2, [r5, #8]
 8006ec8:	68eb      	ldr	r3, [r5, #12]
 8006eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ecc:	7c2b      	ldrb	r3, [r5, #16]
 8006ece:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 8006ed0:	4a61      	ldr	r2, [pc, #388]	@ (8007058 <loadMenuTexts+0x418>)
 8006ed2:	4b62      	ldr	r3, [pc, #392]	@ (800705c <loadMenuTexts+0x41c>)
 8006ed4:	4614      	mov	r4, r2
 8006ed6:	461d      	mov	r5, r3
 8006ed8:	6828      	ldr	r0, [r5, #0]
 8006eda:	6869      	ldr	r1, [r5, #4]
 8006edc:	68aa      	ldr	r2, [r5, #8]
 8006ede:	68eb      	ldr	r3, [r5, #12]
 8006ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ee2:	7c2b      	ldrb	r3, [r5, #16]
 8006ee4:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 8006ee6:	4a5e      	ldr	r2, [pc, #376]	@ (8007060 <loadMenuTexts+0x420>)
 8006ee8:	4b5e      	ldr	r3, [pc, #376]	@ (8007064 <loadMenuTexts+0x424>)
 8006eea:	4614      	mov	r4, r2
 8006eec:	461d      	mov	r5, r3
 8006eee:	6828      	ldr	r0, [r5, #0]
 8006ef0:	6869      	ldr	r1, [r5, #4]
 8006ef2:	68aa      	ldr	r2, [r5, #8]
 8006ef4:	68eb      	ldr	r3, [r5, #12]
 8006ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ef8:	7c2b      	ldrb	r3, [r5, #16]
 8006efa:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8006efc:	4a5a      	ldr	r2, [pc, #360]	@ (8007068 <loadMenuTexts+0x428>)
 8006efe:	4b5b      	ldr	r3, [pc, #364]	@ (800706c <loadMenuTexts+0x42c>)
 8006f00:	4614      	mov	r4, r2
 8006f02:	461d      	mov	r5, r3
 8006f04:	6828      	ldr	r0, [r5, #0]
 8006f06:	6869      	ldr	r1, [r5, #4]
 8006f08:	68aa      	ldr	r2, [r5, #8]
 8006f0a:	68eb      	ldr	r3, [r5, #12]
 8006f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f0e:	7c2b      	ldrb	r3, [r5, #16]
 8006f10:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 8006f12:	4a57      	ldr	r2, [pc, #348]	@ (8007070 <loadMenuTexts+0x430>)
 8006f14:	4b57      	ldr	r3, [pc, #348]	@ (8007074 <loadMenuTexts+0x434>)
 8006f16:	4614      	mov	r4, r2
 8006f18:	461d      	mov	r5, r3
 8006f1a:	6828      	ldr	r0, [r5, #0]
 8006f1c:	6869      	ldr	r1, [r5, #4]
 8006f1e:	68aa      	ldr	r2, [r5, #8]
 8006f20:	68eb      	ldr	r3, [r5, #12]
 8006f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f24:	7c2b      	ldrb	r3, [r5, #16]
 8006f26:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 8006f28:	4a53      	ldr	r2, [pc, #332]	@ (8007078 <loadMenuTexts+0x438>)
 8006f2a:	4b54      	ldr	r3, [pc, #336]	@ (800707c <loadMenuTexts+0x43c>)
 8006f2c:	4614      	mov	r4, r2
 8006f2e:	461d      	mov	r5, r3
 8006f30:	6828      	ldr	r0, [r5, #0]
 8006f32:	6869      	ldr	r1, [r5, #4]
 8006f34:	68aa      	ldr	r2, [r5, #8]
 8006f36:	68eb      	ldr	r3, [r5, #12]
 8006f38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f3a:	7c2b      	ldrb	r3, [r5, #16]
 8006f3c:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 8006f3e:	4a50      	ldr	r2, [pc, #320]	@ (8007080 <loadMenuTexts+0x440>)
 8006f40:	4b50      	ldr	r3, [pc, #320]	@ (8007084 <loadMenuTexts+0x444>)
 8006f42:	4614      	mov	r4, r2
 8006f44:	461d      	mov	r5, r3
 8006f46:	6828      	ldr	r0, [r5, #0]
 8006f48:	6869      	ldr	r1, [r5, #4]
 8006f4a:	68aa      	ldr	r2, [r5, #8]
 8006f4c:	68eb      	ldr	r3, [r5, #12]
 8006f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f50:	7c2b      	ldrb	r3, [r5, #16]
 8006f52:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 8006f54:	4a4c      	ldr	r2, [pc, #304]	@ (8007088 <loadMenuTexts+0x448>)
 8006f56:	4b4d      	ldr	r3, [pc, #308]	@ (800708c <loadMenuTexts+0x44c>)
 8006f58:	4614      	mov	r4, r2
 8006f5a:	461d      	mov	r5, r3
 8006f5c:	6828      	ldr	r0, [r5, #0]
 8006f5e:	6869      	ldr	r1, [r5, #4]
 8006f60:	68aa      	ldr	r2, [r5, #8]
 8006f62:	68eb      	ldr	r3, [r5, #12]
 8006f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f66:	7c2b      	ldrb	r3, [r5, #16]
 8006f68:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 8006f6a:	4a49      	ldr	r2, [pc, #292]	@ (8007090 <loadMenuTexts+0x450>)
 8006f6c:	e092      	b.n	8007094 <loadMenuTexts+0x454>
 8006f6e:	bf00      	nop
 8006f70:	20000e08 	.word	0x20000e08
 8006f74:	20000120 	.word	0x20000120
 8006f78:	20000e1c 	.word	0x20000e1c
 8006f7c:	20000134 	.word	0x20000134
 8006f80:	20000e30 	.word	0x20000e30
 8006f84:	20000148 	.word	0x20000148
 8006f88:	20000e44 	.word	0x20000e44
 8006f8c:	2000015c 	.word	0x2000015c
 8006f90:	20000e58 	.word	0x20000e58
 8006f94:	20000170 	.word	0x20000170
 8006f98:	20000e6c 	.word	0x20000e6c
 8006f9c:	20000184 	.word	0x20000184
 8006fa0:	20000e80 	.word	0x20000e80
 8006fa4:	20000198 	.word	0x20000198
 8006fa8:	20000e94 	.word	0x20000e94
 8006fac:	200001ac 	.word	0x200001ac
 8006fb0:	20000ea8 	.word	0x20000ea8
 8006fb4:	200001c0 	.word	0x200001c0
 8006fb8:	20000ebc 	.word	0x20000ebc
 8006fbc:	200001d4 	.word	0x200001d4
 8006fc0:	20000ed0 	.word	0x20000ed0
 8006fc4:	200001e8 	.word	0x200001e8
 8006fc8:	20000ee4 	.word	0x20000ee4
 8006fcc:	200001fc 	.word	0x200001fc
 8006fd0:	20000ef8 	.word	0x20000ef8
 8006fd4:	20000210 	.word	0x20000210
 8006fd8:	20000f0c 	.word	0x20000f0c
 8006fdc:	20000224 	.word	0x20000224
 8006fe0:	20000f20 	.word	0x20000f20
 8006fe4:	20000238 	.word	0x20000238
 8006fe8:	20000f34 	.word	0x20000f34
 8006fec:	2000024c 	.word	0x2000024c
 8006ff0:	20000f48 	.word	0x20000f48
 8006ff4:	20000260 	.word	0x20000260
 8006ff8:	20000f5c 	.word	0x20000f5c
 8006ffc:	20000274 	.word	0x20000274
 8007000:	20000f70 	.word	0x20000f70
 8007004:	20000288 	.word	0x20000288
 8007008:	20000f84 	.word	0x20000f84
 800700c:	2000029c 	.word	0x2000029c
 8007010:	20000f98 	.word	0x20000f98
 8007014:	200002b0 	.word	0x200002b0
 8007018:	20000fac 	.word	0x20000fac
 800701c:	200002c4 	.word	0x200002c4
 8007020:	20000fc0 	.word	0x20000fc0
 8007024:	200002d8 	.word	0x200002d8
 8007028:	20000fd4 	.word	0x20000fd4
 800702c:	200002ec 	.word	0x200002ec
 8007030:	20000fe8 	.word	0x20000fe8
 8007034:	20000300 	.word	0x20000300
 8007038:	20000ffc 	.word	0x20000ffc
 800703c:	20000314 	.word	0x20000314
 8007040:	20001010 	.word	0x20001010
 8007044:	20000328 	.word	0x20000328
 8007048:	20001024 	.word	0x20001024
 800704c:	2000033c 	.word	0x2000033c
 8007050:	20001038 	.word	0x20001038
 8007054:	20000350 	.word	0x20000350
 8007058:	2000104c 	.word	0x2000104c
 800705c:	20000364 	.word	0x20000364
 8007060:	20001060 	.word	0x20001060
 8007064:	20000378 	.word	0x20000378
 8007068:	20001074 	.word	0x20001074
 800706c:	2000038c 	.word	0x2000038c
 8007070:	20001088 	.word	0x20001088
 8007074:	200003a0 	.word	0x200003a0
 8007078:	2000109c 	.word	0x2000109c
 800707c:	200003b4 	.word	0x200003b4
 8007080:	200010b0 	.word	0x200010b0
 8007084:	200003c8 	.word	0x200003c8
 8007088:	200010c4 	.word	0x200010c4
 800708c:	200003dc 	.word	0x200003dc
 8007090:	200010d8 	.word	0x200010d8
 8007094:	4bc7      	ldr	r3, [pc, #796]	@ (80073b4 <loadMenuTexts+0x774>)
 8007096:	4614      	mov	r4, r2
 8007098:	461d      	mov	r5, r3
 800709a:	6828      	ldr	r0, [r5, #0]
 800709c:	6869      	ldr	r1, [r5, #4]
 800709e:	68aa      	ldr	r2, [r5, #8]
 80070a0:	68eb      	ldr	r3, [r5, #12]
 80070a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070a4:	7c2b      	ldrb	r3, [r5, #16]
 80070a6:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 80070a8:	4ac3      	ldr	r2, [pc, #780]	@ (80073b8 <loadMenuTexts+0x778>)
 80070aa:	4bc4      	ldr	r3, [pc, #784]	@ (80073bc <loadMenuTexts+0x77c>)
 80070ac:	4614      	mov	r4, r2
 80070ae:	461d      	mov	r5, r3
 80070b0:	6828      	ldr	r0, [r5, #0]
 80070b2:	6869      	ldr	r1, [r5, #4]
 80070b4:	68aa      	ldr	r2, [r5, #8]
 80070b6:	68eb      	ldr	r3, [r5, #12]
 80070b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070ba:	7c2b      	ldrb	r3, [r5, #16]
 80070bc:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 80070be:	4ac0      	ldr	r2, [pc, #768]	@ (80073c0 <loadMenuTexts+0x780>)
 80070c0:	4bc0      	ldr	r3, [pc, #768]	@ (80073c4 <loadMenuTexts+0x784>)
 80070c2:	4614      	mov	r4, r2
 80070c4:	461d      	mov	r5, r3
 80070c6:	6828      	ldr	r0, [r5, #0]
 80070c8:	6869      	ldr	r1, [r5, #4]
 80070ca:	68aa      	ldr	r2, [r5, #8]
 80070cc:	68eb      	ldr	r3, [r5, #12]
 80070ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070d0:	7c2b      	ldrb	r3, [r5, #16]
 80070d2:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 80070d4:	4abc      	ldr	r2, [pc, #752]	@ (80073c8 <loadMenuTexts+0x788>)
 80070d6:	4bbd      	ldr	r3, [pc, #756]	@ (80073cc <loadMenuTexts+0x78c>)
 80070d8:	4614      	mov	r4, r2
 80070da:	461d      	mov	r5, r3
 80070dc:	6828      	ldr	r0, [r5, #0]
 80070de:	6869      	ldr	r1, [r5, #4]
 80070e0:	68aa      	ldr	r2, [r5, #8]
 80070e2:	68eb      	ldr	r3, [r5, #12]
 80070e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070e6:	7c2b      	ldrb	r3, [r5, #16]
 80070e8:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 80070ea:	4ab9      	ldr	r2, [pc, #740]	@ (80073d0 <loadMenuTexts+0x790>)
 80070ec:	4bb9      	ldr	r3, [pc, #740]	@ (80073d4 <loadMenuTexts+0x794>)
 80070ee:	4614      	mov	r4, r2
 80070f0:	461d      	mov	r5, r3
 80070f2:	6828      	ldr	r0, [r5, #0]
 80070f4:	6869      	ldr	r1, [r5, #4]
 80070f6:	68aa      	ldr	r2, [r5, #8]
 80070f8:	68eb      	ldr	r3, [r5, #12]
 80070fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070fc:	7c2b      	ldrb	r3, [r5, #16]
 80070fe:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 8007100:	4ab5      	ldr	r2, [pc, #724]	@ (80073d8 <loadMenuTexts+0x798>)
 8007102:	4bb6      	ldr	r3, [pc, #728]	@ (80073dc <loadMenuTexts+0x79c>)
 8007104:	4614      	mov	r4, r2
 8007106:	461d      	mov	r5, r3
 8007108:	6828      	ldr	r0, [r5, #0]
 800710a:	6869      	ldr	r1, [r5, #4]
 800710c:	68aa      	ldr	r2, [r5, #8]
 800710e:	68eb      	ldr	r3, [r5, #12]
 8007110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007112:	7c2b      	ldrb	r3, [r5, #16]
 8007114:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 8007116:	4ab2      	ldr	r2, [pc, #712]	@ (80073e0 <loadMenuTexts+0x7a0>)
 8007118:	4bb2      	ldr	r3, [pc, #712]	@ (80073e4 <loadMenuTexts+0x7a4>)
 800711a:	4614      	mov	r4, r2
 800711c:	461d      	mov	r5, r3
 800711e:	6828      	ldr	r0, [r5, #0]
 8007120:	6869      	ldr	r1, [r5, #4]
 8007122:	68aa      	ldr	r2, [r5, #8]
 8007124:	68eb      	ldr	r3, [r5, #12]
 8007126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007128:	7c2b      	ldrb	r3, [r5, #16]
 800712a:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 800712c:	4aae      	ldr	r2, [pc, #696]	@ (80073e8 <loadMenuTexts+0x7a8>)
 800712e:	4baf      	ldr	r3, [pc, #700]	@ (80073ec <loadMenuTexts+0x7ac>)
 8007130:	4614      	mov	r4, r2
 8007132:	461d      	mov	r5, r3
 8007134:	6828      	ldr	r0, [r5, #0]
 8007136:	6869      	ldr	r1, [r5, #4]
 8007138:	68aa      	ldr	r2, [r5, #8]
 800713a:	68eb      	ldr	r3, [r5, #12]
 800713c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800713e:	7c2b      	ldrb	r3, [r5, #16]
 8007140:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 8007142:	4aab      	ldr	r2, [pc, #684]	@ (80073f0 <loadMenuTexts+0x7b0>)
 8007144:	4bab      	ldr	r3, [pc, #684]	@ (80073f4 <loadMenuTexts+0x7b4>)
 8007146:	4614      	mov	r4, r2
 8007148:	461d      	mov	r5, r3
 800714a:	6828      	ldr	r0, [r5, #0]
 800714c:	6869      	ldr	r1, [r5, #4]
 800714e:	68aa      	ldr	r2, [r5, #8]
 8007150:	68eb      	ldr	r3, [r5, #12]
 8007152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007154:	7c2b      	ldrb	r3, [r5, #16]
 8007156:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8007158:	4aa7      	ldr	r2, [pc, #668]	@ (80073f8 <loadMenuTexts+0x7b8>)
 800715a:	4ba8      	ldr	r3, [pc, #672]	@ (80073fc <loadMenuTexts+0x7bc>)
 800715c:	4614      	mov	r4, r2
 800715e:	461d      	mov	r5, r3
 8007160:	6828      	ldr	r0, [r5, #0]
 8007162:	6869      	ldr	r1, [r5, #4]
 8007164:	68aa      	ldr	r2, [r5, #8]
 8007166:	68eb      	ldr	r3, [r5, #12]
 8007168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800716a:	7c2b      	ldrb	r3, [r5, #16]
 800716c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 800716e:	4aa4      	ldr	r2, [pc, #656]	@ (8007400 <loadMenuTexts+0x7c0>)
 8007170:	4ba4      	ldr	r3, [pc, #656]	@ (8007404 <loadMenuTexts+0x7c4>)
 8007172:	4614      	mov	r4, r2
 8007174:	461d      	mov	r5, r3
 8007176:	6828      	ldr	r0, [r5, #0]
 8007178:	6869      	ldr	r1, [r5, #4]
 800717a:	68aa      	ldr	r2, [r5, #8]
 800717c:	68eb      	ldr	r3, [r5, #12]
 800717e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007180:	7c2b      	ldrb	r3, [r5, #16]
 8007182:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 8007184:	4aa0      	ldr	r2, [pc, #640]	@ (8007408 <loadMenuTexts+0x7c8>)
 8007186:	4ba1      	ldr	r3, [pc, #644]	@ (800740c <loadMenuTexts+0x7cc>)
 8007188:	4614      	mov	r4, r2
 800718a:	461d      	mov	r5, r3
 800718c:	6828      	ldr	r0, [r5, #0]
 800718e:	6869      	ldr	r1, [r5, #4]
 8007190:	68aa      	ldr	r2, [r5, #8]
 8007192:	68eb      	ldr	r3, [r5, #12]
 8007194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007196:	7c2b      	ldrb	r3, [r5, #16]
 8007198:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 800719a:	4a9d      	ldr	r2, [pc, #628]	@ (8007410 <loadMenuTexts+0x7d0>)
 800719c:	4b9d      	ldr	r3, [pc, #628]	@ (8007414 <loadMenuTexts+0x7d4>)
 800719e:	4614      	mov	r4, r2
 80071a0:	461d      	mov	r5, r3
 80071a2:	6828      	ldr	r0, [r5, #0]
 80071a4:	6869      	ldr	r1, [r5, #4]
 80071a6:	68aa      	ldr	r2, [r5, #8]
 80071a8:	68eb      	ldr	r3, [r5, #12]
 80071aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071ac:	7c2b      	ldrb	r3, [r5, #16]
 80071ae:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 80071b0:	4a99      	ldr	r2, [pc, #612]	@ (8007418 <loadMenuTexts+0x7d8>)
 80071b2:	4b9a      	ldr	r3, [pc, #616]	@ (800741c <loadMenuTexts+0x7dc>)
 80071b4:	4614      	mov	r4, r2
 80071b6:	461d      	mov	r5, r3
 80071b8:	6828      	ldr	r0, [r5, #0]
 80071ba:	6869      	ldr	r1, [r5, #4]
 80071bc:	68aa      	ldr	r2, [r5, #8]
 80071be:	68eb      	ldr	r3, [r5, #12]
 80071c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071c2:	7c2b      	ldrb	r3, [r5, #16]
 80071c4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 80071c6:	4a96      	ldr	r2, [pc, #600]	@ (8007420 <loadMenuTexts+0x7e0>)
 80071c8:	4b96      	ldr	r3, [pc, #600]	@ (8007424 <loadMenuTexts+0x7e4>)
 80071ca:	4614      	mov	r4, r2
 80071cc:	461d      	mov	r5, r3
 80071ce:	6828      	ldr	r0, [r5, #0]
 80071d0:	6869      	ldr	r1, [r5, #4]
 80071d2:	68aa      	ldr	r2, [r5, #8]
 80071d4:	68eb      	ldr	r3, [r5, #12]
 80071d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071d8:	7c2b      	ldrb	r3, [r5, #16]
 80071da:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 80071dc:	4a92      	ldr	r2, [pc, #584]	@ (8007428 <loadMenuTexts+0x7e8>)
 80071de:	4b93      	ldr	r3, [pc, #588]	@ (800742c <loadMenuTexts+0x7ec>)
 80071e0:	4614      	mov	r4, r2
 80071e2:	461d      	mov	r5, r3
 80071e4:	6828      	ldr	r0, [r5, #0]
 80071e6:	6869      	ldr	r1, [r5, #4]
 80071e8:	68aa      	ldr	r2, [r5, #8]
 80071ea:	68eb      	ldr	r3, [r5, #12]
 80071ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071ee:	7c2b      	ldrb	r3, [r5, #16]
 80071f0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 80071f2:	4a8f      	ldr	r2, [pc, #572]	@ (8007430 <loadMenuTexts+0x7f0>)
 80071f4:	4b8f      	ldr	r3, [pc, #572]	@ (8007434 <loadMenuTexts+0x7f4>)
 80071f6:	4614      	mov	r4, r2
 80071f8:	461d      	mov	r5, r3
 80071fa:	6828      	ldr	r0, [r5, #0]
 80071fc:	6869      	ldr	r1, [r5, #4]
 80071fe:	68aa      	ldr	r2, [r5, #8]
 8007200:	68eb      	ldr	r3, [r5, #12]
 8007202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007204:	7c2b      	ldrb	r3, [r5, #16]
 8007206:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 8007208:	4a8b      	ldr	r2, [pc, #556]	@ (8007438 <loadMenuTexts+0x7f8>)
 800720a:	4b8c      	ldr	r3, [pc, #560]	@ (800743c <loadMenuTexts+0x7fc>)
 800720c:	4614      	mov	r4, r2
 800720e:	461d      	mov	r5, r3
 8007210:	6828      	ldr	r0, [r5, #0]
 8007212:	6869      	ldr	r1, [r5, #4]
 8007214:	68aa      	ldr	r2, [r5, #8]
 8007216:	68eb      	ldr	r3, [r5, #12]
 8007218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800721a:	7c2b      	ldrb	r3, [r5, #16]
 800721c:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 800721e:	4a88      	ldr	r2, [pc, #544]	@ (8007440 <loadMenuTexts+0x800>)
 8007220:	4b88      	ldr	r3, [pc, #544]	@ (8007444 <loadMenuTexts+0x804>)
 8007222:	4614      	mov	r4, r2
 8007224:	461d      	mov	r5, r3
 8007226:	6828      	ldr	r0, [r5, #0]
 8007228:	6869      	ldr	r1, [r5, #4]
 800722a:	68aa      	ldr	r2, [r5, #8]
 800722c:	68eb      	ldr	r3, [r5, #12]
 800722e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007230:	7c2b      	ldrb	r3, [r5, #16]
 8007232:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8007234:	4a84      	ldr	r2, [pc, #528]	@ (8007448 <loadMenuTexts+0x808>)
 8007236:	4b85      	ldr	r3, [pc, #532]	@ (800744c <loadMenuTexts+0x80c>)
 8007238:	4614      	mov	r4, r2
 800723a:	461d      	mov	r5, r3
 800723c:	6828      	ldr	r0, [r5, #0]
 800723e:	6869      	ldr	r1, [r5, #4]
 8007240:	68aa      	ldr	r2, [r5, #8]
 8007242:	68eb      	ldr	r3, [r5, #12]
 8007244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007246:	7c2b      	ldrb	r3, [r5, #16]
 8007248:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 800724a:	4a81      	ldr	r2, [pc, #516]	@ (8007450 <loadMenuTexts+0x810>)
 800724c:	4b81      	ldr	r3, [pc, #516]	@ (8007454 <loadMenuTexts+0x814>)
 800724e:	4614      	mov	r4, r2
 8007250:	461d      	mov	r5, r3
 8007252:	6828      	ldr	r0, [r5, #0]
 8007254:	6869      	ldr	r1, [r5, #4]
 8007256:	68aa      	ldr	r2, [r5, #8]
 8007258:	68eb      	ldr	r3, [r5, #12]
 800725a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800725c:	7c2b      	ldrb	r3, [r5, #16]
 800725e:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 8007260:	4a7d      	ldr	r2, [pc, #500]	@ (8007458 <loadMenuTexts+0x818>)
 8007262:	4b7e      	ldr	r3, [pc, #504]	@ (800745c <loadMenuTexts+0x81c>)
 8007264:	4614      	mov	r4, r2
 8007266:	461d      	mov	r5, r3
 8007268:	6828      	ldr	r0, [r5, #0]
 800726a:	6869      	ldr	r1, [r5, #4]
 800726c:	68aa      	ldr	r2, [r5, #8]
 800726e:	68eb      	ldr	r3, [r5, #12]
 8007270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007272:	7c2b      	ldrb	r3, [r5, #16]
 8007274:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 8007276:	4a7a      	ldr	r2, [pc, #488]	@ (8007460 <loadMenuTexts+0x820>)
 8007278:	4b7a      	ldr	r3, [pc, #488]	@ (8007464 <loadMenuTexts+0x824>)
 800727a:	4614      	mov	r4, r2
 800727c:	461d      	mov	r5, r3
 800727e:	6828      	ldr	r0, [r5, #0]
 8007280:	6869      	ldr	r1, [r5, #4]
 8007282:	68aa      	ldr	r2, [r5, #8]
 8007284:	68eb      	ldr	r3, [r5, #12]
 8007286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007288:	7c2b      	ldrb	r3, [r5, #16]
 800728a:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 800728c:	4a76      	ldr	r2, [pc, #472]	@ (8007468 <loadMenuTexts+0x828>)
 800728e:	4b77      	ldr	r3, [pc, #476]	@ (800746c <loadMenuTexts+0x82c>)
 8007290:	4614      	mov	r4, r2
 8007292:	461d      	mov	r5, r3
 8007294:	6828      	ldr	r0, [r5, #0]
 8007296:	6869      	ldr	r1, [r5, #4]
 8007298:	68aa      	ldr	r2, [r5, #8]
 800729a:	68eb      	ldr	r3, [r5, #12]
 800729c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800729e:	7c2b      	ldrb	r3, [r5, #16]
 80072a0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 80072a2:	4a73      	ldr	r2, [pc, #460]	@ (8007470 <loadMenuTexts+0x830>)
 80072a4:	4b73      	ldr	r3, [pc, #460]	@ (8007474 <loadMenuTexts+0x834>)
 80072a6:	4614      	mov	r4, r2
 80072a8:	461d      	mov	r5, r3
 80072aa:	6828      	ldr	r0, [r5, #0]
 80072ac:	6869      	ldr	r1, [r5, #4]
 80072ae:	68aa      	ldr	r2, [r5, #8]
 80072b0:	68eb      	ldr	r3, [r5, #12]
 80072b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072b4:	7c2b      	ldrb	r3, [r5, #16]
 80072b6:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 80072b8:	4a6f      	ldr	r2, [pc, #444]	@ (8007478 <loadMenuTexts+0x838>)
 80072ba:	4b70      	ldr	r3, [pc, #448]	@ (800747c <loadMenuTexts+0x83c>)
 80072bc:	4614      	mov	r4, r2
 80072be:	461d      	mov	r5, r3
 80072c0:	6828      	ldr	r0, [r5, #0]
 80072c2:	6869      	ldr	r1, [r5, #4]
 80072c4:	68aa      	ldr	r2, [r5, #8]
 80072c6:	68eb      	ldr	r3, [r5, #12]
 80072c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ca:	7c2b      	ldrb	r3, [r5, #16]
 80072cc:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 80072ce:	4a6c      	ldr	r2, [pc, #432]	@ (8007480 <loadMenuTexts+0x840>)
 80072d0:	4b6c      	ldr	r3, [pc, #432]	@ (8007484 <loadMenuTexts+0x844>)
 80072d2:	4614      	mov	r4, r2
 80072d4:	461d      	mov	r5, r3
 80072d6:	6828      	ldr	r0, [r5, #0]
 80072d8:	6869      	ldr	r1, [r5, #4]
 80072da:	68aa      	ldr	r2, [r5, #8]
 80072dc:	68eb      	ldr	r3, [r5, #12]
 80072de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072e0:	7c2b      	ldrb	r3, [r5, #16]
 80072e2:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 80072e4:	4a68      	ldr	r2, [pc, #416]	@ (8007488 <loadMenuTexts+0x848>)
 80072e6:	4b69      	ldr	r3, [pc, #420]	@ (800748c <loadMenuTexts+0x84c>)
 80072e8:	4614      	mov	r4, r2
 80072ea:	461d      	mov	r5, r3
 80072ec:	6828      	ldr	r0, [r5, #0]
 80072ee:	6869      	ldr	r1, [r5, #4]
 80072f0:	68aa      	ldr	r2, [r5, #8]
 80072f2:	68eb      	ldr	r3, [r5, #12]
 80072f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072f6:	7c2b      	ldrb	r3, [r5, #16]
 80072f8:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 80072fa:	4a65      	ldr	r2, [pc, #404]	@ (8007490 <loadMenuTexts+0x850>)
 80072fc:	4b65      	ldr	r3, [pc, #404]	@ (8007494 <loadMenuTexts+0x854>)
 80072fe:	4614      	mov	r4, r2
 8007300:	461d      	mov	r5, r3
 8007302:	6828      	ldr	r0, [r5, #0]
 8007304:	6869      	ldr	r1, [r5, #4]
 8007306:	68aa      	ldr	r2, [r5, #8]
 8007308:	68eb      	ldr	r3, [r5, #12]
 800730a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800730c:	7c2b      	ldrb	r3, [r5, #16]
 800730e:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 8007310:	4a61      	ldr	r2, [pc, #388]	@ (8007498 <loadMenuTexts+0x858>)
 8007312:	4b62      	ldr	r3, [pc, #392]	@ (800749c <loadMenuTexts+0x85c>)
 8007314:	4614      	mov	r4, r2
 8007316:	461d      	mov	r5, r3
 8007318:	6828      	ldr	r0, [r5, #0]
 800731a:	6869      	ldr	r1, [r5, #4]
 800731c:	68aa      	ldr	r2, [r5, #8]
 800731e:	68eb      	ldr	r3, [r5, #12]
 8007320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007322:	7c2b      	ldrb	r3, [r5, #16]
 8007324:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 8007326:	4a5e      	ldr	r2, [pc, #376]	@ (80074a0 <loadMenuTexts+0x860>)
 8007328:	4b5e      	ldr	r3, [pc, #376]	@ (80074a4 <loadMenuTexts+0x864>)
 800732a:	4614      	mov	r4, r2
 800732c:	461d      	mov	r5, r3
 800732e:	6828      	ldr	r0, [r5, #0]
 8007330:	6869      	ldr	r1, [r5, #4]
 8007332:	68aa      	ldr	r2, [r5, #8]
 8007334:	68eb      	ldr	r3, [r5, #12]
 8007336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007338:	7c2b      	ldrb	r3, [r5, #16]
 800733a:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 800733c:	4a5a      	ldr	r2, [pc, #360]	@ (80074a8 <loadMenuTexts+0x868>)
 800733e:	4b5b      	ldr	r3, [pc, #364]	@ (80074ac <loadMenuTexts+0x86c>)
 8007340:	4614      	mov	r4, r2
 8007342:	461d      	mov	r5, r3
 8007344:	6828      	ldr	r0, [r5, #0]
 8007346:	6869      	ldr	r1, [r5, #4]
 8007348:	68aa      	ldr	r2, [r5, #8]
 800734a:	68eb      	ldr	r3, [r5, #12]
 800734c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800734e:	7c2b      	ldrb	r3, [r5, #16]
 8007350:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 8007352:	4a57      	ldr	r2, [pc, #348]	@ (80074b0 <loadMenuTexts+0x870>)
 8007354:	4b57      	ldr	r3, [pc, #348]	@ (80074b4 <loadMenuTexts+0x874>)
 8007356:	4614      	mov	r4, r2
 8007358:	461d      	mov	r5, r3
 800735a:	6828      	ldr	r0, [r5, #0]
 800735c:	6869      	ldr	r1, [r5, #4]
 800735e:	68aa      	ldr	r2, [r5, #8]
 8007360:	68eb      	ldr	r3, [r5, #12]
 8007362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007364:	7c2b      	ldrb	r3, [r5, #16]
 8007366:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8007368:	4a53      	ldr	r2, [pc, #332]	@ (80074b8 <loadMenuTexts+0x878>)
 800736a:	4b54      	ldr	r3, [pc, #336]	@ (80074bc <loadMenuTexts+0x87c>)
 800736c:	4614      	mov	r4, r2
 800736e:	461d      	mov	r5, r3
 8007370:	6828      	ldr	r0, [r5, #0]
 8007372:	6869      	ldr	r1, [r5, #4]
 8007374:	68aa      	ldr	r2, [r5, #8]
 8007376:	68eb      	ldr	r3, [r5, #12]
 8007378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800737a:	7c2b      	ldrb	r3, [r5, #16]
 800737c:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 800737e:	4a50      	ldr	r2, [pc, #320]	@ (80074c0 <loadMenuTexts+0x880>)
 8007380:	4b50      	ldr	r3, [pc, #320]	@ (80074c4 <loadMenuTexts+0x884>)
 8007382:	4614      	mov	r4, r2
 8007384:	461d      	mov	r5, r3
 8007386:	6828      	ldr	r0, [r5, #0]
 8007388:	6869      	ldr	r1, [r5, #4]
 800738a:	68aa      	ldr	r2, [r5, #8]
 800738c:	68eb      	ldr	r3, [r5, #12]
 800738e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007390:	7c2b      	ldrb	r3, [r5, #16]
 8007392:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8007394:	4a4c      	ldr	r2, [pc, #304]	@ (80074c8 <loadMenuTexts+0x888>)
 8007396:	4b4d      	ldr	r3, [pc, #308]	@ (80074cc <loadMenuTexts+0x88c>)
 8007398:	4614      	mov	r4, r2
 800739a:	461d      	mov	r5, r3
 800739c:	6828      	ldr	r0, [r5, #0]
 800739e:	6869      	ldr	r1, [r5, #4]
 80073a0:	68aa      	ldr	r2, [r5, #8]
 80073a2:	68eb      	ldr	r3, [r5, #12]
 80073a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073a6:	7c2b      	ldrb	r3, [r5, #16]
 80073a8:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 80073aa:	4a49      	ldr	r2, [pc, #292]	@ (80074d0 <loadMenuTexts+0x890>)
 80073ac:	4b49      	ldr	r3, [pc, #292]	@ (80074d4 <loadMenuTexts+0x894>)
 80073ae:	4614      	mov	r4, r2
 80073b0:	461d      	mov	r5, r3
 80073b2:	e091      	b.n	80074d8 <loadMenuTexts+0x898>
 80073b4:	200003f0 	.word	0x200003f0
 80073b8:	200010ec 	.word	0x200010ec
 80073bc:	20000404 	.word	0x20000404
 80073c0:	20001100 	.word	0x20001100
 80073c4:	20000418 	.word	0x20000418
 80073c8:	20001114 	.word	0x20001114
 80073cc:	2000042c 	.word	0x2000042c
 80073d0:	20001128 	.word	0x20001128
 80073d4:	20000440 	.word	0x20000440
 80073d8:	2000113c 	.word	0x2000113c
 80073dc:	20000454 	.word	0x20000454
 80073e0:	20001150 	.word	0x20001150
 80073e4:	20000468 	.word	0x20000468
 80073e8:	20001164 	.word	0x20001164
 80073ec:	2000047c 	.word	0x2000047c
 80073f0:	20001178 	.word	0x20001178
 80073f4:	20000490 	.word	0x20000490
 80073f8:	2000118c 	.word	0x2000118c
 80073fc:	200004a4 	.word	0x200004a4
 8007400:	200011a0 	.word	0x200011a0
 8007404:	200004b8 	.word	0x200004b8
 8007408:	200011b4 	.word	0x200011b4
 800740c:	200004cc 	.word	0x200004cc
 8007410:	200011c8 	.word	0x200011c8
 8007414:	200004e0 	.word	0x200004e0
 8007418:	200011dc 	.word	0x200011dc
 800741c:	200004f4 	.word	0x200004f4
 8007420:	200011f0 	.word	0x200011f0
 8007424:	20000508 	.word	0x20000508
 8007428:	20001204 	.word	0x20001204
 800742c:	2000051c 	.word	0x2000051c
 8007430:	20001218 	.word	0x20001218
 8007434:	20000530 	.word	0x20000530
 8007438:	2000122c 	.word	0x2000122c
 800743c:	20000544 	.word	0x20000544
 8007440:	20001240 	.word	0x20001240
 8007444:	20000558 	.word	0x20000558
 8007448:	20001254 	.word	0x20001254
 800744c:	2000056c 	.word	0x2000056c
 8007450:	20001268 	.word	0x20001268
 8007454:	20000580 	.word	0x20000580
 8007458:	2000127c 	.word	0x2000127c
 800745c:	20000594 	.word	0x20000594
 8007460:	20001290 	.word	0x20001290
 8007464:	200005a8 	.word	0x200005a8
 8007468:	200012a4 	.word	0x200012a4
 800746c:	200005bc 	.word	0x200005bc
 8007470:	200012b8 	.word	0x200012b8
 8007474:	200005d0 	.word	0x200005d0
 8007478:	200012cc 	.word	0x200012cc
 800747c:	200005e4 	.word	0x200005e4
 8007480:	200012e0 	.word	0x200012e0
 8007484:	200005f8 	.word	0x200005f8
 8007488:	200012f4 	.word	0x200012f4
 800748c:	2000060c 	.word	0x2000060c
 8007490:	20001308 	.word	0x20001308
 8007494:	20000620 	.word	0x20000620
 8007498:	2000131c 	.word	0x2000131c
 800749c:	20000634 	.word	0x20000634
 80074a0:	20001330 	.word	0x20001330
 80074a4:	20000648 	.word	0x20000648
 80074a8:	20001344 	.word	0x20001344
 80074ac:	2000065c 	.word	0x2000065c
 80074b0:	20001358 	.word	0x20001358
 80074b4:	20000670 	.word	0x20000670
 80074b8:	2000136c 	.word	0x2000136c
 80074bc:	20000684 	.word	0x20000684
 80074c0:	20001380 	.word	0x20001380
 80074c4:	20000c10 	.word	0x20000c10
 80074c8:	20001394 	.word	0x20001394
 80074cc:	20000c38 	.word	0x20000c38
 80074d0:	200013a8 	.word	0x200013a8
 80074d4:	20000c60 	.word	0x20000c60
 80074d8:	6828      	ldr	r0, [r5, #0]
 80074da:	6869      	ldr	r1, [r5, #4]
 80074dc:	68aa      	ldr	r2, [r5, #8]
 80074de:	68eb      	ldr	r3, [r5, #12]
 80074e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074e2:	7c2b      	ldrb	r3, [r5, #16]
 80074e4:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 80074e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007518 <loadMenuTexts+0x8d8>)
 80074e8:	4b0c      	ldr	r3, [pc, #48]	@ (800751c <loadMenuTexts+0x8dc>)
 80074ea:	4614      	mov	r4, r2
 80074ec:	461d      	mov	r5, r3
 80074ee:	6828      	ldr	r0, [r5, #0]
 80074f0:	6869      	ldr	r1, [r5, #4]
 80074f2:	68aa      	ldr	r2, [r5, #8]
 80074f4:	68eb      	ldr	r3, [r5, #12]
 80074f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074f8:	7c2b      	ldrb	r3, [r5, #16]
 80074fa:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 80074fc:	4a08      	ldr	r2, [pc, #32]	@ (8007520 <loadMenuTexts+0x8e0>)
 80074fe:	4b09      	ldr	r3, [pc, #36]	@ (8007524 <loadMenuTexts+0x8e4>)
 8007500:	4614      	mov	r4, r2
 8007502:	461d      	mov	r5, r3
 8007504:	6828      	ldr	r0, [r5, #0]
 8007506:	6869      	ldr	r1, [r5, #4]
 8007508:	68aa      	ldr	r2, [r5, #8]
 800750a:	68eb      	ldr	r3, [r5, #12]
 800750c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800750e:	7c2b      	ldrb	r3, [r5, #16]
 8007510:	7023      	strb	r3, [r4, #0]
 8007512:	f000 bc68 	b.w	8007de6 <loadMenuTexts+0x11a6>
 8007516:	bf00      	nop
 8007518:	200013bc 	.word	0x200013bc
 800751c:	20000c88 	.word	0x20000c88
 8007520:	200013d0 	.word	0x200013d0
 8007524:	20000cb0 	.word	0x20000cb0
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8007528:	4ac6      	ldr	r2, [pc, #792]	@ (8007844 <loadMenuTexts+0xc04>)
 800752a:	4bc7      	ldr	r3, [pc, #796]	@ (8007848 <loadMenuTexts+0xc08>)
 800752c:	4614      	mov	r4, r2
 800752e:	461d      	mov	r5, r3
 8007530:	6828      	ldr	r0, [r5, #0]
 8007532:	6869      	ldr	r1, [r5, #4]
 8007534:	68aa      	ldr	r2, [r5, #8]
 8007536:	68eb      	ldr	r3, [r5, #12]
 8007538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800753a:	7c2b      	ldrb	r3, [r5, #16]
 800753c:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 800753e:	4ac3      	ldr	r2, [pc, #780]	@ (800784c <loadMenuTexts+0xc0c>)
 8007540:	4bc3      	ldr	r3, [pc, #780]	@ (8007850 <loadMenuTexts+0xc10>)
 8007542:	4614      	mov	r4, r2
 8007544:	461d      	mov	r5, r3
 8007546:	6828      	ldr	r0, [r5, #0]
 8007548:	6869      	ldr	r1, [r5, #4]
 800754a:	68aa      	ldr	r2, [r5, #8]
 800754c:	68eb      	ldr	r3, [r5, #12]
 800754e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007550:	7c2b      	ldrb	r3, [r5, #16]
 8007552:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8007554:	4abf      	ldr	r2, [pc, #764]	@ (8007854 <loadMenuTexts+0xc14>)
 8007556:	4bc0      	ldr	r3, [pc, #768]	@ (8007858 <loadMenuTexts+0xc18>)
 8007558:	4614      	mov	r4, r2
 800755a:	461d      	mov	r5, r3
 800755c:	6828      	ldr	r0, [r5, #0]
 800755e:	6869      	ldr	r1, [r5, #4]
 8007560:	68aa      	ldr	r2, [r5, #8]
 8007562:	68eb      	ldr	r3, [r5, #12]
 8007564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007566:	7c2b      	ldrb	r3, [r5, #16]
 8007568:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 800756a:	4abc      	ldr	r2, [pc, #752]	@ (800785c <loadMenuTexts+0xc1c>)
 800756c:	4bbc      	ldr	r3, [pc, #752]	@ (8007860 <loadMenuTexts+0xc20>)
 800756e:	4614      	mov	r4, r2
 8007570:	461d      	mov	r5, r3
 8007572:	6828      	ldr	r0, [r5, #0]
 8007574:	6869      	ldr	r1, [r5, #4]
 8007576:	68aa      	ldr	r2, [r5, #8]
 8007578:	68eb      	ldr	r3, [r5, #12]
 800757a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800757c:	7c2b      	ldrb	r3, [r5, #16]
 800757e:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8007580:	4ab8      	ldr	r2, [pc, #736]	@ (8007864 <loadMenuTexts+0xc24>)
 8007582:	4bb9      	ldr	r3, [pc, #740]	@ (8007868 <loadMenuTexts+0xc28>)
 8007584:	4614      	mov	r4, r2
 8007586:	461d      	mov	r5, r3
 8007588:	6828      	ldr	r0, [r5, #0]
 800758a:	6869      	ldr	r1, [r5, #4]
 800758c:	68aa      	ldr	r2, [r5, #8]
 800758e:	68eb      	ldr	r3, [r5, #12]
 8007590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007592:	7c2b      	ldrb	r3, [r5, #16]
 8007594:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8007596:	4ab5      	ldr	r2, [pc, #724]	@ (800786c <loadMenuTexts+0xc2c>)
 8007598:	4bb5      	ldr	r3, [pc, #724]	@ (8007870 <loadMenuTexts+0xc30>)
 800759a:	4614      	mov	r4, r2
 800759c:	461d      	mov	r5, r3
 800759e:	6828      	ldr	r0, [r5, #0]
 80075a0:	6869      	ldr	r1, [r5, #4]
 80075a2:	68aa      	ldr	r2, [r5, #8]
 80075a4:	68eb      	ldr	r3, [r5, #12]
 80075a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075a8:	7c2b      	ldrb	r3, [r5, #16]
 80075aa:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 80075ac:	4ab1      	ldr	r2, [pc, #708]	@ (8007874 <loadMenuTexts+0xc34>)
 80075ae:	4bb2      	ldr	r3, [pc, #712]	@ (8007878 <loadMenuTexts+0xc38>)
 80075b0:	4614      	mov	r4, r2
 80075b2:	461d      	mov	r5, r3
 80075b4:	6828      	ldr	r0, [r5, #0]
 80075b6:	6869      	ldr	r1, [r5, #4]
 80075b8:	68aa      	ldr	r2, [r5, #8]
 80075ba:	68eb      	ldr	r3, [r5, #12]
 80075bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075be:	7c2b      	ldrb	r3, [r5, #16]
 80075c0:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 80075c2:	4aae      	ldr	r2, [pc, #696]	@ (800787c <loadMenuTexts+0xc3c>)
 80075c4:	4bae      	ldr	r3, [pc, #696]	@ (8007880 <loadMenuTexts+0xc40>)
 80075c6:	4614      	mov	r4, r2
 80075c8:	461d      	mov	r5, r3
 80075ca:	6828      	ldr	r0, [r5, #0]
 80075cc:	6869      	ldr	r1, [r5, #4]
 80075ce:	68aa      	ldr	r2, [r5, #8]
 80075d0:	68eb      	ldr	r3, [r5, #12]
 80075d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075d4:	7c2b      	ldrb	r3, [r5, #16]
 80075d6:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 80075d8:	4aaa      	ldr	r2, [pc, #680]	@ (8007884 <loadMenuTexts+0xc44>)
 80075da:	4bab      	ldr	r3, [pc, #684]	@ (8007888 <loadMenuTexts+0xc48>)
 80075dc:	4614      	mov	r4, r2
 80075de:	461d      	mov	r5, r3
 80075e0:	6828      	ldr	r0, [r5, #0]
 80075e2:	6869      	ldr	r1, [r5, #4]
 80075e4:	68aa      	ldr	r2, [r5, #8]
 80075e6:	68eb      	ldr	r3, [r5, #12]
 80075e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075ea:	7c2b      	ldrb	r3, [r5, #16]
 80075ec:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 80075ee:	4aa7      	ldr	r2, [pc, #668]	@ (800788c <loadMenuTexts+0xc4c>)
 80075f0:	4ba7      	ldr	r3, [pc, #668]	@ (8007890 <loadMenuTexts+0xc50>)
 80075f2:	4614      	mov	r4, r2
 80075f4:	461d      	mov	r5, r3
 80075f6:	6828      	ldr	r0, [r5, #0]
 80075f8:	6869      	ldr	r1, [r5, #4]
 80075fa:	68aa      	ldr	r2, [r5, #8]
 80075fc:	68eb      	ldr	r3, [r5, #12]
 80075fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007600:	7c2b      	ldrb	r3, [r5, #16]
 8007602:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8007604:	4aa3      	ldr	r2, [pc, #652]	@ (8007894 <loadMenuTexts+0xc54>)
 8007606:	4ba4      	ldr	r3, [pc, #656]	@ (8007898 <loadMenuTexts+0xc58>)
 8007608:	4614      	mov	r4, r2
 800760a:	461d      	mov	r5, r3
 800760c:	6828      	ldr	r0, [r5, #0]
 800760e:	6869      	ldr	r1, [r5, #4]
 8007610:	68aa      	ldr	r2, [r5, #8]
 8007612:	68eb      	ldr	r3, [r5, #12]
 8007614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007616:	7c2b      	ldrb	r3, [r5, #16]
 8007618:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 800761a:	4aa0      	ldr	r2, [pc, #640]	@ (800789c <loadMenuTexts+0xc5c>)
 800761c:	4ba0      	ldr	r3, [pc, #640]	@ (80078a0 <loadMenuTexts+0xc60>)
 800761e:	4614      	mov	r4, r2
 8007620:	461d      	mov	r5, r3
 8007622:	6828      	ldr	r0, [r5, #0]
 8007624:	6869      	ldr	r1, [r5, #4]
 8007626:	68aa      	ldr	r2, [r5, #8]
 8007628:	68eb      	ldr	r3, [r5, #12]
 800762a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800762c:	7c2b      	ldrb	r3, [r5, #16]
 800762e:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8007630:	4a9c      	ldr	r2, [pc, #624]	@ (80078a4 <loadMenuTexts+0xc64>)
 8007632:	4b9d      	ldr	r3, [pc, #628]	@ (80078a8 <loadMenuTexts+0xc68>)
 8007634:	4614      	mov	r4, r2
 8007636:	461d      	mov	r5, r3
 8007638:	6828      	ldr	r0, [r5, #0]
 800763a:	6869      	ldr	r1, [r5, #4]
 800763c:	68aa      	ldr	r2, [r5, #8]
 800763e:	68eb      	ldr	r3, [r5, #12]
 8007640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007642:	7c2b      	ldrb	r3, [r5, #16]
 8007644:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8007646:	4a99      	ldr	r2, [pc, #612]	@ (80078ac <loadMenuTexts+0xc6c>)
 8007648:	4b99      	ldr	r3, [pc, #612]	@ (80078b0 <loadMenuTexts+0xc70>)
 800764a:	4614      	mov	r4, r2
 800764c:	461d      	mov	r5, r3
 800764e:	6828      	ldr	r0, [r5, #0]
 8007650:	6869      	ldr	r1, [r5, #4]
 8007652:	68aa      	ldr	r2, [r5, #8]
 8007654:	68eb      	ldr	r3, [r5, #12]
 8007656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007658:	7c2b      	ldrb	r3, [r5, #16]
 800765a:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 800765c:	4a95      	ldr	r2, [pc, #596]	@ (80078b4 <loadMenuTexts+0xc74>)
 800765e:	4b96      	ldr	r3, [pc, #600]	@ (80078b8 <loadMenuTexts+0xc78>)
 8007660:	4614      	mov	r4, r2
 8007662:	461d      	mov	r5, r3
 8007664:	6828      	ldr	r0, [r5, #0]
 8007666:	6869      	ldr	r1, [r5, #4]
 8007668:	68aa      	ldr	r2, [r5, #8]
 800766a:	68eb      	ldr	r3, [r5, #12]
 800766c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800766e:	7c2b      	ldrb	r3, [r5, #16]
 8007670:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8007672:	4a92      	ldr	r2, [pc, #584]	@ (80078bc <loadMenuTexts+0xc7c>)
 8007674:	4b92      	ldr	r3, [pc, #584]	@ (80078c0 <loadMenuTexts+0xc80>)
 8007676:	4614      	mov	r4, r2
 8007678:	461d      	mov	r5, r3
 800767a:	6828      	ldr	r0, [r5, #0]
 800767c:	6869      	ldr	r1, [r5, #4]
 800767e:	68aa      	ldr	r2, [r5, #8]
 8007680:	68eb      	ldr	r3, [r5, #12]
 8007682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007684:	7c2b      	ldrb	r3, [r5, #16]
 8007686:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8007688:	4a8e      	ldr	r2, [pc, #568]	@ (80078c4 <loadMenuTexts+0xc84>)
 800768a:	4b8f      	ldr	r3, [pc, #572]	@ (80078c8 <loadMenuTexts+0xc88>)
 800768c:	4614      	mov	r4, r2
 800768e:	461d      	mov	r5, r3
 8007690:	6828      	ldr	r0, [r5, #0]
 8007692:	6869      	ldr	r1, [r5, #4]
 8007694:	68aa      	ldr	r2, [r5, #8]
 8007696:	68eb      	ldr	r3, [r5, #12]
 8007698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800769a:	7c2b      	ldrb	r3, [r5, #16]
 800769c:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 800769e:	4a8b      	ldr	r2, [pc, #556]	@ (80078cc <loadMenuTexts+0xc8c>)
 80076a0:	4b8b      	ldr	r3, [pc, #556]	@ (80078d0 <loadMenuTexts+0xc90>)
 80076a2:	4614      	mov	r4, r2
 80076a4:	461d      	mov	r5, r3
 80076a6:	6828      	ldr	r0, [r5, #0]
 80076a8:	6869      	ldr	r1, [r5, #4]
 80076aa:	68aa      	ldr	r2, [r5, #8]
 80076ac:	68eb      	ldr	r3, [r5, #12]
 80076ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076b0:	7c2b      	ldrb	r3, [r5, #16]
 80076b2:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 80076b4:	4a87      	ldr	r2, [pc, #540]	@ (80078d4 <loadMenuTexts+0xc94>)
 80076b6:	4b88      	ldr	r3, [pc, #544]	@ (80078d8 <loadMenuTexts+0xc98>)
 80076b8:	4614      	mov	r4, r2
 80076ba:	461d      	mov	r5, r3
 80076bc:	6828      	ldr	r0, [r5, #0]
 80076be:	6869      	ldr	r1, [r5, #4]
 80076c0:	68aa      	ldr	r2, [r5, #8]
 80076c2:	68eb      	ldr	r3, [r5, #12]
 80076c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076c6:	7c2b      	ldrb	r3, [r5, #16]
 80076c8:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 80076ca:	4a84      	ldr	r2, [pc, #528]	@ (80078dc <loadMenuTexts+0xc9c>)
 80076cc:	4b84      	ldr	r3, [pc, #528]	@ (80078e0 <loadMenuTexts+0xca0>)
 80076ce:	4614      	mov	r4, r2
 80076d0:	461d      	mov	r5, r3
 80076d2:	6828      	ldr	r0, [r5, #0]
 80076d4:	6869      	ldr	r1, [r5, #4]
 80076d6:	68aa      	ldr	r2, [r5, #8]
 80076d8:	68eb      	ldr	r3, [r5, #12]
 80076da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076dc:	7c2b      	ldrb	r3, [r5, #16]
 80076de:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 80076e0:	4a80      	ldr	r2, [pc, #512]	@ (80078e4 <loadMenuTexts+0xca4>)
 80076e2:	4b81      	ldr	r3, [pc, #516]	@ (80078e8 <loadMenuTexts+0xca8>)
 80076e4:	4614      	mov	r4, r2
 80076e6:	461d      	mov	r5, r3
 80076e8:	6828      	ldr	r0, [r5, #0]
 80076ea:	6869      	ldr	r1, [r5, #4]
 80076ec:	68aa      	ldr	r2, [r5, #8]
 80076ee:	68eb      	ldr	r3, [r5, #12]
 80076f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076f2:	7c2b      	ldrb	r3, [r5, #16]
 80076f4:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 80076f6:	4a7d      	ldr	r2, [pc, #500]	@ (80078ec <loadMenuTexts+0xcac>)
 80076f8:	4b7d      	ldr	r3, [pc, #500]	@ (80078f0 <loadMenuTexts+0xcb0>)
 80076fa:	4614      	mov	r4, r2
 80076fc:	461d      	mov	r5, r3
 80076fe:	6828      	ldr	r0, [r5, #0]
 8007700:	6869      	ldr	r1, [r5, #4]
 8007702:	68aa      	ldr	r2, [r5, #8]
 8007704:	68eb      	ldr	r3, [r5, #12]
 8007706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007708:	7c2b      	ldrb	r3, [r5, #16]
 800770a:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 800770c:	4a79      	ldr	r2, [pc, #484]	@ (80078f4 <loadMenuTexts+0xcb4>)
 800770e:	4b7a      	ldr	r3, [pc, #488]	@ (80078f8 <loadMenuTexts+0xcb8>)
 8007710:	4614      	mov	r4, r2
 8007712:	461d      	mov	r5, r3
 8007714:	6828      	ldr	r0, [r5, #0]
 8007716:	6869      	ldr	r1, [r5, #4]
 8007718:	68aa      	ldr	r2, [r5, #8]
 800771a:	68eb      	ldr	r3, [r5, #12]
 800771c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800771e:	7c2b      	ldrb	r3, [r5, #16]
 8007720:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8007722:	4a76      	ldr	r2, [pc, #472]	@ (80078fc <loadMenuTexts+0xcbc>)
 8007724:	4b76      	ldr	r3, [pc, #472]	@ (8007900 <loadMenuTexts+0xcc0>)
 8007726:	4614      	mov	r4, r2
 8007728:	461d      	mov	r5, r3
 800772a:	6828      	ldr	r0, [r5, #0]
 800772c:	6869      	ldr	r1, [r5, #4]
 800772e:	68aa      	ldr	r2, [r5, #8]
 8007730:	68eb      	ldr	r3, [r5, #12]
 8007732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007734:	7c2b      	ldrb	r3, [r5, #16]
 8007736:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8007738:	4a72      	ldr	r2, [pc, #456]	@ (8007904 <loadMenuTexts+0xcc4>)
 800773a:	4b73      	ldr	r3, [pc, #460]	@ (8007908 <loadMenuTexts+0xcc8>)
 800773c:	4614      	mov	r4, r2
 800773e:	461d      	mov	r5, r3
 8007740:	6828      	ldr	r0, [r5, #0]
 8007742:	6869      	ldr	r1, [r5, #4]
 8007744:	68aa      	ldr	r2, [r5, #8]
 8007746:	68eb      	ldr	r3, [r5, #12]
 8007748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800774a:	7c2b      	ldrb	r3, [r5, #16]
 800774c:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 800774e:	4a6f      	ldr	r2, [pc, #444]	@ (800790c <loadMenuTexts+0xccc>)
 8007750:	4b6f      	ldr	r3, [pc, #444]	@ (8007910 <loadMenuTexts+0xcd0>)
 8007752:	4614      	mov	r4, r2
 8007754:	461d      	mov	r5, r3
 8007756:	6828      	ldr	r0, [r5, #0]
 8007758:	6869      	ldr	r1, [r5, #4]
 800775a:	68aa      	ldr	r2, [r5, #8]
 800775c:	68eb      	ldr	r3, [r5, #12]
 800775e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007760:	7c2b      	ldrb	r3, [r5, #16]
 8007762:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8007764:	4a6b      	ldr	r2, [pc, #428]	@ (8007914 <loadMenuTexts+0xcd4>)
 8007766:	4b6c      	ldr	r3, [pc, #432]	@ (8007918 <loadMenuTexts+0xcd8>)
 8007768:	4614      	mov	r4, r2
 800776a:	461d      	mov	r5, r3
 800776c:	6828      	ldr	r0, [r5, #0]
 800776e:	6869      	ldr	r1, [r5, #4]
 8007770:	68aa      	ldr	r2, [r5, #8]
 8007772:	68eb      	ldr	r3, [r5, #12]
 8007774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007776:	7c2b      	ldrb	r3, [r5, #16]
 8007778:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 800777a:	4a68      	ldr	r2, [pc, #416]	@ (800791c <loadMenuTexts+0xcdc>)
 800777c:	4b68      	ldr	r3, [pc, #416]	@ (8007920 <loadMenuTexts+0xce0>)
 800777e:	4614      	mov	r4, r2
 8007780:	461d      	mov	r5, r3
 8007782:	6828      	ldr	r0, [r5, #0]
 8007784:	6869      	ldr	r1, [r5, #4]
 8007786:	68aa      	ldr	r2, [r5, #8]
 8007788:	68eb      	ldr	r3, [r5, #12]
 800778a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800778c:	7c2b      	ldrb	r3, [r5, #16]
 800778e:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8007790:	4a64      	ldr	r2, [pc, #400]	@ (8007924 <loadMenuTexts+0xce4>)
 8007792:	4b65      	ldr	r3, [pc, #404]	@ (8007928 <loadMenuTexts+0xce8>)
 8007794:	4614      	mov	r4, r2
 8007796:	461d      	mov	r5, r3
 8007798:	6828      	ldr	r0, [r5, #0]
 800779a:	6869      	ldr	r1, [r5, #4]
 800779c:	68aa      	ldr	r2, [r5, #8]
 800779e:	68eb      	ldr	r3, [r5, #12]
 80077a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077a2:	7c2b      	ldrb	r3, [r5, #16]
 80077a4:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 80077a6:	4a61      	ldr	r2, [pc, #388]	@ (800792c <loadMenuTexts+0xcec>)
 80077a8:	4b61      	ldr	r3, [pc, #388]	@ (8007930 <loadMenuTexts+0xcf0>)
 80077aa:	4614      	mov	r4, r2
 80077ac:	461d      	mov	r5, r3
 80077ae:	6828      	ldr	r0, [r5, #0]
 80077b0:	6869      	ldr	r1, [r5, #4]
 80077b2:	68aa      	ldr	r2, [r5, #8]
 80077b4:	68eb      	ldr	r3, [r5, #12]
 80077b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077b8:	7c2b      	ldrb	r3, [r5, #16]
 80077ba:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 80077bc:	4a5d      	ldr	r2, [pc, #372]	@ (8007934 <loadMenuTexts+0xcf4>)
 80077be:	4b5e      	ldr	r3, [pc, #376]	@ (8007938 <loadMenuTexts+0xcf8>)
 80077c0:	4614      	mov	r4, r2
 80077c2:	461d      	mov	r5, r3
 80077c4:	6828      	ldr	r0, [r5, #0]
 80077c6:	6869      	ldr	r1, [r5, #4]
 80077c8:	68aa      	ldr	r2, [r5, #8]
 80077ca:	68eb      	ldr	r3, [r5, #12]
 80077cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077ce:	7c2b      	ldrb	r3, [r5, #16]
 80077d0:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 80077d2:	4a5a      	ldr	r2, [pc, #360]	@ (800793c <loadMenuTexts+0xcfc>)
 80077d4:	4b5a      	ldr	r3, [pc, #360]	@ (8007940 <loadMenuTexts+0xd00>)
 80077d6:	4614      	mov	r4, r2
 80077d8:	461d      	mov	r5, r3
 80077da:	6828      	ldr	r0, [r5, #0]
 80077dc:	6869      	ldr	r1, [r5, #4]
 80077de:	68aa      	ldr	r2, [r5, #8]
 80077e0:	68eb      	ldr	r3, [r5, #12]
 80077e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077e4:	7c2b      	ldrb	r3, [r5, #16]
 80077e6:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 80077e8:	4a56      	ldr	r2, [pc, #344]	@ (8007944 <loadMenuTexts+0xd04>)
 80077ea:	4b57      	ldr	r3, [pc, #348]	@ (8007948 <loadMenuTexts+0xd08>)
 80077ec:	4614      	mov	r4, r2
 80077ee:	461d      	mov	r5, r3
 80077f0:	6828      	ldr	r0, [r5, #0]
 80077f2:	6869      	ldr	r1, [r5, #4]
 80077f4:	68aa      	ldr	r2, [r5, #8]
 80077f6:	68eb      	ldr	r3, [r5, #12]
 80077f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077fa:	7c2b      	ldrb	r3, [r5, #16]
 80077fc:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 80077fe:	4a53      	ldr	r2, [pc, #332]	@ (800794c <loadMenuTexts+0xd0c>)
 8007800:	4b53      	ldr	r3, [pc, #332]	@ (8007950 <loadMenuTexts+0xd10>)
 8007802:	4614      	mov	r4, r2
 8007804:	461d      	mov	r5, r3
 8007806:	6828      	ldr	r0, [r5, #0]
 8007808:	6869      	ldr	r1, [r5, #4]
 800780a:	68aa      	ldr	r2, [r5, #8]
 800780c:	68eb      	ldr	r3, [r5, #12]
 800780e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007810:	7c2b      	ldrb	r3, [r5, #16]
 8007812:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8007814:	4a4f      	ldr	r2, [pc, #316]	@ (8007954 <loadMenuTexts+0xd14>)
 8007816:	4b50      	ldr	r3, [pc, #320]	@ (8007958 <loadMenuTexts+0xd18>)
 8007818:	4614      	mov	r4, r2
 800781a:	461d      	mov	r5, r3
 800781c:	6828      	ldr	r0, [r5, #0]
 800781e:	6869      	ldr	r1, [r5, #4]
 8007820:	68aa      	ldr	r2, [r5, #8]
 8007822:	68eb      	ldr	r3, [r5, #12]
 8007824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007826:	7c2b      	ldrb	r3, [r5, #16]
 8007828:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 800782a:	4a4c      	ldr	r2, [pc, #304]	@ (800795c <loadMenuTexts+0xd1c>)
 800782c:	4b4c      	ldr	r3, [pc, #304]	@ (8007960 <loadMenuTexts+0xd20>)
 800782e:	4614      	mov	r4, r2
 8007830:	461d      	mov	r5, r3
 8007832:	6828      	ldr	r0, [r5, #0]
 8007834:	6869      	ldr	r1, [r5, #4]
 8007836:	68aa      	ldr	r2, [r5, #8]
 8007838:	68eb      	ldr	r3, [r5, #12]
 800783a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800783c:	7c2b      	ldrb	r3, [r5, #16]
 800783e:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8007840:	4a48      	ldr	r2, [pc, #288]	@ (8007964 <loadMenuTexts+0xd24>)
 8007842:	e091      	b.n	8007968 <loadMenuTexts+0xd28>
 8007844:	20000e08 	.word	0x20000e08
 8007848:	20000698 	.word	0x20000698
 800784c:	20000e1c 	.word	0x20000e1c
 8007850:	200006ac 	.word	0x200006ac
 8007854:	20000e30 	.word	0x20000e30
 8007858:	200006c0 	.word	0x200006c0
 800785c:	20000e44 	.word	0x20000e44
 8007860:	200006d4 	.word	0x200006d4
 8007864:	20000e58 	.word	0x20000e58
 8007868:	200006e8 	.word	0x200006e8
 800786c:	20000e6c 	.word	0x20000e6c
 8007870:	200006fc 	.word	0x200006fc
 8007874:	20000e80 	.word	0x20000e80
 8007878:	20000710 	.word	0x20000710
 800787c:	20000e94 	.word	0x20000e94
 8007880:	20000724 	.word	0x20000724
 8007884:	20000ea8 	.word	0x20000ea8
 8007888:	20000738 	.word	0x20000738
 800788c:	20000ebc 	.word	0x20000ebc
 8007890:	2000074c 	.word	0x2000074c
 8007894:	20000ed0 	.word	0x20000ed0
 8007898:	20000760 	.word	0x20000760
 800789c:	20000ee4 	.word	0x20000ee4
 80078a0:	20000774 	.word	0x20000774
 80078a4:	20000ef8 	.word	0x20000ef8
 80078a8:	20000788 	.word	0x20000788
 80078ac:	20000f0c 	.word	0x20000f0c
 80078b0:	2000079c 	.word	0x2000079c
 80078b4:	20000f20 	.word	0x20000f20
 80078b8:	200007b0 	.word	0x200007b0
 80078bc:	20000f34 	.word	0x20000f34
 80078c0:	200007c4 	.word	0x200007c4
 80078c4:	20000f48 	.word	0x20000f48
 80078c8:	200007d8 	.word	0x200007d8
 80078cc:	20000f5c 	.word	0x20000f5c
 80078d0:	200007ec 	.word	0x200007ec
 80078d4:	20000f70 	.word	0x20000f70
 80078d8:	20000800 	.word	0x20000800
 80078dc:	20000f84 	.word	0x20000f84
 80078e0:	20000814 	.word	0x20000814
 80078e4:	20000f98 	.word	0x20000f98
 80078e8:	20000828 	.word	0x20000828
 80078ec:	20000fac 	.word	0x20000fac
 80078f0:	2000083c 	.word	0x2000083c
 80078f4:	20000fc0 	.word	0x20000fc0
 80078f8:	20000850 	.word	0x20000850
 80078fc:	20000fd4 	.word	0x20000fd4
 8007900:	20000864 	.word	0x20000864
 8007904:	20000fe8 	.word	0x20000fe8
 8007908:	20000878 	.word	0x20000878
 800790c:	20000ffc 	.word	0x20000ffc
 8007910:	2000088c 	.word	0x2000088c
 8007914:	20001010 	.word	0x20001010
 8007918:	200008a0 	.word	0x200008a0
 800791c:	20001024 	.word	0x20001024
 8007920:	200008b4 	.word	0x200008b4
 8007924:	20001038 	.word	0x20001038
 8007928:	200008c8 	.word	0x200008c8
 800792c:	2000104c 	.word	0x2000104c
 8007930:	200008dc 	.word	0x200008dc
 8007934:	20001060 	.word	0x20001060
 8007938:	200008f0 	.word	0x200008f0
 800793c:	20001074 	.word	0x20001074
 8007940:	20000904 	.word	0x20000904
 8007944:	20001088 	.word	0x20001088
 8007948:	20000918 	.word	0x20000918
 800794c:	2000109c 	.word	0x2000109c
 8007950:	2000092c 	.word	0x2000092c
 8007954:	200010b0 	.word	0x200010b0
 8007958:	20000940 	.word	0x20000940
 800795c:	200010c4 	.word	0x200010c4
 8007960:	20000954 	.word	0x20000954
 8007964:	200010d8 	.word	0x200010d8
 8007968:	4bc7      	ldr	r3, [pc, #796]	@ (8007c88 <loadMenuTexts+0x1048>)
 800796a:	4614      	mov	r4, r2
 800796c:	461d      	mov	r5, r3
 800796e:	6828      	ldr	r0, [r5, #0]
 8007970:	6869      	ldr	r1, [r5, #4]
 8007972:	68aa      	ldr	r2, [r5, #8]
 8007974:	68eb      	ldr	r3, [r5, #12]
 8007976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007978:	7c2b      	ldrb	r3, [r5, #16]
 800797a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 800797c:	4ac3      	ldr	r2, [pc, #780]	@ (8007c8c <loadMenuTexts+0x104c>)
 800797e:	4bc4      	ldr	r3, [pc, #784]	@ (8007c90 <loadMenuTexts+0x1050>)
 8007980:	4614      	mov	r4, r2
 8007982:	461d      	mov	r5, r3
 8007984:	6828      	ldr	r0, [r5, #0]
 8007986:	6869      	ldr	r1, [r5, #4]
 8007988:	68aa      	ldr	r2, [r5, #8]
 800798a:	68eb      	ldr	r3, [r5, #12]
 800798c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800798e:	7c2b      	ldrb	r3, [r5, #16]
 8007990:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8007992:	4ac0      	ldr	r2, [pc, #768]	@ (8007c94 <loadMenuTexts+0x1054>)
 8007994:	4bc0      	ldr	r3, [pc, #768]	@ (8007c98 <loadMenuTexts+0x1058>)
 8007996:	4614      	mov	r4, r2
 8007998:	461d      	mov	r5, r3
 800799a:	6828      	ldr	r0, [r5, #0]
 800799c:	6869      	ldr	r1, [r5, #4]
 800799e:	68aa      	ldr	r2, [r5, #8]
 80079a0:	68eb      	ldr	r3, [r5, #12]
 80079a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079a4:	7c2b      	ldrb	r3, [r5, #16]
 80079a6:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 80079a8:	4abc      	ldr	r2, [pc, #752]	@ (8007c9c <loadMenuTexts+0x105c>)
 80079aa:	4bbd      	ldr	r3, [pc, #756]	@ (8007ca0 <loadMenuTexts+0x1060>)
 80079ac:	4614      	mov	r4, r2
 80079ae:	461d      	mov	r5, r3
 80079b0:	6828      	ldr	r0, [r5, #0]
 80079b2:	6869      	ldr	r1, [r5, #4]
 80079b4:	68aa      	ldr	r2, [r5, #8]
 80079b6:	68eb      	ldr	r3, [r5, #12]
 80079b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079ba:	7c2b      	ldrb	r3, [r5, #16]
 80079bc:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 80079be:	4ab9      	ldr	r2, [pc, #740]	@ (8007ca4 <loadMenuTexts+0x1064>)
 80079c0:	4bb9      	ldr	r3, [pc, #740]	@ (8007ca8 <loadMenuTexts+0x1068>)
 80079c2:	4614      	mov	r4, r2
 80079c4:	461d      	mov	r5, r3
 80079c6:	6828      	ldr	r0, [r5, #0]
 80079c8:	6869      	ldr	r1, [r5, #4]
 80079ca:	68aa      	ldr	r2, [r5, #8]
 80079cc:	68eb      	ldr	r3, [r5, #12]
 80079ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079d0:	7c2b      	ldrb	r3, [r5, #16]
 80079d2:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 80079d4:	4ab5      	ldr	r2, [pc, #724]	@ (8007cac <loadMenuTexts+0x106c>)
 80079d6:	4bb6      	ldr	r3, [pc, #728]	@ (8007cb0 <loadMenuTexts+0x1070>)
 80079d8:	4614      	mov	r4, r2
 80079da:	461d      	mov	r5, r3
 80079dc:	6828      	ldr	r0, [r5, #0]
 80079de:	6869      	ldr	r1, [r5, #4]
 80079e0:	68aa      	ldr	r2, [r5, #8]
 80079e2:	68eb      	ldr	r3, [r5, #12]
 80079e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079e6:	7c2b      	ldrb	r3, [r5, #16]
 80079e8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 80079ea:	4ab2      	ldr	r2, [pc, #712]	@ (8007cb4 <loadMenuTexts+0x1074>)
 80079ec:	4bb2      	ldr	r3, [pc, #712]	@ (8007cb8 <loadMenuTexts+0x1078>)
 80079ee:	4614      	mov	r4, r2
 80079f0:	461d      	mov	r5, r3
 80079f2:	6828      	ldr	r0, [r5, #0]
 80079f4:	6869      	ldr	r1, [r5, #4]
 80079f6:	68aa      	ldr	r2, [r5, #8]
 80079f8:	68eb      	ldr	r3, [r5, #12]
 80079fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079fc:	7c2b      	ldrb	r3, [r5, #16]
 80079fe:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8007a00:	4aae      	ldr	r2, [pc, #696]	@ (8007cbc <loadMenuTexts+0x107c>)
 8007a02:	4baf      	ldr	r3, [pc, #700]	@ (8007cc0 <loadMenuTexts+0x1080>)
 8007a04:	4614      	mov	r4, r2
 8007a06:	461d      	mov	r5, r3
 8007a08:	6828      	ldr	r0, [r5, #0]
 8007a0a:	6869      	ldr	r1, [r5, #4]
 8007a0c:	68aa      	ldr	r2, [r5, #8]
 8007a0e:	68eb      	ldr	r3, [r5, #12]
 8007a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a12:	7c2b      	ldrb	r3, [r5, #16]
 8007a14:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8007a16:	4aab      	ldr	r2, [pc, #684]	@ (8007cc4 <loadMenuTexts+0x1084>)
 8007a18:	4bab      	ldr	r3, [pc, #684]	@ (8007cc8 <loadMenuTexts+0x1088>)
 8007a1a:	4614      	mov	r4, r2
 8007a1c:	461d      	mov	r5, r3
 8007a1e:	6828      	ldr	r0, [r5, #0]
 8007a20:	6869      	ldr	r1, [r5, #4]
 8007a22:	68aa      	ldr	r2, [r5, #8]
 8007a24:	68eb      	ldr	r3, [r5, #12]
 8007a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a28:	7c2b      	ldrb	r3, [r5, #16]
 8007a2a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8007a2c:	4aa7      	ldr	r2, [pc, #668]	@ (8007ccc <loadMenuTexts+0x108c>)
 8007a2e:	4ba8      	ldr	r3, [pc, #672]	@ (8007cd0 <loadMenuTexts+0x1090>)
 8007a30:	4614      	mov	r4, r2
 8007a32:	461d      	mov	r5, r3
 8007a34:	6828      	ldr	r0, [r5, #0]
 8007a36:	6869      	ldr	r1, [r5, #4]
 8007a38:	68aa      	ldr	r2, [r5, #8]
 8007a3a:	68eb      	ldr	r3, [r5, #12]
 8007a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a3e:	7c2b      	ldrb	r3, [r5, #16]
 8007a40:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8007a42:	4aa4      	ldr	r2, [pc, #656]	@ (8007cd4 <loadMenuTexts+0x1094>)
 8007a44:	4ba4      	ldr	r3, [pc, #656]	@ (8007cd8 <loadMenuTexts+0x1098>)
 8007a46:	4614      	mov	r4, r2
 8007a48:	461d      	mov	r5, r3
 8007a4a:	6828      	ldr	r0, [r5, #0]
 8007a4c:	6869      	ldr	r1, [r5, #4]
 8007a4e:	68aa      	ldr	r2, [r5, #8]
 8007a50:	68eb      	ldr	r3, [r5, #12]
 8007a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a54:	7c2b      	ldrb	r3, [r5, #16]
 8007a56:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8007a58:	4aa0      	ldr	r2, [pc, #640]	@ (8007cdc <loadMenuTexts+0x109c>)
 8007a5a:	4ba1      	ldr	r3, [pc, #644]	@ (8007ce0 <loadMenuTexts+0x10a0>)
 8007a5c:	4614      	mov	r4, r2
 8007a5e:	461d      	mov	r5, r3
 8007a60:	6828      	ldr	r0, [r5, #0]
 8007a62:	6869      	ldr	r1, [r5, #4]
 8007a64:	68aa      	ldr	r2, [r5, #8]
 8007a66:	68eb      	ldr	r3, [r5, #12]
 8007a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a6a:	7c2b      	ldrb	r3, [r5, #16]
 8007a6c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8007a6e:	4a9d      	ldr	r2, [pc, #628]	@ (8007ce4 <loadMenuTexts+0x10a4>)
 8007a70:	4b9d      	ldr	r3, [pc, #628]	@ (8007ce8 <loadMenuTexts+0x10a8>)
 8007a72:	4614      	mov	r4, r2
 8007a74:	461d      	mov	r5, r3
 8007a76:	6828      	ldr	r0, [r5, #0]
 8007a78:	6869      	ldr	r1, [r5, #4]
 8007a7a:	68aa      	ldr	r2, [r5, #8]
 8007a7c:	68eb      	ldr	r3, [r5, #12]
 8007a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a80:	7c2b      	ldrb	r3, [r5, #16]
 8007a82:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8007a84:	4a99      	ldr	r2, [pc, #612]	@ (8007cec <loadMenuTexts+0x10ac>)
 8007a86:	4b9a      	ldr	r3, [pc, #616]	@ (8007cf0 <loadMenuTexts+0x10b0>)
 8007a88:	4614      	mov	r4, r2
 8007a8a:	461d      	mov	r5, r3
 8007a8c:	6828      	ldr	r0, [r5, #0]
 8007a8e:	6869      	ldr	r1, [r5, #4]
 8007a90:	68aa      	ldr	r2, [r5, #8]
 8007a92:	68eb      	ldr	r3, [r5, #12]
 8007a94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a96:	7c2b      	ldrb	r3, [r5, #16]
 8007a98:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8007a9a:	4a96      	ldr	r2, [pc, #600]	@ (8007cf4 <loadMenuTexts+0x10b4>)
 8007a9c:	4b96      	ldr	r3, [pc, #600]	@ (8007cf8 <loadMenuTexts+0x10b8>)
 8007a9e:	4614      	mov	r4, r2
 8007aa0:	461d      	mov	r5, r3
 8007aa2:	6828      	ldr	r0, [r5, #0]
 8007aa4:	6869      	ldr	r1, [r5, #4]
 8007aa6:	68aa      	ldr	r2, [r5, #8]
 8007aa8:	68eb      	ldr	r3, [r5, #12]
 8007aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007aac:	7c2b      	ldrb	r3, [r5, #16]
 8007aae:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8007ab0:	4a92      	ldr	r2, [pc, #584]	@ (8007cfc <loadMenuTexts+0x10bc>)
 8007ab2:	4b93      	ldr	r3, [pc, #588]	@ (8007d00 <loadMenuTexts+0x10c0>)
 8007ab4:	4614      	mov	r4, r2
 8007ab6:	461d      	mov	r5, r3
 8007ab8:	6828      	ldr	r0, [r5, #0]
 8007aba:	6869      	ldr	r1, [r5, #4]
 8007abc:	68aa      	ldr	r2, [r5, #8]
 8007abe:	68eb      	ldr	r3, [r5, #12]
 8007ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ac2:	7c2b      	ldrb	r3, [r5, #16]
 8007ac4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8007ac6:	4a8f      	ldr	r2, [pc, #572]	@ (8007d04 <loadMenuTexts+0x10c4>)
 8007ac8:	4b8f      	ldr	r3, [pc, #572]	@ (8007d08 <loadMenuTexts+0x10c8>)
 8007aca:	4614      	mov	r4, r2
 8007acc:	461d      	mov	r5, r3
 8007ace:	6828      	ldr	r0, [r5, #0]
 8007ad0:	6869      	ldr	r1, [r5, #4]
 8007ad2:	68aa      	ldr	r2, [r5, #8]
 8007ad4:	68eb      	ldr	r3, [r5, #12]
 8007ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ad8:	7c2b      	ldrb	r3, [r5, #16]
 8007ada:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8007adc:	4a8b      	ldr	r2, [pc, #556]	@ (8007d0c <loadMenuTexts+0x10cc>)
 8007ade:	4b8c      	ldr	r3, [pc, #560]	@ (8007d10 <loadMenuTexts+0x10d0>)
 8007ae0:	4614      	mov	r4, r2
 8007ae2:	461d      	mov	r5, r3
 8007ae4:	6828      	ldr	r0, [r5, #0]
 8007ae6:	6869      	ldr	r1, [r5, #4]
 8007ae8:	68aa      	ldr	r2, [r5, #8]
 8007aea:	68eb      	ldr	r3, [r5, #12]
 8007aec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007aee:	7c2b      	ldrb	r3, [r5, #16]
 8007af0:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8007af2:	4a88      	ldr	r2, [pc, #544]	@ (8007d14 <loadMenuTexts+0x10d4>)
 8007af4:	4b88      	ldr	r3, [pc, #544]	@ (8007d18 <loadMenuTexts+0x10d8>)
 8007af6:	4614      	mov	r4, r2
 8007af8:	461d      	mov	r5, r3
 8007afa:	6828      	ldr	r0, [r5, #0]
 8007afc:	6869      	ldr	r1, [r5, #4]
 8007afe:	68aa      	ldr	r2, [r5, #8]
 8007b00:	68eb      	ldr	r3, [r5, #12]
 8007b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b04:	7c2b      	ldrb	r3, [r5, #16]
 8007b06:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8007b08:	4a84      	ldr	r2, [pc, #528]	@ (8007d1c <loadMenuTexts+0x10dc>)
 8007b0a:	4b85      	ldr	r3, [pc, #532]	@ (8007d20 <loadMenuTexts+0x10e0>)
 8007b0c:	4614      	mov	r4, r2
 8007b0e:	461d      	mov	r5, r3
 8007b10:	6828      	ldr	r0, [r5, #0]
 8007b12:	6869      	ldr	r1, [r5, #4]
 8007b14:	68aa      	ldr	r2, [r5, #8]
 8007b16:	68eb      	ldr	r3, [r5, #12]
 8007b18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b1a:	7c2b      	ldrb	r3, [r5, #16]
 8007b1c:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8007b1e:	4a81      	ldr	r2, [pc, #516]	@ (8007d24 <loadMenuTexts+0x10e4>)
 8007b20:	4b81      	ldr	r3, [pc, #516]	@ (8007d28 <loadMenuTexts+0x10e8>)
 8007b22:	4614      	mov	r4, r2
 8007b24:	461d      	mov	r5, r3
 8007b26:	6828      	ldr	r0, [r5, #0]
 8007b28:	6869      	ldr	r1, [r5, #4]
 8007b2a:	68aa      	ldr	r2, [r5, #8]
 8007b2c:	68eb      	ldr	r3, [r5, #12]
 8007b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b30:	7c2b      	ldrb	r3, [r5, #16]
 8007b32:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8007b34:	4a7d      	ldr	r2, [pc, #500]	@ (8007d2c <loadMenuTexts+0x10ec>)
 8007b36:	4b7e      	ldr	r3, [pc, #504]	@ (8007d30 <loadMenuTexts+0x10f0>)
 8007b38:	4614      	mov	r4, r2
 8007b3a:	461d      	mov	r5, r3
 8007b3c:	6828      	ldr	r0, [r5, #0]
 8007b3e:	6869      	ldr	r1, [r5, #4]
 8007b40:	68aa      	ldr	r2, [r5, #8]
 8007b42:	68eb      	ldr	r3, [r5, #12]
 8007b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b46:	7c2b      	ldrb	r3, [r5, #16]
 8007b48:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8007b4a:	4a7a      	ldr	r2, [pc, #488]	@ (8007d34 <loadMenuTexts+0x10f4>)
 8007b4c:	4b7a      	ldr	r3, [pc, #488]	@ (8007d38 <loadMenuTexts+0x10f8>)
 8007b4e:	4614      	mov	r4, r2
 8007b50:	461d      	mov	r5, r3
 8007b52:	6828      	ldr	r0, [r5, #0]
 8007b54:	6869      	ldr	r1, [r5, #4]
 8007b56:	68aa      	ldr	r2, [r5, #8]
 8007b58:	68eb      	ldr	r3, [r5, #12]
 8007b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b5c:	7c2b      	ldrb	r3, [r5, #16]
 8007b5e:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8007b60:	4a76      	ldr	r2, [pc, #472]	@ (8007d3c <loadMenuTexts+0x10fc>)
 8007b62:	4b77      	ldr	r3, [pc, #476]	@ (8007d40 <loadMenuTexts+0x1100>)
 8007b64:	4614      	mov	r4, r2
 8007b66:	461d      	mov	r5, r3
 8007b68:	6828      	ldr	r0, [r5, #0]
 8007b6a:	6869      	ldr	r1, [r5, #4]
 8007b6c:	68aa      	ldr	r2, [r5, #8]
 8007b6e:	68eb      	ldr	r3, [r5, #12]
 8007b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b72:	7c2b      	ldrb	r3, [r5, #16]
 8007b74:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8007b76:	4a73      	ldr	r2, [pc, #460]	@ (8007d44 <loadMenuTexts+0x1104>)
 8007b78:	4b73      	ldr	r3, [pc, #460]	@ (8007d48 <loadMenuTexts+0x1108>)
 8007b7a:	4614      	mov	r4, r2
 8007b7c:	461d      	mov	r5, r3
 8007b7e:	6828      	ldr	r0, [r5, #0]
 8007b80:	6869      	ldr	r1, [r5, #4]
 8007b82:	68aa      	ldr	r2, [r5, #8]
 8007b84:	68eb      	ldr	r3, [r5, #12]
 8007b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b88:	7c2b      	ldrb	r3, [r5, #16]
 8007b8a:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8007b8c:	4a6f      	ldr	r2, [pc, #444]	@ (8007d4c <loadMenuTexts+0x110c>)
 8007b8e:	4b70      	ldr	r3, [pc, #448]	@ (8007d50 <loadMenuTexts+0x1110>)
 8007b90:	4614      	mov	r4, r2
 8007b92:	461d      	mov	r5, r3
 8007b94:	6828      	ldr	r0, [r5, #0]
 8007b96:	6869      	ldr	r1, [r5, #4]
 8007b98:	68aa      	ldr	r2, [r5, #8]
 8007b9a:	68eb      	ldr	r3, [r5, #12]
 8007b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b9e:	7c2b      	ldrb	r3, [r5, #16]
 8007ba0:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8007ba2:	4a6c      	ldr	r2, [pc, #432]	@ (8007d54 <loadMenuTexts+0x1114>)
 8007ba4:	4b6c      	ldr	r3, [pc, #432]	@ (8007d58 <loadMenuTexts+0x1118>)
 8007ba6:	4614      	mov	r4, r2
 8007ba8:	461d      	mov	r5, r3
 8007baa:	6828      	ldr	r0, [r5, #0]
 8007bac:	6869      	ldr	r1, [r5, #4]
 8007bae:	68aa      	ldr	r2, [r5, #8]
 8007bb0:	68eb      	ldr	r3, [r5, #12]
 8007bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bb4:	7c2b      	ldrb	r3, [r5, #16]
 8007bb6:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8007bb8:	4a68      	ldr	r2, [pc, #416]	@ (8007d5c <loadMenuTexts+0x111c>)
 8007bba:	4b69      	ldr	r3, [pc, #420]	@ (8007d60 <loadMenuTexts+0x1120>)
 8007bbc:	4614      	mov	r4, r2
 8007bbe:	461d      	mov	r5, r3
 8007bc0:	6828      	ldr	r0, [r5, #0]
 8007bc2:	6869      	ldr	r1, [r5, #4]
 8007bc4:	68aa      	ldr	r2, [r5, #8]
 8007bc6:	68eb      	ldr	r3, [r5, #12]
 8007bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bca:	7c2b      	ldrb	r3, [r5, #16]
 8007bcc:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 8007bce:	4a65      	ldr	r2, [pc, #404]	@ (8007d64 <loadMenuTexts+0x1124>)
 8007bd0:	4b65      	ldr	r3, [pc, #404]	@ (8007d68 <loadMenuTexts+0x1128>)
 8007bd2:	4614      	mov	r4, r2
 8007bd4:	461d      	mov	r5, r3
 8007bd6:	6828      	ldr	r0, [r5, #0]
 8007bd8:	6869      	ldr	r1, [r5, #4]
 8007bda:	68aa      	ldr	r2, [r5, #8]
 8007bdc:	68eb      	ldr	r3, [r5, #12]
 8007bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007be0:	7c2b      	ldrb	r3, [r5, #16]
 8007be2:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8007be4:	4a61      	ldr	r2, [pc, #388]	@ (8007d6c <loadMenuTexts+0x112c>)
 8007be6:	4b62      	ldr	r3, [pc, #392]	@ (8007d70 <loadMenuTexts+0x1130>)
 8007be8:	4614      	mov	r4, r2
 8007bea:	461d      	mov	r5, r3
 8007bec:	6828      	ldr	r0, [r5, #0]
 8007bee:	6869      	ldr	r1, [r5, #4]
 8007bf0:	68aa      	ldr	r2, [r5, #8]
 8007bf2:	68eb      	ldr	r3, [r5, #12]
 8007bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bf6:	7c2b      	ldrb	r3, [r5, #16]
 8007bf8:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 8007bfa:	4a5e      	ldr	r2, [pc, #376]	@ (8007d74 <loadMenuTexts+0x1134>)
 8007bfc:	4b5e      	ldr	r3, [pc, #376]	@ (8007d78 <loadMenuTexts+0x1138>)
 8007bfe:	4614      	mov	r4, r2
 8007c00:	461d      	mov	r5, r3
 8007c02:	6828      	ldr	r0, [r5, #0]
 8007c04:	6869      	ldr	r1, [r5, #4]
 8007c06:	68aa      	ldr	r2, [r5, #8]
 8007c08:	68eb      	ldr	r3, [r5, #12]
 8007c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c0c:	7c2b      	ldrb	r3, [r5, #16]
 8007c0e:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 8007c10:	4a5a      	ldr	r2, [pc, #360]	@ (8007d7c <loadMenuTexts+0x113c>)
 8007c12:	4b5b      	ldr	r3, [pc, #364]	@ (8007d80 <loadMenuTexts+0x1140>)
 8007c14:	4614      	mov	r4, r2
 8007c16:	461d      	mov	r5, r3
 8007c18:	6828      	ldr	r0, [r5, #0]
 8007c1a:	6869      	ldr	r1, [r5, #4]
 8007c1c:	68aa      	ldr	r2, [r5, #8]
 8007c1e:	68eb      	ldr	r3, [r5, #12]
 8007c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c22:	7c2b      	ldrb	r3, [r5, #16]
 8007c24:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 8007c26:	4a57      	ldr	r2, [pc, #348]	@ (8007d84 <loadMenuTexts+0x1144>)
 8007c28:	4b57      	ldr	r3, [pc, #348]	@ (8007d88 <loadMenuTexts+0x1148>)
 8007c2a:	4614      	mov	r4, r2
 8007c2c:	461d      	mov	r5, r3
 8007c2e:	6828      	ldr	r0, [r5, #0]
 8007c30:	6869      	ldr	r1, [r5, #4]
 8007c32:	68aa      	ldr	r2, [r5, #8]
 8007c34:	68eb      	ldr	r3, [r5, #12]
 8007c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c38:	7c2b      	ldrb	r3, [r5, #16]
 8007c3a:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8007c3c:	4a53      	ldr	r2, [pc, #332]	@ (8007d8c <loadMenuTexts+0x114c>)
 8007c3e:	4b54      	ldr	r3, [pc, #336]	@ (8007d90 <loadMenuTexts+0x1150>)
 8007c40:	4614      	mov	r4, r2
 8007c42:	461d      	mov	r5, r3
 8007c44:	6828      	ldr	r0, [r5, #0]
 8007c46:	6869      	ldr	r1, [r5, #4]
 8007c48:	68aa      	ldr	r2, [r5, #8]
 8007c4a:	68eb      	ldr	r3, [r5, #12]
 8007c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c4e:	7c2b      	ldrb	r3, [r5, #16]
 8007c50:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 8007c52:	4a50      	ldr	r2, [pc, #320]	@ (8007d94 <loadMenuTexts+0x1154>)
 8007c54:	4b50      	ldr	r3, [pc, #320]	@ (8007d98 <loadMenuTexts+0x1158>)
 8007c56:	4614      	mov	r4, r2
 8007c58:	461d      	mov	r5, r3
 8007c5a:	6828      	ldr	r0, [r5, #0]
 8007c5c:	6869      	ldr	r1, [r5, #4]
 8007c5e:	68aa      	ldr	r2, [r5, #8]
 8007c60:	68eb      	ldr	r3, [r5, #12]
 8007c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c64:	7c2b      	ldrb	r3, [r5, #16]
 8007c66:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 8007c68:	4a4c      	ldr	r2, [pc, #304]	@ (8007d9c <loadMenuTexts+0x115c>)
 8007c6a:	4b4d      	ldr	r3, [pc, #308]	@ (8007da0 <loadMenuTexts+0x1160>)
 8007c6c:	4614      	mov	r4, r2
 8007c6e:	461d      	mov	r5, r3
 8007c70:	6828      	ldr	r0, [r5, #0]
 8007c72:	6869      	ldr	r1, [r5, #4]
 8007c74:	68aa      	ldr	r2, [r5, #8]
 8007c76:	68eb      	ldr	r3, [r5, #12]
 8007c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c7a:	7c2b      	ldrb	r3, [r5, #16]
 8007c7c:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 8007c7e:	4a49      	ldr	r2, [pc, #292]	@ (8007da4 <loadMenuTexts+0x1164>)
 8007c80:	4b49      	ldr	r3, [pc, #292]	@ (8007da8 <loadMenuTexts+0x1168>)
 8007c82:	4614      	mov	r4, r2
 8007c84:	461d      	mov	r5, r3
 8007c86:	e091      	b.n	8007dac <loadMenuTexts+0x116c>
 8007c88:	20000968 	.word	0x20000968
 8007c8c:	200010ec 	.word	0x200010ec
 8007c90:	2000097c 	.word	0x2000097c
 8007c94:	20001100 	.word	0x20001100
 8007c98:	20000990 	.word	0x20000990
 8007c9c:	20001114 	.word	0x20001114
 8007ca0:	200009a4 	.word	0x200009a4
 8007ca4:	20001128 	.word	0x20001128
 8007ca8:	200009b8 	.word	0x200009b8
 8007cac:	2000113c 	.word	0x2000113c
 8007cb0:	200009cc 	.word	0x200009cc
 8007cb4:	20001150 	.word	0x20001150
 8007cb8:	200009e0 	.word	0x200009e0
 8007cbc:	20001164 	.word	0x20001164
 8007cc0:	200009f4 	.word	0x200009f4
 8007cc4:	20001178 	.word	0x20001178
 8007cc8:	20000a08 	.word	0x20000a08
 8007ccc:	2000118c 	.word	0x2000118c
 8007cd0:	20000a1c 	.word	0x20000a1c
 8007cd4:	200011a0 	.word	0x200011a0
 8007cd8:	20000a30 	.word	0x20000a30
 8007cdc:	200011b4 	.word	0x200011b4
 8007ce0:	20000a44 	.word	0x20000a44
 8007ce4:	200011c8 	.word	0x200011c8
 8007ce8:	20000a58 	.word	0x20000a58
 8007cec:	200011dc 	.word	0x200011dc
 8007cf0:	20000a6c 	.word	0x20000a6c
 8007cf4:	200011f0 	.word	0x200011f0
 8007cf8:	20000a80 	.word	0x20000a80
 8007cfc:	20001204 	.word	0x20001204
 8007d00:	20000a94 	.word	0x20000a94
 8007d04:	20001218 	.word	0x20001218
 8007d08:	20000aa8 	.word	0x20000aa8
 8007d0c:	2000122c 	.word	0x2000122c
 8007d10:	20000abc 	.word	0x20000abc
 8007d14:	20001240 	.word	0x20001240
 8007d18:	20000ad0 	.word	0x20000ad0
 8007d1c:	20001254 	.word	0x20001254
 8007d20:	20000ae4 	.word	0x20000ae4
 8007d24:	20001268 	.word	0x20001268
 8007d28:	20000af8 	.word	0x20000af8
 8007d2c:	2000127c 	.word	0x2000127c
 8007d30:	20000b0c 	.word	0x20000b0c
 8007d34:	20001290 	.word	0x20001290
 8007d38:	20000b20 	.word	0x20000b20
 8007d3c:	200012a4 	.word	0x200012a4
 8007d40:	20000b34 	.word	0x20000b34
 8007d44:	200012b8 	.word	0x200012b8
 8007d48:	20000b48 	.word	0x20000b48
 8007d4c:	200012cc 	.word	0x200012cc
 8007d50:	20000b5c 	.word	0x20000b5c
 8007d54:	200012e0 	.word	0x200012e0
 8007d58:	20000b70 	.word	0x20000b70
 8007d5c:	200012f4 	.word	0x200012f4
 8007d60:	20000b84 	.word	0x20000b84
 8007d64:	20001308 	.word	0x20001308
 8007d68:	20000b98 	.word	0x20000b98
 8007d6c:	2000131c 	.word	0x2000131c
 8007d70:	20000bac 	.word	0x20000bac
 8007d74:	20001330 	.word	0x20001330
 8007d78:	20000bc0 	.word	0x20000bc0
 8007d7c:	20001344 	.word	0x20001344
 8007d80:	20000bd4 	.word	0x20000bd4
 8007d84:	20001358 	.word	0x20001358
 8007d88:	20000be8 	.word	0x20000be8
 8007d8c:	2000136c 	.word	0x2000136c
 8007d90:	20000bfc 	.word	0x20000bfc
 8007d94:	20001380 	.word	0x20001380
 8007d98:	20000c24 	.word	0x20000c24
 8007d9c:	20001394 	.word	0x20001394
 8007da0:	20000c4c 	.word	0x20000c4c
 8007da4:	200013a8 	.word	0x200013a8
 8007da8:	20000c74 	.word	0x20000c74
 8007dac:	6828      	ldr	r0, [r5, #0]
 8007dae:	6869      	ldr	r1, [r5, #4]
 8007db0:	68aa      	ldr	r2, [r5, #8]
 8007db2:	68eb      	ldr	r3, [r5, #12]
 8007db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007db6:	7c2b      	ldrb	r3, [r5, #16]
 8007db8:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 8007dba:	4a0e      	ldr	r2, [pc, #56]	@ (8007df4 <loadMenuTexts+0x11b4>)
 8007dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8007df8 <loadMenuTexts+0x11b8>)
 8007dbe:	4614      	mov	r4, r2
 8007dc0:	461d      	mov	r5, r3
 8007dc2:	6828      	ldr	r0, [r5, #0]
 8007dc4:	6869      	ldr	r1, [r5, #4]
 8007dc6:	68aa      	ldr	r2, [r5, #8]
 8007dc8:	68eb      	ldr	r3, [r5, #12]
 8007dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dcc:	7c2b      	ldrb	r3, [r5, #16]
 8007dce:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 8007dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8007dfc <loadMenuTexts+0x11bc>)
 8007dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8007e00 <loadMenuTexts+0x11c0>)
 8007dd4:	4614      	mov	r4, r2
 8007dd6:	461d      	mov	r5, r3
 8007dd8:	6828      	ldr	r0, [r5, #0]
 8007dda:	6869      	ldr	r1, [r5, #4]
 8007ddc:	68aa      	ldr	r2, [r5, #8]
 8007dde:	68eb      	ldr	r3, [r5, #12]
 8007de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007de2:	7c2b      	ldrb	r3, [r5, #16]
 8007de4:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 8007de6:	f000 f80d 	bl	8007e04 <menuVariableFinisher>
}
 8007dea:	bf00      	nop
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bdb0      	pop	{r4, r5, r7, pc}
 8007df2:	bf00      	nop
 8007df4:	200013bc 	.word	0x200013bc
 8007df8:	20000c9c 	.word	0x20000c9c
 8007dfc:	200013d0 	.word	0x200013d0
 8007e00:	20000cc4 	.word	0x20000cc4

08007e04 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8007e04:	b480      	push	{r7}
 8007e06:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 8007e08:	4b84      	ldr	r3, [pc, #528]	@ (800801c <menuVariableFinisher+0x218>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 8007e0e:	4b84      	ldr	r3, [pc, #528]	@ (8008020 <menuVariableFinisher+0x21c>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8007e14:	4b83      	ldr	r3, [pc, #524]	@ (8008024 <menuVariableFinisher+0x220>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 8007e1a:	4b83      	ldr	r3, [pc, #524]	@ (8008028 <menuVariableFinisher+0x224>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 8007e20:	4b82      	ldr	r3, [pc, #520]	@ (800802c <menuVariableFinisher+0x228>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 8007e26:	4b82      	ldr	r3, [pc, #520]	@ (8008030 <menuVariableFinisher+0x22c>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 8007e2c:	4b81      	ldr	r3, [pc, #516]	@ (8008034 <menuVariableFinisher+0x230>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 8007e32:	4b81      	ldr	r3, [pc, #516]	@ (8008038 <menuVariableFinisher+0x234>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8007e38:	4b80      	ldr	r3, [pc, #512]	@ (800803c <menuVariableFinisher+0x238>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 8007e3e:	4b80      	ldr	r3, [pc, #512]	@ (8008040 <menuVariableFinisher+0x23c>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8007e44:	4b7f      	ldr	r3, [pc, #508]	@ (8008044 <menuVariableFinisher+0x240>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 8007e4a:	4b7f      	ldr	r3, [pc, #508]	@ (8008048 <menuVariableFinisher+0x244>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8007e50:	4b7e      	ldr	r3, [pc, #504]	@ (800804c <menuVariableFinisher+0x248>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 8007e56:	4b7e      	ldr	r3, [pc, #504]	@ (8008050 <menuVariableFinisher+0x24c>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 8007e5c:	4b7d      	ldr	r3, [pc, #500]	@ (8008054 <menuVariableFinisher+0x250>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 8007e62:	4b7d      	ldr	r3, [pc, #500]	@ (8008058 <menuVariableFinisher+0x254>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8007e68:	4b7c      	ldr	r3, [pc, #496]	@ (800805c <menuVariableFinisher+0x258>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 8007e6e:	4b7c      	ldr	r3, [pc, #496]	@ (8008060 <menuVariableFinisher+0x25c>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8007e74:	4b7b      	ldr	r3, [pc, #492]	@ (8008064 <menuVariableFinisher+0x260>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 8007e7a:	4b7b      	ldr	r3, [pc, #492]	@ (8008068 <menuVariableFinisher+0x264>)
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 8007e80:	4b7a      	ldr	r3, [pc, #488]	@ (800806c <menuVariableFinisher+0x268>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 8007e86:	4b7a      	ldr	r3, [pc, #488]	@ (8008070 <menuVariableFinisher+0x26c>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 8007e8c:	4b79      	ldr	r3, [pc, #484]	@ (8008074 <menuVariableFinisher+0x270>)
 8007e8e:	2200      	movs	r2, #0
 8007e90:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 8007e92:	4b79      	ldr	r3, [pc, #484]	@ (8008078 <menuVariableFinisher+0x274>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8007e98:	4b78      	ldr	r3, [pc, #480]	@ (800807c <menuVariableFinisher+0x278>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 8007e9e:	4b78      	ldr	r3, [pc, #480]	@ (8008080 <menuVariableFinisher+0x27c>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8007ea4:	4b77      	ldr	r3, [pc, #476]	@ (8008084 <menuVariableFinisher+0x280>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 8007eaa:	4b77      	ldr	r3, [pc, #476]	@ (8008088 <menuVariableFinisher+0x284>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 8007eb0:	4b76      	ldr	r3, [pc, #472]	@ (800808c <menuVariableFinisher+0x288>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 8007eb6:	4b76      	ldr	r3, [pc, #472]	@ (8008090 <menuVariableFinisher+0x28c>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8007ebc:	4b75      	ldr	r3, [pc, #468]	@ (8008094 <menuVariableFinisher+0x290>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 8007ec2:	4b75      	ldr	r3, [pc, #468]	@ (8008098 <menuVariableFinisher+0x294>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 8007ec8:	4b74      	ldr	r3, [pc, #464]	@ (800809c <menuVariableFinisher+0x298>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 8007ece:	4b74      	ldr	r3, [pc, #464]	@ (80080a0 <menuVariableFinisher+0x29c>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8007ed4:	4b73      	ldr	r3, [pc, #460]	@ (80080a4 <menuVariableFinisher+0x2a0>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 8007eda:	4b73      	ldr	r3, [pc, #460]	@ (80080a8 <menuVariableFinisher+0x2a4>)
 8007edc:	2200      	movs	r2, #0
 8007ede:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 8007ee0:	4b72      	ldr	r3, [pc, #456]	@ (80080ac <menuVariableFinisher+0x2a8>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 8007ee6:	4b72      	ldr	r3, [pc, #456]	@ (80080b0 <menuVariableFinisher+0x2ac>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8007eec:	4b71      	ldr	r3, [pc, #452]	@ (80080b4 <menuVariableFinisher+0x2b0>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 8007ef2:	4b71      	ldr	r3, [pc, #452]	@ (80080b8 <menuVariableFinisher+0x2b4>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 8007ef8:	4b70      	ldr	r3, [pc, #448]	@ (80080bc <menuVariableFinisher+0x2b8>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 8007efe:	4b70      	ldr	r3, [pc, #448]	@ (80080c0 <menuVariableFinisher+0x2bc>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8007f04:	4b6f      	ldr	r3, [pc, #444]	@ (80080c4 <menuVariableFinisher+0x2c0>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 8007f0a:	4b6f      	ldr	r3, [pc, #444]	@ (80080c8 <menuVariableFinisher+0x2c4>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8007f10:	4b6e      	ldr	r3, [pc, #440]	@ (80080cc <menuVariableFinisher+0x2c8>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 8007f16:	4b6e      	ldr	r3, [pc, #440]	@ (80080d0 <menuVariableFinisher+0x2cc>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8007f1c:	4b6d      	ldr	r3, [pc, #436]	@ (80080d4 <menuVariableFinisher+0x2d0>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 8007f22:	4b6d      	ldr	r3, [pc, #436]	@ (80080d8 <menuVariableFinisher+0x2d4>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 8007f28:	4b6c      	ldr	r3, [pc, #432]	@ (80080dc <menuVariableFinisher+0x2d8>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 8007f2e:	4b6c      	ldr	r3, [pc, #432]	@ (80080e0 <menuVariableFinisher+0x2dc>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8007f34:	4b6b      	ldr	r3, [pc, #428]	@ (80080e4 <menuVariableFinisher+0x2e0>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 8007f3a:	4b6b      	ldr	r3, [pc, #428]	@ (80080e8 <menuVariableFinisher+0x2e4>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8007f40:	4b6a      	ldr	r3, [pc, #424]	@ (80080ec <menuVariableFinisher+0x2e8>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 8007f46:	4b6a      	ldr	r3, [pc, #424]	@ (80080f0 <menuVariableFinisher+0x2ec>)
 8007f48:	2200      	movs	r2, #0
 8007f4a:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8007f4c:	4b69      	ldr	r3, [pc, #420]	@ (80080f4 <menuVariableFinisher+0x2f0>)
 8007f4e:	2200      	movs	r2, #0
 8007f50:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8007f52:	4b69      	ldr	r3, [pc, #420]	@ (80080f8 <menuVariableFinisher+0x2f4>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8007f58:	4b68      	ldr	r3, [pc, #416]	@ (80080fc <menuVariableFinisher+0x2f8>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 8007f5e:	4b68      	ldr	r3, [pc, #416]	@ (8008100 <menuVariableFinisher+0x2fc>)
 8007f60:	2200      	movs	r2, #0
 8007f62:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8007f64:	4b67      	ldr	r3, [pc, #412]	@ (8008104 <menuVariableFinisher+0x300>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 8007f6a:	4b67      	ldr	r3, [pc, #412]	@ (8008108 <menuVariableFinisher+0x304>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 8007f70:	4b66      	ldr	r3, [pc, #408]	@ (800810c <menuVariableFinisher+0x308>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 8007f76:	4b66      	ldr	r3, [pc, #408]	@ (8008110 <menuVariableFinisher+0x30c>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 8007f7c:	4b65      	ldr	r3, [pc, #404]	@ (8008114 <menuVariableFinisher+0x310>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 8007f82:	4b65      	ldr	r3, [pc, #404]	@ (8008118 <menuVariableFinisher+0x314>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8007f88:	4b64      	ldr	r3, [pc, #400]	@ (800811c <menuVariableFinisher+0x318>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 8007f8e:	4b64      	ldr	r3, [pc, #400]	@ (8008120 <menuVariableFinisher+0x31c>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8007f94:	4b63      	ldr	r3, [pc, #396]	@ (8008124 <menuVariableFinisher+0x320>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 8007f9a:	4b63      	ldr	r3, [pc, #396]	@ (8008128 <menuVariableFinisher+0x324>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 8007fa0:	4b62      	ldr	r3, [pc, #392]	@ (800812c <menuVariableFinisher+0x328>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 8007fa6:	4b62      	ldr	r3, [pc, #392]	@ (8008130 <menuVariableFinisher+0x32c>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 8007fac:	4b61      	ldr	r3, [pc, #388]	@ (8008134 <menuVariableFinisher+0x330>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 8007fb2:	4b61      	ldr	r3, [pc, #388]	@ (8008138 <menuVariableFinisher+0x334>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 8007fb8:	4b60      	ldr	r3, [pc, #384]	@ (800813c <menuVariableFinisher+0x338>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 8007fbe:	4b60      	ldr	r3, [pc, #384]	@ (8008140 <menuVariableFinisher+0x33c>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8007fc4:	4b5f      	ldr	r3, [pc, #380]	@ (8008144 <menuVariableFinisher+0x340>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 8007fca:	4b5f      	ldr	r3, [pc, #380]	@ (8008148 <menuVariableFinisher+0x344>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 8007fd0:	4b5e      	ldr	r3, [pc, #376]	@ (800814c <menuVariableFinisher+0x348>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 8007fd6:	4b5e      	ldr	r3, [pc, #376]	@ (8008150 <menuVariableFinisher+0x34c>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 8007fdc:	4b5d      	ldr	r3, [pc, #372]	@ (8008154 <menuVariableFinisher+0x350>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 8007fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8008158 <menuVariableFinisher+0x354>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 8007fe8:	4b5c      	ldr	r3, [pc, #368]	@ (800815c <menuVariableFinisher+0x358>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 8007fee:	4b5c      	ldr	r3, [pc, #368]	@ (8008160 <menuVariableFinisher+0x35c>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8007ff4:	4b5b      	ldr	r3, [pc, #364]	@ (8008164 <menuVariableFinisher+0x360>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 8007ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8008168 <menuVariableFinisher+0x364>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8008000:	4b5a      	ldr	r3, [pc, #360]	@ (800816c <menuVariableFinisher+0x368>)
 8008002:	2200      	movs	r2, #0
 8008004:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8008006:	4b5a      	ldr	r3, [pc, #360]	@ (8008170 <menuVariableFinisher+0x36c>)
 8008008:	2200      	movs	r2, #0
 800800a:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 800800c:	4b59      	ldr	r3, [pc, #356]	@ (8008174 <menuVariableFinisher+0x370>)
 800800e:	2200      	movs	r2, #0
 8008010:	741a      	strb	r2, [r3, #16]
}
 8008012:	bf00      	nop
 8008014:	46bd      	mov	sp, r7
 8008016:	bc80      	pop	{r7}
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	20000030 	.word	0x20000030
 8008020:	20000044 	.word	0x20000044
 8008024:	20000058 	.word	0x20000058
 8008028:	2000006c 	.word	0x2000006c
 800802c:	20000080 	.word	0x20000080
 8008030:	20000094 	.word	0x20000094
 8008034:	200000a8 	.word	0x200000a8
 8008038:	200000bc 	.word	0x200000bc
 800803c:	200000d0 	.word	0x200000d0
 8008040:	200000e4 	.word	0x200000e4
 8008044:	200000f8 	.word	0x200000f8
 8008048:	2000010c 	.word	0x2000010c
 800804c:	20000e08 	.word	0x20000e08
 8008050:	20000e1c 	.word	0x20000e1c
 8008054:	20000e30 	.word	0x20000e30
 8008058:	20000e44 	.word	0x20000e44
 800805c:	20000e58 	.word	0x20000e58
 8008060:	20000e6c 	.word	0x20000e6c
 8008064:	20000e80 	.word	0x20000e80
 8008068:	20000e94 	.word	0x20000e94
 800806c:	20000ea8 	.word	0x20000ea8
 8008070:	20000ebc 	.word	0x20000ebc
 8008074:	20000ed0 	.word	0x20000ed0
 8008078:	20000ee4 	.word	0x20000ee4
 800807c:	20000ef8 	.word	0x20000ef8
 8008080:	20000f0c 	.word	0x20000f0c
 8008084:	20000f20 	.word	0x20000f20
 8008088:	20000f34 	.word	0x20000f34
 800808c:	20000f48 	.word	0x20000f48
 8008090:	20000f5c 	.word	0x20000f5c
 8008094:	20000f70 	.word	0x20000f70
 8008098:	20000f84 	.word	0x20000f84
 800809c:	20000f98 	.word	0x20000f98
 80080a0:	20000fac 	.word	0x20000fac
 80080a4:	20000fc0 	.word	0x20000fc0
 80080a8:	20000fd4 	.word	0x20000fd4
 80080ac:	20000fe8 	.word	0x20000fe8
 80080b0:	20000ffc 	.word	0x20000ffc
 80080b4:	20001010 	.word	0x20001010
 80080b8:	20001024 	.word	0x20001024
 80080bc:	20001038 	.word	0x20001038
 80080c0:	2000104c 	.word	0x2000104c
 80080c4:	20001060 	.word	0x20001060
 80080c8:	20001074 	.word	0x20001074
 80080cc:	20001088 	.word	0x20001088
 80080d0:	2000109c 	.word	0x2000109c
 80080d4:	200010b0 	.word	0x200010b0
 80080d8:	200010c4 	.word	0x200010c4
 80080dc:	200010d8 	.word	0x200010d8
 80080e0:	200010ec 	.word	0x200010ec
 80080e4:	20001100 	.word	0x20001100
 80080e8:	20001114 	.word	0x20001114
 80080ec:	20001128 	.word	0x20001128
 80080f0:	2000113c 	.word	0x2000113c
 80080f4:	20001150 	.word	0x20001150
 80080f8:	20001164 	.word	0x20001164
 80080fc:	20001178 	.word	0x20001178
 8008100:	2000118c 	.word	0x2000118c
 8008104:	200011a0 	.word	0x200011a0
 8008108:	200011b4 	.word	0x200011b4
 800810c:	200011c8 	.word	0x200011c8
 8008110:	200011dc 	.word	0x200011dc
 8008114:	200011f0 	.word	0x200011f0
 8008118:	20001204 	.word	0x20001204
 800811c:	20001218 	.word	0x20001218
 8008120:	2000122c 	.word	0x2000122c
 8008124:	20001240 	.word	0x20001240
 8008128:	20001254 	.word	0x20001254
 800812c:	20001268 	.word	0x20001268
 8008130:	2000127c 	.word	0x2000127c
 8008134:	20001290 	.word	0x20001290
 8008138:	200012a4 	.word	0x200012a4
 800813c:	200012b8 	.word	0x200012b8
 8008140:	200012cc 	.word	0x200012cc
 8008144:	200012e0 	.word	0x200012e0
 8008148:	200012f4 	.word	0x200012f4
 800814c:	20001308 	.word	0x20001308
 8008150:	2000131c 	.word	0x2000131c
 8008154:	20001330 	.word	0x20001330
 8008158:	20001344 	.word	0x20001344
 800815c:	20001358 	.word	0x20001358
 8008160:	2000136c 	.word	0x2000136c
 8008164:	20001380 	.word	0x20001380
 8008168:	20001394 	.word	0x20001394
 800816c:	200013a8 	.word	0x200013a8
 8008170:	200013bc 	.word	0x200013bc
 8008174:	200013d0 	.word	0x200013d0

08008178 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af02      	add	r7, sp, #8
 800817e:	4603      	mov	r3, r0
 8008180:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8008182:	79fb      	ldrb	r3, [r7, #7]
 8008184:	f023 030f 	bic.w	r3, r3, #15
 8008188:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800818a:	79fb      	ldrb	r3, [r7, #7]
 800818c:	011b      	lsls	r3, r3, #4
 800818e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8008190:	7b7b      	ldrb	r3, [r7, #13]
 8008192:	f043 030c 	orr.w	r3, r3, #12
 8008196:	b2db      	uxtb	r3, r3
 8008198:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800819a:	7b7b      	ldrb	r3, [r7, #13]
 800819c:	f043 0308 	orr.w	r3, r3, #8
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80081a4:	7b3b      	ldrb	r3, [r7, #12]
 80081a6:	f043 030c 	orr.w	r3, r3, #12
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80081ae:	7b3b      	ldrb	r3, [r7, #12]
 80081b0:	f043 0308 	orr.w	r3, r3, #8
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80081b8:	bf00      	nop
 80081ba:	4825      	ldr	r0, [pc, #148]	@ (8008250 <lcd_send_cmd+0xd8>)
 80081bc:	f002 f887 	bl	800a2ce <HAL_I2C_GetError>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	d0f9      	beq.n	80081ba <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80081c6:	bf00      	nop
 80081c8:	4821      	ldr	r0, [pc, #132]	@ (8008250 <lcd_send_cmd+0xd8>)
 80081ca:	f002 f873 	bl	800a2b4 <HAL_I2C_GetState>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b20      	cmp	r3, #32
 80081d2:	d1f9      	bne.n	80081c8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80081d4:	4b1f      	ldr	r3, [pc, #124]	@ (8008254 <lcd_send_cmd+0xdc>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d116      	bne.n	800820a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80081dc:	2300      	movs	r3, #0
 80081de:	73fb      	strb	r3, [r7, #15]
 80081e0:	e00f      	b.n	8008202 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
 80081e4:	3310      	adds	r3, #16
 80081e6:	443b      	add	r3, r7
 80081e8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	f022 0208 	bic.w	r2, r2, #8
 80081f2:	b2d2      	uxtb	r2, r2
 80081f4:	3310      	adds	r3, #16
 80081f6:	443b      	add	r3, r7
 80081f8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
 80081fe:	3301      	adds	r3, #1
 8008200:	73fb      	strb	r3, [r7, #15]
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	2b03      	cmp	r3, #3
 8008206:	d9ec      	bls.n	80081e2 <lcd_send_cmd+0x6a>
 8008208:	e015      	b.n	8008236 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800820a:	2300      	movs	r3, #0
 800820c:	73bb      	strb	r3, [r7, #14]
 800820e:	e00f      	b.n	8008230 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	3310      	adds	r3, #16
 8008214:	443b      	add	r3, r7
 8008216:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	f042 0208 	orr.w	r2, r2, #8
 8008220:	b2d2      	uxtb	r2, r2
 8008222:	3310      	adds	r3, #16
 8008224:	443b      	add	r3, r7
 8008226:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	3301      	adds	r3, #1
 800822e:	73bb      	strb	r3, [r7, #14]
 8008230:	7bbb      	ldrb	r3, [r7, #14]
 8008232:	2b03      	cmp	r3, #3
 8008234:	d9ec      	bls.n	8008210 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008236:	f107 0208 	add.w	r2, r7, #8
 800823a:	2364      	movs	r3, #100	@ 0x64
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	2304      	movs	r3, #4
 8008240:	214e      	movs	r1, #78	@ 0x4e
 8008242:	4803      	ldr	r0, [pc, #12]	@ (8008250 <lcd_send_cmd+0xd8>)
 8008244:	f001 fbd6 	bl	80099f4 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008248:	bf00      	nop
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	2000140c 	.word	0x2000140c
 8008254:	200013e1 	.word	0x200013e1

08008258 <lcd_send_data>:

void lcd_send_data (char data) {
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af02      	add	r7, sp, #8
 800825e:	4603      	mov	r3, r0
 8008260:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8008262:	79fb      	ldrb	r3, [r7, #7]
 8008264:	f023 030f 	bic.w	r3, r3, #15
 8008268:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800826a:	79fb      	ldrb	r3, [r7, #7]
 800826c:	011b      	lsls	r3, r3, #4
 800826e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8008270:	7b7b      	ldrb	r3, [r7, #13]
 8008272:	f043 030d 	orr.w	r3, r3, #13
 8008276:	b2db      	uxtb	r3, r3
 8008278:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800827a:	7b7b      	ldrb	r3, [r7, #13]
 800827c:	f043 0309 	orr.w	r3, r3, #9
 8008280:	b2db      	uxtb	r3, r3
 8008282:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008284:	7b3b      	ldrb	r3, [r7, #12]
 8008286:	f043 030d 	orr.w	r3, r3, #13
 800828a:	b2db      	uxtb	r3, r3
 800828c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800828e:	7b3b      	ldrb	r3, [r7, #12]
 8008290:	f043 0309 	orr.w	r3, r3, #9
 8008294:	b2db      	uxtb	r3, r3
 8008296:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008298:	bf00      	nop
 800829a:	4825      	ldr	r0, [pc, #148]	@ (8008330 <lcd_send_data+0xd8>)
 800829c:	f002 f817 	bl	800a2ce <HAL_I2C_GetError>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b04      	cmp	r3, #4
 80082a4:	d0f9      	beq.n	800829a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80082a6:	bf00      	nop
 80082a8:	4821      	ldr	r0, [pc, #132]	@ (8008330 <lcd_send_data+0xd8>)
 80082aa:	f002 f803 	bl	800a2b4 <HAL_I2C_GetState>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b20      	cmp	r3, #32
 80082b2:	d1f9      	bne.n	80082a8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80082b4:	4b1f      	ldr	r3, [pc, #124]	@ (8008334 <lcd_send_data+0xdc>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d116      	bne.n	80082ea <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]
 80082c0:	e00f      	b.n	80082e2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	3310      	adds	r3, #16
 80082c6:	443b      	add	r3, r7
 80082c8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	f022 0208 	bic.w	r2, r2, #8
 80082d2:	b2d2      	uxtb	r2, r2
 80082d4:	3310      	adds	r3, #16
 80082d6:	443b      	add	r3, r7
 80082d8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
 80082de:	3301      	adds	r3, #1
 80082e0:	73fb      	strb	r3, [r7, #15]
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	d9ec      	bls.n	80082c2 <lcd_send_data+0x6a>
 80082e8:	e015      	b.n	8008316 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80082ea:	2300      	movs	r3, #0
 80082ec:	73bb      	strb	r3, [r7, #14]
 80082ee:	e00f      	b.n	8008310 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80082f0:	7bbb      	ldrb	r3, [r7, #14]
 80082f2:	3310      	adds	r3, #16
 80082f4:	443b      	add	r3, r7
 80082f6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	f042 0208 	orr.w	r2, r2, #8
 8008300:	b2d2      	uxtb	r2, r2
 8008302:	3310      	adds	r3, #16
 8008304:	443b      	add	r3, r7
 8008306:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	3301      	adds	r3, #1
 800830e:	73bb      	strb	r3, [r7, #14]
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	2b03      	cmp	r3, #3
 8008314:	d9ec      	bls.n	80082f0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008316:	f107 0208 	add.w	r2, r7, #8
 800831a:	2364      	movs	r3, #100	@ 0x64
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	2304      	movs	r3, #4
 8008320:	214e      	movs	r1, #78	@ 0x4e
 8008322:	4803      	ldr	r0, [pc, #12]	@ (8008330 <lcd_send_data+0xd8>)
 8008324:	f001 fb66 	bl	80099f4 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008328:	bf00      	nop
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	2000140c 	.word	0x2000140c
 8008334:	200013e1 	.word	0x200013e1

08008338 <lcd_send_string>:

void lcd_send_string (char *str) {
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8008340:	e006      	b.n	8008350 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	607a      	str	r2, [r7, #4]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	4618      	mov	r0, r3
 800834c:	f7ff ff84 	bl	8008258 <lcd_send_data>
	while (*str) {
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1f4      	bne.n	8008342 <lcd_send_string+0xa>
	}
}
 8008358:	bf00      	nop
 800835a:	bf00      	nop
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <lcd_init>:

void lcd_init (void) {
 8008362:	b580      	push	{r7, lr}
 8008364:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8008366:	2002      	movs	r0, #2
 8008368:	f7ff ff06 	bl	8008178 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800836c:	2028      	movs	r0, #40	@ 0x28
 800836e:	f7ff ff03 	bl	8008178 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8008372:	200c      	movs	r0, #12
 8008374:	f7ff ff00 	bl	8008178 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8008378:	2080      	movs	r0, #128	@ 0x80
 800837a:	f7ff fefd 	bl	8008178 <lcd_send_cmd>
	lcd_backlight(1);
 800837e:	2001      	movs	r0, #1
 8008380:	f000 f840 	bl	8008404 <lcd_backlight>
}
 8008384:	bf00      	nop
 8008386:	bd80      	pop	{r7, pc}

08008388 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	4603      	mov	r3, r0
 8008390:	460a      	mov	r2, r1
 8008392:	71fb      	strb	r3, [r7, #7]
 8008394:	4613      	mov	r3, r2
 8008396:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8008398:	79fb      	ldrb	r3, [r7, #7]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d106      	bne.n	80083ac <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 800839e:	79bb      	ldrb	r3, [r7, #6]
 80083a0:	337f      	adds	r3, #127	@ 0x7f
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7ff fee7 	bl	8008178 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80083aa:	e008      	b.n	80083be <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80083ac:	79fb      	ldrb	r3, [r7, #7]
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d105      	bne.n	80083be <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80083b2:	79bb      	ldrb	r3, [r7, #6]
 80083b4:	3b41      	subs	r3, #65	@ 0x41
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7ff fedd 	bl	8008178 <lcd_send_cmd>
}
 80083be:	bf00      	nop
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b082      	sub	sp, #8
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	4603      	mov	r3, r0
 80083ce:	603a      	str	r2, [r7, #0]
 80083d0:	71fb      	strb	r3, [r7, #7]
 80083d2:	460b      	mov	r3, r1
 80083d4:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80083d6:	79ba      	ldrb	r2, [r7, #6]
 80083d8:	79fb      	ldrb	r3, [r7, #7]
 80083da:	4611      	mov	r1, r2
 80083dc:	4618      	mov	r0, r3
 80083de:	f7ff ffd3 	bl	8008388 <lcd_gotoxy>
	lcd_send_string(str);
 80083e2:	6838      	ldr	r0, [r7, #0]
 80083e4:	f7ff ffa8 	bl	8008338 <lcd_send_string>
}
 80083e8:	bf00      	nop
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <lcd_clear>:

void lcd_clear(void) {
 80083f0:	b580      	push	{r7, lr}
 80083f2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80083f4:	2001      	movs	r0, #1
 80083f6:	f7ff febf 	bl	8008178 <lcd_send_cmd>
    HAL_Delay(2);
 80083fa:	2002      	movs	r0, #2
 80083fc:	f000 fcb0 	bl	8008d60 <HAL_Delay>

}
 8008400:	bf00      	nop
 8008402:	bd80      	pop	{r7, pc}

08008404 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	4603      	mov	r3, r0
 800840c:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800840e:	4a05      	ldr	r2, [pc, #20]	@ (8008424 <lcd_backlight+0x20>)
 8008410:	79fb      	ldrb	r3, [r7, #7]
 8008412:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8008414:	2000      	movs	r0, #0
 8008416:	f7ff feaf 	bl	8008178 <lcd_send_cmd>
}
 800841a:	bf00      	nop
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	200013e1 	.word	0x200013e1

08008428 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008430:	4b04      	ldr	r3, [pc, #16]	@ (8008444 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3301      	adds	r3, #1
 8008436:	4a03      	ldr	r2, [pc, #12]	@ (8008444 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008438:	6013      	str	r3, [r2, #0]
}
 800843a:	bf00      	nop
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	bc80      	pop	{r7}
 8008442:	4770      	bx	lr
 8008444:	20000d78 	.word	0x20000d78

08008448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800844c:	f000 fc26 	bl	8008c9c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008450:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008454:	f000 fc84 	bl	8008d60 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008458:	f000 f89a 	bl	8008590 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800845c:	f000 f9bc 	bl	80087d8 <MX_GPIO_Init>
  MX_CAN_Init();
 8008460:	f000 f8dc 	bl	800861c <MX_CAN_Init>
  MX_I2C1_Init();
 8008464:	f000 f90e 	bl	8008684 <MX_I2C1_Init>
  MX_TIM1_Init();
 8008468:	f000 f93a 	bl	80086e0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800846c:	f000 f98a 	bl	8008784 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008470:	2201      	movs	r2, #1
 8008472:	2140      	movs	r1, #64	@ 0x40
 8008474:	483d      	ldr	r0, [pc, #244]	@ (800856c <main+0x124>)
 8008476:	f001 f918 	bl	80096aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800847a:	2201      	movs	r2, #1
 800847c:	2180      	movs	r1, #128	@ 0x80
 800847e:	483b      	ldr	r0, [pc, #236]	@ (800856c <main+0x124>)
 8008480:	f001 f913 	bl	80096aa <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008484:	200a      	movs	r0, #10
 8008486:	f000 fc6b 	bl	8008d60 <HAL_Delay>
  lcd_init();
 800848a:	f7ff ff6a 	bl	8008362 <lcd_init>
  HAL_Delay(10);
 800848e:	200a      	movs	r0, #10
 8008490:	f000 fc66 	bl	8008d60 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8008494:	4836      	ldr	r0, [pc, #216]	@ (8008570 <main+0x128>)
 8008496:	f002 ffbb 	bl	800b410 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800849a:	bf00      	nop
 800849c:	4835      	ldr	r0, [pc, #212]	@ (8008574 <main+0x12c>)
 800849e:	f001 ff16 	bl	800a2ce <HAL_I2C_GetError>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b04      	cmp	r3, #4
 80084a6:	d0f9      	beq.n	800849c <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80084a8:	bf00      	nop
 80084aa:	4832      	ldr	r0, [pc, #200]	@ (8008574 <main+0x12c>)
 80084ac:	f001 ff02 	bl	800a2b4 <HAL_I2C_GetState>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b20      	cmp	r3, #32
 80084b4:	d1f9      	bne.n	80084aa <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80084b6:	2200      	movs	r2, #0
 80084b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80084bc:	482b      	ldr	r0, [pc, #172]	@ (800856c <main+0x124>)
 80084be:	f001 f8f4 	bl	80096aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80084c2:	2200      	movs	r2, #0
 80084c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80084c8:	4828      	ldr	r0, [pc, #160]	@ (800856c <main+0x124>)
 80084ca:	f001 f8ee 	bl	80096aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80084ce:	2200      	movs	r2, #0
 80084d0:	2104      	movs	r1, #4
 80084d2:	4826      	ldr	r0, [pc, #152]	@ (800856c <main+0x124>)
 80084d4:	f001 f8e9 	bl	80096aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80084d8:	2200      	movs	r2, #0
 80084da:	2102      	movs	r1, #2
 80084dc:	4823      	ldr	r0, [pc, #140]	@ (800856c <main+0x124>)
 80084de:	f001 f8e4 	bl	80096aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80084e2:	2200      	movs	r2, #0
 80084e4:	2101      	movs	r1, #1
 80084e6:	4821      	ldr	r0, [pc, #132]	@ (800856c <main+0x124>)
 80084e8:	f001 f8df 	bl	80096aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80084ec:	2200      	movs	r2, #0
 80084ee:	2120      	movs	r1, #32
 80084f0:	4821      	ldr	r0, [pc, #132]	@ (8008578 <main+0x130>)
 80084f2:	f001 f8da 	bl	80096aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80084f6:	2200      	movs	r2, #0
 80084f8:	2110      	movs	r1, #16
 80084fa:	481f      	ldr	r0, [pc, #124]	@ (8008578 <main+0x130>)
 80084fc:	f001 f8d5 	bl	80096aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008500:	2200      	movs	r2, #0
 8008502:	2180      	movs	r1, #128	@ 0x80
 8008504:	481d      	ldr	r0, [pc, #116]	@ (800857c <main+0x134>)
 8008506:	f001 f8d0 	bl	80096aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800850a:	2200      	movs	r2, #0
 800850c:	2140      	movs	r1, #64	@ 0x40
 800850e:	481b      	ldr	r0, [pc, #108]	@ (800857c <main+0x134>)
 8008510:	f001 f8cb 	bl	80096aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008514:	2200      	movs	r2, #0
 8008516:	2120      	movs	r1, #32
 8008518:	4818      	ldr	r0, [pc, #96]	@ (800857c <main+0x134>)
 800851a:	f001 f8c6 	bl	80096aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800851e:	2200      	movs	r2, #0
 8008520:	2110      	movs	r1, #16
 8008522:	4816      	ldr	r0, [pc, #88]	@ (800857c <main+0x134>)
 8008524:	f001 f8c1 	bl	80096aa <HAL_GPIO_WritePin>

  i2cTest();
 8008528:	f7f8 fa12 	bl	8000950 <i2cTest>
  HAL_Delay(100);
 800852c:	2064      	movs	r0, #100	@ 0x64
 800852e:	f000 fc17 	bl	8008d60 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8008532:	4a13      	ldr	r2, [pc, #76]	@ (8008580 <main+0x138>)
 8008534:	2101      	movs	r1, #1
 8008536:	2001      	movs	r0, #1
 8008538:	f7ff ff45 	bl	80083c6 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 800853c:	4a11      	ldr	r2, [pc, #68]	@ (8008584 <main+0x13c>)
 800853e:	2101      	movs	r1, #1
 8008540:	2002      	movs	r0, #2
 8008542:	f7ff ff40 	bl	80083c6 <lcd_print>
  HAL_Delay(1000);
 8008546:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800854a:	f000 fc09 	bl	8008d60 <HAL_Delay>
  lcd_clear();
 800854e:	f7ff ff4f 	bl	80083f0 <lcd_clear>

  eepromKontrol();
 8008552:	f7f7 fe6f 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8008556:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800855a:	f000 fc01 	bl	8008d60 <HAL_Delay>

  backLightTimer = millis;
 800855e:	4b0a      	ldr	r3, [pc, #40]	@ (8008588 <main+0x140>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a0a      	ldr	r2, [pc, #40]	@ (800858c <main+0x144>)
 8008564:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008566:	f7fe fa25 	bl	80069b4 <mainLoop>
 800856a:	e7fc      	b.n	8008566 <main+0x11e>
 800856c:	40010c00 	.word	0x40010c00
 8008570:	20001460 	.word	0x20001460
 8008574:	2000140c 	.word	0x2000140c
 8008578:	40011000 	.word	0x40011000
 800857c:	40010800 	.word	0x40010800
 8008580:	20000030 	.word	0x20000030
 8008584:	20000044 	.word	0x20000044
 8008588:	20000d78 	.word	0x20000d78
 800858c:	20000d94 	.word	0x20000d94

08008590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b090      	sub	sp, #64	@ 0x40
 8008594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008596:	f107 0318 	add.w	r3, r7, #24
 800859a:	2228      	movs	r2, #40	@ 0x28
 800859c:	2100      	movs	r1, #0
 800859e:	4618      	mov	r0, r3
 80085a0:	f003 fc52 	bl	800be48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80085a4:	1d3b      	adds	r3, r7, #4
 80085a6:	2200      	movs	r2, #0
 80085a8:	601a      	str	r2, [r3, #0]
 80085aa:	605a      	str	r2, [r3, #4]
 80085ac:	609a      	str	r2, [r3, #8]
 80085ae:	60da      	str	r2, [r3, #12]
 80085b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80085b2:	2301      	movs	r3, #1
 80085b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80085b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80085ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80085bc:	2300      	movs	r3, #0
 80085be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80085c0:	2301      	movs	r3, #1
 80085c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80085c4:	2302      	movs	r3, #2
 80085c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80085c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80085cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80085ce:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80085d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80085d4:	f107 0318 	add.w	r3, r7, #24
 80085d8:	4618      	mov	r0, r3
 80085da:	f002 fab9 	bl	800ab50 <HAL_RCC_OscConfig>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80085e4:	f000 f9a2 	bl	800892c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085e8:	230f      	movs	r3, #15
 80085ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085ec:	2302      	movs	r3, #2
 80085ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085f0:	2300      	movs	r3, #0
 80085f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80085f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80085fa:	2300      	movs	r3, #0
 80085fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80085fe:	1d3b      	adds	r3, r7, #4
 8008600:	2102      	movs	r1, #2
 8008602:	4618      	mov	r0, r3
 8008604:	f002 fd26 	bl	800b054 <HAL_RCC_ClockConfig>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800860e:	f000 f98d 	bl	800892c <Error_Handler>
  }
}
 8008612:	bf00      	nop
 8008614:	3740      	adds	r7, #64	@ 0x40
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008620:	4b16      	ldr	r3, [pc, #88]	@ (800867c <MX_CAN_Init+0x60>)
 8008622:	4a17      	ldr	r2, [pc, #92]	@ (8008680 <MX_CAN_Init+0x64>)
 8008624:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008626:	4b15      	ldr	r3, [pc, #84]	@ (800867c <MX_CAN_Init+0x60>)
 8008628:	2210      	movs	r2, #16
 800862a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800862c:	4b13      	ldr	r3, [pc, #76]	@ (800867c <MX_CAN_Init+0x60>)
 800862e:	2200      	movs	r2, #0
 8008630:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008632:	4b12      	ldr	r3, [pc, #72]	@ (800867c <MX_CAN_Init+0x60>)
 8008634:	2200      	movs	r2, #0
 8008636:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008638:	4b10      	ldr	r3, [pc, #64]	@ (800867c <MX_CAN_Init+0x60>)
 800863a:	2200      	movs	r2, #0
 800863c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800863e:	4b0f      	ldr	r3, [pc, #60]	@ (800867c <MX_CAN_Init+0x60>)
 8008640:	2200      	movs	r2, #0
 8008642:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008644:	4b0d      	ldr	r3, [pc, #52]	@ (800867c <MX_CAN_Init+0x60>)
 8008646:	2200      	movs	r2, #0
 8008648:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800864a:	4b0c      	ldr	r3, [pc, #48]	@ (800867c <MX_CAN_Init+0x60>)
 800864c:	2200      	movs	r2, #0
 800864e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008650:	4b0a      	ldr	r3, [pc, #40]	@ (800867c <MX_CAN_Init+0x60>)
 8008652:	2200      	movs	r2, #0
 8008654:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008656:	4b09      	ldr	r3, [pc, #36]	@ (800867c <MX_CAN_Init+0x60>)
 8008658:	2200      	movs	r2, #0
 800865a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800865c:	4b07      	ldr	r3, [pc, #28]	@ (800867c <MX_CAN_Init+0x60>)
 800865e:	2200      	movs	r2, #0
 8008660:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008662:	4b06      	ldr	r3, [pc, #24]	@ (800867c <MX_CAN_Init+0x60>)
 8008664:	2200      	movs	r2, #0
 8008666:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008668:	4804      	ldr	r0, [pc, #16]	@ (800867c <MX_CAN_Init+0x60>)
 800866a:	f000 fb9d 	bl	8008da8 <HAL_CAN_Init>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008674:	f000 f95a 	bl	800892c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008678:	bf00      	nop
 800867a:	bd80      	pop	{r7, pc}
 800867c:	200013e4 	.word	0x200013e4
 8008680:	40006400 	.word	0x40006400

08008684 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008688:	4b12      	ldr	r3, [pc, #72]	@ (80086d4 <MX_I2C1_Init+0x50>)
 800868a:	4a13      	ldr	r2, [pc, #76]	@ (80086d8 <MX_I2C1_Init+0x54>)
 800868c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800868e:	4b11      	ldr	r3, [pc, #68]	@ (80086d4 <MX_I2C1_Init+0x50>)
 8008690:	4a12      	ldr	r2, [pc, #72]	@ (80086dc <MX_I2C1_Init+0x58>)
 8008692:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008694:	4b0f      	ldr	r3, [pc, #60]	@ (80086d4 <MX_I2C1_Init+0x50>)
 8008696:	2200      	movs	r2, #0
 8008698:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800869a:	4b0e      	ldr	r3, [pc, #56]	@ (80086d4 <MX_I2C1_Init+0x50>)
 800869c:	2200      	movs	r2, #0
 800869e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80086a0:	4b0c      	ldr	r3, [pc, #48]	@ (80086d4 <MX_I2C1_Init+0x50>)
 80086a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80086a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80086a8:	4b0a      	ldr	r3, [pc, #40]	@ (80086d4 <MX_I2C1_Init+0x50>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80086ae:	4b09      	ldr	r3, [pc, #36]	@ (80086d4 <MX_I2C1_Init+0x50>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80086b4:	4b07      	ldr	r3, [pc, #28]	@ (80086d4 <MX_I2C1_Init+0x50>)
 80086b6:	2200      	movs	r2, #0
 80086b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80086ba:	4b06      	ldr	r3, [pc, #24]	@ (80086d4 <MX_I2C1_Init+0x50>)
 80086bc:	2200      	movs	r2, #0
 80086be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80086c0:	4804      	ldr	r0, [pc, #16]	@ (80086d4 <MX_I2C1_Init+0x50>)
 80086c2:	f001 f823 	bl	800970c <HAL_I2C_Init>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80086cc:	f000 f92e 	bl	800892c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80086d0:	bf00      	nop
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	2000140c 	.word	0x2000140c
 80086d8:	40005400 	.word	0x40005400
 80086dc:	00061a80 	.word	0x00061a80

080086e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80086e6:	f107 0308 	add.w	r3, r7, #8
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	605a      	str	r2, [r3, #4]
 80086f0:	609a      	str	r2, [r3, #8]
 80086f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80086f4:	463b      	mov	r3, r7
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80086fc:	4b1f      	ldr	r3, [pc, #124]	@ (800877c <MX_TIM1_Init+0x9c>)
 80086fe:	4a20      	ldr	r2, [pc, #128]	@ (8008780 <MX_TIM1_Init+0xa0>)
 8008700:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008702:	4b1e      	ldr	r3, [pc, #120]	@ (800877c <MX_TIM1_Init+0x9c>)
 8008704:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8008708:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800870a:	4b1c      	ldr	r3, [pc, #112]	@ (800877c <MX_TIM1_Init+0x9c>)
 800870c:	2200      	movs	r2, #0
 800870e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008710:	4b1a      	ldr	r3, [pc, #104]	@ (800877c <MX_TIM1_Init+0x9c>)
 8008712:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8008716:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008718:	4b18      	ldr	r3, [pc, #96]	@ (800877c <MX_TIM1_Init+0x9c>)
 800871a:	2200      	movs	r2, #0
 800871c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800871e:	4b17      	ldr	r3, [pc, #92]	@ (800877c <MX_TIM1_Init+0x9c>)
 8008720:	2200      	movs	r2, #0
 8008722:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008724:	4b15      	ldr	r3, [pc, #84]	@ (800877c <MX_TIM1_Init+0x9c>)
 8008726:	2200      	movs	r2, #0
 8008728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800872a:	4814      	ldr	r0, [pc, #80]	@ (800877c <MX_TIM1_Init+0x9c>)
 800872c:	f002 fe20 	bl	800b370 <HAL_TIM_Base_Init>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008736:	f000 f8f9 	bl	800892c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800873a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800873e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008740:	f107 0308 	add.w	r3, r7, #8
 8008744:	4619      	mov	r1, r3
 8008746:	480d      	ldr	r0, [pc, #52]	@ (800877c <MX_TIM1_Init+0x9c>)
 8008748:	f002 ffca 	bl	800b6e0 <HAL_TIM_ConfigClockSource>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008752:	f000 f8eb 	bl	800892c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008756:	2300      	movs	r3, #0
 8008758:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800875a:	2300      	movs	r3, #0
 800875c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800875e:	463b      	mov	r3, r7
 8008760:	4619      	mov	r1, r3
 8008762:	4806      	ldr	r0, [pc, #24]	@ (800877c <MX_TIM1_Init+0x9c>)
 8008764:	f003 f9b8 	bl	800bad8 <HAL_TIMEx_MasterConfigSynchronization>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800876e:	f000 f8dd 	bl	800892c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008772:	bf00      	nop
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	20001460 	.word	0x20001460
 8008780:	40012c00 	.word	0x40012c00

08008784 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008788:	4b11      	ldr	r3, [pc, #68]	@ (80087d0 <MX_USART1_UART_Init+0x4c>)
 800878a:	4a12      	ldr	r2, [pc, #72]	@ (80087d4 <MX_USART1_UART_Init+0x50>)
 800878c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800878e:	4b10      	ldr	r3, [pc, #64]	@ (80087d0 <MX_USART1_UART_Init+0x4c>)
 8008790:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008796:	4b0e      	ldr	r3, [pc, #56]	@ (80087d0 <MX_USART1_UART_Init+0x4c>)
 8008798:	2200      	movs	r2, #0
 800879a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800879c:	4b0c      	ldr	r3, [pc, #48]	@ (80087d0 <MX_USART1_UART_Init+0x4c>)
 800879e:	2200      	movs	r2, #0
 80087a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80087a2:	4b0b      	ldr	r3, [pc, #44]	@ (80087d0 <MX_USART1_UART_Init+0x4c>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80087a8:	4b09      	ldr	r3, [pc, #36]	@ (80087d0 <MX_USART1_UART_Init+0x4c>)
 80087aa:	220c      	movs	r2, #12
 80087ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087ae:	4b08      	ldr	r3, [pc, #32]	@ (80087d0 <MX_USART1_UART_Init+0x4c>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80087b4:	4b06      	ldr	r3, [pc, #24]	@ (80087d0 <MX_USART1_UART_Init+0x4c>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80087ba:	4805      	ldr	r0, [pc, #20]	@ (80087d0 <MX_USART1_UART_Init+0x4c>)
 80087bc:	f003 fa0a 	bl	800bbd4 <HAL_UART_Init>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80087c6:	f000 f8b1 	bl	800892c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80087ca:	bf00      	nop
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	200014a8 	.word	0x200014a8
 80087d4:	40013800 	.word	0x40013800

080087d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b088      	sub	sp, #32
 80087dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087de:	f107 0310 	add.w	r3, r7, #16
 80087e2:	2200      	movs	r2, #0
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	605a      	str	r2, [r3, #4]
 80087e8:	609a      	str	r2, [r3, #8]
 80087ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80087ec:	4b4b      	ldr	r3, [pc, #300]	@ (800891c <MX_GPIO_Init+0x144>)
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	4a4a      	ldr	r2, [pc, #296]	@ (800891c <MX_GPIO_Init+0x144>)
 80087f2:	f043 0310 	orr.w	r3, r3, #16
 80087f6:	6193      	str	r3, [r2, #24]
 80087f8:	4b48      	ldr	r3, [pc, #288]	@ (800891c <MX_GPIO_Init+0x144>)
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	f003 0310 	and.w	r3, r3, #16
 8008800:	60fb      	str	r3, [r7, #12]
 8008802:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008804:	4b45      	ldr	r3, [pc, #276]	@ (800891c <MX_GPIO_Init+0x144>)
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	4a44      	ldr	r2, [pc, #272]	@ (800891c <MX_GPIO_Init+0x144>)
 800880a:	f043 0320 	orr.w	r3, r3, #32
 800880e:	6193      	str	r3, [r2, #24]
 8008810:	4b42      	ldr	r3, [pc, #264]	@ (800891c <MX_GPIO_Init+0x144>)
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	f003 0320 	and.w	r3, r3, #32
 8008818:	60bb      	str	r3, [r7, #8]
 800881a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800881c:	4b3f      	ldr	r3, [pc, #252]	@ (800891c <MX_GPIO_Init+0x144>)
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	4a3e      	ldr	r2, [pc, #248]	@ (800891c <MX_GPIO_Init+0x144>)
 8008822:	f043 0304 	orr.w	r3, r3, #4
 8008826:	6193      	str	r3, [r2, #24]
 8008828:	4b3c      	ldr	r3, [pc, #240]	@ (800891c <MX_GPIO_Init+0x144>)
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	607b      	str	r3, [r7, #4]
 8008832:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008834:	4b39      	ldr	r3, [pc, #228]	@ (800891c <MX_GPIO_Init+0x144>)
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	4a38      	ldr	r2, [pc, #224]	@ (800891c <MX_GPIO_Init+0x144>)
 800883a:	f043 0308 	orr.w	r3, r3, #8
 800883e:	6193      	str	r3, [r2, #24]
 8008840:	4b36      	ldr	r3, [pc, #216]	@ (800891c <MX_GPIO_Init+0x144>)
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	f003 0308 	and.w	r3, r3, #8
 8008848:	603b      	str	r3, [r7, #0]
 800884a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800884c:	2200      	movs	r2, #0
 800884e:	21f0      	movs	r1, #240	@ 0xf0
 8008850:	4833      	ldr	r0, [pc, #204]	@ (8008920 <MX_GPIO_Init+0x148>)
 8008852:	f000 ff2a 	bl	80096aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008856:	2200      	movs	r2, #0
 8008858:	f241 0130 	movw	r1, #4144	@ 0x1030
 800885c:	4831      	ldr	r0, [pc, #196]	@ (8008924 <MX_GPIO_Init+0x14c>)
 800885e:	f000 ff24 	bl	80096aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008862:	2200      	movs	r2, #0
 8008864:	f640 4107 	movw	r1, #3079	@ 0xc07
 8008868:	482f      	ldr	r0, [pc, #188]	@ (8008928 <MX_GPIO_Init+0x150>)
 800886a:	f000 ff1e 	bl	80096aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800886e:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8008872:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008874:	2300      	movs	r3, #0
 8008876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008878:	2300      	movs	r3, #0
 800887a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800887c:	f107 0310 	add.w	r3, r7, #16
 8008880:	4619      	mov	r1, r3
 8008882:	4828      	ldr	r0, [pc, #160]	@ (8008924 <MX_GPIO_Init+0x14c>)
 8008884:	f000 fc9a 	bl	80091bc <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008888:	f248 130f 	movw	r3, #33039	@ 0x810f
 800888c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800888e:	2300      	movs	r3, #0
 8008890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008892:	2300      	movs	r3, #0
 8008894:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008896:	f107 0310 	add.w	r3, r7, #16
 800889a:	4619      	mov	r1, r3
 800889c:	4820      	ldr	r0, [pc, #128]	@ (8008920 <MX_GPIO_Init+0x148>)
 800889e:	f000 fc8d 	bl	80091bc <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80088a2:	23f0      	movs	r3, #240	@ 0xf0
 80088a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088a6:	2301      	movs	r3, #1
 80088a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088ae:	2302      	movs	r3, #2
 80088b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088b2:	f107 0310 	add.w	r3, r7, #16
 80088b6:	4619      	mov	r1, r3
 80088b8:	4819      	ldr	r0, [pc, #100]	@ (8008920 <MX_GPIO_Init+0x148>)
 80088ba:	f000 fc7f 	bl	80091bc <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80088be:	f241 0330 	movw	r3, #4144	@ 0x1030
 80088c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088c4:	2301      	movs	r3, #1
 80088c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088c8:	2300      	movs	r3, #0
 80088ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088cc:	2302      	movs	r3, #2
 80088ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088d0:	f107 0310 	add.w	r3, r7, #16
 80088d4:	4619      	mov	r1, r3
 80088d6:	4813      	ldr	r0, [pc, #76]	@ (8008924 <MX_GPIO_Init+0x14c>)
 80088d8:	f000 fc70 	bl	80091bc <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80088dc:	f640 4307 	movw	r3, #3079	@ 0xc07
 80088e0:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088e2:	2301      	movs	r3, #1
 80088e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088e6:	2300      	movs	r3, #0
 80088e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088ea:	2302      	movs	r3, #2
 80088ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088ee:	f107 0310 	add.w	r3, r7, #16
 80088f2:	4619      	mov	r1, r3
 80088f4:	480c      	ldr	r0, [pc, #48]	@ (8008928 <MX_GPIO_Init+0x150>)
 80088f6:	f000 fc61 	bl	80091bc <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80088fa:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80088fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008900:	2300      	movs	r3, #0
 8008902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008904:	2300      	movs	r3, #0
 8008906:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008908:	f107 0310 	add.w	r3, r7, #16
 800890c:	4619      	mov	r1, r3
 800890e:	4806      	ldr	r0, [pc, #24]	@ (8008928 <MX_GPIO_Init+0x150>)
 8008910:	f000 fc54 	bl	80091bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008914:	bf00      	nop
 8008916:	3720      	adds	r7, #32
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	40021000 	.word	0x40021000
 8008920:	40010800 	.word	0x40010800
 8008924:	40011000 	.word	0x40011000
 8008928:	40010c00 	.word	0x40010c00

0800892c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008930:	bf00      	nop
 8008932:	46bd      	mov	sp, r7
 8008934:	bc80      	pop	{r7}
 8008936:	4770      	bx	lr

08008938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800893e:	4b15      	ldr	r3, [pc, #84]	@ (8008994 <HAL_MspInit+0x5c>)
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	4a14      	ldr	r2, [pc, #80]	@ (8008994 <HAL_MspInit+0x5c>)
 8008944:	f043 0301 	orr.w	r3, r3, #1
 8008948:	6193      	str	r3, [r2, #24]
 800894a:	4b12      	ldr	r3, [pc, #72]	@ (8008994 <HAL_MspInit+0x5c>)
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	60bb      	str	r3, [r7, #8]
 8008954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008956:	4b0f      	ldr	r3, [pc, #60]	@ (8008994 <HAL_MspInit+0x5c>)
 8008958:	69db      	ldr	r3, [r3, #28]
 800895a:	4a0e      	ldr	r2, [pc, #56]	@ (8008994 <HAL_MspInit+0x5c>)
 800895c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008960:	61d3      	str	r3, [r2, #28]
 8008962:	4b0c      	ldr	r3, [pc, #48]	@ (8008994 <HAL_MspInit+0x5c>)
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800896a:	607b      	str	r3, [r7, #4]
 800896c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800896e:	4b0a      	ldr	r3, [pc, #40]	@ (8008998 <HAL_MspInit+0x60>)
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	4a04      	ldr	r2, [pc, #16]	@ (8008998 <HAL_MspInit+0x60>)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800898a:	bf00      	nop
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	bc80      	pop	{r7}
 8008992:	4770      	bx	lr
 8008994:	40021000 	.word	0x40021000
 8008998:	40010000 	.word	0x40010000

0800899c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089a4:	f107 0310 	add.w	r3, r7, #16
 80089a8:	2200      	movs	r2, #0
 80089aa:	601a      	str	r2, [r3, #0]
 80089ac:	605a      	str	r2, [r3, #4]
 80089ae:	609a      	str	r2, [r3, #8]
 80089b0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a1c      	ldr	r2, [pc, #112]	@ (8008a28 <HAL_CAN_MspInit+0x8c>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d131      	bne.n	8008a20 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80089bc:	4b1b      	ldr	r3, [pc, #108]	@ (8008a2c <HAL_CAN_MspInit+0x90>)
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	4a1a      	ldr	r2, [pc, #104]	@ (8008a2c <HAL_CAN_MspInit+0x90>)
 80089c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80089c6:	61d3      	str	r3, [r2, #28]
 80089c8:	4b18      	ldr	r3, [pc, #96]	@ (8008a2c <HAL_CAN_MspInit+0x90>)
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089d0:	60fb      	str	r3, [r7, #12]
 80089d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089d4:	4b15      	ldr	r3, [pc, #84]	@ (8008a2c <HAL_CAN_MspInit+0x90>)
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	4a14      	ldr	r2, [pc, #80]	@ (8008a2c <HAL_CAN_MspInit+0x90>)
 80089da:	f043 0304 	orr.w	r3, r3, #4
 80089de:	6193      	str	r3, [r2, #24]
 80089e0:	4b12      	ldr	r3, [pc, #72]	@ (8008a2c <HAL_CAN_MspInit+0x90>)
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	f003 0304 	and.w	r3, r3, #4
 80089e8:	60bb      	str	r3, [r7, #8]
 80089ea:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80089ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80089f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089f2:	2300      	movs	r3, #0
 80089f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089f6:	2300      	movs	r3, #0
 80089f8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089fa:	f107 0310 	add.w	r3, r7, #16
 80089fe:	4619      	mov	r1, r3
 8008a00:	480b      	ldr	r0, [pc, #44]	@ (8008a30 <HAL_CAN_MspInit+0x94>)
 8008a02:	f000 fbdb 	bl	80091bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008a06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008a10:	2303      	movs	r3, #3
 8008a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a14:	f107 0310 	add.w	r3, r7, #16
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4805      	ldr	r0, [pc, #20]	@ (8008a30 <HAL_CAN_MspInit+0x94>)
 8008a1c:	f000 fbce 	bl	80091bc <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8008a20:	bf00      	nop
 8008a22:	3720      	adds	r7, #32
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	40006400 	.word	0x40006400
 8008a2c:	40021000 	.word	0x40021000
 8008a30:	40010800 	.word	0x40010800

08008a34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b088      	sub	sp, #32
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a3c:	f107 0310 	add.w	r3, r7, #16
 8008a40:	2200      	movs	r2, #0
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	605a      	str	r2, [r3, #4]
 8008a46:	609a      	str	r2, [r3, #8]
 8008a48:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a15      	ldr	r2, [pc, #84]	@ (8008aa4 <HAL_I2C_MspInit+0x70>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d123      	bne.n	8008a9c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a54:	4b14      	ldr	r3, [pc, #80]	@ (8008aa8 <HAL_I2C_MspInit+0x74>)
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	4a13      	ldr	r2, [pc, #76]	@ (8008aa8 <HAL_I2C_MspInit+0x74>)
 8008a5a:	f043 0308 	orr.w	r3, r3, #8
 8008a5e:	6193      	str	r3, [r2, #24]
 8008a60:	4b11      	ldr	r3, [pc, #68]	@ (8008aa8 <HAL_I2C_MspInit+0x74>)
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	f003 0308 	and.w	r3, r3, #8
 8008a68:	60fb      	str	r3, [r7, #12]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008a6c:	23c0      	movs	r3, #192	@ 0xc0
 8008a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008a70:	2312      	movs	r3, #18
 8008a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008a74:	2303      	movs	r3, #3
 8008a76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a78:	f107 0310 	add.w	r3, r7, #16
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	480b      	ldr	r0, [pc, #44]	@ (8008aac <HAL_I2C_MspInit+0x78>)
 8008a80:	f000 fb9c 	bl	80091bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008a84:	4b08      	ldr	r3, [pc, #32]	@ (8008aa8 <HAL_I2C_MspInit+0x74>)
 8008a86:	69db      	ldr	r3, [r3, #28]
 8008a88:	4a07      	ldr	r2, [pc, #28]	@ (8008aa8 <HAL_I2C_MspInit+0x74>)
 8008a8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a8e:	61d3      	str	r3, [r2, #28]
 8008a90:	4b05      	ldr	r3, [pc, #20]	@ (8008aa8 <HAL_I2C_MspInit+0x74>)
 8008a92:	69db      	ldr	r3, [r3, #28]
 8008a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a98:	60bb      	str	r3, [r7, #8]
 8008a9a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8008a9c:	bf00      	nop
 8008a9e:	3720      	adds	r7, #32
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	40005400 	.word	0x40005400
 8008aa8:	40021000 	.word	0x40021000
 8008aac:	40010c00 	.word	0x40010c00

08008ab0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a0a      	ldr	r2, [pc, #40]	@ (8008ae8 <HAL_I2C_MspDeInit+0x38>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d10d      	bne.n	8008ade <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8008aec <HAL_I2C_MspDeInit+0x3c>)
 8008ac4:	69db      	ldr	r3, [r3, #28]
 8008ac6:	4a09      	ldr	r2, [pc, #36]	@ (8008aec <HAL_I2C_MspDeInit+0x3c>)
 8008ac8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008acc:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008ace:	2140      	movs	r1, #64	@ 0x40
 8008ad0:	4807      	ldr	r0, [pc, #28]	@ (8008af0 <HAL_I2C_MspDeInit+0x40>)
 8008ad2:	f000 fd07 	bl	80094e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008ad6:	2180      	movs	r1, #128	@ 0x80
 8008ad8:	4805      	ldr	r0, [pc, #20]	@ (8008af0 <HAL_I2C_MspDeInit+0x40>)
 8008ada:	f000 fd03 	bl	80094e4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008ade:	bf00      	nop
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	40005400 	.word	0x40005400
 8008aec:	40021000 	.word	0x40021000
 8008af0:	40010c00 	.word	0x40010c00

08008af4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a0d      	ldr	r2, [pc, #52]	@ (8008b38 <HAL_TIM_Base_MspInit+0x44>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d113      	bne.n	8008b2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008b06:	4b0d      	ldr	r3, [pc, #52]	@ (8008b3c <HAL_TIM_Base_MspInit+0x48>)
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8008b3c <HAL_TIM_Base_MspInit+0x48>)
 8008b0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008b10:	6193      	str	r3, [r2, #24]
 8008b12:	4b0a      	ldr	r3, [pc, #40]	@ (8008b3c <HAL_TIM_Base_MspInit+0x48>)
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b1a:	60fb      	str	r3, [r7, #12]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008b1e:	2200      	movs	r2, #0
 8008b20:	2100      	movs	r1, #0
 8008b22:	2019      	movs	r0, #25
 8008b24:	f000 fb13 	bl	800914e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008b28:	2019      	movs	r0, #25
 8008b2a:	f000 fb2c 	bl	8009186 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8008b2e:	bf00      	nop
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	40012c00 	.word	0x40012c00
 8008b3c:	40021000 	.word	0x40021000

08008b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b088      	sub	sp, #32
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b48:	f107 0310 	add.w	r3, r7, #16
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	605a      	str	r2, [r3, #4]
 8008b52:	609a      	str	r2, [r3, #8]
 8008b54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8008bcc <HAL_UART_MspInit+0x8c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d131      	bne.n	8008bc4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008b60:	4b1b      	ldr	r3, [pc, #108]	@ (8008bd0 <HAL_UART_MspInit+0x90>)
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	4a1a      	ldr	r2, [pc, #104]	@ (8008bd0 <HAL_UART_MspInit+0x90>)
 8008b66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b6a:	6193      	str	r3, [r2, #24]
 8008b6c:	4b18      	ldr	r3, [pc, #96]	@ (8008bd0 <HAL_UART_MspInit+0x90>)
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b74:	60fb      	str	r3, [r7, #12]
 8008b76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b78:	4b15      	ldr	r3, [pc, #84]	@ (8008bd0 <HAL_UART_MspInit+0x90>)
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	4a14      	ldr	r2, [pc, #80]	@ (8008bd0 <HAL_UART_MspInit+0x90>)
 8008b7e:	f043 0304 	orr.w	r3, r3, #4
 8008b82:	6193      	str	r3, [r2, #24]
 8008b84:	4b12      	ldr	r3, [pc, #72]	@ (8008bd0 <HAL_UART_MspInit+0x90>)
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	60bb      	str	r3, [r7, #8]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008b90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b96:	2302      	movs	r3, #2
 8008b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b9e:	f107 0310 	add.w	r3, r7, #16
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	480b      	ldr	r0, [pc, #44]	@ (8008bd4 <HAL_UART_MspInit+0x94>)
 8008ba6:	f000 fb09 	bl	80091bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008baa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bb8:	f107 0310 	add.w	r3, r7, #16
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4805      	ldr	r0, [pc, #20]	@ (8008bd4 <HAL_UART_MspInit+0x94>)
 8008bc0:	f000 fafc 	bl	80091bc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8008bc4:	bf00      	nop
 8008bc6:	3720      	adds	r7, #32
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	40013800 	.word	0x40013800
 8008bd0:	40021000 	.word	0x40021000
 8008bd4:	40010800 	.word	0x40010800

08008bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008bdc:	bf00      	nop
 8008bde:	e7fd      	b.n	8008bdc <NMI_Handler+0x4>

08008be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008be0:	b480      	push	{r7}
 8008be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008be4:	bf00      	nop
 8008be6:	e7fd      	b.n	8008be4 <HardFault_Handler+0x4>

08008be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008be8:	b480      	push	{r7}
 8008bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008bec:	bf00      	nop
 8008bee:	e7fd      	b.n	8008bec <MemManage_Handler+0x4>

08008bf0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008bf4:	bf00      	nop
 8008bf6:	e7fd      	b.n	8008bf4 <BusFault_Handler+0x4>

08008bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008bfc:	bf00      	nop
 8008bfe:	e7fd      	b.n	8008bfc <UsageFault_Handler+0x4>

08008c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008c00:	b480      	push	{r7}
 8008c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008c04:	bf00      	nop
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bc80      	pop	{r7}
 8008c0a:	4770      	bx	lr

08008c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008c10:	bf00      	nop
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bc80      	pop	{r7}
 8008c16:	4770      	bx	lr

08008c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008c1c:	bf00      	nop
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bc80      	pop	{r7}
 8008c22:	4770      	bx	lr

08008c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008c28:	f000 f87e 	bl	8008d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008c2c:	bf00      	nop
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008c34:	4802      	ldr	r0, [pc, #8]	@ (8008c40 <TIM1_UP_IRQHandler+0x10>)
 8008c36:	f002 fc4b 	bl	800b4d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008c3a:	bf00      	nop
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	20001460 	.word	0x20001460

08008c44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008c44:	b480      	push	{r7}
 8008c46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008c48:	bf00      	nop
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bc80      	pop	{r7}
 8008c4e:	4770      	bx	lr

08008c50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008c50:	480c      	ldr	r0, [pc, #48]	@ (8008c84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008c52:	490d      	ldr	r1, [pc, #52]	@ (8008c88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008c54:	4a0d      	ldr	r2, [pc, #52]	@ (8008c8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008c58:	e002      	b.n	8008c60 <LoopCopyDataInit>

08008c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008c5e:	3304      	adds	r3, #4

08008c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008c64:	d3f9      	bcc.n	8008c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008c66:	4a0a      	ldr	r2, [pc, #40]	@ (8008c90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008c68:	4c0a      	ldr	r4, [pc, #40]	@ (8008c94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008c6c:	e001      	b.n	8008c72 <LoopFillZerobss>

08008c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008c70:	3204      	adds	r2, #4

08008c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008c74:	d3fb      	bcc.n	8008c6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008c76:	f7ff ffe5 	bl	8008c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008c7a:	f003 f8ed 	bl	800be58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008c7e:	f7ff fbe3 	bl	8008448 <main>
  bx lr
 8008c82:	4770      	bx	lr
  ldr r0, =_sdata
 8008c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008c88:	20000ce4 	.word	0x20000ce4
  ldr r2, =_sidata
 8008c8c:	0800bf6c 	.word	0x0800bf6c
  ldr r2, =_sbss
 8008c90:	20000ce4 	.word	0x20000ce4
  ldr r4, =_ebss
 8008c94:	200014f4 	.word	0x200014f4

08008c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008c98:	e7fe      	b.n	8008c98 <ADC1_2_IRQHandler>
	...

08008c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008ca0:	4b08      	ldr	r3, [pc, #32]	@ (8008cc4 <HAL_Init+0x28>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a07      	ldr	r2, [pc, #28]	@ (8008cc4 <HAL_Init+0x28>)
 8008ca6:	f043 0310 	orr.w	r3, r3, #16
 8008caa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008cac:	2003      	movs	r0, #3
 8008cae:	f000 fa43 	bl	8009138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008cb2:	200f      	movs	r0, #15
 8008cb4:	f000 f808 	bl	8008cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008cb8:	f7ff fe3e 	bl	8008938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	40022000 	.word	0x40022000

08008cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008cd0:	4b12      	ldr	r3, [pc, #72]	@ (8008d1c <HAL_InitTick+0x54>)
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	4b12      	ldr	r3, [pc, #72]	@ (8008d20 <HAL_InitTick+0x58>)
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 fa5b 	bl	80091a2 <HAL_SYSTICK_Config>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e00e      	b.n	8008d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b0f      	cmp	r3, #15
 8008cfa:	d80a      	bhi.n	8008d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	6879      	ldr	r1, [r7, #4]
 8008d00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d04:	f000 fa23 	bl	800914e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008d08:	4a06      	ldr	r2, [pc, #24]	@ (8008d24 <HAL_InitTick+0x5c>)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	e000      	b.n	8008d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	20000cd8 	.word	0x20000cd8
 8008d20:	20000ce0 	.word	0x20000ce0
 8008d24:	20000cdc 	.word	0x20000cdc

08008d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008d2c:	4b05      	ldr	r3, [pc, #20]	@ (8008d44 <HAL_IncTick+0x1c>)
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	461a      	mov	r2, r3
 8008d32:	4b05      	ldr	r3, [pc, #20]	@ (8008d48 <HAL_IncTick+0x20>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4413      	add	r3, r2
 8008d38:	4a03      	ldr	r2, [pc, #12]	@ (8008d48 <HAL_IncTick+0x20>)
 8008d3a:	6013      	str	r3, [r2, #0]
}
 8008d3c:	bf00      	nop
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bc80      	pop	{r7}
 8008d42:	4770      	bx	lr
 8008d44:	20000ce0 	.word	0x20000ce0
 8008d48:	200014f0 	.word	0x200014f0

08008d4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8008d50:	4b02      	ldr	r3, [pc, #8]	@ (8008d5c <HAL_GetTick+0x10>)
 8008d52:	681b      	ldr	r3, [r3, #0]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bc80      	pop	{r7}
 8008d5a:	4770      	bx	lr
 8008d5c:	200014f0 	.word	0x200014f0

08008d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008d68:	f7ff fff0 	bl	8008d4c <HAL_GetTick>
 8008d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d78:	d005      	beq.n	8008d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8008da4 <HAL_Delay+0x44>)
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	4413      	add	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008d86:	bf00      	nop
 8008d88:	f7ff ffe0 	bl	8008d4c <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d8f7      	bhi.n	8008d88 <HAL_Delay+0x28>
  {
  }
}
 8008d98:	bf00      	nop
 8008d9a:	bf00      	nop
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	20000ce0 	.word	0x20000ce0

08008da8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d101      	bne.n	8008dba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e0ed      	b.n	8008f96 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d102      	bne.n	8008dcc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff fde8 	bl	800899c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f042 0201 	orr.w	r2, r2, #1
 8008dda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ddc:	f7ff ffb6 	bl	8008d4c <HAL_GetTick>
 8008de0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008de2:	e012      	b.n	8008e0a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008de4:	f7ff ffb2 	bl	8008d4c <HAL_GetTick>
 8008de8:	4602      	mov	r2, r0
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	2b0a      	cmp	r3, #10
 8008df0:	d90b      	bls.n	8008e0a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2205      	movs	r2, #5
 8008e02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e0c5      	b.n	8008f96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0e5      	beq.n	8008de4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f022 0202 	bic.w	r2, r2, #2
 8008e26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e28:	f7ff ff90 	bl	8008d4c <HAL_GetTick>
 8008e2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008e2e:	e012      	b.n	8008e56 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008e30:	f7ff ff8c 	bl	8008d4c <HAL_GetTick>
 8008e34:	4602      	mov	r2, r0
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	2b0a      	cmp	r3, #10
 8008e3c:	d90b      	bls.n	8008e56 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2205      	movs	r2, #5
 8008e4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e09f      	b.n	8008f96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f003 0302 	and.w	r3, r3, #2
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1e5      	bne.n	8008e30 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	7e1b      	ldrb	r3, [r3, #24]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d108      	bne.n	8008e7e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	e007      	b.n	8008e8e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	7e5b      	ldrb	r3, [r3, #25]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d108      	bne.n	8008ea8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	e007      	b.n	8008eb8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008eb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	7e9b      	ldrb	r3, [r3, #26]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d108      	bne.n	8008ed2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f042 0220 	orr.w	r2, r2, #32
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	e007      	b.n	8008ee2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f022 0220 	bic.w	r2, r2, #32
 8008ee0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	7edb      	ldrb	r3, [r3, #27]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d108      	bne.n	8008efc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f022 0210 	bic.w	r2, r2, #16
 8008ef8:	601a      	str	r2, [r3, #0]
 8008efa:	e007      	b.n	8008f0c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f042 0210 	orr.w	r2, r2, #16
 8008f0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	7f1b      	ldrb	r3, [r3, #28]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d108      	bne.n	8008f26 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f042 0208 	orr.w	r2, r2, #8
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	e007      	b.n	8008f36 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f022 0208 	bic.w	r2, r2, #8
 8008f34:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	7f5b      	ldrb	r3, [r3, #29]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d108      	bne.n	8008f50 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f042 0204 	orr.w	r2, r2, #4
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	e007      	b.n	8008f60 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f022 0204 	bic.w	r2, r2, #4
 8008f5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	689a      	ldr	r2, [r3, #8]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	ea42 0103 	orr.w	r1, r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	1e5a      	subs	r2, r3, #1
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	430a      	orrs	r2, r1
 8008f84:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
	...

08008fa0 <__NVIC_SetPriorityGrouping>:
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f003 0307 	and.w	r3, r3, #7
 8008fae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8008fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008fc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008fd2:	4a04      	ldr	r2, [pc, #16]	@ (8008fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	60d3      	str	r3, [r2, #12]
}
 8008fd8:	bf00      	nop
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bc80      	pop	{r7}
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	e000ed00 	.word	0xe000ed00

08008fe8 <__NVIC_GetPriorityGrouping>:
{
 8008fe8:	b480      	push	{r7}
 8008fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008fec:	4b04      	ldr	r3, [pc, #16]	@ (8009000 <__NVIC_GetPriorityGrouping+0x18>)
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	0a1b      	lsrs	r3, r3, #8
 8008ff2:	f003 0307 	and.w	r3, r3, #7
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bc80      	pop	{r7}
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	e000ed00 	.word	0xe000ed00

08009004 <__NVIC_EnableIRQ>:
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	4603      	mov	r3, r0
 800900c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800900e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009012:	2b00      	cmp	r3, #0
 8009014:	db0b      	blt.n	800902e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009016:	79fb      	ldrb	r3, [r7, #7]
 8009018:	f003 021f 	and.w	r2, r3, #31
 800901c:	4906      	ldr	r1, [pc, #24]	@ (8009038 <__NVIC_EnableIRQ+0x34>)
 800901e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009022:	095b      	lsrs	r3, r3, #5
 8009024:	2001      	movs	r0, #1
 8009026:	fa00 f202 	lsl.w	r2, r0, r2
 800902a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800902e:	bf00      	nop
 8009030:	370c      	adds	r7, #12
 8009032:	46bd      	mov	sp, r7
 8009034:	bc80      	pop	{r7}
 8009036:	4770      	bx	lr
 8009038:	e000e100 	.word	0xe000e100

0800903c <__NVIC_SetPriority>:
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	4603      	mov	r3, r0
 8009044:	6039      	str	r1, [r7, #0]
 8009046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800904c:	2b00      	cmp	r3, #0
 800904e:	db0a      	blt.n	8009066 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	b2da      	uxtb	r2, r3
 8009054:	490c      	ldr	r1, [pc, #48]	@ (8009088 <__NVIC_SetPriority+0x4c>)
 8009056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800905a:	0112      	lsls	r2, r2, #4
 800905c:	b2d2      	uxtb	r2, r2
 800905e:	440b      	add	r3, r1
 8009060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009064:	e00a      	b.n	800907c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	b2da      	uxtb	r2, r3
 800906a:	4908      	ldr	r1, [pc, #32]	@ (800908c <__NVIC_SetPriority+0x50>)
 800906c:	79fb      	ldrb	r3, [r7, #7]
 800906e:	f003 030f 	and.w	r3, r3, #15
 8009072:	3b04      	subs	r3, #4
 8009074:	0112      	lsls	r2, r2, #4
 8009076:	b2d2      	uxtb	r2, r2
 8009078:	440b      	add	r3, r1
 800907a:	761a      	strb	r2, [r3, #24]
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	bc80      	pop	{r7}
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	e000e100 	.word	0xe000e100
 800908c:	e000ed00 	.word	0xe000ed00

08009090 <NVIC_EncodePriority>:
{
 8009090:	b480      	push	{r7}
 8009092:	b089      	sub	sp, #36	@ 0x24
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f003 0307 	and.w	r3, r3, #7
 80090a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	f1c3 0307 	rsb	r3, r3, #7
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	bf28      	it	cs
 80090ae:	2304      	movcs	r3, #4
 80090b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	3304      	adds	r3, #4
 80090b6:	2b06      	cmp	r3, #6
 80090b8:	d902      	bls.n	80090c0 <NVIC_EncodePriority+0x30>
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	3b03      	subs	r3, #3
 80090be:	e000      	b.n	80090c2 <NVIC_EncodePriority+0x32>
 80090c0:	2300      	movs	r3, #0
 80090c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	fa02 f303 	lsl.w	r3, r2, r3
 80090ce:	43da      	mvns	r2, r3
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	401a      	ands	r2, r3
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80090d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	fa01 f303 	lsl.w	r3, r1, r3
 80090e2:	43d9      	mvns	r1, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090e8:	4313      	orrs	r3, r2
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3724      	adds	r7, #36	@ 0x24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bc80      	pop	{r7}
 80090f2:	4770      	bx	lr

080090f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	3b01      	subs	r3, #1
 8009100:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009104:	d301      	bcc.n	800910a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009106:	2301      	movs	r3, #1
 8009108:	e00f      	b.n	800912a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800910a:	4a0a      	ldr	r2, [pc, #40]	@ (8009134 <SysTick_Config+0x40>)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	3b01      	subs	r3, #1
 8009110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009112:	210f      	movs	r1, #15
 8009114:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009118:	f7ff ff90 	bl	800903c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800911c:	4b05      	ldr	r3, [pc, #20]	@ (8009134 <SysTick_Config+0x40>)
 800911e:	2200      	movs	r2, #0
 8009120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009122:	4b04      	ldr	r3, [pc, #16]	@ (8009134 <SysTick_Config+0x40>)
 8009124:	2207      	movs	r2, #7
 8009126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	e000e010 	.word	0xe000e010

08009138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7ff ff2d 	bl	8008fa0 <__NVIC_SetPriorityGrouping>
}
 8009146:	bf00      	nop
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800914e:	b580      	push	{r7, lr}
 8009150:	b086      	sub	sp, #24
 8009152:	af00      	add	r7, sp, #0
 8009154:	4603      	mov	r3, r0
 8009156:	60b9      	str	r1, [r7, #8]
 8009158:	607a      	str	r2, [r7, #4]
 800915a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800915c:	2300      	movs	r3, #0
 800915e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009160:	f7ff ff42 	bl	8008fe8 <__NVIC_GetPriorityGrouping>
 8009164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	68b9      	ldr	r1, [r7, #8]
 800916a:	6978      	ldr	r0, [r7, #20]
 800916c:	f7ff ff90 	bl	8009090 <NVIC_EncodePriority>
 8009170:	4602      	mov	r2, r0
 8009172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009176:	4611      	mov	r1, r2
 8009178:	4618      	mov	r0, r3
 800917a:	f7ff ff5f 	bl	800903c <__NVIC_SetPriority>
}
 800917e:	bf00      	nop
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	af00      	add	r7, sp, #0
 800918c:	4603      	mov	r3, r0
 800918e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009194:	4618      	mov	r0, r3
 8009196:	f7ff ff35 	bl	8009004 <__NVIC_EnableIRQ>
}
 800919a:	bf00      	nop
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b082      	sub	sp, #8
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7ff ffa2 	bl	80090f4 <SysTick_Config>
 80091b0:	4603      	mov	r3, r0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80091bc:	b480      	push	{r7}
 80091be:	b08b      	sub	sp, #44	@ 0x2c
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80091c6:	2300      	movs	r3, #0
 80091c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80091ca:	2300      	movs	r3, #0
 80091cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80091ce:	e179      	b.n	80094c4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80091d0:	2201      	movs	r2, #1
 80091d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d4:	fa02 f303 	lsl.w	r3, r2, r3
 80091d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	69fa      	ldr	r2, [r7, #28]
 80091e0:	4013      	ands	r3, r2
 80091e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80091e4:	69ba      	ldr	r2, [r7, #24]
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	f040 8168 	bne.w	80094be <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	4a96      	ldr	r2, [pc, #600]	@ (800944c <HAL_GPIO_Init+0x290>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d05e      	beq.n	80092b6 <HAL_GPIO_Init+0xfa>
 80091f8:	4a94      	ldr	r2, [pc, #592]	@ (800944c <HAL_GPIO_Init+0x290>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d875      	bhi.n	80092ea <HAL_GPIO_Init+0x12e>
 80091fe:	4a94      	ldr	r2, [pc, #592]	@ (8009450 <HAL_GPIO_Init+0x294>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d058      	beq.n	80092b6 <HAL_GPIO_Init+0xfa>
 8009204:	4a92      	ldr	r2, [pc, #584]	@ (8009450 <HAL_GPIO_Init+0x294>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d86f      	bhi.n	80092ea <HAL_GPIO_Init+0x12e>
 800920a:	4a92      	ldr	r2, [pc, #584]	@ (8009454 <HAL_GPIO_Init+0x298>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d052      	beq.n	80092b6 <HAL_GPIO_Init+0xfa>
 8009210:	4a90      	ldr	r2, [pc, #576]	@ (8009454 <HAL_GPIO_Init+0x298>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d869      	bhi.n	80092ea <HAL_GPIO_Init+0x12e>
 8009216:	4a90      	ldr	r2, [pc, #576]	@ (8009458 <HAL_GPIO_Init+0x29c>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d04c      	beq.n	80092b6 <HAL_GPIO_Init+0xfa>
 800921c:	4a8e      	ldr	r2, [pc, #568]	@ (8009458 <HAL_GPIO_Init+0x29c>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d863      	bhi.n	80092ea <HAL_GPIO_Init+0x12e>
 8009222:	4a8e      	ldr	r2, [pc, #568]	@ (800945c <HAL_GPIO_Init+0x2a0>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d046      	beq.n	80092b6 <HAL_GPIO_Init+0xfa>
 8009228:	4a8c      	ldr	r2, [pc, #560]	@ (800945c <HAL_GPIO_Init+0x2a0>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d85d      	bhi.n	80092ea <HAL_GPIO_Init+0x12e>
 800922e:	2b12      	cmp	r3, #18
 8009230:	d82a      	bhi.n	8009288 <HAL_GPIO_Init+0xcc>
 8009232:	2b12      	cmp	r3, #18
 8009234:	d859      	bhi.n	80092ea <HAL_GPIO_Init+0x12e>
 8009236:	a201      	add	r2, pc, #4	@ (adr r2, 800923c <HAL_GPIO_Init+0x80>)
 8009238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923c:	080092b7 	.word	0x080092b7
 8009240:	08009291 	.word	0x08009291
 8009244:	080092a3 	.word	0x080092a3
 8009248:	080092e5 	.word	0x080092e5
 800924c:	080092eb 	.word	0x080092eb
 8009250:	080092eb 	.word	0x080092eb
 8009254:	080092eb 	.word	0x080092eb
 8009258:	080092eb 	.word	0x080092eb
 800925c:	080092eb 	.word	0x080092eb
 8009260:	080092eb 	.word	0x080092eb
 8009264:	080092eb 	.word	0x080092eb
 8009268:	080092eb 	.word	0x080092eb
 800926c:	080092eb 	.word	0x080092eb
 8009270:	080092eb 	.word	0x080092eb
 8009274:	080092eb 	.word	0x080092eb
 8009278:	080092eb 	.word	0x080092eb
 800927c:	080092eb 	.word	0x080092eb
 8009280:	08009299 	.word	0x08009299
 8009284:	080092ad 	.word	0x080092ad
 8009288:	4a75      	ldr	r2, [pc, #468]	@ (8009460 <HAL_GPIO_Init+0x2a4>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d013      	beq.n	80092b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800928e:	e02c      	b.n	80092ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	623b      	str	r3, [r7, #32]
          break;
 8009296:	e029      	b.n	80092ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	3304      	adds	r3, #4
 800929e:	623b      	str	r3, [r7, #32]
          break;
 80092a0:	e024      	b.n	80092ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	3308      	adds	r3, #8
 80092a8:	623b      	str	r3, [r7, #32]
          break;
 80092aa:	e01f      	b.n	80092ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	330c      	adds	r3, #12
 80092b2:	623b      	str	r3, [r7, #32]
          break;
 80092b4:	e01a      	b.n	80092ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d102      	bne.n	80092c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80092be:	2304      	movs	r3, #4
 80092c0:	623b      	str	r3, [r7, #32]
          break;
 80092c2:	e013      	b.n	80092ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d105      	bne.n	80092d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80092cc:	2308      	movs	r3, #8
 80092ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	69fa      	ldr	r2, [r7, #28]
 80092d4:	611a      	str	r2, [r3, #16]
          break;
 80092d6:	e009      	b.n	80092ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80092d8:	2308      	movs	r3, #8
 80092da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	69fa      	ldr	r2, [r7, #28]
 80092e0:	615a      	str	r2, [r3, #20]
          break;
 80092e2:	e003      	b.n	80092ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80092e4:	2300      	movs	r3, #0
 80092e6:	623b      	str	r3, [r7, #32]
          break;
 80092e8:	e000      	b.n	80092ec <HAL_GPIO_Init+0x130>
          break;
 80092ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	2bff      	cmp	r3, #255	@ 0xff
 80092f0:	d801      	bhi.n	80092f6 <HAL_GPIO_Init+0x13a>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	e001      	b.n	80092fa <HAL_GPIO_Init+0x13e>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	3304      	adds	r3, #4
 80092fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	2bff      	cmp	r3, #255	@ 0xff
 8009300:	d802      	bhi.n	8009308 <HAL_GPIO_Init+0x14c>
 8009302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	e002      	b.n	800930e <HAL_GPIO_Init+0x152>
 8009308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930a:	3b08      	subs	r3, #8
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	210f      	movs	r1, #15
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	fa01 f303 	lsl.w	r3, r1, r3
 800931c:	43db      	mvns	r3, r3
 800931e:	401a      	ands	r2, r3
 8009320:	6a39      	ldr	r1, [r7, #32]
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	fa01 f303 	lsl.w	r3, r1, r3
 8009328:	431a      	orrs	r2, r3
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009336:	2b00      	cmp	r3, #0
 8009338:	f000 80c1 	beq.w	80094be <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800933c:	4b49      	ldr	r3, [pc, #292]	@ (8009464 <HAL_GPIO_Init+0x2a8>)
 800933e:	699b      	ldr	r3, [r3, #24]
 8009340:	4a48      	ldr	r2, [pc, #288]	@ (8009464 <HAL_GPIO_Init+0x2a8>)
 8009342:	f043 0301 	orr.w	r3, r3, #1
 8009346:	6193      	str	r3, [r2, #24]
 8009348:	4b46      	ldr	r3, [pc, #280]	@ (8009464 <HAL_GPIO_Init+0x2a8>)
 800934a:	699b      	ldr	r3, [r3, #24]
 800934c:	f003 0301 	and.w	r3, r3, #1
 8009350:	60bb      	str	r3, [r7, #8]
 8009352:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009354:	4a44      	ldr	r2, [pc, #272]	@ (8009468 <HAL_GPIO_Init+0x2ac>)
 8009356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009358:	089b      	lsrs	r3, r3, #2
 800935a:	3302      	adds	r3, #2
 800935c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009360:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009364:	f003 0303 	and.w	r3, r3, #3
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	220f      	movs	r2, #15
 800936c:	fa02 f303 	lsl.w	r3, r2, r3
 8009370:	43db      	mvns	r3, r3
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	4013      	ands	r3, r2
 8009376:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a3c      	ldr	r2, [pc, #240]	@ (800946c <HAL_GPIO_Init+0x2b0>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d01f      	beq.n	80093c0 <HAL_GPIO_Init+0x204>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a3b      	ldr	r2, [pc, #236]	@ (8009470 <HAL_GPIO_Init+0x2b4>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d019      	beq.n	80093bc <HAL_GPIO_Init+0x200>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a3a      	ldr	r2, [pc, #232]	@ (8009474 <HAL_GPIO_Init+0x2b8>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d013      	beq.n	80093b8 <HAL_GPIO_Init+0x1fc>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a39      	ldr	r2, [pc, #228]	@ (8009478 <HAL_GPIO_Init+0x2bc>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d00d      	beq.n	80093b4 <HAL_GPIO_Init+0x1f8>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a38      	ldr	r2, [pc, #224]	@ (800947c <HAL_GPIO_Init+0x2c0>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d007      	beq.n	80093b0 <HAL_GPIO_Init+0x1f4>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a37      	ldr	r2, [pc, #220]	@ (8009480 <HAL_GPIO_Init+0x2c4>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d101      	bne.n	80093ac <HAL_GPIO_Init+0x1f0>
 80093a8:	2305      	movs	r3, #5
 80093aa:	e00a      	b.n	80093c2 <HAL_GPIO_Init+0x206>
 80093ac:	2306      	movs	r3, #6
 80093ae:	e008      	b.n	80093c2 <HAL_GPIO_Init+0x206>
 80093b0:	2304      	movs	r3, #4
 80093b2:	e006      	b.n	80093c2 <HAL_GPIO_Init+0x206>
 80093b4:	2303      	movs	r3, #3
 80093b6:	e004      	b.n	80093c2 <HAL_GPIO_Init+0x206>
 80093b8:	2302      	movs	r3, #2
 80093ba:	e002      	b.n	80093c2 <HAL_GPIO_Init+0x206>
 80093bc:	2301      	movs	r3, #1
 80093be:	e000      	b.n	80093c2 <HAL_GPIO_Init+0x206>
 80093c0:	2300      	movs	r3, #0
 80093c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093c4:	f002 0203 	and.w	r2, r2, #3
 80093c8:	0092      	lsls	r2, r2, #2
 80093ca:	4093      	lsls	r3, r2
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80093d2:	4925      	ldr	r1, [pc, #148]	@ (8009468 <HAL_GPIO_Init+0x2ac>)
 80093d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d6:	089b      	lsrs	r3, r3, #2
 80093d8:	3302      	adds	r3, #2
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d006      	beq.n	80093fa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80093ec:	4b25      	ldr	r3, [pc, #148]	@ (8009484 <HAL_GPIO_Init+0x2c8>)
 80093ee:	689a      	ldr	r2, [r3, #8]
 80093f0:	4924      	ldr	r1, [pc, #144]	@ (8009484 <HAL_GPIO_Init+0x2c8>)
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	608b      	str	r3, [r1, #8]
 80093f8:	e006      	b.n	8009408 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80093fa:	4b22      	ldr	r3, [pc, #136]	@ (8009484 <HAL_GPIO_Init+0x2c8>)
 80093fc:	689a      	ldr	r2, [r3, #8]
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	43db      	mvns	r3, r3
 8009402:	4920      	ldr	r1, [pc, #128]	@ (8009484 <HAL_GPIO_Init+0x2c8>)
 8009404:	4013      	ands	r3, r2
 8009406:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d006      	beq.n	8009422 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009414:	4b1b      	ldr	r3, [pc, #108]	@ (8009484 <HAL_GPIO_Init+0x2c8>)
 8009416:	68da      	ldr	r2, [r3, #12]
 8009418:	491a      	ldr	r1, [pc, #104]	@ (8009484 <HAL_GPIO_Init+0x2c8>)
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	4313      	orrs	r3, r2
 800941e:	60cb      	str	r3, [r1, #12]
 8009420:	e006      	b.n	8009430 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009422:	4b18      	ldr	r3, [pc, #96]	@ (8009484 <HAL_GPIO_Init+0x2c8>)
 8009424:	68da      	ldr	r2, [r3, #12]
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	43db      	mvns	r3, r3
 800942a:	4916      	ldr	r1, [pc, #88]	@ (8009484 <HAL_GPIO_Init+0x2c8>)
 800942c:	4013      	ands	r3, r2
 800942e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009438:	2b00      	cmp	r3, #0
 800943a:	d025      	beq.n	8009488 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800943c:	4b11      	ldr	r3, [pc, #68]	@ (8009484 <HAL_GPIO_Init+0x2c8>)
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	4910      	ldr	r1, [pc, #64]	@ (8009484 <HAL_GPIO_Init+0x2c8>)
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	4313      	orrs	r3, r2
 8009446:	604b      	str	r3, [r1, #4]
 8009448:	e025      	b.n	8009496 <HAL_GPIO_Init+0x2da>
 800944a:	bf00      	nop
 800944c:	10320000 	.word	0x10320000
 8009450:	10310000 	.word	0x10310000
 8009454:	10220000 	.word	0x10220000
 8009458:	10210000 	.word	0x10210000
 800945c:	10120000 	.word	0x10120000
 8009460:	10110000 	.word	0x10110000
 8009464:	40021000 	.word	0x40021000
 8009468:	40010000 	.word	0x40010000
 800946c:	40010800 	.word	0x40010800
 8009470:	40010c00 	.word	0x40010c00
 8009474:	40011000 	.word	0x40011000
 8009478:	40011400 	.word	0x40011400
 800947c:	40011800 	.word	0x40011800
 8009480:	40011c00 	.word	0x40011c00
 8009484:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009488:	4b15      	ldr	r3, [pc, #84]	@ (80094e0 <HAL_GPIO_Init+0x324>)
 800948a:	685a      	ldr	r2, [r3, #4]
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	43db      	mvns	r3, r3
 8009490:	4913      	ldr	r1, [pc, #76]	@ (80094e0 <HAL_GPIO_Init+0x324>)
 8009492:	4013      	ands	r3, r2
 8009494:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d006      	beq.n	80094b0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80094a2:	4b0f      	ldr	r3, [pc, #60]	@ (80094e0 <HAL_GPIO_Init+0x324>)
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	490e      	ldr	r1, [pc, #56]	@ (80094e0 <HAL_GPIO_Init+0x324>)
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	600b      	str	r3, [r1, #0]
 80094ae:	e006      	b.n	80094be <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80094b0:	4b0b      	ldr	r3, [pc, #44]	@ (80094e0 <HAL_GPIO_Init+0x324>)
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	43db      	mvns	r3, r3
 80094b8:	4909      	ldr	r1, [pc, #36]	@ (80094e0 <HAL_GPIO_Init+0x324>)
 80094ba:	4013      	ands	r3, r2
 80094bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80094be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c0:	3301      	adds	r3, #1
 80094c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ca:	fa22 f303 	lsr.w	r3, r2, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	f47f ae7e 	bne.w	80091d0 <HAL_GPIO_Init+0x14>
  }
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop
 80094d8:	372c      	adds	r7, #44	@ 0x2c
 80094da:	46bd      	mov	sp, r7
 80094dc:	bc80      	pop	{r7}
 80094de:	4770      	bx	lr
 80094e0:	40010400 	.word	0x40010400

080094e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b089      	sub	sp, #36	@ 0x24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80094ee:	2300      	movs	r3, #0
 80094f0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80094f2:	e0a6      	b.n	8009642 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80094f4:	2201      	movs	r2, #1
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	fa02 f303 	lsl.w	r3, r2, r3
 80094fc:	683a      	ldr	r2, [r7, #0]
 80094fe:	4013      	ands	r3, r2
 8009500:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	2b00      	cmp	r3, #0
 8009506:	f000 8099 	beq.w	800963c <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800950a:	4a54      	ldr	r2, [pc, #336]	@ (800965c <HAL_GPIO_DeInit+0x178>)
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	089b      	lsrs	r3, r3, #2
 8009510:	3302      	adds	r3, #2
 8009512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009516:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	f003 0303 	and.w	r3, r3, #3
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	220f      	movs	r2, #15
 8009522:	fa02 f303 	lsl.w	r3, r2, r3
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	4013      	ands	r3, r2
 800952a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a4c      	ldr	r2, [pc, #304]	@ (8009660 <HAL_GPIO_DeInit+0x17c>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d01f      	beq.n	8009574 <HAL_GPIO_DeInit+0x90>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a4b      	ldr	r2, [pc, #300]	@ (8009664 <HAL_GPIO_DeInit+0x180>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d019      	beq.n	8009570 <HAL_GPIO_DeInit+0x8c>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a4a      	ldr	r2, [pc, #296]	@ (8009668 <HAL_GPIO_DeInit+0x184>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d013      	beq.n	800956c <HAL_GPIO_DeInit+0x88>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a49      	ldr	r2, [pc, #292]	@ (800966c <HAL_GPIO_DeInit+0x188>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d00d      	beq.n	8009568 <HAL_GPIO_DeInit+0x84>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a48      	ldr	r2, [pc, #288]	@ (8009670 <HAL_GPIO_DeInit+0x18c>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d007      	beq.n	8009564 <HAL_GPIO_DeInit+0x80>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a47      	ldr	r2, [pc, #284]	@ (8009674 <HAL_GPIO_DeInit+0x190>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d101      	bne.n	8009560 <HAL_GPIO_DeInit+0x7c>
 800955c:	2305      	movs	r3, #5
 800955e:	e00a      	b.n	8009576 <HAL_GPIO_DeInit+0x92>
 8009560:	2306      	movs	r3, #6
 8009562:	e008      	b.n	8009576 <HAL_GPIO_DeInit+0x92>
 8009564:	2304      	movs	r3, #4
 8009566:	e006      	b.n	8009576 <HAL_GPIO_DeInit+0x92>
 8009568:	2303      	movs	r3, #3
 800956a:	e004      	b.n	8009576 <HAL_GPIO_DeInit+0x92>
 800956c:	2302      	movs	r3, #2
 800956e:	e002      	b.n	8009576 <HAL_GPIO_DeInit+0x92>
 8009570:	2301      	movs	r3, #1
 8009572:	e000      	b.n	8009576 <HAL_GPIO_DeInit+0x92>
 8009574:	2300      	movs	r3, #0
 8009576:	69fa      	ldr	r2, [r7, #28]
 8009578:	f002 0203 	and.w	r2, r2, #3
 800957c:	0092      	lsls	r2, r2, #2
 800957e:	4093      	lsls	r3, r2
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	429a      	cmp	r2, r3
 8009584:	d132      	bne.n	80095ec <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009586:	4b3c      	ldr	r3, [pc, #240]	@ (8009678 <HAL_GPIO_DeInit+0x194>)
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	43db      	mvns	r3, r3
 800958e:	493a      	ldr	r1, [pc, #232]	@ (8009678 <HAL_GPIO_DeInit+0x194>)
 8009590:	4013      	ands	r3, r2
 8009592:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009594:	4b38      	ldr	r3, [pc, #224]	@ (8009678 <HAL_GPIO_DeInit+0x194>)
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	43db      	mvns	r3, r3
 800959c:	4936      	ldr	r1, [pc, #216]	@ (8009678 <HAL_GPIO_DeInit+0x194>)
 800959e:	4013      	ands	r3, r2
 80095a0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80095a2:	4b35      	ldr	r3, [pc, #212]	@ (8009678 <HAL_GPIO_DeInit+0x194>)
 80095a4:	68da      	ldr	r2, [r3, #12]
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	43db      	mvns	r3, r3
 80095aa:	4933      	ldr	r1, [pc, #204]	@ (8009678 <HAL_GPIO_DeInit+0x194>)
 80095ac:	4013      	ands	r3, r2
 80095ae:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80095b0:	4b31      	ldr	r3, [pc, #196]	@ (8009678 <HAL_GPIO_DeInit+0x194>)
 80095b2:	689a      	ldr	r2, [r3, #8]
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	43db      	mvns	r3, r3
 80095b8:	492f      	ldr	r1, [pc, #188]	@ (8009678 <HAL_GPIO_DeInit+0x194>)
 80095ba:	4013      	ands	r3, r2
 80095bc:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	f003 0303 	and.w	r3, r3, #3
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	220f      	movs	r2, #15
 80095c8:	fa02 f303 	lsl.w	r3, r2, r3
 80095cc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80095ce:	4a23      	ldr	r2, [pc, #140]	@ (800965c <HAL_GPIO_DeInit+0x178>)
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	089b      	lsrs	r3, r3, #2
 80095d4:	3302      	adds	r3, #2
 80095d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	43da      	mvns	r2, r3
 80095de:	481f      	ldr	r0, [pc, #124]	@ (800965c <HAL_GPIO_DeInit+0x178>)
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	089b      	lsrs	r3, r3, #2
 80095e4:	400a      	ands	r2, r1
 80095e6:	3302      	adds	r3, #2
 80095e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	2bff      	cmp	r3, #255	@ 0xff
 80095f0:	d801      	bhi.n	80095f6 <HAL_GPIO_DeInit+0x112>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	e001      	b.n	80095fa <HAL_GPIO_DeInit+0x116>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	3304      	adds	r3, #4
 80095fa:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	2bff      	cmp	r3, #255	@ 0xff
 8009600:	d802      	bhi.n	8009608 <HAL_GPIO_DeInit+0x124>
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	e002      	b.n	800960e <HAL_GPIO_DeInit+0x12a>
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	3b08      	subs	r3, #8
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	210f      	movs	r1, #15
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	fa01 f303 	lsl.w	r3, r1, r3
 800961c:	43db      	mvns	r3, r3
 800961e:	401a      	ands	r2, r3
 8009620:	2104      	movs	r1, #4
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	fa01 f303 	lsl.w	r3, r1, r3
 8009628:	431a      	orrs	r2, r3
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	68da      	ldr	r2, [r3, #12]
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	43db      	mvns	r3, r3
 8009636:	401a      	ands	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	3301      	adds	r3, #1
 8009640:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	fa22 f303 	lsr.w	r3, r2, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	f47f af52 	bne.w	80094f4 <HAL_GPIO_DeInit+0x10>
  }
}
 8009650:	bf00      	nop
 8009652:	bf00      	nop
 8009654:	3724      	adds	r7, #36	@ 0x24
 8009656:	46bd      	mov	sp, r7
 8009658:	bc80      	pop	{r7}
 800965a:	4770      	bx	lr
 800965c:	40010000 	.word	0x40010000
 8009660:	40010800 	.word	0x40010800
 8009664:	40010c00 	.word	0x40010c00
 8009668:	40011000 	.word	0x40011000
 800966c:	40011400 	.word	0x40011400
 8009670:	40011800 	.word	0x40011800
 8009674:	40011c00 	.word	0x40011c00
 8009678:	40010400 	.word	0x40010400

0800967c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	689a      	ldr	r2, [r3, #8]
 800968c:	887b      	ldrh	r3, [r7, #2]
 800968e:	4013      	ands	r3, r2
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009694:	2301      	movs	r3, #1
 8009696:	73fb      	strb	r3, [r7, #15]
 8009698:	e001      	b.n	800969e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800969a:	2300      	movs	r3, #0
 800969c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800969e:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3714      	adds	r7, #20
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bc80      	pop	{r7}
 80096a8:	4770      	bx	lr

080096aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80096aa:	b480      	push	{r7}
 80096ac:	b083      	sub	sp, #12
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	460b      	mov	r3, r1
 80096b4:	807b      	strh	r3, [r7, #2]
 80096b6:	4613      	mov	r3, r2
 80096b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80096ba:	787b      	ldrb	r3, [r7, #1]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d003      	beq.n	80096c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80096c0:	887a      	ldrh	r2, [r7, #2]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80096c6:	e003      	b.n	80096d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80096c8:	887b      	ldrh	r3, [r7, #2]
 80096ca:	041a      	lsls	r2, r3, #16
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	611a      	str	r2, [r3, #16]
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bc80      	pop	{r7}
 80096d8:	4770      	bx	lr

080096da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80096da:	b480      	push	{r7}
 80096dc:	b085      	sub	sp, #20
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
 80096e2:	460b      	mov	r3, r1
 80096e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80096ec:	887a      	ldrh	r2, [r7, #2]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	4013      	ands	r3, r2
 80096f2:	041a      	lsls	r2, r3, #16
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	43d9      	mvns	r1, r3
 80096f8:	887b      	ldrh	r3, [r7, #2]
 80096fa:	400b      	ands	r3, r1
 80096fc:	431a      	orrs	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	611a      	str	r2, [r3, #16]
}
 8009702:	bf00      	nop
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	bc80      	pop	{r7}
 800970a:	4770      	bx	lr

0800970c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e12b      	b.n	8009976 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b00      	cmp	r3, #0
 8009728:	d106      	bne.n	8009738 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f7ff f97e 	bl	8008a34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2224      	movs	r2, #36	@ 0x24
 800973c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f022 0201 	bic.w	r2, r2, #1
 800974e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800975e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800976e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009770:	f001 fdb8 	bl	800b2e4 <HAL_RCC_GetPCLK1Freq>
 8009774:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	4a81      	ldr	r2, [pc, #516]	@ (8009980 <HAL_I2C_Init+0x274>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d807      	bhi.n	8009790 <HAL_I2C_Init+0x84>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4a80      	ldr	r2, [pc, #512]	@ (8009984 <HAL_I2C_Init+0x278>)
 8009784:	4293      	cmp	r3, r2
 8009786:	bf94      	ite	ls
 8009788:	2301      	movls	r3, #1
 800978a:	2300      	movhi	r3, #0
 800978c:	b2db      	uxtb	r3, r3
 800978e:	e006      	b.n	800979e <HAL_I2C_Init+0x92>
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	4a7d      	ldr	r2, [pc, #500]	@ (8009988 <HAL_I2C_Init+0x27c>)
 8009794:	4293      	cmp	r3, r2
 8009796:	bf94      	ite	ls
 8009798:	2301      	movls	r3, #1
 800979a:	2300      	movhi	r3, #0
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e0e7      	b.n	8009976 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	4a78      	ldr	r2, [pc, #480]	@ (800998c <HAL_I2C_Init+0x280>)
 80097aa:	fba2 2303 	umull	r2, r3, r2, r3
 80097ae:	0c9b      	lsrs	r3, r3, #18
 80097b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	430a      	orrs	r2, r1
 80097c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	6a1b      	ldr	r3, [r3, #32]
 80097cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	4a6a      	ldr	r2, [pc, #424]	@ (8009980 <HAL_I2C_Init+0x274>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d802      	bhi.n	80097e0 <HAL_I2C_Init+0xd4>
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	3301      	adds	r3, #1
 80097de:	e009      	b.n	80097f4 <HAL_I2C_Init+0xe8>
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80097e6:	fb02 f303 	mul.w	r3, r2, r3
 80097ea:	4a69      	ldr	r2, [pc, #420]	@ (8009990 <HAL_I2C_Init+0x284>)
 80097ec:	fba2 2303 	umull	r2, r3, r2, r3
 80097f0:	099b      	lsrs	r3, r3, #6
 80097f2:	3301      	adds	r3, #1
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	6812      	ldr	r2, [r2, #0]
 80097f8:	430b      	orrs	r3, r1
 80097fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	69db      	ldr	r3, [r3, #28]
 8009802:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009806:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	495c      	ldr	r1, [pc, #368]	@ (8009980 <HAL_I2C_Init+0x274>)
 8009810:	428b      	cmp	r3, r1
 8009812:	d819      	bhi.n	8009848 <HAL_I2C_Init+0x13c>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	1e59      	subs	r1, r3, #1
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	005b      	lsls	r3, r3, #1
 800981e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009822:	1c59      	adds	r1, r3, #1
 8009824:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009828:	400b      	ands	r3, r1
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00a      	beq.n	8009844 <HAL_I2C_Init+0x138>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	1e59      	subs	r1, r3, #1
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	005b      	lsls	r3, r3, #1
 8009838:	fbb1 f3f3 	udiv	r3, r1, r3
 800983c:	3301      	adds	r3, #1
 800983e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009842:	e051      	b.n	80098e8 <HAL_I2C_Init+0x1dc>
 8009844:	2304      	movs	r3, #4
 8009846:	e04f      	b.n	80098e8 <HAL_I2C_Init+0x1dc>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d111      	bne.n	8009874 <HAL_I2C_Init+0x168>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	1e58      	subs	r0, r3, #1
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6859      	ldr	r1, [r3, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	005b      	lsls	r3, r3, #1
 800985c:	440b      	add	r3, r1
 800985e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009862:	3301      	adds	r3, #1
 8009864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009868:	2b00      	cmp	r3, #0
 800986a:	bf0c      	ite	eq
 800986c:	2301      	moveq	r3, #1
 800986e:	2300      	movne	r3, #0
 8009870:	b2db      	uxtb	r3, r3
 8009872:	e012      	b.n	800989a <HAL_I2C_Init+0x18e>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	1e58      	subs	r0, r3, #1
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6859      	ldr	r1, [r3, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	440b      	add	r3, r1
 8009882:	0099      	lsls	r1, r3, #2
 8009884:	440b      	add	r3, r1
 8009886:	fbb0 f3f3 	udiv	r3, r0, r3
 800988a:	3301      	adds	r3, #1
 800988c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009890:	2b00      	cmp	r3, #0
 8009892:	bf0c      	ite	eq
 8009894:	2301      	moveq	r3, #1
 8009896:	2300      	movne	r3, #0
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <HAL_I2C_Init+0x196>
 800989e:	2301      	movs	r3, #1
 80098a0:	e022      	b.n	80098e8 <HAL_I2C_Init+0x1dc>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10e      	bne.n	80098c8 <HAL_I2C_Init+0x1bc>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	1e58      	subs	r0, r3, #1
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6859      	ldr	r1, [r3, #4]
 80098b2:	460b      	mov	r3, r1
 80098b4:	005b      	lsls	r3, r3, #1
 80098b6:	440b      	add	r3, r1
 80098b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80098bc:	3301      	adds	r3, #1
 80098be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098c6:	e00f      	b.n	80098e8 <HAL_I2C_Init+0x1dc>
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	1e58      	subs	r0, r3, #1
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6859      	ldr	r1, [r3, #4]
 80098d0:	460b      	mov	r3, r1
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	440b      	add	r3, r1
 80098d6:	0099      	lsls	r1, r3, #2
 80098d8:	440b      	add	r3, r1
 80098da:	fbb0 f3f3 	udiv	r3, r0, r3
 80098de:	3301      	adds	r3, #1
 80098e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80098e8:	6879      	ldr	r1, [r7, #4]
 80098ea:	6809      	ldr	r1, [r1, #0]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	69da      	ldr	r2, [r3, #28]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	431a      	orrs	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	430a      	orrs	r2, r1
 800990a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009916:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	6911      	ldr	r1, [r2, #16]
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	68d2      	ldr	r2, [r2, #12]
 8009922:	4311      	orrs	r1, r2
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	6812      	ldr	r2, [r2, #0]
 8009928:	430b      	orrs	r3, r1
 800992a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	695a      	ldr	r2, [r3, #20]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	699b      	ldr	r3, [r3, #24]
 800993e:	431a      	orrs	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	430a      	orrs	r2, r1
 8009946:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f042 0201 	orr.w	r2, r2, #1
 8009956:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2220      	movs	r2, #32
 8009962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	000186a0 	.word	0x000186a0
 8009984:	001e847f 	.word	0x001e847f
 8009988:	003d08ff 	.word	0x003d08ff
 800998c:	431bde83 	.word	0x431bde83
 8009990:	10624dd3 	.word	0x10624dd3

08009994 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d101      	bne.n	80099a6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e021      	b.n	80099ea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2224      	movs	r2, #36	@ 0x24
 80099aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f022 0201 	bic.w	r2, r2, #1
 80099bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7ff f876 	bl	8008ab0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
	...

080099f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b088      	sub	sp, #32
 80099f8:	af02      	add	r7, sp, #8
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	607a      	str	r2, [r7, #4]
 80099fe:	461a      	mov	r2, r3
 8009a00:	460b      	mov	r3, r1
 8009a02:	817b      	strh	r3, [r7, #10]
 8009a04:	4613      	mov	r3, r2
 8009a06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009a08:	f7ff f9a0 	bl	8008d4c <HAL_GetTick>
 8009a0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2b20      	cmp	r3, #32
 8009a18:	f040 80e0 	bne.w	8009bdc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	9300      	str	r3, [sp, #0]
 8009a20:	2319      	movs	r3, #25
 8009a22:	2201      	movs	r2, #1
 8009a24:	4970      	ldr	r1, [pc, #448]	@ (8009be8 <HAL_I2C_Master_Transmit+0x1f4>)
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f000 fe5c 	bl	800a6e4 <I2C_WaitOnFlagUntilTimeout>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009a32:	2302      	movs	r3, #2
 8009a34:	e0d3      	b.n	8009bde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d101      	bne.n	8009a44 <HAL_I2C_Master_Transmit+0x50>
 8009a40:	2302      	movs	r3, #2
 8009a42:	e0cc      	b.n	8009bde <HAL_I2C_Master_Transmit+0x1ea>
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0301 	and.w	r3, r3, #1
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d007      	beq.n	8009a6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f042 0201 	orr.w	r2, r2, #1
 8009a68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009a78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2221      	movs	r2, #33	@ 0x21
 8009a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2210      	movs	r2, #16
 8009a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	893a      	ldrh	r2, [r7, #8]
 8009a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	4a50      	ldr	r2, [pc, #320]	@ (8009bec <HAL_I2C_Master_Transmit+0x1f8>)
 8009aaa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009aac:	8979      	ldrh	r1, [r7, #10]
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	6a3a      	ldr	r2, [r7, #32]
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f000 fc16 	bl	800a2e4 <I2C_MasterRequestWrite>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e08d      	b.n	8009bde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	613b      	str	r3, [r7, #16]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	695b      	ldr	r3, [r3, #20]
 8009acc:	613b      	str	r3, [r7, #16]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	613b      	str	r3, [r7, #16]
 8009ad6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009ad8:	e066      	b.n	8009ba8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	6a39      	ldr	r1, [r7, #32]
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f000 ff1a 	bl	800a918 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00d      	beq.n	8009b06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aee:	2b04      	cmp	r3, #4
 8009af0:	d107      	bne.n	8009b02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e06b      	b.n	8009bde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b0a:	781a      	ldrb	r2, [r3, #0]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	3b01      	subs	r3, #1
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	f003 0304 	and.w	r3, r3, #4
 8009b40:	2b04      	cmp	r3, #4
 8009b42:	d11b      	bne.n	8009b7c <HAL_I2C_Master_Transmit+0x188>
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d017      	beq.n	8009b7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b50:	781a      	ldrb	r2, [r3, #0]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b5c:	1c5a      	adds	r2, r3, #1
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b74:	3b01      	subs	r3, #1
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	6a39      	ldr	r1, [r7, #32]
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f000 ff11 	bl	800a9a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00d      	beq.n	8009ba8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b90:	2b04      	cmp	r3, #4
 8009b92:	d107      	bne.n	8009ba4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ba2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e01a      	b.n	8009bde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d194      	bne.n	8009ada <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009bbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2220      	movs	r2, #32
 8009bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	e000      	b.n	8009bde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009bdc:	2302      	movs	r3, #2
  }
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3718      	adds	r7, #24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	00100002 	.word	0x00100002
 8009bec:	ffff0000 	.word	0xffff0000

08009bf0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af02      	add	r7, sp, #8
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	4608      	mov	r0, r1
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	4603      	mov	r3, r0
 8009c00:	817b      	strh	r3, [r7, #10]
 8009c02:	460b      	mov	r3, r1
 8009c04:	813b      	strh	r3, [r7, #8]
 8009c06:	4613      	mov	r3, r2
 8009c08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009c0a:	f7ff f89f 	bl	8008d4c <HAL_GetTick>
 8009c0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b20      	cmp	r3, #32
 8009c1a:	f040 80d9 	bne.w	8009dd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	2319      	movs	r3, #25
 8009c24:	2201      	movs	r2, #1
 8009c26:	496d      	ldr	r1, [pc, #436]	@ (8009ddc <HAL_I2C_Mem_Write+0x1ec>)
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f000 fd5b 	bl	800a6e4 <I2C_WaitOnFlagUntilTimeout>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d001      	beq.n	8009c38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009c34:	2302      	movs	r3, #2
 8009c36:	e0cc      	b.n	8009dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d101      	bne.n	8009c46 <HAL_I2C_Mem_Write+0x56>
 8009c42:	2302      	movs	r3, #2
 8009c44:	e0c5      	b.n	8009dd2 <HAL_I2C_Mem_Write+0x1e2>
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0301 	and.w	r3, r3, #1
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d007      	beq.n	8009c6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f042 0201 	orr.w	r2, r2, #1
 8009c6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009c7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2221      	movs	r2, #33	@ 0x21
 8009c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2240      	movs	r2, #64	@ 0x40
 8009c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6a3a      	ldr	r2, [r7, #32]
 8009c96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	4a4d      	ldr	r2, [pc, #308]	@ (8009de0 <HAL_I2C_Mem_Write+0x1f0>)
 8009cac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009cae:	88f8      	ldrh	r0, [r7, #6]
 8009cb0:	893a      	ldrh	r2, [r7, #8]
 8009cb2:	8979      	ldrh	r1, [r7, #10]
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	9301      	str	r3, [sp, #4]
 8009cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f000 fb92 	bl	800a3e8 <I2C_RequestMemoryWrite>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d052      	beq.n	8009d70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e081      	b.n	8009dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cce:	697a      	ldr	r2, [r7, #20]
 8009cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f000 fe20 	bl	800a918 <I2C_WaitOnTXEFlagUntilTimeout>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00d      	beq.n	8009cfa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ce2:	2b04      	cmp	r3, #4
 8009ce4:	d107      	bne.n	8009cf6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009cf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e06b      	b.n	8009dd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cfe:	781a      	ldrb	r2, [r3, #0]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d0a:	1c5a      	adds	r2, r3, #1
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d14:	3b01      	subs	r3, #1
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	3b01      	subs	r3, #1
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	695b      	ldr	r3, [r3, #20]
 8009d30:	f003 0304 	and.w	r3, r3, #4
 8009d34:	2b04      	cmp	r3, #4
 8009d36:	d11b      	bne.n	8009d70 <HAL_I2C_Mem_Write+0x180>
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d017      	beq.n	8009d70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d44:	781a      	ldrb	r2, [r3, #0]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d50:	1c5a      	adds	r2, r3, #1
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1aa      	bne.n	8009cce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f000 fe13 	bl	800a9a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d00d      	beq.n	8009da4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d8c:	2b04      	cmp	r3, #4
 8009d8e:	d107      	bne.n	8009da0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e016      	b.n	8009dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2220      	movs	r2, #32
 8009db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	e000      	b.n	8009dd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009dd0:	2302      	movs	r3, #2
  }
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3718      	adds	r7, #24
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	00100002 	.word	0x00100002
 8009de0:	ffff0000 	.word	0xffff0000

08009de4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b08c      	sub	sp, #48	@ 0x30
 8009de8:	af02      	add	r7, sp, #8
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	4608      	mov	r0, r1
 8009dee:	4611      	mov	r1, r2
 8009df0:	461a      	mov	r2, r3
 8009df2:	4603      	mov	r3, r0
 8009df4:	817b      	strh	r3, [r7, #10]
 8009df6:	460b      	mov	r3, r1
 8009df8:	813b      	strh	r3, [r7, #8]
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009e02:	f7fe ffa3 	bl	8008d4c <HAL_GetTick>
 8009e06:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	2b20      	cmp	r3, #32
 8009e12:	f040 8244 	bne.w	800a29e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	2319      	movs	r3, #25
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	4982      	ldr	r1, [pc, #520]	@ (800a028 <HAL_I2C_Mem_Read+0x244>)
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f000 fc5f 	bl	800a6e4 <I2C_WaitOnFlagUntilTimeout>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d001      	beq.n	8009e30 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	e237      	b.n	800a2a0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d101      	bne.n	8009e3e <HAL_I2C_Mem_Read+0x5a>
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	e230      	b.n	800a2a0 <HAL_I2C_Mem_Read+0x4bc>
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 0301 	and.w	r3, r3, #1
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d007      	beq.n	8009e64 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f042 0201 	orr.w	r2, r2, #1
 8009e62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009e72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2222      	movs	r2, #34	@ 0x22
 8009e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2240      	movs	r2, #64	@ 0x40
 8009e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009e94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	4a62      	ldr	r2, [pc, #392]	@ (800a02c <HAL_I2C_Mem_Read+0x248>)
 8009ea4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009ea6:	88f8      	ldrh	r0, [r7, #6]
 8009ea8:	893a      	ldrh	r2, [r7, #8]
 8009eaa:	8979      	ldrh	r1, [r7, #10]
 8009eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eae:	9301      	str	r3, [sp, #4]
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f000 fb2c 	bl	800a514 <I2C_RequestMemoryRead>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e1ec      	b.n	800a2a0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d113      	bne.n	8009ef6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ece:	2300      	movs	r3, #0
 8009ed0:	61fb      	str	r3, [r7, #28]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	695b      	ldr	r3, [r3, #20]
 8009ed8:	61fb      	str	r3, [r7, #28]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	61fb      	str	r3, [r7, #28]
 8009ee2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	e1c0      	b.n	800a278 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d11e      	bne.n	8009f3c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f0e:	b672      	cpsid	i
}
 8009f10:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f12:	2300      	movs	r3, #0
 8009f14:	61bb      	str	r3, [r7, #24]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	695b      	ldr	r3, [r3, #20]
 8009f1c:	61bb      	str	r3, [r7, #24]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	699b      	ldr	r3, [r3, #24]
 8009f24:	61bb      	str	r3, [r7, #24]
 8009f26:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009f38:	b662      	cpsie	i
}
 8009f3a:	e035      	b.n	8009fa8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d11e      	bne.n	8009f82 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f54:	b672      	cpsid	i
}
 8009f56:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f58:	2300      	movs	r3, #0
 8009f5a:	617b      	str	r3, [r7, #20]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	695b      	ldr	r3, [r3, #20]
 8009f62:	617b      	str	r3, [r7, #20]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	699b      	ldr	r3, [r3, #24]
 8009f6a:	617b      	str	r3, [r7, #20]
 8009f6c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009f7e:	b662      	cpsie	i
}
 8009f80:	e012      	b.n	8009fa8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009f90:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f92:	2300      	movs	r3, #0
 8009f94:	613b      	str	r3, [r7, #16]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	695b      	ldr	r3, [r3, #20]
 8009f9c:	613b      	str	r3, [r7, #16]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	613b      	str	r3, [r7, #16]
 8009fa6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009fa8:	e166      	b.n	800a278 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fae:	2b03      	cmp	r3, #3
 8009fb0:	f200 811f 	bhi.w	800a1f2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d123      	bne.n	800a004 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fbe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f000 fd39 	bl	800aa38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e167      	b.n	800a2a0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	691a      	ldr	r2, [r3, #16]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fda:	b2d2      	uxtb	r2, r2
 8009fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe2:	1c5a      	adds	r2, r3, #1
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fec:	3b01      	subs	r3, #1
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	b29a      	uxth	r2, r3
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a002:	e139      	b.n	800a278 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d152      	bne.n	800a0b2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a012:	2200      	movs	r2, #0
 800a014:	4906      	ldr	r1, [pc, #24]	@ (800a030 <HAL_I2C_Mem_Read+0x24c>)
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f000 fb64 	bl	800a6e4 <I2C_WaitOnFlagUntilTimeout>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d008      	beq.n	800a034 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	e13c      	b.n	800a2a0 <HAL_I2C_Mem_Read+0x4bc>
 800a026:	bf00      	nop
 800a028:	00100002 	.word	0x00100002
 800a02c:	ffff0000 	.word	0xffff0000
 800a030:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a034:	b672      	cpsid	i
}
 800a036:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	691a      	ldr	r2, [r3, #16]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a052:	b2d2      	uxtb	r2, r2
 800a054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a05a:	1c5a      	adds	r2, r3, #1
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a064:	3b01      	subs	r3, #1
 800a066:	b29a      	uxth	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a070:	b29b      	uxth	r3, r3
 800a072:	3b01      	subs	r3, #1
 800a074:	b29a      	uxth	r2, r3
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a07a:	b662      	cpsie	i
}
 800a07c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	691a      	ldr	r2, [r3, #16]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a088:	b2d2      	uxtb	r2, r2
 800a08a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a090:	1c5a      	adds	r2, r3, #1
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a09a:	3b01      	subs	r3, #1
 800a09c:	b29a      	uxth	r2, r3
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a0b0:	e0e2      	b.n	800a278 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	497b      	ldr	r1, [pc, #492]	@ (800a2a8 <HAL_I2C_Mem_Read+0x4c4>)
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f000 fb11 	bl	800a6e4 <I2C_WaitOnFlagUntilTimeout>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d001      	beq.n	800a0cc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e0e9      	b.n	800a2a0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0dc:	b672      	cpsid	i
}
 800a0de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	691a      	ldr	r2, [r3, #16]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ea:	b2d2      	uxtb	r2, r2
 800a0ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f2:	1c5a      	adds	r2, r3, #1
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a108:	b29b      	uxth	r3, r3
 800a10a:	3b01      	subs	r3, #1
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a112:	4b66      	ldr	r3, [pc, #408]	@ (800a2ac <HAL_I2C_Mem_Read+0x4c8>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	08db      	lsrs	r3, r3, #3
 800a118:	4a65      	ldr	r2, [pc, #404]	@ (800a2b0 <HAL_I2C_Mem_Read+0x4cc>)
 800a11a:	fba2 2303 	umull	r2, r3, r2, r3
 800a11e:	0a1a      	lsrs	r2, r3, #8
 800a120:	4613      	mov	r3, r2
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	4413      	add	r3, r2
 800a126:	00da      	lsls	r2, r3, #3
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a12c:	6a3b      	ldr	r3, [r7, #32]
 800a12e:	3b01      	subs	r3, #1
 800a130:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a132:	6a3b      	ldr	r3, [r7, #32]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d118      	bne.n	800a16a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2220      	movs	r2, #32
 800a142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2200      	movs	r2, #0
 800a14a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a152:	f043 0220 	orr.w	r2, r3, #32
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a15a:	b662      	cpsie	i
}
 800a15c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	e09a      	b.n	800a2a0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	695b      	ldr	r3, [r3, #20]
 800a170:	f003 0304 	and.w	r3, r3, #4
 800a174:	2b04      	cmp	r3, #4
 800a176:	d1d9      	bne.n	800a12c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a186:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	691a      	ldr	r2, [r3, #16]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a192:	b2d2      	uxtb	r2, r2
 800a194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a19a:	1c5a      	adds	r2, r3, #1
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a1ba:	b662      	cpsie	i
}
 800a1bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	691a      	ldr	r2, [r3, #16]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1c8:	b2d2      	uxtb	r2, r2
 800a1ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1d0:	1c5a      	adds	r2, r3, #1
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1da:	3b01      	subs	r3, #1
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	b29a      	uxth	r2, r3
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a1f0:	e042      	b.n	800a278 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f000 fc1e 	bl	800aa38 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d001      	beq.n	800a206 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e04c      	b.n	800a2a0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	691a      	ldr	r2, [r3, #16]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a210:	b2d2      	uxtb	r2, r2
 800a212:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a218:	1c5a      	adds	r2, r3, #1
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a222:	3b01      	subs	r3, #1
 800a224:	b29a      	uxth	r2, r3
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a22e:	b29b      	uxth	r3, r3
 800a230:	3b01      	subs	r3, #1
 800a232:	b29a      	uxth	r2, r3
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	f003 0304 	and.w	r3, r3, #4
 800a242:	2b04      	cmp	r3, #4
 800a244:	d118      	bne.n	800a278 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	691a      	ldr	r2, [r3, #16]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a250:	b2d2      	uxtb	r2, r2
 800a252:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a258:	1c5a      	adds	r2, r3, #1
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a262:	3b01      	subs	r3, #1
 800a264:	b29a      	uxth	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a26e:	b29b      	uxth	r3, r3
 800a270:	3b01      	subs	r3, #1
 800a272:	b29a      	uxth	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f47f ae94 	bne.w	8009faa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2220      	movs	r2, #32
 800a286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	e000      	b.n	800a2a0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a29e:	2302      	movs	r3, #2
  }
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3728      	adds	r7, #40	@ 0x28
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	00010004 	.word	0x00010004
 800a2ac:	20000cd8 	.word	0x20000cd8
 800a2b0:	14f8b589 	.word	0x14f8b589

0800a2b4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2c2:	b2db      	uxtb	r3, r3
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bc80      	pop	{r7}
 800a2cc:	4770      	bx	lr

0800a2ce <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	b083      	sub	sp, #12
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	370c      	adds	r7, #12
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bc80      	pop	{r7}
 800a2e2:	4770      	bx	lr

0800a2e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b088      	sub	sp, #32
 800a2e8:	af02      	add	r7, sp, #8
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	607a      	str	r2, [r7, #4]
 800a2ee:	603b      	str	r3, [r7, #0]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	2b08      	cmp	r3, #8
 800a2fe:	d006      	beq.n	800a30e <I2C_MasterRequestWrite+0x2a>
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	2b01      	cmp	r3, #1
 800a304:	d003      	beq.n	800a30e <I2C_MasterRequestWrite+0x2a>
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a30c:	d108      	bne.n	800a320 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	e00b      	b.n	800a338 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a324:	2b12      	cmp	r3, #18
 800a326:	d107      	bne.n	800a338 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a336:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f000 f9cd 	bl	800a6e4 <I2C_WaitOnFlagUntilTimeout>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00d      	beq.n	800a36c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a35a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a35e:	d103      	bne.n	800a368 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a366:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a368:	2303      	movs	r3, #3
 800a36a:	e035      	b.n	800a3d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a374:	d108      	bne.n	800a388 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a376:	897b      	ldrh	r3, [r7, #10]
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	461a      	mov	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a384:	611a      	str	r2, [r3, #16]
 800a386:	e01b      	b.n	800a3c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a388:	897b      	ldrh	r3, [r7, #10]
 800a38a:	11db      	asrs	r3, r3, #7
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	f003 0306 	and.w	r3, r3, #6
 800a392:	b2db      	uxtb	r3, r3
 800a394:	f063 030f 	orn	r3, r3, #15
 800a398:	b2da      	uxtb	r2, r3
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	490e      	ldr	r1, [pc, #56]	@ (800a3e0 <I2C_MasterRequestWrite+0xfc>)
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f000 fa16 	bl	800a7d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e010      	b.n	800a3d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a3b6:	897b      	ldrh	r3, [r7, #10]
 800a3b8:	b2da      	uxtb	r2, r3
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	4907      	ldr	r1, [pc, #28]	@ (800a3e4 <I2C_MasterRequestWrite+0x100>)
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f000 fa06 	bl	800a7d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e000      	b.n	800a3d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3718      	adds	r7, #24
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	00010008 	.word	0x00010008
 800a3e4:	00010002 	.word	0x00010002

0800a3e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b088      	sub	sp, #32
 800a3ec:	af02      	add	r7, sp, #8
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	4608      	mov	r0, r1
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	817b      	strh	r3, [r7, #10]
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	813b      	strh	r3, [r7, #8]
 800a3fe:	4613      	mov	r3, r2
 800a400:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a410:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a414:	9300      	str	r3, [sp, #0]
 800a416:	6a3b      	ldr	r3, [r7, #32]
 800a418:	2200      	movs	r2, #0
 800a41a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	f000 f960 	bl	800a6e4 <I2C_WaitOnFlagUntilTimeout>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00d      	beq.n	800a446 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a438:	d103      	bne.n	800a442 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a440:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e05f      	b.n	800a506 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a446:	897b      	ldrh	r3, [r7, #10]
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	461a      	mov	r2, r3
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a454:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a458:	6a3a      	ldr	r2, [r7, #32]
 800a45a:	492d      	ldr	r1, [pc, #180]	@ (800a510 <I2C_RequestMemoryWrite+0x128>)
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f000 f9bb 	bl	800a7d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e04c      	b.n	800a506 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a46c:	2300      	movs	r3, #0
 800a46e:	617b      	str	r3, [r7, #20]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	617b      	str	r3, [r7, #20]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	617b      	str	r3, [r7, #20]
 800a480:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a484:	6a39      	ldr	r1, [r7, #32]
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f000 fa46 	bl	800a918 <I2C_WaitOnTXEFlagUntilTimeout>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00d      	beq.n	800a4ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a496:	2b04      	cmp	r3, #4
 800a498:	d107      	bne.n	800a4aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e02b      	b.n	800a506 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a4ae:	88fb      	ldrh	r3, [r7, #6]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d105      	bne.n	800a4c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a4b4:	893b      	ldrh	r3, [r7, #8]
 800a4b6:	b2da      	uxtb	r2, r3
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	611a      	str	r2, [r3, #16]
 800a4be:	e021      	b.n	800a504 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a4c0:	893b      	ldrh	r3, [r7, #8]
 800a4c2:	0a1b      	lsrs	r3, r3, #8
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4d0:	6a39      	ldr	r1, [r7, #32]
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f000 fa20 	bl	800a918 <I2C_WaitOnTXEFlagUntilTimeout>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00d      	beq.n	800a4fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4e2:	2b04      	cmp	r3, #4
 800a4e4:	d107      	bne.n	800a4f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e005      	b.n	800a506 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a4fa:	893b      	ldrh	r3, [r7, #8]
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	00010002 	.word	0x00010002

0800a514 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b088      	sub	sp, #32
 800a518:	af02      	add	r7, sp, #8
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	4608      	mov	r0, r1
 800a51e:	4611      	mov	r1, r2
 800a520:	461a      	mov	r2, r3
 800a522:	4603      	mov	r3, r0
 800a524:	817b      	strh	r3, [r7, #10]
 800a526:	460b      	mov	r3, r1
 800a528:	813b      	strh	r3, [r7, #8]
 800a52a:	4613      	mov	r3, r2
 800a52c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a53c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a54c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	6a3b      	ldr	r3, [r7, #32]
 800a554:	2200      	movs	r2, #0
 800a556:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f000 f8c2 	bl	800a6e4 <I2C_WaitOnFlagUntilTimeout>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00d      	beq.n	800a582 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a574:	d103      	bne.n	800a57e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a57c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a57e:	2303      	movs	r3, #3
 800a580:	e0aa      	b.n	800a6d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a582:	897b      	ldrh	r3, [r7, #10]
 800a584:	b2db      	uxtb	r3, r3
 800a586:	461a      	mov	r2, r3
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a590:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a594:	6a3a      	ldr	r2, [r7, #32]
 800a596:	4952      	ldr	r1, [pc, #328]	@ (800a6e0 <I2C_RequestMemoryRead+0x1cc>)
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f000 f91d 	bl	800a7d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	e097      	b.n	800a6d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	617b      	str	r3, [r7, #20]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	695b      	ldr	r3, [r3, #20]
 800a5b2:	617b      	str	r3, [r7, #20]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	699b      	ldr	r3, [r3, #24]
 800a5ba:	617b      	str	r3, [r7, #20]
 800a5bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5c0:	6a39      	ldr	r1, [r7, #32]
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f000 f9a8 	bl	800a918 <I2C_WaitOnTXEFlagUntilTimeout>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00d      	beq.n	800a5ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5d2:	2b04      	cmp	r3, #4
 800a5d4:	d107      	bne.n	800a5e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e076      	b.n	800a6d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a5ea:	88fb      	ldrh	r3, [r7, #6]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d105      	bne.n	800a5fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a5f0:	893b      	ldrh	r3, [r7, #8]
 800a5f2:	b2da      	uxtb	r2, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	611a      	str	r2, [r3, #16]
 800a5fa:	e021      	b.n	800a640 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a5fc:	893b      	ldrh	r3, [r7, #8]
 800a5fe:	0a1b      	lsrs	r3, r3, #8
 800a600:	b29b      	uxth	r3, r3
 800a602:	b2da      	uxtb	r2, r3
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a60a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a60c:	6a39      	ldr	r1, [r7, #32]
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f000 f982 	bl	800a918 <I2C_WaitOnTXEFlagUntilTimeout>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00d      	beq.n	800a636 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a61e:	2b04      	cmp	r3, #4
 800a620:	d107      	bne.n	800a632 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a630:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	e050      	b.n	800a6d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a636:	893b      	ldrh	r3, [r7, #8]
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a642:	6a39      	ldr	r1, [r7, #32]
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f000 f967 	bl	800a918 <I2C_WaitOnTXEFlagUntilTimeout>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00d      	beq.n	800a66c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a654:	2b04      	cmp	r3, #4
 800a656:	d107      	bne.n	800a668 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a666:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e035      	b.n	800a6d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a67a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	6a3b      	ldr	r3, [r7, #32]
 800a682:	2200      	movs	r2, #0
 800a684:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f000 f82b 	bl	800a6e4 <I2C_WaitOnFlagUntilTimeout>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00d      	beq.n	800a6b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a69e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6a2:	d103      	bne.n	800a6ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	e013      	b.n	800a6d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a6b0:	897b      	ldrh	r3, [r7, #10]
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	f043 0301 	orr.w	r3, r3, #1
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c2:	6a3a      	ldr	r2, [r7, #32]
 800a6c4:	4906      	ldr	r1, [pc, #24]	@ (800a6e0 <I2C_RequestMemoryRead+0x1cc>)
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f000 f886 	bl	800a7d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e000      	b.n	800a6d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3718      	adds	r7, #24
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	00010002 	.word	0x00010002

0800a6e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	603b      	str	r3, [r7, #0]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a6f4:	e048      	b.n	800a788 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6fc:	d044      	beq.n	800a788 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6fe:	f7fe fb25 	bl	8008d4c <HAL_GetTick>
 800a702:	4602      	mov	r2, r0
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	683a      	ldr	r2, [r7, #0]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d302      	bcc.n	800a714 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d139      	bne.n	800a788 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	0c1b      	lsrs	r3, r3, #16
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d10d      	bne.n	800a73a <I2C_WaitOnFlagUntilTimeout+0x56>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	695b      	ldr	r3, [r3, #20]
 800a724:	43da      	mvns	r2, r3
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	4013      	ands	r3, r2
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	bf0c      	ite	eq
 800a730:	2301      	moveq	r3, #1
 800a732:	2300      	movne	r3, #0
 800a734:	b2db      	uxtb	r3, r3
 800a736:	461a      	mov	r2, r3
 800a738:	e00c      	b.n	800a754 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	43da      	mvns	r2, r3
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	4013      	ands	r3, r2
 800a746:	b29b      	uxth	r3, r3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	bf0c      	ite	eq
 800a74c:	2301      	moveq	r3, #1
 800a74e:	2300      	movne	r3, #0
 800a750:	b2db      	uxtb	r3, r3
 800a752:	461a      	mov	r2, r3
 800a754:	79fb      	ldrb	r3, [r7, #7]
 800a756:	429a      	cmp	r2, r3
 800a758:	d116      	bne.n	800a788 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2220      	movs	r2, #32
 800a764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a774:	f043 0220 	orr.w	r2, r3, #32
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e023      	b.n	800a7d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	0c1b      	lsrs	r3, r3, #16
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d10d      	bne.n	800a7ae <I2C_WaitOnFlagUntilTimeout+0xca>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	695b      	ldr	r3, [r3, #20]
 800a798:	43da      	mvns	r2, r3
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	4013      	ands	r3, r2
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	bf0c      	ite	eq
 800a7a4:	2301      	moveq	r3, #1
 800a7a6:	2300      	movne	r3, #0
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	e00c      	b.n	800a7c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	699b      	ldr	r3, [r3, #24]
 800a7b4:	43da      	mvns	r2, r3
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	bf0c      	ite	eq
 800a7c0:	2301      	moveq	r3, #1
 800a7c2:	2300      	movne	r3, #0
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	79fb      	ldrb	r3, [r7, #7]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d093      	beq.n	800a6f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
 800a7e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a7e6:	e071      	b.n	800a8cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	695b      	ldr	r3, [r3, #20]
 800a7ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7f6:	d123      	bne.n	800a840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a806:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a810:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2200      	movs	r2, #0
 800a816:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2220      	movs	r2, #32
 800a81c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a82c:	f043 0204 	orr.w	r2, r3, #4
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	e067      	b.n	800a910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a846:	d041      	beq.n	800a8cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a848:	f7fe fa80 	bl	8008d4c <HAL_GetTick>
 800a84c:	4602      	mov	r2, r0
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	429a      	cmp	r2, r3
 800a856:	d302      	bcc.n	800a85e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d136      	bne.n	800a8cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	0c1b      	lsrs	r3, r3, #16
 800a862:	b2db      	uxtb	r3, r3
 800a864:	2b01      	cmp	r3, #1
 800a866:	d10c      	bne.n	800a882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	695b      	ldr	r3, [r3, #20]
 800a86e:	43da      	mvns	r2, r3
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	4013      	ands	r3, r2
 800a874:	b29b      	uxth	r3, r3
 800a876:	2b00      	cmp	r3, #0
 800a878:	bf14      	ite	ne
 800a87a:	2301      	movne	r3, #1
 800a87c:	2300      	moveq	r3, #0
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	e00b      	b.n	800a89a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	43da      	mvns	r2, r3
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	4013      	ands	r3, r2
 800a88e:	b29b      	uxth	r3, r3
 800a890:	2b00      	cmp	r3, #0
 800a892:	bf14      	ite	ne
 800a894:	2301      	movne	r3, #1
 800a896:	2300      	moveq	r3, #0
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d016      	beq.n	800a8cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2220      	movs	r2, #32
 800a8a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8b8:	f043 0220 	orr.w	r2, r3, #32
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e021      	b.n	800a910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	0c1b      	lsrs	r3, r3, #16
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d10c      	bne.n	800a8f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	695b      	ldr	r3, [r3, #20]
 800a8dc:	43da      	mvns	r2, r3
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	bf14      	ite	ne
 800a8e8:	2301      	movne	r3, #1
 800a8ea:	2300      	moveq	r3, #0
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	e00b      	b.n	800a908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	43da      	mvns	r2, r3
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	4013      	ands	r3, r2
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	bf14      	ite	ne
 800a902:	2301      	movne	r3, #1
 800a904:	2300      	moveq	r3, #0
 800a906:	b2db      	uxtb	r3, r3
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f47f af6d 	bne.w	800a7e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a924:	e034      	b.n	800a990 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f000 f8e3 	bl	800aaf2 <I2C_IsAcknowledgeFailed>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	e034      	b.n	800a9a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a93c:	d028      	beq.n	800a990 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a93e:	f7fe fa05 	bl	8008d4c <HAL_GetTick>
 800a942:	4602      	mov	r2, r0
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	68ba      	ldr	r2, [r7, #8]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d302      	bcc.n	800a954 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d11d      	bne.n	800a990 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	695b      	ldr	r3, [r3, #20]
 800a95a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a95e:	2b80      	cmp	r3, #128	@ 0x80
 800a960:	d016      	beq.n	800a990 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2200      	movs	r2, #0
 800a966:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2220      	movs	r2, #32
 800a96c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a97c:	f043 0220 	orr.w	r2, r3, #32
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2200      	movs	r2, #0
 800a988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	e007      	b.n	800a9a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	695b      	ldr	r3, [r3, #20]
 800a996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a99a:	2b80      	cmp	r3, #128	@ 0x80
 800a99c:	d1c3      	bne.n	800a926 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a9b4:	e034      	b.n	800aa20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f000 f89b 	bl	800aaf2 <I2C_IsAcknowledgeFailed>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e034      	b.n	800aa30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9cc:	d028      	beq.n	800aa20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9ce:	f7fe f9bd 	bl	8008d4c <HAL_GetTick>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d302      	bcc.n	800a9e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d11d      	bne.n	800aa20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	695b      	ldr	r3, [r3, #20]
 800a9ea:	f003 0304 	and.w	r3, r3, #4
 800a9ee:	2b04      	cmp	r3, #4
 800a9f0:	d016      	beq.n	800aa20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2220      	movs	r2, #32
 800a9fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa0c:	f043 0220 	orr.w	r2, r3, #32
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e007      	b.n	800aa30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	695b      	ldr	r3, [r3, #20]
 800aa26:	f003 0304 	and.w	r3, r3, #4
 800aa2a:	2b04      	cmp	r3, #4
 800aa2c:	d1c3      	bne.n	800a9b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aa44:	e049      	b.n	800aada <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	695b      	ldr	r3, [r3, #20]
 800aa4c:	f003 0310 	and.w	r3, r3, #16
 800aa50:	2b10      	cmp	r3, #16
 800aa52:	d119      	bne.n	800aa88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f06f 0210 	mvn.w	r2, #16
 800aa5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2200      	movs	r2, #0
 800aa62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2220      	movs	r2, #32
 800aa68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e030      	b.n	800aaea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa88:	f7fe f960 	bl	8008d4c <HAL_GetTick>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	1ad3      	subs	r3, r2, r3
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d302      	bcc.n	800aa9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d11d      	bne.n	800aada <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	695b      	ldr	r3, [r3, #20]
 800aaa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaa8:	2b40      	cmp	r3, #64	@ 0x40
 800aaaa:	d016      	beq.n	800aada <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2200      	movs	r2, #0
 800aab0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2220      	movs	r2, #32
 800aab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aac6:	f043 0220 	orr.w	r2, r3, #32
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	e007      	b.n	800aaea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	695b      	ldr	r3, [r3, #20]
 800aae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aae4:	2b40      	cmp	r3, #64	@ 0x40
 800aae6:	d1ae      	bne.n	800aa46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800aaf2:	b480      	push	{r7}
 800aaf4:	b083      	sub	sp, #12
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab08:	d11b      	bne.n	800ab42 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ab12:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2220      	movs	r2, #32
 800ab1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab2e:	f043 0204 	orr.w	r2, r3, #4
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e000      	b.n	800ab44 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bc80      	pop	{r7}
 800ab4c:	4770      	bx	lr
	...

0800ab50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d101      	bne.n	800ab62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e272      	b.n	800b048 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f003 0301 	and.w	r3, r3, #1
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f000 8087 	beq.w	800ac7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ab70:	4b92      	ldr	r3, [pc, #584]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	f003 030c 	and.w	r3, r3, #12
 800ab78:	2b04      	cmp	r3, #4
 800ab7a:	d00c      	beq.n	800ab96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ab7c:	4b8f      	ldr	r3, [pc, #572]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	f003 030c 	and.w	r3, r3, #12
 800ab84:	2b08      	cmp	r3, #8
 800ab86:	d112      	bne.n	800abae <HAL_RCC_OscConfig+0x5e>
 800ab88:	4b8c      	ldr	r3, [pc, #560]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab94:	d10b      	bne.n	800abae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab96:	4b89      	ldr	r3, [pc, #548]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d06c      	beq.n	800ac7c <HAL_RCC_OscConfig+0x12c>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d168      	bne.n	800ac7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	e24c      	b.n	800b048 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abb6:	d106      	bne.n	800abc6 <HAL_RCC_OscConfig+0x76>
 800abb8:	4b80      	ldr	r3, [pc, #512]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a7f      	ldr	r2, [pc, #508]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800abbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800abc2:	6013      	str	r3, [r2, #0]
 800abc4:	e02e      	b.n	800ac24 <HAL_RCC_OscConfig+0xd4>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10c      	bne.n	800abe8 <HAL_RCC_OscConfig+0x98>
 800abce:	4b7b      	ldr	r3, [pc, #492]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a7a      	ldr	r2, [pc, #488]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800abd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800abd8:	6013      	str	r3, [r2, #0]
 800abda:	4b78      	ldr	r3, [pc, #480]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a77      	ldr	r2, [pc, #476]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800abe0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800abe4:	6013      	str	r3, [r2, #0]
 800abe6:	e01d      	b.n	800ac24 <HAL_RCC_OscConfig+0xd4>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800abf0:	d10c      	bne.n	800ac0c <HAL_RCC_OscConfig+0xbc>
 800abf2:	4b72      	ldr	r3, [pc, #456]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a71      	ldr	r2, [pc, #452]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800abf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800abfc:	6013      	str	r3, [r2, #0]
 800abfe:	4b6f      	ldr	r3, [pc, #444]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a6e      	ldr	r2, [pc, #440]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ac04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac08:	6013      	str	r3, [r2, #0]
 800ac0a:	e00b      	b.n	800ac24 <HAL_RCC_OscConfig+0xd4>
 800ac0c:	4b6b      	ldr	r3, [pc, #428]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a6a      	ldr	r2, [pc, #424]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ac12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac16:	6013      	str	r3, [r2, #0]
 800ac18:	4b68      	ldr	r3, [pc, #416]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a67      	ldr	r2, [pc, #412]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ac1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ac22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d013      	beq.n	800ac54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac2c:	f7fe f88e 	bl	8008d4c <HAL_GetTick>
 800ac30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac32:	e008      	b.n	800ac46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac34:	f7fe f88a 	bl	8008d4c <HAL_GetTick>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	2b64      	cmp	r3, #100	@ 0x64
 800ac40:	d901      	bls.n	800ac46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ac42:	2303      	movs	r3, #3
 800ac44:	e200      	b.n	800b048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac46:	4b5d      	ldr	r3, [pc, #372]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d0f0      	beq.n	800ac34 <HAL_RCC_OscConfig+0xe4>
 800ac52:	e014      	b.n	800ac7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac54:	f7fe f87a 	bl	8008d4c <HAL_GetTick>
 800ac58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac5a:	e008      	b.n	800ac6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac5c:	f7fe f876 	bl	8008d4c <HAL_GetTick>
 800ac60:	4602      	mov	r2, r0
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	1ad3      	subs	r3, r2, r3
 800ac66:	2b64      	cmp	r3, #100	@ 0x64
 800ac68:	d901      	bls.n	800ac6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ac6a:	2303      	movs	r3, #3
 800ac6c:	e1ec      	b.n	800b048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac6e:	4b53      	ldr	r3, [pc, #332]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1f0      	bne.n	800ac5c <HAL_RCC_OscConfig+0x10c>
 800ac7a:	e000      	b.n	800ac7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f003 0302 	and.w	r3, r3, #2
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d063      	beq.n	800ad52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ac8a:	4b4c      	ldr	r3, [pc, #304]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	f003 030c 	and.w	r3, r3, #12
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00b      	beq.n	800acae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800ac96:	4b49      	ldr	r3, [pc, #292]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	f003 030c 	and.w	r3, r3, #12
 800ac9e:	2b08      	cmp	r3, #8
 800aca0:	d11c      	bne.n	800acdc <HAL_RCC_OscConfig+0x18c>
 800aca2:	4b46      	ldr	r3, [pc, #280]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d116      	bne.n	800acdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800acae:	4b43      	ldr	r3, [pc, #268]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f003 0302 	and.w	r3, r3, #2
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d005      	beq.n	800acc6 <HAL_RCC_OscConfig+0x176>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	691b      	ldr	r3, [r3, #16]
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d001      	beq.n	800acc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800acc2:	2301      	movs	r3, #1
 800acc4:	e1c0      	b.n	800b048 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800acc6:	4b3d      	ldr	r3, [pc, #244]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	695b      	ldr	r3, [r3, #20]
 800acd2:	00db      	lsls	r3, r3, #3
 800acd4:	4939      	ldr	r1, [pc, #228]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800acd6:	4313      	orrs	r3, r2
 800acd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800acda:	e03a      	b.n	800ad52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	691b      	ldr	r3, [r3, #16]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d020      	beq.n	800ad26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ace4:	4b36      	ldr	r3, [pc, #216]	@ (800adc0 <HAL_RCC_OscConfig+0x270>)
 800ace6:	2201      	movs	r2, #1
 800ace8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acea:	f7fe f82f 	bl	8008d4c <HAL_GetTick>
 800acee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800acf0:	e008      	b.n	800ad04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800acf2:	f7fe f82b 	bl	8008d4c <HAL_GetTick>
 800acf6:	4602      	mov	r2, r0
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	1ad3      	subs	r3, r2, r3
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d901      	bls.n	800ad04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800ad00:	2303      	movs	r3, #3
 800ad02:	e1a1      	b.n	800b048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad04:	4b2d      	ldr	r3, [pc, #180]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f003 0302 	and.w	r3, r3, #2
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d0f0      	beq.n	800acf2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad10:	4b2a      	ldr	r3, [pc, #168]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	695b      	ldr	r3, [r3, #20]
 800ad1c:	00db      	lsls	r3, r3, #3
 800ad1e:	4927      	ldr	r1, [pc, #156]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ad20:	4313      	orrs	r3, r2
 800ad22:	600b      	str	r3, [r1, #0]
 800ad24:	e015      	b.n	800ad52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ad26:	4b26      	ldr	r3, [pc, #152]	@ (800adc0 <HAL_RCC_OscConfig+0x270>)
 800ad28:	2200      	movs	r2, #0
 800ad2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad2c:	f7fe f80e 	bl	8008d4c <HAL_GetTick>
 800ad30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ad32:	e008      	b.n	800ad46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad34:	f7fe f80a 	bl	8008d4c <HAL_GetTick>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	1ad3      	subs	r3, r2, r3
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d901      	bls.n	800ad46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800ad42:	2303      	movs	r3, #3
 800ad44:	e180      	b.n	800b048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ad46:	4b1d      	ldr	r3, [pc, #116]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f003 0302 	and.w	r3, r3, #2
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1f0      	bne.n	800ad34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f003 0308 	and.w	r3, r3, #8
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d03a      	beq.n	800add4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	699b      	ldr	r3, [r3, #24]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d019      	beq.n	800ad9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ad66:	4b17      	ldr	r3, [pc, #92]	@ (800adc4 <HAL_RCC_OscConfig+0x274>)
 800ad68:	2201      	movs	r2, #1
 800ad6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad6c:	f7fd ffee 	bl	8008d4c <HAL_GetTick>
 800ad70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad72:	e008      	b.n	800ad86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad74:	f7fd ffea 	bl	8008d4c <HAL_GetTick>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	2b02      	cmp	r3, #2
 800ad80:	d901      	bls.n	800ad86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800ad82:	2303      	movs	r3, #3
 800ad84:	e160      	b.n	800b048 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad86:	4b0d      	ldr	r3, [pc, #52]	@ (800adbc <HAL_RCC_OscConfig+0x26c>)
 800ad88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad8a:	f003 0302 	and.w	r3, r3, #2
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d0f0      	beq.n	800ad74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ad92:	2001      	movs	r0, #1
 800ad94:	f000 face 	bl	800b334 <RCC_Delay>
 800ad98:	e01c      	b.n	800add4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ad9a:	4b0a      	ldr	r3, [pc, #40]	@ (800adc4 <HAL_RCC_OscConfig+0x274>)
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ada0:	f7fd ffd4 	bl	8008d4c <HAL_GetTick>
 800ada4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ada6:	e00f      	b.n	800adc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ada8:	f7fd ffd0 	bl	8008d4c <HAL_GetTick>
 800adac:	4602      	mov	r2, r0
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	2b02      	cmp	r3, #2
 800adb4:	d908      	bls.n	800adc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800adb6:	2303      	movs	r3, #3
 800adb8:	e146      	b.n	800b048 <HAL_RCC_OscConfig+0x4f8>
 800adba:	bf00      	nop
 800adbc:	40021000 	.word	0x40021000
 800adc0:	42420000 	.word	0x42420000
 800adc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800adc8:	4b92      	ldr	r3, [pc, #584]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800adca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adcc:	f003 0302 	and.w	r3, r3, #2
 800add0:	2b00      	cmp	r3, #0
 800add2:	d1e9      	bne.n	800ada8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 0304 	and.w	r3, r3, #4
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 80a6 	beq.w	800af2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ade2:	2300      	movs	r3, #0
 800ade4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ade6:	4b8b      	ldr	r3, [pc, #556]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800ade8:	69db      	ldr	r3, [r3, #28]
 800adea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d10d      	bne.n	800ae0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800adf2:	4b88      	ldr	r3, [pc, #544]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800adf4:	69db      	ldr	r3, [r3, #28]
 800adf6:	4a87      	ldr	r2, [pc, #540]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800adf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800adfc:	61d3      	str	r3, [r2, #28]
 800adfe:	4b85      	ldr	r3, [pc, #532]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800ae00:	69db      	ldr	r3, [r3, #28]
 800ae02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ae06:	60bb      	str	r3, [r7, #8]
 800ae08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae0e:	4b82      	ldr	r3, [pc, #520]	@ (800b018 <HAL_RCC_OscConfig+0x4c8>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d118      	bne.n	800ae4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ae1a:	4b7f      	ldr	r3, [pc, #508]	@ (800b018 <HAL_RCC_OscConfig+0x4c8>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a7e      	ldr	r2, [pc, #504]	@ (800b018 <HAL_RCC_OscConfig+0x4c8>)
 800ae20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ae26:	f7fd ff91 	bl	8008d4c <HAL_GetTick>
 800ae2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae2c:	e008      	b.n	800ae40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae2e:	f7fd ff8d 	bl	8008d4c <HAL_GetTick>
 800ae32:	4602      	mov	r2, r0
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	2b64      	cmp	r3, #100	@ 0x64
 800ae3a:	d901      	bls.n	800ae40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	e103      	b.n	800b048 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae40:	4b75      	ldr	r3, [pc, #468]	@ (800b018 <HAL_RCC_OscConfig+0x4c8>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d0f0      	beq.n	800ae2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d106      	bne.n	800ae62 <HAL_RCC_OscConfig+0x312>
 800ae54:	4b6f      	ldr	r3, [pc, #444]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800ae56:	6a1b      	ldr	r3, [r3, #32]
 800ae58:	4a6e      	ldr	r2, [pc, #440]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800ae5a:	f043 0301 	orr.w	r3, r3, #1
 800ae5e:	6213      	str	r3, [r2, #32]
 800ae60:	e02d      	b.n	800aebe <HAL_RCC_OscConfig+0x36e>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10c      	bne.n	800ae84 <HAL_RCC_OscConfig+0x334>
 800ae6a:	4b6a      	ldr	r3, [pc, #424]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800ae6c:	6a1b      	ldr	r3, [r3, #32]
 800ae6e:	4a69      	ldr	r2, [pc, #420]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800ae70:	f023 0301 	bic.w	r3, r3, #1
 800ae74:	6213      	str	r3, [r2, #32]
 800ae76:	4b67      	ldr	r3, [pc, #412]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800ae78:	6a1b      	ldr	r3, [r3, #32]
 800ae7a:	4a66      	ldr	r2, [pc, #408]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800ae7c:	f023 0304 	bic.w	r3, r3, #4
 800ae80:	6213      	str	r3, [r2, #32]
 800ae82:	e01c      	b.n	800aebe <HAL_RCC_OscConfig+0x36e>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	2b05      	cmp	r3, #5
 800ae8a:	d10c      	bne.n	800aea6 <HAL_RCC_OscConfig+0x356>
 800ae8c:	4b61      	ldr	r3, [pc, #388]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800ae8e:	6a1b      	ldr	r3, [r3, #32]
 800ae90:	4a60      	ldr	r2, [pc, #384]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800ae92:	f043 0304 	orr.w	r3, r3, #4
 800ae96:	6213      	str	r3, [r2, #32]
 800ae98:	4b5e      	ldr	r3, [pc, #376]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800ae9a:	6a1b      	ldr	r3, [r3, #32]
 800ae9c:	4a5d      	ldr	r2, [pc, #372]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800ae9e:	f043 0301 	orr.w	r3, r3, #1
 800aea2:	6213      	str	r3, [r2, #32]
 800aea4:	e00b      	b.n	800aebe <HAL_RCC_OscConfig+0x36e>
 800aea6:	4b5b      	ldr	r3, [pc, #364]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	4a5a      	ldr	r2, [pc, #360]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800aeac:	f023 0301 	bic.w	r3, r3, #1
 800aeb0:	6213      	str	r3, [r2, #32]
 800aeb2:	4b58      	ldr	r3, [pc, #352]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	4a57      	ldr	r2, [pc, #348]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800aeb8:	f023 0304 	bic.w	r3, r3, #4
 800aebc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d015      	beq.n	800aef2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aec6:	f7fd ff41 	bl	8008d4c <HAL_GetTick>
 800aeca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aecc:	e00a      	b.n	800aee4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aece:	f7fd ff3d 	bl	8008d4c <HAL_GetTick>
 800aed2:	4602      	mov	r2, r0
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aedc:	4293      	cmp	r3, r2
 800aede:	d901      	bls.n	800aee4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800aee0:	2303      	movs	r3, #3
 800aee2:	e0b1      	b.n	800b048 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aee4:	4b4b      	ldr	r3, [pc, #300]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800aee6:	6a1b      	ldr	r3, [r3, #32]
 800aee8:	f003 0302 	and.w	r3, r3, #2
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d0ee      	beq.n	800aece <HAL_RCC_OscConfig+0x37e>
 800aef0:	e014      	b.n	800af1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aef2:	f7fd ff2b 	bl	8008d4c <HAL_GetTick>
 800aef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aef8:	e00a      	b.n	800af10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aefa:	f7fd ff27 	bl	8008d4c <HAL_GetTick>
 800aefe:	4602      	mov	r2, r0
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af08:	4293      	cmp	r3, r2
 800af0a:	d901      	bls.n	800af10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800af0c:	2303      	movs	r3, #3
 800af0e:	e09b      	b.n	800b048 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af10:	4b40      	ldr	r3, [pc, #256]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800af12:	6a1b      	ldr	r3, [r3, #32]
 800af14:	f003 0302 	and.w	r3, r3, #2
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1ee      	bne.n	800aefa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800af1c:	7dfb      	ldrb	r3, [r7, #23]
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d105      	bne.n	800af2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af22:	4b3c      	ldr	r3, [pc, #240]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800af24:	69db      	ldr	r3, [r3, #28]
 800af26:	4a3b      	ldr	r2, [pc, #236]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800af28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	69db      	ldr	r3, [r3, #28]
 800af32:	2b00      	cmp	r3, #0
 800af34:	f000 8087 	beq.w	800b046 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800af38:	4b36      	ldr	r3, [pc, #216]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	f003 030c 	and.w	r3, r3, #12
 800af40:	2b08      	cmp	r3, #8
 800af42:	d061      	beq.n	800b008 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	69db      	ldr	r3, [r3, #28]
 800af48:	2b02      	cmp	r3, #2
 800af4a:	d146      	bne.n	800afda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af4c:	4b33      	ldr	r3, [pc, #204]	@ (800b01c <HAL_RCC_OscConfig+0x4cc>)
 800af4e:	2200      	movs	r2, #0
 800af50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af52:	f7fd fefb 	bl	8008d4c <HAL_GetTick>
 800af56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800af58:	e008      	b.n	800af6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af5a:	f7fd fef7 	bl	8008d4c <HAL_GetTick>
 800af5e:	4602      	mov	r2, r0
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	1ad3      	subs	r3, r2, r3
 800af64:	2b02      	cmp	r3, #2
 800af66:	d901      	bls.n	800af6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800af68:	2303      	movs	r3, #3
 800af6a:	e06d      	b.n	800b048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800af6c:	4b29      	ldr	r3, [pc, #164]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1f0      	bne.n	800af5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6a1b      	ldr	r3, [r3, #32]
 800af7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af80:	d108      	bne.n	800af94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800af82:	4b24      	ldr	r3, [pc, #144]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	4921      	ldr	r1, [pc, #132]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800af90:	4313      	orrs	r3, r2
 800af92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800af94:	4b1f      	ldr	r3, [pc, #124]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6a19      	ldr	r1, [r3, #32]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afa4:	430b      	orrs	r3, r1
 800afa6:	491b      	ldr	r1, [pc, #108]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800afa8:	4313      	orrs	r3, r2
 800afaa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800afac:	4b1b      	ldr	r3, [pc, #108]	@ (800b01c <HAL_RCC_OscConfig+0x4cc>)
 800afae:	2201      	movs	r2, #1
 800afb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afb2:	f7fd fecb 	bl	8008d4c <HAL_GetTick>
 800afb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800afb8:	e008      	b.n	800afcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afba:	f7fd fec7 	bl	8008d4c <HAL_GetTick>
 800afbe:	4602      	mov	r2, r0
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	1ad3      	subs	r3, r2, r3
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	d901      	bls.n	800afcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800afc8:	2303      	movs	r3, #3
 800afca:	e03d      	b.n	800b048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800afcc:	4b11      	ldr	r3, [pc, #68]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d0f0      	beq.n	800afba <HAL_RCC_OscConfig+0x46a>
 800afd8:	e035      	b.n	800b046 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afda:	4b10      	ldr	r3, [pc, #64]	@ (800b01c <HAL_RCC_OscConfig+0x4cc>)
 800afdc:	2200      	movs	r2, #0
 800afde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afe0:	f7fd feb4 	bl	8008d4c <HAL_GetTick>
 800afe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800afe6:	e008      	b.n	800affa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afe8:	f7fd feb0 	bl	8008d4c <HAL_GetTick>
 800afec:	4602      	mov	r2, r0
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	1ad3      	subs	r3, r2, r3
 800aff2:	2b02      	cmp	r3, #2
 800aff4:	d901      	bls.n	800affa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800aff6:	2303      	movs	r3, #3
 800aff8:	e026      	b.n	800b048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800affa:	4b06      	ldr	r3, [pc, #24]	@ (800b014 <HAL_RCC_OscConfig+0x4c4>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1f0      	bne.n	800afe8 <HAL_RCC_OscConfig+0x498>
 800b006:	e01e      	b.n	800b046 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	69db      	ldr	r3, [r3, #28]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d107      	bne.n	800b020 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	e019      	b.n	800b048 <HAL_RCC_OscConfig+0x4f8>
 800b014:	40021000 	.word	0x40021000
 800b018:	40007000 	.word	0x40007000
 800b01c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b020:	4b0b      	ldr	r3, [pc, #44]	@ (800b050 <HAL_RCC_OscConfig+0x500>)
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a1b      	ldr	r3, [r3, #32]
 800b030:	429a      	cmp	r2, r3
 800b032:	d106      	bne.n	800b042 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b03e:	429a      	cmp	r2, r3
 800b040:	d001      	beq.n	800b046 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	e000      	b.n	800b048 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3718      	adds	r7, #24
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	40021000 	.word	0x40021000

0800b054 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	e0d0      	b.n	800b20a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b068:	4b6a      	ldr	r3, [pc, #424]	@ (800b214 <HAL_RCC_ClockConfig+0x1c0>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 0307 	and.w	r3, r3, #7
 800b070:	683a      	ldr	r2, [r7, #0]
 800b072:	429a      	cmp	r2, r3
 800b074:	d910      	bls.n	800b098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b076:	4b67      	ldr	r3, [pc, #412]	@ (800b214 <HAL_RCC_ClockConfig+0x1c0>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f023 0207 	bic.w	r2, r3, #7
 800b07e:	4965      	ldr	r1, [pc, #404]	@ (800b214 <HAL_RCC_ClockConfig+0x1c0>)
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	4313      	orrs	r3, r2
 800b084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b086:	4b63      	ldr	r3, [pc, #396]	@ (800b214 <HAL_RCC_ClockConfig+0x1c0>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f003 0307 	and.w	r3, r3, #7
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	429a      	cmp	r2, r3
 800b092:	d001      	beq.n	800b098 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	e0b8      	b.n	800b20a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0302 	and.w	r3, r3, #2
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d020      	beq.n	800b0e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f003 0304 	and.w	r3, r3, #4
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d005      	beq.n	800b0bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b0b0:	4b59      	ldr	r3, [pc, #356]	@ (800b218 <HAL_RCC_ClockConfig+0x1c4>)
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	4a58      	ldr	r2, [pc, #352]	@ (800b218 <HAL_RCC_ClockConfig+0x1c4>)
 800b0b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b0ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f003 0308 	and.w	r3, r3, #8
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d005      	beq.n	800b0d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b0c8:	4b53      	ldr	r3, [pc, #332]	@ (800b218 <HAL_RCC_ClockConfig+0x1c4>)
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	4a52      	ldr	r2, [pc, #328]	@ (800b218 <HAL_RCC_ClockConfig+0x1c4>)
 800b0ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800b0d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0d4:	4b50      	ldr	r3, [pc, #320]	@ (800b218 <HAL_RCC_ClockConfig+0x1c4>)
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	494d      	ldr	r1, [pc, #308]	@ (800b218 <HAL_RCC_ClockConfig+0x1c4>)
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 0301 	and.w	r3, r3, #1
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d040      	beq.n	800b174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d107      	bne.n	800b10a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b0fa:	4b47      	ldr	r3, [pc, #284]	@ (800b218 <HAL_RCC_ClockConfig+0x1c4>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b102:	2b00      	cmp	r3, #0
 800b104:	d115      	bne.n	800b132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	e07f      	b.n	800b20a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d107      	bne.n	800b122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b112:	4b41      	ldr	r3, [pc, #260]	@ (800b218 <HAL_RCC_ClockConfig+0x1c4>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d109      	bne.n	800b132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e073      	b.n	800b20a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b122:	4b3d      	ldr	r3, [pc, #244]	@ (800b218 <HAL_RCC_ClockConfig+0x1c4>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f003 0302 	and.w	r3, r3, #2
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d101      	bne.n	800b132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b12e:	2301      	movs	r3, #1
 800b130:	e06b      	b.n	800b20a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b132:	4b39      	ldr	r3, [pc, #228]	@ (800b218 <HAL_RCC_ClockConfig+0x1c4>)
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	f023 0203 	bic.w	r2, r3, #3
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	4936      	ldr	r1, [pc, #216]	@ (800b218 <HAL_RCC_ClockConfig+0x1c4>)
 800b140:	4313      	orrs	r3, r2
 800b142:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b144:	f7fd fe02 	bl	8008d4c <HAL_GetTick>
 800b148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b14a:	e00a      	b.n	800b162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b14c:	f7fd fdfe 	bl	8008d4c <HAL_GetTick>
 800b150:	4602      	mov	r2, r0
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	1ad3      	subs	r3, r2, r3
 800b156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d901      	bls.n	800b162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b15e:	2303      	movs	r3, #3
 800b160:	e053      	b.n	800b20a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b162:	4b2d      	ldr	r3, [pc, #180]	@ (800b218 <HAL_RCC_ClockConfig+0x1c4>)
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	f003 020c 	and.w	r2, r3, #12
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	429a      	cmp	r2, r3
 800b172:	d1eb      	bne.n	800b14c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b174:	4b27      	ldr	r3, [pc, #156]	@ (800b214 <HAL_RCC_ClockConfig+0x1c0>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 0307 	and.w	r3, r3, #7
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d210      	bcs.n	800b1a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b182:	4b24      	ldr	r3, [pc, #144]	@ (800b214 <HAL_RCC_ClockConfig+0x1c0>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f023 0207 	bic.w	r2, r3, #7
 800b18a:	4922      	ldr	r1, [pc, #136]	@ (800b214 <HAL_RCC_ClockConfig+0x1c0>)
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	4313      	orrs	r3, r2
 800b190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b192:	4b20      	ldr	r3, [pc, #128]	@ (800b214 <HAL_RCC_ClockConfig+0x1c0>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f003 0307 	and.w	r3, r3, #7
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d001      	beq.n	800b1a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e032      	b.n	800b20a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 0304 	and.w	r3, r3, #4
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d008      	beq.n	800b1c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b1b0:	4b19      	ldr	r3, [pc, #100]	@ (800b218 <HAL_RCC_ClockConfig+0x1c4>)
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	4916      	ldr	r1, [pc, #88]	@ (800b218 <HAL_RCC_ClockConfig+0x1c4>)
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f003 0308 	and.w	r3, r3, #8
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d009      	beq.n	800b1e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b1ce:	4b12      	ldr	r3, [pc, #72]	@ (800b218 <HAL_RCC_ClockConfig+0x1c4>)
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	00db      	lsls	r3, r3, #3
 800b1dc:	490e      	ldr	r1, [pc, #56]	@ (800b218 <HAL_RCC_ClockConfig+0x1c4>)
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b1e2:	f000 f821 	bl	800b228 <HAL_RCC_GetSysClockFreq>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	4b0b      	ldr	r3, [pc, #44]	@ (800b218 <HAL_RCC_ClockConfig+0x1c4>)
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	091b      	lsrs	r3, r3, #4
 800b1ee:	f003 030f 	and.w	r3, r3, #15
 800b1f2:	490a      	ldr	r1, [pc, #40]	@ (800b21c <HAL_RCC_ClockConfig+0x1c8>)
 800b1f4:	5ccb      	ldrb	r3, [r1, r3]
 800b1f6:	fa22 f303 	lsr.w	r3, r2, r3
 800b1fa:	4a09      	ldr	r2, [pc, #36]	@ (800b220 <HAL_RCC_ClockConfig+0x1cc>)
 800b1fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b1fe:	4b09      	ldr	r3, [pc, #36]	@ (800b224 <HAL_RCC_ClockConfig+0x1d0>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4618      	mov	r0, r3
 800b204:	f7fd fd60 	bl	8008cc8 <HAL_InitTick>

  return HAL_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	40022000 	.word	0x40022000
 800b218:	40021000 	.word	0x40021000
 800b21c:	0800bf0c 	.word	0x0800bf0c
 800b220:	20000cd8 	.word	0x20000cd8
 800b224:	20000cdc 	.word	0x20000cdc

0800b228 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b228:	b480      	push	{r7}
 800b22a:	b087      	sub	sp, #28
 800b22c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b22e:	2300      	movs	r3, #0
 800b230:	60fb      	str	r3, [r7, #12]
 800b232:	2300      	movs	r3, #0
 800b234:	60bb      	str	r3, [r7, #8]
 800b236:	2300      	movs	r3, #0
 800b238:	617b      	str	r3, [r7, #20]
 800b23a:	2300      	movs	r3, #0
 800b23c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b23e:	2300      	movs	r3, #0
 800b240:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b242:	4b1e      	ldr	r3, [pc, #120]	@ (800b2bc <HAL_RCC_GetSysClockFreq+0x94>)
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f003 030c 	and.w	r3, r3, #12
 800b24e:	2b04      	cmp	r3, #4
 800b250:	d002      	beq.n	800b258 <HAL_RCC_GetSysClockFreq+0x30>
 800b252:	2b08      	cmp	r3, #8
 800b254:	d003      	beq.n	800b25e <HAL_RCC_GetSysClockFreq+0x36>
 800b256:	e027      	b.n	800b2a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b258:	4b19      	ldr	r3, [pc, #100]	@ (800b2c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800b25a:	613b      	str	r3, [r7, #16]
      break;
 800b25c:	e027      	b.n	800b2ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	0c9b      	lsrs	r3, r3, #18
 800b262:	f003 030f 	and.w	r3, r3, #15
 800b266:	4a17      	ldr	r2, [pc, #92]	@ (800b2c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b268:	5cd3      	ldrb	r3, [r2, r3]
 800b26a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b272:	2b00      	cmp	r3, #0
 800b274:	d010      	beq.n	800b298 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b276:	4b11      	ldr	r3, [pc, #68]	@ (800b2bc <HAL_RCC_GetSysClockFreq+0x94>)
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	0c5b      	lsrs	r3, r3, #17
 800b27c:	f003 0301 	and.w	r3, r3, #1
 800b280:	4a11      	ldr	r2, [pc, #68]	@ (800b2c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b282:	5cd3      	ldrb	r3, [r2, r3]
 800b284:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a0d      	ldr	r2, [pc, #52]	@ (800b2c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800b28a:	fb03 f202 	mul.w	r2, r3, r2
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	fbb2 f3f3 	udiv	r3, r2, r3
 800b294:	617b      	str	r3, [r7, #20]
 800b296:	e004      	b.n	800b2a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4a0c      	ldr	r2, [pc, #48]	@ (800b2cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800b29c:	fb02 f303 	mul.w	r3, r2, r3
 800b2a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	613b      	str	r3, [r7, #16]
      break;
 800b2a6:	e002      	b.n	800b2ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b2a8:	4b05      	ldr	r3, [pc, #20]	@ (800b2c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800b2aa:	613b      	str	r3, [r7, #16]
      break;
 800b2ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b2ae:	693b      	ldr	r3, [r7, #16]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	371c      	adds	r7, #28
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bc80      	pop	{r7}
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	40021000 	.word	0x40021000
 800b2c0:	007a1200 	.word	0x007a1200
 800b2c4:	0800bf24 	.word	0x0800bf24
 800b2c8:	0800bf34 	.word	0x0800bf34
 800b2cc:	003d0900 	.word	0x003d0900

0800b2d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b2d4:	4b02      	ldr	r3, [pc, #8]	@ (800b2e0 <HAL_RCC_GetHCLKFreq+0x10>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bc80      	pop	{r7}
 800b2de:	4770      	bx	lr
 800b2e0:	20000cd8 	.word	0x20000cd8

0800b2e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b2e8:	f7ff fff2 	bl	800b2d0 <HAL_RCC_GetHCLKFreq>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	4b05      	ldr	r3, [pc, #20]	@ (800b304 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	0a1b      	lsrs	r3, r3, #8
 800b2f4:	f003 0307 	and.w	r3, r3, #7
 800b2f8:	4903      	ldr	r1, [pc, #12]	@ (800b308 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b2fa:	5ccb      	ldrb	r3, [r1, r3]
 800b2fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b300:	4618      	mov	r0, r3
 800b302:	bd80      	pop	{r7, pc}
 800b304:	40021000 	.word	0x40021000
 800b308:	0800bf1c 	.word	0x0800bf1c

0800b30c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b310:	f7ff ffde 	bl	800b2d0 <HAL_RCC_GetHCLKFreq>
 800b314:	4602      	mov	r2, r0
 800b316:	4b05      	ldr	r3, [pc, #20]	@ (800b32c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	0adb      	lsrs	r3, r3, #11
 800b31c:	f003 0307 	and.w	r3, r3, #7
 800b320:	4903      	ldr	r1, [pc, #12]	@ (800b330 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b322:	5ccb      	ldrb	r3, [r1, r3]
 800b324:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b328:	4618      	mov	r0, r3
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	40021000 	.word	0x40021000
 800b330:	0800bf1c 	.word	0x0800bf1c

0800b334 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b33c:	4b0a      	ldr	r3, [pc, #40]	@ (800b368 <RCC_Delay+0x34>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a0a      	ldr	r2, [pc, #40]	@ (800b36c <RCC_Delay+0x38>)
 800b342:	fba2 2303 	umull	r2, r3, r2, r3
 800b346:	0a5b      	lsrs	r3, r3, #9
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	fb02 f303 	mul.w	r3, r2, r3
 800b34e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b350:	bf00      	nop
  }
  while (Delay --);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	1e5a      	subs	r2, r3, #1
 800b356:	60fa      	str	r2, [r7, #12]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1f9      	bne.n	800b350 <RCC_Delay+0x1c>
}
 800b35c:	bf00      	nop
 800b35e:	bf00      	nop
 800b360:	3714      	adds	r7, #20
 800b362:	46bd      	mov	sp, r7
 800b364:	bc80      	pop	{r7}
 800b366:	4770      	bx	lr
 800b368:	20000cd8 	.word	0x20000cd8
 800b36c:	10624dd3 	.word	0x10624dd3

0800b370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d101      	bne.n	800b382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	e041      	b.n	800b406 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d106      	bne.n	800b39c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f7fd fbac 	bl	8008af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2202      	movs	r2, #2
 800b3a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	3304      	adds	r3, #4
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	4610      	mov	r0, r2
 800b3b0:	f000 fa82 	bl	800b8b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3708      	adds	r7, #8
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
	...

0800b410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b410:	b480      	push	{r7}
 800b412:	b085      	sub	sp, #20
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	2b01      	cmp	r3, #1
 800b422:	d001      	beq.n	800b428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b424:	2301      	movs	r3, #1
 800b426:	e044      	b.n	800b4b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2202      	movs	r2, #2
 800b42c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	68da      	ldr	r2, [r3, #12]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f042 0201 	orr.w	r2, r2, #1
 800b43e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a1d      	ldr	r2, [pc, #116]	@ (800b4bc <HAL_TIM_Base_Start_IT+0xac>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d018      	beq.n	800b47c <HAL_TIM_Base_Start_IT+0x6c>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a1c      	ldr	r2, [pc, #112]	@ (800b4c0 <HAL_TIM_Base_Start_IT+0xb0>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d013      	beq.n	800b47c <HAL_TIM_Base_Start_IT+0x6c>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b45c:	d00e      	beq.n	800b47c <HAL_TIM_Base_Start_IT+0x6c>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a18      	ldr	r2, [pc, #96]	@ (800b4c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d009      	beq.n	800b47c <HAL_TIM_Base_Start_IT+0x6c>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a16      	ldr	r2, [pc, #88]	@ (800b4c8 <HAL_TIM_Base_Start_IT+0xb8>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d004      	beq.n	800b47c <HAL_TIM_Base_Start_IT+0x6c>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a15      	ldr	r2, [pc, #84]	@ (800b4cc <HAL_TIM_Base_Start_IT+0xbc>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d111      	bne.n	800b4a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	f003 0307 	and.w	r3, r3, #7
 800b486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2b06      	cmp	r3, #6
 800b48c:	d010      	beq.n	800b4b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f042 0201 	orr.w	r2, r2, #1
 800b49c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b49e:	e007      	b.n	800b4b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f042 0201 	orr.w	r2, r2, #1
 800b4ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3714      	adds	r7, #20
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bc80      	pop	{r7}
 800b4ba:	4770      	bx	lr
 800b4bc:	40012c00 	.word	0x40012c00
 800b4c0:	40013400 	.word	0x40013400
 800b4c4:	40000400 	.word	0x40000400
 800b4c8:	40000800 	.word	0x40000800
 800b4cc:	40000c00 	.word	0x40000c00

0800b4d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	691b      	ldr	r3, [r3, #16]
 800b4de:	f003 0302 	and.w	r3, r3, #2
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	d122      	bne.n	800b52c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	f003 0302 	and.w	r3, r3, #2
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	d11b      	bne.n	800b52c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f06f 0202 	mvn.w	r2, #2
 800b4fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2201      	movs	r2, #1
 800b502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	699b      	ldr	r3, [r3, #24]
 800b50a:	f003 0303 	and.w	r3, r3, #3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d003      	beq.n	800b51a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f9b4 	bl	800b880 <HAL_TIM_IC_CaptureCallback>
 800b518:	e005      	b.n	800b526 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f9a7 	bl	800b86e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 f9b6 	bl	800b892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	691b      	ldr	r3, [r3, #16]
 800b532:	f003 0304 	and.w	r3, r3, #4
 800b536:	2b04      	cmp	r3, #4
 800b538:	d122      	bne.n	800b580 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	f003 0304 	and.w	r3, r3, #4
 800b544:	2b04      	cmp	r3, #4
 800b546:	d11b      	bne.n	800b580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f06f 0204 	mvn.w	r2, #4
 800b550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2202      	movs	r2, #2
 800b556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	699b      	ldr	r3, [r3, #24]
 800b55e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b562:	2b00      	cmp	r3, #0
 800b564:	d003      	beq.n	800b56e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f98a 	bl	800b880 <HAL_TIM_IC_CaptureCallback>
 800b56c:	e005      	b.n	800b57a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f97d 	bl	800b86e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 f98c 	bl	800b892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	691b      	ldr	r3, [r3, #16]
 800b586:	f003 0308 	and.w	r3, r3, #8
 800b58a:	2b08      	cmp	r3, #8
 800b58c:	d122      	bne.n	800b5d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	f003 0308 	and.w	r3, r3, #8
 800b598:	2b08      	cmp	r3, #8
 800b59a:	d11b      	bne.n	800b5d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f06f 0208 	mvn.w	r2, #8
 800b5a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2204      	movs	r2, #4
 800b5aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	69db      	ldr	r3, [r3, #28]
 800b5b2:	f003 0303 	and.w	r3, r3, #3
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d003      	beq.n	800b5c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 f960 	bl	800b880 <HAL_TIM_IC_CaptureCallback>
 800b5c0:	e005      	b.n	800b5ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f953 	bl	800b86e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 f962 	bl	800b892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	f003 0310 	and.w	r3, r3, #16
 800b5de:	2b10      	cmp	r3, #16
 800b5e0:	d122      	bne.n	800b628 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	f003 0310 	and.w	r3, r3, #16
 800b5ec:	2b10      	cmp	r3, #16
 800b5ee:	d11b      	bne.n	800b628 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f06f 0210 	mvn.w	r2, #16
 800b5f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2208      	movs	r2, #8
 800b5fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	69db      	ldr	r3, [r3, #28]
 800b606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d003      	beq.n	800b616 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f936 	bl	800b880 <HAL_TIM_IC_CaptureCallback>
 800b614:	e005      	b.n	800b622 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 f929 	bl	800b86e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 f938 	bl	800b892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	691b      	ldr	r3, [r3, #16]
 800b62e:	f003 0301 	and.w	r3, r3, #1
 800b632:	2b01      	cmp	r3, #1
 800b634:	d10e      	bne.n	800b654 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	f003 0301 	and.w	r3, r3, #1
 800b640:	2b01      	cmp	r3, #1
 800b642:	d107      	bne.n	800b654 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f06f 0201 	mvn.w	r2, #1
 800b64c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7fc feea 	bl	8008428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b65e:	2b80      	cmp	r3, #128	@ 0x80
 800b660:	d10e      	bne.n	800b680 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b66c:	2b80      	cmp	r3, #128	@ 0x80
 800b66e:	d107      	bne.n	800b680 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 faa1 	bl	800bbc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b68a:	2b40      	cmp	r3, #64	@ 0x40
 800b68c:	d10e      	bne.n	800b6ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b698:	2b40      	cmp	r3, #64	@ 0x40
 800b69a:	d107      	bne.n	800b6ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b6a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 f8fc 	bl	800b8a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	691b      	ldr	r3, [r3, #16]
 800b6b2:	f003 0320 	and.w	r3, r3, #32
 800b6b6:	2b20      	cmp	r3, #32
 800b6b8:	d10e      	bne.n	800b6d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	f003 0320 	and.w	r3, r3, #32
 800b6c4:	2b20      	cmp	r3, #32
 800b6c6:	d107      	bne.n	800b6d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f06f 0220 	mvn.w	r2, #32
 800b6d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 fa6c 	bl	800bbb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6d8:	bf00      	nop
 800b6da:	3708      	adds	r7, #8
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d101      	bne.n	800b6fc <HAL_TIM_ConfigClockSource+0x1c>
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	e0b4      	b.n	800b866 <HAL_TIM_ConfigClockSource+0x186>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2202      	movs	r2, #2
 800b708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b71a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b722:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b734:	d03e      	beq.n	800b7b4 <HAL_TIM_ConfigClockSource+0xd4>
 800b736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b73a:	f200 8087 	bhi.w	800b84c <HAL_TIM_ConfigClockSource+0x16c>
 800b73e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b742:	f000 8086 	beq.w	800b852 <HAL_TIM_ConfigClockSource+0x172>
 800b746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b74a:	d87f      	bhi.n	800b84c <HAL_TIM_ConfigClockSource+0x16c>
 800b74c:	2b70      	cmp	r3, #112	@ 0x70
 800b74e:	d01a      	beq.n	800b786 <HAL_TIM_ConfigClockSource+0xa6>
 800b750:	2b70      	cmp	r3, #112	@ 0x70
 800b752:	d87b      	bhi.n	800b84c <HAL_TIM_ConfigClockSource+0x16c>
 800b754:	2b60      	cmp	r3, #96	@ 0x60
 800b756:	d050      	beq.n	800b7fa <HAL_TIM_ConfigClockSource+0x11a>
 800b758:	2b60      	cmp	r3, #96	@ 0x60
 800b75a:	d877      	bhi.n	800b84c <HAL_TIM_ConfigClockSource+0x16c>
 800b75c:	2b50      	cmp	r3, #80	@ 0x50
 800b75e:	d03c      	beq.n	800b7da <HAL_TIM_ConfigClockSource+0xfa>
 800b760:	2b50      	cmp	r3, #80	@ 0x50
 800b762:	d873      	bhi.n	800b84c <HAL_TIM_ConfigClockSource+0x16c>
 800b764:	2b40      	cmp	r3, #64	@ 0x40
 800b766:	d058      	beq.n	800b81a <HAL_TIM_ConfigClockSource+0x13a>
 800b768:	2b40      	cmp	r3, #64	@ 0x40
 800b76a:	d86f      	bhi.n	800b84c <HAL_TIM_ConfigClockSource+0x16c>
 800b76c:	2b30      	cmp	r3, #48	@ 0x30
 800b76e:	d064      	beq.n	800b83a <HAL_TIM_ConfigClockSource+0x15a>
 800b770:	2b30      	cmp	r3, #48	@ 0x30
 800b772:	d86b      	bhi.n	800b84c <HAL_TIM_ConfigClockSource+0x16c>
 800b774:	2b20      	cmp	r3, #32
 800b776:	d060      	beq.n	800b83a <HAL_TIM_ConfigClockSource+0x15a>
 800b778:	2b20      	cmp	r3, #32
 800b77a:	d867      	bhi.n	800b84c <HAL_TIM_ConfigClockSource+0x16c>
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d05c      	beq.n	800b83a <HAL_TIM_ConfigClockSource+0x15a>
 800b780:	2b10      	cmp	r3, #16
 800b782:	d05a      	beq.n	800b83a <HAL_TIM_ConfigClockSource+0x15a>
 800b784:	e062      	b.n	800b84c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b796:	f000 f980 	bl	800ba9a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b7a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	609a      	str	r2, [r3, #8]
      break;
 800b7b2:	e04f      	b.n	800b854 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b7c4:	f000 f969 	bl	800ba9a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	689a      	ldr	r2, [r3, #8]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b7d6:	609a      	str	r2, [r3, #8]
      break;
 800b7d8:	e03c      	b.n	800b854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	f000 f8e0 	bl	800b9ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2150      	movs	r1, #80	@ 0x50
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f000 f937 	bl	800ba66 <TIM_ITRx_SetConfig>
      break;
 800b7f8:	e02c      	b.n	800b854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b806:	461a      	mov	r2, r3
 800b808:	f000 f8fe 	bl	800ba08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2160      	movs	r1, #96	@ 0x60
 800b812:	4618      	mov	r0, r3
 800b814:	f000 f927 	bl	800ba66 <TIM_ITRx_SetConfig>
      break;
 800b818:	e01c      	b.n	800b854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b826:	461a      	mov	r2, r3
 800b828:	f000 f8c0 	bl	800b9ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2140      	movs	r1, #64	@ 0x40
 800b832:	4618      	mov	r0, r3
 800b834:	f000 f917 	bl	800ba66 <TIM_ITRx_SetConfig>
      break;
 800b838:	e00c      	b.n	800b854 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4619      	mov	r1, r3
 800b844:	4610      	mov	r0, r2
 800b846:	f000 f90e 	bl	800ba66 <TIM_ITRx_SetConfig>
      break;
 800b84a:	e003      	b.n	800b854 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	73fb      	strb	r3, [r7, #15]
      break;
 800b850:	e000      	b.n	800b854 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b852:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b864:	7bfb      	ldrb	r3, [r7, #15]
}
 800b866:	4618      	mov	r0, r3
 800b868:	3710      	adds	r7, #16
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b86e:	b480      	push	{r7}
 800b870:	b083      	sub	sp, #12
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b876:	bf00      	nop
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bc80      	pop	{r7}
 800b87e:	4770      	bx	lr

0800b880 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b888:	bf00      	nop
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bc80      	pop	{r7}
 800b890:	4770      	bx	lr

0800b892 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b892:	b480      	push	{r7}
 800b894:	b083      	sub	sp, #12
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b89a:	bf00      	nop
 800b89c:	370c      	adds	r7, #12
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bc80      	pop	{r7}
 800b8a2:	4770      	bx	lr

0800b8a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b8ac:	bf00      	nop
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bc80      	pop	{r7}
 800b8b4:	4770      	bx	lr
	...

0800b8b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4a33      	ldr	r2, [pc, #204]	@ (800b998 <TIM_Base_SetConfig+0xe0>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d013      	beq.n	800b8f8 <TIM_Base_SetConfig+0x40>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a32      	ldr	r2, [pc, #200]	@ (800b99c <TIM_Base_SetConfig+0xe4>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d00f      	beq.n	800b8f8 <TIM_Base_SetConfig+0x40>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8de:	d00b      	beq.n	800b8f8 <TIM_Base_SetConfig+0x40>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a2f      	ldr	r2, [pc, #188]	@ (800b9a0 <TIM_Base_SetConfig+0xe8>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d007      	beq.n	800b8f8 <TIM_Base_SetConfig+0x40>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a2e      	ldr	r2, [pc, #184]	@ (800b9a4 <TIM_Base_SetConfig+0xec>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d003      	beq.n	800b8f8 <TIM_Base_SetConfig+0x40>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a2d      	ldr	r2, [pc, #180]	@ (800b9a8 <TIM_Base_SetConfig+0xf0>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d108      	bne.n	800b90a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	4313      	orrs	r3, r2
 800b908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	4a22      	ldr	r2, [pc, #136]	@ (800b998 <TIM_Base_SetConfig+0xe0>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d013      	beq.n	800b93a <TIM_Base_SetConfig+0x82>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4a21      	ldr	r2, [pc, #132]	@ (800b99c <TIM_Base_SetConfig+0xe4>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d00f      	beq.n	800b93a <TIM_Base_SetConfig+0x82>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b920:	d00b      	beq.n	800b93a <TIM_Base_SetConfig+0x82>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4a1e      	ldr	r2, [pc, #120]	@ (800b9a0 <TIM_Base_SetConfig+0xe8>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d007      	beq.n	800b93a <TIM_Base_SetConfig+0x82>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a1d      	ldr	r2, [pc, #116]	@ (800b9a4 <TIM_Base_SetConfig+0xec>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d003      	beq.n	800b93a <TIM_Base_SetConfig+0x82>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a1c      	ldr	r2, [pc, #112]	@ (800b9a8 <TIM_Base_SetConfig+0xf0>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d108      	bne.n	800b94c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	68fa      	ldr	r2, [r7, #12]
 800b948:	4313      	orrs	r3, r2
 800b94a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	4313      	orrs	r3, r2
 800b958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	689a      	ldr	r2, [r3, #8]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a09      	ldr	r2, [pc, #36]	@ (800b998 <TIM_Base_SetConfig+0xe0>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d003      	beq.n	800b980 <TIM_Base_SetConfig+0xc8>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4a08      	ldr	r2, [pc, #32]	@ (800b99c <TIM_Base_SetConfig+0xe4>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d103      	bne.n	800b988 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	691a      	ldr	r2, [r3, #16]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	615a      	str	r2, [r3, #20]
}
 800b98e:	bf00      	nop
 800b990:	3714      	adds	r7, #20
 800b992:	46bd      	mov	sp, r7
 800b994:	bc80      	pop	{r7}
 800b996:	4770      	bx	lr
 800b998:	40012c00 	.word	0x40012c00
 800b99c:	40013400 	.word	0x40013400
 800b9a0:	40000400 	.word	0x40000400
 800b9a4:	40000800 	.word	0x40000800
 800b9a8:	40000c00 	.word	0x40000c00

0800b9ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b087      	sub	sp, #28
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6a1b      	ldr	r3, [r3, #32]
 800b9bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6a1b      	ldr	r3, [r3, #32]
 800b9c2:	f023 0201 	bic.w	r2, r3, #1
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	699b      	ldr	r3, [r3, #24]
 800b9ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b9d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	011b      	lsls	r3, r3, #4
 800b9dc:	693a      	ldr	r2, [r7, #16]
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f023 030a 	bic.w	r3, r3, #10
 800b9e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	693a      	ldr	r2, [r7, #16]
 800b9f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	697a      	ldr	r2, [r7, #20]
 800b9fc:	621a      	str	r2, [r3, #32]
}
 800b9fe:	bf00      	nop
 800ba00:	371c      	adds	r7, #28
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bc80      	pop	{r7}
 800ba06:	4770      	bx	lr

0800ba08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b087      	sub	sp, #28
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6a1b      	ldr	r3, [r3, #32]
 800ba18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6a1b      	ldr	r3, [r3, #32]
 800ba1e:	f023 0210 	bic.w	r2, r3, #16
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	699b      	ldr	r3, [r3, #24]
 800ba2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ba32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	031b      	lsls	r3, r3, #12
 800ba38:	693a      	ldr	r2, [r7, #16]
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ba44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	011b      	lsls	r3, r3, #4
 800ba4a:	697a      	ldr	r2, [r7, #20]
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	693a      	ldr	r2, [r7, #16]
 800ba54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	697a      	ldr	r2, [r7, #20]
 800ba5a:	621a      	str	r2, [r3, #32]
}
 800ba5c:	bf00      	nop
 800ba5e:	371c      	adds	r7, #28
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bc80      	pop	{r7}
 800ba64:	4770      	bx	lr

0800ba66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba66:	b480      	push	{r7}
 800ba68:	b085      	sub	sp, #20
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba7e:	683a      	ldr	r2, [r7, #0]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	4313      	orrs	r3, r2
 800ba84:	f043 0307 	orr.w	r3, r3, #7
 800ba88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	609a      	str	r2, [r3, #8]
}
 800ba90:	bf00      	nop
 800ba92:	3714      	adds	r7, #20
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bc80      	pop	{r7}
 800ba98:	4770      	bx	lr

0800ba9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b087      	sub	sp, #28
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	60f8      	str	r0, [r7, #12]
 800baa2:	60b9      	str	r1, [r7, #8]
 800baa4:	607a      	str	r2, [r7, #4]
 800baa6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bab4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	021a      	lsls	r2, r3, #8
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	431a      	orrs	r2, r3
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	4313      	orrs	r3, r2
 800bac2:	697a      	ldr	r2, [r7, #20]
 800bac4:	4313      	orrs	r3, r2
 800bac6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	697a      	ldr	r2, [r7, #20]
 800bacc:	609a      	str	r2, [r3, #8]
}
 800bace:	bf00      	nop
 800bad0:	371c      	adds	r7, #28
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bc80      	pop	{r7}
 800bad6:	4770      	bx	lr

0800bad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d101      	bne.n	800baf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800baec:	2302      	movs	r3, #2
 800baee:	e050      	b.n	800bb92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2202      	movs	r2, #2
 800bafc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a1b      	ldr	r2, [pc, #108]	@ (800bb9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d018      	beq.n	800bb66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a19      	ldr	r2, [pc, #100]	@ (800bba0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d013      	beq.n	800bb66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb46:	d00e      	beq.n	800bb66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a15      	ldr	r2, [pc, #84]	@ (800bba4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d009      	beq.n	800bb66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a14      	ldr	r2, [pc, #80]	@ (800bba8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d004      	beq.n	800bb66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a12      	ldr	r2, [pc, #72]	@ (800bbac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d10c      	bne.n	800bb80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	68ba      	ldr	r2, [r7, #8]
 800bb74:	4313      	orrs	r3, r2
 800bb76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3714      	adds	r7, #20
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bc80      	pop	{r7}
 800bb9a:	4770      	bx	lr
 800bb9c:	40012c00 	.word	0x40012c00
 800bba0:	40013400 	.word	0x40013400
 800bba4:	40000400 	.word	0x40000400
 800bba8:	40000800 	.word	0x40000800
 800bbac:	40000c00 	.word	0x40000c00

0800bbb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bbb8:	bf00      	nop
 800bbba:	370c      	adds	r7, #12
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bc80      	pop	{r7}
 800bbc0:	4770      	bx	lr

0800bbc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bbc2:	b480      	push	{r7}
 800bbc4:	b083      	sub	sp, #12
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bbca:	bf00      	nop
 800bbcc:	370c      	adds	r7, #12
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bc80      	pop	{r7}
 800bbd2:	4770      	bx	lr

0800bbd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d101      	bne.n	800bbe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e042      	b.n	800bc6c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d106      	bne.n	800bc00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f7fc ffa0 	bl	8008b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2224      	movs	r2, #36	@ 0x24
 800bc04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	68da      	ldr	r2, [r3, #12]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bc16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 f82b 	bl	800bc74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	691a      	ldr	r2, [r3, #16]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bc2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	695a      	ldr	r2, [r3, #20]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bc3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68da      	ldr	r2, [r3, #12]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bc4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2220      	movs	r2, #32
 800bc58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2220      	movs	r2, #32
 800bc60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3708      	adds	r7, #8
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	691b      	ldr	r3, [r3, #16]
 800bc82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	68da      	ldr	r2, [r3, #12]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	430a      	orrs	r2, r1
 800bc90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	689a      	ldr	r2, [r3, #8]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	691b      	ldr	r3, [r3, #16]
 800bc9a:	431a      	orrs	r2, r3
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	695b      	ldr	r3, [r3, #20]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800bcae:	f023 030c 	bic.w	r3, r3, #12
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	6812      	ldr	r2, [r2, #0]
 800bcb6:	68b9      	ldr	r1, [r7, #8]
 800bcb8:	430b      	orrs	r3, r1
 800bcba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	695b      	ldr	r3, [r3, #20]
 800bcc2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	699a      	ldr	r2, [r3, #24]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	430a      	orrs	r2, r1
 800bcd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a2c      	ldr	r2, [pc, #176]	@ (800bd88 <UART_SetConfig+0x114>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d103      	bne.n	800bce4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bcdc:	f7ff fb16 	bl	800b30c <HAL_RCC_GetPCLK2Freq>
 800bce0:	60f8      	str	r0, [r7, #12]
 800bce2:	e002      	b.n	800bcea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bce4:	f7ff fafe 	bl	800b2e4 <HAL_RCC_GetPCLK1Freq>
 800bce8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	4613      	mov	r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	4413      	add	r3, r2
 800bcf2:	009a      	lsls	r2, r3, #2
 800bcf4:	441a      	add	r2, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd00:	4a22      	ldr	r2, [pc, #136]	@ (800bd8c <UART_SetConfig+0x118>)
 800bd02:	fba2 2303 	umull	r2, r3, r2, r3
 800bd06:	095b      	lsrs	r3, r3, #5
 800bd08:	0119      	lsls	r1, r3, #4
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	4413      	add	r3, r2
 800bd12:	009a      	lsls	r2, r3, #2
 800bd14:	441a      	add	r2, r3
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd20:	4b1a      	ldr	r3, [pc, #104]	@ (800bd8c <UART_SetConfig+0x118>)
 800bd22:	fba3 0302 	umull	r0, r3, r3, r2
 800bd26:	095b      	lsrs	r3, r3, #5
 800bd28:	2064      	movs	r0, #100	@ 0x64
 800bd2a:	fb00 f303 	mul.w	r3, r0, r3
 800bd2e:	1ad3      	subs	r3, r2, r3
 800bd30:	011b      	lsls	r3, r3, #4
 800bd32:	3332      	adds	r3, #50	@ 0x32
 800bd34:	4a15      	ldr	r2, [pc, #84]	@ (800bd8c <UART_SetConfig+0x118>)
 800bd36:	fba2 2303 	umull	r2, r3, r2, r3
 800bd3a:	095b      	lsrs	r3, r3, #5
 800bd3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bd40:	4419      	add	r1, r3
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	4613      	mov	r3, r2
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	4413      	add	r3, r2
 800bd4a:	009a      	lsls	r2, r3, #2
 800bd4c:	441a      	add	r2, r3
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd58:	4b0c      	ldr	r3, [pc, #48]	@ (800bd8c <UART_SetConfig+0x118>)
 800bd5a:	fba3 0302 	umull	r0, r3, r3, r2
 800bd5e:	095b      	lsrs	r3, r3, #5
 800bd60:	2064      	movs	r0, #100	@ 0x64
 800bd62:	fb00 f303 	mul.w	r3, r0, r3
 800bd66:	1ad3      	subs	r3, r2, r3
 800bd68:	011b      	lsls	r3, r3, #4
 800bd6a:	3332      	adds	r3, #50	@ 0x32
 800bd6c:	4a07      	ldr	r2, [pc, #28]	@ (800bd8c <UART_SetConfig+0x118>)
 800bd6e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd72:	095b      	lsrs	r3, r3, #5
 800bd74:	f003 020f 	and.w	r2, r3, #15
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	440a      	add	r2, r1
 800bd7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bd80:	bf00      	nop
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	40013800 	.word	0x40013800
 800bd8c:	51eb851f 	.word	0x51eb851f

0800bd90 <__itoa>:
 800bd90:	1e93      	subs	r3, r2, #2
 800bd92:	2b22      	cmp	r3, #34	@ 0x22
 800bd94:	b510      	push	{r4, lr}
 800bd96:	460c      	mov	r4, r1
 800bd98:	d904      	bls.n	800bda4 <__itoa+0x14>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	461c      	mov	r4, r3
 800bd9e:	700b      	strb	r3, [r1, #0]
 800bda0:	4620      	mov	r0, r4
 800bda2:	bd10      	pop	{r4, pc}
 800bda4:	2a0a      	cmp	r2, #10
 800bda6:	d109      	bne.n	800bdbc <__itoa+0x2c>
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	da07      	bge.n	800bdbc <__itoa+0x2c>
 800bdac:	232d      	movs	r3, #45	@ 0x2d
 800bdae:	700b      	strb	r3, [r1, #0]
 800bdb0:	2101      	movs	r1, #1
 800bdb2:	4240      	negs	r0, r0
 800bdb4:	4421      	add	r1, r4
 800bdb6:	f000 f805 	bl	800bdc4 <__utoa>
 800bdba:	e7f1      	b.n	800bda0 <__itoa+0x10>
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	e7f9      	b.n	800bdb4 <__itoa+0x24>

0800bdc0 <itoa>:
 800bdc0:	f7ff bfe6 	b.w	800bd90 <__itoa>

0800bdc4 <__utoa>:
 800bdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdc6:	b08b      	sub	sp, #44	@ 0x2c
 800bdc8:	4605      	mov	r5, r0
 800bdca:	460b      	mov	r3, r1
 800bdcc:	466e      	mov	r6, sp
 800bdce:	4c1d      	ldr	r4, [pc, #116]	@ (800be44 <__utoa+0x80>)
 800bdd0:	f104 0c20 	add.w	ip, r4, #32
 800bdd4:	4637      	mov	r7, r6
 800bdd6:	6820      	ldr	r0, [r4, #0]
 800bdd8:	6861      	ldr	r1, [r4, #4]
 800bdda:	3408      	adds	r4, #8
 800bddc:	c703      	stmia	r7!, {r0, r1}
 800bdde:	4564      	cmp	r4, ip
 800bde0:	463e      	mov	r6, r7
 800bde2:	d1f7      	bne.n	800bdd4 <__utoa+0x10>
 800bde4:	7921      	ldrb	r1, [r4, #4]
 800bde6:	6820      	ldr	r0, [r4, #0]
 800bde8:	7139      	strb	r1, [r7, #4]
 800bdea:	1e91      	subs	r1, r2, #2
 800bdec:	2922      	cmp	r1, #34	@ 0x22
 800bdee:	6038      	str	r0, [r7, #0]
 800bdf0:	f04f 0100 	mov.w	r1, #0
 800bdf4:	d904      	bls.n	800be00 <__utoa+0x3c>
 800bdf6:	7019      	strb	r1, [r3, #0]
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	b00b      	add	sp, #44	@ 0x2c
 800bdfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be00:	1e58      	subs	r0, r3, #1
 800be02:	4684      	mov	ip, r0
 800be04:	fbb5 f7f2 	udiv	r7, r5, r2
 800be08:	fb02 5617 	mls	r6, r2, r7, r5
 800be0c:	3628      	adds	r6, #40	@ 0x28
 800be0e:	446e      	add	r6, sp
 800be10:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800be14:	460c      	mov	r4, r1
 800be16:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800be1a:	462e      	mov	r6, r5
 800be1c:	42b2      	cmp	r2, r6
 800be1e:	463d      	mov	r5, r7
 800be20:	f101 0101 	add.w	r1, r1, #1
 800be24:	d9ee      	bls.n	800be04 <__utoa+0x40>
 800be26:	2200      	movs	r2, #0
 800be28:	545a      	strb	r2, [r3, r1]
 800be2a:	1919      	adds	r1, r3, r4
 800be2c:	1aa5      	subs	r5, r4, r2
 800be2e:	42aa      	cmp	r2, r5
 800be30:	dae3      	bge.n	800bdfa <__utoa+0x36>
 800be32:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800be36:	780e      	ldrb	r6, [r1, #0]
 800be38:	3201      	adds	r2, #1
 800be3a:	7006      	strb	r6, [r0, #0]
 800be3c:	f801 5901 	strb.w	r5, [r1], #-1
 800be40:	e7f4      	b.n	800be2c <__utoa+0x68>
 800be42:	bf00      	nop
 800be44:	0800bf36 	.word	0x0800bf36

0800be48 <memset>:
 800be48:	4603      	mov	r3, r0
 800be4a:	4402      	add	r2, r0
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d100      	bne.n	800be52 <memset+0xa>
 800be50:	4770      	bx	lr
 800be52:	f803 1b01 	strb.w	r1, [r3], #1
 800be56:	e7f9      	b.n	800be4c <memset+0x4>

0800be58 <__libc_init_array>:
 800be58:	b570      	push	{r4, r5, r6, lr}
 800be5a:	2600      	movs	r6, #0
 800be5c:	4d0c      	ldr	r5, [pc, #48]	@ (800be90 <__libc_init_array+0x38>)
 800be5e:	4c0d      	ldr	r4, [pc, #52]	@ (800be94 <__libc_init_array+0x3c>)
 800be60:	1b64      	subs	r4, r4, r5
 800be62:	10a4      	asrs	r4, r4, #2
 800be64:	42a6      	cmp	r6, r4
 800be66:	d109      	bne.n	800be7c <__libc_init_array+0x24>
 800be68:	f000 f81a 	bl	800bea0 <_init>
 800be6c:	2600      	movs	r6, #0
 800be6e:	4d0a      	ldr	r5, [pc, #40]	@ (800be98 <__libc_init_array+0x40>)
 800be70:	4c0a      	ldr	r4, [pc, #40]	@ (800be9c <__libc_init_array+0x44>)
 800be72:	1b64      	subs	r4, r4, r5
 800be74:	10a4      	asrs	r4, r4, #2
 800be76:	42a6      	cmp	r6, r4
 800be78:	d105      	bne.n	800be86 <__libc_init_array+0x2e>
 800be7a:	bd70      	pop	{r4, r5, r6, pc}
 800be7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800be80:	4798      	blx	r3
 800be82:	3601      	adds	r6, #1
 800be84:	e7ee      	b.n	800be64 <__libc_init_array+0xc>
 800be86:	f855 3b04 	ldr.w	r3, [r5], #4
 800be8a:	4798      	blx	r3
 800be8c:	3601      	adds	r6, #1
 800be8e:	e7f2      	b.n	800be76 <__libc_init_array+0x1e>
 800be90:	0800bf64 	.word	0x0800bf64
 800be94:	0800bf64 	.word	0x0800bf64
 800be98:	0800bf64 	.word	0x0800bf64
 800be9c:	0800bf68 	.word	0x0800bf68

0800bea0 <_init>:
 800bea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea2:	bf00      	nop
 800bea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bea6:	bc08      	pop	{r3}
 800bea8:	469e      	mov	lr, r3
 800beaa:	4770      	bx	lr

0800beac <_fini>:
 800beac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beae:	bf00      	nop
 800beb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beb2:	bc08      	pop	{r3}
 800beb4:	469e      	mov	lr, r3
 800beb6:	4770      	bx	lr
