
ESP_Version_3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8bc  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c98  0800caac  0800caac  0000daac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d744  0800d744  0000f9a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d744  0800d744  0000e744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d74c  0800d74c  0000f9a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d74c  0800d74c  0000e74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d750  0800d750  0000e750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009a4  20000000  0800d754  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001424  200009a4  0800e0f8  0000f9a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dc8  0800e0f8  0000fdc8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f9a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019474  00000000  00000000  0000f9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000325b  00000000  00000000  00028e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  0002c0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e0  00000000  00000000  0002d690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b880  00000000  00000000  0002eb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b40e  00000000  00000000  0004a3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a78ea  00000000  00000000  000657fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d0e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060bc  00000000  00000000  0010d12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200009a4 	.word	0x200009a4
 800020c:	00000000 	.word	0x00000000
 8000210:	0800ca94 	.word	0x0800ca94

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200009a8 	.word	0x200009a8
 800022c:	0800ca94 	.word	0x0800ca94

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4a06      	ldr	r2, [pc, #24]	@ (8000268 <vApplicationGetIdleTaskMemory+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a05      	ldr	r2, [pc, #20]	@ (800026c <vApplicationGetIdleTaskMemory+0x2c>)
 8000256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2280      	movs	r2, #128	@ 0x80
 800025c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	200009c0 	.word	0x200009c0
 800026c:	20000a14 	.word	0x20000a14

08000270 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af02      	add	r7, sp, #8
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f023 030f 	bic.w	r3, r3, #15
 8000280:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	011b      	lsls	r3, r3, #4
 8000286:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000288:	7b7b      	ldrb	r3, [r7, #13]
 800028a:	f043 030c 	orr.w	r3, r3, #12
 800028e:	b2db      	uxtb	r3, r3
 8000290:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000292:	7b7b      	ldrb	r3, [r7, #13]
 8000294:	f043 0308 	orr.w	r3, r3, #8
 8000298:	b2db      	uxtb	r3, r3
 800029a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800029c:	7b3b      	ldrb	r3, [r7, #12]
 800029e:	f043 030c 	orr.w	r3, r3, #12
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002a6:	7b3b      	ldrb	r3, [r7, #12]
 80002a8:	f043 0308 	orr.w	r3, r3, #8
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80002b0:	bf00      	nop
 80002b2:	4825      	ldr	r0, [pc, #148]	@ (8000348 <lcd_send_cmd+0xd8>)
 80002b4:	f008 ff07 	bl	80090c6 <HAL_I2C_GetError>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b04      	cmp	r3, #4
 80002bc:	d0f9      	beq.n	80002b2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80002be:	bf00      	nop
 80002c0:	4821      	ldr	r0, [pc, #132]	@ (8000348 <lcd_send_cmd+0xd8>)
 80002c2:	f008 fef3 	bl	80090ac <HAL_I2C_GetState>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b20      	cmp	r3, #32
 80002ca:	d1f9      	bne.n	80002c0 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80002cc:	4b1f      	ldr	r3, [pc, #124]	@ (800034c <lcd_send_cmd+0xdc>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d116      	bne.n	8000302 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80002d4:	2300      	movs	r3, #0
 80002d6:	73fb      	strb	r3, [r7, #15]
 80002d8:	e00f      	b.n	80002fa <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80002da:	7bfb      	ldrb	r3, [r7, #15]
 80002dc:	3310      	adds	r3, #16
 80002de:	443b      	add	r3, r7
 80002e0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80002e4:	7bfb      	ldrb	r3, [r7, #15]
 80002e6:	f022 0208 	bic.w	r2, r2, #8
 80002ea:	b2d2      	uxtb	r2, r2
 80002ec:	3310      	adds	r3, #16
 80002ee:	443b      	add	r3, r7
 80002f0:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002f4:	7bfb      	ldrb	r3, [r7, #15]
 80002f6:	3301      	adds	r3, #1
 80002f8:	73fb      	strb	r3, [r7, #15]
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	2b03      	cmp	r3, #3
 80002fe:	d9ec      	bls.n	80002da <lcd_send_cmd+0x6a>
 8000300:	e015      	b.n	800032e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8000302:	2300      	movs	r3, #0
 8000304:	73bb      	strb	r3, [r7, #14]
 8000306:	e00f      	b.n	8000328 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000308:	7bbb      	ldrb	r3, [r7, #14]
 800030a:	3310      	adds	r3, #16
 800030c:	443b      	add	r3, r7
 800030e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000312:	7bbb      	ldrb	r3, [r7, #14]
 8000314:	f042 0208 	orr.w	r2, r2, #8
 8000318:	b2d2      	uxtb	r2, r2
 800031a:	3310      	adds	r3, #16
 800031c:	443b      	add	r3, r7
 800031e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000322:	7bbb      	ldrb	r3, [r7, #14]
 8000324:	3301      	adds	r3, #1
 8000326:	73bb      	strb	r3, [r7, #14]
 8000328:	7bbb      	ldrb	r3, [r7, #14]
 800032a:	2b03      	cmp	r3, #3
 800032c:	d9ec      	bls.n	8000308 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800032e:	f107 0208 	add.w	r2, r7, #8
 8000332:	2364      	movs	r3, #100	@ 0x64
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	2304      	movs	r3, #4
 8000338:	214e      	movs	r1, #78	@ 0x4e
 800033a:	4803      	ldr	r0, [pc, #12]	@ (8000348 <lcd_send_cmd+0xd8>)
 800033c:	f008 fa56 	bl	80087ec <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000340:	bf00      	nop
 8000342:	3710      	adds	r7, #16
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000e44 	.word	0x20000e44
 800034c:	20000c14 	.word	0x20000c14

08000350 <lcd_send_data>:

void lcd_send_data (char data) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af02      	add	r7, sp, #8
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	f023 030f 	bic.w	r3, r3, #15
 8000360:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	011b      	lsls	r3, r3, #4
 8000366:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000368:	7b7b      	ldrb	r3, [r7, #13]
 800036a:	f043 030d 	orr.w	r3, r3, #13
 800036e:	b2db      	uxtb	r3, r3
 8000370:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000372:	7b7b      	ldrb	r3, [r7, #13]
 8000374:	f043 0309 	orr.w	r3, r3, #9
 8000378:	b2db      	uxtb	r3, r3
 800037a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800037c:	7b3b      	ldrb	r3, [r7, #12]
 800037e:	f043 030d 	orr.w	r3, r3, #13
 8000382:	b2db      	uxtb	r3, r3
 8000384:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000386:	7b3b      	ldrb	r3, [r7, #12]
 8000388:	f043 0309 	orr.w	r3, r3, #9
 800038c:	b2db      	uxtb	r3, r3
 800038e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000390:	bf00      	nop
 8000392:	4825      	ldr	r0, [pc, #148]	@ (8000428 <lcd_send_data+0xd8>)
 8000394:	f008 fe97 	bl	80090c6 <HAL_I2C_GetError>
 8000398:	4603      	mov	r3, r0
 800039a:	2b04      	cmp	r3, #4
 800039c:	d0f9      	beq.n	8000392 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800039e:	bf00      	nop
 80003a0:	4821      	ldr	r0, [pc, #132]	@ (8000428 <lcd_send_data+0xd8>)
 80003a2:	f008 fe83 	bl	80090ac <HAL_I2C_GetState>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b20      	cmp	r3, #32
 80003aa:	d1f9      	bne.n	80003a0 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80003ac:	4b1f      	ldr	r3, [pc, #124]	@ (800042c <lcd_send_data+0xdc>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d116      	bne.n	80003e2 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80003b4:	2300      	movs	r3, #0
 80003b6:	73fb      	strb	r3, [r7, #15]
 80003b8:	e00f      	b.n	80003da <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	3310      	adds	r3, #16
 80003be:	443b      	add	r3, r7
 80003c0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003c4:	7bfb      	ldrb	r3, [r7, #15]
 80003c6:	f022 0208 	bic.w	r2, r2, #8
 80003ca:	b2d2      	uxtb	r2, r2
 80003cc:	3310      	adds	r3, #16
 80003ce:	443b      	add	r3, r7
 80003d0:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003d4:	7bfb      	ldrb	r3, [r7, #15]
 80003d6:	3301      	adds	r3, #1
 80003d8:	73fb      	strb	r3, [r7, #15]
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d9ec      	bls.n	80003ba <lcd_send_data+0x6a>
 80003e0:	e015      	b.n	800040e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003e2:	2300      	movs	r3, #0
 80003e4:	73bb      	strb	r3, [r7, #14]
 80003e6:	e00f      	b.n	8000408 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80003e8:	7bbb      	ldrb	r3, [r7, #14]
 80003ea:	3310      	adds	r3, #16
 80003ec:	443b      	add	r3, r7
 80003ee:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003f2:	7bbb      	ldrb	r3, [r7, #14]
 80003f4:	f042 0208 	orr.w	r2, r2, #8
 80003f8:	b2d2      	uxtb	r2, r2
 80003fa:	3310      	adds	r3, #16
 80003fc:	443b      	add	r3, r7
 80003fe:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000402:	7bbb      	ldrb	r3, [r7, #14]
 8000404:	3301      	adds	r3, #1
 8000406:	73bb      	strb	r3, [r7, #14]
 8000408:	7bbb      	ldrb	r3, [r7, #14]
 800040a:	2b03      	cmp	r3, #3
 800040c:	d9ec      	bls.n	80003e8 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800040e:	f107 0208 	add.w	r2, r7, #8
 8000412:	2364      	movs	r3, #100	@ 0x64
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	2304      	movs	r3, #4
 8000418:	214e      	movs	r1, #78	@ 0x4e
 800041a:	4803      	ldr	r0, [pc, #12]	@ (8000428 <lcd_send_data+0xd8>)
 800041c:	f008 f9e6 	bl	80087ec <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000420:	bf00      	nop
 8000422:	3710      	adds	r7, #16
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000e44 	.word	0x20000e44
 800042c:	20000c14 	.word	0x20000c14

08000430 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000438:	e006      	b.n	8000448 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	1c5a      	adds	r2, r3, #1
 800043e:	607a      	str	r2, [r7, #4]
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff ff84 	bl	8000350 <lcd_send_data>
	while (*str) {
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d1f4      	bne.n	800043a <lcd_send_string+0xa>
	}
}
 8000450:	bf00      	nop
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <lcd_init>:

void lcd_init (void) {
 800045a:	b580      	push	{r7, lr}
 800045c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 800045e:	2002      	movs	r0, #2
 8000460:	f7ff ff06 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8000464:	2028      	movs	r0, #40	@ 0x28
 8000466:	f7ff ff03 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 800046a:	200c      	movs	r0, #12
 800046c:	f7ff ff00 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000470:	2080      	movs	r0, #128	@ 0x80
 8000472:	f7ff fefd 	bl	8000270 <lcd_send_cmd>
	lcd_backlight(1);
 8000476:	2001      	movs	r0, #1
 8000478:	f000 f840 	bl	80004fc <lcd_backlight>
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}

08000480 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	460a      	mov	r2, r1
 800048a:	71fb      	strb	r3, [r7, #7]
 800048c:	4613      	mov	r3, r2
 800048e:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d106      	bne.n	80004a4 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000496:	79bb      	ldrb	r3, [r7, #6]
 8000498:	337f      	adds	r3, #127	@ 0x7f
 800049a:	b2db      	uxtb	r3, r3
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff fee7 	bl	8000270 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80004a2:	e008      	b.n	80004b6 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d105      	bne.n	80004b6 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80004aa:	79bb      	ldrb	r3, [r7, #6]
 80004ac:	3b41      	subs	r3, #65	@ 0x41
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff fedd 	bl	8000270 <lcd_send_cmd>
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	4603      	mov	r3, r0
 80004c6:	603a      	str	r2, [r7, #0]
 80004c8:	71fb      	strb	r3, [r7, #7]
 80004ca:	460b      	mov	r3, r1
 80004cc:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80004ce:	79ba      	ldrb	r2, [r7, #6]
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	4611      	mov	r1, r2
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff ffd3 	bl	8000480 <lcd_gotoxy>
	lcd_send_string(str);
 80004da:	6838      	ldr	r0, [r7, #0]
 80004dc:	f7ff ffa8 	bl	8000430 <lcd_send_string>
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <lcd_clear>:

void lcd_clear(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f7ff febf 	bl	8000270 <lcd_send_cmd>
    HAL_Delay(2);
 80004f2:	2002      	movs	r0, #2
 80004f4:	f007 fb30 	bl	8007b58 <HAL_Delay>

}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8000506:	4a05      	ldr	r2, [pc, #20]	@ (800051c <lcd_backlight+0x20>)
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800050c:	2000      	movs	r0, #0
 800050e:	f7ff feaf 	bl	8000270 <lcd_send_cmd>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000c14 	.word	0x20000c14

08000520 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000524:	f3bf 8f4f 	dsb	sy
}
 8000528:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <__NVIC_SystemReset+0x24>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000532:	4904      	ldr	r1, [pc, #16]	@ (8000544 <__NVIC_SystemReset+0x24>)
 8000534:	4b04      	ldr	r3, [pc, #16]	@ (8000548 <__NVIC_SystemReset+0x28>)
 8000536:	4313      	orrs	r3, r2
 8000538:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800053a:	f3bf 8f4f 	dsb	sy
}
 800053e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <__NVIC_SystemReset+0x20>
 8000544:	e000ed00 	.word	0xe000ed00
 8000548:	05fa0004 	.word	0x05fa0004

0800054c <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f7ff fe6b 	bl	8000230 <strlen>
 800055a:	4603      	mov	r3, r0
 800055c:	3301      	adds	r3, #1
 800055e:	4618      	mov	r0, r3
 8000560:	f00c f946 	bl	800c7f0 <malloc>
 8000564:	4603      	mov	r3, r0
 8000566:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d003      	beq.n	8000576 <copyText+0x2a>
        strcpy(result, text);
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	68f8      	ldr	r0, [r7, #12]
 8000572:	f00c fa79 	bl	800ca68 <strcpy>
    }
    return result;
 8000576:	68fb      	ldr	r3, [r7, #12]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <menu>:
        }
    }
    return result;
}

void menu(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000584:	2101      	movs	r1, #1
 8000586:	488f      	ldr	r0, [pc, #572]	@ (80007c4 <menu+0x244>)
 8000588:	f007 ff74 	bl	8008474 <HAL_GPIO_ReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	2b01      	cmp	r3, #1
 8000590:	f040 808e 	bne.w	80006b0 <menu+0x130>
 8000594:	4b8c      	ldr	r3, [pc, #560]	@ (80007c8 <menu+0x248>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	f083 0301 	eor.w	r3, r3, #1
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2b00      	cmp	r3, #0
 80005a0:	f000 8086 	beq.w	80006b0 <menu+0x130>
		menuSayac = menuSayac+1;
 80005a4:	4b89      	ldr	r3, [pc, #548]	@ (80007cc <menu+0x24c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b87      	ldr	r3, [pc, #540]	@ (80007cc <menu+0x24c>)
 80005ae:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 32) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80005b0:	4b86      	ldr	r3, [pc, #536]	@ (80007cc <menu+0x24c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b20      	cmp	r3, #32
 80005b6:	d102      	bne.n	80005be <menu+0x3e>
			menuSayac = 1;
 80005b8:	4b84      	ldr	r3, [pc, #528]	@ (80007cc <menu+0x24c>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80005be:	4b83      	ldr	r3, [pc, #524]	@ (80007cc <menu+0x24c>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b12      	cmp	r3, #18
 80005c4:	d106      	bne.n	80005d4 <menu+0x54>
 80005c6:	4b82      	ldr	r3, [pc, #520]	@ (80007d0 <menu+0x250>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d102      	bne.n	80005d4 <menu+0x54>
			menuSayac = 21;
 80005ce:	4b7f      	ldr	r3, [pc, #508]	@ (80007cc <menu+0x24c>)
 80005d0:	2215      	movs	r2, #21
 80005d2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80005d4:	4b7d      	ldr	r3, [pc, #500]	@ (80007cc <menu+0x24c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b08      	cmp	r3, #8
 80005da:	d106      	bne.n	80005ea <menu+0x6a>
 80005dc:	4b7d      	ldr	r3, [pc, #500]	@ (80007d4 <menu+0x254>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d102      	bne.n	80005ea <menu+0x6a>
			menuSayac = 16;
 80005e4:	4b79      	ldr	r3, [pc, #484]	@ (80007cc <menu+0x24c>)
 80005e6:	2210      	movs	r2, #16
 80005e8:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80005ea:	4b78      	ldr	r3, [pc, #480]	@ (80007cc <menu+0x24c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b0d      	cmp	r3, #13
 80005f0:	d106      	bne.n	8000600 <menu+0x80>
 80005f2:	4b78      	ldr	r3, [pc, #480]	@ (80007d4 <menu+0x254>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d102      	bne.n	8000600 <menu+0x80>
			menuSayac = 16;
 80005fa:	4b74      	ldr	r3, [pc, #464]	@ (80007cc <menu+0x24c>)
 80005fc:	2210      	movs	r2, #16
 80005fe:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000600:	4b72      	ldr	r3, [pc, #456]	@ (80007cc <menu+0x24c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b09      	cmp	r3, #9
 8000606:	d106      	bne.n	8000616 <menu+0x96>
 8000608:	4b72      	ldr	r3, [pc, #456]	@ (80007d4 <menu+0x254>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b02      	cmp	r3, #2
 800060e:	d102      	bne.n	8000616 <menu+0x96>
			menuSayac = 13;
 8000610:	4b6e      	ldr	r3, [pc, #440]	@ (80007cc <menu+0x24c>)
 8000612:	220d      	movs	r2, #13
 8000614:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000616:	4b6d      	ldr	r3, [pc, #436]	@ (80007cc <menu+0x24c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b0a      	cmp	r3, #10
 800061c:	d10a      	bne.n	8000634 <menu+0xb4>
 800061e:	4b6e      	ldr	r3, [pc, #440]	@ (80007d8 <menu+0x258>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d003      	beq.n	800062e <menu+0xae>
 8000626:	4b6c      	ldr	r3, [pc, #432]	@ (80007d8 <menu+0x258>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b02      	cmp	r3, #2
 800062c:	d102      	bne.n	8000634 <menu+0xb4>
			menuSayac = 11;
 800062e:	4b67      	ldr	r3, [pc, #412]	@ (80007cc <menu+0x24c>)
 8000630:	220b      	movs	r2, #11
 8000632:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8000634:	4b65      	ldr	r3, [pc, #404]	@ (80007cc <menu+0x24c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b0c      	cmp	r3, #12
 800063a:	d10e      	bne.n	800065a <menu+0xda>
 800063c:	4b67      	ldr	r3, [pc, #412]	@ (80007dc <menu+0x25c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d003      	beq.n	800064c <menu+0xcc>
 8000644:	4b65      	ldr	r3, [pc, #404]	@ (80007dc <menu+0x25c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d106      	bne.n	800065a <menu+0xda>
 800064c:	4b61      	ldr	r3, [pc, #388]	@ (80007d4 <menu+0x254>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d102      	bne.n	800065a <menu+0xda>
			menuSayac = 16;
 8000654:	4b5d      	ldr	r3, [pc, #372]	@ (80007cc <menu+0x24c>)
 8000656:	2210      	movs	r2, #16
 8000658:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800065a:	4b5c      	ldr	r3, [pc, #368]	@ (80007cc <menu+0x24c>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b0c      	cmp	r3, #12
 8000660:	d10e      	bne.n	8000680 <menu+0x100>
 8000662:	4b5e      	ldr	r3, [pc, #376]	@ (80007dc <menu+0x25c>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d003      	beq.n	8000672 <menu+0xf2>
 800066a:	4b5c      	ldr	r3, [pc, #368]	@ (80007dc <menu+0x25c>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b02      	cmp	r3, #2
 8000670:	d106      	bne.n	8000680 <menu+0x100>
 8000672:	4b58      	ldr	r3, [pc, #352]	@ (80007d4 <menu+0x254>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b03      	cmp	r3, #3
 8000678:	d102      	bne.n	8000680 <menu+0x100>
			menuSayac = 13;
 800067a:	4b54      	ldr	r3, [pc, #336]	@ (80007cc <menu+0x24c>)
 800067c:	220d      	movs	r2, #13
 800067e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000680:	4b52      	ldr	r3, [pc, #328]	@ (80007cc <menu+0x24c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d106      	bne.n	8000696 <menu+0x116>
 8000688:	4b55      	ldr	r3, [pc, #340]	@ (80007e0 <menu+0x260>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d102      	bne.n	8000696 <menu+0x116>
			menuSayac = 16;
 8000690:	4b4e      	ldr	r3, [pc, #312]	@ (80007cc <menu+0x24c>)
 8000692:	2210      	movs	r2, #16
 8000694:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8000696:	4b4d      	ldr	r3, [pc, #308]	@ (80007cc <menu+0x24c>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b18      	cmp	r3, #24
 800069c:	d106      	bne.n	80006ac <menu+0x12c>
 800069e:	4b4c      	ldr	r3, [pc, #304]	@ (80007d0 <menu+0x250>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d102      	bne.n	80006ac <menu+0x12c>
			menuSayac = 26;
 80006a6:	4b49      	ldr	r3, [pc, #292]	@ (80007cc <menu+0x24c>)
 80006a8:	221a      	movs	r2, #26
 80006aa:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80006ac:	f003 fec2 	bl	8004434 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80006b0:	2108      	movs	r1, #8
 80006b2:	484c      	ldr	r0, [pc, #304]	@ (80007e4 <menu+0x264>)
 80006b4:	f007 fede 	bl	8008474 <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d175      	bne.n	80007aa <menu+0x22a>
 80006be:	4b42      	ldr	r3, [pc, #264]	@ (80007c8 <menu+0x248>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	f083 0301 	eor.w	r3, r3, #1
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d06e      	beq.n	80007aa <menu+0x22a>
		if (menuSayac <= 1) {
 80006cc:	4b3f      	ldr	r3, [pc, #252]	@ (80007cc <menu+0x24c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d802      	bhi.n	80006da <menu+0x15a>
			menuSayac = 32;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80006d4:	4b3d      	ldr	r3, [pc, #244]	@ (80007cc <menu+0x24c>)
 80006d6:	2220      	movs	r2, #32
 80006d8:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80006da:	4b3c      	ldr	r3, [pc, #240]	@ (80007cc <menu+0x24c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	3b01      	subs	r3, #1
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b3a      	ldr	r3, [pc, #232]	@ (80007cc <menu+0x24c>)
 80006e4:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80006e6:	4b39      	ldr	r3, [pc, #228]	@ (80007cc <menu+0x24c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b14      	cmp	r3, #20
 80006ec:	d106      	bne.n	80006fc <menu+0x17c>
 80006ee:	4b38      	ldr	r3, [pc, #224]	@ (80007d0 <menu+0x250>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d102      	bne.n	80006fc <menu+0x17c>
			menuSayac = 17;
 80006f6:	4b35      	ldr	r3, [pc, #212]	@ (80007cc <menu+0x24c>)
 80006f8:	2211      	movs	r2, #17
 80006fa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80006fc:	4b33      	ldr	r3, [pc, #204]	@ (80007cc <menu+0x24c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d106      	bne.n	8000712 <menu+0x192>
 8000704:	4b33      	ldr	r3, [pc, #204]	@ (80007d4 <menu+0x254>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d102      	bne.n	8000712 <menu+0x192>
			menuSayac = 7;
 800070c:	4b2f      	ldr	r3, [pc, #188]	@ (80007cc <menu+0x24c>)
 800070e:	2207      	movs	r2, #7
 8000710:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8000712:	4b2e      	ldr	r3, [pc, #184]	@ (80007cc <menu+0x24c>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b0f      	cmp	r3, #15
 8000718:	d106      	bne.n	8000728 <menu+0x1a8>
 800071a:	4b2e      	ldr	r3, [pc, #184]	@ (80007d4 <menu+0x254>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d102      	bne.n	8000728 <menu+0x1a8>
			menuSayac = 12;
 8000722:	4b2a      	ldr	r3, [pc, #168]	@ (80007cc <menu+0x24c>)
 8000724:	220c      	movs	r2, #12
 8000726:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8000728:	4b28      	ldr	r3, [pc, #160]	@ (80007cc <menu+0x24c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b0c      	cmp	r3, #12
 800072e:	d106      	bne.n	800073e <menu+0x1be>
 8000730:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <menu+0x254>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d102      	bne.n	800073e <menu+0x1be>
			menuSayac = 8;
 8000738:	4b24      	ldr	r3, [pc, #144]	@ (80007cc <menu+0x24c>)
 800073a:	2208      	movs	r2, #8
 800073c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800073e:	4b23      	ldr	r3, [pc, #140]	@ (80007cc <menu+0x24c>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b0a      	cmp	r3, #10
 8000744:	d10a      	bne.n	800075c <menu+0x1dc>
 8000746:	4b24      	ldr	r3, [pc, #144]	@ (80007d8 <menu+0x258>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d003      	beq.n	8000756 <menu+0x1d6>
 800074e:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <menu+0x258>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d102      	bne.n	800075c <menu+0x1dc>
			menuSayac = 9;
 8000756:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <menu+0x24c>)
 8000758:	2209      	movs	r2, #9
 800075a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800075c:	4b1b      	ldr	r3, [pc, #108]	@ (80007cc <menu+0x24c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b0c      	cmp	r3, #12
 8000762:	d10a      	bne.n	800077a <menu+0x1fa>
 8000764:	4b1d      	ldr	r3, [pc, #116]	@ (80007dc <menu+0x25c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d003      	beq.n	8000774 <menu+0x1f4>
 800076c:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <menu+0x25c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b02      	cmp	r3, #2
 8000772:	d102      	bne.n	800077a <menu+0x1fa>
			menuSayac = 11;
 8000774:	4b15      	ldr	r3, [pc, #84]	@ (80007cc <menu+0x24c>)
 8000776:	220b      	movs	r2, #11
 8000778:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800077a:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <menu+0x24c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b0f      	cmp	r3, #15
 8000780:	d106      	bne.n	8000790 <menu+0x210>
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <menu+0x260>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d102      	bne.n	8000790 <menu+0x210>
			menuSayac = 14;
 800078a:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <menu+0x24c>)
 800078c:	220e      	movs	r2, #14
 800078e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8000790:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <menu+0x24c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b19      	cmp	r3, #25
 8000796:	d106      	bne.n	80007a6 <menu+0x226>
 8000798:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <menu+0x250>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <menu+0x226>
			menuSayac = 23;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <menu+0x24c>)
 80007a2:	2217      	movs	r2, #23
 80007a4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80007a6:	f003 fe45 	bl	8004434 <bekle>
	}

	if (menuSayac == 0) {
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <menu+0x24c>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d134      	bne.n	800081c <menu+0x29c>
		if(dilSecim == 0) {
 80007b2:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <menu+0x268>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d122      	bne.n	8000800 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80007ba:	4a0c      	ldr	r2, [pc, #48]	@ (80007ec <menu+0x26c>)
 80007bc:	2101      	movs	r1, #1
 80007be:	2001      	movs	r0, #1
 80007c0:	e016      	b.n	80007f0 <menu+0x270>
 80007c2:	bf00      	nop
 80007c4:	40010800 	.word	0x40010800
 80007c8:	20000cb2 	.word	0x20000cb2
 80007cc:	20000c84 	.word	0x20000c84
 80007d0:	20000c93 	.word	0x20000c93
 80007d4:	20000c8c 	.word	0x20000c8c
 80007d8:	20000c8d 	.word	0x20000c8d
 80007dc:	20000c8e 	.word	0x20000c8e
 80007e0:	20000c8f 	.word	0x20000c8f
 80007e4:	40011000 	.word	0x40011000
 80007e8:	20000ca4 	.word	0x20000ca4
 80007ec:	0800caac 	.word	0x0800caac
 80007f0:	f7ff fe65 	bl	80004be <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80007f4:	4a94      	ldr	r2, [pc, #592]	@ (8000a48 <menu+0x4c8>)
 80007f6:	2101      	movs	r1, #1
 80007f8:	2002      	movs	r0, #2
 80007fa:	f7ff fe60 	bl	80004be <lcd_print>
 80007fe:	e00d      	b.n	800081c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8000800:	4b92      	ldr	r3, [pc, #584]	@ (8000a4c <menu+0x4cc>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d109      	bne.n	800081c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8000808:	4a91      	ldr	r2, [pc, #580]	@ (8000a50 <menu+0x4d0>)
 800080a:	2101      	movs	r1, #1
 800080c:	2001      	movs	r0, #1
 800080e:	f7ff fe56 	bl	80004be <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8000812:	4a90      	ldr	r2, [pc, #576]	@ (8000a54 <menu+0x4d4>)
 8000814:	2101      	movs	r1, #1
 8000816:	2002      	movs	r0, #2
 8000818:	f7ff fe51 	bl	80004be <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800081c:	4b8e      	ldr	r3, [pc, #568]	@ (8000a58 <menu+0x4d8>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	f040 828b 	bne.w	8000d3c <menu+0x7bc>
		if(dilSecim == 0) {
 8000826:	4b89      	ldr	r3, [pc, #548]	@ (8000a4c <menu+0x4cc>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d105      	bne.n	800083a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800082e:	4a8b      	ldr	r2, [pc, #556]	@ (8000a5c <menu+0x4dc>)
 8000830:	2101      	movs	r1, #1
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff fe43 	bl	80004be <lcd_print>
 8000838:	e008      	b.n	800084c <menu+0x2cc>
		} else if(dilSecim == 1) {
 800083a:	4b84      	ldr	r3, [pc, #528]	@ (8000a4c <menu+0x4cc>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d104      	bne.n	800084c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8000842:	4a87      	ldr	r2, [pc, #540]	@ (8000a60 <menu+0x4e0>)
 8000844:	2101      	movs	r1, #1
 8000846:	2001      	movs	r0, #1
 8000848:	f7ff fe39 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800084c:	4b85      	ldr	r3, [pc, #532]	@ (8000a64 <menu+0x4e4>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d123      	bne.n	800089c <menu+0x31c>
			if(dilSecim == 0) {
 8000854:	4b7d      	ldr	r3, [pc, #500]	@ (8000a4c <menu+0x4cc>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d105      	bne.n	8000868 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800085c:	4a82      	ldr	r2, [pc, #520]	@ (8000a68 <menu+0x4e8>)
 800085e:	2101      	movs	r1, #1
 8000860:	2002      	movs	r0, #2
 8000862:	f7ff fe2c 	bl	80004be <lcd_print>
 8000866:	e008      	b.n	800087a <menu+0x2fa>

			} else if(dilSecim == 1) {
 8000868:	4b78      	ldr	r3, [pc, #480]	@ (8000a4c <menu+0x4cc>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d104      	bne.n	800087a <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8000870:	4a7e      	ldr	r2, [pc, #504]	@ (8000a6c <menu+0x4ec>)
 8000872:	2101      	movs	r1, #1
 8000874:	2002      	movs	r0, #2
 8000876:	f7ff fe22 	bl	80004be <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800087a:	4a7d      	ldr	r2, [pc, #500]	@ (8000a70 <menu+0x4f0>)
 800087c:	210f      	movs	r1, #15
 800087e:	2002      	movs	r0, #2
 8000880:	f7ff fe1d 	bl	80004be <lcd_print>
			itoa(hataKayit1, snum, 10);
 8000884:	4b7b      	ldr	r3, [pc, #492]	@ (8000a74 <menu+0x4f4>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	220a      	movs	r2, #10
 800088a:	497b      	ldr	r1, [pc, #492]	@ (8000a78 <menu+0x4f8>)
 800088c:	4618      	mov	r0, r3
 800088e:	f00b ffad 	bl	800c7ec <itoa>
			lcd_print(2, 14, snum);
 8000892:	4a79      	ldr	r2, [pc, #484]	@ (8000a78 <menu+0x4f8>)
 8000894:	210e      	movs	r1, #14
 8000896:	2002      	movs	r0, #2
 8000898:	f7ff fe11 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800089c:	4b71      	ldr	r3, [pc, #452]	@ (8000a64 <menu+0x4e4>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d123      	bne.n	80008ec <menu+0x36c>
			if(dilSecim == 0) {
 80008a4:	4b69      	ldr	r3, [pc, #420]	@ (8000a4c <menu+0x4cc>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d105      	bne.n	80008b8 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80008ac:	4a73      	ldr	r2, [pc, #460]	@ (8000a7c <menu+0x4fc>)
 80008ae:	2101      	movs	r1, #1
 80008b0:	2002      	movs	r0, #2
 80008b2:	f7ff fe04 	bl	80004be <lcd_print>
 80008b6:	e008      	b.n	80008ca <menu+0x34a>
			} else if(dilSecim == 1) {
 80008b8:	4b64      	ldr	r3, [pc, #400]	@ (8000a4c <menu+0x4cc>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d104      	bne.n	80008ca <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80008c0:	4a6f      	ldr	r2, [pc, #444]	@ (8000a80 <menu+0x500>)
 80008c2:	2101      	movs	r1, #1
 80008c4:	2002      	movs	r0, #2
 80008c6:	f7ff fdfa 	bl	80004be <lcd_print>

			}
			lcd_print(2, 15, "  ");
 80008ca:	4a6e      	ldr	r2, [pc, #440]	@ (8000a84 <menu+0x504>)
 80008cc:	210f      	movs	r1, #15
 80008ce:	2002      	movs	r0, #2
 80008d0:	f7ff fdf5 	bl	80004be <lcd_print>
			itoa(hataKayit2, snum, 10);
 80008d4:	4b6c      	ldr	r3, [pc, #432]	@ (8000a88 <menu+0x508>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	220a      	movs	r2, #10
 80008da:	4967      	ldr	r1, [pc, #412]	@ (8000a78 <menu+0x4f8>)
 80008dc:	4618      	mov	r0, r3
 80008de:	f00b ff85 	bl	800c7ec <itoa>
			lcd_print(2, 14, snum);
 80008e2:	4a65      	ldr	r2, [pc, #404]	@ (8000a78 <menu+0x4f8>)
 80008e4:	210e      	movs	r1, #14
 80008e6:	2002      	movs	r0, #2
 80008e8:	f7ff fde9 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 2){
 80008ec:	4b5d      	ldr	r3, [pc, #372]	@ (8000a64 <menu+0x4e4>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d123      	bne.n	800093c <menu+0x3bc>
			if(dilSecim == 0) {
 80008f4:	4b55      	ldr	r3, [pc, #340]	@ (8000a4c <menu+0x4cc>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d105      	bne.n	8000908 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80008fc:	4a63      	ldr	r2, [pc, #396]	@ (8000a8c <menu+0x50c>)
 80008fe:	2101      	movs	r1, #1
 8000900:	2002      	movs	r0, #2
 8000902:	f7ff fddc 	bl	80004be <lcd_print>
 8000906:	e008      	b.n	800091a <menu+0x39a>
			} else if(dilSecim == 1) {
 8000908:	4b50      	ldr	r3, [pc, #320]	@ (8000a4c <menu+0x4cc>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d104      	bne.n	800091a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8000910:	4a5f      	ldr	r2, [pc, #380]	@ (8000a90 <menu+0x510>)
 8000912:	2101      	movs	r1, #1
 8000914:	2002      	movs	r0, #2
 8000916:	f7ff fdd2 	bl	80004be <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800091a:	4a5a      	ldr	r2, [pc, #360]	@ (8000a84 <menu+0x504>)
 800091c:	210f      	movs	r1, #15
 800091e:	2002      	movs	r0, #2
 8000920:	f7ff fdcd 	bl	80004be <lcd_print>
			itoa(hataKayit3, snum, 10);
 8000924:	4b5b      	ldr	r3, [pc, #364]	@ (8000a94 <menu+0x514>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	220a      	movs	r2, #10
 800092a:	4953      	ldr	r1, [pc, #332]	@ (8000a78 <menu+0x4f8>)
 800092c:	4618      	mov	r0, r3
 800092e:	f00b ff5d 	bl	800c7ec <itoa>
			lcd_print(2, 14, snum);
 8000932:	4a51      	ldr	r2, [pc, #324]	@ (8000a78 <menu+0x4f8>)
 8000934:	210e      	movs	r1, #14
 8000936:	2002      	movs	r0, #2
 8000938:	f7ff fdc1 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800093c:	4b49      	ldr	r3, [pc, #292]	@ (8000a64 <menu+0x4e4>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b03      	cmp	r3, #3
 8000942:	d123      	bne.n	800098c <menu+0x40c>
			if(dilSecim == 0) {
 8000944:	4b41      	ldr	r3, [pc, #260]	@ (8000a4c <menu+0x4cc>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d105      	bne.n	8000958 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800094c:	4a52      	ldr	r2, [pc, #328]	@ (8000a98 <menu+0x518>)
 800094e:	2101      	movs	r1, #1
 8000950:	2002      	movs	r0, #2
 8000952:	f7ff fdb4 	bl	80004be <lcd_print>
 8000956:	e008      	b.n	800096a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8000958:	4b3c      	ldr	r3, [pc, #240]	@ (8000a4c <menu+0x4cc>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d104      	bne.n	800096a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8000960:	4a4e      	ldr	r2, [pc, #312]	@ (8000a9c <menu+0x51c>)
 8000962:	2101      	movs	r1, #1
 8000964:	2002      	movs	r0, #2
 8000966:	f7ff fdaa 	bl	80004be <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800096a:	4a46      	ldr	r2, [pc, #280]	@ (8000a84 <menu+0x504>)
 800096c:	210f      	movs	r1, #15
 800096e:	2002      	movs	r0, #2
 8000970:	f7ff fda5 	bl	80004be <lcd_print>
			itoa(hataKayit4, snum, 10);
 8000974:	4b4a      	ldr	r3, [pc, #296]	@ (8000aa0 <menu+0x520>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	220a      	movs	r2, #10
 800097a:	493f      	ldr	r1, [pc, #252]	@ (8000a78 <menu+0x4f8>)
 800097c:	4618      	mov	r0, r3
 800097e:	f00b ff35 	bl	800c7ec <itoa>
			lcd_print(2, 14, snum);
 8000982:	4a3d      	ldr	r2, [pc, #244]	@ (8000a78 <menu+0x4f8>)
 8000984:	210e      	movs	r1, #14
 8000986:	2002      	movs	r0, #2
 8000988:	f7ff fd99 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800098c:	4b35      	ldr	r3, [pc, #212]	@ (8000a64 <menu+0x4e4>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b04      	cmp	r3, #4
 8000992:	d123      	bne.n	80009dc <menu+0x45c>
			if(dilSecim == 0) {
 8000994:	4b2d      	ldr	r3, [pc, #180]	@ (8000a4c <menu+0x4cc>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d105      	bne.n	80009a8 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 800099c:	4a41      	ldr	r2, [pc, #260]	@ (8000aa4 <menu+0x524>)
 800099e:	2101      	movs	r1, #1
 80009a0:	2002      	movs	r0, #2
 80009a2:	f7ff fd8c 	bl	80004be <lcd_print>
 80009a6:	e008      	b.n	80009ba <menu+0x43a>
			} else if(dilSecim == 1) {
 80009a8:	4b28      	ldr	r3, [pc, #160]	@ (8000a4c <menu+0x4cc>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d104      	bne.n	80009ba <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80009b0:	4a3d      	ldr	r2, [pc, #244]	@ (8000aa8 <menu+0x528>)
 80009b2:	2101      	movs	r1, #1
 80009b4:	2002      	movs	r0, #2
 80009b6:	f7ff fd82 	bl	80004be <lcd_print>

			}
			lcd_print(2, 15, "  ");
 80009ba:	4a32      	ldr	r2, [pc, #200]	@ (8000a84 <menu+0x504>)
 80009bc:	210f      	movs	r1, #15
 80009be:	2002      	movs	r0, #2
 80009c0:	f7ff fd7d 	bl	80004be <lcd_print>
			itoa(hataKayit5, snum, 10);
 80009c4:	4b39      	ldr	r3, [pc, #228]	@ (8000aac <menu+0x52c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	220a      	movs	r2, #10
 80009ca:	492b      	ldr	r1, [pc, #172]	@ (8000a78 <menu+0x4f8>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	f00b ff0d 	bl	800c7ec <itoa>
			lcd_print(2, 14, snum);
 80009d2:	4a29      	ldr	r2, [pc, #164]	@ (8000a78 <menu+0x4f8>)
 80009d4:	210e      	movs	r1, #14
 80009d6:	2002      	movs	r0, #2
 80009d8:	f7ff fd71 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80009dc:	4b21      	ldr	r3, [pc, #132]	@ (8000a64 <menu+0x4e4>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b05      	cmp	r3, #5
 80009e2:	d123      	bne.n	8000a2c <menu+0x4ac>
			if(dilSecim == 0) {
 80009e4:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <menu+0x4cc>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d105      	bne.n	80009f8 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80009ec:	4a30      	ldr	r2, [pc, #192]	@ (8000ab0 <menu+0x530>)
 80009ee:	2101      	movs	r1, #1
 80009f0:	2002      	movs	r0, #2
 80009f2:	f7ff fd64 	bl	80004be <lcd_print>
 80009f6:	e008      	b.n	8000a0a <menu+0x48a>
			} else if(dilSecim == 1) {
 80009f8:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <menu+0x4cc>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d104      	bne.n	8000a0a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8000a00:	4a2c      	ldr	r2, [pc, #176]	@ (8000ab4 <menu+0x534>)
 8000a02:	2101      	movs	r1, #1
 8000a04:	2002      	movs	r0, #2
 8000a06:	f7ff fd5a 	bl	80004be <lcd_print>

			}
			lcd_print(2, 15, "  ");
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a84 <menu+0x504>)
 8000a0c:	210f      	movs	r1, #15
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f7ff fd55 	bl	80004be <lcd_print>
			itoa(hataKayit6, snum, 10);
 8000a14:	4b28      	ldr	r3, [pc, #160]	@ (8000ab8 <menu+0x538>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	220a      	movs	r2, #10
 8000a1a:	4917      	ldr	r1, [pc, #92]	@ (8000a78 <menu+0x4f8>)
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f00b fee5 	bl	800c7ec <itoa>
			lcd_print(2, 14, snum);
 8000a22:	4a15      	ldr	r2, [pc, #84]	@ (8000a78 <menu+0x4f8>)
 8000a24:	210e      	movs	r1, #14
 8000a26:	2002      	movs	r0, #2
 8000a28:	f7ff fd49 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a64 <menu+0x4e4>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b06      	cmp	r3, #6
 8000a32:	d15f      	bne.n	8000af4 <menu+0x574>
			if(dilSecim == 0) {
 8000a34:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <menu+0x4cc>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d141      	bne.n	8000ac0 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8000a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8000abc <menu+0x53c>)
 8000a3e:	2101      	movs	r1, #1
 8000a40:	2002      	movs	r0, #2
 8000a42:	f7ff fd3c 	bl	80004be <lcd_print>
 8000a46:	e044      	b.n	8000ad2 <menu+0x552>
 8000a48:	0800cac0 	.word	0x0800cac0
 8000a4c:	20000ca4 	.word	0x20000ca4
 8000a50:	0800cad4 	.word	0x0800cad4
 8000a54:	0800cae8 	.word	0x0800cae8
 8000a58:	20000c84 	.word	0x20000c84
 8000a5c:	0800cafc 	.word	0x0800cafc
 8000a60:	0800cb10 	.word	0x0800cb10
 8000a64:	20000c86 	.word	0x20000c86
 8000a68:	0800cb24 	.word	0x0800cb24
 8000a6c:	0800cb34 	.word	0x0800cb34
 8000a70:	0800cb44 	.word	0x0800cb44
 8000a74:	20000ca5 	.word	0x20000ca5
 8000a78:	20000c58 	.word	0x20000c58
 8000a7c:	0800cb48 	.word	0x0800cb48
 8000a80:	0800cb58 	.word	0x0800cb58
 8000a84:	0800cb68 	.word	0x0800cb68
 8000a88:	20000ca6 	.word	0x20000ca6
 8000a8c:	0800cb6c 	.word	0x0800cb6c
 8000a90:	0800cb7c 	.word	0x0800cb7c
 8000a94:	20000ca7 	.word	0x20000ca7
 8000a98:	0800cb8c 	.word	0x0800cb8c
 8000a9c:	0800cb9c 	.word	0x0800cb9c
 8000aa0:	20000ca8 	.word	0x20000ca8
 8000aa4:	0800cbac 	.word	0x0800cbac
 8000aa8:	0800cbbc 	.word	0x0800cbbc
 8000aac:	20000ca9 	.word	0x20000ca9
 8000ab0:	0800cbcc 	.word	0x0800cbcc
 8000ab4:	0800cbdc 	.word	0x0800cbdc
 8000ab8:	20000caa 	.word	0x20000caa
 8000abc:	0800cbec 	.word	0x0800cbec
			} else if(dilSecim == 1) {
 8000ac0:	4ba6      	ldr	r3, [pc, #664]	@ (8000d5c <menu+0x7dc>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d104      	bne.n	8000ad2 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8000ac8:	4aa5      	ldr	r2, [pc, #660]	@ (8000d60 <menu+0x7e0>)
 8000aca:	2101      	movs	r1, #1
 8000acc:	2002      	movs	r0, #2
 8000ace:	f7ff fcf6 	bl	80004be <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000ad2:	4aa4      	ldr	r2, [pc, #656]	@ (8000d64 <menu+0x7e4>)
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f7ff fcf1 	bl	80004be <lcd_print>
			itoa(hataKayit7, snum, 10);
 8000adc:	4ba2      	ldr	r3, [pc, #648]	@ (8000d68 <menu+0x7e8>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	220a      	movs	r2, #10
 8000ae2:	49a2      	ldr	r1, [pc, #648]	@ (8000d6c <menu+0x7ec>)
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f00b fe81 	bl	800c7ec <itoa>
			lcd_print(2, 14, snum);
 8000aea:	4aa0      	ldr	r2, [pc, #640]	@ (8000d6c <menu+0x7ec>)
 8000aec:	210e      	movs	r1, #14
 8000aee:	2002      	movs	r0, #2
 8000af0:	f7ff fce5 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8000af4:	4b9e      	ldr	r3, [pc, #632]	@ (8000d70 <menu+0x7f0>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b07      	cmp	r3, #7
 8000afa:	d123      	bne.n	8000b44 <menu+0x5c4>
			if(dilSecim == 0) {
 8000afc:	4b97      	ldr	r3, [pc, #604]	@ (8000d5c <menu+0x7dc>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d105      	bne.n	8000b10 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8000b04:	4a9b      	ldr	r2, [pc, #620]	@ (8000d74 <menu+0x7f4>)
 8000b06:	2101      	movs	r1, #1
 8000b08:	2002      	movs	r0, #2
 8000b0a:	f7ff fcd8 	bl	80004be <lcd_print>
 8000b0e:	e008      	b.n	8000b22 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8000b10:	4b92      	ldr	r3, [pc, #584]	@ (8000d5c <menu+0x7dc>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d104      	bne.n	8000b22 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8000b18:	4a97      	ldr	r2, [pc, #604]	@ (8000d78 <menu+0x7f8>)
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f7ff fcce 	bl	80004be <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000b22:	4a90      	ldr	r2, [pc, #576]	@ (8000d64 <menu+0x7e4>)
 8000b24:	210f      	movs	r1, #15
 8000b26:	2002      	movs	r0, #2
 8000b28:	f7ff fcc9 	bl	80004be <lcd_print>
			itoa(hataKayit8, snum, 10);
 8000b2c:	4b93      	ldr	r3, [pc, #588]	@ (8000d7c <menu+0x7fc>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	220a      	movs	r2, #10
 8000b32:	498e      	ldr	r1, [pc, #568]	@ (8000d6c <menu+0x7ec>)
 8000b34:	4618      	mov	r0, r3
 8000b36:	f00b fe59 	bl	800c7ec <itoa>
			lcd_print(2, 14, snum);
 8000b3a:	4a8c      	ldr	r2, [pc, #560]	@ (8000d6c <menu+0x7ec>)
 8000b3c:	210e      	movs	r1, #14
 8000b3e:	2002      	movs	r0, #2
 8000b40:	f7ff fcbd 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8000b44:	4b8a      	ldr	r3, [pc, #552]	@ (8000d70 <menu+0x7f0>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b08      	cmp	r3, #8
 8000b4a:	d123      	bne.n	8000b94 <menu+0x614>
			if(dilSecim == 0) {
 8000b4c:	4b83      	ldr	r3, [pc, #524]	@ (8000d5c <menu+0x7dc>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d105      	bne.n	8000b60 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8000b54:	4a8a      	ldr	r2, [pc, #552]	@ (8000d80 <menu+0x800>)
 8000b56:	2101      	movs	r1, #1
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f7ff fcb0 	bl	80004be <lcd_print>
 8000b5e:	e008      	b.n	8000b72 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8000b60:	4b7e      	ldr	r3, [pc, #504]	@ (8000d5c <menu+0x7dc>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d104      	bne.n	8000b72 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8000b68:	4a86      	ldr	r2, [pc, #536]	@ (8000d84 <menu+0x804>)
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f7ff fca6 	bl	80004be <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000b72:	4a7c      	ldr	r2, [pc, #496]	@ (8000d64 <menu+0x7e4>)
 8000b74:	210f      	movs	r1, #15
 8000b76:	2002      	movs	r0, #2
 8000b78:	f7ff fca1 	bl	80004be <lcd_print>
			itoa(hataKayit9, snum, 10);
 8000b7c:	4b82      	ldr	r3, [pc, #520]	@ (8000d88 <menu+0x808>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	220a      	movs	r2, #10
 8000b82:	497a      	ldr	r1, [pc, #488]	@ (8000d6c <menu+0x7ec>)
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00b fe31 	bl	800c7ec <itoa>
			lcd_print(2, 14, snum);
 8000b8a:	4a78      	ldr	r2, [pc, #480]	@ (8000d6c <menu+0x7ec>)
 8000b8c:	210e      	movs	r1, #14
 8000b8e:	2002      	movs	r0, #2
 8000b90:	f7ff fc95 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8000b94:	4b76      	ldr	r3, [pc, #472]	@ (8000d70 <menu+0x7f0>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b09      	cmp	r3, #9
 8000b9a:	d123      	bne.n	8000be4 <menu+0x664>
			if(dilSecim == 0) {
 8000b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8000d5c <menu+0x7dc>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d105      	bne.n	8000bb0 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8000ba4:	4a79      	ldr	r2, [pc, #484]	@ (8000d8c <menu+0x80c>)
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	2002      	movs	r0, #2
 8000baa:	f7ff fc88 	bl	80004be <lcd_print>
 8000bae:	e008      	b.n	8000bc2 <menu+0x642>
			} else if(dilSecim == 1) {
 8000bb0:	4b6a      	ldr	r3, [pc, #424]	@ (8000d5c <menu+0x7dc>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d104      	bne.n	8000bc2 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8000bb8:	4a75      	ldr	r2, [pc, #468]	@ (8000d90 <menu+0x810>)
 8000bba:	2101      	movs	r1, #1
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	f7ff fc7e 	bl	80004be <lcd_print>

			}
			lcd_print(2, 16, " ");
 8000bc2:	4a74      	ldr	r2, [pc, #464]	@ (8000d94 <menu+0x814>)
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f7ff fc79 	bl	80004be <lcd_print>
			itoa(hataKayit10, snum, 10);
 8000bcc:	4b72      	ldr	r3, [pc, #456]	@ (8000d98 <menu+0x818>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	4966      	ldr	r1, [pc, #408]	@ (8000d6c <menu+0x7ec>)
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f00b fe09 	bl	800c7ec <itoa>
			lcd_print(2, 15, snum);
 8000bda:	4a64      	ldr	r2, [pc, #400]	@ (8000d6c <menu+0x7ec>)
 8000bdc:	210f      	movs	r1, #15
 8000bde:	2002      	movs	r0, #2
 8000be0:	f7ff fc6d 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8000be4:	4b62      	ldr	r3, [pc, #392]	@ (8000d70 <menu+0x7f0>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b0a      	cmp	r3, #10
 8000bea:	d112      	bne.n	8000c12 <menu+0x692>
			if(dilSecim == 0) {
 8000bec:	4b5b      	ldr	r3, [pc, #364]	@ (8000d5c <menu+0x7dc>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d105      	bne.n	8000c00 <menu+0x680>
				lcd_print(2, 1, "Silmek icin ent.");
 8000bf4:	4a69      	ldr	r2, [pc, #420]	@ (8000d9c <menu+0x81c>)
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f7ff fc60 	bl	80004be <lcd_print>
 8000bfe:	e008      	b.n	8000c12 <menu+0x692>
			} else if(dilSecim == 1) {
 8000c00:	4b56      	ldr	r3, [pc, #344]	@ (8000d5c <menu+0x7dc>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d104      	bne.n	8000c12 <menu+0x692>
				lcd_print(2, 1, "Del. press enter");
 8000c08:	4a65      	ldr	r2, [pc, #404]	@ (8000da0 <menu+0x820>)
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	2002      	movs	r0, #2
 8000c0e:	f7ff fc56 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8000c12:	2102      	movs	r1, #2
 8000c14:	4863      	ldr	r0, [pc, #396]	@ (8000da4 <menu+0x824>)
 8000c16:	f007 fc2d 	bl	8008474 <HAL_GPIO_ReadPin>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d115      	bne.n	8000c4c <menu+0x6cc>
 8000c20:	4b61      	ldr	r3, [pc, #388]	@ (8000da8 <menu+0x828>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	f083 0301 	eor.w	r3, r3, #1
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00e      	beq.n	8000c4c <menu+0x6cc>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8000c2e:	4b50      	ldr	r3, [pc, #320]	@ (8000d70 <menu+0x7f0>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b4e      	ldr	r3, [pc, #312]	@ (8000d70 <menu+0x7f0>)
 8000c38:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8000c3a:	4b4d      	ldr	r3, [pc, #308]	@ (8000d70 <menu+0x7f0>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b0a      	cmp	r3, #10
 8000c40:	d902      	bls.n	8000c48 <menu+0x6c8>
				hataGostermeSirasi = 0;
 8000c42:	4b4b      	ldr	r3, [pc, #300]	@ (8000d70 <menu+0x7f0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000c48:	f003 fbf4 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	4855      	ldr	r0, [pc, #340]	@ (8000da4 <menu+0x824>)
 8000c50:	f007 fc10 	bl	8008474 <HAL_GPIO_ReadPin>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d115      	bne.n	8000c86 <menu+0x706>
 8000c5a:	4b53      	ldr	r3, [pc, #332]	@ (8000da8 <menu+0x828>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	f083 0301 	eor.w	r3, r3, #1
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00e      	beq.n	8000c86 <menu+0x706>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8000c68:	4b41      	ldr	r3, [pc, #260]	@ (8000d70 <menu+0x7f0>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	4b3f      	ldr	r3, [pc, #252]	@ (8000d70 <menu+0x7f0>)
 8000c72:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8000c74:	4b3e      	ldr	r3, [pc, #248]	@ (8000d70 <menu+0x7f0>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b0b      	cmp	r3, #11
 8000c7a:	d902      	bls.n	8000c82 <menu+0x702>
	    		hataGostermeSirasi = 10;
 8000c7c:	4b3c      	ldr	r3, [pc, #240]	@ (8000d70 <menu+0x7f0>)
 8000c7e:	220a      	movs	r2, #10
 8000c80:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000c82:	f003 fbd7 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8000c86:	2108      	movs	r1, #8
 8000c88:	4846      	ldr	r0, [pc, #280]	@ (8000da4 <menu+0x824>)
 8000c8a:	f007 fbf3 	bl	8008474 <HAL_GPIO_ReadPin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d153      	bne.n	8000d3c <menu+0x7bc>
 8000c94:	4b44      	ldr	r3, [pc, #272]	@ (8000da8 <menu+0x828>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	f083 0301 	eor.w	r3, r3, #1
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d04c      	beq.n	8000d3c <menu+0x7bc>
 8000ca2:	4b33      	ldr	r3, [pc, #204]	@ (8000d70 <menu+0x7f0>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b0a      	cmp	r3, #10
 8000ca8:	d148      	bne.n	8000d3c <menu+0x7bc>
			hataKayit1 = 0; eepromData[37] = 0;
 8000caa:	4b40      	ldr	r3, [pc, #256]	@ (8000dac <menu+0x82c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
 8000cb0:	4b3f      	ldr	r3, [pc, #252]	@ (8000db0 <menu+0x830>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8000cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8000db4 <menu+0x834>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8000db0 <menu+0x830>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8000cc6:	4b3c      	ldr	r3, [pc, #240]	@ (8000db8 <menu+0x838>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
 8000ccc:	4b38      	ldr	r3, [pc, #224]	@ (8000db0 <menu+0x830>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8000cd4:	4b39      	ldr	r3, [pc, #228]	@ (8000dbc <menu+0x83c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	4b35      	ldr	r3, [pc, #212]	@ (8000db0 <menu+0x830>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8000ce2:	4b37      	ldr	r3, [pc, #220]	@ (8000dc0 <menu+0x840>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
 8000ce8:	4b31      	ldr	r3, [pc, #196]	@ (8000db0 <menu+0x830>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8000cf0:	4b34      	ldr	r3, [pc, #208]	@ (8000dc4 <menu+0x844>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	4b2e      	ldr	r3, [pc, #184]	@ (8000db0 <menu+0x830>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <menu+0x7e8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
 8000d04:	4b2a      	ldr	r3, [pc, #168]	@ (8000db0 <menu+0x830>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <menu+0x7fc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
 8000d12:	4b27      	ldr	r3, [pc, #156]	@ (8000db0 <menu+0x830>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <menu+0x808>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	4b23      	ldr	r3, [pc, #140]	@ (8000db0 <menu+0x830>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <menu+0x818>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	4b20      	ldr	r3, [pc, #128]	@ (8000db0 <menu+0x830>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8000d36:	4b24      	ldr	r3, [pc, #144]	@ (8000dc8 <menu+0x848>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8000d3c:	4b23      	ldr	r3, [pc, #140]	@ (8000dcc <menu+0x84c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	f040 8103 	bne.w	8000f4c <menu+0x9cc>
		if(dilSecim == 0) {
 8000d46:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <menu+0x7dc>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d142      	bne.n	8000dd4 <menu+0x854>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8000d4e:	4a20      	ldr	r2, [pc, #128]	@ (8000dd0 <menu+0x850>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	2001      	movs	r0, #1
 8000d54:	f7ff fbb3 	bl	80004be <lcd_print>
 8000d58:	e045      	b.n	8000de6 <menu+0x866>
 8000d5a:	bf00      	nop
 8000d5c:	20000ca4 	.word	0x20000ca4
 8000d60:	0800cbfc 	.word	0x0800cbfc
 8000d64:	0800cb68 	.word	0x0800cb68
 8000d68:	20000cab 	.word	0x20000cab
 8000d6c:	20000c58 	.word	0x20000c58
 8000d70:	20000c86 	.word	0x20000c86
 8000d74:	0800cc0c 	.word	0x0800cc0c
 8000d78:	0800cc1c 	.word	0x0800cc1c
 8000d7c:	20000cac 	.word	0x20000cac
 8000d80:	0800cc2c 	.word	0x0800cc2c
 8000d84:	0800cc3c 	.word	0x0800cc3c
 8000d88:	20000cad 	.word	0x20000cad
 8000d8c:	0800cc4c 	.word	0x0800cc4c
 8000d90:	0800cc5c 	.word	0x0800cc5c
 8000d94:	0800cc6c 	.word	0x0800cc6c
 8000d98:	20000cae 	.word	0x20000cae
 8000d9c:	0800cc70 	.word	0x0800cc70
 8000da0:	0800cc84 	.word	0x0800cc84
 8000da4:	40010800 	.word	0x40010800
 8000da8:	20000cb2 	.word	0x20000cb2
 8000dac:	20000ca5 	.word	0x20000ca5
 8000db0:	20000c18 	.word	0x20000c18
 8000db4:	20000ca6 	.word	0x20000ca6
 8000db8:	20000ca7 	.word	0x20000ca7
 8000dbc:	20000ca8 	.word	0x20000ca8
 8000dc0:	20000ca9 	.word	0x20000ca9
 8000dc4:	20000caa 	.word	0x20000caa
 8000dc8:	20000caf 	.word	0x20000caf
 8000dcc:	20000c84 	.word	0x20000c84
 8000dd0:	0800cc98 	.word	0x0800cc98
		} else if(dilSecim == 1) {
 8000dd4:	4b75      	ldr	r3, [pc, #468]	@ (8000fac <menu+0xa2c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d104      	bne.n	8000de6 <menu+0x866>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8000ddc:	4a74      	ldr	r2, [pc, #464]	@ (8000fb0 <menu+0xa30>)
 8000dde:	2101      	movs	r1, #1
 8000de0:	2001      	movs	r0, #1
 8000de2:	f7ff fb6c 	bl	80004be <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8000de6:	4b73      	ldr	r3, [pc, #460]	@ (8000fb4 <menu+0xa34>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d003      	beq.n	8000df6 <menu+0x876>
 8000dee:	4b71      	ldr	r3, [pc, #452]	@ (8000fb4 <menu+0xa34>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d112      	bne.n	8000e1c <menu+0x89c>
			if(dilSecim == 0) {
 8000df6:	4b6d      	ldr	r3, [pc, #436]	@ (8000fac <menu+0xa2c>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d105      	bne.n	8000e0a <menu+0x88a>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8000dfe:	4a6e      	ldr	r2, [pc, #440]	@ (8000fb8 <menu+0xa38>)
 8000e00:	2101      	movs	r1, #1
 8000e02:	2002      	movs	r0, #2
 8000e04:	f7ff fb5b 	bl	80004be <lcd_print>
 8000e08:	e008      	b.n	8000e1c <menu+0x89c>
			} else if(dilSecim == 1) {
 8000e0a:	4b68      	ldr	r3, [pc, #416]	@ (8000fac <menu+0xa2c>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d104      	bne.n	8000e1c <menu+0x89c>
				lcd_print(2, 1, "Tppng Mobil slct");
 8000e12:	4a6a      	ldr	r2, [pc, #424]	@ (8000fbc <menu+0xa3c>)
 8000e14:	2101      	movs	r1, #1
 8000e16:	2002      	movs	r0, #2
 8000e18:	f7ff fb51 	bl	80004be <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8000e1c:	4b68      	ldr	r3, [pc, #416]	@ (8000fc0 <menu+0xa40>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d116      	bne.n	8000e52 <menu+0x8d2>
 8000e24:	4b63      	ldr	r3, [pc, #396]	@ (8000fb4 <menu+0xa34>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d112      	bne.n	8000e52 <menu+0x8d2>
			if(dilSecim == 0) {
 8000e2c:	4b5f      	ldr	r3, [pc, #380]	@ (8000fac <menu+0xa2c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d105      	bne.n	8000e40 <menu+0x8c0>
				lcd_print(2, 1, "Bastikca cal.  ");
 8000e34:	4a63      	ldr	r2, [pc, #396]	@ (8000fc4 <menu+0xa44>)
 8000e36:	2101      	movs	r1, #1
 8000e38:	2002      	movs	r0, #2
 8000e3a:	f7ff fb40 	bl	80004be <lcd_print>
 8000e3e:	e008      	b.n	8000e52 <menu+0x8d2>
			} else if(dilSecim == 1) {
 8000e40:	4b5a      	ldr	r3, [pc, #360]	@ (8000fac <menu+0xa2c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d104      	bne.n	8000e52 <menu+0x8d2>
				lcd_print(2, 1, "Deadman Control");
 8000e48:	4a5f      	ldr	r2, [pc, #380]	@ (8000fc8 <menu+0xa48>)
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f7ff fb36 	bl	80004be <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8000e52:	4b5b      	ldr	r3, [pc, #364]	@ (8000fc0 <menu+0xa40>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d116      	bne.n	8000e88 <menu+0x908>
 8000e5a:	4b56      	ldr	r3, [pc, #344]	@ (8000fb4 <menu+0xa34>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d112      	bne.n	8000e88 <menu+0x908>
			if(dilSecim == 0) {
 8000e62:	4b52      	ldr	r3, [pc, #328]	@ (8000fac <menu+0xa2c>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d105      	bne.n	8000e76 <menu+0x8f6>
				lcd_print(2, 1, "Bas gonder     ");
 8000e6a:	4a58      	ldr	r2, [pc, #352]	@ (8000fcc <menu+0xa4c>)
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	2002      	movs	r0, #2
 8000e70:	f7ff fb25 	bl	80004be <lcd_print>
 8000e74:	e008      	b.n	8000e88 <menu+0x908>
			} else if(dilSecim == 1) {
 8000e76:	4b4d      	ldr	r3, [pc, #308]	@ (8000fac <menu+0xa2c>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d104      	bne.n	8000e88 <menu+0x908>
				lcd_print(2, 1, "Call & Send    ");
 8000e7e:	4a54      	ldr	r2, [pc, #336]	@ (8000fd0 <menu+0xa50>)
 8000e80:	2101      	movs	r1, #1
 8000e82:	2002      	movs	r0, #2
 8000e84:	f7ff fb1b 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000e88:	2102      	movs	r1, #2
 8000e8a:	4852      	ldr	r0, [pc, #328]	@ (8000fd4 <menu+0xa54>)
 8000e8c:	f007 faf2 	bl	8008474 <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d119      	bne.n	8000eca <menu+0x94a>
 8000e96:	4b50      	ldr	r3, [pc, #320]	@ (8000fd8 <menu+0xa58>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	f083 0301 	eor.w	r3, r3, #1
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d012      	beq.n	8000eca <menu+0x94a>
 8000ea4:	4b43      	ldr	r3, [pc, #268]	@ (8000fb4 <menu+0xa34>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10e      	bne.n	8000eca <menu+0x94a>
			calismaSekli = calismaSekli + 1;
 8000eac:	4b44      	ldr	r3, [pc, #272]	@ (8000fc0 <menu+0xa40>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b42      	ldr	r3, [pc, #264]	@ (8000fc0 <menu+0xa40>)
 8000eb6:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8000eb8:	4b41      	ldr	r3, [pc, #260]	@ (8000fc0 <menu+0xa40>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d902      	bls.n	8000ec6 <menu+0x946>
				calismaSekli = 0;
 8000ec0:	4b3f      	ldr	r3, [pc, #252]	@ (8000fc0 <menu+0xa40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000ec6:	f003 fab5 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000eca:	2104      	movs	r1, #4
 8000ecc:	4841      	ldr	r0, [pc, #260]	@ (8000fd4 <menu+0xa54>)
 8000ece:	f007 fad1 	bl	8008474 <HAL_GPIO_ReadPin>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d119      	bne.n	8000f0c <menu+0x98c>
 8000ed8:	4b3f      	ldr	r3, [pc, #252]	@ (8000fd8 <menu+0xa58>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	f083 0301 	eor.w	r3, r3, #1
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d012      	beq.n	8000f0c <menu+0x98c>
 8000ee6:	4b33      	ldr	r3, [pc, #204]	@ (8000fb4 <menu+0xa34>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10e      	bne.n	8000f0c <menu+0x98c>
			calismaSekli = calismaSekli - 1;
 8000eee:	4b34      	ldr	r3, [pc, #208]	@ (8000fc0 <menu+0xa40>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b32      	ldr	r3, [pc, #200]	@ (8000fc0 <menu+0xa40>)
 8000ef8:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8000efa:	4b31      	ldr	r3, [pc, #196]	@ (8000fc0 <menu+0xa40>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d002      	beq.n	8000f08 <menu+0x988>
	    		calismaSekli = 1;
 8000f02:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc0 <menu+0xa40>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000f08:	f003 fa94 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8000f0c:	2108      	movs	r1, #8
 8000f0e:	4831      	ldr	r0, [pc, #196]	@ (8000fd4 <menu+0xa54>)
 8000f10:	f007 fab0 	bl	8008474 <HAL_GPIO_ReadPin>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d118      	bne.n	8000f4c <menu+0x9cc>
 8000f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd8 <menu+0xa58>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	f083 0301 	eor.w	r3, r3, #1
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d011      	beq.n	8000f4c <menu+0x9cc>
			eepromData[1] = calismaSekli;
 8000f28:	4b25      	ldr	r3, [pc, #148]	@ (8000fc0 <menu+0xa40>)
 8000f2a:	781a      	ldrb	r2, [r3, #0]
 8000f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fdc <menu+0xa5c>)
 8000f2e:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8000f30:	4b23      	ldr	r3, [pc, #140]	@ (8000fc0 <menu+0xa40>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d106      	bne.n	8000f46 <menu+0x9c6>
				altLimit = 1;
 8000f38:	4b29      	ldr	r3, [pc, #164]	@ (8000fe0 <menu+0xa60>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8000f3e:	4b28      	ldr	r3, [pc, #160]	@ (8000fe0 <menu+0xa60>)
 8000f40:	781a      	ldrb	r2, [r3, #0]
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <menu+0xa5c>)
 8000f44:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8000f46:	4b27      	ldr	r3, [pc, #156]	@ (8000fe4 <menu+0xa64>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8000f4c:	4b26      	ldr	r3, [pc, #152]	@ (8000fe8 <menu+0xa68>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	f040 80ad 	bne.w	80010b0 <menu+0xb30>
		if(dilSecim == 0) {
 8000f56:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <menu+0xa2c>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d105      	bne.n	8000f6a <menu+0x9ea>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8000f5e:	4a23      	ldr	r2, [pc, #140]	@ (8000fec <menu+0xa6c>)
 8000f60:	2101      	movs	r1, #1
 8000f62:	2001      	movs	r0, #1
 8000f64:	f7ff faab 	bl	80004be <lcd_print>
 8000f68:	e008      	b.n	8000f7c <menu+0x9fc>
		} else if(dilSecim == 1) {
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <menu+0xa2c>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d104      	bne.n	8000f7c <menu+0x9fc>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8000f72:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff0 <menu+0xa70>)
 8000f74:	2101      	movs	r1, #1
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff faa1 	bl	80004be <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff4 <menu+0xa74>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d13d      	bne.n	8001000 <menu+0xa80>
			if(dilSecim == 0) {
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <menu+0xa2c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d105      	bne.n	8000f98 <menu+0xa18>
				lcd_print(2, 1, "Pasif           ");
 8000f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff8 <menu+0xa78>)
 8000f8e:	2101      	movs	r1, #1
 8000f90:	2002      	movs	r0, #2
 8000f92:	f7ff fa94 	bl	80004be <lcd_print>
 8000f96:	e03c      	b.n	8001012 <menu+0xa92>
			} else if(dilSecim == 1) {
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <menu+0xa2c>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d138      	bne.n	8001012 <menu+0xa92>
				lcd_print(2, 1, "Passive         ");
 8000fa0:	4a16      	ldr	r2, [pc, #88]	@ (8000ffc <menu+0xa7c>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	f7ff fa8a 	bl	80004be <lcd_print>
 8000faa:	e032      	b.n	8001012 <menu+0xa92>
 8000fac:	20000ca4 	.word	0x20000ca4
 8000fb0:	0800ccac 	.word	0x0800ccac
 8000fb4:	20000c93 	.word	0x20000c93
 8000fb8:	0800ccc0 	.word	0x0800ccc0
 8000fbc:	0800ccd4 	.word	0x0800ccd4
 8000fc0:	20000c85 	.word	0x20000c85
 8000fc4:	0800cce8 	.word	0x0800cce8
 8000fc8:	0800ccf8 	.word	0x0800ccf8
 8000fcc:	0800cd08 	.word	0x0800cd08
 8000fd0:	0800cd18 	.word	0x0800cd18
 8000fd4:	40010800 	.word	0x40010800
 8000fd8:	20000cb2 	.word	0x20000cb2
 8000fdc:	20000c18 	.word	0x20000c18
 8000fe0:	20000c8a 	.word	0x20000c8a
 8000fe4:	20000caf 	.word	0x20000caf
 8000fe8:	20000c84 	.word	0x20000c84
 8000fec:	0800cd28 	.word	0x0800cd28
 8000ff0:	0800cd3c 	.word	0x0800cd3c
 8000ff4:	20000c88 	.word	0x20000c88
 8000ff8:	0800cd50 	.word	0x0800cd50
 8000ffc:	0800cd64 	.word	0x0800cd64
			}
		} else if(emniyetCercevesi == 1) {
 8001000:	4b95      	ldr	r3, [pc, #596]	@ (8001258 <menu+0xcd8>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d104      	bne.n	8001012 <menu+0xa92>
			lcd_print(2, 1, "OND Safety     ");
 8001008:	4a94      	ldr	r2, [pc, #592]	@ (800125c <menu+0xcdc>)
 800100a:	2101      	movs	r1, #1
 800100c:	2002      	movs	r0, #2
 800100e:	f7ff fa56 	bl	80004be <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001012:	2102      	movs	r1, #2
 8001014:	4892      	ldr	r0, [pc, #584]	@ (8001260 <menu+0xce0>)
 8001016:	f007 fa2d 	bl	8008474 <HAL_GPIO_ReadPin>
 800101a:	4603      	mov	r3, r0
 800101c:	2b01      	cmp	r3, #1
 800101e:	d115      	bne.n	800104c <menu+0xacc>
 8001020:	4b90      	ldr	r3, [pc, #576]	@ (8001264 <menu+0xce4>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	f083 0301 	eor.w	r3, r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00e      	beq.n	800104c <menu+0xacc>
			emniyetCercevesi = emniyetCercevesi + 1;
 800102e:	4b8a      	ldr	r3, [pc, #552]	@ (8001258 <menu+0xcd8>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b88      	ldr	r3, [pc, #544]	@ (8001258 <menu+0xcd8>)
 8001038:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 800103a:	4b87      	ldr	r3, [pc, #540]	@ (8001258 <menu+0xcd8>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d902      	bls.n	8001048 <menu+0xac8>
				emniyetCercevesi = 0;
 8001042:	4b85      	ldr	r3, [pc, #532]	@ (8001258 <menu+0xcd8>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001048:	f003 f9f4 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800104c:	2104      	movs	r1, #4
 800104e:	4884      	ldr	r0, [pc, #528]	@ (8001260 <menu+0xce0>)
 8001050:	f007 fa10 	bl	8008474 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d115      	bne.n	8001086 <menu+0xb06>
 800105a:	4b82      	ldr	r3, [pc, #520]	@ (8001264 <menu+0xce4>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	f083 0301 	eor.w	r3, r3, #1
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00e      	beq.n	8001086 <menu+0xb06>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001068:	4b7b      	ldr	r3, [pc, #492]	@ (8001258 <menu+0xcd8>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	3b01      	subs	r3, #1
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4b79      	ldr	r3, [pc, #484]	@ (8001258 <menu+0xcd8>)
 8001072:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001074:	4b78      	ldr	r3, [pc, #480]	@ (8001258 <menu+0xcd8>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <menu+0xb02>
		   		emniyetCercevesi = 1;
 800107c:	4b76      	ldr	r3, [pc, #472]	@ (8001258 <menu+0xcd8>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001082:	f003 f9d7 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001086:	2108      	movs	r1, #8
 8001088:	4875      	ldr	r0, [pc, #468]	@ (8001260 <menu+0xce0>)
 800108a:	f007 f9f3 	bl	8008474 <HAL_GPIO_ReadPin>
 800108e:	4603      	mov	r3, r0
 8001090:	2b01      	cmp	r3, #1
 8001092:	d10d      	bne.n	80010b0 <menu+0xb30>
 8001094:	4b73      	ldr	r3, [pc, #460]	@ (8001264 <menu+0xce4>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	f083 0301 	eor.w	r3, r3, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d006      	beq.n	80010b0 <menu+0xb30>
			eepromData[2] = emniyetCercevesi;
 80010a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001258 <menu+0xcd8>)
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	4b70      	ldr	r3, [pc, #448]	@ (8001268 <menu+0xce8>)
 80010a8:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 80010aa:	4b70      	ldr	r3, [pc, #448]	@ (800126c <menu+0xcec>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80010b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001270 <menu+0xcf0>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b04      	cmp	r3, #4
 80010b6:	f040 8091 	bne.w	80011dc <menu+0xc5c>
		if(dilSecim == 0) {
 80010ba:	4b6e      	ldr	r3, [pc, #440]	@ (8001274 <menu+0xcf4>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d105      	bne.n	80010ce <menu+0xb4e>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 80010c2:	4a6d      	ldr	r2, [pc, #436]	@ (8001278 <menu+0xcf8>)
 80010c4:	2101      	movs	r1, #1
 80010c6:	2001      	movs	r0, #1
 80010c8:	f7ff f9f9 	bl	80004be <lcd_print>
 80010cc:	e008      	b.n	80010e0 <menu+0xb60>
		} else if(dilSecim == 1) {
 80010ce:	4b69      	ldr	r3, [pc, #420]	@ (8001274 <menu+0xcf4>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d104      	bne.n	80010e0 <menu+0xb60>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 80010d6:	4a69      	ldr	r2, [pc, #420]	@ (800127c <menu+0xcfc>)
 80010d8:	2101      	movs	r1, #1
 80010da:	2001      	movs	r0, #1
 80010dc:	f7ff f9ef 	bl	80004be <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 80010e0:	4b67      	ldr	r3, [pc, #412]	@ (8001280 <menu+0xd00>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d113      	bne.n	8001110 <menu+0xb90>
			if(dilSecim == 0) {
 80010e8:	4b62      	ldr	r3, [pc, #392]	@ (8001274 <menu+0xcf4>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d105      	bne.n	80010fc <menu+0xb7c>
				lcd_print(2, 1, "Pasif           ");
 80010f0:	4a64      	ldr	r2, [pc, #400]	@ (8001284 <menu+0xd04>)
 80010f2:	2101      	movs	r1, #1
 80010f4:	2002      	movs	r0, #2
 80010f6:	f7ff f9e2 	bl	80004be <lcd_print>
 80010fa:	e020      	b.n	800113e <menu+0xbbe>
			} else if(dilSecim == 1) {
 80010fc:	4b5d      	ldr	r3, [pc, #372]	@ (8001274 <menu+0xcf4>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d11c      	bne.n	800113e <menu+0xbbe>
				lcd_print(2, 1, "Passive         ");
 8001104:	4a60      	ldr	r2, [pc, #384]	@ (8001288 <menu+0xd08>)
 8001106:	2101      	movs	r1, #1
 8001108:	2002      	movs	r0, #2
 800110a:	f7ff f9d8 	bl	80004be <lcd_print>
 800110e:	e016      	b.n	800113e <menu+0xbbe>
			}
		} else if(yavaslamaLimit == 1) {
 8001110:	4b5b      	ldr	r3, [pc, #364]	@ (8001280 <menu+0xd00>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d112      	bne.n	800113e <menu+0xbbe>
			if(dilSecim == 0) {
 8001118:	4b56      	ldr	r3, [pc, #344]	@ (8001274 <menu+0xcf4>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d105      	bne.n	800112c <menu+0xbac>
				lcd_print(2, 1, "Aktif           ");
 8001120:	4a5a      	ldr	r2, [pc, #360]	@ (800128c <menu+0xd0c>)
 8001122:	2101      	movs	r1, #1
 8001124:	2002      	movs	r0, #2
 8001126:	f7ff f9ca 	bl	80004be <lcd_print>
 800112a:	e008      	b.n	800113e <menu+0xbbe>
			} else if(dilSecim == 1) {
 800112c:	4b51      	ldr	r3, [pc, #324]	@ (8001274 <menu+0xcf4>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d104      	bne.n	800113e <menu+0xbbe>
				lcd_print(2, 1, "Active          ");
 8001134:	4a56      	ldr	r2, [pc, #344]	@ (8001290 <menu+0xd10>)
 8001136:	2101      	movs	r1, #1
 8001138:	2002      	movs	r0, #2
 800113a:	f7ff f9c0 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800113e:	2102      	movs	r1, #2
 8001140:	4847      	ldr	r0, [pc, #284]	@ (8001260 <menu+0xce0>)
 8001142:	f007 f997 	bl	8008474 <HAL_GPIO_ReadPin>
 8001146:	4603      	mov	r3, r0
 8001148:	2b01      	cmp	r3, #1
 800114a:	d115      	bne.n	8001178 <menu+0xbf8>
 800114c:	4b45      	ldr	r3, [pc, #276]	@ (8001264 <menu+0xce4>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	f083 0301 	eor.w	r3, r3, #1
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00e      	beq.n	8001178 <menu+0xbf8>
			yavaslamaLimit = yavaslamaLimit + 1;
 800115a:	4b49      	ldr	r3, [pc, #292]	@ (8001280 <menu+0xd00>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b47      	ldr	r3, [pc, #284]	@ (8001280 <menu+0xd00>)
 8001164:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001166:	4b46      	ldr	r3, [pc, #280]	@ (8001280 <menu+0xd00>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d902      	bls.n	8001174 <menu+0xbf4>
				yavaslamaLimit = 0;
 800116e:	4b44      	ldr	r3, [pc, #272]	@ (8001280 <menu+0xd00>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001174:	f003 f95e 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001178:	2104      	movs	r1, #4
 800117a:	4839      	ldr	r0, [pc, #228]	@ (8001260 <menu+0xce0>)
 800117c:	f007 f97a 	bl	8008474 <HAL_GPIO_ReadPin>
 8001180:	4603      	mov	r3, r0
 8001182:	2b01      	cmp	r3, #1
 8001184:	d115      	bne.n	80011b2 <menu+0xc32>
 8001186:	4b37      	ldr	r3, [pc, #220]	@ (8001264 <menu+0xce4>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	f083 0301 	eor.w	r3, r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00e      	beq.n	80011b2 <menu+0xc32>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001194:	4b3a      	ldr	r3, [pc, #232]	@ (8001280 <menu+0xd00>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	3b01      	subs	r3, #1
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <menu+0xd00>)
 800119e:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80011a0:	4b37      	ldr	r3, [pc, #220]	@ (8001280 <menu+0xd00>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <menu+0xc2e>
		   		yavaslamaLimit = 1;
 80011a8:	4b35      	ldr	r3, [pc, #212]	@ (8001280 <menu+0xd00>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80011ae:	f003 f941 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80011b2:	2108      	movs	r1, #8
 80011b4:	482a      	ldr	r0, [pc, #168]	@ (8001260 <menu+0xce0>)
 80011b6:	f007 f95d 	bl	8008474 <HAL_GPIO_ReadPin>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d10d      	bne.n	80011dc <menu+0xc5c>
 80011c0:	4b28      	ldr	r3, [pc, #160]	@ (8001264 <menu+0xce4>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	f083 0301 	eor.w	r3, r3, #1
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d006      	beq.n	80011dc <menu+0xc5c>
			eepromData[4] = yavaslamaLimit;
 80011ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001280 <menu+0xd00>)
 80011d0:	781a      	ldrb	r2, [r3, #0]
 80011d2:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <menu+0xce8>)
 80011d4:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80011d6:	4b25      	ldr	r3, [pc, #148]	@ (800126c <menu+0xcec>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80011dc:	4b24      	ldr	r3, [pc, #144]	@ (8001270 <menu+0xcf0>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b05      	cmp	r3, #5
 80011e2:	f040 80dd 	bne.w	80013a0 <menu+0xe20>
		if(dilSecim == 0) {
 80011e6:	4b23      	ldr	r3, [pc, #140]	@ (8001274 <menu+0xcf4>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d105      	bne.n	80011fa <menu+0xc7a>
			lcd_print(1, 1, "ALT LIMIT       ");
 80011ee:	4a29      	ldr	r2, [pc, #164]	@ (8001294 <menu+0xd14>)
 80011f0:	2101      	movs	r1, #1
 80011f2:	2001      	movs	r0, #1
 80011f4:	f7ff f963 	bl	80004be <lcd_print>
 80011f8:	e008      	b.n	800120c <menu+0xc8c>
		} else if(dilSecim == 1) {
 80011fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001274 <menu+0xcf4>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d104      	bne.n	800120c <menu+0xc8c>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001202:	4a25      	ldr	r2, [pc, #148]	@ (8001298 <menu+0xd18>)
 8001204:	2101      	movs	r1, #1
 8001206:	2001      	movs	r0, #1
 8001208:	f7ff f959 	bl	80004be <lcd_print>
		}

		if(altLimit == 0) {
 800120c:	4b23      	ldr	r3, [pc, #140]	@ (800129c <menu+0xd1c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d113      	bne.n	800123c <menu+0xcbc>
			if(dilSecim == 0) {
 8001214:	4b17      	ldr	r3, [pc, #92]	@ (8001274 <menu+0xcf4>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d105      	bne.n	8001228 <menu+0xca8>
				lcd_print(2, 1, "Pasif           ");
 800121c:	4a19      	ldr	r2, [pc, #100]	@ (8001284 <menu+0xd04>)
 800121e:	2101      	movs	r1, #1
 8001220:	2002      	movs	r0, #2
 8001222:	f7ff f94c 	bl	80004be <lcd_print>
 8001226:	e044      	b.n	80012b2 <menu+0xd32>
			} else if(dilSecim == 1) {
 8001228:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <menu+0xcf4>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d140      	bne.n	80012b2 <menu+0xd32>
				lcd_print(2, 1, "Passive         ");
 8001230:	4a15      	ldr	r2, [pc, #84]	@ (8001288 <menu+0xd08>)
 8001232:	2101      	movs	r1, #1
 8001234:	2002      	movs	r0, #2
 8001236:	f7ff f942 	bl	80004be <lcd_print>
 800123a:	e03a      	b.n	80012b2 <menu+0xd32>
			}
		} else if(altLimit == 1) {
 800123c:	4b17      	ldr	r3, [pc, #92]	@ (800129c <menu+0xd1c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d136      	bne.n	80012b2 <menu+0xd32>
			if(dilSecim == 0){
 8001244:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <menu+0xcf4>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d129      	bne.n	80012a0 <menu+0xd20>
				lcd_print(2, 1, "Aktif           ");
 800124c:	4a0f      	ldr	r2, [pc, #60]	@ (800128c <menu+0xd0c>)
 800124e:	2101      	movs	r1, #1
 8001250:	2002      	movs	r0, #2
 8001252:	f7ff f934 	bl	80004be <lcd_print>
 8001256:	e02c      	b.n	80012b2 <menu+0xd32>
 8001258:	20000c88 	.word	0x20000c88
 800125c:	0800cd78 	.word	0x0800cd78
 8001260:	40010800 	.word	0x40010800
 8001264:	20000cb2 	.word	0x20000cb2
 8001268:	20000c18 	.word	0x20000c18
 800126c:	20000caf 	.word	0x20000caf
 8001270:	20000c84 	.word	0x20000c84
 8001274:	20000ca4 	.word	0x20000ca4
 8001278:	0800cd88 	.word	0x0800cd88
 800127c:	0800cd9c 	.word	0x0800cd9c
 8001280:	20000c89 	.word	0x20000c89
 8001284:	0800cd50 	.word	0x0800cd50
 8001288:	0800cd64 	.word	0x0800cd64
 800128c:	0800cdb0 	.word	0x0800cdb0
 8001290:	0800cdc4 	.word	0x0800cdc4
 8001294:	0800cdd8 	.word	0x0800cdd8
 8001298:	0800cdec 	.word	0x0800cdec
 800129c:	20000c8a 	.word	0x20000c8a
			} else if(dilSecim == 1){
 80012a0:	4b92      	ldr	r3, [pc, #584]	@ (80014ec <menu+0xf6c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d104      	bne.n	80012b2 <menu+0xd32>
				lcd_print(2, 1, "Active          ");
 80012a8:	4a91      	ldr	r2, [pc, #580]	@ (80014f0 <menu+0xf70>)
 80012aa:	2101      	movs	r1, #1
 80012ac:	2002      	movs	r0, #2
 80012ae:	f7ff f906 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80012b2:	2102      	movs	r1, #2
 80012b4:	488f      	ldr	r0, [pc, #572]	@ (80014f4 <menu+0xf74>)
 80012b6:	f007 f8dd 	bl	8008474 <HAL_GPIO_ReadPin>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d119      	bne.n	80012f4 <menu+0xd74>
 80012c0:	4b8d      	ldr	r3, [pc, #564]	@ (80014f8 <menu+0xf78>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	f083 0301 	eor.w	r3, r3, #1
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d012      	beq.n	80012f4 <menu+0xd74>
 80012ce:	4b8b      	ldr	r3, [pc, #556]	@ (80014fc <menu+0xf7c>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10e      	bne.n	80012f4 <menu+0xd74>
			altLimit = altLimit + 1;
 80012d6:	4b8a      	ldr	r3, [pc, #552]	@ (8001500 <menu+0xf80>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b88      	ldr	r3, [pc, #544]	@ (8001500 <menu+0xf80>)
 80012e0:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80012e2:	4b87      	ldr	r3, [pc, #540]	@ (8001500 <menu+0xf80>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d902      	bls.n	80012f0 <menu+0xd70>
				altLimit = 0;
 80012ea:	4b85      	ldr	r3, [pc, #532]	@ (8001500 <menu+0xf80>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80012f0:	f003 f8a0 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80012f4:	2104      	movs	r1, #4
 80012f6:	487f      	ldr	r0, [pc, #508]	@ (80014f4 <menu+0xf74>)
 80012f8:	f007 f8bc 	bl	8008474 <HAL_GPIO_ReadPin>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d119      	bne.n	8001336 <menu+0xdb6>
 8001302:	4b7d      	ldr	r3, [pc, #500]	@ (80014f8 <menu+0xf78>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	f083 0301 	eor.w	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	d012      	beq.n	8001336 <menu+0xdb6>
 8001310:	4b7a      	ldr	r3, [pc, #488]	@ (80014fc <menu+0xf7c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10e      	bne.n	8001336 <menu+0xdb6>
			altLimit = altLimit - 1;
 8001318:	4b79      	ldr	r3, [pc, #484]	@ (8001500 <menu+0xf80>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	3b01      	subs	r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b77      	ldr	r3, [pc, #476]	@ (8001500 <menu+0xf80>)
 8001322:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001324:	4b76      	ldr	r3, [pc, #472]	@ (8001500 <menu+0xf80>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <menu+0xdb2>
		   		altLimit = 1;
 800132c:	4b74      	ldr	r3, [pc, #464]	@ (8001500 <menu+0xf80>)
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001332:	f003 f87f 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001336:	2108      	movs	r1, #8
 8001338:	486e      	ldr	r0, [pc, #440]	@ (80014f4 <menu+0xf74>)
 800133a:	f007 f89b 	bl	8008474 <HAL_GPIO_ReadPin>
 800133e:	4603      	mov	r3, r0
 8001340:	2b01      	cmp	r3, #1
 8001342:	d12d      	bne.n	80013a0 <menu+0xe20>
 8001344:	4b6c      	ldr	r3, [pc, #432]	@ (80014f8 <menu+0xf78>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	f083 0301 	eor.w	r3, r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d026      	beq.n	80013a0 <menu+0xe20>
			eepromData[5] = altLimit;
 8001352:	4b6b      	ldr	r3, [pc, #428]	@ (8001500 <menu+0xf80>)
 8001354:	781a      	ldrb	r2, [r3, #0]
 8001356:	4b6b      	ldr	r3, [pc, #428]	@ (8001504 <menu+0xf84>)
 8001358:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800135a:	4b69      	ldr	r3, [pc, #420]	@ (8001500 <menu+0xf80>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d110      	bne.n	8001384 <menu+0xe04>
 8001362:	4b69      	ldr	r3, [pc, #420]	@ (8001508 <menu+0xf88>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <menu+0xdf2>
 800136a:	4b67      	ldr	r3, [pc, #412]	@ (8001508 <menu+0xf88>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d108      	bne.n	8001384 <menu+0xe04>
				kapiTablaAcKonum = 3;
 8001372:	4b65      	ldr	r3, [pc, #404]	@ (8001508 <menu+0xf88>)
 8001374:	2203      	movs	r2, #3
 8001376:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001378:	4b63      	ldr	r3, [pc, #396]	@ (8001508 <menu+0xf88>)
 800137a:	781a      	ldrb	r2, [r3, #0]
 800137c:	4b61      	ldr	r3, [pc, #388]	@ (8001504 <menu+0xf84>)
 800137e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001382:	e00a      	b.n	800139a <menu+0xe1a>
			} else if(altLimit == 0) {
 8001384:	4b5e      	ldr	r3, [pc, #376]	@ (8001500 <menu+0xf80>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d106      	bne.n	800139a <menu+0xe1a>
				platformSilindirTipi = 0;
 800138c:	4b5f      	ldr	r3, [pc, #380]	@ (800150c <menu+0xf8c>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001392:	4b5e      	ldr	r3, [pc, #376]	@ (800150c <menu+0xf8c>)
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	4b5b      	ldr	r3, [pc, #364]	@ (8001504 <menu+0xf84>)
 8001398:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800139a:	4b5d      	ldr	r3, [pc, #372]	@ (8001510 <menu+0xf90>)
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80013a0:	4b5c      	ldr	r3, [pc, #368]	@ (8001514 <menu+0xf94>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b06      	cmp	r3, #6
 80013a6:	f040 8091 	bne.w	80014cc <menu+0xf4c>
		if(dilSecim == 0) {
 80013aa:	4b50      	ldr	r3, [pc, #320]	@ (80014ec <menu+0xf6c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d105      	bne.n	80013be <menu+0xe3e>
			lcd_print(1, 1, "BASINC SALTERI ");
 80013b2:	4a59      	ldr	r2, [pc, #356]	@ (8001518 <menu+0xf98>)
 80013b4:	2101      	movs	r1, #1
 80013b6:	2001      	movs	r0, #1
 80013b8:	f7ff f881 	bl	80004be <lcd_print>
 80013bc:	e008      	b.n	80013d0 <menu+0xe50>
		} else if(dilSecim == 1){
 80013be:	4b4b      	ldr	r3, [pc, #300]	@ (80014ec <menu+0xf6c>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d104      	bne.n	80013d0 <menu+0xe50>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80013c6:	4a55      	ldr	r2, [pc, #340]	@ (800151c <menu+0xf9c>)
 80013c8:	2101      	movs	r1, #1
 80013ca:	2001      	movs	r0, #1
 80013cc:	f7ff f877 	bl	80004be <lcd_print>
		}
		if(basincSalteri == 0){
 80013d0:	4b53      	ldr	r3, [pc, #332]	@ (8001520 <menu+0xfa0>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d113      	bne.n	8001400 <menu+0xe80>
			if(dilSecim == 0) {
 80013d8:	4b44      	ldr	r3, [pc, #272]	@ (80014ec <menu+0xf6c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d105      	bne.n	80013ec <menu+0xe6c>
				lcd_print(2, 1, "Pasif           ");
 80013e0:	4a50      	ldr	r2, [pc, #320]	@ (8001524 <menu+0xfa4>)
 80013e2:	2101      	movs	r1, #1
 80013e4:	2002      	movs	r0, #2
 80013e6:	f7ff f86a 	bl	80004be <lcd_print>
 80013ea:	e020      	b.n	800142e <menu+0xeae>
			} else if(dilSecim == 1){
 80013ec:	4b3f      	ldr	r3, [pc, #252]	@ (80014ec <menu+0xf6c>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d11c      	bne.n	800142e <menu+0xeae>
				lcd_print(2, 1, "Passive         ");
 80013f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001528 <menu+0xfa8>)
 80013f6:	2101      	movs	r1, #1
 80013f8:	2002      	movs	r0, #2
 80013fa:	f7ff f860 	bl	80004be <lcd_print>
 80013fe:	e016      	b.n	800142e <menu+0xeae>
			}
		} else if(basincSalteri == 1) {
 8001400:	4b47      	ldr	r3, [pc, #284]	@ (8001520 <menu+0xfa0>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d112      	bne.n	800142e <menu+0xeae>
			if(dilSecim == 0) {
 8001408:	4b38      	ldr	r3, [pc, #224]	@ (80014ec <menu+0xf6c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d105      	bne.n	800141c <menu+0xe9c>
				lcd_print(2, 1, "Aktif           ");
 8001410:	4a46      	ldr	r2, [pc, #280]	@ (800152c <menu+0xfac>)
 8001412:	2101      	movs	r1, #1
 8001414:	2002      	movs	r0, #2
 8001416:	f7ff f852 	bl	80004be <lcd_print>
 800141a:	e008      	b.n	800142e <menu+0xeae>
			} else if(dilSecim == 1) {
 800141c:	4b33      	ldr	r3, [pc, #204]	@ (80014ec <menu+0xf6c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d104      	bne.n	800142e <menu+0xeae>
				lcd_print(2, 1, "Active          ");
 8001424:	4a32      	ldr	r2, [pc, #200]	@ (80014f0 <menu+0xf70>)
 8001426:	2101      	movs	r1, #1
 8001428:	2002      	movs	r0, #2
 800142a:	f7ff f848 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800142e:	2102      	movs	r1, #2
 8001430:	4830      	ldr	r0, [pc, #192]	@ (80014f4 <menu+0xf74>)
 8001432:	f007 f81f 	bl	8008474 <HAL_GPIO_ReadPin>
 8001436:	4603      	mov	r3, r0
 8001438:	2b01      	cmp	r3, #1
 800143a:	d115      	bne.n	8001468 <menu+0xee8>
 800143c:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <menu+0xf78>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	f083 0301 	eor.w	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00e      	beq.n	8001468 <menu+0xee8>
			basincSalteri = basincSalteri + 1;
 800144a:	4b35      	ldr	r3, [pc, #212]	@ (8001520 <menu+0xfa0>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	3301      	adds	r3, #1
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4b33      	ldr	r3, [pc, #204]	@ (8001520 <menu+0xfa0>)
 8001454:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001456:	4b32      	ldr	r3, [pc, #200]	@ (8001520 <menu+0xfa0>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d902      	bls.n	8001464 <menu+0xee4>
				basincSalteri = 0;
 800145e:	4b30      	ldr	r3, [pc, #192]	@ (8001520 <menu+0xfa0>)
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001464:	f002 ffe6 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001468:	2104      	movs	r1, #4
 800146a:	4822      	ldr	r0, [pc, #136]	@ (80014f4 <menu+0xf74>)
 800146c:	f007 f802 	bl	8008474 <HAL_GPIO_ReadPin>
 8001470:	4603      	mov	r3, r0
 8001472:	2b01      	cmp	r3, #1
 8001474:	d115      	bne.n	80014a2 <menu+0xf22>
 8001476:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <menu+0xf78>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	f083 0301 	eor.w	r3, r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00e      	beq.n	80014a2 <menu+0xf22>
			basincSalteri = basincSalteri - 1;
 8001484:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <menu+0xfa0>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	3b01      	subs	r3, #1
 800148a:	b2da      	uxtb	r2, r3
 800148c:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <menu+0xfa0>)
 800148e:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001490:	4b23      	ldr	r3, [pc, #140]	@ (8001520 <menu+0xfa0>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <menu+0xf1e>
		   		basincSalteri = 1;
 8001498:	4b21      	ldr	r3, [pc, #132]	@ (8001520 <menu+0xfa0>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800149e:	f002 ffc9 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80014a2:	2108      	movs	r1, #8
 80014a4:	4813      	ldr	r0, [pc, #76]	@ (80014f4 <menu+0xf74>)
 80014a6:	f006 ffe5 	bl	8008474 <HAL_GPIO_ReadPin>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d10d      	bne.n	80014cc <menu+0xf4c>
 80014b0:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <menu+0xf78>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	f083 0301 	eor.w	r3, r3, #1
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <menu+0xf4c>
			eepromData[6] = basincSalteri;
 80014be:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <menu+0xfa0>)
 80014c0:	781a      	ldrb	r2, [r3, #0]
 80014c2:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <menu+0xf84>)
 80014c4:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80014c6:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <menu+0xf90>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80014cc:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <menu+0xf94>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b07      	cmp	r3, #7
 80014d2:	f040 80f1 	bne.w	80016b8 <menu+0x1138>
		if(dilSecim == 0) {
 80014d6:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <menu+0xf6c>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d12a      	bne.n	8001534 <menu+0xfb4>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80014de:	4a14      	ldr	r2, [pc, #80]	@ (8001530 <menu+0xfb0>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	2001      	movs	r0, #1
 80014e4:	f7fe ffeb 	bl	80004be <lcd_print>
 80014e8:	e02d      	b.n	8001546 <menu+0xfc6>
 80014ea:	bf00      	nop
 80014ec:	20000ca4 	.word	0x20000ca4
 80014f0:	0800cdc4 	.word	0x0800cdc4
 80014f4:	40010800 	.word	0x40010800
 80014f8:	20000cb2 	.word	0x20000cb2
 80014fc:	20000c85 	.word	0x20000c85
 8001500:	20000c8a 	.word	0x20000c8a
 8001504:	20000c18 	.word	0x20000c18
 8001508:	20000c91 	.word	0x20000c91
 800150c:	20000c97 	.word	0x20000c97
 8001510:	20000caf 	.word	0x20000caf
 8001514:	20000c84 	.word	0x20000c84
 8001518:	0800ce00 	.word	0x0800ce00
 800151c:	0800ce10 	.word	0x0800ce10
 8001520:	20000c8b 	.word	0x20000c8b
 8001524:	0800cd50 	.word	0x0800cd50
 8001528:	0800cd64 	.word	0x0800cd64
 800152c:	0800cdb0 	.word	0x0800cdb0
 8001530:	0800ce20 	.word	0x0800ce20
		} else if(dilSecim == 1){
 8001534:	4b7f      	ldr	r3, [pc, #508]	@ (8001734 <menu+0x11b4>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d104      	bne.n	8001546 <menu+0xfc6>
			lcd_print(1, 1, "DOOR SELECTION     ");
 800153c:	4a7e      	ldr	r2, [pc, #504]	@ (8001738 <menu+0x11b8>)
 800153e:	2101      	movs	r1, #1
 8001540:	2001      	movs	r0, #1
 8001542:	f7fe ffbc 	bl	80004be <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8001546:	4b7d      	ldr	r3, [pc, #500]	@ (800173c <menu+0x11bc>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d113      	bne.n	8001576 <menu+0xff6>
			if(dilSecim == 0) {
 800154e:	4b79      	ldr	r3, [pc, #484]	@ (8001734 <menu+0x11b4>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d105      	bne.n	8001562 <menu+0xfe2>
				lcd_print(2, 1, "Pasif           ");
 8001556:	4a7a      	ldr	r2, [pc, #488]	@ (8001740 <menu+0x11c0>)
 8001558:	2101      	movs	r1, #1
 800155a:	2002      	movs	r0, #2
 800155c:	f7fe ffaf 	bl	80004be <lcd_print>
 8001560:	e050      	b.n	8001604 <menu+0x1084>
			} else if(dilSecim == 1){
 8001562:	4b74      	ldr	r3, [pc, #464]	@ (8001734 <menu+0x11b4>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d14c      	bne.n	8001604 <menu+0x1084>
				lcd_print(2, 1, "Passive         ");
 800156a:	4a76      	ldr	r2, [pc, #472]	@ (8001744 <menu+0x11c4>)
 800156c:	2101      	movs	r1, #1
 800156e:	2002      	movs	r0, #2
 8001570:	f7fe ffa5 	bl	80004be <lcd_print>
 8001574:	e046      	b.n	8001604 <menu+0x1084>
			}
		} else if(kapiSecimleri == 1) {
 8001576:	4b71      	ldr	r3, [pc, #452]	@ (800173c <menu+0x11bc>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d113      	bne.n	80015a6 <menu+0x1026>
			if(dilSecim == 0) {
 800157e:	4b6d      	ldr	r3, [pc, #436]	@ (8001734 <menu+0x11b4>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d105      	bne.n	8001592 <menu+0x1012>
				lcd_print(2, 1, "Kat kapisi aktif");
 8001586:	4a70      	ldr	r2, [pc, #448]	@ (8001748 <menu+0x11c8>)
 8001588:	2101      	movs	r1, #1
 800158a:	2002      	movs	r0, #2
 800158c:	f7fe ff97 	bl	80004be <lcd_print>
 8001590:	e038      	b.n	8001604 <menu+0x1084>
			} else if(dilSecim == 1) {
 8001592:	4b68      	ldr	r3, [pc, #416]	@ (8001734 <menu+0x11b4>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d134      	bne.n	8001604 <menu+0x1084>
				lcd_print(2, 1, "Floor door act  ");
 800159a:	4a6c      	ldr	r2, [pc, #432]	@ (800174c <menu+0x11cc>)
 800159c:	2101      	movs	r1, #1
 800159e:	2002      	movs	r0, #2
 80015a0:	f7fe ff8d 	bl	80004be <lcd_print>
 80015a4:	e02e      	b.n	8001604 <menu+0x1084>
			}
		} else if(kapiSecimleri == 2){
 80015a6:	4b65      	ldr	r3, [pc, #404]	@ (800173c <menu+0x11bc>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d113      	bne.n	80015d6 <menu+0x1056>
			if(dilSecim == 0) {
 80015ae:	4b61      	ldr	r3, [pc, #388]	@ (8001734 <menu+0x11b4>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d105      	bne.n	80015c2 <menu+0x1042>
				lcd_print(2, 1, "Tabla kapi aktif");
 80015b6:	4a66      	ldr	r2, [pc, #408]	@ (8001750 <menu+0x11d0>)
 80015b8:	2101      	movs	r1, #1
 80015ba:	2002      	movs	r0, #2
 80015bc:	f7fe ff7f 	bl	80004be <lcd_print>
 80015c0:	e020      	b.n	8001604 <menu+0x1084>
			} else if(dilSecim == 1) {
 80015c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001734 <menu+0x11b4>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d11c      	bne.n	8001604 <menu+0x1084>
				lcd_print(2, 1, "Pltfrm door act ");
 80015ca:	4a62      	ldr	r2, [pc, #392]	@ (8001754 <menu+0x11d4>)
 80015cc:	2101      	movs	r1, #1
 80015ce:	2002      	movs	r0, #2
 80015d0:	f7fe ff75 	bl	80004be <lcd_print>
 80015d4:	e016      	b.n	8001604 <menu+0x1084>
			}
		} else if(kapiSecimleri == 3){
 80015d6:	4b59      	ldr	r3, [pc, #356]	@ (800173c <menu+0x11bc>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d112      	bne.n	8001604 <menu+0x1084>
			if(dilSecim == 0) {
 80015de:	4b55      	ldr	r3, [pc, #340]	@ (8001734 <menu+0x11b4>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d105      	bne.n	80015f2 <menu+0x1072>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80015e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001758 <menu+0x11d8>)
 80015e8:	2101      	movs	r1, #1
 80015ea:	2002      	movs	r0, #2
 80015ec:	f7fe ff67 	bl	80004be <lcd_print>
 80015f0:	e008      	b.n	8001604 <menu+0x1084>
			} else if(dilSecim == 1){
 80015f2:	4b50      	ldr	r3, [pc, #320]	@ (8001734 <menu+0x11b4>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d104      	bne.n	8001604 <menu+0x1084>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80015fa:	4a58      	ldr	r2, [pc, #352]	@ (800175c <menu+0x11dc>)
 80015fc:	2101      	movs	r1, #1
 80015fe:	2002      	movs	r0, #2
 8001600:	f7fe ff5d 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001604:	2102      	movs	r1, #2
 8001606:	4856      	ldr	r0, [pc, #344]	@ (8001760 <menu+0x11e0>)
 8001608:	f006 ff34 	bl	8008474 <HAL_GPIO_ReadPin>
 800160c:	4603      	mov	r3, r0
 800160e:	2b01      	cmp	r3, #1
 8001610:	d115      	bne.n	800163e <menu+0x10be>
 8001612:	4b54      	ldr	r3, [pc, #336]	@ (8001764 <menu+0x11e4>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	f083 0301 	eor.w	r3, r3, #1
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00e      	beq.n	800163e <menu+0x10be>
			kapiSecimleri = kapiSecimleri + 1;
 8001620:	4b46      	ldr	r3, [pc, #280]	@ (800173c <menu+0x11bc>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	b2da      	uxtb	r2, r3
 8001628:	4b44      	ldr	r3, [pc, #272]	@ (800173c <menu+0x11bc>)
 800162a:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800162c:	4b43      	ldr	r3, [pc, #268]	@ (800173c <menu+0x11bc>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b03      	cmp	r3, #3
 8001632:	d902      	bls.n	800163a <menu+0x10ba>
				kapiSecimleri = 0;
 8001634:	4b41      	ldr	r3, [pc, #260]	@ (800173c <menu+0x11bc>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800163a:	f002 fefb 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800163e:	2104      	movs	r1, #4
 8001640:	4847      	ldr	r0, [pc, #284]	@ (8001760 <menu+0x11e0>)
 8001642:	f006 ff17 	bl	8008474 <HAL_GPIO_ReadPin>
 8001646:	4603      	mov	r3, r0
 8001648:	2b01      	cmp	r3, #1
 800164a:	d115      	bne.n	8001678 <menu+0x10f8>
 800164c:	4b45      	ldr	r3, [pc, #276]	@ (8001764 <menu+0x11e4>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	f083 0301 	eor.w	r3, r3, #1
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00e      	beq.n	8001678 <menu+0x10f8>
			kapiSecimleri = kapiSecimleri - 1;
 800165a:	4b38      	ldr	r3, [pc, #224]	@ (800173c <menu+0x11bc>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	3b01      	subs	r3, #1
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b36      	ldr	r3, [pc, #216]	@ (800173c <menu+0x11bc>)
 8001664:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8001666:	4b35      	ldr	r3, [pc, #212]	@ (800173c <menu+0x11bc>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b04      	cmp	r3, #4
 800166c:	d902      	bls.n	8001674 <menu+0x10f4>
		   		kapiSecimleri = 3;
 800166e:	4b33      	ldr	r3, [pc, #204]	@ (800173c <menu+0x11bc>)
 8001670:	2203      	movs	r2, #3
 8001672:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001674:	f002 fede 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001678:	2108      	movs	r1, #8
 800167a:	4839      	ldr	r0, [pc, #228]	@ (8001760 <menu+0x11e0>)
 800167c:	f006 fefa 	bl	8008474 <HAL_GPIO_ReadPin>
 8001680:	4603      	mov	r3, r0
 8001682:	2b01      	cmp	r3, #1
 8001684:	d118      	bne.n	80016b8 <menu+0x1138>
 8001686:	4b37      	ldr	r3, [pc, #220]	@ (8001764 <menu+0x11e4>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	f083 0301 	eor.w	r3, r3, #1
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d011      	beq.n	80016b8 <menu+0x1138>
			eepromData[7] = kapiSecimleri;
 8001694:	4b29      	ldr	r3, [pc, #164]	@ (800173c <menu+0x11bc>)
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	4b33      	ldr	r3, [pc, #204]	@ (8001768 <menu+0x11e8>)
 800169a:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800169c:	4b27      	ldr	r3, [pc, #156]	@ (800173c <menu+0x11bc>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d006      	beq.n	80016b2 <menu+0x1132>
				altLimit = 1;
 80016a4:	4b31      	ldr	r3, [pc, #196]	@ (800176c <menu+0x11ec>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80016aa:	4b30      	ldr	r3, [pc, #192]	@ (800176c <menu+0x11ec>)
 80016ac:	781a      	ldrb	r2, [r3, #0]
 80016ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001768 <menu+0x11e8>)
 80016b0:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80016b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001770 <menu+0x11f0>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80016b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001774 <menu+0x11f4>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b08      	cmp	r3, #8
 80016be:	f040 80c0 	bne.w	8001842 <menu+0x12c2>
		if(dilSecim == 0) {
 80016c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001734 <menu+0x11b4>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d105      	bne.n	80016d6 <menu+0x1156>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80016ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001778 <menu+0x11f8>)
 80016cc:	2101      	movs	r1, #1
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7fe fef5 	bl	80004be <lcd_print>
 80016d4:	e008      	b.n	80016e8 <menu+0x1168>
		} else if(dilSecim == 1) {
 80016d6:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <menu+0x11b4>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d104      	bne.n	80016e8 <menu+0x1168>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80016de:	4a27      	ldr	r2, [pc, #156]	@ (800177c <menu+0x11fc>)
 80016e0:	2101      	movs	r1, #1
 80016e2:	2001      	movs	r0, #1
 80016e4:	f7fe feeb 	bl	80004be <lcd_print>
		}

		if(kapiAcTipi == 0){
 80016e8:	4b25      	ldr	r3, [pc, #148]	@ (8001780 <menu+0x1200>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d113      	bne.n	8001718 <menu+0x1198>
			if(dilSecim == 0) {
 80016f0:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <menu+0x11b4>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d105      	bne.n	8001704 <menu+0x1184>
				lcd_print(2, 1, "Kapi butonu ESP");
 80016f8:	4a22      	ldr	r2, [pc, #136]	@ (8001784 <menu+0x1204>)
 80016fa:	2101      	movs	r1, #1
 80016fc:	2002      	movs	r0, #2
 80016fe:	f7fe fede 	bl	80004be <lcd_print>
 8001702:	e04e      	b.n	80017a2 <menu+0x1222>
			} else if(dilSecim == 1) {
 8001704:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <menu+0x11b4>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d14a      	bne.n	80017a2 <menu+0x1222>
				lcd_print(2, 1, "Door Button ESP");
 800170c:	4a1e      	ldr	r2, [pc, #120]	@ (8001788 <menu+0x1208>)
 800170e:	2101      	movs	r1, #1
 8001710:	2002      	movs	r0, #2
 8001712:	f7fe fed4 	bl	80004be <lcd_print>
 8001716:	e044      	b.n	80017a2 <menu+0x1222>
			}
		} else if(kapiAcTipi == 1){
 8001718:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <menu+0x1200>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d140      	bne.n	80017a2 <menu+0x1222>
			if(dilSecim == 0){
 8001720:	4b04      	ldr	r3, [pc, #16]	@ (8001734 <menu+0x11b4>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d133      	bne.n	8001790 <menu+0x1210>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8001728:	4a18      	ldr	r2, [pc, #96]	@ (800178c <menu+0x120c>)
 800172a:	2101      	movs	r1, #1
 800172c:	2002      	movs	r0, #2
 800172e:	f7fe fec6 	bl	80004be <lcd_print>
 8001732:	e036      	b.n	80017a2 <menu+0x1222>
 8001734:	20000ca4 	.word	0x20000ca4
 8001738:	0800ce34 	.word	0x0800ce34
 800173c:	20000c8c 	.word	0x20000c8c
 8001740:	0800cd50 	.word	0x0800cd50
 8001744:	0800cd64 	.word	0x0800cd64
 8001748:	0800ce48 	.word	0x0800ce48
 800174c:	0800ce5c 	.word	0x0800ce5c
 8001750:	0800ce70 	.word	0x0800ce70
 8001754:	0800ce84 	.word	0x0800ce84
 8001758:	0800ce98 	.word	0x0800ce98
 800175c:	0800ceac 	.word	0x0800ceac
 8001760:	40010800 	.word	0x40010800
 8001764:	20000cb2 	.word	0x20000cb2
 8001768:	20000c18 	.word	0x20000c18
 800176c:	20000c8a 	.word	0x20000c8a
 8001770:	20000caf 	.word	0x20000caf
 8001774:	20000c84 	.word	0x20000c84
 8001778:	0800cec0 	.word	0x0800cec0
 800177c:	0800ced4 	.word	0x0800ced4
 8001780:	20000c90 	.word	0x20000c90
 8001784:	0800cee8 	.word	0x0800cee8
 8001788:	0800cef8 	.word	0x0800cef8
 800178c:	0800cf08 	.word	0x0800cf08
			} else if(dilSecim == 1){
 8001790:	4b7f      	ldr	r3, [pc, #508]	@ (8001990 <menu+0x1410>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d104      	bne.n	80017a2 <menu+0x1222>
				lcd_print(2, 1, "Floor button EXT");
 8001798:	4a7e      	ldr	r2, [pc, #504]	@ (8001994 <menu+0x1414>)
 800179a:	2101      	movs	r1, #1
 800179c:	2002      	movs	r0, #2
 800179e:	f7fe fe8e 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80017a2:	2102      	movs	r1, #2
 80017a4:	487c      	ldr	r0, [pc, #496]	@ (8001998 <menu+0x1418>)
 80017a6:	f006 fe65 	bl	8008474 <HAL_GPIO_ReadPin>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d115      	bne.n	80017dc <menu+0x125c>
 80017b0:	4b7a      	ldr	r3, [pc, #488]	@ (800199c <menu+0x141c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	f083 0301 	eor.w	r3, r3, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00e      	beq.n	80017dc <menu+0x125c>
			kapiAcTipi = kapiAcTipi + 1;
 80017be:	4b78      	ldr	r3, [pc, #480]	@ (80019a0 <menu+0x1420>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4b76      	ldr	r3, [pc, #472]	@ (80019a0 <menu+0x1420>)
 80017c8:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80017ca:	4b75      	ldr	r3, [pc, #468]	@ (80019a0 <menu+0x1420>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d902      	bls.n	80017d8 <menu+0x1258>
				kapiAcTipi = 0;
 80017d2:	4b73      	ldr	r3, [pc, #460]	@ (80019a0 <menu+0x1420>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80017d8:	f002 fe2c 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80017dc:	2104      	movs	r1, #4
 80017de:	486e      	ldr	r0, [pc, #440]	@ (8001998 <menu+0x1418>)
 80017e0:	f006 fe48 	bl	8008474 <HAL_GPIO_ReadPin>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d115      	bne.n	8001816 <menu+0x1296>
 80017ea:	4b6c      	ldr	r3, [pc, #432]	@ (800199c <menu+0x141c>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	f083 0301 	eor.w	r3, r3, #1
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00e      	beq.n	8001816 <menu+0x1296>
			kapiAcTipi = kapiAcTipi - 1;
 80017f8:	4b69      	ldr	r3, [pc, #420]	@ (80019a0 <menu+0x1420>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b67      	ldr	r3, [pc, #412]	@ (80019a0 <menu+0x1420>)
 8001802:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8001804:	4b66      	ldr	r3, [pc, #408]	@ (80019a0 <menu+0x1420>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <menu+0x1292>
		   		kapiAcTipi = 1;
 800180c:	4b64      	ldr	r3, [pc, #400]	@ (80019a0 <menu+0x1420>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001812:	f002 fe0f 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001816:	2108      	movs	r1, #8
 8001818:	485f      	ldr	r0, [pc, #380]	@ (8001998 <menu+0x1418>)
 800181a:	f006 fe2b 	bl	8008474 <HAL_GPIO_ReadPin>
 800181e:	4603      	mov	r3, r0
 8001820:	2b01      	cmp	r3, #1
 8001822:	d10e      	bne.n	8001842 <menu+0x12c2>
 8001824:	4b5d      	ldr	r3, [pc, #372]	@ (800199c <menu+0x141c>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	f083 0301 	eor.w	r3, r3, #1
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d007      	beq.n	8001842 <menu+0x12c2>
			eepromData[36] = kapiAcTipi;
 8001832:	4b5b      	ldr	r3, [pc, #364]	@ (80019a0 <menu+0x1420>)
 8001834:	781a      	ldrb	r2, [r3, #0]
 8001836:	4b5b      	ldr	r3, [pc, #364]	@ (80019a4 <menu+0x1424>)
 8001838:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 800183c:	4b5a      	ldr	r3, [pc, #360]	@ (80019a8 <menu+0x1428>)
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8001842:	4b5a      	ldr	r3, [pc, #360]	@ (80019ac <menu+0x142c>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b09      	cmp	r3, #9
 8001848:	f040 808d 	bne.w	8001966 <menu+0x13e6>
		if(dilSecim == 0){
 800184c:	4b50      	ldr	r3, [pc, #320]	@ (8001990 <menu+0x1410>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d105      	bne.n	8001860 <menu+0x12e0>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8001854:	4a56      	ldr	r2, [pc, #344]	@ (80019b0 <menu+0x1430>)
 8001856:	2101      	movs	r1, #1
 8001858:	2001      	movs	r0, #1
 800185a:	f7fe fe30 	bl	80004be <lcd_print>
 800185e:	e008      	b.n	8001872 <menu+0x12f2>
		} else if(dilSecim == 1) {
 8001860:	4b4b      	ldr	r3, [pc, #300]	@ (8001990 <menu+0x1410>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d104      	bne.n	8001872 <menu+0x12f2>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8001868:	4a52      	ldr	r2, [pc, #328]	@ (80019b4 <menu+0x1434>)
 800186a:	2101      	movs	r1, #1
 800186c:	2001      	movs	r0, #1
 800186e:	f7fe fe26 	bl	80004be <lcd_print>
		}

		if(kapi1Tip == 0) {
 8001872:	4b51      	ldr	r3, [pc, #324]	@ (80019b8 <menu+0x1438>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d105      	bne.n	8001886 <menu+0x1306>
			lcd_print(2, 1, "Prudhome        ");
 800187a:	4a50      	ldr	r2, [pc, #320]	@ (80019bc <menu+0x143c>)
 800187c:	2101      	movs	r1, #1
 800187e:	2002      	movs	r0, #2
 8001880:	f7fe fe1d 	bl	80004be <lcd_print>
 8001884:	e020      	b.n	80018c8 <menu+0x1348>
		} else if(kapi1Tip == 1) {
 8001886:	4b4c      	ldr	r3, [pc, #304]	@ (80019b8 <menu+0x1438>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d113      	bne.n	80018b6 <menu+0x1336>
			if(dilSecim == 0){
 800188e:	4b40      	ldr	r3, [pc, #256]	@ (8001990 <menu+0x1410>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d105      	bne.n	80018a2 <menu+0x1322>
				lcd_print(2, 1, "Buton kontrollu");
 8001896:	4a4a      	ldr	r2, [pc, #296]	@ (80019c0 <menu+0x1440>)
 8001898:	2101      	movs	r1, #1
 800189a:	2002      	movs	r0, #2
 800189c:	f7fe fe0f 	bl	80004be <lcd_print>
 80018a0:	e012      	b.n	80018c8 <menu+0x1348>
			} else if(dilSecim == 1) {
 80018a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001990 <menu+0x1410>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d10e      	bne.n	80018c8 <menu+0x1348>
				lcd_print(2, 1, "Button cntrolled");
 80018aa:	4a46      	ldr	r2, [pc, #280]	@ (80019c4 <menu+0x1444>)
 80018ac:	2101      	movs	r1, #1
 80018ae:	2002      	movs	r0, #2
 80018b0:	f7fe fe05 	bl	80004be <lcd_print>
 80018b4:	e008      	b.n	80018c8 <menu+0x1348>
			}
		} else if(kapi1Tip == 2) {
 80018b6:	4b40      	ldr	r3, [pc, #256]	@ (80019b8 <menu+0x1438>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d104      	bne.n	80018c8 <menu+0x1348>
			lcd_print(2, 1, "Pizzato        ");
 80018be:	4a42      	ldr	r2, [pc, #264]	@ (80019c8 <menu+0x1448>)
 80018c0:	2101      	movs	r1, #1
 80018c2:	2002      	movs	r0, #2
 80018c4:	f7fe fdfb 	bl	80004be <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80018c8:	2102      	movs	r1, #2
 80018ca:	4833      	ldr	r0, [pc, #204]	@ (8001998 <menu+0x1418>)
 80018cc:	f006 fdd2 	bl	8008474 <HAL_GPIO_ReadPin>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d115      	bne.n	8001902 <menu+0x1382>
 80018d6:	4b31      	ldr	r3, [pc, #196]	@ (800199c <menu+0x141c>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	f083 0301 	eor.w	r3, r3, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00e      	beq.n	8001902 <menu+0x1382>
			kapi1Tip = kapi1Tip + 1;
 80018e4:	4b34      	ldr	r3, [pc, #208]	@ (80019b8 <menu+0x1438>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	3301      	adds	r3, #1
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b32      	ldr	r3, [pc, #200]	@ (80019b8 <menu+0x1438>)
 80018ee:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80018f0:	4b31      	ldr	r3, [pc, #196]	@ (80019b8 <menu+0x1438>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d902      	bls.n	80018fe <menu+0x137e>
				kapi1Tip = 0;
 80018f8:	4b2f      	ldr	r3, [pc, #188]	@ (80019b8 <menu+0x1438>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80018fe:	f002 fd99 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001902:	2104      	movs	r1, #4
 8001904:	4824      	ldr	r0, [pc, #144]	@ (8001998 <menu+0x1418>)
 8001906:	f006 fdb5 	bl	8008474 <HAL_GPIO_ReadPin>
 800190a:	4603      	mov	r3, r0
 800190c:	2b01      	cmp	r3, #1
 800190e:	d115      	bne.n	800193c <menu+0x13bc>
 8001910:	4b22      	ldr	r3, [pc, #136]	@ (800199c <menu+0x141c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	f083 0301 	eor.w	r3, r3, #1
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00e      	beq.n	800193c <menu+0x13bc>
			kapi1Tip = kapi1Tip - 1;
 800191e:	4b26      	ldr	r3, [pc, #152]	@ (80019b8 <menu+0x1438>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	3b01      	subs	r3, #1
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <menu+0x1438>)
 8001928:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 800192a:	4b23      	ldr	r3, [pc, #140]	@ (80019b8 <menu+0x1438>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d902      	bls.n	8001938 <menu+0x13b8>
		   		kapi1Tip = 2;
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <menu+0x1438>)
 8001934:	2202      	movs	r2, #2
 8001936:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001938:	f002 fd7c 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800193c:	2108      	movs	r1, #8
 800193e:	4816      	ldr	r0, [pc, #88]	@ (8001998 <menu+0x1418>)
 8001940:	f006 fd98 	bl	8008474 <HAL_GPIO_ReadPin>
 8001944:	4603      	mov	r3, r0
 8001946:	2b01      	cmp	r3, #1
 8001948:	d10d      	bne.n	8001966 <menu+0x13e6>
 800194a:	4b14      	ldr	r3, [pc, #80]	@ (800199c <menu+0x141c>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	f083 0301 	eor.w	r3, r3, #1
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d006      	beq.n	8001966 <menu+0x13e6>
			eepromData[8] = kapi1Tip;
 8001958:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <menu+0x1438>)
 800195a:	781a      	ldrb	r2, [r3, #0]
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <menu+0x1424>)
 800195e:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8001960:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <menu+0x1428>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8001966:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <menu+0x142c>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b0a      	cmp	r3, #10
 800196c:	f040 80a3 	bne.w	8001ab6 <menu+0x1536>
		if(dilSecim == 0) {
 8001970:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <menu+0x1410>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d12d      	bne.n	80019d4 <menu+0x1454>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8001978:	4a14      	ldr	r2, [pc, #80]	@ (80019cc <menu+0x144c>)
 800197a:	2101      	movs	r1, #1
 800197c:	2001      	movs	r0, #1
 800197e:	f7fe fd9e 	bl	80004be <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001982:	4a13      	ldr	r2, [pc, #76]	@ (80019d0 <menu+0x1450>)
 8001984:	2101      	movs	r1, #1
 8001986:	2002      	movs	r0, #2
 8001988:	f7fe fd99 	bl	80004be <lcd_print>
 800198c:	e030      	b.n	80019f0 <menu+0x1470>
 800198e:	bf00      	nop
 8001990:	20000ca4 	.word	0x20000ca4
 8001994:	0800cf1c 	.word	0x0800cf1c
 8001998:	40010800 	.word	0x40010800
 800199c:	20000cb2 	.word	0x20000cb2
 80019a0:	20000c90 	.word	0x20000c90
 80019a4:	20000c18 	.word	0x20000c18
 80019a8:	20000caf 	.word	0x20000caf
 80019ac:	20000c84 	.word	0x20000c84
 80019b0:	0800cf30 	.word	0x0800cf30
 80019b4:	0800cf44 	.word	0x0800cf44
 80019b8:	20000c8d 	.word	0x20000c8d
 80019bc:	0800cf58 	.word	0x0800cf58
 80019c0:	0800cf6c 	.word	0x0800cf6c
 80019c4:	0800cf7c 	.word	0x0800cf7c
 80019c8:	0800cf90 	.word	0x0800cf90
 80019cc:	0800cfa0 	.word	0x0800cfa0
 80019d0:	0800cfb4 	.word	0x0800cfb4
		} else if(dilSecim == 1) {
 80019d4:	4b8b      	ldr	r3, [pc, #556]	@ (8001c04 <menu+0x1684>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d109      	bne.n	80019f0 <menu+0x1470>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80019dc:	4a8a      	ldr	r2, [pc, #552]	@ (8001c08 <menu+0x1688>)
 80019de:	2101      	movs	r1, #1
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7fe fd6c 	bl	80004be <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80019e6:	4a89      	ldr	r2, [pc, #548]	@ (8001c0c <menu+0x168c>)
 80019e8:	2101      	movs	r1, #1
 80019ea:	2002      	movs	r0, #2
 80019ec:	f7fe fd67 	bl	80004be <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80019f0:	4b87      	ldr	r3, [pc, #540]	@ (8001c10 <menu+0x1690>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	220a      	movs	r2, #10
 80019f6:	4987      	ldr	r1, [pc, #540]	@ (8001c14 <menu+0x1694>)
 80019f8:	4618      	mov	r0, r3
 80019fa:	f00a fef7 	bl	800c7ec <itoa>
		lcd_print(2,16,snum);
 80019fe:	4a85      	ldr	r2, [pc, #532]	@ (8001c14 <menu+0x1694>)
 8001a00:	2110      	movs	r1, #16
 8001a02:	2002      	movs	r0, #2
 8001a04:	f7fe fd5b 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001a08:	2102      	movs	r1, #2
 8001a0a:	4883      	ldr	r0, [pc, #524]	@ (8001c18 <menu+0x1698>)
 8001a0c:	f006 fd32 	bl	8008474 <HAL_GPIO_ReadPin>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d119      	bne.n	8001a4a <menu+0x14ca>
 8001a16:	4b81      	ldr	r3, [pc, #516]	@ (8001c1c <menu+0x169c>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	f083 0301 	eor.w	r3, r3, #1
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d012      	beq.n	8001a4a <menu+0x14ca>
 8001a24:	4b7e      	ldr	r3, [pc, #504]	@ (8001c20 <menu+0x16a0>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10e      	bne.n	8001a4a <menu+0x14ca>
			kapi1AcSure = kapi1AcSure + 1;
 8001a2c:	4b78      	ldr	r3, [pc, #480]	@ (8001c10 <menu+0x1690>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	3301      	adds	r3, #1
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b76      	ldr	r3, [pc, #472]	@ (8001c10 <menu+0x1690>)
 8001a36:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8001a38:	4b75      	ldr	r3, [pc, #468]	@ (8001c10 <menu+0x1690>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b05      	cmp	r3, #5
 8001a3e:	d902      	bls.n	8001a46 <menu+0x14c6>
				kapi1AcSure = 0;
 8001a40:	4b73      	ldr	r3, [pc, #460]	@ (8001c10 <menu+0x1690>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a46:	f002 fcf5 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001a4a:	2104      	movs	r1, #4
 8001a4c:	4872      	ldr	r0, [pc, #456]	@ (8001c18 <menu+0x1698>)
 8001a4e:	f006 fd11 	bl	8008474 <HAL_GPIO_ReadPin>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d119      	bne.n	8001a8c <menu+0x150c>
 8001a58:	4b70      	ldr	r3, [pc, #448]	@ (8001c1c <menu+0x169c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	f083 0301 	eor.w	r3, r3, #1
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d012      	beq.n	8001a8c <menu+0x150c>
 8001a66:	4b6e      	ldr	r3, [pc, #440]	@ (8001c20 <menu+0x16a0>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10e      	bne.n	8001a8c <menu+0x150c>
			kapi1AcSure = kapi1AcSure - 1;
 8001a6e:	4b68      	ldr	r3, [pc, #416]	@ (8001c10 <menu+0x1690>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4b66      	ldr	r3, [pc, #408]	@ (8001c10 <menu+0x1690>)
 8001a78:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8001a7a:	4b65      	ldr	r3, [pc, #404]	@ (8001c10 <menu+0x1690>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <menu+0x1508>
		   		kapi1AcSure = 5;
 8001a82:	4b63      	ldr	r3, [pc, #396]	@ (8001c10 <menu+0x1690>)
 8001a84:	2205      	movs	r2, #5
 8001a86:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001a88:	f002 fcd4 	bl	8004434 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a8c:	2108      	movs	r1, #8
 8001a8e:	4862      	ldr	r0, [pc, #392]	@ (8001c18 <menu+0x1698>)
 8001a90:	f006 fcf0 	bl	8008474 <HAL_GPIO_ReadPin>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d10d      	bne.n	8001ab6 <menu+0x1536>
 8001a9a:	4b60      	ldr	r3, [pc, #384]	@ (8001c1c <menu+0x169c>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	f083 0301 	eor.w	r3, r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <menu+0x1536>
			eepromData[9] = kapi1AcSure;
 8001aa8:	4b59      	ldr	r3, [pc, #356]	@ (8001c10 <menu+0x1690>)
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	4b5d      	ldr	r3, [pc, #372]	@ (8001c24 <menu+0x16a4>)
 8001aae:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8001ab0:	4b5d      	ldr	r3, [pc, #372]	@ (8001c28 <menu+0x16a8>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8001ab6:	4b5d      	ldr	r3, [pc, #372]	@ (8001c2c <menu+0x16ac>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b0b      	cmp	r3, #11
 8001abc:	f040 808d 	bne.w	8001bda <menu+0x165a>
		if(dilSecim == 0) {
 8001ac0:	4b50      	ldr	r3, [pc, #320]	@ (8001c04 <menu+0x1684>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <menu+0x1554>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8001ac8:	4a59      	ldr	r2, [pc, #356]	@ (8001c30 <menu+0x16b0>)
 8001aca:	2101      	movs	r1, #1
 8001acc:	2001      	movs	r0, #1
 8001ace:	f7fe fcf6 	bl	80004be <lcd_print>
 8001ad2:	e008      	b.n	8001ae6 <menu+0x1566>
		} else if(dilSecim == 1) {
 8001ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8001c04 <menu+0x1684>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d104      	bne.n	8001ae6 <menu+0x1566>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8001adc:	4a55      	ldr	r2, [pc, #340]	@ (8001c34 <menu+0x16b4>)
 8001ade:	2101      	movs	r1, #1
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f7fe fcec 	bl	80004be <lcd_print>
		}

		if(kapi2Tip == 0) {
 8001ae6:	4b54      	ldr	r3, [pc, #336]	@ (8001c38 <menu+0x16b8>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d105      	bne.n	8001afa <menu+0x157a>
			lcd_print(2, 1, "Prudhome        ");
 8001aee:	4a53      	ldr	r2, [pc, #332]	@ (8001c3c <menu+0x16bc>)
 8001af0:	2101      	movs	r1, #1
 8001af2:	2002      	movs	r0, #2
 8001af4:	f7fe fce3 	bl	80004be <lcd_print>
 8001af8:	e020      	b.n	8001b3c <menu+0x15bc>
		} else if(kapi2Tip == 1) {
 8001afa:	4b4f      	ldr	r3, [pc, #316]	@ (8001c38 <menu+0x16b8>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d113      	bne.n	8001b2a <menu+0x15aa>
			if(dilSecim == 0) {
 8001b02:	4b40      	ldr	r3, [pc, #256]	@ (8001c04 <menu+0x1684>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d105      	bne.n	8001b16 <menu+0x1596>
				lcd_print(2, 1, "Buton kontrollu");
 8001b0a:	4a4d      	ldr	r2, [pc, #308]	@ (8001c40 <menu+0x16c0>)
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f7fe fcd5 	bl	80004be <lcd_print>
 8001b14:	e012      	b.n	8001b3c <menu+0x15bc>
			} else if(dilSecim == 1) {
 8001b16:	4b3b      	ldr	r3, [pc, #236]	@ (8001c04 <menu+0x1684>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d10e      	bne.n	8001b3c <menu+0x15bc>
				lcd_print(2, 1, "Button cntrolled");
 8001b1e:	4a49      	ldr	r2, [pc, #292]	@ (8001c44 <menu+0x16c4>)
 8001b20:	2101      	movs	r1, #1
 8001b22:	2002      	movs	r0, #2
 8001b24:	f7fe fccb 	bl	80004be <lcd_print>
 8001b28:	e008      	b.n	8001b3c <menu+0x15bc>
			}
		} else if(kapi2Tip == 2) {
 8001b2a:	4b43      	ldr	r3, [pc, #268]	@ (8001c38 <menu+0x16b8>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d104      	bne.n	8001b3c <menu+0x15bc>
			lcd_print(2, 1, "Pizzato        ");
 8001b32:	4a45      	ldr	r2, [pc, #276]	@ (8001c48 <menu+0x16c8>)
 8001b34:	2101      	movs	r1, #1
 8001b36:	2002      	movs	r0, #2
 8001b38:	f7fe fcc1 	bl	80004be <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	4836      	ldr	r0, [pc, #216]	@ (8001c18 <menu+0x1698>)
 8001b40:	f006 fc98 	bl	8008474 <HAL_GPIO_ReadPin>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d115      	bne.n	8001b76 <menu+0x15f6>
 8001b4a:	4b34      	ldr	r3, [pc, #208]	@ (8001c1c <menu+0x169c>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	f083 0301 	eor.w	r3, r3, #1
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00e      	beq.n	8001b76 <menu+0x15f6>
			kapi2Tip = kapi2Tip + 1;
 8001b58:	4b37      	ldr	r3, [pc, #220]	@ (8001c38 <menu+0x16b8>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	4b35      	ldr	r3, [pc, #212]	@ (8001c38 <menu+0x16b8>)
 8001b62:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8001b64:	4b34      	ldr	r3, [pc, #208]	@ (8001c38 <menu+0x16b8>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d902      	bls.n	8001b72 <menu+0x15f2>
				kapi2Tip = 0;
 8001b6c:	4b32      	ldr	r3, [pc, #200]	@ (8001c38 <menu+0x16b8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b72:	f002 fc5f 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b76:	2104      	movs	r1, #4
 8001b78:	4827      	ldr	r0, [pc, #156]	@ (8001c18 <menu+0x1698>)
 8001b7a:	f006 fc7b 	bl	8008474 <HAL_GPIO_ReadPin>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d115      	bne.n	8001bb0 <menu+0x1630>
 8001b84:	4b25      	ldr	r3, [pc, #148]	@ (8001c1c <menu+0x169c>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	f083 0301 	eor.w	r3, r3, #1
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00e      	beq.n	8001bb0 <menu+0x1630>
			kapi2Tip = kapi2Tip - 1;
 8001b92:	4b29      	ldr	r3, [pc, #164]	@ (8001c38 <menu+0x16b8>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4b27      	ldr	r3, [pc, #156]	@ (8001c38 <menu+0x16b8>)
 8001b9c:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8001b9e:	4b26      	ldr	r3, [pc, #152]	@ (8001c38 <menu+0x16b8>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d902      	bls.n	8001bac <menu+0x162c>
		   		kapi2Tip = 2;
 8001ba6:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <menu+0x16b8>)
 8001ba8:	2202      	movs	r2, #2
 8001baa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001bac:	f002 fc42 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bb0:	2108      	movs	r1, #8
 8001bb2:	4819      	ldr	r0, [pc, #100]	@ (8001c18 <menu+0x1698>)
 8001bb4:	f006 fc5e 	bl	8008474 <HAL_GPIO_ReadPin>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d10d      	bne.n	8001bda <menu+0x165a>
 8001bbe:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <menu+0x169c>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	f083 0301 	eor.w	r3, r3, #1
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d006      	beq.n	8001bda <menu+0x165a>
			eepromData[10] = kapi2Tip;
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c38 <menu+0x16b8>)
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	4b14      	ldr	r3, [pc, #80]	@ (8001c24 <menu+0x16a4>)
 8001bd2:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8001bd4:	4b14      	ldr	r3, [pc, #80]	@ (8001c28 <menu+0x16a8>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8001bda:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <menu+0x16ac>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b0c      	cmp	r3, #12
 8001be0:	f040 80a9 	bne.w	8001d36 <menu+0x17b6>
		if(dilSecim == 0) {
 8001be4:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <menu+0x1684>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d133      	bne.n	8001c54 <menu+0x16d4>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8001bec:	4a17      	ldr	r2, [pc, #92]	@ (8001c4c <menu+0x16cc>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f7fe fc64 	bl	80004be <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001bf6:	4a16      	ldr	r2, [pc, #88]	@ (8001c50 <menu+0x16d0>)
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	2002      	movs	r0, #2
 8001bfc:	f7fe fc5f 	bl	80004be <lcd_print>
 8001c00:	e036      	b.n	8001c70 <menu+0x16f0>
 8001c02:	bf00      	nop
 8001c04:	20000ca4 	.word	0x20000ca4
 8001c08:	0800cfc4 	.word	0x0800cfc4
 8001c0c:	0800cfd8 	.word	0x0800cfd8
 8001c10:	20000c9d 	.word	0x20000c9d
 8001c14:	20000c58 	.word	0x20000c58
 8001c18:	40010800 	.word	0x40010800
 8001c1c:	20000cb2 	.word	0x20000cb2
 8001c20:	20000c8d 	.word	0x20000c8d
 8001c24:	20000c18 	.word	0x20000c18
 8001c28:	20000caf 	.word	0x20000caf
 8001c2c:	20000c84 	.word	0x20000c84
 8001c30:	0800cfe8 	.word	0x0800cfe8
 8001c34:	0800cffc 	.word	0x0800cffc
 8001c38:	20000c8e 	.word	0x20000c8e
 8001c3c:	0800cf58 	.word	0x0800cf58
 8001c40:	0800cf6c 	.word	0x0800cf6c
 8001c44:	0800cf7c 	.word	0x0800cf7c
 8001c48:	0800cf90 	.word	0x0800cf90
 8001c4c:	0800d010 	.word	0x0800d010
 8001c50:	0800cfb4 	.word	0x0800cfb4
		} else if(dilSecim == 1) {
 8001c54:	4b99      	ldr	r3, [pc, #612]	@ (8001ebc <menu+0x193c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d109      	bne.n	8001c70 <menu+0x16f0>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8001c5c:	4a98      	ldr	r2, [pc, #608]	@ (8001ec0 <menu+0x1940>)
 8001c5e:	2101      	movs	r1, #1
 8001c60:	2001      	movs	r0, #1
 8001c62:	f7fe fc2c 	bl	80004be <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001c66:	4a97      	ldr	r2, [pc, #604]	@ (8001ec4 <menu+0x1944>)
 8001c68:	2101      	movs	r1, #1
 8001c6a:	2002      	movs	r0, #2
 8001c6c:	f7fe fc27 	bl	80004be <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8001c70:	4b95      	ldr	r3, [pc, #596]	@ (8001ec8 <menu+0x1948>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	220a      	movs	r2, #10
 8001c76:	4995      	ldr	r1, [pc, #596]	@ (8001ecc <menu+0x194c>)
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f00a fdb7 	bl	800c7ec <itoa>
		lcd_print(2,16,snum);
 8001c7e:	4a93      	ldr	r2, [pc, #588]	@ (8001ecc <menu+0x194c>)
 8001c80:	2110      	movs	r1, #16
 8001c82:	2002      	movs	r0, #2
 8001c84:	f7fe fc1b 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001c88:	2102      	movs	r1, #2
 8001c8a:	4891      	ldr	r0, [pc, #580]	@ (8001ed0 <menu+0x1950>)
 8001c8c:	f006 fbf2 	bl	8008474 <HAL_GPIO_ReadPin>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d119      	bne.n	8001cca <menu+0x174a>
 8001c96:	4b8f      	ldr	r3, [pc, #572]	@ (8001ed4 <menu+0x1954>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	f083 0301 	eor.w	r3, r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d012      	beq.n	8001cca <menu+0x174a>
 8001ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ed8 <menu+0x1958>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10e      	bne.n	8001cca <menu+0x174a>
			kapi2AcSure = kapi2AcSure + 1;
 8001cac:	4b86      	ldr	r3, [pc, #536]	@ (8001ec8 <menu+0x1948>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	4b84      	ldr	r3, [pc, #528]	@ (8001ec8 <menu+0x1948>)
 8001cb6:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8001cb8:	4b83      	ldr	r3, [pc, #524]	@ (8001ec8 <menu+0x1948>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d902      	bls.n	8001cc6 <menu+0x1746>
				kapi2AcSure = 0;
 8001cc0:	4b81      	ldr	r3, [pc, #516]	@ (8001ec8 <menu+0x1948>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cc6:	f002 fbb5 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001cca:	2104      	movs	r1, #4
 8001ccc:	4880      	ldr	r0, [pc, #512]	@ (8001ed0 <menu+0x1950>)
 8001cce:	f006 fbd1 	bl	8008474 <HAL_GPIO_ReadPin>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d119      	bne.n	8001d0c <menu+0x178c>
 8001cd8:	4b7e      	ldr	r3, [pc, #504]	@ (8001ed4 <menu+0x1954>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	f083 0301 	eor.w	r3, r3, #1
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d012      	beq.n	8001d0c <menu+0x178c>
 8001ce6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ed8 <menu+0x1958>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10e      	bne.n	8001d0c <menu+0x178c>
			kapi2AcSure = kapi2AcSure - 1;
 8001cee:	4b76      	ldr	r3, [pc, #472]	@ (8001ec8 <menu+0x1948>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4b74      	ldr	r3, [pc, #464]	@ (8001ec8 <menu+0x1948>)
 8001cf8:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8001cfa:	4b73      	ldr	r3, [pc, #460]	@ (8001ec8 <menu+0x1948>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <menu+0x1788>
		   		kapi2AcSure = 5;
 8001d02:	4b71      	ldr	r3, [pc, #452]	@ (8001ec8 <menu+0x1948>)
 8001d04:	2205      	movs	r2, #5
 8001d06:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d08:	f002 fb94 	bl	8004434 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d0c:	2108      	movs	r1, #8
 8001d0e:	4870      	ldr	r0, [pc, #448]	@ (8001ed0 <menu+0x1950>)
 8001d10:	f006 fbb0 	bl	8008474 <HAL_GPIO_ReadPin>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d10d      	bne.n	8001d36 <menu+0x17b6>
 8001d1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001ed4 <menu+0x1954>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	f083 0301 	eor.w	r3, r3, #1
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <menu+0x17b6>
			eepromData[11] = kapi2AcSure;
 8001d28:	4b67      	ldr	r3, [pc, #412]	@ (8001ec8 <menu+0x1948>)
 8001d2a:	781a      	ldrb	r2, [r3, #0]
 8001d2c:	4b6b      	ldr	r3, [pc, #428]	@ (8001edc <menu+0x195c>)
 8001d2e:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8001d30:	4b6b      	ldr	r3, [pc, #428]	@ (8001ee0 <menu+0x1960>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8001d36:	4b6b      	ldr	r3, [pc, #428]	@ (8001ee4 <menu+0x1964>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b0d      	cmp	r3, #13
 8001d3c:	f040 808d 	bne.w	8001e5a <menu+0x18da>
		if(dilSecim == 0) {
 8001d40:	4b5e      	ldr	r3, [pc, #376]	@ (8001ebc <menu+0x193c>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <menu+0x17d4>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8001d48:	4a67      	ldr	r2, [pc, #412]	@ (8001ee8 <menu+0x1968>)
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f7fe fbb6 	bl	80004be <lcd_print>
 8001d52:	e008      	b.n	8001d66 <menu+0x17e6>
		} else if(dilSecim == 1){
 8001d54:	4b59      	ldr	r3, [pc, #356]	@ (8001ebc <menu+0x193c>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d104      	bne.n	8001d66 <menu+0x17e6>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8001d5c:	4a63      	ldr	r2, [pc, #396]	@ (8001eec <menu+0x196c>)
 8001d5e:	2101      	movs	r1, #1
 8001d60:	2001      	movs	r0, #1
 8001d62:	f7fe fbac 	bl	80004be <lcd_print>
		}

		if(kapitablaTip == 0) {
 8001d66:	4b62      	ldr	r3, [pc, #392]	@ (8001ef0 <menu+0x1970>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d105      	bne.n	8001d7a <menu+0x17fa>
			lcd_print(2, 1, "Prudhome        ");
 8001d6e:	4a61      	ldr	r2, [pc, #388]	@ (8001ef4 <menu+0x1974>)
 8001d70:	2101      	movs	r1, #1
 8001d72:	2002      	movs	r0, #2
 8001d74:	f7fe fba3 	bl	80004be <lcd_print>
 8001d78:	e020      	b.n	8001dbc <menu+0x183c>
		} else if(kapitablaTip == 1) {
 8001d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ef0 <menu+0x1970>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d113      	bne.n	8001daa <menu+0x182a>
			if(dilSecim == 0) {
 8001d82:	4b4e      	ldr	r3, [pc, #312]	@ (8001ebc <menu+0x193c>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d105      	bne.n	8001d96 <menu+0x1816>
				lcd_print(2, 1, "Buton kontrollu");
 8001d8a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ef8 <menu+0x1978>)
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	2002      	movs	r0, #2
 8001d90:	f7fe fb95 	bl	80004be <lcd_print>
 8001d94:	e012      	b.n	8001dbc <menu+0x183c>
			} else if(dilSecim == 1) {
 8001d96:	4b49      	ldr	r3, [pc, #292]	@ (8001ebc <menu+0x193c>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d10e      	bne.n	8001dbc <menu+0x183c>
				lcd_print(2, 1, "Button cntrolled");
 8001d9e:	4a57      	ldr	r2, [pc, #348]	@ (8001efc <menu+0x197c>)
 8001da0:	2101      	movs	r1, #1
 8001da2:	2002      	movs	r0, #2
 8001da4:	f7fe fb8b 	bl	80004be <lcd_print>
 8001da8:	e008      	b.n	8001dbc <menu+0x183c>
			}
		} else if(kapitablaTip == 2) {
 8001daa:	4b51      	ldr	r3, [pc, #324]	@ (8001ef0 <menu+0x1970>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d104      	bne.n	8001dbc <menu+0x183c>
			lcd_print(2, 1, "Pizzato        ");
 8001db2:	4a53      	ldr	r2, [pc, #332]	@ (8001f00 <menu+0x1980>)
 8001db4:	2101      	movs	r1, #1
 8001db6:	2002      	movs	r0, #2
 8001db8:	f7fe fb81 	bl	80004be <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dbc:	2102      	movs	r1, #2
 8001dbe:	4844      	ldr	r0, [pc, #272]	@ (8001ed0 <menu+0x1950>)
 8001dc0:	f006 fb58 	bl	8008474 <HAL_GPIO_ReadPin>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d115      	bne.n	8001df6 <menu+0x1876>
 8001dca:	4b42      	ldr	r3, [pc, #264]	@ (8001ed4 <menu+0x1954>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	f083 0301 	eor.w	r3, r3, #1
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00e      	beq.n	8001df6 <menu+0x1876>
			kapitablaTip = kapitablaTip + 1;
 8001dd8:	4b45      	ldr	r3, [pc, #276]	@ (8001ef0 <menu+0x1970>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	4b43      	ldr	r3, [pc, #268]	@ (8001ef0 <menu+0x1970>)
 8001de2:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8001de4:	4b42      	ldr	r3, [pc, #264]	@ (8001ef0 <menu+0x1970>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d902      	bls.n	8001df2 <menu+0x1872>
				kapitablaTip = 0;
 8001dec:	4b40      	ldr	r3, [pc, #256]	@ (8001ef0 <menu+0x1970>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001df2:	f002 fb1f 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001df6:	2104      	movs	r1, #4
 8001df8:	4835      	ldr	r0, [pc, #212]	@ (8001ed0 <menu+0x1950>)
 8001dfa:	f006 fb3b 	bl	8008474 <HAL_GPIO_ReadPin>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d115      	bne.n	8001e30 <menu+0x18b0>
 8001e04:	4b33      	ldr	r3, [pc, #204]	@ (8001ed4 <menu+0x1954>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	f083 0301 	eor.w	r3, r3, #1
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00e      	beq.n	8001e30 <menu+0x18b0>
			kapitablaTip = kapitablaTip - 1;
 8001e12:	4b37      	ldr	r3, [pc, #220]	@ (8001ef0 <menu+0x1970>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4b35      	ldr	r3, [pc, #212]	@ (8001ef0 <menu+0x1970>)
 8001e1c:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8001e1e:	4b34      	ldr	r3, [pc, #208]	@ (8001ef0 <menu+0x1970>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d902      	bls.n	8001e2c <menu+0x18ac>
		   		kapitablaTip = 2;
 8001e26:	4b32      	ldr	r3, [pc, #200]	@ (8001ef0 <menu+0x1970>)
 8001e28:	2202      	movs	r2, #2
 8001e2a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e2c:	f002 fb02 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e30:	2108      	movs	r1, #8
 8001e32:	4827      	ldr	r0, [pc, #156]	@ (8001ed0 <menu+0x1950>)
 8001e34:	f006 fb1e 	bl	8008474 <HAL_GPIO_ReadPin>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d10d      	bne.n	8001e5a <menu+0x18da>
 8001e3e:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <menu+0x1954>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	f083 0301 	eor.w	r3, r3, #1
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <menu+0x18da>
			eepromData[12] = kapitablaTip;
 8001e4c:	4b28      	ldr	r3, [pc, #160]	@ (8001ef0 <menu+0x1970>)
 8001e4e:	781a      	ldrb	r2, [r3, #0]
 8001e50:	4b22      	ldr	r3, [pc, #136]	@ (8001edc <menu+0x195c>)
 8001e52:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8001e54:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <menu+0x1960>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8001e5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ee4 <menu+0x1964>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b0e      	cmp	r3, #14
 8001e60:	f040 80fe 	bne.w	8002060 <menu+0x1ae0>
		if(dilSecim == 0) {
 8001e64:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <menu+0x193c>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d105      	bne.n	8001e78 <menu+0x18f8>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8001e6c:	4a25      	ldr	r2, [pc, #148]	@ (8001f04 <menu+0x1984>)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	2001      	movs	r0, #1
 8001e72:	f7fe fb24 	bl	80004be <lcd_print>
 8001e76:	e008      	b.n	8001e8a <menu+0x190a>
		} else if(dilSecim == 1) {
 8001e78:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <menu+0x193c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d104      	bne.n	8001e8a <menu+0x190a>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8001e80:	4a21      	ldr	r2, [pc, #132]	@ (8001f08 <menu+0x1988>)
 8001e82:	2101      	movs	r1, #1
 8001e84:	2001      	movs	r0, #1
 8001e86:	f7fe fb1a 	bl	80004be <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8001e8a:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <menu+0x198c>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d142      	bne.n	8001f18 <menu+0x1998>
			if(dilSecim == 0){
 8001e92:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <menu+0x193c>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d105      	bne.n	8001ea6 <menu+0x1926>
				lcd_print(2, 1, "1. Katta ac    ");
 8001e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001f10 <menu+0x1990>)
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	2002      	movs	r0, #2
 8001ea0:	f7fe fb0d 	bl	80004be <lcd_print>
 8001ea4:	e07d      	b.n	8001fa2 <menu+0x1a22>
			} else if(dilSecim == 1) {
 8001ea6:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <menu+0x193c>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d179      	bne.n	8001fa2 <menu+0x1a22>
				lcd_print(2, 1, "1. Floor open  ");
 8001eae:	4a19      	ldr	r2, [pc, #100]	@ (8001f14 <menu+0x1994>)
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	f7fe fb03 	bl	80004be <lcd_print>
 8001eb8:	e073      	b.n	8001fa2 <menu+0x1a22>
 8001eba:	bf00      	nop
 8001ebc:	20000ca4 	.word	0x20000ca4
 8001ec0:	0800d024 	.word	0x0800d024
 8001ec4:	0800cfd8 	.word	0x0800cfd8
 8001ec8:	20000c9e 	.word	0x20000c9e
 8001ecc:	20000c58 	.word	0x20000c58
 8001ed0:	40010800 	.word	0x40010800
 8001ed4:	20000cb2 	.word	0x20000cb2
 8001ed8:	20000c8e 	.word	0x20000c8e
 8001edc:	20000c18 	.word	0x20000c18
 8001ee0:	20000caf 	.word	0x20000caf
 8001ee4:	20000c84 	.word	0x20000c84
 8001ee8:	0800d038 	.word	0x0800d038
 8001eec:	0800d04c 	.word	0x0800d04c
 8001ef0:	20000c8f 	.word	0x20000c8f
 8001ef4:	0800cf58 	.word	0x0800cf58
 8001ef8:	0800cf6c 	.word	0x0800cf6c
 8001efc:	0800cf7c 	.word	0x0800cf7c
 8001f00:	0800cf90 	.word	0x0800cf90
 8001f04:	0800d060 	.word	0x0800d060
 8001f08:	0800d074 	.word	0x0800d074
 8001f0c:	20000c91 	.word	0x20000c91
 8001f10:	0800d088 	.word	0x0800d088
 8001f14:	0800d098 	.word	0x0800d098
			}
		} else if(kapiTablaAcKonum == 1) {
 8001f18:	4b9b      	ldr	r3, [pc, #620]	@ (8002188 <menu+0x1c08>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d112      	bne.n	8001f46 <menu+0x19c6>
			if(dilSecim == 0){
 8001f20:	4b9a      	ldr	r3, [pc, #616]	@ (800218c <menu+0x1c0c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d104      	bne.n	8001f32 <menu+0x19b2>
				lcd_print(2, 1, "2. Katta ac    ");
 8001f28:	4a99      	ldr	r2, [pc, #612]	@ (8002190 <menu+0x1c10>)
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	2002      	movs	r0, #2
 8001f2e:	f7fe fac6 	bl	80004be <lcd_print>
			}
			if(dilSecim == 1){
 8001f32:	4b96      	ldr	r3, [pc, #600]	@ (800218c <menu+0x1c0c>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d133      	bne.n	8001fa2 <menu+0x1a22>
				lcd_print(2, 1, "2. Floor open  ");
 8001f3a:	4a96      	ldr	r2, [pc, #600]	@ (8002194 <menu+0x1c14>)
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	2002      	movs	r0, #2
 8001f40:	f7fe fabd 	bl	80004be <lcd_print>
 8001f44:	e02d      	b.n	8001fa2 <menu+0x1a22>
			}
		} else if(kapiTablaAcKonum == 2) {
 8001f46:	4b90      	ldr	r3, [pc, #576]	@ (8002188 <menu+0x1c08>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d113      	bne.n	8001f76 <menu+0x19f6>
			if(dilSecim == 0){
 8001f4e:	4b8f      	ldr	r3, [pc, #572]	@ (800218c <menu+0x1c0c>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d105      	bne.n	8001f62 <menu+0x19e2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8001f56:	4a90      	ldr	r2, [pc, #576]	@ (8002198 <menu+0x1c18>)
 8001f58:	2101      	movs	r1, #1
 8001f5a:	2002      	movs	r0, #2
 8001f5c:	f7fe faaf 	bl	80004be <lcd_print>
 8001f60:	e01f      	b.n	8001fa2 <menu+0x1a22>
			} else if(dilSecim == 1) {
 8001f62:	4b8a      	ldr	r3, [pc, #552]	@ (800218c <menu+0x1c0c>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d11b      	bne.n	8001fa2 <menu+0x1a22>
				lcd_print(2, 1, "1.+2. Floor open");
 8001f6a:	4a8c      	ldr	r2, [pc, #560]	@ (800219c <menu+0x1c1c>)
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f7fe faa5 	bl	80004be <lcd_print>
 8001f74:	e015      	b.n	8001fa2 <menu+0x1a22>
			}
		} else if(kapiTablaAcKonum == 3) {
 8001f76:	4b84      	ldr	r3, [pc, #528]	@ (8002188 <menu+0x1c08>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d111      	bne.n	8001fa2 <menu+0x1a22>
			if(dilSecim == 0) {
 8001f7e:	4b83      	ldr	r3, [pc, #524]	@ (800218c <menu+0x1c0c>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d104      	bne.n	8001f90 <menu+0x1a10>
				lcd_print(2, 1, "Pasif           ");
 8001f86:	4a86      	ldr	r2, [pc, #536]	@ (80021a0 <menu+0x1c20>)
 8001f88:	2101      	movs	r1, #1
 8001f8a:	2002      	movs	r0, #2
 8001f8c:	f7fe fa97 	bl	80004be <lcd_print>
			}
			if(dilSecim == 1) {
 8001f90:	4b7e      	ldr	r3, [pc, #504]	@ (800218c <menu+0x1c0c>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d104      	bne.n	8001fa2 <menu+0x1a22>
				lcd_print(2, 1, "Passive         ");
 8001f98:	4a82      	ldr	r2, [pc, #520]	@ (80021a4 <menu+0x1c24>)
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	2002      	movs	r0, #2
 8001f9e:	f7fe fa8e 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	4880      	ldr	r0, [pc, #512]	@ (80021a8 <menu+0x1c28>)
 8001fa6:	f006 fa65 	bl	8008474 <HAL_GPIO_ReadPin>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d115      	bne.n	8001fdc <menu+0x1a5c>
 8001fb0:	4b7e      	ldr	r3, [pc, #504]	@ (80021ac <menu+0x1c2c>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	f083 0301 	eor.w	r3, r3, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00e      	beq.n	8001fdc <menu+0x1a5c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8001fbe:	4b72      	ldr	r3, [pc, #456]	@ (8002188 <menu+0x1c08>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b70      	ldr	r3, [pc, #448]	@ (8002188 <menu+0x1c08>)
 8001fc8:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8001fca:	4b6f      	ldr	r3, [pc, #444]	@ (8002188 <menu+0x1c08>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d902      	bls.n	8001fd8 <menu+0x1a58>
				kapiTablaAcKonum = 0;
 8001fd2:	4b6d      	ldr	r3, [pc, #436]	@ (8002188 <menu+0x1c08>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fd8:	f002 fa2c 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fdc:	2104      	movs	r1, #4
 8001fde:	4872      	ldr	r0, [pc, #456]	@ (80021a8 <menu+0x1c28>)
 8001fe0:	f006 fa48 	bl	8008474 <HAL_GPIO_ReadPin>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d115      	bne.n	8002016 <menu+0x1a96>
 8001fea:	4b70      	ldr	r3, [pc, #448]	@ (80021ac <menu+0x1c2c>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	f083 0301 	eor.w	r3, r3, #1
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00e      	beq.n	8002016 <menu+0x1a96>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8001ff8:	4b63      	ldr	r3, [pc, #396]	@ (8002188 <menu+0x1c08>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	4b61      	ldr	r3, [pc, #388]	@ (8002188 <menu+0x1c08>)
 8002002:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002004:	4b60      	ldr	r3, [pc, #384]	@ (8002188 <menu+0x1c08>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d902      	bls.n	8002012 <menu+0x1a92>
		   		kapiTablaAcKonum = 2;
 800200c:	4b5e      	ldr	r3, [pc, #376]	@ (8002188 <menu+0x1c08>)
 800200e:	2202      	movs	r2, #2
 8002010:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002012:	f002 fa0f 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002016:	2108      	movs	r1, #8
 8002018:	4863      	ldr	r0, [pc, #396]	@ (80021a8 <menu+0x1c28>)
 800201a:	f006 fa2b 	bl	8008474 <HAL_GPIO_ReadPin>
 800201e:	4603      	mov	r3, r0
 8002020:	2b01      	cmp	r3, #1
 8002022:	d11d      	bne.n	8002060 <menu+0x1ae0>
 8002024:	4b61      	ldr	r3, [pc, #388]	@ (80021ac <menu+0x1c2c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	f083 0301 	eor.w	r3, r3, #1
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d016      	beq.n	8002060 <menu+0x1ae0>
			eepromData[34] = kapiTablaAcKonum;
 8002032:	4b55      	ldr	r3, [pc, #340]	@ (8002188 <menu+0x1c08>)
 8002034:	781a      	ldrb	r2, [r3, #0]
 8002036:	4b5e      	ldr	r3, [pc, #376]	@ (80021b0 <menu+0x1c30>)
 8002038:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 800203c:	4b52      	ldr	r3, [pc, #328]	@ (8002188 <menu+0x1c08>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <menu+0x1acc>
 8002044:	4b50      	ldr	r3, [pc, #320]	@ (8002188 <menu+0x1c08>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d106      	bne.n	800205a <menu+0x1ada>
				altLimit = 1;
 800204c:	4b59      	ldr	r3, [pc, #356]	@ (80021b4 <menu+0x1c34>)
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002052:	4b58      	ldr	r3, [pc, #352]	@ (80021b4 <menu+0x1c34>)
 8002054:	781a      	ldrb	r2, [r3, #0]
 8002056:	4b56      	ldr	r3, [pc, #344]	@ (80021b0 <menu+0x1c30>)
 8002058:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 800205a:	4b57      	ldr	r3, [pc, #348]	@ (80021b8 <menu+0x1c38>)
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002060:	4b56      	ldr	r3, [pc, #344]	@ (80021bc <menu+0x1c3c>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b0f      	cmp	r3, #15
 8002066:	d17f      	bne.n	8002168 <menu+0x1be8>
		if(dilSecim == 0) {
 8002068:	4b48      	ldr	r3, [pc, #288]	@ (800218c <menu+0x1c0c>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10a      	bne.n	8002086 <menu+0x1b06>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002070:	4a53      	ldr	r2, [pc, #332]	@ (80021c0 <menu+0x1c40>)
 8002072:	2101      	movs	r1, #1
 8002074:	2001      	movs	r0, #1
 8002076:	f7fe fa22 	bl	80004be <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800207a:	4a52      	ldr	r2, [pc, #328]	@ (80021c4 <menu+0x1c44>)
 800207c:	2101      	movs	r1, #1
 800207e:	2002      	movs	r0, #2
 8002080:	f7fe fa1d 	bl	80004be <lcd_print>
 8002084:	e00d      	b.n	80020a2 <menu+0x1b22>
		} else if(dilSecim == 1) {
 8002086:	4b41      	ldr	r3, [pc, #260]	@ (800218c <menu+0x1c0c>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d109      	bne.n	80020a2 <menu+0x1b22>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 800208e:	4a4e      	ldr	r2, [pc, #312]	@ (80021c8 <menu+0x1c48>)
 8002090:	2101      	movs	r1, #1
 8002092:	2001      	movs	r0, #1
 8002094:	f7fe fa13 	bl	80004be <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002098:	4a4c      	ldr	r2, [pc, #304]	@ (80021cc <menu+0x1c4c>)
 800209a:	2101      	movs	r1, #1
 800209c:	2002      	movs	r0, #2
 800209e:	f7fe fa0e 	bl	80004be <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 80020a2:	4b4b      	ldr	r3, [pc, #300]	@ (80021d0 <menu+0x1c50>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	220a      	movs	r2, #10
 80020a8:	494a      	ldr	r1, [pc, #296]	@ (80021d4 <menu+0x1c54>)
 80020aa:	4618      	mov	r0, r3
 80020ac:	f00a fb9e 	bl	800c7ec <itoa>
		lcd_print(2,16,snum);
 80020b0:	4a48      	ldr	r2, [pc, #288]	@ (80021d4 <menu+0x1c54>)
 80020b2:	2110      	movs	r1, #16
 80020b4:	2002      	movs	r0, #2
 80020b6:	f7fe fa02 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80020ba:	2102      	movs	r1, #2
 80020bc:	483a      	ldr	r0, [pc, #232]	@ (80021a8 <menu+0x1c28>)
 80020be:	f006 f9d9 	bl	8008474 <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d119      	bne.n	80020fc <menu+0x1b7c>
 80020c8:	4b38      	ldr	r3, [pc, #224]	@ (80021ac <menu+0x1c2c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	f083 0301 	eor.w	r3, r3, #1
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d012      	beq.n	80020fc <menu+0x1b7c>
 80020d6:	4b40      	ldr	r3, [pc, #256]	@ (80021d8 <menu+0x1c58>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10e      	bne.n	80020fc <menu+0x1b7c>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80020de:	4b3c      	ldr	r3, [pc, #240]	@ (80021d0 <menu+0x1c50>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	3301      	adds	r3, #1
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4b3a      	ldr	r3, [pc, #232]	@ (80021d0 <menu+0x1c50>)
 80020e8:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80020ea:	4b39      	ldr	r3, [pc, #228]	@ (80021d0 <menu+0x1c50>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b05      	cmp	r3, #5
 80020f0:	d902      	bls.n	80020f8 <menu+0x1b78>
				kapiTablaAcSure = 0;
 80020f2:	4b37      	ldr	r3, [pc, #220]	@ (80021d0 <menu+0x1c50>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020f8:	f002 f99c 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80020fc:	2104      	movs	r1, #4
 80020fe:	482a      	ldr	r0, [pc, #168]	@ (80021a8 <menu+0x1c28>)
 8002100:	f006 f9b8 	bl	8008474 <HAL_GPIO_ReadPin>
 8002104:	4603      	mov	r3, r0
 8002106:	2b01      	cmp	r3, #1
 8002108:	d119      	bne.n	800213e <menu+0x1bbe>
 800210a:	4b28      	ldr	r3, [pc, #160]	@ (80021ac <menu+0x1c2c>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	f083 0301 	eor.w	r3, r3, #1
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d012      	beq.n	800213e <menu+0x1bbe>
 8002118:	4b2f      	ldr	r3, [pc, #188]	@ (80021d8 <menu+0x1c58>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10e      	bne.n	800213e <menu+0x1bbe>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002120:	4b2b      	ldr	r3, [pc, #172]	@ (80021d0 <menu+0x1c50>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	3b01      	subs	r3, #1
 8002126:	b2da      	uxtb	r2, r3
 8002128:	4b29      	ldr	r3, [pc, #164]	@ (80021d0 <menu+0x1c50>)
 800212a:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800212c:	4b28      	ldr	r3, [pc, #160]	@ (80021d0 <menu+0x1c50>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b06      	cmp	r3, #6
 8002132:	d902      	bls.n	800213a <menu+0x1bba>
		   		kapiTablaAcSure = 5;
 8002134:	4b26      	ldr	r3, [pc, #152]	@ (80021d0 <menu+0x1c50>)
 8002136:	2205      	movs	r2, #5
 8002138:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800213a:	f002 f97b 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800213e:	2108      	movs	r1, #8
 8002140:	4819      	ldr	r0, [pc, #100]	@ (80021a8 <menu+0x1c28>)
 8002142:	f006 f997 	bl	8008474 <HAL_GPIO_ReadPin>
 8002146:	4603      	mov	r3, r0
 8002148:	2b01      	cmp	r3, #1
 800214a:	d10d      	bne.n	8002168 <menu+0x1be8>
 800214c:	4b17      	ldr	r3, [pc, #92]	@ (80021ac <menu+0x1c2c>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	f083 0301 	eor.w	r3, r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d006      	beq.n	8002168 <menu+0x1be8>
			eepromData[13] = kapiTablaAcSure;
 800215a:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <menu+0x1c50>)
 800215c:	781a      	ldrb	r2, [r3, #0]
 800215e:	4b14      	ldr	r3, [pc, #80]	@ (80021b0 <menu+0x1c30>)
 8002160:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002162:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <menu+0x1c38>)
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002168:	4b14      	ldr	r3, [pc, #80]	@ (80021bc <menu+0x1c3c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b10      	cmp	r3, #16
 800216e:	f040 80be 	bne.w	80022ee <menu+0x1d6e>
		if(dilSecim == 0) {
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <menu+0x1c0c>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d132      	bne.n	80021e0 <menu+0x1c60>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 800217a:	4a18      	ldr	r2, [pc, #96]	@ (80021dc <menu+0x1c5c>)
 800217c:	2101      	movs	r1, #1
 800217e:	2001      	movs	r0, #1
 8002180:	f7fe f99d 	bl	80004be <lcd_print>
 8002184:	e035      	b.n	80021f2 <menu+0x1c72>
 8002186:	bf00      	nop
 8002188:	20000c91 	.word	0x20000c91
 800218c:	20000ca4 	.word	0x20000ca4
 8002190:	0800d0a8 	.word	0x0800d0a8
 8002194:	0800d0b8 	.word	0x0800d0b8
 8002198:	0800d0c8 	.word	0x0800d0c8
 800219c:	0800d0dc 	.word	0x0800d0dc
 80021a0:	0800cd50 	.word	0x0800cd50
 80021a4:	0800cd64 	.word	0x0800cd64
 80021a8:	40010800 	.word	0x40010800
 80021ac:	20000cb2 	.word	0x20000cb2
 80021b0:	20000c18 	.word	0x20000c18
 80021b4:	20000c8a 	.word	0x20000c8a
 80021b8:	20000caf 	.word	0x20000caf
 80021bc:	20000c84 	.word	0x20000c84
 80021c0:	0800d0f0 	.word	0x0800d0f0
 80021c4:	0800cfb4 	.word	0x0800cfb4
 80021c8:	0800d104 	.word	0x0800d104
 80021cc:	0800cfd8 	.word	0x0800cfd8
 80021d0:	20000c9f 	.word	0x20000c9f
 80021d4:	20000c58 	.word	0x20000c58
 80021d8:	20000c8f 	.word	0x20000c8f
 80021dc:	0800d118 	.word	0x0800d118
		} else if(dilSecim == 1) {
 80021e0:	4b6e      	ldr	r3, [pc, #440]	@ (800239c <menu+0x1e1c>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d104      	bne.n	80021f2 <menu+0x1c72>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80021e8:	4a6d      	ldr	r2, [pc, #436]	@ (80023a0 <menu+0x1e20>)
 80021ea:	2101      	movs	r1, #1
 80021ec:	2001      	movs	r0, #1
 80021ee:	f7fe f966 	bl	80004be <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80021f2:	4b6c      	ldr	r3, [pc, #432]	@ (80023a4 <menu+0x1e24>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d113      	bne.n	8002222 <menu+0x1ca2>
			if(dilSecim == 0) {
 80021fa:	4b68      	ldr	r3, [pc, #416]	@ (800239c <menu+0x1e1c>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d105      	bne.n	800220e <menu+0x1c8e>
				lcd_print(2, 1, "Pasif           ");
 8002202:	4a69      	ldr	r2, [pc, #420]	@ (80023a8 <menu+0x1e28>)
 8002204:	2101      	movs	r1, #1
 8002206:	2002      	movs	r0, #2
 8002208:	f7fe f959 	bl	80004be <lcd_print>
 800220c:	e020      	b.n	8002250 <menu+0x1cd0>
			} else if(dilSecim == 1) {
 800220e:	4b63      	ldr	r3, [pc, #396]	@ (800239c <menu+0x1e1c>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d11c      	bne.n	8002250 <menu+0x1cd0>
				lcd_print(2, 1, "Passive         ");
 8002216:	4a65      	ldr	r2, [pc, #404]	@ (80023ac <menu+0x1e2c>)
 8002218:	2101      	movs	r1, #1
 800221a:	2002      	movs	r0, #2
 800221c:	f7fe f94f 	bl	80004be <lcd_print>
 8002220:	e016      	b.n	8002250 <menu+0x1cd0>
			}
		} else if(yukariYavasLimit == 1) {
 8002222:	4b60      	ldr	r3, [pc, #384]	@ (80023a4 <menu+0x1e24>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d112      	bne.n	8002250 <menu+0x1cd0>
			if(dilSecim == 0) {
 800222a:	4b5c      	ldr	r3, [pc, #368]	@ (800239c <menu+0x1e1c>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <menu+0x1cbe>
				lcd_print(2, 1, "Aktif           ");
 8002232:	4a5f      	ldr	r2, [pc, #380]	@ (80023b0 <menu+0x1e30>)
 8002234:	2101      	movs	r1, #1
 8002236:	2002      	movs	r0, #2
 8002238:	f7fe f941 	bl	80004be <lcd_print>
 800223c:	e008      	b.n	8002250 <menu+0x1cd0>
			} else if(dilSecim == 1) {
 800223e:	4b57      	ldr	r3, [pc, #348]	@ (800239c <menu+0x1e1c>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d104      	bne.n	8002250 <menu+0x1cd0>
				lcd_print(2, 1, "Active          ");
 8002246:	4a5b      	ldr	r2, [pc, #364]	@ (80023b4 <menu+0x1e34>)
 8002248:	2101      	movs	r1, #1
 800224a:	2002      	movs	r0, #2
 800224c:	f7fe f937 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002250:	2102      	movs	r1, #2
 8002252:	4859      	ldr	r0, [pc, #356]	@ (80023b8 <menu+0x1e38>)
 8002254:	f006 f90e 	bl	8008474 <HAL_GPIO_ReadPin>
 8002258:	4603      	mov	r3, r0
 800225a:	2b01      	cmp	r3, #1
 800225c:	d115      	bne.n	800228a <menu+0x1d0a>
 800225e:	4b57      	ldr	r3, [pc, #348]	@ (80023bc <menu+0x1e3c>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	f083 0301 	eor.w	r3, r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00e      	beq.n	800228a <menu+0x1d0a>
			yukariYavasLimit = yukariYavasLimit + 1;
 800226c:	4b4d      	ldr	r3, [pc, #308]	@ (80023a4 <menu+0x1e24>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	3301      	adds	r3, #1
 8002272:	b2da      	uxtb	r2, r3
 8002274:	4b4b      	ldr	r3, [pc, #300]	@ (80023a4 <menu+0x1e24>)
 8002276:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002278:	4b4a      	ldr	r3, [pc, #296]	@ (80023a4 <menu+0x1e24>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d902      	bls.n	8002286 <menu+0x1d06>
				yukariYavasLimit = 0;
 8002280:	4b48      	ldr	r3, [pc, #288]	@ (80023a4 <menu+0x1e24>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002286:	f002 f8d5 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800228a:	2104      	movs	r1, #4
 800228c:	484a      	ldr	r0, [pc, #296]	@ (80023b8 <menu+0x1e38>)
 800228e:	f006 f8f1 	bl	8008474 <HAL_GPIO_ReadPin>
 8002292:	4603      	mov	r3, r0
 8002294:	2b01      	cmp	r3, #1
 8002296:	d115      	bne.n	80022c4 <menu+0x1d44>
 8002298:	4b48      	ldr	r3, [pc, #288]	@ (80023bc <menu+0x1e3c>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	f083 0301 	eor.w	r3, r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00e      	beq.n	80022c4 <menu+0x1d44>
			yukariYavasLimit = yukariYavasLimit - 1;
 80022a6:	4b3f      	ldr	r3, [pc, #252]	@ (80023a4 <menu+0x1e24>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b3d      	ldr	r3, [pc, #244]	@ (80023a4 <menu+0x1e24>)
 80022b0:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80022b2:	4b3c      	ldr	r3, [pc, #240]	@ (80023a4 <menu+0x1e24>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <menu+0x1d40>
		   		yukariYavasLimit = 1;
 80022ba:	4b3a      	ldr	r3, [pc, #232]	@ (80023a4 <menu+0x1e24>)
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022c0:	f002 f8b8 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022c4:	2108      	movs	r1, #8
 80022c6:	483c      	ldr	r0, [pc, #240]	@ (80023b8 <menu+0x1e38>)
 80022c8:	f006 f8d4 	bl	8008474 <HAL_GPIO_ReadPin>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d10d      	bne.n	80022ee <menu+0x1d6e>
 80022d2:	4b3a      	ldr	r3, [pc, #232]	@ (80023bc <menu+0x1e3c>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	f083 0301 	eor.w	r3, r3, #1
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d006      	beq.n	80022ee <menu+0x1d6e>
			eepromData[14] = yukariYavasLimit;
 80022e0:	4b30      	ldr	r3, [pc, #192]	@ (80023a4 <menu+0x1e24>)
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	4b36      	ldr	r3, [pc, #216]	@ (80023c0 <menu+0x1e40>)
 80022e6:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80022e8:	4b36      	ldr	r3, [pc, #216]	@ (80023c4 <menu+0x1e44>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80022ee:	4b36      	ldr	r3, [pc, #216]	@ (80023c8 <menu+0x1e48>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b11      	cmp	r3, #17
 80022f4:	f040 80ea 	bne.w	80024cc <menu+0x1f4c>
		if(dilSecim == 0) {
 80022f8:	4b28      	ldr	r3, [pc, #160]	@ (800239c <menu+0x1e1c>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d105      	bne.n	800230c <menu+0x1d8c>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002300:	4a32      	ldr	r2, [pc, #200]	@ (80023cc <menu+0x1e4c>)
 8002302:	2101      	movs	r1, #1
 8002304:	2001      	movs	r0, #1
 8002306:	f7fe f8da 	bl	80004be <lcd_print>
 800230a:	e008      	b.n	800231e <menu+0x1d9e>
		} else if(dilSecim == 1) {
 800230c:	4b23      	ldr	r3, [pc, #140]	@ (800239c <menu+0x1e1c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d104      	bne.n	800231e <menu+0x1d9e>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002314:	4a2e      	ldr	r2, [pc, #184]	@ (80023d0 <menu+0x1e50>)
 8002316:	2101      	movs	r1, #1
 8002318:	2001      	movs	r0, #1
 800231a:	f7fe f8d0 	bl	80004be <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 800231e:	4b2d      	ldr	r3, [pc, #180]	@ (80023d4 <menu+0x1e54>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d113      	bne.n	800234e <menu+0x1dce>
			if(dilSecim == 0){
 8002326:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <menu+0x1e1c>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d105      	bne.n	800233a <menu+0x1dba>
				lcd_print(2, 1, "Devirme aktif  ");
 800232e:	4a2a      	ldr	r2, [pc, #168]	@ (80023d8 <menu+0x1e58>)
 8002330:	2101      	movs	r1, #1
 8002332:	2002      	movs	r0, #2
 8002334:	f7fe f8c3 	bl	80004be <lcd_print>
 8002338:	e05f      	b.n	80023fa <menu+0x1e7a>
			} else if(dilSecim == 1){
 800233a:	4b18      	ldr	r3, [pc, #96]	@ (800239c <menu+0x1e1c>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d15b      	bne.n	80023fa <menu+0x1e7a>
				lcd_print(2, 1, "Tipping active ");
 8002342:	4a26      	ldr	r2, [pc, #152]	@ (80023dc <menu+0x1e5c>)
 8002344:	2101      	movs	r1, #1
 8002346:	2002      	movs	r0, #2
 8002348:	f7fe f8b9 	bl	80004be <lcd_print>
 800234c:	e055      	b.n	80023fa <menu+0x1e7a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800234e:	4b21      	ldr	r3, [pc, #132]	@ (80023d4 <menu+0x1e54>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d113      	bne.n	800237e <menu+0x1dfe>
			if(dilSecim == 0){
 8002356:	4b11      	ldr	r3, [pc, #68]	@ (800239c <menu+0x1e1c>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <menu+0x1dea>
				lcd_print(2, 1, "Yuruyus aktif  ");
 800235e:	4a20      	ldr	r2, [pc, #128]	@ (80023e0 <menu+0x1e60>)
 8002360:	2101      	movs	r1, #1
 8002362:	2002      	movs	r0, #2
 8002364:	f7fe f8ab 	bl	80004be <lcd_print>
 8002368:	e047      	b.n	80023fa <menu+0x1e7a>
			} else if(dilSecim == 1) {
 800236a:	4b0c      	ldr	r3, [pc, #48]	@ (800239c <menu+0x1e1c>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d143      	bne.n	80023fa <menu+0x1e7a>
				lcd_print(2, 1, "Drive active   ");
 8002372:	4a1c      	ldr	r2, [pc, #112]	@ (80023e4 <menu+0x1e64>)
 8002374:	2101      	movs	r1, #1
 8002376:	2002      	movs	r0, #2
 8002378:	f7fe f8a1 	bl	80004be <lcd_print>
 800237c:	e03d      	b.n	80023fa <menu+0x1e7a>
			}
		} else if(devirmeYuruyusSecim == 0) {
 800237e:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <menu+0x1e54>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d139      	bne.n	80023fa <menu+0x1e7a>
			if(dilSecim == 0) {
 8002386:	4b05      	ldr	r3, [pc, #20]	@ (800239c <menu+0x1e1c>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d12c      	bne.n	80023e8 <menu+0x1e68>
				lcd_print(2, 1, "Pasif           ");
 800238e:	4a06      	ldr	r2, [pc, #24]	@ (80023a8 <menu+0x1e28>)
 8002390:	2101      	movs	r1, #1
 8002392:	2002      	movs	r0, #2
 8002394:	f7fe f893 	bl	80004be <lcd_print>
 8002398:	e02f      	b.n	80023fa <menu+0x1e7a>
 800239a:	bf00      	nop
 800239c:	20000ca4 	.word	0x20000ca4
 80023a0:	0800d12c 	.word	0x0800d12c
 80023a4:	20000c92 	.word	0x20000c92
 80023a8:	0800cd50 	.word	0x0800cd50
 80023ac:	0800cd64 	.word	0x0800cd64
 80023b0:	0800cdb0 	.word	0x0800cdb0
 80023b4:	0800cdc4 	.word	0x0800cdc4
 80023b8:	40010800 	.word	0x40010800
 80023bc:	20000cb2 	.word	0x20000cb2
 80023c0:	20000c18 	.word	0x20000c18
 80023c4:	20000caf 	.word	0x20000caf
 80023c8:	20000c84 	.word	0x20000c84
 80023cc:	0800d140 	.word	0x0800d140
 80023d0:	0800d154 	.word	0x0800d154
 80023d4:	20000c93 	.word	0x20000c93
 80023d8:	0800d168 	.word	0x0800d168
 80023dc:	0800d178 	.word	0x0800d178
 80023e0:	0800d188 	.word	0x0800d188
 80023e4:	0800d198 	.word	0x0800d198
			} else if(dilSecim == 1) {
 80023e8:	4b9a      	ldr	r3, [pc, #616]	@ (8002654 <menu+0x20d4>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d104      	bne.n	80023fa <menu+0x1e7a>
				lcd_print(2, 1, "Passive         ");
 80023f0:	4a99      	ldr	r2, [pc, #612]	@ (8002658 <menu+0x20d8>)
 80023f2:	2101      	movs	r1, #1
 80023f4:	2002      	movs	r0, #2
 80023f6:	f7fe f862 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023fa:	2102      	movs	r1, #2
 80023fc:	4897      	ldr	r0, [pc, #604]	@ (800265c <menu+0x20dc>)
 80023fe:	f006 f839 	bl	8008474 <HAL_GPIO_ReadPin>
 8002402:	4603      	mov	r3, r0
 8002404:	2b01      	cmp	r3, #1
 8002406:	d115      	bne.n	8002434 <menu+0x1eb4>
 8002408:	4b95      	ldr	r3, [pc, #596]	@ (8002660 <menu+0x20e0>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	f083 0301 	eor.w	r3, r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00e      	beq.n	8002434 <menu+0x1eb4>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002416:	4b93      	ldr	r3, [pc, #588]	@ (8002664 <menu+0x20e4>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	3301      	adds	r3, #1
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b91      	ldr	r3, [pc, #580]	@ (8002664 <menu+0x20e4>)
 8002420:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002422:	4b90      	ldr	r3, [pc, #576]	@ (8002664 <menu+0x20e4>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d902      	bls.n	8002430 <menu+0x1eb0>
				devirmeYuruyusSecim = 0;
 800242a:	4b8e      	ldr	r3, [pc, #568]	@ (8002664 <menu+0x20e4>)
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002430:	f002 f800 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002434:	2104      	movs	r1, #4
 8002436:	4889      	ldr	r0, [pc, #548]	@ (800265c <menu+0x20dc>)
 8002438:	f006 f81c 	bl	8008474 <HAL_GPIO_ReadPin>
 800243c:	4603      	mov	r3, r0
 800243e:	2b01      	cmp	r3, #1
 8002440:	d115      	bne.n	800246e <menu+0x1eee>
 8002442:	4b87      	ldr	r3, [pc, #540]	@ (8002660 <menu+0x20e0>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	f083 0301 	eor.w	r3, r3, #1
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00e      	beq.n	800246e <menu+0x1eee>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002450:	4b84      	ldr	r3, [pc, #528]	@ (8002664 <menu+0x20e4>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	3b01      	subs	r3, #1
 8002456:	b2da      	uxtb	r2, r3
 8002458:	4b82      	ldr	r3, [pc, #520]	@ (8002664 <menu+0x20e4>)
 800245a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 800245c:	4b81      	ldr	r3, [pc, #516]	@ (8002664 <menu+0x20e4>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d902      	bls.n	800246a <menu+0x1eea>
		   		devirmeYuruyusSecim = 2;
 8002464:	4b7f      	ldr	r3, [pc, #508]	@ (8002664 <menu+0x20e4>)
 8002466:	2202      	movs	r2, #2
 8002468:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800246a:	f001 ffe3 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800246e:	2108      	movs	r1, #8
 8002470:	487a      	ldr	r0, [pc, #488]	@ (800265c <menu+0x20dc>)
 8002472:	f005 ffff 	bl	8008474 <HAL_GPIO_ReadPin>
 8002476:	4603      	mov	r3, r0
 8002478:	2b01      	cmp	r3, #1
 800247a:	d127      	bne.n	80024cc <menu+0x1f4c>
 800247c:	4b78      	ldr	r3, [pc, #480]	@ (8002660 <menu+0x20e0>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	f083 0301 	eor.w	r3, r3, #1
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d020      	beq.n	80024cc <menu+0x1f4c>
			eepromData[15] = devirmeYuruyusSecim;
 800248a:	4b76      	ldr	r3, [pc, #472]	@ (8002664 <menu+0x20e4>)
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	4b76      	ldr	r3, [pc, #472]	@ (8002668 <menu+0x20e8>)
 8002490:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002492:	4b74      	ldr	r3, [pc, #464]	@ (8002664 <menu+0x20e4>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d003      	beq.n	80024a2 <menu+0x1f22>
 800249a:	4b72      	ldr	r3, [pc, #456]	@ (8002664 <menu+0x20e4>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d106      	bne.n	80024b0 <menu+0x1f30>
				calismaSekli = 0;
 80024a2:	4b72      	ldr	r3, [pc, #456]	@ (800266c <menu+0x20ec>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80024a8:	4b70      	ldr	r3, [pc, #448]	@ (800266c <menu+0x20ec>)
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	4b6e      	ldr	r3, [pc, #440]	@ (8002668 <menu+0x20e8>)
 80024ae:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80024b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002664 <menu+0x20e4>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d106      	bne.n	80024c6 <menu+0x1f46>
				devirmeSilindirTipi = 1;
 80024b8:	4b6d      	ldr	r3, [pc, #436]	@ (8002670 <menu+0x20f0>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80024be:	4b6c      	ldr	r3, [pc, #432]	@ (8002670 <menu+0x20f0>)
 80024c0:	781a      	ldrb	r2, [r3, #0]
 80024c2:	4b69      	ldr	r3, [pc, #420]	@ (8002668 <menu+0x20e8>)
 80024c4:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80024c6:	4b6b      	ldr	r3, [pc, #428]	@ (8002674 <menu+0x20f4>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80024cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002678 <menu+0x20f8>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b12      	cmp	r3, #18
 80024d2:	f040 80ac 	bne.w	800262e <menu+0x20ae>
		if(devirmeYuruyusSecim == 2) {
 80024d6:	4b63      	ldr	r3, [pc, #396]	@ (8002664 <menu+0x20e4>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d113      	bne.n	8002506 <menu+0x1f86>
			if(dilSecim == 0) {
 80024de:	4b5d      	ldr	r3, [pc, #372]	@ (8002654 <menu+0x20d4>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d105      	bne.n	80024f2 <menu+0x1f72>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80024e6:	4a65      	ldr	r2, [pc, #404]	@ (800267c <menu+0x20fc>)
 80024e8:	2101      	movs	r1, #1
 80024ea:	2001      	movs	r0, #1
 80024ec:	f7fd ffe7 	bl	80004be <lcd_print>
 80024f0:	e01f      	b.n	8002532 <menu+0x1fb2>
			} else if(dilSecim == 1) {
 80024f2:	4b58      	ldr	r3, [pc, #352]	@ (8002654 <menu+0x20d4>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d11b      	bne.n	8002532 <menu+0x1fb2>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80024fa:	4a61      	ldr	r2, [pc, #388]	@ (8002680 <menu+0x2100>)
 80024fc:	2101      	movs	r1, #1
 80024fe:	2001      	movs	r0, #1
 8002500:	f7fd ffdd 	bl	80004be <lcd_print>
 8002504:	e015      	b.n	8002532 <menu+0x1fb2>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002506:	4b57      	ldr	r3, [pc, #348]	@ (8002664 <menu+0x20e4>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d111      	bne.n	8002532 <menu+0x1fb2>
			if(dilSecim == 0){
 800250e:	4b51      	ldr	r3, [pc, #324]	@ (8002654 <menu+0x20d4>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d104      	bne.n	8002520 <menu+0x1fa0>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8002516:	4a5b      	ldr	r2, [pc, #364]	@ (8002684 <menu+0x2104>)
 8002518:	2101      	movs	r1, #1
 800251a:	2001      	movs	r0, #1
 800251c:	f7fd ffcf 	bl	80004be <lcd_print>
			}
			if(dilSecim == 1){
 8002520:	4b4c      	ldr	r3, [pc, #304]	@ (8002654 <menu+0x20d4>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d104      	bne.n	8002532 <menu+0x1fb2>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8002528:	4a57      	ldr	r2, [pc, #348]	@ (8002688 <menu+0x2108>)
 800252a:	2101      	movs	r1, #1
 800252c:	2001      	movs	r0, #1
 800252e:	f7fd ffc6 	bl	80004be <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8002532:	4b56      	ldr	r3, [pc, #344]	@ (800268c <menu+0x210c>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d113      	bne.n	8002562 <menu+0x1fe2>
			if(dilSecim == 0) {
 800253a:	4b46      	ldr	r3, [pc, #280]	@ (8002654 <menu+0x20d4>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d105      	bne.n	800254e <menu+0x1fce>
				lcd_print(2, 1, "Pasif           ");
 8002542:	4a53      	ldr	r2, [pc, #332]	@ (8002690 <menu+0x2110>)
 8002544:	2101      	movs	r1, #1
 8002546:	2002      	movs	r0, #2
 8002548:	f7fd ffb9 	bl	80004be <lcd_print>
 800254c:	e020      	b.n	8002590 <menu+0x2010>
			} else if(dilSecim == 1){
 800254e:	4b41      	ldr	r3, [pc, #260]	@ (8002654 <menu+0x20d4>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d11c      	bne.n	8002590 <menu+0x2010>
				lcd_print(2, 1, "Passive         ");
 8002556:	4a40      	ldr	r2, [pc, #256]	@ (8002658 <menu+0x20d8>)
 8002558:	2101      	movs	r1, #1
 800255a:	2002      	movs	r0, #2
 800255c:	f7fd ffaf 	bl	80004be <lcd_print>
 8002560:	e016      	b.n	8002590 <menu+0x2010>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8002562:	4b4a      	ldr	r3, [pc, #296]	@ (800268c <menu+0x210c>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d112      	bne.n	8002590 <menu+0x2010>
			if(dilSecim == 0){
 800256a:	4b3a      	ldr	r3, [pc, #232]	@ (8002654 <menu+0x20d4>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d105      	bne.n	800257e <menu+0x1ffe>
				lcd_print(2, 1, "Aktif           ");
 8002572:	4a48      	ldr	r2, [pc, #288]	@ (8002694 <menu+0x2114>)
 8002574:	2101      	movs	r1, #1
 8002576:	2002      	movs	r0, #2
 8002578:	f7fd ffa1 	bl	80004be <lcd_print>
 800257c:	e008      	b.n	8002590 <menu+0x2010>
			} else if(dilSecim == 1){
 800257e:	4b35      	ldr	r3, [pc, #212]	@ (8002654 <menu+0x20d4>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d104      	bne.n	8002590 <menu+0x2010>
				lcd_print(2, 1, "Active          ");
 8002586:	4a44      	ldr	r2, [pc, #272]	@ (8002698 <menu+0x2118>)
 8002588:	2101      	movs	r1, #1
 800258a:	2002      	movs	r0, #2
 800258c:	f7fd ff97 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002590:	2102      	movs	r1, #2
 8002592:	4832      	ldr	r0, [pc, #200]	@ (800265c <menu+0x20dc>)
 8002594:	f005 ff6e 	bl	8008474 <HAL_GPIO_ReadPin>
 8002598:	4603      	mov	r3, r0
 800259a:	2b01      	cmp	r3, #1
 800259c:	d115      	bne.n	80025ca <menu+0x204a>
 800259e:	4b30      	ldr	r3, [pc, #192]	@ (8002660 <menu+0x20e0>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	f083 0301 	eor.w	r3, r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00e      	beq.n	80025ca <menu+0x204a>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80025ac:	4b37      	ldr	r3, [pc, #220]	@ (800268c <menu+0x210c>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	4b35      	ldr	r3, [pc, #212]	@ (800268c <menu+0x210c>)
 80025b6:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80025b8:	4b34      	ldr	r3, [pc, #208]	@ (800268c <menu+0x210c>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d902      	bls.n	80025c6 <menu+0x2046>
				devirmeYukariIleriLimit = 0;
 80025c0:	4b32      	ldr	r3, [pc, #200]	@ (800268c <menu+0x210c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025c6:	f001 ff35 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025ca:	2104      	movs	r1, #4
 80025cc:	4823      	ldr	r0, [pc, #140]	@ (800265c <menu+0x20dc>)
 80025ce:	f005 ff51 	bl	8008474 <HAL_GPIO_ReadPin>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d115      	bne.n	8002604 <menu+0x2084>
 80025d8:	4b21      	ldr	r3, [pc, #132]	@ (8002660 <menu+0x20e0>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	f083 0301 	eor.w	r3, r3, #1
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00e      	beq.n	8002604 <menu+0x2084>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80025e6:	4b29      	ldr	r3, [pc, #164]	@ (800268c <menu+0x210c>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4b27      	ldr	r3, [pc, #156]	@ (800268c <menu+0x210c>)
 80025f0:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80025f2:	4b26      	ldr	r3, [pc, #152]	@ (800268c <menu+0x210c>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <menu+0x2080>
		   		devirmeYukariIleriLimit = 1;
 80025fa:	4b24      	ldr	r3, [pc, #144]	@ (800268c <menu+0x210c>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002600:	f001 ff18 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002604:	2108      	movs	r1, #8
 8002606:	4815      	ldr	r0, [pc, #84]	@ (800265c <menu+0x20dc>)
 8002608:	f005 ff34 	bl	8008474 <HAL_GPIO_ReadPin>
 800260c:	4603      	mov	r3, r0
 800260e:	2b01      	cmp	r3, #1
 8002610:	d10d      	bne.n	800262e <menu+0x20ae>
 8002612:	4b13      	ldr	r3, [pc, #76]	@ (8002660 <menu+0x20e0>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	f083 0301 	eor.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d006      	beq.n	800262e <menu+0x20ae>
			eepromData[16] = devirmeYukariIleriLimit;
 8002620:	4b1a      	ldr	r3, [pc, #104]	@ (800268c <menu+0x210c>)
 8002622:	781a      	ldrb	r2, [r3, #0]
 8002624:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <menu+0x20e8>)
 8002626:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002628:	4b12      	ldr	r3, [pc, #72]	@ (8002674 <menu+0x20f4>)
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 800262e:	4b12      	ldr	r3, [pc, #72]	@ (8002678 <menu+0x20f8>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b13      	cmp	r3, #19
 8002634:	f040 80d2 	bne.w	80027dc <menu+0x225c>
		if(devirmeYuruyusSecim == 2) {
 8002638:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <menu+0x20e4>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d139      	bne.n	80026b4 <menu+0x2134>
			if(dilSecim == 0) {
 8002640:	4b04      	ldr	r3, [pc, #16]	@ (8002654 <menu+0x20d4>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d12b      	bne.n	80026a0 <menu+0x2120>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8002648:	4a14      	ldr	r2, [pc, #80]	@ (800269c <menu+0x211c>)
 800264a:	2101      	movs	r1, #1
 800264c:	2001      	movs	r0, #1
 800264e:	f7fd ff36 	bl	80004be <lcd_print>
 8002652:	e045      	b.n	80026e0 <menu+0x2160>
 8002654:	20000ca4 	.word	0x20000ca4
 8002658:	0800cd64 	.word	0x0800cd64
 800265c:	40010800 	.word	0x40010800
 8002660:	20000cb2 	.word	0x20000cb2
 8002664:	20000c93 	.word	0x20000c93
 8002668:	20000c18 	.word	0x20000c18
 800266c:	20000c85 	.word	0x20000c85
 8002670:	20000c96 	.word	0x20000c96
 8002674:	20000caf 	.word	0x20000caf
 8002678:	20000c84 	.word	0x20000c84
 800267c:	0800d1a8 	.word	0x0800d1a8
 8002680:	0800d1bc 	.word	0x0800d1bc
 8002684:	0800d1cc 	.word	0x0800d1cc
 8002688:	0800d1e0 	.word	0x0800d1e0
 800268c:	20000c94 	.word	0x20000c94
 8002690:	0800cd50 	.word	0x0800cd50
 8002694:	0800cdb0 	.word	0x0800cdb0
 8002698:	0800cdc4 	.word	0x0800cdc4
 800269c:	0800d1f4 	.word	0x0800d1f4
			} else if(dilSecim == 1) {
 80026a0:	4b7b      	ldr	r3, [pc, #492]	@ (8002890 <menu+0x2310>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d11b      	bne.n	80026e0 <menu+0x2160>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80026a8:	4a7a      	ldr	r2, [pc, #488]	@ (8002894 <menu+0x2314>)
 80026aa:	2101      	movs	r1, #1
 80026ac:	2001      	movs	r0, #1
 80026ae:	f7fd ff06 	bl	80004be <lcd_print>
 80026b2:	e015      	b.n	80026e0 <menu+0x2160>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80026b4:	4b78      	ldr	r3, [pc, #480]	@ (8002898 <menu+0x2318>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d111      	bne.n	80026e0 <menu+0x2160>
			if(dilSecim == 0) {
 80026bc:	4b74      	ldr	r3, [pc, #464]	@ (8002890 <menu+0x2310>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d104      	bne.n	80026ce <menu+0x214e>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80026c4:	4a75      	ldr	r2, [pc, #468]	@ (800289c <menu+0x231c>)
 80026c6:	2101      	movs	r1, #1
 80026c8:	2001      	movs	r0, #1
 80026ca:	f7fd fef8 	bl	80004be <lcd_print>
			}
			if(dilSecim == 1) {
 80026ce:	4b70      	ldr	r3, [pc, #448]	@ (8002890 <menu+0x2310>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d104      	bne.n	80026e0 <menu+0x2160>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80026d6:	4a72      	ldr	r2, [pc, #456]	@ (80028a0 <menu+0x2320>)
 80026d8:	2101      	movs	r1, #1
 80026da:	2001      	movs	r0, #1
 80026dc:	f7fd feef 	bl	80004be <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80026e0:	4b70      	ldr	r3, [pc, #448]	@ (80028a4 <menu+0x2324>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d113      	bne.n	8002710 <menu+0x2190>
			if(dilSecim == 0) {
 80026e8:	4b69      	ldr	r3, [pc, #420]	@ (8002890 <menu+0x2310>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d105      	bne.n	80026fc <menu+0x217c>
				lcd_print(2, 1, "Pasif           ");
 80026f0:	4a6d      	ldr	r2, [pc, #436]	@ (80028a8 <menu+0x2328>)
 80026f2:	2101      	movs	r1, #1
 80026f4:	2002      	movs	r0, #2
 80026f6:	f7fd fee2 	bl	80004be <lcd_print>
 80026fa:	e020      	b.n	800273e <menu+0x21be>
			} else if(dilSecim == 1) {
 80026fc:	4b64      	ldr	r3, [pc, #400]	@ (8002890 <menu+0x2310>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d11c      	bne.n	800273e <menu+0x21be>
				lcd_print(2, 1, "Passive         ");
 8002704:	4a69      	ldr	r2, [pc, #420]	@ (80028ac <menu+0x232c>)
 8002706:	2101      	movs	r1, #1
 8002708:	2002      	movs	r0, #2
 800270a:	f7fd fed8 	bl	80004be <lcd_print>
 800270e:	e016      	b.n	800273e <menu+0x21be>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8002710:	4b64      	ldr	r3, [pc, #400]	@ (80028a4 <menu+0x2324>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d112      	bne.n	800273e <menu+0x21be>
			if(dilSecim == 0) {
 8002718:	4b5d      	ldr	r3, [pc, #372]	@ (8002890 <menu+0x2310>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d105      	bne.n	800272c <menu+0x21ac>
				lcd_print(2, 1, "Aktif           ");
 8002720:	4a63      	ldr	r2, [pc, #396]	@ (80028b0 <menu+0x2330>)
 8002722:	2101      	movs	r1, #1
 8002724:	2002      	movs	r0, #2
 8002726:	f7fd feca 	bl	80004be <lcd_print>
 800272a:	e008      	b.n	800273e <menu+0x21be>
			} else if(dilSecim == 1) {
 800272c:	4b58      	ldr	r3, [pc, #352]	@ (8002890 <menu+0x2310>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d104      	bne.n	800273e <menu+0x21be>
				lcd_print(2, 1, "Active          ");
 8002734:	4a5f      	ldr	r2, [pc, #380]	@ (80028b4 <menu+0x2334>)
 8002736:	2101      	movs	r1, #1
 8002738:	2002      	movs	r0, #2
 800273a:	f7fd fec0 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800273e:	2102      	movs	r1, #2
 8002740:	485d      	ldr	r0, [pc, #372]	@ (80028b8 <menu+0x2338>)
 8002742:	f005 fe97 	bl	8008474 <HAL_GPIO_ReadPin>
 8002746:	4603      	mov	r3, r0
 8002748:	2b01      	cmp	r3, #1
 800274a:	d115      	bne.n	8002778 <menu+0x21f8>
 800274c:	4b5b      	ldr	r3, [pc, #364]	@ (80028bc <menu+0x233c>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	f083 0301 	eor.w	r3, r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00e      	beq.n	8002778 <menu+0x21f8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800275a:	4b52      	ldr	r3, [pc, #328]	@ (80028a4 <menu+0x2324>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	3301      	adds	r3, #1
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4b50      	ldr	r3, [pc, #320]	@ (80028a4 <menu+0x2324>)
 8002764:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002766:	4b4f      	ldr	r3, [pc, #316]	@ (80028a4 <menu+0x2324>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d902      	bls.n	8002774 <menu+0x21f4>
				devirmeAsagiGeriLimit = 0;
 800276e:	4b4d      	ldr	r3, [pc, #308]	@ (80028a4 <menu+0x2324>)
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002774:	f001 fe5e 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002778:	2104      	movs	r1, #4
 800277a:	484f      	ldr	r0, [pc, #316]	@ (80028b8 <menu+0x2338>)
 800277c:	f005 fe7a 	bl	8008474 <HAL_GPIO_ReadPin>
 8002780:	4603      	mov	r3, r0
 8002782:	2b01      	cmp	r3, #1
 8002784:	d115      	bne.n	80027b2 <menu+0x2232>
 8002786:	4b4d      	ldr	r3, [pc, #308]	@ (80028bc <menu+0x233c>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	f083 0301 	eor.w	r3, r3, #1
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00e      	beq.n	80027b2 <menu+0x2232>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002794:	4b43      	ldr	r3, [pc, #268]	@ (80028a4 <menu+0x2324>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	3b01      	subs	r3, #1
 800279a:	b2da      	uxtb	r2, r3
 800279c:	4b41      	ldr	r3, [pc, #260]	@ (80028a4 <menu+0x2324>)
 800279e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80027a0:	4b40      	ldr	r3, [pc, #256]	@ (80028a4 <menu+0x2324>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <menu+0x222e>
		   		devirmeAsagiGeriLimit = 1;
 80027a8:	4b3e      	ldr	r3, [pc, #248]	@ (80028a4 <menu+0x2324>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027ae:	f001 fe41 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027b2:	2108      	movs	r1, #8
 80027b4:	4840      	ldr	r0, [pc, #256]	@ (80028b8 <menu+0x2338>)
 80027b6:	f005 fe5d 	bl	8008474 <HAL_GPIO_ReadPin>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d10d      	bne.n	80027dc <menu+0x225c>
 80027c0:	4b3e      	ldr	r3, [pc, #248]	@ (80028bc <menu+0x233c>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	f083 0301 	eor.w	r3, r3, #1
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d006      	beq.n	80027dc <menu+0x225c>
			eepromData[17] = devirmeAsagiGeriLimit;
 80027ce:	4b35      	ldr	r3, [pc, #212]	@ (80028a4 <menu+0x2324>)
 80027d0:	781a      	ldrb	r2, [r3, #0]
 80027d2:	4b3b      	ldr	r3, [pc, #236]	@ (80028c0 <menu+0x2340>)
 80027d4:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80027d6:	4b3b      	ldr	r3, [pc, #236]	@ (80028c4 <menu+0x2344>)
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80027dc:	4b3a      	ldr	r3, [pc, #232]	@ (80028c8 <menu+0x2348>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b14      	cmp	r3, #20
 80027e2:	f040 80e3 	bne.w	80029ac <menu+0x242c>
		if(devirmeYuruyusSecim == 1) {
 80027e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002898 <menu+0x2318>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d113      	bne.n	8002816 <menu+0x2296>
			if(dilSecim == 0) {
 80027ee:	4b28      	ldr	r3, [pc, #160]	@ (8002890 <menu+0x2310>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d105      	bne.n	8002802 <menu+0x2282>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80027f6:	4a35      	ldr	r2, [pc, #212]	@ (80028cc <menu+0x234c>)
 80027f8:	2101      	movs	r1, #1
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7fd fe5f 	bl	80004be <lcd_print>
 8002800:	e020      	b.n	8002844 <menu+0x22c4>
			} else if(dilSecim == 1) {
 8002802:	4b23      	ldr	r3, [pc, #140]	@ (8002890 <menu+0x2310>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d11c      	bne.n	8002844 <menu+0x22c4>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800280a:	4a31      	ldr	r2, [pc, #196]	@ (80028d0 <menu+0x2350>)
 800280c:	2101      	movs	r1, #1
 800280e:	2001      	movs	r0, #1
 8002810:	f7fd fe55 	bl	80004be <lcd_print>
 8002814:	e016      	b.n	8002844 <menu+0x22c4>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8002816:	4b20      	ldr	r3, [pc, #128]	@ (8002898 <menu+0x2318>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d112      	bne.n	8002844 <menu+0x22c4>
			if(dilSecim == 0) {
 800281e:	4b1c      	ldr	r3, [pc, #112]	@ (8002890 <menu+0x2310>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d105      	bne.n	8002832 <menu+0x22b2>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8002826:	4a2b      	ldr	r2, [pc, #172]	@ (80028d4 <menu+0x2354>)
 8002828:	2101      	movs	r1, #1
 800282a:	2001      	movs	r0, #1
 800282c:	f7fd fe47 	bl	80004be <lcd_print>
 8002830:	e008      	b.n	8002844 <menu+0x22c4>
			} else if(dilSecim == 1) {
 8002832:	4b17      	ldr	r3, [pc, #92]	@ (8002890 <menu+0x2310>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d104      	bne.n	8002844 <menu+0x22c4>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800283a:	4a27      	ldr	r2, [pc, #156]	@ (80028d8 <menu+0x2358>)
 800283c:	2101      	movs	r1, #1
 800283e:	2001      	movs	r0, #1
 8002840:	f7fd fe3d 	bl	80004be <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8002844:	4b25      	ldr	r3, [pc, #148]	@ (80028dc <menu+0x235c>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d113      	bne.n	8002874 <menu+0x22f4>
			if(dilSecim == 0) {
 800284c:	4b10      	ldr	r3, [pc, #64]	@ (8002890 <menu+0x2310>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d105      	bne.n	8002860 <menu+0x22e0>
				lcd_print(2, 1, "Tek tesir       ");
 8002854:	4a22      	ldr	r2, [pc, #136]	@ (80028e0 <menu+0x2360>)
 8002856:	2101      	movs	r1, #1
 8002858:	2002      	movs	r0, #2
 800285a:	f7fd fe30 	bl	80004be <lcd_print>
 800285e:	e04e      	b.n	80028fe <menu+0x237e>
			} else if(dilSecim == 1) {
 8002860:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <menu+0x2310>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d14a      	bne.n	80028fe <menu+0x237e>
				lcd_print(2, 1, "Single acting  ");
 8002868:	4a1e      	ldr	r2, [pc, #120]	@ (80028e4 <menu+0x2364>)
 800286a:	2101      	movs	r1, #1
 800286c:	2002      	movs	r0, #2
 800286e:	f7fd fe26 	bl	80004be <lcd_print>
 8002872:	e044      	b.n	80028fe <menu+0x237e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8002874:	4b19      	ldr	r3, [pc, #100]	@ (80028dc <menu+0x235c>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d140      	bne.n	80028fe <menu+0x237e>
			if(dilSecim == 0) {
 800287c:	4b04      	ldr	r3, [pc, #16]	@ (8002890 <menu+0x2310>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d133      	bne.n	80028ec <menu+0x236c>
				lcd_print(2, 1, "Cift tesir      ");
 8002884:	4a18      	ldr	r2, [pc, #96]	@ (80028e8 <menu+0x2368>)
 8002886:	2101      	movs	r1, #1
 8002888:	2002      	movs	r0, #2
 800288a:	f7fd fe18 	bl	80004be <lcd_print>
 800288e:	e036      	b.n	80028fe <menu+0x237e>
 8002890:	20000ca4 	.word	0x20000ca4
 8002894:	0800d208 	.word	0x0800d208
 8002898:	20000c93 	.word	0x20000c93
 800289c:	0800d21c 	.word	0x0800d21c
 80028a0:	0800d230 	.word	0x0800d230
 80028a4:	20000c95 	.word	0x20000c95
 80028a8:	0800cd50 	.word	0x0800cd50
 80028ac:	0800cd64 	.word	0x0800cd64
 80028b0:	0800cdb0 	.word	0x0800cdb0
 80028b4:	0800cdc4 	.word	0x0800cdc4
 80028b8:	40010800 	.word	0x40010800
 80028bc:	20000cb2 	.word	0x20000cb2
 80028c0:	20000c18 	.word	0x20000c18
 80028c4:	20000caf 	.word	0x20000caf
 80028c8:	20000c84 	.word	0x20000c84
 80028cc:	0800d244 	.word	0x0800d244
 80028d0:	0800d258 	.word	0x0800d258
 80028d4:	0800d26c 	.word	0x0800d26c
 80028d8:	0800d280 	.word	0x0800d280
 80028dc:	20000c96 	.word	0x20000c96
 80028e0:	0800d294 	.word	0x0800d294
 80028e4:	0800d2a8 	.word	0x0800d2a8
 80028e8:	0800d2b8 	.word	0x0800d2b8
			} else if(dilSecim == 1) {
 80028ec:	4b90      	ldr	r3, [pc, #576]	@ (8002b30 <menu+0x25b0>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d104      	bne.n	80028fe <menu+0x237e>
				lcd_print(2, 1, "Double acting  ");
 80028f4:	4a8f      	ldr	r2, [pc, #572]	@ (8002b34 <menu+0x25b4>)
 80028f6:	2101      	movs	r1, #1
 80028f8:	2002      	movs	r0, #2
 80028fa:	f7fd fde0 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80028fe:	2102      	movs	r1, #2
 8002900:	488d      	ldr	r0, [pc, #564]	@ (8002b38 <menu+0x25b8>)
 8002902:	f005 fdb7 	bl	8008474 <HAL_GPIO_ReadPin>
 8002906:	4603      	mov	r3, r0
 8002908:	2b01      	cmp	r3, #1
 800290a:	d119      	bne.n	8002940 <menu+0x23c0>
 800290c:	4b8b      	ldr	r3, [pc, #556]	@ (8002b3c <menu+0x25bc>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	f083 0301 	eor.w	r3, r3, #1
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d012      	beq.n	8002940 <menu+0x23c0>
 800291a:	4b89      	ldr	r3, [pc, #548]	@ (8002b40 <menu+0x25c0>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d10e      	bne.n	8002940 <menu+0x23c0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002922:	4b88      	ldr	r3, [pc, #544]	@ (8002b44 <menu+0x25c4>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	3301      	adds	r3, #1
 8002928:	b2da      	uxtb	r2, r3
 800292a:	4b86      	ldr	r3, [pc, #536]	@ (8002b44 <menu+0x25c4>)
 800292c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800292e:	4b85      	ldr	r3, [pc, #532]	@ (8002b44 <menu+0x25c4>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d902      	bls.n	800293c <menu+0x23bc>
				devirmeSilindirTipi = 0;
 8002936:	4b83      	ldr	r3, [pc, #524]	@ (8002b44 <menu+0x25c4>)
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800293c:	f001 fd7a 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002940:	2104      	movs	r1, #4
 8002942:	487d      	ldr	r0, [pc, #500]	@ (8002b38 <menu+0x25b8>)
 8002944:	f005 fd96 	bl	8008474 <HAL_GPIO_ReadPin>
 8002948:	4603      	mov	r3, r0
 800294a:	2b01      	cmp	r3, #1
 800294c:	d119      	bne.n	8002982 <menu+0x2402>
 800294e:	4b7b      	ldr	r3, [pc, #492]	@ (8002b3c <menu+0x25bc>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	f083 0301 	eor.w	r3, r3, #1
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d012      	beq.n	8002982 <menu+0x2402>
 800295c:	4b78      	ldr	r3, [pc, #480]	@ (8002b40 <menu+0x25c0>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d10e      	bne.n	8002982 <menu+0x2402>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002964:	4b77      	ldr	r3, [pc, #476]	@ (8002b44 <menu+0x25c4>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	3b01      	subs	r3, #1
 800296a:	b2da      	uxtb	r2, r3
 800296c:	4b75      	ldr	r3, [pc, #468]	@ (8002b44 <menu+0x25c4>)
 800296e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002970:	4b74      	ldr	r3, [pc, #464]	@ (8002b44 <menu+0x25c4>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <menu+0x23fe>
		   		devirmeSilindirTipi = 1;
 8002978:	4b72      	ldr	r3, [pc, #456]	@ (8002b44 <menu+0x25c4>)
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800297e:	f001 fd59 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002982:	2108      	movs	r1, #8
 8002984:	486c      	ldr	r0, [pc, #432]	@ (8002b38 <menu+0x25b8>)
 8002986:	f005 fd75 	bl	8008474 <HAL_GPIO_ReadPin>
 800298a:	4603      	mov	r3, r0
 800298c:	2b01      	cmp	r3, #1
 800298e:	d10d      	bne.n	80029ac <menu+0x242c>
 8002990:	4b6a      	ldr	r3, [pc, #424]	@ (8002b3c <menu+0x25bc>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	f083 0301 	eor.w	r3, r3, #1
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <menu+0x242c>
			eepromData[18] = devirmeSilindirTipi;
 800299e:	4b69      	ldr	r3, [pc, #420]	@ (8002b44 <menu+0x25c4>)
 80029a0:	781a      	ldrb	r2, [r3, #0]
 80029a2:	4b69      	ldr	r3, [pc, #420]	@ (8002b48 <menu+0x25c8>)
 80029a4:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80029a6:	4b69      	ldr	r3, [pc, #420]	@ (8002b4c <menu+0x25cc>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80029ac:	4b68      	ldr	r3, [pc, #416]	@ (8002b50 <menu+0x25d0>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b15      	cmp	r3, #21
 80029b2:	f040 809b 	bne.w	8002aec <menu+0x256c>
		if(dilSecim == 0) {
 80029b6:	4b5e      	ldr	r3, [pc, #376]	@ (8002b30 <menu+0x25b0>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d105      	bne.n	80029ca <menu+0x244a>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80029be:	4a65      	ldr	r2, [pc, #404]	@ (8002b54 <menu+0x25d4>)
 80029c0:	2101      	movs	r1, #1
 80029c2:	2001      	movs	r0, #1
 80029c4:	f7fd fd7b 	bl	80004be <lcd_print>
 80029c8:	e008      	b.n	80029dc <menu+0x245c>
		} else if(dilSecim == 1) {
 80029ca:	4b59      	ldr	r3, [pc, #356]	@ (8002b30 <menu+0x25b0>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d104      	bne.n	80029dc <menu+0x245c>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 80029d2:	4a61      	ldr	r2, [pc, #388]	@ (8002b58 <menu+0x25d8>)
 80029d4:	2101      	movs	r1, #1
 80029d6:	2001      	movs	r0, #1
 80029d8:	f7fd fd71 	bl	80004be <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 80029dc:	4b5f      	ldr	r3, [pc, #380]	@ (8002b5c <menu+0x25dc>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d112      	bne.n	8002a0a <menu+0x248a>
			if(dilSecim == 0) {
 80029e4:	4b52      	ldr	r3, [pc, #328]	@ (8002b30 <menu+0x25b0>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d104      	bne.n	80029f6 <menu+0x2476>
				lcd_print(2, 1, "Tek tesir       ");
 80029ec:	4a5c      	ldr	r2, [pc, #368]	@ (8002b60 <menu+0x25e0>)
 80029ee:	2101      	movs	r1, #1
 80029f0:	2002      	movs	r0, #2
 80029f2:	f7fd fd64 	bl	80004be <lcd_print>
			}
			if(dilSecim == 1) {
 80029f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002b30 <menu+0x25b0>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d11c      	bne.n	8002a38 <menu+0x24b8>
				lcd_print(2, 1, "Single acting  ");
 80029fe:	4a59      	ldr	r2, [pc, #356]	@ (8002b64 <menu+0x25e4>)
 8002a00:	2101      	movs	r1, #1
 8002a02:	2002      	movs	r0, #2
 8002a04:	f7fd fd5b 	bl	80004be <lcd_print>
 8002a08:	e016      	b.n	8002a38 <menu+0x24b8>
			}
		} else if(platformSilindirTipi == 1) {
 8002a0a:	4b54      	ldr	r3, [pc, #336]	@ (8002b5c <menu+0x25dc>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d112      	bne.n	8002a38 <menu+0x24b8>
			if(dilSecim == 0) {
 8002a12:	4b47      	ldr	r3, [pc, #284]	@ (8002b30 <menu+0x25b0>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <menu+0x24a6>
				lcd_print(2, 1, "Cift tesir      ");
 8002a1a:	4a53      	ldr	r2, [pc, #332]	@ (8002b68 <menu+0x25e8>)
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	2002      	movs	r0, #2
 8002a20:	f7fd fd4d 	bl	80004be <lcd_print>
 8002a24:	e008      	b.n	8002a38 <menu+0x24b8>
			} else if(dilSecim == 1) {
 8002a26:	4b42      	ldr	r3, [pc, #264]	@ (8002b30 <menu+0x25b0>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d104      	bne.n	8002a38 <menu+0x24b8>
				lcd_print(2, 1, "Double acting  ");
 8002a2e:	4a41      	ldr	r2, [pc, #260]	@ (8002b34 <menu+0x25b4>)
 8002a30:	2101      	movs	r1, #1
 8002a32:	2002      	movs	r0, #2
 8002a34:	f7fd fd43 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a38:	2102      	movs	r1, #2
 8002a3a:	483f      	ldr	r0, [pc, #252]	@ (8002b38 <menu+0x25b8>)
 8002a3c:	f005 fd1a 	bl	8008474 <HAL_GPIO_ReadPin>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d115      	bne.n	8002a72 <menu+0x24f2>
 8002a46:	4b3d      	ldr	r3, [pc, #244]	@ (8002b3c <menu+0x25bc>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	f083 0301 	eor.w	r3, r3, #1
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00e      	beq.n	8002a72 <menu+0x24f2>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002a54:	4b41      	ldr	r3, [pc, #260]	@ (8002b5c <menu+0x25dc>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b5c <menu+0x25dc>)
 8002a5e:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002a60:	4b3e      	ldr	r3, [pc, #248]	@ (8002b5c <menu+0x25dc>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d902      	bls.n	8002a6e <menu+0x24ee>
				platformSilindirTipi = 0;
 8002a68:	4b3c      	ldr	r3, [pc, #240]	@ (8002b5c <menu+0x25dc>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a6e:	f001 fce1 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a72:	2104      	movs	r1, #4
 8002a74:	4830      	ldr	r0, [pc, #192]	@ (8002b38 <menu+0x25b8>)
 8002a76:	f005 fcfd 	bl	8008474 <HAL_GPIO_ReadPin>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d115      	bne.n	8002aac <menu+0x252c>
 8002a80:	4b2e      	ldr	r3, [pc, #184]	@ (8002b3c <menu+0x25bc>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	f083 0301 	eor.w	r3, r3, #1
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00e      	beq.n	8002aac <menu+0x252c>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002a8e:	4b33      	ldr	r3, [pc, #204]	@ (8002b5c <menu+0x25dc>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4b31      	ldr	r3, [pc, #196]	@ (8002b5c <menu+0x25dc>)
 8002a98:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002a9a:	4b30      	ldr	r3, [pc, #192]	@ (8002b5c <menu+0x25dc>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <menu+0x2528>
		   		platformSilindirTipi = 1;
 8002aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8002b5c <menu+0x25dc>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002aa8:	f001 fcc4 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aac:	2108      	movs	r1, #8
 8002aae:	4822      	ldr	r0, [pc, #136]	@ (8002b38 <menu+0x25b8>)
 8002ab0:	f005 fce0 	bl	8008474 <HAL_GPIO_ReadPin>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d118      	bne.n	8002aec <menu+0x256c>
 8002aba:	4b20      	ldr	r3, [pc, #128]	@ (8002b3c <menu+0x25bc>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	f083 0301 	eor.w	r3, r3, #1
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d011      	beq.n	8002aec <menu+0x256c>
			eepromData[19] = platformSilindirTipi;
 8002ac8:	4b24      	ldr	r3, [pc, #144]	@ (8002b5c <menu+0x25dc>)
 8002aca:	781a      	ldrb	r2, [r3, #0]
 8002acc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b48 <menu+0x25c8>)
 8002ace:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002ad0:	4b22      	ldr	r3, [pc, #136]	@ (8002b5c <menu+0x25dc>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d106      	bne.n	8002ae6 <menu+0x2566>
				altLimit = 1;
 8002ad8:	4b24      	ldr	r3, [pc, #144]	@ (8002b6c <menu+0x25ec>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002ade:	4b23      	ldr	r3, [pc, #140]	@ (8002b6c <menu+0x25ec>)
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	4b19      	ldr	r3, [pc, #100]	@ (8002b48 <menu+0x25c8>)
 8002ae4:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002ae6:	4b19      	ldr	r3, [pc, #100]	@ (8002b4c <menu+0x25cc>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002aec:	4b18      	ldr	r3, [pc, #96]	@ (8002b50 <menu+0x25d0>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b16      	cmp	r3, #22
 8002af2:	f040 80a7 	bne.w	8002c44 <menu+0x26c4>
		if(dilSecim == 0) {
 8002af6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <menu+0x25b0>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d105      	bne.n	8002b0a <menu+0x258a>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8002afe:	4a1c      	ldr	r2, [pc, #112]	@ (8002b70 <menu+0x25f0>)
 8002b00:	2101      	movs	r1, #1
 8002b02:	2001      	movs	r0, #1
 8002b04:	f7fd fcdb 	bl	80004be <lcd_print>
 8002b08:	e008      	b.n	8002b1c <menu+0x259c>
		} else if(dilSecim == 1) {
 8002b0a:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <menu+0x25b0>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d104      	bne.n	8002b1c <menu+0x259c>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8002b12:	4a18      	ldr	r2, [pc, #96]	@ (8002b74 <menu+0x25f4>)
 8002b14:	2101      	movs	r1, #1
 8002b16:	2001      	movs	r0, #1
 8002b18:	f7fd fcd1 	bl	80004be <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8002b1c:	4b04      	ldr	r3, [pc, #16]	@ (8002b30 <menu+0x25b0>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d12b      	bne.n	8002b7c <menu+0x25fc>
				lcd_print(2, 1, "Kac Saniye     ");
 8002b24:	4a14      	ldr	r2, [pc, #80]	@ (8002b78 <menu+0x25f8>)
 8002b26:	2101      	movs	r1, #1
 8002b28:	2002      	movs	r0, #2
 8002b2a:	f7fd fcc8 	bl	80004be <lcd_print>
 8002b2e:	e02e      	b.n	8002b8e <menu+0x260e>
 8002b30:	20000ca4 	.word	0x20000ca4
 8002b34:	0800d2cc 	.word	0x0800d2cc
 8002b38:	40010800 	.word	0x40010800
 8002b3c:	20000cb2 	.word	0x20000cb2
 8002b40:	20000c93 	.word	0x20000c93
 8002b44:	20000c96 	.word	0x20000c96
 8002b48:	20000c18 	.word	0x20000c18
 8002b4c:	20000caf 	.word	0x20000caf
 8002b50:	20000c84 	.word	0x20000c84
 8002b54:	0800d2dc 	.word	0x0800d2dc
 8002b58:	0800d2f0 	.word	0x0800d2f0
 8002b5c:	20000c97 	.word	0x20000c97
 8002b60:	0800d294 	.word	0x0800d294
 8002b64:	0800d2a8 	.word	0x0800d2a8
 8002b68:	0800d2b8 	.word	0x0800d2b8
 8002b6c:	20000c8a 	.word	0x20000c8a
 8002b70:	0800d300 	.word	0x0800d300
 8002b74:	0800d314 	.word	0x0800d314
 8002b78:	0800cfb4 	.word	0x0800cfb4
			} else if(dilSecim == 1){
 8002b7c:	4b93      	ldr	r3, [pc, #588]	@ (8002dcc <menu+0x284c>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d104      	bne.n	8002b8e <menu+0x260e>
				lcd_print(2, 1, "Second         ");
 8002b84:	4a92      	ldr	r2, [pc, #584]	@ (8002dd0 <menu+0x2850>)
 8002b86:	2101      	movs	r1, #1
 8002b88:	2002      	movs	r0, #2
 8002b8a:	f7fd fc98 	bl	80004be <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8002b8e:	4b91      	ldr	r3, [pc, #580]	@ (8002dd4 <menu+0x2854>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	220a      	movs	r2, #10
 8002b94:	4990      	ldr	r1, [pc, #576]	@ (8002dd8 <menu+0x2858>)
 8002b96:	4618      	mov	r0, r3
 8002b98:	f009 fe28 	bl	800c7ec <itoa>
		lcd_print(2,16,snum);
 8002b9c:	4a8e      	ldr	r2, [pc, #568]	@ (8002dd8 <menu+0x2858>)
 8002b9e:	2110      	movs	r1, #16
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	f7fd fc8c 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	488c      	ldr	r0, [pc, #560]	@ (8002ddc <menu+0x285c>)
 8002baa:	f005 fc63 	bl	8008474 <HAL_GPIO_ReadPin>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d115      	bne.n	8002be0 <menu+0x2660>
 8002bb4:	4b8a      	ldr	r3, [pc, #552]	@ (8002de0 <menu+0x2860>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	f083 0301 	eor.w	r3, r3, #1
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00e      	beq.n	8002be0 <menu+0x2660>
			yukariValfTmr = yukariValfTmr + 1;
 8002bc2:	4b84      	ldr	r3, [pc, #528]	@ (8002dd4 <menu+0x2854>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4b82      	ldr	r3, [pc, #520]	@ (8002dd4 <menu+0x2854>)
 8002bcc:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002bce:	4b81      	ldr	r3, [pc, #516]	@ (8002dd4 <menu+0x2854>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	d902      	bls.n	8002bdc <menu+0x265c>
				yukariValfTmr = 0;
 8002bd6:	4b7f      	ldr	r3, [pc, #508]	@ (8002dd4 <menu+0x2854>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bdc:	f001 fc2a 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002be0:	2104      	movs	r1, #4
 8002be2:	487e      	ldr	r0, [pc, #504]	@ (8002ddc <menu+0x285c>)
 8002be4:	f005 fc46 	bl	8008474 <HAL_GPIO_ReadPin>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d115      	bne.n	8002c1a <menu+0x269a>
 8002bee:	4b7c      	ldr	r3, [pc, #496]	@ (8002de0 <menu+0x2860>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	f083 0301 	eor.w	r3, r3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00e      	beq.n	8002c1a <menu+0x269a>
			yukariValfTmr = yukariValfTmr - 1;
 8002bfc:	4b75      	ldr	r3, [pc, #468]	@ (8002dd4 <menu+0x2854>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	4b73      	ldr	r3, [pc, #460]	@ (8002dd4 <menu+0x2854>)
 8002c06:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002c08:	4b72      	ldr	r3, [pc, #456]	@ (8002dd4 <menu+0x2854>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b06      	cmp	r3, #6
 8002c0e:	d902      	bls.n	8002c16 <menu+0x2696>
		   		yukariValfTmr = 5;
 8002c10:	4b70      	ldr	r3, [pc, #448]	@ (8002dd4 <menu+0x2854>)
 8002c12:	2205      	movs	r2, #5
 8002c14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c16:	f001 fc0d 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c1a:	2108      	movs	r1, #8
 8002c1c:	486f      	ldr	r0, [pc, #444]	@ (8002ddc <menu+0x285c>)
 8002c1e:	f005 fc29 	bl	8008474 <HAL_GPIO_ReadPin>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d10d      	bne.n	8002c44 <menu+0x26c4>
 8002c28:	4b6d      	ldr	r3, [pc, #436]	@ (8002de0 <menu+0x2860>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	f083 0301 	eor.w	r3, r3, #1
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d006      	beq.n	8002c44 <menu+0x26c4>
			eepromData[20] = yukariValfTmr;
 8002c36:	4b67      	ldr	r3, [pc, #412]	@ (8002dd4 <menu+0x2854>)
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	4b6a      	ldr	r3, [pc, #424]	@ (8002de4 <menu+0x2864>)
 8002c3c:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8002de8 <menu+0x2868>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002c44:	4b69      	ldr	r3, [pc, #420]	@ (8002dec <menu+0x286c>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b17      	cmp	r3, #23
 8002c4a:	f040 8081 	bne.w	8002d50 <menu+0x27d0>
		if(dilSecim == 0) {
 8002c4e:	4b5f      	ldr	r3, [pc, #380]	@ (8002dcc <menu+0x284c>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d105      	bne.n	8002c62 <menu+0x26e2>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8002c56:	4a66      	ldr	r2, [pc, #408]	@ (8002df0 <menu+0x2870>)
 8002c58:	2101      	movs	r1, #1
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	f7fd fc2f 	bl	80004be <lcd_print>
 8002c60:	e008      	b.n	8002c74 <menu+0x26f4>
		} else if(dilSecim == 1) {
 8002c62:	4b5a      	ldr	r3, [pc, #360]	@ (8002dcc <menu+0x284c>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d104      	bne.n	8002c74 <menu+0x26f4>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8002c6a:	4a62      	ldr	r2, [pc, #392]	@ (8002df4 <menu+0x2874>)
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f7fd fc25 	bl	80004be <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8002c74:	4b55      	ldr	r3, [pc, #340]	@ (8002dcc <menu+0x284c>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d105      	bne.n	8002c88 <menu+0x2708>
				lcd_print(2, 1, "Kac Saniye     ");
 8002c7c:	4a5e      	ldr	r2, [pc, #376]	@ (8002df8 <menu+0x2878>)
 8002c7e:	2101      	movs	r1, #1
 8002c80:	2002      	movs	r0, #2
 8002c82:	f7fd fc1c 	bl	80004be <lcd_print>
 8002c86:	e008      	b.n	8002c9a <menu+0x271a>
			} else if(dilSecim == 1) {
 8002c88:	4b50      	ldr	r3, [pc, #320]	@ (8002dcc <menu+0x284c>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d104      	bne.n	8002c9a <menu+0x271a>
				lcd_print(2, 1, "Second         ");
 8002c90:	4a4f      	ldr	r2, [pc, #316]	@ (8002dd0 <menu+0x2850>)
 8002c92:	2101      	movs	r1, #1
 8002c94:	2002      	movs	r0, #2
 8002c96:	f7fd fc12 	bl	80004be <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8002c9a:	4b58      	ldr	r3, [pc, #352]	@ (8002dfc <menu+0x287c>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	220a      	movs	r2, #10
 8002ca0:	494d      	ldr	r1, [pc, #308]	@ (8002dd8 <menu+0x2858>)
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f009 fda2 	bl	800c7ec <itoa>
		lcd_print(2,16,snum);
 8002ca8:	4a4b      	ldr	r2, [pc, #300]	@ (8002dd8 <menu+0x2858>)
 8002caa:	2110      	movs	r1, #16
 8002cac:	2002      	movs	r0, #2
 8002cae:	f7fd fc06 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cb2:	2102      	movs	r1, #2
 8002cb4:	4849      	ldr	r0, [pc, #292]	@ (8002ddc <menu+0x285c>)
 8002cb6:	f005 fbdd 	bl	8008474 <HAL_GPIO_ReadPin>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d115      	bne.n	8002cec <menu+0x276c>
 8002cc0:	4b47      	ldr	r3, [pc, #284]	@ (8002de0 <menu+0x2860>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	f083 0301 	eor.w	r3, r3, #1
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00e      	beq.n	8002cec <menu+0x276c>
			asagiValfTmr = asagiValfTmr + 1;
 8002cce:	4b4b      	ldr	r3, [pc, #300]	@ (8002dfc <menu+0x287c>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	4b49      	ldr	r3, [pc, #292]	@ (8002dfc <menu+0x287c>)
 8002cd8:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002cda:	4b48      	ldr	r3, [pc, #288]	@ (8002dfc <menu+0x287c>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b05      	cmp	r3, #5
 8002ce0:	d902      	bls.n	8002ce8 <menu+0x2768>
				asagiValfTmr = 0;
 8002ce2:	4b46      	ldr	r3, [pc, #280]	@ (8002dfc <menu+0x287c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ce8:	f001 fba4 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cec:	2104      	movs	r1, #4
 8002cee:	483b      	ldr	r0, [pc, #236]	@ (8002ddc <menu+0x285c>)
 8002cf0:	f005 fbc0 	bl	8008474 <HAL_GPIO_ReadPin>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d115      	bne.n	8002d26 <menu+0x27a6>
 8002cfa:	4b39      	ldr	r3, [pc, #228]	@ (8002de0 <menu+0x2860>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	f083 0301 	eor.w	r3, r3, #1
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00e      	beq.n	8002d26 <menu+0x27a6>
			asagiValfTmr = asagiValfTmr - 1;
 8002d08:	4b3c      	ldr	r3, [pc, #240]	@ (8002dfc <menu+0x287c>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	4b3a      	ldr	r3, [pc, #232]	@ (8002dfc <menu+0x287c>)
 8002d12:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002d14:	4b39      	ldr	r3, [pc, #228]	@ (8002dfc <menu+0x287c>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b06      	cmp	r3, #6
 8002d1a:	d902      	bls.n	8002d22 <menu+0x27a2>
		   		asagiValfTmr = 5;
 8002d1c:	4b37      	ldr	r3, [pc, #220]	@ (8002dfc <menu+0x287c>)
 8002d1e:	2205      	movs	r2, #5
 8002d20:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d22:	f001 fb87 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d26:	2108      	movs	r1, #8
 8002d28:	482c      	ldr	r0, [pc, #176]	@ (8002ddc <menu+0x285c>)
 8002d2a:	f005 fba3 	bl	8008474 <HAL_GPIO_ReadPin>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d10d      	bne.n	8002d50 <menu+0x27d0>
 8002d34:	4b2a      	ldr	r3, [pc, #168]	@ (8002de0 <menu+0x2860>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	f083 0301 	eor.w	r3, r3, #1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d006      	beq.n	8002d50 <menu+0x27d0>
			eepromData[21] = asagiValfTmr;
 8002d42:	4b2e      	ldr	r3, [pc, #184]	@ (8002dfc <menu+0x287c>)
 8002d44:	781a      	ldrb	r2, [r3, #0]
 8002d46:	4b27      	ldr	r3, [pc, #156]	@ (8002de4 <menu+0x2864>)
 8002d48:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002d4a:	4b27      	ldr	r3, [pc, #156]	@ (8002de8 <menu+0x2868>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002d50:	4b26      	ldr	r3, [pc, #152]	@ (8002dec <menu+0x286c>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b18      	cmp	r3, #24
 8002d56:	f040 80c1 	bne.w	8002edc <menu+0x295c>
		if(devirmeYuruyusSecim == 2) {
 8002d5a:	4b29      	ldr	r3, [pc, #164]	@ (8002e00 <menu+0x2880>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d113      	bne.n	8002d8a <menu+0x280a>
			if(dilSecim == 0) {
 8002d62:	4b1a      	ldr	r3, [pc, #104]	@ (8002dcc <menu+0x284c>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d105      	bne.n	8002d76 <menu+0x27f6>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8002d6a:	4a26      	ldr	r2, [pc, #152]	@ (8002e04 <menu+0x2884>)
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	2001      	movs	r0, #1
 8002d70:	f7fd fba5 	bl	80004be <lcd_print>
 8002d74:	e020      	b.n	8002db8 <menu+0x2838>
			} else if(dilSecim == 1) {
 8002d76:	4b15      	ldr	r3, [pc, #84]	@ (8002dcc <menu+0x284c>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d11c      	bne.n	8002db8 <menu+0x2838>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8002d7e:	4a22      	ldr	r2, [pc, #136]	@ (8002e08 <menu+0x2888>)
 8002d80:	2101      	movs	r1, #1
 8002d82:	2001      	movs	r0, #1
 8002d84:	f7fd fb9b 	bl	80004be <lcd_print>
 8002d88:	e016      	b.n	8002db8 <menu+0x2838>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e00 <menu+0x2880>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d112      	bne.n	8002db8 <menu+0x2838>
			if(dilSecim == 0) {
 8002d92:	4b0e      	ldr	r3, [pc, #56]	@ (8002dcc <menu+0x284c>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d105      	bne.n	8002da6 <menu+0x2826>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8002d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002e0c <menu+0x288c>)
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	2001      	movs	r0, #1
 8002da0:	f7fd fb8d 	bl	80004be <lcd_print>
 8002da4:	e008      	b.n	8002db8 <menu+0x2838>
			} else if(dilSecim == 1) {
 8002da6:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <menu+0x284c>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d104      	bne.n	8002db8 <menu+0x2838>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8002dae:	4a18      	ldr	r2, [pc, #96]	@ (8002e10 <menu+0x2890>)
 8002db0:	2101      	movs	r1, #1
 8002db2:	2001      	movs	r0, #1
 8002db4:	f7fd fb83 	bl	80004be <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8002db8:	4b04      	ldr	r3, [pc, #16]	@ (8002dcc <menu+0x284c>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d129      	bne.n	8002e14 <menu+0x2894>
				lcd_print(2, 1, "Kac Saniye     ");
 8002dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002df8 <menu+0x2878>)
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	2002      	movs	r0, #2
 8002dc6:	f7fd fb7a 	bl	80004be <lcd_print>
 8002dca:	e02c      	b.n	8002e26 <menu+0x28a6>
 8002dcc:	20000ca4 	.word	0x20000ca4
 8002dd0:	0800d328 	.word	0x0800d328
 8002dd4:	20000c98 	.word	0x20000c98
 8002dd8:	20000c58 	.word	0x20000c58
 8002ddc:	40010800 	.word	0x40010800
 8002de0:	20000cb2 	.word	0x20000cb2
 8002de4:	20000c18 	.word	0x20000c18
 8002de8:	20000caf 	.word	0x20000caf
 8002dec:	20000c84 	.word	0x20000c84
 8002df0:	0800d338 	.word	0x0800d338
 8002df4:	0800d34c 	.word	0x0800d34c
 8002df8:	0800cfb4 	.word	0x0800cfb4
 8002dfc:	20000c99 	.word	0x20000c99
 8002e00:	20000c93 	.word	0x20000c93
 8002e04:	0800d360 	.word	0x0800d360
 8002e08:	0800d374 	.word	0x0800d374
 8002e0c:	0800d388 	.word	0x0800d388
 8002e10:	0800d39c 	.word	0x0800d39c
			} else if(dilSecim == 1) {
 8002e14:	4ba0      	ldr	r3, [pc, #640]	@ (8003098 <menu+0x2b18>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d104      	bne.n	8002e26 <menu+0x28a6>
				lcd_print(2, 1, "Second         ");
 8002e1c:	4a9f      	ldr	r2, [pc, #636]	@ (800309c <menu+0x2b1c>)
 8002e1e:	2101      	movs	r1, #1
 8002e20:	2002      	movs	r0, #2
 8002e22:	f7fd fb4c 	bl	80004be <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8002e26:	4b9e      	ldr	r3, [pc, #632]	@ (80030a0 <menu+0x2b20>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	220a      	movs	r2, #10
 8002e2c:	499d      	ldr	r1, [pc, #628]	@ (80030a4 <menu+0x2b24>)
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f009 fcdc 	bl	800c7ec <itoa>
		lcd_print(2, 16, snum);
 8002e34:	4a9b      	ldr	r2, [pc, #620]	@ (80030a4 <menu+0x2b24>)
 8002e36:	2110      	movs	r1, #16
 8002e38:	2002      	movs	r0, #2
 8002e3a:	f7fd fb40 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e3e:	2102      	movs	r1, #2
 8002e40:	4899      	ldr	r0, [pc, #612]	@ (80030a8 <menu+0x2b28>)
 8002e42:	f005 fb17 	bl	8008474 <HAL_GPIO_ReadPin>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d115      	bne.n	8002e78 <menu+0x28f8>
 8002e4c:	4b97      	ldr	r3, [pc, #604]	@ (80030ac <menu+0x2b2c>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	f083 0301 	eor.w	r3, r3, #1
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00e      	beq.n	8002e78 <menu+0x28f8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8002e5a:	4b91      	ldr	r3, [pc, #580]	@ (80030a0 <menu+0x2b20>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	4b8f      	ldr	r3, [pc, #572]	@ (80030a0 <menu+0x2b20>)
 8002e64:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8002e66:	4b8e      	ldr	r3, [pc, #568]	@ (80030a0 <menu+0x2b20>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b05      	cmp	r3, #5
 8002e6c:	d902      	bls.n	8002e74 <menu+0x28f4>
				devirmeYukariIleriTmr = 0;
 8002e6e:	4b8c      	ldr	r3, [pc, #560]	@ (80030a0 <menu+0x2b20>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e74:	f001 fade 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e78:	2104      	movs	r1, #4
 8002e7a:	488b      	ldr	r0, [pc, #556]	@ (80030a8 <menu+0x2b28>)
 8002e7c:	f005 fafa 	bl	8008474 <HAL_GPIO_ReadPin>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d115      	bne.n	8002eb2 <menu+0x2932>
 8002e86:	4b89      	ldr	r3, [pc, #548]	@ (80030ac <menu+0x2b2c>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	f083 0301 	eor.w	r3, r3, #1
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00e      	beq.n	8002eb2 <menu+0x2932>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8002e94:	4b82      	ldr	r3, [pc, #520]	@ (80030a0 <menu+0x2b20>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	4b80      	ldr	r3, [pc, #512]	@ (80030a0 <menu+0x2b20>)
 8002e9e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8002ea0:	4b7f      	ldr	r3, [pc, #508]	@ (80030a0 <menu+0x2b20>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b06      	cmp	r3, #6
 8002ea6:	d902      	bls.n	8002eae <menu+0x292e>
		   		devirmeYukariIleriTmr = 5;
 8002ea8:	4b7d      	ldr	r3, [pc, #500]	@ (80030a0 <menu+0x2b20>)
 8002eaa:	2205      	movs	r2, #5
 8002eac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002eae:	f001 fac1 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002eb2:	2108      	movs	r1, #8
 8002eb4:	487c      	ldr	r0, [pc, #496]	@ (80030a8 <menu+0x2b28>)
 8002eb6:	f005 fadd 	bl	8008474 <HAL_GPIO_ReadPin>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d10d      	bne.n	8002edc <menu+0x295c>
 8002ec0:	4b7a      	ldr	r3, [pc, #488]	@ (80030ac <menu+0x2b2c>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	f083 0301 	eor.w	r3, r3, #1
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d006      	beq.n	8002edc <menu+0x295c>
			eepromData[22] = devirmeYukariIleriTmr;
 8002ece:	4b74      	ldr	r3, [pc, #464]	@ (80030a0 <menu+0x2b20>)
 8002ed0:	781a      	ldrb	r2, [r3, #0]
 8002ed2:	4b77      	ldr	r3, [pc, #476]	@ (80030b0 <menu+0x2b30>)
 8002ed4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8002ed6:	4b77      	ldr	r3, [pc, #476]	@ (80030b4 <menu+0x2b34>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8002edc:	4b76      	ldr	r3, [pc, #472]	@ (80030b8 <menu+0x2b38>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b19      	cmp	r3, #25
 8002ee2:	f040 809d 	bne.w	8003020 <menu+0x2aa0>
		if(devirmeYuruyusSecim == 2) {
 8002ee6:	4b75      	ldr	r3, [pc, #468]	@ (80030bc <menu+0x2b3c>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d113      	bne.n	8002f16 <menu+0x2996>
			if(dilSecim == 0) {
 8002eee:	4b6a      	ldr	r3, [pc, #424]	@ (8003098 <menu+0x2b18>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d105      	bne.n	8002f02 <menu+0x2982>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8002ef6:	4a72      	ldr	r2, [pc, #456]	@ (80030c0 <menu+0x2b40>)
 8002ef8:	2101      	movs	r1, #1
 8002efa:	2001      	movs	r0, #1
 8002efc:	f7fd fadf 	bl	80004be <lcd_print>
 8002f00:	e020      	b.n	8002f44 <menu+0x29c4>
			} else if(dilSecim == 1) {
 8002f02:	4b65      	ldr	r3, [pc, #404]	@ (8003098 <menu+0x2b18>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d11c      	bne.n	8002f44 <menu+0x29c4>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8002f0a:	4a6e      	ldr	r2, [pc, #440]	@ (80030c4 <menu+0x2b44>)
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	2001      	movs	r0, #1
 8002f10:	f7fd fad5 	bl	80004be <lcd_print>
 8002f14:	e016      	b.n	8002f44 <menu+0x29c4>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002f16:	4b69      	ldr	r3, [pc, #420]	@ (80030bc <menu+0x2b3c>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d112      	bne.n	8002f44 <menu+0x29c4>
			if(dilSecim == 0) {
 8002f1e:	4b5e      	ldr	r3, [pc, #376]	@ (8003098 <menu+0x2b18>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <menu+0x29b2>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8002f26:	4a68      	ldr	r2, [pc, #416]	@ (80030c8 <menu+0x2b48>)
 8002f28:	2101      	movs	r1, #1
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	f7fd fac7 	bl	80004be <lcd_print>
 8002f30:	e008      	b.n	8002f44 <menu+0x29c4>
			} else if(dilSecim == 1) {
 8002f32:	4b59      	ldr	r3, [pc, #356]	@ (8003098 <menu+0x2b18>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d104      	bne.n	8002f44 <menu+0x29c4>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8002f3a:	4a64      	ldr	r2, [pc, #400]	@ (80030cc <menu+0x2b4c>)
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	2001      	movs	r0, #1
 8002f40:	f7fd fabd 	bl	80004be <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8002f44:	4b54      	ldr	r3, [pc, #336]	@ (8003098 <menu+0x2b18>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <menu+0x29d8>
				lcd_print(2, 1, "Kac Saniye     ");
 8002f4c:	4a60      	ldr	r2, [pc, #384]	@ (80030d0 <menu+0x2b50>)
 8002f4e:	2101      	movs	r1, #1
 8002f50:	2002      	movs	r0, #2
 8002f52:	f7fd fab4 	bl	80004be <lcd_print>
 8002f56:	e008      	b.n	8002f6a <menu+0x29ea>
			} else if(dilSecim == 1) {
 8002f58:	4b4f      	ldr	r3, [pc, #316]	@ (8003098 <menu+0x2b18>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d104      	bne.n	8002f6a <menu+0x29ea>
				lcd_print(2, 1, "Second         ");
 8002f60:	4a4e      	ldr	r2, [pc, #312]	@ (800309c <menu+0x2b1c>)
 8002f62:	2101      	movs	r1, #1
 8002f64:	2002      	movs	r0, #2
 8002f66:	f7fd faaa 	bl	80004be <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8002f6a:	4b5a      	ldr	r3, [pc, #360]	@ (80030d4 <menu+0x2b54>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	220a      	movs	r2, #10
 8002f70:	494c      	ldr	r1, [pc, #304]	@ (80030a4 <menu+0x2b24>)
 8002f72:	4618      	mov	r0, r3
 8002f74:	f009 fc3a 	bl	800c7ec <itoa>
		lcd_print(2,16,snum);
 8002f78:	4a4a      	ldr	r2, [pc, #296]	@ (80030a4 <menu+0x2b24>)
 8002f7a:	2110      	movs	r1, #16
 8002f7c:	2002      	movs	r0, #2
 8002f7e:	f7fd fa9e 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f82:	2102      	movs	r1, #2
 8002f84:	4848      	ldr	r0, [pc, #288]	@ (80030a8 <menu+0x2b28>)
 8002f86:	f005 fa75 	bl	8008474 <HAL_GPIO_ReadPin>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d115      	bne.n	8002fbc <menu+0x2a3c>
 8002f90:	4b46      	ldr	r3, [pc, #280]	@ (80030ac <menu+0x2b2c>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	f083 0301 	eor.w	r3, r3, #1
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00e      	beq.n	8002fbc <menu+0x2a3c>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8002f9e:	4b4d      	ldr	r3, [pc, #308]	@ (80030d4 <menu+0x2b54>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	4b4b      	ldr	r3, [pc, #300]	@ (80030d4 <menu+0x2b54>)
 8002fa8:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8002faa:	4b4a      	ldr	r3, [pc, #296]	@ (80030d4 <menu+0x2b54>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d902      	bls.n	8002fb8 <menu+0x2a38>
				devirmeAsagiGeriTmr = 0;
 8002fb2:	4b48      	ldr	r3, [pc, #288]	@ (80030d4 <menu+0x2b54>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002fb8:	f001 fa3c 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fbc:	2104      	movs	r1, #4
 8002fbe:	483a      	ldr	r0, [pc, #232]	@ (80030a8 <menu+0x2b28>)
 8002fc0:	f005 fa58 	bl	8008474 <HAL_GPIO_ReadPin>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d115      	bne.n	8002ff6 <menu+0x2a76>
 8002fca:	4b38      	ldr	r3, [pc, #224]	@ (80030ac <menu+0x2b2c>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	f083 0301 	eor.w	r3, r3, #1
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00e      	beq.n	8002ff6 <menu+0x2a76>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8002fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80030d4 <menu+0x2b54>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	4b3c      	ldr	r3, [pc, #240]	@ (80030d4 <menu+0x2b54>)
 8002fe2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8002fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80030d4 <menu+0x2b54>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b06      	cmp	r3, #6
 8002fea:	d902      	bls.n	8002ff2 <menu+0x2a72>
		   		devirmeAsagiGeriTmr = 5;
 8002fec:	4b39      	ldr	r3, [pc, #228]	@ (80030d4 <menu+0x2b54>)
 8002fee:	2205      	movs	r2, #5
 8002ff0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ff2:	f001 fa1f 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ff6:	2108      	movs	r1, #8
 8002ff8:	482b      	ldr	r0, [pc, #172]	@ (80030a8 <menu+0x2b28>)
 8002ffa:	f005 fa3b 	bl	8008474 <HAL_GPIO_ReadPin>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b01      	cmp	r3, #1
 8003002:	d10d      	bne.n	8003020 <menu+0x2aa0>
 8003004:	4b29      	ldr	r3, [pc, #164]	@ (80030ac <menu+0x2b2c>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	f083 0301 	eor.w	r3, r3, #1
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d006      	beq.n	8003020 <menu+0x2aa0>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003012:	4b30      	ldr	r3, [pc, #192]	@ (80030d4 <menu+0x2b54>)
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	4b26      	ldr	r3, [pc, #152]	@ (80030b0 <menu+0x2b30>)
 8003018:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 800301a:	4b26      	ldr	r3, [pc, #152]	@ (80030b4 <menu+0x2b34>)
 800301c:	2201      	movs	r2, #1
 800301e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003020:	4b25      	ldr	r3, [pc, #148]	@ (80030b8 <menu+0x2b38>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b1a      	cmp	r3, #26
 8003026:	f040 80f7 	bne.w	8003218 <menu+0x2c98>
		if(dilSecim == 0) {
 800302a:	4b1b      	ldr	r3, [pc, #108]	@ (8003098 <menu+0x2b18>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d105      	bne.n	800303e <menu+0x2abe>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003032:	4a29      	ldr	r2, [pc, #164]	@ (80030d8 <menu+0x2b58>)
 8003034:	2101      	movs	r1, #1
 8003036:	2001      	movs	r0, #1
 8003038:	f7fd fa41 	bl	80004be <lcd_print>
 800303c:	e008      	b.n	8003050 <menu+0x2ad0>
		} else if(dilSecim == 1) {
 800303e:	4b16      	ldr	r3, [pc, #88]	@ (8003098 <menu+0x2b18>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d104      	bne.n	8003050 <menu+0x2ad0>
			lcd_print(1, 1, "WORKING TIME    ");
 8003046:	4a25      	ldr	r2, [pc, #148]	@ (80030dc <menu+0x2b5c>)
 8003048:	2101      	movs	r1, #1
 800304a:	2001      	movs	r0, #1
 800304c:	f7fd fa37 	bl	80004be <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003050:	4b23      	ldr	r3, [pc, #140]	@ (80030e0 <menu+0x2b60>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b63      	cmp	r3, #99	@ 0x63
 8003056:	d945      	bls.n	80030e4 <menu+0x2b64>
			if(dilSecim == 0) {
 8003058:	4b0f      	ldr	r3, [pc, #60]	@ (8003098 <menu+0x2b18>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d104      	bne.n	800306a <menu+0x2aea>
				lcd_print(2, 1, "Kac Saniye     ");
 8003060:	4a1b      	ldr	r2, [pc, #108]	@ (80030d0 <menu+0x2b50>)
 8003062:	2101      	movs	r1, #1
 8003064:	2002      	movs	r0, #2
 8003066:	f7fd fa2a 	bl	80004be <lcd_print>
			}
			if(dilSecim == 1) {
 800306a:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <menu+0x2b18>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d104      	bne.n	800307c <menu+0x2afc>
				lcd_print(2, 1, "Second         ");
 8003072:	4a0a      	ldr	r2, [pc, #40]	@ (800309c <menu+0x2b1c>)
 8003074:	2101      	movs	r1, #1
 8003076:	2002      	movs	r0, #2
 8003078:	f7fd fa21 	bl	80004be <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800307c:	4b18      	ldr	r3, [pc, #96]	@ (80030e0 <menu+0x2b60>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	220a      	movs	r2, #10
 8003082:	4908      	ldr	r1, [pc, #32]	@ (80030a4 <menu+0x2b24>)
 8003084:	4618      	mov	r0, r3
 8003086:	f009 fbb1 	bl	800c7ec <itoa>
			lcd_print(2,14,snum);
 800308a:	4a06      	ldr	r2, [pc, #24]	@ (80030a4 <menu+0x2b24>)
 800308c:	210e      	movs	r1, #14
 800308e:	2002      	movs	r0, #2
 8003090:	f7fd fa15 	bl	80004be <lcd_print>
 8003094:	e071      	b.n	800317a <menu+0x2bfa>
 8003096:	bf00      	nop
 8003098:	20000ca4 	.word	0x20000ca4
 800309c:	0800d328 	.word	0x0800d328
 80030a0:	20000c9a 	.word	0x20000c9a
 80030a4:	20000c58 	.word	0x20000c58
 80030a8:	40010800 	.word	0x40010800
 80030ac:	20000cb2 	.word	0x20000cb2
 80030b0:	20000c18 	.word	0x20000c18
 80030b4:	20000caf 	.word	0x20000caf
 80030b8:	20000c84 	.word	0x20000c84
 80030bc:	20000c93 	.word	0x20000c93
 80030c0:	0800d3b0 	.word	0x0800d3b0
 80030c4:	0800d3c4 	.word	0x0800d3c4
 80030c8:	0800d3d8 	.word	0x0800d3d8
 80030cc:	0800d3ec 	.word	0x0800d3ec
 80030d0:	0800cfb4 	.word	0x0800cfb4
 80030d4:	20000c9b 	.word	0x20000c9b
 80030d8:	0800d400 	.word	0x0800d400
 80030dc:	0800d414 	.word	0x0800d414
 80030e0:	20000c9c 	.word	0x20000c9c

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80030e4:	4b9e      	ldr	r3, [pc, #632]	@ (8003360 <menu+0x2de0>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b09      	cmp	r3, #9
 80030ea:	d923      	bls.n	8003134 <menu+0x2bb4>
 80030ec:	4b9c      	ldr	r3, [pc, #624]	@ (8003360 <menu+0x2de0>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b63      	cmp	r3, #99	@ 0x63
 80030f2:	d81f      	bhi.n	8003134 <menu+0x2bb4>
			if(dilSecim == 0) {
 80030f4:	4b9b      	ldr	r3, [pc, #620]	@ (8003364 <menu+0x2de4>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d105      	bne.n	8003108 <menu+0x2b88>
				lcd_print(2, 1, "Kac Saniye     ");
 80030fc:	4a9a      	ldr	r2, [pc, #616]	@ (8003368 <menu+0x2de8>)
 80030fe:	2101      	movs	r1, #1
 8003100:	2002      	movs	r0, #2
 8003102:	f7fd f9dc 	bl	80004be <lcd_print>
 8003106:	e008      	b.n	800311a <menu+0x2b9a>
			} else if(dilSecim == 1) {
 8003108:	4b96      	ldr	r3, [pc, #600]	@ (8003364 <menu+0x2de4>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d104      	bne.n	800311a <menu+0x2b9a>
				lcd_print(2, 1, "Second         ");
 8003110:	4a96      	ldr	r2, [pc, #600]	@ (800336c <menu+0x2dec>)
 8003112:	2101      	movs	r1, #1
 8003114:	2002      	movs	r0, #2
 8003116:	f7fd f9d2 	bl	80004be <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800311a:	4b91      	ldr	r3, [pc, #580]	@ (8003360 <menu+0x2de0>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	220a      	movs	r2, #10
 8003120:	4993      	ldr	r1, [pc, #588]	@ (8003370 <menu+0x2df0>)
 8003122:	4618      	mov	r0, r3
 8003124:	f009 fb62 	bl	800c7ec <itoa>
			lcd_print(2, 15, snum);
 8003128:	4a91      	ldr	r2, [pc, #580]	@ (8003370 <menu+0x2df0>)
 800312a:	210f      	movs	r1, #15
 800312c:	2002      	movs	r0, #2
 800312e:	f7fd f9c6 	bl	80004be <lcd_print>
		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003132:	e022      	b.n	800317a <menu+0x2bfa>
		} else if(makineCalismaTmr <=  9) {
 8003134:	4b8a      	ldr	r3, [pc, #552]	@ (8003360 <menu+0x2de0>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b09      	cmp	r3, #9
 800313a:	d81e      	bhi.n	800317a <menu+0x2bfa>
			if(dilSecim == 0) {
 800313c:	4b89      	ldr	r3, [pc, #548]	@ (8003364 <menu+0x2de4>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d105      	bne.n	8003150 <menu+0x2bd0>
				lcd_print(2, 1, "Kac Saniye     ");
 8003144:	4a88      	ldr	r2, [pc, #544]	@ (8003368 <menu+0x2de8>)
 8003146:	2101      	movs	r1, #1
 8003148:	2002      	movs	r0, #2
 800314a:	f7fd f9b8 	bl	80004be <lcd_print>
 800314e:	e008      	b.n	8003162 <menu+0x2be2>
			} else if(dilSecim == 1) {
 8003150:	4b84      	ldr	r3, [pc, #528]	@ (8003364 <menu+0x2de4>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d104      	bne.n	8003162 <menu+0x2be2>
				lcd_print(2, 1, "Second         ");
 8003158:	4a84      	ldr	r2, [pc, #528]	@ (800336c <menu+0x2dec>)
 800315a:	2101      	movs	r1, #1
 800315c:	2002      	movs	r0, #2
 800315e:	f7fd f9ae 	bl	80004be <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003162:	4b7f      	ldr	r3, [pc, #508]	@ (8003360 <menu+0x2de0>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	220a      	movs	r2, #10
 8003168:	4981      	ldr	r1, [pc, #516]	@ (8003370 <menu+0x2df0>)
 800316a:	4618      	mov	r0, r3
 800316c:	f009 fb3e 	bl	800c7ec <itoa>
			lcd_print(2, 16, snum);
 8003170:	4a7f      	ldr	r2, [pc, #508]	@ (8003370 <menu+0x2df0>)
 8003172:	2110      	movs	r1, #16
 8003174:	2002      	movs	r0, #2
 8003176:	f7fd f9a2 	bl	80004be <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800317a:	2102      	movs	r1, #2
 800317c:	487d      	ldr	r0, [pc, #500]	@ (8003374 <menu+0x2df4>)
 800317e:	f005 f979 	bl	8008474 <HAL_GPIO_ReadPin>
 8003182:	4603      	mov	r3, r0
 8003184:	2b01      	cmp	r3, #1
 8003186:	d115      	bne.n	80031b4 <menu+0x2c34>
 8003188:	4b7b      	ldr	r3, [pc, #492]	@ (8003378 <menu+0x2df8>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	f083 0301 	eor.w	r3, r3, #1
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00e      	beq.n	80031b4 <menu+0x2c34>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003196:	4b72      	ldr	r3, [pc, #456]	@ (8003360 <menu+0x2de0>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	3301      	adds	r3, #1
 800319c:	b2da      	uxtb	r2, r3
 800319e:	4b70      	ldr	r3, [pc, #448]	@ (8003360 <menu+0x2de0>)
 80031a0:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80031a2:	4b6f      	ldr	r3, [pc, #444]	@ (8003360 <menu+0x2de0>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2bb4      	cmp	r3, #180	@ 0xb4
 80031a8:	d902      	bls.n	80031b0 <menu+0x2c30>
				makineCalismaTmr = 0;
 80031aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003360 <menu+0x2de0>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031b0:	f001 f940 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031b4:	2104      	movs	r1, #4
 80031b6:	486f      	ldr	r0, [pc, #444]	@ (8003374 <menu+0x2df4>)
 80031b8:	f005 f95c 	bl	8008474 <HAL_GPIO_ReadPin>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d115      	bne.n	80031ee <menu+0x2c6e>
 80031c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003378 <menu+0x2df8>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	f083 0301 	eor.w	r3, r3, #1
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00e      	beq.n	80031ee <menu+0x2c6e>
			makineCalismaTmr = makineCalismaTmr - 1;
 80031d0:	4b63      	ldr	r3, [pc, #396]	@ (8003360 <menu+0x2de0>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	4b61      	ldr	r3, [pc, #388]	@ (8003360 <menu+0x2de0>)
 80031da:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80031dc:	4b60      	ldr	r3, [pc, #384]	@ (8003360 <menu+0x2de0>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2bb5      	cmp	r3, #181	@ 0xb5
 80031e2:	d902      	bls.n	80031ea <menu+0x2c6a>
		   		makineCalismaTmr = 180;
 80031e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003360 <menu+0x2de0>)
 80031e6:	22b4      	movs	r2, #180	@ 0xb4
 80031e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031ea:	f001 f923 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031ee:	2108      	movs	r1, #8
 80031f0:	4860      	ldr	r0, [pc, #384]	@ (8003374 <menu+0x2df4>)
 80031f2:	f005 f93f 	bl	8008474 <HAL_GPIO_ReadPin>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d10d      	bne.n	8003218 <menu+0x2c98>
 80031fc:	4b5e      	ldr	r3, [pc, #376]	@ (8003378 <menu+0x2df8>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	f083 0301 	eor.w	r3, r3, #1
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d006      	beq.n	8003218 <menu+0x2c98>
			eepromData[24] = makineCalismaTmr;
 800320a:	4b55      	ldr	r3, [pc, #340]	@ (8003360 <menu+0x2de0>)
 800320c:	781a      	ldrb	r2, [r3, #0]
 800320e:	4b5b      	ldr	r3, [pc, #364]	@ (800337c <menu+0x2dfc>)
 8003210:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003212:	4b5b      	ldr	r3, [pc, #364]	@ (8003380 <menu+0x2e00>)
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003218:	4b5a      	ldr	r3, [pc, #360]	@ (8003384 <menu+0x2e04>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b1b      	cmp	r3, #27
 800321e:	f040 8083 	bne.w	8003328 <menu+0x2da8>
		lcd_print(1, 1, "BUZZER          ");
 8003222:	4a59      	ldr	r2, [pc, #356]	@ (8003388 <menu+0x2e08>)
 8003224:	2101      	movs	r1, #1
 8003226:	2001      	movs	r0, #1
 8003228:	f7fd f949 	bl	80004be <lcd_print>

		if(buzzer == 0) {
 800322c:	4b57      	ldr	r3, [pc, #348]	@ (800338c <menu+0x2e0c>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d113      	bne.n	800325c <menu+0x2cdc>
			if(dilSecim == 0) {
 8003234:	4b4b      	ldr	r3, [pc, #300]	@ (8003364 <menu+0x2de4>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d105      	bne.n	8003248 <menu+0x2cc8>
				lcd_print(2, 1, "Pasif           ");
 800323c:	4a54      	ldr	r2, [pc, #336]	@ (8003390 <menu+0x2e10>)
 800323e:	2101      	movs	r1, #1
 8003240:	2002      	movs	r0, #2
 8003242:	f7fd f93c 	bl	80004be <lcd_print>
 8003246:	e020      	b.n	800328a <menu+0x2d0a>
			} else if(dilSecim == 1) {
 8003248:	4b46      	ldr	r3, [pc, #280]	@ (8003364 <menu+0x2de4>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d11c      	bne.n	800328a <menu+0x2d0a>
				lcd_print(2, 1, "Passive         ");
 8003250:	4a50      	ldr	r2, [pc, #320]	@ (8003394 <menu+0x2e14>)
 8003252:	2101      	movs	r1, #1
 8003254:	2002      	movs	r0, #2
 8003256:	f7fd f932 	bl	80004be <lcd_print>
 800325a:	e016      	b.n	800328a <menu+0x2d0a>
			}
		} else if(buzzer == 1) {
 800325c:	4b4b      	ldr	r3, [pc, #300]	@ (800338c <menu+0x2e0c>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d112      	bne.n	800328a <menu+0x2d0a>
			if(dilSecim == 0) {
 8003264:	4b3f      	ldr	r3, [pc, #252]	@ (8003364 <menu+0x2de4>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <menu+0x2cf8>
				lcd_print(2, 1, "Aktif           ");
 800326c:	4a4a      	ldr	r2, [pc, #296]	@ (8003398 <menu+0x2e18>)
 800326e:	2101      	movs	r1, #1
 8003270:	2002      	movs	r0, #2
 8003272:	f7fd f924 	bl	80004be <lcd_print>
 8003276:	e008      	b.n	800328a <menu+0x2d0a>
			} else if(dilSecim == 1) {
 8003278:	4b3a      	ldr	r3, [pc, #232]	@ (8003364 <menu+0x2de4>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d104      	bne.n	800328a <menu+0x2d0a>
				lcd_print(2, 1, "Active          ");
 8003280:	4a46      	ldr	r2, [pc, #280]	@ (800339c <menu+0x2e1c>)
 8003282:	2101      	movs	r1, #1
 8003284:	2002      	movs	r0, #2
 8003286:	f7fd f91a 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800328a:	2102      	movs	r1, #2
 800328c:	4839      	ldr	r0, [pc, #228]	@ (8003374 <menu+0x2df4>)
 800328e:	f005 f8f1 	bl	8008474 <HAL_GPIO_ReadPin>
 8003292:	4603      	mov	r3, r0
 8003294:	2b01      	cmp	r3, #1
 8003296:	d115      	bne.n	80032c4 <menu+0x2d44>
 8003298:	4b37      	ldr	r3, [pc, #220]	@ (8003378 <menu+0x2df8>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	f083 0301 	eor.w	r3, r3, #1
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00e      	beq.n	80032c4 <menu+0x2d44>
			buzzer = buzzer + 1;
 80032a6:	4b39      	ldr	r3, [pc, #228]	@ (800338c <menu+0x2e0c>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	3301      	adds	r3, #1
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4b37      	ldr	r3, [pc, #220]	@ (800338c <menu+0x2e0c>)
 80032b0:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80032b2:	4b36      	ldr	r3, [pc, #216]	@ (800338c <menu+0x2e0c>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d902      	bls.n	80032c0 <menu+0x2d40>
				buzzer = 0;
 80032ba:	4b34      	ldr	r3, [pc, #208]	@ (800338c <menu+0x2e0c>)
 80032bc:	2200      	movs	r2, #0
 80032be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032c0:	f001 f8b8 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032c4:	2104      	movs	r1, #4
 80032c6:	482b      	ldr	r0, [pc, #172]	@ (8003374 <menu+0x2df4>)
 80032c8:	f005 f8d4 	bl	8008474 <HAL_GPIO_ReadPin>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d115      	bne.n	80032fe <menu+0x2d7e>
 80032d2:	4b29      	ldr	r3, [pc, #164]	@ (8003378 <menu+0x2df8>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	f083 0301 	eor.w	r3, r3, #1
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00e      	beq.n	80032fe <menu+0x2d7e>
			buzzer = buzzer - 1;
 80032e0:	4b2a      	ldr	r3, [pc, #168]	@ (800338c <menu+0x2e0c>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	4b28      	ldr	r3, [pc, #160]	@ (800338c <menu+0x2e0c>)
 80032ea:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80032ec:	4b27      	ldr	r3, [pc, #156]	@ (800338c <menu+0x2e0c>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <menu+0x2d7a>
		   		buzzer = 1;
 80032f4:	4b25      	ldr	r3, [pc, #148]	@ (800338c <menu+0x2e0c>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032fa:	f001 f89b 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032fe:	2108      	movs	r1, #8
 8003300:	481c      	ldr	r0, [pc, #112]	@ (8003374 <menu+0x2df4>)
 8003302:	f005 f8b7 	bl	8008474 <HAL_GPIO_ReadPin>
 8003306:	4603      	mov	r3, r0
 8003308:	2b01      	cmp	r3, #1
 800330a:	d10d      	bne.n	8003328 <menu+0x2da8>
 800330c:	4b1a      	ldr	r3, [pc, #104]	@ (8003378 <menu+0x2df8>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	f083 0301 	eor.w	r3, r3, #1
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d006      	beq.n	8003328 <menu+0x2da8>
			eepromData[25] = buzzer;
 800331a:	4b1c      	ldr	r3, [pc, #112]	@ (800338c <menu+0x2e0c>)
 800331c:	781a      	ldrb	r2, [r3, #0]
 800331e:	4b17      	ldr	r3, [pc, #92]	@ (800337c <menu+0x2dfc>)
 8003320:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003322:	4b17      	ldr	r3, [pc, #92]	@ (8003380 <menu+0x2e00>)
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003328:	4b16      	ldr	r3, [pc, #88]	@ (8003384 <menu+0x2e04>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b1c      	cmp	r3, #28
 800332e:	f040 80ad 	bne.w	800348c <menu+0x2f0c>
		calismaSayModu = 0;
 8003332:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <menu+0x2e20>)
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003338:	4a1a      	ldr	r2, [pc, #104]	@ (80033a4 <menu+0x2e24>)
 800333a:	2101      	movs	r1, #1
 800333c:	2001      	movs	r0, #1
 800333e:	f7fd f8be 	bl	80004be <lcd_print>

		if(demoMode == 0) {
 8003342:	4b19      	ldr	r3, [pc, #100]	@ (80033a8 <menu+0x2e28>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d13a      	bne.n	80033c0 <menu+0x2e40>
			if(dilSecim == 0) {
 800334a:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <menu+0x2de4>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d12c      	bne.n	80033ac <menu+0x2e2c>
				lcd_print(2, 1, "Pasif           ");
 8003352:	4a0f      	ldr	r2, [pc, #60]	@ (8003390 <menu+0x2e10>)
 8003354:	2101      	movs	r1, #1
 8003356:	2002      	movs	r0, #2
 8003358:	f7fd f8b1 	bl	80004be <lcd_print>
 800335c:	e047      	b.n	80033ee <menu+0x2e6e>
 800335e:	bf00      	nop
 8003360:	20000c9c 	.word	0x20000c9c
 8003364:	20000ca4 	.word	0x20000ca4
 8003368:	0800cfb4 	.word	0x0800cfb4
 800336c:	0800d328 	.word	0x0800d328
 8003370:	20000c58 	.word	0x20000c58
 8003374:	40010800 	.word	0x40010800
 8003378:	20000cb2 	.word	0x20000cb2
 800337c:	20000c18 	.word	0x20000c18
 8003380:	20000caf 	.word	0x20000caf
 8003384:	20000c84 	.word	0x20000c84
 8003388:	0800d428 	.word	0x0800d428
 800338c:	20000ca0 	.word	0x20000ca0
 8003390:	0800cd50 	.word	0x0800cd50
 8003394:	0800cd64 	.word	0x0800cd64
 8003398:	0800cdb0 	.word	0x0800cdb0
 800339c:	0800cdc4 	.word	0x0800cdc4
 80033a0:	20000ca3 	.word	0x20000ca3
 80033a4:	0800d43c 	.word	0x0800d43c
 80033a8:	20000ca2 	.word	0x20000ca2
			} else if(dilSecim == 1) {
 80033ac:	4b7d      	ldr	r3, [pc, #500]	@ (80035a4 <menu+0x3024>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d11c      	bne.n	80033ee <menu+0x2e6e>
				lcd_print(2, 1, "Passive         ");
 80033b4:	4a7c      	ldr	r2, [pc, #496]	@ (80035a8 <menu+0x3028>)
 80033b6:	2101      	movs	r1, #1
 80033b8:	2002      	movs	r0, #2
 80033ba:	f7fd f880 	bl	80004be <lcd_print>
 80033be:	e016      	b.n	80033ee <menu+0x2e6e>
			}
		} else if(demoMode == 1) {
 80033c0:	4b7a      	ldr	r3, [pc, #488]	@ (80035ac <menu+0x302c>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d112      	bne.n	80033ee <menu+0x2e6e>
			if(dilSecim == 0){
 80033c8:	4b76      	ldr	r3, [pc, #472]	@ (80035a4 <menu+0x3024>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d105      	bne.n	80033dc <menu+0x2e5c>
				lcd_print(2, 1, "Aktif           ");
 80033d0:	4a77      	ldr	r2, [pc, #476]	@ (80035b0 <menu+0x3030>)
 80033d2:	2101      	movs	r1, #1
 80033d4:	2002      	movs	r0, #2
 80033d6:	f7fd f872 	bl	80004be <lcd_print>
 80033da:	e008      	b.n	80033ee <menu+0x2e6e>
			} else if(dilSecim == 1) {
 80033dc:	4b71      	ldr	r3, [pc, #452]	@ (80035a4 <menu+0x3024>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d104      	bne.n	80033ee <menu+0x2e6e>
				lcd_print(2, 1, "Active          ");
 80033e4:	4a73      	ldr	r2, [pc, #460]	@ (80035b4 <menu+0x3034>)
 80033e6:	2101      	movs	r1, #1
 80033e8:	2002      	movs	r0, #2
 80033ea:	f7fd f868 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033ee:	2102      	movs	r1, #2
 80033f0:	4871      	ldr	r0, [pc, #452]	@ (80035b8 <menu+0x3038>)
 80033f2:	f005 f83f 	bl	8008474 <HAL_GPIO_ReadPin>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d115      	bne.n	8003428 <menu+0x2ea8>
 80033fc:	4b6f      	ldr	r3, [pc, #444]	@ (80035bc <menu+0x303c>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	f083 0301 	eor.w	r3, r3, #1
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00e      	beq.n	8003428 <menu+0x2ea8>
			demoMode = demoMode + 1;
 800340a:	4b68      	ldr	r3, [pc, #416]	@ (80035ac <menu+0x302c>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	3301      	adds	r3, #1
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4b66      	ldr	r3, [pc, #408]	@ (80035ac <menu+0x302c>)
 8003414:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003416:	4b65      	ldr	r3, [pc, #404]	@ (80035ac <menu+0x302c>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d902      	bls.n	8003424 <menu+0x2ea4>
				demoMode = 0;
 800341e:	4b63      	ldr	r3, [pc, #396]	@ (80035ac <menu+0x302c>)
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003424:	f001 f806 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003428:	2104      	movs	r1, #4
 800342a:	4863      	ldr	r0, [pc, #396]	@ (80035b8 <menu+0x3038>)
 800342c:	f005 f822 	bl	8008474 <HAL_GPIO_ReadPin>
 8003430:	4603      	mov	r3, r0
 8003432:	2b01      	cmp	r3, #1
 8003434:	d115      	bne.n	8003462 <menu+0x2ee2>
 8003436:	4b61      	ldr	r3, [pc, #388]	@ (80035bc <menu+0x303c>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	f083 0301 	eor.w	r3, r3, #1
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00e      	beq.n	8003462 <menu+0x2ee2>
			demoMode = demoMode - 1;
 8003444:	4b59      	ldr	r3, [pc, #356]	@ (80035ac <menu+0x302c>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	3b01      	subs	r3, #1
 800344a:	b2da      	uxtb	r2, r3
 800344c:	4b57      	ldr	r3, [pc, #348]	@ (80035ac <menu+0x302c>)
 800344e:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003450:	4b56      	ldr	r3, [pc, #344]	@ (80035ac <menu+0x302c>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <menu+0x2ede>
		   		demoMode = 1;
 8003458:	4b54      	ldr	r3, [pc, #336]	@ (80035ac <menu+0x302c>)
 800345a:	2201      	movs	r2, #1
 800345c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800345e:	f000 ffe9 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003462:	2108      	movs	r1, #8
 8003464:	4854      	ldr	r0, [pc, #336]	@ (80035b8 <menu+0x3038>)
 8003466:	f005 f805 	bl	8008474 <HAL_GPIO_ReadPin>
 800346a:	4603      	mov	r3, r0
 800346c:	2b01      	cmp	r3, #1
 800346e:	d10d      	bne.n	800348c <menu+0x2f0c>
 8003470:	4b52      	ldr	r3, [pc, #328]	@ (80035bc <menu+0x303c>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	f083 0301 	eor.w	r3, r3, #1
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d006      	beq.n	800348c <menu+0x2f0c>
			eepromData[26] = demoMode;
 800347e:	4b4b      	ldr	r3, [pc, #300]	@ (80035ac <menu+0x302c>)
 8003480:	781a      	ldrb	r2, [r3, #0]
 8003482:	4b4f      	ldr	r3, [pc, #316]	@ (80035c0 <menu+0x3040>)
 8003484:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003486:	4b4f      	ldr	r3, [pc, #316]	@ (80035c4 <menu+0x3044>)
 8003488:	2201      	movs	r2, #1
 800348a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 800348c:	4b4e      	ldr	r3, [pc, #312]	@ (80035c8 <menu+0x3048>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b1d      	cmp	r3, #29
 8003492:	f040 813a 	bne.w	800370a <menu+0x318a>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8003496:	4b4d      	ldr	r3, [pc, #308]	@ (80035cc <menu+0x304c>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d113      	bne.n	80034c6 <menu+0x2f46>
 800349e:	4b4c      	ldr	r3, [pc, #304]	@ (80035d0 <menu+0x3050>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10f      	bne.n	80034c6 <menu+0x2f46>
 80034a6:	4b4b      	ldr	r3, [pc, #300]	@ (80035d4 <menu+0x3054>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10b      	bne.n	80034c6 <menu+0x2f46>
 80034ae:	4b4a      	ldr	r3, [pc, #296]	@ (80035d8 <menu+0x3058>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d107      	bne.n	80034c6 <menu+0x2f46>
 80034b6:	4b49      	ldr	r3, [pc, #292]	@ (80035dc <menu+0x305c>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d103      	bne.n	80034c6 <menu+0x2f46>
			calismaSayisiYar = 0;
 80034be:	4b48      	ldr	r3, [pc, #288]	@ (80035e0 <menu+0x3060>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]
 80034c4:	e002      	b.n	80034cc <menu+0x2f4c>
		} else {
			calismaSayisiYar = 1;
 80034c6:	4b46      	ldr	r3, [pc, #280]	@ (80035e0 <menu+0x3060>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80034cc:	4b45      	ldr	r3, [pc, #276]	@ (80035e4 <menu+0x3064>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d154      	bne.n	800357e <menu+0x2ffe>
			if(dilSecim == 0) {
 80034d4:	4b33      	ldr	r3, [pc, #204]	@ (80035a4 <menu+0x3024>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <menu+0x2f68>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80034dc:	4a42      	ldr	r2, [pc, #264]	@ (80035e8 <menu+0x3068>)
 80034de:	2101      	movs	r1, #1
 80034e0:	2001      	movs	r0, #1
 80034e2:	f7fc ffec 	bl	80004be <lcd_print>
 80034e6:	e008      	b.n	80034fa <menu+0x2f7a>
			} else if(dilSecim == 1) {
 80034e8:	4b2e      	ldr	r3, [pc, #184]	@ (80035a4 <menu+0x3024>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d104      	bne.n	80034fa <menu+0x2f7a>
				lcd_print(1, 1, "Working Cycle   ");
 80034f0:	4a3e      	ldr	r2, [pc, #248]	@ (80035ec <menu+0x306c>)
 80034f2:	2101      	movs	r1, #1
 80034f4:	2001      	movs	r0, #1
 80034f6:	f7fc ffe2 	bl	80004be <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80034fa:	4b38      	ldr	r3, [pc, #224]	@ (80035dc <menu+0x305c>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	220a      	movs	r2, #10
 8003500:	493b      	ldr	r1, [pc, #236]	@ (80035f0 <menu+0x3070>)
 8003502:	4618      	mov	r0, r3
 8003504:	f009 f972 	bl	800c7ec <itoa>
			lcd_print(2, 12, snum);
 8003508:	4a39      	ldr	r2, [pc, #228]	@ (80035f0 <menu+0x3070>)
 800350a:	210c      	movs	r1, #12
 800350c:	2002      	movs	r0, #2
 800350e:	f7fc ffd6 	bl	80004be <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8003512:	4b31      	ldr	r3, [pc, #196]	@ (80035d8 <menu+0x3058>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	220a      	movs	r2, #10
 8003518:	4935      	ldr	r1, [pc, #212]	@ (80035f0 <menu+0x3070>)
 800351a:	4618      	mov	r0, r3
 800351c:	f009 f966 	bl	800c7ec <itoa>
			lcd_print(2, 13, snum);
 8003520:	4a33      	ldr	r2, [pc, #204]	@ (80035f0 <menu+0x3070>)
 8003522:	210d      	movs	r1, #13
 8003524:	2002      	movs	r0, #2
 8003526:	f7fc ffca 	bl	80004be <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800352a:	4b2a      	ldr	r3, [pc, #168]	@ (80035d4 <menu+0x3054>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	220a      	movs	r2, #10
 8003530:	492f      	ldr	r1, [pc, #188]	@ (80035f0 <menu+0x3070>)
 8003532:	4618      	mov	r0, r3
 8003534:	f009 f95a 	bl	800c7ec <itoa>
			lcd_print(2, 14, snum);
 8003538:	4a2d      	ldr	r2, [pc, #180]	@ (80035f0 <menu+0x3070>)
 800353a:	210e      	movs	r1, #14
 800353c:	2002      	movs	r0, #2
 800353e:	f7fc ffbe 	bl	80004be <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8003542:	4b23      	ldr	r3, [pc, #140]	@ (80035d0 <menu+0x3050>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	220a      	movs	r2, #10
 8003548:	4929      	ldr	r1, [pc, #164]	@ (80035f0 <menu+0x3070>)
 800354a:	4618      	mov	r0, r3
 800354c:	f009 f94e 	bl	800c7ec <itoa>
			lcd_print(2, 15, snum);
 8003550:	4a27      	ldr	r2, [pc, #156]	@ (80035f0 <menu+0x3070>)
 8003552:	210f      	movs	r1, #15
 8003554:	2002      	movs	r0, #2
 8003556:	f7fc ffb2 	bl	80004be <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800355a:	4b1c      	ldr	r3, [pc, #112]	@ (80035cc <menu+0x304c>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	220a      	movs	r2, #10
 8003560:	4923      	ldr	r1, [pc, #140]	@ (80035f0 <menu+0x3070>)
 8003562:	4618      	mov	r0, r3
 8003564:	f009 f942 	bl	800c7ec <itoa>
			lcd_print(2, 16, snum);
 8003568:	4a21      	ldr	r2, [pc, #132]	@ (80035f0 <menu+0x3070>)
 800356a:	2110      	movs	r1, #16
 800356c:	2002      	movs	r0, #2
 800356e:	f7fc ffa6 	bl	80004be <lcd_print>

			lcd_print(2, 1, "           ");
 8003572:	4a20      	ldr	r2, [pc, #128]	@ (80035f4 <menu+0x3074>)
 8003574:	2101      	movs	r1, #1
 8003576:	2002      	movs	r0, #2
 8003578:	f7fc ffa1 	bl	80004be <lcd_print>
 800357c:	e04c      	b.n	8003618 <menu+0x3098>
		} else if(calismaSayModu == 1) {
 800357e:	4b19      	ldr	r3, [pc, #100]	@ (80035e4 <menu+0x3064>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d148      	bne.n	8003618 <menu+0x3098>
			if(dilSecim == 0) {
 8003586:	4b07      	ldr	r3, [pc, #28]	@ (80035a4 <menu+0x3024>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d136      	bne.n	80035fc <menu+0x307c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800358e:	4a16      	ldr	r2, [pc, #88]	@ (80035e8 <menu+0x3068>)
 8003590:	2101      	movs	r1, #1
 8003592:	2001      	movs	r0, #1
 8003594:	f7fc ff93 	bl	80004be <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8003598:	4a17      	ldr	r2, [pc, #92]	@ (80035f8 <menu+0x3078>)
 800359a:	2101      	movs	r1, #1
 800359c:	2002      	movs	r0, #2
 800359e:	f7fc ff8e 	bl	80004be <lcd_print>
 80035a2:	e039      	b.n	8003618 <menu+0x3098>
 80035a4:	20000ca4 	.word	0x20000ca4
 80035a8:	0800cd64 	.word	0x0800cd64
 80035ac:	20000ca2 	.word	0x20000ca2
 80035b0:	0800cdb0 	.word	0x0800cdb0
 80035b4:	0800cdc4 	.word	0x0800cdc4
 80035b8:	40010800 	.word	0x40010800
 80035bc:	20000cb2 	.word	0x20000cb2
 80035c0:	20000c18 	.word	0x20000c18
 80035c4:	20000caf 	.word	0x20000caf
 80035c8:	20000c84 	.word	0x20000c84
 80035cc:	20000c81 	.word	0x20000c81
 80035d0:	20000c82 	.word	0x20000c82
 80035d4:	20000941 	.word	0x20000941
 80035d8:	20000942 	.word	0x20000942
 80035dc:	20000c83 	.word	0x20000c83
 80035e0:	20000cc4 	.word	0x20000cc4
 80035e4:	20000ca3 	.word	0x20000ca3
 80035e8:	0800d44c 	.word	0x0800d44c
 80035ec:	0800d460 	.word	0x0800d460
 80035f0:	20000c58 	.word	0x20000c58
 80035f4:	0800d474 	.word	0x0800d474
 80035f8:	0800d480 	.word	0x0800d480
			} else if(dilSecim == 1) {
 80035fc:	4b97      	ldr	r3, [pc, #604]	@ (800385c <menu+0x32dc>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d109      	bne.n	8003618 <menu+0x3098>
				lcd_print(1, 1, "Working Cycle   ");
 8003604:	4a96      	ldr	r2, [pc, #600]	@ (8003860 <menu+0x32e0>)
 8003606:	2101      	movs	r1, #1
 8003608:	2001      	movs	r0, #1
 800360a:	f7fc ff58 	bl	80004be <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800360e:	4a95      	ldr	r2, [pc, #596]	@ (8003864 <menu+0x32e4>)
 8003610:	2101      	movs	r1, #1
 8003612:	2002      	movs	r0, #2
 8003614:	f7fc ff53 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003618:	2102      	movs	r1, #2
 800361a:	4893      	ldr	r0, [pc, #588]	@ (8003868 <menu+0x32e8>)
 800361c:	f004 ff2a 	bl	8008474 <HAL_GPIO_ReadPin>
 8003620:	4603      	mov	r3, r0
 8003622:	2b01      	cmp	r3, #1
 8003624:	d119      	bne.n	800365a <menu+0x30da>
 8003626:	4b91      	ldr	r3, [pc, #580]	@ (800386c <menu+0x32ec>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	f083 0301 	eor.w	r3, r3, #1
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d012      	beq.n	800365a <menu+0x30da>
 8003634:	4b8e      	ldr	r3, [pc, #568]	@ (8003870 <menu+0x32f0>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00e      	beq.n	800365a <menu+0x30da>
			calismaSayModu = calismaSayModu + 1;
 800363c:	4b8d      	ldr	r3, [pc, #564]	@ (8003874 <menu+0x32f4>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	3301      	adds	r3, #1
 8003642:	b2da      	uxtb	r2, r3
 8003644:	4b8b      	ldr	r3, [pc, #556]	@ (8003874 <menu+0x32f4>)
 8003646:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003648:	4b8a      	ldr	r3, [pc, #552]	@ (8003874 <menu+0x32f4>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d902      	bls.n	8003656 <menu+0x30d6>
				calismaSayModu = 0;
 8003650:	4b88      	ldr	r3, [pc, #544]	@ (8003874 <menu+0x32f4>)
 8003652:	2200      	movs	r2, #0
 8003654:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003656:	f000 feed 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800365a:	2104      	movs	r1, #4
 800365c:	4882      	ldr	r0, [pc, #520]	@ (8003868 <menu+0x32e8>)
 800365e:	f004 ff09 	bl	8008474 <HAL_GPIO_ReadPin>
 8003662:	4603      	mov	r3, r0
 8003664:	2b01      	cmp	r3, #1
 8003666:	d119      	bne.n	800369c <menu+0x311c>
 8003668:	4b80      	ldr	r3, [pc, #512]	@ (800386c <menu+0x32ec>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	f083 0301 	eor.w	r3, r3, #1
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d012      	beq.n	800369c <menu+0x311c>
 8003676:	4b7e      	ldr	r3, [pc, #504]	@ (8003870 <menu+0x32f0>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00e      	beq.n	800369c <menu+0x311c>
			calismaSayModu = calismaSayModu - 1;
 800367e:	4b7d      	ldr	r3, [pc, #500]	@ (8003874 <menu+0x32f4>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	3b01      	subs	r3, #1
 8003684:	b2da      	uxtb	r2, r3
 8003686:	4b7b      	ldr	r3, [pc, #492]	@ (8003874 <menu+0x32f4>)
 8003688:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800368a:	4b7a      	ldr	r3, [pc, #488]	@ (8003874 <menu+0x32f4>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <menu+0x3118>
		   		calismaSayModu = 1;
 8003692:	4b78      	ldr	r3, [pc, #480]	@ (8003874 <menu+0x32f4>)
 8003694:	2201      	movs	r2, #1
 8003696:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003698:	f000 fecc 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)&&(calismaSayModu==1)) {
 800369c:	2108      	movs	r1, #8
 800369e:	4872      	ldr	r0, [pc, #456]	@ (8003868 <menu+0x32e8>)
 80036a0:	f004 fee8 	bl	8008474 <HAL_GPIO_ReadPin>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d12f      	bne.n	800370a <menu+0x318a>
 80036aa:	4b70      	ldr	r3, [pc, #448]	@ (800386c <menu+0x32ec>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	f083 0301 	eor.w	r3, r3, #1
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d028      	beq.n	800370a <menu+0x318a>
 80036b8:	4b6e      	ldr	r3, [pc, #440]	@ (8003874 <menu+0x32f4>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d124      	bne.n	800370a <menu+0x318a>
			eepromData[32] = 0;
 80036c0:	4b6d      	ldr	r3, [pc, #436]	@ (8003878 <menu+0x32f8>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80036c8:	4b6b      	ldr	r3, [pc, #428]	@ (8003878 <menu+0x32f8>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80036ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003878 <menu+0x32f8>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80036d4:	4b68      	ldr	r3, [pc, #416]	@ (8003878 <menu+0x32f8>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80036da:	4b67      	ldr	r3, [pc, #412]	@ (8003878 <menu+0x32f8>)
 80036dc:	2200      	movs	r2, #0
 80036de:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80036e0:	4b66      	ldr	r3, [pc, #408]	@ (800387c <menu+0x32fc>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80036e6:	4b66      	ldr	r3, [pc, #408]	@ (8003880 <menu+0x3300>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80036ec:	4b65      	ldr	r3, [pc, #404]	@ (8003884 <menu+0x3304>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80036f2:	4b65      	ldr	r3, [pc, #404]	@ (8003888 <menu+0x3308>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80036f8:	4b64      	ldr	r3, [pc, #400]	@ (800388c <menu+0x330c>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80036fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003874 <menu+0x32f4>)
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003704:	4b62      	ldr	r3, [pc, #392]	@ (8003890 <menu+0x3310>)
 8003706:	2201      	movs	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800370a:	4b62      	ldr	r3, [pc, #392]	@ (8003894 <menu+0x3314>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b1e      	cmp	r3, #30
 8003710:	d16f      	bne.n	80037f2 <menu+0x3272>
		calismaSayModu = 0;
 8003712:	4b58      	ldr	r3, [pc, #352]	@ (8003874 <menu+0x32f4>)
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8003718:	4b50      	ldr	r3, [pc, #320]	@ (800385c <menu+0x32dc>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <menu+0x31b6>
			lcd_print(1, 1, "DIL SECIMI      ");
 8003720:	4a5d      	ldr	r2, [pc, #372]	@ (8003898 <menu+0x3318>)
 8003722:	2101      	movs	r1, #1
 8003724:	2001      	movs	r0, #1
 8003726:	f7fc feca 	bl	80004be <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800372a:	4a5c      	ldr	r2, [pc, #368]	@ (800389c <menu+0x331c>)
 800372c:	2101      	movs	r1, #1
 800372e:	2002      	movs	r0, #2
 8003730:	f7fc fec5 	bl	80004be <lcd_print>
 8003734:	e00d      	b.n	8003752 <menu+0x31d2>
		} else if(dilSecim == 1) {
 8003736:	4b49      	ldr	r3, [pc, #292]	@ (800385c <menu+0x32dc>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d109      	bne.n	8003752 <menu+0x31d2>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800373e:	4a58      	ldr	r2, [pc, #352]	@ (80038a0 <menu+0x3320>)
 8003740:	2101      	movs	r1, #1
 8003742:	2001      	movs	r0, #1
 8003744:	f7fc febb 	bl	80004be <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8003748:	4a56      	ldr	r2, [pc, #344]	@ (80038a4 <menu+0x3324>)
 800374a:	2101      	movs	r1, #1
 800374c:	2002      	movs	r0, #2
 800374e:	f7fc feb6 	bl	80004be <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003752:	2102      	movs	r1, #2
 8003754:	4844      	ldr	r0, [pc, #272]	@ (8003868 <menu+0x32e8>)
 8003756:	f004 fe8d 	bl	8008474 <HAL_GPIO_ReadPin>
 800375a:	4603      	mov	r3, r0
 800375c:	2b01      	cmp	r3, #1
 800375e:	d115      	bne.n	800378c <menu+0x320c>
 8003760:	4b42      	ldr	r3, [pc, #264]	@ (800386c <menu+0x32ec>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	f083 0301 	eor.w	r3, r3, #1
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00e      	beq.n	800378c <menu+0x320c>
			dilSecim = dilSecim + 1;
 800376e:	4b3b      	ldr	r3, [pc, #236]	@ (800385c <menu+0x32dc>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	3301      	adds	r3, #1
 8003774:	b2da      	uxtb	r2, r3
 8003776:	4b39      	ldr	r3, [pc, #228]	@ (800385c <menu+0x32dc>)
 8003778:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800377a:	4b38      	ldr	r3, [pc, #224]	@ (800385c <menu+0x32dc>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d902      	bls.n	8003788 <menu+0x3208>
				dilSecim = 0;
 8003782:	4b36      	ldr	r3, [pc, #216]	@ (800385c <menu+0x32dc>)
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003788:	f000 fe54 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800378c:	2104      	movs	r1, #4
 800378e:	4836      	ldr	r0, [pc, #216]	@ (8003868 <menu+0x32e8>)
 8003790:	f004 fe70 	bl	8008474 <HAL_GPIO_ReadPin>
 8003794:	4603      	mov	r3, r0
 8003796:	2b01      	cmp	r3, #1
 8003798:	d115      	bne.n	80037c6 <menu+0x3246>
 800379a:	4b34      	ldr	r3, [pc, #208]	@ (800386c <menu+0x32ec>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	f083 0301 	eor.w	r3, r3, #1
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00e      	beq.n	80037c6 <menu+0x3246>
			dilSecim = dilSecim - 1;
 80037a8:	4b2c      	ldr	r3, [pc, #176]	@ (800385c <menu+0x32dc>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	4b2a      	ldr	r3, [pc, #168]	@ (800385c <menu+0x32dc>)
 80037b2:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80037b4:	4b29      	ldr	r3, [pc, #164]	@ (800385c <menu+0x32dc>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <menu+0x3242>
		   		dilSecim = 1;
 80037bc:	4b27      	ldr	r3, [pc, #156]	@ (800385c <menu+0x32dc>)
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80037c2:	f000 fe37 	bl	8004434 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037c6:	2108      	movs	r1, #8
 80037c8:	4827      	ldr	r0, [pc, #156]	@ (8003868 <menu+0x32e8>)
 80037ca:	f004 fe53 	bl	8008474 <HAL_GPIO_ReadPin>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d10e      	bne.n	80037f2 <menu+0x3272>
 80037d4:	4b25      	ldr	r3, [pc, #148]	@ (800386c <menu+0x32ec>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	f083 0301 	eor.w	r3, r3, #1
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <menu+0x3272>
			eepromData[33] = dilSecim;
 80037e2:	4b1e      	ldr	r3, [pc, #120]	@ (800385c <menu+0x32dc>)
 80037e4:	781a      	ldrb	r2, [r3, #0]
 80037e6:	4b24      	ldr	r3, [pc, #144]	@ (8003878 <menu+0x32f8>)
 80037e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 80037ec:	4b28      	ldr	r3, [pc, #160]	@ (8003890 <menu+0x3310>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80037f2:	4b28      	ldr	r3, [pc, #160]	@ (8003894 <menu+0x3314>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b1f      	cmp	r3, #31
 80037f8:	d12e      	bne.n	8003858 <menu+0x32d8>
		if(dilSecim == 0) {
 80037fa:	4b18      	ldr	r3, [pc, #96]	@ (800385c <menu+0x32dc>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10a      	bne.n	8003818 <menu+0x3298>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8003802:	4a29      	ldr	r2, [pc, #164]	@ (80038a8 <menu+0x3328>)
 8003804:	2101      	movs	r1, #1
 8003806:	2001      	movs	r0, #1
 8003808:	f7fc fe59 	bl	80004be <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 800380c:	4a27      	ldr	r2, [pc, #156]	@ (80038ac <menu+0x332c>)
 800380e:	2101      	movs	r1, #1
 8003810:	2002      	movs	r0, #2
 8003812:	f7fc fe54 	bl	80004be <lcd_print>
 8003816:	e00d      	b.n	8003834 <menu+0x32b4>
		} else if(dilSecim == 1) {
 8003818:	4b10      	ldr	r3, [pc, #64]	@ (800385c <menu+0x32dc>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d109      	bne.n	8003834 <menu+0x32b4>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8003820:	4a23      	ldr	r2, [pc, #140]	@ (80038b0 <menu+0x3330>)
 8003822:	2101      	movs	r1, #1
 8003824:	2001      	movs	r0, #1
 8003826:	f7fc fe4a 	bl	80004be <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 800382a:	4a22      	ldr	r2, [pc, #136]	@ (80038b4 <menu+0x3334>)
 800382c:	2101      	movs	r1, #1
 800382e:	2002      	movs	r0, #2
 8003830:	f7fc fe45 	bl	80004be <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003834:	2108      	movs	r1, #8
 8003836:	480c      	ldr	r0, [pc, #48]	@ (8003868 <menu+0x32e8>)
 8003838:	f004 fe1c 	bl	8008474 <HAL_GPIO_ReadPin>
 800383c:	4603      	mov	r3, r0
 800383e:	2b01      	cmp	r3, #1
 8003840:	d10a      	bne.n	8003858 <menu+0x32d8>
			menuGiris = 0;
 8003842:	4b1d      	ldr	r3, [pc, #116]	@ (80038b8 <menu+0x3338>)
 8003844:	2200      	movs	r2, #0
 8003846:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8003848:	f7fc fe4e 	bl	80004e8 <lcd_clear>
			HAL_Delay(500);
 800384c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003850:	f004 f982 	bl	8007b58 <HAL_Delay>
			NVIC_SystemReset();
 8003854:	f7fc fe64 	bl	8000520 <__NVIC_SystemReset>
		}
	}
}
 8003858:	bf00      	nop
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20000ca4 	.word	0x20000ca4
 8003860:	0800d460 	.word	0x0800d460
 8003864:	0800d494 	.word	0x0800d494
 8003868:	40010800 	.word	0x40010800
 800386c:	20000cb2 	.word	0x20000cb2
 8003870:	20000cc4 	.word	0x20000cc4
 8003874:	20000ca3 	.word	0x20000ca3
 8003878:	20000c18 	.word	0x20000c18
 800387c:	20000c83 	.word	0x20000c83
 8003880:	20000942 	.word	0x20000942
 8003884:	20000941 	.word	0x20000941
 8003888:	20000c82 	.word	0x20000c82
 800388c:	20000c81 	.word	0x20000c81
 8003890:	20000caf 	.word	0x20000caf
 8003894:	20000c84 	.word	0x20000c84
 8003898:	0800d4a8 	.word	0x0800d4a8
 800389c:	0800d4bc 	.word	0x0800d4bc
 80038a0:	0800d4d0 	.word	0x0800d4d0
 80038a4:	0800d4e4 	.word	0x0800d4e4
 80038a8:	0800d4f8 	.word	0x0800d4f8
 80038ac:	0800d50c 	.word	0x0800d50c
 80038b0:	0800d520 	.word	0x0800d520
 80038b4:	0800d534 	.word	0x0800d534
 80038b8:	20000ca1 	.word	0x20000ca1

080038bc <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 80038c6:	48a9      	ldr	r0, [pc, #676]	@ (8003b6c <loadMenuTexts+0x2b0>)
 80038c8:	f7fc fe40 	bl	800054c <copyText>
 80038cc:	4603      	mov	r3, r0
 80038ce:	4aa8      	ldr	r2, [pc, #672]	@ (8003b70 <loadMenuTexts+0x2b4>)
 80038d0:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 80038d2:	48a8      	ldr	r0, [pc, #672]	@ (8003b74 <loadMenuTexts+0x2b8>)
 80038d4:	f7fc fe3a 	bl	800054c <copyText>
 80038d8:	4603      	mov	r3, r0
 80038da:	4aa7      	ldr	r2, [pc, #668]	@ (8003b78 <loadMenuTexts+0x2bc>)
 80038dc:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 80038de:	48a7      	ldr	r0, [pc, #668]	@ (8003b7c <loadMenuTexts+0x2c0>)
 80038e0:	f7fc fe34 	bl	800054c <copyText>
 80038e4:	4603      	mov	r3, r0
 80038e6:	4aa6      	ldr	r2, [pc, #664]	@ (8003b80 <loadMenuTexts+0x2c4>)
 80038e8:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 80038ea:	48a6      	ldr	r0, [pc, #664]	@ (8003b84 <loadMenuTexts+0x2c8>)
 80038ec:	f7fc fe2e 	bl	800054c <copyText>
 80038f0:	4603      	mov	r3, r0
 80038f2:	4aa5      	ldr	r2, [pc, #660]	@ (8003b88 <loadMenuTexts+0x2cc>)
 80038f4:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 80038f6:	48a5      	ldr	r0, [pc, #660]	@ (8003b8c <loadMenuTexts+0x2d0>)
 80038f8:	f7fc fe28 	bl	800054c <copyText>
 80038fc:	4603      	mov	r3, r0
 80038fe:	4aa4      	ldr	r2, [pc, #656]	@ (8003b90 <loadMenuTexts+0x2d4>)
 8003900:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8003902:	48a4      	ldr	r0, [pc, #656]	@ (8003b94 <loadMenuTexts+0x2d8>)
 8003904:	f7fc fe22 	bl	800054c <copyText>
 8003908:	4603      	mov	r3, r0
 800390a:	4aa3      	ldr	r2, [pc, #652]	@ (8003b98 <loadMenuTexts+0x2dc>)
 800390c:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 800390e:	48a3      	ldr	r0, [pc, #652]	@ (8003b9c <loadMenuTexts+0x2e0>)
 8003910:	f7fc fe1c 	bl	800054c <copyText>
 8003914:	4603      	mov	r3, r0
 8003916:	4aa2      	ldr	r2, [pc, #648]	@ (8003ba0 <loadMenuTexts+0x2e4>)
 8003918:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f040 82d1 	bne.w	8003ec4 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8003922:	48a0      	ldr	r0, [pc, #640]	@ (8003ba4 <loadMenuTexts+0x2e8>)
 8003924:	f7fc fe12 	bl	800054c <copyText>
 8003928:	4603      	mov	r3, r0
 800392a:	4a9f      	ldr	r2, [pc, #636]	@ (8003ba8 <loadMenuTexts+0x2ec>)
 800392c:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 800392e:	489f      	ldr	r0, [pc, #636]	@ (8003bac <loadMenuTexts+0x2f0>)
 8003930:	f7fc fe0c 	bl	800054c <copyText>
 8003934:	4603      	mov	r3, r0
 8003936:	4a9e      	ldr	r2, [pc, #632]	@ (8003bb0 <loadMenuTexts+0x2f4>)
 8003938:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 800393a:	489e      	ldr	r0, [pc, #632]	@ (8003bb4 <loadMenuTexts+0x2f8>)
 800393c:	f7fc fe06 	bl	800054c <copyText>
 8003940:	4603      	mov	r3, r0
 8003942:	4a9d      	ldr	r2, [pc, #628]	@ (8003bb8 <loadMenuTexts+0x2fc>)
 8003944:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8003946:	489d      	ldr	r0, [pc, #628]	@ (8003bbc <loadMenuTexts+0x300>)
 8003948:	f7fc fe00 	bl	800054c <copyText>
 800394c:	4603      	mov	r3, r0
 800394e:	4a9c      	ldr	r2, [pc, #624]	@ (8003bc0 <loadMenuTexts+0x304>)
 8003950:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8003952:	489c      	ldr	r0, [pc, #624]	@ (8003bc4 <loadMenuTexts+0x308>)
 8003954:	f7fc fdfa 	bl	800054c <copyText>
 8003958:	4603      	mov	r3, r0
 800395a:	4a9b      	ldr	r2, [pc, #620]	@ (8003bc8 <loadMenuTexts+0x30c>)
 800395c:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 800395e:	489b      	ldr	r0, [pc, #620]	@ (8003bcc <loadMenuTexts+0x310>)
 8003960:	f7fc fdf4 	bl	800054c <copyText>
 8003964:	4603      	mov	r3, r0
 8003966:	4a9a      	ldr	r2, [pc, #616]	@ (8003bd0 <loadMenuTexts+0x314>)
 8003968:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 800396a:	489a      	ldr	r0, [pc, #616]	@ (8003bd4 <loadMenuTexts+0x318>)
 800396c:	f7fc fdee 	bl	800054c <copyText>
 8003970:	4603      	mov	r3, r0
 8003972:	4a99      	ldr	r2, [pc, #612]	@ (8003bd8 <loadMenuTexts+0x31c>)
 8003974:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8003976:	4899      	ldr	r0, [pc, #612]	@ (8003bdc <loadMenuTexts+0x320>)
 8003978:	f7fc fde8 	bl	800054c <copyText>
 800397c:	4603      	mov	r3, r0
 800397e:	4a98      	ldr	r2, [pc, #608]	@ (8003be0 <loadMenuTexts+0x324>)
 8003980:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8003982:	4898      	ldr	r0, [pc, #608]	@ (8003be4 <loadMenuTexts+0x328>)
 8003984:	f7fc fde2 	bl	800054c <copyText>
 8003988:	4603      	mov	r3, r0
 800398a:	4a97      	ldr	r2, [pc, #604]	@ (8003be8 <loadMenuTexts+0x32c>)
 800398c:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 800398e:	4897      	ldr	r0, [pc, #604]	@ (8003bec <loadMenuTexts+0x330>)
 8003990:	f7fc fddc 	bl	800054c <copyText>
 8003994:	4603      	mov	r3, r0
 8003996:	4a96      	ldr	r2, [pc, #600]	@ (8003bf0 <loadMenuTexts+0x334>)
 8003998:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 800399a:	4896      	ldr	r0, [pc, #600]	@ (8003bf4 <loadMenuTexts+0x338>)
 800399c:	f7fc fdd6 	bl	800054c <copyText>
 80039a0:	4603      	mov	r3, r0
 80039a2:	4a95      	ldr	r2, [pc, #596]	@ (8003bf8 <loadMenuTexts+0x33c>)
 80039a4:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 80039a6:	4895      	ldr	r0, [pc, #596]	@ (8003bfc <loadMenuTexts+0x340>)
 80039a8:	f7fc fdd0 	bl	800054c <copyText>
 80039ac:	4603      	mov	r3, r0
 80039ae:	4a94      	ldr	r2, [pc, #592]	@ (8003c00 <loadMenuTexts+0x344>)
 80039b0:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 80039b2:	4894      	ldr	r0, [pc, #592]	@ (8003c04 <loadMenuTexts+0x348>)
 80039b4:	f7fc fdca 	bl	800054c <copyText>
 80039b8:	4603      	mov	r3, r0
 80039ba:	4a93      	ldr	r2, [pc, #588]	@ (8003c08 <loadMenuTexts+0x34c>)
 80039bc:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 80039be:	4893      	ldr	r0, [pc, #588]	@ (8003c0c <loadMenuTexts+0x350>)
 80039c0:	f7fc fdc4 	bl	800054c <copyText>
 80039c4:	4603      	mov	r3, r0
 80039c6:	4a92      	ldr	r2, [pc, #584]	@ (8003c10 <loadMenuTexts+0x354>)
 80039c8:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 80039ca:	4892      	ldr	r0, [pc, #584]	@ (8003c14 <loadMenuTexts+0x358>)
 80039cc:	f7fc fdbe 	bl	800054c <copyText>
 80039d0:	4603      	mov	r3, r0
 80039d2:	4a91      	ldr	r2, [pc, #580]	@ (8003c18 <loadMenuTexts+0x35c>)
 80039d4:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 80039d6:	4891      	ldr	r0, [pc, #580]	@ (8003c1c <loadMenuTexts+0x360>)
 80039d8:	f7fc fdb8 	bl	800054c <copyText>
 80039dc:	4603      	mov	r3, r0
 80039de:	4a90      	ldr	r2, [pc, #576]	@ (8003c20 <loadMenuTexts+0x364>)
 80039e0:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 80039e2:	4890      	ldr	r0, [pc, #576]	@ (8003c24 <loadMenuTexts+0x368>)
 80039e4:	f7fc fdb2 	bl	800054c <copyText>
 80039e8:	4603      	mov	r3, r0
 80039ea:	4a8f      	ldr	r2, [pc, #572]	@ (8003c28 <loadMenuTexts+0x36c>)
 80039ec:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 80039ee:	488f      	ldr	r0, [pc, #572]	@ (8003c2c <loadMenuTexts+0x370>)
 80039f0:	f7fc fdac 	bl	800054c <copyText>
 80039f4:	4603      	mov	r3, r0
 80039f6:	4a8e      	ldr	r2, [pc, #568]	@ (8003c30 <loadMenuTexts+0x374>)
 80039f8:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 80039fa:	488e      	ldr	r0, [pc, #568]	@ (8003c34 <loadMenuTexts+0x378>)
 80039fc:	f7fc fda6 	bl	800054c <copyText>
 8003a00:	4603      	mov	r3, r0
 8003a02:	4a8d      	ldr	r2, [pc, #564]	@ (8003c38 <loadMenuTexts+0x37c>)
 8003a04:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8003a06:	488d      	ldr	r0, [pc, #564]	@ (8003c3c <loadMenuTexts+0x380>)
 8003a08:	f7fc fda0 	bl	800054c <copyText>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	4a8c      	ldr	r2, [pc, #560]	@ (8003c40 <loadMenuTexts+0x384>)
 8003a10:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8003a12:	488c      	ldr	r0, [pc, #560]	@ (8003c44 <loadMenuTexts+0x388>)
 8003a14:	f7fc fd9a 	bl	800054c <copyText>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4a8b      	ldr	r2, [pc, #556]	@ (8003c48 <loadMenuTexts+0x38c>)
 8003a1c:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8003a1e:	488b      	ldr	r0, [pc, #556]	@ (8003c4c <loadMenuTexts+0x390>)
 8003a20:	f7fc fd94 	bl	800054c <copyText>
 8003a24:	4603      	mov	r3, r0
 8003a26:	4a8a      	ldr	r2, [pc, #552]	@ (8003c50 <loadMenuTexts+0x394>)
 8003a28:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8003a2a:	488a      	ldr	r0, [pc, #552]	@ (8003c54 <loadMenuTexts+0x398>)
 8003a2c:	f7fc fd8e 	bl	800054c <copyText>
 8003a30:	4603      	mov	r3, r0
 8003a32:	4a89      	ldr	r2, [pc, #548]	@ (8003c58 <loadMenuTexts+0x39c>)
 8003a34:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8003a36:	4889      	ldr	r0, [pc, #548]	@ (8003c5c <loadMenuTexts+0x3a0>)
 8003a38:	f7fc fd88 	bl	800054c <copyText>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	4a88      	ldr	r2, [pc, #544]	@ (8003c60 <loadMenuTexts+0x3a4>)
 8003a40:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8003a42:	4888      	ldr	r0, [pc, #544]	@ (8003c64 <loadMenuTexts+0x3a8>)
 8003a44:	f7fc fd82 	bl	800054c <copyText>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	4a87      	ldr	r2, [pc, #540]	@ (8003c68 <loadMenuTexts+0x3ac>)
 8003a4c:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8003a4e:	4887      	ldr	r0, [pc, #540]	@ (8003c6c <loadMenuTexts+0x3b0>)
 8003a50:	f7fc fd7c 	bl	800054c <copyText>
 8003a54:	4603      	mov	r3, r0
 8003a56:	4a86      	ldr	r2, [pc, #536]	@ (8003c70 <loadMenuTexts+0x3b4>)
 8003a58:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8003a5a:	4886      	ldr	r0, [pc, #536]	@ (8003c74 <loadMenuTexts+0x3b8>)
 8003a5c:	f7fc fd76 	bl	800054c <copyText>
 8003a60:	4603      	mov	r3, r0
 8003a62:	4a85      	ldr	r2, [pc, #532]	@ (8003c78 <loadMenuTexts+0x3bc>)
 8003a64:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8003a66:	4885      	ldr	r0, [pc, #532]	@ (8003c7c <loadMenuTexts+0x3c0>)
 8003a68:	f7fc fd70 	bl	800054c <copyText>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	4a84      	ldr	r2, [pc, #528]	@ (8003c80 <loadMenuTexts+0x3c4>)
 8003a70:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8003a72:	4884      	ldr	r0, [pc, #528]	@ (8003c84 <loadMenuTexts+0x3c8>)
 8003a74:	f7fc fd6a 	bl	800054c <copyText>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	4a83      	ldr	r2, [pc, #524]	@ (8003c88 <loadMenuTexts+0x3cc>)
 8003a7c:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8003a7e:	4883      	ldr	r0, [pc, #524]	@ (8003c8c <loadMenuTexts+0x3d0>)
 8003a80:	f7fc fd64 	bl	800054c <copyText>
 8003a84:	4603      	mov	r3, r0
 8003a86:	4a82      	ldr	r2, [pc, #520]	@ (8003c90 <loadMenuTexts+0x3d4>)
 8003a88:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8003a8a:	4882      	ldr	r0, [pc, #520]	@ (8003c94 <loadMenuTexts+0x3d8>)
 8003a8c:	f7fc fd5e 	bl	800054c <copyText>
 8003a90:	4603      	mov	r3, r0
 8003a92:	4a81      	ldr	r2, [pc, #516]	@ (8003c98 <loadMenuTexts+0x3dc>)
 8003a94:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8003a96:	4881      	ldr	r0, [pc, #516]	@ (8003c9c <loadMenuTexts+0x3e0>)
 8003a98:	f7fc fd58 	bl	800054c <copyText>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	4a80      	ldr	r2, [pc, #512]	@ (8003ca0 <loadMenuTexts+0x3e4>)
 8003aa0:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8003aa2:	4880      	ldr	r0, [pc, #512]	@ (8003ca4 <loadMenuTexts+0x3e8>)
 8003aa4:	f7fc fd52 	bl	800054c <copyText>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	4a7f      	ldr	r2, [pc, #508]	@ (8003ca8 <loadMenuTexts+0x3ec>)
 8003aac:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8003aae:	487f      	ldr	r0, [pc, #508]	@ (8003cac <loadMenuTexts+0x3f0>)
 8003ab0:	f7fc fd4c 	bl	800054c <copyText>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	4a7e      	ldr	r2, [pc, #504]	@ (8003cb0 <loadMenuTexts+0x3f4>)
 8003ab8:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8003aba:	487e      	ldr	r0, [pc, #504]	@ (8003cb4 <loadMenuTexts+0x3f8>)
 8003abc:	f7fc fd46 	bl	800054c <copyText>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4a7d      	ldr	r2, [pc, #500]	@ (8003cb8 <loadMenuTexts+0x3fc>)
 8003ac4:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8003ac6:	487d      	ldr	r0, [pc, #500]	@ (8003cbc <loadMenuTexts+0x400>)
 8003ac8:	f7fc fd40 	bl	800054c <copyText>
 8003acc:	4603      	mov	r3, r0
 8003ace:	4a7c      	ldr	r2, [pc, #496]	@ (8003cc0 <loadMenuTexts+0x404>)
 8003ad0:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8003ad2:	487c      	ldr	r0, [pc, #496]	@ (8003cc4 <loadMenuTexts+0x408>)
 8003ad4:	f7fc fd3a 	bl	800054c <copyText>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	4a7b      	ldr	r2, [pc, #492]	@ (8003cc8 <loadMenuTexts+0x40c>)
 8003adc:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8003ade:	487b      	ldr	r0, [pc, #492]	@ (8003ccc <loadMenuTexts+0x410>)
 8003ae0:	f7fc fd34 	bl	800054c <copyText>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	4a7a      	ldr	r2, [pc, #488]	@ (8003cd0 <loadMenuTexts+0x414>)
 8003ae8:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8003aea:	487a      	ldr	r0, [pc, #488]	@ (8003cd4 <loadMenuTexts+0x418>)
 8003aec:	f7fc fd2e 	bl	800054c <copyText>
 8003af0:	4603      	mov	r3, r0
 8003af2:	4a79      	ldr	r2, [pc, #484]	@ (8003cd8 <loadMenuTexts+0x41c>)
 8003af4:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8003af6:	4879      	ldr	r0, [pc, #484]	@ (8003cdc <loadMenuTexts+0x420>)
 8003af8:	f7fc fd28 	bl	800054c <copyText>
 8003afc:	4603      	mov	r3, r0
 8003afe:	4a78      	ldr	r2, [pc, #480]	@ (8003ce0 <loadMenuTexts+0x424>)
 8003b00:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8003b02:	4878      	ldr	r0, [pc, #480]	@ (8003ce4 <loadMenuTexts+0x428>)
 8003b04:	f7fc fd22 	bl	800054c <copyText>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4a77      	ldr	r2, [pc, #476]	@ (8003ce8 <loadMenuTexts+0x42c>)
 8003b0c:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8003b0e:	4877      	ldr	r0, [pc, #476]	@ (8003cec <loadMenuTexts+0x430>)
 8003b10:	f7fc fd1c 	bl	800054c <copyText>
 8003b14:	4603      	mov	r3, r0
 8003b16:	4a76      	ldr	r2, [pc, #472]	@ (8003cf0 <loadMenuTexts+0x434>)
 8003b18:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8003b1a:	4876      	ldr	r0, [pc, #472]	@ (8003cf4 <loadMenuTexts+0x438>)
 8003b1c:	f7fc fd16 	bl	800054c <copyText>
 8003b20:	4603      	mov	r3, r0
 8003b22:	4a75      	ldr	r2, [pc, #468]	@ (8003cf8 <loadMenuTexts+0x43c>)
 8003b24:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8003b26:	4875      	ldr	r0, [pc, #468]	@ (8003cfc <loadMenuTexts+0x440>)
 8003b28:	f7fc fd10 	bl	800054c <copyText>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	4a74      	ldr	r2, [pc, #464]	@ (8003d00 <loadMenuTexts+0x444>)
 8003b30:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8003b32:	4874      	ldr	r0, [pc, #464]	@ (8003d04 <loadMenuTexts+0x448>)
 8003b34:	f7fc fd0a 	bl	800054c <copyText>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	4a73      	ldr	r2, [pc, #460]	@ (8003d08 <loadMenuTexts+0x44c>)
 8003b3c:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8003b3e:	4873      	ldr	r0, [pc, #460]	@ (8003d0c <loadMenuTexts+0x450>)
 8003b40:	f7fc fd04 	bl	800054c <copyText>
 8003b44:	4603      	mov	r3, r0
 8003b46:	4a72      	ldr	r2, [pc, #456]	@ (8003d10 <loadMenuTexts+0x454>)
 8003b48:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8003b4a:	4872      	ldr	r0, [pc, #456]	@ (8003d14 <loadMenuTexts+0x458>)
 8003b4c:	f7fc fcfe 	bl	800054c <copyText>
 8003b50:	4603      	mov	r3, r0
 8003b52:	4a71      	ldr	r2, [pc, #452]	@ (8003d18 <loadMenuTexts+0x45c>)
 8003b54:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8003b56:	4871      	ldr	r0, [pc, #452]	@ (8003d1c <loadMenuTexts+0x460>)
 8003b58:	f7fc fcf8 	bl	800054c <copyText>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4a70      	ldr	r2, [pc, #448]	@ (8003d20 <loadMenuTexts+0x464>)
 8003b60:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8003b62:	4870      	ldr	r0, [pc, #448]	@ (8003d24 <loadMenuTexts+0x468>)
 8003b64:	f7fc fcf2 	bl	800054c <copyText>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	e0dd      	b.n	8003d28 <loadMenuTexts+0x46c>
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	20000cec 	.word	0x20000cec
 8003b74:	20000010 	.word	0x20000010
 8003b78:	20000cf0 	.word	0x20000cf0
 8003b7c:	20000020 	.word	0x20000020
 8003b80:	20000d48 	.word	0x20000d48
 8003b84:	20000030 	.word	0x20000030
 8003b88:	20000d78 	.word	0x20000d78
 8003b8c:	20000040 	.word	0x20000040
 8003b90:	20000d80 	.word	0x20000d80
 8003b94:	20000050 	.word	0x20000050
 8003b98:	20000df8 	.word	0x20000df8
 8003b9c:	20000060 	.word	0x20000060
 8003ba0:	20000dfc 	.word	0x20000dfc
 8003ba4:	20000070 	.word	0x20000070
 8003ba8:	20000cf4 	.word	0x20000cf4
 8003bac:	20000080 	.word	0x20000080
 8003bb0:	20000cf8 	.word	0x20000cf8
 8003bb4:	20000090 	.word	0x20000090
 8003bb8:	20000cfc 	.word	0x20000cfc
 8003bbc:	200000a0 	.word	0x200000a0
 8003bc0:	20000d00 	.word	0x20000d00
 8003bc4:	200000b0 	.word	0x200000b0
 8003bc8:	20000d04 	.word	0x20000d04
 8003bcc:	200000c0 	.word	0x200000c0
 8003bd0:	20000d08 	.word	0x20000d08
 8003bd4:	200000d0 	.word	0x200000d0
 8003bd8:	20000d0c 	.word	0x20000d0c
 8003bdc:	200000e0 	.word	0x200000e0
 8003be0:	20000d10 	.word	0x20000d10
 8003be4:	200000f0 	.word	0x200000f0
 8003be8:	20000d14 	.word	0x20000d14
 8003bec:	20000100 	.word	0x20000100
 8003bf0:	20000d18 	.word	0x20000d18
 8003bf4:	20000110 	.word	0x20000110
 8003bf8:	20000d1c 	.word	0x20000d1c
 8003bfc:	20000120 	.word	0x20000120
 8003c00:	20000d20 	.word	0x20000d20
 8003c04:	20000130 	.word	0x20000130
 8003c08:	20000d24 	.word	0x20000d24
 8003c0c:	20000140 	.word	0x20000140
 8003c10:	20000d28 	.word	0x20000d28
 8003c14:	20000150 	.word	0x20000150
 8003c18:	20000d2c 	.word	0x20000d2c
 8003c1c:	20000160 	.word	0x20000160
 8003c20:	20000d30 	.word	0x20000d30
 8003c24:	20000170 	.word	0x20000170
 8003c28:	20000d34 	.word	0x20000d34
 8003c2c:	20000180 	.word	0x20000180
 8003c30:	20000d38 	.word	0x20000d38
 8003c34:	20000190 	.word	0x20000190
 8003c38:	20000d3c 	.word	0x20000d3c
 8003c3c:	200001a0 	.word	0x200001a0
 8003c40:	20000d40 	.word	0x20000d40
 8003c44:	200001b0 	.word	0x200001b0
 8003c48:	20000d44 	.word	0x20000d44
 8003c4c:	200001c0 	.word	0x200001c0
 8003c50:	20000d4c 	.word	0x20000d4c
 8003c54:	200001d0 	.word	0x200001d0
 8003c58:	20000d50 	.word	0x20000d50
 8003c5c:	200001e0 	.word	0x200001e0
 8003c60:	20000d54 	.word	0x20000d54
 8003c64:	200001f0 	.word	0x200001f0
 8003c68:	20000d58 	.word	0x20000d58
 8003c6c:	20000200 	.word	0x20000200
 8003c70:	20000d5c 	.word	0x20000d5c
 8003c74:	20000210 	.word	0x20000210
 8003c78:	20000d60 	.word	0x20000d60
 8003c7c:	20000220 	.word	0x20000220
 8003c80:	20000d64 	.word	0x20000d64
 8003c84:	20000230 	.word	0x20000230
 8003c88:	20000d68 	.word	0x20000d68
 8003c8c:	20000240 	.word	0x20000240
 8003c90:	20000d6c 	.word	0x20000d6c
 8003c94:	20000250 	.word	0x20000250
 8003c98:	20000d70 	.word	0x20000d70
 8003c9c:	20000260 	.word	0x20000260
 8003ca0:	20000d74 	.word	0x20000d74
 8003ca4:	20000270 	.word	0x20000270
 8003ca8:	20000d7c 	.word	0x20000d7c
 8003cac:	20000280 	.word	0x20000280
 8003cb0:	20000d84 	.word	0x20000d84
 8003cb4:	20000290 	.word	0x20000290
 8003cb8:	20000d88 	.word	0x20000d88
 8003cbc:	200002a0 	.word	0x200002a0
 8003cc0:	20000d8c 	.word	0x20000d8c
 8003cc4:	200002b0 	.word	0x200002b0
 8003cc8:	20000d90 	.word	0x20000d90
 8003ccc:	200002c0 	.word	0x200002c0
 8003cd0:	20000d94 	.word	0x20000d94
 8003cd4:	200002d0 	.word	0x200002d0
 8003cd8:	20000d98 	.word	0x20000d98
 8003cdc:	200002e0 	.word	0x200002e0
 8003ce0:	20000d9c 	.word	0x20000d9c
 8003ce4:	200002f0 	.word	0x200002f0
 8003ce8:	20000da0 	.word	0x20000da0
 8003cec:	20000300 	.word	0x20000300
 8003cf0:	20000da4 	.word	0x20000da4
 8003cf4:	20000310 	.word	0x20000310
 8003cf8:	20000da8 	.word	0x20000da8
 8003cfc:	20000320 	.word	0x20000320
 8003d00:	20000dac 	.word	0x20000dac
 8003d04:	20000330 	.word	0x20000330
 8003d08:	20000db0 	.word	0x20000db0
 8003d0c:	20000340 	.word	0x20000340
 8003d10:	20000db4 	.word	0x20000db4
 8003d14:	20000350 	.word	0x20000350
 8003d18:	20000db8 	.word	0x20000db8
 8003d1c:	20000360 	.word	0x20000360
 8003d20:	20000dbc 	.word	0x20000dbc
 8003d24:	20000370 	.word	0x20000370
 8003d28:	4a3d      	ldr	r2, [pc, #244]	@ (8003e20 <loadMenuTexts+0x564>)
 8003d2a:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8003d2c:	483d      	ldr	r0, [pc, #244]	@ (8003e24 <loadMenuTexts+0x568>)
 8003d2e:	f7fc fc0d 	bl	800054c <copyText>
 8003d32:	4603      	mov	r3, r0
 8003d34:	4a3c      	ldr	r2, [pc, #240]	@ (8003e28 <loadMenuTexts+0x56c>)
 8003d36:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8003d38:	483c      	ldr	r0, [pc, #240]	@ (8003e2c <loadMenuTexts+0x570>)
 8003d3a:	f7fc fc07 	bl	800054c <copyText>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4a3b      	ldr	r2, [pc, #236]	@ (8003e30 <loadMenuTexts+0x574>)
 8003d42:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8003d44:	483b      	ldr	r0, [pc, #236]	@ (8003e34 <loadMenuTexts+0x578>)
 8003d46:	f7fc fc01 	bl	800054c <copyText>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4a3a      	ldr	r2, [pc, #232]	@ (8003e38 <loadMenuTexts+0x57c>)
 8003d4e:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8003d50:	483a      	ldr	r0, [pc, #232]	@ (8003e3c <loadMenuTexts+0x580>)
 8003d52:	f7fc fbfb 	bl	800054c <copyText>
 8003d56:	4603      	mov	r3, r0
 8003d58:	4a39      	ldr	r2, [pc, #228]	@ (8003e40 <loadMenuTexts+0x584>)
 8003d5a:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8003d5c:	4839      	ldr	r0, [pc, #228]	@ (8003e44 <loadMenuTexts+0x588>)
 8003d5e:	f7fc fbf5 	bl	800054c <copyText>
 8003d62:	4603      	mov	r3, r0
 8003d64:	4a38      	ldr	r2, [pc, #224]	@ (8003e48 <loadMenuTexts+0x58c>)
 8003d66:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8003d68:	4838      	ldr	r0, [pc, #224]	@ (8003e4c <loadMenuTexts+0x590>)
 8003d6a:	f7fc fbef 	bl	800054c <copyText>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4a37      	ldr	r2, [pc, #220]	@ (8003e50 <loadMenuTexts+0x594>)
 8003d72:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8003d74:	4837      	ldr	r0, [pc, #220]	@ (8003e54 <loadMenuTexts+0x598>)
 8003d76:	f7fc fbe9 	bl	800054c <copyText>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4a36      	ldr	r2, [pc, #216]	@ (8003e58 <loadMenuTexts+0x59c>)
 8003d7e:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8003d80:	4836      	ldr	r0, [pc, #216]	@ (8003e5c <loadMenuTexts+0x5a0>)
 8003d82:	f7fc fbe3 	bl	800054c <copyText>
 8003d86:	4603      	mov	r3, r0
 8003d88:	4a35      	ldr	r2, [pc, #212]	@ (8003e60 <loadMenuTexts+0x5a4>)
 8003d8a:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8003d8c:	4835      	ldr	r0, [pc, #212]	@ (8003e64 <loadMenuTexts+0x5a8>)
 8003d8e:	f7fc fbdd 	bl	800054c <copyText>
 8003d92:	4603      	mov	r3, r0
 8003d94:	4a34      	ldr	r2, [pc, #208]	@ (8003e68 <loadMenuTexts+0x5ac>)
 8003d96:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8003d98:	4834      	ldr	r0, [pc, #208]	@ (8003e6c <loadMenuTexts+0x5b0>)
 8003d9a:	f7fc fbd7 	bl	800054c <copyText>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	4a33      	ldr	r2, [pc, #204]	@ (8003e70 <loadMenuTexts+0x5b4>)
 8003da2:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8003da4:	4833      	ldr	r0, [pc, #204]	@ (8003e74 <loadMenuTexts+0x5b8>)
 8003da6:	f7fc fbd1 	bl	800054c <copyText>
 8003daa:	4603      	mov	r3, r0
 8003dac:	4a32      	ldr	r2, [pc, #200]	@ (8003e78 <loadMenuTexts+0x5bc>)
 8003dae:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8003db0:	4832      	ldr	r0, [pc, #200]	@ (8003e7c <loadMenuTexts+0x5c0>)
 8003db2:	f7fc fbcb 	bl	800054c <copyText>
 8003db6:	4603      	mov	r3, r0
 8003db8:	4a31      	ldr	r2, [pc, #196]	@ (8003e80 <loadMenuTexts+0x5c4>)
 8003dba:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8003dbc:	4831      	ldr	r0, [pc, #196]	@ (8003e84 <loadMenuTexts+0x5c8>)
 8003dbe:	f7fc fbc5 	bl	800054c <copyText>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	4a30      	ldr	r2, [pc, #192]	@ (8003e88 <loadMenuTexts+0x5cc>)
 8003dc6:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8003dc8:	4830      	ldr	r0, [pc, #192]	@ (8003e8c <loadMenuTexts+0x5d0>)
 8003dca:	f7fc fbbf 	bl	800054c <copyText>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4a2f      	ldr	r2, [pc, #188]	@ (8003e90 <loadMenuTexts+0x5d4>)
 8003dd2:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8003dd4:	482f      	ldr	r0, [pc, #188]	@ (8003e94 <loadMenuTexts+0x5d8>)
 8003dd6:	f7fc fbb9 	bl	800054c <copyText>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	4a2e      	ldr	r2, [pc, #184]	@ (8003e98 <loadMenuTexts+0x5dc>)
 8003dde:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8003de0:	482e      	ldr	r0, [pc, #184]	@ (8003e9c <loadMenuTexts+0x5e0>)
 8003de2:	f7fc fbb3 	bl	800054c <copyText>
 8003de6:	4603      	mov	r3, r0
 8003de8:	4a2d      	ldr	r2, [pc, #180]	@ (8003ea0 <loadMenuTexts+0x5e4>)
 8003dea:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8003dec:	482d      	ldr	r0, [pc, #180]	@ (8003ea4 <loadMenuTexts+0x5e8>)
 8003dee:	f7fc fbad 	bl	800054c <copyText>
 8003df2:	4603      	mov	r3, r0
 8003df4:	4a2c      	ldr	r2, [pc, #176]	@ (8003ea8 <loadMenuTexts+0x5ec>)
 8003df6:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8003df8:	482c      	ldr	r0, [pc, #176]	@ (8003eac <loadMenuTexts+0x5f0>)
 8003dfa:	f7fc fba7 	bl	800054c <copyText>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	4a2b      	ldr	r2, [pc, #172]	@ (8003eb0 <loadMenuTexts+0x5f4>)
 8003e02:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 8003e04:	482b      	ldr	r0, [pc, #172]	@ (8003eb4 <loadMenuTexts+0x5f8>)
 8003e06:	f7fc fba1 	bl	800054c <copyText>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8003eb8 <loadMenuTexts+0x5fc>)
 8003e0e:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8003e10:	482a      	ldr	r0, [pc, #168]	@ (8003ebc <loadMenuTexts+0x600>)
 8003e12:	f7fc fb9b 	bl	800054c <copyText>
 8003e16:	4603      	mov	r3, r0
 8003e18:	4a29      	ldr	r2, [pc, #164]	@ (8003ec0 <loadMenuTexts+0x604>)
 8003e1a:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8003e1c:	e2d3      	b.n	80043c6 <loadMenuTexts+0xb0a>
 8003e1e:	bf00      	nop
 8003e20:	20000dc0 	.word	0x20000dc0
 8003e24:	20000380 	.word	0x20000380
 8003e28:	20000dc4 	.word	0x20000dc4
 8003e2c:	20000390 	.word	0x20000390
 8003e30:	20000dc8 	.word	0x20000dc8
 8003e34:	200003a0 	.word	0x200003a0
 8003e38:	20000dcc 	.word	0x20000dcc
 8003e3c:	200003b0 	.word	0x200003b0
 8003e40:	20000dd0 	.word	0x20000dd0
 8003e44:	200003c0 	.word	0x200003c0
 8003e48:	20000dd4 	.word	0x20000dd4
 8003e4c:	200003d0 	.word	0x200003d0
 8003e50:	20000dd8 	.word	0x20000dd8
 8003e54:	200003e0 	.word	0x200003e0
 8003e58:	20000ddc 	.word	0x20000ddc
 8003e5c:	200003f0 	.word	0x200003f0
 8003e60:	20000de0 	.word	0x20000de0
 8003e64:	20000400 	.word	0x20000400
 8003e68:	20000de4 	.word	0x20000de4
 8003e6c:	20000410 	.word	0x20000410
 8003e70:	20000de8 	.word	0x20000de8
 8003e74:	20000420 	.word	0x20000420
 8003e78:	20000dec 	.word	0x20000dec
 8003e7c:	20000430 	.word	0x20000430
 8003e80:	20000df0 	.word	0x20000df0
 8003e84:	20000440 	.word	0x20000440
 8003e88:	20000df4 	.word	0x20000df4
 8003e8c:	20000450 	.word	0x20000450
 8003e90:	20000e00 	.word	0x20000e00
 8003e94:	20000460 	.word	0x20000460
 8003e98:	20000e04 	.word	0x20000e04
 8003e9c:	20000470 	.word	0x20000470
 8003ea0:	20000e08 	.word	0x20000e08
 8003ea4:	20000480 	.word	0x20000480
 8003ea8:	20000e0c 	.word	0x20000e0c
 8003eac:	20000490 	.word	0x20000490
 8003eb0:	20000e10 	.word	0x20000e10
 8003eb4:	200004a0 	.word	0x200004a0
 8003eb8:	20000e14 	.word	0x20000e14
 8003ebc:	200004b0 	.word	0x200004b0
 8003ec0:	20000e18 	.word	0x20000e18
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8003ec4:	48a9      	ldr	r0, [pc, #676]	@ (800416c <loadMenuTexts+0x8b0>)
 8003ec6:	f7fc fb41 	bl	800054c <copyText>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	4aa8      	ldr	r2, [pc, #672]	@ (8004170 <loadMenuTexts+0x8b4>)
 8003ece:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8003ed0:	48a8      	ldr	r0, [pc, #672]	@ (8004174 <loadMenuTexts+0x8b8>)
 8003ed2:	f7fc fb3b 	bl	800054c <copyText>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4aa7      	ldr	r2, [pc, #668]	@ (8004178 <loadMenuTexts+0x8bc>)
 8003eda:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8003edc:	48a7      	ldr	r0, [pc, #668]	@ (800417c <loadMenuTexts+0x8c0>)
 8003ede:	f7fc fb35 	bl	800054c <copyText>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	4aa6      	ldr	r2, [pc, #664]	@ (8004180 <loadMenuTexts+0x8c4>)
 8003ee6:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8003ee8:	48a6      	ldr	r0, [pc, #664]	@ (8004184 <loadMenuTexts+0x8c8>)
 8003eea:	f7fc fb2f 	bl	800054c <copyText>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4aa5      	ldr	r2, [pc, #660]	@ (8004188 <loadMenuTexts+0x8cc>)
 8003ef2:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8003ef4:	48a5      	ldr	r0, [pc, #660]	@ (800418c <loadMenuTexts+0x8d0>)
 8003ef6:	f7fc fb29 	bl	800054c <copyText>
 8003efa:	4603      	mov	r3, r0
 8003efc:	4aa4      	ldr	r2, [pc, #656]	@ (8004190 <loadMenuTexts+0x8d4>)
 8003efe:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8003f00:	48a4      	ldr	r0, [pc, #656]	@ (8004194 <loadMenuTexts+0x8d8>)
 8003f02:	f7fc fb23 	bl	800054c <copyText>
 8003f06:	4603      	mov	r3, r0
 8003f08:	4aa3      	ldr	r2, [pc, #652]	@ (8004198 <loadMenuTexts+0x8dc>)
 8003f0a:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8003f0c:	48a3      	ldr	r0, [pc, #652]	@ (800419c <loadMenuTexts+0x8e0>)
 8003f0e:	f7fc fb1d 	bl	800054c <copyText>
 8003f12:	4603      	mov	r3, r0
 8003f14:	4aa2      	ldr	r2, [pc, #648]	@ (80041a0 <loadMenuTexts+0x8e4>)
 8003f16:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8003f18:	48a2      	ldr	r0, [pc, #648]	@ (80041a4 <loadMenuTexts+0x8e8>)
 8003f1a:	f7fc fb17 	bl	800054c <copyText>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4aa1      	ldr	r2, [pc, #644]	@ (80041a8 <loadMenuTexts+0x8ec>)
 8003f22:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8003f24:	48a1      	ldr	r0, [pc, #644]	@ (80041ac <loadMenuTexts+0x8f0>)
 8003f26:	f7fc fb11 	bl	800054c <copyText>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	4aa0      	ldr	r2, [pc, #640]	@ (80041b0 <loadMenuTexts+0x8f4>)
 8003f2e:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8003f30:	48a0      	ldr	r0, [pc, #640]	@ (80041b4 <loadMenuTexts+0x8f8>)
 8003f32:	f7fc fb0b 	bl	800054c <copyText>
 8003f36:	4603      	mov	r3, r0
 8003f38:	4a9f      	ldr	r2, [pc, #636]	@ (80041b8 <loadMenuTexts+0x8fc>)
 8003f3a:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8003f3c:	489f      	ldr	r0, [pc, #636]	@ (80041bc <loadMenuTexts+0x900>)
 8003f3e:	f7fc fb05 	bl	800054c <copyText>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4a9e      	ldr	r2, [pc, #632]	@ (80041c0 <loadMenuTexts+0x904>)
 8003f46:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8003f48:	489e      	ldr	r0, [pc, #632]	@ (80041c4 <loadMenuTexts+0x908>)
 8003f4a:	f7fc faff 	bl	800054c <copyText>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	4a9d      	ldr	r2, [pc, #628]	@ (80041c8 <loadMenuTexts+0x90c>)
 8003f52:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8003f54:	489d      	ldr	r0, [pc, #628]	@ (80041cc <loadMenuTexts+0x910>)
 8003f56:	f7fc faf9 	bl	800054c <copyText>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4a9c      	ldr	r2, [pc, #624]	@ (80041d0 <loadMenuTexts+0x914>)
 8003f5e:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8003f60:	489c      	ldr	r0, [pc, #624]	@ (80041d4 <loadMenuTexts+0x918>)
 8003f62:	f7fc faf3 	bl	800054c <copyText>
 8003f66:	4603      	mov	r3, r0
 8003f68:	4a9b      	ldr	r2, [pc, #620]	@ (80041d8 <loadMenuTexts+0x91c>)
 8003f6a:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8003f6c:	489b      	ldr	r0, [pc, #620]	@ (80041dc <loadMenuTexts+0x920>)
 8003f6e:	f7fc faed 	bl	800054c <copyText>
 8003f72:	4603      	mov	r3, r0
 8003f74:	4a9a      	ldr	r2, [pc, #616]	@ (80041e0 <loadMenuTexts+0x924>)
 8003f76:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8003f78:	489a      	ldr	r0, [pc, #616]	@ (80041e4 <loadMenuTexts+0x928>)
 8003f7a:	f7fc fae7 	bl	800054c <copyText>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4a99      	ldr	r2, [pc, #612]	@ (80041e8 <loadMenuTexts+0x92c>)
 8003f82:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8003f84:	4899      	ldr	r0, [pc, #612]	@ (80041ec <loadMenuTexts+0x930>)
 8003f86:	f7fc fae1 	bl	800054c <copyText>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4a98      	ldr	r2, [pc, #608]	@ (80041f0 <loadMenuTexts+0x934>)
 8003f8e:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8003f90:	4898      	ldr	r0, [pc, #608]	@ (80041f4 <loadMenuTexts+0x938>)
 8003f92:	f7fc fadb 	bl	800054c <copyText>
 8003f96:	4603      	mov	r3, r0
 8003f98:	4a97      	ldr	r2, [pc, #604]	@ (80041f8 <loadMenuTexts+0x93c>)
 8003f9a:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8003f9c:	4897      	ldr	r0, [pc, #604]	@ (80041fc <loadMenuTexts+0x940>)
 8003f9e:	f7fc fad5 	bl	800054c <copyText>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4a96      	ldr	r2, [pc, #600]	@ (8004200 <loadMenuTexts+0x944>)
 8003fa6:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8003fa8:	4896      	ldr	r0, [pc, #600]	@ (8004204 <loadMenuTexts+0x948>)
 8003faa:	f7fc facf 	bl	800054c <copyText>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4a95      	ldr	r2, [pc, #596]	@ (8004208 <loadMenuTexts+0x94c>)
 8003fb2:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8003fb4:	4895      	ldr	r0, [pc, #596]	@ (800420c <loadMenuTexts+0x950>)
 8003fb6:	f7fc fac9 	bl	800054c <copyText>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	4a94      	ldr	r2, [pc, #592]	@ (8004210 <loadMenuTexts+0x954>)
 8003fbe:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8003fc0:	4894      	ldr	r0, [pc, #592]	@ (8004214 <loadMenuTexts+0x958>)
 8003fc2:	f7fc fac3 	bl	800054c <copyText>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4a93      	ldr	r2, [pc, #588]	@ (8004218 <loadMenuTexts+0x95c>)
 8003fca:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8003fcc:	4893      	ldr	r0, [pc, #588]	@ (800421c <loadMenuTexts+0x960>)
 8003fce:	f7fc fabd 	bl	800054c <copyText>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4a92      	ldr	r2, [pc, #584]	@ (8004220 <loadMenuTexts+0x964>)
 8003fd6:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8003fd8:	4892      	ldr	r0, [pc, #584]	@ (8004224 <loadMenuTexts+0x968>)
 8003fda:	f7fc fab7 	bl	800054c <copyText>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	4a91      	ldr	r2, [pc, #580]	@ (8004228 <loadMenuTexts+0x96c>)
 8003fe2:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8003fe4:	4891      	ldr	r0, [pc, #580]	@ (800422c <loadMenuTexts+0x970>)
 8003fe6:	f7fc fab1 	bl	800054c <copyText>
 8003fea:	4603      	mov	r3, r0
 8003fec:	4a90      	ldr	r2, [pc, #576]	@ (8004230 <loadMenuTexts+0x974>)
 8003fee:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8003ff0:	4890      	ldr	r0, [pc, #576]	@ (8004234 <loadMenuTexts+0x978>)
 8003ff2:	f7fc faab 	bl	800054c <copyText>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4a8f      	ldr	r2, [pc, #572]	@ (8004238 <loadMenuTexts+0x97c>)
 8003ffa:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8003ffc:	488f      	ldr	r0, [pc, #572]	@ (800423c <loadMenuTexts+0x980>)
 8003ffe:	f7fc faa5 	bl	800054c <copyText>
 8004002:	4603      	mov	r3, r0
 8004004:	4a8e      	ldr	r2, [pc, #568]	@ (8004240 <loadMenuTexts+0x984>)
 8004006:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8004008:	488e      	ldr	r0, [pc, #568]	@ (8004244 <loadMenuTexts+0x988>)
 800400a:	f7fc fa9f 	bl	800054c <copyText>
 800400e:	4603      	mov	r3, r0
 8004010:	4a8d      	ldr	r2, [pc, #564]	@ (8004248 <loadMenuTexts+0x98c>)
 8004012:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8004014:	488d      	ldr	r0, [pc, #564]	@ (800424c <loadMenuTexts+0x990>)
 8004016:	f7fc fa99 	bl	800054c <copyText>
 800401a:	4603      	mov	r3, r0
 800401c:	4a8c      	ldr	r2, [pc, #560]	@ (8004250 <loadMenuTexts+0x994>)
 800401e:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8004020:	488c      	ldr	r0, [pc, #560]	@ (8004254 <loadMenuTexts+0x998>)
 8004022:	f7fc fa93 	bl	800054c <copyText>
 8004026:	4603      	mov	r3, r0
 8004028:	4a8b      	ldr	r2, [pc, #556]	@ (8004258 <loadMenuTexts+0x99c>)
 800402a:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 800402c:	488b      	ldr	r0, [pc, #556]	@ (800425c <loadMenuTexts+0x9a0>)
 800402e:	f7fc fa8d 	bl	800054c <copyText>
 8004032:	4603      	mov	r3, r0
 8004034:	4a8a      	ldr	r2, [pc, #552]	@ (8004260 <loadMenuTexts+0x9a4>)
 8004036:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8004038:	488a      	ldr	r0, [pc, #552]	@ (8004264 <loadMenuTexts+0x9a8>)
 800403a:	f7fc fa87 	bl	800054c <copyText>
 800403e:	4603      	mov	r3, r0
 8004040:	4a89      	ldr	r2, [pc, #548]	@ (8004268 <loadMenuTexts+0x9ac>)
 8004042:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8004044:	4889      	ldr	r0, [pc, #548]	@ (800426c <loadMenuTexts+0x9b0>)
 8004046:	f7fc fa81 	bl	800054c <copyText>
 800404a:	4603      	mov	r3, r0
 800404c:	4a88      	ldr	r2, [pc, #544]	@ (8004270 <loadMenuTexts+0x9b4>)
 800404e:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8004050:	4888      	ldr	r0, [pc, #544]	@ (8004274 <loadMenuTexts+0x9b8>)
 8004052:	f7fc fa7b 	bl	800054c <copyText>
 8004056:	4603      	mov	r3, r0
 8004058:	4a87      	ldr	r2, [pc, #540]	@ (8004278 <loadMenuTexts+0x9bc>)
 800405a:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 800405c:	4887      	ldr	r0, [pc, #540]	@ (800427c <loadMenuTexts+0x9c0>)
 800405e:	f7fc fa75 	bl	800054c <copyText>
 8004062:	4603      	mov	r3, r0
 8004064:	4a86      	ldr	r2, [pc, #536]	@ (8004280 <loadMenuTexts+0x9c4>)
 8004066:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8004068:	4886      	ldr	r0, [pc, #536]	@ (8004284 <loadMenuTexts+0x9c8>)
 800406a:	f7fc fa6f 	bl	800054c <copyText>
 800406e:	4603      	mov	r3, r0
 8004070:	4a85      	ldr	r2, [pc, #532]	@ (8004288 <loadMenuTexts+0x9cc>)
 8004072:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8004074:	4885      	ldr	r0, [pc, #532]	@ (800428c <loadMenuTexts+0x9d0>)
 8004076:	f7fc fa69 	bl	800054c <copyText>
 800407a:	4603      	mov	r3, r0
 800407c:	4a84      	ldr	r2, [pc, #528]	@ (8004290 <loadMenuTexts+0x9d4>)
 800407e:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8004080:	4884      	ldr	r0, [pc, #528]	@ (8004294 <loadMenuTexts+0x9d8>)
 8004082:	f7fc fa63 	bl	800054c <copyText>
 8004086:	4603      	mov	r3, r0
 8004088:	4a83      	ldr	r2, [pc, #524]	@ (8004298 <loadMenuTexts+0x9dc>)
 800408a:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 800408c:	4883      	ldr	r0, [pc, #524]	@ (800429c <loadMenuTexts+0x9e0>)
 800408e:	f7fc fa5d 	bl	800054c <copyText>
 8004092:	4603      	mov	r3, r0
 8004094:	4a82      	ldr	r2, [pc, #520]	@ (80042a0 <loadMenuTexts+0x9e4>)
 8004096:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8004098:	4882      	ldr	r0, [pc, #520]	@ (80042a4 <loadMenuTexts+0x9e8>)
 800409a:	f7fc fa57 	bl	800054c <copyText>
 800409e:	4603      	mov	r3, r0
 80040a0:	4a81      	ldr	r2, [pc, #516]	@ (80042a8 <loadMenuTexts+0x9ec>)
 80040a2:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 80040a4:	4881      	ldr	r0, [pc, #516]	@ (80042ac <loadMenuTexts+0x9f0>)
 80040a6:	f7fc fa51 	bl	800054c <copyText>
 80040aa:	4603      	mov	r3, r0
 80040ac:	4a80      	ldr	r2, [pc, #512]	@ (80042b0 <loadMenuTexts+0x9f4>)
 80040ae:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 80040b0:	4880      	ldr	r0, [pc, #512]	@ (80042b4 <loadMenuTexts+0x9f8>)
 80040b2:	f7fc fa4b 	bl	800054c <copyText>
 80040b6:	4603      	mov	r3, r0
 80040b8:	4a7f      	ldr	r2, [pc, #508]	@ (80042b8 <loadMenuTexts+0x9fc>)
 80040ba:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 80040bc:	487f      	ldr	r0, [pc, #508]	@ (80042bc <loadMenuTexts+0xa00>)
 80040be:	f7fc fa45 	bl	800054c <copyText>
 80040c2:	4603      	mov	r3, r0
 80040c4:	4a7e      	ldr	r2, [pc, #504]	@ (80042c0 <loadMenuTexts+0xa04>)
 80040c6:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 80040c8:	487e      	ldr	r0, [pc, #504]	@ (80042c4 <loadMenuTexts+0xa08>)
 80040ca:	f7fc fa3f 	bl	800054c <copyText>
 80040ce:	4603      	mov	r3, r0
 80040d0:	4a7d      	ldr	r2, [pc, #500]	@ (80042c8 <loadMenuTexts+0xa0c>)
 80040d2:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 80040d4:	487d      	ldr	r0, [pc, #500]	@ (80042cc <loadMenuTexts+0xa10>)
 80040d6:	f7fc fa39 	bl	800054c <copyText>
 80040da:	4603      	mov	r3, r0
 80040dc:	4a7c      	ldr	r2, [pc, #496]	@ (80042d0 <loadMenuTexts+0xa14>)
 80040de:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 80040e0:	487c      	ldr	r0, [pc, #496]	@ (80042d4 <loadMenuTexts+0xa18>)
 80040e2:	f7fc fa33 	bl	800054c <copyText>
 80040e6:	4603      	mov	r3, r0
 80040e8:	4a7b      	ldr	r2, [pc, #492]	@ (80042d8 <loadMenuTexts+0xa1c>)
 80040ea:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 80040ec:	487b      	ldr	r0, [pc, #492]	@ (80042dc <loadMenuTexts+0xa20>)
 80040ee:	f7fc fa2d 	bl	800054c <copyText>
 80040f2:	4603      	mov	r3, r0
 80040f4:	4a7a      	ldr	r2, [pc, #488]	@ (80042e0 <loadMenuTexts+0xa24>)
 80040f6:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 80040f8:	487a      	ldr	r0, [pc, #488]	@ (80042e4 <loadMenuTexts+0xa28>)
 80040fa:	f7fc fa27 	bl	800054c <copyText>
 80040fe:	4603      	mov	r3, r0
 8004100:	4a79      	ldr	r2, [pc, #484]	@ (80042e8 <loadMenuTexts+0xa2c>)
 8004102:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8004104:	4879      	ldr	r0, [pc, #484]	@ (80042ec <loadMenuTexts+0xa30>)
 8004106:	f7fc fa21 	bl	800054c <copyText>
 800410a:	4603      	mov	r3, r0
 800410c:	4a78      	ldr	r2, [pc, #480]	@ (80042f0 <loadMenuTexts+0xa34>)
 800410e:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8004110:	4878      	ldr	r0, [pc, #480]	@ (80042f4 <loadMenuTexts+0xa38>)
 8004112:	f7fc fa1b 	bl	800054c <copyText>
 8004116:	4603      	mov	r3, r0
 8004118:	4a77      	ldr	r2, [pc, #476]	@ (80042f8 <loadMenuTexts+0xa3c>)
 800411a:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 800411c:	4877      	ldr	r0, [pc, #476]	@ (80042fc <loadMenuTexts+0xa40>)
 800411e:	f7fc fa15 	bl	800054c <copyText>
 8004122:	4603      	mov	r3, r0
 8004124:	4a76      	ldr	r2, [pc, #472]	@ (8004300 <loadMenuTexts+0xa44>)
 8004126:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8004128:	4876      	ldr	r0, [pc, #472]	@ (8004304 <loadMenuTexts+0xa48>)
 800412a:	f7fc fa0f 	bl	800054c <copyText>
 800412e:	4603      	mov	r3, r0
 8004130:	4a75      	ldr	r2, [pc, #468]	@ (8004308 <loadMenuTexts+0xa4c>)
 8004132:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8004134:	4875      	ldr	r0, [pc, #468]	@ (800430c <loadMenuTexts+0xa50>)
 8004136:	f7fc fa09 	bl	800054c <copyText>
 800413a:	4603      	mov	r3, r0
 800413c:	4a74      	ldr	r2, [pc, #464]	@ (8004310 <loadMenuTexts+0xa54>)
 800413e:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8004140:	4874      	ldr	r0, [pc, #464]	@ (8004314 <loadMenuTexts+0xa58>)
 8004142:	f7fc fa03 	bl	800054c <copyText>
 8004146:	4603      	mov	r3, r0
 8004148:	4a73      	ldr	r2, [pc, #460]	@ (8004318 <loadMenuTexts+0xa5c>)
 800414a:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 800414c:	4873      	ldr	r0, [pc, #460]	@ (800431c <loadMenuTexts+0xa60>)
 800414e:	f7fc f9fd 	bl	800054c <copyText>
 8004152:	4603      	mov	r3, r0
 8004154:	4a72      	ldr	r2, [pc, #456]	@ (8004320 <loadMenuTexts+0xa64>)
 8004156:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8004158:	4872      	ldr	r0, [pc, #456]	@ (8004324 <loadMenuTexts+0xa68>)
 800415a:	f7fc f9f7 	bl	800054c <copyText>
 800415e:	4603      	mov	r3, r0
 8004160:	4a71      	ldr	r2, [pc, #452]	@ (8004328 <loadMenuTexts+0xa6c>)
 8004162:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8004164:	4871      	ldr	r0, [pc, #452]	@ (800432c <loadMenuTexts+0xa70>)
 8004166:	f7fc f9f1 	bl	800054c <copyText>
 800416a:	e0e1      	b.n	8004330 <loadMenuTexts+0xa74>
 800416c:	200004c0 	.word	0x200004c0
 8004170:	20000cf4 	.word	0x20000cf4
 8004174:	200004d0 	.word	0x200004d0
 8004178:	20000cf8 	.word	0x20000cf8
 800417c:	200004e0 	.word	0x200004e0
 8004180:	20000cfc 	.word	0x20000cfc
 8004184:	200004f0 	.word	0x200004f0
 8004188:	20000d00 	.word	0x20000d00
 800418c:	20000500 	.word	0x20000500
 8004190:	20000d04 	.word	0x20000d04
 8004194:	20000510 	.word	0x20000510
 8004198:	20000d08 	.word	0x20000d08
 800419c:	20000520 	.word	0x20000520
 80041a0:	20000d0c 	.word	0x20000d0c
 80041a4:	20000530 	.word	0x20000530
 80041a8:	20000d10 	.word	0x20000d10
 80041ac:	20000540 	.word	0x20000540
 80041b0:	20000d14 	.word	0x20000d14
 80041b4:	20000550 	.word	0x20000550
 80041b8:	20000d18 	.word	0x20000d18
 80041bc:	20000560 	.word	0x20000560
 80041c0:	20000d1c 	.word	0x20000d1c
 80041c4:	20000570 	.word	0x20000570
 80041c8:	20000d20 	.word	0x20000d20
 80041cc:	20000580 	.word	0x20000580
 80041d0:	20000d24 	.word	0x20000d24
 80041d4:	20000590 	.word	0x20000590
 80041d8:	20000d28 	.word	0x20000d28
 80041dc:	200005a0 	.word	0x200005a0
 80041e0:	20000d2c 	.word	0x20000d2c
 80041e4:	200005b0 	.word	0x200005b0
 80041e8:	20000d30 	.word	0x20000d30
 80041ec:	200005c0 	.word	0x200005c0
 80041f0:	20000d34 	.word	0x20000d34
 80041f4:	200005d0 	.word	0x200005d0
 80041f8:	20000d38 	.word	0x20000d38
 80041fc:	200005e0 	.word	0x200005e0
 8004200:	20000d3c 	.word	0x20000d3c
 8004204:	200005f0 	.word	0x200005f0
 8004208:	20000d40 	.word	0x20000d40
 800420c:	20000600 	.word	0x20000600
 8004210:	20000d44 	.word	0x20000d44
 8004214:	20000610 	.word	0x20000610
 8004218:	20000d4c 	.word	0x20000d4c
 800421c:	20000620 	.word	0x20000620
 8004220:	20000d50 	.word	0x20000d50
 8004224:	20000630 	.word	0x20000630
 8004228:	20000d54 	.word	0x20000d54
 800422c:	20000640 	.word	0x20000640
 8004230:	20000d58 	.word	0x20000d58
 8004234:	20000650 	.word	0x20000650
 8004238:	20000d5c 	.word	0x20000d5c
 800423c:	20000660 	.word	0x20000660
 8004240:	20000d60 	.word	0x20000d60
 8004244:	20000670 	.word	0x20000670
 8004248:	20000d64 	.word	0x20000d64
 800424c:	20000680 	.word	0x20000680
 8004250:	20000d68 	.word	0x20000d68
 8004254:	20000690 	.word	0x20000690
 8004258:	20000d6c 	.word	0x20000d6c
 800425c:	200006a0 	.word	0x200006a0
 8004260:	20000d70 	.word	0x20000d70
 8004264:	200006b0 	.word	0x200006b0
 8004268:	20000d74 	.word	0x20000d74
 800426c:	200006c0 	.word	0x200006c0
 8004270:	20000d7c 	.word	0x20000d7c
 8004274:	200006d0 	.word	0x200006d0
 8004278:	20000d84 	.word	0x20000d84
 800427c:	200006e0 	.word	0x200006e0
 8004280:	20000d88 	.word	0x20000d88
 8004284:	200006f0 	.word	0x200006f0
 8004288:	20000d8c 	.word	0x20000d8c
 800428c:	20000700 	.word	0x20000700
 8004290:	20000d90 	.word	0x20000d90
 8004294:	20000710 	.word	0x20000710
 8004298:	20000d94 	.word	0x20000d94
 800429c:	20000720 	.word	0x20000720
 80042a0:	20000d98 	.word	0x20000d98
 80042a4:	20000730 	.word	0x20000730
 80042a8:	20000d9c 	.word	0x20000d9c
 80042ac:	20000740 	.word	0x20000740
 80042b0:	20000da0 	.word	0x20000da0
 80042b4:	20000750 	.word	0x20000750
 80042b8:	20000da4 	.word	0x20000da4
 80042bc:	20000760 	.word	0x20000760
 80042c0:	20000da8 	.word	0x20000da8
 80042c4:	20000770 	.word	0x20000770
 80042c8:	20000dac 	.word	0x20000dac
 80042cc:	20000780 	.word	0x20000780
 80042d0:	20000db0 	.word	0x20000db0
 80042d4:	20000790 	.word	0x20000790
 80042d8:	20000db4 	.word	0x20000db4
 80042dc:	200007a0 	.word	0x200007a0
 80042e0:	20000db8 	.word	0x20000db8
 80042e4:	200007b0 	.word	0x200007b0
 80042e8:	20000dbc 	.word	0x20000dbc
 80042ec:	200007c0 	.word	0x200007c0
 80042f0:	20000dc0 	.word	0x20000dc0
 80042f4:	200007d0 	.word	0x200007d0
 80042f8:	20000dc4 	.word	0x20000dc4
 80042fc:	200007e0 	.word	0x200007e0
 8004300:	20000dc8 	.word	0x20000dc8
 8004304:	200007f0 	.word	0x200007f0
 8004308:	20000dcc 	.word	0x20000dcc
 800430c:	20000800 	.word	0x20000800
 8004310:	20000dd0 	.word	0x20000dd0
 8004314:	20000810 	.word	0x20000810
 8004318:	20000dd4 	.word	0x20000dd4
 800431c:	20000820 	.word	0x20000820
 8004320:	20000dd8 	.word	0x20000dd8
 8004324:	20000830 	.word	0x20000830
 8004328:	20000ddc 	.word	0x20000ddc
 800432c:	20000840 	.word	0x20000840
 8004330:	4603      	mov	r3, r0
 8004332:	4a27      	ldr	r2, [pc, #156]	@ (80043d0 <loadMenuTexts+0xb14>)
 8004334:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 8004336:	4827      	ldr	r0, [pc, #156]	@ (80043d4 <loadMenuTexts+0xb18>)
 8004338:	f7fc f908 	bl	800054c <copyText>
 800433c:	4603      	mov	r3, r0
 800433e:	4a26      	ldr	r2, [pc, #152]	@ (80043d8 <loadMenuTexts+0xb1c>)
 8004340:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 8004342:	4826      	ldr	r0, [pc, #152]	@ (80043dc <loadMenuTexts+0xb20>)
 8004344:	f7fc f902 	bl	800054c <copyText>
 8004348:	4603      	mov	r3, r0
 800434a:	4a25      	ldr	r2, [pc, #148]	@ (80043e0 <loadMenuTexts+0xb24>)
 800434c:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 800434e:	4825      	ldr	r0, [pc, #148]	@ (80043e4 <loadMenuTexts+0xb28>)
 8004350:	f7fc f8fc 	bl	800054c <copyText>
 8004354:	4603      	mov	r3, r0
 8004356:	4a24      	ldr	r2, [pc, #144]	@ (80043e8 <loadMenuTexts+0xb2c>)
 8004358:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 800435a:	4824      	ldr	r0, [pc, #144]	@ (80043ec <loadMenuTexts+0xb30>)
 800435c:	f7fc f8f6 	bl	800054c <copyText>
 8004360:	4603      	mov	r3, r0
 8004362:	4a23      	ldr	r2, [pc, #140]	@ (80043f0 <loadMenuTexts+0xb34>)
 8004364:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8004366:	4823      	ldr	r0, [pc, #140]	@ (80043f4 <loadMenuTexts+0xb38>)
 8004368:	f7fc f8f0 	bl	800054c <copyText>
 800436c:	4603      	mov	r3, r0
 800436e:	4a22      	ldr	r2, [pc, #136]	@ (80043f8 <loadMenuTexts+0xb3c>)
 8004370:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8004372:	4822      	ldr	r0, [pc, #136]	@ (80043fc <loadMenuTexts+0xb40>)
 8004374:	f7fc f8ea 	bl	800054c <copyText>
 8004378:	4603      	mov	r3, r0
 800437a:	4a21      	ldr	r2, [pc, #132]	@ (8004400 <loadMenuTexts+0xb44>)
 800437c:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 800437e:	4821      	ldr	r0, [pc, #132]	@ (8004404 <loadMenuTexts+0xb48>)
 8004380:	f7fc f8e4 	bl	800054c <copyText>
 8004384:	4603      	mov	r3, r0
 8004386:	4a20      	ldr	r2, [pc, #128]	@ (8004408 <loadMenuTexts+0xb4c>)
 8004388:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 800438a:	4820      	ldr	r0, [pc, #128]	@ (800440c <loadMenuTexts+0xb50>)
 800438c:	f7fc f8de 	bl	800054c <copyText>
 8004390:	4603      	mov	r3, r0
 8004392:	4a1f      	ldr	r2, [pc, #124]	@ (8004410 <loadMenuTexts+0xb54>)
 8004394:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 8004396:	481f      	ldr	r0, [pc, #124]	@ (8004414 <loadMenuTexts+0xb58>)
 8004398:	f7fc f8d8 	bl	800054c <copyText>
 800439c:	4603      	mov	r3, r0
 800439e:	4a1e      	ldr	r2, [pc, #120]	@ (8004418 <loadMenuTexts+0xb5c>)
 80043a0:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 80043a2:	481e      	ldr	r0, [pc, #120]	@ (800441c <loadMenuTexts+0xb60>)
 80043a4:	f7fc f8d2 	bl	800054c <copyText>
 80043a8:	4603      	mov	r3, r0
 80043aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004420 <loadMenuTexts+0xb64>)
 80043ac:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 80043ae:	481d      	ldr	r0, [pc, #116]	@ (8004424 <loadMenuTexts+0xb68>)
 80043b0:	f7fc f8cc 	bl	800054c <copyText>
 80043b4:	4603      	mov	r3, r0
 80043b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004428 <loadMenuTexts+0xb6c>)
 80043b8:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 80043ba:	481c      	ldr	r0, [pc, #112]	@ (800442c <loadMenuTexts+0xb70>)
 80043bc:	f7fc f8c6 	bl	800054c <copyText>
 80043c0:	4603      	mov	r3, r0
 80043c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004430 <loadMenuTexts+0xb74>)
 80043c4:	6013      	str	r3, [r2, #0]
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000de0 	.word	0x20000de0
 80043d4:	20000850 	.word	0x20000850
 80043d8:	20000de4 	.word	0x20000de4
 80043dc:	20000860 	.word	0x20000860
 80043e0:	20000de8 	.word	0x20000de8
 80043e4:	20000870 	.word	0x20000870
 80043e8:	20000dec 	.word	0x20000dec
 80043ec:	20000880 	.word	0x20000880
 80043f0:	20000df0 	.word	0x20000df0
 80043f4:	20000890 	.word	0x20000890
 80043f8:	20000df4 	.word	0x20000df4
 80043fc:	200008a0 	.word	0x200008a0
 8004400:	20000e00 	.word	0x20000e00
 8004404:	200008b0 	.word	0x200008b0
 8004408:	20000e04 	.word	0x20000e04
 800440c:	200008c0 	.word	0x200008c0
 8004410:	20000e08 	.word	0x20000e08
 8004414:	200008d0 	.word	0x200008d0
 8004418:	20000e0c 	.word	0x20000e0c
 800441c:	200008e0 	.word	0x200008e0
 8004420:	20000e10 	.word	0x20000e10
 8004424:	200008f0 	.word	0x200008f0
 8004428:	20000e14 	.word	0x20000e14
 800442c:	20000900 	.word	0x20000900
 8004430:	20000e18 	.word	0x20000e18

08004434 <bekle>:
void eepromKontrol(void);
void hata2EEPROM(uint8_t);
void eepromDataFillWithEmpty(void);
uint8_t buttonCheck(void);
/* USER CODE BEGIN PFP */
void bekle(void) {
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
	timer1=millis;
 8004438:	4b47      	ldr	r3, [pc, #284]	@ (8004558 <bekle+0x124>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a47      	ldr	r2, [pc, #284]	@ (800455c <bekle+0x128>)
 800443e:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004440:	e002      	b.n	8004448 <bekle+0x14>
    	butonKontrol = 1;
 8004442:	4b47      	ldr	r3, [pc, #284]	@ (8004560 <bekle+0x12c>)
 8004444:	2201      	movs	r2, #1
 8004446:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004448:	2101      	movs	r1, #1
 800444a:	4846      	ldr	r0, [pc, #280]	@ (8004564 <bekle+0x130>)
 800444c:	f004 f812 	bl	8008474 <HAL_GPIO_ReadPin>
 8004450:	4603      	mov	r3, r0
 8004452:	2b01      	cmp	r3, #1
 8004454:	d109      	bne.n	800446a <bekle+0x36>
 8004456:	4b40      	ldr	r3, [pc, #256]	@ (8004558 <bekle+0x124>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4b40      	ldr	r3, [pc, #256]	@ (800455c <bekle+0x128>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d0ef      	beq.n	8004442 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004462:	e002      	b.n	800446a <bekle+0x36>
    	butonKontrol = 1;
 8004464:	4b3e      	ldr	r3, [pc, #248]	@ (8004560 <bekle+0x12c>)
 8004466:	2201      	movs	r2, #1
 8004468:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800446a:	2108      	movs	r1, #8
 800446c:	483e      	ldr	r0, [pc, #248]	@ (8004568 <bekle+0x134>)
 800446e:	f004 f801 	bl	8008474 <HAL_GPIO_ReadPin>
 8004472:	4603      	mov	r3, r0
 8004474:	2b01      	cmp	r3, #1
 8004476:	d109      	bne.n	800448c <bekle+0x58>
 8004478:	4b37      	ldr	r3, [pc, #220]	@ (8004558 <bekle+0x124>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	4b37      	ldr	r3, [pc, #220]	@ (800455c <bekle+0x128>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d0ef      	beq.n	8004464 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004484:	e002      	b.n	800448c <bekle+0x58>
    	butonKontrol = 1;
 8004486:	4b36      	ldr	r3, [pc, #216]	@ (8004560 <bekle+0x12c>)
 8004488:	2201      	movs	r2, #1
 800448a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800448c:	2102      	movs	r1, #2
 800448e:	4835      	ldr	r0, [pc, #212]	@ (8004564 <bekle+0x130>)
 8004490:	f003 fff0 	bl	8008474 <HAL_GPIO_ReadPin>
 8004494:	4603      	mov	r3, r0
 8004496:	2b01      	cmp	r3, #1
 8004498:	d109      	bne.n	80044ae <bekle+0x7a>
 800449a:	4b2f      	ldr	r3, [pc, #188]	@ (8004558 <bekle+0x124>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b2f      	ldr	r3, [pc, #188]	@ (800455c <bekle+0x128>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d0ef      	beq.n	8004486 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80044a6:	e002      	b.n	80044ae <bekle+0x7a>
    	butonKontrol = 1;
 80044a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004560 <bekle+0x12c>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80044ae:	2104      	movs	r1, #4
 80044b0:	482c      	ldr	r0, [pc, #176]	@ (8004564 <bekle+0x130>)
 80044b2:	f003 ffdf 	bl	8008474 <HAL_GPIO_ReadPin>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d109      	bne.n	80044d0 <bekle+0x9c>
 80044bc:	4b26      	ldr	r3, [pc, #152]	@ (8004558 <bekle+0x124>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	4b26      	ldr	r3, [pc, #152]	@ (800455c <bekle+0x128>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d0ef      	beq.n	80044a8 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80044c8:	e002      	b.n	80044d0 <bekle+0x9c>
    	butonKontrol = 1;
 80044ca:	4b25      	ldr	r3, [pc, #148]	@ (8004560 <bekle+0x12c>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80044d0:	2108      	movs	r1, #8
 80044d2:	4824      	ldr	r0, [pc, #144]	@ (8004564 <bekle+0x130>)
 80044d4:	f003 ffce 	bl	8008474 <HAL_GPIO_ReadPin>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d109      	bne.n	80044f2 <bekle+0xbe>
 80044de:	4b1e      	ldr	r3, [pc, #120]	@ (8004558 <bekle+0x124>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4b1e      	ldr	r3, [pc, #120]	@ (800455c <bekle+0x128>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d0ef      	beq.n	80044ca <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80044ea:	e002      	b.n	80044f2 <bekle+0xbe>
    	butonKontrol = 1;
 80044ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004560 <bekle+0x12c>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80044f2:	2180      	movs	r1, #128	@ 0x80
 80044f4:	481c      	ldr	r0, [pc, #112]	@ (8004568 <bekle+0x134>)
 80044f6:	f003 ffbd 	bl	8008474 <HAL_GPIO_ReadPin>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d109      	bne.n	8004514 <bekle+0xe0>
 8004500:	4b15      	ldr	r3, [pc, #84]	@ (8004558 <bekle+0x124>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	4b15      	ldr	r3, [pc, #84]	@ (800455c <bekle+0x128>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d0ef      	beq.n	80044ec <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800450c:	e002      	b.n	8004514 <bekle+0xe0>
    	butonKontrol = 1;
 800450e:	4b14      	ldr	r3, [pc, #80]	@ (8004560 <bekle+0x12c>)
 8004510:	2201      	movs	r2, #1
 8004512:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004514:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004518:	4813      	ldr	r0, [pc, #76]	@ (8004568 <bekle+0x134>)
 800451a:	f003 ffab 	bl	8008474 <HAL_GPIO_ReadPin>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <bekle+0x104>
 8004524:	4b0c      	ldr	r3, [pc, #48]	@ (8004558 <bekle+0x124>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	4b0c      	ldr	r3, [pc, #48]	@ (800455c <bekle+0x128>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d0ee      	beq.n	800450e <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004530:	e002      	b.n	8004538 <bekle+0x104>
    	butonKontrol = 1;
 8004532:	4b0b      	ldr	r3, [pc, #44]	@ (8004560 <bekle+0x12c>)
 8004534:	2201      	movs	r2, #1
 8004536:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004538:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800453c:	480a      	ldr	r0, [pc, #40]	@ (8004568 <bekle+0x134>)
 800453e:	f003 ff99 	bl	8008474 <HAL_GPIO_ReadPin>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d105      	bne.n	8004554 <bekle+0x120>
 8004548:	4b03      	ldr	r3, [pc, #12]	@ (8004558 <bekle+0x124>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b03      	ldr	r3, [pc, #12]	@ (800455c <bekle+0x128>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d0ee      	beq.n	8004532 <bekle+0xfe>
    }

}
 8004554:	bf00      	nop
 8004556:	bd80      	pop	{r7, pc}
 8004558:	20000c60 	.word	0x20000c60
 800455c:	20000c68 	.word	0x20000c68
 8004560:	20000cb2 	.word	0x20000cb2
 8004564:	40010800 	.word	0x40010800
 8004568:	40011000 	.word	0x40011000

0800456c <lcdUpdate>:

void lcdUpdate(uint8_t y) {
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d105      	bne.n	8004588 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 800457c:	4a22      	ldr	r2, [pc, #136]	@ (8004608 <lcdUpdate+0x9c>)
 800457e:	2101      	movs	r1, #1
 8004580:	2002      	movs	r0, #2
 8004582:	f7fb ff9c 	bl	80004be <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "     ESP-XL     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8004586:	e03b      	b.n	8004600 <lcdUpdate+0x94>
	} else if(y==2) {
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d105      	bne.n	800459a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 800458e:	4a1e      	ldr	r2, [pc, #120]	@ (8004608 <lcdUpdate+0x9c>)
 8004590:	2102      	movs	r1, #2
 8004592:	2002      	movs	r0, #2
 8004594:	f7fb ff93 	bl	80004be <lcd_print>
}
 8004598:	e032      	b.n	8004600 <lcdUpdate+0x94>
	} else if(y==3) {
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	2b03      	cmp	r3, #3
 800459e:	d105      	bne.n	80045ac <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80045a0:	4a19      	ldr	r2, [pc, #100]	@ (8004608 <lcdUpdate+0x9c>)
 80045a2:	2103      	movs	r1, #3
 80045a4:	2002      	movs	r0, #2
 80045a6:	f7fb ff8a 	bl	80004be <lcd_print>
}
 80045aa:	e029      	b.n	8004600 <lcdUpdate+0x94>
	} else if(y==4) {
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d105      	bne.n	80045be <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80045b2:	4a15      	ldr	r2, [pc, #84]	@ (8004608 <lcdUpdate+0x9c>)
 80045b4:	2104      	movs	r1, #4
 80045b6:	2002      	movs	r0, #2
 80045b8:	f7fb ff81 	bl	80004be <lcd_print>
}
 80045bc:	e020      	b.n	8004600 <lcdUpdate+0x94>
	} else if(y==5) {
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	2b05      	cmp	r3, #5
 80045c2:	d105      	bne.n	80045d0 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80045c4:	4a10      	ldr	r2, [pc, #64]	@ (8004608 <lcdUpdate+0x9c>)
 80045c6:	2105      	movs	r1, #5
 80045c8:	2002      	movs	r0, #2
 80045ca:	f7fb ff78 	bl	80004be <lcd_print>
}
 80045ce:	e017      	b.n	8004600 <lcdUpdate+0x94>
	} else if(y==6) {
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	2b06      	cmp	r3, #6
 80045d4:	d105      	bne.n	80045e2 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80045d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004608 <lcdUpdate+0x9c>)
 80045d8:	2106      	movs	r1, #6
 80045da:	2002      	movs	r0, #2
 80045dc:	f7fb ff6f 	bl	80004be <lcd_print>
}
 80045e0:	e00e      	b.n	8004600 <lcdUpdate+0x94>
	} else if (y==7) {
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	2b07      	cmp	r3, #7
 80045e6:	d10b      	bne.n	8004600 <lcdUpdate+0x94>
		lcd_clear();
 80045e8:	f7fb ff7e 	bl	80004e8 <lcd_clear>
		lcd_print(1, 1, "     ESP-XL     ");
 80045ec:	4a07      	ldr	r2, [pc, #28]	@ (800460c <lcdUpdate+0xa0>)
 80045ee:	2101      	movs	r1, #1
 80045f0:	2001      	movs	r0, #1
 80045f2:	f7fb ff64 	bl	80004be <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 80045f6:	4a06      	ldr	r2, [pc, #24]	@ (8004610 <lcdUpdate+0xa4>)
 80045f8:	2101      	movs	r1, #1
 80045fa:	2002      	movs	r0, #2
 80045fc:	f7fb ff5f 	bl	80004be <lcd_print>
}
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	0800cc6c 	.word	0x0800cc6c
 800460c:	0800d548 	.word	0x0800d548
 8004610:	0800d55c 	.word	0x0800d55c

08004614 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800461e:	2200      	movs	r2, #0
 8004620:	2102      	movs	r1, #2
 8004622:	4880      	ldr	r0, [pc, #512]	@ (8004824 <hataKoduLcdGoster+0x210>)
 8004624:	f003 ff3d 	bl	80084a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004628:	2200      	movs	r2, #0
 800462a:	2101      	movs	r1, #1
 800462c:	487d      	ldr	r0, [pc, #500]	@ (8004824 <hataKoduLcdGoster+0x210>)
 800462e:	f003 ff38 	bl	80084a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004632:	2200      	movs	r2, #0
 8004634:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004638:	487a      	ldr	r0, [pc, #488]	@ (8004824 <hataKoduLcdGoster+0x210>)
 800463a:	f003 ff32 	bl	80084a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800463e:	2200      	movs	r2, #0
 8004640:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004644:	4877      	ldr	r0, [pc, #476]	@ (8004824 <hataKoduLcdGoster+0x210>)
 8004646:	f003 ff2c 	bl	80084a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800464a:	2200      	movs	r2, #0
 800464c:	2104      	movs	r1, #4
 800464e:	4875      	ldr	r0, [pc, #468]	@ (8004824 <hataKoduLcdGoster+0x210>)
 8004650:	f003 ff27 	bl	80084a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004654:	2200      	movs	r2, #0
 8004656:	2120      	movs	r1, #32
 8004658:	4873      	ldr	r0, [pc, #460]	@ (8004828 <hataKoduLcdGoster+0x214>)
 800465a:	f003 ff22 	bl	80084a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800465e:	2200      	movs	r2, #0
 8004660:	2110      	movs	r1, #16
 8004662:	4871      	ldr	r0, [pc, #452]	@ (8004828 <hataKoduLcdGoster+0x214>)
 8004664:	f003 ff1d 	bl	80084a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004668:	2200      	movs	r2, #0
 800466a:	2180      	movs	r1, #128	@ 0x80
 800466c:	486f      	ldr	r0, [pc, #444]	@ (800482c <hataKoduLcdGoster+0x218>)
 800466e:	f003 ff18 	bl	80084a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004672:	2200      	movs	r2, #0
 8004674:	2140      	movs	r1, #64	@ 0x40
 8004676:	486d      	ldr	r0, [pc, #436]	@ (800482c <hataKoduLcdGoster+0x218>)
 8004678:	f003 ff13 	bl	80084a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800467c:	2200      	movs	r2, #0
 800467e:	2120      	movs	r1, #32
 8004680:	486a      	ldr	r0, [pc, #424]	@ (800482c <hataKoduLcdGoster+0x218>)
 8004682:	f003 ff0e 	bl	80084a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8004686:	2200      	movs	r2, #0
 8004688:	2110      	movs	r1, #16
 800468a:	4868      	ldr	r0, [pc, #416]	@ (800482c <hataKoduLcdGoster+0x218>)
 800468c:	f003 ff09 	bl	80084a2 <HAL_GPIO_WritePin>

	if(x==1) {
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d11d      	bne.n	80046d2 <hataKoduLcdGoster+0xbe>
		if(dilSecim==0) {
 8004696:	4b66      	ldr	r3, [pc, #408]	@ (8004830 <hataKoduLcdGoster+0x21c>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d105      	bne.n	80046aa <hataKoduLcdGoster+0x96>
			lcd_print(1, 1, "   HATA KODU    ");
 800469e:	4a65      	ldr	r2, [pc, #404]	@ (8004834 <hataKoduLcdGoster+0x220>)
 80046a0:	2101      	movs	r1, #1
 80046a2:	2001      	movs	r0, #1
 80046a4:	f7fb ff0b 	bl	80004be <lcd_print>
 80046a8:	e008      	b.n	80046bc <hataKoduLcdGoster+0xa8>
		} else if(dilSecim==1) {
 80046aa:	4b61      	ldr	r3, [pc, #388]	@ (8004830 <hataKoduLcdGoster+0x21c>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d104      	bne.n	80046bc <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   ERROR CODE   ");
 80046b2:	4a61      	ldr	r2, [pc, #388]	@ (8004838 <hataKoduLcdGoster+0x224>)
 80046b4:	2101      	movs	r1, #1
 80046b6:	2001      	movs	r0, #1
 80046b8:	f7fb ff01 	bl	80004be <lcd_print>
		}
		lcd_print(2, 1, "1");
 80046bc:	4a5f      	ldr	r2, [pc, #380]	@ (800483c <hataKoduLcdGoster+0x228>)
 80046be:	2101      	movs	r1, #1
 80046c0:	2002      	movs	r0, #2
 80046c2:	f7fb fefc 	bl	80004be <lcd_print>
		lcd_print(2, 7, "          ");
 80046c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004840 <hataKoduLcdGoster+0x22c>)
 80046c8:	2107      	movs	r1, #7
 80046ca:	2002      	movs	r0, #2
 80046cc:	f7fb fef7 	bl	80004be <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80046d0:	e0a3      	b.n	800481a <hataKoduLcdGoster+0x206>
	} else if(x==2){
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d11d      	bne.n	8004714 <hataKoduLcdGoster+0x100>
		if(dilSecim==0){
 80046d8:	4b55      	ldr	r3, [pc, #340]	@ (8004830 <hataKoduLcdGoster+0x21c>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d105      	bne.n	80046ec <hataKoduLcdGoster+0xd8>
			lcd_print(1, 1, "   HATA KODU    ");
 80046e0:	4a54      	ldr	r2, [pc, #336]	@ (8004834 <hataKoduLcdGoster+0x220>)
 80046e2:	2101      	movs	r1, #1
 80046e4:	2001      	movs	r0, #1
 80046e6:	f7fb feea 	bl	80004be <lcd_print>
 80046ea:	e008      	b.n	80046fe <hataKoduLcdGoster+0xea>
		} else if(dilSecim==1) {
 80046ec:	4b50      	ldr	r3, [pc, #320]	@ (8004830 <hataKoduLcdGoster+0x21c>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d104      	bne.n	80046fe <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   ERROR CODE   ");
 80046f4:	4a50      	ldr	r2, [pc, #320]	@ (8004838 <hataKoduLcdGoster+0x224>)
 80046f6:	2101      	movs	r1, #1
 80046f8:	2001      	movs	r0, #1
 80046fa:	f7fb fee0 	bl	80004be <lcd_print>
		lcd_print(2, 2, "2");
 80046fe:	4a51      	ldr	r2, [pc, #324]	@ (8004844 <hataKoduLcdGoster+0x230>)
 8004700:	2102      	movs	r1, #2
 8004702:	2002      	movs	r0, #2
 8004704:	f7fb fedb 	bl	80004be <lcd_print>
		lcd_print(2, 7, "          ");
 8004708:	4a4d      	ldr	r2, [pc, #308]	@ (8004840 <hataKoduLcdGoster+0x22c>)
 800470a:	2107      	movs	r1, #7
 800470c:	2002      	movs	r0, #2
 800470e:	f7fb fed6 	bl	80004be <lcd_print>
}
 8004712:	e082      	b.n	800481a <hataKoduLcdGoster+0x206>
	} else if(x==3) {
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	2b03      	cmp	r3, #3
 8004718:	d11d      	bne.n	8004756 <hataKoduLcdGoster+0x142>
		if(dilSecim==0) {
 800471a:	4b45      	ldr	r3, [pc, #276]	@ (8004830 <hataKoduLcdGoster+0x21c>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d105      	bne.n	800472e <hataKoduLcdGoster+0x11a>
			lcd_print(1, 1, "   HATA KODU    ");
 8004722:	4a44      	ldr	r2, [pc, #272]	@ (8004834 <hataKoduLcdGoster+0x220>)
 8004724:	2101      	movs	r1, #1
 8004726:	2001      	movs	r0, #1
 8004728:	f7fb fec9 	bl	80004be <lcd_print>
 800472c:	e008      	b.n	8004740 <hataKoduLcdGoster+0x12c>
		} else if(dilSecim==1) {
 800472e:	4b40      	ldr	r3, [pc, #256]	@ (8004830 <hataKoduLcdGoster+0x21c>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d104      	bne.n	8004740 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004736:	4a40      	ldr	r2, [pc, #256]	@ (8004838 <hataKoduLcdGoster+0x224>)
 8004738:	2101      	movs	r1, #1
 800473a:	2001      	movs	r0, #1
 800473c:	f7fb febf 	bl	80004be <lcd_print>
		lcd_print(2, 3, "3");
 8004740:	4a41      	ldr	r2, [pc, #260]	@ (8004848 <hataKoduLcdGoster+0x234>)
 8004742:	2103      	movs	r1, #3
 8004744:	2002      	movs	r0, #2
 8004746:	f7fb feba 	bl	80004be <lcd_print>
		lcd_print(2, 7, "          ");
 800474a:	4a3d      	ldr	r2, [pc, #244]	@ (8004840 <hataKoduLcdGoster+0x22c>)
 800474c:	2107      	movs	r1, #7
 800474e:	2002      	movs	r0, #2
 8004750:	f7fb feb5 	bl	80004be <lcd_print>
}
 8004754:	e061      	b.n	800481a <hataKoduLcdGoster+0x206>
	} else if(x==4){
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	2b04      	cmp	r3, #4
 800475a:	d11d      	bne.n	8004798 <hataKoduLcdGoster+0x184>
		if(dilSecim==0) {
 800475c:	4b34      	ldr	r3, [pc, #208]	@ (8004830 <hataKoduLcdGoster+0x21c>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d105      	bne.n	8004770 <hataKoduLcdGoster+0x15c>
			lcd_print(1, 1, "   HATA KODU    ");
 8004764:	4a33      	ldr	r2, [pc, #204]	@ (8004834 <hataKoduLcdGoster+0x220>)
 8004766:	2101      	movs	r1, #1
 8004768:	2001      	movs	r0, #1
 800476a:	f7fb fea8 	bl	80004be <lcd_print>
 800476e:	e008      	b.n	8004782 <hataKoduLcdGoster+0x16e>
		} else if(dilSecim==1) {
 8004770:	4b2f      	ldr	r3, [pc, #188]	@ (8004830 <hataKoduLcdGoster+0x21c>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d104      	bne.n	8004782 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004778:	4a2f      	ldr	r2, [pc, #188]	@ (8004838 <hataKoduLcdGoster+0x224>)
 800477a:	2101      	movs	r1, #1
 800477c:	2001      	movs	r0, #1
 800477e:	f7fb fe9e 	bl	80004be <lcd_print>
		lcd_print(2, 4, "4");
 8004782:	4a32      	ldr	r2, [pc, #200]	@ (800484c <hataKoduLcdGoster+0x238>)
 8004784:	2104      	movs	r1, #4
 8004786:	2002      	movs	r0, #2
 8004788:	f7fb fe99 	bl	80004be <lcd_print>
		lcd_print(2, 7, "          ");
 800478c:	4a2c      	ldr	r2, [pc, #176]	@ (8004840 <hataKoduLcdGoster+0x22c>)
 800478e:	2107      	movs	r1, #7
 8004790:	2002      	movs	r0, #2
 8004792:	f7fb fe94 	bl	80004be <lcd_print>
}
 8004796:	e040      	b.n	800481a <hataKoduLcdGoster+0x206>
	} else if(x==5) {
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	2b05      	cmp	r3, #5
 800479c:	d11d      	bne.n	80047da <hataKoduLcdGoster+0x1c6>
		if(dilSecim==0) {
 800479e:	4b24      	ldr	r3, [pc, #144]	@ (8004830 <hataKoduLcdGoster+0x21c>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d105      	bne.n	80047b2 <hataKoduLcdGoster+0x19e>
			lcd_print(1, 1, "   HATA KODU    ");
 80047a6:	4a23      	ldr	r2, [pc, #140]	@ (8004834 <hataKoduLcdGoster+0x220>)
 80047a8:	2101      	movs	r1, #1
 80047aa:	2001      	movs	r0, #1
 80047ac:	f7fb fe87 	bl	80004be <lcd_print>
 80047b0:	e008      	b.n	80047c4 <hataKoduLcdGoster+0x1b0>
		} else if(dilSecim==1) {
 80047b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004830 <hataKoduLcdGoster+0x21c>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d104      	bne.n	80047c4 <hataKoduLcdGoster+0x1b0>
			lcd_print(1, 1, "   ERROR CODE   ");
 80047ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004838 <hataKoduLcdGoster+0x224>)
 80047bc:	2101      	movs	r1, #1
 80047be:	2001      	movs	r0, #1
 80047c0:	f7fb fe7d 	bl	80004be <lcd_print>
		lcd_print(2, 5, "5");
 80047c4:	4a22      	ldr	r2, [pc, #136]	@ (8004850 <hataKoduLcdGoster+0x23c>)
 80047c6:	2105      	movs	r1, #5
 80047c8:	2002      	movs	r0, #2
 80047ca:	f7fb fe78 	bl	80004be <lcd_print>
		lcd_print(2, 7, "          ");
 80047ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004840 <hataKoduLcdGoster+0x22c>)
 80047d0:	2107      	movs	r1, #7
 80047d2:	2002      	movs	r0, #2
 80047d4:	f7fb fe73 	bl	80004be <lcd_print>
}
 80047d8:	e01f      	b.n	800481a <hataKoduLcdGoster+0x206>
	} else if(x==6) {
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	2b06      	cmp	r3, #6
 80047de:	d11c      	bne.n	800481a <hataKoduLcdGoster+0x206>
		if(dilSecim==0) {
 80047e0:	4b13      	ldr	r3, [pc, #76]	@ (8004830 <hataKoduLcdGoster+0x21c>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d105      	bne.n	80047f4 <hataKoduLcdGoster+0x1e0>
			lcd_print(1, 1, "   HATA KODU    ");
 80047e8:	4a12      	ldr	r2, [pc, #72]	@ (8004834 <hataKoduLcdGoster+0x220>)
 80047ea:	2101      	movs	r1, #1
 80047ec:	2001      	movs	r0, #1
 80047ee:	f7fb fe66 	bl	80004be <lcd_print>
 80047f2:	e008      	b.n	8004806 <hataKoduLcdGoster+0x1f2>
		} else if(dilSecim==1) {
 80047f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004830 <hataKoduLcdGoster+0x21c>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d104      	bne.n	8004806 <hataKoduLcdGoster+0x1f2>
			lcd_print(1, 1, "   ERROR CODE   ");
 80047fc:	4a0e      	ldr	r2, [pc, #56]	@ (8004838 <hataKoduLcdGoster+0x224>)
 80047fe:	2101      	movs	r1, #1
 8004800:	2001      	movs	r0, #1
 8004802:	f7fb fe5c 	bl	80004be <lcd_print>
		lcd_print(2, 6, "6");
 8004806:	4a13      	ldr	r2, [pc, #76]	@ (8004854 <hataKoduLcdGoster+0x240>)
 8004808:	2106      	movs	r1, #6
 800480a:	2002      	movs	r0, #2
 800480c:	f7fb fe57 	bl	80004be <lcd_print>
		lcd_print(2, 7, "          ");
 8004810:	4a0b      	ldr	r2, [pc, #44]	@ (8004840 <hataKoduLcdGoster+0x22c>)
 8004812:	2107      	movs	r1, #7
 8004814:	2002      	movs	r0, #2
 8004816:	f7fb fe52 	bl	80004be <lcd_print>
}
 800481a:	bf00      	nop
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40010c00 	.word	0x40010c00
 8004828:	40011000 	.word	0x40011000
 800482c:	40010800 	.word	0x40010800
 8004830:	20000ca4 	.word	0x20000ca4
 8004834:	0800d570 	.word	0x0800d570
 8004838:	0800d584 	.word	0x0800d584
 800483c:	0800d598 	.word	0x0800d598
 8004840:	0800d59c 	.word	0x0800d59c
 8004844:	0800d5a8 	.word	0x0800d5a8
 8004848:	0800d5ac 	.word	0x0800d5ac
 800484c:	0800d5b0 	.word	0x0800d5b0
 8004850:	0800d5b4 	.word	0x0800d5b4
 8004854:	0800d5b8 	.word	0x0800d5b8

08004858 <eepromKontrol>:

void eepromKontrol(void) {
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 800485e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004862:	9302      	str	r3, [sp, #8]
 8004864:	233f      	movs	r3, #63	@ 0x3f
 8004866:	9301      	str	r3, [sp, #4]
 8004868:	4b9b      	ldr	r3, [pc, #620]	@ (8004ad8 <eepromKontrol+0x280>)
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	233f      	movs	r3, #63	@ 0x3f
 800486e:	2200      	movs	r2, #0
 8004870:	21a0      	movs	r1, #160	@ 0xa0
 8004872:	489a      	ldr	r0, [pc, #616]	@ (8004adc <eepromKontrol+0x284>)
 8004874:	f004 f9b2 	bl	8008bdc <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8004878:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800487c:	f003 f96c 	bl	8007b58 <HAL_Delay>
	kaydedilenDeger = eepromData[3];
 8004880:	4b95      	ldr	r3, [pc, #596]	@ (8004ad8 <eepromKontrol+0x280>)
 8004882:	78da      	ldrb	r2, [r3, #3]
 8004884:	4b96      	ldr	r3, [pc, #600]	@ (8004ae0 <eepromKontrol+0x288>)
 8004886:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8004888:	4b93      	ldr	r3, [pc, #588]	@ (8004ad8 <eepromKontrol+0x280>)
 800488a:	785a      	ldrb	r2, [r3, #1]
 800488c:	4b95      	ldr	r3, [pc, #596]	@ (8004ae4 <eepromKontrol+0x28c>)
 800488e:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8004890:	4b91      	ldr	r3, [pc, #580]	@ (8004ad8 <eepromKontrol+0x280>)
 8004892:	789a      	ldrb	r2, [r3, #2]
 8004894:	4b94      	ldr	r3, [pc, #592]	@ (8004ae8 <eepromKontrol+0x290>)
 8004896:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8004898:	4b8f      	ldr	r3, [pc, #572]	@ (8004ad8 <eepromKontrol+0x280>)
 800489a:	791a      	ldrb	r2, [r3, #4]
 800489c:	4b93      	ldr	r3, [pc, #588]	@ (8004aec <eepromKontrol+0x294>)
 800489e:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 80048a0:	4b8d      	ldr	r3, [pc, #564]	@ (8004ad8 <eepromKontrol+0x280>)
 80048a2:	795a      	ldrb	r2, [r3, #5]
 80048a4:	4b92      	ldr	r3, [pc, #584]	@ (8004af0 <eepromKontrol+0x298>)
 80048a6:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 80048a8:	4b8b      	ldr	r3, [pc, #556]	@ (8004ad8 <eepromKontrol+0x280>)
 80048aa:	799a      	ldrb	r2, [r3, #6]
 80048ac:	4b91      	ldr	r3, [pc, #580]	@ (8004af4 <eepromKontrol+0x29c>)
 80048ae:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 80048b0:	4b89      	ldr	r3, [pc, #548]	@ (8004ad8 <eepromKontrol+0x280>)
 80048b2:	79da      	ldrb	r2, [r3, #7]
 80048b4:	4b90      	ldr	r3, [pc, #576]	@ (8004af8 <eepromKontrol+0x2a0>)
 80048b6:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 80048b8:	4b87      	ldr	r3, [pc, #540]	@ (8004ad8 <eepromKontrol+0x280>)
 80048ba:	7a1a      	ldrb	r2, [r3, #8]
 80048bc:	4b8f      	ldr	r3, [pc, #572]	@ (8004afc <eepromKontrol+0x2a4>)
 80048be:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80048c0:	4b85      	ldr	r3, [pc, #532]	@ (8004ad8 <eepromKontrol+0x280>)
 80048c2:	7a5a      	ldrb	r2, [r3, #9]
 80048c4:	4b8e      	ldr	r3, [pc, #568]	@ (8004b00 <eepromKontrol+0x2a8>)
 80048c6:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80048c8:	4b83      	ldr	r3, [pc, #524]	@ (8004ad8 <eepromKontrol+0x280>)
 80048ca:	7a9a      	ldrb	r2, [r3, #10]
 80048cc:	4b8d      	ldr	r3, [pc, #564]	@ (8004b04 <eepromKontrol+0x2ac>)
 80048ce:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80048d0:	4b81      	ldr	r3, [pc, #516]	@ (8004ad8 <eepromKontrol+0x280>)
 80048d2:	7ada      	ldrb	r2, [r3, #11]
 80048d4:	4b8c      	ldr	r3, [pc, #560]	@ (8004b08 <eepromKontrol+0x2b0>)
 80048d6:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80048d8:	4b7f      	ldr	r3, [pc, #508]	@ (8004ad8 <eepromKontrol+0x280>)
 80048da:	7b1a      	ldrb	r2, [r3, #12]
 80048dc:	4b8b      	ldr	r3, [pc, #556]	@ (8004b0c <eepromKontrol+0x2b4>)
 80048de:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80048e0:	4b7d      	ldr	r3, [pc, #500]	@ (8004ad8 <eepromKontrol+0x280>)
 80048e2:	7b5a      	ldrb	r2, [r3, #13]
 80048e4:	4b8a      	ldr	r3, [pc, #552]	@ (8004b10 <eepromKontrol+0x2b8>)
 80048e6:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80048e8:	4b7b      	ldr	r3, [pc, #492]	@ (8004ad8 <eepromKontrol+0x280>)
 80048ea:	7b9a      	ldrb	r2, [r3, #14]
 80048ec:	4b89      	ldr	r3, [pc, #548]	@ (8004b14 <eepromKontrol+0x2bc>)
 80048ee:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80048f0:	4b79      	ldr	r3, [pc, #484]	@ (8004ad8 <eepromKontrol+0x280>)
 80048f2:	7bda      	ldrb	r2, [r3, #15]
 80048f4:	4b88      	ldr	r3, [pc, #544]	@ (8004b18 <eepromKontrol+0x2c0>)
 80048f6:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80048f8:	4b77      	ldr	r3, [pc, #476]	@ (8004ad8 <eepromKontrol+0x280>)
 80048fa:	7c1a      	ldrb	r2, [r3, #16]
 80048fc:	4b87      	ldr	r3, [pc, #540]	@ (8004b1c <eepromKontrol+0x2c4>)
 80048fe:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8004900:	4b75      	ldr	r3, [pc, #468]	@ (8004ad8 <eepromKontrol+0x280>)
 8004902:	7c5a      	ldrb	r2, [r3, #17]
 8004904:	4b86      	ldr	r3, [pc, #536]	@ (8004b20 <eepromKontrol+0x2c8>)
 8004906:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8004908:	4b73      	ldr	r3, [pc, #460]	@ (8004ad8 <eepromKontrol+0x280>)
 800490a:	7c9a      	ldrb	r2, [r3, #18]
 800490c:	4b85      	ldr	r3, [pc, #532]	@ (8004b24 <eepromKontrol+0x2cc>)
 800490e:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8004910:	4b71      	ldr	r3, [pc, #452]	@ (8004ad8 <eepromKontrol+0x280>)
 8004912:	7cda      	ldrb	r2, [r3, #19]
 8004914:	4b84      	ldr	r3, [pc, #528]	@ (8004b28 <eepromKontrol+0x2d0>)
 8004916:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8004918:	4b6f      	ldr	r3, [pc, #444]	@ (8004ad8 <eepromKontrol+0x280>)
 800491a:	7d1a      	ldrb	r2, [r3, #20]
 800491c:	4b83      	ldr	r3, [pc, #524]	@ (8004b2c <eepromKontrol+0x2d4>)
 800491e:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8004920:	4b6d      	ldr	r3, [pc, #436]	@ (8004ad8 <eepromKontrol+0x280>)
 8004922:	7d5a      	ldrb	r2, [r3, #21]
 8004924:	4b82      	ldr	r3, [pc, #520]	@ (8004b30 <eepromKontrol+0x2d8>)
 8004926:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8004928:	4b6b      	ldr	r3, [pc, #428]	@ (8004ad8 <eepromKontrol+0x280>)
 800492a:	7d9a      	ldrb	r2, [r3, #22]
 800492c:	4b81      	ldr	r3, [pc, #516]	@ (8004b34 <eepromKontrol+0x2dc>)
 800492e:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8004930:	4b69      	ldr	r3, [pc, #420]	@ (8004ad8 <eepromKontrol+0x280>)
 8004932:	7dda      	ldrb	r2, [r3, #23]
 8004934:	4b80      	ldr	r3, [pc, #512]	@ (8004b38 <eepromKontrol+0x2e0>)
 8004936:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8004938:	4b67      	ldr	r3, [pc, #412]	@ (8004ad8 <eepromKontrol+0x280>)
 800493a:	7e1a      	ldrb	r2, [r3, #24]
 800493c:	4b7f      	ldr	r3, [pc, #508]	@ (8004b3c <eepromKontrol+0x2e4>)
 800493e:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8004940:	4b65      	ldr	r3, [pc, #404]	@ (8004ad8 <eepromKontrol+0x280>)
 8004942:	7e5a      	ldrb	r2, [r3, #25]
 8004944:	4b7e      	ldr	r3, [pc, #504]	@ (8004b40 <eepromKontrol+0x2e8>)
 8004946:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8004948:	4b63      	ldr	r3, [pc, #396]	@ (8004ad8 <eepromKontrol+0x280>)
 800494a:	7e9a      	ldrb	r2, [r3, #26]
 800494c:	4b7d      	ldr	r3, [pc, #500]	@ (8004b44 <eepromKontrol+0x2ec>)
 800494e:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8004950:	4b61      	ldr	r3, [pc, #388]	@ (8004ad8 <eepromKontrol+0x280>)
 8004952:	7eda      	ldrb	r2, [r3, #27]
 8004954:	4b7c      	ldr	r3, [pc, #496]	@ (8004b48 <eepromKontrol+0x2f0>)
 8004956:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8004958:	4b5f      	ldr	r3, [pc, #380]	@ (8004ad8 <eepromKontrol+0x280>)
 800495a:	7f1a      	ldrb	r2, [r3, #28]
 800495c:	4b7b      	ldr	r3, [pc, #492]	@ (8004b4c <eepromKontrol+0x2f4>)
 800495e:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8004960:	4b5d      	ldr	r3, [pc, #372]	@ (8004ad8 <eepromKontrol+0x280>)
 8004962:	7f5a      	ldrb	r2, [r3, #29]
 8004964:	4b7a      	ldr	r3, [pc, #488]	@ (8004b50 <eepromKontrol+0x2f8>)
 8004966:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8004968:	4b5b      	ldr	r3, [pc, #364]	@ (8004ad8 <eepromKontrol+0x280>)
 800496a:	7f9a      	ldrb	r2, [r3, #30]
 800496c:	4b79      	ldr	r3, [pc, #484]	@ (8004b54 <eepromKontrol+0x2fc>)
 800496e:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8004970:	4b59      	ldr	r3, [pc, #356]	@ (8004ad8 <eepromKontrol+0x280>)
 8004972:	7fda      	ldrb	r2, [r3, #31]
 8004974:	4b78      	ldr	r3, [pc, #480]	@ (8004b58 <eepromKontrol+0x300>)
 8004976:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8004978:	4b57      	ldr	r3, [pc, #348]	@ (8004ad8 <eepromKontrol+0x280>)
 800497a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800497e:	4b77      	ldr	r3, [pc, #476]	@ (8004b5c <eepromKontrol+0x304>)
 8004980:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8004982:	4b55      	ldr	r3, [pc, #340]	@ (8004ad8 <eepromKontrol+0x280>)
 8004984:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8004988:	4b75      	ldr	r3, [pc, #468]	@ (8004b60 <eepromKontrol+0x308>)
 800498a:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 800498c:	4b52      	ldr	r3, [pc, #328]	@ (8004ad8 <eepromKontrol+0x280>)
 800498e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8004992:	4b74      	ldr	r3, [pc, #464]	@ (8004b64 <eepromKontrol+0x30c>)
 8004994:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8004996:	4b50      	ldr	r3, [pc, #320]	@ (8004ad8 <eepromKontrol+0x280>)
 8004998:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800499c:	4b72      	ldr	r3, [pc, #456]	@ (8004b68 <eepromKontrol+0x310>)
 800499e:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 80049a0:	4b4d      	ldr	r3, [pc, #308]	@ (8004ad8 <eepromKontrol+0x280>)
 80049a2:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80049a6:	4b71      	ldr	r3, [pc, #452]	@ (8004b6c <eepromKontrol+0x314>)
 80049a8:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[37];
 80049aa:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad8 <eepromKontrol+0x280>)
 80049ac:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80049b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004b70 <eepromKontrol+0x318>)
 80049b2:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[38];
 80049b4:	4b48      	ldr	r3, [pc, #288]	@ (8004ad8 <eepromKontrol+0x280>)
 80049b6:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 80049ba:	4b6e      	ldr	r3, [pc, #440]	@ (8004b74 <eepromKontrol+0x31c>)
 80049bc:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[39];
 80049be:	4b46      	ldr	r3, [pc, #280]	@ (8004ad8 <eepromKontrol+0x280>)
 80049c0:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 80049c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004b78 <eepromKontrol+0x320>)
 80049c6:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[40];
 80049c8:	4b43      	ldr	r3, [pc, #268]	@ (8004ad8 <eepromKontrol+0x280>)
 80049ca:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80049ce:	4b6b      	ldr	r3, [pc, #428]	@ (8004b7c <eepromKontrol+0x324>)
 80049d0:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[41];
 80049d2:	4b41      	ldr	r3, [pc, #260]	@ (8004ad8 <eepromKontrol+0x280>)
 80049d4:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80049d8:	4b69      	ldr	r3, [pc, #420]	@ (8004b80 <eepromKontrol+0x328>)
 80049da:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[42];
 80049dc:	4b3e      	ldr	r3, [pc, #248]	@ (8004ad8 <eepromKontrol+0x280>)
 80049de:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80049e2:	4b68      	ldr	r3, [pc, #416]	@ (8004b84 <eepromKontrol+0x32c>)
 80049e4:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[43];
 80049e6:	4b3c      	ldr	r3, [pc, #240]	@ (8004ad8 <eepromKontrol+0x280>)
 80049e8:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80049ec:	4b66      	ldr	r3, [pc, #408]	@ (8004b88 <eepromKontrol+0x330>)
 80049ee:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[44];
 80049f0:	4b39      	ldr	r3, [pc, #228]	@ (8004ad8 <eepromKontrol+0x280>)
 80049f2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80049f6:	4b65      	ldr	r3, [pc, #404]	@ (8004b8c <eepromKontrol+0x334>)
 80049f8:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[45];
 80049fa:	4b37      	ldr	r3, [pc, #220]	@ (8004ad8 <eepromKontrol+0x280>)
 80049fc:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8004a00:	4b63      	ldr	r3, [pc, #396]	@ (8004b90 <eepromKontrol+0x338>)
 8004a02:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[46];
 8004a04:	4b34      	ldr	r3, [pc, #208]	@ (8004ad8 <eepromKontrol+0x280>)
 8004a06:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8004a0a:	4b62      	ldr	r3, [pc, #392]	@ (8004b94 <eepromKontrol+0x33c>)
 8004a0c:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8004a0e:	4b54      	ldr	r3, [pc, #336]	@ (8004b60 <eepromKontrol+0x308>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe ff52 	bl	80038bc <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8004a18:	4b50      	ldr	r3, [pc, #320]	@ (8004b5c <eepromKontrol+0x304>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b09      	cmp	r3, #9
 8004a1e:	d902      	bls.n	8004a26 <eepromKontrol+0x1ce>
	    calismaSayisi10000=0;
 8004a20:	4b4e      	ldr	r3, [pc, #312]	@ (8004b5c <eepromKontrol+0x304>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8004a26:	4b4c      	ldr	r3, [pc, #304]	@ (8004b58 <eepromKontrol+0x300>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b09      	cmp	r3, #9
 8004a2c:	d902      	bls.n	8004a34 <eepromKontrol+0x1dc>
	    calismaSayisi1000=0;
 8004a2e:	4b4a      	ldr	r3, [pc, #296]	@ (8004b58 <eepromKontrol+0x300>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8004a34:	4b47      	ldr	r3, [pc, #284]	@ (8004b54 <eepromKontrol+0x2fc>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b09      	cmp	r3, #9
 8004a3a:	d902      	bls.n	8004a42 <eepromKontrol+0x1ea>
	    calismaSayisi100=0;
 8004a3c:	4b45      	ldr	r3, [pc, #276]	@ (8004b54 <eepromKontrol+0x2fc>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8004a42:	4b43      	ldr	r3, [pc, #268]	@ (8004b50 <eepromKontrol+0x2f8>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b09      	cmp	r3, #9
 8004a48:	d902      	bls.n	8004a50 <eepromKontrol+0x1f8>
	    calismaSayisi10=0;
 8004a4a:	4b41      	ldr	r3, [pc, #260]	@ (8004b50 <eepromKontrol+0x2f8>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8004a50:	4b3e      	ldr	r3, [pc, #248]	@ (8004b4c <eepromKontrol+0x2f4>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b09      	cmp	r3, #9
 8004a56:	d902      	bls.n	8004a5e <eepromKontrol+0x206>
	    calismaSayisi1=0;
 8004a58:	4b3c      	ldr	r3, [pc, #240]	@ (8004b4c <eepromKontrol+0x2f4>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	701a      	strb	r2, [r3, #0]
/*
	if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8004a5e:	4b21      	ldr	r3, [pc, #132]	@ (8004ae4 <eepromKontrol+0x28c>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d902      	bls.n	8004a6c <eepromKontrol+0x214>
	    calismaSekli=0;
 8004a66:	4b1f      	ldr	r3, [pc, #124]	@ (8004ae4 <eepromKontrol+0x28c>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8004a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ae8 <eepromKontrol+0x290>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d902      	bls.n	8004a7a <eepromKontrol+0x222>
	    emniyetCercevesi=1;
 8004a74:	4b1c      	ldr	r3, [pc, #112]	@ (8004ae8 <eepromKontrol+0x290>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8004a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8004aec <eepromKontrol+0x294>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d902      	bls.n	8004a88 <eepromKontrol+0x230>
	    yavaslamaLimit=0;
 8004a82:	4b1a      	ldr	r3, [pc, #104]	@ (8004aec <eepromKontrol+0x294>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8004a88:	4b19      	ldr	r3, [pc, #100]	@ (8004af0 <eepromKontrol+0x298>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d902      	bls.n	8004a96 <eepromKontrol+0x23e>
	    altLimit=1;
 8004a90:	4b17      	ldr	r3, [pc, #92]	@ (8004af0 <eepromKontrol+0x298>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8004a96:	4b17      	ldr	r3, [pc, #92]	@ (8004af4 <eepromKontrol+0x29c>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d902      	bls.n	8004aa4 <eepromKontrol+0x24c>
	    basincSalteri=1;
 8004a9e:	4b15      	ldr	r3, [pc, #84]	@ (8004af4 <eepromKontrol+0x29c>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8004aa4:	4b14      	ldr	r3, [pc, #80]	@ (8004af8 <eepromKontrol+0x2a0>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d902      	bls.n	8004ab2 <eepromKontrol+0x25a>
	    kapiSecimleri=3;
 8004aac:	4b12      	ldr	r3, [pc, #72]	@ (8004af8 <eepromKontrol+0x2a0>)
 8004aae:	2203      	movs	r2, #3
 8004ab0:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8004ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8004b6c <eepromKontrol+0x314>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d902      	bls.n	8004ac0 <eepromKontrol+0x268>
	    kapiAcTipi=0;
 8004aba:	4b2c      	ldr	r3, [pc, #176]	@ (8004b6c <eepromKontrol+0x314>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8004ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8004afc <eepromKontrol+0x2a4>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d902      	bls.n	8004ace <eepromKontrol+0x276>
	    kapi1Tip=1;
 8004ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8004afc <eepromKontrol+0x2a4>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8004ace:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <eepromKontrol+0x2a8>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b05      	cmp	r3, #5
 8004ad4:	d963      	bls.n	8004b9e <eepromKontrol+0x346>
 8004ad6:	e05f      	b.n	8004b98 <eepromKontrol+0x340>
 8004ad8:	20000c18 	.word	0x20000c18
 8004adc:	20000e44 	.word	0x20000e44
 8004ae0:	20000c57 	.word	0x20000c57
 8004ae4:	20000c85 	.word	0x20000c85
 8004ae8:	20000c88 	.word	0x20000c88
 8004aec:	20000c89 	.word	0x20000c89
 8004af0:	20000c8a 	.word	0x20000c8a
 8004af4:	20000c8b 	.word	0x20000c8b
 8004af8:	20000c8c 	.word	0x20000c8c
 8004afc:	20000c8d 	.word	0x20000c8d
 8004b00:	20000c9d 	.word	0x20000c9d
 8004b04:	20000c8e 	.word	0x20000c8e
 8004b08:	20000c9e 	.word	0x20000c9e
 8004b0c:	20000c8f 	.word	0x20000c8f
 8004b10:	20000c9f 	.word	0x20000c9f
 8004b14:	20000c92 	.word	0x20000c92
 8004b18:	20000c93 	.word	0x20000c93
 8004b1c:	20000c94 	.word	0x20000c94
 8004b20:	20000c95 	.word	0x20000c95
 8004b24:	20000c96 	.word	0x20000c96
 8004b28:	20000c97 	.word	0x20000c97
 8004b2c:	20000c98 	.word	0x20000c98
 8004b30:	20000c99 	.word	0x20000c99
 8004b34:	20000c9a 	.word	0x20000c9a
 8004b38:	20000c9b 	.word	0x20000c9b
 8004b3c:	20000c9c 	.word	0x20000c9c
 8004b40:	20000ca0 	.word	0x20000ca0
 8004b44:	20000ca2 	.word	0x20000ca2
 8004b48:	20000c80 	.word	0x20000c80
 8004b4c:	20000c81 	.word	0x20000c81
 8004b50:	20000c82 	.word	0x20000c82
 8004b54:	20000941 	.word	0x20000941
 8004b58:	20000942 	.word	0x20000942
 8004b5c:	20000c83 	.word	0x20000c83
 8004b60:	20000ca4 	.word	0x20000ca4
 8004b64:	20000c91 	.word	0x20000c91
 8004b68:	20000ca3 	.word	0x20000ca3
 8004b6c:	20000c90 	.word	0x20000c90
 8004b70:	20000ca5 	.word	0x20000ca5
 8004b74:	20000ca6 	.word	0x20000ca6
 8004b78:	20000ca7 	.word	0x20000ca7
 8004b7c:	20000ca8 	.word	0x20000ca8
 8004b80:	20000ca9 	.word	0x20000ca9
 8004b84:	20000caa 	.word	0x20000caa
 8004b88:	20000cab 	.word	0x20000cab
 8004b8c:	20000cac 	.word	0x20000cac
 8004b90:	20000cad 	.word	0x20000cad
 8004b94:	20000cae 	.word	0x20000cae
	    kapi1AcSure=5;
 8004b98:	4b4a      	ldr	r3, [pc, #296]	@ (8004cc4 <eepromKontrol+0x46c>)
 8004b9a:	2205      	movs	r2, #5
 8004b9c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8004b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8004cc8 <eepromKontrol+0x470>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d902      	bls.n	8004bac <eepromKontrol+0x354>
	    kapi2Tip=1;
 8004ba6:	4b48      	ldr	r3, [pc, #288]	@ (8004cc8 <eepromKontrol+0x470>)
 8004ba8:	2201      	movs	r2, #1
 8004baa:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8004bac:	4b47      	ldr	r3, [pc, #284]	@ (8004ccc <eepromKontrol+0x474>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b05      	cmp	r3, #5
 8004bb2:	d902      	bls.n	8004bba <eepromKontrol+0x362>
	    kapi2AcSure=5;
 8004bb4:	4b45      	ldr	r3, [pc, #276]	@ (8004ccc <eepromKontrol+0x474>)
 8004bb6:	2205      	movs	r2, #5
 8004bb8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8004bba:	4b45      	ldr	r3, [pc, #276]	@ (8004cd0 <eepromKontrol+0x478>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d902      	bls.n	8004bc8 <eepromKontrol+0x370>
	    kapitablaTip=1;
 8004bc2:	4b43      	ldr	r3, [pc, #268]	@ (8004cd0 <eepromKontrol+0x478>)
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>3) {
 8004bc8:	4b42      	ldr	r3, [pc, #264]	@ (8004cd4 <eepromKontrol+0x47c>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d902      	bls.n	8004bd6 <eepromKontrol+0x37e>
	    kapiTablaAcKonum=3;
 8004bd0:	4b40      	ldr	r3, [pc, #256]	@ (8004cd4 <eepromKontrol+0x47c>)
 8004bd2:	2203      	movs	r2, #3
 8004bd4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8004bd6:	4b40      	ldr	r3, [pc, #256]	@ (8004cd8 <eepromKontrol+0x480>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b05      	cmp	r3, #5
 8004bdc:	d902      	bls.n	8004be4 <eepromKontrol+0x38c>
	    kapiTablaAcSure=5;
 8004bde:	4b3e      	ldr	r3, [pc, #248]	@ (8004cd8 <eepromKontrol+0x480>)
 8004be0:	2205      	movs	r2, #5
 8004be2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8004be4:	4b3d      	ldr	r3, [pc, #244]	@ (8004cdc <eepromKontrol+0x484>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d902      	bls.n	8004bf2 <eepromKontrol+0x39a>
	    yukariYavasLimit=0;
 8004bec:	4b3b      	ldr	r3, [pc, #236]	@ (8004cdc <eepromKontrol+0x484>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8004bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ce0 <eepromKontrol+0x488>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d902      	bls.n	8004c00 <eepromKontrol+0x3a8>
	    devirmeYuruyusSecim=0;
 8004bfa:	4b39      	ldr	r3, [pc, #228]	@ (8004ce0 <eepromKontrol+0x488>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8004c00:	4b38      	ldr	r3, [pc, #224]	@ (8004ce4 <eepromKontrol+0x48c>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d902      	bls.n	8004c0e <eepromKontrol+0x3b6>
	    devirmeYukariIleriLimit=1;
 8004c08:	4b36      	ldr	r3, [pc, #216]	@ (8004ce4 <eepromKontrol+0x48c>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8004c0e:	4b36      	ldr	r3, [pc, #216]	@ (8004ce8 <eepromKontrol+0x490>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d902      	bls.n	8004c1c <eepromKontrol+0x3c4>
	    devirmeAsagiGeriLimit=1;
 8004c16:	4b34      	ldr	r3, [pc, #208]	@ (8004ce8 <eepromKontrol+0x490>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8004c1c:	4b33      	ldr	r3, [pc, #204]	@ (8004cec <eepromKontrol+0x494>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d902      	bls.n	8004c2a <eepromKontrol+0x3d2>
	    devirmeSilindirTipi=0;
 8004c24:	4b31      	ldr	r3, [pc, #196]	@ (8004cec <eepromKontrol+0x494>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8004c2a:	4b31      	ldr	r3, [pc, #196]	@ (8004cf0 <eepromKontrol+0x498>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d902      	bls.n	8004c38 <eepromKontrol+0x3e0>
	    platformSilindirTipi=0;
 8004c32:	4b2f      	ldr	r3, [pc, #188]	@ (8004cf0 <eepromKontrol+0x498>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8004c38:	4b2e      	ldr	r3, [pc, #184]	@ (8004cf4 <eepromKontrol+0x49c>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b05      	cmp	r3, #5
 8004c3e:	d902      	bls.n	8004c46 <eepromKontrol+0x3ee>
	    yukariValfTmr=0;
 8004c40:	4b2c      	ldr	r3, [pc, #176]	@ (8004cf4 <eepromKontrol+0x49c>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8004c46:	4b2c      	ldr	r3, [pc, #176]	@ (8004cf8 <eepromKontrol+0x4a0>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	2b05      	cmp	r3, #5
 8004c4c:	d902      	bls.n	8004c54 <eepromKontrol+0x3fc>
	    asagiValfTmr=0;
 8004c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8004cf8 <eepromKontrol+0x4a0>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8004c54:	4b29      	ldr	r3, [pc, #164]	@ (8004cfc <eepromKontrol+0x4a4>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b05      	cmp	r3, #5
 8004c5a:	d902      	bls.n	8004c62 <eepromKontrol+0x40a>
	    devirmeYukariIleriTmr=0;
 8004c5c:	4b27      	ldr	r3, [pc, #156]	@ (8004cfc <eepromKontrol+0x4a4>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8004c62:	4b27      	ldr	r3, [pc, #156]	@ (8004d00 <eepromKontrol+0x4a8>)
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b05      	cmp	r3, #5
 8004c68:	d902      	bls.n	8004c70 <eepromKontrol+0x418>
	    devirmeAsagiGeriTmr=0;
 8004c6a:	4b25      	ldr	r3, [pc, #148]	@ (8004d00 <eepromKontrol+0x4a8>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8004c70:	4b24      	ldr	r3, [pc, #144]	@ (8004d04 <eepromKontrol+0x4ac>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2bb4      	cmp	r3, #180	@ 0xb4
 8004c76:	d902      	bls.n	8004c7e <eepromKontrol+0x426>
	    makineCalismaTmr=60;
 8004c78:	4b22      	ldr	r3, [pc, #136]	@ (8004d04 <eepromKontrol+0x4ac>)
 8004c7a:	223c      	movs	r2, #60	@ 0x3c
 8004c7c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8004c7e:	4b22      	ldr	r3, [pc, #136]	@ (8004d08 <eepromKontrol+0x4b0>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d902      	bls.n	8004c8c <eepromKontrol+0x434>
	    buzzer=0;
 8004c86:	4b20      	ldr	r3, [pc, #128]	@ (8004d08 <eepromKontrol+0x4b0>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8004c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8004d0c <eepromKontrol+0x4b4>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d902      	bls.n	8004c9a <eepromKontrol+0x442>
	    demoMode=0;
 8004c94:	4b1d      	ldr	r3, [pc, #116]	@ (8004d0c <eepromKontrol+0x4b4>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8004c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8004d10 <eepromKontrol+0x4b8>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d902      	bls.n	8004ca8 <eepromKontrol+0x450>
	    calismaSayModu=0;
 8004ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d10 <eepromKontrol+0x4b8>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8004ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d14 <eepromKontrol+0x4bc>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d902      	bls.n	8004cb6 <eepromKontrol+0x45e>
	    dilSecim=0;
 8004cb0:	4b18      	ldr	r3, [pc, #96]	@ (8004d14 <eepromKontrol+0x4bc>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8004cb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004cba:	f002 ff4d 	bl	8007b58 <HAL_Delay>
}
 8004cbe:	bf00      	nop
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	20000c9d 	.word	0x20000c9d
 8004cc8:	20000c8e 	.word	0x20000c8e
 8004ccc:	20000c9e 	.word	0x20000c9e
 8004cd0:	20000c8f 	.word	0x20000c8f
 8004cd4:	20000c91 	.word	0x20000c91
 8004cd8:	20000c9f 	.word	0x20000c9f
 8004cdc:	20000c92 	.word	0x20000c92
 8004ce0:	20000c93 	.word	0x20000c93
 8004ce4:	20000c94 	.word	0x20000c94
 8004ce8:	20000c95 	.word	0x20000c95
 8004cec:	20000c96 	.word	0x20000c96
 8004cf0:	20000c97 	.word	0x20000c97
 8004cf4:	20000c98 	.word	0x20000c98
 8004cf8:	20000c99 	.word	0x20000c99
 8004cfc:	20000c9a 	.word	0x20000c9a
 8004d00:	20000c9b 	.word	0x20000c9b
 8004d04:	20000c9c 	.word	0x20000c9c
 8004d08:	20000ca0 	.word	0x20000ca0
 8004d0c:	20000ca2 	.word	0x20000ca2
 8004d10:	20000ca3 	.word	0x20000ca3
 8004d14:	20000ca4 	.word	0x20000ca4

08004d18 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8004d18:	b590      	push	{r4, r7, lr}
 8004d1a:	b089      	sub	sp, #36	@ 0x24
 8004d1c:	af04      	add	r7, sp, #16
 8004d1e:	4603      	mov	r3, r0
 8004d20:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8004d22:	4b25      	ldr	r3, [pc, #148]	@ (8004db8 <hata2EEPROM+0xa0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	1e5a      	subs	r2, r3, #1
 8004d28:	4b24      	ldr	r3, [pc, #144]	@ (8004dbc <hata2EEPROM+0xa4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	4a24      	ldr	r2, [pc, #144]	@ (8004dc0 <hata2EEPROM+0xa8>)
 8004d30:	5cd3      	ldrb	r3, [r2, r3]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8004d36:	f000 f847 	bl	8004dc8 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8004d3a:	e000      	b.n	8004d3e <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8004d3c:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	e012      	b.n	8004d6a <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8004d44:	4b1d      	ldr	r3, [pc, #116]	@ (8004dbc <hata2EEPROM+0xa4>)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc0 <hata2EEPROM+0xa8>)
 8004d4e:	5cd3      	ldrb	r3, [r2, r3]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d107      	bne.n	8004d64 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8004d54:	4b19      	ldr	r3, [pc, #100]	@ (8004dbc <hata2EEPROM+0xa4>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	4918      	ldr	r1, [pc, #96]	@ (8004dc0 <hata2EEPROM+0xa8>)
 8004d5e:	79fa      	ldrb	r2, [r7, #7]
 8004d60:	54ca      	strb	r2, [r1, r3]
					break;
 8004d62:	e007      	b.n	8004d74 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3301      	adds	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	4b13      	ldr	r3, [pc, #76]	@ (8004db8 <hata2EEPROM+0xa0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	dbe7      	blt.n	8004d44 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 8004d74:	4b11      	ldr	r3, [pc, #68]	@ (8004dbc <hata2EEPROM+0xa4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	b299      	uxth	r1, r3
 8004d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004db8 <hata2EEPROM+0xa0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	b298      	uxth	r0, r3
 8004d80:	4b0e      	ldr	r3, [pc, #56]	@ (8004dbc <hata2EEPROM+0xa4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a0e      	ldr	r2, [pc, #56]	@ (8004dc0 <hata2EEPROM+0xa8>)
 8004d86:	4413      	add	r3, r2
 8004d88:	4a0b      	ldr	r2, [pc, #44]	@ (8004db8 <hata2EEPROM+0xa0>)
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	b292      	uxth	r2, r2
 8004d8e:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8004d92:	9402      	str	r4, [sp, #8]
 8004d94:	9201      	str	r2, [sp, #4]
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	4603      	mov	r3, r0
 8004d9a:	460a      	mov	r2, r1
 8004d9c:	21a0      	movs	r1, #160	@ 0xa0
 8004d9e:	4809      	ldr	r0, [pc, #36]	@ (8004dc4 <hata2EEPROM+0xac>)
 8004da0:	f003 fe22 	bl	80089e8 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8004da4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004da8:	f002 fed6 	bl	8007b58 <HAL_Delay>
	eepromKontrol();
 8004dac:	f7ff fd54 	bl	8004858 <eepromKontrol>
}
 8004db0:	bf00      	nop
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd90      	pop	{r4, r7, pc}
 8004db8:	20000938 	.word	0x20000938
 8004dbc:	2000093c 	.word	0x2000093c
 8004dc0:	20000c18 	.word	0x20000c18
 8004dc4:	20000e44 	.word	0x20000e44

08004dc8 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8004dce:	2300      	movs	r3, #0
 8004dd0:	607b      	str	r3, [r7, #4]
 8004dd2:	e009      	b.n	8004de8 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8004dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8004e00 <eepromDataFillWithEmpty+0x38>)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ddc:	4a09      	ldr	r2, [pc, #36]	@ (8004e04 <eepromDataFillWithEmpty+0x3c>)
 8004dde:	2100      	movs	r1, #0
 8004de0:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3301      	adds	r3, #1
 8004de6:	607b      	str	r3, [r7, #4]
 8004de8:	4b07      	ldr	r3, [pc, #28]	@ (8004e08 <eepromDataFillWithEmpty+0x40>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	dbf0      	blt.n	8004dd4 <eepromDataFillWithEmpty+0xc>
	}
}
 8004df2:	bf00      	nop
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bc80      	pop	{r7}
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	20000910 	.word	0x20000910
 8004e04:	20000c18 	.word	0x20000c18
 8004e08:	20000938 	.word	0x20000938

08004e0c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8004e14:	4b04      	ldr	r3, [pc, #16]	@ (8004e28 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	4a03      	ldr	r2, [pc, #12]	@ (8004e28 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8004e1c:	6013      	str	r3, [r2, #0]
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr
 8004e28:	20000c60 	.word	0x20000c60

08004e2c <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8004e2c:	b5b0      	push	{r4, r5, r7, lr}
 8004e2e:	b08a      	sub	sp, #40	@ 0x28
 8004e30:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e32:	f002 fe2f 	bl	8007a94 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8004e36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004e3a:	f002 fe8d 	bl	8007b58 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e3e:	f002 fa63 	bl	8007308 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e42:	f002 fb85 	bl	8007550 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8004e46:	f002 fb59 	bl	80074fc <MX_USART1_UART_Init>
  MX_CAN_Init();
 8004e4a:	f002 faa3 	bl	8007394 <MX_CAN_Init>
  MX_I2C1_Init();
 8004e4e:	f002 fad5 	bl	80073fc <MX_I2C1_Init>
  MX_TIM1_Init();
 8004e52:	f002 fb01 	bl	8007458 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004e56:	2201      	movs	r2, #1
 8004e58:	2140      	movs	r1, #64	@ 0x40
 8004e5a:	484e      	ldr	r0, [pc, #312]	@ (8004f94 <main+0x168>)
 8004e5c:	f003 fb21 	bl	80084a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004e60:	2201      	movs	r2, #1
 8004e62:	2180      	movs	r1, #128	@ 0x80
 8004e64:	484b      	ldr	r0, [pc, #300]	@ (8004f94 <main+0x168>)
 8004e66:	f003 fb1c 	bl	80084a2 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8004e6a:	200a      	movs	r0, #10
 8004e6c:	f002 fe74 	bl	8007b58 <HAL_Delay>
  lcd_init();
 8004e70:	f7fb faf3 	bl	800045a <lcd_init>
  HAL_Delay(10);
 8004e74:	200a      	movs	r0, #10
 8004e76:	f002 fe6f 	bl	8007b58 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8004e7a:	4847      	ldr	r0, [pc, #284]	@ (8004f98 <main+0x16c>)
 8004e7c:	f005 f974 	bl	800a168 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004e80:	bf00      	nop
 8004e82:	4846      	ldr	r0, [pc, #280]	@ (8004f9c <main+0x170>)
 8004e84:	f004 f91f 	bl	80090c6 <HAL_I2C_GetError>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d0f9      	beq.n	8004e82 <main+0x56>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004e8e:	bf00      	nop
 8004e90:	4842      	ldr	r0, [pc, #264]	@ (8004f9c <main+0x170>)
 8004e92:	f004 f90b 	bl	80090ac <HAL_I2C_GetState>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d1f9      	bne.n	8004e90 <main+0x64>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004ea2:	483c      	ldr	r0, [pc, #240]	@ (8004f94 <main+0x168>)
 8004ea4:	f003 fafd 	bl	80084a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004eae:	4839      	ldr	r0, [pc, #228]	@ (8004f94 <main+0x168>)
 8004eb0:	f003 faf7 	bl	80084a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2104      	movs	r1, #4
 8004eb8:	4836      	ldr	r0, [pc, #216]	@ (8004f94 <main+0x168>)
 8004eba:	f003 faf2 	bl	80084a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2102      	movs	r1, #2
 8004ec2:	4834      	ldr	r0, [pc, #208]	@ (8004f94 <main+0x168>)
 8004ec4:	f003 faed 	bl	80084a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2101      	movs	r1, #1
 8004ecc:	4831      	ldr	r0, [pc, #196]	@ (8004f94 <main+0x168>)
 8004ece:	f003 fae8 	bl	80084a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2120      	movs	r1, #32
 8004ed6:	4832      	ldr	r0, [pc, #200]	@ (8004fa0 <main+0x174>)
 8004ed8:	f003 fae3 	bl	80084a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004edc:	2200      	movs	r2, #0
 8004ede:	2110      	movs	r1, #16
 8004ee0:	482f      	ldr	r0, [pc, #188]	@ (8004fa0 <main+0x174>)
 8004ee2:	f003 fade 	bl	80084a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2180      	movs	r1, #128	@ 0x80
 8004eea:	482e      	ldr	r0, [pc, #184]	@ (8004fa4 <main+0x178>)
 8004eec:	f003 fad9 	bl	80084a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2140      	movs	r1, #64	@ 0x40
 8004ef4:	482b      	ldr	r0, [pc, #172]	@ (8004fa4 <main+0x178>)
 8004ef6:	f003 fad4 	bl	80084a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8004efa:	2200      	movs	r2, #0
 8004efc:	2120      	movs	r1, #32
 8004efe:	4829      	ldr	r0, [pc, #164]	@ (8004fa4 <main+0x178>)
 8004f00:	f003 facf 	bl	80084a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8004f04:	2200      	movs	r2, #0
 8004f06:	2110      	movs	r1, #16
 8004f08:	4826      	ldr	r0, [pc, #152]	@ (8004fa4 <main+0x178>)
 8004f0a:	f003 faca 	bl	80084a2 <HAL_GPIO_WritePin>

  //HAL_UART_Receive_IT(&huart1, &RxByte, 1);

  i2cTest();
 8004f0e:	f000 f85d 	bl	8004fcc <i2cTest>
  HAL_Delay(100);
 8004f12:	2064      	movs	r0, #100	@ 0x64
 8004f14:	f002 fe20 	bl	8007b58 <HAL_Delay>
  lcd_print(1,1,"   ESP-XL-V1    ");
 8004f18:	4a23      	ldr	r2, [pc, #140]	@ (8004fa8 <main+0x17c>)
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	2001      	movs	r0, #1
 8004f1e:	f7fb face 	bl	80004be <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8004f22:	4a22      	ldr	r2, [pc, #136]	@ (8004fac <main+0x180>)
 8004f24:	2101      	movs	r1, #1
 8004f26:	2002      	movs	r0, #2
 8004f28:	f7fb fac9 	bl	80004be <lcd_print>
  HAL_Delay(1000);
 8004f2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f30:	f002 fe12 	bl	8007b58 <HAL_Delay>
  lcd_clear();
 8004f34:	f7fb fad8 	bl	80004e8 <lcd_clear>

  eepromKontrol();
 8004f38:	f7ff fc8e 	bl	8004858 <eepromKontrol>

  backLightTimer = millis;
 8004f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8004fb0 <main+0x184>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb4 <main+0x188>)
 8004f42:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004f44:	4b1c      	ldr	r3, [pc, #112]	@ (8004fb8 <main+0x18c>)
 8004f46:	1d3c      	adds	r4, r7, #4
 8004f48:	461d      	mov	r5, r3
 8004f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004f56:	1d3b      	adds	r3, r7, #4
 8004f58:	2100      	movs	r1, #0
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f005 fddc 	bl	800ab18 <osThreadCreate>
 8004f60:	4603      	mov	r3, r0
 8004f62:	4a16      	ldr	r2, [pc, #88]	@ (8004fbc <main+0x190>)
 8004f64:	6013      	str	r3, [r2, #0]

  uartMutex = xSemaphoreCreateMutex();
 8004f66:	2001      	movs	r0, #1
 8004f68:	f005 ffc8 	bl	800aefc <xQueueCreateMutex>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	4a14      	ldr	r2, [pc, #80]	@ (8004fc0 <main+0x194>)
 8004f70:	6013      	str	r3, [r2, #0]
  xTaskCreate(mainTask, "mainTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8004f72:	2300      	movs	r3, #0
 8004f74:	9301      	str	r3, [sp, #4]
 8004f76:	2301      	movs	r3, #1
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2280      	movs	r2, #128	@ 0x80
 8004f7e:	4911      	ldr	r1, [pc, #68]	@ (8004fc4 <main+0x198>)
 8004f80:	4811      	ldr	r0, [pc, #68]	@ (8004fc8 <main+0x19c>)
 8004f82:	f006 fa08 	bl	800b396 <xTaskCreate>

  vTaskStartScheduler();
 8004f86:	f006 fb6b 	bl	800b660 <vTaskStartScheduler>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004f8a:	f005 fdbe 	bl	800ab0a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8004f8e:	bf00      	nop
 8004f90:	e7fd      	b.n	8004f8e <main+0x162>
 8004f92:	bf00      	nop
 8004f94:	40010c00 	.word	0x40010c00
 8004f98:	20000ee0 	.word	0x20000ee0
 8004f9c:	20000e44 	.word	0x20000e44
 8004fa0:	40011000 	.word	0x40011000
 8004fa4:	40010800 	.word	0x40010800
 8004fa8:	0800d5bc 	.word	0x0800d5bc
 8004fac:	0800d5d0 	.word	0x0800d5d0
 8004fb0:	20000c60 	.word	0x20000c60
 8004fb4:	20000c7c 	.word	0x20000c7c
 8004fb8:	0800d5fc 	.word	0x0800d5fc
 8004fbc:	20000f28 	.word	0x20000f28
 8004fc0:	20000edc 	.word	0x20000edc
 8004fc4:	0800d5e4 	.word	0x0800d5e4
 8004fc8:	08005129 	.word	0x08005129

08004fcc <i2cTest>:

  }
  /* USER CODE END 3 */
}

void i2cTest(void) {
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8004fd2:	463b      	mov	r3, r7
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	609a      	str	r2, [r3, #8]
 8004fdc:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8004fde:	4b50      	ldr	r3, [pc, #320]	@ (8005120 <i2cTest+0x154>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4b4e      	ldr	r3, [pc, #312]	@ (8005120 <i2cTest+0x154>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0201 	bic.w	r2, r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8004fee:	484c      	ldr	r0, [pc, #304]	@ (8005120 <i2cTest+0x154>)
 8004ff0:	f003 fbcc 	bl	800878c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ff4:	23c0      	movs	r3, #192	@ 0xc0
 8004ff6:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8004ff8:	2311      	movs	r3, #17
 8004ffa:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8005000:	2303      	movs	r3, #3
 8005002:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8005004:	463b      	mov	r3, r7
 8005006:	4619      	mov	r1, r3
 8005008:	4846      	ldr	r0, [pc, #280]	@ (8005124 <i2cTest+0x158>)
 800500a:	f002 ffd3 	bl	8007fb4 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800500e:	2201      	movs	r2, #1
 8005010:	2140      	movs	r1, #64	@ 0x40
 8005012:	4844      	ldr	r0, [pc, #272]	@ (8005124 <i2cTest+0x158>)
 8005014:	f003 fa45 	bl	80084a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8005018:	2201      	movs	r2, #1
 800501a:	2180      	movs	r1, #128	@ 0x80
 800501c:	4841      	ldr	r0, [pc, #260]	@ (8005124 <i2cTest+0x158>)
 800501e:	f003 fa40 	bl	80084a2 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8005022:	200a      	movs	r0, #10
 8005024:	f002 fd98 	bl	8007b58 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8005028:	bf00      	nop
 800502a:	2140      	movs	r1, #64	@ 0x40
 800502c:	483d      	ldr	r0, [pc, #244]	@ (8005124 <i2cTest+0x158>)
 800502e:	f003 fa21 	bl	8008474 <HAL_GPIO_ReadPin>
 8005032:	4603      	mov	r3, r0
 8005034:	2b01      	cmp	r3, #1
 8005036:	d006      	beq.n	8005046 <i2cTest+0x7a>
 8005038:	2180      	movs	r1, #128	@ 0x80
 800503a:	483a      	ldr	r0, [pc, #232]	@ (8005124 <i2cTest+0x158>)
 800503c:	f003 fa1a 	bl	8008474 <HAL_GPIO_ReadPin>
 8005040:	4603      	mov	r3, r0
 8005042:	2b01      	cmp	r3, #1
 8005044:	d1f1      	bne.n	800502a <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8005046:	2200      	movs	r2, #0
 8005048:	2180      	movs	r1, #128	@ 0x80
 800504a:	4836      	ldr	r0, [pc, #216]	@ (8005124 <i2cTest+0x158>)
 800504c:	f003 fa29 	bl	80084a2 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8005050:	200a      	movs	r0, #10
 8005052:	f002 fd81 	bl	8007b58 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8005056:	bf00      	nop
 8005058:	2180      	movs	r1, #128	@ 0x80
 800505a:	4832      	ldr	r0, [pc, #200]	@ (8005124 <i2cTest+0x158>)
 800505c:	f003 fa0a 	bl	8008474 <HAL_GPIO_ReadPin>
 8005060:	4603      	mov	r3, r0
 8005062:	2b01      	cmp	r3, #1
 8005064:	d0f8      	beq.n	8005058 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8005066:	2200      	movs	r2, #0
 8005068:	2140      	movs	r1, #64	@ 0x40
 800506a:	482e      	ldr	r0, [pc, #184]	@ (8005124 <i2cTest+0x158>)
 800506c:	f003 fa19 	bl	80084a2 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005070:	200a      	movs	r0, #10
 8005072:	f002 fd71 	bl	8007b58 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8005076:	bf00      	nop
 8005078:	2140      	movs	r1, #64	@ 0x40
 800507a:	482a      	ldr	r0, [pc, #168]	@ (8005124 <i2cTest+0x158>)
 800507c:	f003 f9fa 	bl	8008474 <HAL_GPIO_ReadPin>
 8005080:	4603      	mov	r3, r0
 8005082:	2b01      	cmp	r3, #1
 8005084:	d0f8      	beq.n	8005078 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8005086:	2201      	movs	r2, #1
 8005088:	2140      	movs	r1, #64	@ 0x40
 800508a:	4826      	ldr	r0, [pc, #152]	@ (8005124 <i2cTest+0x158>)
 800508c:	f003 fa09 	bl	80084a2 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005090:	200a      	movs	r0, #10
 8005092:	f002 fd61 	bl	8007b58 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8005096:	bf00      	nop
 8005098:	2140      	movs	r1, #64	@ 0x40
 800509a:	4822      	ldr	r0, [pc, #136]	@ (8005124 <i2cTest+0x158>)
 800509c:	f003 f9ea 	bl	8008474 <HAL_GPIO_ReadPin>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d1f8      	bne.n	8005098 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80050a6:	2201      	movs	r2, #1
 80050a8:	2180      	movs	r1, #128	@ 0x80
 80050aa:	481e      	ldr	r0, [pc, #120]	@ (8005124 <i2cTest+0x158>)
 80050ac:	f003 f9f9 	bl	80084a2 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80050b0:	200a      	movs	r0, #10
 80050b2:	f002 fd51 	bl	8007b58 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80050b6:	bf00      	nop
 80050b8:	2180      	movs	r1, #128	@ 0x80
 80050ba:	481a      	ldr	r0, [pc, #104]	@ (8005124 <i2cTest+0x158>)
 80050bc:	f003 f9da 	bl	8008474 <HAL_GPIO_ReadPin>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d1f8      	bne.n	80050b8 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050c6:	23c0      	movs	r3, #192	@ 0xc0
 80050c8:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80050ca:	2312      	movs	r3, #18
 80050cc:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80050ce:	2301      	movs	r3, #1
 80050d0:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80050d2:	2303      	movs	r3, #3
 80050d4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80050d6:	463b      	mov	r3, r7
 80050d8:	4619      	mov	r1, r3
 80050da:	4812      	ldr	r0, [pc, #72]	@ (8005124 <i2cTest+0x158>)
 80050dc:	f002 ff6a 	bl	8007fb4 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80050e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005120 <i2cTest+0x154>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005120 <i2cTest+0x154>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050ee:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80050f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005120 <i2cTest+0x154>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005120 <i2cTest+0x154>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050fe:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8005100:	4b07      	ldr	r3, [pc, #28]	@ (8005120 <i2cTest+0x154>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4b06      	ldr	r3, [pc, #24]	@ (8005120 <i2cTest+0x154>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8005110:	4803      	ldr	r0, [pc, #12]	@ (8005120 <i2cTest+0x154>)
 8005112:	f003 f9f7 	bl	8008504 <HAL_I2C_Init>
}
 8005116:	bf00      	nop
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	20000e44 	.word	0x20000e44
 8005124:	40010c00 	.word	0x40010c00

08005128 <mainTask>:

void mainTask(void *pvParameters) {
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af04      	add	r7, sp, #16
 800512e:	6078      	str	r0, [r7, #4]
	while(1) {
		//WiFi_Connect();
		if(millis - backLightTimer >= lcdBacklightSure) {
 8005130:	4b7b      	ldr	r3, [pc, #492]	@ (8005320 <mainTask+0x1f8>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	4b7b      	ldr	r3, [pc, #492]	@ (8005324 <mainTask+0x1fc>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	4a7b      	ldr	r2, [pc, #492]	@ (8005328 <mainTask+0x200>)
 800513c:	7812      	ldrb	r2, [r2, #0]
 800513e:	4293      	cmp	r3, r2
 8005140:	d303      	bcc.n	800514a <mainTask+0x22>
			lcd_backlight(0);
 8005142:	2000      	movs	r0, #0
 8005144:	f7fb f9da 	bl	80004fc <lcd_backlight>
 8005148:	e002      	b.n	8005150 <mainTask+0x28>
		} else {
			lcd_backlight(1);
 800514a:	2001      	movs	r0, #1
 800514c:	f7fb f9d6 	bl	80004fc <lcd_backlight>
		}

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005150:	2101      	movs	r1, #1
 8005152:	4876      	ldr	r0, [pc, #472]	@ (800532c <mainTask+0x204>)
 8005154:	f003 f98e 	bl	8008474 <HAL_GPIO_ReadPin>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d136      	bne.n	80051cc <mainTask+0xa4>
 800515e:	2108      	movs	r1, #8
 8005160:	4873      	ldr	r0, [pc, #460]	@ (8005330 <mainTask+0x208>)
 8005162:	f003 f987 	bl	8008474 <HAL_GPIO_ReadPin>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d12f      	bne.n	80051cc <mainTask+0xa4>
 800516c:	2102      	movs	r1, #2
 800516e:	486f      	ldr	r0, [pc, #444]	@ (800532c <mainTask+0x204>)
 8005170:	f003 f980 	bl	8008474 <HAL_GPIO_ReadPin>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d128      	bne.n	80051cc <mainTask+0xa4>
 800517a:	2104      	movs	r1, #4
 800517c:	486b      	ldr	r0, [pc, #428]	@ (800532c <mainTask+0x204>)
 800517e:	f003 f979 	bl	8008474 <HAL_GPIO_ReadPin>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d121      	bne.n	80051cc <mainTask+0xa4>
 8005188:	2108      	movs	r1, #8
 800518a:	4868      	ldr	r0, [pc, #416]	@ (800532c <mainTask+0x204>)
 800518c:	f003 f972 	bl	8008474 <HAL_GPIO_ReadPin>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d11a      	bne.n	80051cc <mainTask+0xa4>
 8005196:	2180      	movs	r1, #128	@ 0x80
 8005198:	4865      	ldr	r0, [pc, #404]	@ (8005330 <mainTask+0x208>)
 800519a:	f003 f96b 	bl	8008474 <HAL_GPIO_ReadPin>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d113      	bne.n	80051cc <mainTask+0xa4>
 80051a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80051a8:	4861      	ldr	r0, [pc, #388]	@ (8005330 <mainTask+0x208>)
 80051aa:	f003 f963 	bl	8008474 <HAL_GPIO_ReadPin>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d10b      	bne.n	80051cc <mainTask+0xa4>
 80051b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80051b8:	485d      	ldr	r0, [pc, #372]	@ (8005330 <mainTask+0x208>)
 80051ba:	f003 f95b 	bl	8008474 <HAL_GPIO_ReadPin>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d103      	bne.n	80051cc <mainTask+0xa4>
			butonKontrol=0;
 80051c4:	4b5b      	ldr	r3, [pc, #364]	@ (8005334 <mainTask+0x20c>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	e003      	b.n	80051d4 <mainTask+0xac>
		} else {
			backLightTimer = millis;
 80051cc:	4b54      	ldr	r3, [pc, #336]	@ (8005320 <mainTask+0x1f8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a54      	ldr	r2, [pc, #336]	@ (8005324 <mainTask+0x1fc>)
 80051d2:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80051d4:	4b58      	ldr	r3, [pc, #352]	@ (8005338 <mainTask+0x210>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d03c      	beq.n	8005256 <mainTask+0x12e>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80051dc:	bf00      	nop
 80051de:	4857      	ldr	r0, [pc, #348]	@ (800533c <mainTask+0x214>)
 80051e0:	f003 ff71 	bl	80090c6 <HAL_I2C_GetError>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d0f9      	beq.n	80051de <mainTask+0xb6>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80051ea:	bf00      	nop
 80051ec:	4853      	ldr	r0, [pc, #332]	@ (800533c <mainTask+0x214>)
 80051ee:	f003 ff5d 	bl	80090ac <HAL_I2C_GetState>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d1f9      	bne.n	80051ec <mainTask+0xc4>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 80051f8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80051fc:	9302      	str	r3, [sp, #8]
 80051fe:	233f      	movs	r3, #63	@ 0x3f
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	4b4f      	ldr	r3, [pc, #316]	@ (8005340 <mainTask+0x218>)
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	233f      	movs	r3, #63	@ 0x3f
 8005208:	2200      	movs	r2, #0
 800520a:	21a0      	movs	r1, #160	@ 0xa0
 800520c:	484b      	ldr	r0, [pc, #300]	@ (800533c <mainTask+0x214>)
 800520e:	f003 fbeb 	bl	80089e8 <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 8005212:	2005      	movs	r0, #5
 8005214:	f002 fca0 	bl	8007b58 <HAL_Delay>

		  hafizaYaz=0;
 8005218:	4b47      	ldr	r3, [pc, #284]	@ (8005338 <mainTask+0x210>)
 800521a:	2200      	movs	r2, #0
 800521c:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 800521e:	4b49      	ldr	r3, [pc, #292]	@ (8005344 <mainTask+0x21c>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d105      	bne.n	8005232 <mainTask+0x10a>
			  lcd_print(2,1,"Data yazildi    ");
 8005226:	4a48      	ldr	r2, [pc, #288]	@ (8005348 <mainTask+0x220>)
 8005228:	2101      	movs	r1, #1
 800522a:	2002      	movs	r0, #2
 800522c:	f7fb f947 	bl	80004be <lcd_print>
 8005230:	e008      	b.n	8005244 <mainTask+0x11c>
		  } else if(dilSecim==1) {
 8005232:	4b44      	ldr	r3, [pc, #272]	@ (8005344 <mainTask+0x21c>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d104      	bne.n	8005244 <mainTask+0x11c>
			  lcd_print(2,1,"Data Wrote      ");
 800523a:	4a44      	ldr	r2, [pc, #272]	@ (800534c <mainTask+0x224>)
 800523c:	2101      	movs	r1, #1
 800523e:	2002      	movs	r0, #2
 8005240:	f7fb f93d 	bl	80004be <lcd_print>
		  }

		  HAL_Delay(1000);
 8005244:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005248:	f002 fc86 	bl	8007b58 <HAL_Delay>
		  lcd_clear();
 800524c:	f7fb f94c 	bl	80004e8 <lcd_clear>
		  mesajYazildi=0;
 8005250:	4b3f      	ldr	r3, [pc, #252]	@ (8005350 <mainTask+0x228>)
 8005252:	2200      	movs	r2, #0
 8005254:	701a      	strb	r2, [r3, #0]
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8005256:	4b3f      	ldr	r3, [pc, #252]	@ (8005354 <mainTask+0x22c>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	f083 0301 	eor.w	r3, r3, #1
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 8097 	beq.w	8005394 <mainTask+0x26c>
 8005266:	4835      	ldr	r0, [pc, #212]	@ (800533c <mainTask+0x214>)
 8005268:	f003 ff20 	bl	80090ac <HAL_I2C_GetState>
 800526c:	4603      	mov	r3, r0
 800526e:	2b20      	cmp	r3, #32
 8005270:	f040 8090 	bne.w	8005394 <mainTask+0x26c>
		  if(ilkOkuma==0) {
 8005274:	4b38      	ldr	r3, [pc, #224]	@ (8005358 <mainTask+0x230>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	f083 0301 	eor.w	r3, r3, #1
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d044      	beq.n	800530c <mainTask+0x1e4>
			  lcd_print(1,1,"   **EEPROM**   ");
 8005282:	4a36      	ldr	r2, [pc, #216]	@ (800535c <mainTask+0x234>)
 8005284:	2101      	movs	r1, #1
 8005286:	2001      	movs	r0, #1
 8005288:	f7fb f919 	bl	80004be <lcd_print>
			  if(dilSecim==0) {
 800528c:	4b2d      	ldr	r3, [pc, #180]	@ (8005344 <mainTask+0x21c>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d105      	bne.n	80052a0 <mainTask+0x178>
				  lcd_print(2,1,"Data Okunuyor...");
 8005294:	4a32      	ldr	r2, [pc, #200]	@ (8005360 <mainTask+0x238>)
 8005296:	2101      	movs	r1, #1
 8005298:	2002      	movs	r0, #2
 800529a:	f7fb f910 	bl	80004be <lcd_print>
 800529e:	e008      	b.n	80052b2 <mainTask+0x18a>
			  } else if(dilSecim==1) {
 80052a0:	4b28      	ldr	r3, [pc, #160]	@ (8005344 <mainTask+0x21c>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d104      	bne.n	80052b2 <mainTask+0x18a>
				  lcd_print(2,1,"Data Reading... ");
 80052a8:	4a2e      	ldr	r2, [pc, #184]	@ (8005364 <mainTask+0x23c>)
 80052aa:	2101      	movs	r1, #1
 80052ac:	2002      	movs	r0, #2
 80052ae:	f7fb f906 	bl	80004be <lcd_print>
			  }
			  HAL_Delay(1000);
 80052b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80052b6:	f002 fc4f 	bl	8007b58 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80052ba:	bf00      	nop
 80052bc:	481f      	ldr	r0, [pc, #124]	@ (800533c <mainTask+0x214>)
 80052be:	f003 ff02 	bl	80090c6 <HAL_I2C_GetError>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d0f9      	beq.n	80052bc <mainTask+0x194>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80052c8:	e003      	b.n	80052d2 <mainTask+0x1aa>
				  HAL_Delay(1000);
 80052ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80052ce:	f002 fc43 	bl	8007b58 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80052d2:	481a      	ldr	r0, [pc, #104]	@ (800533c <mainTask+0x214>)
 80052d4:	f003 feea 	bl	80090ac <HAL_I2C_GetState>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d1f5      	bne.n	80052ca <mainTask+0x1a2>
			  }

			  if(dilSecim==0) {
 80052de:	4b19      	ldr	r3, [pc, #100]	@ (8005344 <mainTask+0x21c>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d105      	bne.n	80052f2 <mainTask+0x1ca>
				  lcd_print(2,1,"Data Okundu.    ");
 80052e6:	4a20      	ldr	r2, [pc, #128]	@ (8005368 <mainTask+0x240>)
 80052e8:	2101      	movs	r1, #1
 80052ea:	2002      	movs	r0, #2
 80052ec:	f7fb f8e7 	bl	80004be <lcd_print>
 80052f0:	e008      	b.n	8005304 <mainTask+0x1dc>
			  } else if(dilSecim==1) {
 80052f2:	4b14      	ldr	r3, [pc, #80]	@ (8005344 <mainTask+0x21c>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d104      	bne.n	8005304 <mainTask+0x1dc>
				  lcd_print(2,1,"Data Read.      ");
 80052fa:	4a1c      	ldr	r2, [pc, #112]	@ (800536c <mainTask+0x244>)
 80052fc:	2101      	movs	r1, #1
 80052fe:	2002      	movs	r0, #2
 8005300:	f7fb f8dd 	bl	80004be <lcd_print>
			  }

			  ilkOkuma=1;
 8005304:	4b14      	ldr	r3, [pc, #80]	@ (8005358 <mainTask+0x230>)
 8005306:	2201      	movs	r2, #1
 8005308:	701a      	strb	r2, [r3, #0]
 800530a:	e03e      	b.n	800538a <mainTask+0x262>
		  } else {
			  if(dilSecim==0) {
 800530c:	4b0d      	ldr	r3, [pc, #52]	@ (8005344 <mainTask+0x21c>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d12f      	bne.n	8005374 <mainTask+0x24c>
				  lcd_print(2,1,"Deger Kaydedildi");
 8005314:	4a16      	ldr	r2, [pc, #88]	@ (8005370 <mainTask+0x248>)
 8005316:	2101      	movs	r1, #1
 8005318:	2002      	movs	r0, #2
 800531a:	f7fb f8d0 	bl	80004be <lcd_print>
 800531e:	e032      	b.n	8005386 <mainTask+0x25e>
 8005320:	20000c60 	.word	0x20000c60
 8005324:	20000c7c 	.word	0x20000c7c
 8005328:	20000940 	.word	0x20000940
 800532c:	40010800 	.word	0x40010800
 8005330:	40011000 	.word	0x40011000
 8005334:	20000cb2 	.word	0x20000cb2
 8005338:	20000caf 	.word	0x20000caf
 800533c:	20000e44 	.word	0x20000e44
 8005340:	20000c18 	.word	0x20000c18
 8005344:	20000ca4 	.word	0x20000ca4
 8005348:	0800d618 	.word	0x0800d618
 800534c:	0800d62c 	.word	0x0800d62c
 8005350:	20000cb7 	.word	0x20000cb7
 8005354:	20000cb0 	.word	0x20000cb0
 8005358:	20000cb1 	.word	0x20000cb1
 800535c:	0800d640 	.word	0x0800d640
 8005360:	0800d654 	.word	0x0800d654
 8005364:	0800d668 	.word	0x0800d668
 8005368:	0800d67c 	.word	0x0800d67c
 800536c:	0800d690 	.word	0x0800d690
 8005370:	0800d6a4 	.word	0x0800d6a4
			  } else if(dilSecim==1) {
 8005374:	4b88      	ldr	r3, [pc, #544]	@ (8005598 <mainTask+0x470>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d104      	bne.n	8005386 <mainTask+0x25e>
				  lcd_print(2,1,"Value Saved     ");
 800537c:	4a87      	ldr	r2, [pc, #540]	@ (800559c <mainTask+0x474>)
 800537e:	2101      	movs	r1, #1
 8005380:	2002      	movs	r0, #2
 8005382:	f7fb f89c 	bl	80004be <lcd_print>
			  }
			  lcd_clear();
 8005386:	f7fb f8af 	bl	80004e8 <lcd_clear>
		  }

		  eepromKontrol();
 800538a:	f7ff fa65 	bl	8004858 <eepromKontrol>
		  hafizaOku=1;
 800538e:	4b84      	ldr	r3, [pc, #528]	@ (80055a0 <mainTask+0x478>)
 8005390:	2201      	movs	r2, #1
 8005392:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8005394:	4b83      	ldr	r3, [pc, #524]	@ (80055a4 <mainTask+0x47c>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d112      	bne.n	80053c2 <mainTask+0x29a>
 800539c:	2102      	movs	r1, #2
 800539e:	4882      	ldr	r0, [pc, #520]	@ (80055a8 <mainTask+0x480>)
 80053a0:	f003 f868 	bl	8008474 <HAL_GPIO_ReadPin>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d10b      	bne.n	80053c2 <mainTask+0x29a>
 80053aa:	2104      	movs	r1, #4
 80053ac:	487e      	ldr	r0, [pc, #504]	@ (80055a8 <mainTask+0x480>)
 80053ae:	f003 f861 	bl	8008474 <HAL_GPIO_ReadPin>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d104      	bne.n	80053c2 <mainTask+0x29a>
			menuGiris=1;
 80053b8:	4b7a      	ldr	r3, [pc, #488]	@ (80055a4 <mainTask+0x47c>)
 80053ba:	2201      	movs	r2, #1
 80053bc:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80053be:	f7fb f893 	bl	80004e8 <lcd_clear>
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80053c2:	4b78      	ldr	r3, [pc, #480]	@ (80055a4 <mainTask+0x47c>)
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d119      	bne.n	80053fe <mainTask+0x2d6>
 80053ca:	4b78      	ldr	r3, [pc, #480]	@ (80055ac <mainTask+0x484>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d115      	bne.n	80053fe <mainTask+0x2d6>
 80053d2:	4b77      	ldr	r3, [pc, #476]	@ (80055b0 <mainTask+0x488>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d111      	bne.n	80053fe <mainTask+0x2d6>
					lcd_clear();
 80053da:	f7fb f885 	bl	80004e8 <lcd_clear>
					HAL_Delay(10);
 80053de:	200a      	movs	r0, #10
 80053e0:	f002 fbba 	bl	8007b58 <HAL_Delay>
					lcd_print(1, 1, "     ESP-XL     ");
 80053e4:	4a73      	ldr	r2, [pc, #460]	@ (80055b4 <mainTask+0x48c>)
 80053e6:	2101      	movs	r1, #1
 80053e8:	2001      	movs	r0, #1
 80053ea:	f7fb f868 	bl	80004be <lcd_print>
					lcd_print(2, 1, "      RUN       ");
 80053ee:	4a72      	ldr	r2, [pc, #456]	@ (80055b8 <mainTask+0x490>)
 80053f0:	2101      	movs	r1, #1
 80053f2:	2002      	movs	r0, #2
 80053f4:	f7fb f863 	bl	80004be <lcd_print>

					mesajYazildi=1;
 80053f8:	4b6c      	ldr	r3, [pc, #432]	@ (80055ac <mainTask+0x484>)
 80053fa:	2201      	movs	r2, #1
 80053fc:	701a      	strb	r2, [r3, #0]
				}

		if(menuGiris==1) {
 80053fe:	4b69      	ldr	r3, [pc, #420]	@ (80055a4 <mainTask+0x47c>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <mainTask+0x2e2>
			menu();
 8005406:	f7fb f8bb 	bl	8000580 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 800540a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800540e:	486b      	ldr	r0, [pc, #428]	@ (80055bc <mainTask+0x494>)
 8005410:	f003 f85f 	bl	80084d2 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8005414:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005418:	4869      	ldr	r0, [pc, #420]	@ (80055c0 <mainTask+0x498>)
 800541a:	f003 f82b 	bl	8008474 <HAL_GPIO_ReadPin>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <mainTask+0x312>
 8005424:	4b67      	ldr	r3, [pc, #412]	@ (80055c4 <mainTask+0x49c>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	f083 0301 	eor.w	r3, r3, #1
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <mainTask+0x312>
			stopVar=1;
 8005432:	4b65      	ldr	r3, [pc, #404]	@ (80055c8 <mainTask+0x4a0>)
 8005434:	2201      	movs	r2, #1
 8005436:	701a      	strb	r2, [r3, #0]
 8005438:	e002      	b.n	8005440 <mainTask+0x318>
		} else {
			stopVar=0;
 800543a:	4b63      	ldr	r3, [pc, #396]	@ (80055c8 <mainTask+0x4a0>)
 800543c:	2200      	movs	r2, #0
 800543e:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 8005440:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005444:	485e      	ldr	r0, [pc, #376]	@ (80055c0 <mainTask+0x498>)
 8005446:	f003 f815 	bl	8008474 <HAL_GPIO_ReadPin>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d107      	bne.n	8005460 <mainTask+0x338>
 8005450:	4b5e      	ldr	r3, [pc, #376]	@ (80055cc <mainTask+0x4a4>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <mainTask+0x338>
					EmnStopVar=1;
 8005458:	4b5d      	ldr	r3, [pc, #372]	@ (80055d0 <mainTask+0x4a8>)
 800545a:	2201      	movs	r2, #1
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	e002      	b.n	8005466 <mainTask+0x33e>
				} else {
					EmnStopVar=0;
 8005460:	4b5b      	ldr	r3, [pc, #364]	@ (80055d0 <mainTask+0x4a8>)
 8005462:	2200      	movs	r2, #0
 8005464:	701a      	strb	r2, [r3, #0]
				}

		/****************************************  BASINC SALTERI ********************************************/
		if(basincSalteri==0) {
 8005466:	4b5b      	ldr	r3, [pc, #364]	@ (80055d4 <mainTask+0x4ac>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d102      	bne.n	8005474 <mainTask+0x34c>
			basincVar=1;
 800546e:	4b5a      	ldr	r3, [pc, #360]	@ (80055d8 <mainTask+0x4b0>)
 8005470:	2201      	movs	r2, #1
 8005472:	701a      	strb	r2, [r3, #0]
		}

		if(basincSalteri==1) {
 8005474:	4b57      	ldr	r3, [pc, #348]	@ (80055d4 <mainTask+0x4ac>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d119      	bne.n	80054b0 <mainTask+0x388>
			if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 800547c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005480:	484e      	ldr	r0, [pc, #312]	@ (80055bc <mainTask+0x494>)
 8005482:	f002 fff7 	bl	8008474 <HAL_GPIO_ReadPin>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10a      	bne.n	80054a2 <mainTask+0x37a>
				if(millis-timer5>=3) {
 800548c:	4b53      	ldr	r3, [pc, #332]	@ (80055dc <mainTask+0x4b4>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	4b53      	ldr	r3, [pc, #332]	@ (80055e0 <mainTask+0x4b8>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d90a      	bls.n	80054b0 <mainTask+0x388>
					basincVar=1;
 800549a:	4b4f      	ldr	r3, [pc, #316]	@ (80055d8 <mainTask+0x4b0>)
 800549c:	2201      	movs	r2, #1
 800549e:	701a      	strb	r2, [r3, #0]
 80054a0:	e006      	b.n	80054b0 <mainTask+0x388>
				}
			} else {
				timer5=millis;
 80054a2:	4b4e      	ldr	r3, [pc, #312]	@ (80055dc <mainTask+0x4b4>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a4e      	ldr	r2, [pc, #312]	@ (80055e0 <mainTask+0x4b8>)
 80054a8:	6013      	str	r3, [r2, #0]
				basincVar=0;
 80054aa:	4b4b      	ldr	r3, [pc, #300]	@ (80055d8 <mainTask+0x4b0>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	701a      	strb	r2, [r3, #0]
			}
		}

		/******** Bas gönder ***********/
		if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80054b0:	4b4c      	ldr	r3, [pc, #304]	@ (80055e4 <mainTask+0x4bc>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d10b      	bne.n	80054d0 <mainTask+0x3a8>
 80054b8:	4b4b      	ldr	r3, [pc, #300]	@ (80055e8 <mainTask+0x4c0>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d107      	bne.n	80054d0 <mainTask+0x3a8>
 80054c0:	4b4a      	ldr	r3, [pc, #296]	@ (80055ec <mainTask+0x4c4>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d103      	bne.n	80054d0 <mainTask+0x3a8>
			basgondercalisyukari=1;
 80054c8:	4b49      	ldr	r3, [pc, #292]	@ (80055f0 <mainTask+0x4c8>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	e006      	b.n	80054de <mainTask+0x3b6>
		} else if(yukarimotorcalisiyor==0) {
 80054d0:	4b45      	ldr	r3, [pc, #276]	@ (80055e8 <mainTask+0x4c0>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d102      	bne.n	80054de <mainTask+0x3b6>
			basgondercalisyukari=0;
 80054d8:	4b45      	ldr	r3, [pc, #276]	@ (80055f0 <mainTask+0x4c8>)
 80054da:	2200      	movs	r2, #0
 80054dc:	701a      	strb	r2, [r3, #0]
		}

		if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80054de:	4b41      	ldr	r3, [pc, #260]	@ (80055e4 <mainTask+0x4bc>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d10b      	bne.n	80054fe <mainTask+0x3d6>
 80054e6:	4b43      	ldr	r3, [pc, #268]	@ (80055f4 <mainTask+0x4cc>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d107      	bne.n	80054fe <mainTask+0x3d6>
 80054ee:	4b3f      	ldr	r3, [pc, #252]	@ (80055ec <mainTask+0x4c4>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d103      	bne.n	80054fe <mainTask+0x3d6>
			basgondercalisasagi=1;
 80054f6:	4b40      	ldr	r3, [pc, #256]	@ (80055f8 <mainTask+0x4d0>)
 80054f8:	2201      	movs	r2, #1
 80054fa:	701a      	strb	r2, [r3, #0]
 80054fc:	e006      	b.n	800550c <mainTask+0x3e4>
		} else if(asagivalfcalisiyor==0) {
 80054fe:	4b3d      	ldr	r3, [pc, #244]	@ (80055f4 <mainTask+0x4cc>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d102      	bne.n	800550c <mainTask+0x3e4>
			basgondercalisasagi=0;
 8005506:	4b3c      	ldr	r3, [pc, #240]	@ (80055f8 <mainTask+0x4d0>)
 8005508:	2200      	movs	r2, #0
 800550a:	701a      	strb	r2, [r3, #0]
		}

		/******** Kapı Secimleri ***********/

		if(kapiSecimleri==0) {
 800550c:	4b3b      	ldr	r3, [pc, #236]	@ (80055fc <mainTask+0x4d4>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <mainTask+0x3f2>
			kapiSivicVar=1;
 8005514:	4b3a      	ldr	r3, [pc, #232]	@ (8005600 <mainTask+0x4d8>)
 8005516:	2201      	movs	r2, #1
 8005518:	701a      	strb	r2, [r3, #0]
		}

		if(kapiSecimleri==1) {
 800551a:	4b38      	ldr	r3, [pc, #224]	@ (80055fc <mainTask+0x4d4>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d10e      	bne.n	8005540 <mainTask+0x418>
			if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005522:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005526:	4820      	ldr	r0, [pc, #128]	@ (80055a8 <mainTask+0x480>)
 8005528:	f002 ffa4 	bl	8008474 <HAL_GPIO_ReadPin>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d103      	bne.n	800553a <mainTask+0x412>
				kapiSivicVar=1;
 8005532:	4b33      	ldr	r3, [pc, #204]	@ (8005600 <mainTask+0x4d8>)
 8005534:	2201      	movs	r2, #1
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	e002      	b.n	8005540 <mainTask+0x418>
			} else {
				kapiSivicVar=0;
 800553a:	4b31      	ldr	r3, [pc, #196]	@ (8005600 <mainTask+0x4d8>)
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
			}
		}

		if(kapiSecimleri==2){
 8005540:	4b2e      	ldr	r3, [pc, #184]	@ (80055fc <mainTask+0x4d4>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d10e      	bne.n	8005566 <mainTask+0x43e>
			if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8005548:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800554c:	4816      	ldr	r0, [pc, #88]	@ (80055a8 <mainTask+0x480>)
 800554e:	f002 ff91 	bl	8008474 <HAL_GPIO_ReadPin>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d103      	bne.n	8005560 <mainTask+0x438>
				kapiSivicVar=1;
 8005558:	4b29      	ldr	r3, [pc, #164]	@ (8005600 <mainTask+0x4d8>)
 800555a:	2201      	movs	r2, #1
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	e002      	b.n	8005566 <mainTask+0x43e>
			} else {
				kapiSivicVar=0;
 8005560:	4b27      	ldr	r3, [pc, #156]	@ (8005600 <mainTask+0x4d8>)
 8005562:	2200      	movs	r2, #0
 8005564:	701a      	strb	r2, [r3, #0]
			}
		}

		if(kapiSecimleri==3) {
 8005566:	4b25      	ldr	r3, [pc, #148]	@ (80055fc <mainTask+0x4d4>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b03      	cmp	r3, #3
 800556c:	d14d      	bne.n	800560a <mainTask+0x4e2>
			if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 800556e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005572:	480d      	ldr	r0, [pc, #52]	@ (80055a8 <mainTask+0x480>)
 8005574:	f002 ff7e 	bl	8008474 <HAL_GPIO_ReadPin>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d142      	bne.n	8005604 <mainTask+0x4dc>
 800557e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005582:	4809      	ldr	r0, [pc, #36]	@ (80055a8 <mainTask+0x480>)
 8005584:	f002 ff76 	bl	8008474 <HAL_GPIO_ReadPin>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d13a      	bne.n	8005604 <mainTask+0x4dc>
				kapiSivicVar=1;
 800558e:	4b1c      	ldr	r3, [pc, #112]	@ (8005600 <mainTask+0x4d8>)
 8005590:	2201      	movs	r2, #1
 8005592:	701a      	strb	r2, [r3, #0]
 8005594:	e039      	b.n	800560a <mainTask+0x4e2>
 8005596:	bf00      	nop
 8005598:	20000ca4 	.word	0x20000ca4
 800559c:	0800d6b8 	.word	0x0800d6b8
 80055a0:	20000cb0 	.word	0x20000cb0
 80055a4:	20000ca1 	.word	0x20000ca1
 80055a8:	40010800 	.word	0x40010800
 80055ac:	20000cb7 	.word	0x20000cb7
 80055b0:	20000ca2 	.word	0x20000ca2
 80055b4:	0800d548 	.word	0x0800d548
 80055b8:	0800d55c 	.word	0x0800d55c
 80055bc:	40011000 	.word	0x40011000
 80055c0:	40010c00 	.word	0x40010c00
 80055c4:	20000cd8 	.word	0x20000cd8
 80055c8:	20000cd5 	.word	0x20000cd5
 80055cc:	20000ce7 	.word	0x20000ce7
 80055d0:	20000ce8 	.word	0x20000ce8
 80055d4:	20000c8b 	.word	0x20000c8b
 80055d8:	20000c87 	.word	0x20000c87
 80055dc:	20000c60 	.word	0x20000c60
 80055e0:	20000c78 	.word	0x20000c78
 80055e4:	20000c85 	.word	0x20000c85
 80055e8:	20000cb8 	.word	0x20000cb8
 80055ec:	20000c93 	.word	0x20000c93
 80055f0:	20000cbf 	.word	0x20000cbf
 80055f4:	20000cbb 	.word	0x20000cbb
 80055f8:	20000cc0 	.word	0x20000cc0
 80055fc:	20000c8c 	.word	0x20000c8c
 8005600:	20000cd6 	.word	0x20000cd6
			} else {
				kapiSivicVar=0;
 8005604:	4b66      	ldr	r3, [pc, #408]	@ (80057a0 <mainTask+0x678>)
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/

		/*MOTOR CALISIYOR*/

		if(demoMode==0 && menuGiris==0) {
 800560a:	4b66      	ldr	r3, [pc, #408]	@ (80057a4 <mainTask+0x67c>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	f041 83aa 	bne.w	8006d68 <mainTask+0x1c40>
 8005614:	4b64      	ldr	r3, [pc, #400]	@ (80057a8 <mainTask+0x680>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	f041 83a5 	bne.w	8006d68 <mainTask+0x1c40>
			if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 800561e:	4b63      	ldr	r3, [pc, #396]	@ (80057ac <mainTask+0x684>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d11a      	bne.n	800565c <mainTask+0x534>
 8005626:	4b62      	ldr	r3, [pc, #392]	@ (80057b0 <mainTask+0x688>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d116      	bne.n	800565c <mainTask+0x534>
 800562e:	4b61      	ldr	r3, [pc, #388]	@ (80057b4 <mainTask+0x68c>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <mainTask+0x524>
 8005636:	4b60      	ldr	r3, [pc, #384]	@ (80057b8 <mainTask+0x690>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	f083 0301 	eor.w	r3, r3, #1
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <mainTask+0x524>
 8005644:	4b5d      	ldr	r3, [pc, #372]	@ (80057bc <mainTask+0x694>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d007      	beq.n	800565c <mainTask+0x534>
					||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 800564c:	4b5c      	ldr	r3, [pc, #368]	@ (80057c0 <mainTask+0x698>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d01c      	beq.n	800568e <mainTask+0x566>
 8005654:	4b5b      	ldr	r3, [pc, #364]	@ (80057c4 <mainTask+0x69c>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d118      	bne.n	800568e <mainTask+0x566>
 800565c:	4b5a      	ldr	r3, [pc, #360]	@ (80057c8 <mainTask+0x6a0>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d103      	bne.n	800566c <mainTask+0x544>
 8005664:	4b59      	ldr	r3, [pc, #356]	@ (80057cc <mainTask+0x6a4>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d010      	beq.n	800568e <mainTask+0x566>
 800566c:	4b4c      	ldr	r3, [pc, #304]	@ (80057a0 <mainTask+0x678>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00c      	beq.n	800568e <mainTask+0x566>

				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005674:	2201      	movs	r2, #1
 8005676:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800567a:	4855      	ldr	r0, [pc, #340]	@ (80057d0 <mainTask+0x6a8>)
 800567c:	f002 ff11 	bl	80084a2 <HAL_GPIO_WritePin>
				motorcalisiyor=1;
 8005680:	4b54      	ldr	r3, [pc, #336]	@ (80057d4 <mainTask+0x6ac>)
 8005682:	2201      	movs	r2, #1
 8005684:	701a      	strb	r2, [r3, #0]
				CalismaSayisiYukari=1;
 8005686:	4b54      	ldr	r3, [pc, #336]	@ (80057d8 <mainTask+0x6b0>)
 8005688:	2201      	movs	r2, #1
 800568a:	701a      	strb	r2, [r3, #0]
 800568c:	e008      	b.n	80056a0 <mainTask+0x578>
			} else {
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800568e:	2200      	movs	r2, #0
 8005690:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005694:	484e      	ldr	r0, [pc, #312]	@ (80057d0 <mainTask+0x6a8>)
 8005696:	f002 ff04 	bl	80084a2 <HAL_GPIO_WritePin>
				motorcalisiyor=0;
 800569a:	4b4e      	ldr	r3, [pc, #312]	@ (80057d4 <mainTask+0x6ac>)
 800569c:	2200      	movs	r2, #0
 800569e:	701a      	strb	r2, [r3, #0]
			}

			/*YUKARI ÇALISMA*/

			if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 80056a0:	4b41      	ldr	r3, [pc, #260]	@ (80057a8 <mainTask+0x680>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d161      	bne.n	800576c <mainTask+0x644>
 80056a8:	4b48      	ldr	r3, [pc, #288]	@ (80057cc <mainTask+0x6a4>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d103      	bne.n	80056b8 <mainTask+0x590>
 80056b0:	4b45      	ldr	r3, [pc, #276]	@ (80057c8 <mainTask+0x6a0>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d059      	beq.n	800576c <mainTask+0x644>
 80056b8:	4b39      	ldr	r3, [pc, #228]	@ (80057a0 <mainTask+0x678>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d055      	beq.n	800576c <mainTask+0x644>
						&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80056c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80056c4:	4842      	ldr	r0, [pc, #264]	@ (80057d0 <mainTask+0x6a8>)
 80056c6:	f002 fed5 	bl	8008474 <HAL_GPIO_ReadPin>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <mainTask+0x5b0>
 80056d0:	4b42      	ldr	r3, [pc, #264]	@ (80057dc <mainTask+0x6b4>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d049      	beq.n	800576c <mainTask+0x644>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80056d8:	2102      	movs	r1, #2
 80056da:	4841      	ldr	r0, [pc, #260]	@ (80057e0 <mainTask+0x6b8>)
 80056dc:	f002 feca 	bl	8008474 <HAL_GPIO_ReadPin>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d142      	bne.n	800576c <mainTask+0x644>
						&& (basincVar)
 80056e6:	4b3f      	ldr	r3, [pc, #252]	@ (80057e4 <mainTask+0x6bc>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d03e      	beq.n	800576c <mainTask+0x644>
						&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80056ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80056f2:	4837      	ldr	r0, [pc, #220]	@ (80057d0 <mainTask+0x6a8>)
 80056f4:	f002 febe 	bl	8008474 <HAL_GPIO_ReadPin>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d10e      	bne.n	800571c <mainTask+0x5f4>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80056fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005702:	4833      	ldr	r0, [pc, #204]	@ (80057d0 <mainTask+0x6a8>)
 8005704:	f002 feb6 	bl	8008474 <HAL_GPIO_ReadPin>
 8005708:	4603      	mov	r3, r0
 800570a:	2b01      	cmp	r3, #1
 800570c:	d106      	bne.n	800571c <mainTask+0x5f4>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 800570e:	2140      	movs	r1, #64	@ 0x40
 8005710:	4833      	ldr	r0, [pc, #204]	@ (80057e0 <mainTask+0x6b8>)
 8005712:	f002 feaf 	bl	8008474 <HAL_GPIO_ReadPin>
 8005716:	4603      	mov	r3, r0
 8005718:	2b01      	cmp	r3, #1
 800571a:	d003      	beq.n	8005724 <mainTask+0x5fc>
 800571c:	4b23      	ldr	r3, [pc, #140]	@ (80057ac <mainTask+0x684>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d023      	beq.n	800576c <mainTask+0x644>
						&& (asagivalfcalisiyor==0)
 8005724:	4b23      	ldr	r3, [pc, #140]	@ (80057b4 <mainTask+0x68c>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d11f      	bne.n	800576c <mainTask+0x644>
						&& (devmotoryukaricalisiyor==0)
 800572c:	4b20      	ldr	r3, [pc, #128]	@ (80057b0 <mainTask+0x688>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	f083 0301 	eor.w	r3, r3, #1
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d018      	beq.n	800576c <mainTask+0x644>
						&& (devmotorasagicalisiyor==0)
 800573a:	4b21      	ldr	r3, [pc, #132]	@ (80057c0 <mainTask+0x698>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	f083 0301 	eor.w	r3, r3, #1
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d011      	beq.n	800576c <mainTask+0x644>
						&&(devyukarivalfcalisiyor==0)
 8005748:	4b27      	ldr	r3, [pc, #156]	@ (80057e8 <mainTask+0x6c0>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	f083 0301 	eor.w	r3, r3, #1
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <mainTask+0x644>
						&&(devasagivalfcalisiyor==0)) {
 8005756:	4b25      	ldr	r3, [pc, #148]	@ (80057ec <mainTask+0x6c4>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	f083 0301 	eor.w	r3, r3, #1
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <mainTask+0x644>
				yukarimotorcalisiyor=1;
 8005764:	4b11      	ldr	r3, [pc, #68]	@ (80057ac <mainTask+0x684>)
 8005766:	2201      	movs	r2, #1
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	e002      	b.n	8005772 <mainTask+0x64a>
			} else {
				yukarimotorcalisiyor=0;
 800576c:	4b0f      	ldr	r3, [pc, #60]	@ (80057ac <mainTask+0x684>)
 800576e:	2200      	movs	r2, #0
 8005770:	701a      	strb	r2, [r3, #0]
			}

			if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005772:	4b0e      	ldr	r3, [pc, #56]	@ (80057ac <mainTask+0x684>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d13c      	bne.n	80057f4 <mainTask+0x6cc>
 800577a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800577e:	4818      	ldr	r0, [pc, #96]	@ (80057e0 <mainTask+0x6b8>)
 8005780:	f002 fe78 	bl	8008474 <HAL_GPIO_ReadPin>
 8005784:	4603      	mov	r3, r0
 8005786:	2b01      	cmp	r3, #1
 8005788:	d134      	bne.n	80057f4 <mainTask+0x6cc>
 800578a:	4b19      	ldr	r3, [pc, #100]	@ (80057f0 <mainTask+0x6c8>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d030      	beq.n	80057f4 <mainTask+0x6cc>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005792:	2201      	movs	r2, #1
 8005794:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005798:	480d      	ldr	r0, [pc, #52]	@ (80057d0 <mainTask+0x6a8>)
 800579a:	f002 fe82 	bl	80084a2 <HAL_GPIO_WritePin>
 800579e:	e02f      	b.n	8005800 <mainTask+0x6d8>
 80057a0:	20000cd6 	.word	0x20000cd6
 80057a4:	20000ca2 	.word	0x20000ca2
 80057a8:	20000ca1 	.word	0x20000ca1
 80057ac:	20000cb8 	.word	0x20000cb8
 80057b0:	20000cb9 	.word	0x20000cb9
 80057b4:	20000cbb 	.word	0x20000cbb
 80057b8:	20000cb3 	.word	0x20000cb3
 80057bc:	20000c97 	.word	0x20000c97
 80057c0:	20000cba 	.word	0x20000cba
 80057c4:	20000c96 	.word	0x20000c96
 80057c8:	20000cd5 	.word	0x20000cd5
 80057cc:	20000ce8 	.word	0x20000ce8
 80057d0:	40010c00 	.word	0x40010c00
 80057d4:	20000cd7 	.word	0x20000cd7
 80057d8:	20000cc2 	.word	0x20000cc2
 80057dc:	20000cbf 	.word	0x20000cbf
 80057e0:	40011000 	.word	0x40011000
 80057e4:	20000c87 	.word	0x20000c87
 80057e8:	20000cbd 	.word	0x20000cbd
 80057ec:	20000cbe 	.word	0x20000cbe
 80057f0:	20000c92 	.word	0x20000c92
			} else {
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80057f4:	2200      	movs	r2, #0
 80057f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057fa:	4865      	ldr	r0, [pc, #404]	@ (8005990 <mainTask+0x868>)
 80057fc:	f002 fe51 	bl	80084a2 <HAL_GPIO_WritePin>
			}

			if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005800:	4b64      	ldr	r3, [pc, #400]	@ (8005994 <mainTask+0x86c>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d013      	beq.n	8005830 <mainTask+0x708>
 8005808:	4b63      	ldr	r3, [pc, #396]	@ (8005998 <mainTask+0x870>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d007      	beq.n	8005820 <mainTask+0x6f8>
 8005810:	4b61      	ldr	r3, [pc, #388]	@ (8005998 <mainTask+0x870>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d003      	beq.n	8005820 <mainTask+0x6f8>
 8005818:	4b60      	ldr	r3, [pc, #384]	@ (800599c <mainTask+0x874>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d107      	bne.n	8005830 <mainTask+0x708>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005820:	2201      	movs	r2, #1
 8005822:	2104      	movs	r1, #4
 8005824:	485a      	ldr	r0, [pc, #360]	@ (8005990 <mainTask+0x868>)
 8005826:	f002 fe3c 	bl	80084a2 <HAL_GPIO_WritePin>
				yukarivalfcalisiyor=1;
 800582a:	4b5d      	ldr	r3, [pc, #372]	@ (80059a0 <mainTask+0x878>)
 800582c:	2201      	movs	r2, #1
 800582e:	701a      	strb	r2, [r3, #0]
			}

			// yukari valf timer calisması

			if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005830:	4b5b      	ldr	r3, [pc, #364]	@ (80059a0 <mainTask+0x878>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d033      	beq.n	80058a0 <mainTask+0x778>
 8005838:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800583c:	4854      	ldr	r0, [pc, #336]	@ (8005990 <mainTask+0x868>)
 800583e:	f002 fe19 	bl	8008474 <HAL_GPIO_ReadPin>
 8005842:	4603      	mov	r3, r0
 8005844:	2b01      	cmp	r3, #1
 8005846:	d106      	bne.n	8005856 <mainTask+0x72e>
 8005848:	4b56      	ldr	r3, [pc, #344]	@ (80059a4 <mainTask+0x87c>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	f083 0301 	eor.w	r3, r3, #1
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <mainTask+0x73c>
 8005856:	2102      	movs	r1, #2
 8005858:	4853      	ldr	r0, [pc, #332]	@ (80059a8 <mainTask+0x880>)
 800585a:	f002 fe0b 	bl	8008474 <HAL_GPIO_ReadPin>
 800585e:	4603      	mov	r3, r0
 8005860:	2b01      	cmp	r3, #1
 8005862:	d11d      	bne.n	80058a0 <mainTask+0x778>
 8005864:	4b51      	ldr	r3, [pc, #324]	@ (80059ac <mainTask+0x884>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d103      	bne.n	8005874 <mainTask+0x74c>
 800586c:	4b50      	ldr	r3, [pc, #320]	@ (80059b0 <mainTask+0x888>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d015      	beq.n	80058a0 <mainTask+0x778>
 8005874:	4b4f      	ldr	r3, [pc, #316]	@ (80059b4 <mainTask+0x88c>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d011      	beq.n	80058a0 <mainTask+0x778>
 800587c:	4b4e      	ldr	r3, [pc, #312]	@ (80059b8 <mainTask+0x890>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00d      	beq.n	80058a0 <mainTask+0x778>
 8005884:	4b4d      	ldr	r3, [pc, #308]	@ (80059bc <mainTask+0x894>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	f083 0301 	eor.w	r3, r3, #1
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d006      	beq.n	80058a0 <mainTask+0x778>
				timer2=millis;
 8005892:	4b4b      	ldr	r3, [pc, #300]	@ (80059c0 <mainTask+0x898>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a4b      	ldr	r2, [pc, #300]	@ (80059c4 <mainTask+0x89c>)
 8005898:	6013      	str	r3, [r2, #0]
				butonKontrol3=1;
 800589a:	4b48      	ldr	r3, [pc, #288]	@ (80059bc <mainTask+0x894>)
 800589c:	2201      	movs	r2, #1
 800589e:	701a      	strb	r2, [r3, #0]
			}

			if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 80058a0:	4b47      	ldr	r3, [pc, #284]	@ (80059c0 <mainTask+0x898>)
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	4b47      	ldr	r3, [pc, #284]	@ (80059c4 <mainTask+0x89c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	4a47      	ldr	r2, [pc, #284]	@ (80059c8 <mainTask+0x8a0>)
 80058ac:	7812      	ldrb	r2, [r2, #0]
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d303      	bcc.n	80058ba <mainTask+0x792>
 80058b2:	4b42      	ldr	r3, [pc, #264]	@ (80059bc <mainTask+0x894>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d118      	bne.n	80058ec <mainTask+0x7c4>
 80058ba:	4b3c      	ldr	r3, [pc, #240]	@ (80059ac <mainTask+0x884>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	f083 0301 	eor.w	r3, r3, #1
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d006      	beq.n	80058d6 <mainTask+0x7ae>
 80058c8:	4b39      	ldr	r3, [pc, #228]	@ (80059b0 <mainTask+0x888>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	f083 0301 	eor.w	r3, r3, #1
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10a      	bne.n	80058ec <mainTask+0x7c4>
 80058d6:	4b37      	ldr	r3, [pc, #220]	@ (80059b4 <mainTask+0x88c>)
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	f083 0301 	eor.w	r3, r3, #1
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d103      	bne.n	80058ec <mainTask+0x7c4>
 80058e4:	4b34      	ldr	r3, [pc, #208]	@ (80059b8 <mainTask+0x890>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <mainTask+0x7da>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80058ec:	2200      	movs	r2, #0
 80058ee:	2104      	movs	r1, #4
 80058f0:	4827      	ldr	r0, [pc, #156]	@ (8005990 <mainTask+0x868>)
 80058f2:	f002 fdd6 	bl	80084a2 <HAL_GPIO_WritePin>
				yukarivalfcalisiyor=0;
 80058f6:	4b2a      	ldr	r3, [pc, #168]	@ (80059a0 <mainTask+0x878>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	701a      	strb	r2, [r3, #0]
				butonKontrol3=0;
 80058fc:	4b2f      	ldr	r3, [pc, #188]	@ (80059bc <mainTask+0x894>)
 80058fe:	2200      	movs	r2, #0
 8005900:	701a      	strb	r2, [r3, #0]
			}

			//Ond safety

			if(emniyetCercevesi==0) {
 8005902:	4b32      	ldr	r3, [pc, #200]	@ (80059cc <mainTask+0x8a4>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d102      	bne.n	8005910 <mainTask+0x7e8>
				cerceveVar=1;
 800590a:	4b31      	ldr	r3, [pc, #196]	@ (80059d0 <mainTask+0x8a8>)
 800590c:	2201      	movs	r2, #1
 800590e:	701a      	strb	r2, [r3, #0]
			}

			if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005910:	4b2e      	ldr	r3, [pc, #184]	@ (80059cc <mainTask+0x8a4>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d116      	bne.n	8005946 <mainTask+0x81e>
 8005918:	4b2e      	ldr	r3, [pc, #184]	@ (80059d4 <mainTask+0x8ac>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d112      	bne.n	8005946 <mainTask+0x81e>
 8005920:	2101      	movs	r1, #1
 8005922:	4821      	ldr	r0, [pc, #132]	@ (80059a8 <mainTask+0x880>)
 8005924:	f002 fda6 	bl	8008474 <HAL_GPIO_ReadPin>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10b      	bne.n	8005946 <mainTask+0x81e>
 800592e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005932:	4817      	ldr	r0, [pc, #92]	@ (8005990 <mainTask+0x868>)
 8005934:	f002 fd9e 	bl	8008474 <HAL_GPIO_ReadPin>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d103      	bne.n	8005946 <mainTask+0x81e>
				cerceveVar=1;
 800593e:	4b24      	ldr	r3, [pc, #144]	@ (80059d0 <mainTask+0x8a8>)
 8005940:	2201      	movs	r2, #1
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e011      	b.n	800596a <mainTask+0x842>
			} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005946:	4b21      	ldr	r3, [pc, #132]	@ (80059cc <mainTask+0x8a4>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d10d      	bne.n	800596a <mainTask+0x842>
 800594e:	2101      	movs	r1, #1
 8005950:	4815      	ldr	r0, [pc, #84]	@ (80059a8 <mainTask+0x880>)
 8005952:	f002 fd8f 	bl	8008474 <HAL_GPIO_ReadPin>
 8005956:	4603      	mov	r3, r0
 8005958:	2b01      	cmp	r3, #1
 800595a:	d106      	bne.n	800596a <mainTask+0x842>
 800595c:	4b1d      	ldr	r3, [pc, #116]	@ (80059d4 <mainTask+0x8ac>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d102      	bne.n	800596a <mainTask+0x842>
				cerceveVar=0;
 8005964:	4b1a      	ldr	r3, [pc, #104]	@ (80059d0 <mainTask+0x8a8>)
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]
			}

			if (emniyetCercevesi==1 && calismaSekli==1) {
 800596a:	4b18      	ldr	r3, [pc, #96]	@ (80059cc <mainTask+0x8a4>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d135      	bne.n	80059de <mainTask+0x8b6>
 8005972:	4b18      	ldr	r3, [pc, #96]	@ (80059d4 <mainTask+0x8ac>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d131      	bne.n	80059de <mainTask+0x8b6>
				if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800597a:	2101      	movs	r1, #1
 800597c:	480a      	ldr	r0, [pc, #40]	@ (80059a8 <mainTask+0x880>)
 800597e:	f002 fd79 	bl	8008474 <HAL_GPIO_ReadPin>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d127      	bne.n	80059d8 <mainTask+0x8b0>
					cerceveVar=1;
 8005988:	4b11      	ldr	r3, [pc, #68]	@ (80059d0 <mainTask+0x8a8>)
 800598a:	2201      	movs	r2, #1
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	e026      	b.n	80059de <mainTask+0x8b6>
 8005990:	40010c00 	.word	0x40010c00
 8005994:	20000cb8 	.word	0x20000cb8
 8005998:	20000c93 	.word	0x20000c93
 800599c:	20000c97 	.word	0x20000c97
 80059a0:	20000cbc 	.word	0x20000cbc
 80059a4:	20000cbf 	.word	0x20000cbf
 80059a8:	40011000 	.word	0x40011000
 80059ac:	20000cd5 	.word	0x20000cd5
 80059b0:	20000ce8 	.word	0x20000ce8
 80059b4:	20000cd6 	.word	0x20000cd6
 80059b8:	20000c87 	.word	0x20000c87
 80059bc:	20000cb4 	.word	0x20000cb4
 80059c0:	20000c60 	.word	0x20000c60
 80059c4:	20000c6c 	.word	0x20000c6c
 80059c8:	20000c98 	.word	0x20000c98
 80059cc:	20000c88 	.word	0x20000c88
 80059d0:	20000cda 	.word	0x20000cda
 80059d4:	20000c85 	.word	0x20000c85
				} else {
					cerceveVar=0;
 80059d8:	4b7d      	ldr	r3, [pc, #500]	@ (8005bd0 <mainTask+0xaa8>)
 80059da:	2200      	movs	r2, #0
 80059dc:	701a      	strb	r2, [r3, #0]
				}
			}

			//Asagi calisma
			if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80059de:	4b7d      	ldr	r3, [pc, #500]	@ (8005bd4 <mainTask+0xaac>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d179      	bne.n	8005ada <mainTask+0x9b2>
 80059e6:	4b7c      	ldr	r3, [pc, #496]	@ (8005bd8 <mainTask+0xab0>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d075      	beq.n	8005ada <mainTask+0x9b2>
 80059ee:	4b7b      	ldr	r3, [pc, #492]	@ (8005bdc <mainTask+0xab4>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d071      	beq.n	8005ada <mainTask+0x9b2>
					&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80059f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80059fa:	4879      	ldr	r0, [pc, #484]	@ (8005be0 <mainTask+0xab8>)
 80059fc:	f002 fd3a 	bl	8008474 <HAL_GPIO_ReadPin>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <mainTask+0x8e6>
 8005a06:	4b77      	ldr	r3, [pc, #476]	@ (8005be4 <mainTask+0xabc>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d065      	beq.n	8005ada <mainTask+0x9b2>
					&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005a0e:	4b70      	ldr	r3, [pc, #448]	@ (8005bd0 <mainTask+0xaa8>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d061      	beq.n	8005ada <mainTask+0x9b2>
 8005a16:	4b74      	ldr	r3, [pc, #464]	@ (8005be8 <mainTask+0xac0>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	f083 0301 	eor.w	r3, r3, #1
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d05a      	beq.n	8005ada <mainTask+0x9b2>
					&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005a24:	2104      	movs	r1, #4
 8005a26:	4871      	ldr	r0, [pc, #452]	@ (8005bec <mainTask+0xac4>)
 8005a28:	f002 fd24 	bl	8008474 <HAL_GPIO_ReadPin>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <mainTask+0x912>
 8005a32:	4b6f      	ldr	r3, [pc, #444]	@ (8005bf0 <mainTask+0xac8>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d14f      	bne.n	8005ada <mainTask+0x9b2>
					&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005a3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005a3e:	4868      	ldr	r0, [pc, #416]	@ (8005be0 <mainTask+0xab8>)
 8005a40:	f002 fd18 	bl	8008474 <HAL_GPIO_ReadPin>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d10e      	bne.n	8005a68 <mainTask+0x940>
					&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005a4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a4e:	4864      	ldr	r0, [pc, #400]	@ (8005be0 <mainTask+0xab8>)
 8005a50:	f002 fd10 	bl	8008474 <HAL_GPIO_ReadPin>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d106      	bne.n	8005a68 <mainTask+0x940>
					&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005a5a:	2140      	movs	r1, #64	@ 0x40
 8005a5c:	4863      	ldr	r0, [pc, #396]	@ (8005bec <mainTask+0xac4>)
 8005a5e:	f002 fd09 	bl	8008474 <HAL_GPIO_ReadPin>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d003      	beq.n	8005a70 <mainTask+0x948>
 8005a68:	4b62      	ldr	r3, [pc, #392]	@ (8005bf4 <mainTask+0xacc>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d034      	beq.n	8005ada <mainTask+0x9b2>
					&& (yukarimotorcalisiyor==0)
 8005a70:	4b61      	ldr	r3, [pc, #388]	@ (8005bf8 <mainTask+0xad0>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d130      	bne.n	8005ada <mainTask+0x9b2>
					&& (yukarivalfcalisiyor==0)
 8005a78:	4b60      	ldr	r3, [pc, #384]	@ (8005bfc <mainTask+0xad4>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	f083 0301 	eor.w	r3, r3, #1
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d029      	beq.n	8005ada <mainTask+0x9b2>
			  	  	&& (devmotoryukaricalisiyor==0)
 8005a86:	4b5e      	ldr	r3, [pc, #376]	@ (8005c00 <mainTask+0xad8>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	f083 0301 	eor.w	r3, r3, #1
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d022      	beq.n	8005ada <mainTask+0x9b2>
					&& (devmotorasagicalisiyor==0)
 8005a94:	4b5b      	ldr	r3, [pc, #364]	@ (8005c04 <mainTask+0xadc>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	f083 0301 	eor.w	r3, r3, #1
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d01b      	beq.n	8005ada <mainTask+0x9b2>
					&& (devyukarivalfcalisiyor==0)
 8005aa2:	4b59      	ldr	r3, [pc, #356]	@ (8005c08 <mainTask+0xae0>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	f083 0301 	eor.w	r3, r3, #1
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d014      	beq.n	8005ada <mainTask+0x9b2>
					&& (devasagivalfcalisiyor==0)) {
 8005ab0:	4b56      	ldr	r3, [pc, #344]	@ (8005c0c <mainTask+0xae4>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	f083 0301 	eor.w	r3, r3, #1
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00d      	beq.n	8005ada <mainTask+0x9b2>

				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005abe:	2201      	movs	r2, #1
 8005ac0:	2102      	movs	r1, #2
 8005ac2:	4847      	ldr	r0, [pc, #284]	@ (8005be0 <mainTask+0xab8>)
 8005ac4:	f002 fced 	bl	80084a2 <HAL_GPIO_WritePin>
				asagivalfcalisiyor=1;
 8005ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8005bf4 <mainTask+0xacc>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	701a      	strb	r2, [r3, #0]
				CalismaSayisiAsagi=1;
 8005ace:	4b50      	ldr	r3, [pc, #320]	@ (8005c10 <mainTask+0xae8>)
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	701a      	strb	r2, [r3, #0]
				cercevesasagicalisma=1;
 8005ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8005c14 <mainTask+0xaec>)
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	701a      	strb	r2, [r3, #0]
			}

			// asagi valf timer calisması

			if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005ada:	4b46      	ldr	r3, [pc, #280]	@ (8005bf4 <mainTask+0xacc>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d133      	bne.n	8005b4a <mainTask+0xa22>
 8005ae2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005ae6:	483e      	ldr	r0, [pc, #248]	@ (8005be0 <mainTask+0xab8>)
 8005ae8:	f002 fcc4 	bl	8008474 <HAL_GPIO_ReadPin>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d106      	bne.n	8005b00 <mainTask+0x9d8>
 8005af2:	4b3c      	ldr	r3, [pc, #240]	@ (8005be4 <mainTask+0xabc>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	f083 0301 	eor.w	r3, r3, #1
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10a      	bne.n	8005b16 <mainTask+0x9ee>
 8005b00:	2104      	movs	r1, #4
 8005b02:	483a      	ldr	r0, [pc, #232]	@ (8005bec <mainTask+0xac4>)
 8005b04:	f002 fcb6 	bl	8008474 <HAL_GPIO_ReadPin>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d11d      	bne.n	8005b4a <mainTask+0xa22>
 8005b0e:	4b38      	ldr	r3, [pc, #224]	@ (8005bf0 <mainTask+0xac8>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d019      	beq.n	8005b4a <mainTask+0xa22>
 8005b16:	4b30      	ldr	r3, [pc, #192]	@ (8005bd8 <mainTask+0xab0>)
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d015      	beq.n	8005b4a <mainTask+0xa22>
 8005b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8005bdc <mainTask+0xab4>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d011      	beq.n	8005b4a <mainTask+0xa22>
 8005b26:	4b2a      	ldr	r3, [pc, #168]	@ (8005bd0 <mainTask+0xaa8>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00d      	beq.n	8005b4a <mainTask+0xa22>
 8005b2e:	4b3a      	ldr	r3, [pc, #232]	@ (8005c18 <mainTask+0xaf0>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	f083 0301 	eor.w	r3, r3, #1
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d006      	beq.n	8005b4a <mainTask+0xa22>
				timer2=millis;
 8005b3c:	4b37      	ldr	r3, [pc, #220]	@ (8005c1c <mainTask+0xaf4>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a37      	ldr	r2, [pc, #220]	@ (8005c20 <mainTask+0xaf8>)
 8005b42:	6013      	str	r3, [r2, #0]
				butonKontrol2=1;
 8005b44:	4b34      	ldr	r3, [pc, #208]	@ (8005c18 <mainTask+0xaf0>)
 8005b46:	2201      	movs	r2, #1
 8005b48:	701a      	strb	r2, [r3, #0]
			}

			if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005b4a:	4b34      	ldr	r3, [pc, #208]	@ (8005c1c <mainTask+0xaf4>)
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b34      	ldr	r3, [pc, #208]	@ (8005c20 <mainTask+0xaf8>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	4a33      	ldr	r2, [pc, #204]	@ (8005c24 <mainTask+0xafc>)
 8005b56:	7812      	ldrb	r2, [r2, #0]
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d303      	bcc.n	8005b64 <mainTask+0xa3c>
 8005b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8005c18 <mainTask+0xaf0>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d114      	bne.n	8005b8e <mainTask+0xa66>
 8005b64:	4b1c      	ldr	r3, [pc, #112]	@ (8005bd8 <mainTask+0xab0>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	f083 0301 	eor.w	r3, r3, #1
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10d      	bne.n	8005b8e <mainTask+0xa66>
 8005b72:	4b1a      	ldr	r3, [pc, #104]	@ (8005bdc <mainTask+0xab4>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	f083 0301 	eor.w	r3, r3, #1
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d106      	bne.n	8005b8e <mainTask+0xa66>
 8005b80:	4b13      	ldr	r3, [pc, #76]	@ (8005bd0 <mainTask+0xaa8>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	f083 0301 	eor.w	r3, r3, #1
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <mainTask+0xa7c>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2102      	movs	r1, #2
 8005b92:	4813      	ldr	r0, [pc, #76]	@ (8005be0 <mainTask+0xab8>)
 8005b94:	f002 fc85 	bl	80084a2 <HAL_GPIO_WritePin>
				asagivalfcalisiyor=0;
 8005b98:	4b16      	ldr	r3, [pc, #88]	@ (8005bf4 <mainTask+0xacc>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	701a      	strb	r2, [r3, #0]
				butonKontrol2=0;
 8005b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005c18 <mainTask+0xaf0>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	701a      	strb	r2, [r3, #0]
			}

			//yavaslama valf

			if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005ba4:	4b13      	ldr	r3, [pc, #76]	@ (8005bf4 <mainTask+0xacc>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d13f      	bne.n	8005c2c <mainTask+0xb04>
 8005bac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005bb0:	480e      	ldr	r0, [pc, #56]	@ (8005bec <mainTask+0xac4>)
 8005bb2:	f002 fc5f 	bl	8008474 <HAL_GPIO_ReadPin>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d137      	bne.n	8005c2c <mainTask+0xb04>
 8005bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8005c28 <mainTask+0xb00>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d033      	beq.n	8005c2c <mainTask+0xb04>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	4805      	ldr	r0, [pc, #20]	@ (8005be0 <mainTask+0xab8>)
 8005bca:	f002 fc6a 	bl	80084a2 <HAL_GPIO_WritePin>
 8005bce:	e032      	b.n	8005c36 <mainTask+0xb0e>
 8005bd0:	20000cda 	.word	0x20000cda
 8005bd4:	20000ca1 	.word	0x20000ca1
 8005bd8:	20000cd5 	.word	0x20000cd5
 8005bdc:	20000cd6 	.word	0x20000cd6
 8005be0:	40010c00 	.word	0x40010c00
 8005be4:	20000cc0 	.word	0x20000cc0
 8005be8:	20000cd4 	.word	0x20000cd4
 8005bec:	40011000 	.word	0x40011000
 8005bf0:	20000c8a 	.word	0x20000c8a
 8005bf4:	20000cbb 	.word	0x20000cbb
 8005bf8:	20000cb8 	.word	0x20000cb8
 8005bfc:	20000cbc 	.word	0x20000cbc
 8005c00:	20000cb9 	.word	0x20000cb9
 8005c04:	20000cba 	.word	0x20000cba
 8005c08:	20000cbd 	.word	0x20000cbd
 8005c0c:	20000cbe 	.word	0x20000cbe
 8005c10:	20000cc3 	.word	0x20000cc3
 8005c14:	20000ce4 	.word	0x20000ce4
 8005c18:	20000cb3 	.word	0x20000cb3
 8005c1c:	20000c60 	.word	0x20000c60
 8005c20:	20000c6c 	.word	0x20000c6c
 8005c24:	20000c99 	.word	0x20000c99
 8005c28:	20000c89 	.word	0x20000c89
			} else {
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2101      	movs	r1, #1
 8005c30:	4895      	ldr	r0, [pc, #596]	@ (8005e88 <mainTask+0xd60>)
 8005c32:	f002 fc36 	bl	80084a2 <HAL_GPIO_WritePin>
			}

			/*DEVIRME veya YURUYUS Baslangic*/

			// Devirme Yukari veya yuruyus ileri calisma
			if((menuGiris==0)
 8005c36:	4b95      	ldr	r3, [pc, #596]	@ (8005e8c <mainTask+0xd64>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d15f      	bne.n	8005cfe <mainTask+0xbd6>
					&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005c3e:	4b94      	ldr	r3, [pc, #592]	@ (8005e90 <mainTask+0xd68>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d003      	beq.n	8005c4e <mainTask+0xb26>
 8005c46:	4b92      	ldr	r3, [pc, #584]	@ (8005e90 <mainTask+0xd68>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d157      	bne.n	8005cfe <mainTask+0xbd6>
					&& (stopVar) && (kapiSivicVar)
 8005c4e:	4b91      	ldr	r3, [pc, #580]	@ (8005e94 <mainTask+0xd6c>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d053      	beq.n	8005cfe <mainTask+0xbd6>
 8005c56:	4b90      	ldr	r3, [pc, #576]	@ (8005e98 <mainTask+0xd70>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d04f      	beq.n	8005cfe <mainTask+0xbd6>
					&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005c5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c62:	4889      	ldr	r0, [pc, #548]	@ (8005e88 <mainTask+0xd60>)
 8005c64:	f002 fc06 	bl	8008474 <HAL_GPIO_ReadPin>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d147      	bne.n	8005cfe <mainTask+0xbd6>
					&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005c6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c72:	488a      	ldr	r0, [pc, #552]	@ (8005e9c <mainTask+0xd74>)
 8005c74:	f002 fbfe 	bl	8008474 <HAL_GPIO_ReadPin>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <mainTask+0xb5e>
 8005c7e:	4b88      	ldr	r3, [pc, #544]	@ (8005ea0 <mainTask+0xd78>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d13b      	bne.n	8005cfe <mainTask+0xbd6>
					&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005c86:	2140      	movs	r1, #64	@ 0x40
 8005c88:	4884      	ldr	r0, [pc, #528]	@ (8005e9c <mainTask+0xd74>)
 8005c8a:	f002 fbf3 	bl	8008474 <HAL_GPIO_ReadPin>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d10f      	bne.n	8005cb4 <mainTask+0xb8c>
					&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005c94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005c98:	487b      	ldr	r0, [pc, #492]	@ (8005e88 <mainTask+0xd60>)
 8005c9a:	f002 fbeb 	bl	8008474 <HAL_GPIO_ReadPin>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d107      	bne.n	8005cb4 <mainTask+0xb8c>
					&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005ca4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005ca8:	4877      	ldr	r0, [pc, #476]	@ (8005e88 <mainTask+0xd60>)
 8005caa:	f002 fbe3 	bl	8008474 <HAL_GPIO_ReadPin>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d003      	beq.n	8005cbc <mainTask+0xb94>
 8005cb4:	4b7b      	ldr	r3, [pc, #492]	@ (8005ea4 <mainTask+0xd7c>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d020      	beq.n	8005cfe <mainTask+0xbd6>
					&& (yukarimotorcalisiyor==0)
 8005cbc:	4b7a      	ldr	r3, [pc, #488]	@ (8005ea8 <mainTask+0xd80>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d11c      	bne.n	8005cfe <mainTask+0xbd6>
					&& (yukarivalfcalisiyor==0)
 8005cc4:	4b79      	ldr	r3, [pc, #484]	@ (8005eac <mainTask+0xd84>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	f083 0301 	eor.w	r3, r3, #1
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d015      	beq.n	8005cfe <mainTask+0xbd6>
					&& (asagivalfcalisiyor==0)
 8005cd2:	4b77      	ldr	r3, [pc, #476]	@ (8005eb0 <mainTask+0xd88>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d111      	bne.n	8005cfe <mainTask+0xbd6>
					&& (devmotorasagicalisiyor==0)
 8005cda:	4b76      	ldr	r3, [pc, #472]	@ (8005eb4 <mainTask+0xd8c>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	f083 0301 	eor.w	r3, r3, #1
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <mainTask+0xbd6>
					&&(devasagivalfcalisiyor==0)) {
 8005ce8:	4b73      	ldr	r3, [pc, #460]	@ (8005eb8 <mainTask+0xd90>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	f083 0301 	eor.w	r3, r3, #1
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <mainTask+0xbd6>

				devmotoryukaricalisiyor=1;
 8005cf6:	4b6b      	ldr	r3, [pc, #428]	@ (8005ea4 <mainTask+0xd7c>)
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	701a      	strb	r2, [r3, #0]
 8005cfc:	e002      	b.n	8005d04 <mainTask+0xbdc>
			} else {
				devmotoryukaricalisiyor=0;
 8005cfe:	4b69      	ldr	r3, [pc, #420]	@ (8005ea4 <mainTask+0xd7c>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	701a      	strb	r2, [r3, #0]
			}

			if(devmotoryukaricalisiyor==1) {
 8005d04:	4b67      	ldr	r3, [pc, #412]	@ (8005ea4 <mainTask+0xd7c>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d007      	beq.n	8005d1c <mainTask+0xbf4>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	2120      	movs	r1, #32
 8005d10:	4862      	ldr	r0, [pc, #392]	@ (8005e9c <mainTask+0xd74>)
 8005d12:	f002 fbc6 	bl	80084a2 <HAL_GPIO_WritePin>
				devyukarivalfcalisiyor=1;
 8005d16:	4b69      	ldr	r3, [pc, #420]	@ (8005ebc <mainTask+0xd94>)
 8005d18:	2201      	movs	r2, #1
 8005d1a:	701a      	strb	r2, [r3, #0]
			}
			// devirme yukari + yuruyus ileri valf timer calismasi

			if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005d1c:	4b67      	ldr	r3, [pc, #412]	@ (8005ebc <mainTask+0xd94>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d025      	beq.n	8005d70 <mainTask+0xc48>
 8005d24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d28:	4857      	ldr	r0, [pc, #348]	@ (8005e88 <mainTask+0xd60>)
 8005d2a:	f002 fba3 	bl	8008474 <HAL_GPIO_ReadPin>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d007      	beq.n	8005d44 <mainTask+0xc1c>
 8005d34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005d38:	4858      	ldr	r0, [pc, #352]	@ (8005e9c <mainTask+0xd74>)
 8005d3a:	f002 fb9b 	bl	8008474 <HAL_GPIO_ReadPin>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d115      	bne.n	8005d70 <mainTask+0xc48>
 8005d44:	4b53      	ldr	r3, [pc, #332]	@ (8005e94 <mainTask+0xd6c>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d011      	beq.n	8005d70 <mainTask+0xc48>
 8005d4c:	4b52      	ldr	r3, [pc, #328]	@ (8005e98 <mainTask+0xd70>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00d      	beq.n	8005d70 <mainTask+0xc48>
 8005d54:	4b5a      	ldr	r3, [pc, #360]	@ (8005ec0 <mainTask+0xd98>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	f083 0301 	eor.w	r3, r3, #1
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d006      	beq.n	8005d70 <mainTask+0xc48>
				timer2=millis;
 8005d62:	4b58      	ldr	r3, [pc, #352]	@ (8005ec4 <mainTask+0xd9c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a58      	ldr	r2, [pc, #352]	@ (8005ec8 <mainTask+0xda0>)
 8005d68:	6013      	str	r3, [r2, #0]
				butonKontrol4=1;
 8005d6a:	4b55      	ldr	r3, [pc, #340]	@ (8005ec0 <mainTask+0xd98>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	701a      	strb	r2, [r3, #0]
			}

			if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005d70:	4b54      	ldr	r3, [pc, #336]	@ (8005ec4 <mainTask+0xd9c>)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	4b54      	ldr	r3, [pc, #336]	@ (8005ec8 <mainTask+0xda0>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	4a54      	ldr	r2, [pc, #336]	@ (8005ecc <mainTask+0xda4>)
 8005d7c:	7812      	ldrb	r2, [r2, #0]
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d303      	bcc.n	8005d8a <mainTask+0xc62>
 8005d82:	4b4f      	ldr	r3, [pc, #316]	@ (8005ec0 <mainTask+0xd98>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10d      	bne.n	8005da6 <mainTask+0xc7e>
 8005d8a:	4b42      	ldr	r3, [pc, #264]	@ (8005e94 <mainTask+0xd6c>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	f083 0301 	eor.w	r3, r3, #1
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d106      	bne.n	8005da6 <mainTask+0xc7e>
 8005d98:	4b3f      	ldr	r3, [pc, #252]	@ (8005e98 <mainTask+0xd70>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	f083 0301 	eor.w	r3, r3, #1
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00a      	beq.n	8005dbc <mainTask+0xc94>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005da6:	2200      	movs	r2, #0
 8005da8:	2120      	movs	r1, #32
 8005daa:	483c      	ldr	r0, [pc, #240]	@ (8005e9c <mainTask+0xd74>)
 8005dac:	f002 fb79 	bl	80084a2 <HAL_GPIO_WritePin>
				devyukarivalfcalisiyor=0;
 8005db0:	4b42      	ldr	r3, [pc, #264]	@ (8005ebc <mainTask+0xd94>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	701a      	strb	r2, [r3, #0]
				butonKontrol4=0;
 8005db6:	4b42      	ldr	r3, [pc, #264]	@ (8005ec0 <mainTask+0xd98>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	701a      	strb	r2, [r3, #0]
			}

			// Devirme Asagi veya yuruyus geri calisma

			if((menuGiris==0)
 8005dbc:	4b33      	ldr	r3, [pc, #204]	@ (8005e8c <mainTask+0xd64>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f040 8087 	bne.w	8005ed4 <mainTask+0xdac>
					&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005dc6:	4b32      	ldr	r3, [pc, #200]	@ (8005e90 <mainTask+0xd68>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d003      	beq.n	8005dd6 <mainTask+0xcae>
 8005dce:	4b30      	ldr	r3, [pc, #192]	@ (8005e90 <mainTask+0xd68>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d17e      	bne.n	8005ed4 <mainTask+0xdac>
					&& (stopVar) && (kapiSivicVar)
 8005dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8005e94 <mainTask+0xd6c>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d07a      	beq.n	8005ed4 <mainTask+0xdac>
 8005dde:	4b2e      	ldr	r3, [pc, #184]	@ (8005e98 <mainTask+0xd70>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d076      	beq.n	8005ed4 <mainTask+0xdac>
					&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005de6:	2140      	movs	r1, #64	@ 0x40
 8005de8:	482c      	ldr	r0, [pc, #176]	@ (8005e9c <mainTask+0xd74>)
 8005dea:	f002 fb43 	bl	8008474 <HAL_GPIO_ReadPin>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d16f      	bne.n	8005ed4 <mainTask+0xdac>
					&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005df4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005df8:	4828      	ldr	r0, [pc, #160]	@ (8005e9c <mainTask+0xd74>)
 8005dfa:	f002 fb3b 	bl	8008474 <HAL_GPIO_ReadPin>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <mainTask+0xce4>
 8005e04:	4b32      	ldr	r3, [pc, #200]	@ (8005ed0 <mainTask+0xda8>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d163      	bne.n	8005ed4 <mainTask+0xdac>
					&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005e0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e10:	481d      	ldr	r0, [pc, #116]	@ (8005e88 <mainTask+0xd60>)
 8005e12:	f002 fb2f 	bl	8008474 <HAL_GPIO_ReadPin>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d10f      	bne.n	8005e3c <mainTask+0xd14>
					&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005e1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005e20:	4819      	ldr	r0, [pc, #100]	@ (8005e88 <mainTask+0xd60>)
 8005e22:	f002 fb27 	bl	8008474 <HAL_GPIO_ReadPin>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d107      	bne.n	8005e3c <mainTask+0xd14>
					&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005e2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005e30:	4815      	ldr	r0, [pc, #84]	@ (8005e88 <mainTask+0xd60>)
 8005e32:	f002 fb1f 	bl	8008474 <HAL_GPIO_ReadPin>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d003      	beq.n	8005e44 <mainTask+0xd1c>
 8005e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb4 <mainTask+0xd8c>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d047      	beq.n	8005ed4 <mainTask+0xdac>
					&& (yukarimotorcalisiyor==0)
 8005e44:	4b18      	ldr	r3, [pc, #96]	@ (8005ea8 <mainTask+0xd80>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d143      	bne.n	8005ed4 <mainTask+0xdac>
					&& (yukarivalfcalisiyor==0)
 8005e4c:	4b17      	ldr	r3, [pc, #92]	@ (8005eac <mainTask+0xd84>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	f083 0301 	eor.w	r3, r3, #1
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d03c      	beq.n	8005ed4 <mainTask+0xdac>
					&& (asagivalfcalisiyor==0)
 8005e5a:	4b15      	ldr	r3, [pc, #84]	@ (8005eb0 <mainTask+0xd88>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d138      	bne.n	8005ed4 <mainTask+0xdac>
					&& (devyukarivalfcalisiyor==0)
 8005e62:	4b16      	ldr	r3, [pc, #88]	@ (8005ebc <mainTask+0xd94>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	f083 0301 	eor.w	r3, r3, #1
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d031      	beq.n	8005ed4 <mainTask+0xdac>
					&& (devmotoryukaricalisiyor==0)) {
 8005e70:	4b0c      	ldr	r3, [pc, #48]	@ (8005ea4 <mainTask+0xd7c>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	f083 0301 	eor.w	r3, r3, #1
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d02a      	beq.n	8005ed4 <mainTask+0xdac>

				devmotorasagicalisiyor=1;
 8005e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005eb4 <mainTask+0xd8c>)
 8005e80:	2201      	movs	r2, #1
 8005e82:	701a      	strb	r2, [r3, #0]
 8005e84:	e029      	b.n	8005eda <mainTask+0xdb2>
 8005e86:	bf00      	nop
 8005e88:	40010c00 	.word	0x40010c00
 8005e8c:	20000ca1 	.word	0x20000ca1
 8005e90:	20000c93 	.word	0x20000c93
 8005e94:	20000cd5 	.word	0x20000cd5
 8005e98:	20000cd6 	.word	0x20000cd6
 8005e9c:	40011000 	.word	0x40011000
 8005ea0:	20000c94 	.word	0x20000c94
 8005ea4:	20000cb9 	.word	0x20000cb9
 8005ea8:	20000cb8 	.word	0x20000cb8
 8005eac:	20000cbc 	.word	0x20000cbc
 8005eb0:	20000cbb 	.word	0x20000cbb
 8005eb4:	20000cba 	.word	0x20000cba
 8005eb8:	20000cbe 	.word	0x20000cbe
 8005ebc:	20000cbd 	.word	0x20000cbd
 8005ec0:	20000cb5 	.word	0x20000cb5
 8005ec4:	20000c60 	.word	0x20000c60
 8005ec8:	20000c6c 	.word	0x20000c6c
 8005ecc:	20000c9a 	.word	0x20000c9a
 8005ed0:	20000c95 	.word	0x20000c95
			} else {
				devmotorasagicalisiyor=0;
 8005ed4:	4b96      	ldr	r3, [pc, #600]	@ (8006130 <mainTask+0x1008>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	701a      	strb	r2, [r3, #0]
			}

			if(devmotorasagicalisiyor==1) {
 8005eda:	4b95      	ldr	r3, [pc, #596]	@ (8006130 <mainTask+0x1008>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d007      	beq.n	8005ef2 <mainTask+0xdca>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	2110      	movs	r1, #16
 8005ee6:	4893      	ldr	r0, [pc, #588]	@ (8006134 <mainTask+0x100c>)
 8005ee8:	f002 fadb 	bl	80084a2 <HAL_GPIO_WritePin>
				devasagivalfcalisiyor=1;
 8005eec:	4b92      	ldr	r3, [pc, #584]	@ (8006138 <mainTask+0x1010>)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	701a      	strb	r2, [r3, #0]
			}

			//devirme asagi + geri valf timer calismasi

			if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005ef2:	4b91      	ldr	r3, [pc, #580]	@ (8006138 <mainTask+0x1010>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d024      	beq.n	8005f44 <mainTask+0xe1c>
 8005efa:	2140      	movs	r1, #64	@ 0x40
 8005efc:	488d      	ldr	r0, [pc, #564]	@ (8006134 <mainTask+0x100c>)
 8005efe:	f002 fab9 	bl	8008474 <HAL_GPIO_ReadPin>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d007      	beq.n	8005f18 <mainTask+0xdf0>
 8005f08:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f0c:	4889      	ldr	r0, [pc, #548]	@ (8006134 <mainTask+0x100c>)
 8005f0e:	f002 fab1 	bl	8008474 <HAL_GPIO_ReadPin>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d115      	bne.n	8005f44 <mainTask+0xe1c>
 8005f18:	4b88      	ldr	r3, [pc, #544]	@ (800613c <mainTask+0x1014>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d011      	beq.n	8005f44 <mainTask+0xe1c>
 8005f20:	4b87      	ldr	r3, [pc, #540]	@ (8006140 <mainTask+0x1018>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00d      	beq.n	8005f44 <mainTask+0xe1c>
 8005f28:	4b86      	ldr	r3, [pc, #536]	@ (8006144 <mainTask+0x101c>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	f083 0301 	eor.w	r3, r3, #1
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d006      	beq.n	8005f44 <mainTask+0xe1c>
				timer2=millis;
 8005f36:	4b84      	ldr	r3, [pc, #528]	@ (8006148 <mainTask+0x1020>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a84      	ldr	r2, [pc, #528]	@ (800614c <mainTask+0x1024>)
 8005f3c:	6013      	str	r3, [r2, #0]
				butonKontrol5=1;
 8005f3e:	4b81      	ldr	r3, [pc, #516]	@ (8006144 <mainTask+0x101c>)
 8005f40:	2201      	movs	r2, #1
 8005f42:	701a      	strb	r2, [r3, #0]
			}

			if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005f44:	4b80      	ldr	r3, [pc, #512]	@ (8006148 <mainTask+0x1020>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	4b80      	ldr	r3, [pc, #512]	@ (800614c <mainTask+0x1024>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	4a80      	ldr	r2, [pc, #512]	@ (8006150 <mainTask+0x1028>)
 8005f50:	7812      	ldrb	r2, [r2, #0]
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d303      	bcc.n	8005f5e <mainTask+0xe36>
 8005f56:	4b7b      	ldr	r3, [pc, #492]	@ (8006144 <mainTask+0x101c>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10d      	bne.n	8005f7a <mainTask+0xe52>
 8005f5e:	4b77      	ldr	r3, [pc, #476]	@ (800613c <mainTask+0x1014>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	f083 0301 	eor.w	r3, r3, #1
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d106      	bne.n	8005f7a <mainTask+0xe52>
 8005f6c:	4b74      	ldr	r3, [pc, #464]	@ (8006140 <mainTask+0x1018>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	f083 0301 	eor.w	r3, r3, #1
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <mainTask+0xe68>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2110      	movs	r1, #16
 8005f7e:	486d      	ldr	r0, [pc, #436]	@ (8006134 <mainTask+0x100c>)
 8005f80:	f002 fa8f 	bl	80084a2 <HAL_GPIO_WritePin>
				devasagivalfcalisiyor=0;
 8005f84:	4b6c      	ldr	r3, [pc, #432]	@ (8006138 <mainTask+0x1010>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]
				butonKontrol5=0;
 8005f8a:	4b6e      	ldr	r3, [pc, #440]	@ (8006144 <mainTask+0x101c>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	701a      	strb	r2, [r3, #0]
			}

			// makine durum kontrolü

			if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005f90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f94:	486f      	ldr	r0, [pc, #444]	@ (8006154 <mainTask+0x102c>)
 8005f96:	f002 fa6d 	bl	8008474 <HAL_GPIO_ReadPin>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d120      	bne.n	8005fe2 <mainTask+0xeba>
					&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005fa0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005fa4:	486b      	ldr	r0, [pc, #428]	@ (8006154 <mainTask+0x102c>)
 8005fa6:	f002 fa65 	bl	8008474 <HAL_GPIO_ReadPin>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d118      	bne.n	8005fe2 <mainTask+0xeba>
					&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005fb0:	2104      	movs	r1, #4
 8005fb2:	4868      	ldr	r0, [pc, #416]	@ (8006154 <mainTask+0x102c>)
 8005fb4:	f002 fa5e 	bl	8008474 <HAL_GPIO_ReadPin>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d111      	bne.n	8005fe2 <mainTask+0xeba>
					&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005fbe:	2102      	movs	r1, #2
 8005fc0:	4864      	ldr	r0, [pc, #400]	@ (8006154 <mainTask+0x102c>)
 8005fc2:	f002 fa57 	bl	8008474 <HAL_GPIO_ReadPin>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10a      	bne.n	8005fe2 <mainTask+0xeba>
					&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005fcc:	2101      	movs	r1, #1
 8005fce:	4861      	ldr	r0, [pc, #388]	@ (8006154 <mainTask+0x102c>)
 8005fd0:	f002 fa50 	bl	8008474 <HAL_GPIO_ReadPin>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d103      	bne.n	8005fe2 <mainTask+0xeba>
				makineStop=1;
 8005fda:	4b5f      	ldr	r3, [pc, #380]	@ (8006158 <mainTask+0x1030>)
 8005fdc:	2201      	movs	r2, #1
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	e002      	b.n	8005fe8 <mainTask+0xec0>
			} else {
				makineStop=0;
 8005fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8006158 <mainTask+0x1030>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	701a      	strb	r2, [r3, #0]
			}

			//kapi 1 kontrol

			// kapi 1 prudhome
			if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005fe8:	4b5c      	ldr	r3, [pc, #368]	@ (800615c <mainTask+0x1034>)
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d144      	bne.n	800607a <mainTask+0xf52>
 8005ff0:	4b5b      	ldr	r3, [pc, #364]	@ (8006160 <mainTask+0x1038>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d003      	beq.n	8006000 <mainTask+0xed8>
 8005ff8:	4b59      	ldr	r3, [pc, #356]	@ (8006160 <mainTask+0x1038>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d13c      	bne.n	800607a <mainTask+0xf52>
					&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006000:	2180      	movs	r1, #128	@ 0x80
 8006002:	484c      	ldr	r0, [pc, #304]	@ (8006134 <mainTask+0x100c>)
 8006004:	f002 fa36 	bl	8008474 <HAL_GPIO_ReadPin>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d103      	bne.n	8006016 <mainTask+0xeee>
 800600e:	4b55      	ldr	r3, [pc, #340]	@ (8006164 <mainTask+0x103c>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00b      	beq.n	800602e <mainTask+0xf06>
 8006016:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800601a:	484e      	ldr	r0, [pc, #312]	@ (8006154 <mainTask+0x102c>)
 800601c:	f002 fa2a 	bl	8008474 <HAL_GPIO_ReadPin>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d129      	bne.n	800607a <mainTask+0xf52>
 8006026:	4b4f      	ldr	r3, [pc, #316]	@ (8006164 <mainTask+0x103c>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d125      	bne.n	800607a <mainTask+0xf52>
					&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800602e:	2104      	movs	r1, #4
 8006030:	4840      	ldr	r0, [pc, #256]	@ (8006134 <mainTask+0x100c>)
 8006032:	f002 fa1f 	bl	8008474 <HAL_GPIO_ReadPin>
 8006036:	4603      	mov	r3, r0
 8006038:	2b01      	cmp	r3, #1
 800603a:	d003      	beq.n	8006044 <mainTask+0xf1c>
 800603c:	4b4a      	ldr	r3, [pc, #296]	@ (8006168 <mainTask+0x1040>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d11a      	bne.n	800607a <mainTask+0xf52>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006044:	2102      	movs	r1, #2
 8006046:	483b      	ldr	r0, [pc, #236]	@ (8006134 <mainTask+0x100c>)
 8006048:	f002 fa14 	bl	8008474 <HAL_GPIO_ReadPin>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d113      	bne.n	800607a <mainTask+0xf52>
					&&(butonKontrol==0)
 8006052:	4b46      	ldr	r3, [pc, #280]	@ (800616c <mainTask+0x1044>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	f083 0301 	eor.w	r3, r3, #1
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00c      	beq.n	800607a <mainTask+0xf52>
					&&(makineStop==1)) {
 8006060:	4b3d      	ldr	r3, [pc, #244]	@ (8006158 <mainTask+0x1030>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d008      	beq.n	800607a <mainTask+0xf52>

				kapi1prudhome=1;
 8006068:	4b41      	ldr	r3, [pc, #260]	@ (8006170 <mainTask+0x1048>)
 800606a:	2201      	movs	r2, #1
 800606c:	701a      	strb	r2, [r3, #0]
				timer = millis;
 800606e:	4b36      	ldr	r3, [pc, #216]	@ (8006148 <mainTask+0x1020>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a40      	ldr	r2, [pc, #256]	@ (8006174 <mainTask+0x104c>)
 8006074:	6013      	str	r3, [r2, #0]
				bekle();
 8006076:	f7fe f9dd 	bl	8004434 <bekle>
			}

			if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800607a:	4b33      	ldr	r3, [pc, #204]	@ (8006148 <mainTask+0x1020>)
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4b3d      	ldr	r3, [pc, #244]	@ (8006174 <mainTask+0x104c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	4a3c      	ldr	r2, [pc, #240]	@ (8006178 <mainTask+0x1050>)
 8006086:	7812      	ldrb	r2, [r2, #0]
 8006088:	4293      	cmp	r3, r2
 800608a:	d211      	bcs.n	80060b0 <mainTask+0xf88>
 800608c:	2104      	movs	r1, #4
 800608e:	4829      	ldr	r0, [pc, #164]	@ (8006134 <mainTask+0x100c>)
 8006090:	f002 f9f0 	bl	8008474 <HAL_GPIO_ReadPin>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <mainTask+0xf88>
 800609a:	4b33      	ldr	r3, [pc, #204]	@ (8006168 <mainTask+0x1040>)
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d006      	beq.n	80060b0 <mainTask+0xf88>
 80060a2:	4b2d      	ldr	r3, [pc, #180]	@ (8006158 <mainTask+0x1030>)
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	f083 0301 	eor.w	r3, r3, #1
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <mainTask+0xf8e>
				kapi1prudhome=0;
 80060b0:	4b2f      	ldr	r3, [pc, #188]	@ (8006170 <mainTask+0x1048>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	701a      	strb	r2, [r3, #0]
			}

			// kapi 1 buton kontrol

			if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80060b6:	4b29      	ldr	r3, [pc, #164]	@ (800615c <mainTask+0x1034>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d160      	bne.n	8006180 <mainTask+0x1058>
 80060be:	4b28      	ldr	r3, [pc, #160]	@ (8006160 <mainTask+0x1038>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d003      	beq.n	80060ce <mainTask+0xfa6>
 80060c6:	4b26      	ldr	r3, [pc, #152]	@ (8006160 <mainTask+0x1038>)
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d158      	bne.n	8006180 <mainTask+0x1058>

					&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80060ce:	2104      	movs	r1, #4
 80060d0:	4818      	ldr	r0, [pc, #96]	@ (8006134 <mainTask+0x100c>)
 80060d2:	f002 f9cf 	bl	8008474 <HAL_GPIO_ReadPin>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d003      	beq.n	80060e4 <mainTask+0xfbc>
 80060dc:	4b22      	ldr	r3, [pc, #136]	@ (8006168 <mainTask+0x1040>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d14d      	bne.n	8006180 <mainTask+0x1058>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80060e4:	2102      	movs	r1, #2
 80060e6:	4813      	ldr	r0, [pc, #76]	@ (8006134 <mainTask+0x100c>)
 80060e8:	f002 f9c4 	bl	8008474 <HAL_GPIO_ReadPin>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d146      	bne.n	8006180 <mainTask+0x1058>
					&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80060f2:	2180      	movs	r1, #128	@ 0x80
 80060f4:	480f      	ldr	r0, [pc, #60]	@ (8006134 <mainTask+0x100c>)
 80060f6:	f002 f9bd 	bl	8008474 <HAL_GPIO_ReadPin>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d103      	bne.n	8006108 <mainTask+0xfe0>
 8006100:	4b18      	ldr	r3, [pc, #96]	@ (8006164 <mainTask+0x103c>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00b      	beq.n	8006120 <mainTask+0xff8>
 8006108:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800610c:	4811      	ldr	r0, [pc, #68]	@ (8006154 <mainTask+0x102c>)
 800610e:	f002 f9b1 	bl	8008474 <HAL_GPIO_ReadPin>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d133      	bne.n	8006180 <mainTask+0x1058>
 8006118:	4b12      	ldr	r3, [pc, #72]	@ (8006164 <mainTask+0x103c>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d12f      	bne.n	8006180 <mainTask+0x1058>
					&&(makineStop==1)) {
 8006120:	4b0d      	ldr	r3, [pc, #52]	@ (8006158 <mainTask+0x1030>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d02b      	beq.n	8006180 <mainTask+0x1058>

				kapi1butonkontrol=1;
 8006128:	4b14      	ldr	r3, [pc, #80]	@ (800617c <mainTask+0x1054>)
 800612a:	2201      	movs	r2, #1
 800612c:	701a      	strb	r2, [r3, #0]
 800612e:	e02a      	b.n	8006186 <mainTask+0x105e>
 8006130:	20000cba 	.word	0x20000cba
 8006134:	40011000 	.word	0x40011000
 8006138:	20000cbe 	.word	0x20000cbe
 800613c:	20000cd5 	.word	0x20000cd5
 8006140:	20000cd6 	.word	0x20000cd6
 8006144:	20000cb6 	.word	0x20000cb6
 8006148:	20000c60 	.word	0x20000c60
 800614c:	20000c6c 	.word	0x20000c6c
 8006150:	20000c9a 	.word	0x20000c9a
 8006154:	40010c00 	.word	0x40010c00
 8006158:	20000cc5 	.word	0x20000cc5
 800615c:	20000c8d 	.word	0x20000c8d
 8006160:	20000c8c 	.word	0x20000c8c
 8006164:	20000c90 	.word	0x20000c90
 8006168:	20000c8a 	.word	0x20000c8a
 800616c:	20000cb2 	.word	0x20000cb2
 8006170:	20000cc6 	.word	0x20000cc6
 8006174:	20000c64 	.word	0x20000c64
 8006178:	20000c9d 	.word	0x20000c9d
 800617c:	20000cc7 	.word	0x20000cc7
			} else {
				kapi1butonkontrol=0;
 8006180:	4b8b      	ldr	r3, [pc, #556]	@ (80063b0 <mainTask+0x1288>)
 8006182:	2200      	movs	r2, #0
 8006184:	701a      	strb	r2, [r3, #0]
			}

			// kapi 1 pizzato

			if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006186:	4b8b      	ldr	r3, [pc, #556]	@ (80063b4 <mainTask+0x128c>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	2b02      	cmp	r3, #2
 800618c:	d121      	bne.n	80061d2 <mainTask+0x10aa>
 800618e:	4b8a      	ldr	r3, [pc, #552]	@ (80063b8 <mainTask+0x1290>)
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d003      	beq.n	800619e <mainTask+0x1076>
 8006196:	4b88      	ldr	r3, [pc, #544]	@ (80063b8 <mainTask+0x1290>)
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2b03      	cmp	r3, #3
 800619c:	d119      	bne.n	80061d2 <mainTask+0x10aa>

					&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800619e:	2104      	movs	r1, #4
 80061a0:	4886      	ldr	r0, [pc, #536]	@ (80063bc <mainTask+0x1294>)
 80061a2:	f002 f967 	bl	8008474 <HAL_GPIO_ReadPin>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d003      	beq.n	80061b4 <mainTask+0x108c>
 80061ac:	4b84      	ldr	r3, [pc, #528]	@ (80063c0 <mainTask+0x1298>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10e      	bne.n	80061d2 <mainTask+0x10aa>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80061b4:	2102      	movs	r1, #2
 80061b6:	4881      	ldr	r0, [pc, #516]	@ (80063bc <mainTask+0x1294>)
 80061b8:	f002 f95c 	bl	8008474 <HAL_GPIO_ReadPin>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d107      	bne.n	80061d2 <mainTask+0x10aa>
					&&(makineStop==1)) {
 80061c2:	4b80      	ldr	r3, [pc, #512]	@ (80063c4 <mainTask+0x129c>)
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <mainTask+0x10aa>

				kapi1pizzato=1;
 80061ca:	4b7f      	ldr	r3, [pc, #508]	@ (80063c8 <mainTask+0x12a0>)
 80061cc:	2201      	movs	r2, #1
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	e002      	b.n	80061d8 <mainTask+0x10b0>
			} else {
				kapi1pizzato=0;
 80061d2:	4b7d      	ldr	r3, [pc, #500]	@ (80063c8 <mainTask+0x12a0>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	701a      	strb	r2, [r3, #0]
			}

			// kapi 1 çıkış

			if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80061d8:	4b75      	ldr	r3, [pc, #468]	@ (80063b0 <mainTask+0x1288>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d107      	bne.n	80061f0 <mainTask+0x10c8>
 80061e0:	4b79      	ldr	r3, [pc, #484]	@ (80063c8 <mainTask+0x12a0>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d103      	bne.n	80061f0 <mainTask+0x10c8>
 80061e8:	4b78      	ldr	r3, [pc, #480]	@ (80063cc <mainTask+0x12a4>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <mainTask+0x10d4>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80061f0:	2201      	movs	r2, #1
 80061f2:	2180      	movs	r1, #128	@ 0x80
 80061f4:	4876      	ldr	r0, [pc, #472]	@ (80063d0 <mainTask+0x12a8>)
 80061f6:	f002 f954 	bl	80084a2 <HAL_GPIO_WritePin>
 80061fa:	e004      	b.n	8006206 <mainTask+0x10de>
			} else {
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80061fc:	2200      	movs	r2, #0
 80061fe:	2180      	movs	r1, #128	@ 0x80
 8006200:	4873      	ldr	r0, [pc, #460]	@ (80063d0 <mainTask+0x12a8>)
 8006202:	f002 f94e 	bl	80084a2 <HAL_GPIO_WritePin>

			//kapi2 kontrol

			// kapi 2 prudhome

			if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006206:	4b73      	ldr	r3, [pc, #460]	@ (80063d4 <mainTask+0x12ac>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d141      	bne.n	8006292 <mainTask+0x116a>
 800620e:	4b6a      	ldr	r3, [pc, #424]	@ (80063b8 <mainTask+0x1290>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d003      	beq.n	800621e <mainTask+0x10f6>
 8006216:	4b68      	ldr	r3, [pc, #416]	@ (80063b8 <mainTask+0x1290>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	2b03      	cmp	r3, #3
 800621c:	d139      	bne.n	8006292 <mainTask+0x116a>
					&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800621e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006222:	4866      	ldr	r0, [pc, #408]	@ (80063bc <mainTask+0x1294>)
 8006224:	f002 f926 	bl	8008474 <HAL_GPIO_ReadPin>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d103      	bne.n	8006236 <mainTask+0x110e>
 800622e:	4b6a      	ldr	r3, [pc, #424]	@ (80063d8 <mainTask+0x12b0>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00b      	beq.n	800624e <mainTask+0x1126>
 8006236:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800623a:	4868      	ldr	r0, [pc, #416]	@ (80063dc <mainTask+0x12b4>)
 800623c:	f002 f91a 	bl	8008474 <HAL_GPIO_ReadPin>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d125      	bne.n	8006292 <mainTask+0x116a>
 8006246:	4b64      	ldr	r3, [pc, #400]	@ (80063d8 <mainTask+0x12b0>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d121      	bne.n	8006292 <mainTask+0x116a>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800624e:	2102      	movs	r1, #2
 8006250:	485a      	ldr	r0, [pc, #360]	@ (80063bc <mainTask+0x1294>)
 8006252:	f002 f90f 	bl	8008474 <HAL_GPIO_ReadPin>
 8006256:	4603      	mov	r3, r0
 8006258:	2b01      	cmp	r3, #1
 800625a:	d11a      	bne.n	8006292 <mainTask+0x116a>
					&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800625c:	2104      	movs	r1, #4
 800625e:	4857      	ldr	r0, [pc, #348]	@ (80063bc <mainTask+0x1294>)
 8006260:	f002 f908 	bl	8008474 <HAL_GPIO_ReadPin>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d113      	bne.n	8006292 <mainTask+0x116a>
					&&(makineStop==1)
 800626a:	4b56      	ldr	r3, [pc, #344]	@ (80063c4 <mainTask+0x129c>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00f      	beq.n	8006292 <mainTask+0x116a>
					&&(butonKontrol==0)) {
 8006272:	4b5b      	ldr	r3, [pc, #364]	@ (80063e0 <mainTask+0x12b8>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	f083 0301 	eor.w	r3, r3, #1
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	d008      	beq.n	8006292 <mainTask+0x116a>

				kapi2prudhome=1;
 8006280:	4b58      	ldr	r3, [pc, #352]	@ (80063e4 <mainTask+0x12bc>)
 8006282:	2201      	movs	r2, #1
 8006284:	701a      	strb	r2, [r3, #0]
				timer = millis;
 8006286:	4b58      	ldr	r3, [pc, #352]	@ (80063e8 <mainTask+0x12c0>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a58      	ldr	r2, [pc, #352]	@ (80063ec <mainTask+0x12c4>)
 800628c:	6013      	str	r3, [r2, #0]
				bekle();
 800628e:	f7fe f8d1 	bl	8004434 <bekle>
			}

			if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8006292:	4b55      	ldr	r3, [pc, #340]	@ (80063e8 <mainTask+0x12c0>)
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4b55      	ldr	r3, [pc, #340]	@ (80063ec <mainTask+0x12c4>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	4a54      	ldr	r2, [pc, #336]	@ (80063f0 <mainTask+0x12c8>)
 800629e:	7812      	ldrb	r2, [r2, #0]
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d20d      	bcs.n	80062c0 <mainTask+0x1198>
 80062a4:	2102      	movs	r1, #2
 80062a6:	4845      	ldr	r0, [pc, #276]	@ (80063bc <mainTask+0x1294>)
 80062a8:	f002 f8e4 	bl	8008474 <HAL_GPIO_ReadPin>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d006      	beq.n	80062c0 <mainTask+0x1198>
 80062b2:	4b44      	ldr	r3, [pc, #272]	@ (80063c4 <mainTask+0x129c>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	f083 0301 	eor.w	r3, r3, #1
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <mainTask+0x119e>
				kapi2prudhome=0;
 80062c0:	4b48      	ldr	r3, [pc, #288]	@ (80063e4 <mainTask+0x12bc>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	701a      	strb	r2, [r3, #0]
			}

			// kapi 2 buton kontrol

			if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80062c6:	4b43      	ldr	r3, [pc, #268]	@ (80063d4 <mainTask+0x12ac>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d135      	bne.n	800633a <mainTask+0x1212>
 80062ce:	4b3a      	ldr	r3, [pc, #232]	@ (80063b8 <mainTask+0x1290>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d003      	beq.n	80062de <mainTask+0x11b6>
 80062d6:	4b38      	ldr	r3, [pc, #224]	@ (80063b8 <mainTask+0x1290>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d12d      	bne.n	800633a <mainTask+0x1212>

					&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80062de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80062e2:	4836      	ldr	r0, [pc, #216]	@ (80063bc <mainTask+0x1294>)
 80062e4:	f002 f8c6 	bl	8008474 <HAL_GPIO_ReadPin>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d103      	bne.n	80062f6 <mainTask+0x11ce>
 80062ee:	4b3a      	ldr	r3, [pc, #232]	@ (80063d8 <mainTask+0x12b0>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <mainTask+0x11e6>
 80062f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80062fa:	4838      	ldr	r0, [pc, #224]	@ (80063dc <mainTask+0x12b4>)
 80062fc:	f002 f8ba 	bl	8008474 <HAL_GPIO_ReadPin>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d119      	bne.n	800633a <mainTask+0x1212>
 8006306:	4b34      	ldr	r3, [pc, #208]	@ (80063d8 <mainTask+0x12b0>)
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d115      	bne.n	800633a <mainTask+0x1212>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800630e:	2102      	movs	r1, #2
 8006310:	482a      	ldr	r0, [pc, #168]	@ (80063bc <mainTask+0x1294>)
 8006312:	f002 f8af 	bl	8008474 <HAL_GPIO_ReadPin>
 8006316:	4603      	mov	r3, r0
 8006318:	2b01      	cmp	r3, #1
 800631a:	d10e      	bne.n	800633a <mainTask+0x1212>
					&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800631c:	2104      	movs	r1, #4
 800631e:	4827      	ldr	r0, [pc, #156]	@ (80063bc <mainTask+0x1294>)
 8006320:	f002 f8a8 	bl	8008474 <HAL_GPIO_ReadPin>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d107      	bne.n	800633a <mainTask+0x1212>
					&&(makineStop==1)) {
 800632a:	4b26      	ldr	r3, [pc, #152]	@ (80063c4 <mainTask+0x129c>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <mainTask+0x1212>

				kapi2butonkontrol=1;
 8006332:	4b30      	ldr	r3, [pc, #192]	@ (80063f4 <mainTask+0x12cc>)
 8006334:	2201      	movs	r2, #1
 8006336:	701a      	strb	r2, [r3, #0]
 8006338:	e002      	b.n	8006340 <mainTask+0x1218>
			} else {
				kapi2butonkontrol=0;
 800633a:	4b2e      	ldr	r3, [pc, #184]	@ (80063f4 <mainTask+0x12cc>)
 800633c:	2200      	movs	r2, #0
 800633e:	701a      	strb	r2, [r3, #0]
			}

			// kapi 2 pizzato

			if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006340:	4b24      	ldr	r3, [pc, #144]	@ (80063d4 <mainTask+0x12ac>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b02      	cmp	r3, #2
 8006346:	d11d      	bne.n	8006384 <mainTask+0x125c>
 8006348:	4b1b      	ldr	r3, [pc, #108]	@ (80063b8 <mainTask+0x1290>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d003      	beq.n	8006358 <mainTask+0x1230>
 8006350:	4b19      	ldr	r3, [pc, #100]	@ (80063b8 <mainTask+0x1290>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b03      	cmp	r3, #3
 8006356:	d115      	bne.n	8006384 <mainTask+0x125c>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006358:	2102      	movs	r1, #2
 800635a:	4818      	ldr	r0, [pc, #96]	@ (80063bc <mainTask+0x1294>)
 800635c:	f002 f88a 	bl	8008474 <HAL_GPIO_ReadPin>
 8006360:	4603      	mov	r3, r0
 8006362:	2b01      	cmp	r3, #1
 8006364:	d10e      	bne.n	8006384 <mainTask+0x125c>
					&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006366:	2104      	movs	r1, #4
 8006368:	4814      	ldr	r0, [pc, #80]	@ (80063bc <mainTask+0x1294>)
 800636a:	f002 f883 	bl	8008474 <HAL_GPIO_ReadPin>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d107      	bne.n	8006384 <mainTask+0x125c>
					&&(makineStop==1)) {
 8006374:	4b13      	ldr	r3, [pc, #76]	@ (80063c4 <mainTask+0x129c>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <mainTask+0x125c>

				kapi2pizzato=1;
 800637c:	4b1e      	ldr	r3, [pc, #120]	@ (80063f8 <mainTask+0x12d0>)
 800637e:	2201      	movs	r2, #1
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	e002      	b.n	800638a <mainTask+0x1262>
			} else {
				kapi2pizzato=0;
 8006384:	4b1c      	ldr	r3, [pc, #112]	@ (80063f8 <mainTask+0x12d0>)
 8006386:	2200      	movs	r2, #0
 8006388:	701a      	strb	r2, [r3, #0]
			}

			// kapi 2 çıkış

			if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800638a:	4b1a      	ldr	r3, [pc, #104]	@ (80063f4 <mainTask+0x12cc>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d107      	bne.n	80063a2 <mainTask+0x127a>
 8006392:	4b19      	ldr	r3, [pc, #100]	@ (80063f8 <mainTask+0x12d0>)
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d103      	bne.n	80063a2 <mainTask+0x127a>
 800639a:	4b12      	ldr	r3, [pc, #72]	@ (80063e4 <mainTask+0x12bc>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d02c      	beq.n	80063fc <mainTask+0x12d4>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80063a2:	2201      	movs	r2, #1
 80063a4:	2140      	movs	r1, #64	@ 0x40
 80063a6:	480a      	ldr	r0, [pc, #40]	@ (80063d0 <mainTask+0x12a8>)
 80063a8:	f002 f87b 	bl	80084a2 <HAL_GPIO_WritePin>
 80063ac:	e02b      	b.n	8006406 <mainTask+0x12de>
 80063ae:	bf00      	nop
 80063b0:	20000cc7 	.word	0x20000cc7
 80063b4:	20000c8d 	.word	0x20000c8d
 80063b8:	20000c8c 	.word	0x20000c8c
 80063bc:	40011000 	.word	0x40011000
 80063c0:	20000c8a 	.word	0x20000c8a
 80063c4:	20000cc5 	.word	0x20000cc5
 80063c8:	20000cc8 	.word	0x20000cc8
 80063cc:	20000cc6 	.word	0x20000cc6
 80063d0:	40010800 	.word	0x40010800
 80063d4:	20000c8e 	.word	0x20000c8e
 80063d8:	20000c90 	.word	0x20000c90
 80063dc:	40010c00 	.word	0x40010c00
 80063e0:	20000cb2 	.word	0x20000cb2
 80063e4:	20000cc9 	.word	0x20000cc9
 80063e8:	20000c60 	.word	0x20000c60
 80063ec:	20000c64 	.word	0x20000c64
 80063f0:	20000c9e 	.word	0x20000c9e
 80063f4:	20000cca 	.word	0x20000cca
 80063f8:	20000ccb 	.word	0x20000ccb
			} else {
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80063fc:	2200      	movs	r2, #0
 80063fe:	2140      	movs	r1, #64	@ 0x40
 8006400:	4835      	ldr	r0, [pc, #212]	@ (80064d8 <mainTask+0x13b0>)
 8006402:	f002 f84e 	bl	80084a2 <HAL_GPIO_WritePin>
			}

			//   kapi tabla kontrol ***

			if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 8006406:	4b35      	ldr	r3, [pc, #212]	@ (80064dc <mainTask+0x13b4>)
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <mainTask+0x12ee>
 800640e:	4b33      	ldr	r3, [pc, #204]	@ (80064dc <mainTask+0x13b4>)
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d115      	bne.n	8006442 <mainTask+0x131a>
					&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006416:	2104      	movs	r1, #4
 8006418:	4831      	ldr	r0, [pc, #196]	@ (80064e0 <mainTask+0x13b8>)
 800641a:	f002 f82b 	bl	8008474 <HAL_GPIO_ReadPin>
 800641e:	4603      	mov	r3, r0
 8006420:	2b01      	cmp	r3, #1
 8006422:	d003      	beq.n	800642c <mainTask+0x1304>
 8006424:	4b2f      	ldr	r3, [pc, #188]	@ (80064e4 <mainTask+0x13bc>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10a      	bne.n	8006442 <mainTask+0x131a>
					&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 800642c:	2102      	movs	r1, #2
 800642e:	482c      	ldr	r0, [pc, #176]	@ (80064e0 <mainTask+0x13b8>)
 8006430:	f002 f820 	bl	8008474 <HAL_GPIO_ReadPin>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d103      	bne.n	8006442 <mainTask+0x131a>

				kapiTablaAcKonumKat1=1;
 800643a:	4b2b      	ldr	r3, [pc, #172]	@ (80064e8 <mainTask+0x13c0>)
 800643c:	2201      	movs	r2, #1
 800643e:	701a      	strb	r2, [r3, #0]
 8006440:	e002      	b.n	8006448 <mainTask+0x1320>
			} else {
				kapiTablaAcKonumKat1=0;
 8006442:	4b29      	ldr	r3, [pc, #164]	@ (80064e8 <mainTask+0x13c0>)
 8006444:	2200      	movs	r2, #0
 8006446:	701a      	strb	r2, [r3, #0]
			}

			if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8006448:	4b24      	ldr	r3, [pc, #144]	@ (80064dc <mainTask+0x13b4>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d003      	beq.n	8006458 <mainTask+0x1330>
 8006450:	4b22      	ldr	r3, [pc, #136]	@ (80064dc <mainTask+0x13b4>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d111      	bne.n	800647c <mainTask+0x1354>
					&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006458:	2102      	movs	r1, #2
 800645a:	4821      	ldr	r0, [pc, #132]	@ (80064e0 <mainTask+0x13b8>)
 800645c:	f002 f80a 	bl	8008474 <HAL_GPIO_ReadPin>
 8006460:	4603      	mov	r3, r0
 8006462:	2b01      	cmp	r3, #1
 8006464:	d10a      	bne.n	800647c <mainTask+0x1354>
					&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8006466:	2104      	movs	r1, #4
 8006468:	481d      	ldr	r0, [pc, #116]	@ (80064e0 <mainTask+0x13b8>)
 800646a:	f002 f803 	bl	8008474 <HAL_GPIO_ReadPin>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d103      	bne.n	800647c <mainTask+0x1354>

				kapiTablaAcKonumKat2=1;
 8006474:	4b1d      	ldr	r3, [pc, #116]	@ (80064ec <mainTask+0x13c4>)
 8006476:	2201      	movs	r2, #1
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	e002      	b.n	8006482 <mainTask+0x135a>
			} else {
				kapiTablaAcKonumKat2=0;
 800647c:	4b1b      	ldr	r3, [pc, #108]	@ (80064ec <mainTask+0x13c4>)
 800647e:	2200      	movs	r2, #0
 8006480:	701a      	strb	r2, [r3, #0]
			}

			if(kapiTablaAcKonumKat1==1
 8006482:	4b19      	ldr	r3, [pc, #100]	@ (80064e8 <mainTask+0x13c0>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00f      	beq.n	80064aa <mainTask+0x1382>
					&& kapiAcTipi==1
 800648a:	4b19      	ldr	r3, [pc, #100]	@ (80064f0 <mainTask+0x13c8>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d10b      	bne.n	80064aa <mainTask+0x1382>
					&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8006492:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006496:	4817      	ldr	r0, [pc, #92]	@ (80064f4 <mainTask+0x13cc>)
 8006498:	f001 ffec 	bl	8008474 <HAL_GPIO_ReadPin>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d103      	bne.n	80064aa <mainTask+0x1382>

				kapiactablaesp1=1;
 80064a2:	4b15      	ldr	r3, [pc, #84]	@ (80064f8 <mainTask+0x13d0>)
 80064a4:	2201      	movs	r2, #1
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	e002      	b.n	80064b0 <mainTask+0x1388>
			} else {
				kapiactablaesp1=0;
 80064aa:	4b13      	ldr	r3, [pc, #76]	@ (80064f8 <mainTask+0x13d0>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	701a      	strb	r2, [r3, #0]
			}

			if(kapiTablaAcKonumKat2==1
 80064b0:	4b0e      	ldr	r3, [pc, #56]	@ (80064ec <mainTask+0x13c4>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d023      	beq.n	8006500 <mainTask+0x13d8>
					&& kapiAcTipi==1
 80064b8:	4b0d      	ldr	r3, [pc, #52]	@ (80064f0 <mainTask+0x13c8>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d11f      	bne.n	8006500 <mainTask+0x13d8>
					&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80064c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80064c4:	480b      	ldr	r0, [pc, #44]	@ (80064f4 <mainTask+0x13cc>)
 80064c6:	f001 ffd5 	bl	8008474 <HAL_GPIO_ReadPin>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d117      	bne.n	8006500 <mainTask+0x13d8>

				kapiactablaesp2=1;
 80064d0:	4b0a      	ldr	r3, [pc, #40]	@ (80064fc <mainTask+0x13d4>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	e016      	b.n	8006506 <mainTask+0x13de>
 80064d8:	40010800 	.word	0x40010800
 80064dc:	20000c91 	.word	0x20000c91
 80064e0:	40011000 	.word	0x40011000
 80064e4:	20000c8a 	.word	0x20000c8a
 80064e8:	20000ccf 	.word	0x20000ccf
 80064ec:	20000cd0 	.word	0x20000cd0
 80064f0:	20000c90 	.word	0x20000c90
 80064f4:	40010c00 	.word	0x40010c00
 80064f8:	20000cdf 	.word	0x20000cdf
 80064fc:	20000ce0 	.word	0x20000ce0
			} else {
				kapiactablaesp2=0;
 8006500:	4b7e      	ldr	r3, [pc, #504]	@ (80066fc <mainTask+0x15d4>)
 8006502:	2200      	movs	r2, #0
 8006504:	701a      	strb	r2, [r3, #0]
			}

			// tabla kapısı prudhome

			if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006506:	4b7e      	ldr	r3, [pc, #504]	@ (8006700 <mainTask+0x15d8>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d154      	bne.n	80065b8 <mainTask+0x1490>
 800650e:	4b7d      	ldr	r3, [pc, #500]	@ (8006704 <mainTask+0x15dc>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b02      	cmp	r3, #2
 8006514:	d003      	beq.n	800651e <mainTask+0x13f6>
 8006516:	4b7b      	ldr	r3, [pc, #492]	@ (8006704 <mainTask+0x15dc>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b03      	cmp	r3, #3
 800651c:	d14c      	bne.n	80065b8 <mainTask+0x1490>
					&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800651e:	4b7a      	ldr	r3, [pc, #488]	@ (8006708 <mainTask+0x15e0>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d103      	bne.n	800652e <mainTask+0x1406>
 8006526:	4b79      	ldr	r3, [pc, #484]	@ (800670c <mainTask+0x15e4>)
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d044      	beq.n	80065b8 <mainTask+0x1490>
					&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 800652e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006532:	4877      	ldr	r0, [pc, #476]	@ (8006710 <mainTask+0x15e8>)
 8006534:	f001 ff9e 	bl	8008474 <HAL_GPIO_ReadPin>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d01c      	beq.n	8006578 <mainTask+0x1450>
							||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 800653e:	2180      	movs	r1, #128	@ 0x80
 8006540:	4873      	ldr	r0, [pc, #460]	@ (8006710 <mainTask+0x15e8>)
 8006542:	f001 ff97 	bl	8008474 <HAL_GPIO_ReadPin>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d106      	bne.n	800655a <mainTask+0x1432>
							&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 800654c:	2104      	movs	r1, #4
 800654e:	4870      	ldr	r0, [pc, #448]	@ (8006710 <mainTask+0x15e8>)
 8006550:	f001 ff90 	bl	8008474 <HAL_GPIO_ReadPin>
 8006554:	4603      	mov	r3, r0
 8006556:	2b01      	cmp	r3, #1
 8006558:	d00e      	beq.n	8006578 <mainTask+0x1450>
							||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 800655a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800655e:	486c      	ldr	r0, [pc, #432]	@ (8006710 <mainTask+0x15e8>)
 8006560:	f001 ff88 	bl	8008474 <HAL_GPIO_ReadPin>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10a      	bne.n	8006580 <mainTask+0x1458>
							&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 800656a:	2102      	movs	r1, #2
 800656c:	4868      	ldr	r0, [pc, #416]	@ (8006710 <mainTask+0x15e8>)
 800656e:	f001 ff81 	bl	8008474 <HAL_GPIO_ReadPin>
 8006572:	4603      	mov	r3, r0
 8006574:	2b01      	cmp	r3, #1
 8006576:	d103      	bne.n	8006580 <mainTask+0x1458>
					&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006578:	4b66      	ldr	r3, [pc, #408]	@ (8006714 <mainTask+0x15ec>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d007      	beq.n	8006590 <mainTask+0x1468>
 8006580:	4b65      	ldr	r3, [pc, #404]	@ (8006718 <mainTask+0x15f0>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d103      	bne.n	8006590 <mainTask+0x1468>
 8006588:	4b5c      	ldr	r3, [pc, #368]	@ (80066fc <mainTask+0x15d4>)
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d013      	beq.n	80065b8 <mainTask+0x1490>
					&&(makineStop==1)
 8006590:	4b62      	ldr	r3, [pc, #392]	@ (800671c <mainTask+0x15f4>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00f      	beq.n	80065b8 <mainTask+0x1490>
					&&(butonKontrol==0)) {
 8006598:	4b61      	ldr	r3, [pc, #388]	@ (8006720 <mainTask+0x15f8>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	f083 0301 	eor.w	r3, r3, #1
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d008      	beq.n	80065b8 <mainTask+0x1490>

				kapiTablaprudhome=1;
 80065a6:	4b5f      	ldr	r3, [pc, #380]	@ (8006724 <mainTask+0x15fc>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	701a      	strb	r2, [r3, #0]
				timer = millis;
 80065ac:	4b5e      	ldr	r3, [pc, #376]	@ (8006728 <mainTask+0x1600>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a5e      	ldr	r2, [pc, #376]	@ (800672c <mainTask+0x1604>)
 80065b2:	6013      	str	r3, [r2, #0]
				bekle();
 80065b4:	f7fd ff3e 	bl	8004434 <bekle>
			}

			if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80065b8:	4b5b      	ldr	r3, [pc, #364]	@ (8006728 <mainTask+0x1600>)
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	4b5b      	ldr	r3, [pc, #364]	@ (800672c <mainTask+0x1604>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	4a5b      	ldr	r2, [pc, #364]	@ (8006730 <mainTask+0x1608>)
 80065c4:	7812      	ldrb	r2, [r2, #0]
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d214      	bcs.n	80065f4 <mainTask+0x14cc>
 80065ca:	4b4f      	ldr	r3, [pc, #316]	@ (8006708 <mainTask+0x15e0>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	f083 0301 	eor.w	r3, r3, #1
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d006      	beq.n	80065e6 <mainTask+0x14be>
 80065d8:	4b4c      	ldr	r3, [pc, #304]	@ (800670c <mainTask+0x15e4>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	f083 0301 	eor.w	r3, r3, #1
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d106      	bne.n	80065f4 <mainTask+0x14cc>
 80065e6:	4b4d      	ldr	r3, [pc, #308]	@ (800671c <mainTask+0x15f4>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	f083 0301 	eor.w	r3, r3, #1
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <mainTask+0x14d2>
				kapiTablaprudhome=0;
 80065f4:	4b4b      	ldr	r3, [pc, #300]	@ (8006724 <mainTask+0x15fc>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	701a      	strb	r2, [r3, #0]
			}

			// tabla kapı buton kontrol

			if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80065fa:	4b41      	ldr	r3, [pc, #260]	@ (8006700 <mainTask+0x15d8>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d148      	bne.n	8006694 <mainTask+0x156c>
 8006602:	4b40      	ldr	r3, [pc, #256]	@ (8006704 <mainTask+0x15dc>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	2b02      	cmp	r3, #2
 8006608:	d003      	beq.n	8006612 <mainTask+0x14ea>
 800660a:	4b3e      	ldr	r3, [pc, #248]	@ (8006704 <mainTask+0x15dc>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	2b03      	cmp	r3, #3
 8006610:	d140      	bne.n	8006694 <mainTask+0x156c>

					&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006612:	4b3d      	ldr	r3, [pc, #244]	@ (8006708 <mainTask+0x15e0>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d103      	bne.n	8006622 <mainTask+0x14fa>
 800661a:	4b3c      	ldr	r3, [pc, #240]	@ (800670c <mainTask+0x15e4>)
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d038      	beq.n	8006694 <mainTask+0x156c>
					&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8006622:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006626:	483a      	ldr	r0, [pc, #232]	@ (8006710 <mainTask+0x15e8>)
 8006628:	f001 ff24 	bl	8008474 <HAL_GPIO_ReadPin>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d01c      	beq.n	800666c <mainTask+0x1544>
							||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8006632:	2180      	movs	r1, #128	@ 0x80
 8006634:	4836      	ldr	r0, [pc, #216]	@ (8006710 <mainTask+0x15e8>)
 8006636:	f001 ff1d 	bl	8008474 <HAL_GPIO_ReadPin>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d106      	bne.n	800664e <mainTask+0x1526>
							&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8006640:	2104      	movs	r1, #4
 8006642:	4833      	ldr	r0, [pc, #204]	@ (8006710 <mainTask+0x15e8>)
 8006644:	f001 ff16 	bl	8008474 <HAL_GPIO_ReadPin>
 8006648:	4603      	mov	r3, r0
 800664a:	2b01      	cmp	r3, #1
 800664c:	d00e      	beq.n	800666c <mainTask+0x1544>
							||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 800664e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006652:	482f      	ldr	r0, [pc, #188]	@ (8006710 <mainTask+0x15e8>)
 8006654:	f001 ff0e 	bl	8008474 <HAL_GPIO_ReadPin>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10a      	bne.n	8006674 <mainTask+0x154c>
							&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 800665e:	2102      	movs	r1, #2
 8006660:	482b      	ldr	r0, [pc, #172]	@ (8006710 <mainTask+0x15e8>)
 8006662:	f001 ff07 	bl	8008474 <HAL_GPIO_ReadPin>
 8006666:	4603      	mov	r3, r0
 8006668:	2b01      	cmp	r3, #1
 800666a:	d103      	bne.n	8006674 <mainTask+0x154c>
							&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800666c:	4b29      	ldr	r3, [pc, #164]	@ (8006714 <mainTask+0x15ec>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d007      	beq.n	8006684 <mainTask+0x155c>
 8006674:	4b28      	ldr	r3, [pc, #160]	@ (8006718 <mainTask+0x15f0>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d103      	bne.n	8006684 <mainTask+0x155c>
 800667c:	4b1f      	ldr	r3, [pc, #124]	@ (80066fc <mainTask+0x15d4>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d007      	beq.n	8006694 <mainTask+0x156c>
					&&(makineStop==1)) {
 8006684:	4b25      	ldr	r3, [pc, #148]	@ (800671c <mainTask+0x15f4>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <mainTask+0x156c>

				kapiTablabutonkontrol=1;
 800668c:	4b29      	ldr	r3, [pc, #164]	@ (8006734 <mainTask+0x160c>)
 800668e:	2201      	movs	r2, #1
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	e002      	b.n	800669a <mainTask+0x1572>
			} else {
				kapiTablabutonkontrol=0;
 8006694:	4b27      	ldr	r3, [pc, #156]	@ (8006734 <mainTask+0x160c>)
 8006696:	2200      	movs	r2, #0
 8006698:	701a      	strb	r2, [r3, #0]
			}

			// tabla kapı pizzato

			if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800669a:	4b19      	ldr	r3, [pc, #100]	@ (8006700 <mainTask+0x15d8>)
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d117      	bne.n	80066d2 <mainTask+0x15aa>
 80066a2:	4b18      	ldr	r3, [pc, #96]	@ (8006704 <mainTask+0x15dc>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d003      	beq.n	80066b2 <mainTask+0x158a>
 80066aa:	4b16      	ldr	r3, [pc, #88]	@ (8006704 <mainTask+0x15dc>)
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	d10f      	bne.n	80066d2 <mainTask+0x15aa>
					&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80066b2:	4b15      	ldr	r3, [pc, #84]	@ (8006708 <mainTask+0x15e0>)
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d103      	bne.n	80066c2 <mainTask+0x159a>
 80066ba:	4b14      	ldr	r3, [pc, #80]	@ (800670c <mainTask+0x15e4>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d007      	beq.n	80066d2 <mainTask+0x15aa>
					&&(makineStop==1)) {
 80066c2:	4b16      	ldr	r3, [pc, #88]	@ (800671c <mainTask+0x15f4>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <mainTask+0x15aa>

				kapiTablapizzato=1;
 80066ca:	4b1b      	ldr	r3, [pc, #108]	@ (8006738 <mainTask+0x1610>)
 80066cc:	2201      	movs	r2, #1
 80066ce:	701a      	strb	r2, [r3, #0]
 80066d0:	e002      	b.n	80066d8 <mainTask+0x15b0>
			} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
				kapiTablapizzato=0;
 80066d2:	4b19      	ldr	r3, [pc, #100]	@ (8006738 <mainTask+0x1610>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	701a      	strb	r2, [r3, #0]
			}

			// kapi Tabla çıkış

			if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80066d8:	4b16      	ldr	r3, [pc, #88]	@ (8006734 <mainTask+0x160c>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d107      	bne.n	80066f0 <mainTask+0x15c8>
 80066e0:	4b10      	ldr	r3, [pc, #64]	@ (8006724 <mainTask+0x15fc>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d103      	bne.n	80066f0 <mainTask+0x15c8>
 80066e8:	4b13      	ldr	r3, [pc, #76]	@ (8006738 <mainTask+0x1610>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d027      	beq.n	8006740 <mainTask+0x1618>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80066f0:	2201      	movs	r2, #1
 80066f2:	2120      	movs	r1, #32
 80066f4:	4811      	ldr	r0, [pc, #68]	@ (800673c <mainTask+0x1614>)
 80066f6:	f001 fed4 	bl	80084a2 <HAL_GPIO_WritePin>
 80066fa:	e026      	b.n	800674a <mainTask+0x1622>
 80066fc:	20000ce0 	.word	0x20000ce0
 8006700:	20000c8f 	.word	0x20000c8f
 8006704:	20000c8c 	.word	0x20000c8c
 8006708:	20000ccf 	.word	0x20000ccf
 800670c:	20000cd0 	.word	0x20000cd0
 8006710:	40011000 	.word	0x40011000
 8006714:	20000c90 	.word	0x20000c90
 8006718:	20000cdf 	.word	0x20000cdf
 800671c:	20000cc5 	.word	0x20000cc5
 8006720:	20000cb2 	.word	0x20000cb2
 8006724:	20000ccc 	.word	0x20000ccc
 8006728:	20000c60 	.word	0x20000c60
 800672c:	20000c64 	.word	0x20000c64
 8006730:	20000c9f 	.word	0x20000c9f
 8006734:	20000ccd 	.word	0x20000ccd
 8006738:	20000cce 	.word	0x20000cce
 800673c:	40010800 	.word	0x40010800
			} else {
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006740:	2200      	movs	r2, #0
 8006742:	2120      	movs	r1, #32
 8006744:	4881      	ldr	r0, [pc, #516]	@ (800694c <mainTask+0x1824>)
 8006746:	f001 feac 	bl	80084a2 <HAL_GPIO_WritePin>
			}

			/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

			if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 800674a:	4b81      	ldr	r3, [pc, #516]	@ (8006950 <mainTask+0x1828>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00e      	beq.n	8006770 <mainTask+0x1648>
 8006752:	2102      	movs	r1, #2
 8006754:	487f      	ldr	r0, [pc, #508]	@ (8006954 <mainTask+0x182c>)
 8006756:	f001 fe8d 	bl	8008474 <HAL_GPIO_ReadPin>
 800675a:	4603      	mov	r3, r0
 800675c:	2b01      	cmp	r3, #1
 800675e:	d107      	bne.n	8006770 <mainTask+0x1648>
 8006760:	4b7d      	ldr	r3, [pc, #500]	@ (8006958 <mainTask+0x1830>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d103      	bne.n	8006770 <mainTask+0x1648>
 8006768:	4b7c      	ldr	r3, [pc, #496]	@ (800695c <mainTask+0x1834>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d112      	bne.n	8006796 <mainTask+0x166e>
					||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8006770:	4b7b      	ldr	r3, [pc, #492]	@ (8006960 <mainTask+0x1838>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d066      	beq.n	8006846 <mainTask+0x171e>
 8006778:	2104      	movs	r1, #4
 800677a:	4876      	ldr	r0, [pc, #472]	@ (8006954 <mainTask+0x182c>)
 800677c:	f001 fe7a 	bl	8008474 <HAL_GPIO_ReadPin>
 8006780:	4603      	mov	r3, r0
 8006782:	2b01      	cmp	r3, #1
 8006784:	d15f      	bne.n	8006846 <mainTask+0x171e>
 8006786:	4b74      	ldr	r3, [pc, #464]	@ (8006958 <mainTask+0x1830>)
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d05b      	beq.n	8006846 <mainTask+0x171e>
 800678e:	4b73      	ldr	r3, [pc, #460]	@ (800695c <mainTask+0x1834>)
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d057      	beq.n	8006846 <mainTask+0x171e>



				calismaSayisi1=calismaSayisi1+1;
 8006796:	4b73      	ldr	r3, [pc, #460]	@ (8006964 <mainTask+0x183c>)
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	3301      	adds	r3, #1
 800679c:	b2da      	uxtb	r2, r3
 800679e:	4b71      	ldr	r3, [pc, #452]	@ (8006964 <mainTask+0x183c>)
 80067a0:	701a      	strb	r2, [r3, #0]
				if(calismaSayisi1>9) {
 80067a2:	4b70      	ldr	r3, [pc, #448]	@ (8006964 <mainTask+0x183c>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	2b09      	cmp	r3, #9
 80067a8:	d908      	bls.n	80067bc <mainTask+0x1694>
				  	calismaSayisi1=0;
 80067aa:	4b6e      	ldr	r3, [pc, #440]	@ (8006964 <mainTask+0x183c>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	701a      	strb	r2, [r3, #0]
				  	calismaSayisi10=calismaSayisi10+1;
 80067b0:	4b6d      	ldr	r3, [pc, #436]	@ (8006968 <mainTask+0x1840>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	3301      	adds	r3, #1
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	4b6b      	ldr	r3, [pc, #428]	@ (8006968 <mainTask+0x1840>)
 80067ba:	701a      	strb	r2, [r3, #0]
				}
				if(calismaSayisi10>9) {
 80067bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006968 <mainTask+0x1840>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	2b09      	cmp	r3, #9
 80067c2:	d908      	bls.n	80067d6 <mainTask+0x16ae>
				  	calismaSayisi10=0;
 80067c4:	4b68      	ldr	r3, [pc, #416]	@ (8006968 <mainTask+0x1840>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	701a      	strb	r2, [r3, #0]
				  	calismaSayisi100=calismaSayisi100+1;
 80067ca:	4b68      	ldr	r3, [pc, #416]	@ (800696c <mainTask+0x1844>)
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	3301      	adds	r3, #1
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	4b66      	ldr	r3, [pc, #408]	@ (800696c <mainTask+0x1844>)
 80067d4:	701a      	strb	r2, [r3, #0]
				}
				if(calismaSayisi100>9) {
 80067d6:	4b65      	ldr	r3, [pc, #404]	@ (800696c <mainTask+0x1844>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2b09      	cmp	r3, #9
 80067dc:	d908      	bls.n	80067f0 <mainTask+0x16c8>
				  	calismaSayisi100=0;
 80067de:	4b63      	ldr	r3, [pc, #396]	@ (800696c <mainTask+0x1844>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	701a      	strb	r2, [r3, #0]
				  	calismaSayisi1000=calismaSayisi1000+1;
 80067e4:	4b62      	ldr	r3, [pc, #392]	@ (8006970 <mainTask+0x1848>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	3301      	adds	r3, #1
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	4b60      	ldr	r3, [pc, #384]	@ (8006970 <mainTask+0x1848>)
 80067ee:	701a      	strb	r2, [r3, #0]
				}
				if(calismaSayisi1000>9) {
 80067f0:	4b5f      	ldr	r3, [pc, #380]	@ (8006970 <mainTask+0x1848>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b09      	cmp	r3, #9
 80067f6:	d908      	bls.n	800680a <mainTask+0x16e2>
				  	calismaSayisi1000=0;
 80067f8:	4b5d      	ldr	r3, [pc, #372]	@ (8006970 <mainTask+0x1848>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	701a      	strb	r2, [r3, #0]
				  	calismaSayisi10000=calismaSayisi10000+1;
 80067fe:	4b5d      	ldr	r3, [pc, #372]	@ (8006974 <mainTask+0x184c>)
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	3301      	adds	r3, #1
 8006804:	b2da      	uxtb	r2, r3
 8006806:	4b5b      	ldr	r3, [pc, #364]	@ (8006974 <mainTask+0x184c>)
 8006808:	701a      	strb	r2, [r3, #0]
				}
				eepromData[32]=calismaSayisi10000;
 800680a:	4b5a      	ldr	r3, [pc, #360]	@ (8006974 <mainTask+0x184c>)
 800680c:	781a      	ldrb	r2, [r3, #0]
 800680e:	4b5a      	ldr	r3, [pc, #360]	@ (8006978 <mainTask+0x1850>)
 8006810:	f883 2020 	strb.w	r2, [r3, #32]
				eepromData[31]=calismaSayisi1000;
 8006814:	4b56      	ldr	r3, [pc, #344]	@ (8006970 <mainTask+0x1848>)
 8006816:	781a      	ldrb	r2, [r3, #0]
 8006818:	4b57      	ldr	r3, [pc, #348]	@ (8006978 <mainTask+0x1850>)
 800681a:	77da      	strb	r2, [r3, #31]
				eepromData[30]=calismaSayisi100;
 800681c:	4b53      	ldr	r3, [pc, #332]	@ (800696c <mainTask+0x1844>)
 800681e:	781a      	ldrb	r2, [r3, #0]
 8006820:	4b55      	ldr	r3, [pc, #340]	@ (8006978 <mainTask+0x1850>)
 8006822:	779a      	strb	r2, [r3, #30]
				eepromData[29]=calismaSayisi10;
 8006824:	4b50      	ldr	r3, [pc, #320]	@ (8006968 <mainTask+0x1840>)
 8006826:	781a      	ldrb	r2, [r3, #0]
 8006828:	4b53      	ldr	r3, [pc, #332]	@ (8006978 <mainTask+0x1850>)
 800682a:	775a      	strb	r2, [r3, #29]
				eepromData[28]=calismaSayisi1;
 800682c:	4b4d      	ldr	r3, [pc, #308]	@ (8006964 <mainTask+0x183c>)
 800682e:	781a      	ldrb	r2, [r3, #0]
 8006830:	4b51      	ldr	r3, [pc, #324]	@ (8006978 <mainTask+0x1850>)
 8006832:	771a      	strb	r2, [r3, #28]

				hafizaYaz=1;
 8006834:	4b51      	ldr	r3, [pc, #324]	@ (800697c <mainTask+0x1854>)
 8006836:	2201      	movs	r2, #1
 8006838:	701a      	strb	r2, [r3, #0]

				CalismaSayisiYukari=0;
 800683a:	4b45      	ldr	r3, [pc, #276]	@ (8006950 <mainTask+0x1828>)
 800683c:	2200      	movs	r2, #0
 800683e:	701a      	strb	r2, [r3, #0]
				CalismaSayisiAsagi=0;
 8006840:	4b47      	ldr	r3, [pc, #284]	@ (8006960 <mainTask+0x1838>)
 8006842:	2200      	movs	r2, #0
 8006844:	701a      	strb	r2, [r3, #0]
			}

			/******************************************* HATA BASLIYOR *******************************************/

			/************************************ ACİL STOP HATA BASLANGICI **************************************************/
			if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006846:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800684a:	484d      	ldr	r0, [pc, #308]	@ (8006980 <mainTask+0x1858>)
 800684c:	f001 fe12 	bl	8008474 <HAL_GPIO_ReadPin>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d016      	beq.n	8006884 <mainTask+0x175c>
				  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006856:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800685a:	4849      	ldr	r0, [pc, #292]	@ (8006980 <mainTask+0x1858>)
 800685c:	f001 fe0a 	bl	8008474 <HAL_GPIO_ReadPin>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00e      	beq.n	8006884 <mainTask+0x175c>
				  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006866:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800686a:	4845      	ldr	r0, [pc, #276]	@ (8006980 <mainTask+0x1858>)
 800686c:	f001 fe02 	bl	8008474 <HAL_GPIO_ReadPin>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d006      	beq.n	8006884 <mainTask+0x175c>
				  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006876:	2140      	movs	r1, #64	@ 0x40
 8006878:	4836      	ldr	r0, [pc, #216]	@ (8006954 <mainTask+0x182c>)
 800687a:	f001 fdfb 	bl	8008474 <HAL_GPIO_ReadPin>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d103      	bne.n	800688c <mainTask+0x1764>

				startBasili=1;
 8006884:	4b3f      	ldr	r3, [pc, #252]	@ (8006984 <mainTask+0x185c>)
 8006886:	2201      	movs	r2, #1
 8006888:	701a      	strb	r2, [r3, #0]
 800688a:	e002      	b.n	8006892 <mainTask+0x176a>
			} else {
				startBasili=0;
 800688c:	4b3d      	ldr	r3, [pc, #244]	@ (8006984 <mainTask+0x185c>)
 800688e:	2200      	movs	r2, #0
 8006890:	701a      	strb	r2, [r3, #0]
			}


			if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006892:	4b3c      	ldr	r3, [pc, #240]	@ (8006984 <mainTask+0x185c>)
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d014      	beq.n	80068c4 <mainTask+0x179c>
 800689a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800689e:	4838      	ldr	r0, [pc, #224]	@ (8006980 <mainTask+0x1858>)
 80068a0:	f001 fde8 	bl	8008474 <HAL_GPIO_ReadPin>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d10c      	bne.n	80068c4 <mainTask+0x179c>

				hataVar=1;
 80068aa:	4b37      	ldr	r3, [pc, #220]	@ (8006988 <mainTask+0x1860>)
 80068ac:	2201      	movs	r2, #1
 80068ae:	701a      	strb	r2, [r3, #0]
				hataKoduLcdGoster(1);
 80068b0:	2001      	movs	r0, #1
 80068b2:	f7fd feaf 	bl	8004614 <hataKoduLcdGoster>
				hata2EEPROM(1);
 80068b6:	2001      	movs	r0, #1
 80068b8:	f7fe fa2e 	bl	8004d18 <hata2EEPROM>
				acilstophatasi=1;
 80068bc:	4b33      	ldr	r3, [pc, #204]	@ (800698c <mainTask+0x1864>)
 80068be:	2201      	movs	r2, #1
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	e018      	b.n	80068f6 <mainTask+0x17ce>
			} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80068c4:	4b31      	ldr	r3, [pc, #196]	@ (800698c <mainTask+0x1864>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d014      	beq.n	80068f6 <mainTask+0x17ce>
 80068cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80068d0:	482b      	ldr	r0, [pc, #172]	@ (8006980 <mainTask+0x1858>)
 80068d2:	f001 fdcf 	bl	8008474 <HAL_GPIO_ReadPin>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10c      	bne.n	80068f6 <mainTask+0x17ce>
 80068dc:	4b29      	ldr	r3, [pc, #164]	@ (8006984 <mainTask+0x185c>)
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	f083 0301 	eor.w	r3, r3, #1
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <mainTask+0x17ce>
				acilstophatasi=0;
 80068ea:	4b28      	ldr	r3, [pc, #160]	@ (800698c <mainTask+0x1864>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	701a      	strb	r2, [r3, #0]
				lcdUpdate(1);
 80068f0:	2001      	movs	r0, #1
 80068f2:	f7fd fe3b 	bl	800456c <lcdUpdate>
			}

			/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

			if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 80068f6:	4b26      	ldr	r3, [pc, #152]	@ (8006990 <mainTask+0x1868>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	f083 0301 	eor.w	r3, r3, #1
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d04d      	beq.n	80069a0 <mainTask+0x1878>
 8006904:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006908:	481d      	ldr	r0, [pc, #116]	@ (8006980 <mainTask+0x1858>)
 800690a:	f001 fdb3 	bl	8008474 <HAL_GPIO_ReadPin>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d003      	beq.n	800691c <mainTask+0x17f4>
 8006914:	4b1f      	ldr	r3, [pc, #124]	@ (8006994 <mainTask+0x186c>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d041      	beq.n	80069a0 <mainTask+0x1878>
 800691c:	4b1e      	ldr	r3, [pc, #120]	@ (8006998 <mainTask+0x1870>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d13d      	bne.n	80069a0 <mainTask+0x1878>
 8006924:	4b1d      	ldr	r3, [pc, #116]	@ (800699c <mainTask+0x1874>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	f083 0301 	eor.w	r3, r3, #1
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d036      	beq.n	80069a0 <mainTask+0x1878>
				hataVar=1;
 8006932:	4b15      	ldr	r3, [pc, #84]	@ (8006988 <mainTask+0x1860>)
 8006934:	2201      	movs	r2, #1
 8006936:	701a      	strb	r2, [r3, #0]
				hataKoduLcdGoster(2);
 8006938:	2002      	movs	r0, #2
 800693a:	f7fd fe6b 	bl	8004614 <hataKoduLcdGoster>
				hata2EEPROM(2);
 800693e:	2002      	movs	r0, #2
 8006940:	f7fe f9ea 	bl	8004d18 <hata2EEPROM>
				emniyetCercevesihatasi=1;
 8006944:	4b15      	ldr	r3, [pc, #84]	@ (800699c <mainTask+0x1874>)
 8006946:	2201      	movs	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	e03e      	b.n	80069ca <mainTask+0x18a2>
 800694c:	40010800 	.word	0x40010800
 8006950:	20000cc2 	.word	0x20000cc2
 8006954:	40011000 	.word	0x40011000
 8006958:	20000c8a 	.word	0x20000c8a
 800695c:	20000cc5 	.word	0x20000cc5
 8006960:	20000cc3 	.word	0x20000cc3
 8006964:	20000c81 	.word	0x20000c81
 8006968:	20000c82 	.word	0x20000c82
 800696c:	20000941 	.word	0x20000941
 8006970:	20000942 	.word	0x20000942
 8006974:	20000c83 	.word	0x20000c83
 8006978:	20000c18 	.word	0x20000c18
 800697c:	20000caf 	.word	0x20000caf
 8006980:	40010c00 	.word	0x40010c00
 8006984:	20000cd1 	.word	0x20000cd1
 8006988:	20000cd8 	.word	0x20000cd8
 800698c:	20000cd3 	.word	0x20000cd3
 8006990:	20000cda 	.word	0x20000cda
 8006994:	20000ce4 	.word	0x20000ce4
 8006998:	20000c88 	.word	0x20000c88
 800699c:	20000cd4 	.word	0x20000cd4
			} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80069a0:	4b65      	ldr	r3, [pc, #404]	@ (8006b38 <mainTask+0x1a10>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d010      	beq.n	80069ca <mainTask+0x18a2>
 80069a8:	4b64      	ldr	r3, [pc, #400]	@ (8006b3c <mainTask+0x1a14>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00c      	beq.n	80069ca <mainTask+0x18a2>
 80069b0:	4b63      	ldr	r3, [pc, #396]	@ (8006b40 <mainTask+0x1a18>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d108      	bne.n	80069ca <mainTask+0x18a2>
				emniyetCercevesihatasi=0;
 80069b8:	4b5f      	ldr	r3, [pc, #380]	@ (8006b38 <mainTask+0x1a10>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	701a      	strb	r2, [r3, #0]
				cercevesasagicalisma=0;
 80069be:	4b61      	ldr	r3, [pc, #388]	@ (8006b44 <mainTask+0x1a1c>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	701a      	strb	r2, [r3, #0]
				lcdUpdate(2);
 80069c4:	2002      	movs	r0, #2
 80069c6:	f7fd fdd1 	bl	800456c <lcdUpdate>
			}

			/************************************ BASINC ASIRI YUK HATASI **************************************************/

			if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 80069ca:	4b5f      	ldr	r3, [pc, #380]	@ (8006b48 <mainTask+0x1a20>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d123      	bne.n	8006a1a <mainTask+0x18f2>
 80069d2:	4b5e      	ldr	r3, [pc, #376]	@ (8006b4c <mainTask+0x1a24>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d11f      	bne.n	8006a1a <mainTask+0x18f2>
 80069da:	4b5d      	ldr	r3, [pc, #372]	@ (8006b50 <mainTask+0x1a28>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d01b      	beq.n	8006a1a <mainTask+0x18f2>
 80069e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80069e6:	485b      	ldr	r0, [pc, #364]	@ (8006b54 <mainTask+0x1a2c>)
 80069e8:	f001 fd44 	bl	8008474 <HAL_GPIO_ReadPin>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d113      	bne.n	8006a1a <mainTask+0x18f2>
 80069f2:	4b59      	ldr	r3, [pc, #356]	@ (8006b58 <mainTask+0x1a30>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	f083 0301 	eor.w	r3, r3, #1
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00c      	beq.n	8006a1a <mainTask+0x18f2>
				hataVar=1;
 8006a00:	4b56      	ldr	r3, [pc, #344]	@ (8006b5c <mainTask+0x1a34>)
 8006a02:	2201      	movs	r2, #1
 8006a04:	701a      	strb	r2, [r3, #0]
				hataKoduLcdGoster(3);
 8006a06:	2003      	movs	r0, #3
 8006a08:	f7fd fe04 	bl	8004614 <hataKoduLcdGoster>
				hata2EEPROM(3);
 8006a0c:	2003      	movs	r0, #3
 8006a0e:	f7fe f983 	bl	8004d18 <hata2EEPROM>
				basinchatasi=1;
 8006a12:	4b51      	ldr	r3, [pc, #324]	@ (8006b58 <mainTask+0x1a30>)
 8006a14:	2201      	movs	r2, #1
 8006a16:	701a      	strb	r2, [r3, #0]
 8006a18:	e015      	b.n	8006a46 <mainTask+0x191e>
			} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006a1a:	4b4f      	ldr	r3, [pc, #316]	@ (8006b58 <mainTask+0x1a30>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d011      	beq.n	8006a46 <mainTask+0x191e>
 8006a22:	4b49      	ldr	r3, [pc, #292]	@ (8006b48 <mainTask+0x1a20>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d10d      	bne.n	8006a46 <mainTask+0x191e>
 8006a2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006a2e:	484c      	ldr	r0, [pc, #304]	@ (8006b60 <mainTask+0x1a38>)
 8006a30:	f001 fd20 	bl	8008474 <HAL_GPIO_ReadPin>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d105      	bne.n	8006a46 <mainTask+0x191e>
				basinchatasi=0;
 8006a3a:	4b47      	ldr	r3, [pc, #284]	@ (8006b58 <mainTask+0x1a30>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	701a      	strb	r2, [r3, #0]
				lcdUpdate(3);
 8006a40:	2003      	movs	r0, #3
 8006a42:	f7fd fd93 	bl	800456c <lcdUpdate>
			}

			/************************************ KAPI SİVİÇ HATASI **************************************************/
			if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8006a46:	4b47      	ldr	r3, [pc, #284]	@ (8006b64 <mainTask+0x1a3c>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d103      	bne.n	8006a56 <mainTask+0x192e>
 8006a4e:	4b46      	ldr	r3, [pc, #280]	@ (8006b68 <mainTask+0x1a40>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d023      	beq.n	8006a9e <mainTask+0x1976>
 8006a56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006a5a:	4844      	ldr	r0, [pc, #272]	@ (8006b6c <mainTask+0x1a44>)
 8006a5c:	f001 fd0a 	bl	8008474 <HAL_GPIO_ReadPin>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d11b      	bne.n	8006a9e <mainTask+0x1976>
 8006a66:	4b42      	ldr	r3, [pc, #264]	@ (8006b70 <mainTask+0x1a48>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d003      	beq.n	8006a76 <mainTask+0x194e>
 8006a6e:	4b40      	ldr	r3, [pc, #256]	@ (8006b70 <mainTask+0x1a48>)
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	d113      	bne.n	8006a9e <mainTask+0x1976>
 8006a76:	4b3f      	ldr	r3, [pc, #252]	@ (8006b74 <mainTask+0x1a4c>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	f083 0301 	eor.w	r3, r3, #1
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00c      	beq.n	8006a9e <mainTask+0x1976>
				hataVar=1;
 8006a84:	4b35      	ldr	r3, [pc, #212]	@ (8006b5c <mainTask+0x1a34>)
 8006a86:	2201      	movs	r2, #1
 8006a88:	701a      	strb	r2, [r3, #0]
				hataKoduLcdGoster(4);
 8006a8a:	2004      	movs	r0, #4
 8006a8c:	f7fd fdc2 	bl	8004614 <hataKoduLcdGoster>
				hata2EEPROM(4);
 8006a90:	2004      	movs	r0, #4
 8006a92:	f7fe f941 	bl	8004d18 <hata2EEPROM>
				katkapisivicihatasi=1;
 8006a96:	4b37      	ldr	r3, [pc, #220]	@ (8006b74 <mainTask+0x1a4c>)
 8006a98:	2201      	movs	r2, #1
 8006a9a:	701a      	strb	r2, [r3, #0]
 8006a9c:	e01f      	b.n	8006ade <mainTask+0x19b6>
			} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006a9e:	4b35      	ldr	r3, [pc, #212]	@ (8006b74 <mainTask+0x1a4c>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d01b      	beq.n	8006ade <mainTask+0x19b6>
 8006aa6:	4b34      	ldr	r3, [pc, #208]	@ (8006b78 <mainTask+0x1a50>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d017      	beq.n	8006ade <mainTask+0x19b6>
 8006aae:	4b2d      	ldr	r3, [pc, #180]	@ (8006b64 <mainTask+0x1a3c>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	f083 0301 	eor.w	r3, r3, #1
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d010      	beq.n	8006ade <mainTask+0x19b6>
 8006abc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ac0:	482a      	ldr	r0, [pc, #168]	@ (8006b6c <mainTask+0x1a44>)
 8006ac2:	f001 fcd7 	bl	8008474 <HAL_GPIO_ReadPin>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d108      	bne.n	8006ade <mainTask+0x19b6>

				katkapisivicihatasi=0;
 8006acc:	4b29      	ldr	r3, [pc, #164]	@ (8006b74 <mainTask+0x1a4c>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	701a      	strb	r2, [r3, #0]
				HataMakineCalisiyorkapi=0;
 8006ad2:	4b25      	ldr	r3, [pc, #148]	@ (8006b68 <mainTask+0x1a40>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	701a      	strb	r2, [r3, #0]
				lcdUpdate(4);
 8006ad8:	2004      	movs	r0, #4
 8006ada:	f7fd fd47 	bl	800456c <lcdUpdate>
			}

			/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

			if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8006ade:	4b21      	ldr	r3, [pc, #132]	@ (8006b64 <mainTask+0x1a3c>)
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d103      	bne.n	8006aee <mainTask+0x19c6>
 8006ae6:	4b25      	ldr	r3, [pc, #148]	@ (8006b7c <mainTask+0x1a54>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d04a      	beq.n	8006b84 <mainTask+0x1a5c>
 8006aee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006af2:	481e      	ldr	r0, [pc, #120]	@ (8006b6c <mainTask+0x1a44>)
 8006af4:	f001 fcbe 	bl	8008474 <HAL_GPIO_ReadPin>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d142      	bne.n	8006b84 <mainTask+0x1a5c>
 8006afe:	4b1c      	ldr	r3, [pc, #112]	@ (8006b70 <mainTask+0x1a48>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d003      	beq.n	8006b0e <mainTask+0x19e6>
 8006b06:	4b1a      	ldr	r3, [pc, #104]	@ (8006b70 <mainTask+0x1a48>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	d13a      	bne.n	8006b84 <mainTask+0x1a5c>
 8006b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8006b80 <mainTask+0x1a58>)
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	f083 0301 	eor.w	r3, r3, #1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d033      	beq.n	8006b84 <mainTask+0x1a5c>

				hataVar=1;
 8006b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006b5c <mainTask+0x1a34>)
 8006b1e:	2201      	movs	r2, #1
 8006b20:	701a      	strb	r2, [r3, #0]
				hataKoduLcdGoster(5);
 8006b22:	2005      	movs	r0, #5
 8006b24:	f7fd fd76 	bl	8004614 <hataKoduLcdGoster>
				hata2EEPROM(5);
 8006b28:	2005      	movs	r0, #5
 8006b2a:	f7fe f8f5 	bl	8004d18 <hata2EEPROM>
				tablakapisivicihatasi=1;
 8006b2e:	4b14      	ldr	r3, [pc, #80]	@ (8006b80 <mainTask+0x1a58>)
 8006b30:	2201      	movs	r2, #1
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	e04a      	b.n	8006bcc <mainTask+0x1aa4>
 8006b36:	bf00      	nop
 8006b38:	20000cd4 	.word	0x20000cd4
 8006b3c:	20000cda 	.word	0x20000cda
 8006b40:	20000cbb 	.word	0x20000cbb
 8006b44:	20000ce4 	.word	0x20000ce4
 8006b48:	20000c87 	.word	0x20000c87
 8006b4c:	20000c8b 	.word	0x20000c8b
 8006b50:	20000cd7 	.word	0x20000cd7
 8006b54:	40011000 	.word	0x40011000
 8006b58:	20000ce1 	.word	0x20000ce1
 8006b5c:	20000cd8 	.word	0x20000cd8
 8006b60:	40010c00 	.word	0x40010c00
 8006b64:	20000cd1 	.word	0x20000cd1
 8006b68:	20000ce5 	.word	0x20000ce5
 8006b6c:	40010800 	.word	0x40010800
 8006b70:	20000c8c 	.word	0x20000c8c
 8006b74:	20000ce2 	.word	0x20000ce2
 8006b78:	20000cc5 	.word	0x20000cc5
 8006b7c:	20000ce6 	.word	0x20000ce6
 8006b80:	20000ce3 	.word	0x20000ce3
			} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006b84:	4b92      	ldr	r3, [pc, #584]	@ (8006dd0 <mainTask+0x1ca8>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01f      	beq.n	8006bcc <mainTask+0x1aa4>
 8006b8c:	4b91      	ldr	r3, [pc, #580]	@ (8006dd4 <mainTask+0x1cac>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d01b      	beq.n	8006bcc <mainTask+0x1aa4>
 8006b94:	4b90      	ldr	r3, [pc, #576]	@ (8006dd8 <mainTask+0x1cb0>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	f083 0301 	eor.w	r3, r3, #1
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d014      	beq.n	8006bcc <mainTask+0x1aa4>
 8006ba2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006ba6:	488d      	ldr	r0, [pc, #564]	@ (8006ddc <mainTask+0x1cb4>)
 8006ba8:	f001 fc64 	bl	8008474 <HAL_GPIO_ReadPin>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10c      	bne.n	8006bcc <mainTask+0x1aa4>
 8006bb2:	4b88      	ldr	r3, [pc, #544]	@ (8006dd4 <mainTask+0x1cac>)
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d008      	beq.n	8006bcc <mainTask+0x1aa4>
				tablakapisivicihatasi=0;
 8006bba:	4b85      	ldr	r3, [pc, #532]	@ (8006dd0 <mainTask+0x1ca8>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	701a      	strb	r2, [r3, #0]
				HataMakineCalisiyortabla=0;
 8006bc0:	4b87      	ldr	r3, [pc, #540]	@ (8006de0 <mainTask+0x1cb8>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	701a      	strb	r2, [r3, #0]
				lcdUpdate(5);
 8006bc6:	2005      	movs	r0, #5
 8006bc8:	f7fd fcd0 	bl	800456c <lcdUpdate>
			}

			/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

			if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8006bcc:	4b85      	ldr	r3, [pc, #532]	@ (8006de4 <mainTask+0x1cbc>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d107      	bne.n	8006be4 <mainTask+0x1abc>
 8006bd4:	4b84      	ldr	r3, [pc, #528]	@ (8006de8 <mainTask+0x1cc0>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d103      	bne.n	8006be4 <mainTask+0x1abc>
 8006bdc:	4b83      	ldr	r3, [pc, #524]	@ (8006dec <mainTask+0x1cc4>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d01b      	beq.n	8006c1c <mainTask+0x1af4>
 8006be4:	4b82      	ldr	r3, [pc, #520]	@ (8006df0 <mainTask+0x1cc8>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	f083 0301 	eor.w	r3, r3, #1
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d014      	beq.n	8006c1c <mainTask+0x1af4>
			    if(millis-timer4>=makineCalismaTmr) {
 8006bf2:	4b80      	ldr	r3, [pc, #512]	@ (8006df4 <mainTask+0x1ccc>)
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	4b80      	ldr	r3, [pc, #512]	@ (8006df8 <mainTask+0x1cd0>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	4a7f      	ldr	r2, [pc, #508]	@ (8006dfc <mainTask+0x1cd4>)
 8006bfe:	7812      	ldrb	r2, [r2, #0]
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d30b      	bcc.n	8006c1c <mainTask+0x1af4>
				  	hataVar=1;
 8006c04:	4b7e      	ldr	r3, [pc, #504]	@ (8006e00 <mainTask+0x1cd8>)
 8006c06:	2201      	movs	r2, #1
 8006c08:	701a      	strb	r2, [r3, #0]
				  	hataKoduLcdGoster(6);
 8006c0a:	2006      	movs	r0, #6
 8006c0c:	f7fd fd02 	bl	8004614 <hataKoduLcdGoster>
				  	hata2EEPROM(6);
 8006c10:	2006      	movs	r0, #6
 8006c12:	f7fe f881 	bl	8004d18 <hata2EEPROM>
				  	maksimumcalismahatasi=1;
 8006c16:	4b76      	ldr	r3, [pc, #472]	@ (8006df0 <mainTask+0x1cc8>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	701a      	strb	r2, [r3, #0]
				  }
			}

			if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006c1c:	4b74      	ldr	r3, [pc, #464]	@ (8006df0 <mainTask+0x1cc8>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d013      	beq.n	8006c4c <mainTask+0x1b24>
 8006c24:	2108      	movs	r1, #8
 8006c26:	486d      	ldr	r0, [pc, #436]	@ (8006ddc <mainTask+0x1cb4>)
 8006c28:	f001 fc24 	bl	8008474 <HAL_GPIO_ReadPin>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00c      	beq.n	8006c4c <mainTask+0x1b24>
 8006c32:	4b69      	ldr	r3, [pc, #420]	@ (8006dd8 <mainTask+0x1cb0>)
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	f083 0301 	eor.w	r3, r3, #1
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <mainTask+0x1b24>
				maksimumcalismahatasi=0;
 8006c40:	4b6b      	ldr	r3, [pc, #428]	@ (8006df0 <mainTask+0x1cc8>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	701a      	strb	r2, [r3, #0]
				lcdUpdate(6);
 8006c46:	2006      	movs	r0, #6
 8006c48:	f7fd fc90 	bl	800456c <lcdUpdate>
			}

			if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006c4c:	4b6d      	ldr	r3, [pc, #436]	@ (8006e04 <mainTask+0x1cdc>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d00b      	beq.n	8006c6c <mainTask+0x1b44>
 8006c54:	4b64      	ldr	r3, [pc, #400]	@ (8006de8 <mainTask+0x1cc0>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d007      	beq.n	8006c6c <mainTask+0x1b44>
 8006c5c:	4b6a      	ldr	r3, [pc, #424]	@ (8006e08 <mainTask+0x1ce0>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d103      	bne.n	8006c6c <mainTask+0x1b44>
 8006c64:	4b61      	ldr	r3, [pc, #388]	@ (8006dec <mainTask+0x1cc4>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d009      	beq.n	8006c80 <mainTask+0x1b58>
				makineCalisiyor=0;
 8006c6c:	4b67      	ldr	r3, [pc, #412]	@ (8006e0c <mainTask+0x1ce4>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	701a      	strb	r2, [r3, #0]
				HataMakineCalisiyorkapi=1;
 8006c72:	4b67      	ldr	r3, [pc, #412]	@ (8006e10 <mainTask+0x1ce8>)
 8006c74:	2201      	movs	r2, #1
 8006c76:	701a      	strb	r2, [r3, #0]
				HataMakineCalisiyortabla=1;
 8006c78:	4b59      	ldr	r3, [pc, #356]	@ (8006de0 <mainTask+0x1cb8>)
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	701a      	strb	r2, [r3, #0]
 8006c7e:	e006      	b.n	8006c8e <mainTask+0x1b66>
			} else {
				makineCalisiyor=1;
 8006c80:	4b62      	ldr	r3, [pc, #392]	@ (8006e0c <mainTask+0x1ce4>)
 8006c82:	2201      	movs	r2, #1
 8006c84:	701a      	strb	r2, [r3, #0]
				timer4=millis;
 8006c86:	4b5b      	ldr	r3, [pc, #364]	@ (8006df4 <mainTask+0x1ccc>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a5b      	ldr	r2, [pc, #364]	@ (8006df8 <mainTask+0x1cd0>)
 8006c8c:	6013      	str	r3, [r2, #0]
			}

			/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
			if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006c8e:	4b5c      	ldr	r3, [pc, #368]	@ (8006e00 <mainTask+0x1cd8>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d02f      	beq.n	8006cf6 <mainTask+0x1bce>
 8006c96:	4b5f      	ldr	r3, [pc, #380]	@ (8006e14 <mainTask+0x1cec>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	f083 0301 	eor.w	r3, r3, #1
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d028      	beq.n	8006cf6 <mainTask+0x1bce>
 8006ca4:	4b5c      	ldr	r3, [pc, #368]	@ (8006e18 <mainTask+0x1cf0>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	f083 0301 	eor.w	r3, r3, #1
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d021      	beq.n	8006cf6 <mainTask+0x1bce>
 8006cb2:	4b5a      	ldr	r3, [pc, #360]	@ (8006e1c <mainTask+0x1cf4>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	f083 0301 	eor.w	r3, r3, #1
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d01a      	beq.n	8006cf6 <mainTask+0x1bce>
					&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006cc0:	4b57      	ldr	r3, [pc, #348]	@ (8006e20 <mainTask+0x1cf8>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	f083 0301 	eor.w	r3, r3, #1
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d013      	beq.n	8006cf6 <mainTask+0x1bce>
 8006cce:	4b40      	ldr	r3, [pc, #256]	@ (8006dd0 <mainTask+0x1ca8>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	f083 0301 	eor.w	r3, r3, #1
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00c      	beq.n	8006cf6 <mainTask+0x1bce>
 8006cdc:	4b44      	ldr	r3, [pc, #272]	@ (8006df0 <mainTask+0x1cc8>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	f083 0301 	eor.w	r3, r3, #1
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d005      	beq.n	8006cf6 <mainTask+0x1bce>

				hataVar=0;
 8006cea:	4b45      	ldr	r3, [pc, #276]	@ (8006e00 <mainTask+0x1cd8>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	701a      	strb	r2, [r3, #0]
				lcdUpdate(7);
 8006cf0:	2007      	movs	r0, #7
 8006cf2:	f7fd fc3b 	bl	800456c <lcdUpdate>
			}

			if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8006cf6:	4b42      	ldr	r3, [pc, #264]	@ (8006e00 <mainTask+0x1cd8>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d02a      	beq.n	8006d54 <mainTask+0x1c2c>
 8006cfe:	4b45      	ldr	r3, [pc, #276]	@ (8006e14 <mainTask+0x1cec>)
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	f083 0301 	eor.w	r3, r3, #1
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d023      	beq.n	8006d54 <mainTask+0x1c2c>
 8006d0c:	4b42      	ldr	r3, [pc, #264]	@ (8006e18 <mainTask+0x1cf0>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d01f      	beq.n	8006d54 <mainTask+0x1c2c>
 8006d14:	4b41      	ldr	r3, [pc, #260]	@ (8006e1c <mainTask+0x1cf4>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	f083 0301 	eor.w	r3, r3, #1
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d018      	beq.n	8006d54 <mainTask+0x1c2c>
					&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8006d22:	4b3f      	ldr	r3, [pc, #252]	@ (8006e20 <mainTask+0x1cf8>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	f083 0301 	eor.w	r3, r3, #1
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d011      	beq.n	8006d54 <mainTask+0x1c2c>
 8006d30:	4b27      	ldr	r3, [pc, #156]	@ (8006dd0 <mainTask+0x1ca8>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	f083 0301 	eor.w	r3, r3, #1
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <mainTask+0x1c2c>
 8006d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8006df0 <mainTask+0x1cc8>)
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	f083 0301 	eor.w	r3, r3, #1
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <mainTask+0x1c2c>
			{
				EmnCerHataMakYukariCalis=1;
 8006d4c:	4b35      	ldr	r3, [pc, #212]	@ (8006e24 <mainTask+0x1cfc>)
 8006d4e:	2201      	movs	r2, #1
 8006d50:	701a      	strb	r2, [r3, #0]
 8006d52:	e009      	b.n	8006d68 <mainTask+0x1c40>
			}
			else if(emniyetCercevesihatasi==0)
 8006d54:	4b30      	ldr	r3, [pc, #192]	@ (8006e18 <mainTask+0x1cf0>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	f083 0301 	eor.w	r3, r3, #1
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <mainTask+0x1c40>
			{
				EmnCerHataMakYukariCalis=0;
 8006d62:	4b30      	ldr	r3, [pc, #192]	@ (8006e24 <mainTask+0x1cfc>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	701a      	strb	r2, [r3, #0]

		// DEMO MOD BASLIYOR

		// DEMO YUKARI CALISMA

		if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006d68:	4b2f      	ldr	r3, [pc, #188]	@ (8006e28 <mainTask+0x1d00>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	f040 8261 	bne.w	8007234 <mainTask+0x210c>
 8006d72:	4b2e      	ldr	r3, [pc, #184]	@ (8006e2c <mainTask+0x1d04>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 825c 	beq.w	8007234 <mainTask+0x210c>
 8006d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8006e30 <mainTask+0x1d08>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f040 8257 	bne.w	8007234 <mainTask+0x210c>
			if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006d86:	2102      	movs	r1, #2
 8006d88:	482a      	ldr	r0, [pc, #168]	@ (8006e34 <mainTask+0x1d0c>)
 8006d8a:	f001 fb73 	bl	8008474 <HAL_GPIO_ReadPin>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d15b      	bne.n	8006e4c <mainTask+0x1d24>
					&& (demoAsagiCalis==0)
 8006d94:	4b28      	ldr	r3, [pc, #160]	@ (8006e38 <mainTask+0x1d10>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	f083 0301 	eor.w	r3, r3, #1
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d054      	beq.n	8006e4c <mainTask+0x1d24>
					&& (demoDevYukari==0)
 8006da2:	4b26      	ldr	r3, [pc, #152]	@ (8006e3c <mainTask+0x1d14>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	f083 0301 	eor.w	r3, r3, #1
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d04d      	beq.n	8006e4c <mainTask+0x1d24>
					&& (demoDevAsagi==0)) {
 8006db0:	4b23      	ldr	r3, [pc, #140]	@ (8006e40 <mainTask+0x1d18>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	f083 0301 	eor.w	r3, r3, #1
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d046      	beq.n	8006e4c <mainTask+0x1d24>

				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	2104      	movs	r1, #4
 8006dc2:	4820      	ldr	r0, [pc, #128]	@ (8006e44 <mainTask+0x1d1c>)
 8006dc4:	f001 fb6d 	bl	80084a2 <HAL_GPIO_WritePin>
				demoYukariCalis=1;
 8006dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8006e48 <mainTask+0x1d20>)
 8006dca:	2201      	movs	r2, #1
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	e04c      	b.n	8006e6a <mainTask+0x1d42>
 8006dd0:	20000ce3 	.word	0x20000ce3
 8006dd4:	20000cc5 	.word	0x20000cc5
 8006dd8:	20000cd1 	.word	0x20000cd1
 8006ddc:	40010800 	.word	0x40010800
 8006de0:	20000ce6 	.word	0x20000ce6
 8006de4:	20000cd7 	.word	0x20000cd7
 8006de8:	20000cbb 	.word	0x20000cbb
 8006dec:	20000cba 	.word	0x20000cba
 8006df0:	20000cd2 	.word	0x20000cd2
 8006df4:	20000c60 	.word	0x20000c60
 8006df8:	20000c74 	.word	0x20000c74
 8006dfc:	20000c9c 	.word	0x20000c9c
 8006e00:	20000cd8 	.word	0x20000cd8
 8006e04:	20000cb8 	.word	0x20000cb8
 8006e08:	20000cb9 	.word	0x20000cb9
 8006e0c:	20000cd9 	.word	0x20000cd9
 8006e10:	20000ce5 	.word	0x20000ce5
 8006e14:	20000cd3 	.word	0x20000cd3
 8006e18:	20000cd4 	.word	0x20000cd4
 8006e1c:	20000ce1 	.word	0x20000ce1
 8006e20:	20000ce2 	.word	0x20000ce2
 8006e24:	20000ce7 	.word	0x20000ce7
 8006e28:	20000ca2 	.word	0x20000ca2
 8006e2c:	20000cd5 	.word	0x20000cd5
 8006e30:	20000ca1 	.word	0x20000ca1
 8006e34:	40011000 	.word	0x40011000
 8006e38:	20000cdc 	.word	0x20000cdc
 8006e3c:	20000cdd 	.word	0x20000cdd
 8006e40:	20000cde 	.word	0x20000cde
 8006e44:	40010c00 	.word	0x40010c00
 8006e48:	20000cdb 	.word	0x20000cdb
			} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006e4c:	2102      	movs	r1, #2
 8006e4e:	4871      	ldr	r0, [pc, #452]	@ (8007014 <mainTask+0x1eec>)
 8006e50:	f001 fb10 	bl	8008474 <HAL_GPIO_ReadPin>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d107      	bne.n	8006e6a <mainTask+0x1d42>

				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2104      	movs	r1, #4
 8006e5e:	486e      	ldr	r0, [pc, #440]	@ (8007018 <mainTask+0x1ef0>)
 8006e60:	f001 fb1f 	bl	80084a2 <HAL_GPIO_WritePin>
				demoYukariCalis=0;
 8006e64:	4b6d      	ldr	r3, [pc, #436]	@ (800701c <mainTask+0x1ef4>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	701a      	strb	r2, [r3, #0]
			}

			// DEMO MOTOR CALISMASI

			if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006e6a:	4b6c      	ldr	r3, [pc, #432]	@ (800701c <mainTask+0x1ef4>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10b      	bne.n	8006e8a <mainTask+0x1d62>
 8006e72:	4b6b      	ldr	r3, [pc, #428]	@ (8007020 <mainTask+0x1ef8>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d107      	bne.n	8006e8a <mainTask+0x1d62>
 8006e7a:	4b6a      	ldr	r3, [pc, #424]	@ (8007024 <mainTask+0x1efc>)
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d103      	bne.n	8006e8a <mainTask+0x1d62>
 8006e82:	4b69      	ldr	r3, [pc, #420]	@ (8007028 <mainTask+0x1f00>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00c      	beq.n	8006ea4 <mainTask+0x1d7c>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006e90:	4861      	ldr	r0, [pc, #388]	@ (8007018 <mainTask+0x1ef0>)
 8006e92:	f001 fb06 	bl	80084a2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006e96:	2201      	movs	r2, #1
 8006e98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006e9c:	485e      	ldr	r0, [pc, #376]	@ (8007018 <mainTask+0x1ef0>)
 8006e9e:	f001 fb00 	bl	80084a2 <HAL_GPIO_WritePin>
 8006ea2:	e00b      	b.n	8006ebc <mainTask+0x1d94>
			} else {
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006eaa:	485b      	ldr	r0, [pc, #364]	@ (8007018 <mainTask+0x1ef0>)
 8006eac:	f001 faf9 	bl	80084a2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006eb6:	4858      	ldr	r0, [pc, #352]	@ (8007018 <mainTask+0x1ef0>)
 8006eb8:	f001 faf3 	bl	80084a2 <HAL_GPIO_WritePin>
			}

			if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006ebc:	2102      	movs	r1, #2
 8006ebe:	4855      	ldr	r0, [pc, #340]	@ (8007014 <mainTask+0x1eec>)
 8006ec0:	f001 fad8 	bl	8008474 <HAL_GPIO_ReadPin>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d10d      	bne.n	8006ee6 <mainTask+0x1dbe>
					&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006eca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006ece:	4851      	ldr	r0, [pc, #324]	@ (8007014 <mainTask+0x1eec>)
 8006ed0:	f001 fad0 	bl	8008474 <HAL_GPIO_ReadPin>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d105      	bne.n	8006ee6 <mainTask+0x1dbe>
					&& (demoYukariCalis==0)
 8006eda:	4b50      	ldr	r3, [pc, #320]	@ (800701c <mainTask+0x1ef4>)
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	f083 0301 	eor.w	r3, r3, #1
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
					&& (demoAsagiCalis==0)) {
				//bos burası
			}

			//DEVİRME YUKARI CALIS
			if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006ee6:	2102      	movs	r1, #2
 8006ee8:	484a      	ldr	r0, [pc, #296]	@ (8007014 <mainTask+0x1eec>)
 8006eea:	f001 fac3 	bl	8008474 <HAL_GPIO_ReadPin>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d125      	bne.n	8006f40 <mainTask+0x1e18>
					&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006ef4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006ef8:	4846      	ldr	r0, [pc, #280]	@ (8007014 <mainTask+0x1eec>)
 8006efa:	f001 fabb 	bl	8008474 <HAL_GPIO_ReadPin>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d11d      	bne.n	8006f40 <mainTask+0x1e18>
					&&(demoYukariCalis==0)
 8006f04:	4b45      	ldr	r3, [pc, #276]	@ (800701c <mainTask+0x1ef4>)
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	f083 0301 	eor.w	r3, r3, #1
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d016      	beq.n	8006f40 <mainTask+0x1e18>
					&&(demoAsagiCalis==0)
 8006f12:	4b45      	ldr	r3, [pc, #276]	@ (8007028 <mainTask+0x1f00>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	f083 0301 	eor.w	r3, r3, #1
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00f      	beq.n	8006f40 <mainTask+0x1e18>
					&& (demoDevAsagi==0)) {
 8006f20:	4b40      	ldr	r3, [pc, #256]	@ (8007024 <mainTask+0x1efc>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	f083 0301 	eor.w	r3, r3, #1
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d008      	beq.n	8006f40 <mainTask+0x1e18>

				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006f2e:	2201      	movs	r2, #1
 8006f30:	2120      	movs	r1, #32
 8006f32:	4838      	ldr	r0, [pc, #224]	@ (8007014 <mainTask+0x1eec>)
 8006f34:	f001 fab5 	bl	80084a2 <HAL_GPIO_WritePin>
				demoDevYukari=1;
 8006f38:	4b39      	ldr	r3, [pc, #228]	@ (8007020 <mainTask+0x1ef8>)
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	701a      	strb	r2, [r3, #0]
 8006f3e:	e007      	b.n	8006f50 <mainTask+0x1e28>
			} else {
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006f40:	2200      	movs	r2, #0
 8006f42:	2120      	movs	r1, #32
 8006f44:	4833      	ldr	r0, [pc, #204]	@ (8007014 <mainTask+0x1eec>)
 8006f46:	f001 faac 	bl	80084a2 <HAL_GPIO_WritePin>
				demoDevYukari=0;
 8006f4a:	4b35      	ldr	r3, [pc, #212]	@ (8007020 <mainTask+0x1ef8>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	701a      	strb	r2, [r3, #0]
			}

			// DEVIRME ASAGI CALIS

			if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006f50:	2102      	movs	r1, #2
 8006f52:	4830      	ldr	r0, [pc, #192]	@ (8007014 <mainTask+0x1eec>)
 8006f54:	f001 fa8e 	bl	8008474 <HAL_GPIO_ReadPin>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d125      	bne.n	8006faa <mainTask+0x1e82>
					&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006f5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006f62:	482c      	ldr	r0, [pc, #176]	@ (8007014 <mainTask+0x1eec>)
 8006f64:	f001 fa86 	bl	8008474 <HAL_GPIO_ReadPin>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d11d      	bne.n	8006faa <mainTask+0x1e82>
					&&(demoYukariCalis==0)
 8006f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800701c <mainTask+0x1ef4>)
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	f083 0301 	eor.w	r3, r3, #1
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d016      	beq.n	8006faa <mainTask+0x1e82>
					&&(demoDevYukari==0)
 8006f7c:	4b28      	ldr	r3, [pc, #160]	@ (8007020 <mainTask+0x1ef8>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	f083 0301 	eor.w	r3, r3, #1
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00f      	beq.n	8006faa <mainTask+0x1e82>
					&& (demoAsagiCalis==0)) {
 8006f8a:	4b27      	ldr	r3, [pc, #156]	@ (8007028 <mainTask+0x1f00>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	f083 0301 	eor.w	r3, r3, #1
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d008      	beq.n	8006faa <mainTask+0x1e82>

				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006f98:	2201      	movs	r2, #1
 8006f9a:	2110      	movs	r1, #16
 8006f9c:	481d      	ldr	r0, [pc, #116]	@ (8007014 <mainTask+0x1eec>)
 8006f9e:	f001 fa80 	bl	80084a2 <HAL_GPIO_WritePin>
				demoDevAsagi=1;
 8006fa2:	4b20      	ldr	r3, [pc, #128]	@ (8007024 <mainTask+0x1efc>)
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	701a      	strb	r2, [r3, #0]
 8006fa8:	e007      	b.n	8006fba <mainTask+0x1e92>
			} else {
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006faa:	2200      	movs	r2, #0
 8006fac:	2110      	movs	r1, #16
 8006fae:	4819      	ldr	r0, [pc, #100]	@ (8007014 <mainTask+0x1eec>)
 8006fb0:	f001 fa77 	bl	80084a2 <HAL_GPIO_WritePin>
				demoDevAsagi=0;
 8006fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8007024 <mainTask+0x1efc>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	701a      	strb	r2, [r3, #0]
			}

			// DEMO ASAGI CALISMA

			if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006fba:	2104      	movs	r1, #4
 8006fbc:	4815      	ldr	r0, [pc, #84]	@ (8007014 <mainTask+0x1eec>)
 8006fbe:	f001 fa59 	bl	8008474 <HAL_GPIO_ReadPin>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d133      	bne.n	8007030 <mainTask+0x1f08>
					&& (demoYukariCalis==0)
 8006fc8:	4b14      	ldr	r3, [pc, #80]	@ (800701c <mainTask+0x1ef4>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	f083 0301 	eor.w	r3, r3, #1
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d02c      	beq.n	8007030 <mainTask+0x1f08>
					&& (demoDevAsagi==0)
 8006fd6:	4b13      	ldr	r3, [pc, #76]	@ (8007024 <mainTask+0x1efc>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	f083 0301 	eor.w	r3, r3, #1
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d025      	beq.n	8007030 <mainTask+0x1f08>
					&& (demoDevYukari==0)) {
 8006fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8007020 <mainTask+0x1ef8>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	f083 0301 	eor.w	r3, r3, #1
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d01e      	beq.n	8007030 <mainTask+0x1f08>

				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	2102      	movs	r1, #2
 8006ff6:	4808      	ldr	r0, [pc, #32]	@ (8007018 <mainTask+0x1ef0>)
 8006ff8:	f001 fa53 	bl	80084a2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	2101      	movs	r1, #1
 8007000:	4805      	ldr	r0, [pc, #20]	@ (8007018 <mainTask+0x1ef0>)
 8007002:	f001 fa4e 	bl	80084a2 <HAL_GPIO_WritePin>
				demoAsagiCalis=1;
 8007006:	4b08      	ldr	r3, [pc, #32]	@ (8007028 <mainTask+0x1f00>)
 8007008:	2201      	movs	r2, #1
 800700a:	701a      	strb	r2, [r3, #0]
				demoCalismaSayisiYar=1;
 800700c:	4b07      	ldr	r3, [pc, #28]	@ (800702c <mainTask+0x1f04>)
 800700e:	2201      	movs	r2, #1
 8007010:	701a      	strb	r2, [r3, #0]
 8007012:	e021      	b.n	8007058 <mainTask+0x1f30>
 8007014:	40011000 	.word	0x40011000
 8007018:	40010c00 	.word	0x40010c00
 800701c:	20000cdb 	.word	0x20000cdb
 8007020:	20000cdd 	.word	0x20000cdd
 8007024:	20000cde 	.word	0x20000cde
 8007028:	20000cdc 	.word	0x20000cdc
 800702c:	20000cc1 	.word	0x20000cc1
			} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007030:	2104      	movs	r1, #4
 8007032:	48a0      	ldr	r0, [pc, #640]	@ (80072b4 <mainTask+0x218c>)
 8007034:	f001 fa1e 	bl	8008474 <HAL_GPIO_ReadPin>
 8007038:	4603      	mov	r3, r0
 800703a:	2b01      	cmp	r3, #1
 800703c:	d10c      	bne.n	8007058 <mainTask+0x1f30>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800703e:	2200      	movs	r2, #0
 8007040:	2102      	movs	r1, #2
 8007042:	489d      	ldr	r0, [pc, #628]	@ (80072b8 <mainTask+0x2190>)
 8007044:	f001 fa2d 	bl	80084a2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007048:	2200      	movs	r2, #0
 800704a:	2101      	movs	r1, #1
 800704c:	489a      	ldr	r0, [pc, #616]	@ (80072b8 <mainTask+0x2190>)
 800704e:	f001 fa28 	bl	80084a2 <HAL_GPIO_WritePin>
				demoAsagiCalis=0;
 8007052:	4b9a      	ldr	r3, [pc, #616]	@ (80072bc <mainTask+0x2194>)
 8007054:	2200      	movs	r2, #0
 8007056:	701a      	strb	r2, [r3, #0]
			}

			if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007058:	2104      	movs	r1, #4
 800705a:	4896      	ldr	r0, [pc, #600]	@ (80072b4 <mainTask+0x218c>)
 800705c:	f001 fa0a 	bl	8008474 <HAL_GPIO_ReadPin>
 8007060:	4603      	mov	r3, r0
 8007062:	2b01      	cmp	r3, #1
 8007064:	d10d      	bne.n	8007082 <mainTask+0x1f5a>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007066:	2201      	movs	r2, #1
 8007068:	2180      	movs	r1, #128	@ 0x80
 800706a:	4895      	ldr	r0, [pc, #596]	@ (80072c0 <mainTask+0x2198>)
 800706c:	f001 fa19 	bl	80084a2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007070:	2201      	movs	r2, #1
 8007072:	2120      	movs	r1, #32
 8007074:	4892      	ldr	r0, [pc, #584]	@ (80072c0 <mainTask+0x2198>)
 8007076:	f001 fa14 	bl	80084a2 <HAL_GPIO_WritePin>
				timer3 = millis;
 800707a:	4b92      	ldr	r3, [pc, #584]	@ (80072c4 <mainTask+0x219c>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a92      	ldr	r2, [pc, #584]	@ (80072c8 <mainTask+0x21a0>)
 8007080:	6013      	str	r3, [r2, #0]
			}

			if(millis-timer3 >= 5) {
 8007082:	4b90      	ldr	r3, [pc, #576]	@ (80072c4 <mainTask+0x219c>)
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4b90      	ldr	r3, [pc, #576]	@ (80072c8 <mainTask+0x21a0>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b04      	cmp	r3, #4
 800708e:	d909      	bls.n	80070a4 <mainTask+0x1f7c>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007090:	2200      	movs	r2, #0
 8007092:	2180      	movs	r1, #128	@ 0x80
 8007094:	488a      	ldr	r0, [pc, #552]	@ (80072c0 <mainTask+0x2198>)
 8007096:	f001 fa04 	bl	80084a2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800709a:	2200      	movs	r2, #0
 800709c:	2120      	movs	r1, #32
 800709e:	4888      	ldr	r0, [pc, #544]	@ (80072c0 <mainTask+0x2198>)
 80070a0:	f001 f9ff 	bl	80084a2 <HAL_GPIO_WritePin>
			}

			if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80070a4:	2102      	movs	r1, #2
 80070a6:	4883      	ldr	r0, [pc, #524]	@ (80072b4 <mainTask+0x218c>)
 80070a8:	f001 f9e4 	bl	8008474 <HAL_GPIO_ReadPin>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d108      	bne.n	80070c4 <mainTask+0x1f9c>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80070b2:	2201      	movs	r2, #1
 80070b4:	2140      	movs	r1, #64	@ 0x40
 80070b6:	4882      	ldr	r0, [pc, #520]	@ (80072c0 <mainTask+0x2198>)
 80070b8:	f001 f9f3 	bl	80084a2 <HAL_GPIO_WritePin>
				timer3 = millis;
 80070bc:	4b81      	ldr	r3, [pc, #516]	@ (80072c4 <mainTask+0x219c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a81      	ldr	r2, [pc, #516]	@ (80072c8 <mainTask+0x21a0>)
 80070c2:	6013      	str	r3, [r2, #0]
			}

			if(millis-timer3 >= 5) {
 80070c4:	4b7f      	ldr	r3, [pc, #508]	@ (80072c4 <mainTask+0x219c>)
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	4b7f      	ldr	r3, [pc, #508]	@ (80072c8 <mainTask+0x21a0>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d904      	bls.n	80070dc <mainTask+0x1fb4>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80070d2:	2200      	movs	r2, #0
 80070d4:	2140      	movs	r1, #64	@ 0x40
 80070d6:	487a      	ldr	r0, [pc, #488]	@ (80072c0 <mainTask+0x2198>)
 80070d8:	f001 f9e3 	bl	80084a2 <HAL_GPIO_WritePin>
			}

			if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80070dc:	4b7b      	ldr	r3, [pc, #492]	@ (80072cc <mainTask+0x21a4>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d058      	beq.n	8007196 <mainTask+0x206e>
 80070e4:	4b7a      	ldr	r3, [pc, #488]	@ (80072d0 <mainTask+0x21a8>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d054      	beq.n	8007196 <mainTask+0x206e>
				//mesajYazildi=0;
				calismaSayisi1=calismaSayisi1+1;
 80070ec:	4b79      	ldr	r3, [pc, #484]	@ (80072d4 <mainTask+0x21ac>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	3301      	adds	r3, #1
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	4b77      	ldr	r3, [pc, #476]	@ (80072d4 <mainTask+0x21ac>)
 80070f6:	701a      	strb	r2, [r3, #0]

				if(calismaSayisi1>9) {
 80070f8:	4b76      	ldr	r3, [pc, #472]	@ (80072d4 <mainTask+0x21ac>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2b09      	cmp	r3, #9
 80070fe:	d908      	bls.n	8007112 <mainTask+0x1fea>
					calismaSayisi1=0;
 8007100:	4b74      	ldr	r3, [pc, #464]	@ (80072d4 <mainTask+0x21ac>)
 8007102:	2200      	movs	r2, #0
 8007104:	701a      	strb	r2, [r3, #0]
					calismaSayisi10=calismaSayisi10+1;
 8007106:	4b74      	ldr	r3, [pc, #464]	@ (80072d8 <mainTask+0x21b0>)
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	3301      	adds	r3, #1
 800710c:	b2da      	uxtb	r2, r3
 800710e:	4b72      	ldr	r3, [pc, #456]	@ (80072d8 <mainTask+0x21b0>)
 8007110:	701a      	strb	r2, [r3, #0]
				}

				if(calismaSayisi10>9) {
 8007112:	4b71      	ldr	r3, [pc, #452]	@ (80072d8 <mainTask+0x21b0>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	2b09      	cmp	r3, #9
 8007118:	d908      	bls.n	800712c <mainTask+0x2004>
					calismaSayisi10=0;
 800711a:	4b6f      	ldr	r3, [pc, #444]	@ (80072d8 <mainTask+0x21b0>)
 800711c:	2200      	movs	r2, #0
 800711e:	701a      	strb	r2, [r3, #0]
					calismaSayisi100=calismaSayisi100+1;
 8007120:	4b6e      	ldr	r3, [pc, #440]	@ (80072dc <mainTask+0x21b4>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	3301      	adds	r3, #1
 8007126:	b2da      	uxtb	r2, r3
 8007128:	4b6c      	ldr	r3, [pc, #432]	@ (80072dc <mainTask+0x21b4>)
 800712a:	701a      	strb	r2, [r3, #0]
				}

				if(calismaSayisi100>9) {
 800712c:	4b6b      	ldr	r3, [pc, #428]	@ (80072dc <mainTask+0x21b4>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	2b09      	cmp	r3, #9
 8007132:	d908      	bls.n	8007146 <mainTask+0x201e>
					calismaSayisi100=0;
 8007134:	4b69      	ldr	r3, [pc, #420]	@ (80072dc <mainTask+0x21b4>)
 8007136:	2200      	movs	r2, #0
 8007138:	701a      	strb	r2, [r3, #0]
					calismaSayisi1000=calismaSayisi1000+1;
 800713a:	4b69      	ldr	r3, [pc, #420]	@ (80072e0 <mainTask+0x21b8>)
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	3301      	adds	r3, #1
 8007140:	b2da      	uxtb	r2, r3
 8007142:	4b67      	ldr	r3, [pc, #412]	@ (80072e0 <mainTask+0x21b8>)
 8007144:	701a      	strb	r2, [r3, #0]
				}

				if(calismaSayisi1000>9) {
 8007146:	4b66      	ldr	r3, [pc, #408]	@ (80072e0 <mainTask+0x21b8>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	2b09      	cmp	r3, #9
 800714c:	d908      	bls.n	8007160 <mainTask+0x2038>
					calismaSayisi1000=0;
 800714e:	4b64      	ldr	r3, [pc, #400]	@ (80072e0 <mainTask+0x21b8>)
 8007150:	2200      	movs	r2, #0
 8007152:	701a      	strb	r2, [r3, #0]
					calismaSayisi10000=calismaSayisi10000+1;
 8007154:	4b63      	ldr	r3, [pc, #396]	@ (80072e4 <mainTask+0x21bc>)
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	3301      	adds	r3, #1
 800715a:	b2da      	uxtb	r2, r3
 800715c:	4b61      	ldr	r3, [pc, #388]	@ (80072e4 <mainTask+0x21bc>)
 800715e:	701a      	strb	r2, [r3, #0]
				}
				eepromData[32]=calismaSayisi10000;
 8007160:	4b60      	ldr	r3, [pc, #384]	@ (80072e4 <mainTask+0x21bc>)
 8007162:	781a      	ldrb	r2, [r3, #0]
 8007164:	4b60      	ldr	r3, [pc, #384]	@ (80072e8 <mainTask+0x21c0>)
 8007166:	f883 2020 	strb.w	r2, [r3, #32]
				eepromData[31]=calismaSayisi1000;
 800716a:	4b5d      	ldr	r3, [pc, #372]	@ (80072e0 <mainTask+0x21b8>)
 800716c:	781a      	ldrb	r2, [r3, #0]
 800716e:	4b5e      	ldr	r3, [pc, #376]	@ (80072e8 <mainTask+0x21c0>)
 8007170:	77da      	strb	r2, [r3, #31]
				eepromData[30]=calismaSayisi100;
 8007172:	4b5a      	ldr	r3, [pc, #360]	@ (80072dc <mainTask+0x21b4>)
 8007174:	781a      	ldrb	r2, [r3, #0]
 8007176:	4b5c      	ldr	r3, [pc, #368]	@ (80072e8 <mainTask+0x21c0>)
 8007178:	779a      	strb	r2, [r3, #30]
				eepromData[29]=calismaSayisi10;
 800717a:	4b57      	ldr	r3, [pc, #348]	@ (80072d8 <mainTask+0x21b0>)
 800717c:	781a      	ldrb	r2, [r3, #0]
 800717e:	4b5a      	ldr	r3, [pc, #360]	@ (80072e8 <mainTask+0x21c0>)
 8007180:	775a      	strb	r2, [r3, #29]
				eepromData[28]=calismaSayisi1;
 8007182:	4b54      	ldr	r3, [pc, #336]	@ (80072d4 <mainTask+0x21ac>)
 8007184:	781a      	ldrb	r2, [r3, #0]
 8007186:	4b58      	ldr	r3, [pc, #352]	@ (80072e8 <mainTask+0x21c0>)
 8007188:	771a      	strb	r2, [r3, #28]
				hafizaYaz=1;
 800718a:	4b58      	ldr	r3, [pc, #352]	@ (80072ec <mainTask+0x21c4>)
 800718c:	2201      	movs	r2, #1
 800718e:	701a      	strb	r2, [r3, #0]
		   		//mesajYazildi=0;
				demoCalismaSayisiYar=0;
 8007190:	4b4f      	ldr	r3, [pc, #316]	@ (80072d0 <mainTask+0x21a8>)
 8007192:	2200      	movs	r2, #0
 8007194:	701a      	strb	r2, [r3, #0]
			}

			if (menuGiris==0) {
 8007196:	4b56      	ldr	r3, [pc, #344]	@ (80072f0 <mainTask+0x21c8>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	f040 8087 	bne.w	80072ae <mainTask+0x2186>
				lcd_print(2,1,"Cycle      ");
 80071a0:	4a54      	ldr	r2, [pc, #336]	@ (80072f4 <mainTask+0x21cc>)
 80071a2:	2101      	movs	r1, #1
 80071a4:	2002      	movs	r0, #2
 80071a6:	f7f9 f98a 	bl	80004be <lcd_print>
				lcd_print(1,1, "    DEMO MODE   ");
 80071aa:	4a53      	ldr	r2, [pc, #332]	@ (80072f8 <mainTask+0x21d0>)
 80071ac:	2101      	movs	r1, #1
 80071ae:	2001      	movs	r0, #1
 80071b0:	f7f9 f985 	bl	80004be <lcd_print>
				itoa(calismaSayisi10000, snum, 10);
 80071b4:	4b4b      	ldr	r3, [pc, #300]	@ (80072e4 <mainTask+0x21bc>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	220a      	movs	r2, #10
 80071ba:	4950      	ldr	r1, [pc, #320]	@ (80072fc <mainTask+0x21d4>)
 80071bc:	4618      	mov	r0, r3
 80071be:	f005 fb15 	bl	800c7ec <itoa>
				lcd_print(2,12,snum);
 80071c2:	4a4e      	ldr	r2, [pc, #312]	@ (80072fc <mainTask+0x21d4>)
 80071c4:	210c      	movs	r1, #12
 80071c6:	2002      	movs	r0, #2
 80071c8:	f7f9 f979 	bl	80004be <lcd_print>
				itoa(calismaSayisi1000, snum, 10);
 80071cc:	4b44      	ldr	r3, [pc, #272]	@ (80072e0 <mainTask+0x21b8>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	220a      	movs	r2, #10
 80071d2:	494a      	ldr	r1, [pc, #296]	@ (80072fc <mainTask+0x21d4>)
 80071d4:	4618      	mov	r0, r3
 80071d6:	f005 fb09 	bl	800c7ec <itoa>
				lcd_print(2,13,snum);
 80071da:	4a48      	ldr	r2, [pc, #288]	@ (80072fc <mainTask+0x21d4>)
 80071dc:	210d      	movs	r1, #13
 80071de:	2002      	movs	r0, #2
 80071e0:	f7f9 f96d 	bl	80004be <lcd_print>
				itoa(calismaSayisi100, snum, 10);
 80071e4:	4b3d      	ldr	r3, [pc, #244]	@ (80072dc <mainTask+0x21b4>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	220a      	movs	r2, #10
 80071ea:	4944      	ldr	r1, [pc, #272]	@ (80072fc <mainTask+0x21d4>)
 80071ec:	4618      	mov	r0, r3
 80071ee:	f005 fafd 	bl	800c7ec <itoa>
				lcd_print(2,14,snum);
 80071f2:	4a42      	ldr	r2, [pc, #264]	@ (80072fc <mainTask+0x21d4>)
 80071f4:	210e      	movs	r1, #14
 80071f6:	2002      	movs	r0, #2
 80071f8:	f7f9 f961 	bl	80004be <lcd_print>
				itoa(calismaSayisi10, snum, 10);
 80071fc:	4b36      	ldr	r3, [pc, #216]	@ (80072d8 <mainTask+0x21b0>)
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	220a      	movs	r2, #10
 8007202:	493e      	ldr	r1, [pc, #248]	@ (80072fc <mainTask+0x21d4>)
 8007204:	4618      	mov	r0, r3
 8007206:	f005 faf1 	bl	800c7ec <itoa>
				lcd_print(2,15,snum);
 800720a:	4a3c      	ldr	r2, [pc, #240]	@ (80072fc <mainTask+0x21d4>)
 800720c:	210f      	movs	r1, #15
 800720e:	2002      	movs	r0, #2
 8007210:	f7f9 f955 	bl	80004be <lcd_print>
				itoa(calismaSayisi1, snum, 10);
 8007214:	4b2f      	ldr	r3, [pc, #188]	@ (80072d4 <mainTask+0x21ac>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	220a      	movs	r2, #10
 800721a:	4938      	ldr	r1, [pc, #224]	@ (80072fc <mainTask+0x21d4>)
 800721c:	4618      	mov	r0, r3
 800721e:	f005 fae5 	bl	800c7ec <itoa>
				lcd_print(2,16,snum);
 8007222:	4a36      	ldr	r2, [pc, #216]	@ (80072fc <mainTask+0x21d4>)
 8007224:	2110      	movs	r1, #16
 8007226:	2002      	movs	r0, #2
 8007228:	f7f9 f949 	bl	80004be <lcd_print>
				mesajYazildi=1;
 800722c:	4b34      	ldr	r3, [pc, #208]	@ (8007300 <mainTask+0x21d8>)
 800722e:	2201      	movs	r2, #1
 8007230:	701a      	strb	r2, [r3, #0]
			if (menuGiris==0) {
 8007232:	e03c      	b.n	80072ae <mainTask+0x2186>
			}
		} else if(demoMode==1 || menuGiris==1) {
 8007234:	4b33      	ldr	r3, [pc, #204]	@ (8007304 <mainTask+0x21dc>)
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d004      	beq.n	8007246 <mainTask+0x211e>
 800723c:	4b2c      	ldr	r3, [pc, #176]	@ (80072f0 <mainTask+0x21c8>)
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	2b01      	cmp	r3, #1
 8007242:	f47d af75 	bne.w	8005130 <mainTask+0x8>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007246:	2200      	movs	r2, #0
 8007248:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800724c:	481a      	ldr	r0, [pc, #104]	@ (80072b8 <mainTask+0x2190>)
 800724e:	f001 f928 	bl	80084a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007252:	2200      	movs	r2, #0
 8007254:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007258:	4817      	ldr	r0, [pc, #92]	@ (80072b8 <mainTask+0x2190>)
 800725a:	f001 f922 	bl	80084a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800725e:	2200      	movs	r2, #0
 8007260:	2104      	movs	r1, #4
 8007262:	4815      	ldr	r0, [pc, #84]	@ (80072b8 <mainTask+0x2190>)
 8007264:	f001 f91d 	bl	80084a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007268:	2200      	movs	r2, #0
 800726a:	2102      	movs	r1, #2
 800726c:	4812      	ldr	r0, [pc, #72]	@ (80072b8 <mainTask+0x2190>)
 800726e:	f001 f918 	bl	80084a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007272:	2200      	movs	r2, #0
 8007274:	2101      	movs	r1, #1
 8007276:	4810      	ldr	r0, [pc, #64]	@ (80072b8 <mainTask+0x2190>)
 8007278:	f001 f913 	bl	80084a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800727c:	2200      	movs	r2, #0
 800727e:	2120      	movs	r1, #32
 8007280:	480c      	ldr	r0, [pc, #48]	@ (80072b4 <mainTask+0x218c>)
 8007282:	f001 f90e 	bl	80084a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007286:	2200      	movs	r2, #0
 8007288:	2110      	movs	r1, #16
 800728a:	480a      	ldr	r0, [pc, #40]	@ (80072b4 <mainTask+0x218c>)
 800728c:	f001 f909 	bl	80084a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007290:	2200      	movs	r2, #0
 8007292:	2180      	movs	r1, #128	@ 0x80
 8007294:	480a      	ldr	r0, [pc, #40]	@ (80072c0 <mainTask+0x2198>)
 8007296:	f001 f904 	bl	80084a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800729a:	2200      	movs	r2, #0
 800729c:	2140      	movs	r1, #64	@ 0x40
 800729e:	4808      	ldr	r0, [pc, #32]	@ (80072c0 <mainTask+0x2198>)
 80072a0:	f001 f8ff 	bl	80084a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80072a4:	2200      	movs	r2, #0
 80072a6:	2120      	movs	r1, #32
 80072a8:	4805      	ldr	r0, [pc, #20]	@ (80072c0 <mainTask+0x2198>)
 80072aa:	f001 f8fa 	bl	80084a2 <HAL_GPIO_WritePin>
		if(millis - backLightTimer >= lcdBacklightSure) {
 80072ae:	f7fd bf3f 	b.w	8005130 <mainTask+0x8>
 80072b2:	bf00      	nop
 80072b4:	40011000 	.word	0x40011000
 80072b8:	40010c00 	.word	0x40010c00
 80072bc:	20000cdc 	.word	0x20000cdc
 80072c0:	40010800 	.word	0x40010800
 80072c4:	20000c60 	.word	0x20000c60
 80072c8:	20000c70 	.word	0x20000c70
 80072cc:	20000cdb 	.word	0x20000cdb
 80072d0:	20000cc1 	.word	0x20000cc1
 80072d4:	20000c81 	.word	0x20000c81
 80072d8:	20000c82 	.word	0x20000c82
 80072dc:	20000941 	.word	0x20000941
 80072e0:	20000942 	.word	0x20000942
 80072e4:	20000c83 	.word	0x20000c83
 80072e8:	20000c18 	.word	0x20000c18
 80072ec:	20000caf 	.word	0x20000caf
 80072f0:	20000ca1 	.word	0x20000ca1
 80072f4:	0800d6cc 	.word	0x0800d6cc
 80072f8:	0800d6d8 	.word	0x0800d6d8
 80072fc:	20000c58 	.word	0x20000c58
 8007300:	20000cb7 	.word	0x20000cb7
 8007304:	20000ca2 	.word	0x20000ca2

08007308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b090      	sub	sp, #64	@ 0x40
 800730c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800730e:	f107 0318 	add.w	r3, r7, #24
 8007312:	2228      	movs	r2, #40	@ 0x28
 8007314:	2100      	movs	r1, #0
 8007316:	4618      	mov	r0, r3
 8007318:	f005 fb62 	bl	800c9e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800731c:	1d3b      	adds	r3, r7, #4
 800731e:	2200      	movs	r2, #0
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	605a      	str	r2, [r3, #4]
 8007324:	609a      	str	r2, [r3, #8]
 8007326:	60da      	str	r2, [r3, #12]
 8007328:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800732a:	2301      	movs	r3, #1
 800732c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800732e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007332:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007334:	2300      	movs	r3, #0
 8007336:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007338:	2301      	movs	r3, #1
 800733a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800733c:	2302      	movs	r3, #2
 800733e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007340:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007344:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007346:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800734a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800734c:	f107 0318 	add.w	r3, r7, #24
 8007350:	4618      	mov	r0, r3
 8007352:	f002 fa9f 	bl	8009894 <HAL_RCC_OscConfig>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800735c:	f000 f9aa 	bl	80076b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007360:	230f      	movs	r3, #15
 8007362:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007364:	2302      	movs	r3, #2
 8007366:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800736c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007372:	2300      	movs	r3, #0
 8007374:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007376:	1d3b      	adds	r3, r7, #4
 8007378:	2102      	movs	r1, #2
 800737a:	4618      	mov	r0, r3
 800737c:	f002 fd0c 	bl	8009d98 <HAL_RCC_ClockConfig>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007386:	f000 f995 	bl	80076b4 <Error_Handler>
  }
}
 800738a:	bf00      	nop
 800738c:	3740      	adds	r7, #64	@ 0x40
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007398:	4b16      	ldr	r3, [pc, #88]	@ (80073f4 <MX_CAN_Init+0x60>)
 800739a:	4a17      	ldr	r2, [pc, #92]	@ (80073f8 <MX_CAN_Init+0x64>)
 800739c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800739e:	4b15      	ldr	r3, [pc, #84]	@ (80073f4 <MX_CAN_Init+0x60>)
 80073a0:	2210      	movs	r2, #16
 80073a2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80073a4:	4b13      	ldr	r3, [pc, #76]	@ (80073f4 <MX_CAN_Init+0x60>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80073aa:	4b12      	ldr	r3, [pc, #72]	@ (80073f4 <MX_CAN_Init+0x60>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80073b0:	4b10      	ldr	r3, [pc, #64]	@ (80073f4 <MX_CAN_Init+0x60>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80073b6:	4b0f      	ldr	r3, [pc, #60]	@ (80073f4 <MX_CAN_Init+0x60>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80073bc:	4b0d      	ldr	r3, [pc, #52]	@ (80073f4 <MX_CAN_Init+0x60>)
 80073be:	2200      	movs	r2, #0
 80073c0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80073c2:	4b0c      	ldr	r3, [pc, #48]	@ (80073f4 <MX_CAN_Init+0x60>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80073c8:	4b0a      	ldr	r3, [pc, #40]	@ (80073f4 <MX_CAN_Init+0x60>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80073ce:	4b09      	ldr	r3, [pc, #36]	@ (80073f4 <MX_CAN_Init+0x60>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80073d4:	4b07      	ldr	r3, [pc, #28]	@ (80073f4 <MX_CAN_Init+0x60>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80073da:	4b06      	ldr	r3, [pc, #24]	@ (80073f4 <MX_CAN_Init+0x60>)
 80073dc:	2200      	movs	r2, #0
 80073de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80073e0:	4804      	ldr	r0, [pc, #16]	@ (80073f4 <MX_CAN_Init+0x60>)
 80073e2:	f000 fbdd 	bl	8007ba0 <HAL_CAN_Init>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80073ec:	f000 f962 	bl	80076b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80073f0:	bf00      	nop
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	20000e1c 	.word	0x20000e1c
 80073f8:	40006400 	.word	0x40006400

080073fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007400:	4b12      	ldr	r3, [pc, #72]	@ (800744c <MX_I2C1_Init+0x50>)
 8007402:	4a13      	ldr	r2, [pc, #76]	@ (8007450 <MX_I2C1_Init+0x54>)
 8007404:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007406:	4b11      	ldr	r3, [pc, #68]	@ (800744c <MX_I2C1_Init+0x50>)
 8007408:	4a12      	ldr	r2, [pc, #72]	@ (8007454 <MX_I2C1_Init+0x58>)
 800740a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800740c:	4b0f      	ldr	r3, [pc, #60]	@ (800744c <MX_I2C1_Init+0x50>)
 800740e:	2200      	movs	r2, #0
 8007410:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007412:	4b0e      	ldr	r3, [pc, #56]	@ (800744c <MX_I2C1_Init+0x50>)
 8007414:	2200      	movs	r2, #0
 8007416:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007418:	4b0c      	ldr	r3, [pc, #48]	@ (800744c <MX_I2C1_Init+0x50>)
 800741a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800741e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007420:	4b0a      	ldr	r3, [pc, #40]	@ (800744c <MX_I2C1_Init+0x50>)
 8007422:	2200      	movs	r2, #0
 8007424:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007426:	4b09      	ldr	r3, [pc, #36]	@ (800744c <MX_I2C1_Init+0x50>)
 8007428:	2200      	movs	r2, #0
 800742a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800742c:	4b07      	ldr	r3, [pc, #28]	@ (800744c <MX_I2C1_Init+0x50>)
 800742e:	2200      	movs	r2, #0
 8007430:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007432:	4b06      	ldr	r3, [pc, #24]	@ (800744c <MX_I2C1_Init+0x50>)
 8007434:	2200      	movs	r2, #0
 8007436:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007438:	4804      	ldr	r0, [pc, #16]	@ (800744c <MX_I2C1_Init+0x50>)
 800743a:	f001 f863 	bl	8008504 <HAL_I2C_Init>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007444:	f000 f936 	bl	80076b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007448:	bf00      	nop
 800744a:	bd80      	pop	{r7, pc}
 800744c:	20000e44 	.word	0x20000e44
 8007450:	40005400 	.word	0x40005400
 8007454:	00061a80 	.word	0x00061a80

08007458 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800745e:	f107 0308 	add.w	r3, r7, #8
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]
 8007466:	605a      	str	r2, [r3, #4]
 8007468:	609a      	str	r2, [r3, #8]
 800746a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800746c:	463b      	mov	r3, r7
 800746e:	2200      	movs	r2, #0
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007474:	4b1f      	ldr	r3, [pc, #124]	@ (80074f4 <MX_TIM1_Init+0x9c>)
 8007476:	4a20      	ldr	r2, [pc, #128]	@ (80074f8 <MX_TIM1_Init+0xa0>)
 8007478:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800747a:	4b1e      	ldr	r3, [pc, #120]	@ (80074f4 <MX_TIM1_Init+0x9c>)
 800747c:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8007480:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007482:	4b1c      	ldr	r3, [pc, #112]	@ (80074f4 <MX_TIM1_Init+0x9c>)
 8007484:	2200      	movs	r2, #0
 8007486:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007488:	4b1a      	ldr	r3, [pc, #104]	@ (80074f4 <MX_TIM1_Init+0x9c>)
 800748a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800748e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007490:	4b18      	ldr	r3, [pc, #96]	@ (80074f4 <MX_TIM1_Init+0x9c>)
 8007492:	2200      	movs	r2, #0
 8007494:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007496:	4b17      	ldr	r3, [pc, #92]	@ (80074f4 <MX_TIM1_Init+0x9c>)
 8007498:	2200      	movs	r2, #0
 800749a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800749c:	4b15      	ldr	r3, [pc, #84]	@ (80074f4 <MX_TIM1_Init+0x9c>)
 800749e:	2200      	movs	r2, #0
 80074a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80074a2:	4814      	ldr	r0, [pc, #80]	@ (80074f4 <MX_TIM1_Init+0x9c>)
 80074a4:	f002 fe10 	bl	800a0c8 <HAL_TIM_Base_Init>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80074ae:	f000 f901 	bl	80076b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80074b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80074b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80074b8:	f107 0308 	add.w	r3, r7, #8
 80074bc:	4619      	mov	r1, r3
 80074be:	480d      	ldr	r0, [pc, #52]	@ (80074f4 <MX_TIM1_Init+0x9c>)
 80074c0:	f002 ffba 	bl	800a438 <HAL_TIM_ConfigClockSource>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80074ca:	f000 f8f3 	bl	80076b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80074ce:	2300      	movs	r3, #0
 80074d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074d2:	2300      	movs	r3, #0
 80074d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80074d6:	463b      	mov	r3, r7
 80074d8:	4619      	mov	r1, r3
 80074da:	4806      	ldr	r0, [pc, #24]	@ (80074f4 <MX_TIM1_Init+0x9c>)
 80074dc:	f003 f9a4 	bl	800a828 <HAL_TIMEx_MasterConfigSynchronization>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80074e6:	f000 f8e5 	bl	80076b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80074ea:	bf00      	nop
 80074ec:	3718      	adds	r7, #24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20000ee0 	.word	0x20000ee0
 80074f8:	40012c00 	.word	0x40012c00

080074fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007500:	4b11      	ldr	r3, [pc, #68]	@ (8007548 <MX_USART1_UART_Init+0x4c>)
 8007502:	4a12      	ldr	r2, [pc, #72]	@ (800754c <MX_USART1_UART_Init+0x50>)
 8007504:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007506:	4b10      	ldr	r3, [pc, #64]	@ (8007548 <MX_USART1_UART_Init+0x4c>)
 8007508:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800750c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800750e:	4b0e      	ldr	r3, [pc, #56]	@ (8007548 <MX_USART1_UART_Init+0x4c>)
 8007510:	2200      	movs	r2, #0
 8007512:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007514:	4b0c      	ldr	r3, [pc, #48]	@ (8007548 <MX_USART1_UART_Init+0x4c>)
 8007516:	2200      	movs	r2, #0
 8007518:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800751a:	4b0b      	ldr	r3, [pc, #44]	@ (8007548 <MX_USART1_UART_Init+0x4c>)
 800751c:	2200      	movs	r2, #0
 800751e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007520:	4b09      	ldr	r3, [pc, #36]	@ (8007548 <MX_USART1_UART_Init+0x4c>)
 8007522:	220c      	movs	r2, #12
 8007524:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007526:	4b08      	ldr	r3, [pc, #32]	@ (8007548 <MX_USART1_UART_Init+0x4c>)
 8007528:	2200      	movs	r2, #0
 800752a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800752c:	4b06      	ldr	r3, [pc, #24]	@ (8007548 <MX_USART1_UART_Init+0x4c>)
 800752e:	2200      	movs	r2, #0
 8007530:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007532:	4805      	ldr	r0, [pc, #20]	@ (8007548 <MX_USART1_UART_Init+0x4c>)
 8007534:	f003 f9f6 	bl	800a924 <HAL_UART_Init>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800753e:	f000 f8b9 	bl	80076b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007542:	bf00      	nop
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20000e98 	.word	0x20000e98
 800754c:	40013800 	.word	0x40013800

08007550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007556:	f107 0310 	add.w	r3, r7, #16
 800755a:	2200      	movs	r2, #0
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	605a      	str	r2, [r3, #4]
 8007560:	609a      	str	r2, [r3, #8]
 8007562:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007564:	4b4b      	ldr	r3, [pc, #300]	@ (8007694 <MX_GPIO_Init+0x144>)
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	4a4a      	ldr	r2, [pc, #296]	@ (8007694 <MX_GPIO_Init+0x144>)
 800756a:	f043 0310 	orr.w	r3, r3, #16
 800756e:	6193      	str	r3, [r2, #24]
 8007570:	4b48      	ldr	r3, [pc, #288]	@ (8007694 <MX_GPIO_Init+0x144>)
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	f003 0310 	and.w	r3, r3, #16
 8007578:	60fb      	str	r3, [r7, #12]
 800757a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800757c:	4b45      	ldr	r3, [pc, #276]	@ (8007694 <MX_GPIO_Init+0x144>)
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	4a44      	ldr	r2, [pc, #272]	@ (8007694 <MX_GPIO_Init+0x144>)
 8007582:	f043 0320 	orr.w	r3, r3, #32
 8007586:	6193      	str	r3, [r2, #24]
 8007588:	4b42      	ldr	r3, [pc, #264]	@ (8007694 <MX_GPIO_Init+0x144>)
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	f003 0320 	and.w	r3, r3, #32
 8007590:	60bb      	str	r3, [r7, #8]
 8007592:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007594:	4b3f      	ldr	r3, [pc, #252]	@ (8007694 <MX_GPIO_Init+0x144>)
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	4a3e      	ldr	r2, [pc, #248]	@ (8007694 <MX_GPIO_Init+0x144>)
 800759a:	f043 0304 	orr.w	r3, r3, #4
 800759e:	6193      	str	r3, [r2, #24]
 80075a0:	4b3c      	ldr	r3, [pc, #240]	@ (8007694 <MX_GPIO_Init+0x144>)
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	607b      	str	r3, [r7, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80075ac:	4b39      	ldr	r3, [pc, #228]	@ (8007694 <MX_GPIO_Init+0x144>)
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	4a38      	ldr	r2, [pc, #224]	@ (8007694 <MX_GPIO_Init+0x144>)
 80075b2:	f043 0308 	orr.w	r3, r3, #8
 80075b6:	6193      	str	r3, [r2, #24]
 80075b8:	4b36      	ldr	r3, [pc, #216]	@ (8007694 <MX_GPIO_Init+0x144>)
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	f003 0308 	and.w	r3, r3, #8
 80075c0:	603b      	str	r3, [r7, #0]
 80075c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80075c4:	2200      	movs	r2, #0
 80075c6:	21f0      	movs	r1, #240	@ 0xf0
 80075c8:	4833      	ldr	r0, [pc, #204]	@ (8007698 <MX_GPIO_Init+0x148>)
 80075ca:	f000 ff6a 	bl	80084a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80075ce:	2200      	movs	r2, #0
 80075d0:	f241 0130 	movw	r1, #4144	@ 0x1030
 80075d4:	4831      	ldr	r0, [pc, #196]	@ (800769c <MX_GPIO_Init+0x14c>)
 80075d6:	f000 ff64 	bl	80084a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80075da:	2200      	movs	r2, #0
 80075dc:	f640 4107 	movw	r1, #3079	@ 0xc07
 80075e0:	482f      	ldr	r0, [pc, #188]	@ (80076a0 <MX_GPIO_Init+0x150>)
 80075e2:	f000 ff5e 	bl	80084a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80075e6:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 80075ea:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075ec:	2300      	movs	r3, #0
 80075ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075f0:	2300      	movs	r3, #0
 80075f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075f4:	f107 0310 	add.w	r3, r7, #16
 80075f8:	4619      	mov	r1, r3
 80075fa:	4828      	ldr	r0, [pc, #160]	@ (800769c <MX_GPIO_Init+0x14c>)
 80075fc:	f000 fcda 	bl	8007fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007600:	f248 130f 	movw	r3, #33039	@ 0x810f
 8007604:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007606:	2300      	movs	r3, #0
 8007608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800760a:	2300      	movs	r3, #0
 800760c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800760e:	f107 0310 	add.w	r3, r7, #16
 8007612:	4619      	mov	r1, r3
 8007614:	4820      	ldr	r0, [pc, #128]	@ (8007698 <MX_GPIO_Init+0x148>)
 8007616:	f000 fccd 	bl	8007fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800761a:	23f0      	movs	r3, #240	@ 0xf0
 800761c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800761e:	2301      	movs	r3, #1
 8007620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007622:	2300      	movs	r3, #0
 8007624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007626:	2302      	movs	r3, #2
 8007628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800762a:	f107 0310 	add.w	r3, r7, #16
 800762e:	4619      	mov	r1, r3
 8007630:	4819      	ldr	r0, [pc, #100]	@ (8007698 <MX_GPIO_Init+0x148>)
 8007632:	f000 fcbf 	bl	8007fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8007636:	f241 0330 	movw	r3, #4144	@ 0x1030
 800763a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800763c:	2301      	movs	r3, #1
 800763e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007640:	2300      	movs	r3, #0
 8007642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007644:	2302      	movs	r3, #2
 8007646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007648:	f107 0310 	add.w	r3, r7, #16
 800764c:	4619      	mov	r1, r3
 800764e:	4813      	ldr	r0, [pc, #76]	@ (800769c <MX_GPIO_Init+0x14c>)
 8007650:	f000 fcb0 	bl	8007fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007654:	f640 4307 	movw	r3, #3079	@ 0xc07
 8007658:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800765a:	2301      	movs	r3, #1
 800765c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800765e:	2300      	movs	r3, #0
 8007660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007662:	2302      	movs	r3, #2
 8007664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007666:	f107 0310 	add.w	r3, r7, #16
 800766a:	4619      	mov	r1, r3
 800766c:	480c      	ldr	r0, [pc, #48]	@ (80076a0 <MX_GPIO_Init+0x150>)
 800766e:	f000 fca1 	bl	8007fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8007672:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8007676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007678:	2300      	movs	r3, #0
 800767a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800767c:	2300      	movs	r3, #0
 800767e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007680:	f107 0310 	add.w	r3, r7, #16
 8007684:	4619      	mov	r1, r3
 8007686:	4806      	ldr	r0, [pc, #24]	@ (80076a0 <MX_GPIO_Init+0x150>)
 8007688:	f000 fc94 	bl	8007fb4 <HAL_GPIO_Init>

}
 800768c:	bf00      	nop
 800768e:	3720      	adds	r7, #32
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	40021000 	.word	0x40021000
 8007698:	40010800 	.word	0x40010800
 800769c:	40011000 	.word	0x40011000
 80076a0:	40010c00 	.word	0x40010c00

080076a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80076ac:	2001      	movs	r0, #1
 80076ae:	f003 fa7f 	bl	800abb0 <osDelay>
 80076b2:	e7fb      	b.n	80076ac <StartDefaultTask+0x8>

080076b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80076b4:	b480      	push	{r7}
 80076b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80076b8:	bf00      	nop
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bc80      	pop	{r7}
 80076be:	4770      	bx	lr

080076c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80076c6:	4b18      	ldr	r3, [pc, #96]	@ (8007728 <HAL_MspInit+0x68>)
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	4a17      	ldr	r2, [pc, #92]	@ (8007728 <HAL_MspInit+0x68>)
 80076cc:	f043 0301 	orr.w	r3, r3, #1
 80076d0:	6193      	str	r3, [r2, #24]
 80076d2:	4b15      	ldr	r3, [pc, #84]	@ (8007728 <HAL_MspInit+0x68>)
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	60bb      	str	r3, [r7, #8]
 80076dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80076de:	4b12      	ldr	r3, [pc, #72]	@ (8007728 <HAL_MspInit+0x68>)
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	4a11      	ldr	r2, [pc, #68]	@ (8007728 <HAL_MspInit+0x68>)
 80076e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076e8:	61d3      	str	r3, [r2, #28]
 80076ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007728 <HAL_MspInit+0x68>)
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076f2:	607b      	str	r3, [r7, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80076f6:	2200      	movs	r2, #0
 80076f8:	210f      	movs	r1, #15
 80076fa:	f06f 0001 	mvn.w	r0, #1
 80076fe:	f000 fc22 	bl	8007f46 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007702:	4b0a      	ldr	r3, [pc, #40]	@ (800772c <HAL_MspInit+0x6c>)
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	4a04      	ldr	r2, [pc, #16]	@ (800772c <HAL_MspInit+0x6c>)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800771e:	bf00      	nop
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	40021000 	.word	0x40021000
 800772c:	40010000 	.word	0x40010000

08007730 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007738:	f107 0310 	add.w	r3, r7, #16
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	605a      	str	r2, [r3, #4]
 8007742:	609a      	str	r2, [r3, #8]
 8007744:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a1c      	ldr	r2, [pc, #112]	@ (80077bc <HAL_CAN_MspInit+0x8c>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d131      	bne.n	80077b4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007750:	4b1b      	ldr	r3, [pc, #108]	@ (80077c0 <HAL_CAN_MspInit+0x90>)
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	4a1a      	ldr	r2, [pc, #104]	@ (80077c0 <HAL_CAN_MspInit+0x90>)
 8007756:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800775a:	61d3      	str	r3, [r2, #28]
 800775c:	4b18      	ldr	r3, [pc, #96]	@ (80077c0 <HAL_CAN_MspInit+0x90>)
 800775e:	69db      	ldr	r3, [r3, #28]
 8007760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007764:	60fb      	str	r3, [r7, #12]
 8007766:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007768:	4b15      	ldr	r3, [pc, #84]	@ (80077c0 <HAL_CAN_MspInit+0x90>)
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	4a14      	ldr	r2, [pc, #80]	@ (80077c0 <HAL_CAN_MspInit+0x90>)
 800776e:	f043 0304 	orr.w	r3, r3, #4
 8007772:	6193      	str	r3, [r2, #24]
 8007774:	4b12      	ldr	r3, [pc, #72]	@ (80077c0 <HAL_CAN_MspInit+0x90>)
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	60bb      	str	r3, [r7, #8]
 800777e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007780:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007784:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007786:	2300      	movs	r3, #0
 8007788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800778a:	2300      	movs	r3, #0
 800778c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800778e:	f107 0310 	add.w	r3, r7, #16
 8007792:	4619      	mov	r1, r3
 8007794:	480b      	ldr	r0, [pc, #44]	@ (80077c4 <HAL_CAN_MspInit+0x94>)
 8007796:	f000 fc0d 	bl	8007fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800779a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800779e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077a0:	2302      	movs	r3, #2
 80077a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80077a4:	2303      	movs	r3, #3
 80077a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077a8:	f107 0310 	add.w	r3, r7, #16
 80077ac:	4619      	mov	r1, r3
 80077ae:	4805      	ldr	r0, [pc, #20]	@ (80077c4 <HAL_CAN_MspInit+0x94>)
 80077b0:	f000 fc00 	bl	8007fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80077b4:	bf00      	nop
 80077b6:	3720      	adds	r7, #32
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	40006400 	.word	0x40006400
 80077c0:	40021000 	.word	0x40021000
 80077c4:	40010800 	.word	0x40010800

080077c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b088      	sub	sp, #32
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077d0:	f107 0310 	add.w	r3, r7, #16
 80077d4:	2200      	movs	r2, #0
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	605a      	str	r2, [r3, #4]
 80077da:	609a      	str	r2, [r3, #8]
 80077dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a15      	ldr	r2, [pc, #84]	@ (8007838 <HAL_I2C_MspInit+0x70>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d123      	bne.n	8007830 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077e8:	4b14      	ldr	r3, [pc, #80]	@ (800783c <HAL_I2C_MspInit+0x74>)
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	4a13      	ldr	r2, [pc, #76]	@ (800783c <HAL_I2C_MspInit+0x74>)
 80077ee:	f043 0308 	orr.w	r3, r3, #8
 80077f2:	6193      	str	r3, [r2, #24]
 80077f4:	4b11      	ldr	r3, [pc, #68]	@ (800783c <HAL_I2C_MspInit+0x74>)
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	f003 0308 	and.w	r3, r3, #8
 80077fc:	60fb      	str	r3, [r7, #12]
 80077fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007800:	23c0      	movs	r3, #192	@ 0xc0
 8007802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007804:	2312      	movs	r3, #18
 8007806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007808:	2303      	movs	r3, #3
 800780a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800780c:	f107 0310 	add.w	r3, r7, #16
 8007810:	4619      	mov	r1, r3
 8007812:	480b      	ldr	r0, [pc, #44]	@ (8007840 <HAL_I2C_MspInit+0x78>)
 8007814:	f000 fbce 	bl	8007fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007818:	4b08      	ldr	r3, [pc, #32]	@ (800783c <HAL_I2C_MspInit+0x74>)
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	4a07      	ldr	r2, [pc, #28]	@ (800783c <HAL_I2C_MspInit+0x74>)
 800781e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007822:	61d3      	str	r3, [r2, #28]
 8007824:	4b05      	ldr	r3, [pc, #20]	@ (800783c <HAL_I2C_MspInit+0x74>)
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800782c:	60bb      	str	r3, [r7, #8]
 800782e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007830:	bf00      	nop
 8007832:	3720      	adds	r7, #32
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	40005400 	.word	0x40005400
 800783c:	40021000 	.word	0x40021000
 8007840:	40010c00 	.word	0x40010c00

08007844 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a0a      	ldr	r2, [pc, #40]	@ (800787c <HAL_I2C_MspDeInit+0x38>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d10d      	bne.n	8007872 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8007856:	4b0a      	ldr	r3, [pc, #40]	@ (8007880 <HAL_I2C_MspDeInit+0x3c>)
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	4a09      	ldr	r2, [pc, #36]	@ (8007880 <HAL_I2C_MspDeInit+0x3c>)
 800785c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007860:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8007862:	2140      	movs	r1, #64	@ 0x40
 8007864:	4807      	ldr	r0, [pc, #28]	@ (8007884 <HAL_I2C_MspDeInit+0x40>)
 8007866:	f000 fd39 	bl	80082dc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800786a:	2180      	movs	r1, #128	@ 0x80
 800786c:	4805      	ldr	r0, [pc, #20]	@ (8007884 <HAL_I2C_MspDeInit+0x40>)
 800786e:	f000 fd35 	bl	80082dc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8007872:	bf00      	nop
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	40005400 	.word	0x40005400
 8007880:	40021000 	.word	0x40021000
 8007884:	40010c00 	.word	0x40010c00

08007888 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a0d      	ldr	r2, [pc, #52]	@ (80078cc <HAL_TIM_Base_MspInit+0x44>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d113      	bne.n	80078c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800789a:	4b0d      	ldr	r3, [pc, #52]	@ (80078d0 <HAL_TIM_Base_MspInit+0x48>)
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	4a0c      	ldr	r2, [pc, #48]	@ (80078d0 <HAL_TIM_Base_MspInit+0x48>)
 80078a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80078a4:	6193      	str	r3, [r2, #24]
 80078a6:	4b0a      	ldr	r3, [pc, #40]	@ (80078d0 <HAL_TIM_Base_MspInit+0x48>)
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078ae:	60fb      	str	r3, [r7, #12]
 80078b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80078b2:	2200      	movs	r2, #0
 80078b4:	2105      	movs	r1, #5
 80078b6:	2019      	movs	r0, #25
 80078b8:	f000 fb45 	bl	8007f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80078bc:	2019      	movs	r0, #25
 80078be:	f000 fb5e 	bl	8007f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80078c2:	bf00      	nop
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	40012c00 	.word	0x40012c00
 80078d0:	40021000 	.word	0x40021000

080078d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078dc:	f107 0310 	add.w	r3, r7, #16
 80078e0:	2200      	movs	r2, #0
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	605a      	str	r2, [r3, #4]
 80078e6:	609a      	str	r2, [r3, #8]
 80078e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a1c      	ldr	r2, [pc, #112]	@ (8007960 <HAL_UART_MspInit+0x8c>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d131      	bne.n	8007958 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80078f4:	4b1b      	ldr	r3, [pc, #108]	@ (8007964 <HAL_UART_MspInit+0x90>)
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	4a1a      	ldr	r2, [pc, #104]	@ (8007964 <HAL_UART_MspInit+0x90>)
 80078fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078fe:	6193      	str	r3, [r2, #24]
 8007900:	4b18      	ldr	r3, [pc, #96]	@ (8007964 <HAL_UART_MspInit+0x90>)
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800790c:	4b15      	ldr	r3, [pc, #84]	@ (8007964 <HAL_UART_MspInit+0x90>)
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	4a14      	ldr	r2, [pc, #80]	@ (8007964 <HAL_UART_MspInit+0x90>)
 8007912:	f043 0304 	orr.w	r3, r3, #4
 8007916:	6193      	str	r3, [r2, #24]
 8007918:	4b12      	ldr	r3, [pc, #72]	@ (8007964 <HAL_UART_MspInit+0x90>)
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	60bb      	str	r3, [r7, #8]
 8007922:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007924:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007928:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800792a:	2302      	movs	r3, #2
 800792c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800792e:	2303      	movs	r3, #3
 8007930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007932:	f107 0310 	add.w	r3, r7, #16
 8007936:	4619      	mov	r1, r3
 8007938:	480b      	ldr	r0, [pc, #44]	@ (8007968 <HAL_UART_MspInit+0x94>)
 800793a:	f000 fb3b 	bl	8007fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800793e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007942:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007944:	2300      	movs	r3, #0
 8007946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007948:	2300      	movs	r3, #0
 800794a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800794c:	f107 0310 	add.w	r3, r7, #16
 8007950:	4619      	mov	r1, r3
 8007952:	4805      	ldr	r0, [pc, #20]	@ (8007968 <HAL_UART_MspInit+0x94>)
 8007954:	f000 fb2e 	bl	8007fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007958:	bf00      	nop
 800795a:	3720      	adds	r7, #32
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	40013800 	.word	0x40013800
 8007964:	40021000 	.word	0x40021000
 8007968:	40010800 	.word	0x40010800

0800796c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007970:	bf00      	nop
 8007972:	e7fd      	b.n	8007970 <NMI_Handler+0x4>

08007974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007978:	bf00      	nop
 800797a:	e7fd      	b.n	8007978 <HardFault_Handler+0x4>

0800797c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007980:	bf00      	nop
 8007982:	e7fd      	b.n	8007980 <MemManage_Handler+0x4>

08007984 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007984:	b480      	push	{r7}
 8007986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007988:	bf00      	nop
 800798a:	e7fd      	b.n	8007988 <BusFault_Handler+0x4>

0800798c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007990:	bf00      	nop
 8007992:	e7fd      	b.n	8007990 <UsageFault_Handler+0x4>

08007994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007994:	b480      	push	{r7}
 8007996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007998:	bf00      	nop
 800799a:	46bd      	mov	sp, r7
 800799c:	bc80      	pop	{r7}
 800799e:	4770      	bx	lr

080079a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80079a4:	f000 f8bc 	bl	8007b20 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80079a8:	f004 fa6c 	bl	800be84 <xTaskGetSchedulerState>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d001      	beq.n	80079b6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80079b2:	f004 fce1 	bl	800c378 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80079b6:	bf00      	nop
 80079b8:	bd80      	pop	{r7, pc}
	...

080079bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80079c0:	4802      	ldr	r0, [pc, #8]	@ (80079cc <TIM1_UP_IRQHandler+0x10>)
 80079c2:	f002 fc31 	bl	800a228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80079c6:	bf00      	nop
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20000ee0 	.word	0x20000ee0

080079d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80079d8:	4a14      	ldr	r2, [pc, #80]	@ (8007a2c <_sbrk+0x5c>)
 80079da:	4b15      	ldr	r3, [pc, #84]	@ (8007a30 <_sbrk+0x60>)
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80079e4:	4b13      	ldr	r3, [pc, #76]	@ (8007a34 <_sbrk+0x64>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d102      	bne.n	80079f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80079ec:	4b11      	ldr	r3, [pc, #68]	@ (8007a34 <_sbrk+0x64>)
 80079ee:	4a12      	ldr	r2, [pc, #72]	@ (8007a38 <_sbrk+0x68>)
 80079f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80079f2:	4b10      	ldr	r3, [pc, #64]	@ (8007a34 <_sbrk+0x64>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4413      	add	r3, r2
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d207      	bcs.n	8007a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007a00:	f005 f806 	bl	800ca10 <__errno>
 8007a04:	4603      	mov	r3, r0
 8007a06:	220c      	movs	r2, #12
 8007a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a0e:	e009      	b.n	8007a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007a10:	4b08      	ldr	r3, [pc, #32]	@ (8007a34 <_sbrk+0x64>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007a16:	4b07      	ldr	r3, [pc, #28]	@ (8007a34 <_sbrk+0x64>)
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	4a05      	ldr	r2, [pc, #20]	@ (8007a34 <_sbrk+0x64>)
 8007a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007a22:	68fb      	ldr	r3, [r7, #12]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3718      	adds	r7, #24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	2000c000 	.word	0x2000c000
 8007a30:	00000400 	.word	0x00000400
 8007a34:	20000f2c 	.word	0x20000f2c
 8007a38:	20001dc8 	.word	0x20001dc8

08007a3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007a40:	bf00      	nop
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bc80      	pop	{r7}
 8007a46:	4770      	bx	lr

08007a48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007a48:	480c      	ldr	r0, [pc, #48]	@ (8007a7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007a4a:	490d      	ldr	r1, [pc, #52]	@ (8007a80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8007a84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007a50:	e002      	b.n	8007a58 <LoopCopyDataInit>

08007a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007a56:	3304      	adds	r3, #4

08007a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007a5c:	d3f9      	bcc.n	8007a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8007a88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007a60:	4c0a      	ldr	r4, [pc, #40]	@ (8007a8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8007a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007a64:	e001      	b.n	8007a6a <LoopFillZerobss>

08007a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007a68:	3204      	adds	r2, #4

08007a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007a6c:	d3fb      	bcc.n	8007a66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007a6e:	f7ff ffe5 	bl	8007a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007a72:	f004 ffd3 	bl	800ca1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007a76:	f7fd f9d9 	bl	8004e2c <main>
  bx lr
 8007a7a:	4770      	bx	lr
  ldr r0, =_sdata
 8007a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007a80:	200009a4 	.word	0x200009a4
  ldr r2, =_sidata
 8007a84:	0800d754 	.word	0x0800d754
  ldr r2, =_sbss
 8007a88:	200009a4 	.word	0x200009a4
  ldr r4, =_ebss
 8007a8c:	20001dc8 	.word	0x20001dc8

08007a90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007a90:	e7fe      	b.n	8007a90 <ADC1_2_IRQHandler>
	...

08007a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a98:	4b08      	ldr	r3, [pc, #32]	@ (8007abc <HAL_Init+0x28>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a07      	ldr	r2, [pc, #28]	@ (8007abc <HAL_Init+0x28>)
 8007a9e:	f043 0310 	orr.w	r3, r3, #16
 8007aa2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007aa4:	2003      	movs	r0, #3
 8007aa6:	f000 fa43 	bl	8007f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007aaa:	200f      	movs	r0, #15
 8007aac:	f000 f808 	bl	8007ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007ab0:	f7ff fe06 	bl	80076c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	40022000 	.word	0x40022000

08007ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007ac8:	4b12      	ldr	r3, [pc, #72]	@ (8007b14 <HAL_InitTick+0x54>)
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	4b12      	ldr	r3, [pc, #72]	@ (8007b18 <HAL_InitTick+0x58>)
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 fa5b 	bl	8007f9a <HAL_SYSTICK_Config>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e00e      	b.n	8007b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b0f      	cmp	r3, #15
 8007af2:	d80a      	bhi.n	8007b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007af4:	2200      	movs	r2, #0
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	f04f 30ff 	mov.w	r0, #4294967295
 8007afc:	f000 fa23 	bl	8007f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007b00:	4a06      	ldr	r2, [pc, #24]	@ (8007b1c <HAL_InitTick+0x5c>)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	e000      	b.n	8007b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	20000944 	.word	0x20000944
 8007b18:	2000094c 	.word	0x2000094c
 8007b1c:	20000948 	.word	0x20000948

08007b20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b20:	b480      	push	{r7}
 8007b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007b24:	4b05      	ldr	r3, [pc, #20]	@ (8007b3c <HAL_IncTick+0x1c>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4b05      	ldr	r3, [pc, #20]	@ (8007b40 <HAL_IncTick+0x20>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4413      	add	r3, r2
 8007b30:	4a03      	ldr	r2, [pc, #12]	@ (8007b40 <HAL_IncTick+0x20>)
 8007b32:	6013      	str	r3, [r2, #0]
}
 8007b34:	bf00      	nop
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bc80      	pop	{r7}
 8007b3a:	4770      	bx	lr
 8007b3c:	2000094c 	.word	0x2000094c
 8007b40:	20000f30 	.word	0x20000f30

08007b44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007b44:	b480      	push	{r7}
 8007b46:	af00      	add	r7, sp, #0
  return uwTick;
 8007b48:	4b02      	ldr	r3, [pc, #8]	@ (8007b54 <HAL_GetTick+0x10>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bc80      	pop	{r7}
 8007b52:	4770      	bx	lr
 8007b54:	20000f30 	.word	0x20000f30

08007b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007b60:	f7ff fff0 	bl	8007b44 <HAL_GetTick>
 8007b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b70:	d005      	beq.n	8007b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007b72:	4b0a      	ldr	r3, [pc, #40]	@ (8007b9c <HAL_Delay+0x44>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007b7e:	bf00      	nop
 8007b80:	f7ff ffe0 	bl	8007b44 <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d8f7      	bhi.n	8007b80 <HAL_Delay+0x28>
  {
  }
}
 8007b90:	bf00      	nop
 8007b92:	bf00      	nop
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	2000094c 	.word	0x2000094c

08007ba0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e0ed      	b.n	8007d8e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d102      	bne.n	8007bc4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff fdb6 	bl	8007730 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f042 0201 	orr.w	r2, r2, #1
 8007bd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007bd4:	f7ff ffb6 	bl	8007b44 <HAL_GetTick>
 8007bd8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007bda:	e012      	b.n	8007c02 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007bdc:	f7ff ffb2 	bl	8007b44 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	2b0a      	cmp	r3, #10
 8007be8:	d90b      	bls.n	8007c02 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2205      	movs	r2, #5
 8007bfa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e0c5      	b.n	8007d8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f003 0301 	and.w	r3, r3, #1
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d0e5      	beq.n	8007bdc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0202 	bic.w	r2, r2, #2
 8007c1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c20:	f7ff ff90 	bl	8007b44 <HAL_GetTick>
 8007c24:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007c26:	e012      	b.n	8007c4e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007c28:	f7ff ff8c 	bl	8007b44 <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	2b0a      	cmp	r3, #10
 8007c34:	d90b      	bls.n	8007c4e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c3a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2205      	movs	r2, #5
 8007c46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e09f      	b.n	8007d8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	f003 0302 	and.w	r3, r3, #2
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e5      	bne.n	8007c28 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	7e1b      	ldrb	r3, [r3, #24]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d108      	bne.n	8007c76 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	e007      	b.n	8007c86 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	7e5b      	ldrb	r3, [r3, #25]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d108      	bne.n	8007ca0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	e007      	b.n	8007cb0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	7e9b      	ldrb	r3, [r3, #26]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d108      	bne.n	8007cca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f042 0220 	orr.w	r2, r2, #32
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	e007      	b.n	8007cda <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0220 	bic.w	r2, r2, #32
 8007cd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	7edb      	ldrb	r3, [r3, #27]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d108      	bne.n	8007cf4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 0210 	bic.w	r2, r2, #16
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	e007      	b.n	8007d04 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f042 0210 	orr.w	r2, r2, #16
 8007d02:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	7f1b      	ldrb	r3, [r3, #28]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d108      	bne.n	8007d1e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f042 0208 	orr.w	r2, r2, #8
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	e007      	b.n	8007d2e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f022 0208 	bic.w	r2, r2, #8
 8007d2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	7f5b      	ldrb	r3, [r3, #29]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d108      	bne.n	8007d48 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f042 0204 	orr.w	r2, r2, #4
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	e007      	b.n	8007d58 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f022 0204 	bic.w	r2, r2, #4
 8007d56:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	689a      	ldr	r2, [r3, #8]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	431a      	orrs	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	431a      	orrs	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	ea42 0103 	orr.w	r1, r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	1e5a      	subs	r2, r3, #1
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
	...

08007d98 <__NVIC_SetPriorityGrouping>:
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007da8:	4b0c      	ldr	r3, [pc, #48]	@ (8007ddc <__NVIC_SetPriorityGrouping+0x44>)
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007db4:	4013      	ands	r3, r2
 8007db6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007dca:	4a04      	ldr	r2, [pc, #16]	@ (8007ddc <__NVIC_SetPriorityGrouping+0x44>)
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	60d3      	str	r3, [r2, #12]
}
 8007dd0:	bf00      	nop
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bc80      	pop	{r7}
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	e000ed00 	.word	0xe000ed00

08007de0 <__NVIC_GetPriorityGrouping>:
{
 8007de0:	b480      	push	{r7}
 8007de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007de4:	4b04      	ldr	r3, [pc, #16]	@ (8007df8 <__NVIC_GetPriorityGrouping+0x18>)
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	0a1b      	lsrs	r3, r3, #8
 8007dea:	f003 0307 	and.w	r3, r3, #7
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bc80      	pop	{r7}
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	e000ed00 	.word	0xe000ed00

08007dfc <__NVIC_EnableIRQ>:
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	db0b      	blt.n	8007e26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	f003 021f 	and.w	r2, r3, #31
 8007e14:	4906      	ldr	r1, [pc, #24]	@ (8007e30 <__NVIC_EnableIRQ+0x34>)
 8007e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e1a:	095b      	lsrs	r3, r3, #5
 8007e1c:	2001      	movs	r0, #1
 8007e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8007e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bc80      	pop	{r7}
 8007e2e:	4770      	bx	lr
 8007e30:	e000e100 	.word	0xe000e100

08007e34 <__NVIC_SetPriority>:
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	6039      	str	r1, [r7, #0]
 8007e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	db0a      	blt.n	8007e5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	490c      	ldr	r1, [pc, #48]	@ (8007e80 <__NVIC_SetPriority+0x4c>)
 8007e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e52:	0112      	lsls	r2, r2, #4
 8007e54:	b2d2      	uxtb	r2, r2
 8007e56:	440b      	add	r3, r1
 8007e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007e5c:	e00a      	b.n	8007e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	4908      	ldr	r1, [pc, #32]	@ (8007e84 <__NVIC_SetPriority+0x50>)
 8007e64:	79fb      	ldrb	r3, [r7, #7]
 8007e66:	f003 030f 	and.w	r3, r3, #15
 8007e6a:	3b04      	subs	r3, #4
 8007e6c:	0112      	lsls	r2, r2, #4
 8007e6e:	b2d2      	uxtb	r2, r2
 8007e70:	440b      	add	r3, r1
 8007e72:	761a      	strb	r2, [r3, #24]
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bc80      	pop	{r7}
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	e000e100 	.word	0xe000e100
 8007e84:	e000ed00 	.word	0xe000ed00

08007e88 <NVIC_EncodePriority>:
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b089      	sub	sp, #36	@ 0x24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f003 0307 	and.w	r3, r3, #7
 8007e9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	f1c3 0307 	rsb	r3, r3, #7
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	bf28      	it	cs
 8007ea6:	2304      	movcs	r3, #4
 8007ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	3304      	adds	r3, #4
 8007eae:	2b06      	cmp	r3, #6
 8007eb0:	d902      	bls.n	8007eb8 <NVIC_EncodePriority+0x30>
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	3b03      	subs	r3, #3
 8007eb6:	e000      	b.n	8007eba <NVIC_EncodePriority+0x32>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec6:	43da      	mvns	r2, r3
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	401a      	ands	r2, r3
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eda:	43d9      	mvns	r1, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ee0:	4313      	orrs	r3, r2
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3724      	adds	r7, #36	@ 0x24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bc80      	pop	{r7}
 8007eea:	4770      	bx	lr

08007eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007efc:	d301      	bcc.n	8007f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007efe:	2301      	movs	r3, #1
 8007f00:	e00f      	b.n	8007f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f02:	4a0a      	ldr	r2, [pc, #40]	@ (8007f2c <SysTick_Config+0x40>)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f0a:	210f      	movs	r1, #15
 8007f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f10:	f7ff ff90 	bl	8007e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f14:	4b05      	ldr	r3, [pc, #20]	@ (8007f2c <SysTick_Config+0x40>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f1a:	4b04      	ldr	r3, [pc, #16]	@ (8007f2c <SysTick_Config+0x40>)
 8007f1c:	2207      	movs	r2, #7
 8007f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	e000e010 	.word	0xe000e010

08007f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7ff ff2d 	bl	8007d98 <__NVIC_SetPriorityGrouping>
}
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b086      	sub	sp, #24
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	607a      	str	r2, [r7, #4]
 8007f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007f58:	f7ff ff42 	bl	8007de0 <__NVIC_GetPriorityGrouping>
 8007f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	68b9      	ldr	r1, [r7, #8]
 8007f62:	6978      	ldr	r0, [r7, #20]
 8007f64:	f7ff ff90 	bl	8007e88 <NVIC_EncodePriority>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f6e:	4611      	mov	r1, r2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7ff ff5f 	bl	8007e34 <__NVIC_SetPriority>
}
 8007f76:	bf00      	nop
 8007f78:	3718      	adds	r7, #24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b082      	sub	sp, #8
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	4603      	mov	r3, r0
 8007f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7ff ff35 	bl	8007dfc <__NVIC_EnableIRQ>
}
 8007f92:	bf00      	nop
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7ff ffa2 	bl	8007eec <SysTick_Config>
 8007fa8:	4603      	mov	r3, r0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b08b      	sub	sp, #44	@ 0x2c
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007fc6:	e179      	b.n	80082bc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007fc8:	2201      	movs	r2, #1
 8007fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	69fa      	ldr	r2, [r7, #28]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	f040 8168 	bne.w	80082b6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	4a96      	ldr	r2, [pc, #600]	@ (8008244 <HAL_GPIO_Init+0x290>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d05e      	beq.n	80080ae <HAL_GPIO_Init+0xfa>
 8007ff0:	4a94      	ldr	r2, [pc, #592]	@ (8008244 <HAL_GPIO_Init+0x290>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d875      	bhi.n	80080e2 <HAL_GPIO_Init+0x12e>
 8007ff6:	4a94      	ldr	r2, [pc, #592]	@ (8008248 <HAL_GPIO_Init+0x294>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d058      	beq.n	80080ae <HAL_GPIO_Init+0xfa>
 8007ffc:	4a92      	ldr	r2, [pc, #584]	@ (8008248 <HAL_GPIO_Init+0x294>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d86f      	bhi.n	80080e2 <HAL_GPIO_Init+0x12e>
 8008002:	4a92      	ldr	r2, [pc, #584]	@ (800824c <HAL_GPIO_Init+0x298>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d052      	beq.n	80080ae <HAL_GPIO_Init+0xfa>
 8008008:	4a90      	ldr	r2, [pc, #576]	@ (800824c <HAL_GPIO_Init+0x298>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d869      	bhi.n	80080e2 <HAL_GPIO_Init+0x12e>
 800800e:	4a90      	ldr	r2, [pc, #576]	@ (8008250 <HAL_GPIO_Init+0x29c>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d04c      	beq.n	80080ae <HAL_GPIO_Init+0xfa>
 8008014:	4a8e      	ldr	r2, [pc, #568]	@ (8008250 <HAL_GPIO_Init+0x29c>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d863      	bhi.n	80080e2 <HAL_GPIO_Init+0x12e>
 800801a:	4a8e      	ldr	r2, [pc, #568]	@ (8008254 <HAL_GPIO_Init+0x2a0>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d046      	beq.n	80080ae <HAL_GPIO_Init+0xfa>
 8008020:	4a8c      	ldr	r2, [pc, #560]	@ (8008254 <HAL_GPIO_Init+0x2a0>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d85d      	bhi.n	80080e2 <HAL_GPIO_Init+0x12e>
 8008026:	2b12      	cmp	r3, #18
 8008028:	d82a      	bhi.n	8008080 <HAL_GPIO_Init+0xcc>
 800802a:	2b12      	cmp	r3, #18
 800802c:	d859      	bhi.n	80080e2 <HAL_GPIO_Init+0x12e>
 800802e:	a201      	add	r2, pc, #4	@ (adr r2, 8008034 <HAL_GPIO_Init+0x80>)
 8008030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008034:	080080af 	.word	0x080080af
 8008038:	08008089 	.word	0x08008089
 800803c:	0800809b 	.word	0x0800809b
 8008040:	080080dd 	.word	0x080080dd
 8008044:	080080e3 	.word	0x080080e3
 8008048:	080080e3 	.word	0x080080e3
 800804c:	080080e3 	.word	0x080080e3
 8008050:	080080e3 	.word	0x080080e3
 8008054:	080080e3 	.word	0x080080e3
 8008058:	080080e3 	.word	0x080080e3
 800805c:	080080e3 	.word	0x080080e3
 8008060:	080080e3 	.word	0x080080e3
 8008064:	080080e3 	.word	0x080080e3
 8008068:	080080e3 	.word	0x080080e3
 800806c:	080080e3 	.word	0x080080e3
 8008070:	080080e3 	.word	0x080080e3
 8008074:	080080e3 	.word	0x080080e3
 8008078:	08008091 	.word	0x08008091
 800807c:	080080a5 	.word	0x080080a5
 8008080:	4a75      	ldr	r2, [pc, #468]	@ (8008258 <HAL_GPIO_Init+0x2a4>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d013      	beq.n	80080ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008086:	e02c      	b.n	80080e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	623b      	str	r3, [r7, #32]
          break;
 800808e:	e029      	b.n	80080e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	3304      	adds	r3, #4
 8008096:	623b      	str	r3, [r7, #32]
          break;
 8008098:	e024      	b.n	80080e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	3308      	adds	r3, #8
 80080a0:	623b      	str	r3, [r7, #32]
          break;
 80080a2:	e01f      	b.n	80080e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	330c      	adds	r3, #12
 80080aa:	623b      	str	r3, [r7, #32]
          break;
 80080ac:	e01a      	b.n	80080e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d102      	bne.n	80080bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80080b6:	2304      	movs	r3, #4
 80080b8:	623b      	str	r3, [r7, #32]
          break;
 80080ba:	e013      	b.n	80080e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d105      	bne.n	80080d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80080c4:	2308      	movs	r3, #8
 80080c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	69fa      	ldr	r2, [r7, #28]
 80080cc:	611a      	str	r2, [r3, #16]
          break;
 80080ce:	e009      	b.n	80080e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80080d0:	2308      	movs	r3, #8
 80080d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	69fa      	ldr	r2, [r7, #28]
 80080d8:	615a      	str	r2, [r3, #20]
          break;
 80080da:	e003      	b.n	80080e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80080dc:	2300      	movs	r3, #0
 80080de:	623b      	str	r3, [r7, #32]
          break;
 80080e0:	e000      	b.n	80080e4 <HAL_GPIO_Init+0x130>
          break;
 80080e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	2bff      	cmp	r3, #255	@ 0xff
 80080e8:	d801      	bhi.n	80080ee <HAL_GPIO_Init+0x13a>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	e001      	b.n	80080f2 <HAL_GPIO_Init+0x13e>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	3304      	adds	r3, #4
 80080f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	2bff      	cmp	r3, #255	@ 0xff
 80080f8:	d802      	bhi.n	8008100 <HAL_GPIO_Init+0x14c>
 80080fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	e002      	b.n	8008106 <HAL_GPIO_Init+0x152>
 8008100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008102:	3b08      	subs	r3, #8
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	210f      	movs	r1, #15
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	fa01 f303 	lsl.w	r3, r1, r3
 8008114:	43db      	mvns	r3, r3
 8008116:	401a      	ands	r2, r3
 8008118:	6a39      	ldr	r1, [r7, #32]
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	fa01 f303 	lsl.w	r3, r1, r3
 8008120:	431a      	orrs	r2, r3
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 80c1 	beq.w	80082b6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008134:	4b49      	ldr	r3, [pc, #292]	@ (800825c <HAL_GPIO_Init+0x2a8>)
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	4a48      	ldr	r2, [pc, #288]	@ (800825c <HAL_GPIO_Init+0x2a8>)
 800813a:	f043 0301 	orr.w	r3, r3, #1
 800813e:	6193      	str	r3, [r2, #24]
 8008140:	4b46      	ldr	r3, [pc, #280]	@ (800825c <HAL_GPIO_Init+0x2a8>)
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	f003 0301 	and.w	r3, r3, #1
 8008148:	60bb      	str	r3, [r7, #8]
 800814a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800814c:	4a44      	ldr	r2, [pc, #272]	@ (8008260 <HAL_GPIO_Init+0x2ac>)
 800814e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008150:	089b      	lsrs	r3, r3, #2
 8008152:	3302      	adds	r3, #2
 8008154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008158:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815c:	f003 0303 	and.w	r3, r3, #3
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	220f      	movs	r2, #15
 8008164:	fa02 f303 	lsl.w	r3, r2, r3
 8008168:	43db      	mvns	r3, r3
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	4013      	ands	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a3c      	ldr	r2, [pc, #240]	@ (8008264 <HAL_GPIO_Init+0x2b0>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d01f      	beq.n	80081b8 <HAL_GPIO_Init+0x204>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a3b      	ldr	r2, [pc, #236]	@ (8008268 <HAL_GPIO_Init+0x2b4>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d019      	beq.n	80081b4 <HAL_GPIO_Init+0x200>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a3a      	ldr	r2, [pc, #232]	@ (800826c <HAL_GPIO_Init+0x2b8>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d013      	beq.n	80081b0 <HAL_GPIO_Init+0x1fc>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a39      	ldr	r2, [pc, #228]	@ (8008270 <HAL_GPIO_Init+0x2bc>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d00d      	beq.n	80081ac <HAL_GPIO_Init+0x1f8>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a38      	ldr	r2, [pc, #224]	@ (8008274 <HAL_GPIO_Init+0x2c0>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d007      	beq.n	80081a8 <HAL_GPIO_Init+0x1f4>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a37      	ldr	r2, [pc, #220]	@ (8008278 <HAL_GPIO_Init+0x2c4>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d101      	bne.n	80081a4 <HAL_GPIO_Init+0x1f0>
 80081a0:	2305      	movs	r3, #5
 80081a2:	e00a      	b.n	80081ba <HAL_GPIO_Init+0x206>
 80081a4:	2306      	movs	r3, #6
 80081a6:	e008      	b.n	80081ba <HAL_GPIO_Init+0x206>
 80081a8:	2304      	movs	r3, #4
 80081aa:	e006      	b.n	80081ba <HAL_GPIO_Init+0x206>
 80081ac:	2303      	movs	r3, #3
 80081ae:	e004      	b.n	80081ba <HAL_GPIO_Init+0x206>
 80081b0:	2302      	movs	r3, #2
 80081b2:	e002      	b.n	80081ba <HAL_GPIO_Init+0x206>
 80081b4:	2301      	movs	r3, #1
 80081b6:	e000      	b.n	80081ba <HAL_GPIO_Init+0x206>
 80081b8:	2300      	movs	r3, #0
 80081ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081bc:	f002 0203 	and.w	r2, r2, #3
 80081c0:	0092      	lsls	r2, r2, #2
 80081c2:	4093      	lsls	r3, r2
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80081ca:	4925      	ldr	r1, [pc, #148]	@ (8008260 <HAL_GPIO_Init+0x2ac>)
 80081cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ce:	089b      	lsrs	r3, r3, #2
 80081d0:	3302      	adds	r3, #2
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d006      	beq.n	80081f2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80081e4:	4b25      	ldr	r3, [pc, #148]	@ (800827c <HAL_GPIO_Init+0x2c8>)
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	4924      	ldr	r1, [pc, #144]	@ (800827c <HAL_GPIO_Init+0x2c8>)
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	600b      	str	r3, [r1, #0]
 80081f0:	e006      	b.n	8008200 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80081f2:	4b22      	ldr	r3, [pc, #136]	@ (800827c <HAL_GPIO_Init+0x2c8>)
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	43db      	mvns	r3, r3
 80081fa:	4920      	ldr	r1, [pc, #128]	@ (800827c <HAL_GPIO_Init+0x2c8>)
 80081fc:	4013      	ands	r3, r2
 80081fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d006      	beq.n	800821a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800820c:	4b1b      	ldr	r3, [pc, #108]	@ (800827c <HAL_GPIO_Init+0x2c8>)
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	491a      	ldr	r1, [pc, #104]	@ (800827c <HAL_GPIO_Init+0x2c8>)
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	4313      	orrs	r3, r2
 8008216:	604b      	str	r3, [r1, #4]
 8008218:	e006      	b.n	8008228 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800821a:	4b18      	ldr	r3, [pc, #96]	@ (800827c <HAL_GPIO_Init+0x2c8>)
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	43db      	mvns	r3, r3
 8008222:	4916      	ldr	r1, [pc, #88]	@ (800827c <HAL_GPIO_Init+0x2c8>)
 8008224:	4013      	ands	r3, r2
 8008226:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d025      	beq.n	8008280 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008234:	4b11      	ldr	r3, [pc, #68]	@ (800827c <HAL_GPIO_Init+0x2c8>)
 8008236:	689a      	ldr	r2, [r3, #8]
 8008238:	4910      	ldr	r1, [pc, #64]	@ (800827c <HAL_GPIO_Init+0x2c8>)
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	4313      	orrs	r3, r2
 800823e:	608b      	str	r3, [r1, #8]
 8008240:	e025      	b.n	800828e <HAL_GPIO_Init+0x2da>
 8008242:	bf00      	nop
 8008244:	10320000 	.word	0x10320000
 8008248:	10310000 	.word	0x10310000
 800824c:	10220000 	.word	0x10220000
 8008250:	10210000 	.word	0x10210000
 8008254:	10120000 	.word	0x10120000
 8008258:	10110000 	.word	0x10110000
 800825c:	40021000 	.word	0x40021000
 8008260:	40010000 	.word	0x40010000
 8008264:	40010800 	.word	0x40010800
 8008268:	40010c00 	.word	0x40010c00
 800826c:	40011000 	.word	0x40011000
 8008270:	40011400 	.word	0x40011400
 8008274:	40011800 	.word	0x40011800
 8008278:	40011c00 	.word	0x40011c00
 800827c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008280:	4b15      	ldr	r3, [pc, #84]	@ (80082d8 <HAL_GPIO_Init+0x324>)
 8008282:	689a      	ldr	r2, [r3, #8]
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	43db      	mvns	r3, r3
 8008288:	4913      	ldr	r1, [pc, #76]	@ (80082d8 <HAL_GPIO_Init+0x324>)
 800828a:	4013      	ands	r3, r2
 800828c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d006      	beq.n	80082a8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800829a:	4b0f      	ldr	r3, [pc, #60]	@ (80082d8 <HAL_GPIO_Init+0x324>)
 800829c:	68da      	ldr	r2, [r3, #12]
 800829e:	490e      	ldr	r1, [pc, #56]	@ (80082d8 <HAL_GPIO_Init+0x324>)
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60cb      	str	r3, [r1, #12]
 80082a6:	e006      	b.n	80082b6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80082a8:	4b0b      	ldr	r3, [pc, #44]	@ (80082d8 <HAL_GPIO_Init+0x324>)
 80082aa:	68da      	ldr	r2, [r3, #12]
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	43db      	mvns	r3, r3
 80082b0:	4909      	ldr	r1, [pc, #36]	@ (80082d8 <HAL_GPIO_Init+0x324>)
 80082b2:	4013      	ands	r3, r2
 80082b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80082b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b8:	3301      	adds	r3, #1
 80082ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c2:	fa22 f303 	lsr.w	r3, r2, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f47f ae7e 	bne.w	8007fc8 <HAL_GPIO_Init+0x14>
  }
}
 80082cc:	bf00      	nop
 80082ce:	bf00      	nop
 80082d0:	372c      	adds	r7, #44	@ 0x2c
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bc80      	pop	{r7}
 80082d6:	4770      	bx	lr
 80082d8:	40010400 	.word	0x40010400

080082dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80082dc:	b480      	push	{r7}
 80082de:	b089      	sub	sp, #36	@ 0x24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80082e6:	2300      	movs	r3, #0
 80082e8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80082ea:	e0a6      	b.n	800843a <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80082ec:	2201      	movs	r2, #1
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	fa02 f303 	lsl.w	r3, r2, r3
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	4013      	ands	r3, r2
 80082f8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 8099 	beq.w	8008434 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008302:	4a54      	ldr	r2, [pc, #336]	@ (8008454 <HAL_GPIO_DeInit+0x178>)
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	089b      	lsrs	r3, r3, #2
 8008308:	3302      	adds	r3, #2
 800830a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800830e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	f003 0303 	and.w	r3, r3, #3
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	220f      	movs	r2, #15
 800831a:	fa02 f303 	lsl.w	r3, r2, r3
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	4013      	ands	r3, r2
 8008322:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a4c      	ldr	r2, [pc, #304]	@ (8008458 <HAL_GPIO_DeInit+0x17c>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d01f      	beq.n	800836c <HAL_GPIO_DeInit+0x90>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a4b      	ldr	r2, [pc, #300]	@ (800845c <HAL_GPIO_DeInit+0x180>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d019      	beq.n	8008368 <HAL_GPIO_DeInit+0x8c>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a4a      	ldr	r2, [pc, #296]	@ (8008460 <HAL_GPIO_DeInit+0x184>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d013      	beq.n	8008364 <HAL_GPIO_DeInit+0x88>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a49      	ldr	r2, [pc, #292]	@ (8008464 <HAL_GPIO_DeInit+0x188>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d00d      	beq.n	8008360 <HAL_GPIO_DeInit+0x84>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a48      	ldr	r2, [pc, #288]	@ (8008468 <HAL_GPIO_DeInit+0x18c>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d007      	beq.n	800835c <HAL_GPIO_DeInit+0x80>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a47      	ldr	r2, [pc, #284]	@ (800846c <HAL_GPIO_DeInit+0x190>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d101      	bne.n	8008358 <HAL_GPIO_DeInit+0x7c>
 8008354:	2305      	movs	r3, #5
 8008356:	e00a      	b.n	800836e <HAL_GPIO_DeInit+0x92>
 8008358:	2306      	movs	r3, #6
 800835a:	e008      	b.n	800836e <HAL_GPIO_DeInit+0x92>
 800835c:	2304      	movs	r3, #4
 800835e:	e006      	b.n	800836e <HAL_GPIO_DeInit+0x92>
 8008360:	2303      	movs	r3, #3
 8008362:	e004      	b.n	800836e <HAL_GPIO_DeInit+0x92>
 8008364:	2302      	movs	r3, #2
 8008366:	e002      	b.n	800836e <HAL_GPIO_DeInit+0x92>
 8008368:	2301      	movs	r3, #1
 800836a:	e000      	b.n	800836e <HAL_GPIO_DeInit+0x92>
 800836c:	2300      	movs	r3, #0
 800836e:	69fa      	ldr	r2, [r7, #28]
 8008370:	f002 0203 	and.w	r2, r2, #3
 8008374:	0092      	lsls	r2, r2, #2
 8008376:	4093      	lsls	r3, r2
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	429a      	cmp	r2, r3
 800837c:	d132      	bne.n	80083e4 <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	f003 0303 	and.w	r3, r3, #3
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	220f      	movs	r2, #15
 8008388:	fa02 f303 	lsl.w	r3, r2, r3
 800838c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800838e:	4a31      	ldr	r2, [pc, #196]	@ (8008454 <HAL_GPIO_DeInit+0x178>)
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	089b      	lsrs	r3, r3, #2
 8008394:	3302      	adds	r3, #2
 8008396:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	43da      	mvns	r2, r3
 800839e:	482d      	ldr	r0, [pc, #180]	@ (8008454 <HAL_GPIO_DeInit+0x178>)
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	089b      	lsrs	r3, r3, #2
 80083a4:	400a      	ands	r2, r1
 80083a6:	3302      	adds	r3, #2
 80083a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80083ac:	4b30      	ldr	r3, [pc, #192]	@ (8008470 <HAL_GPIO_DeInit+0x194>)
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	43db      	mvns	r3, r3
 80083b4:	492e      	ldr	r1, [pc, #184]	@ (8008470 <HAL_GPIO_DeInit+0x194>)
 80083b6:	4013      	ands	r3, r2
 80083b8:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80083ba:	4b2d      	ldr	r3, [pc, #180]	@ (8008470 <HAL_GPIO_DeInit+0x194>)
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	43db      	mvns	r3, r3
 80083c2:	492b      	ldr	r1, [pc, #172]	@ (8008470 <HAL_GPIO_DeInit+0x194>)
 80083c4:	4013      	ands	r3, r2
 80083c6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80083c8:	4b29      	ldr	r3, [pc, #164]	@ (8008470 <HAL_GPIO_DeInit+0x194>)
 80083ca:	689a      	ldr	r2, [r3, #8]
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	43db      	mvns	r3, r3
 80083d0:	4927      	ldr	r1, [pc, #156]	@ (8008470 <HAL_GPIO_DeInit+0x194>)
 80083d2:	4013      	ands	r3, r2
 80083d4:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80083d6:	4b26      	ldr	r3, [pc, #152]	@ (8008470 <HAL_GPIO_DeInit+0x194>)
 80083d8:	68da      	ldr	r2, [r3, #12]
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	43db      	mvns	r3, r3
 80083de:	4924      	ldr	r1, [pc, #144]	@ (8008470 <HAL_GPIO_DeInit+0x194>)
 80083e0:	4013      	ands	r3, r2
 80083e2:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	2bff      	cmp	r3, #255	@ 0xff
 80083e8:	d801      	bhi.n	80083ee <HAL_GPIO_DeInit+0x112>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	e001      	b.n	80083f2 <HAL_GPIO_DeInit+0x116>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	3304      	adds	r3, #4
 80083f2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	2bff      	cmp	r3, #255	@ 0xff
 80083f8:	d802      	bhi.n	8008400 <HAL_GPIO_DeInit+0x124>
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	e002      	b.n	8008406 <HAL_GPIO_DeInit+0x12a>
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	3b08      	subs	r3, #8
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	210f      	movs	r1, #15
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	fa01 f303 	lsl.w	r3, r1, r3
 8008414:	43db      	mvns	r3, r3
 8008416:	401a      	ands	r2, r3
 8008418:	2104      	movs	r1, #4
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	fa01 f303 	lsl.w	r3, r1, r3
 8008420:	431a      	orrs	r2, r3
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	43db      	mvns	r3, r3
 800842e:	401a      	ands	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	3301      	adds	r3, #1
 8008438:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800843a:	683a      	ldr	r2, [r7, #0]
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	fa22 f303 	lsr.w	r3, r2, r3
 8008442:	2b00      	cmp	r3, #0
 8008444:	f47f af52 	bne.w	80082ec <HAL_GPIO_DeInit+0x10>
  }
}
 8008448:	bf00      	nop
 800844a:	bf00      	nop
 800844c:	3724      	adds	r7, #36	@ 0x24
 800844e:	46bd      	mov	sp, r7
 8008450:	bc80      	pop	{r7}
 8008452:	4770      	bx	lr
 8008454:	40010000 	.word	0x40010000
 8008458:	40010800 	.word	0x40010800
 800845c:	40010c00 	.word	0x40010c00
 8008460:	40011000 	.word	0x40011000
 8008464:	40011400 	.word	0x40011400
 8008468:	40011800 	.word	0x40011800
 800846c:	40011c00 	.word	0x40011c00
 8008470:	40010400 	.word	0x40010400

08008474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	460b      	mov	r3, r1
 800847e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	887b      	ldrh	r3, [r7, #2]
 8008486:	4013      	ands	r3, r2
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800848c:	2301      	movs	r3, #1
 800848e:	73fb      	strb	r3, [r7, #15]
 8008490:	e001      	b.n	8008496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008492:	2300      	movs	r3, #0
 8008494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008496:	7bfb      	ldrb	r3, [r7, #15]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	bc80      	pop	{r7}
 80084a0:	4770      	bx	lr

080084a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	460b      	mov	r3, r1
 80084ac:	807b      	strh	r3, [r7, #2]
 80084ae:	4613      	mov	r3, r2
 80084b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80084b2:	787b      	ldrb	r3, [r7, #1]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d003      	beq.n	80084c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80084b8:	887a      	ldrh	r2, [r7, #2]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80084be:	e003      	b.n	80084c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80084c0:	887b      	ldrh	r3, [r7, #2]
 80084c2:	041a      	lsls	r2, r3, #16
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	611a      	str	r2, [r3, #16]
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bc80      	pop	{r7}
 80084d0:	4770      	bx	lr

080084d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b085      	sub	sp, #20
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	460b      	mov	r3, r1
 80084dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80084e4:	887a      	ldrh	r2, [r7, #2]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	4013      	ands	r3, r2
 80084ea:	041a      	lsls	r2, r3, #16
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	43d9      	mvns	r1, r3
 80084f0:	887b      	ldrh	r3, [r7, #2]
 80084f2:	400b      	ands	r3, r1
 80084f4:	431a      	orrs	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	611a      	str	r2, [r3, #16]
}
 80084fa:	bf00      	nop
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	bc80      	pop	{r7}
 8008502:	4770      	bx	lr

08008504 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d101      	bne.n	8008516 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e12b      	b.n	800876e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d106      	bne.n	8008530 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7ff f94c 	bl	80077c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2224      	movs	r2, #36	@ 0x24
 8008534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f022 0201 	bic.w	r2, r2, #1
 8008546:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008556:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008566:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008568:	f001 fd68 	bl	800a03c <HAL_RCC_GetPCLK1Freq>
 800856c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	4a81      	ldr	r2, [pc, #516]	@ (8008778 <HAL_I2C_Init+0x274>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d807      	bhi.n	8008588 <HAL_I2C_Init+0x84>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4a80      	ldr	r2, [pc, #512]	@ (800877c <HAL_I2C_Init+0x278>)
 800857c:	4293      	cmp	r3, r2
 800857e:	bf94      	ite	ls
 8008580:	2301      	movls	r3, #1
 8008582:	2300      	movhi	r3, #0
 8008584:	b2db      	uxtb	r3, r3
 8008586:	e006      	b.n	8008596 <HAL_I2C_Init+0x92>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4a7d      	ldr	r2, [pc, #500]	@ (8008780 <HAL_I2C_Init+0x27c>)
 800858c:	4293      	cmp	r3, r2
 800858e:	bf94      	ite	ls
 8008590:	2301      	movls	r3, #1
 8008592:	2300      	movhi	r3, #0
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e0e7      	b.n	800876e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	4a78      	ldr	r2, [pc, #480]	@ (8008784 <HAL_I2C_Init+0x280>)
 80085a2:	fba2 2303 	umull	r2, r3, r2, r3
 80085a6:	0c9b      	lsrs	r3, r3, #18
 80085a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	430a      	orrs	r2, r1
 80085bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	4a6a      	ldr	r2, [pc, #424]	@ (8008778 <HAL_I2C_Init+0x274>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d802      	bhi.n	80085d8 <HAL_I2C_Init+0xd4>
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	3301      	adds	r3, #1
 80085d6:	e009      	b.n	80085ec <HAL_I2C_Init+0xe8>
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80085de:	fb02 f303 	mul.w	r3, r2, r3
 80085e2:	4a69      	ldr	r2, [pc, #420]	@ (8008788 <HAL_I2C_Init+0x284>)
 80085e4:	fba2 2303 	umull	r2, r3, r2, r3
 80085e8:	099b      	lsrs	r3, r3, #6
 80085ea:	3301      	adds	r3, #1
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	6812      	ldr	r2, [r2, #0]
 80085f0:	430b      	orrs	r3, r1
 80085f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80085fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	495c      	ldr	r1, [pc, #368]	@ (8008778 <HAL_I2C_Init+0x274>)
 8008608:	428b      	cmp	r3, r1
 800860a:	d819      	bhi.n	8008640 <HAL_I2C_Init+0x13c>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	1e59      	subs	r1, r3, #1
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	005b      	lsls	r3, r3, #1
 8008616:	fbb1 f3f3 	udiv	r3, r1, r3
 800861a:	1c59      	adds	r1, r3, #1
 800861c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008620:	400b      	ands	r3, r1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <HAL_I2C_Init+0x138>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	1e59      	subs	r1, r3, #1
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	005b      	lsls	r3, r3, #1
 8008630:	fbb1 f3f3 	udiv	r3, r1, r3
 8008634:	3301      	adds	r3, #1
 8008636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800863a:	e051      	b.n	80086e0 <HAL_I2C_Init+0x1dc>
 800863c:	2304      	movs	r3, #4
 800863e:	e04f      	b.n	80086e0 <HAL_I2C_Init+0x1dc>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d111      	bne.n	800866c <HAL_I2C_Init+0x168>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	1e58      	subs	r0, r3, #1
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6859      	ldr	r1, [r3, #4]
 8008650:	460b      	mov	r3, r1
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	440b      	add	r3, r1
 8008656:	fbb0 f3f3 	udiv	r3, r0, r3
 800865a:	3301      	adds	r3, #1
 800865c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008660:	2b00      	cmp	r3, #0
 8008662:	bf0c      	ite	eq
 8008664:	2301      	moveq	r3, #1
 8008666:	2300      	movne	r3, #0
 8008668:	b2db      	uxtb	r3, r3
 800866a:	e012      	b.n	8008692 <HAL_I2C_Init+0x18e>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	1e58      	subs	r0, r3, #1
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6859      	ldr	r1, [r3, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	440b      	add	r3, r1
 800867a:	0099      	lsls	r1, r3, #2
 800867c:	440b      	add	r3, r1
 800867e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008682:	3301      	adds	r3, #1
 8008684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008688:	2b00      	cmp	r3, #0
 800868a:	bf0c      	ite	eq
 800868c:	2301      	moveq	r3, #1
 800868e:	2300      	movne	r3, #0
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <HAL_I2C_Init+0x196>
 8008696:	2301      	movs	r3, #1
 8008698:	e022      	b.n	80086e0 <HAL_I2C_Init+0x1dc>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10e      	bne.n	80086c0 <HAL_I2C_Init+0x1bc>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	1e58      	subs	r0, r3, #1
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6859      	ldr	r1, [r3, #4]
 80086aa:	460b      	mov	r3, r1
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	440b      	add	r3, r1
 80086b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80086b4:	3301      	adds	r3, #1
 80086b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086be:	e00f      	b.n	80086e0 <HAL_I2C_Init+0x1dc>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	1e58      	subs	r0, r3, #1
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6859      	ldr	r1, [r3, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	440b      	add	r3, r1
 80086ce:	0099      	lsls	r1, r3, #2
 80086d0:	440b      	add	r3, r1
 80086d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80086d6:	3301      	adds	r3, #1
 80086d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80086e0:	6879      	ldr	r1, [r7, #4]
 80086e2:	6809      	ldr	r1, [r1, #0]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	69da      	ldr	r2, [r3, #28]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	431a      	orrs	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800870e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	6911      	ldr	r1, [r2, #16]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	68d2      	ldr	r2, [r2, #12]
 800871a:	4311      	orrs	r1, r2
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	6812      	ldr	r2, [r2, #0]
 8008720:	430b      	orrs	r3, r1
 8008722:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	695a      	ldr	r2, [r3, #20]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	431a      	orrs	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	430a      	orrs	r2, r1
 800873e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f042 0201 	orr.w	r2, r2, #1
 800874e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2220      	movs	r2, #32
 800875a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	000186a0 	.word	0x000186a0
 800877c:	001e847f 	.word	0x001e847f
 8008780:	003d08ff 	.word	0x003d08ff
 8008784:	431bde83 	.word	0x431bde83
 8008788:	10624dd3 	.word	0x10624dd3

0800878c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e021      	b.n	80087e2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2224      	movs	r2, #36	@ 0x24
 80087a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 0201 	bic.w	r2, r2, #1
 80087b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7ff f844 	bl	8007844 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
	...

080087ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b088      	sub	sp, #32
 80087f0:	af02      	add	r7, sp, #8
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	607a      	str	r2, [r7, #4]
 80087f6:	461a      	mov	r2, r3
 80087f8:	460b      	mov	r3, r1
 80087fa:	817b      	strh	r3, [r7, #10]
 80087fc:	4613      	mov	r3, r2
 80087fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008800:	f7ff f9a0 	bl	8007b44 <HAL_GetTick>
 8008804:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b20      	cmp	r3, #32
 8008810:	f040 80e0 	bne.w	80089d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	2319      	movs	r3, #25
 800881a:	2201      	movs	r2, #1
 800881c:	4970      	ldr	r1, [pc, #448]	@ (80089e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f000 fe5c 	bl	80094dc <I2C_WaitOnFlagUntilTimeout>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800882a:	2302      	movs	r3, #2
 800882c:	e0d3      	b.n	80089d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008834:	2b01      	cmp	r3, #1
 8008836:	d101      	bne.n	800883c <HAL_I2C_Master_Transmit+0x50>
 8008838:	2302      	movs	r3, #2
 800883a:	e0cc      	b.n	80089d6 <HAL_I2C_Master_Transmit+0x1ea>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0301 	and.w	r3, r3, #1
 800884e:	2b01      	cmp	r3, #1
 8008850:	d007      	beq.n	8008862 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f042 0201 	orr.w	r2, r2, #1
 8008860:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008870:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2221      	movs	r2, #33	@ 0x21
 8008876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2210      	movs	r2, #16
 800887e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	893a      	ldrh	r2, [r7, #8]
 8008892:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008898:	b29a      	uxth	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	4a50      	ldr	r2, [pc, #320]	@ (80089e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80088a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80088a4:	8979      	ldrh	r1, [r7, #10]
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	6a3a      	ldr	r2, [r7, #32]
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f000 fc16 	bl	80090dc <I2C_MasterRequestWrite>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e08d      	b.n	80089d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088ba:	2300      	movs	r3, #0
 80088bc:	613b      	str	r3, [r7, #16]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	613b      	str	r3, [r7, #16]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	613b      	str	r3, [r7, #16]
 80088ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80088d0:	e066      	b.n	80089a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	6a39      	ldr	r1, [r7, #32]
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 fed6 	bl	8009688 <I2C_WaitOnTXEFlagUntilTimeout>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00d      	beq.n	80088fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	d107      	bne.n	80088fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e06b      	b.n	80089d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008902:	781a      	ldrb	r2, [r3, #0]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800890e:	1c5a      	adds	r2, r3, #1
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008918:	b29b      	uxth	r3, r3
 800891a:	3b01      	subs	r3, #1
 800891c:	b29a      	uxth	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008926:	3b01      	subs	r3, #1
 8008928:	b29a      	uxth	r2, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	f003 0304 	and.w	r3, r3, #4
 8008938:	2b04      	cmp	r3, #4
 800893a:	d11b      	bne.n	8008974 <HAL_I2C_Master_Transmit+0x188>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008940:	2b00      	cmp	r3, #0
 8008942:	d017      	beq.n	8008974 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008948:	781a      	ldrb	r2, [r3, #0]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800895e:	b29b      	uxth	r3, r3
 8008960:	3b01      	subs	r3, #1
 8008962:	b29a      	uxth	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800896c:	3b01      	subs	r3, #1
 800896e:	b29a      	uxth	r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	6a39      	ldr	r1, [r7, #32]
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f000 fec6 	bl	800970a <I2C_WaitOnBTFFlagUntilTimeout>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00d      	beq.n	80089a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008988:	2b04      	cmp	r3, #4
 800898a:	d107      	bne.n	800899c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800899a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e01a      	b.n	80089d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d194      	bne.n	80088d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2220      	movs	r2, #32
 80089bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	e000      	b.n	80089d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80089d4:	2302      	movs	r3, #2
  }
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	00100002 	.word	0x00100002
 80089e4:	ffff0000 	.word	0xffff0000

080089e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b088      	sub	sp, #32
 80089ec:	af02      	add	r7, sp, #8
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	4608      	mov	r0, r1
 80089f2:	4611      	mov	r1, r2
 80089f4:	461a      	mov	r2, r3
 80089f6:	4603      	mov	r3, r0
 80089f8:	817b      	strh	r3, [r7, #10]
 80089fa:	460b      	mov	r3, r1
 80089fc:	813b      	strh	r3, [r7, #8]
 80089fe:	4613      	mov	r3, r2
 8008a00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008a02:	f7ff f89f 	bl	8007b44 <HAL_GetTick>
 8008a06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b20      	cmp	r3, #32
 8008a12:	f040 80d9 	bne.w	8008bc8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	2319      	movs	r3, #25
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	496d      	ldr	r1, [pc, #436]	@ (8008bd4 <HAL_I2C_Mem_Write+0x1ec>)
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f000 fd5b 	bl	80094dc <I2C_WaitOnFlagUntilTimeout>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d001      	beq.n	8008a30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	e0cc      	b.n	8008bca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d101      	bne.n	8008a3e <HAL_I2C_Mem_Write+0x56>
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	e0c5      	b.n	8008bca <HAL_I2C_Mem_Write+0x1e2>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d007      	beq.n	8008a64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f042 0201 	orr.w	r2, r2, #1
 8008a62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2221      	movs	r2, #33	@ 0x21
 8008a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2240      	movs	r2, #64	@ 0x40
 8008a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6a3a      	ldr	r2, [r7, #32]
 8008a8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008a94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	4a4d      	ldr	r2, [pc, #308]	@ (8008bd8 <HAL_I2C_Mem_Write+0x1f0>)
 8008aa4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008aa6:	88f8      	ldrh	r0, [r7, #6]
 8008aa8:	893a      	ldrh	r2, [r7, #8]
 8008aaa:	8979      	ldrh	r1, [r7, #10]
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	9301      	str	r3, [sp, #4]
 8008ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f000 fb92 	bl	80091e0 <I2C_RequestMemoryWrite>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d052      	beq.n	8008b68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e081      	b.n	8008bca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 fddc 	bl	8009688 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00d      	beq.n	8008af2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ada:	2b04      	cmp	r3, #4
 8008adc:	d107      	bne.n	8008aee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008aec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e06b      	b.n	8008bca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af6:	781a      	ldrb	r2, [r3, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	f003 0304 	and.w	r3, r3, #4
 8008b2c:	2b04      	cmp	r3, #4
 8008b2e:	d11b      	bne.n	8008b68 <HAL_I2C_Mem_Write+0x180>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d017      	beq.n	8008b68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b3c:	781a      	ldrb	r2, [r3, #0]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b48:	1c5a      	adds	r2, r3, #1
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b52:	3b01      	subs	r3, #1
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	3b01      	subs	r3, #1
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1aa      	bne.n	8008ac6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 fdc8 	bl	800970a <I2C_WaitOnBTFFlagUntilTimeout>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00d      	beq.n	8008b9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	d107      	bne.n	8008b98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e016      	b.n	8008bca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008baa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2220      	movs	r2, #32
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	e000      	b.n	8008bca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008bc8:	2302      	movs	r3, #2
  }
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3718      	adds	r7, #24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	00100002 	.word	0x00100002
 8008bd8:	ffff0000 	.word	0xffff0000

08008bdc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b08c      	sub	sp, #48	@ 0x30
 8008be0:	af02      	add	r7, sp, #8
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	4608      	mov	r0, r1
 8008be6:	4611      	mov	r1, r2
 8008be8:	461a      	mov	r2, r3
 8008bea:	4603      	mov	r3, r0
 8008bec:	817b      	strh	r3, [r7, #10]
 8008bee:	460b      	mov	r3, r1
 8008bf0:	813b      	strh	r3, [r7, #8]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008bfa:	f7fe ffa3 	bl	8007b44 <HAL_GetTick>
 8008bfe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b20      	cmp	r3, #32
 8008c0a:	f040 8244 	bne.w	8009096 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	2319      	movs	r3, #25
 8008c14:	2201      	movs	r2, #1
 8008c16:	4982      	ldr	r1, [pc, #520]	@ (8008e20 <HAL_I2C_Mem_Read+0x244>)
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f000 fc5f 	bl	80094dc <I2C_WaitOnFlagUntilTimeout>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d001      	beq.n	8008c28 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8008c24:	2302      	movs	r3, #2
 8008c26:	e237      	b.n	8009098 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d101      	bne.n	8008c36 <HAL_I2C_Mem_Read+0x5a>
 8008c32:	2302      	movs	r3, #2
 8008c34:	e230      	b.n	8009098 <HAL_I2C_Mem_Read+0x4bc>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d007      	beq.n	8008c5c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f042 0201 	orr.w	r2, r2, #1
 8008c5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2222      	movs	r2, #34	@ 0x22
 8008c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2240      	movs	r2, #64	@ 0x40
 8008c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	4a62      	ldr	r2, [pc, #392]	@ (8008e24 <HAL_I2C_Mem_Read+0x248>)
 8008c9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008c9e:	88f8      	ldrh	r0, [r7, #6]
 8008ca0:	893a      	ldrh	r2, [r7, #8]
 8008ca2:	8979      	ldrh	r1, [r7, #10]
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	4603      	mov	r3, r0
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f000 fb2c 	bl	800930c <I2C_RequestMemoryRead>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e1ec      	b.n	8009098 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d113      	bne.n	8008cee <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	61fb      	str	r3, [r7, #28]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	695b      	ldr	r3, [r3, #20]
 8008cd0:	61fb      	str	r3, [r7, #28]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	61fb      	str	r3, [r7, #28]
 8008cda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	e1c0      	b.n	8009070 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d11e      	bne.n	8008d34 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d06:	b672      	cpsid	i
}
 8008d08:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	61bb      	str	r3, [r7, #24]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	695b      	ldr	r3, [r3, #20]
 8008d14:	61bb      	str	r3, [r7, #24]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	699b      	ldr	r3, [r3, #24]
 8008d1c:	61bb      	str	r3, [r7, #24]
 8008d1e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008d30:	b662      	cpsie	i
}
 8008d32:	e035      	b.n	8008da0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d11e      	bne.n	8008d7a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d4c:	b672      	cpsid	i
}
 8008d4e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d50:	2300      	movs	r3, #0
 8008d52:	617b      	str	r3, [r7, #20]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	617b      	str	r3, [r7, #20]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	617b      	str	r3, [r7, #20]
 8008d64:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008d76:	b662      	cpsie	i
}
 8008d78:	e012      	b.n	8008da0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008d88:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	613b      	str	r3, [r7, #16]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	613b      	str	r3, [r7, #16]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	699b      	ldr	r3, [r3, #24]
 8008d9c:	613b      	str	r3, [r7, #16]
 8008d9e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008da0:	e166      	b.n	8009070 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	f200 811f 	bhi.w	8008fea <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d123      	bne.n	8008dfc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008db6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f000 fce7 	bl	800978c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e167      	b.n	8009098 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	691a      	ldr	r2, [r3, #16]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd2:	b2d2      	uxtb	r2, r2
 8008dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dda:	1c5a      	adds	r2, r3, #1
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008de4:	3b01      	subs	r3, #1
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	3b01      	subs	r3, #1
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008dfa:	e139      	b.n	8009070 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d152      	bne.n	8008eaa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	4906      	ldr	r1, [pc, #24]	@ (8008e28 <HAL_I2C_Mem_Read+0x24c>)
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f000 fb64 	bl	80094dc <I2C_WaitOnFlagUntilTimeout>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d008      	beq.n	8008e2c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e13c      	b.n	8009098 <HAL_I2C_Mem_Read+0x4bc>
 8008e1e:	bf00      	nop
 8008e20:	00100002 	.word	0x00100002
 8008e24:	ffff0000 	.word	0xffff0000
 8008e28:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008e2c:	b672      	cpsid	i
}
 8008e2e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	691a      	ldr	r2, [r3, #16]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e4a:	b2d2      	uxtb	r2, r2
 8008e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e52:	1c5a      	adds	r2, r3, #1
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008e72:	b662      	cpsie	i
}
 8008e74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	691a      	ldr	r2, [r3, #16]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e80:	b2d2      	uxtb	r2, r2
 8008e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e88:	1c5a      	adds	r2, r3, #1
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e92:	3b01      	subs	r3, #1
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008ea8:	e0e2      	b.n	8009070 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	497b      	ldr	r1, [pc, #492]	@ (80090a0 <HAL_I2C_Mem_Read+0x4c4>)
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f000 fb11 	bl	80094dc <I2C_WaitOnFlagUntilTimeout>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e0e9      	b.n	8009098 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ed2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ed4:	b672      	cpsid	i
}
 8008ed6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	691a      	ldr	r2, [r3, #16]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ee2:	b2d2      	uxtb	r2, r2
 8008ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eea:	1c5a      	adds	r2, r3, #1
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	3b01      	subs	r3, #1
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008f0a:	4b66      	ldr	r3, [pc, #408]	@ (80090a4 <HAL_I2C_Mem_Read+0x4c8>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	08db      	lsrs	r3, r3, #3
 8008f10:	4a65      	ldr	r2, [pc, #404]	@ (80090a8 <HAL_I2C_Mem_Read+0x4cc>)
 8008f12:	fba2 2303 	umull	r2, r3, r2, r3
 8008f16:	0a1a      	lsrs	r2, r3, #8
 8008f18:	4613      	mov	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	4413      	add	r3, r2
 8008f1e:	00da      	lsls	r2, r3, #3
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	3b01      	subs	r3, #1
 8008f28:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d118      	bne.n	8008f62 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2220      	movs	r2, #32
 8008f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f4a:	f043 0220 	orr.w	r2, r3, #32
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008f52:	b662      	cpsie	i
}
 8008f54:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e09a      	b.n	8009098 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	f003 0304 	and.w	r3, r3, #4
 8008f6c:	2b04      	cmp	r3, #4
 8008f6e:	d1d9      	bne.n	8008f24 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	691a      	ldr	r2, [r3, #16]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f8a:	b2d2      	uxtb	r2, r2
 8008f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f92:	1c5a      	adds	r2, r3, #1
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	3b01      	subs	r3, #1
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008fb2:	b662      	cpsie	i
}
 8008fb4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	691a      	ldr	r2, [r3, #16]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc0:	b2d2      	uxtb	r2, r2
 8008fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc8:	1c5a      	adds	r2, r3, #1
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008fe8:	e042      	b.n	8009070 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 fbcc 	bl	800978c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e04c      	b.n	8009098 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	691a      	ldr	r2, [r3, #16]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009008:	b2d2      	uxtb	r2, r2
 800900a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009010:	1c5a      	adds	r2, r3, #1
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800901a:	3b01      	subs	r3, #1
 800901c:	b29a      	uxth	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009026:	b29b      	uxth	r3, r3
 8009028:	3b01      	subs	r3, #1
 800902a:	b29a      	uxth	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	f003 0304 	and.w	r3, r3, #4
 800903a:	2b04      	cmp	r3, #4
 800903c:	d118      	bne.n	8009070 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	691a      	ldr	r2, [r3, #16]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009048:	b2d2      	uxtb	r2, r2
 800904a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800905a:	3b01      	subs	r3, #1
 800905c:	b29a      	uxth	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009066:	b29b      	uxth	r3, r3
 8009068:	3b01      	subs	r3, #1
 800906a:	b29a      	uxth	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009074:	2b00      	cmp	r3, #0
 8009076:	f47f ae94 	bne.w	8008da2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2220      	movs	r2, #32
 800907e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	e000      	b.n	8009098 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009096:	2302      	movs	r3, #2
  }
}
 8009098:	4618      	mov	r0, r3
 800909a:	3728      	adds	r7, #40	@ 0x28
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	00010004 	.word	0x00010004
 80090a4:	20000944 	.word	0x20000944
 80090a8:	14f8b589 	.word	0x14f8b589

080090ac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090ba:	b2db      	uxtb	r3, r3
}
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr

080090c6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b083      	sub	sp, #12
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	370c      	adds	r7, #12
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bc80      	pop	{r7}
 80090da:	4770      	bx	lr

080090dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b088      	sub	sp, #32
 80090e0:	af02      	add	r7, sp, #8
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	607a      	str	r2, [r7, #4]
 80090e6:	603b      	str	r3, [r7, #0]
 80090e8:	460b      	mov	r3, r1
 80090ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	2b08      	cmp	r3, #8
 80090f6:	d006      	beq.n	8009106 <I2C_MasterRequestWrite+0x2a>
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d003      	beq.n	8009106 <I2C_MasterRequestWrite+0x2a>
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009104:	d108      	bne.n	8009118 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009114:	601a      	str	r2, [r3, #0]
 8009116:	e00b      	b.n	8009130 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800911c:	2b12      	cmp	r3, #18
 800911e:	d107      	bne.n	8009130 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800912e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f000 f9cd 	bl	80094dc <I2C_WaitOnFlagUntilTimeout>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00d      	beq.n	8009164 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009156:	d103      	bne.n	8009160 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800915e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009160:	2303      	movs	r3, #3
 8009162:	e035      	b.n	80091d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800916c:	d108      	bne.n	8009180 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800916e:	897b      	ldrh	r3, [r7, #10]
 8009170:	b2db      	uxtb	r3, r3
 8009172:	461a      	mov	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800917c:	611a      	str	r2, [r3, #16]
 800917e:	e01b      	b.n	80091b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009180:	897b      	ldrh	r3, [r7, #10]
 8009182:	11db      	asrs	r3, r3, #7
 8009184:	b2db      	uxtb	r3, r3
 8009186:	f003 0306 	and.w	r3, r3, #6
 800918a:	b2db      	uxtb	r3, r3
 800918c:	f063 030f 	orn	r3, r3, #15
 8009190:	b2da      	uxtb	r2, r3
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	490e      	ldr	r1, [pc, #56]	@ (80091d8 <I2C_MasterRequestWrite+0xfc>)
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 f9f3 	bl	800958a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e010      	b.n	80091d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80091ae:	897b      	ldrh	r3, [r7, #10]
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	4907      	ldr	r1, [pc, #28]	@ (80091dc <I2C_MasterRequestWrite+0x100>)
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f000 f9e3 	bl	800958a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e000      	b.n	80091d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3718      	adds	r7, #24
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	00010008 	.word	0x00010008
 80091dc:	00010002 	.word	0x00010002

080091e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b088      	sub	sp, #32
 80091e4:	af02      	add	r7, sp, #8
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	4608      	mov	r0, r1
 80091ea:	4611      	mov	r1, r2
 80091ec:	461a      	mov	r2, r3
 80091ee:	4603      	mov	r3, r0
 80091f0:	817b      	strh	r3, [r7, #10]
 80091f2:	460b      	mov	r3, r1
 80091f4:	813b      	strh	r3, [r7, #8]
 80091f6:	4613      	mov	r3, r2
 80091f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009208:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800920a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	6a3b      	ldr	r3, [r7, #32]
 8009210:	2200      	movs	r2, #0
 8009212:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f000 f960 	bl	80094dc <I2C_WaitOnFlagUntilTimeout>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00d      	beq.n	800923e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800922c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009230:	d103      	bne.n	800923a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009238:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800923a:	2303      	movs	r3, #3
 800923c:	e05f      	b.n	80092fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800923e:	897b      	ldrh	r3, [r7, #10]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	461a      	mov	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800924c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800924e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009250:	6a3a      	ldr	r2, [r7, #32]
 8009252:	492d      	ldr	r1, [pc, #180]	@ (8009308 <I2C_RequestMemoryWrite+0x128>)
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f000 f998 	bl	800958a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d001      	beq.n	8009264 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	e04c      	b.n	80092fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009264:	2300      	movs	r3, #0
 8009266:	617b      	str	r3, [r7, #20]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	617b      	str	r3, [r7, #20]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	617b      	str	r3, [r7, #20]
 8009278:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800927a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800927c:	6a39      	ldr	r1, [r7, #32]
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 fa02 	bl	8009688 <I2C_WaitOnTXEFlagUntilTimeout>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00d      	beq.n	80092a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800928e:	2b04      	cmp	r3, #4
 8009290:	d107      	bne.n	80092a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e02b      	b.n	80092fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80092a6:	88fb      	ldrh	r3, [r7, #6]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d105      	bne.n	80092b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80092ac:	893b      	ldrh	r3, [r7, #8]
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	611a      	str	r2, [r3, #16]
 80092b6:	e021      	b.n	80092fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80092b8:	893b      	ldrh	r3, [r7, #8]
 80092ba:	0a1b      	lsrs	r3, r3, #8
 80092bc:	b29b      	uxth	r3, r3
 80092be:	b2da      	uxtb	r2, r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092c8:	6a39      	ldr	r1, [r7, #32]
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f000 f9dc 	bl	8009688 <I2C_WaitOnTXEFlagUntilTimeout>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00d      	beq.n	80092f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092da:	2b04      	cmp	r3, #4
 80092dc:	d107      	bne.n	80092ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	e005      	b.n	80092fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80092f2:	893b      	ldrh	r3, [r7, #8]
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3718      	adds	r7, #24
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	00010002 	.word	0x00010002

0800930c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b088      	sub	sp, #32
 8009310:	af02      	add	r7, sp, #8
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	4608      	mov	r0, r1
 8009316:	4611      	mov	r1, r2
 8009318:	461a      	mov	r2, r3
 800931a:	4603      	mov	r3, r0
 800931c:	817b      	strh	r3, [r7, #10]
 800931e:	460b      	mov	r3, r1
 8009320:	813b      	strh	r3, [r7, #8]
 8009322:	4613      	mov	r3, r2
 8009324:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009334:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009344:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	2200      	movs	r2, #0
 800934e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 f8c2 	bl	80094dc <I2C_WaitOnFlagUntilTimeout>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00d      	beq.n	800937a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009368:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800936c:	d103      	bne.n	8009376 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009374:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009376:	2303      	movs	r3, #3
 8009378:	e0aa      	b.n	80094d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800937a:	897b      	ldrh	r3, [r7, #10]
 800937c:	b2db      	uxtb	r3, r3
 800937e:	461a      	mov	r2, r3
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009388:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800938a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938c:	6a3a      	ldr	r2, [r7, #32]
 800938e:	4952      	ldr	r1, [pc, #328]	@ (80094d8 <I2C_RequestMemoryRead+0x1cc>)
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f000 f8fa 	bl	800958a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	e097      	b.n	80094d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093a0:	2300      	movs	r3, #0
 80093a2:	617b      	str	r3, [r7, #20]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	617b      	str	r3, [r7, #20]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	617b      	str	r3, [r7, #20]
 80093b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093b8:	6a39      	ldr	r1, [r7, #32]
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f000 f964 	bl	8009688 <I2C_WaitOnTXEFlagUntilTimeout>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00d      	beq.n	80093e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	d107      	bne.n	80093de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e076      	b.n	80094d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80093e2:	88fb      	ldrh	r3, [r7, #6]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d105      	bne.n	80093f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80093e8:	893b      	ldrh	r3, [r7, #8]
 80093ea:	b2da      	uxtb	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	611a      	str	r2, [r3, #16]
 80093f2:	e021      	b.n	8009438 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80093f4:	893b      	ldrh	r3, [r7, #8]
 80093f6:	0a1b      	lsrs	r3, r3, #8
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009404:	6a39      	ldr	r1, [r7, #32]
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f000 f93e 	bl	8009688 <I2C_WaitOnTXEFlagUntilTimeout>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00d      	beq.n	800942e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009416:	2b04      	cmp	r3, #4
 8009418:	d107      	bne.n	800942a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009428:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e050      	b.n	80094d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800942e:	893b      	ldrh	r3, [r7, #8]
 8009430:	b2da      	uxtb	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800943a:	6a39      	ldr	r1, [r7, #32]
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f000 f923 	bl	8009688 <I2C_WaitOnTXEFlagUntilTimeout>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00d      	beq.n	8009464 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800944c:	2b04      	cmp	r3, #4
 800944e:	d107      	bne.n	8009460 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800945e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	e035      	b.n	80094d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009472:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	2200      	movs	r2, #0
 800947c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f000 f82b 	bl	80094dc <I2C_WaitOnFlagUntilTimeout>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00d      	beq.n	80094a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800949a:	d103      	bne.n	80094a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e013      	b.n	80094d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80094a8:	897b      	ldrh	r3, [r7, #10]
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	f043 0301 	orr.w	r3, r3, #1
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80094b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ba:	6a3a      	ldr	r2, [r7, #32]
 80094bc:	4906      	ldr	r1, [pc, #24]	@ (80094d8 <I2C_RequestMemoryRead+0x1cc>)
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f000 f863 	bl	800958a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e000      	b.n	80094d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3718      	adds	r7, #24
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	00010002 	.word	0x00010002

080094dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	603b      	str	r3, [r7, #0]
 80094e8:	4613      	mov	r3, r2
 80094ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094ec:	e025      	b.n	800953a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f4:	d021      	beq.n	800953a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094f6:	f7fe fb25 	bl	8007b44 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	429a      	cmp	r2, r3
 8009504:	d302      	bcc.n	800950c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d116      	bne.n	800953a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2220      	movs	r2, #32
 8009516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009526:	f043 0220 	orr.w	r2, r3, #32
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e023      	b.n	8009582 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	0c1b      	lsrs	r3, r3, #16
 800953e:	b2db      	uxtb	r3, r3
 8009540:	2b01      	cmp	r3, #1
 8009542:	d10d      	bne.n	8009560 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	43da      	mvns	r2, r3
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	4013      	ands	r3, r2
 8009550:	b29b      	uxth	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	bf0c      	ite	eq
 8009556:	2301      	moveq	r3, #1
 8009558:	2300      	movne	r3, #0
 800955a:	b2db      	uxtb	r3, r3
 800955c:	461a      	mov	r2, r3
 800955e:	e00c      	b.n	800957a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	43da      	mvns	r2, r3
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	4013      	ands	r3, r2
 800956c:	b29b      	uxth	r3, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	bf0c      	ite	eq
 8009572:	2301      	moveq	r3, #1
 8009574:	2300      	movne	r3, #0
 8009576:	b2db      	uxtb	r3, r3
 8009578:	461a      	mov	r2, r3
 800957a:	79fb      	ldrb	r3, [r7, #7]
 800957c:	429a      	cmp	r2, r3
 800957e:	d0b6      	beq.n	80094ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	60f8      	str	r0, [r7, #12]
 8009592:	60b9      	str	r1, [r7, #8]
 8009594:	607a      	str	r2, [r7, #4]
 8009596:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009598:	e051      	b.n	800963e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	695b      	ldr	r3, [r3, #20]
 80095a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095a8:	d123      	bne.n	80095f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80095c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2220      	movs	r2, #32
 80095ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095de:	f043 0204 	orr.w	r2, r3, #4
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e046      	b.n	8009680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f8:	d021      	beq.n	800963e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095fa:	f7fe faa3 	bl	8007b44 <HAL_GetTick>
 80095fe:	4602      	mov	r2, r0
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	429a      	cmp	r2, r3
 8009608:	d302      	bcc.n	8009610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d116      	bne.n	800963e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2220      	movs	r2, #32
 800961a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800962a:	f043 0220 	orr.w	r2, r3, #32
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e020      	b.n	8009680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	0c1b      	lsrs	r3, r3, #16
 8009642:	b2db      	uxtb	r3, r3
 8009644:	2b01      	cmp	r3, #1
 8009646:	d10c      	bne.n	8009662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	43da      	mvns	r2, r3
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	4013      	ands	r3, r2
 8009654:	b29b      	uxth	r3, r3
 8009656:	2b00      	cmp	r3, #0
 8009658:	bf14      	ite	ne
 800965a:	2301      	movne	r3, #1
 800965c:	2300      	moveq	r3, #0
 800965e:	b2db      	uxtb	r3, r3
 8009660:	e00b      	b.n	800967a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	43da      	mvns	r2, r3
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	4013      	ands	r3, r2
 800966e:	b29b      	uxth	r3, r3
 8009670:	2b00      	cmp	r3, #0
 8009672:	bf14      	ite	ne
 8009674:	2301      	movne	r3, #1
 8009676:	2300      	moveq	r3, #0
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b00      	cmp	r3, #0
 800967c:	d18d      	bne.n	800959a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009694:	e02d      	b.n	80096f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 f8ce 	bl	8009838 <I2C_IsAcknowledgeFailed>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e02d      	b.n	8009702 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ac:	d021      	beq.n	80096f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ae:	f7fe fa49 	bl	8007b44 <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d302      	bcc.n	80096c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d116      	bne.n	80096f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2220      	movs	r2, #32
 80096ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096de:	f043 0220 	orr.w	r2, r3, #32
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e007      	b.n	8009702 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	695b      	ldr	r3, [r3, #20]
 80096f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096fc:	2b80      	cmp	r3, #128	@ 0x80
 80096fe:	d1ca      	bne.n	8009696 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b084      	sub	sp, #16
 800970e:	af00      	add	r7, sp, #0
 8009710:	60f8      	str	r0, [r7, #12]
 8009712:	60b9      	str	r1, [r7, #8]
 8009714:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009716:	e02d      	b.n	8009774 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	f000 f88d 	bl	8009838 <I2C_IsAcknowledgeFailed>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d001      	beq.n	8009728 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e02d      	b.n	8009784 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972e:	d021      	beq.n	8009774 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009730:	f7fe fa08 	bl	8007b44 <HAL_GetTick>
 8009734:	4602      	mov	r2, r0
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	429a      	cmp	r2, r3
 800973e:	d302      	bcc.n	8009746 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d116      	bne.n	8009774 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2220      	movs	r2, #32
 8009750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009760:	f043 0220 	orr.w	r2, r3, #32
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e007      	b.n	8009784 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	f003 0304 	and.w	r3, r3, #4
 800977e:	2b04      	cmp	r3, #4
 8009780:	d1ca      	bne.n	8009718 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009798:	e042      	b.n	8009820 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	695b      	ldr	r3, [r3, #20]
 80097a0:	f003 0310 	and.w	r3, r3, #16
 80097a4:	2b10      	cmp	r3, #16
 80097a6:	d119      	bne.n	80097dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f06f 0210 	mvn.w	r2, #16
 80097b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2220      	movs	r2, #32
 80097bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	e029      	b.n	8009830 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097dc:	f7fe f9b2 	bl	8007b44 <HAL_GetTick>
 80097e0:	4602      	mov	r2, r0
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	68ba      	ldr	r2, [r7, #8]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d302      	bcc.n	80097f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d116      	bne.n	8009820 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2200      	movs	r2, #0
 80097f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800980c:	f043 0220 	orr.w	r2, r3, #32
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e007      	b.n	8009830 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	695b      	ldr	r3, [r3, #20]
 8009826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800982a:	2b40      	cmp	r3, #64	@ 0x40
 800982c:	d1b5      	bne.n	800979a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	695b      	ldr	r3, [r3, #20]
 8009846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800984a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800984e:	d11b      	bne.n	8009888 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009858:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2220      	movs	r2, #32
 8009864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009874:	f043 0204 	orr.w	r2, r3, #4
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e000      	b.n	800988a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	bc80      	pop	{r7}
 8009892:	4770      	bx	lr

08009894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d101      	bne.n	80098a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e272      	b.n	8009d8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 8087 	beq.w	80099c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80098b4:	4b92      	ldr	r3, [pc, #584]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	f003 030c 	and.w	r3, r3, #12
 80098bc:	2b04      	cmp	r3, #4
 80098be:	d00c      	beq.n	80098da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80098c0:	4b8f      	ldr	r3, [pc, #572]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	f003 030c 	and.w	r3, r3, #12
 80098c8:	2b08      	cmp	r3, #8
 80098ca:	d112      	bne.n	80098f2 <HAL_RCC_OscConfig+0x5e>
 80098cc:	4b8c      	ldr	r3, [pc, #560]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80098d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098d8:	d10b      	bne.n	80098f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098da:	4b89      	ldr	r3, [pc, #548]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d06c      	beq.n	80099c0 <HAL_RCC_OscConfig+0x12c>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d168      	bne.n	80099c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e24c      	b.n	8009d8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098fa:	d106      	bne.n	800990a <HAL_RCC_OscConfig+0x76>
 80098fc:	4b80      	ldr	r3, [pc, #512]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a7f      	ldr	r2, [pc, #508]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 8009902:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009906:	6013      	str	r3, [r2, #0]
 8009908:	e02e      	b.n	8009968 <HAL_RCC_OscConfig+0xd4>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10c      	bne.n	800992c <HAL_RCC_OscConfig+0x98>
 8009912:	4b7b      	ldr	r3, [pc, #492]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a7a      	ldr	r2, [pc, #488]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 8009918:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800991c:	6013      	str	r3, [r2, #0]
 800991e:	4b78      	ldr	r3, [pc, #480]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a77      	ldr	r2, [pc, #476]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 8009924:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009928:	6013      	str	r3, [r2, #0]
 800992a:	e01d      	b.n	8009968 <HAL_RCC_OscConfig+0xd4>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009934:	d10c      	bne.n	8009950 <HAL_RCC_OscConfig+0xbc>
 8009936:	4b72      	ldr	r3, [pc, #456]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a71      	ldr	r2, [pc, #452]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 800993c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009940:	6013      	str	r3, [r2, #0]
 8009942:	4b6f      	ldr	r3, [pc, #444]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a6e      	ldr	r2, [pc, #440]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 8009948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800994c:	6013      	str	r3, [r2, #0]
 800994e:	e00b      	b.n	8009968 <HAL_RCC_OscConfig+0xd4>
 8009950:	4b6b      	ldr	r3, [pc, #428]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a6a      	ldr	r2, [pc, #424]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 8009956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800995a:	6013      	str	r3, [r2, #0]
 800995c:	4b68      	ldr	r3, [pc, #416]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a67      	ldr	r2, [pc, #412]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 8009962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009966:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d013      	beq.n	8009998 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009970:	f7fe f8e8 	bl	8007b44 <HAL_GetTick>
 8009974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009976:	e008      	b.n	800998a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009978:	f7fe f8e4 	bl	8007b44 <HAL_GetTick>
 800997c:	4602      	mov	r2, r0
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	2b64      	cmp	r3, #100	@ 0x64
 8009984:	d901      	bls.n	800998a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009986:	2303      	movs	r3, #3
 8009988:	e200      	b.n	8009d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800998a:	4b5d      	ldr	r3, [pc, #372]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009992:	2b00      	cmp	r3, #0
 8009994:	d0f0      	beq.n	8009978 <HAL_RCC_OscConfig+0xe4>
 8009996:	e014      	b.n	80099c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009998:	f7fe f8d4 	bl	8007b44 <HAL_GetTick>
 800999c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800999e:	e008      	b.n	80099b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099a0:	f7fe f8d0 	bl	8007b44 <HAL_GetTick>
 80099a4:	4602      	mov	r2, r0
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	2b64      	cmp	r3, #100	@ 0x64
 80099ac:	d901      	bls.n	80099b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80099ae:	2303      	movs	r3, #3
 80099b0:	e1ec      	b.n	8009d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80099b2:	4b53      	ldr	r3, [pc, #332]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1f0      	bne.n	80099a0 <HAL_RCC_OscConfig+0x10c>
 80099be:	e000      	b.n	80099c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 0302 	and.w	r3, r3, #2
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d063      	beq.n	8009a96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80099ce:	4b4c      	ldr	r3, [pc, #304]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	f003 030c 	and.w	r3, r3, #12
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00b      	beq.n	80099f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80099da:	4b49      	ldr	r3, [pc, #292]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	f003 030c 	and.w	r3, r3, #12
 80099e2:	2b08      	cmp	r3, #8
 80099e4:	d11c      	bne.n	8009a20 <HAL_RCC_OscConfig+0x18c>
 80099e6:	4b46      	ldr	r3, [pc, #280]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d116      	bne.n	8009a20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80099f2:	4b43      	ldr	r3, [pc, #268]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 0302 	and.w	r3, r3, #2
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d005      	beq.n	8009a0a <HAL_RCC_OscConfig+0x176>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d001      	beq.n	8009a0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e1c0      	b.n	8009d8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	00db      	lsls	r3, r3, #3
 8009a18:	4939      	ldr	r1, [pc, #228]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a1e:	e03a      	b.n	8009a96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d020      	beq.n	8009a6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009a28:	4b36      	ldr	r3, [pc, #216]	@ (8009b04 <HAL_RCC_OscConfig+0x270>)
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a2e:	f7fe f889 	bl	8007b44 <HAL_GetTick>
 8009a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a34:	e008      	b.n	8009a48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a36:	f7fe f885 	bl	8007b44 <HAL_GetTick>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d901      	bls.n	8009a48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e1a1      	b.n	8009d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a48:	4b2d      	ldr	r3, [pc, #180]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 0302 	and.w	r3, r3, #2
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d0f0      	beq.n	8009a36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a54:	4b2a      	ldr	r3, [pc, #168]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	00db      	lsls	r3, r3, #3
 8009a62:	4927      	ldr	r1, [pc, #156]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 8009a64:	4313      	orrs	r3, r2
 8009a66:	600b      	str	r3, [r1, #0]
 8009a68:	e015      	b.n	8009a96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a6a:	4b26      	ldr	r3, [pc, #152]	@ (8009b04 <HAL_RCC_OscConfig+0x270>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a70:	f7fe f868 	bl	8007b44 <HAL_GetTick>
 8009a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a76:	e008      	b.n	8009a8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a78:	f7fe f864 	bl	8007b44 <HAL_GetTick>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	d901      	bls.n	8009a8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009a86:	2303      	movs	r3, #3
 8009a88:	e180      	b.n	8009d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 0302 	and.w	r3, r3, #2
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1f0      	bne.n	8009a78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f003 0308 	and.w	r3, r3, #8
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d03a      	beq.n	8009b18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d019      	beq.n	8009ade <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009aaa:	4b17      	ldr	r3, [pc, #92]	@ (8009b08 <HAL_RCC_OscConfig+0x274>)
 8009aac:	2201      	movs	r2, #1
 8009aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ab0:	f7fe f848 	bl	8007b44 <HAL_GetTick>
 8009ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009ab6:	e008      	b.n	8009aca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ab8:	f7fe f844 	bl	8007b44 <HAL_GetTick>
 8009abc:	4602      	mov	r2, r0
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d901      	bls.n	8009aca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	e160      	b.n	8009d8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009aca:	4b0d      	ldr	r3, [pc, #52]	@ (8009b00 <HAL_RCC_OscConfig+0x26c>)
 8009acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ace:	f003 0302 	and.w	r3, r3, #2
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d0f0      	beq.n	8009ab8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8009ad6:	2001      	movs	r0, #1
 8009ad8:	f000 fad8 	bl	800a08c <RCC_Delay>
 8009adc:	e01c      	b.n	8009b18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ade:	4b0a      	ldr	r3, [pc, #40]	@ (8009b08 <HAL_RCC_OscConfig+0x274>)
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ae4:	f7fe f82e 	bl	8007b44 <HAL_GetTick>
 8009ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009aea:	e00f      	b.n	8009b0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009aec:	f7fe f82a 	bl	8007b44 <HAL_GetTick>
 8009af0:	4602      	mov	r2, r0
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d908      	bls.n	8009b0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009afa:	2303      	movs	r3, #3
 8009afc:	e146      	b.n	8009d8c <HAL_RCC_OscConfig+0x4f8>
 8009afe:	bf00      	nop
 8009b00:	40021000 	.word	0x40021000
 8009b04:	42420000 	.word	0x42420000
 8009b08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b0c:	4b92      	ldr	r3, [pc, #584]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b10:	f003 0302 	and.w	r3, r3, #2
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1e9      	bne.n	8009aec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0304 	and.w	r3, r3, #4
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f000 80a6 	beq.w	8009c72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b26:	2300      	movs	r3, #0
 8009b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b2a:	4b8b      	ldr	r3, [pc, #556]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009b2c:	69db      	ldr	r3, [r3, #28]
 8009b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d10d      	bne.n	8009b52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b36:	4b88      	ldr	r3, [pc, #544]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009b38:	69db      	ldr	r3, [r3, #28]
 8009b3a:	4a87      	ldr	r2, [pc, #540]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b40:	61d3      	str	r3, [r2, #28]
 8009b42:	4b85      	ldr	r3, [pc, #532]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009b44:	69db      	ldr	r3, [r3, #28]
 8009b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b4a:	60bb      	str	r3, [r7, #8]
 8009b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b52:	4b82      	ldr	r3, [pc, #520]	@ (8009d5c <HAL_RCC_OscConfig+0x4c8>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d118      	bne.n	8009b90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009b5e:	4b7f      	ldr	r3, [pc, #508]	@ (8009d5c <HAL_RCC_OscConfig+0x4c8>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a7e      	ldr	r2, [pc, #504]	@ (8009d5c <HAL_RCC_OscConfig+0x4c8>)
 8009b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009b6a:	f7fd ffeb 	bl	8007b44 <HAL_GetTick>
 8009b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b70:	e008      	b.n	8009b84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b72:	f7fd ffe7 	bl	8007b44 <HAL_GetTick>
 8009b76:	4602      	mov	r2, r0
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	2b64      	cmp	r3, #100	@ 0x64
 8009b7e:	d901      	bls.n	8009b84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009b80:	2303      	movs	r3, #3
 8009b82:	e103      	b.n	8009d8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b84:	4b75      	ldr	r3, [pc, #468]	@ (8009d5c <HAL_RCC_OscConfig+0x4c8>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d0f0      	beq.n	8009b72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d106      	bne.n	8009ba6 <HAL_RCC_OscConfig+0x312>
 8009b98:	4b6f      	ldr	r3, [pc, #444]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009b9a:	6a1b      	ldr	r3, [r3, #32]
 8009b9c:	4a6e      	ldr	r2, [pc, #440]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009b9e:	f043 0301 	orr.w	r3, r3, #1
 8009ba2:	6213      	str	r3, [r2, #32]
 8009ba4:	e02d      	b.n	8009c02 <HAL_RCC_OscConfig+0x36e>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10c      	bne.n	8009bc8 <HAL_RCC_OscConfig+0x334>
 8009bae:	4b6a      	ldr	r3, [pc, #424]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	4a69      	ldr	r2, [pc, #420]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009bb4:	f023 0301 	bic.w	r3, r3, #1
 8009bb8:	6213      	str	r3, [r2, #32]
 8009bba:	4b67      	ldr	r3, [pc, #412]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	4a66      	ldr	r2, [pc, #408]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009bc0:	f023 0304 	bic.w	r3, r3, #4
 8009bc4:	6213      	str	r3, [r2, #32]
 8009bc6:	e01c      	b.n	8009c02 <HAL_RCC_OscConfig+0x36e>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	2b05      	cmp	r3, #5
 8009bce:	d10c      	bne.n	8009bea <HAL_RCC_OscConfig+0x356>
 8009bd0:	4b61      	ldr	r3, [pc, #388]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009bd2:	6a1b      	ldr	r3, [r3, #32]
 8009bd4:	4a60      	ldr	r2, [pc, #384]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009bd6:	f043 0304 	orr.w	r3, r3, #4
 8009bda:	6213      	str	r3, [r2, #32]
 8009bdc:	4b5e      	ldr	r3, [pc, #376]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009bde:	6a1b      	ldr	r3, [r3, #32]
 8009be0:	4a5d      	ldr	r2, [pc, #372]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009be2:	f043 0301 	orr.w	r3, r3, #1
 8009be6:	6213      	str	r3, [r2, #32]
 8009be8:	e00b      	b.n	8009c02 <HAL_RCC_OscConfig+0x36e>
 8009bea:	4b5b      	ldr	r3, [pc, #364]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009bec:	6a1b      	ldr	r3, [r3, #32]
 8009bee:	4a5a      	ldr	r2, [pc, #360]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009bf0:	f023 0301 	bic.w	r3, r3, #1
 8009bf4:	6213      	str	r3, [r2, #32]
 8009bf6:	4b58      	ldr	r3, [pc, #352]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009bf8:	6a1b      	ldr	r3, [r3, #32]
 8009bfa:	4a57      	ldr	r2, [pc, #348]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009bfc:	f023 0304 	bic.w	r3, r3, #4
 8009c00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d015      	beq.n	8009c36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c0a:	f7fd ff9b 	bl	8007b44 <HAL_GetTick>
 8009c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c10:	e00a      	b.n	8009c28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c12:	f7fd ff97 	bl	8007b44 <HAL_GetTick>
 8009c16:	4602      	mov	r2, r0
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d901      	bls.n	8009c28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009c24:	2303      	movs	r3, #3
 8009c26:	e0b1      	b.n	8009d8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c28:	4b4b      	ldr	r3, [pc, #300]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009c2a:	6a1b      	ldr	r3, [r3, #32]
 8009c2c:	f003 0302 	and.w	r3, r3, #2
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d0ee      	beq.n	8009c12 <HAL_RCC_OscConfig+0x37e>
 8009c34:	e014      	b.n	8009c60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c36:	f7fd ff85 	bl	8007b44 <HAL_GetTick>
 8009c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c3c:	e00a      	b.n	8009c54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c3e:	f7fd ff81 	bl	8007b44 <HAL_GetTick>
 8009c42:	4602      	mov	r2, r0
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d901      	bls.n	8009c54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009c50:	2303      	movs	r3, #3
 8009c52:	e09b      	b.n	8009d8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c54:	4b40      	ldr	r3, [pc, #256]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009c56:	6a1b      	ldr	r3, [r3, #32]
 8009c58:	f003 0302 	and.w	r3, r3, #2
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1ee      	bne.n	8009c3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009c60:	7dfb      	ldrb	r3, [r7, #23]
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d105      	bne.n	8009c72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c66:	4b3c      	ldr	r3, [pc, #240]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009c68:	69db      	ldr	r3, [r3, #28]
 8009c6a:	4a3b      	ldr	r2, [pc, #236]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009c6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	69db      	ldr	r3, [r3, #28]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f000 8087 	beq.w	8009d8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009c7c:	4b36      	ldr	r3, [pc, #216]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	f003 030c 	and.w	r3, r3, #12
 8009c84:	2b08      	cmp	r3, #8
 8009c86:	d061      	beq.n	8009d4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	69db      	ldr	r3, [r3, #28]
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d146      	bne.n	8009d1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c90:	4b33      	ldr	r3, [pc, #204]	@ (8009d60 <HAL_RCC_OscConfig+0x4cc>)
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c96:	f7fd ff55 	bl	8007b44 <HAL_GetTick>
 8009c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009c9c:	e008      	b.n	8009cb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c9e:	f7fd ff51 	bl	8007b44 <HAL_GetTick>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d901      	bls.n	8009cb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e06d      	b.n	8009d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009cb0:	4b29      	ldr	r3, [pc, #164]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1f0      	bne.n	8009c9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6a1b      	ldr	r3, [r3, #32]
 8009cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cc4:	d108      	bne.n	8009cd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009cc6:	4b24      	ldr	r3, [pc, #144]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	4921      	ldr	r1, [pc, #132]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a19      	ldr	r1, [r3, #32]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce8:	430b      	orrs	r3, r1
 8009cea:	491b      	ldr	r1, [pc, #108]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009cec:	4313      	orrs	r3, r2
 8009cee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8009d60 <HAL_RCC_OscConfig+0x4cc>)
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cf6:	f7fd ff25 	bl	8007b44 <HAL_GetTick>
 8009cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009cfc:	e008      	b.n	8009d10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cfe:	f7fd ff21 	bl	8007b44 <HAL_GetTick>
 8009d02:	4602      	mov	r2, r0
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	1ad3      	subs	r3, r2, r3
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	d901      	bls.n	8009d10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	e03d      	b.n	8009d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009d10:	4b11      	ldr	r3, [pc, #68]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d0f0      	beq.n	8009cfe <HAL_RCC_OscConfig+0x46a>
 8009d1c:	e035      	b.n	8009d8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d1e:	4b10      	ldr	r3, [pc, #64]	@ (8009d60 <HAL_RCC_OscConfig+0x4cc>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d24:	f7fd ff0e 	bl	8007b44 <HAL_GetTick>
 8009d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009d2a:	e008      	b.n	8009d3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d2c:	f7fd ff0a 	bl	8007b44 <HAL_GetTick>
 8009d30:	4602      	mov	r2, r0
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	1ad3      	subs	r3, r2, r3
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d901      	bls.n	8009d3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	e026      	b.n	8009d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009d3e:	4b06      	ldr	r3, [pc, #24]	@ (8009d58 <HAL_RCC_OscConfig+0x4c4>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1f0      	bne.n	8009d2c <HAL_RCC_OscConfig+0x498>
 8009d4a:	e01e      	b.n	8009d8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	69db      	ldr	r3, [r3, #28]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d107      	bne.n	8009d64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e019      	b.n	8009d8c <HAL_RCC_OscConfig+0x4f8>
 8009d58:	40021000 	.word	0x40021000
 8009d5c:	40007000 	.word	0x40007000
 8009d60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009d64:	4b0b      	ldr	r3, [pc, #44]	@ (8009d94 <HAL_RCC_OscConfig+0x500>)
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a1b      	ldr	r3, [r3, #32]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d106      	bne.n	8009d86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d001      	beq.n	8009d8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e000      	b.n	8009d8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	40021000 	.word	0x40021000

08009d98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d101      	bne.n	8009dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e0d0      	b.n	8009f4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009dac:	4b6a      	ldr	r3, [pc, #424]	@ (8009f58 <HAL_RCC_ClockConfig+0x1c0>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0307 	and.w	r3, r3, #7
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d910      	bls.n	8009ddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dba:	4b67      	ldr	r3, [pc, #412]	@ (8009f58 <HAL_RCC_ClockConfig+0x1c0>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f023 0207 	bic.w	r2, r3, #7
 8009dc2:	4965      	ldr	r1, [pc, #404]	@ (8009f58 <HAL_RCC_ClockConfig+0x1c0>)
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009dca:	4b63      	ldr	r3, [pc, #396]	@ (8009f58 <HAL_RCC_ClockConfig+0x1c0>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f003 0307 	and.w	r3, r3, #7
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d001      	beq.n	8009ddc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e0b8      	b.n	8009f4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f003 0302 	and.w	r3, r3, #2
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d020      	beq.n	8009e2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f003 0304 	and.w	r3, r3, #4
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d005      	beq.n	8009e00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009df4:	4b59      	ldr	r3, [pc, #356]	@ (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	4a58      	ldr	r2, [pc, #352]	@ (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009dfa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009dfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 0308 	and.w	r3, r3, #8
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d005      	beq.n	8009e18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009e0c:	4b53      	ldr	r3, [pc, #332]	@ (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	4a52      	ldr	r2, [pc, #328]	@ (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009e12:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8009e16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e18:	4b50      	ldr	r3, [pc, #320]	@ (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	494d      	ldr	r1, [pc, #308]	@ (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009e26:	4313      	orrs	r3, r2
 8009e28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 0301 	and.w	r3, r3, #1
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d040      	beq.n	8009eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d107      	bne.n	8009e4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e3e:	4b47      	ldr	r3, [pc, #284]	@ (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d115      	bne.n	8009e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e07f      	b.n	8009f4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	d107      	bne.n	8009e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e56:	4b41      	ldr	r3, [pc, #260]	@ (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d109      	bne.n	8009e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	e073      	b.n	8009f4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e66:	4b3d      	ldr	r3, [pc, #244]	@ (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 0302 	and.w	r3, r3, #2
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d101      	bne.n	8009e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e06b      	b.n	8009f4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009e76:	4b39      	ldr	r3, [pc, #228]	@ (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	f023 0203 	bic.w	r2, r3, #3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	4936      	ldr	r1, [pc, #216]	@ (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009e84:	4313      	orrs	r3, r2
 8009e86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009e88:	f7fd fe5c 	bl	8007b44 <HAL_GetTick>
 8009e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e8e:	e00a      	b.n	8009ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e90:	f7fd fe58 	bl	8007b44 <HAL_GetTick>
 8009e94:	4602      	mov	r2, r0
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d901      	bls.n	8009ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	e053      	b.n	8009f4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	f003 020c 	and.w	r2, r3, #12
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d1eb      	bne.n	8009e90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009eb8:	4b27      	ldr	r3, [pc, #156]	@ (8009f58 <HAL_RCC_ClockConfig+0x1c0>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 0307 	and.w	r3, r3, #7
 8009ec0:	683a      	ldr	r2, [r7, #0]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d210      	bcs.n	8009ee8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ec6:	4b24      	ldr	r3, [pc, #144]	@ (8009f58 <HAL_RCC_ClockConfig+0x1c0>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f023 0207 	bic.w	r2, r3, #7
 8009ece:	4922      	ldr	r1, [pc, #136]	@ (8009f58 <HAL_RCC_ClockConfig+0x1c0>)
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ed6:	4b20      	ldr	r3, [pc, #128]	@ (8009f58 <HAL_RCC_ClockConfig+0x1c0>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 0307 	and.w	r3, r3, #7
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d001      	beq.n	8009ee8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e032      	b.n	8009f4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 0304 	and.w	r3, r3, #4
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d008      	beq.n	8009f06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ef4:	4b19      	ldr	r3, [pc, #100]	@ (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	4916      	ldr	r1, [pc, #88]	@ (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009f02:	4313      	orrs	r3, r2
 8009f04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 0308 	and.w	r3, r3, #8
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d009      	beq.n	8009f26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009f12:	4b12      	ldr	r3, [pc, #72]	@ (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	00db      	lsls	r3, r3, #3
 8009f20:	490e      	ldr	r1, [pc, #56]	@ (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009f22:	4313      	orrs	r3, r2
 8009f24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009f26:	f000 f821 	bl	8009f6c <HAL_RCC_GetSysClockFreq>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	091b      	lsrs	r3, r3, #4
 8009f32:	f003 030f 	and.w	r3, r3, #15
 8009f36:	490a      	ldr	r1, [pc, #40]	@ (8009f60 <HAL_RCC_ClockConfig+0x1c8>)
 8009f38:	5ccb      	ldrb	r3, [r1, r3]
 8009f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f3e:	4a09      	ldr	r2, [pc, #36]	@ (8009f64 <HAL_RCC_ClockConfig+0x1cc>)
 8009f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009f42:	4b09      	ldr	r3, [pc, #36]	@ (8009f68 <HAL_RCC_ClockConfig+0x1d0>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fd fdba 	bl	8007ac0 <HAL_InitTick>

  return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	40022000 	.word	0x40022000
 8009f5c:	40021000 	.word	0x40021000
 8009f60:	0800d704 	.word	0x0800d704
 8009f64:	20000944 	.word	0x20000944
 8009f68:	20000948 	.word	0x20000948

08009f6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f6c:	b490      	push	{r4, r7}
 8009f6e:	b08a      	sub	sp, #40	@ 0x28
 8009f70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009f72:	4b29      	ldr	r3, [pc, #164]	@ (800a018 <HAL_RCC_GetSysClockFreq+0xac>)
 8009f74:	1d3c      	adds	r4, r7, #4
 8009f76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009f7c:	f240 2301 	movw	r3, #513	@ 0x201
 8009f80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009f82:	2300      	movs	r3, #0
 8009f84:	61fb      	str	r3, [r7, #28]
 8009f86:	2300      	movs	r3, #0
 8009f88:	61bb      	str	r3, [r7, #24]
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f8e:	2300      	movs	r3, #0
 8009f90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009f92:	2300      	movs	r3, #0
 8009f94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009f96:	4b21      	ldr	r3, [pc, #132]	@ (800a01c <HAL_RCC_GetSysClockFreq+0xb0>)
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	f003 030c 	and.w	r3, r3, #12
 8009fa2:	2b04      	cmp	r3, #4
 8009fa4:	d002      	beq.n	8009fac <HAL_RCC_GetSysClockFreq+0x40>
 8009fa6:	2b08      	cmp	r3, #8
 8009fa8:	d003      	beq.n	8009fb2 <HAL_RCC_GetSysClockFreq+0x46>
 8009faa:	e02b      	b.n	800a004 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009fac:	4b1c      	ldr	r3, [pc, #112]	@ (800a020 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009fae:	623b      	str	r3, [r7, #32]
      break;
 8009fb0:	e02b      	b.n	800a00a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	0c9b      	lsrs	r3, r3, #18
 8009fb6:	f003 030f 	and.w	r3, r3, #15
 8009fba:	3328      	adds	r3, #40	@ 0x28
 8009fbc:	443b      	add	r3, r7
 8009fbe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009fc2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d012      	beq.n	8009ff4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009fce:	4b13      	ldr	r3, [pc, #76]	@ (800a01c <HAL_RCC_GetSysClockFreq+0xb0>)
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	0c5b      	lsrs	r3, r3, #17
 8009fd4:	f003 0301 	and.w	r3, r3, #1
 8009fd8:	3328      	adds	r3, #40	@ 0x28
 8009fda:	443b      	add	r3, r7
 8009fdc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009fe0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	4a0e      	ldr	r2, [pc, #56]	@ (800a020 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009fe6:	fb03 f202 	mul.w	r2, r3, r2
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ff2:	e004      	b.n	8009ffe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	4a0b      	ldr	r2, [pc, #44]	@ (800a024 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ff8:	fb02 f303 	mul.w	r3, r2, r3
 8009ffc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a000:	623b      	str	r3, [r7, #32]
      break;
 800a002:	e002      	b.n	800a00a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a004:	4b06      	ldr	r3, [pc, #24]	@ (800a020 <HAL_RCC_GetSysClockFreq+0xb4>)
 800a006:	623b      	str	r3, [r7, #32]
      break;
 800a008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a00a:	6a3b      	ldr	r3, [r7, #32]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3728      	adds	r7, #40	@ 0x28
 800a010:	46bd      	mov	sp, r7
 800a012:	bc90      	pop	{r4, r7}
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	0800d6ec 	.word	0x0800d6ec
 800a01c:	40021000 	.word	0x40021000
 800a020:	007a1200 	.word	0x007a1200
 800a024:	003d0900 	.word	0x003d0900

0800a028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a028:	b480      	push	{r7}
 800a02a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a02c:	4b02      	ldr	r3, [pc, #8]	@ (800a038 <HAL_RCC_GetHCLKFreq+0x10>)
 800a02e:	681b      	ldr	r3, [r3, #0]
}
 800a030:	4618      	mov	r0, r3
 800a032:	46bd      	mov	sp, r7
 800a034:	bc80      	pop	{r7}
 800a036:	4770      	bx	lr
 800a038:	20000944 	.word	0x20000944

0800a03c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a040:	f7ff fff2 	bl	800a028 <HAL_RCC_GetHCLKFreq>
 800a044:	4602      	mov	r2, r0
 800a046:	4b05      	ldr	r3, [pc, #20]	@ (800a05c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	0a1b      	lsrs	r3, r3, #8
 800a04c:	f003 0307 	and.w	r3, r3, #7
 800a050:	4903      	ldr	r1, [pc, #12]	@ (800a060 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a052:	5ccb      	ldrb	r3, [r1, r3]
 800a054:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a058:	4618      	mov	r0, r3
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	40021000 	.word	0x40021000
 800a060:	0800d714 	.word	0x0800d714

0800a064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a068:	f7ff ffde 	bl	800a028 <HAL_RCC_GetHCLKFreq>
 800a06c:	4602      	mov	r2, r0
 800a06e:	4b05      	ldr	r3, [pc, #20]	@ (800a084 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	0adb      	lsrs	r3, r3, #11
 800a074:	f003 0307 	and.w	r3, r3, #7
 800a078:	4903      	ldr	r1, [pc, #12]	@ (800a088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a07a:	5ccb      	ldrb	r3, [r1, r3]
 800a07c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a080:	4618      	mov	r0, r3
 800a082:	bd80      	pop	{r7, pc}
 800a084:	40021000 	.word	0x40021000
 800a088:	0800d714 	.word	0x0800d714

0800a08c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a094:	4b0a      	ldr	r3, [pc, #40]	@ (800a0c0 <RCC_Delay+0x34>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a0a      	ldr	r2, [pc, #40]	@ (800a0c4 <RCC_Delay+0x38>)
 800a09a:	fba2 2303 	umull	r2, r3, r2, r3
 800a09e:	0a5b      	lsrs	r3, r3, #9
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	fb02 f303 	mul.w	r3, r2, r3
 800a0a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a0a8:	bf00      	nop
  }
  while (Delay --);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	1e5a      	subs	r2, r3, #1
 800a0ae:	60fa      	str	r2, [r7, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d1f9      	bne.n	800a0a8 <RCC_Delay+0x1c>
}
 800a0b4:	bf00      	nop
 800a0b6:	bf00      	nop
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bc80      	pop	{r7}
 800a0be:	4770      	bx	lr
 800a0c0:	20000944 	.word	0x20000944
 800a0c4:	10624dd3 	.word	0x10624dd3

0800a0c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d101      	bne.n	800a0da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e041      	b.n	800a15e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d106      	bne.n	800a0f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7fd fbca 	bl	8007888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	3304      	adds	r3, #4
 800a104:	4619      	mov	r1, r3
 800a106:	4610      	mov	r0, r2
 800a108:	f000 fa7e 	bl	800a608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2201      	movs	r2, #1
 800a118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2201      	movs	r2, #1
 800a120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3708      	adds	r7, #8
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
	...

0800a168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a176:	b2db      	uxtb	r3, r3
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d001      	beq.n	800a180 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	e044      	b.n	800a20a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2202      	movs	r2, #2
 800a184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68da      	ldr	r2, [r3, #12]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f042 0201 	orr.w	r2, r2, #1
 800a196:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a1d      	ldr	r2, [pc, #116]	@ (800a214 <HAL_TIM_Base_Start_IT+0xac>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d018      	beq.n	800a1d4 <HAL_TIM_Base_Start_IT+0x6c>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a1c      	ldr	r2, [pc, #112]	@ (800a218 <HAL_TIM_Base_Start_IT+0xb0>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d013      	beq.n	800a1d4 <HAL_TIM_Base_Start_IT+0x6c>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1b4:	d00e      	beq.n	800a1d4 <HAL_TIM_Base_Start_IT+0x6c>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a18      	ldr	r2, [pc, #96]	@ (800a21c <HAL_TIM_Base_Start_IT+0xb4>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d009      	beq.n	800a1d4 <HAL_TIM_Base_Start_IT+0x6c>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a16      	ldr	r2, [pc, #88]	@ (800a220 <HAL_TIM_Base_Start_IT+0xb8>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d004      	beq.n	800a1d4 <HAL_TIM_Base_Start_IT+0x6c>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a15      	ldr	r2, [pc, #84]	@ (800a224 <HAL_TIM_Base_Start_IT+0xbc>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d111      	bne.n	800a1f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	f003 0307 	and.w	r3, r3, #7
 800a1de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2b06      	cmp	r3, #6
 800a1e4:	d010      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f042 0201 	orr.w	r2, r2, #1
 800a1f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1f6:	e007      	b.n	800a208 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f042 0201 	orr.w	r2, r2, #1
 800a206:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3714      	adds	r7, #20
 800a20e:	46bd      	mov	sp, r7
 800a210:	bc80      	pop	{r7}
 800a212:	4770      	bx	lr
 800a214:	40012c00 	.word	0x40012c00
 800a218:	40013400 	.word	0x40013400
 800a21c:	40000400 	.word	0x40000400
 800a220:	40000800 	.word	0x40000800
 800a224:	40000c00 	.word	0x40000c00

0800a228 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	f003 0302 	and.w	r3, r3, #2
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d122      	bne.n	800a284 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	f003 0302 	and.w	r3, r3, #2
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d11b      	bne.n	800a284 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f06f 0202 	mvn.w	r2, #2
 800a254:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	f003 0303 	and.w	r3, r3, #3
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f9b1 	bl	800a5d2 <HAL_TIM_IC_CaptureCallback>
 800a270:	e005      	b.n	800a27e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f9a4 	bl	800a5c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f9b3 	bl	800a5e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	f003 0304 	and.w	r3, r3, #4
 800a28e:	2b04      	cmp	r3, #4
 800a290:	d122      	bne.n	800a2d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	f003 0304 	and.w	r3, r3, #4
 800a29c:	2b04      	cmp	r3, #4
 800a29e:	d11b      	bne.n	800a2d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f06f 0204 	mvn.w	r2, #4
 800a2a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2202      	movs	r2, #2
 800a2ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d003      	beq.n	800a2c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f987 	bl	800a5d2 <HAL_TIM_IC_CaptureCallback>
 800a2c4:	e005      	b.n	800a2d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 f97a 	bl	800a5c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 f989 	bl	800a5e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	f003 0308 	and.w	r3, r3, #8
 800a2e2:	2b08      	cmp	r3, #8
 800a2e4:	d122      	bne.n	800a32c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	f003 0308 	and.w	r3, r3, #8
 800a2f0:	2b08      	cmp	r3, #8
 800a2f2:	d11b      	bne.n	800a32c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f06f 0208 	mvn.w	r2, #8
 800a2fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2204      	movs	r2, #4
 800a302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	69db      	ldr	r3, [r3, #28]
 800a30a:	f003 0303 	and.w	r3, r3, #3
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f95d 	bl	800a5d2 <HAL_TIM_IC_CaptureCallback>
 800a318:	e005      	b.n	800a326 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f950 	bl	800a5c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 f95f 	bl	800a5e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	691b      	ldr	r3, [r3, #16]
 800a332:	f003 0310 	and.w	r3, r3, #16
 800a336:	2b10      	cmp	r3, #16
 800a338:	d122      	bne.n	800a380 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	f003 0310 	and.w	r3, r3, #16
 800a344:	2b10      	cmp	r3, #16
 800a346:	d11b      	bne.n	800a380 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f06f 0210 	mvn.w	r2, #16
 800a350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2208      	movs	r2, #8
 800a356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a362:	2b00      	cmp	r3, #0
 800a364:	d003      	beq.n	800a36e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f933 	bl	800a5d2 <HAL_TIM_IC_CaptureCallback>
 800a36c:	e005      	b.n	800a37a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f926 	bl	800a5c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 f935 	bl	800a5e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	f003 0301 	and.w	r3, r3, #1
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d10e      	bne.n	800a3ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	f003 0301 	and.w	r3, r3, #1
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d107      	bne.n	800a3ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f06f 0201 	mvn.w	r2, #1
 800a3a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f7fa fd30 	bl	8004e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3b6:	2b80      	cmp	r3, #128	@ 0x80
 800a3b8:	d10e      	bne.n	800a3d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3c4:	2b80      	cmp	r3, #128	@ 0x80
 800a3c6:	d107      	bne.n	800a3d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a3d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fa9d 	bl	800a912 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3e2:	2b40      	cmp	r3, #64	@ 0x40
 800a3e4:	d10e      	bne.n	800a404 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3f0:	2b40      	cmp	r3, #64	@ 0x40
 800a3f2:	d107      	bne.n	800a404 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a3fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 f8f9 	bl	800a5f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	f003 0320 	and.w	r3, r3, #32
 800a40e:	2b20      	cmp	r3, #32
 800a410:	d10e      	bne.n	800a430 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	f003 0320 	and.w	r3, r3, #32
 800a41c:	2b20      	cmp	r3, #32
 800a41e:	d107      	bne.n	800a430 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f06f 0220 	mvn.w	r2, #32
 800a428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 fa68 	bl	800a900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a430:	bf00      	nop
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d101      	bne.n	800a450 <HAL_TIM_ConfigClockSource+0x18>
 800a44c:	2302      	movs	r3, #2
 800a44e:	e0b3      	b.n	800a5b8 <HAL_TIM_ConfigClockSource+0x180>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2202      	movs	r2, #2
 800a45c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a46e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a476:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a488:	d03e      	beq.n	800a508 <HAL_TIM_ConfigClockSource+0xd0>
 800a48a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a48e:	f200 8087 	bhi.w	800a5a0 <HAL_TIM_ConfigClockSource+0x168>
 800a492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a496:	f000 8085 	beq.w	800a5a4 <HAL_TIM_ConfigClockSource+0x16c>
 800a49a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a49e:	d87f      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x168>
 800a4a0:	2b70      	cmp	r3, #112	@ 0x70
 800a4a2:	d01a      	beq.n	800a4da <HAL_TIM_ConfigClockSource+0xa2>
 800a4a4:	2b70      	cmp	r3, #112	@ 0x70
 800a4a6:	d87b      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x168>
 800a4a8:	2b60      	cmp	r3, #96	@ 0x60
 800a4aa:	d050      	beq.n	800a54e <HAL_TIM_ConfigClockSource+0x116>
 800a4ac:	2b60      	cmp	r3, #96	@ 0x60
 800a4ae:	d877      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x168>
 800a4b0:	2b50      	cmp	r3, #80	@ 0x50
 800a4b2:	d03c      	beq.n	800a52e <HAL_TIM_ConfigClockSource+0xf6>
 800a4b4:	2b50      	cmp	r3, #80	@ 0x50
 800a4b6:	d873      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x168>
 800a4b8:	2b40      	cmp	r3, #64	@ 0x40
 800a4ba:	d058      	beq.n	800a56e <HAL_TIM_ConfigClockSource+0x136>
 800a4bc:	2b40      	cmp	r3, #64	@ 0x40
 800a4be:	d86f      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x168>
 800a4c0:	2b30      	cmp	r3, #48	@ 0x30
 800a4c2:	d064      	beq.n	800a58e <HAL_TIM_ConfigClockSource+0x156>
 800a4c4:	2b30      	cmp	r3, #48	@ 0x30
 800a4c6:	d86b      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x168>
 800a4c8:	2b20      	cmp	r3, #32
 800a4ca:	d060      	beq.n	800a58e <HAL_TIM_ConfigClockSource+0x156>
 800a4cc:	2b20      	cmp	r3, #32
 800a4ce:	d867      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x168>
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d05c      	beq.n	800a58e <HAL_TIM_ConfigClockSource+0x156>
 800a4d4:	2b10      	cmp	r3, #16
 800a4d6:	d05a      	beq.n	800a58e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a4d8:	e062      	b.n	800a5a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6818      	ldr	r0, [r3, #0]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	6899      	ldr	r1, [r3, #8]
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	685a      	ldr	r2, [r3, #4]
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	f000 f97e 	bl	800a7ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a4fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	609a      	str	r2, [r3, #8]
      break;
 800a506:	e04e      	b.n	800a5a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6818      	ldr	r0, [r3, #0]
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	6899      	ldr	r1, [r3, #8]
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	685a      	ldr	r2, [r3, #4]
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	f000 f967 	bl	800a7ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	689a      	ldr	r2, [r3, #8]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a52a:	609a      	str	r2, [r3, #8]
      break;
 800a52c:	e03b      	b.n	800a5a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6818      	ldr	r0, [r3, #0]
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	6859      	ldr	r1, [r3, #4]
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	461a      	mov	r2, r3
 800a53c:	f000 f8de 	bl	800a6fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2150      	movs	r1, #80	@ 0x50
 800a546:	4618      	mov	r0, r3
 800a548:	f000 f935 	bl	800a7b6 <TIM_ITRx_SetConfig>
      break;
 800a54c:	e02b      	b.n	800a5a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6818      	ldr	r0, [r3, #0]
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	6859      	ldr	r1, [r3, #4]
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	461a      	mov	r2, r3
 800a55c:	f000 f8fc 	bl	800a758 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2160      	movs	r1, #96	@ 0x60
 800a566:	4618      	mov	r0, r3
 800a568:	f000 f925 	bl	800a7b6 <TIM_ITRx_SetConfig>
      break;
 800a56c:	e01b      	b.n	800a5a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6818      	ldr	r0, [r3, #0]
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	6859      	ldr	r1, [r3, #4]
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	461a      	mov	r2, r3
 800a57c:	f000 f8be 	bl	800a6fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2140      	movs	r1, #64	@ 0x40
 800a586:	4618      	mov	r0, r3
 800a588:	f000 f915 	bl	800a7b6 <TIM_ITRx_SetConfig>
      break;
 800a58c:	e00b      	b.n	800a5a6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4619      	mov	r1, r3
 800a598:	4610      	mov	r0, r2
 800a59a:	f000 f90c 	bl	800a7b6 <TIM_ITRx_SetConfig>
        break;
 800a59e:	e002      	b.n	800a5a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a5a0:	bf00      	nop
 800a5a2:	e000      	b.n	800a5a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a5a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bc80      	pop	{r7}
 800a5d0:	4770      	bx	lr

0800a5d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b083      	sub	sp, #12
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a5da:	bf00      	nop
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bc80      	pop	{r7}
 800a5e2:	4770      	bx	lr

0800a5e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bc80      	pop	{r7}
 800a5f4:	4770      	bx	lr

0800a5f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b083      	sub	sp, #12
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5fe:	bf00      	nop
 800a600:	370c      	adds	r7, #12
 800a602:	46bd      	mov	sp, r7
 800a604:	bc80      	pop	{r7}
 800a606:	4770      	bx	lr

0800a608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a33      	ldr	r2, [pc, #204]	@ (800a6e8 <TIM_Base_SetConfig+0xe0>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d013      	beq.n	800a648 <TIM_Base_SetConfig+0x40>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a32      	ldr	r2, [pc, #200]	@ (800a6ec <TIM_Base_SetConfig+0xe4>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d00f      	beq.n	800a648 <TIM_Base_SetConfig+0x40>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a62e:	d00b      	beq.n	800a648 <TIM_Base_SetConfig+0x40>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a2f      	ldr	r2, [pc, #188]	@ (800a6f0 <TIM_Base_SetConfig+0xe8>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d007      	beq.n	800a648 <TIM_Base_SetConfig+0x40>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a2e      	ldr	r2, [pc, #184]	@ (800a6f4 <TIM_Base_SetConfig+0xec>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d003      	beq.n	800a648 <TIM_Base_SetConfig+0x40>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4a2d      	ldr	r2, [pc, #180]	@ (800a6f8 <TIM_Base_SetConfig+0xf0>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d108      	bne.n	800a65a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a64e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	4313      	orrs	r3, r2
 800a658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a22      	ldr	r2, [pc, #136]	@ (800a6e8 <TIM_Base_SetConfig+0xe0>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d013      	beq.n	800a68a <TIM_Base_SetConfig+0x82>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a21      	ldr	r2, [pc, #132]	@ (800a6ec <TIM_Base_SetConfig+0xe4>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d00f      	beq.n	800a68a <TIM_Base_SetConfig+0x82>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a670:	d00b      	beq.n	800a68a <TIM_Base_SetConfig+0x82>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4a1e      	ldr	r2, [pc, #120]	@ (800a6f0 <TIM_Base_SetConfig+0xe8>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d007      	beq.n	800a68a <TIM_Base_SetConfig+0x82>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a1d      	ldr	r2, [pc, #116]	@ (800a6f4 <TIM_Base_SetConfig+0xec>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d003      	beq.n	800a68a <TIM_Base_SetConfig+0x82>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a1c      	ldr	r2, [pc, #112]	@ (800a6f8 <TIM_Base_SetConfig+0xf0>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d108      	bne.n	800a69c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	4313      	orrs	r3, r2
 800a69a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	689a      	ldr	r2, [r3, #8]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a09      	ldr	r2, [pc, #36]	@ (800a6e8 <TIM_Base_SetConfig+0xe0>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d003      	beq.n	800a6d0 <TIM_Base_SetConfig+0xc8>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4a08      	ldr	r2, [pc, #32]	@ (800a6ec <TIM_Base_SetConfig+0xe4>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d103      	bne.n	800a6d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	691a      	ldr	r2, [r3, #16]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	615a      	str	r2, [r3, #20]
}
 800a6de:	bf00      	nop
 800a6e0:	3714      	adds	r7, #20
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bc80      	pop	{r7}
 800a6e6:	4770      	bx	lr
 800a6e8:	40012c00 	.word	0x40012c00
 800a6ec:	40013400 	.word	0x40013400
 800a6f0:	40000400 	.word	0x40000400
 800a6f4:	40000800 	.word	0x40000800
 800a6f8:	40000c00 	.word	0x40000c00

0800a6fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b087      	sub	sp, #28
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6a1b      	ldr	r3, [r3, #32]
 800a70c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	f023 0201 	bic.w	r2, r3, #1
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	011b      	lsls	r3, r3, #4
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	4313      	orrs	r3, r2
 800a730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f023 030a 	bic.w	r3, r3, #10
 800a738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	4313      	orrs	r3, r2
 800a740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	621a      	str	r2, [r3, #32]
}
 800a74e:	bf00      	nop
 800a750:	371c      	adds	r7, #28
 800a752:	46bd      	mov	sp, r7
 800a754:	bc80      	pop	{r7}
 800a756:	4770      	bx	lr

0800a758 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a758:	b480      	push	{r7}
 800a75a:	b087      	sub	sp, #28
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6a1b      	ldr	r3, [r3, #32]
 800a768:	f023 0210 	bic.w	r2, r3, #16
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	699b      	ldr	r3, [r3, #24]
 800a774:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6a1b      	ldr	r3, [r3, #32]
 800a77a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a782:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	031b      	lsls	r3, r3, #12
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a794:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	011b      	lsls	r3, r3, #4
 800a79a:	693a      	ldr	r2, [r7, #16]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	693a      	ldr	r2, [r7, #16]
 800a7aa:	621a      	str	r2, [r3, #32]
}
 800a7ac:	bf00      	nop
 800a7ae:	371c      	adds	r7, #28
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bc80      	pop	{r7}
 800a7b4:	4770      	bx	lr

0800a7b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a7b6:	b480      	push	{r7}
 800a7b8:	b085      	sub	sp, #20
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
 800a7be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a7ce:	683a      	ldr	r2, [r7, #0]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	f043 0307 	orr.w	r3, r3, #7
 800a7d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	609a      	str	r2, [r3, #8]
}
 800a7e0:	bf00      	nop
 800a7e2:	3714      	adds	r7, #20
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bc80      	pop	{r7}
 800a7e8:	4770      	bx	lr

0800a7ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b087      	sub	sp, #28
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	60f8      	str	r0, [r7, #12]
 800a7f2:	60b9      	str	r1, [r7, #8]
 800a7f4:	607a      	str	r2, [r7, #4]
 800a7f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a804:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	021a      	lsls	r2, r3, #8
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	431a      	orrs	r2, r3
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	4313      	orrs	r3, r2
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	4313      	orrs	r3, r2
 800a816:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	609a      	str	r2, [r3, #8]
}
 800a81e:	bf00      	nop
 800a820:	371c      	adds	r7, #28
 800a822:	46bd      	mov	sp, r7
 800a824:	bc80      	pop	{r7}
 800a826:	4770      	bx	lr

0800a828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d101      	bne.n	800a840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a83c:	2302      	movs	r3, #2
 800a83e:	e050      	b.n	800a8e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2202      	movs	r2, #2
 800a84c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	689b      	ldr	r3, [r3, #8]
 800a85e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	4313      	orrs	r3, r2
 800a870:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a1b      	ldr	r2, [pc, #108]	@ (800a8ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d018      	beq.n	800a8b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a19      	ldr	r2, [pc, #100]	@ (800a8f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d013      	beq.n	800a8b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a896:	d00e      	beq.n	800a8b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a15      	ldr	r2, [pc, #84]	@ (800a8f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d009      	beq.n	800a8b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a14      	ldr	r2, [pc, #80]	@ (800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d004      	beq.n	800a8b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a12      	ldr	r2, [pc, #72]	@ (800a8fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d10c      	bne.n	800a8d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3714      	adds	r7, #20
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bc80      	pop	{r7}
 800a8ea:	4770      	bx	lr
 800a8ec:	40012c00 	.word	0x40012c00
 800a8f0:	40013400 	.word	0x40013400
 800a8f4:	40000400 	.word	0x40000400
 800a8f8:	40000800 	.word	0x40000800
 800a8fc:	40000c00 	.word	0x40000c00

0800a900 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bc80      	pop	{r7}
 800a910:	4770      	bx	lr

0800a912 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a912:	b480      	push	{r7}
 800a914:	b083      	sub	sp, #12
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a91a:	bf00      	nop
 800a91c:	370c      	adds	r7, #12
 800a91e:	46bd      	mov	sp, r7
 800a920:	bc80      	pop	{r7}
 800a922:	4770      	bx	lr

0800a924 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d101      	bne.n	800a936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	e03f      	b.n	800a9b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d106      	bne.n	800a950 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7fc ffc2 	bl	80078d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2224      	movs	r2, #36	@ 0x24
 800a954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	68da      	ldr	r2, [r3, #12]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a966:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 f829 	bl	800a9c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	691a      	ldr	r2, [r3, #16]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a97c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	695a      	ldr	r2, [r3, #20]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a98c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	68da      	ldr	r2, [r3, #12]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a99c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2220      	movs	r2, #32
 800a9a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2220      	movs	r2, #32
 800a9b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
	...

0800a9c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	68da      	ldr	r2, [r3, #12]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	430a      	orrs	r2, r1
 800a9dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	689a      	ldr	r2, [r3, #8]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	431a      	orrs	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	695b      	ldr	r3, [r3, #20]
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800a9fa:	f023 030c 	bic.w	r3, r3, #12
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	6812      	ldr	r2, [r2, #0]
 800aa02:	68b9      	ldr	r1, [r7, #8]
 800aa04:	430b      	orrs	r3, r1
 800aa06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	695b      	ldr	r3, [r3, #20]
 800aa0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	699a      	ldr	r2, [r3, #24]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	430a      	orrs	r2, r1
 800aa1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a2c      	ldr	r2, [pc, #176]	@ (800aad4 <UART_SetConfig+0x114>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d103      	bne.n	800aa30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800aa28:	f7ff fb1c 	bl	800a064 <HAL_RCC_GetPCLK2Freq>
 800aa2c:	60f8      	str	r0, [r7, #12]
 800aa2e:	e002      	b.n	800aa36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800aa30:	f7ff fb04 	bl	800a03c <HAL_RCC_GetPCLK1Freq>
 800aa34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	4613      	mov	r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	4413      	add	r3, r2
 800aa3e:	009a      	lsls	r2, r3, #2
 800aa40:	441a      	add	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa4c:	4a22      	ldr	r2, [pc, #136]	@ (800aad8 <UART_SetConfig+0x118>)
 800aa4e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa52:	095b      	lsrs	r3, r3, #5
 800aa54:	0119      	lsls	r1, r3, #4
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	4413      	add	r3, r2
 800aa5e:	009a      	lsls	r2, r3, #2
 800aa60:	441a      	add	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	fbb2 f2f3 	udiv	r2, r2, r3
 800aa6c:	4b1a      	ldr	r3, [pc, #104]	@ (800aad8 <UART_SetConfig+0x118>)
 800aa6e:	fba3 0302 	umull	r0, r3, r3, r2
 800aa72:	095b      	lsrs	r3, r3, #5
 800aa74:	2064      	movs	r0, #100	@ 0x64
 800aa76:	fb00 f303 	mul.w	r3, r0, r3
 800aa7a:	1ad3      	subs	r3, r2, r3
 800aa7c:	011b      	lsls	r3, r3, #4
 800aa7e:	3332      	adds	r3, #50	@ 0x32
 800aa80:	4a15      	ldr	r2, [pc, #84]	@ (800aad8 <UART_SetConfig+0x118>)
 800aa82:	fba2 2303 	umull	r2, r3, r2, r3
 800aa86:	095b      	lsrs	r3, r3, #5
 800aa88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aa8c:	4419      	add	r1, r3
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	4613      	mov	r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	4413      	add	r3, r2
 800aa96:	009a      	lsls	r2, r3, #2
 800aa98:	441a      	add	r2, r3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	fbb2 f2f3 	udiv	r2, r2, r3
 800aaa4:	4b0c      	ldr	r3, [pc, #48]	@ (800aad8 <UART_SetConfig+0x118>)
 800aaa6:	fba3 0302 	umull	r0, r3, r3, r2
 800aaaa:	095b      	lsrs	r3, r3, #5
 800aaac:	2064      	movs	r0, #100	@ 0x64
 800aaae:	fb00 f303 	mul.w	r3, r0, r3
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	011b      	lsls	r3, r3, #4
 800aab6:	3332      	adds	r3, #50	@ 0x32
 800aab8:	4a07      	ldr	r2, [pc, #28]	@ (800aad8 <UART_SetConfig+0x118>)
 800aaba:	fba2 2303 	umull	r2, r3, r2, r3
 800aabe:	095b      	lsrs	r3, r3, #5
 800aac0:	f003 020f 	and.w	r2, r3, #15
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	440a      	add	r2, r1
 800aaca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800aacc:	bf00      	nop
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	40013800 	.word	0x40013800
 800aad8:	51eb851f 	.word	0x51eb851f

0800aadc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800aae6:	2300      	movs	r3, #0
 800aae8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800aaea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aaee:	2b84      	cmp	r3, #132	@ 0x84
 800aaf0:	d005      	beq.n	800aafe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800aaf2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	4413      	add	r3, r2
 800aafa:	3303      	adds	r3, #3
 800aafc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800aafe:	68fb      	ldr	r3, [r7, #12]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bc80      	pop	{r7}
 800ab08:	4770      	bx	lr

0800ab0a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ab0e:	f000 fda7 	bl	800b660 <vTaskStartScheduler>
  
  return osOK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ab18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab1a:	b089      	sub	sp, #36	@ 0x24
 800ab1c:	af04      	add	r7, sp, #16
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d020      	beq.n	800ab6c <osThreadCreate+0x54>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	699b      	ldr	r3, [r3, #24]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d01c      	beq.n	800ab6c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	685c      	ldr	r4, [r3, #4]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	691e      	ldr	r6, [r3, #16]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7ff ffc9 	bl	800aadc <makeFreeRtosPriority>
 800ab4a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	695b      	ldr	r3, [r3, #20]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab54:	9202      	str	r2, [sp, #8]
 800ab56:	9301      	str	r3, [sp, #4]
 800ab58:	9100      	str	r1, [sp, #0]
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	4632      	mov	r2, r6
 800ab5e:	4629      	mov	r1, r5
 800ab60:	4620      	mov	r0, r4
 800ab62:	f000 fbb9 	bl	800b2d8 <xTaskCreateStatic>
 800ab66:	4603      	mov	r3, r0
 800ab68:	60fb      	str	r3, [r7, #12]
 800ab6a:	e01c      	b.n	800aba6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	685c      	ldr	r4, [r3, #4]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab78:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7ff ffab 	bl	800aadc <makeFreeRtosPriority>
 800ab86:	4602      	mov	r2, r0
 800ab88:	f107 030c 	add.w	r3, r7, #12
 800ab8c:	9301      	str	r3, [sp, #4]
 800ab8e:	9200      	str	r2, [sp, #0]
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	4632      	mov	r2, r6
 800ab94:	4629      	mov	r1, r5
 800ab96:	4620      	mov	r0, r4
 800ab98:	f000 fbfd 	bl	800b396 <xTaskCreate>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d001      	beq.n	800aba6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800aba2:	2300      	movs	r3, #0
 800aba4:	e000      	b.n	800aba8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800aba6:	68fb      	ldr	r3, [r7, #12]
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3714      	adds	r7, #20
 800abac:	46bd      	mov	sp, r7
 800abae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800abb0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d001      	beq.n	800abc6 <osDelay+0x16>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	e000      	b.n	800abc8 <osDelay+0x18>
 800abc6:	2301      	movs	r3, #1
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 fd13 	bl	800b5f4 <vTaskDelay>
  
  return osOK;
 800abce:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f103 0208 	add.w	r2, r3, #8
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f04f 32ff 	mov.w	r2, #4294967295
 800abf0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f103 0208 	add.w	r2, r3, #8
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f103 0208 	add.w	r2, r3, #8
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ac0c:	bf00      	nop
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bc80      	pop	{r7}
 800ac14:	4770      	bx	lr

0800ac16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ac16:	b480      	push	{r7}
 800ac18:	b083      	sub	sp, #12
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bc80      	pop	{r7}
 800ac2c:	4770      	bx	lr

0800ac2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac2e:	b480      	push	{r7}
 800ac30:	b085      	sub	sp, #20
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	68fa      	ldr	r2, [r7, #12]
 800ac42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	689a      	ldr	r2, [r3, #8]
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	683a      	ldr	r2, [r7, #0]
 800ac52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	683a      	ldr	r2, [r7, #0]
 800ac58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	1c5a      	adds	r2, r3, #1
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	601a      	str	r2, [r3, #0]
}
 800ac6a:	bf00      	nop
 800ac6c:	3714      	adds	r7, #20
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bc80      	pop	{r7}
 800ac72:	4770      	bx	lr

0800ac74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac8a:	d103      	bne.n	800ac94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	691b      	ldr	r3, [r3, #16]
 800ac90:	60fb      	str	r3, [r7, #12]
 800ac92:	e00c      	b.n	800acae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	3308      	adds	r3, #8
 800ac98:	60fb      	str	r3, [r7, #12]
 800ac9a:	e002      	b.n	800aca2 <vListInsert+0x2e>
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	60fb      	str	r3, [r7, #12]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d2f6      	bcs.n	800ac9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	685a      	ldr	r2, [r3, #4]
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	683a      	ldr	r2, [r7, #0]
 800acbc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	683a      	ldr	r2, [r7, #0]
 800acc8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	1c5a      	adds	r2, r3, #1
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	601a      	str	r2, [r3, #0]
}
 800acda:	bf00      	nop
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	bc80      	pop	{r7}
 800ace2:	4770      	bx	lr

0800ace4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	6892      	ldr	r2, [r2, #8]
 800acfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	6852      	ldr	r2, [r2, #4]
 800ad04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d103      	bne.n	800ad18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	689a      	ldr	r2, [r3, #8]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	1e5a      	subs	r2, r3, #1
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bc80      	pop	{r7}
 800ad34:	4770      	bx	lr
	...

0800ad38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10b      	bne.n	800ad64 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ad4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ad5e:	bf00      	nop
 800ad60:	bf00      	nop
 800ad62:	e7fd      	b.n	800ad60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ad64:	f001 fa8a 	bl	800c27c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad70:	68f9      	ldr	r1, [r7, #12]
 800ad72:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ad74:	fb01 f303 	mul.w	r3, r1, r3
 800ad78:	441a      	add	r2, r3
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2200      	movs	r2, #0
 800ad82:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad94:	3b01      	subs	r3, #1
 800ad96:	68f9      	ldr	r1, [r7, #12]
 800ad98:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ad9a:	fb01 f303 	mul.w	r3, r1, r3
 800ad9e:	441a      	add	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	22ff      	movs	r2, #255	@ 0xff
 800ada8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	22ff      	movs	r2, #255	@ 0xff
 800adb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d114      	bne.n	800ade4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d01a      	beq.n	800adf8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3310      	adds	r3, #16
 800adc6:	4618      	mov	r0, r3
 800adc8:	f000 fe98 	bl	800bafc <xTaskRemoveFromEventList>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d012      	beq.n	800adf8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800add2:	4b0d      	ldr	r3, [pc, #52]	@ (800ae08 <xQueueGenericReset+0xd0>)
 800add4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800add8:	601a      	str	r2, [r3, #0]
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	f3bf 8f6f 	isb	sy
 800ade2:	e009      	b.n	800adf8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	3310      	adds	r3, #16
 800ade8:	4618      	mov	r0, r3
 800adea:	f7ff fef5 	bl	800abd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	3324      	adds	r3, #36	@ 0x24
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7ff fef0 	bl	800abd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800adf8:	f001 fa70 	bl	800c2dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800adfc:	2301      	movs	r3, #1
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	e000ed04 	.word	0xe000ed04

0800ae0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b08a      	sub	sp, #40	@ 0x28
 800ae10:	af02      	add	r7, sp, #8
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	4613      	mov	r3, r2
 800ae18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d10b      	bne.n	800ae38 <xQueueGenericCreate+0x2c>
	__asm volatile
 800ae20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae24:	f383 8811 	msr	BASEPRI, r3
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	f3bf 8f4f 	dsb	sy
 800ae30:	613b      	str	r3, [r7, #16]
}
 800ae32:	bf00      	nop
 800ae34:	bf00      	nop
 800ae36:	e7fd      	b.n	800ae34 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d102      	bne.n	800ae44 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	61fb      	str	r3, [r7, #28]
 800ae42:	e004      	b.n	800ae4e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	68ba      	ldr	r2, [r7, #8]
 800ae48:	fb02 f303 	mul.w	r3, r2, r3
 800ae4c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	3348      	adds	r3, #72	@ 0x48
 800ae52:	4618      	mov	r0, r3
 800ae54:	f001 fad4 	bl	800c400 <pvPortMalloc>
 800ae58:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00f      	beq.n	800ae80 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	3348      	adds	r3, #72	@ 0x48
 800ae64:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae6e:	79fa      	ldrb	r2, [r7, #7]
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	4613      	mov	r3, r2
 800ae76:	697a      	ldr	r2, [r7, #20]
 800ae78:	68b9      	ldr	r1, [r7, #8]
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f000 f805 	bl	800ae8a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ae80:	69bb      	ldr	r3, [r7, #24]
	}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3720      	adds	r7, #32
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b084      	sub	sp, #16
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	60f8      	str	r0, [r7, #12]
 800ae92:	60b9      	str	r1, [r7, #8]
 800ae94:	607a      	str	r2, [r7, #4]
 800ae96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d103      	bne.n	800aea6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	69ba      	ldr	r2, [r7, #24]
 800aea2:	601a      	str	r2, [r3, #0]
 800aea4:	e002      	b.n	800aeac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aeb8:	2101      	movs	r1, #1
 800aeba:	69b8      	ldr	r0, [r7, #24]
 800aebc:	f7ff ff3c 	bl	800ad38 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aec0:	bf00      	nop
 800aec2:	3710      	adds	r7, #16
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00e      	beq.n	800aef4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800aee8:	2300      	movs	r3, #0
 800aeea:	2200      	movs	r2, #0
 800aeec:	2100      	movs	r1, #0
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 f81c 	bl	800af2c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800aef4:	bf00      	nop
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b086      	sub	sp, #24
 800af00:	af00      	add	r7, sp, #0
 800af02:	4603      	mov	r3, r0
 800af04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800af06:	2301      	movs	r3, #1
 800af08:	617b      	str	r3, [r7, #20]
 800af0a:	2300      	movs	r3, #0
 800af0c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800af0e:	79fb      	ldrb	r3, [r7, #7]
 800af10:	461a      	mov	r2, r3
 800af12:	6939      	ldr	r1, [r7, #16]
 800af14:	6978      	ldr	r0, [r7, #20]
 800af16:	f7ff ff79 	bl	800ae0c <xQueueGenericCreate>
 800af1a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f7ff ffd3 	bl	800aec8 <prvInitialiseMutex>

		return pxNewQueue;
 800af22:	68fb      	ldr	r3, [r7, #12]
	}
 800af24:	4618      	mov	r0, r3
 800af26:	3718      	adds	r7, #24
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b08e      	sub	sp, #56	@ 0x38
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
 800af38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800af3a:	2300      	movs	r3, #0
 800af3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800af42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af44:	2b00      	cmp	r3, #0
 800af46:	d10b      	bne.n	800af60 <xQueueGenericSend+0x34>
	__asm volatile
 800af48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af4c:	f383 8811 	msr	BASEPRI, r3
 800af50:	f3bf 8f6f 	isb	sy
 800af54:	f3bf 8f4f 	dsb	sy
 800af58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800af5a:	bf00      	nop
 800af5c:	bf00      	nop
 800af5e:	e7fd      	b.n	800af5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d103      	bne.n	800af6e <xQueueGenericSend+0x42>
 800af66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <xQueueGenericSend+0x46>
 800af6e:	2301      	movs	r3, #1
 800af70:	e000      	b.n	800af74 <xQueueGenericSend+0x48>
 800af72:	2300      	movs	r3, #0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10b      	bne.n	800af90 <xQueueGenericSend+0x64>
	__asm volatile
 800af78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7c:	f383 8811 	msr	BASEPRI, r3
 800af80:	f3bf 8f6f 	isb	sy
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800af8a:	bf00      	nop
 800af8c:	bf00      	nop
 800af8e:	e7fd      	b.n	800af8c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2b02      	cmp	r3, #2
 800af94:	d103      	bne.n	800af9e <xQueueGenericSend+0x72>
 800af96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d101      	bne.n	800afa2 <xQueueGenericSend+0x76>
 800af9e:	2301      	movs	r3, #1
 800afa0:	e000      	b.n	800afa4 <xQueueGenericSend+0x78>
 800afa2:	2300      	movs	r3, #0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d10b      	bne.n	800afc0 <xQueueGenericSend+0x94>
	__asm volatile
 800afa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afac:	f383 8811 	msr	BASEPRI, r3
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	623b      	str	r3, [r7, #32]
}
 800afba:	bf00      	nop
 800afbc:	bf00      	nop
 800afbe:	e7fd      	b.n	800afbc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800afc0:	f000 ff60 	bl	800be84 <xTaskGetSchedulerState>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d102      	bne.n	800afd0 <xQueueGenericSend+0xa4>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d101      	bne.n	800afd4 <xQueueGenericSend+0xa8>
 800afd0:	2301      	movs	r3, #1
 800afd2:	e000      	b.n	800afd6 <xQueueGenericSend+0xaa>
 800afd4:	2300      	movs	r3, #0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d10b      	bne.n	800aff2 <xQueueGenericSend+0xc6>
	__asm volatile
 800afda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afde:	f383 8811 	msr	BASEPRI, r3
 800afe2:	f3bf 8f6f 	isb	sy
 800afe6:	f3bf 8f4f 	dsb	sy
 800afea:	61fb      	str	r3, [r7, #28]
}
 800afec:	bf00      	nop
 800afee:	bf00      	nop
 800aff0:	e7fd      	b.n	800afee <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aff2:	f001 f943 	bl	800c27c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800affa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800affe:	429a      	cmp	r2, r3
 800b000:	d302      	bcc.n	800b008 <xQueueGenericSend+0xdc>
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	2b02      	cmp	r3, #2
 800b006:	d129      	bne.n	800b05c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b008:	683a      	ldr	r2, [r7, #0]
 800b00a:	68b9      	ldr	r1, [r7, #8]
 800b00c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b00e:	f000 f88f 	bl	800b130 <prvCopyDataToQueue>
 800b012:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d010      	beq.n	800b03e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01e:	3324      	adds	r3, #36	@ 0x24
 800b020:	4618      	mov	r0, r3
 800b022:	f000 fd6b 	bl	800bafc <xTaskRemoveFromEventList>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d013      	beq.n	800b054 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b02c:	4b3f      	ldr	r3, [pc, #252]	@ (800b12c <xQueueGenericSend+0x200>)
 800b02e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b032:	601a      	str	r2, [r3, #0]
 800b034:	f3bf 8f4f 	dsb	sy
 800b038:	f3bf 8f6f 	isb	sy
 800b03c:	e00a      	b.n	800b054 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b040:	2b00      	cmp	r3, #0
 800b042:	d007      	beq.n	800b054 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b044:	4b39      	ldr	r3, [pc, #228]	@ (800b12c <xQueueGenericSend+0x200>)
 800b046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b04a:	601a      	str	r2, [r3, #0]
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b054:	f001 f942 	bl	800c2dc <vPortExitCritical>
				return pdPASS;
 800b058:	2301      	movs	r3, #1
 800b05a:	e063      	b.n	800b124 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d103      	bne.n	800b06a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b062:	f001 f93b 	bl	800c2dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b066:	2300      	movs	r3, #0
 800b068:	e05c      	b.n	800b124 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b06a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d106      	bne.n	800b07e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b070:	f107 0314 	add.w	r3, r7, #20
 800b074:	4618      	mov	r0, r3
 800b076:	f000 fda5 	bl	800bbc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b07a:	2301      	movs	r3, #1
 800b07c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b07e:	f001 f92d 	bl	800c2dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b082:	f000 fb4f 	bl	800b724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b086:	f001 f8f9 	bl	800c27c <vPortEnterCritical>
 800b08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b090:	b25b      	sxtb	r3, r3
 800b092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b096:	d103      	bne.n	800b0a0 <xQueueGenericSend+0x174>
 800b098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b09a:	2200      	movs	r2, #0
 800b09c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0a6:	b25b      	sxtb	r3, r3
 800b0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ac:	d103      	bne.n	800b0b6 <xQueueGenericSend+0x18a>
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b0b6:	f001 f911 	bl	800c2dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0ba:	1d3a      	adds	r2, r7, #4
 800b0bc:	f107 0314 	add.w	r3, r7, #20
 800b0c0:	4611      	mov	r1, r2
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f000 fd94 	bl	800bbf0 <xTaskCheckForTimeOut>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d124      	bne.n	800b118 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b0ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0d0:	f000 f8ea 	bl	800b2a8 <prvIsQueueFull>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d018      	beq.n	800b10c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0dc:	3310      	adds	r3, #16
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	4611      	mov	r1, r2
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 fce4 	bl	800bab0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b0e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0ea:	f000 f88b 	bl	800b204 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b0ee:	f000 fb27 	bl	800b740 <xTaskResumeAll>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f47f af7c 	bne.w	800aff2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b0fa:	4b0c      	ldr	r3, [pc, #48]	@ (800b12c <xQueueGenericSend+0x200>)
 800b0fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b100:	601a      	str	r2, [r3, #0]
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	e772      	b.n	800aff2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b10c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b10e:	f000 f879 	bl	800b204 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b112:	f000 fb15 	bl	800b740 <xTaskResumeAll>
 800b116:	e76c      	b.n	800aff2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b118:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b11a:	f000 f873 	bl	800b204 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b11e:	f000 fb0f 	bl	800b740 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b122:	2300      	movs	r3, #0
		}
	}
}
 800b124:	4618      	mov	r0, r3
 800b126:	3738      	adds	r7, #56	@ 0x38
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	e000ed04 	.word	0xe000ed04

0800b130 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b13c:	2300      	movs	r3, #0
 800b13e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b144:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10d      	bne.n	800b16a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d14d      	bne.n	800b1f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	4618      	mov	r0, r3
 800b15c:	f000 feb0 	bl	800bec0 <xTaskPriorityDisinherit>
 800b160:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2200      	movs	r2, #0
 800b166:	605a      	str	r2, [r3, #4]
 800b168:	e043      	b.n	800b1f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d119      	bne.n	800b1a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6898      	ldr	r0, [r3, #8]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b178:	461a      	mov	r2, r3
 800b17a:	68b9      	ldr	r1, [r7, #8]
 800b17c:	f001 fc7c 	bl	800ca78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	689a      	ldr	r2, [r3, #8]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b188:	441a      	add	r2, r3
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	689a      	ldr	r2, [r3, #8]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	429a      	cmp	r2, r3
 800b198:	d32b      	bcc.n	800b1f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	609a      	str	r2, [r3, #8]
 800b1a2:	e026      	b.n	800b1f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	68d8      	ldr	r0, [r3, #12]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	68b9      	ldr	r1, [r7, #8]
 800b1b0:	f001 fc62 	bl	800ca78 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	68da      	ldr	r2, [r3, #12]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1bc:	425b      	negs	r3, r3
 800b1be:	441a      	add	r2, r3
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	68da      	ldr	r2, [r3, #12]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d207      	bcs.n	800b1e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	685a      	ldr	r2, [r3, #4]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1d8:	425b      	negs	r3, r3
 800b1da:	441a      	add	r2, r3
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b02      	cmp	r3, #2
 800b1e4:	d105      	bne.n	800b1f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d002      	beq.n	800b1f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	1c5a      	adds	r2, r3, #1
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b1fa:	697b      	ldr	r3, [r7, #20]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3718      	adds	r7, #24
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b20c:	f001 f836 	bl	800c27c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b216:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b218:	e011      	b.n	800b23e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d012      	beq.n	800b248 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	3324      	adds	r3, #36	@ 0x24
 800b226:	4618      	mov	r0, r3
 800b228:	f000 fc68 	bl	800bafc <xTaskRemoveFromEventList>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d001      	beq.n	800b236 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b232:	f000 fd41 	bl	800bcb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b236:	7bfb      	ldrb	r3, [r7, #15]
 800b238:	3b01      	subs	r3, #1
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b23e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b242:	2b00      	cmp	r3, #0
 800b244:	dce9      	bgt.n	800b21a <prvUnlockQueue+0x16>
 800b246:	e000      	b.n	800b24a <prvUnlockQueue+0x46>
					break;
 800b248:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	22ff      	movs	r2, #255	@ 0xff
 800b24e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b252:	f001 f843 	bl	800c2dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b256:	f001 f811 	bl	800c27c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b260:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b262:	e011      	b.n	800b288 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	691b      	ldr	r3, [r3, #16]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d012      	beq.n	800b292 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	3310      	adds	r3, #16
 800b270:	4618      	mov	r0, r3
 800b272:	f000 fc43 	bl	800bafc <xTaskRemoveFromEventList>
 800b276:	4603      	mov	r3, r0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d001      	beq.n	800b280 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b27c:	f000 fd1c 	bl	800bcb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b280:	7bbb      	ldrb	r3, [r7, #14]
 800b282:	3b01      	subs	r3, #1
 800b284:	b2db      	uxtb	r3, r3
 800b286:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b288:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	dce9      	bgt.n	800b264 <prvUnlockQueue+0x60>
 800b290:	e000      	b.n	800b294 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b292:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	22ff      	movs	r2, #255	@ 0xff
 800b298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b29c:	f001 f81e 	bl	800c2dc <vPortExitCritical>
}
 800b2a0:	bf00      	nop
 800b2a2:	3710      	adds	r7, #16
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b2b0:	f000 ffe4 	bl	800c27c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d102      	bne.n	800b2c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	60fb      	str	r3, [r7, #12]
 800b2c4:	e001      	b.n	800b2ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b2ca:	f001 f807 	bl	800c2dc <vPortExitCritical>

	return xReturn;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b08e      	sub	sp, #56	@ 0x38
 800b2dc:	af04      	add	r7, sp, #16
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	607a      	str	r2, [r7, #4]
 800b2e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b2e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10b      	bne.n	800b304 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f0:	f383 8811 	msr	BASEPRI, r3
 800b2f4:	f3bf 8f6f 	isb	sy
 800b2f8:	f3bf 8f4f 	dsb	sy
 800b2fc:	623b      	str	r3, [r7, #32]
}
 800b2fe:	bf00      	nop
 800b300:	bf00      	nop
 800b302:	e7fd      	b.n	800b300 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b306:	2b00      	cmp	r3, #0
 800b308:	d10b      	bne.n	800b322 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b30a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b30e:	f383 8811 	msr	BASEPRI, r3
 800b312:	f3bf 8f6f 	isb	sy
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	61fb      	str	r3, [r7, #28]
}
 800b31c:	bf00      	nop
 800b31e:	bf00      	nop
 800b320:	e7fd      	b.n	800b31e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b322:	2354      	movs	r3, #84	@ 0x54
 800b324:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	2b54      	cmp	r3, #84	@ 0x54
 800b32a:	d00b      	beq.n	800b344 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b330:	f383 8811 	msr	BASEPRI, r3
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	61bb      	str	r3, [r7, #24]
}
 800b33e:	bf00      	nop
 800b340:	bf00      	nop
 800b342:	e7fd      	b.n	800b340 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b346:	2b00      	cmp	r3, #0
 800b348:	d01e      	beq.n	800b388 <xTaskCreateStatic+0xb0>
 800b34a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d01b      	beq.n	800b388 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b352:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b356:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b358:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b35c:	2202      	movs	r2, #2
 800b35e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b362:	2300      	movs	r3, #0
 800b364:	9303      	str	r3, [sp, #12]
 800b366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b368:	9302      	str	r3, [sp, #8]
 800b36a:	f107 0314 	add.w	r3, r7, #20
 800b36e:	9301      	str	r3, [sp, #4]
 800b370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	68b9      	ldr	r1, [r7, #8]
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f000 f850 	bl	800b420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b380:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b382:	f000 f8cd 	bl	800b520 <prvAddNewTaskToReadyList>
 800b386:	e001      	b.n	800b38c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800b388:	2300      	movs	r3, #0
 800b38a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b38c:	697b      	ldr	r3, [r7, #20]
	}
 800b38e:	4618      	mov	r0, r3
 800b390:	3728      	adds	r7, #40	@ 0x28
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b396:	b580      	push	{r7, lr}
 800b398:	b08c      	sub	sp, #48	@ 0x30
 800b39a:	af04      	add	r7, sp, #16
 800b39c:	60f8      	str	r0, [r7, #12]
 800b39e:	60b9      	str	r1, [r7, #8]
 800b3a0:	603b      	str	r3, [r7, #0]
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3a6:	88fb      	ldrh	r3, [r7, #6]
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f001 f828 	bl	800c400 <pvPortMalloc>
 800b3b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00e      	beq.n	800b3d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b3b8:	2054      	movs	r0, #84	@ 0x54
 800b3ba:	f001 f821 	bl	800c400 <pvPortMalloc>
 800b3be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d003      	beq.n	800b3ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	697a      	ldr	r2, [r7, #20]
 800b3ca:	631a      	str	r2, [r3, #48]	@ 0x30
 800b3cc:	e005      	b.n	800b3da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b3ce:	6978      	ldr	r0, [r7, #20]
 800b3d0:	f001 f8de 	bl	800c590 <vPortFree>
 800b3d4:	e001      	b.n	800b3da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d017      	beq.n	800b410 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3e8:	88fa      	ldrh	r2, [r7, #6]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	9303      	str	r3, [sp, #12]
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	9302      	str	r3, [sp, #8]
 800b3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3f4:	9301      	str	r3, [sp, #4]
 800b3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f8:	9300      	str	r3, [sp, #0]
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	68b9      	ldr	r1, [r7, #8]
 800b3fe:	68f8      	ldr	r0, [r7, #12]
 800b400:	f000 f80e 	bl	800b420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b404:	69f8      	ldr	r0, [r7, #28]
 800b406:	f000 f88b 	bl	800b520 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b40a:	2301      	movs	r3, #1
 800b40c:	61bb      	str	r3, [r7, #24]
 800b40e:	e002      	b.n	800b416 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b410:	f04f 33ff 	mov.w	r3, #4294967295
 800b414:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b416:	69bb      	ldr	r3, [r7, #24]
	}
 800b418:	4618      	mov	r0, r3
 800b41a:	3720      	adds	r7, #32
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b088      	sub	sp, #32
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
 800b42c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b438:	3b01      	subs	r3, #1
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	f023 0307 	bic.w	r3, r3, #7
 800b446:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	f003 0307 	and.w	r3, r3, #7
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00b      	beq.n	800b46a <prvInitialiseNewTask+0x4a>
	__asm volatile
 800b452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b456:	f383 8811 	msr	BASEPRI, r3
 800b45a:	f3bf 8f6f 	isb	sy
 800b45e:	f3bf 8f4f 	dsb	sy
 800b462:	617b      	str	r3, [r7, #20]
}
 800b464:	bf00      	nop
 800b466:	bf00      	nop
 800b468:	e7fd      	b.n	800b466 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b46a:	2300      	movs	r3, #0
 800b46c:	61fb      	str	r3, [r7, #28]
 800b46e:	e012      	b.n	800b496 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b470:	68ba      	ldr	r2, [r7, #8]
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	4413      	add	r3, r2
 800b476:	7819      	ldrb	r1, [r3, #0]
 800b478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	4413      	add	r3, r2
 800b47e:	3334      	adds	r3, #52	@ 0x34
 800b480:	460a      	mov	r2, r1
 800b482:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	4413      	add	r3, r2
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d006      	beq.n	800b49e <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	3301      	adds	r3, #1
 800b494:	61fb      	str	r3, [r7, #28]
 800b496:	69fb      	ldr	r3, [r7, #28]
 800b498:	2b0f      	cmp	r3, #15
 800b49a:	d9e9      	bls.n	800b470 <prvInitialiseNewTask+0x50>
 800b49c:	e000      	b.n	800b4a0 <prvInitialiseNewTask+0x80>
		{
			break;
 800b49e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4aa:	2b06      	cmp	r3, #6
 800b4ac:	d901      	bls.n	800b4b2 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b4ae:	2306      	movs	r3, #6
 800b4b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4bc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c6:	3304      	adds	r3, #4
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7ff fba4 	bl	800ac16 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d0:	3318      	adds	r3, #24
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7ff fb9f 	bl	800ac16 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e0:	f1c3 0207 	rsb	r2, r3, #7
 800b4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4ec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b4fc:	683a      	ldr	r2, [r7, #0]
 800b4fe:	68f9      	ldr	r1, [r7, #12]
 800b500:	69b8      	ldr	r0, [r7, #24]
 800b502:	f000 fdcb 	bl	800c09c <pxPortInitialiseStack>
 800b506:	4602      	mov	r2, r0
 800b508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b50a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d002      	beq.n	800b518 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b516:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b518:	bf00      	nop
 800b51a:	3720      	adds	r7, #32
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b528:	f000 fea8 	bl	800c27c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b52c:	4b2a      	ldr	r3, [pc, #168]	@ (800b5d8 <prvAddNewTaskToReadyList+0xb8>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	3301      	adds	r3, #1
 800b532:	4a29      	ldr	r2, [pc, #164]	@ (800b5d8 <prvAddNewTaskToReadyList+0xb8>)
 800b534:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b536:	4b29      	ldr	r3, [pc, #164]	@ (800b5dc <prvAddNewTaskToReadyList+0xbc>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d109      	bne.n	800b552 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b53e:	4a27      	ldr	r2, [pc, #156]	@ (800b5dc <prvAddNewTaskToReadyList+0xbc>)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b544:	4b24      	ldr	r3, [pc, #144]	@ (800b5d8 <prvAddNewTaskToReadyList+0xb8>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d110      	bne.n	800b56e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b54c:	f000 fbd8 	bl	800bd00 <prvInitialiseTaskLists>
 800b550:	e00d      	b.n	800b56e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b552:	4b23      	ldr	r3, [pc, #140]	@ (800b5e0 <prvAddNewTaskToReadyList+0xc0>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d109      	bne.n	800b56e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b55a:	4b20      	ldr	r3, [pc, #128]	@ (800b5dc <prvAddNewTaskToReadyList+0xbc>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b564:	429a      	cmp	r2, r3
 800b566:	d802      	bhi.n	800b56e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b568:	4a1c      	ldr	r2, [pc, #112]	@ (800b5dc <prvAddNewTaskToReadyList+0xbc>)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b56e:	4b1d      	ldr	r3, [pc, #116]	@ (800b5e4 <prvAddNewTaskToReadyList+0xc4>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	3301      	adds	r3, #1
 800b574:	4a1b      	ldr	r2, [pc, #108]	@ (800b5e4 <prvAddNewTaskToReadyList+0xc4>)
 800b576:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b57c:	2201      	movs	r2, #1
 800b57e:	409a      	lsls	r2, r3
 800b580:	4b19      	ldr	r3, [pc, #100]	@ (800b5e8 <prvAddNewTaskToReadyList+0xc8>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4313      	orrs	r3, r2
 800b586:	4a18      	ldr	r2, [pc, #96]	@ (800b5e8 <prvAddNewTaskToReadyList+0xc8>)
 800b588:	6013      	str	r3, [r2, #0]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b58e:	4613      	mov	r3, r2
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	4413      	add	r3, r2
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	4a15      	ldr	r2, [pc, #84]	@ (800b5ec <prvAddNewTaskToReadyList+0xcc>)
 800b598:	441a      	add	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	3304      	adds	r3, #4
 800b59e:	4619      	mov	r1, r3
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	f7ff fb44 	bl	800ac2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b5a6:	f000 fe99 	bl	800c2dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b5aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b5e0 <prvAddNewTaskToReadyList+0xc0>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00e      	beq.n	800b5d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b5b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b5dc <prvAddNewTaskToReadyList+0xbc>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d207      	bcs.n	800b5d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b5c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b5f0 <prvAddNewTaskToReadyList+0xd0>)
 800b5c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5c6:	601a      	str	r2, [r3, #0]
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5d0:	bf00      	nop
 800b5d2:	3708      	adds	r7, #8
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	20001034 	.word	0x20001034
 800b5dc:	20000f34 	.word	0x20000f34
 800b5e0:	20001040 	.word	0x20001040
 800b5e4:	20001050 	.word	0x20001050
 800b5e8:	2000103c 	.word	0x2000103c
 800b5ec:	20000f38 	.word	0x20000f38
 800b5f0:	e000ed04 	.word	0xe000ed04

0800b5f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d018      	beq.n	800b638 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b606:	4b14      	ldr	r3, [pc, #80]	@ (800b658 <vTaskDelay+0x64>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d00b      	beq.n	800b626 <vTaskDelay+0x32>
	__asm volatile
 800b60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b612:	f383 8811 	msr	BASEPRI, r3
 800b616:	f3bf 8f6f 	isb	sy
 800b61a:	f3bf 8f4f 	dsb	sy
 800b61e:	60bb      	str	r3, [r7, #8]
}
 800b620:	bf00      	nop
 800b622:	bf00      	nop
 800b624:	e7fd      	b.n	800b622 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b626:	f000 f87d 	bl	800b724 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b62a:	2100      	movs	r1, #0
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fccf 	bl	800bfd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b632:	f000 f885 	bl	800b740 <xTaskResumeAll>
 800b636:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d107      	bne.n	800b64e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b63e:	4b07      	ldr	r3, [pc, #28]	@ (800b65c <vTaskDelay+0x68>)
 800b640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b644:	601a      	str	r2, [r3, #0]
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b64e:	bf00      	nop
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	2000105c 	.word	0x2000105c
 800b65c:	e000ed04 	.word	0xe000ed04

0800b660 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b08a      	sub	sp, #40	@ 0x28
 800b664:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b666:	2300      	movs	r3, #0
 800b668:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b66a:	2300      	movs	r3, #0
 800b66c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b66e:	463a      	mov	r2, r7
 800b670:	1d39      	adds	r1, r7, #4
 800b672:	f107 0308 	add.w	r3, r7, #8
 800b676:	4618      	mov	r0, r3
 800b678:	f7f4 fde2 	bl	8000240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b67c:	6839      	ldr	r1, [r7, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	9202      	str	r2, [sp, #8]
 800b684:	9301      	str	r3, [sp, #4]
 800b686:	2300      	movs	r3, #0
 800b688:	9300      	str	r3, [sp, #0]
 800b68a:	2300      	movs	r3, #0
 800b68c:	460a      	mov	r2, r1
 800b68e:	491f      	ldr	r1, [pc, #124]	@ (800b70c <vTaskStartScheduler+0xac>)
 800b690:	481f      	ldr	r0, [pc, #124]	@ (800b710 <vTaskStartScheduler+0xb0>)
 800b692:	f7ff fe21 	bl	800b2d8 <xTaskCreateStatic>
 800b696:	4603      	mov	r3, r0
 800b698:	4a1e      	ldr	r2, [pc, #120]	@ (800b714 <vTaskStartScheduler+0xb4>)
 800b69a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b69c:	4b1d      	ldr	r3, [pc, #116]	@ (800b714 <vTaskStartScheduler+0xb4>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d002      	beq.n	800b6aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	617b      	str	r3, [r7, #20]
 800b6a8:	e001      	b.n	800b6ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d116      	bne.n	800b6e2 <vTaskStartScheduler+0x82>
	__asm volatile
 800b6b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6b8:	f383 8811 	msr	BASEPRI, r3
 800b6bc:	f3bf 8f6f 	isb	sy
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	613b      	str	r3, [r7, #16]
}
 800b6c6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b6c8:	4b13      	ldr	r3, [pc, #76]	@ (800b718 <vTaskStartScheduler+0xb8>)
 800b6ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b6d0:	4b12      	ldr	r3, [pc, #72]	@ (800b71c <vTaskStartScheduler+0xbc>)
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b6d6:	4b12      	ldr	r3, [pc, #72]	@ (800b720 <vTaskStartScheduler+0xc0>)
 800b6d8:	2200      	movs	r2, #0
 800b6da:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b6dc:	f000 fd5c 	bl	800c198 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b6e0:	e00f      	b.n	800b702 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e8:	d10b      	bne.n	800b702 <vTaskStartScheduler+0xa2>
	__asm volatile
 800b6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	60fb      	str	r3, [r7, #12]
}
 800b6fc:	bf00      	nop
 800b6fe:	bf00      	nop
 800b700:	e7fd      	b.n	800b6fe <vTaskStartScheduler+0x9e>
}
 800b702:	bf00      	nop
 800b704:	3718      	adds	r7, #24
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	0800d6fc 	.word	0x0800d6fc
 800b710:	0800bcd1 	.word	0x0800bcd1
 800b714:	20001058 	.word	0x20001058
 800b718:	20001054 	.word	0x20001054
 800b71c:	20001040 	.word	0x20001040
 800b720:	20001038 	.word	0x20001038

0800b724 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b724:	b480      	push	{r7}
 800b726:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b728:	4b04      	ldr	r3, [pc, #16]	@ (800b73c <vTaskSuspendAll+0x18>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	3301      	adds	r3, #1
 800b72e:	4a03      	ldr	r2, [pc, #12]	@ (800b73c <vTaskSuspendAll+0x18>)
 800b730:	6013      	str	r3, [r2, #0]
}
 800b732:	bf00      	nop
 800b734:	46bd      	mov	sp, r7
 800b736:	bc80      	pop	{r7}
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	2000105c 	.word	0x2000105c

0800b740 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b746:	2300      	movs	r3, #0
 800b748:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b74a:	2300      	movs	r3, #0
 800b74c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b74e:	4b42      	ldr	r3, [pc, #264]	@ (800b858 <xTaskResumeAll+0x118>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d10b      	bne.n	800b76e <xTaskResumeAll+0x2e>
	__asm volatile
 800b756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b75a:	f383 8811 	msr	BASEPRI, r3
 800b75e:	f3bf 8f6f 	isb	sy
 800b762:	f3bf 8f4f 	dsb	sy
 800b766:	603b      	str	r3, [r7, #0]
}
 800b768:	bf00      	nop
 800b76a:	bf00      	nop
 800b76c:	e7fd      	b.n	800b76a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b76e:	f000 fd85 	bl	800c27c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b772:	4b39      	ldr	r3, [pc, #228]	@ (800b858 <xTaskResumeAll+0x118>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3b01      	subs	r3, #1
 800b778:	4a37      	ldr	r2, [pc, #220]	@ (800b858 <xTaskResumeAll+0x118>)
 800b77a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b77c:	4b36      	ldr	r3, [pc, #216]	@ (800b858 <xTaskResumeAll+0x118>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d161      	bne.n	800b848 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b784:	4b35      	ldr	r3, [pc, #212]	@ (800b85c <xTaskResumeAll+0x11c>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d05d      	beq.n	800b848 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b78c:	e02e      	b.n	800b7ec <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b78e:	4b34      	ldr	r3, [pc, #208]	@ (800b860 <xTaskResumeAll+0x120>)
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	3318      	adds	r3, #24
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7ff faa2 	bl	800ace4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7ff fa9d 	bl	800ace4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	409a      	lsls	r2, r3
 800b7b2:	4b2c      	ldr	r3, [pc, #176]	@ (800b864 <xTaskResumeAll+0x124>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	4a2a      	ldr	r2, [pc, #168]	@ (800b864 <xTaskResumeAll+0x124>)
 800b7ba:	6013      	str	r3, [r2, #0]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	4413      	add	r3, r2
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	4a27      	ldr	r2, [pc, #156]	@ (800b868 <xTaskResumeAll+0x128>)
 800b7ca:	441a      	add	r2, r3
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	3304      	adds	r3, #4
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	4610      	mov	r0, r2
 800b7d4:	f7ff fa2b 	bl	800ac2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7dc:	4b23      	ldr	r3, [pc, #140]	@ (800b86c <xTaskResumeAll+0x12c>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d302      	bcc.n	800b7ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b7e6:	4b22      	ldr	r3, [pc, #136]	@ (800b870 <xTaskResumeAll+0x130>)
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7ec:	4b1c      	ldr	r3, [pc, #112]	@ (800b860 <xTaskResumeAll+0x120>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1cc      	bne.n	800b78e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d001      	beq.n	800b7fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b7fa:	f000 fb1f 	bl	800be3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b7fe:	4b1d      	ldr	r3, [pc, #116]	@ (800b874 <xTaskResumeAll+0x134>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d010      	beq.n	800b82c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b80a:	f000 f837 	bl	800b87c <xTaskIncrementTick>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d002      	beq.n	800b81a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b814:	4b16      	ldr	r3, [pc, #88]	@ (800b870 <xTaskResumeAll+0x130>)
 800b816:	2201      	movs	r2, #1
 800b818:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	3b01      	subs	r3, #1
 800b81e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1f1      	bne.n	800b80a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b826:	4b13      	ldr	r3, [pc, #76]	@ (800b874 <xTaskResumeAll+0x134>)
 800b828:	2200      	movs	r2, #0
 800b82a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b82c:	4b10      	ldr	r3, [pc, #64]	@ (800b870 <xTaskResumeAll+0x130>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d009      	beq.n	800b848 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b834:	2301      	movs	r3, #1
 800b836:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b838:	4b0f      	ldr	r3, [pc, #60]	@ (800b878 <xTaskResumeAll+0x138>)
 800b83a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b83e:	601a      	str	r2, [r3, #0]
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b848:	f000 fd48 	bl	800c2dc <vPortExitCritical>

	return xAlreadyYielded;
 800b84c:	68bb      	ldr	r3, [r7, #8]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	2000105c 	.word	0x2000105c
 800b85c:	20001034 	.word	0x20001034
 800b860:	20000ff4 	.word	0x20000ff4
 800b864:	2000103c 	.word	0x2000103c
 800b868:	20000f38 	.word	0x20000f38
 800b86c:	20000f34 	.word	0x20000f34
 800b870:	20001048 	.word	0x20001048
 800b874:	20001044 	.word	0x20001044
 800b878:	e000ed04 	.word	0xe000ed04

0800b87c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b086      	sub	sp, #24
 800b880:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b882:	2300      	movs	r3, #0
 800b884:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b886:	4b51      	ldr	r3, [pc, #324]	@ (800b9cc <xTaskIncrementTick+0x150>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f040 808e 	bne.w	800b9ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b890:	4b4f      	ldr	r3, [pc, #316]	@ (800b9d0 <xTaskIncrementTick+0x154>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	3301      	adds	r3, #1
 800b896:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b898:	4a4d      	ldr	r2, [pc, #308]	@ (800b9d0 <xTaskIncrementTick+0x154>)
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d121      	bne.n	800b8e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b8a4:	4b4b      	ldr	r3, [pc, #300]	@ (800b9d4 <xTaskIncrementTick+0x158>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00b      	beq.n	800b8c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	603b      	str	r3, [r7, #0]
}
 800b8c0:	bf00      	nop
 800b8c2:	bf00      	nop
 800b8c4:	e7fd      	b.n	800b8c2 <xTaskIncrementTick+0x46>
 800b8c6:	4b43      	ldr	r3, [pc, #268]	@ (800b9d4 <xTaskIncrementTick+0x158>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	60fb      	str	r3, [r7, #12]
 800b8cc:	4b42      	ldr	r3, [pc, #264]	@ (800b9d8 <xTaskIncrementTick+0x15c>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a40      	ldr	r2, [pc, #256]	@ (800b9d4 <xTaskIncrementTick+0x158>)
 800b8d2:	6013      	str	r3, [r2, #0]
 800b8d4:	4a40      	ldr	r2, [pc, #256]	@ (800b9d8 <xTaskIncrementTick+0x15c>)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6013      	str	r3, [r2, #0]
 800b8da:	4b40      	ldr	r3, [pc, #256]	@ (800b9dc <xTaskIncrementTick+0x160>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	3301      	adds	r3, #1
 800b8e0:	4a3e      	ldr	r2, [pc, #248]	@ (800b9dc <xTaskIncrementTick+0x160>)
 800b8e2:	6013      	str	r3, [r2, #0]
 800b8e4:	f000 faaa 	bl	800be3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b8e8:	4b3d      	ldr	r3, [pc, #244]	@ (800b9e0 <xTaskIncrementTick+0x164>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	693a      	ldr	r2, [r7, #16]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d34d      	bcc.n	800b98e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8f2:	4b38      	ldr	r3, [pc, #224]	@ (800b9d4 <xTaskIncrementTick+0x158>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d101      	bne.n	800b900 <xTaskIncrementTick+0x84>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e000      	b.n	800b902 <xTaskIncrementTick+0x86>
 800b900:	2300      	movs	r3, #0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d004      	beq.n	800b910 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b906:	4b36      	ldr	r3, [pc, #216]	@ (800b9e0 <xTaskIncrementTick+0x164>)
 800b908:	f04f 32ff 	mov.w	r2, #4294967295
 800b90c:	601a      	str	r2, [r3, #0]
					break;
 800b90e:	e03e      	b.n	800b98e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b910:	4b30      	ldr	r3, [pc, #192]	@ (800b9d4 <xTaskIncrementTick+0x158>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68db      	ldr	r3, [r3, #12]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	429a      	cmp	r2, r3
 800b926:	d203      	bcs.n	800b930 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b928:	4a2d      	ldr	r2, [pc, #180]	@ (800b9e0 <xTaskIncrementTick+0x164>)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6013      	str	r3, [r2, #0]
						break;
 800b92e:	e02e      	b.n	800b98e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	3304      	adds	r3, #4
 800b934:	4618      	mov	r0, r3
 800b936:	f7ff f9d5 	bl	800ace4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d004      	beq.n	800b94c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	3318      	adds	r3, #24
 800b946:	4618      	mov	r0, r3
 800b948:	f7ff f9cc 	bl	800ace4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b950:	2201      	movs	r2, #1
 800b952:	409a      	lsls	r2, r3
 800b954:	4b23      	ldr	r3, [pc, #140]	@ (800b9e4 <xTaskIncrementTick+0x168>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4313      	orrs	r3, r2
 800b95a:	4a22      	ldr	r2, [pc, #136]	@ (800b9e4 <xTaskIncrementTick+0x168>)
 800b95c:	6013      	str	r3, [r2, #0]
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b962:	4613      	mov	r3, r2
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	4413      	add	r3, r2
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	4a1f      	ldr	r2, [pc, #124]	@ (800b9e8 <xTaskIncrementTick+0x16c>)
 800b96c:	441a      	add	r2, r3
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	3304      	adds	r3, #4
 800b972:	4619      	mov	r1, r3
 800b974:	4610      	mov	r0, r2
 800b976:	f7ff f95a 	bl	800ac2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b97e:	4b1b      	ldr	r3, [pc, #108]	@ (800b9ec <xTaskIncrementTick+0x170>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b984:	429a      	cmp	r2, r3
 800b986:	d3b4      	bcc.n	800b8f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b988:	2301      	movs	r3, #1
 800b98a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b98c:	e7b1      	b.n	800b8f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b98e:	4b17      	ldr	r3, [pc, #92]	@ (800b9ec <xTaskIncrementTick+0x170>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b994:	4914      	ldr	r1, [pc, #80]	@ (800b9e8 <xTaskIncrementTick+0x16c>)
 800b996:	4613      	mov	r3, r2
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	440b      	add	r3, r1
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d907      	bls.n	800b9b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	617b      	str	r3, [r7, #20]
 800b9aa:	e004      	b.n	800b9b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b9ac:	4b10      	ldr	r3, [pc, #64]	@ (800b9f0 <xTaskIncrementTick+0x174>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	4a0f      	ldr	r2, [pc, #60]	@ (800b9f0 <xTaskIncrementTick+0x174>)
 800b9b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b9b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b9f4 <xTaskIncrementTick+0x178>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b9c2:	697b      	ldr	r3, [r7, #20]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3718      	adds	r7, #24
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}
 800b9cc:	2000105c 	.word	0x2000105c
 800b9d0:	20001038 	.word	0x20001038
 800b9d4:	20000fec 	.word	0x20000fec
 800b9d8:	20000ff0 	.word	0x20000ff0
 800b9dc:	2000104c 	.word	0x2000104c
 800b9e0:	20001054 	.word	0x20001054
 800b9e4:	2000103c 	.word	0x2000103c
 800b9e8:	20000f38 	.word	0x20000f38
 800b9ec:	20000f34 	.word	0x20000f34
 800b9f0:	20001044 	.word	0x20001044
 800b9f4:	20001048 	.word	0x20001048

0800b9f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b087      	sub	sp, #28
 800b9fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b9fe:	4b27      	ldr	r3, [pc, #156]	@ (800ba9c <vTaskSwitchContext+0xa4>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d003      	beq.n	800ba0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba06:	4b26      	ldr	r3, [pc, #152]	@ (800baa0 <vTaskSwitchContext+0xa8>)
 800ba08:	2201      	movs	r2, #1
 800ba0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba0c:	e040      	b.n	800ba90 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800ba0e:	4b24      	ldr	r3, [pc, #144]	@ (800baa0 <vTaskSwitchContext+0xa8>)
 800ba10:	2200      	movs	r2, #0
 800ba12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ba14:	4b23      	ldr	r3, [pc, #140]	@ (800baa4 <vTaskSwitchContext+0xac>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	fab3 f383 	clz	r3, r3
 800ba20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ba22:	7afb      	ldrb	r3, [r7, #11]
 800ba24:	f1c3 031f 	rsb	r3, r3, #31
 800ba28:	617b      	str	r3, [r7, #20]
 800ba2a:	491f      	ldr	r1, [pc, #124]	@ (800baa8 <vTaskSwitchContext+0xb0>)
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	4613      	mov	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4413      	add	r3, r2
 800ba34:	009b      	lsls	r3, r3, #2
 800ba36:	440b      	add	r3, r1
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10b      	bne.n	800ba56 <vTaskSwitchContext+0x5e>
	__asm volatile
 800ba3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba42:	f383 8811 	msr	BASEPRI, r3
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	607b      	str	r3, [r7, #4]
}
 800ba50:	bf00      	nop
 800ba52:	bf00      	nop
 800ba54:	e7fd      	b.n	800ba52 <vTaskSwitchContext+0x5a>
 800ba56:	697a      	ldr	r2, [r7, #20]
 800ba58:	4613      	mov	r3, r2
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	4413      	add	r3, r2
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	4a11      	ldr	r2, [pc, #68]	@ (800baa8 <vTaskSwitchContext+0xb0>)
 800ba62:	4413      	add	r3, r2
 800ba64:	613b      	str	r3, [r7, #16]
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	605a      	str	r2, [r3, #4]
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	685a      	ldr	r2, [r3, #4]
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	3308      	adds	r3, #8
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d104      	bne.n	800ba86 <vTaskSwitchContext+0x8e>
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	685a      	ldr	r2, [r3, #4]
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	605a      	str	r2, [r3, #4]
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	4a07      	ldr	r2, [pc, #28]	@ (800baac <vTaskSwitchContext+0xb4>)
 800ba8e:	6013      	str	r3, [r2, #0]
}
 800ba90:	bf00      	nop
 800ba92:	371c      	adds	r7, #28
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bc80      	pop	{r7}
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	2000105c 	.word	0x2000105c
 800baa0:	20001048 	.word	0x20001048
 800baa4:	2000103c 	.word	0x2000103c
 800baa8:	20000f38 	.word	0x20000f38
 800baac:	20000f34 	.word	0x20000f34

0800bab0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d10b      	bne.n	800bad8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bac4:	f383 8811 	msr	BASEPRI, r3
 800bac8:	f3bf 8f6f 	isb	sy
 800bacc:	f3bf 8f4f 	dsb	sy
 800bad0:	60fb      	str	r3, [r7, #12]
}
 800bad2:	bf00      	nop
 800bad4:	bf00      	nop
 800bad6:	e7fd      	b.n	800bad4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bad8:	4b07      	ldr	r3, [pc, #28]	@ (800baf8 <vTaskPlaceOnEventList+0x48>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	3318      	adds	r3, #24
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7ff f8c7 	bl	800ac74 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bae6:	2101      	movs	r1, #1
 800bae8:	6838      	ldr	r0, [r7, #0]
 800baea:	f000 fa71 	bl	800bfd0 <prvAddCurrentTaskToDelayedList>
}
 800baee:	bf00      	nop
 800baf0:	3710      	adds	r7, #16
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	20000f34 	.word	0x20000f34

0800bafc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b086      	sub	sp, #24
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d10b      	bne.n	800bb2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bb12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb16:	f383 8811 	msr	BASEPRI, r3
 800bb1a:	f3bf 8f6f 	isb	sy
 800bb1e:	f3bf 8f4f 	dsb	sy
 800bb22:	60fb      	str	r3, [r7, #12]
}
 800bb24:	bf00      	nop
 800bb26:	bf00      	nop
 800bb28:	e7fd      	b.n	800bb26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	3318      	adds	r3, #24
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7ff f8d8 	bl	800ace4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb34:	4b1d      	ldr	r3, [pc, #116]	@ (800bbac <xTaskRemoveFromEventList+0xb0>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d11c      	bne.n	800bb76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	3304      	adds	r3, #4
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7ff f8cf 	bl	800ace4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	409a      	lsls	r2, r3
 800bb4e:	4b18      	ldr	r3, [pc, #96]	@ (800bbb0 <xTaskRemoveFromEventList+0xb4>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	4a16      	ldr	r2, [pc, #88]	@ (800bbb0 <xTaskRemoveFromEventList+0xb4>)
 800bb56:	6013      	str	r3, [r2, #0]
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	4413      	add	r3, r2
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	4a13      	ldr	r2, [pc, #76]	@ (800bbb4 <xTaskRemoveFromEventList+0xb8>)
 800bb66:	441a      	add	r2, r3
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	4610      	mov	r0, r2
 800bb70:	f7ff f85d 	bl	800ac2e <vListInsertEnd>
 800bb74:	e005      	b.n	800bb82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	3318      	adds	r3, #24
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	480e      	ldr	r0, [pc, #56]	@ (800bbb8 <xTaskRemoveFromEventList+0xbc>)
 800bb7e:	f7ff f856 	bl	800ac2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb86:	4b0d      	ldr	r3, [pc, #52]	@ (800bbbc <xTaskRemoveFromEventList+0xc0>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d905      	bls.n	800bb9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bb90:	2301      	movs	r3, #1
 800bb92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bb94:	4b0a      	ldr	r3, [pc, #40]	@ (800bbc0 <xTaskRemoveFromEventList+0xc4>)
 800bb96:	2201      	movs	r2, #1
 800bb98:	601a      	str	r2, [r3, #0]
 800bb9a:	e001      	b.n	800bba0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800bba0:	697b      	ldr	r3, [r7, #20]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3718      	adds	r7, #24
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	2000105c 	.word	0x2000105c
 800bbb0:	2000103c 	.word	0x2000103c
 800bbb4:	20000f38 	.word	0x20000f38
 800bbb8:	20000ff4 	.word	0x20000ff4
 800bbbc:	20000f34 	.word	0x20000f34
 800bbc0:	20001048 	.word	0x20001048

0800bbc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bbcc:	4b06      	ldr	r3, [pc, #24]	@ (800bbe8 <vTaskInternalSetTimeOutState+0x24>)
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bbd4:	4b05      	ldr	r3, [pc, #20]	@ (800bbec <vTaskInternalSetTimeOutState+0x28>)
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	605a      	str	r2, [r3, #4]
}
 800bbdc:	bf00      	nop
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bc80      	pop	{r7}
 800bbe4:	4770      	bx	lr
 800bbe6:	bf00      	nop
 800bbe8:	2000104c 	.word	0x2000104c
 800bbec:	20001038 	.word	0x20001038

0800bbf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b088      	sub	sp, #32
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d10b      	bne.n	800bc18 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bc00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc04:	f383 8811 	msr	BASEPRI, r3
 800bc08:	f3bf 8f6f 	isb	sy
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	613b      	str	r3, [r7, #16]
}
 800bc12:	bf00      	nop
 800bc14:	bf00      	nop
 800bc16:	e7fd      	b.n	800bc14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d10b      	bne.n	800bc36 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bc1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	60fb      	str	r3, [r7, #12]
}
 800bc30:	bf00      	nop
 800bc32:	bf00      	nop
 800bc34:	e7fd      	b.n	800bc32 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bc36:	f000 fb21 	bl	800c27c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc3a:	4b1d      	ldr	r3, [pc, #116]	@ (800bcb0 <xTaskCheckForTimeOut+0xc0>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	69ba      	ldr	r2, [r7, #24]
 800bc46:	1ad3      	subs	r3, r2, r3
 800bc48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc52:	d102      	bne.n	800bc5a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc54:	2300      	movs	r3, #0
 800bc56:	61fb      	str	r3, [r7, #28]
 800bc58:	e023      	b.n	800bca2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	4b15      	ldr	r3, [pc, #84]	@ (800bcb4 <xTaskCheckForTimeOut+0xc4>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d007      	beq.n	800bc76 <xTaskCheckForTimeOut+0x86>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	69ba      	ldr	r2, [r7, #24]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d302      	bcc.n	800bc76 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc70:	2301      	movs	r3, #1
 800bc72:	61fb      	str	r3, [r7, #28]
 800bc74:	e015      	b.n	800bca2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	697a      	ldr	r2, [r7, #20]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d20b      	bcs.n	800bc98 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	1ad2      	subs	r2, r2, r3
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7ff ff99 	bl	800bbc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc92:	2300      	movs	r3, #0
 800bc94:	61fb      	str	r3, [r7, #28]
 800bc96:	e004      	b.n	800bca2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bca2:	f000 fb1b 	bl	800c2dc <vPortExitCritical>

	return xReturn;
 800bca6:	69fb      	ldr	r3, [r7, #28]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3720      	adds	r7, #32
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}
 800bcb0:	20001038 	.word	0x20001038
 800bcb4:	2000104c 	.word	0x2000104c

0800bcb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bcb8:	b480      	push	{r7}
 800bcba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bcbc:	4b03      	ldr	r3, [pc, #12]	@ (800bccc <vTaskMissedYield+0x14>)
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	601a      	str	r2, [r3, #0]
}
 800bcc2:	bf00      	nop
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bc80      	pop	{r7}
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	20001048 	.word	0x20001048

0800bcd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bcd8:	f000 f852 	bl	800bd80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bcdc:	4b06      	ldr	r3, [pc, #24]	@ (800bcf8 <prvIdleTask+0x28>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d9f9      	bls.n	800bcd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bce4:	4b05      	ldr	r3, [pc, #20]	@ (800bcfc <prvIdleTask+0x2c>)
 800bce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcea:	601a      	str	r2, [r3, #0]
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bcf4:	e7f0      	b.n	800bcd8 <prvIdleTask+0x8>
 800bcf6:	bf00      	nop
 800bcf8:	20000f38 	.word	0x20000f38
 800bcfc:	e000ed04 	.word	0xe000ed04

0800bd00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd06:	2300      	movs	r3, #0
 800bd08:	607b      	str	r3, [r7, #4]
 800bd0a:	e00c      	b.n	800bd26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	4a12      	ldr	r2, [pc, #72]	@ (800bd60 <prvInitialiseTaskLists+0x60>)
 800bd18:	4413      	add	r3, r2
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7fe ff5c 	bl	800abd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	3301      	adds	r3, #1
 800bd24:	607b      	str	r3, [r7, #4]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2b06      	cmp	r3, #6
 800bd2a:	d9ef      	bls.n	800bd0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd2c:	480d      	ldr	r0, [pc, #52]	@ (800bd64 <prvInitialiseTaskLists+0x64>)
 800bd2e:	f7fe ff53 	bl	800abd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd32:	480d      	ldr	r0, [pc, #52]	@ (800bd68 <prvInitialiseTaskLists+0x68>)
 800bd34:	f7fe ff50 	bl	800abd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd38:	480c      	ldr	r0, [pc, #48]	@ (800bd6c <prvInitialiseTaskLists+0x6c>)
 800bd3a:	f7fe ff4d 	bl	800abd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd3e:	480c      	ldr	r0, [pc, #48]	@ (800bd70 <prvInitialiseTaskLists+0x70>)
 800bd40:	f7fe ff4a 	bl	800abd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd44:	480b      	ldr	r0, [pc, #44]	@ (800bd74 <prvInitialiseTaskLists+0x74>)
 800bd46:	f7fe ff47 	bl	800abd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd4a:	4b0b      	ldr	r3, [pc, #44]	@ (800bd78 <prvInitialiseTaskLists+0x78>)
 800bd4c:	4a05      	ldr	r2, [pc, #20]	@ (800bd64 <prvInitialiseTaskLists+0x64>)
 800bd4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd50:	4b0a      	ldr	r3, [pc, #40]	@ (800bd7c <prvInitialiseTaskLists+0x7c>)
 800bd52:	4a05      	ldr	r2, [pc, #20]	@ (800bd68 <prvInitialiseTaskLists+0x68>)
 800bd54:	601a      	str	r2, [r3, #0]
}
 800bd56:	bf00      	nop
 800bd58:	3708      	adds	r7, #8
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	20000f38 	.word	0x20000f38
 800bd64:	20000fc4 	.word	0x20000fc4
 800bd68:	20000fd8 	.word	0x20000fd8
 800bd6c:	20000ff4 	.word	0x20000ff4
 800bd70:	20001008 	.word	0x20001008
 800bd74:	20001020 	.word	0x20001020
 800bd78:	20000fec 	.word	0x20000fec
 800bd7c:	20000ff0 	.word	0x20000ff0

0800bd80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd86:	e019      	b.n	800bdbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd88:	f000 fa78 	bl	800c27c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bd8c:	4b10      	ldr	r3, [pc, #64]	@ (800bdd0 <prvCheckTasksWaitingTermination+0x50>)
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	3304      	adds	r3, #4
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7fe ffa3 	bl	800ace4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bd9e:	4b0d      	ldr	r3, [pc, #52]	@ (800bdd4 <prvCheckTasksWaitingTermination+0x54>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	3b01      	subs	r3, #1
 800bda4:	4a0b      	ldr	r2, [pc, #44]	@ (800bdd4 <prvCheckTasksWaitingTermination+0x54>)
 800bda6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bda8:	4b0b      	ldr	r3, [pc, #44]	@ (800bdd8 <prvCheckTasksWaitingTermination+0x58>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	3b01      	subs	r3, #1
 800bdae:	4a0a      	ldr	r2, [pc, #40]	@ (800bdd8 <prvCheckTasksWaitingTermination+0x58>)
 800bdb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bdb2:	f000 fa93 	bl	800c2dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 f810 	bl	800bddc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdbc:	4b06      	ldr	r3, [pc, #24]	@ (800bdd8 <prvCheckTasksWaitingTermination+0x58>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d1e1      	bne.n	800bd88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bdc4:	bf00      	nop
 800bdc6:	bf00      	nop
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	20001008 	.word	0x20001008
 800bdd4:	20001034 	.word	0x20001034
 800bdd8:	2000101c 	.word	0x2000101c

0800bddc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d108      	bne.n	800be00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f000 fbcc 	bl	800c590 <vPortFree>
				vPortFree( pxTCB );
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 fbc9 	bl	800c590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bdfe:	e019      	b.n	800be34 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800be06:	2b01      	cmp	r3, #1
 800be08:	d103      	bne.n	800be12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fbc0 	bl	800c590 <vPortFree>
	}
 800be10:	e010      	b.n	800be34 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800be18:	2b02      	cmp	r3, #2
 800be1a:	d00b      	beq.n	800be34 <prvDeleteTCB+0x58>
	__asm volatile
 800be1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be20:	f383 8811 	msr	BASEPRI, r3
 800be24:	f3bf 8f6f 	isb	sy
 800be28:	f3bf 8f4f 	dsb	sy
 800be2c:	60fb      	str	r3, [r7, #12]
}
 800be2e:	bf00      	nop
 800be30:	bf00      	nop
 800be32:	e7fd      	b.n	800be30 <prvDeleteTCB+0x54>
	}
 800be34:	bf00      	nop
 800be36:	3710      	adds	r7, #16
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be42:	4b0e      	ldr	r3, [pc, #56]	@ (800be7c <prvResetNextTaskUnblockTime+0x40>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d101      	bne.n	800be50 <prvResetNextTaskUnblockTime+0x14>
 800be4c:	2301      	movs	r3, #1
 800be4e:	e000      	b.n	800be52 <prvResetNextTaskUnblockTime+0x16>
 800be50:	2300      	movs	r3, #0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d004      	beq.n	800be60 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be56:	4b0a      	ldr	r3, [pc, #40]	@ (800be80 <prvResetNextTaskUnblockTime+0x44>)
 800be58:	f04f 32ff 	mov.w	r2, #4294967295
 800be5c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be5e:	e008      	b.n	800be72 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800be60:	4b06      	ldr	r3, [pc, #24]	@ (800be7c <prvResetNextTaskUnblockTime+0x40>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	68db      	ldr	r3, [r3, #12]
 800be68:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	4a04      	ldr	r2, [pc, #16]	@ (800be80 <prvResetNextTaskUnblockTime+0x44>)
 800be70:	6013      	str	r3, [r2, #0]
}
 800be72:	bf00      	nop
 800be74:	370c      	adds	r7, #12
 800be76:	46bd      	mov	sp, r7
 800be78:	bc80      	pop	{r7}
 800be7a:	4770      	bx	lr
 800be7c:	20000fec 	.word	0x20000fec
 800be80:	20001054 	.word	0x20001054

0800be84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be8a:	4b0b      	ldr	r3, [pc, #44]	@ (800beb8 <xTaskGetSchedulerState+0x34>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d102      	bne.n	800be98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be92:	2301      	movs	r3, #1
 800be94:	607b      	str	r3, [r7, #4]
 800be96:	e008      	b.n	800beaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be98:	4b08      	ldr	r3, [pc, #32]	@ (800bebc <xTaskGetSchedulerState+0x38>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d102      	bne.n	800bea6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bea0:	2302      	movs	r3, #2
 800bea2:	607b      	str	r3, [r7, #4]
 800bea4:	e001      	b.n	800beaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bea6:	2300      	movs	r3, #0
 800bea8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800beaa:	687b      	ldr	r3, [r7, #4]
	}
 800beac:	4618      	mov	r0, r3
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bc80      	pop	{r7}
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop
 800beb8:	20001040 	.word	0x20001040
 800bebc:	2000105c 	.word	0x2000105c

0800bec0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b086      	sub	sp, #24
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800becc:	2300      	movs	r3, #0
 800bece:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d070      	beq.n	800bfb8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bed6:	4b3b      	ldr	r3, [pc, #236]	@ (800bfc4 <xTaskPriorityDisinherit+0x104>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	693a      	ldr	r2, [r7, #16]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d00b      	beq.n	800bef8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee4:	f383 8811 	msr	BASEPRI, r3
 800bee8:	f3bf 8f6f 	isb	sy
 800beec:	f3bf 8f4f 	dsb	sy
 800bef0:	60fb      	str	r3, [r7, #12]
}
 800bef2:	bf00      	nop
 800bef4:	bf00      	nop
 800bef6:	e7fd      	b.n	800bef4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800befc:	2b00      	cmp	r3, #0
 800befe:	d10b      	bne.n	800bf18 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bf00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf04:	f383 8811 	msr	BASEPRI, r3
 800bf08:	f3bf 8f6f 	isb	sy
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	60bb      	str	r3, [r7, #8]
}
 800bf12:	bf00      	nop
 800bf14:	bf00      	nop
 800bf16:	e7fd      	b.n	800bf14 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf1c:	1e5a      	subs	r2, r3, #1
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d044      	beq.n	800bfb8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d140      	bne.n	800bfb8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	3304      	adds	r3, #4
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7fe fed2 	bl	800ace4 <uxListRemove>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d115      	bne.n	800bf72 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf4a:	491f      	ldr	r1, [pc, #124]	@ (800bfc8 <xTaskPriorityDisinherit+0x108>)
 800bf4c:	4613      	mov	r3, r2
 800bf4e:	009b      	lsls	r3, r3, #2
 800bf50:	4413      	add	r3, r2
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	440b      	add	r3, r1
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d10a      	bne.n	800bf72 <xTaskPriorityDisinherit+0xb2>
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf60:	2201      	movs	r2, #1
 800bf62:	fa02 f303 	lsl.w	r3, r2, r3
 800bf66:	43da      	mvns	r2, r3
 800bf68:	4b18      	ldr	r3, [pc, #96]	@ (800bfcc <xTaskPriorityDisinherit+0x10c>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4013      	ands	r3, r2
 800bf6e:	4a17      	ldr	r2, [pc, #92]	@ (800bfcc <xTaskPriorityDisinherit+0x10c>)
 800bf70:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf7e:	f1c3 0207 	rsb	r2, r3, #7
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	409a      	lsls	r2, r3
 800bf8e:	4b0f      	ldr	r3, [pc, #60]	@ (800bfcc <xTaskPriorityDisinherit+0x10c>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4313      	orrs	r3, r2
 800bf94:	4a0d      	ldr	r2, [pc, #52]	@ (800bfcc <xTaskPriorityDisinherit+0x10c>)
 800bf96:	6013      	str	r3, [r2, #0]
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	4413      	add	r3, r2
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	4a08      	ldr	r2, [pc, #32]	@ (800bfc8 <xTaskPriorityDisinherit+0x108>)
 800bfa6:	441a      	add	r2, r3
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	3304      	adds	r3, #4
 800bfac:	4619      	mov	r1, r3
 800bfae:	4610      	mov	r0, r2
 800bfb0:	f7fe fe3d 	bl	800ac2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bfb8:	697b      	ldr	r3, [r7, #20]
	}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3718      	adds	r7, #24
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	20000f34 	.word	0x20000f34
 800bfc8:	20000f38 	.word	0x20000f38
 800bfcc:	2000103c 	.word	0x2000103c

0800bfd0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b084      	sub	sp, #16
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bfda:	4b29      	ldr	r3, [pc, #164]	@ (800c080 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfe0:	4b28      	ldr	r3, [pc, #160]	@ (800c084 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7fe fe7c 	bl	800ace4 <uxListRemove>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d10b      	bne.n	800c00a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800bff2:	4b24      	ldr	r3, [pc, #144]	@ (800c084 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bff8:	2201      	movs	r2, #1
 800bffa:	fa02 f303 	lsl.w	r3, r2, r3
 800bffe:	43da      	mvns	r2, r3
 800c000:	4b21      	ldr	r3, [pc, #132]	@ (800c088 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4013      	ands	r3, r2
 800c006:	4a20      	ldr	r2, [pc, #128]	@ (800c088 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c008:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c010:	d10a      	bne.n	800c028 <prvAddCurrentTaskToDelayedList+0x58>
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d007      	beq.n	800c028 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c018:	4b1a      	ldr	r3, [pc, #104]	@ (800c084 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	3304      	adds	r3, #4
 800c01e:	4619      	mov	r1, r3
 800c020:	481a      	ldr	r0, [pc, #104]	@ (800c08c <prvAddCurrentTaskToDelayedList+0xbc>)
 800c022:	f7fe fe04 	bl	800ac2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c026:	e026      	b.n	800c076 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4413      	add	r3, r2
 800c02e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c030:	4b14      	ldr	r3, [pc, #80]	@ (800c084 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	68ba      	ldr	r2, [r7, #8]
 800c036:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c038:	68ba      	ldr	r2, [r7, #8]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d209      	bcs.n	800c054 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c040:	4b13      	ldr	r3, [pc, #76]	@ (800c090 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	4b0f      	ldr	r3, [pc, #60]	@ (800c084 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	3304      	adds	r3, #4
 800c04a:	4619      	mov	r1, r3
 800c04c:	4610      	mov	r0, r2
 800c04e:	f7fe fe11 	bl	800ac74 <vListInsert>
}
 800c052:	e010      	b.n	800c076 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c054:	4b0f      	ldr	r3, [pc, #60]	@ (800c094 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	4b0a      	ldr	r3, [pc, #40]	@ (800c084 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	3304      	adds	r3, #4
 800c05e:	4619      	mov	r1, r3
 800c060:	4610      	mov	r0, r2
 800c062:	f7fe fe07 	bl	800ac74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c066:	4b0c      	ldr	r3, [pc, #48]	@ (800c098 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d202      	bcs.n	800c076 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c070:	4a09      	ldr	r2, [pc, #36]	@ (800c098 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	6013      	str	r3, [r2, #0]
}
 800c076:	bf00      	nop
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	20001038 	.word	0x20001038
 800c084:	20000f34 	.word	0x20000f34
 800c088:	2000103c 	.word	0x2000103c
 800c08c:	20001020 	.word	0x20001020
 800c090:	20000ff0 	.word	0x20000ff0
 800c094:	20000fec 	.word	0x20000fec
 800c098:	20001054 	.word	0x20001054

0800c09c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c09c:	b480      	push	{r7}
 800c09e:	b085      	sub	sp, #20
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	3b04      	subs	r3, #4
 800c0ac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c0b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	3b04      	subs	r3, #4
 800c0ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	f023 0201 	bic.w	r2, r3, #1
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	3b04      	subs	r3, #4
 800c0ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0cc:	4a08      	ldr	r2, [pc, #32]	@ (800c0f0 <pxPortInitialiseStack+0x54>)
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	3b14      	subs	r3, #20
 800c0d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3b20      	subs	r3, #32
 800c0e2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3714      	adds	r7, #20
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bc80      	pop	{r7}
 800c0ee:	4770      	bx	lr
 800c0f0:	0800c0f5 	.word	0x0800c0f5

0800c0f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c0fe:	4b12      	ldr	r3, [pc, #72]	@ (800c148 <prvTaskExitError+0x54>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c106:	d00b      	beq.n	800c120 <prvTaskExitError+0x2c>
	__asm volatile
 800c108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c10c:	f383 8811 	msr	BASEPRI, r3
 800c110:	f3bf 8f6f 	isb	sy
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	60fb      	str	r3, [r7, #12]
}
 800c11a:	bf00      	nop
 800c11c:	bf00      	nop
 800c11e:	e7fd      	b.n	800c11c <prvTaskExitError+0x28>
	__asm volatile
 800c120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c124:	f383 8811 	msr	BASEPRI, r3
 800c128:	f3bf 8f6f 	isb	sy
 800c12c:	f3bf 8f4f 	dsb	sy
 800c130:	60bb      	str	r3, [r7, #8]
}
 800c132:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c134:	bf00      	nop
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d0fc      	beq.n	800c136 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c13c:	bf00      	nop
 800c13e:	bf00      	nop
 800c140:	3714      	adds	r7, #20
 800c142:	46bd      	mov	sp, r7
 800c144:	bc80      	pop	{r7}
 800c146:	4770      	bx	lr
 800c148:	20000950 	.word	0x20000950
 800c14c:	00000000 	.word	0x00000000

0800c150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c150:	4b07      	ldr	r3, [pc, #28]	@ (800c170 <pxCurrentTCBConst2>)
 800c152:	6819      	ldr	r1, [r3, #0]
 800c154:	6808      	ldr	r0, [r1, #0]
 800c156:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c15a:	f380 8809 	msr	PSP, r0
 800c15e:	f3bf 8f6f 	isb	sy
 800c162:	f04f 0000 	mov.w	r0, #0
 800c166:	f380 8811 	msr	BASEPRI, r0
 800c16a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c16e:	4770      	bx	lr

0800c170 <pxCurrentTCBConst2>:
 800c170:	20000f34 	.word	0x20000f34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c174:	bf00      	nop
 800c176:	bf00      	nop

0800c178 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c178:	4806      	ldr	r0, [pc, #24]	@ (800c194 <prvPortStartFirstTask+0x1c>)
 800c17a:	6800      	ldr	r0, [r0, #0]
 800c17c:	6800      	ldr	r0, [r0, #0]
 800c17e:	f380 8808 	msr	MSP, r0
 800c182:	b662      	cpsie	i
 800c184:	b661      	cpsie	f
 800c186:	f3bf 8f4f 	dsb	sy
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	df00      	svc	0
 800c190:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c192:	bf00      	nop
 800c194:	e000ed08 	.word	0xe000ed08

0800c198 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c19e:	4b32      	ldr	r3, [pc, #200]	@ (800c268 <xPortStartScheduler+0xd0>)
 800c1a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	22ff      	movs	r2, #255	@ 0xff
 800c1ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c1b8:	78fb      	ldrb	r3, [r7, #3]
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c1c0:	b2da      	uxtb	r2, r3
 800c1c2:	4b2a      	ldr	r3, [pc, #168]	@ (800c26c <xPortStartScheduler+0xd4>)
 800c1c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c1c6:	4b2a      	ldr	r3, [pc, #168]	@ (800c270 <xPortStartScheduler+0xd8>)
 800c1c8:	2207      	movs	r2, #7
 800c1ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1cc:	e009      	b.n	800c1e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c1ce:	4b28      	ldr	r3, [pc, #160]	@ (800c270 <xPortStartScheduler+0xd8>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	4a26      	ldr	r2, [pc, #152]	@ (800c270 <xPortStartScheduler+0xd8>)
 800c1d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c1d8:	78fb      	ldrb	r3, [r7, #3]
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	005b      	lsls	r3, r3, #1
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1e2:	78fb      	ldrb	r3, [r7, #3]
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1ea:	2b80      	cmp	r3, #128	@ 0x80
 800c1ec:	d0ef      	beq.n	800c1ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c1ee:	4b20      	ldr	r3, [pc, #128]	@ (800c270 <xPortStartScheduler+0xd8>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f1c3 0307 	rsb	r3, r3, #7
 800c1f6:	2b04      	cmp	r3, #4
 800c1f8:	d00b      	beq.n	800c212 <xPortStartScheduler+0x7a>
	__asm volatile
 800c1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fe:	f383 8811 	msr	BASEPRI, r3
 800c202:	f3bf 8f6f 	isb	sy
 800c206:	f3bf 8f4f 	dsb	sy
 800c20a:	60bb      	str	r3, [r7, #8]
}
 800c20c:	bf00      	nop
 800c20e:	bf00      	nop
 800c210:	e7fd      	b.n	800c20e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c212:	4b17      	ldr	r3, [pc, #92]	@ (800c270 <xPortStartScheduler+0xd8>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	021b      	lsls	r3, r3, #8
 800c218:	4a15      	ldr	r2, [pc, #84]	@ (800c270 <xPortStartScheduler+0xd8>)
 800c21a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c21c:	4b14      	ldr	r3, [pc, #80]	@ (800c270 <xPortStartScheduler+0xd8>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c224:	4a12      	ldr	r2, [pc, #72]	@ (800c270 <xPortStartScheduler+0xd8>)
 800c226:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	b2da      	uxtb	r2, r3
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c230:	4b10      	ldr	r3, [pc, #64]	@ (800c274 <xPortStartScheduler+0xdc>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a0f      	ldr	r2, [pc, #60]	@ (800c274 <xPortStartScheduler+0xdc>)
 800c236:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c23a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c23c:	4b0d      	ldr	r3, [pc, #52]	@ (800c274 <xPortStartScheduler+0xdc>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a0c      	ldr	r2, [pc, #48]	@ (800c274 <xPortStartScheduler+0xdc>)
 800c242:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c246:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c248:	f000 f8b8 	bl	800c3bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c24c:	4b0a      	ldr	r3, [pc, #40]	@ (800c278 <xPortStartScheduler+0xe0>)
 800c24e:	2200      	movs	r2, #0
 800c250:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c252:	f7ff ff91 	bl	800c178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c256:	f7ff fbcf 	bl	800b9f8 <vTaskSwitchContext>
	prvTaskExitError();
 800c25a:	f7ff ff4b 	bl	800c0f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3710      	adds	r7, #16
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	e000e400 	.word	0xe000e400
 800c26c:	20001060 	.word	0x20001060
 800c270:	20001064 	.word	0x20001064
 800c274:	e000ed20 	.word	0xe000ed20
 800c278:	20000950 	.word	0x20000950

0800c27c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	607b      	str	r3, [r7, #4]
}
 800c294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c296:	4b0f      	ldr	r3, [pc, #60]	@ (800c2d4 <vPortEnterCritical+0x58>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	3301      	adds	r3, #1
 800c29c:	4a0d      	ldr	r2, [pc, #52]	@ (800c2d4 <vPortEnterCritical+0x58>)
 800c29e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c2a0:	4b0c      	ldr	r3, [pc, #48]	@ (800c2d4 <vPortEnterCritical+0x58>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d110      	bne.n	800c2ca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c2a8:	4b0b      	ldr	r3, [pc, #44]	@ (800c2d8 <vPortEnterCritical+0x5c>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00b      	beq.n	800c2ca <vPortEnterCritical+0x4e>
	__asm volatile
 800c2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2b6:	f383 8811 	msr	BASEPRI, r3
 800c2ba:	f3bf 8f6f 	isb	sy
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	603b      	str	r3, [r7, #0]
}
 800c2c4:	bf00      	nop
 800c2c6:	bf00      	nop
 800c2c8:	e7fd      	b.n	800c2c6 <vPortEnterCritical+0x4a>
	}
}
 800c2ca:	bf00      	nop
 800c2cc:	370c      	adds	r7, #12
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bc80      	pop	{r7}
 800c2d2:	4770      	bx	lr
 800c2d4:	20000950 	.word	0x20000950
 800c2d8:	e000ed04 	.word	0xe000ed04

0800c2dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b083      	sub	sp, #12
 800c2e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c2e2:	4b12      	ldr	r3, [pc, #72]	@ (800c32c <vPortExitCritical+0x50>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d10b      	bne.n	800c302 <vPortExitCritical+0x26>
	__asm volatile
 800c2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ee:	f383 8811 	msr	BASEPRI, r3
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	607b      	str	r3, [r7, #4]
}
 800c2fc:	bf00      	nop
 800c2fe:	bf00      	nop
 800c300:	e7fd      	b.n	800c2fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c302:	4b0a      	ldr	r3, [pc, #40]	@ (800c32c <vPortExitCritical+0x50>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	3b01      	subs	r3, #1
 800c308:	4a08      	ldr	r2, [pc, #32]	@ (800c32c <vPortExitCritical+0x50>)
 800c30a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c30c:	4b07      	ldr	r3, [pc, #28]	@ (800c32c <vPortExitCritical+0x50>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d105      	bne.n	800c320 <vPortExitCritical+0x44>
 800c314:	2300      	movs	r3, #0
 800c316:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c31e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c320:	bf00      	nop
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	bc80      	pop	{r7}
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	20000950 	.word	0x20000950

0800c330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c330:	f3ef 8009 	mrs	r0, PSP
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	4b0d      	ldr	r3, [pc, #52]	@ (800c370 <pxCurrentTCBConst>)
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c340:	6010      	str	r0, [r2, #0]
 800c342:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c346:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c34a:	f380 8811 	msr	BASEPRI, r0
 800c34e:	f7ff fb53 	bl	800b9f8 <vTaskSwitchContext>
 800c352:	f04f 0000 	mov.w	r0, #0
 800c356:	f380 8811 	msr	BASEPRI, r0
 800c35a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c35e:	6819      	ldr	r1, [r3, #0]
 800c360:	6808      	ldr	r0, [r1, #0]
 800c362:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c366:	f380 8809 	msr	PSP, r0
 800c36a:	f3bf 8f6f 	isb	sy
 800c36e:	4770      	bx	lr

0800c370 <pxCurrentTCBConst>:
 800c370:	20000f34 	.word	0x20000f34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c374:	bf00      	nop
 800c376:	bf00      	nop

0800c378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	607b      	str	r3, [r7, #4]
}
 800c390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c392:	f7ff fa73 	bl	800b87c <xTaskIncrementTick>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d003      	beq.n	800c3a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c39c:	4b06      	ldr	r3, [pc, #24]	@ (800c3b8 <xPortSysTickHandler+0x40>)
 800c39e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	f383 8811 	msr	BASEPRI, r3
}
 800c3ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c3b0:	bf00      	nop
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	e000ed04 	.word	0xe000ed04

0800c3bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c3bc:	b480      	push	{r7}
 800c3be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c3c0:	4b0a      	ldr	r3, [pc, #40]	@ (800c3ec <vPortSetupTimerInterrupt+0x30>)
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c3c6:	4b0a      	ldr	r3, [pc, #40]	@ (800c3f0 <vPortSetupTimerInterrupt+0x34>)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c3cc:	4b09      	ldr	r3, [pc, #36]	@ (800c3f4 <vPortSetupTimerInterrupt+0x38>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a09      	ldr	r2, [pc, #36]	@ (800c3f8 <vPortSetupTimerInterrupt+0x3c>)
 800c3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3d6:	099b      	lsrs	r3, r3, #6
 800c3d8:	4a08      	ldr	r2, [pc, #32]	@ (800c3fc <vPortSetupTimerInterrupt+0x40>)
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c3de:	4b03      	ldr	r3, [pc, #12]	@ (800c3ec <vPortSetupTimerInterrupt+0x30>)
 800c3e0:	2207      	movs	r2, #7
 800c3e2:	601a      	str	r2, [r3, #0]
}
 800c3e4:	bf00      	nop
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bc80      	pop	{r7}
 800c3ea:	4770      	bx	lr
 800c3ec:	e000e010 	.word	0xe000e010
 800c3f0:	e000e018 	.word	0xe000e018
 800c3f4:	20000944 	.word	0x20000944
 800c3f8:	10624dd3 	.word	0x10624dd3
 800c3fc:	e000e014 	.word	0xe000e014

0800c400 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b08a      	sub	sp, #40	@ 0x28
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c408:	2300      	movs	r3, #0
 800c40a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c40c:	f7ff f98a 	bl	800b724 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c410:	4b5a      	ldr	r3, [pc, #360]	@ (800c57c <pvPortMalloc+0x17c>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d101      	bne.n	800c41c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c418:	f000 f916 	bl	800c648 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c41c:	4b58      	ldr	r3, [pc, #352]	@ (800c580 <pvPortMalloc+0x180>)
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	4013      	ands	r3, r2
 800c424:	2b00      	cmp	r3, #0
 800c426:	f040 8090 	bne.w	800c54a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d01e      	beq.n	800c46e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c430:	2208      	movs	r2, #8
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4413      	add	r3, r2
 800c436:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f003 0307 	and.w	r3, r3, #7
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d015      	beq.n	800c46e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f023 0307 	bic.w	r3, r3, #7
 800c448:	3308      	adds	r3, #8
 800c44a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f003 0307 	and.w	r3, r3, #7
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00b      	beq.n	800c46e <pvPortMalloc+0x6e>
	__asm volatile
 800c456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c45a:	f383 8811 	msr	BASEPRI, r3
 800c45e:	f3bf 8f6f 	isb	sy
 800c462:	f3bf 8f4f 	dsb	sy
 800c466:	617b      	str	r3, [r7, #20]
}
 800c468:	bf00      	nop
 800c46a:	bf00      	nop
 800c46c:	e7fd      	b.n	800c46a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d06a      	beq.n	800c54a <pvPortMalloc+0x14a>
 800c474:	4b43      	ldr	r3, [pc, #268]	@ (800c584 <pvPortMalloc+0x184>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d865      	bhi.n	800c54a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c47e:	4b42      	ldr	r3, [pc, #264]	@ (800c588 <pvPortMalloc+0x188>)
 800c480:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c482:	4b41      	ldr	r3, [pc, #260]	@ (800c588 <pvPortMalloc+0x188>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c488:	e004      	b.n	800c494 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c48c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d903      	bls.n	800c4a6 <pvPortMalloc+0xa6>
 800c49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d1f1      	bne.n	800c48a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c4a6:	4b35      	ldr	r3, [pc, #212]	@ (800c57c <pvPortMalloc+0x17c>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d04c      	beq.n	800c54a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c4b0:	6a3b      	ldr	r3, [r7, #32]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2208      	movs	r2, #8
 800c4b6:	4413      	add	r3, r2
 800c4b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	6a3b      	ldr	r3, [r7, #32]
 800c4c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c4:	685a      	ldr	r2, [r3, #4]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	1ad2      	subs	r2, r2, r3
 800c4ca:	2308      	movs	r3, #8
 800c4cc:	005b      	lsls	r3, r3, #1
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d920      	bls.n	800c514 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c4d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	f003 0307 	and.w	r3, r3, #7
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00b      	beq.n	800c4fc <pvPortMalloc+0xfc>
	__asm volatile
 800c4e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e8:	f383 8811 	msr	BASEPRI, r3
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	f3bf 8f4f 	dsb	sy
 800c4f4:	613b      	str	r3, [r7, #16]
}
 800c4f6:	bf00      	nop
 800c4f8:	bf00      	nop
 800c4fa:	e7fd      	b.n	800c4f8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4fe:	685a      	ldr	r2, [r3, #4]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	1ad2      	subs	r2, r2, r3
 800c504:	69bb      	ldr	r3, [r7, #24]
 800c506:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c50e:	69b8      	ldr	r0, [r7, #24]
 800c510:	f000 f8fc 	bl	800c70c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c514:	4b1b      	ldr	r3, [pc, #108]	@ (800c584 <pvPortMalloc+0x184>)
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	4a19      	ldr	r2, [pc, #100]	@ (800c584 <pvPortMalloc+0x184>)
 800c520:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c522:	4b18      	ldr	r3, [pc, #96]	@ (800c584 <pvPortMalloc+0x184>)
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	4b19      	ldr	r3, [pc, #100]	@ (800c58c <pvPortMalloc+0x18c>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d203      	bcs.n	800c536 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c52e:	4b15      	ldr	r3, [pc, #84]	@ (800c584 <pvPortMalloc+0x184>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4a16      	ldr	r2, [pc, #88]	@ (800c58c <pvPortMalloc+0x18c>)
 800c534:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c538:	685a      	ldr	r2, [r3, #4]
 800c53a:	4b11      	ldr	r3, [pc, #68]	@ (800c580 <pvPortMalloc+0x180>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	431a      	orrs	r2, r3
 800c540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c542:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c546:	2200      	movs	r2, #0
 800c548:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c54a:	f7ff f8f9 	bl	800b740 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c54e:	69fb      	ldr	r3, [r7, #28]
 800c550:	f003 0307 	and.w	r3, r3, #7
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00b      	beq.n	800c570 <pvPortMalloc+0x170>
	__asm volatile
 800c558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c55c:	f383 8811 	msr	BASEPRI, r3
 800c560:	f3bf 8f6f 	isb	sy
 800c564:	f3bf 8f4f 	dsb	sy
 800c568:	60fb      	str	r3, [r7, #12]
}
 800c56a:	bf00      	nop
 800c56c:	bf00      	nop
 800c56e:	e7fd      	b.n	800c56c <pvPortMalloc+0x16c>
	return pvReturn;
 800c570:	69fb      	ldr	r3, [r7, #28]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3728      	adds	r7, #40	@ 0x28
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	20001c70 	.word	0x20001c70
 800c580:	20001c7c 	.word	0x20001c7c
 800c584:	20001c74 	.word	0x20001c74
 800c588:	20001c68 	.word	0x20001c68
 800c58c:	20001c78 	.word	0x20001c78

0800c590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b086      	sub	sp, #24
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d04a      	beq.n	800c638 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c5a2:	2308      	movs	r3, #8
 800c5a4:	425b      	negs	r3, r3
 800c5a6:	697a      	ldr	r2, [r7, #20]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	685a      	ldr	r2, [r3, #4]
 800c5b4:	4b22      	ldr	r3, [pc, #136]	@ (800c640 <vPortFree+0xb0>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4013      	ands	r3, r2
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10b      	bne.n	800c5d6 <vPortFree+0x46>
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	60fb      	str	r3, [r7, #12]
}
 800c5d0:	bf00      	nop
 800c5d2:	bf00      	nop
 800c5d4:	e7fd      	b.n	800c5d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00b      	beq.n	800c5f6 <vPortFree+0x66>
	__asm volatile
 800c5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e2:	f383 8811 	msr	BASEPRI, r3
 800c5e6:	f3bf 8f6f 	isb	sy
 800c5ea:	f3bf 8f4f 	dsb	sy
 800c5ee:	60bb      	str	r3, [r7, #8]
}
 800c5f0:	bf00      	nop
 800c5f2:	bf00      	nop
 800c5f4:	e7fd      	b.n	800c5f2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	685a      	ldr	r2, [r3, #4]
 800c5fa:	4b11      	ldr	r3, [pc, #68]	@ (800c640 <vPortFree+0xb0>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4013      	ands	r3, r2
 800c600:	2b00      	cmp	r3, #0
 800c602:	d019      	beq.n	800c638 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d115      	bne.n	800c638 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	685a      	ldr	r2, [r3, #4]
 800c610:	4b0b      	ldr	r3, [pc, #44]	@ (800c640 <vPortFree+0xb0>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	43db      	mvns	r3, r3
 800c616:	401a      	ands	r2, r3
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c61c:	f7ff f882 	bl	800b724 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	685a      	ldr	r2, [r3, #4]
 800c624:	4b07      	ldr	r3, [pc, #28]	@ (800c644 <vPortFree+0xb4>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4413      	add	r3, r2
 800c62a:	4a06      	ldr	r2, [pc, #24]	@ (800c644 <vPortFree+0xb4>)
 800c62c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c62e:	6938      	ldr	r0, [r7, #16]
 800c630:	f000 f86c 	bl	800c70c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c634:	f7ff f884 	bl	800b740 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c638:	bf00      	nop
 800c63a:	3718      	adds	r7, #24
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	20001c7c 	.word	0x20001c7c
 800c644:	20001c74 	.word	0x20001c74

0800c648 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c648:	b480      	push	{r7}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c64e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800c652:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c654:	4b27      	ldr	r3, [pc, #156]	@ (800c6f4 <prvHeapInit+0xac>)
 800c656:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f003 0307 	and.w	r3, r3, #7
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00c      	beq.n	800c67c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	3307      	adds	r3, #7
 800c666:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f023 0307 	bic.w	r3, r3, #7
 800c66e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c670:	68ba      	ldr	r2, [r7, #8]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	1ad3      	subs	r3, r2, r3
 800c676:	4a1f      	ldr	r2, [pc, #124]	@ (800c6f4 <prvHeapInit+0xac>)
 800c678:	4413      	add	r3, r2
 800c67a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c680:	4a1d      	ldr	r2, [pc, #116]	@ (800c6f8 <prvHeapInit+0xb0>)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c686:	4b1c      	ldr	r3, [pc, #112]	@ (800c6f8 <prvHeapInit+0xb0>)
 800c688:	2200      	movs	r2, #0
 800c68a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	4413      	add	r3, r2
 800c692:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c694:	2208      	movs	r2, #8
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	1a9b      	subs	r3, r3, r2
 800c69a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f023 0307 	bic.w	r3, r3, #7
 800c6a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	4a15      	ldr	r2, [pc, #84]	@ (800c6fc <prvHeapInit+0xb4>)
 800c6a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c6aa:	4b14      	ldr	r3, [pc, #80]	@ (800c6fc <prvHeapInit+0xb4>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c6b2:	4b12      	ldr	r3, [pc, #72]	@ (800c6fc <prvHeapInit+0xb4>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	68fa      	ldr	r2, [r7, #12]
 800c6c2:	1ad2      	subs	r2, r2, r3
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c6c8:	4b0c      	ldr	r3, [pc, #48]	@ (800c6fc <prvHeapInit+0xb4>)
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	4a0a      	ldr	r2, [pc, #40]	@ (800c700 <prvHeapInit+0xb8>)
 800c6d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	4a09      	ldr	r2, [pc, #36]	@ (800c704 <prvHeapInit+0xbc>)
 800c6de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c6e0:	4b09      	ldr	r3, [pc, #36]	@ (800c708 <prvHeapInit+0xc0>)
 800c6e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c6e6:	601a      	str	r2, [r3, #0]
}
 800c6e8:	bf00      	nop
 800c6ea:	3714      	adds	r7, #20
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bc80      	pop	{r7}
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	20001068 	.word	0x20001068
 800c6f8:	20001c68 	.word	0x20001c68
 800c6fc:	20001c70 	.word	0x20001c70
 800c700:	20001c78 	.word	0x20001c78
 800c704:	20001c74 	.word	0x20001c74
 800c708:	20001c7c 	.word	0x20001c7c

0800c70c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c70c:	b480      	push	{r7}
 800c70e:	b085      	sub	sp, #20
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c714:	4b27      	ldr	r3, [pc, #156]	@ (800c7b4 <prvInsertBlockIntoFreeList+0xa8>)
 800c716:	60fb      	str	r3, [r7, #12]
 800c718:	e002      	b.n	800c720 <prvInsertBlockIntoFreeList+0x14>
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	60fb      	str	r3, [r7, #12]
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	429a      	cmp	r2, r3
 800c728:	d8f7      	bhi.n	800c71a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	68ba      	ldr	r2, [r7, #8]
 800c734:	4413      	add	r3, r2
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d108      	bne.n	800c74e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	685a      	ldr	r2, [r3, #4]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	441a      	add	r2, r3
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	68ba      	ldr	r2, [r7, #8]
 800c758:	441a      	add	r2, r3
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d118      	bne.n	800c794 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	4b14      	ldr	r3, [pc, #80]	@ (800c7b8 <prvInsertBlockIntoFreeList+0xac>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d00d      	beq.n	800c78a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	685a      	ldr	r2, [r3, #4]
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	441a      	add	r2, r3
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	601a      	str	r2, [r3, #0]
 800c788:	e008      	b.n	800c79c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c78a:	4b0b      	ldr	r3, [pc, #44]	@ (800c7b8 <prvInsertBlockIntoFreeList+0xac>)
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	601a      	str	r2, [r3, #0]
 800c792:	e003      	b.n	800c79c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c79c:	68fa      	ldr	r2, [r7, #12]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d002      	beq.n	800c7aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7aa:	bf00      	nop
 800c7ac:	3714      	adds	r7, #20
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bc80      	pop	{r7}
 800c7b2:	4770      	bx	lr
 800c7b4:	20001c68 	.word	0x20001c68
 800c7b8:	20001c70 	.word	0x20001c70

0800c7bc <__itoa>:
 800c7bc:	1e93      	subs	r3, r2, #2
 800c7be:	2b22      	cmp	r3, #34	@ 0x22
 800c7c0:	b510      	push	{r4, lr}
 800c7c2:	460c      	mov	r4, r1
 800c7c4:	d904      	bls.n	800c7d0 <__itoa+0x14>
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	461c      	mov	r4, r3
 800c7ca:	700b      	strb	r3, [r1, #0]
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	bd10      	pop	{r4, pc}
 800c7d0:	2a0a      	cmp	r2, #10
 800c7d2:	d109      	bne.n	800c7e8 <__itoa+0x2c>
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	da07      	bge.n	800c7e8 <__itoa+0x2c>
 800c7d8:	232d      	movs	r3, #45	@ 0x2d
 800c7da:	700b      	strb	r3, [r1, #0]
 800c7dc:	2101      	movs	r1, #1
 800c7de:	4240      	negs	r0, r0
 800c7e0:	4421      	add	r1, r4
 800c7e2:	f000 f8bb 	bl	800c95c <__utoa>
 800c7e6:	e7f1      	b.n	800c7cc <__itoa+0x10>
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	e7f9      	b.n	800c7e0 <__itoa+0x24>

0800c7ec <itoa>:
 800c7ec:	f7ff bfe6 	b.w	800c7bc <__itoa>

0800c7f0 <malloc>:
 800c7f0:	4b02      	ldr	r3, [pc, #8]	@ (800c7fc <malloc+0xc>)
 800c7f2:	4601      	mov	r1, r0
 800c7f4:	6818      	ldr	r0, [r3, #0]
 800c7f6:	f000 b825 	b.w	800c844 <_malloc_r>
 800c7fa:	bf00      	nop
 800c7fc:	20000954 	.word	0x20000954

0800c800 <sbrk_aligned>:
 800c800:	b570      	push	{r4, r5, r6, lr}
 800c802:	4e0f      	ldr	r6, [pc, #60]	@ (800c840 <sbrk_aligned+0x40>)
 800c804:	460c      	mov	r4, r1
 800c806:	6831      	ldr	r1, [r6, #0]
 800c808:	4605      	mov	r5, r0
 800c80a:	b911      	cbnz	r1, 800c812 <sbrk_aligned+0x12>
 800c80c:	f000 f8f0 	bl	800c9f0 <_sbrk_r>
 800c810:	6030      	str	r0, [r6, #0]
 800c812:	4621      	mov	r1, r4
 800c814:	4628      	mov	r0, r5
 800c816:	f000 f8eb 	bl	800c9f0 <_sbrk_r>
 800c81a:	1c43      	adds	r3, r0, #1
 800c81c:	d103      	bne.n	800c826 <sbrk_aligned+0x26>
 800c81e:	f04f 34ff 	mov.w	r4, #4294967295
 800c822:	4620      	mov	r0, r4
 800c824:	bd70      	pop	{r4, r5, r6, pc}
 800c826:	1cc4      	adds	r4, r0, #3
 800c828:	f024 0403 	bic.w	r4, r4, #3
 800c82c:	42a0      	cmp	r0, r4
 800c82e:	d0f8      	beq.n	800c822 <sbrk_aligned+0x22>
 800c830:	1a21      	subs	r1, r4, r0
 800c832:	4628      	mov	r0, r5
 800c834:	f000 f8dc 	bl	800c9f0 <_sbrk_r>
 800c838:	3001      	adds	r0, #1
 800c83a:	d1f2      	bne.n	800c822 <sbrk_aligned+0x22>
 800c83c:	e7ef      	b.n	800c81e <sbrk_aligned+0x1e>
 800c83e:	bf00      	nop
 800c840:	20001c80 	.word	0x20001c80

0800c844 <_malloc_r>:
 800c844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c848:	1ccd      	adds	r5, r1, #3
 800c84a:	f025 0503 	bic.w	r5, r5, #3
 800c84e:	3508      	adds	r5, #8
 800c850:	2d0c      	cmp	r5, #12
 800c852:	bf38      	it	cc
 800c854:	250c      	movcc	r5, #12
 800c856:	2d00      	cmp	r5, #0
 800c858:	4606      	mov	r6, r0
 800c85a:	db01      	blt.n	800c860 <_malloc_r+0x1c>
 800c85c:	42a9      	cmp	r1, r5
 800c85e:	d904      	bls.n	800c86a <_malloc_r+0x26>
 800c860:	230c      	movs	r3, #12
 800c862:	6033      	str	r3, [r6, #0]
 800c864:	2000      	movs	r0, #0
 800c866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c86a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c940 <_malloc_r+0xfc>
 800c86e:	f000 f869 	bl	800c944 <__malloc_lock>
 800c872:	f8d8 3000 	ldr.w	r3, [r8]
 800c876:	461c      	mov	r4, r3
 800c878:	bb44      	cbnz	r4, 800c8cc <_malloc_r+0x88>
 800c87a:	4629      	mov	r1, r5
 800c87c:	4630      	mov	r0, r6
 800c87e:	f7ff ffbf 	bl	800c800 <sbrk_aligned>
 800c882:	1c43      	adds	r3, r0, #1
 800c884:	4604      	mov	r4, r0
 800c886:	d158      	bne.n	800c93a <_malloc_r+0xf6>
 800c888:	f8d8 4000 	ldr.w	r4, [r8]
 800c88c:	4627      	mov	r7, r4
 800c88e:	2f00      	cmp	r7, #0
 800c890:	d143      	bne.n	800c91a <_malloc_r+0xd6>
 800c892:	2c00      	cmp	r4, #0
 800c894:	d04b      	beq.n	800c92e <_malloc_r+0xea>
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	4639      	mov	r1, r7
 800c89a:	4630      	mov	r0, r6
 800c89c:	eb04 0903 	add.w	r9, r4, r3
 800c8a0:	f000 f8a6 	bl	800c9f0 <_sbrk_r>
 800c8a4:	4581      	cmp	r9, r0
 800c8a6:	d142      	bne.n	800c92e <_malloc_r+0xea>
 800c8a8:	6821      	ldr	r1, [r4, #0]
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	1a6d      	subs	r5, r5, r1
 800c8ae:	4629      	mov	r1, r5
 800c8b0:	f7ff ffa6 	bl	800c800 <sbrk_aligned>
 800c8b4:	3001      	adds	r0, #1
 800c8b6:	d03a      	beq.n	800c92e <_malloc_r+0xea>
 800c8b8:	6823      	ldr	r3, [r4, #0]
 800c8ba:	442b      	add	r3, r5
 800c8bc:	6023      	str	r3, [r4, #0]
 800c8be:	f8d8 3000 	ldr.w	r3, [r8]
 800c8c2:	685a      	ldr	r2, [r3, #4]
 800c8c4:	bb62      	cbnz	r2, 800c920 <_malloc_r+0xdc>
 800c8c6:	f8c8 7000 	str.w	r7, [r8]
 800c8ca:	e00f      	b.n	800c8ec <_malloc_r+0xa8>
 800c8cc:	6822      	ldr	r2, [r4, #0]
 800c8ce:	1b52      	subs	r2, r2, r5
 800c8d0:	d420      	bmi.n	800c914 <_malloc_r+0xd0>
 800c8d2:	2a0b      	cmp	r2, #11
 800c8d4:	d917      	bls.n	800c906 <_malloc_r+0xc2>
 800c8d6:	1961      	adds	r1, r4, r5
 800c8d8:	42a3      	cmp	r3, r4
 800c8da:	6025      	str	r5, [r4, #0]
 800c8dc:	bf18      	it	ne
 800c8de:	6059      	strne	r1, [r3, #4]
 800c8e0:	6863      	ldr	r3, [r4, #4]
 800c8e2:	bf08      	it	eq
 800c8e4:	f8c8 1000 	streq.w	r1, [r8]
 800c8e8:	5162      	str	r2, [r4, r5]
 800c8ea:	604b      	str	r3, [r1, #4]
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	f000 f82f 	bl	800c950 <__malloc_unlock>
 800c8f2:	f104 000b 	add.w	r0, r4, #11
 800c8f6:	1d23      	adds	r3, r4, #4
 800c8f8:	f020 0007 	bic.w	r0, r0, #7
 800c8fc:	1ac2      	subs	r2, r0, r3
 800c8fe:	bf1c      	itt	ne
 800c900:	1a1b      	subne	r3, r3, r0
 800c902:	50a3      	strne	r3, [r4, r2]
 800c904:	e7af      	b.n	800c866 <_malloc_r+0x22>
 800c906:	6862      	ldr	r2, [r4, #4]
 800c908:	42a3      	cmp	r3, r4
 800c90a:	bf0c      	ite	eq
 800c90c:	f8c8 2000 	streq.w	r2, [r8]
 800c910:	605a      	strne	r2, [r3, #4]
 800c912:	e7eb      	b.n	800c8ec <_malloc_r+0xa8>
 800c914:	4623      	mov	r3, r4
 800c916:	6864      	ldr	r4, [r4, #4]
 800c918:	e7ae      	b.n	800c878 <_malloc_r+0x34>
 800c91a:	463c      	mov	r4, r7
 800c91c:	687f      	ldr	r7, [r7, #4]
 800c91e:	e7b6      	b.n	800c88e <_malloc_r+0x4a>
 800c920:	461a      	mov	r2, r3
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	42a3      	cmp	r3, r4
 800c926:	d1fb      	bne.n	800c920 <_malloc_r+0xdc>
 800c928:	2300      	movs	r3, #0
 800c92a:	6053      	str	r3, [r2, #4]
 800c92c:	e7de      	b.n	800c8ec <_malloc_r+0xa8>
 800c92e:	230c      	movs	r3, #12
 800c930:	4630      	mov	r0, r6
 800c932:	6033      	str	r3, [r6, #0]
 800c934:	f000 f80c 	bl	800c950 <__malloc_unlock>
 800c938:	e794      	b.n	800c864 <_malloc_r+0x20>
 800c93a:	6005      	str	r5, [r0, #0]
 800c93c:	e7d6      	b.n	800c8ec <_malloc_r+0xa8>
 800c93e:	bf00      	nop
 800c940:	20001c84 	.word	0x20001c84

0800c944 <__malloc_lock>:
 800c944:	4801      	ldr	r0, [pc, #4]	@ (800c94c <__malloc_lock+0x8>)
 800c946:	f000 b88d 	b.w	800ca64 <__retarget_lock_acquire_recursive>
 800c94a:	bf00      	nop
 800c94c:	20001dc4 	.word	0x20001dc4

0800c950 <__malloc_unlock>:
 800c950:	4801      	ldr	r0, [pc, #4]	@ (800c958 <__malloc_unlock+0x8>)
 800c952:	f000 b888 	b.w	800ca66 <__retarget_lock_release_recursive>
 800c956:	bf00      	nop
 800c958:	20001dc4 	.word	0x20001dc4

0800c95c <__utoa>:
 800c95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c95e:	b08b      	sub	sp, #44	@ 0x2c
 800c960:	4605      	mov	r5, r0
 800c962:	460b      	mov	r3, r1
 800c964:	466e      	mov	r6, sp
 800c966:	4c1d      	ldr	r4, [pc, #116]	@ (800c9dc <__utoa+0x80>)
 800c968:	f104 0c20 	add.w	ip, r4, #32
 800c96c:	4637      	mov	r7, r6
 800c96e:	6820      	ldr	r0, [r4, #0]
 800c970:	6861      	ldr	r1, [r4, #4]
 800c972:	3408      	adds	r4, #8
 800c974:	c703      	stmia	r7!, {r0, r1}
 800c976:	4564      	cmp	r4, ip
 800c978:	463e      	mov	r6, r7
 800c97a:	d1f7      	bne.n	800c96c <__utoa+0x10>
 800c97c:	7921      	ldrb	r1, [r4, #4]
 800c97e:	6820      	ldr	r0, [r4, #0]
 800c980:	7139      	strb	r1, [r7, #4]
 800c982:	1e91      	subs	r1, r2, #2
 800c984:	2922      	cmp	r1, #34	@ 0x22
 800c986:	6038      	str	r0, [r7, #0]
 800c988:	f04f 0100 	mov.w	r1, #0
 800c98c:	d904      	bls.n	800c998 <__utoa+0x3c>
 800c98e:	7019      	strb	r1, [r3, #0]
 800c990:	460b      	mov	r3, r1
 800c992:	4618      	mov	r0, r3
 800c994:	b00b      	add	sp, #44	@ 0x2c
 800c996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c998:	1e58      	subs	r0, r3, #1
 800c99a:	4684      	mov	ip, r0
 800c99c:	fbb5 f7f2 	udiv	r7, r5, r2
 800c9a0:	fb02 5617 	mls	r6, r2, r7, r5
 800c9a4:	3628      	adds	r6, #40	@ 0x28
 800c9a6:	446e      	add	r6, sp
 800c9a8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c9ac:	460c      	mov	r4, r1
 800c9ae:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c9b2:	462e      	mov	r6, r5
 800c9b4:	42b2      	cmp	r2, r6
 800c9b6:	463d      	mov	r5, r7
 800c9b8:	f101 0101 	add.w	r1, r1, #1
 800c9bc:	d9ee      	bls.n	800c99c <__utoa+0x40>
 800c9be:	2200      	movs	r2, #0
 800c9c0:	545a      	strb	r2, [r3, r1]
 800c9c2:	1919      	adds	r1, r3, r4
 800c9c4:	1aa5      	subs	r5, r4, r2
 800c9c6:	42aa      	cmp	r2, r5
 800c9c8:	dae3      	bge.n	800c992 <__utoa+0x36>
 800c9ca:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c9ce:	780e      	ldrb	r6, [r1, #0]
 800c9d0:	3201      	adds	r2, #1
 800c9d2:	7006      	strb	r6, [r0, #0]
 800c9d4:	f801 5901 	strb.w	r5, [r1], #-1
 800c9d8:	e7f4      	b.n	800c9c4 <__utoa+0x68>
 800c9da:	bf00      	nop
 800c9dc:	0800d71c 	.word	0x0800d71c

0800c9e0 <memset>:
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	4402      	add	r2, r0
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d100      	bne.n	800c9ea <memset+0xa>
 800c9e8:	4770      	bx	lr
 800c9ea:	f803 1b01 	strb.w	r1, [r3], #1
 800c9ee:	e7f9      	b.n	800c9e4 <memset+0x4>

0800c9f0 <_sbrk_r>:
 800c9f0:	b538      	push	{r3, r4, r5, lr}
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	4d05      	ldr	r5, [pc, #20]	@ (800ca0c <_sbrk_r+0x1c>)
 800c9f6:	4604      	mov	r4, r0
 800c9f8:	4608      	mov	r0, r1
 800c9fa:	602b      	str	r3, [r5, #0]
 800c9fc:	f7fa ffe8 	bl	80079d0 <_sbrk>
 800ca00:	1c43      	adds	r3, r0, #1
 800ca02:	d102      	bne.n	800ca0a <_sbrk_r+0x1a>
 800ca04:	682b      	ldr	r3, [r5, #0]
 800ca06:	b103      	cbz	r3, 800ca0a <_sbrk_r+0x1a>
 800ca08:	6023      	str	r3, [r4, #0]
 800ca0a:	bd38      	pop	{r3, r4, r5, pc}
 800ca0c:	20001dc0 	.word	0x20001dc0

0800ca10 <__errno>:
 800ca10:	4b01      	ldr	r3, [pc, #4]	@ (800ca18 <__errno+0x8>)
 800ca12:	6818      	ldr	r0, [r3, #0]
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop
 800ca18:	20000954 	.word	0x20000954

0800ca1c <__libc_init_array>:
 800ca1c:	b570      	push	{r4, r5, r6, lr}
 800ca1e:	2600      	movs	r6, #0
 800ca20:	4d0c      	ldr	r5, [pc, #48]	@ (800ca54 <__libc_init_array+0x38>)
 800ca22:	4c0d      	ldr	r4, [pc, #52]	@ (800ca58 <__libc_init_array+0x3c>)
 800ca24:	1b64      	subs	r4, r4, r5
 800ca26:	10a4      	asrs	r4, r4, #2
 800ca28:	42a6      	cmp	r6, r4
 800ca2a:	d109      	bne.n	800ca40 <__libc_init_array+0x24>
 800ca2c:	f000 f832 	bl	800ca94 <_init>
 800ca30:	2600      	movs	r6, #0
 800ca32:	4d0a      	ldr	r5, [pc, #40]	@ (800ca5c <__libc_init_array+0x40>)
 800ca34:	4c0a      	ldr	r4, [pc, #40]	@ (800ca60 <__libc_init_array+0x44>)
 800ca36:	1b64      	subs	r4, r4, r5
 800ca38:	10a4      	asrs	r4, r4, #2
 800ca3a:	42a6      	cmp	r6, r4
 800ca3c:	d105      	bne.n	800ca4a <__libc_init_array+0x2e>
 800ca3e:	bd70      	pop	{r4, r5, r6, pc}
 800ca40:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca44:	4798      	blx	r3
 800ca46:	3601      	adds	r6, #1
 800ca48:	e7ee      	b.n	800ca28 <__libc_init_array+0xc>
 800ca4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca4e:	4798      	blx	r3
 800ca50:	3601      	adds	r6, #1
 800ca52:	e7f2      	b.n	800ca3a <__libc_init_array+0x1e>
 800ca54:	0800d74c 	.word	0x0800d74c
 800ca58:	0800d74c 	.word	0x0800d74c
 800ca5c:	0800d74c 	.word	0x0800d74c
 800ca60:	0800d750 	.word	0x0800d750

0800ca64 <__retarget_lock_acquire_recursive>:
 800ca64:	4770      	bx	lr

0800ca66 <__retarget_lock_release_recursive>:
 800ca66:	4770      	bx	lr

0800ca68 <strcpy>:
 800ca68:	4603      	mov	r3, r0
 800ca6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca6e:	f803 2b01 	strb.w	r2, [r3], #1
 800ca72:	2a00      	cmp	r2, #0
 800ca74:	d1f9      	bne.n	800ca6a <strcpy+0x2>
 800ca76:	4770      	bx	lr

0800ca78 <memcpy>:
 800ca78:	440a      	add	r2, r1
 800ca7a:	4291      	cmp	r1, r2
 800ca7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca80:	d100      	bne.n	800ca84 <memcpy+0xc>
 800ca82:	4770      	bx	lr
 800ca84:	b510      	push	{r4, lr}
 800ca86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca8a:	4291      	cmp	r1, r2
 800ca8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca90:	d1f9      	bne.n	800ca86 <memcpy+0xe>
 800ca92:	bd10      	pop	{r4, pc}

0800ca94 <_init>:
 800ca94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca96:	bf00      	nop
 800ca98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca9a:	bc08      	pop	{r3}
 800ca9c:	469e      	mov	lr, r3
 800ca9e:	4770      	bx	lr

0800caa0 <_fini>:
 800caa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caa2:	bf00      	nop
 800caa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caa6:	bc08      	pop	{r3}
 800caa8:	469e      	mov	lr, r3
 800caaa:	4770      	bx	lr
